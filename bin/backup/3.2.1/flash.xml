<haxe>
	<class path="Array" params="T" file="C:\HaxeToolkit\haxe\std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end	of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` exceeds or equals `pos`,
		the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.ArraySort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, the result is the empty
		Array [].

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use Std.string() to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed acoordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurense of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurense of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<map public="1" params="S" set="method">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" set="method">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.</haxe_doc>
	</class>
	<abstract path="Class" params="T" file="C:\HaxeToolkit\haxe\std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="C:\HaxeToolkit\haxe\std/Date.hx" extern="1">
		<now public="1" set="method" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" set="method" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from timestamp `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from a formated string `s`, with the following accepted
		formats:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats are expressed in local time, the third in UTC
		Epoch.</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp of the date. It might only have a per-second
		precision depending on the platforms.</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range).</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range).</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of the `this` Date (0-59 range).</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4-digits).</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range).</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range).</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range).</haxe_doc>
		</getDay>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date, by using the
		standard format [YYYY-MM-DD HH:MM:SS]. See `DateTools.format` for
		other formating rules.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There is some extra functions available in the `DateTools` class.

	In the context of haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
	</class>
	<class path="DateTools" params="" file="C:\HaxeToolkit\haxe\std/DateTools.hx">
		<__format_get set="method" line="36" static="1">
			<f a="d:e">
				<c path="Date"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__format_get>
		<__format set="method" line="91" static="1"><f a="d:f">
	<c path="Date"/>
	<c path="String"/>
	<c path="String"/>
</f></__format>
		<format public="1" set="method" line="116" static="1">
			<f a="d:f">
				<c path="Date"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Format the date `d` according to the format `f`. The format is
		compatible with the `strftime` standard format, except that there is no
		support in Flash and JS for day and months names (due to lack of proper
		internationalization API). On Haxe/Neko/Windows, some formats are not
		supported.</haxe_doc>
		</format>
		<delta public="1" get="inline" set="null" line="132" static="1">
			<f a="d:t">
				<c path="Date"/>
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns the result of adding timestamp `t` to Date `d`.

		This is a convenience function for calling
		`Date.fromTime(d.getTime() + t)`.</haxe_doc>
		</delta>
		<DAYS_OF_MONTH expr="[31,28,31,30,31,30,31,31,30,31,30,31]" line="136" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[31,28,31,30,31,30,31,31,30,31,30,31]</e></m></meta>
		</DAYS_OF_MONTH>
		<getMonthDays public="1" set="method" line="143" static="1">
			<f a="d">
				<c path="Date"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of days in the month of Date `d`.

		This method handles leap years.</haxe_doc>
		</getMonthDays>
		<seconds public="1" get="inline" set="null" line="157" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of seconds to a timestamp.</haxe_doc>
		</seconds>
		<minutes public="1" get="inline" set="null" line="164" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of minutes to a timestamp.</haxe_doc>
		</minutes>
		<hours public="1" get="inline" set="null" line="171" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of hours to a timestamp.</haxe_doc>
		</hours>
		<days public="1" get="inline" set="null" line="178" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of days to a timestamp.</haxe_doc>
		</days>
		<parse public="1" set="method" line="185" static="1">
			<f a="t">
				<x path="Float"/>
				<a>
					<seconds><x path="Int"/></seconds>
					<ms><x path="Float"/></ms>
					<minutes><x path="Int"/></minutes>
					<hours><x path="Int"/></hours>
					<days><x path="Int"/></days>
				</a>
			</f>
			<haxe_doc>Separate a date-time into several components</haxe_doc>
		</parse>
		<make public="1" set="method" line="201" static="1">
			<f a="o">
				<a>
					<seconds><x path="Int"/></seconds>
					<ms><x path="Float"/></ms>
					<minutes><x path="Int"/></minutes>
					<hours><x path="Int"/></hours>
					<days><x path="Int"/></days>
				</a>
				<x path="Float"/>
			</f>
			<haxe_doc>Build a date-time from several components</haxe_doc>
		</make>
		<makeUtc public="1" get="inline" set="null" line="209" static="1">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Retrieve Unix timestamp value from Date components. Takes same argument sequence as the Date constructor.</haxe_doc>
		</makeUtc>
		<haxe_doc>The DateTools class contains some extra functionalities for handling `Date`
	instances and timestamps.

	In the context of haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
	</class>
	<class path="EReg" params="" file="C:\HaxeToolkit\haxe\std/flash/_std/EReg.hx">
		<r><c path="flash.utils.RegExp"/></r>
		<result><d/></result>
		<match public="1" set="method" line="31">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `this` regular expression matches String `s`.

		This method modifies the internal state.

		If `s` is `null`, the result is unspecified.</haxe_doc>
		</match>
		<matched public="1" set="method" line="37">
			<f a="n">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the matched sub-group `n` of `this` EReg.

		This method should only be called after `this.match` or
		`this.matchSub`, and then operates on the String of that operation.

		The index `n` corresponds to the n-th set of parentheses in the pattern
		of `this` EReg. If no such sub-group exists, an exception is thrown.

		If `n` equals 0, the whole matched substring is returned.</haxe_doc>
		</matched>
		<matchedLeft public="1" set="method" line="41">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the part to the left of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the left of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedLeft>
		<matchedRight public="1" set="method" line="47">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the part to the right of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the right of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedRight>
		<matchedPos public="1" set="method" line="54">
			<f a=""><a>
	<pos><x path="Int"/></pos>
	<len><x path="Int"/></len>
</a></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the position and length of the last matched substring, within
		the String which was last used as argument to `this.match` or
		`this.matchSub`.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, the position and
		length of the leftmost substring is returned.</haxe_doc>
		</matchedPos>
		<matchSub public="1" set="method" line="59">
			<f a="s:pos:?len" v="::-1">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e>{len:-1}</e></m>
			</meta>
			<haxe_doc>Tells if `this` regular expression matches a substring of String `s`.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.match(s.substr(pos,len))` can be used instead.

		This method modifies the internal state.

		If `s` is null, the result is unspecified.</haxe_doc>
		</matchSub>
		<split public="1" set="method" line="78">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Splits String `s` at all substrings `this` EReg matches.

		If a match is found at the start of `s`, the result contains a leading
		empty String "" entry.

		If a match is found at the end of `s`, the result contains a trailing
		empty String "" entry.

		If two matching substrings appear next to each other, the result
		contains the empty String "" between them.

		By default, this method splits `s` into two parts at the first matched
		substring. If the global g modifier is in place, `s` is split at each
		matched substring.

		If `s` is null, the result is unspecified.</haxe_doc>
		</split>
		<replace public="1" set="method" line="85">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Replaces the first substring of `s` which `this` EReg matches with `by`.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `by` contains `$1` to `$9`, the digit corresponds to number of a
		matched sub-group and its value is used instead. If no such sub-group
		exists, the replacement is unspecified. The string `$$` becomes `$`.

		If `s` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<map public="1" set="method" line="89">
			<f a="s:f">
				<c path="String"/>
				<f a="">
					<c path="EReg"/>
					<c path="String"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>Calls the function `f` for the substring of `s` which `this` EReg matches
		and replaces that substring with the result of `f` call.

		The `f` function takes `this` EReg object as its first argument and should
		return a replacement string for the substring matched.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `s` or `f` are null, the result is unspecified.</haxe_doc>
		</map>
		<new public="1" set="method" line="27">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new regular expression with pattern `r` and modifiers `opt`.

		This is equivalent to the shorthand syntax `~/r/opt`

		If `r` or `opt` are null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc>The EReg class represents regular expressions.

	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.

	EReg instances can be created by calling the constructor, or with the
	special syntax ~/pattern/modifier

	EReg instances maintain an internal state, which is affected by several of
	its methods.

	A detailed explanation of the supported operations is available at
	http://haxe.org/manual/std-regex.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="Enum" params="T" file="C:\HaxeToolkit\haxe\std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="C:\HaxeToolkit\haxe\std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<class path="IntIterator" params="" file="C:\HaxeToolkit\haxe\std/IntIterator.hx">
		<min><x path="Int"/></min>
		<max><x path="Int"/></max>
		<hasNext public="1" get="inline" set="null" line="52">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns true if the iterator has other items, false otherwise.</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="61">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Moves to the next item of the iterator.

		If this is called while hasNext() is false, the result is unspecified.</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="44">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Iterates from `min` (inclusive) to `max` (exclusive).

		If `max <= min`, the iterator will not act as a countdown.]]></haxe_doc>
		</new>
		<haxe_doc>IntIterator is used for implementing interval iterations.

	It is usually not used explicitly, but through its special syntax:
	`min...max`

	While it is possible to assign an instance of IntIterator to a variable or
	field, it is worth noting that IntIterator does not reset after being used
	in a for-loop. Subsequent uses of the same instance will then have no
	effect.</haxe_doc>
	</class>
	<class path="Lambda" params="" file="C:\HaxeToolkit\haxe\std/Lambda.hx">
		<array public="1" params="A" set="method" line="42" static="1">
			<f a="it">
				<t path="Iterable"><c path="array.A"/></t>
				<c path="Array"><c path="array.A"/></c>
			</f>
			<haxe_doc>Creates an Array from Iterable `it`.

		If `it` is an Array, this function returns a copy of it.</haxe_doc>
		</array>
		<list public="1" params="A" set="method" line="54" static="1">
			<f a="it">
				<t path="Iterable"><c path="list.A"/></t>
				<c path="List"><c path="list.A"/></c>
			</f>
			<haxe_doc>Creates a List form Iterable `it`.

		If `it` is a List, this function returns a copy of it.</haxe_doc>
		</list>
		<map public="1" params="A:B" set="method" line="68" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="map.A"/></t>
				<f a="">
					<c path="map.A"/>
					<c path="map.B"/>
				</f>
				<c path="List"><c path="map.B"/></c>
			</f>
			<haxe_doc>Creates a new List by applying function `f` to all elements of `it`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<mapi public="1" params="A:B" set="method" line="82" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="mapi.A"/></t>
				<f a=":">
					<x path="Int"/>
					<c path="mapi.A"/>
					<c path="mapi.B"/>
				</f>
				<c path="List"><c path="mapi.B"/></c>
			</f>
			<haxe_doc>Similar to map, but also passes the index of each element to `f`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</mapi>
		<has public="1" params="A" set="method" line="98" static="1">
			<f a="it:elt">
				<t path="Iterable"><c path="has.A"/></t>
				<c path="has.A"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains `elt`.

		This function returns true as soon as an element is found which is equal
		to `elt` according to the `==` operator.

		If no such element is found, the result is false.</haxe_doc>
		</has>
		<exists public="1" params="A" set="method" line="115" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="exists.A"/></t>
				<f a="">
					<c path="exists.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains an element for which `f` is true.

		This function returns true as soon as an element is found for which a
		call to `f` returns true.

		If no such element is found, the result is false.

		If `f` is null, the result is unspecified.</haxe_doc>
		</exists>
		<foreach public="1" params="A" set="method" line="134" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="foreach.A"/></t>
				<f a="">
					<c path="foreach.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is true for all elements of `it`.

		This function returns false as soon as an element is found for which a
		call to `f` returns false.

		If no such element is found, the result is true.

		In particular, this function always returns true if `it` is empty.

		If `f` is null, the result is unspecified.</haxe_doc>
		</foreach>
		<iter public="1" params="A" set="method" line="146" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="iter.A"/></t>
				<f a="">
					<c path="iter.A"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls `f` on all elements of `it`, in order.

		If `f` is null, the result is unspecified.</haxe_doc>
		</iter>
		<filter public="1" params="A" set="method" line="159" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="filter.A"/></t>
				<f a="">
					<c path="filter.A"/>
					<x path="Bool"/>
				</f>
				<c path="List"><c path="filter.A"/></c>
			</f>
			<haxe_doc>Returns a List containing those elements of `it` for which `f` returned
		true.

		If `it` is empty, the result is the empty List even if `f` is null.

		Otherwise if `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<fold public="1" params="A:B" set="method" line="179" static="1">
			<f a="it:f:first">
				<t path="Iterable"><c path="fold.A"/></t>
				<f a=":">
					<c path="fold.A"/>
					<c path="fold.B"/>
					<c path="fold.B"/>
				</f>
				<c path="fold.B"/>
				<c path="fold.B"/>
			</f>
			<haxe_doc>Functional fold on Iterable `it`, using function `f` with start argument
		`first`.

		If `it` has no elements, the result is `first`.

		Otherwise the first element of `it` is passed to `f` alongside `first`.
		The result of that call is then passed to `f` with the next element of
		`it`, and so on until `it` has no more elements.

		If `it` or `f` are null, the result is unspecified.</haxe_doc>
		</fold>
		<count public="1" params="A" set="method" line="191" static="1">
			<f a="it:?pred">
				<t path="Iterable"><c path="count.A"/></t>
				<f a="">
					<c path="count.A"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of elements in `it` for which `pred` is true, or the
		total number of elements in `it` if `pred` is null.

		This function traverses all elements.</haxe_doc>
		</count>
		<empty public="1" params="T" set="method" line="206" static="1">
			<f a="it">
				<t path="Iterable"><c path="empty.T"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if Iterable `it` does not contain any element.</haxe_doc>
		</empty>
		<indexOf public="1" params="T" set="method" line="217" static="1">
			<f a="it:v">
				<t path="Iterable"><c path="indexOf.T"/></t>
				<c path="indexOf.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of the first element `v` within Iterable `it`.

		This function uses operator `==` to check for equality.

		If `v` does not exist in `it`, the result is -1.</haxe_doc>
		</indexOf>
		<find public="1" params="T" set="method" line="237" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="find.T"/></t>
				<f a="">
					<c path="find.T"/>
					<x path="Bool"/>
				</f>
				<t path="Null"><c path="find.T"/></t>
			</f>
			<haxe_doc>Returns the first element of `it` for which `f` is true.

		This function returns as soon as an element is found for which a call to
		`f` returns true.

		If no such element is found, the result is null.

		If `f` is null, the result is unspecified.</haxe_doc>
		</find>
		<concat public="1" params="T" set="method" line="250" static="1">
			<f a="a:b">
				<t path="Iterable"><c path="concat.T"/></t>
				<t path="Iterable"><c path="concat.T"/></t>
				<c path="List"><c path="concat.T"/></c>
			</f>
			<haxe_doc>Returns a new List containing all elements of Iterable `a` followed by
		all elements of Iterable `b`.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</concat>
		<haxe_doc>The `Lambda` class is a collection of methods to support functional
	programming. It is ideally used with 'using Lambda' and then acts as an
	extension to Iterable types.

	On static platforms, working with the Iterable structure might be slower
	than performing the operations directly on known types, such as Array and
	List.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="List" params="T" file="C:\HaxeToolkit\haxe\std/List.hx">
		<h><c path="Array"><d/></c></h>
		<q><c path="Array"><d/></c></q>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` List.</haxe_doc>
		</length>
		<add public="1" set="method" line="49">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the end of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</add>
		<push public="1" set="method" line="64">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the beginning of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<first public="1" set="method" line="81">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		This function does not modify `this` List.</haxe_doc>
		</first>
		<last public="1" set="method" line="90">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the last element of `this` List, or null if no elements exist.

		This function does not modify `this` List.</haxe_doc>
		</last>
		<pop public="1" set="method" line="100">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		The element is removed from `this` List.</haxe_doc>
		</pop>
		<isEmpty public="1" set="method" line="114">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if `this` List is empty.</haxe_doc>
		</isEmpty>
		<clear public="1" set="method" line="124">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Empties `this` List.

		This function does not traverse the elements, but simply sets the
		internal references to null and `this.length` to 0.</haxe_doc>
		</clear>
		<remove public="1" set="method" line="138">
			<f a="v">
				<c path="List.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of `v` in `this` List.

		If `v` is found by checking standard equality, it is removed from `this`
		List and the function returns true.

		Otherwise, false is returned.</haxe_doc>
		</remove>
		<iterator public="1" get="inline" set="null" line="161">
			<f a=""><c path="_List.ListIterator"><c path="List.T"/></c></f>
			<haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="171">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` List.

		The result is enclosed in { } with the individual elements being
		separated by a comma.</haxe_doc>
		</toString>
		<join public="1" set="method" line="192">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` List, with `sep` separating
		each element.</haxe_doc>
		</join>
		<filter public="1" set="method" line="211">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<x path="Bool"/>
				</f>
				<c path="List"><c path="List.T"/></c>
			</f>
			<haxe_doc>Returns a list filtered with `f`. The returned list will contain all
		elements for which `f(x) == true`.</haxe_doc>
		</filter>
		<map public="1" params="X" set="method" line="227">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<c path="map.X"/>
				</f>
				<c path="List"><c path="map.X"/></c>
			</f>
			<haxe_doc>Returns a new list where all elements have been converted by the
		function `f`.</haxe_doc>
		</map>
		<new public="1" set="method" line="40">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of two-elements arrays
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole array content every time.</haxe_doc>
	</class>
	<class path="_List.ListIterator" params="T" file="C:\HaxeToolkit\haxe\std/List.hx" private="1" module="List">
		<head><c path="Array"><d/></c></head>
		<val><d/></val>
		<hasNext public="1" get="inline" set="null" line="249"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="253"><f a=""><c path="_List.ListIterator.T"/></f></next>
		<new public="1" get="inline" set="null" line="244"><f a="head">
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="Map" params="K:V" file="C:\HaxeToolkit\haxe\std/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><t path="IMap">
	<c path="Map.K"/>
	<c path="Map.V"/>
</t></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `key1 => value1, key2 => value2` syntax.

	Map is an abstract type, it is not available at runtime.]]></haxe_doc>
		<meta><m n=":multiType"><e>K</e></m></meta>
		<impl><class path="_Map.Map_Impl_" params="" file="C:\HaxeToolkit\haxe\std/Map.hx" private="1" module="Map">
	<_new public="1" set="method" static="1">
		<f a=""><x path="Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if K is a `String`, `haxe.ds.StringMap` is used
		2. if K is an `Int`, `haxe.ds.IntMap` is used
		3. if K is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if K is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if K is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on ObjectMap by default.</haxe_doc>
	</_new>
	<set public="1" get="inline" set="null" line="71" static="1">
		<f a="this:key:value">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="Map.K"/>
			<c path="Map.V"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Maps `key` to `value`.

		If `key` already has a mapping, the previous value disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
	</set>
	<get public="1" get="inline" set="null" line="88" static="1">
		<f a="this:key">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="Map.K"/>
			<t path="Null"><c path="Map.V"/></t>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Returns the current mapping of `key`.

		If no such mapping exists, null is returned.

		Note that a check like `map.get(key) == null` can hold for two reasons:

		1. the map has no mapping for `key`
		2. the map has a mapping with a value of `null`

		If it is important to distinguish these cases, `exists()` should be
		used.

		If `key` is null, the result is unspecified.</haxe_doc>
	</get>
	<exists public="1" get="inline" set="null" line="95" static="1">
		<f a="this:key">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="Map.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns true if `key` has a mapping, false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="103" static="1">
		<f a="this:key">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="Map.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Removes the mapping of `key` and returns true if such a mapping existed,
		false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="110" static="1">
		<f a="this">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<t path="Iterator"><c path="Map.K"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an Iterator over the keys of `this` Map.

		The order of keys is undefined.</haxe_doc>
	</keys>
	<iterator public="1" get="inline" set="null" line="119" static="1">
		<f a="this">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<t path="Iterator"><c path="Map.V"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an Iterator over the values of `this` Map.

		The order of values is undefined.</haxe_doc>
	</iterator>
	<toString public="1" get="inline" set="null" line="128" static="1">
		<f a="this">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a String representation of `this` Map.

		The exact representation depends on the platform and key-type.</haxe_doc>
	</toString>
	<arrayWrite public="1" get="inline" set="null" line="132" static="1">
		<f a="this:k:v">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="Map.K"/>
			<c path="Map.V"/>
			<c path="Map.V"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
			<m n=":noCompletion"/>
		</meta>
	</arrayWrite>
	<toStringMap params="K:V" get="inline" set="null" line="137" static="1">
		<f a="t">
			<t path="IMap">
				<c path="toStringMap.K"/>
				<c path="toStringMap.V"/>
			</t>
			<c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toStringMap>
	<toIntMap params="K:V" get="inline" set="null" line="141" static="1">
		<f a="t">
			<t path="IMap">
				<c path="toIntMap.K"/>
				<c path="toIntMap.V"/>
			</t>
			<c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toIntMap>
	<toEnumValueMapMap params="K:V" get="inline" set="null" line="145" static="1">
		<f a="t">
			<t path="IMap">
				<c path="toEnumValueMapMap.K"/>
				<c path="toEnumValueMapMap.V"/>
			</t>
			<c path="haxe.ds.EnumValueMap">
				<c path="toEnumValueMapMap.K"/>
				<c path="toEnumValueMapMap.V"/>
			</c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toEnumValueMapMap>
	<toObjectMap params="K:V" get="inline" set="null" line="149" static="1">
		<f a="t">
			<t path="IMap">
				<c path="toObjectMap.K"/>
				<c path="toObjectMap.V"/>
			</t>
			<c path="haxe.ds.ObjectMap">
				<c path="toObjectMap.K"/>
				<c path="toObjectMap.V"/>
			</c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toObjectMap>
	<fromStringMap params="V" get="inline" set="null" line="153" static="1">
		<f a="map">
			<c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c>
			<x path="Map">
				<c path="String"/>
				<c path="fromStringMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromStringMap>
	<fromIntMap params="V" get="inline" set="null" line="157" static="1">
		<f a="map">
			<c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c>
			<x path="Map">
				<x path="Int"/>
				<c path="fromIntMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromIntMap>
	<fromObjectMap params="K:V" get="inline" set="null" line="161" static="1">
		<f a="map">
			<c path="haxe.ds.ObjectMap">
				<c path="fromObjectMap.K"/>
				<c path="fromObjectMap.V"/>
			</c>
			<x path="Map">
				<c path="fromObjectMap.K"/>
				<c path="fromObjectMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromObjectMap>
</class></impl>
	</abstract>
	<class path="_Map.Map_Impl_" params="" file="C:\HaxeToolkit\haxe\std/Map.hx" private="1" module="Map">
		<_new public="1" set="method" static="1">
			<f a=""><x path="Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if K is a `String`, `haxe.ds.StringMap` is used
		2. if K is an `Int`, `haxe.ds.IntMap` is used
		3. if K is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if K is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if K is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on ObjectMap by default.</haxe_doc>
		</_new>
		<set public="1" get="inline" set="null" line="71" static="1">
			<f a="this:key:value">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="Map.K"/>
				<c path="Map.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Maps `key` to `value`.

		If `key` already has a mapping, the previous value disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="88" static="1">
			<f a="this:key">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="Map.K"/>
				<t path="Null"><c path="Map.V"/></t>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Returns the current mapping of `key`.

		If no such mapping exists, null is returned.

		Note that a check like `map.get(key) == null` can hold for two reasons:

		1. the map has no mapping for `key`
		2. the map has a mapping with a value of `null`

		If it is important to distinguish these cases, `exists()` should be
		used.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="95" static="1">
			<f a="this:key">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="Map.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns true if `key` has a mapping, false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="103" static="1">
			<f a="this:key">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="Map.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Removes the mapping of `key` and returns true if such a mapping existed,
		false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="110" static="1">
			<f a="this">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<t path="Iterator"><c path="Map.K"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an Iterator over the keys of `this` Map.

		The order of keys is undefined.</haxe_doc>
		</keys>
		<iterator public="1" get="inline" set="null" line="119" static="1">
			<f a="this">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<t path="Iterator"><c path="Map.V"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an Iterator over the values of `this` Map.

		The order of values is undefined.</haxe_doc>
		</iterator>
		<toString public="1" get="inline" set="null" line="128" static="1">
			<f a="this">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a String representation of `this` Map.

		The exact representation depends on the platform and key-type.</haxe_doc>
		</toString>
		<arrayWrite public="1" get="inline" set="null" line="132" static="1">
			<f a="this:k:v">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="Map.K"/>
				<c path="Map.V"/>
				<c path="Map.V"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
				<m n=":noCompletion"/>
			</meta>
		</arrayWrite>
		<toStringMap params="K:V" get="inline" set="null" line="137" static="1">
			<f a="t">
				<t path="IMap">
					<c path="toStringMap.K"/>
					<c path="toStringMap.V"/>
				</t>
				<c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toStringMap>
		<toIntMap params="K:V" get="inline" set="null" line="141" static="1">
			<f a="t">
				<t path="IMap">
					<c path="toIntMap.K"/>
					<c path="toIntMap.V"/>
				</t>
				<c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toIntMap>
		<toEnumValueMapMap params="K:V" get="inline" set="null" line="145" static="1">
			<f a="t">
				<t path="IMap">
					<c path="toEnumValueMapMap.K"/>
					<c path="toEnumValueMapMap.V"/>
				</t>
				<c path="haxe.ds.EnumValueMap">
					<c path="toEnumValueMapMap.K"/>
					<c path="toEnumValueMapMap.V"/>
				</c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toEnumValueMapMap>
		<toObjectMap params="K:V" get="inline" set="null" line="149" static="1">
			<f a="t">
				<t path="IMap">
					<c path="toObjectMap.K"/>
					<c path="toObjectMap.V"/>
				</t>
				<c path="haxe.ds.ObjectMap">
					<c path="toObjectMap.K"/>
					<c path="toObjectMap.V"/>
				</c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toObjectMap>
		<fromStringMap params="V" get="inline" set="null" line="153" static="1">
			<f a="map">
				<c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c>
				<x path="Map">
					<c path="String"/>
					<c path="fromStringMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromStringMap>
		<fromIntMap params="V" get="inline" set="null" line="157" static="1">
			<f a="map">
				<c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c>
				<x path="Map">
					<x path="Int"/>
					<c path="fromIntMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromIntMap>
		<fromObjectMap params="K:V" get="inline" set="null" line="161" static="1">
			<f a="map">
				<c path="haxe.ds.ObjectMap">
					<c path="fromObjectMap.K"/>
					<c path="fromObjectMap.V"/>
				</c>
				<x path="Map">
					<c path="fromObjectMap.K"/>
					<c path="fromObjectMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromObjectMap>
	</class>
	<typedef path="IMap" params="K:V" file="C:\HaxeToolkit\haxe\std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<class path="Math" params="" file="C:\HaxeToolkit\haxe\std/Math.hx" extern="1">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter,
		specified by the constant, π. `PI` is approximately 3.141592653589793.</haxe_doc>
		</PI>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes negative infinity.

		For example, this is the result of -1.0 / 0.0.

		Operations with `NEGATIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes negative infinity.

		For example, this is the result of 1.0 / 0.0.

		Operations with `POSITIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes an invalid number.

		NaN stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: Math.sqrt(-1).

		All further operations with `NaN` as an operand will result in `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.

		In order to test if a value is `NaN`, you should use `Math.isNaN()` function.

		@php In PHP versions prior to 5.3.1 VC 9 there may be unexpected
		results when performing arithmetic operations with `NaN` on Windows,
		see [https://bugs.php.net/bug.php?id=42143]</haxe_doc>
		</NaN>
		<abs public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.

		If `v` is positive or 0, the result is unchanged. Otherwise the result
		is -`v`.

		If `v` is `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is
		`POSITIVE_INFINITY`.

		If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</abs>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		If `a` or `b` are `NaN`, the result is `NaN`.
		If `a` or `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.
		If `a` and `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.</haxe_doc>
		</min>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		If `a` or `b` are `NaN`, the result is `NaN`.
		If `a` or `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `a` and `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</max>
		<sin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</sin>
		<cos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</cos>
		<tan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric tangent of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</tan>
		<asin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</asin>
		<acos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc cosine of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</acos>
		<atan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</atan>
		<atan2 public="1" set="method" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent whose tangent is the quotient of
		two specified numbers, in radians.

		If parameter `x` or `y`  is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is `NaN`.</haxe_doc>
		</atan2>
		<exp public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.

		exp(1.0) is approximately 2.718281828459.

		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `NEGATIVE_INFINITY`, the result is `0.0`.
		If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</exp>
		<log public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.

		This is the mathematical inverse operation of exp,
		i.e. `log(exp(v)) == v` always holds.

		If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result
		is `NaN`.
		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `0.0`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</log>
		<pow public="1" set="method" static="1">
			<f a="v:exp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a specified base `v` raised to the specified power `exp`.</haxe_doc>
		</pow>
		<sqrt public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.

		If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result
		is `NaN`.
		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `0.0`, the result is `0.0`.</haxe_doc>
		</sqrt>
		<round public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</ceil>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to 0.0,
		and less than 1.0.</haxe_doc>
		</random>
		<ffloor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`, as a `Float`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</ffloor>
		<fceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`, as a `Float`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</fceil>
		<fround public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value, as a Float.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</fround>
		<isFinite public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is `POSITIVE_INFINITY`, `NEGATIVE_INFINITY` or `NaN`, the result
		is `false`, otherwise the result is `true`.</haxe_doc>
		</isFinite>
		<isNaN public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is not a valid number.

		If `f` is `NaN`, the result is `true`, otherwise the result is `false`.
		In particular, both `POSITIVE_INFINITY` and `NEGATIVE_INFINITY` are
		not considered `NaN`.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.</haxe_doc>
	</class>
	<class path="Reflect" params="" file="C:\HaxeToolkit\haxe\std/flash/_std/Reflect.hx">
		<hasField public="1" set="method" line="24" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if structure `o` has a field named `field`.

		This is only guaranteed to work for anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</hasField>
		<field public="1" set="method" line="28" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the value of the field named `field` on object `o`.

		If `o` is not an object or has no field named `field`, the result is
		null.

		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.

		If `field` is null, the result is unspecified.

		(As3) If used on a property field, the getter will be invoked. It is
		not possible to obtain the value directly.</haxe_doc>
		</field>
		<setField public="1" get="inline" set="null" line="33" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`.

		If `o` has no field named `field`, this function is only guaranteed to
		work for anonymous structures.

		If `o` or `field` are null, the result is unspecified.

		(As3) If used on a property field, the setter will be invoked. It is
		not possible to set the value directly.</haxe_doc>
		</setField>
		<getProperty public="1" set="method" line="37" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the value of the field named `field` on object `o`, taking
		property getter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.field`, but might be slower.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</getProperty>
		<setProperty public="1" set="method" line="47" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`, taking
		property setter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.setField`, but might be slower.

		If `field` is null, the result is unspecified.</haxe_doc>
		</setProperty>
		<callMethod public="1" get="inline" set="null" line="55" static="1">
			<f a="o:func:args">
				<d/>
				<x path="haxe.Function"/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Call a method with the given object and arguments.</haxe_doc>
		</callMethod>
		<fields public="1" set="method" line="59" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the fields of structure `o`.

		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="82" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns true if `f` is a function, false otherwise.

		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" line="86" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares `a` and `b`.

		If `a` is less than `b`, the result is negative. If `b` is less than
		`a`, the result is positive. If `a` and `b` are equal, the result is 0.

		This function is only defined if `a` and `b` are of the same type.

		If that type is a function, the result is unspecified and
		`Reflect.compareMethods` should be used instead.

		For all other types, the result is 0 if `a` and `b` are equal. If they
		are not equal, the result depends on the type and is negative if:

		- Numeric types: a is less than b
		- String: a is lexicographically less than b
		- Other: unspecified

		If `a` and `b` are null, the result is 0. If only one of them is null,
		the result is unspecified.</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" line="92" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares the functions `f1` and `f2`.

		If `f1` or `f2` are not functions, the result is unspecified.

		Otherwise the result is true if `f1` and the `f2` are physically equal,
		false otherwise.</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" line="96" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Tells if `v` is an object.

		The result is true if `v` is one of the following:

		- class instance
		- structure
		- Class<T>
		- Enum<T>

		Otherwise, including if `v` is null, the result is false.]]></haxe_doc>
		</isObject>
		<isEnumValue public="1" set="method" line="106" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `v` is an enum value.

		The result is true if `v` is of type EnumValue, i.e. an enum
		constructor.

		Otherwise, including if `v` is null, the result is false.</haxe_doc>
		</isEnumValue>
		<deleteField public="1" set="method" line="114" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Removes the field named `field` from structure `o`.

		This method is only guaranteed to work on anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" line="120" static="1">
			<f a="o">
				<c path="copy.T"/>
				<c path="copy.T"/>
			</f>
			<haxe_doc>Copies the fields of structure `o`.

		This is only guaranteed to work on anonymous structures.

		If `o` is null, the result is unspecified.</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" line="128" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
			<overloads><makeVarArgs public="1" set="method"><f a="f">
	<f a="">
		<c path="Array"><d/></c>
		<x path="Void"/>
	</f>
	<d/>
</f></makeVarArgs></overloads>
		</makeVarArgs>
		<haxe_doc>The Reflect API is a way to manipulate values dynamically through an
	abstract interface in an untyped manner. Use with care.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="Std" params="" file="C:\HaxeToolkit\haxe\std/flash/_std/Std.hx">
		<is public="1" set="method" line="26" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.</haxe_doc>
		</is>
		<instance public="1" params="T:S" get="inline" set="null" line="30" static="1">
			<f a="value:c">
				<c path="instance.T"/>
				<x path="Class"><c path="instance.S"/></x>
				<c path="instance.S"/>
			</f>
			<haxe_doc>Checks if object `value` is an instance of class `c`.

		Compiles only if the class specified by `c` can be assigned to the type
		of `value`.

		This method checks if a downcast is possible. That is, if the runtime
		type of `value` is assignable to the class specified by `c`, `value` is
		returned. Otherwise null is returned.

		This method is not guaranteed to work with interfaces or core types such
		as `String`, `Array` and `Date`.

		If `value` is null, the result is null. If `c` is null, the result is
		unspecified.</haxe_doc>
		</instance>
		<string public="1" set="method" line="34" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" get="inline" set="null" line="38" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="42" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If the input cannot be recognized, the result is `null`.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="49" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a `NaN` value instead of null.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="53" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="Void" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard Void type. Only `null` values can be of the type `Void`.</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard Float type, this is a double-precision IEEE 64bit float.

	On static targets, null cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard Int type. Its precision depends on the platform.

	On static targets, null cannot be assigned to Int. If this is necessary,
	`Null<Int>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Null" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>`Null` can be useful in two cases. In order to document some methods
	that accepts or can return a `null` value, or for the Flash compiler and AS3
	generator to distinguish between base values that can be null and others that
	can't.</haxe_doc>
	</typedef>
	<abstract path="Bool" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be true or false.

	On static targets, null cannot be assigned to Bool. If this is necessary,
	`Null<Bool>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>Dynamic is a special type which is compatible with all other types.

	Use of Dynamic should be minimized as it prevents several compiler
	checks and optimizations.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the Iterator and advances to the next one.

		This method is not required to check `hasNext` first. A call to this
		method while `hasNext` is false yields unspecified behavior.

		On the other hand iterators should not require a call to `hasNext`
		before the first call to `next` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns false if the iteration is complete, true otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to next(). However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An Iterator is a structure that permits iteration over elements of type T.

	Any class with matching hasNext and next fields is considered an Iterator
	and can then be used e.g. in for-loops. This makes it easy to implement
	custom iterators.</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An Iterable is a data structure which has an iterator() method.
	See `Lambda` for generic functions on iterable structures.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>ArrayAccess is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.</haxe_doc></class>
	<class path="String" params="" file="C:\HaxeToolkit\haxe\std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String ""
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, null is returned.

		To obtain the character code of a single character, "x".code can be used
		instead to inline the character code at compile time. Note that this
		only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurence of `delimiter`.

		If `this` String is the empty String "", the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String "", `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurence of
		`delimiter`. If `this` String starts (or ends) with [delimiter}, the
		result Array contains a leading (or trailing) empty String "" element.
		Two subsequent delimiters also result in an empty String "" element.</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String "" is returned.</haxe_doc>
		</substring>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the string literal syntax "string value".

	String can be concatenated by using the + operator. If an operand is not a
	String, it is passed through Std.string() first.</haxe_doc>
	</class>
	<class path="StringBuf" params="" file="C:\HaxeToolkit\haxe\std/StringBuf.hx">
		<b><c path="String"/></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` StringBuf in characters.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="51"><f a=""><x path="Int"/></f></get_length>
		<add public="1" params="T" get="inline" set="null" line="64">
			<f a="x">
				<c path="add.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the representation of `x` to `this` StringBuf.

		The exact representation of `x` may vary per platform. To get more
		consistent behavior, this function should be called with
		Std.string(x).

		If `x` is null, the String "null" is appended.</haxe_doc>
		</add>
		<addChar public="1" get="inline" set="null" line="74">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the character identified by `c` to `this` StringBuf.

		If `c` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</addChar>
		<addSub public="1" get="inline" set="null" line="90">
			<f a="s:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a substring of `s` to `this` StringBuf.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.add(s.substr(pos,len))` can be used instead.

		If `s` or `pos` are null, the result is unspecified.

		If `len` is omitted or null, the substring ranges from `pos` to the end
		of `s`.</haxe_doc>
		</addSub>
		<toString public="1" get="inline" set="null" line="99">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the content of `this` StringBuf as String.

		The buffer is not emptied by this operation.</haxe_doc>
		</toString>
		<new public="1" get="inline" set="null" line="47">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Its cross-platform implementation uses String concatenation internally, but
	StringBuf may be optimized for different targets.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values. However, the internal buffer cannot be modified.</haxe_doc>
	</class>
	<class path="StringTools" params="" file="C:\HaxeToolkit\haxe\std/StringTools.hx">
		<urlEncode public="1" get="inline" set="null" line="36" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Encode an URL by using the standard format.</haxe_doc>
		</urlEncode>
		<urlDecode public="1" get="inline" set="null" line="61" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Decode an URL using the standard format.</haxe_doc>
		</urlDecode>
		<htmlEscape public="1" set="method" line="97" static="1">
			<f a="s:?quotes">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Escapes HTML special characters of the string `s`.

		The following replacements are made:

		- `&` becomes `&amp`;
		- `<` becomes `&lt`;
		- `>` becomes `&gt`;

		If `quotes` is true, the following characters are also replaced:

		- `"` becomes `&quot`;
		- `'` becomes `&#039`;]]></haxe_doc>
		</htmlEscape>
		<htmlUnescape public="1" set="method" line="116" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Unescapes HTML special characters of the string `s`.

		This is the inverse operation to htmlEscape, i.e. the following always
		holds: htmlUnescape(htmlEscape(s)) == s

		The replacements follow:

		- `&amp;` becomes `&`
		- `&lt;` becomes `<`
		- `&gt;` becomes `>`
		- `&quot;` becomes `"`
		- `&#039;` becomes `'`]]></haxe_doc>
		</htmlUnescape>
		<startsWith public="1" set="method" line="127" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` starts with the string `start`.

		If `start` is null, the result is unspecified.

		If `start` is the empty String "", the result is true.</haxe_doc>
		</startsWith>
		<endsWith public="1" set="method" line="153" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` ends with the string `end`.

		If `end` is null, the result is unspecified.

		If `end` is the empty String "", the result is true.</haxe_doc>
		</endsWith>
		<isSpace public="1" set="method" line="183" static="1">
			<f a="s:pos">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the character in the string `s` at position `pos` is a space.

		A character is considered to be a space character if its character code
		is 9,10,11,12,13 or 32.

		If `s` is the empty String "", or if pos is not a valid position within
		`s`, the result is false.</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="200" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading space characters of `s`.

		This function internally calls isSpace() to decide which characters to
		remove.

		If `s` is the empty String "" or consists only of space characters, the
		result is the empty String "".</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="225" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing space characters of `s`.

		This function internally calls isSpace() to decide which characters to
		remove.

		If `s` is the empty String "" or consists only of space characters, the
		result is the empty String "".</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="247" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading and trailing space characters of `s`.

		This is a convenience function for ltrim(rtrim(s)).</haxe_doc>
		</trim>
		<lpad public="1" set="method" line="269" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Concatenates `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String "" or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</lpad>
		<rpad public="1" set="method" line="291" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Appends `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String "" or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</rpad>
		<replace public="1" set="method" line="312" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replace all occurences of the String `sub` in the String `s` by the
		String `by`.

		If `sub` is the empty String "", `by` is inserted after each character
		of `s`. If `by` is also the empty String "", `s` remains unchanged.

		This is a convenience function for `s.split(sub).join(by)`.

		If `sub` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<hex public="1" set="method" line="334" static="1">
			<f a="n:?digits">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Encodes `n` into a hexadecimal representation.

		If `digits` is specified, the resulting String is padded with "0" until
		its length equals `digits`.</haxe_doc>
		</hex>
		<fastCodeAt public="1" get="inline" set="null" line="376" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the character code at position `index` of String `s`, or an
		end-of-file indicator at if `position` equals `s.length`.

		This method is faster than String.charCodeAt() on some platforms, but
		the result is unspecified if `index` is negative or greater than
		`s.length`.

		End of file status can be checked by calling `StringTools.isEof` with
		the returned value as argument.

		This operation is not guaranteed to work if `s` contains the \0
		character.</haxe_doc>
		</fastCodeAt>
		<isEof public="1" get="inline" set="null" line="399" static="1">
			<f a="c">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</isEof>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	'using StringTools' and then acts as an extension to the String class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<enum path="ValueType" params="" file="C:\HaxeToolkit\haxe\std/flash/_std/Type.hx" module="Type">
		<TNull/>
		<TInt/>
		<TFloat/>
		<TBool/>
		<TObject/>
		<TFunction/>
		<TClass a="c"><x path="Class"><d/></x></TClass>
		<TEnum a="e"><x path="Enum"><d/></x></TEnum>
		<TUnknown/>
	</enum>
	<class path="Type" params="" file="C:\HaxeToolkit\haxe\std/flash/_std/Type.hx">
		<getClass public="1" params="T" set="method" line="36" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.

		If `o` is null or of a different type, null is returned.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" line="48" static="1">
			<f a="o">
				<x path="EnumValue"/>
				<x path="Enum"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Returns the enum of enum instance `o`.

		An enum instance is the result of using an enum constructor. Given an
		`enum Color { Red; }`, `getEnum(Red)` returns `Enum<Color>`.

		If `o` is null, null is returned.

		In general, type parameter information cannot be obtained at runtime.]]></haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" line="62" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the super-class of class `c`.

		If `c` has no super class, null is returned.

		If `c` is null, the result is unspecified.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" line="69" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the name of class `c`, including its path.

		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a haxe module, that module is not part of the
		package structure.

		If `c` has no package, the class name is returned.

		If `c` is null, the result is unspecified.

		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" line="85" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		`pack1.pack2.(...).packN.EnumName`
		If `e` is a sub-type of a haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" line="89" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Resolves a class by name.

		If `name` is the path of an existing class, that class is returned.

		Otherwise null is returned.

		If `name` is null or the path to a different type, the result is
		unspecified.

		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="113" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Resolves an enum by name.

		If `name` is the path of an existing enum, that enum is returned.

		Otherwise null is returned.

		If `name` is null the result is unspecified.

		If `name` is the path to a different type, null is returned.

		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" line="130" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates an instance of class `cl`, using `args` as arguments to the
		class constructor.

		This function guarantees that the class constructor is called.

		Default values of constructors arguments are not guaranteed to be
		taken into account.

		If `cl` or `args` are null, or if the number of elements in `args` does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if `cl` has no own constructor, the
		result is unspecified.

		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" line="151" static="1">
			<f a="cl">
				<x path="Class"><c path="createEmptyInstance.T"/></x>
				<c path="createEmptyInstance.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates an instance of class `cl`.

		This function guarantees that the class constructor is not called.

		If `cl` is null, the result is unspecified.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" line="164" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" line="176" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createEnumIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnumIndex>
		<describe set="method" line="182" static="1">
			<f a="t:fact">
				<d/>
				<x path="Bool"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</describe>
		<getInstanceFields public="1" set="method" line="199" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the instance fields of class `c`.

		This only includes fields which are known at compile-time. In
		particular, using getInstanceFields(getClass(obj)) will not include
		any fields which were added to obj at runtime.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.

		(As3) This method only returns instance fields that are public.</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" line="203" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of static fields of class `c`.

		This does not include static fields of parent classes.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.

		(As3) This method only returns class fields that are public.</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" line="210" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" line="215" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the runtime type of value `v`.

		The result corresponds to the type `v` has at runtime, which may vary
		per platform. Assumptions regarding this should be minimized to avoid
		surprises.</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" line="247" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</enumEq>
		<enumConstructor public="1" set="method" line="264" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" set="method" line="268" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumParameters>
		<enumIndex public="1" get="inline" set="null" line="272" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumIndex>
		<allEnums public="1" params="T" set="method" line="276" static="1">
			<f a="e">
				<x path="Enum"><c path="allEnums.T"/></x>
				<c path="Array"><c path="allEnums.T"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array [] if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</allEnums>
		<haxe_doc>The haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="UInt" params="" file="C:\HaxeToolkit\haxe\std/UInt.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>The unsigned Int type is only defined for Flash and C#.
	Simulate it for other platforms.</haxe_doc>
		<impl><class path="_UInt.UInt_Impl_" params="" file="C:\HaxeToolkit\haxe\std/UInt.hx" private="1" module="UInt">
	<add get="inline" set="null" line="100" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A+B</e></m></meta>
	</add>
	<div get="inline" set="null" line="104" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A/B</e></m></meta>
	</div>
	<mul get="inline" set="null" line="108" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A*B</e></m></meta>
	</mul>
	<sub get="inline" set="null" line="112" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A-B</e></m></meta>
	</sub>
	<gt get="inline" set="null" line="116" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A>B]]></e></m></meta>
	</gt>
	<gte get="inline" set="null" line="124" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A>=B]]></e></m></meta>
	</gte>
	<lt get="inline" set="null" line="132" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A<B]]></e></m></meta>
	</lt>
	<lte get="inline" set="null" line="136" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A<=B]]></e></m></meta>
	</lte>
	<and get="inline" set="null" line="140" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A&B]]></e></m></meta>
	</and>
	<or get="inline" set="null" line="144" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A|B</e></m></meta>
	</or>
	<xor get="inline" set="null" line="148" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A^B</e></m></meta>
	</xor>
	<shl get="inline" set="null" line="152" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A<<B]]></e></m></meta>
	</shl>
	<shr get="inline" set="null" line="156" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A>>B]]></e></m></meta>
	</shr>
	<ushr get="inline" set="null" line="160" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A>>>B]]></e></m></meta>
	</ushr>
	<mod get="inline" set="null" line="164" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A%B</e></m></meta>
	</mod>
	<addWithFloat get="inline" set="null" line="168" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A+B</e></m>
		</meta>
	</addWithFloat>
	<mulWithFloat get="inline" set="null" line="172" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A*B</e></m>
		</meta>
	</mulWithFloat>
	<divFloat get="inline" set="null" line="176" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A/B</e></m></meta>
	</divFloat>
	<floatDiv get="inline" set="null" line="180" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A/B</e></m></meta>
	</floatDiv>
	<subFloat get="inline" set="null" line="184" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A-B</e></m></meta>
	</subFloat>
	<floatSub get="inline" set="null" line="188" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A-B</e></m></meta>
	</floatSub>
	<gtFloat get="inline" set="null" line="192" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A>B]]></e></m></meta>
	</gtFloat>
	<equalsInt params="T" get="inline" set="null" line="196" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="equalsInt.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A==B</e></m>
		</meta>
	</equalsInt>
	<notEqualsInt params="T" get="inline" set="null" line="200" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="notEqualsInt.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A!=B</e></m>
		</meta>
	</notEqualsInt>
	<equalsFloat params="T" get="inline" set="null" line="204" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="equalsFloat.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A==B</e></m>
		</meta>
	</equalsFloat>
	<notEqualsFloat params="T" get="inline" set="null" line="208" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="notEqualsFloat.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A!=B</e></m>
		</meta>
	</notEqualsFloat>
	<gteFloat get="inline" set="null" line="212" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A>=B]]></e></m></meta>
	</gteFloat>
	<floatGt get="inline" set="null" line="217" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A>B]]></e></m></meta>
	</floatGt>
	<floatGte get="inline" set="null" line="221" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A>=B]]></e></m></meta>
	</floatGte>
	<ltFloat get="inline" set="null" line="225" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A<B]]></e></m></meta>
	</ltFloat>
	<lteFloat get="inline" set="null" line="229" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A<=B]]></e></m></meta>
	</lteFloat>
	<floatLt get="inline" set="null" line="233" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A<B]]></e></m></meta>
	</floatLt>
	<floatLte get="inline" set="null" line="237" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A<=B]]></e></m></meta>
	</floatLte>
	<modFloat get="inline" set="null" line="241" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A%B</e></m></meta>
	</modFloat>
	<floatMod get="inline" set="null" line="245" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A%B</e></m></meta>
	</floatMod>
	<negBits get="inline" set="null" line="249" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>'???'</e></m>
		</meta>
	</negBits>
	<prefixIncrement get="inline" set="null" line="253" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>'???'</e></m>
		</meta>
	</prefixIncrement>
	<postfixIncrement get="inline" set="null" line="257" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>'???'</e></m>
		</meta>
	</postfixIncrement>
	<prefixDecrement get="inline" set="null" line="261" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>'???'</e></m>
		</meta>
	</prefixDecrement>
	<postfixDecrement get="inline" set="null" line="265" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>'???'</e></m>
		</meta>
	</postfixDecrement>
	<toString get="inline" set="null" line="270" static="1">
		<f a="this:?radix">
			<x path="Int"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
	<toInt get="inline" set="null" line="274" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toInt>
	<toFloat get="inline" set="null" line="278" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toFloat>
</class></impl>
	</abstract>
	<class path="_UInt.UInt_Impl_" params="" file="C:\HaxeToolkit\haxe\std/UInt.hx" private="1" module="UInt">
		<add get="inline" set="null" line="100" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A+B</e></m></meta>
		</add>
		<div get="inline" set="null" line="104" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A/B</e></m></meta>
		</div>
		<mul get="inline" set="null" line="108" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A*B</e></m></meta>
		</mul>
		<sub get="inline" set="null" line="112" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A-B</e></m></meta>
		</sub>
		<gt get="inline" set="null" line="116" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>B]]></e></m></meta>
		</gt>
		<gte get="inline" set="null" line="124" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>=B]]></e></m></meta>
		</gte>
		<lt get="inline" set="null" line="132" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A<B]]></e></m></meta>
		</lt>
		<lte get="inline" set="null" line="136" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A<=B]]></e></m></meta>
		</lte>
		<and get="inline" set="null" line="140" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A&B]]></e></m></meta>
		</and>
		<or get="inline" set="null" line="144" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A|B</e></m></meta>
		</or>
		<xor get="inline" set="null" line="148" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A^B</e></m></meta>
		</xor>
		<shl get="inline" set="null" line="152" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A<<B]]></e></m></meta>
		</shl>
		<shr get="inline" set="null" line="156" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>>B]]></e></m></meta>
		</shr>
		<ushr get="inline" set="null" line="160" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>>>B]]></e></m></meta>
		</ushr>
		<mod get="inline" set="null" line="164" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A%B</e></m></meta>
		</mod>
		<addWithFloat get="inline" set="null" line="168" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A+B</e></m>
			</meta>
		</addWithFloat>
		<mulWithFloat get="inline" set="null" line="172" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A*B</e></m>
			</meta>
		</mulWithFloat>
		<divFloat get="inline" set="null" line="176" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A/B</e></m></meta>
		</divFloat>
		<floatDiv get="inline" set="null" line="180" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A/B</e></m></meta>
		</floatDiv>
		<subFloat get="inline" set="null" line="184" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A-B</e></m></meta>
		</subFloat>
		<floatSub get="inline" set="null" line="188" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A-B</e></m></meta>
		</floatSub>
		<gtFloat get="inline" set="null" line="192" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>B]]></e></m></meta>
		</gtFloat>
		<equalsInt params="T" get="inline" set="null" line="196" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="equalsInt.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A==B</e></m>
			</meta>
		</equalsInt>
		<notEqualsInt params="T" get="inline" set="null" line="200" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="notEqualsInt.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A!=B</e></m>
			</meta>
		</notEqualsInt>
		<equalsFloat params="T" get="inline" set="null" line="204" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="equalsFloat.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A==B</e></m>
			</meta>
		</equalsFloat>
		<notEqualsFloat params="T" get="inline" set="null" line="208" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="notEqualsFloat.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A!=B</e></m>
			</meta>
		</notEqualsFloat>
		<gteFloat get="inline" set="null" line="212" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>=B]]></e></m></meta>
		</gteFloat>
		<floatGt get="inline" set="null" line="217" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>B]]></e></m></meta>
		</floatGt>
		<floatGte get="inline" set="null" line="221" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>=B]]></e></m></meta>
		</floatGte>
		<ltFloat get="inline" set="null" line="225" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A<B]]></e></m></meta>
		</ltFloat>
		<lteFloat get="inline" set="null" line="229" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A<=B]]></e></m></meta>
		</lteFloat>
		<floatLt get="inline" set="null" line="233" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A<B]]></e></m></meta>
		</floatLt>
		<floatLte get="inline" set="null" line="237" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A<=B]]></e></m></meta>
		</floatLte>
		<modFloat get="inline" set="null" line="241" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A%B</e></m></meta>
		</modFloat>
		<floatMod get="inline" set="null" line="245" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A%B</e></m></meta>
		</floatMod>
		<negBits get="inline" set="null" line="249" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>'???'</e></m>
			</meta>
		</negBits>
		<prefixIncrement get="inline" set="null" line="253" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>'???'</e></m>
			</meta>
		</prefixIncrement>
		<postfixIncrement get="inline" set="null" line="257" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>'???'</e></m>
			</meta>
		</postfixIncrement>
		<prefixDecrement get="inline" set="null" line="261" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>'???'</e></m>
			</meta>
		</prefixDecrement>
		<postfixDecrement get="inline" set="null" line="265" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>'???'</e></m>
			</meta>
		</postfixDecrement>
		<toString get="inline" set="null" line="270" static="1">
			<f a="this:?radix">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
		<toInt get="inline" set="null" line="274" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toInt>
		<toFloat get="inline" set="null" line="278" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toFloat>
	</class>
	<abstract path="XmlType" params="" file="C:\HaxeToolkit\haxe\std/Xml.hx" module="Xml">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="_Xml.XmlType_Impl_" params="" file="C:\HaxeToolkit\haxe\std/Xml.hx" private="1" module="Xml" extern="1">
	<Element public="1" get="inline" set="null" expr="&apos;???&apos;" line="24" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>'???'</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Element>
	<PCData public="1" get="inline" set="null" expr="&apos;???&apos;" line="25" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>'???'</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PCData>
	<CData public="1" get="inline" set="null" expr="&apos;???&apos;" line="26" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>'???'</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CData>
	<Comment public="1" get="inline" set="null" expr="&apos;???&apos;" line="27" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>'???'</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Comment>
	<DocType public="1" get="inline" set="null" expr="&apos;???&apos;" line="28" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>'???'</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DocType>
	<ProcessingInstruction public="1" get="inline" set="null" expr="&apos;???&apos;" line="29" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>'???'</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ProcessingInstruction>
	<Document public="1" get="inline" set="null" expr="&apos;???&apos;" line="30" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>'???'</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Document>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="_Xml.XmlType_Impl_" params="" file="C:\HaxeToolkit\haxe\std/Xml.hx" private="1" module="Xml" extern="1">
		<Element public="1" get="inline" set="null" expr="&apos;???&apos;" line="24" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>'???'</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Element>
		<PCData public="1" get="inline" set="null" expr="&apos;???&apos;" line="25" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>'???'</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PCData>
		<CData public="1" get="inline" set="null" expr="&apos;???&apos;" line="26" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>'???'</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CData>
		<Comment public="1" get="inline" set="null" expr="&apos;???&apos;" line="27" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>'???'</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Comment>
		<DocType public="1" get="inline" set="null" expr="&apos;???&apos;" line="28" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>'???'</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DocType>
		<ProcessingInstruction public="1" get="inline" set="null" expr="&apos;???&apos;" line="29" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>'???'</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ProcessingInstruction>
		<Document public="1" get="inline" set="null" expr="&apos;???&apos;" line="30" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>'???'</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Document>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="Xml" params="" file="C:\HaxeToolkit\haxe\std/Xml.hx">
		<Element public="1" set="null" expr="XmlType.Element" line="35" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Element</e></m></meta>
		</Element>
		<PCData public="1" set="null" expr="XmlType.PCData" line="36" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.PCData</e></m></meta>
		</PCData>
		<CData public="1" set="null" expr="XmlType.CData" line="37" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.CData</e></m></meta>
		</CData>
		<Comment public="1" set="null" expr="XmlType.Comment" line="38" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Comment</e></m></meta>
		</Comment>
		<DocType public="1" set="null" expr="XmlType.DocType" line="39" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.DocType</e></m></meta>
		</DocType>
		<ProcessingInstruction public="1" set="null" expr="XmlType.ProcessingInstruction" line="40" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.ProcessingInstruction</e></m></meta>
		</ProcessingInstruction>
		<Document public="1" set="null" expr="XmlType.Document" line="41" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Document</e></m></meta>
		</Document>
		<parse public="1" set="method" line="43" static="1"><f a="str">
	<c path="String"/>
	<c path="Xml"/>
</f></parse>
		<createElement public="1" set="method" line="104" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createElement>
		<createPCData public="1" set="method" line="113" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createPCData>
		<createCData public="1" set="method" line="122" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createCData>
		<createComment public="1" set="method" line="131" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createComment>
		<createDocType public="1" set="method" line="140" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocType>
		<createProcessingInstruction public="1" set="method" line="149" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createProcessingInstruction>
		<createDocument public="1" set="method" line="158" static="1">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocument>
		<nodeType public="1" set="null">
			<x path="XmlType"/>
			<haxe_doc>Returns the type of the Xml Node. This should be used before
		accessing other functions since some might raise an exception
		if the node type is not correct.</haxe_doc>
		</nodeType>
		<nodeName public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>Returns the node name of an Element.</haxe_doc>
		</nodeName>
		<nodeValue public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>Returns the node value. Only works if the Xml node is not an Element or a Document.</haxe_doc>
		</nodeValue>
		<parent public="1" set="null">
			<c path="Xml"/>
			<haxe_doc>Returns the parent object in the Xml hierarchy.
		The parent can be [null], an Element or a Document.</haxe_doc>
		</parent>
		<children><c path="Array"><c path="Xml"/></c></children>
		<attributeMap><x path="Map">
	<c path="String"/>
	<c path="String"/>
</x></attributeMap>
		<get_nodeName get="inline" set="null" line="73"><f a=""><c path="String"/></f></get_nodeName>
		<set_nodeName get="inline" set="null" line="80"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></set_nodeName>
		<get_nodeValue get="inline" set="null" line="87"><f a=""><c path="String"/></f></get_nodeValue>
		<set_nodeValue get="inline" set="null" line="94"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></set_nodeValue>
		<get public="1" set="method" line="166">
			<f a="att">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the given attribute of an Element node. Returns [null] if not found.
		Attributes are case-sensitive.</haxe_doc>
		</get>
		<set public="1" set="method" line="177">
			<f a="att:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the given attribute value for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</set>
		<remove public="1" set="method" line="188">
			<f a="att">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an attribute for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="199">
			<f a="att">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the Element node has a given attribute.
		Attributes are case-sensitive.</haxe_doc>
		</exists>
		<attributes public="1" set="method" line="209">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>Returns an [Iterator] on all the attribute names.</haxe_doc>
		</attributes>
		<iterator public="1" get="inline" set="null" line="220">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</iterator>
		<elements public="1" set="method" line="229">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elements>
		<elementsNamed public="1" set="method" line="239">
			<f a="name">
				<c path="String"/>
				<t path="Iterator"><c path="Xml"/></t>
			</f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements with the given nodeName.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elementsNamed>
		<firstChild public="1" get="inline" set="null" line="248">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node.</haxe_doc>
		</firstChild>
		<firstElement public="1" set="method" line="256">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node which is an Element.</haxe_doc>
		</firstElement>
		<addChild public="1" set="method" line="272">
			<f a="x">
				<c path="Xml"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a child node to the Document or Element.
		A child node can only be inside one given parent node, which is indicated by the [parent] property.
		If the child is already inside this Document or Element, it will be moved to the last position among the Document or Element's children.
		If the child node was previously inside a different node, it will be moved to this Document or Element.</haxe_doc>
		</addChild>
		<removeChild public="1" set="method" line="285">
			<f a="x">
				<c path="Xml"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes a child from the Document or Element.
		Returns true if the child was successfuly removed.</haxe_doc>
		</removeChild>
		<insertChild public="1" set="method" line="300">
			<f a="x:pos">
				<c path="Xml"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts a child at the given position among the other childs.
		A child node can only be inside one given parent node, which is indicated by the [parent] property.
		If the child is already inside this Document or Element, it will be moved to the new position among the Document or Element's children.
		If the child node was previously inside a different node, it will be moved to this Document or Element.</haxe_doc>
		</insertChild>
		<toString public="1" get="inline" set="null" line="312">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of the Xml node.</haxe_doc>
		</toString>
		<ensureElementType get="inline" set="null" line="322"><f a=""><x path="Void"/></f></ensureElementType>
		<new set="method" line="316"><f a="nodeType">
	<x path="XmlType"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.events.IEventDispatcher" params="" file="C:\HaxeToolkit\haxe\std/flash/events/IEventDispatcher.hx" extern="1" interface="1">
		<addEventListener public="1" set="method">
			<f a="type:listener:?useCapture:?priority:?useWeakReference" v="::false:0:false">
				<c path="String"/>
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{useWeakReference:false,priority:0,useCapture:false}</e></m></meta>
		</addEventListener>
		<dispatchEvent public="1" set="method"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Bool"/>
</f></dispatchEvent>
		<hasEventListener public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></hasEventListener>
		<removeEventListener public="1" set="method">
			<f a="type:listener:?useCapture" v="::false">
				<c path="String"/>
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{useCapture:false}</e></m></meta>
		</removeEventListener>
		<willTrigger public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></willTrigger>
	</class>
	<class path="flash.events.EventDispatcher" params="" file="C:\HaxeToolkit\haxe\std/flash/events/EventDispatcher.hx" extern="1">
		<implements path="flash.events.IEventDispatcher"/>
		<addEventListener public="1" set="method">
			<f a="type:listener:?useCapture:?priority:?useWeakReference" v="::false:0:false">
				<c path="String"/>
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{useWeakReference:false,priority:0,useCapture:false}</e></m></meta>
		</addEventListener>
		<dispatchEvent public="1" set="method"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Bool"/>
</f></dispatchEvent>
		<hasEventListener public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></hasEventListener>
		<removeEventListener public="1" set="method">
			<f a="type:listener:?useCapture" v="::false">
				<c path="String"/>
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{useCapture:false}</e></m></meta>
		</removeEventListener>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<willTrigger public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></willTrigger>
		<new public="1" set="method"><f a="?target">
	<c path="flash.events.IEventDispatcher"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.display.IBitmapDrawable" params="" file="C:\HaxeToolkit\haxe\std/flash/display/IBitmapDrawable.hx" extern="1" interface="1"/>
	<class path="flash.display.DisplayObject" params="" file="C:\HaxeToolkit\haxe\std/flash/display/DisplayObject.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<implements path="flash.display.IBitmapDrawable"/>
		<accessibilityProperties public="1"><c path="flash.accessibility.AccessibilityProperties"/></accessibilityProperties>
		<alpha public="1"><x path="Float"/></alpha>
		<blendMode public="1"><e path="flash.display.BlendMode"/></blendMode>
		<blendShader public="1" get="null">
			<c path="flash.display.Shader"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</blendShader>
		<cacheAsBitmap public="1"><x path="Bool"/></cacheAsBitmap>
		<filters public="1"><c path="Array"><c path="flash.filters.BitmapFilter"/></c></filters>
		<height public="1"><x path="Float"/></height>
		<loaderInfo public="1" set="null"><c path="flash.display.LoaderInfo"/></loaderInfo>
		<mask public="1"><c path="flash.display.DisplayObject"/></mask>
		<mouseX public="1" set="null"><x path="Float"/></mouseX>
		<mouseY public="1" set="null"><x path="Float"/></mouseY>
		<name public="1"><c path="String"/></name>
		<opaqueBackground public="1"><t path="Null"><x path="UInt"/></t></opaqueBackground>
		<parent public="1" set="null"><c path="flash.display.DisplayObjectContainer"/></parent>
		<root public="1" set="null"><c path="flash.display.DisplayObject"/></root>
		<rotation public="1"><x path="Float"/></rotation>
		<rotationX public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</rotationX>
		<rotationY public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</rotationY>
		<rotationZ public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</rotationZ>
		<scale9Grid public="1"><c path="flash.geom.Rectangle"/></scale9Grid>
		<scaleX public="1"><x path="Float"/></scaleX>
		<scaleY public="1"><x path="Float"/></scaleY>
		<scaleZ public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</scaleZ>
		<scrollRect public="1"><c path="flash.geom.Rectangle"/></scrollRect>
		<stage public="1" set="null"><c path="flash.display.Stage"/></stage>
		<transform public="1"><c path="flash.geom.Transform"/></transform>
		<visible public="1"><x path="Bool"/></visible>
		<width public="1"><x path="Float"/></width>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<z public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</z>
		<getBounds public="1" set="method"><f a="targetCoordinateSpace">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.geom.Rectangle"/>
</f></getBounds>
		<getRect public="1" set="method"><f a="targetCoordinateSpace">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.geom.Rectangle"/>
</f></getRect>
		<globalToLocal public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></globalToLocal>
		<globalToLocal3D public="1" set="method">
			<f a="point">
				<c path="flash.geom.Point"/>
				<c path="flash.geom.Vector3D"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</globalToLocal3D>
		<hitTestObject public="1" set="method"><f a="obj">
	<c path="flash.display.DisplayObject"/>
	<x path="Bool"/>
</f></hitTestObject>
		<hitTestPoint public="1" set="method">
			<f a="x:y:?shapeFlag" v="::false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{shapeFlag:false}</e></m></meta>
		</hitTestPoint>
		<local3DToGlobal public="1" set="method">
			<f a="point3d">
				<c path="flash.geom.Vector3D"/>
				<c path="flash.geom.Point"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</local3DToGlobal>
		<localToGlobal public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></localToGlobal>
	</class>
	<class path="flash.display.InteractiveObject" params="" file="C:\HaxeToolkit\haxe\std/flash/display/InteractiveObject.hx" extern="1">
		<extends path="flash.display.DisplayObject"/>
		<accessibilityImplementation public="1"><c path="flash.accessibility.AccessibilityImplementation"/></accessibilityImplementation>
		<contextMenu public="1"><c path="flash.ui.ContextMenu"/></contextMenu>
		<doubleClickEnabled public="1"><x path="Bool"/></doubleClickEnabled>
		<focusRect public="1"><d/></focusRect>
		<mouseEnabled public="1"><x path="Bool"/></mouseEnabled>
		<needsSoftKeyboard public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</needsSoftKeyboard>
		<softKeyboardInputAreaOfInterest public="1">
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</softKeyboardInputAreaOfInterest>
		<tabEnabled public="1"><x path="Bool"/></tabEnabled>
		<tabIndex public="1"><x path="Int"/></tabIndex>
		<requestSoftKeyboard public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</requestSoftKeyboard>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.DisplayObjectContainer" params="" file="C:\HaxeToolkit\haxe\std/flash/display/DisplayObjectContainer.hx" extern="1">
		<extends path="flash.display.InteractiveObject"/>
		<mouseChildren public="1"><x path="Bool"/></mouseChildren>
		<numChildren public="1" set="null"><x path="Int"/></numChildren>
		<tabChildren public="1"><x path="Bool"/></tabChildren>
		<textSnapshot public="1" set="null"><c path="flash.text.TextSnapshot"/></textSnapshot>
		<addChild public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></addChild>
		<addChildAt public="1" set="method"><f a="child:index">
	<c path="flash.display.DisplayObject"/>
	<x path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></addChildAt>
		<areInaccessibleObjectsUnderPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
</f></areInaccessibleObjectsUnderPoint>
		<contains public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<x path="Bool"/>
</f></contains>
		<getChildAt public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></getChildAt>
		<getChildByName public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="flash.display.DisplayObject"/>
</f></getChildByName>
		<getChildIndex public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<x path="Int"/>
</f></getChildIndex>
		<getObjectsUnderPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="Array"><c path="flash.display.DisplayObject"/></c>
</f></getObjectsUnderPoint>
		<removeChild public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></removeChild>
		<removeChildAt public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></removeChildAt>
		<removeChildren public="1" set="method">
			<f a="?beginIndex:?endIndex" v="0:2147483647">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{endIndex:2147483647,beginIndex:0}</e></m>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</removeChildren>
		<setChildIndex public="1" set="method"><f a="child:index">
	<c path="flash.display.DisplayObject"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setChildIndex>
		<stopAllMovieClips public="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash11_8</e></m></meta>
		</stopAllMovieClips>
		<swapChildren public="1" set="method"><f a="child1:child2">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
	<x path="Void"/>
</f></swapChildren>
		<swapChildrenAt public="1" set="method"><f a="index1:index2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></swapChildrenAt>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.Sprite" params="" file="C:\HaxeToolkit\haxe\std/flash/display/Sprite.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<buttonMode public="1"><x path="Bool"/></buttonMode>
		<dropTarget public="1" set="null"><c path="flash.display.DisplayObject"/></dropTarget>
		<graphics public="1" set="null"><c path="flash.display.Graphics"/></graphics>
		<hitArea public="1"><c path="flash.display.Sprite"/></hitArea>
		<soundTransform public="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<useHandCursor public="1"><x path="Bool"/></useHandCursor>
		<startDrag public="1" set="method">
			<f a="?lockCenter:?bounds" v="false:">
				<x path="Bool"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{lockCenter:false}</e></m></meta>
		</startDrag>
		<startTouchDrag public="1" set="method">
			<f a="touchPointID:?lockCenter:?bounds" v=":false:">
				<x path="Int"/>
				<x path="Bool"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{lockCenter:false}</e></m>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</startTouchDrag>
		<stopDrag public="1" set="method"><f a=""><x path="Void"/></f></stopDrag>
		<stopTouchDrag public="1" set="method">
			<f a="touchPointID">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</stopTouchDrag>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.MovieClip" params="" file="C:\HaxeToolkit\haxe\std/flash/display/MovieClip.hx" extern="1">
		<extends path="flash.display.Sprite"/>
		<currentFrame public="1" set="null"><x path="Int"/></currentFrame>
		<currentFrameLabel public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</currentFrameLabel>
		<currentLabel public="1" set="null"><c path="String"/></currentLabel>
		<currentLabels public="1" set="null"><c path="Array"><c path="flash.display.FrameLabel"/></c></currentLabels>
		<currentScene public="1" set="null"><c path="flash.display.Scene"/></currentScene>
		<enabled public="1"><x path="Bool"/></enabled>
		<framesLoaded public="1" set="null"><x path="Int"/></framesLoaded>
		<isPlaying public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</isPlaying>
		<scenes public="1" set="null"><c path="Array"><c path="flash.display.Scene"/></c></scenes>
		<totalFrames public="1" set="null"><x path="Int"/></totalFrames>
		<trackAsMenu public="1"><x path="Bool"/></trackAsMenu>
		<addFrameScript public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></addFrameScript>
		<gotoAndPlay public="1" set="method"><f a="frame:?scene">
	<t path="flash.utils.Object"/>
	<c path="String"/>
	<x path="Void"/>
</f></gotoAndPlay>
		<gotoAndStop public="1" set="method"><f a="frame:?scene">
	<t path="flash.utils.Object"/>
	<c path="String"/>
	<x path="Void"/>
</f></gotoAndStop>
		<nextFrame public="1" set="method"><f a=""><x path="Void"/></f></nextFrame>
		<nextScene public="1" set="method"><f a=""><x path="Void"/></f></nextScene>
		<play public="1" set="method"><f a=""><x path="Void"/></f></play>
		<prevFrame public="1" set="method"><f a=""><x path="Void"/></f></prevFrame>
		<prevScene public="1" set="method"><f a=""><x path="Void"/></f></prevScene>
		<stop public="1" set="method"><f a=""><x path="Void"/></f></stop>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.Boot" params="" file="C:\HaxeToolkit\haxe\std/flash/Boot.hx">
		<extends path="flash.display.MovieClip"/>
		<tf static="1"><c path="flash.text.TextField"/></tf>
		<lines static="1"><c path="Array"><c path="String"/></c></lines>
		<lastError static="1"><c path="flash.errors.Error"/></lastError>
		<skip_constructor public="1" expr="false" line="51" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</skip_constructor>
		<enum_to_string public="1" set="method" line="82" static="1"><f a="e">
	<a>
		<tag><c path="String"/></tag>
		<params><c path="Array"><d/></c></params>
	</a>
	<c path="String"/>
</f></enum_to_string>
		<__instanceof public="1" set="method" line="91" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__instanceof>
		<__clear_trace public="1" set="method" line="101" static="1"><f a=""><x path="Void"/></f></__clear_trace>
		<__set_trace_color public="1" set="method" line="109" static="1"><f a="rgb">
	<x path="UInt"/>
	<x path="Void"/>
</f></__set_trace_color>
		<getTrace public="1" set="method" line="115" static="1"><f a=""><c path="flash.text.TextField"/></f></getTrace>
		<__trace public="1" set="method" line="143" static="1"><f a="v:pos">
	<d/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></__trace>
		<__string_rec public="1" set="method" line="162" static="1">
			<f a="v:str">
				<d/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__string_rec>
		<__unprotect__ set="method" line="207" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></__unprotect__>
		<mapDynamic public="1" set="method" line="211" static="1">
			<f a="d:f">
				<d/>
				<d/>
				<unknown/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</mapDynamic>
		<filterDynamic public="1" set="method" line="219" static="1">
			<f a="d:f">
				<d/>
				<d/>
				<unknown/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</filterDynamic>
		<start set="method" line="53">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</start>
		<doInitDelay set="method" line="73"><f a="_">
	<unknown/>
	<x path="Void"/>
</f></doInitDelay>
		<init set="method" line="78"><f a=""><x path="Void"/></f></init>
		<new public="1" set="method" line="45"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="flash._Boot.RealBoot" params="" file="C:\HaxeToolkit\haxe\std/flash/Boot.hx" private="1" module="flash.Boot">
		<extends path="flash.Boot"/>
		<new set="method" line="35"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.Lib" params="" file="C:\HaxeToolkit\haxe\std/flash/Lib.hx">
		<current public="1" static="1"><c path="flash.display.MovieClip"/></current>
		<getTimer public="1" get="inline" set="null" line="28" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
		</getTimer>
		<eval public="1" set="method" line="32" static="1">
			<f a="path">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</eval>
		<getURL public="1" set="method" line="52" static="1">
			<f a="url:?target">
				<c path="flash.net.URLRequest"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getURL>
		<fscommand public="1" set="method" line="60" static="1">
			<f a="cmd:?param">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</fscommand>
		<trace public="1" set="method" line="64" static="1">
			<f a="arg">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</trace>
		<describeType public="1" set="method" line="68" static="1">
			<f a="value">
				<d/>
				<c path="flash.xml.XML"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</describeType>
		<attach public="1" set="method" line="72" static="1">
			<f a="name">
				<c path="String"/>
				<c path="flash.display.MovieClip"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</attach>
		<as public="1" params="T" get="inline" set="null" line="77" static="1">
			<f a="v:c">
				<d/>
				<x path="Class"><c path="as.T"/></x>
				<t path="Null"><c path="as.T"/></t>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</as>
		<redirectTraces public="1" set="method" line="81" static="1"><f a=""><x path="Void"/></f></redirectTraces>
		<traceToConsole set="method" line="86" static="1"><f a="v:?inf">
	<d/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></traceToConsole>
	</class>
	<class path="flash.Memory" params="" file="C:\HaxeToolkit\haxe\std/flash/Memory.hx" extern="1">
		<select public="1" get="inline" set="null" line="26" static="1"><f a="b">
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></select>
		<setByte public="1" get="inline" set="null" line="30" static="1">
			<f a="addr:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setByte>
		<setI16 public="1" get="inline" set="null" line="34" static="1">
			<f a="addr:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setI16>
		<setI32 public="1" get="inline" set="null" line="38" static="1">
			<f a="addr:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setI32>
		<setFloat public="1" get="inline" set="null" line="42" static="1">
			<f a="addr:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setFloat>
		<setDouble public="1" get="inline" set="null" line="46" static="1">
			<f a="addr:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setDouble>
		<getByte public="1" get="inline" set="null" line="50" static="1">
			<f a="addr">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getByte>
		<getUI16 public="1" get="inline" set="null" line="54" static="1">
			<f a="addr">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getUI16>
		<getI32 public="1" get="inline" set="null" line="58" static="1">
			<f a="addr">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getI32>
		<getFloat public="1" get="inline" set="null" line="62" static="1">
			<f a="addr">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getFloat>
		<getDouble public="1" get="inline" set="null" line="66" static="1">
			<f a="addr">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getDouble>
		<signExtend1 public="1" get="inline" set="null" line="70" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</signExtend1>
		<signExtend8 public="1" get="inline" set="null" line="74" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</signExtend8>
		<signExtend16 public="1" get="inline" set="null" line="78" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</signExtend16>
	</class>
	<enum path="flash.XmlType" params="" file="C:\HaxeToolkit\haxe\std/flash/NativeXml.hx" module="flash.NativeXml"><meta><m n=":flatEnum"/></meta></enum>
	<typedef path="flash.NativeXml" params="" file="C:\HaxeToolkit\haxe\std/flash/NativeXml.hx"><c path="flash.Xml"/></typedef>
	<class path="flash.Xml" params="" file="C:\HaxeToolkit\haxe\std/flash/NativeXml.hx" module="flash.NativeXml">
		<Element public="1" set="null" static="1"><e path="flash.XmlType"/></Element>
		<PCData public="1" set="null" static="1"><e path="flash.XmlType"/></PCData>
		<CData public="1" set="null" static="1"><e path="flash.XmlType"/></CData>
		<Comment public="1" set="null" static="1"><e path="flash.XmlType"/></Comment>
		<DocType public="1" set="null" static="1"><e path="flash.XmlType"/></DocType>
		<ProcessingInstruction public="1" set="null" static="1"><e path="flash.XmlType"/></ProcessingInstruction>
		<Document public="1" set="null" static="1"><e path="flash.XmlType"/></Document>
		<parse public="1" set="method" line="49" static="1"><f a="str">
	<c path="String"/>
	<c path="flash.Xml"/>
</f></parse>
		<compare set="method" line="71" static="1">
			<f a="a:b">
				<c path="flash.Xml"/>
				<c path="flash.Xml"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":keep"/></meta>
		</compare>
		<createElement public="1" set="method" line="77" static="1"><f a="name">
	<c path="String"/>
	<c path="flash.Xml"/>
</f></createElement>
		<createPCData public="1" set="method" line="81" static="1"><f a="data">
	<c path="String"/>
	<c path="flash.Xml"/>
</f></createPCData>
		<createCData public="1" set="method" line="86" static="1"><f a="data">
	<c path="String"/>
	<c path="flash.Xml"/>
</f></createCData>
		<createComment public="1" set="method" line="90" static="1"><f a="data">
	<c path="String"/>
	<c path="flash.Xml"/>
</f></createComment>
		<createDocType public="1" set="method" line="95" static="1"><f a="data">
	<c path="String"/>
	<c path="flash.Xml"/>
</f></createDocType>
		<createProcessingInstruction public="1" set="method" line="99" static="1"><f a="data">
	<c path="String"/>
	<c path="flash.Xml"/>
</f></createProcessingInstruction>
		<createDocument public="1" set="method" line="104" static="1"><f a=""><c path="flash.Xml"/></f></createDocument>
		<getNodeType set="method" line="108" static="1"><f a="node">
	<c path="flash.xml.XML"/>
	<e path="flash.XmlType"/>
</f></getNodeType>
		<wrap set="method" line="183" static="1"><f a="node:?type">
	<c path="flash.xml.XML"/>
	<e path="flash.XmlType"/>
	<c path="flash.Xml"/>
</f></wrap>
		<nodeType public="1" set="null"><e path="flash.XmlType"/></nodeType>
		<nodeName public="1" get="accessor" set="accessor"><c path="String"/></nodeName>
		<nodeValue public="1" get="accessor" set="accessor"><c path="String"/></nodeValue>
		<parent public="1" get="accessor" set="null"><c path="flash.Xml"/></parent>
		<_node><c path="flash.xml.XML"/></_node>
		<get_nodeName set="method" line="123"><f a=""><c path="String"/></f></get_nodeName>
		<set_nodeName set="method" line="130"><f a="n">
	<c path="String"/>
	<c path="String"/>
</f></set_nodeName>
		<get_nodeValue set="method" line="143"><f a=""><c path="String"/></f></get_nodeValue>
		<set_nodeValue set="method" line="152">
			<f a="v">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</set_nodeValue>
		<get_parent set="method" line="178"><f a=""><c path="flash.Xml"/></f></get_parent>
		<wraps set="method" line="190"><f a="xList">
	<c path="flash.xml.XMLList"/>
	<c path="Array"><c path="flash.Xml"/></c>
</f></wraps>
		<getAttribNS set="method" line="197"><f a="cur:ns">
	<c path="flash.xml.XML"/>
	<c path="Array"><c path="String"/></c>
	<c path="flash.xml.XMLList"/>
</f></getAttribNS>
		<get public="1" set="method" line="210"><f a="att">
	<c path="String"/>
	<c path="String"/>
</f></get>
		<set public="1" set="method" line="227">
			<f a="att:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</set>
		<remove public="1" set="method" line="248">
			<f a="att">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</remove>
		<exists public="1" set="method" line="258"><f a="att">
	<c path="String"/>
	<x path="Bool"/>
</f></exists>
		<attributes public="1" set="method" line="269"><f a=""><t path="Iterator"><c path="String"/></t></f></attributes>
		<iterator public="1" set="method" line="291"><f a=""><t path="Iterator"><c path="flash.Xml"/></t></f></iterator>
		<elements public="1" set="method" line="307"><f a=""><t path="Iterator"><c path="flash.Xml"/></t></f></elements>
		<elementsNamed public="1" set="method" line="323"><f a="name">
	<c path="String"/>
	<t path="Iterator"><c path="flash.Xml"/></t>
</f></elementsNamed>
		<firstChild public="1" set="method" line="348"><f a=""><c path="flash.Xml"/></f></firstChild>
		<firstElement public="1" set="method" line="357"><f a=""><c path="flash.Xml"/></f></firstElement>
		<addChild public="1" set="method" line="366"><f a="x">
	<c path="flash.Xml"/>
	<x path="Void"/>
</f></addChild>
		<removeChild public="1" set="method" line="375">
			<f a="x">
				<c path="flash.Xml"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</removeChild>
		<insertChild public="1" set="method" line="386"><f a="x:pos">
	<c path="flash.Xml"/>
	<x path="Int"/>
	<x path="Void"/>
</f></insertChild>
		<toString public="1" set="method" line="398"><f a=""><c path="String"/></f></toString>
		<new set="method" line="75"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.Vector" params="T" file="C:\HaxeToolkit\haxe\std/flash/Vector.hx" extern="1">
		<ofArray public="1" params="T" get="inline" set="null" line="47" static="1">
			<f a="v">
				<c path="Array"><c path="ofArray.T"/></c>
				<c path="flash.Vector"><c path="ofArray.T"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</ofArray>
		<convert public="1" params="T:U" get="inline" set="null" line="51" static="1">
			<f a="v">
				<c path="flash.Vector"><c path="convert.T"/></c>
				<c path="flash.Vector"><c path="convert.U"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</convert>
		<length public="1"><x path="Int"/></length>
		<fixed public="1"><x path="Bool"/></fixed>
		<concat public="1" set="method"><f a="?a">
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></concat>
		<join public="1" set="method"><f a="sep">
	<c path="String"/>
	<c path="String"/>
</f></join>
		<pop public="1" set="method"><f a=""><t path="Null"><c path="flash.Vector.T"/></t></f></pop>
		<push public="1" set="method"><f a="x">
	<c path="flash.Vector.T"/>
	<x path="Int"/>
</f></push>
		<reverse public="1" set="method"><f a=""><x path="Void"/></f></reverse>
		<shift public="1" set="method"><f a=""><t path="Null"><c path="flash.Vector.T"/></t></f></shift>
		<unshift public="1" set="method"><f a="x">
	<c path="flash.Vector.T"/>
	<x path="Void"/>
</f></unshift>
		<slice public="1" set="method"><f a="?pos:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></slice>
		<sort public="1" set="method"><f a="f">
	<f a=":">
		<c path="flash.Vector.T"/>
		<c path="flash.Vector.T"/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></sort>
		<splice public="1" set="method"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></splice>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<indexOf public="1" set="method"><f a="x:?from">
	<c path="flash.Vector.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></indexOf>
		<lastIndexOf public="1" set="method"><f a="x:?from">
	<c path="flash.Vector.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lastIndexOf>
		<new public="1" set="method"><f a="?length:?fixed">
	<x path="UInt"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>The Vector class is very similar to Array but is only supported by the Flash Player 10+</haxe_doc>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.accessibility.Accessibility" params="" file="C:\HaxeToolkit\haxe\std/flash/accessibility/Accessibility.hx" extern="1">
		<active public="1" set="null" static="1"><x path="Bool"/></active>
		<sendEvent public="1" set="method" static="1">
			<f a="source:childID:eventType:?nonHTML" v=":::false">
				<c path="flash.display.DisplayObject"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{nonHTML:false}</e></m></meta>
		</sendEvent>
		<updateProperties public="1" set="method" static="1"><f a=""><x path="Void"/></f></updateProperties>
	</class>
	<class path="flash.accessibility.AccessibilityImplementation" params="" file="C:\HaxeToolkit\haxe\std/flash/accessibility/AccessibilityImplementation.hx" extern="1">
		<errno public="1"><x path="UInt"/></errno>
		<stub public="1"><x path="Bool"/></stub>
		<accDoDefaultAction public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<x path="Void"/>
</f></accDoDefaultAction>
		<accLocation public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<d/>
</f></accLocation>
		<accSelect public="1" set="method"><f a="operation:childID">
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></accSelect>
		<getChildIDArray public="1" set="method"><f a=""><c path="Array"><d/></c></f></getChildIDArray>
		<get_accDefaultAction public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<c path="String"/>
</f></get_accDefaultAction>
		<get_accFocus public="1" set="method"><f a=""><x path="UInt"/></f></get_accFocus>
		<get_accName public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<c path="String"/>
</f></get_accName>
		<get_accRole public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<x path="UInt"/>
</f></get_accRole>
		<get_accSelection public="1" set="method"><f a=""><c path="Array"><d/></c></f></get_accSelection>
		<get_accState public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<x path="UInt"/>
</f></get_accState>
		<get_accValue public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<c path="String"/>
</f></get_accValue>
		<get_selectionActiveIndex public="1" set="method"><f a=""><d/></f></get_selectionActiveIndex>
		<get_selectionAnchorIndex public="1" set="method"><f a=""><d/></f></get_selectionAnchorIndex>
		<isLabeledBy public="1" set="method"><f a="labelBounds">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></isLabeledBy>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.accessibility.AccessibilityProperties" params="" file="C:\HaxeToolkit\haxe\std/flash/accessibility/AccessibilityProperties.hx" extern="1">
		<description public="1"><c path="String"/></description>
		<forceSimple public="1"><x path="Bool"/></forceSimple>
		<name public="1"><c path="String"/></name>
		<noAutoLabeling public="1"><x path="Bool"/></noAutoLabeling>
		<shortcut public="1"><c path="String"/></shortcut>
		<silent public="1"><x path="Bool"/></silent>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.accessibility.ISearchableText" params="" file="C:\HaxeToolkit\haxe\std/flash/accessibility/ISearchableText.hx" extern="1" interface="1">
		<searchText public="1" set="null"><c path="String"/></searchText>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.accessibility.ISimpleTextSelection" params="" file="C:\HaxeToolkit\haxe\std/flash/accessibility/ISimpleTextSelection.hx" extern="1" interface="1">
		<selectionActiveIndex public="1" set="null"><x path="Int"/></selectionActiveIndex>
		<selectionAnchorIndex public="1" set="null"><x path="Int"/></selectionAnchorIndex>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.automation.ActionGenerator" params="" file="C:\HaxeToolkit\haxe\std/flash/automation/ActionGenerator.hx" extern="1">
		<generateAction public="1" set="method"><f a="action">
	<c path="flash.automation.AutomationAction"/>
	<x path="Void"/>
</f></generateAction>
		<generateActions public="1" set="method"><f a="a">
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></generateActions>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.automation.AutomationAction" params="" file="C:\HaxeToolkit\haxe\std/flash/automation/AutomationAction.hx" extern="1">
		<type public="1"><c path="String"/></type>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.automation.Configuration" params="" file="C:\HaxeToolkit\haxe\std/flash/automation/Configuration.hx" extern="1">
		<deviceConfiguration public="1" static="1"><c path="String"/></deviceConfiguration>
		<testAutomationConfiguration public="1" set="null" static="1"><c path="String"/></testAutomationConfiguration>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.automation.KeyboardAutomationAction" params="" file="C:\HaxeToolkit\haxe\std/flash/automation/KeyboardAutomationAction.hx" extern="1">
		<extends path="flash.automation.AutomationAction"/>
		<KEY_DOWN public="1" static="1"><c path="String"/></KEY_DOWN>
		<KEY_UP public="1" static="1"><c path="String"/></KEY_UP>
		<keyCode public="1"><x path="UInt"/></keyCode>
		<new public="1" set="method">
			<f a="type:?keyCode" v=":0">
				<c path="String"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{keyCode:0}</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.automation.MouseAutomationAction" params="" file="C:\HaxeToolkit\haxe\std/flash/automation/MouseAutomationAction.hx" extern="1">
		<extends path="flash.automation.AutomationAction"/>
		<MIDDLE_MOUSE_DOWN public="1" static="1"><c path="String"/></MIDDLE_MOUSE_DOWN>
		<MIDDLE_MOUSE_UP public="1" static="1"><c path="String"/></MIDDLE_MOUSE_UP>
		<MOUSE_DOWN public="1" static="1"><c path="String"/></MOUSE_DOWN>
		<MOUSE_MOVE public="1" static="1"><c path="String"/></MOUSE_MOVE>
		<MOUSE_UP public="1" static="1"><c path="String"/></MOUSE_UP>
		<MOUSE_WHEEL public="1" static="1"><c path="String"/></MOUSE_WHEEL>
		<RIGHT_MOUSE_DOWN public="1" static="1"><c path="String"/></RIGHT_MOUSE_DOWN>
		<RIGHT_MOUSE_UP public="1" static="1"><c path="String"/></RIGHT_MOUSE_UP>
		<delta public="1"><x path="Int"/></delta>
		<stageX public="1"><x path="Float"/></stageX>
		<stageY public="1"><x path="Float"/></stageY>
		<new public="1" set="method">
			<f a="type:?stageX:?stageY:?delta" v=":0:0:0">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{delta:0,stageY:0,stageX:0}</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.automation.StageCapture" params="" file="C:\HaxeToolkit\haxe\std/flash/automation/StageCapture.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<CURRENT public="1" static="1"><c path="String"/></CURRENT>
		<MULTIPLE public="1" static="1"><c path="String"/></MULTIPLE>
		<NEXT public="1" static="1"><c path="String"/></NEXT>
		<RASTER public="1" static="1"><c path="String"/></RASTER>
		<SCREEN public="1" static="1"><c path="String"/></SCREEN>
		<STAGE public="1" static="1"><c path="String"/></STAGE>
		<captureSource public="1"><c path="String"/></captureSource>
		<clipRect public="1"><c path="flash.geom.Rectangle"/></clipRect>
		<fileNameBase public="1"><c path="String"/></fileNameBase>
		<cancel public="1" set="method"><f a=""><x path="Void"/></f></cancel>
		<capture public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Void"/>
</f></capture>
		<captureBitmapData public="1" set="method"><f a=""><c path="flash.display.BitmapData"/></f></captureBitmapData>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.events.Event" params="" file="C:\HaxeToolkit\haxe\std/flash/events/Event.hx" extern="1">
		<ACTIVATE public="1" static="1"><c path="String"/></ACTIVATE>
		<ADDED public="1" static="1"><c path="String"/></ADDED>
		<ADDED_TO_STAGE public="1" static="1"><c path="String"/></ADDED_TO_STAGE>
		<BROWSER_ZOOM_CHANGE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash15</e></m></meta>
		</BROWSER_ZOOM_CHANGE>
		<CANCEL public="1" static="1"><c path="String"/></CANCEL>
		<CHANGE public="1" static="1"><c path="String"/></CHANGE>
		<CHANNEL_MESSAGE public="1" static="1"><c path="String"/></CHANNEL_MESSAGE>
		<CHANNEL_STATE public="1" static="1"><c path="String"/></CHANNEL_STATE>
		<CLEAR public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</CLEAR>
		<CLOSE public="1" static="1"><c path="String"/></CLOSE>
		<COMPLETE public="1" static="1"><c path="String"/></COMPLETE>
		<CONNECT public="1" static="1"><c path="String"/></CONNECT>
		<CONTEXT3D_CREATE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</CONTEXT3D_CREATE>
		<COPY public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</COPY>
		<CUT public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</CUT>
		<DEACTIVATE public="1" static="1"><c path="String"/></DEACTIVATE>
		<ENTER_FRAME public="1" static="1"><c path="String"/></ENTER_FRAME>
		<EXIT_FRAME public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</EXIT_FRAME>
		<FRAME_CONSTRUCTED public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</FRAME_CONSTRUCTED>
		<FRAME_LABEL public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</FRAME_LABEL>
		<FULLSCREEN public="1" static="1"><c path="String"/></FULLSCREEN>
		<ID3 public="1" static="1"><c path="String"/></ID3>
		<INIT public="1" static="1"><c path="String"/></INIT>
		<MOUSE_LEAVE public="1" static="1"><c path="String"/></MOUSE_LEAVE>
		<OPEN public="1" static="1"><c path="String"/></OPEN>
		<PASTE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</PASTE>
		<REMOVED public="1" static="1"><c path="String"/></REMOVED>
		<REMOVED_FROM_STAGE public="1" static="1"><c path="String"/></REMOVED_FROM_STAGE>
		<RENDER public="1" static="1"><c path="String"/></RENDER>
		<RESIZE public="1" static="1"><c path="String"/></RESIZE>
		<SCROLL public="1" static="1"><c path="String"/></SCROLL>
		<SELECT public="1" static="1"><c path="String"/></SELECT>
		<SELECT_ALL public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</SELECT_ALL>
		<SOUND_COMPLETE public="1" static="1"><c path="String"/></SOUND_COMPLETE>
		<SUSPEND public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</SUSPEND>
		<TAB_CHILDREN_CHANGE public="1" static="1"><c path="String"/></TAB_CHILDREN_CHANGE>
		<TAB_ENABLED_CHANGE public="1" static="1"><c path="String"/></TAB_ENABLED_CHANGE>
		<TAB_INDEX_CHANGE public="1" static="1"><c path="String"/></TAB_INDEX_CHANGE>
		<TEXTURE_READY public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</TEXTURE_READY>
		<TEXT_INTERACTION_MODE_CHANGE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</TEXT_INTERACTION_MODE_CHANGE>
		<UNLOAD public="1" static="1"><c path="String"/></UNLOAD>
		<VIDEO_FRAME public="1" static="1"><c path="String"/></VIDEO_FRAME>
		<WORKER_STATE public="1" static="1"><c path="String"/></WORKER_STATE>
		<bubbles public="1" set="null"><x path="Bool"/></bubbles>
		<cancelable public="1" set="null"><x path="Bool"/></cancelable>
		<currentTarget public="1" set="null"><d/></currentTarget>
		<eventPhase public="1" set="null"><e path="flash.events.EventPhase"/></eventPhase>
		<target public="1" set="null"><d/></target>
		<type public="1" set="null"><c path="String"/></type>
		<clone public="1" set="method"><f a=""><c path="flash.events.Event"/></f></clone>
		<formatToString public="1" set="method"><f a="className:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<c path="String"/>
</f></formatToString>
		<isDefaultPrevented public="1" set="method"><f a=""><x path="Bool"/></f></isDefaultPrevented>
		<preventDefault public="1" set="method"><f a=""><x path="Void"/></f></preventDefault>
		<stopImmediatePropagation public="1" set="method"><f a=""><x path="Void"/></f></stopImmediatePropagation>
		<stopPropagation public="1" set="method"><f a=""><x path="Void"/></f></stopPropagation>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable" v=":false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.automation.StageCaptureEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/automation/StageCaptureEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<CAPTURE public="1" static="1"><c path="String"/></CAPTURE>
		<checksum public="1" set="null"><x path="UInt"/></checksum>
		<url public="1" set="null"><c path="String"/></url>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?url:?checksum" v=":false:false::0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{checksum:0,cancelable:false,bubbles:false}</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.concurrent.Condition" params="" file="C:\HaxeToolkit\haxe\std/flash/concurrent/Condition.hx" extern="1">
		<isSupported public="1" set="null" static="1"><x path="Bool"/></isSupported>
		<mutex public="1" set="null"><c path="flash.concurrent.Mutex"/></mutex>
		<notify public="1" set="method"><f a=""><x path="Void"/></f></notify>
		<notifyAll public="1" set="method"><f a=""><x path="Void"/></f></notifyAll>
		<wait public="1" set="method">
			<f a="?timeout" v="-1">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{timeout:-1}</e></m></meta>
		</wait>
		<new public="1" set="method"><f a="mutex">
	<c path="flash.concurrent.Mutex"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash11_4</e></m>
		</meta>
	</class>
	<class path="flash.concurrent.Mutex" params="" file="C:\HaxeToolkit\haxe\std/flash/concurrent/Mutex.hx" extern="1">
		<isSupported public="1" set="null" static="1"><x path="Bool"/></isSupported>
		<lock public="1" set="method"><f a=""><x path="Void"/></f></lock>
		<tryLock public="1" set="method"><f a=""><x path="Bool"/></f></tryLock>
		<unlock public="1" set="method"><f a=""><x path="Void"/></f></unlock>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash11_4</e></m>
		</meta>
	</class>
	<class path="flash.desktop.Clipboard" params="" file="C:\HaxeToolkit\haxe\std/flash/desktop/Clipboard.hx" extern="1">
		<generalClipboard public="1" set="null" static="1"><c path="flash.desktop.Clipboard"/></generalClipboard>
		<formats public="1" set="null"><c path="Array"><e path="flash.desktop.ClipboardFormats"/></c></formats>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<clearData public="1" set="method"><f a="format">
	<e path="flash.desktop.ClipboardFormats"/>
	<x path="Void"/>
</f></clearData>
		<getData public="1" set="method"><f a="format:?transferMode">
	<e path="flash.desktop.ClipboardFormats"/>
	<e path="flash.desktop.ClipboardTransferMode"/>
	<t path="flash.utils.Object"/>
</f></getData>
		<hasFormat public="1" set="method"><f a="format">
	<e path="flash.desktop.ClipboardFormats"/>
	<x path="Bool"/>
</f></hasFormat>
		<setData public="1" set="method">
			<f a="format:data:?serializable" v="::true">
				<e path="flash.desktop.ClipboardFormats"/>
				<t path="flash.utils.Object"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{serializable:true}</e></m></meta>
		</setData>
		<setDataHandler public="1" set="method">
			<f a="format:handler:?serializable" v="::true">
				<e path="flash.desktop.ClipboardFormats"/>
				<t path="flash.utils.Function"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{serializable:true}</e></m></meta>
		</setDataHandler>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<enum path="flash.desktop.ClipboardFormats" params="" file="C:\HaxeToolkit\haxe\std/flash/desktop/ClipboardFormats.hx">
		<AIR_PREFIX/>
		<BITMAP_FORMAT/>
		<FILE_LIST_FORMAT/>
		<FILE_PROMISE_LIST_FORMAT/>
		<FLASH_PREFIX/>
		<HTML_FORMAT/>
		<REFERENCE_PREFIX/>
		<RICH_TEXT_FORMAT/>
		<SERIALIZATION_PREFIX/>
		<TEXT_FORMAT/>
		<URL_FORMAT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash10</e></m>
		</meta>
	</enum>
	<enum path="flash.desktop.ClipboardTransferMode" params="" file="C:\HaxeToolkit\haxe\std/flash/desktop/ClipboardTransferMode.hx">
		<CLONE_ONLY/>
		<CLONE_PREFERRED/>
		<ORIGINAL_ONLY/>
		<ORIGINAL_PREFERRED/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash10</e></m>
		</meta>
	</enum>
	<class path="flash.display.AVM1Movie" params="" file="C:\HaxeToolkit\haxe\std/flash/display/AVM1Movie.hx" extern="1">
		<extends path="flash.display.DisplayObject"/>
		<addCallback public="1" set="method"><f a="functionName:closure">
	<c path="String"/>
	<t path="flash.utils.Function"/>
	<x path="Void"/>
</f></addCallback>
		<call public="1" set="method"><f a="functionName:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
</f></call>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="flash.display.ActionScriptVersion" params="" file="C:\HaxeToolkit\haxe\std/flash/display/ActionScriptVersion.hx">
		<ACTIONSCRIPT2/>
		<ACTIONSCRIPT3/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>UInt</e></m>
		</meta>
	</enum>
	<class path="flash.display.Bitmap" params="" file="C:\HaxeToolkit\haxe\std/flash/display/Bitmap.hx" extern="1">
		<extends path="flash.display.DisplayObject"/>
		<bitmapData public="1"><c path="flash.display.BitmapData"/></bitmapData>
		<pixelSnapping public="1"><e path="flash.display.PixelSnapping"/></pixelSnapping>
		<smoothing public="1"><x path="Bool"/></smoothing>
		<new public="1" set="method">
			<f a="?bitmapData:?pixelSnapping:?smoothing" v="::false">
				<c path="flash.display.BitmapData"/>
				<e path="flash.display.PixelSnapping"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{smoothing:false}</e></m></meta>
		</new>
	</class>
	<enum path="flash.display.BitmapCompressColorSpace" params="" file="C:\HaxeToolkit\haxe\std/flash/display/BitmapCompressColorSpace.hx">
		<COLORSPACE_4_2_0/>
		<COLORSPACE_4_2_2/>
		<COLORSPACE_4_4_4/>
		<COLORSPACE_AUTO/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display.BitmapData" params="" file="C:\HaxeToolkit\haxe\std/flash/display/BitmapData.hx" extern="1">
		<implements path="flash.display.IBitmapDrawable"/>
		<height public="1" set="null"><x path="Int"/></height>
		<rect public="1" set="null"><c path="flash.geom.Rectangle"/></rect>
		<transparent public="1" set="null"><x path="Bool"/></transparent>
		<width public="1" set="null"><x path="Int"/></width>
		<applyFilter public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:filter">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="flash.filters.BitmapFilter"/>
	<x path="Void"/>
</f></applyFilter>
		<clone public="1" set="method"><f a=""><c path="flash.display.BitmapData"/></f></clone>
		<colorTransform public="1" set="method"><f a="rect:colorTransform">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.ColorTransform"/>
	<x path="Void"/>
</f></colorTransform>
		<compare public="1" set="method"><f a="otherBitmapData">
	<c path="flash.display.BitmapData"/>
	<t path="flash.utils.Object"/>
</f></compare>
		<copyChannel public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:sourceChannel:destChannel">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></copyChannel>
		<copyPixels public="1" set="method">
			<f a="sourceBitmapData:sourceRect:destPoint:?alphaBitmapData:?alphaPoint:?mergeAlpha" v=":::::false">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Rectangle"/>
				<c path="flash.geom.Point"/>
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Point"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{mergeAlpha:false}</e></m></meta>
		</copyPixels>
		<copyPixelsToByteArray public="1" set="method">
			<f a="rect:data">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</copyPixelsToByteArray>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<draw public="1" set="method">
			<f a="source:?matrix:?colorTransform:?blendMode:?clipRect:?smoothing" v=":::::false">
				<c path="flash.display.IBitmapDrawable"/>
				<c path="flash.geom.Matrix"/>
				<c path="flash.geom.ColorTransform"/>
				<e path="flash.display.BlendMode"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{smoothing:false}</e></m></meta>
		</draw>
		<drawWithQuality public="1" set="method">
			<f a="source:?matrix:?colorTransform:?blendMode:?clipRect:?smoothing:?quality" v=":::::false:">
				<c path="flash.display.IBitmapDrawable"/>
				<c path="flash.geom.Matrix"/>
				<c path="flash.geom.ColorTransform"/>
				<e path="flash.display.BlendMode"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Bool"/>
				<e path="flash.display.StageQuality"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{smoothing:false}</e></m>
				<m n=":require"><e>flash11_3</e></m>
			</meta>
		</drawWithQuality>
		<encode public="1" set="method">
			<f a="rect:compressor:?byteArray">
				<c path="flash.geom.Rectangle"/>
				<t path="flash.utils.Object"/>
				<c path="flash.utils.ByteArray"/>
				<c path="flash.utils.ByteArray"/>
			</f>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</encode>
		<fillRect public="1" set="method"><f a="rect:color">
	<c path="flash.geom.Rectangle"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></fillRect>
		<floodFill public="1" set="method"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></floodFill>
		<generateFilterRect public="1" set="method"><f a="sourceRect:filter">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.filters.BitmapFilter"/>
	<c path="flash.geom.Rectangle"/>
</f></generateFilterRect>
		<getColorBoundsRect public="1" set="method">
			<f a="mask:color:?findColor" v="::true">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<c path="flash.geom.Rectangle"/>
			</f>
			<meta><m n=":value"><e>{findColor:true}</e></m></meta>
		</getColorBoundsRect>
		<getPixel public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
</f></getPixel>
		<getPixel32 public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
</f></getPixel32>
		<getPixels public="1" set="method"><f a="rect">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.utils.ByteArray"/>
</f></getPixels>
		<getVector public="1" set="method">
			<f a="rect">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><x path="UInt"/></c>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</getVector>
		<histogram public="1" set="method">
			<f a="?hRect">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><c path="flash.Vector"><x path="Float"/></c></c>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</histogram>
		<hitTest public="1" set="method">
			<f a="firstPoint:firstAlphaThreshold:secondObject:?secondBitmapDataPoint:?secondAlphaThreshold" v="::::1">
				<c path="flash.geom.Point"/>
				<x path="UInt"/>
				<t path="flash.utils.Object"/>
				<c path="flash.geom.Point"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{secondAlphaThreshold:1}</e></m></meta>
		</hitTest>
		<lock public="1" set="method"><f a=""><x path="Void"/></f></lock>
		<merge public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:redMultiplier:greenMultiplier:blueMultiplier:alphaMultiplier">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></merge>
		<noise public="1" set="method">
			<f a="randomSeed:?low:?high:?channelOptions:?grayScale" v=":0:255:7:false">
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{grayScale:false,channelOptions:7,high:255,low:0}</e></m></meta>
		</noise>
		<paletteMap public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:?redArray:?greenArray:?blueArray:?alphaArray">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></paletteMap>
		<perlinNoise public="1" set="method">
			<f a="baseX:baseY:numOctaves:randomSeed:stitch:fractalNoise:?channelOptions:?grayScale:?offsets" v="::::::7:false:">
				<x path="Float"/>
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<c path="Array"><c path="flash.geom.Point"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{grayScale:false,channelOptions:7}</e></m></meta>
		</perlinNoise>
		<pixelDissolve public="1" set="method">
			<f a="sourceBitmapData:sourceRect:destPoint:?randomSeed:?numPixels:?fillColor" v=":::0:0:0">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Rectangle"/>
				<c path="flash.geom.Point"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{fillColor:0,numPixels:0,randomSeed:0}</e></m></meta>
		</pixelDissolve>
		<scroll public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scroll>
		<setPixel public="1" set="method"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></setPixel>
		<setPixel32 public="1" set="method"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></setPixel32>
		<setPixels public="1" set="method"><f a="rect:inputByteArray">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></setPixels>
		<setVector public="1" set="method">
			<f a="rect:inputVector">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><x path="UInt"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</setVector>
		<threshold public="1" set="method">
			<f a="sourceBitmapData:sourceRect:destPoint:operation:threshold:?color:?mask:?copySource" v=":::::0:0xFFFFFFFF:false">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Rectangle"/>
				<c path="flash.geom.Point"/>
				<c path="String"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":value"><e>{copySource:false,mask:0xFFFFFFFF,color:0}</e></m></meta>
		</threshold>
		<unlock public="1" set="method"><f a="?changeRect">
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></unlock>
		<new public="1" set="method">
			<f a="width:height:?transparent:?fillColor" v="::true:0xFFFFFFFF">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{fillColor:0xFFFFFFFF,transparent:true}</e></m></meta>
		</new>
	</class>
	<class path="flash.display.BitmapDataChannel" params="" file="C:\HaxeToolkit\haxe\std/flash/display/BitmapDataChannel.hx" extern="1">
		<ALPHA public="1" get="inline" set="null" expr="8" line="4" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</ALPHA>
		<BLUE public="1" get="inline" set="null" expr="4" line="5" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BLUE>
		<GREEN public="1" get="inline" set="null" expr="2" line="6" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</GREEN>
		<RED public="1" get="inline" set="null" expr="1" line="7" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</RED>
	</class>
	<enum path="flash.display.BitmapEncodingColorSpace" params="" file="C:\HaxeToolkit\haxe\std/flash/display/BitmapEncodingColorSpace.hx">
		<COLORSPACE_4_2_0/>
		<COLORSPACE_4_2_2/>
		<COLORSPACE_4_4_4/>
		<COLORSPACE_AUTO/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.BlendMode" params="" file="C:\HaxeToolkit\haxe\std/flash/display/BlendMode.hx">
		<ADD/>
		<ALPHA/>
		<DARKEN/>
		<DIFFERENCE/>
		<ERASE/>
		<HARDLIGHT/>
		<INVERT/>
		<LAYER/>
		<LIGHTEN/>
		<MULTIPLY/>
		<NORMAL/>
		<OVERLAY/>
		<SCREEN/>
		<SHADER/>
		<SUBTRACT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.CapsStyle" params="" file="C:\HaxeToolkit\haxe\std/flash/display/CapsStyle.hx">
		<NONE/>
		<ROUND/>
		<SQUARE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.ColorCorrection" params="" file="C:\HaxeToolkit\haxe\std/flash/display/ColorCorrection.hx">
		<DEFAULT/>
		<OFF/>
		<ON/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</enum>
	<enum path="flash.display.ColorCorrectionSupport" params="" file="C:\HaxeToolkit\haxe\std/flash/display/ColorCorrectionSupport.hx">
		<DEFAULT_OFF/>
		<DEFAULT_ON/>
		<UNSUPPORTED/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</enum>
	<enum path="flash.display.FocusDirection" params="" file="C:\HaxeToolkit\haxe\std/flash/display/FocusDirection.hx">
		<BOTTOM/>
		<NONE/>
		<TOP/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</enum>
	<class path="flash.display.FrameLabel" params="" file="C:\HaxeToolkit\haxe\std/flash/display/FrameLabel.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<frame public="1" set="null"><x path="Int"/></frame>
		<name public="1" set="null"><c path="String"/></name>
		<new public="1" set="method"><f a="name:frame">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.display.GradientType" params="" file="C:\HaxeToolkit\haxe\std/flash/display/GradientType.hx">
		<LINEAR/>
		<RADIAL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display.Graphics" params="" file="C:\HaxeToolkit\haxe\std/flash/display/Graphics.hx" extern="1">
		<beginBitmapFill public="1" set="method">
			<f a="bitmap:?matrix:?repeat:?smooth" v="::true:false">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Matrix"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{smooth:false,repeat:true}</e></m></meta>
		</beginBitmapFill>
		<beginFill public="1" set="method">
			<f a="color:?alpha" v=":1">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{alpha:1}</e></m></meta>
		</beginFill>
		<beginGradientFill public="1" set="method">
			<f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio" v=":::::::0">
				<e path="flash.display.GradientType"/>
				<c path="Array"><x path="UInt"/></c>
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
				<c path="flash.geom.Matrix"/>
				<e path="flash.display.SpreadMethod"/>
				<e path="flash.display.InterpolationMethod"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{focalPointRatio:0}</e></m></meta>
		</beginGradientFill>
		<beginShaderFill public="1" set="method">
			<f a="shader:?matrix">
				<c path="flash.display.Shader"/>
				<c path="flash.geom.Matrix"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</beginShaderFill>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<copyFrom public="1" set="method">
			<f a="sourceGraphics">
				<c path="flash.display.Graphics"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</copyFrom>
		<cubicCurveTo public="1" set="method">
			<f a="controlX1:controlY1:controlX2:controlY2:anchorX:anchorY">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</cubicCurveTo>
		<curveTo public="1" set="method"><f a="controlX:controlY:anchorX:anchorY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<drawCircle public="1" set="method"><f a="x:y:radius">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawCircle>
		<drawEllipse public="1" set="method"><f a="x:y:width:height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawEllipse>
		<drawGraphicsData public="1" set="method">
			<f a="graphicsData">
				<c path="flash.Vector"><c path="flash.display.IGraphicsData"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</drawGraphicsData>
		<drawPath public="1" set="method">
			<f a="commands:data:?winding">
				<c path="flash.Vector"><x path="Int"/></c>
				<c path="flash.Vector"><x path="Float"/></c>
				<e path="flash.display.GraphicsPathWinding"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</drawPath>
		<drawRect public="1" set="method"><f a="x:y:width:height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawRect>
		<drawRoundRect public="1" set="method"><f a="x:y:width:height:ellipseWidth:?ellipseHeight">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawRoundRect>
		<drawRoundRectComplex public="1" set="method"><f a="x:y:width:height:topLeftRadius:topRightRadius:bottomLeftRadius:bottomRightRadius">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawRoundRectComplex>
		<drawTriangles public="1" set="method">
			<f a="vertices:?indices:?uvtData:?culling">
				<c path="flash.Vector"><x path="Float"/></c>
				<c path="flash.Vector"><x path="Int"/></c>
				<c path="flash.Vector"><x path="Float"/></c>
				<e path="flash.display.TriangleCulling"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</drawTriangles>
		<endFill public="1" set="method"><f a=""><x path="Void"/></f></endFill>
		<lineBitmapStyle public="1" set="method">
			<f a="bitmap:?matrix:?repeat:?smooth" v="::true:false">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Matrix"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{smooth:false,repeat:true}</e></m>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</lineBitmapStyle>
		<lineGradientStyle public="1" set="method">
			<f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio" v=":::::::0">
				<e path="flash.display.GradientType"/>
				<c path="Array"><x path="UInt"/></c>
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
				<c path="flash.geom.Matrix"/>
				<e path="flash.display.SpreadMethod"/>
				<e path="flash.display.InterpolationMethod"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{focalPointRatio:0}</e></m></meta>
		</lineGradientStyle>
		<lineShaderStyle public="1" set="method">
			<f a="shader:?matrix">
				<c path="flash.display.Shader"/>
				<c path="flash.geom.Matrix"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</lineShaderStyle>
		<lineStyle public="1" set="method">
			<f a="?thickness:?color:?alpha:?pixelHinting:?scaleMode:?caps:?joints:?miterLimit" v=":0:1:false::::3">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
				<e path="flash.display.LineScaleMode"/>
				<e path="flash.display.CapsStyle"/>
				<e path="flash.display.JointStyle"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{miterLimit:3,pixelHinting:false,alpha:1,color:0}</e></m></meta>
		</lineStyle>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<readGraphicsData public="1" expr="{recurse:true}">
			<f a="?recurse">
				<x path="Bool"/>
				<c path="flash.Vector"><c path="flash.display.IGraphicsData"/></c>
			</f>
			<meta>
				<m n=":value"><e>{recurse:true}</e></m>
				<m n=":require"><e>flash11_6</e></m>
			</meta>
		</readGraphicsData>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display.IGraphicsFill" params="" file="C:\HaxeToolkit\haxe\std/flash/display/IGraphicsFill.hx" extern="1" interface="1"/>
	<class path="flash.display.IGraphicsData" params="" file="C:\HaxeToolkit\haxe\std/flash/display/IGraphicsData.hx" extern="1" interface="1"/>
	<class path="flash.display.GraphicsBitmapFill" params="" file="C:\HaxeToolkit\haxe\std/flash/display/GraphicsBitmapFill.hx" extern="1">
		<implements path="flash.display.IGraphicsFill"/>
		<implements path="flash.display.IGraphicsData"/>
		<bitmapData public="1"><c path="flash.display.BitmapData"/></bitmapData>
		<matrix public="1"><c path="flash.geom.Matrix"/></matrix>
		<repeat public="1"><x path="Bool"/></repeat>
		<smooth public="1"><x path="Bool"/></smooth>
		<new public="1" set="method">
			<f a="?bitmapData:?matrix:?repeat:?smooth" v="::true:false">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Matrix"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{smooth:false,repeat:true}</e></m></meta>
		</new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display.GraphicsEndFill" params="" file="C:\HaxeToolkit\haxe\std/flash/display/GraphicsEndFill.hx" extern="1">
		<implements path="flash.display.IGraphicsFill"/>
		<implements path="flash.display.IGraphicsData"/>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.GraphicsGradientFill" params="" file="C:\HaxeToolkit\haxe\std/flash/display/GraphicsGradientFill.hx" extern="1">
		<implements path="flash.display.IGraphicsFill"/>
		<implements path="flash.display.IGraphicsData"/>
		<alphas public="1"><c path="Array"><x path="Float"/></c></alphas>
		<colors public="1"><c path="Array"><x path="UInt"/></c></colors>
		<focalPointRatio public="1"><x path="Float"/></focalPointRatio>
		<interpolationMethod public="1"><e path="flash.display.InterpolationMethod"/></interpolationMethod>
		<matrix public="1"><c path="flash.geom.Matrix"/></matrix>
		<ratios public="1"><c path="Array"><x path="Float"/></c></ratios>
		<spreadMethod public="1"><e path="flash.display.SpreadMethod"/></spreadMethod>
		<type public="1"><e path="flash.display.GradientType"/></type>
		<new public="1" set="method">
			<f a="?type:?colors:?alphas:?ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio" v=":::::::0">
				<e path="flash.display.GradientType"/>
				<c path="Array"><x path="UInt"/></c>
				<c path="Array"><x path="Float"/></c>
				<c path="Array"><x path="Float"/></c>
				<c path="flash.geom.Matrix"/>
				<e path="flash.display.SpreadMethod"/>
				<e path="flash.display.InterpolationMethod"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{focalPointRatio:0}</e></m></meta>
		</new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display.IGraphicsPath" params="" file="C:\HaxeToolkit\haxe\std/flash/display/IGraphicsPath.hx" extern="1" interface="1"/>
	<class path="flash.display.GraphicsPath" params="" file="C:\HaxeToolkit\haxe\std/flash/display/GraphicsPath.hx" extern="1">
		<implements path="flash.display.IGraphicsPath"/>
		<implements path="flash.display.IGraphicsData"/>
		<commands public="1"><c path="flash.Vector"><x path="Int"/></c></commands>
		<data public="1"><c path="flash.Vector"><x path="Float"/></c></data>
		<winding public="1"><e path="flash.display.GraphicsPathWinding"/></winding>
		<cubicCurveTo public="1" set="method">
			<f a="controlX1:controlY1:controlX2:controlY2:anchorX:anchorY">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</cubicCurveTo>
		<curveTo public="1" set="method"><f a="controlX:controlY:anchorX:anchorY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<wideLineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></wideLineTo>
		<wideMoveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></wideMoveTo>
		<new public="1" set="method"><f a="?commands:?data:?winding">
	<c path="flash.Vector"><x path="Int"/></c>
	<c path="flash.Vector"><x path="Float"/></c>
	<e path="flash.display.GraphicsPathWinding"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display.GraphicsPathCommand" params="" file="C:\HaxeToolkit\haxe\std/flash/display/GraphicsPathCommand.hx" extern="1">
		<LINE_TO public="1" get="inline" set="null" expr="2" line="4" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</LINE_TO>
		<MOVE_TO public="1" get="inline" set="null" expr="1" line="5" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</MOVE_TO>
		<CURVE_TO public="1" get="inline" set="null" expr="3" line="6" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</CURVE_TO>
		<CUBIC_CURVE_TO public="1" get="inline" set="null" expr="6" line="7" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>6</e></m>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</CUBIC_CURVE_TO>
		<WIDE_LINE_TO public="1" get="inline" set="null" expr="5" line="8" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</WIDE_LINE_TO>
		<WIDE_MOVE_TO public="1" get="inline" set="null" expr="4" line="9" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</WIDE_MOVE_TO>
		<NO_OP public="1" get="inline" set="null" expr="0" line="10" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NO_OP>
	</class>
	<enum path="flash.display.GraphicsPathWinding" params="" file="C:\HaxeToolkit\haxe\std/flash/display/GraphicsPathWinding.hx">
		<EVEN_ODD/>
		<NON_ZERO/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display.GraphicsShaderFill" params="" file="C:\HaxeToolkit\haxe\std/flash/display/GraphicsShaderFill.hx" extern="1">
		<implements path="flash.display.IGraphicsFill"/>
		<implements path="flash.display.IGraphicsData"/>
		<matrix public="1"><c path="flash.geom.Matrix"/></matrix>
		<shader public="1"><c path="flash.display.Shader"/></shader>
		<new public="1" set="method"><f a="?shader:?matrix">
	<c path="flash.display.Shader"/>
	<c path="flash.geom.Matrix"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display.GraphicsSolidFill" params="" file="C:\HaxeToolkit\haxe\std/flash/display/GraphicsSolidFill.hx" extern="1">
		<implements path="flash.display.IGraphicsFill"/>
		<implements path="flash.display.IGraphicsData"/>
		<alpha public="1"><x path="Float"/></alpha>
		<color public="1"><x path="UInt"/></color>
		<new public="1" set="method">
			<f a="?color:?alpha" v="0:1">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{alpha:1,color:0}</e></m></meta>
		</new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display.IGraphicsStroke" params="" file="C:\HaxeToolkit\haxe\std/flash/display/IGraphicsStroke.hx" extern="1" interface="1"/>
	<class path="flash.display.GraphicsStroke" params="" file="C:\HaxeToolkit\haxe\std/flash/display/GraphicsStroke.hx" extern="1">
		<implements path="flash.display.IGraphicsStroke"/>
		<implements path="flash.display.IGraphicsData"/>
		<caps public="1"><e path="flash.display.CapsStyle"/></caps>
		<fill public="1"><c path="flash.display.IGraphicsFill"/></fill>
		<joints public="1"><e path="flash.display.JointStyle"/></joints>
		<miterLimit public="1"><x path="Float"/></miterLimit>
		<pixelHinting public="1"><x path="Bool"/></pixelHinting>
		<scaleMode public="1"><e path="flash.display.LineScaleMode"/></scaleMode>
		<thickness public="1"><x path="Float"/></thickness>
		<new public="1" set="method">
			<f a="?thickness:?pixelHinting:?scaleMode:?caps:?joints:?miterLimit:?fill" v="0.:false::::3:">
				<x path="Float"/>
				<x path="Bool"/>
				<e path="flash.display.LineScaleMode"/>
				<e path="flash.display.CapsStyle"/>
				<e path="flash.display.JointStyle"/>
				<x path="Float"/>
				<c path="flash.display.IGraphicsFill"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{miterLimit:3,pixelHinting:false,thickness:0.}</e></m></meta>
		</new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display.GraphicsTrianglePath" params="" file="C:\HaxeToolkit\haxe\std/flash/display/GraphicsTrianglePath.hx" extern="1">
		<implements path="flash.display.IGraphicsPath"/>
		<implements path="flash.display.IGraphicsData"/>
		<culling public="1"><e path="flash.display.TriangleCulling"/></culling>
		<indices public="1"><c path="flash.Vector"><x path="Int"/></c></indices>
		<uvtData public="1"><c path="flash.Vector"><x path="Float"/></c></uvtData>
		<vertices public="1"><c path="flash.Vector"><x path="Float"/></c></vertices>
		<new public="1" set="method"><f a="?vertices:?indices:?uvtData:?culling">
	<c path="flash.Vector"><x path="Float"/></c>
	<c path="flash.Vector"><x path="Int"/></c>
	<c path="flash.Vector"><x path="Float"/></c>
	<e path="flash.display.TriangleCulling"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display.IBitmapCompressOptions" params="" file="C:\HaxeToolkit\haxe\std/flash/display/IBitmapCompressOptions.hx" extern="1" interface="1"/>
	<class path="flash.display.IDrawCommand" params="" file="C:\HaxeToolkit\haxe\std/flash/display/IDrawCommand.hx" extern="1" interface="1"/>
	<enum path="flash.display.InterpolationMethod" params="" file="C:\HaxeToolkit\haxe\std/flash/display/InterpolationMethod.hx">
		<LINEAR_RGB/>
		<RGB/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display.JPEGCompressOptions" params="" file="C:\HaxeToolkit\haxe\std/flash/display/JPEGCompressOptions.hx" extern="1">
		<implements path="flash.display.IBitmapCompressOptions"/>
		<quality public="1"><x path="UInt"/></quality>
		<new public="1" set="method">
			<f a="?quality" v="80">
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{quality:80}</e></m></meta>
		</new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display.JPEGEncoderOptions" params="" file="C:\HaxeToolkit\haxe\std/flash/display/JPEGEncoderOptions.hx" extern="1">
		<quality public="1"><x path="UInt"/></quality>
		<new public="1" set="method">
			<f a="?quality" v="80">
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{quality:80}</e></m></meta>
		</new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display.JPEGXRCompressOptions" params="" file="C:\HaxeToolkit\haxe\std/flash/display/JPEGXRCompressOptions.hx" extern="1">
		<implements path="flash.display.IBitmapCompressOptions"/>
		<colorSpace public="1"><c path="String"/></colorSpace>
		<quantization public="1"><x path="UInt"/></quantization>
		<trimFlexBits public="1"><x path="UInt"/></trimFlexBits>
		<new public="1" set="method">
			<f a="?quantization:?colorSpace:?trimFlexBits" v="20::0">
				<x path="UInt"/>
				<c path="String"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{trimFlexBits:0,quantization:20}</e></m></meta>
		</new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display.JPEGXREncoderOptions" params="" file="C:\HaxeToolkit\haxe\std/flash/display/JPEGXREncoderOptions.hx" extern="1">
		<colorSpace public="1"><e path="flash.display.BitmapEncodingColorSpace"/></colorSpace>
		<quantization public="1"><x path="UInt"/></quantization>
		<trimFlexBits public="1"><x path="UInt"/></trimFlexBits>
		<new public="1" set="method">
			<f a="?quantization:?colorSpace:?trimFlexBits" v="20::0">
				<x path="UInt"/>
				<e path="flash.display.BitmapEncodingColorSpace"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{trimFlexBits:0,quantization:20}</e></m></meta>
		</new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.display.JointStyle" params="" file="C:\HaxeToolkit\haxe\std/flash/display/JointStyle.hx">
		<BEVEL/>
		<MITER/>
		<ROUND/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.LineScaleMode" params="" file="C:\HaxeToolkit\haxe\std/flash/display/LineScaleMode.hx">
		<HORIZONTAL/>
		<NONE/>
		<NORMAL/>
		<VERTICAL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display.Loader" params="" file="C:\HaxeToolkit\haxe\std/flash/display/Loader.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<content public="1" set="null"><c path="flash.display.DisplayObject"/></content>
		<contentLoaderInfo public="1" set="null"><c path="flash.display.LoaderInfo"/></contentLoaderInfo>
		<uncaughtErrorEvents public="1" set="null">
			<c path="flash.events.UncaughtErrorEvents"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</uncaughtErrorEvents>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<load public="1" set="method"><f a="request:?context">
	<c path="flash.net.URLRequest"/>
	<c path="flash.system.LoaderContext"/>
	<x path="Void"/>
</f></load>
		<loadBytes public="1" set="method"><f a="bytes:?context">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.system.LoaderContext"/>
	<x path="Void"/>
</f></loadBytes>
		<unload public="1" set="method"><f a=""><x path="Void"/></f></unload>
		<unloadAndStop public="1" set="method">
			<f a="?gc" v="true">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{gc:true}</e></m>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</unloadAndStop>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.LoaderInfo" params="" file="C:\HaxeToolkit\haxe\std/flash/display/LoaderInfo.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<getLoaderInfoByDefinition public="1" set="method" static="1"><f a="object">
	<d/>
	<c path="flash.display.LoaderInfo"/>
</f></getLoaderInfoByDefinition>
		<actionScriptVersion public="1" set="null"><e path="flash.display.ActionScriptVersion"/></actionScriptVersion>
		<applicationDomain public="1" set="null"><c path="flash.system.ApplicationDomain"/></applicationDomain>
		<bytes public="1" set="null"><c path="flash.utils.ByteArray"/></bytes>
		<bytesLoaded public="1" set="null"><x path="UInt"/></bytesLoaded>
		<bytesTotal public="1" set="null"><x path="UInt"/></bytesTotal>
		<childAllowsParent public="1" set="null"><x path="Bool"/></childAllowsParent>
		<childSandboxBridge public="1">
			<d/>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</childSandboxBridge>
		<content public="1" set="null"><c path="flash.display.DisplayObject"/></content>
		<contentType public="1" set="null"><c path="String"/></contentType>
		<frameRate public="1" set="null"><x path="Float"/></frameRate>
		<height public="1" set="null"><x path="Int"/></height>
		<isURLInaccessible public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isURLInaccessible>
		<loader public="1" set="null"><c path="flash.display.Loader"/></loader>
		<loaderURL public="1" set="null"><c path="String"/></loaderURL>
		<parameters public="1" set="null"><d><c path="String"/></d></parameters>
		<parentAllowsChild public="1" set="null"><x path="Bool"/></parentAllowsChild>
		<parentSandboxBridge public="1">
			<d/>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</parentSandboxBridge>
		<sameDomain public="1" set="null"><x path="Bool"/></sameDomain>
		<sharedEvents public="1" set="null"><c path="flash.events.EventDispatcher"/></sharedEvents>
		<swfVersion public="1" set="null"><x path="UInt"/></swfVersion>
		<uncaughtErrorEvents public="1" set="null">
			<c path="flash.events.UncaughtErrorEvents"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</uncaughtErrorEvents>
		<url public="1" set="null"><c path="String"/></url>
		<width public="1" set="null"><x path="Int"/></width>
	</class>
	<class path="flash.display.MorphShape" params="" file="C:\HaxeToolkit\haxe\std/flash/display/MorphShape.hx" extern="1"><extends path="flash.display.DisplayObject"/></class>
	<class path="flash.display.NativeMenu" params="" file="C:\HaxeToolkit\haxe\std/flash/display/NativeMenu.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.display.NativeMenuItem" params="" file="C:\HaxeToolkit\haxe\std/flash/display/NativeMenuItem.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<enabled public="1"><x path="Bool"/></enabled>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.display.PNGCompressOptions" params="" file="C:\HaxeToolkit\haxe\std/flash/display/PNGCompressOptions.hx" extern="1">
		<implements path="flash.display.IBitmapCompressOptions"/>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.PNGEncoderOptions" params="" file="C:\HaxeToolkit\haxe\std/flash/display/PNGEncoderOptions.hx" extern="1">
		<fastCompression public="1"><x path="Bool"/></fastCompression>
		<new public="1" set="method">
			<f a="?fastCompression" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{fastCompression:false}</e></m></meta>
		</new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.display.PixelSnapping" params="" file="C:\HaxeToolkit\haxe\std/flash/display/PixelSnapping.hx">
		<ALWAYS/>
		<AUTO/>
		<NEVER/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display.SWFVersion" params="" file="C:\HaxeToolkit\haxe\std/flash/display/SWFVersion.hx" extern="1">
		<FLASH1 public="1" static="1"><x path="UInt"/></FLASH1>
		<FLASH10 public="1" static="1"><x path="UInt"/></FLASH10>
		<FLASH11 public="1" static="1"><x path="UInt"/></FLASH11>
		<FLASH12 public="1" static="1"><x path="UInt"/></FLASH12>
		<FLASH2 public="1" static="1"><x path="UInt"/></FLASH2>
		<FLASH3 public="1" static="1"><x path="UInt"/></FLASH3>
		<FLASH4 public="1" static="1"><x path="UInt"/></FLASH4>
		<FLASH5 public="1" static="1"><x path="UInt"/></FLASH5>
		<FLASH6 public="1" static="1"><x path="UInt"/></FLASH6>
		<FLASH7 public="1" static="1"><x path="UInt"/></FLASH7>
		<FLASH8 public="1" static="1"><x path="UInt"/></FLASH8>
		<FLASH9 public="1" static="1"><x path="UInt"/></FLASH9>
	</class>
	<class path="flash.display.Scene" params="" file="C:\HaxeToolkit\haxe\std/flash/display/Scene.hx" extern="1">
		<labels public="1" set="null"><c path="Array"><c path="flash.display.FrameLabel"/></c></labels>
		<name public="1" set="null"><c path="String"/></name>
		<numFrames public="1" set="null"><x path="Int"/></numFrames>
		<new public="1" set="method"><f a="name:labels:numFrames">
	<c path="String"/>
	<c path="Array"><c path="flash.display.FrameLabel"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display.Shader" params="" file="C:\HaxeToolkit\haxe\std/flash/display/Shader.hx" extern="1">
		<byteCode public="1" get="null"><c path="flash.utils.ByteArray"/></byteCode>
		<data public="1"><c path="flash.display.ShaderData"/></data>
		<precisionHint public="1"><e path="flash.display.ShaderPrecision"/></precisionHint>
		<new public="1" set="method"><f a="?code">
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.display.ShaderData" params="" file="C:\HaxeToolkit\haxe\std/flash/display/ShaderData.hx" extern="1">
		<new public="1" set="method"><f a="byteCode">
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.display.ShaderInput" params="" file="C:\HaxeToolkit\haxe\std/flash/display/ShaderInput.hx" extern="1">
		<channels public="1" set="null"><x path="Int"/></channels>
		<height public="1"><x path="Int"/></height>
		<index public="1" set="null"><x path="Int"/></index>
		<input public="1"><d/></input>
		<width public="1"><x path="Int"/></width>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.display.ShaderJob" params="" file="C:\HaxeToolkit\haxe\std/flash/display/ShaderJob.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<height public="1"><x path="Int"/></height>
		<progress public="1" set="null"><x path="Float"/></progress>
		<shader public="1"><c path="flash.display.Shader"/></shader>
		<target public="1"><d/></target>
		<width public="1"><x path="Int"/></width>
		<cancel public="1" set="method"><f a=""><x path="Void"/></f></cancel>
		<start public="1" set="method">
			<f a="?waitForCompletion" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{waitForCompletion:false}</e></m></meta>
		</start>
		<new public="1" set="method">
			<f a="?shader:?target:?width:?height" v="::0:0">
				<c path="flash.display.Shader"/>
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{height:0,width:0}</e></m></meta>
		</new>
	</class>
	<class path="flash.display.ShaderParameter" params="" file="C:\HaxeToolkit\haxe\std/flash/display/ShaderParameter.hx" extern="1">
		<index public="1" set="null"><x path="Int"/></index>
		<type public="1" set="null"><e path="flash.display.ShaderParameterType"/></type>
		<value public="1"><c path="Array"><d/></c></value>
		<meta><m n=":final"/></meta>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<enum path="flash.display.ShaderParameterType" params="" file="C:\HaxeToolkit\haxe\std/flash/display/ShaderParameterType.hx">
		<BOOL/>
		<BOOL2/>
		<BOOL3/>
		<BOOL4/>
		<FLOAT/>
		<FLOAT2/>
		<FLOAT3/>
		<FLOAT4/>
		<INT/>
		<INT2/>
		<INT3/>
		<INT4/>
		<MATRIX2X2/>
		<MATRIX3X3/>
		<MATRIX4X4/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.ShaderPrecision" params="" file="C:\HaxeToolkit\haxe\std/flash/display/ShaderPrecision.hx">
		<FAST/>
		<FULL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display.Shape" params="" file="C:\HaxeToolkit\haxe\std/flash/display/Shape.hx" extern="1">
		<extends path="flash.display.DisplayObject"/>
		<graphics public="1" set="null"><c path="flash.display.Graphics"/></graphics>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.SimpleButton" params="" file="C:\HaxeToolkit\haxe\std/flash/display/SimpleButton.hx" extern="1">
		<extends path="flash.display.InteractiveObject"/>
		<downState public="1"><c path="flash.display.DisplayObject"/></downState>
		<enabled public="1"><x path="Bool"/></enabled>
		<hitTestState public="1"><c path="flash.display.DisplayObject"/></hitTestState>
		<overState public="1"><c path="flash.display.DisplayObject"/></overState>
		<soundTransform public="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<trackAsMenu public="1"><x path="Bool"/></trackAsMenu>
		<upState public="1"><c path="flash.display.DisplayObject"/></upState>
		<useHandCursor public="1"><x path="Bool"/></useHandCursor>
		<new public="1" set="method"><f a="?upState:?overState:?downState:?hitTestState">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="flash.display.SpreadMethod" params="" file="C:\HaxeToolkit\haxe\std/flash/display/SpreadMethod.hx">
		<PAD/>
		<REFLECT/>
		<REPEAT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display.Stage" params="" file="C:\HaxeToolkit\haxe\std/flash/display/Stage.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<align public="1"><e path="flash.display.StageAlign"/></align>
		<allowsFullScreen public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</allowsFullScreen>
		<allowsFullScreenInteractive public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</allowsFullScreenInteractive>
		<browserZoomFactor public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash15</e></m></meta>
		</browserZoomFactor>
		<color public="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</color>
		<colorCorrection public="1">
			<e path="flash.display.ColorCorrection"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</colorCorrection>
		<colorCorrectionSupport public="1" set="null">
			<e path="flash.display.ColorCorrectionSupport"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</colorCorrectionSupport>
		<contentsScaleFactor public="1" set="null">
			<x path="Float"/>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</contentsScaleFactor>
		<displayContextInfo public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</displayContextInfo>
		<displayState public="1"><e path="flash.display.StageDisplayState"/></displayState>
		<focus public="1"><c path="flash.display.InteractiveObject"/></focus>
		<frameRate public="1"><x path="Float"/></frameRate>
		<fullScreenHeight public="1" set="null"><x path="UInt"/></fullScreenHeight>
		<fullScreenSourceRect public="1"><c path="flash.geom.Rectangle"/></fullScreenSourceRect>
		<fullScreenWidth public="1" set="null"><x path="UInt"/></fullScreenWidth>
		<mouseLock public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</mouseLock>
		<quality public="1"><e path="flash.display.StageQuality"/></quality>
		<scaleMode public="1"><e path="flash.display.StageScaleMode"/></scaleMode>
		<showDefaultContextMenu public="1"><x path="Bool"/></showDefaultContextMenu>
		<softKeyboardRect public="1" set="null">
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</softKeyboardRect>
		<stage3Ds public="1" set="null">
			<c path="flash.Vector"><c path="flash.display.Stage3D"/></c>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</stage3Ds>
		<stageFocusRect public="1"><x path="Bool"/></stageFocusRect>
		<stageHeight public="1"><x path="Int"/></stageHeight>
		<stageVideos public="1" set="null">
			<c path="flash.Vector"><c path="flash.media.StageVideo"/></c>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</stageVideos>
		<stageWidth public="1"><x path="Int"/></stageWidth>
		<wmodeGPU public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</wmodeGPU>
		<invalidate public="1" set="method"><f a=""><x path="Void"/></f></invalidate>
		<isFocusInaccessible public="1" set="method"><f a=""><x path="Bool"/></f></isFocusInaccessible>
	</class>
	<class path="flash.display.Stage3D" params="" file="C:\HaxeToolkit\haxe\std/flash/display/Stage3D.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<context3D public="1" set="null"><c path="flash.display3D.Context3D"/></context3D>
		<visible public="1"><x path="Bool"/></visible>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<requestContext3D public="1" set="method"><f a="?context3DRenderMode:?profile">
	<e path="flash.display3D.Context3DRenderMode"/>
	<e path="flash.display3D.Context3DProfile"/>
	<x path="Void"/>
</f></requestContext3D>
		<requestContext3DMatchingProfiles public="1">
			<f a="profiles">
				<c path="flash.Vector"><c path="String"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash12</e></m></meta>
		</requestContext3DMatchingProfiles>
		<meta><m n=":require"><e>flash11</e></m></meta>
	</class>
	<enum path="flash.display.StageAlign" params="" file="C:\HaxeToolkit\haxe\std/flash/display/StageAlign.hx">
		<BOTTOM/>
		<BOTTOM_LEFT/>
		<BOTTOM_RIGHT/>
		<LEFT/>
		<RIGHT/>
		<TOP/>
		<TOP_LEFT/>
		<TOP_RIGHT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.StageDisplayState" params="" file="C:\HaxeToolkit\haxe\std/flash/display/StageDisplayState.hx">
		<FULL_SCREEN/>
		<FULL_SCREEN_INTERACTIVE/>
		<NORMAL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.StageQuality" params="" file="C:\HaxeToolkit\haxe\std/flash/display/StageQuality.hx">
		<BEST/>
		<HIGH/>
		<HIGH_16X16/>
		<HIGH_16X16_LINEAR/>
		<HIGH_8X8/>
		<HIGH_8X8_LINEAR/>
		<LOW/>
		<MEDIUM/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.StageScaleMode" params="" file="C:\HaxeToolkit\haxe\std/flash/display/StageScaleMode.hx">
		<EXACT_FIT/>
		<NO_BORDER/>
		<NO_SCALE/>
		<SHOW_ALL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display.StageWorker" params="" file="C:\HaxeToolkit\haxe\std/flash/display/StageWorker.hx" extern="1">
		<extends path="flash.display.Sprite"/>
		<scaleMode public="1"><c path="String"/></scaleMode>
		<viewport public="1"><c path="flash.geom.Rectangle"/></viewport>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":require"><e>flash11_2</e></m>
			<m n=":final"/>
		</meta>
	</class>
	<enum path="flash.display.TriangleCulling" params="" file="C:\HaxeToolkit\haxe\std/flash/display/TriangleCulling.hx">
		<NEGATIVE/>
		<NONE/>
		<POSITIVE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display.Worker" params="" file="C:\HaxeToolkit\haxe\std/flash/display/Worker.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<running public="1" set="null"><x path="Bool"/></running>
		<view public="1" set="null"><c path="flash.display.StageWorker"/></view>
		<load public="1" set="method"><f a="request">
	<c path="flash.net.URLRequest"/>
	<x path="Void"/>
</f></load>
		<unload public="1" set="method"><f a=""><x path="Void"/></f></unload>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":require"><e>flash11_2</e></m>
			<m n=":final"/>
		</meta>
	</class>
	<class path="flash.display3D.Context3D" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3D.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<supportsVideoTexture public="1" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash15</e></m></meta>
		</supportsVideoTexture>
		<backBufferHeight public="1">
			<x path="Int"/>
			<meta><m n=":require"><e>flash15</e></m></meta>
		</backBufferHeight>
		<backBufferWidth public="1">
			<x path="Int"/>
			<meta><m n=":require"><e>flash15</e></m></meta>
		</backBufferWidth>
		<driverInfo public="1" set="null"><c path="String"/></driverInfo>
		<enableErrorChecking public="1"><x path="Bool"/></enableErrorChecking>
		<maxBackBufferHeight public="1">
			<x path="Int"/>
			<meta><m n=":require"><e>flash15</e></m></meta>
		</maxBackBufferHeight>
		<maxBackBufferWidth public="1">
			<x path="Int"/>
			<meta><m n=":require"><e>flash15</e></m></meta>
		</maxBackBufferWidth>
		<profile public="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash12</e></m></meta>
		</profile>
		<clear public="1" set="method">
			<f a="?red:?green:?blue:?alpha:?depth:?stencil:?mask" v="0:0:0:1:1:0:0xFFFFFFFF">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{mask:0xFFFFFFFF,stencil:0,depth:1,alpha:1,blue:0,green:0,red:0}</e></m></meta>
		</clear>
		<configureBackBuffer public="1" set="method">
			<f a="width:height:antiAlias:?enableDepthAndStencil:?wantsBestResolution:?wantsBestResolutionOnBrowserZoom" v=":::true:false:false">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{wantsBestResolutionOnBrowserZoom:false,wantsBestResolution:false,enableDepthAndStencil:true}</e></m></meta>
		</configureBackBuffer>
		<createCubeTexture public="1" set="method">
			<f a="size:format:optimizeForRenderToTexture:?streamingLevels" v=":::0">
				<x path="Int"/>
				<e path="flash.display3D.Context3DTextureFormat"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="flash.display3D.textures.CubeTexture"/>
			</f>
			<meta><m n=":value"><e>{streamingLevels:0}</e></m></meta>
		</createCubeTexture>
		<createIndexBuffer public="1" set="method"><f a="numIndices:?bufferUsage">
	<x path="Int"/>
	<e path="flash.display3D.Context3DBufferUsage"/>
	<c path="flash.display3D.IndexBuffer3D"/>
</f></createIndexBuffer>
		<createProgram public="1" set="method"><f a=""><c path="flash.display3D.Program3D"/></f></createProgram>
		<createRectangleTexture public="1">
			<f a="width:height:format:optimizeForRenderToTexture">
				<x path="Int"/>
				<x path="Int"/>
				<e path="flash.display3D.Context3DTextureFormat"/>
				<x path="Bool"/>
				<c path="flash.display3D.textures.RectangleTexture"/>
			</f>
			<meta><m n=":require"><e>flash11_8</e></m></meta>
		</createRectangleTexture>
		<createTexture public="1" set="method">
			<f a="width:height:format:optimizeForRenderToTexture:?streamingLevels" v="::::0">
				<x path="Int"/>
				<x path="Int"/>
				<e path="flash.display3D.Context3DTextureFormat"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="flash.display3D.textures.Texture"/>
			</f>
			<meta><m n=":value"><e>{streamingLevels:0}</e></m></meta>
		</createTexture>
		<createVertexBuffer public="1" set="method"><f a="numVertices:data32PerVertex:?bufferUsage">
	<x path="Int"/>
	<x path="Int"/>
	<e path="flash.display3D.Context3DBufferUsage"/>
	<c path="flash.display3D.VertexBuffer3D"/>
</f></createVertexBuffer>
		<createVideoTexture public="1">
			<f a=""><c path="flash.display3D.textures.VideoTexture"/></f>
			<meta><m n=":require"><e>flash15</e></m></meta>
		</createVideoTexture>
		<dispose public="1" set="method">
			<f a="?recreate" v="true">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{recreate:true}</e></m></meta>
		</dispose>
		<drawToBitmapData public="1" set="method"><f a="destination">
	<c path="flash.display.BitmapData"/>
	<x path="Void"/>
</f></drawToBitmapData>
		<drawTriangles public="1" set="method">
			<f a="indexBuffer:?firstIndex:?numTriangles" v=":0:-1">
				<c path="flash.display3D.IndexBuffer3D"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{numTriangles:-1,firstIndex:0}</e></m></meta>
		</drawTriangles>
		<present public="1" set="method"><f a=""><x path="Void"/></f></present>
		<setBlendFactors public="1" set="method"><f a="sourceFactor:destinationFactor">
	<e path="flash.display3D.Context3DBlendFactor"/>
	<e path="flash.display3D.Context3DBlendFactor"/>
	<x path="Void"/>
</f></setBlendFactors>
		<setColorMask public="1" set="method"><f a="red:green:blue:alpha">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setColorMask>
		<setCulling public="1" set="method"><f a="triangleFaceToCull">
	<e path="flash.display3D.Context3DTriangleFace"/>
	<x path="Void"/>
</f></setCulling>
		<setDepthTest public="1" set="method"><f a="depthMask:passCompareMode">
	<x path="Bool"/>
	<e path="flash.display3D.Context3DCompareMode"/>
	<x path="Void"/>
</f></setDepthTest>
		<setFillMode public="1">
			<f a="fillMode">
				<e path="flash.display3D.Context3DFillMode"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash16</e></m></meta>
		</setFillMode>
		<setProgram public="1" set="method"><f a="program">
	<c path="flash.display3D.Program3D"/>
	<x path="Void"/>
</f></setProgram>
		<setProgramConstantsFromByteArray public="1" set="method">
			<f a="programType:firstRegister:numRegisters:data:byteArrayOffset">
				<e path="flash.display3D.Context3DProgramType"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</setProgramConstantsFromByteArray>
		<setProgramConstantsFromMatrix public="1" set="method">
			<f a="programType:firstRegister:matrix:?transposedMatrix" v=":::false">
				<e path="flash.display3D.Context3DProgramType"/>
				<x path="Int"/>
				<c path="flash.geom.Matrix3D"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{transposedMatrix:false}</e></m></meta>
		</setProgramConstantsFromMatrix>
		<setProgramConstantsFromVector public="1" set="method">
			<f a="programType:firstRegister:data:?numRegisters" v=":::-1">
				<e path="flash.display3D.Context3DProgramType"/>
				<x path="Int"/>
				<c path="flash.Vector"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{numRegisters:-1}</e></m></meta>
		</setProgramConstantsFromVector>
		<setRenderToBackBuffer public="1" set="method"><f a=""><x path="Void"/></f></setRenderToBackBuffer>
		<setRenderToTexture public="1" set="method">
			<f a="texture:?enableDepthAndStencil:?antiAlias:?surfaceSelector:?colorOutputIndex" v=":false:0:0:0">
				<c path="flash.display3D.textures.TextureBase"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{colorOutputIndex:0,surfaceSelector:0,antiAlias:0,enableDepthAndStencil:false}</e></m></meta>
		</setRenderToTexture>
		<setSamplerStateAt public="1">
			<f a="sampler:wrap:filter:mipfilter">
				<x path="Int"/>
				<e path="flash.display3D.Context3DWrapMode"/>
				<e path="flash.display3D.Context3DTextureFilter"/>
				<e path="flash.display3D.Context3DMipFilter"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_6</e></m></meta>
		</setSamplerStateAt>
		<setScissorRectangle public="1" set="method"><f a="rectangle">
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></setScissorRectangle>
		<setStencilActions public="1" set="method"><f a="?triangleFace:?compareMode:?actionOnBothPass:?actionOnDepthFail:?actionOnDepthPassStencilFail">
	<e path="flash.display3D.Context3DTriangleFace"/>
	<e path="flash.display3D.Context3DCompareMode"/>
	<e path="flash.display3D.Context3DStencilAction"/>
	<e path="flash.display3D.Context3DStencilAction"/>
	<e path="flash.display3D.Context3DStencilAction"/>
	<x path="Void"/>
</f></setStencilActions>
		<setStencilReferenceValue public="1" set="method">
			<f a="referenceValue:?readMask:?writeMask" v=":255:255">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{writeMask:255,readMask:255}</e></m></meta>
		</setStencilReferenceValue>
		<setTextureAt public="1" set="method"><f a="sampler:texture">
	<x path="Int"/>
	<c path="flash.display3D.textures.TextureBase"/>
	<x path="Void"/>
</f></setTextureAt>
		<setVertexBufferAt public="1" set="method">
			<f a="index:buffer:?bufferOffset:?format" v="::0:">
				<x path="Int"/>
				<c path="flash.display3D.VertexBuffer3D"/>
				<x path="Int"/>
				<e path="flash.display3D.Context3DVertexBufferFormat"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{bufferOffset:0}</e></m></meta>
		</setVertexBufferAt>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.display3D.Context3DBlendFactor" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DBlendFactor.hx">
		<DESTINATION_ALPHA/>
		<DESTINATION_COLOR/>
		<ONE/>
		<ONE_MINUS_DESTINATION_ALPHA/>
		<ONE_MINUS_DESTINATION_COLOR/>
		<ONE_MINUS_SOURCE_ALPHA/>
		<ONE_MINUS_SOURCE_COLOR/>
		<SOURCE_ALPHA/>
		<SOURCE_COLOR/>
		<ZERO/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DBufferUsage" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DBufferUsage.hx">
		<DYNAMIC_DRAW/>
		<STATIC_DRAW/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash12</e></m>
		</meta>
	</enum>
	<class path="flash.display3D.Context3DClearMask" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DClearMask.hx" extern="1">
		<ALL public="1" static="1"><x path="Int"/></ALL>
		<COLOR public="1" static="1"><x path="Int"/></COLOR>
		<DEPTH public="1" static="1"><x path="Int"/></DEPTH>
		<STENCIL public="1" static="1"><x path="Int"/></STENCIL>
	</class>
	<enum path="flash.display3D.Context3DCompareMode" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DCompareMode.hx">
		<ALWAYS/>
		<EQUAL/>
		<GREATER/>
		<GREATER_EQUAL/>
		<LESS/>
		<LESS_EQUAL/>
		<NEVER/>
		<NOT_EQUAL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DFillMode" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DFillMode.hx">
		<SOLID/>
		<WIREFRAME/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash16</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DMipFilter" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DMipFilter.hx">
		<MIPLINEAR/>
		<MIPNEAREST/>
		<MIPNONE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DProfile" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DProfile.hx">
		<BASELINE/>
		<BASELINE_CONSTRAINED/>
		<BASELINE_EXTENDED/>
		<STANDARD/>
		<STANDARD_CONSTRAINED/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DProgramType" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DProgramType.hx">
		<FRAGMENT/>
		<VERTEX/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DRenderMode" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DRenderMode.hx">
		<AUTO/>
		<SOFTWARE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DStencilAction" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DStencilAction.hx">
		<DECREMENT_SATURATE/>
		<DECREMENT_WRAP/>
		<INCREMENT_SATURATE/>
		<INCREMENT_WRAP/>
		<INVERT/>
		<KEEP/>
		<SET/>
		<ZERO/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DTextureFilter" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DTextureFilter.hx">
		<ANISOTROPIC16X/>
		<ANISOTROPIC2X/>
		<ANISOTROPIC4X/>
		<ANISOTROPIC8X/>
		<LINEAR/>
		<NEAREST/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DTextureFormat" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DTextureFormat.hx">
		<BGRA/>
		<BGRA_PACKED/>
		<BGR_PACKED/>
		<COMPRESSED/>
		<COMPRESSED_ALPHA/>
		<RGBA_HALF_FLOAT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DTriangleFace" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DTriangleFace.hx">
		<BACK/>
		<FRONT/>
		<FRONT_AND_BACK/>
		<NONE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DVertexBufferFormat" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DVertexBufferFormat.hx">
		<BYTES_4/>
		<FLOAT_1/>
		<FLOAT_2/>
		<FLOAT_3/>
		<FLOAT_4/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DWrapMode" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Context3DWrapMode.hx">
		<CLAMP/>
		<CLAMP_U_REPEAT_V/>
		<REPEAT/>
		<REPEAT_U_CLAMP_V/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display3D.IndexBuffer3D" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/IndexBuffer3D.hx" extern="1">
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:startOffset:count">
	<c path="flash.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromByteArray>
		<uploadFromVector public="1" set="method"><f a="data:startOffset:count">
	<c path="flash.Vector"><x path="UInt"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromVector>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display3D.Program3D" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/Program3D.hx" extern="1">
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<upload public="1" set="method"><f a="vertexProgram:fragmentProgram">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></upload>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display3D.VertexBuffer3D" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/VertexBuffer3D.hx" extern="1">
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:startVertex:numVertices">
	<c path="flash.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromByteArray>
		<uploadFromVector public="1" set="method"><f a="data:startVertex:numVertices">
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromVector>
	</class>
	<class path="flash.display3D.textures.TextureBase" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/textures/TextureBase.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
	</class>
	<class path="flash.display3D.textures.CubeTexture" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/textures/CubeTexture.hx" extern="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<uploadCompressedTextureFromByteArray public="1" set="method">
			<f a="data:byteArrayOffset:?async" v="::false">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{async:false}</e></m></meta>
		</uploadCompressedTextureFromByteArray>
		<uploadFromBitmapData public="1" set="method">
			<f a="source:side:?miplevel" v="::0">
				<c path="flash.display.BitmapData"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{miplevel:0}</e></m></meta>
		</uploadFromBitmapData>
		<uploadFromByteArray public="1" set="method">
			<f a="data:byteArrayOffset:side:?miplevel" v=":::0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{miplevel:0}</e></m></meta>
		</uploadFromByteArray>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display3D.textures.RectangleTexture" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/textures/RectangleTexture.hx" extern="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<uploadFromBitmapData public="1" set="method"><f a="source">
	<c path="flash.display.BitmapData"/>
	<x path="Void"/>
</f></uploadFromBitmapData>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></uploadFromByteArray>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display3D.textures.Texture" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/textures/Texture.hx" extern="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<uploadCompressedTextureFromByteArray public="1" set="method">
			<f a="data:byteArrayOffset:?async" v="::false">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{async:false}</e></m></meta>
		</uploadCompressedTextureFromByteArray>
		<uploadFromBitmapData public="1" set="method">
			<f a="source:?miplevel" v=":0">
				<c path="flash.display.BitmapData"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{miplevel:0}</e></m></meta>
		</uploadFromBitmapData>
		<uploadFromByteArray public="1" set="method">
			<f a="data:byteArrayOffset:?miplevel" v="::0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{miplevel:0}</e></m></meta>
		</uploadFromByteArray>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display3D.textures.VideoTexture" params="" file="C:\HaxeToolkit\haxe\std/flash/display3D/textures/VideoTexture.hx" extern="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<videoHeight public="1" set="null"><x path="Int"/></videoHeight>
		<videoWidth public="1" set="null"><x path="Int"/></videoWidth>
		<attachCamera public="1" set="method"><f a="theCamera">
	<c path="flash.media.Camera"/>
	<x path="Void"/>
</f></attachCamera>
		<attachNetStream public="1" set="method"><f a="netStream">
	<c path="flash.net.NetStream"/>
	<x path="Void"/>
</f></attachNetStream>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.errors.Error" params="" file="C:\HaxeToolkit\haxe\std/flash/errors/Error.hx" extern="1">
		<length public="1" static="1"><x path="Int"/></length>
		<getErrorMessage public="1" set="method" static="1"><f a="index">
	<x path="Int"/>
	<c path="String"/>
</f></getErrorMessage>
		<throwError public="1" set="method" static="1"><f a="type:index:?p1:?p2:?p3:?p4:?p5">
	<x path="Class"><d/></x>
	<x path="UInt"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
</f></throwError>
		<errorID public="1" set="null"><x path="Int"/></errorID>
		<message public="1"><d/></message>
		<name public="1"><d/></name>
		<getStackTrace public="1" set="method"><f a=""><c path="String"/></f></getStackTrace>
		<new public="1" set="method">
			<f a="?message:?id" v=":0">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{id:0}</e></m></meta>
		</new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.errors.ArgumentError" params="" file="C:\HaxeToolkit\haxe\std/flash/errors/ArgumentError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<meta><m n=":native"><e>"ArgumentError"</e></m></meta>
	</class>
	<class path="flash.errors.DRMManagerError" params="" file="C:\HaxeToolkit\haxe\std/flash/errors/DRMManagerError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<subErrorID public="1" set="null"><x path="Int"/></subErrorID>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="message:id:subErrorID">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.errors.DefinitionError" params="" file="C:\HaxeToolkit\haxe\std/flash/errors/DefinitionError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<meta><m n=":native"><e>"DefinitionError"</e></m></meta>
	</class>
	<class path="flash.errors.IOError" params="" file="C:\HaxeToolkit\haxe\std/flash/errors/IOError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<new public="1" set="method">
			<f a="?message:?id" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{id:0}</e></m></meta>
		</new>
	</class>
	<class path="flash.errors.EOFError" params="" file="C:\HaxeToolkit\haxe\std/flash/errors/EOFError.hx" extern="1">
		<extends path="flash.errors.IOError"/>
		<new public="1" set="method">
			<f a="?message:?id" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{id:0}</e></m></meta>
		</new>
	</class>
	<class path="flash.errors.EvalError" params="" file="C:\HaxeToolkit\haxe\std/flash/errors/EvalError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<meta><m n=":native"><e>"EvalError"</e></m></meta>
	</class>
	<class path="flash.errors.IllegalOperationError" params="" file="C:\HaxeToolkit\haxe\std/flash/errors/IllegalOperationError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<new public="1" set="method">
			<f a="?message:?id" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{id:0}</e></m></meta>
		</new>
	</class>
	<class path="flash.errors.InvalidSWFError" params="" file="C:\HaxeToolkit\haxe\std/flash/errors/InvalidSWFError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<new public="1" set="method">
			<f a="?message:?id" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{id:0}</e></m></meta>
		</new>
	</class>
	<class path="flash.errors.MemoryError" params="" file="C:\HaxeToolkit\haxe\std/flash/errors/MemoryError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<new public="1" set="method">
			<f a="?message:?id" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{id:0}</e></m></meta>
		</new>
	</class>
	<class path="flash.errors.RangeError" params="" file="C:\HaxeToolkit\haxe\std/flash/errors/RangeError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<meta><m n=":native"><e>"RangeError"</e></m></meta>
	</class>
	<class path="flash.errors.ReferenceError" params="" file="C:\HaxeToolkit\haxe\std/flash/errors/ReferenceError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<meta><m n=":native"><e>"ReferenceError"</e></m></meta>
	</class>
	<class path="flash.errors.ScriptTimeoutError" params="" file="C:\HaxeToolkit\haxe\std/flash/errors/ScriptTimeoutError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<new public="1" set="method">
			<f a="?message:?id" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{id:0}</e></m></meta>
		</new>
	</class>
	<class path="flash.errors.SecurityError" params="" file="C:\HaxeToolkit\haxe\std/flash/errors/SecurityError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<meta><m n=":native"><e>"SecurityError"</e></m></meta>
	</class>
	<class path="flash.errors.StackOverflowError" params="" file="C:\HaxeToolkit\haxe\std/flash/errors/StackOverflowError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<new public="1" set="method">
			<f a="?message:?id" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{id:0}</e></m></meta>
		</new>
	</class>
	<class path="flash.errors.SyntaxError" params="" file="C:\HaxeToolkit\haxe\std/flash/errors/SyntaxError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<meta><m n=":native"><e>"SyntaxError"</e></m></meta>
	</class>
	<class path="flash.errors.TypeError" params="" file="C:\HaxeToolkit\haxe\std/flash/errors/TypeError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<meta><m n=":native"><e>"TypeError"</e></m></meta>
	</class>
	<class path="flash.errors.URIError" params="" file="C:\HaxeToolkit\haxe\std/flash/errors/URIError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<meta><m n=":native"><e>"URIError"</e></m></meta>
	</class>
	<class path="flash.errors.UninitializedError" params="" file="C:\HaxeToolkit\haxe\std/flash/errors/UninitializedError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<meta><m n=":native"><e>"UninitializedError"</e></m></meta>
	</class>
	<class path="flash.errors.VerifyError" params="" file="C:\HaxeToolkit\haxe\std/flash/errors/VerifyError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<meta><m n=":native"><e>"VerifyError"</e></m></meta>
	</class>
	<class path="flash.events.AVDictionaryDataEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/AVDictionaryDataEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<AV_DICTIONARY_DATA public="1" static="1"><c path="String"/></AV_DICTIONARY_DATA>
		<dictionary public="1" set="null"><c path="flash.utils.Dictionary"/></dictionary>
		<time public="1" set="null"><x path="Float"/></time>
		<new public="1" set="method">
			<f a="?type:?bubbles:?cancelable:?init_dictionary:?init_dataTime" v=":false:false::0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="flash.utils.Dictionary"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{init_dataTime:0,cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.AVHTTPStatusEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/AVHTTPStatusEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<AV_HTTP_RESPONSE_STATUS public="1" static="1"><c path="String"/></AV_HTTP_RESPONSE_STATUS>
		<responseHeaders public="1"><c path="Array"><d/></c></responseHeaders>
		<responseURL public="1"><c path="String"/></responseURL>
		<status public="1" set="null"><x path="Int"/></status>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?status:?responseUrl:?responseHeaders" v=":false:false:0::">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="Array"><d/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{status:0,cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.AVLoadInfoEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/AVLoadInfoEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<AV_LOAD_INFO public="1" static="1"><d/></AV_LOAD_INFO>
		<loadInfo public="1" set="null"><c path="flash.utils.Dictionary"/></loadInfo>
		<new public="1" set="method">
			<f a="?type:?bubbles:?cancelable:?inLoadInfo" v=":false:false:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="flash.utils.Dictionary"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.AVManifestLoadEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/AVManifestLoadEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<AV_MANIFEST_LOAD public="1" static="1"><c path="String"/></AV_MANIFEST_LOAD>
		<duration public="1" set="null"><x path="Float"/></duration>
		<handle public="1" set="null"><x path="Int"/></handle>
		<result public="1" set="null"><c path="flash.media.AVResult"/></result>
		<userData public="1" set="null"><x path="Int"/></userData>
		<new public="1" set="method">
			<f a="?type:?bubbles:?cancelable:?inResult:?inUserData:?inHandle:?inDuration" v=":false:false:0:0:0:0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{inDuration:0,inHandle:0,inUserData:0,inResult:0,cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.AVPauseAtPeriodEndEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/AVPauseAtPeriodEndEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<AV_PAUSE_AT_PERIOD_END public="1" static="1"><c path="String"/></AV_PAUSE_AT_PERIOD_END>
		<userData public="1" set="null"><x path="Int"/></userData>
		<new public="1" set="method">
			<f a="?type:?bubbles:?cancelable:?userData" v=":false:false:0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{userData:0,cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.AVPlayStateEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/AVPlayStateEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<AV_PLAY_STATE public="1" static="1"><c path="String"/></AV_PLAY_STATE>
		<playState public="1" set="null"><c path="flash.media.AVPlayState"/></playState>
		<new public="1" set="method">
			<f a="?type:?bubbles:?cancelable:?inState" v=":false:false:0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{inState:0,cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.AVStatusEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/AVStatusEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<AV_STATUS public="1" static="1"><c path="String"/></AV_STATUS>
		<BACKGROUND_MANIFEST_ERROR public="1" static="1"><c path="String"/></BACKGROUND_MANIFEST_ERROR>
		<BACKGROUND_MANIFEST_WARNING public="1" static="1"><c path="String"/></BACKGROUND_MANIFEST_WARNING>
		<BUFFER_STATE public="1" static="1"><c path="String"/></BUFFER_STATE>
		<DECODER_TYPE public="1" static="1"><c path="String"/></DECODER_TYPE>
		<DIMENSION_CHANGE public="1" static="1"><c path="String"/></DIMENSION_CHANGE>
		<ERROR public="1" static="1"><c path="String"/></ERROR>
		<INSERTION_COMPLETE public="1" static="1"><c path="String"/></INSERTION_COMPLETE>
		<LOAD_COMPLETE public="1" static="1"><c path="String"/></LOAD_COMPLETE>
		<MANIFEST_UPDATE public="1" static="1"><c path="String"/></MANIFEST_UPDATE>
		<PLAY_STATE public="1" static="1"><c path="String"/></PLAY_STATE>
		<RENDER_TYPE public="1" static="1"><c path="String"/></RENDER_TYPE>
		<SEEK_COMPLETE public="1" static="1"><c path="String"/></SEEK_COMPLETE>
		<STEP_COMPLETE public="1" static="1"><c path="String"/></STEP_COMPLETE>
		<STREAM_SWITCH public="1" static="1"><c path="String"/></STREAM_SWITCH>
		<TRICKPLAY_ENDED public="1" static="1"><c path="String"/></TRICKPLAY_ENDED>
		<WARNING public="1" static="1"><c path="String"/></WARNING>
		<description public="1" set="null"><c path="String"/></description>
		<notificationType public="1" set="null"><c path="String"/></notificationType>
		<result public="1" set="null"><c path="flash.media.AVResult"/></result>
		<new public="1" set="method">
			<f a="?type:?bubbles:?cancelable:?inNotificationType:?inResult:?inDescription" v=":false:false::0:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{inResult:0,cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.AVStreamSwitchEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/AVStreamSwitchEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<ABR_SWITCH public="1" static="1"><x path="Int"/></ABR_SWITCH>
		<AV_STREAM_SWITCH public="1" static="1"><c path="String"/></AV_STREAM_SWITCH>
		<PERIOD_SWITCH public="1" static="1"><x path="Int"/></PERIOD_SWITCH>
		<bitrate public="1" set="null"><x path="Int"/></bitrate>
		<description public="1" set="null"><c path="String"/></description>
		<switchType public="1" set="null"><x path="Int"/></switchType>
		<time public="1" set="null"><x path="Float"/></time>
		<userData public="1" set="null"><x path="Int"/></userData>
		<new public="1" set="method">
			<f a="?type:?bubbles:?cancelable:?time:?switchType:?bitrate:?description:?userData" v=":false:false:0:0:0::0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{userData:0,bitrate:0,switchType:0,time:0,cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.AccelerometerEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/AccelerometerEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<UPDATE public="1" static="1"><c path="String"/></UPDATE>
		<accelerationX public="1"><x path="Float"/></accelerationX>
		<accelerationY public="1"><x path="Float"/></accelerationY>
		<accelerationZ public="1"><x path="Float"/></accelerationZ>
		<timestamp public="1"><x path="Float"/></timestamp>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?timestamp:?accelerationX:?accelerationY:?accelerationZ" v=":false:false:0:0:0:0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{accelerationZ:0,accelerationY:0,accelerationX:0,timestamp:0,cancelable:false,bubbles:false}</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.events.ActivityEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/ActivityEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<ACTIVITY public="1" static="1"><c path="String"/></ACTIVITY>
		<activating public="1"><x path="Bool"/></activating>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?activating" v=":false:false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{activating:false,cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.TextEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/TextEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<LINK public="1" static="1"><c path="String"/></LINK>
		<TEXT_INPUT public="1" static="1"><c path="String"/></TEXT_INPUT>
		<text public="1"><c path="String"/></text>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?text" v=":false:false:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.ErrorEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/ErrorEvent.hx" extern="1">
		<extends path="flash.events.TextEvent"/>
		<ERROR public="1" static="1"><c path="String"/></ERROR>
		<errorID public="1" set="null">
			<x path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</errorID>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?text:?id" v=":false:false::0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{id:0,cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.AsyncErrorEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/AsyncErrorEvent.hx" extern="1">
		<extends path="flash.events.ErrorEvent"/>
		<ASYNC_ERROR public="1" static="1"><c path="String"/></ASYNC_ERROR>
		<error public="1"><c path="flash.errors.Error"/></error>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?text:?error" v=":false:false::">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<c path="flash.errors.Error"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.ContextMenuEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/ContextMenuEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<MENU_ITEM_SELECT public="1" static="1"><c path="String"/></MENU_ITEM_SELECT>
		<MENU_SELECT public="1" static="1"><c path="String"/></MENU_SELECT>
		<contextMenuOwner public="1"><c path="flash.display.InteractiveObject"/></contextMenuOwner>
		<isMouseTargetInaccessible public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</isMouseTargetInaccessible>
		<mouseTarget public="1"><c path="flash.display.InteractiveObject"/></mouseTarget>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?mouseTarget:?contextMenuOwner" v=":false:false::">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="flash.display.InteractiveObject"/>
				<c path="flash.display.InteractiveObject"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.DRMAuthenticateEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/DRMAuthenticateEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<AUTHENTICATION_TYPE_DRM public="1" static="1"><c path="String"/></AUTHENTICATION_TYPE_DRM>
		<AUTHENTICATION_TYPE_PROXY public="1" static="1"><c path="String"/></AUTHENTICATION_TYPE_PROXY>
		<DRM_AUTHENTICATE public="1" static="1"><c path="String"/></DRM_AUTHENTICATE>
		<authenticationType public="1" set="null"><c path="String"/></authenticationType>
		<header public="1" set="null"><c path="String"/></header>
		<netstream public="1" set="null"><c path="flash.net.NetStream"/></netstream>
		<passwordPrompt public="1" set="null"><c path="String"/></passwordPrompt>
		<urlPrompt public="1" set="null"><c path="String"/></urlPrompt>
		<usernamePrompt public="1" set="null"><c path="String"/></usernamePrompt>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?header:?userPrompt:?passPrompt:?urlPrompt:?authenticationType:?netstream" v=":false:false::::::">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="flash.net.NetStream"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{cancelable:false,bubbles:false}</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.events.DRMAuthenticationCompleteEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/DRMAuthenticationCompleteEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<AUTHENTICATION_COMPLETE public="1" static="1"><c path="String"/></AUTHENTICATION_COMPLETE>
		<domain public="1"><c path="String"/></domain>
		<serverURL public="1"><c path="String"/></serverURL>
		<token public="1"><c path="flash.utils.ByteArray"/></token>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?inServerURL:?inDomain:?inToken" v=":false:false:::">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<c path="String"/>
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{cancelable:false,bubbles:false}</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.events.DRMAuthenticationErrorEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/DRMAuthenticationErrorEvent.hx" extern="1">
		<extends path="flash.events.ErrorEvent"/>
		<AUTHENTICATION_ERROR public="1" static="1"><c path="String"/></AUTHENTICATION_ERROR>
		<domain public="1"><c path="String"/></domain>
		<serverURL public="1"><c path="String"/></serverURL>
		<subErrorID public="1"><x path="Int"/></subErrorID>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?inDetail:?inErrorID:?inSubErrorID:?inServerURL:?inDomain" v=":false:false::0:0::">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{inSubErrorID:0,inErrorID:0,cancelable:false,bubbles:false}</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.events.DRMCustomProperties" params="" file="C:\HaxeToolkit\haxe\std/flash/events/DRMCustomProperties.hx" extern="1">
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.events.DRMDeviceGroupErrorEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/DRMDeviceGroupErrorEvent.hx" extern="1">
		<extends path="flash.events.ErrorEvent"/>
		<ADD_TO_DEVICE_GROUP_ERROR public="1" static="1"><c path="String"/></ADD_TO_DEVICE_GROUP_ERROR>
		<REMOVE_FROM_DEVICE_GROUP_ERROR public="1" static="1"><c path="String"/></REMOVE_FROM_DEVICE_GROUP_ERROR>
		<deviceGroup public="1"><c path="flash.net.drm.DRMDeviceGroup"/></deviceGroup>
		<drmUpdateNeeded public="1" set="null"><x path="Bool"/></drmUpdateNeeded>
		<subErrorID public="1"><x path="Int"/></subErrorID>
		<systemUpdateNeeded public="1" set="null"><x path="Bool"/></systemUpdateNeeded>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?errorDetail:?errorCode:?subErrorID:?deviceGroup:?systemUpdateNeeded:?drmUpdateNeeded" v=":false:false::0:0::false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="flash.net.drm.DRMDeviceGroup"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{drmUpdateNeeded:false,systemUpdateNeeded:false,subErrorID:0,errorCode:0,cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.DRMDeviceGroupEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/DRMDeviceGroupEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<ADD_TO_DEVICE_GROUP_COMPLETE public="1" static="1"><c path="String"/></ADD_TO_DEVICE_GROUP_COMPLETE>
		<REMOVE_FROM_DEVICE_GROUP_COMPLETE public="1" static="1"><c path="String"/></REMOVE_FROM_DEVICE_GROUP_COMPLETE>
		<deviceGroup public="1"><c path="flash.net.drm.DRMDeviceGroup"/></deviceGroup>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?deviceGroup" v=":false:false:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="flash.net.drm.DRMDeviceGroup"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.DRMErrorEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/DRMErrorEvent.hx" extern="1">
		<extends path="flash.events.ErrorEvent"/>
		<DRM_ERROR public="1" static="1"><c path="String"/></DRM_ERROR>
		<DRM_LOAD_DEVICEID_ERROR public="1" static="1"><c path="String"/></DRM_LOAD_DEVICEID_ERROR>
		<contentData public="1"><c path="flash.net.drm.DRMContentData"/></contentData>
		<drmUpdateNeeded public="1" set="null"><x path="Bool"/></drmUpdateNeeded>
		<subErrorID public="1" set="null"><x path="Int"/></subErrorID>
		<systemUpdateNeeded public="1" set="null"><x path="Bool"/></systemUpdateNeeded>
		<new public="1" set="method">
			<f a="?type:?bubbles:?cancelable:?inErrorDetail:?inErrorCode:?insubErrorID:?inMetadata:?inSystemUpdateNeeded:?inDrmUpdateNeeded" v=":false:false::0:0::false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="flash.net.drm.DRMContentData"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{inDrmUpdateNeeded:false,inSystemUpdateNeeded:false,insubErrorID:0,inErrorCode:0,cancelable:false,bubbles:false}</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.events.DRMLicenseRequestEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/DRMLicenseRequestEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<LICENSE_REQUEST public="1" static="1"><c path="String"/></LICENSE_REQUEST>
		<serverURL public="1"><c path="String"/></serverURL>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?inServerURL" v=":false:false:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.DRMMetadataEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/DRMMetadataEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<DRM_METADATA public="1" static="1"><c path="String"/></DRM_METADATA>
		<drmMetadata public="1" set="null"><c path="flash.net.drm.DRMContentData"/></drmMetadata>
		<timestamp public="1" set="null"><x path="Float"/></timestamp>
		<new public="1" set="method">
			<f a="?type:?bubbles:?cancelable:?inMetadata:?inTimestamp" v=":false:false::0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="flash.utils.ByteArray"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{inTimestamp:0,cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.DRMReturnVoucherCompleteEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/DRMReturnVoucherCompleteEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<RETURN_VOUCHER_COMPLETE public="1" static="1"><c path="String"/></RETURN_VOUCHER_COMPLETE>
		<licenseID public="1"><c path="String"/></licenseID>
		<numberOfVouchersReturned public="1"><x path="Int"/></numberOfVouchersReturned>
		<policyID public="1"><c path="String"/></policyID>
		<serverURL public="1"><c path="String"/></serverURL>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?inServerURL:?inLicenseID:?inPolicyID:?inNumberOfVouchersReturned" v=":false:false::::0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{inNumberOfVouchersReturned:0,cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.DRMReturnVoucherErrorEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/DRMReturnVoucherErrorEvent.hx" extern="1">
		<extends path="flash.events.ErrorEvent"/>
		<RETURN_VOUCHER_ERROR public="1" static="1"><c path="String"/></RETURN_VOUCHER_ERROR>
		<licenseID public="1"><c path="String"/></licenseID>
		<policyID public="1"><c path="String"/></policyID>
		<serverURL public="1"><c path="String"/></serverURL>
		<subErrorID public="1"><x path="Int"/></subErrorID>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?inDetail:?inErrorID:?inSubErrorID:?inServerURL:?inLicenseID:?inPolicyID" v=":false:false::0:0:::">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{inSubErrorID:0,inErrorID:0,cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.DRMStatusEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/DRMStatusEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<DRM_STATUS public="1" static="1"><c path="String"/></DRM_STATUS>
		<contentData public="1"><c path="flash.net.drm.DRMContentData"/></contentData>
		<isLocal public="1"><x path="Bool"/></isLocal>
		<voucher public="1"><c path="flash.net.drm.DRMVoucher"/></voucher>
		<new public="1" set="method">
			<f a="?type:?bubbles:?cancelable:?inMetadata:?inVoucher:?inLocal" v=":false:false:::false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="flash.net.drm.DRMContentData"/>
				<c path="flash.net.drm.DRMVoucher"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{inLocal:false,cancelable:false,bubbles:false}</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.events.DataEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/DataEvent.hx" extern="1">
		<extends path="flash.events.TextEvent"/>
		<DATA public="1" static="1"><c path="String"/></DATA>
		<UPLOAD_COMPLETE_DATA public="1" static="1"><c path="String"/></UPLOAD_COMPLETE_DATA>
		<data public="1"><c path="String"/></data>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?data" v=":false:false:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<enum path="flash.events.EventPhase" params="" file="C:\HaxeToolkit\haxe\std/flash/events/EventPhase.hx">
		<AT_TARGET/>
		<BUBBLING_PHASE/>
		<CAPTURING_PHASE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>UInt</e></m>
		</meta>
	</enum>
	<class path="flash.events.FocusEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/FocusEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<FOCUS_IN public="1" static="1"><c path="String"/></FOCUS_IN>
		<FOCUS_OUT public="1" static="1"><c path="String"/></FOCUS_OUT>
		<KEY_FOCUS_CHANGE public="1" static="1"><c path="String"/></KEY_FOCUS_CHANGE>
		<MOUSE_FOCUS_CHANGE public="1" static="1"><c path="String"/></MOUSE_FOCUS_CHANGE>
		<isRelatedObjectInaccessible public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</isRelatedObjectInaccessible>
		<keyCode public="1"><x path="UInt"/></keyCode>
		<relatedObject public="1"><c path="flash.display.InteractiveObject"/></relatedObject>
		<shiftKey public="1"><x path="Bool"/></shiftKey>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?relatedObject:?shiftKey:?keyCode" v=":true:false::false:0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="flash.display.InteractiveObject"/>
				<x path="Bool"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{keyCode:0,shiftKey:false,cancelable:false,bubbles:true}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.FullScreenEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/FullScreenEvent.hx" extern="1">
		<extends path="flash.events.ActivityEvent"/>
		<FULL_SCREEN public="1" static="1"><c path="String"/></FULL_SCREEN>
		<FULL_SCREEN_INTERACTIVE_ACCEPTED public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</FULL_SCREEN_INTERACTIVE_ACCEPTED>
		<fullScreen public="1" set="null"><x path="Bool"/></fullScreen>
		<interactive public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</interactive>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?fullScreen:?interactive" v=":false:false:false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{interactive:false,fullScreen:false,cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.GameInputEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/GameInputEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<DEVICE_ADDED public="1" static="1"><c path="String"/></DEVICE_ADDED>
		<DEVICE_REMOVED public="1" static="1"><c path="String"/></DEVICE_REMOVED>
		<DEVICE_UNUSABLE public="1" static="1"><c path="String"/></DEVICE_UNUSABLE>
		<device public="1" set="null"><c path="flash.ui.GameInputDevice"/></device>
		<new public="1" expr="{cancelable:false,bubbles:false}">
			<f a="type:?bubbles:?cancelable:?device">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="flash.ui.GameInputDevice"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{cancelable:false,bubbles:false}</e></m></meta>
		</new>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash11_8</e></m>
		</meta>
	</class>
	<class path="flash.events.GeolocationEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/GeolocationEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<UPDATE public="1" static="1"><c path="String"/></UPDATE>
		<altitude public="1"><x path="Float"/></altitude>
		<heading public="1"><x path="Float"/></heading>
		<horizontalAccuracy public="1"><x path="Float"/></horizontalAccuracy>
		<latitude public="1"><x path="Float"/></latitude>
		<longitude public="1"><x path="Float"/></longitude>
		<speed public="1"><x path="Float"/></speed>
		<timestamp public="1"><x path="Float"/></timestamp>
		<verticalAccuracy public="1"><x path="Float"/></verticalAccuracy>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?latitude:?longitude:?altitude:?hAccuracy:?vAccuracy:?speed:?heading:?timestamp" v=":false:false:0:0:0:0:0:0:0:0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{timestamp:0,heading:0,speed:0,vAccuracy:0,hAccuracy:0,altitude:0,longitude:0,latitude:0,cancelable:false,bubbles:false}</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.events.GestureEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/GestureEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<GESTURE_TWO_FINGER_TAP public="1" static="1"><c path="String"/></GESTURE_TWO_FINGER_TAP>
		<altKey public="1"><x path="Bool"/></altKey>
		<ctrlKey public="1"><x path="Bool"/></ctrlKey>
		<localX public="1"><x path="Float"/></localX>
		<localY public="1"><x path="Float"/></localY>
		<phase public="1"><c path="String"/></phase>
		<shiftKey public="1"><x path="Bool"/></shiftKey>
		<stageX public="1" set="null"><x path="Float"/></stageX>
		<stageY public="1" set="null"><x path="Float"/></stageY>
		<updateAfterEvent public="1" set="method"><f a=""><x path="Void"/></f></updateAfterEvent>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?phase:?localX:?localY:?ctrlKey:?altKey:?shiftKey" v=":true:false::0:0:false:false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{shiftKey:false,altKey:false,ctrlKey:false,localY:0,localX:0,cancelable:false,bubbles:true}</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<enum path="flash.events.GesturePhase" params="" file="C:\HaxeToolkit\haxe\std/flash/events/GesturePhase.hx">
		<ALL/>
		<BEGIN/>
		<END/>
		<UPDATE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</enum>
	<class path="flash.events.HTTPStatusEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/HTTPStatusEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<HTTP_RESPONSE_STATUS public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</HTTP_RESPONSE_STATUS>
		<HTTP_STATUS public="1" static="1"><c path="String"/></HTTP_STATUS>
		<redirected public="1"><x path="Bool"/></redirected>
		<responseHeaders public="1">
			<c path="Array"><d/></c>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</responseHeaders>
		<responseURL public="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</responseURL>
		<status public="1" set="null"><x path="Int"/></status>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?status:?redirected" v=":false:false:0:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{redirected:false,status:0,cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.IMEEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/IMEEvent.hx" extern="1">
		<extends path="flash.events.TextEvent"/>
		<IME_COMPOSITION public="1" static="1"><c path="String"/></IME_COMPOSITION>
		<IME_START_COMPOSITION public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</IME_START_COMPOSITION>
		<imeClient public="1">
			<c path="flash.text.ime.IIMEClient"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</imeClient>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?text:?imeClient" v=":false:false::">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<c path="flash.text.ime.IIMEClient"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.IOErrorEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/IOErrorEvent.hx" extern="1">
		<extends path="flash.events.ErrorEvent"/>
		<DISK_ERROR public="1" static="1"><c path="String"/></DISK_ERROR>
		<IO_ERROR public="1" static="1"><c path="String"/></IO_ERROR>
		<NETWORK_ERROR public="1" static="1"><c path="String"/></NETWORK_ERROR>
		<VERIFY_ERROR public="1" static="1"><c path="String"/></VERIFY_ERROR>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?text:?id" v=":false:false::0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{id:0,cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.KeyboardEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/KeyboardEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<KEY_DOWN public="1" static="1"><c path="String"/></KEY_DOWN>
		<KEY_UP public="1" static="1"><c path="String"/></KEY_UP>
		<altKey public="1"><x path="Bool"/></altKey>
		<charCode public="1"><x path="UInt"/></charCode>
		<ctrlKey public="1"><x path="Bool"/></ctrlKey>
		<keyCode public="1"><x path="UInt"/></keyCode>
		<keyLocation public="1"><e path="flash.ui.KeyLocation"/></keyLocation>
		<shiftKey public="1"><x path="Bool"/></shiftKey>
		<updateAfterEvent public="1" set="method"><f a=""><x path="Void"/></f></updateAfterEvent>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?charCodeValue:?keyCodeValue:?keyLocationValue:?ctrlKeyValue:?altKeyValue:?shiftKeyValue" v=":true:false:0:0:0:false:false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<e path="flash.ui.KeyLocation"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{shiftKeyValue:false,altKeyValue:false,ctrlKeyValue:false,keyLocationValue:0,keyCodeValue:0,charCodeValue:0,cancelable:false,bubbles:true}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.MouseEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/MouseEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<CLICK public="1" static="1"><c path="String"/></CLICK>
		<CONTEXT_MENU public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</CONTEXT_MENU>
		<DOUBLE_CLICK public="1" static="1"><c path="String"/></DOUBLE_CLICK>
		<MIDDLE_CLICK public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</MIDDLE_CLICK>
		<MIDDLE_MOUSE_DOWN public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</MIDDLE_MOUSE_DOWN>
		<MIDDLE_MOUSE_UP public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</MIDDLE_MOUSE_UP>
		<MOUSE_DOWN public="1" static="1"><c path="String"/></MOUSE_DOWN>
		<MOUSE_MOVE public="1" static="1"><c path="String"/></MOUSE_MOVE>
		<MOUSE_OUT public="1" static="1"><c path="String"/></MOUSE_OUT>
		<MOUSE_OVER public="1" static="1"><c path="String"/></MOUSE_OVER>
		<MOUSE_UP public="1" static="1"><c path="String"/></MOUSE_UP>
		<MOUSE_WHEEL public="1" static="1"><c path="String"/></MOUSE_WHEEL>
		<RELEASE_OUTSIDE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</RELEASE_OUTSIDE>
		<RIGHT_CLICK public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</RIGHT_CLICK>
		<RIGHT_MOUSE_DOWN public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</RIGHT_MOUSE_DOWN>
		<RIGHT_MOUSE_UP public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</RIGHT_MOUSE_UP>
		<ROLL_OUT public="1" static="1"><c path="String"/></ROLL_OUT>
		<ROLL_OVER public="1" static="1"><c path="String"/></ROLL_OVER>
		<altKey public="1"><x path="Bool"/></altKey>
		<buttonDown public="1"><x path="Bool"/></buttonDown>
		<ctrlKey public="1"><x path="Bool"/></ctrlKey>
		<delta public="1"><x path="Int"/></delta>
		<isRelatedObjectInaccessible public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</isRelatedObjectInaccessible>
		<localX public="1"><x path="Float"/></localX>
		<localY public="1"><x path="Float"/></localY>
		<movementX public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</movementX>
		<movementY public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</movementY>
		<relatedObject public="1"><c path="flash.display.InteractiveObject"/></relatedObject>
		<shiftKey public="1"><x path="Bool"/></shiftKey>
		<stageX public="1" set="null"><x path="Float"/></stageX>
		<stageY public="1" set="null"><x path="Float"/></stageY>
		<updateAfterEvent public="1" set="method"><f a=""><x path="Void"/></f></updateAfterEvent>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?localX:?localY:?relatedObject:?ctrlKey:?altKey:?shiftKey:?buttonDown:?delta" v=":true:false::::false:false:false:false:0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="flash.display.InteractiveObject"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{delta:0,buttonDown:false,shiftKey:false,altKey:false,ctrlKey:false,cancelable:false,bubbles:true}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.NetDataEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/NetDataEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<MEDIA_TYPE_DATA public="1" static="1"><c path="String"/></MEDIA_TYPE_DATA>
		<info public="1" set="null"><d/></info>
		<timestamp public="1" set="null"><x path="Float"/></timestamp>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?timestamp:?info" v=":false:false:0:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Float"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{timestamp:0,cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.NetFilterEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/NetFilterEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<data public="1"><c path="flash.utils.ByteArray"/></data>
		<header public="1"><c path="flash.utils.ByteArray"/></header>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?header:?data" v=":false:false::">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="flash.utils.ByteArray"/>
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.NetMonitorEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/NetMonitorEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<NET_STREAM_CREATE public="1" static="1"><c path="String"/></NET_STREAM_CREATE>
		<netStream public="1" set="null"><c path="flash.net.NetStream"/></netStream>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?netStream" v=":false:false:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="flash.net.NetStream"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.NetStatusEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/NetStatusEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<NET_STATUS public="1" static="1"><c path="String"/></NET_STATUS>
		<info public="1"><d/></info>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?info" v=":false:false:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.OutputProgressEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/OutputProgressEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<OUTPUT_PROGRESS public="1" static="1"><c path="String"/></OUTPUT_PROGRESS>
		<bytesPending public="1"><x path="Float"/></bytesPending>
		<bytesTotal public="1"><x path="Float"/></bytesTotal>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?bytesPending:?bytesTotal" v=":false:false:0:0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{bytesTotal:0,bytesPending:0,cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.PressAndTapGestureEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/PressAndTapGestureEvent.hx" extern="1">
		<extends path="flash.events.GestureEvent"/>
		<GESTURE_PRESS_AND_TAP public="1" static="1"><c path="String"/></GESTURE_PRESS_AND_TAP>
		<tapLocalX public="1"><x path="Float"/></tapLocalX>
		<tapLocalY public="1"><x path="Float"/></tapLocalY>
		<tapStageX public="1" set="null"><x path="Float"/></tapStageX>
		<tapStageY public="1" set="null"><x path="Float"/></tapStageY>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?phase:?localX:?localY:?tapLocalX:?tapLocalY:?ctrlKey:?altKey:?shiftKey" v=":true:false::0:0:0:0:false:false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{shiftKey:false,altKey:false,ctrlKey:false,tapLocalY:0,tapLocalX:0,localY:0,localX:0,cancelable:false,bubbles:true}</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.events.ProgressEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/ProgressEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<PROGRESS public="1" static="1"><c path="String"/></PROGRESS>
		<SOCKET_DATA public="1" static="1"><c path="String"/></SOCKET_DATA>
		<bytesLoaded public="1"><x path="Float"/></bytesLoaded>
		<bytesTotal public="1"><x path="Float"/></bytesTotal>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?bytesLoaded:?bytesTotal" v=":false:false:0:0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{bytesTotal:0,bytesLoaded:0,cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.SampleDataEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/SampleDataEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<SAMPLE_DATA public="1" static="1"><c path="String"/></SAMPLE_DATA>
		<data public="1"><c path="flash.utils.ByteArray"/></data>
		<position public="1"><x path="Float"/></position>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?theposition:?thedata" v=":false:false:0:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Float"/>
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{theposition:0,cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.SecurityErrorEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/SecurityErrorEvent.hx" extern="1">
		<extends path="flash.events.ErrorEvent"/>
		<SECURITY_ERROR public="1" static="1"><c path="String"/></SECURITY_ERROR>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?text:?id" v=":false:false::0">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{id:0,cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.ShaderEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/ShaderEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<COMPLETE public="1" static="1"><c path="String"/></COMPLETE>
		<bitmapData public="1"><c path="flash.display.BitmapData"/></bitmapData>
		<byteArray public="1"><c path="flash.utils.ByteArray"/></byteArray>
		<vector public="1"><c path="flash.Vector"><x path="Float"/></c></vector>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?bitmap:?array:?vector" v=":false:false:::">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="flash.display.BitmapData"/>
				<c path="flash.utils.ByteArray"/>
				<c path="flash.Vector"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.SoftKeyboardEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/SoftKeyboardEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<SOFT_KEYBOARD_ACTIVATE public="1" static="1"><c path="String"/></SOFT_KEYBOARD_ACTIVATE>
		<SOFT_KEYBOARD_ACTIVATING public="1" static="1"><c path="String"/></SOFT_KEYBOARD_ACTIVATING>
		<SOFT_KEYBOARD_DEACTIVATE public="1" static="1"><c path="String"/></SOFT_KEYBOARD_DEACTIVATE>
		<relatedObject public="1"><c path="flash.display.InteractiveObject"/></relatedObject>
		<triggerType public="1" set="null"><c path="String"/></triggerType>
		<new public="1" set="method"><f a="type:bubbles:cancelable:relatedObjectVal:triggerTypeVal">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="flash.display.InteractiveObject"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.events.SoftKeyboardTrigger" params="" file="C:\HaxeToolkit\haxe\std/flash/events/SoftKeyboardTrigger.hx" extern="1">
		<CONTENT_TRIGGERED public="1" static="1"><c path="String"/></CONTENT_TRIGGERED>
		<USER_TRIGGERED public="1" static="1"><c path="String"/></USER_TRIGGERED>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.events.StageVideoAvailabilityEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/StageVideoAvailabilityEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<STAGE_VIDEO_AVAILABILITY public="1" static="1"><c path="String"/></STAGE_VIDEO_AVAILABILITY>
		<availability public="1" set="null"><c path="String"/></availability>
		<driver public="1"><c path="String"/></driver>
		<reason public="1"><c path="String"/></reason>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?availability" v=":false:false:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.StageVideoEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/StageVideoEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<RENDER_STATE public="1" static="1"><c path="String"/></RENDER_STATE>
		<RENDER_STATUS_ACCELERATED public="1" static="1"><c path="String"/></RENDER_STATUS_ACCELERATED>
		<RENDER_STATUS_SOFTWARE public="1" static="1"><c path="String"/></RENDER_STATUS_SOFTWARE>
		<RENDER_STATUS_UNAVAILABLE public="1" static="1"><c path="String"/></RENDER_STATUS_UNAVAILABLE>
		<codecInfo public="1"><c path="String"/></codecInfo>
		<colorSpace public="1" set="null"><c path="String"/></colorSpace>
		<status public="1" set="null"><c path="String"/></status>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?status:?colorSpace" v=":false:false::">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{cancelable:false,bubbles:false}</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_2</e></m></meta>
	</class>
	<class path="flash.events.StatusEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/StatusEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<STATUS public="1" static="1"><c path="String"/></STATUS>
		<code public="1"><c path="String"/></code>
		<level public="1"><c path="String"/></level>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?code:?level" v=":false:false::">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.SyncEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/SyncEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<SYNC public="1" static="1"><c path="String"/></SYNC>
		<changeList public="1"><c path="Array"><d/></c></changeList>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?changeList" v=":false:false:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="Array"><d/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.ThrottleEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/ThrottleEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<THROTTLE public="1" static="1"><c path="String"/></THROTTLE>
		<state public="1" set="null"><c path="String"/></state>
		<targetFrameRate public="1" set="null"><x path="Float"/></targetFrameRate>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?state:?targetFrameRate" v=":false:false::0">
				<e path="flash.events.ThrottleType"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{targetFrameRate:0,cancelable:false,bubbles:false}</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash11_2</e></m></meta>
	</class>
	<enum path="flash.events.ThrottleType" params="" file="C:\HaxeToolkit\haxe\std/flash/events/ThrottleType.hx">
		<PAUSE/>
		<RESUME/>
		<THROTTLE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.events.TimerEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/TimerEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<TIMER public="1" static="1"><c path="String"/></TIMER>
		<TIMER_COMPLETE public="1" static="1"><c path="String"/></TIMER_COMPLETE>
		<updateAfterEvent public="1" set="method"><f a=""><x path="Void"/></f></updateAfterEvent>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable" v=":false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.TouchEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/TouchEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<PROXIMITY_BEGIN public="1" static="1"><c path="String"/></PROXIMITY_BEGIN>
		<PROXIMITY_END public="1" static="1"><c path="String"/></PROXIMITY_END>
		<PROXIMITY_MOVE public="1" static="1"><c path="String"/></PROXIMITY_MOVE>
		<PROXIMITY_OUT public="1" static="1"><c path="String"/></PROXIMITY_OUT>
		<PROXIMITY_OVER public="1" static="1"><c path="String"/></PROXIMITY_OVER>
		<PROXIMITY_ROLL_OUT public="1" static="1"><c path="String"/></PROXIMITY_ROLL_OUT>
		<PROXIMITY_ROLL_OVER public="1" static="1"><c path="String"/></PROXIMITY_ROLL_OVER>
		<TOUCH_BEGIN public="1" static="1"><c path="String"/></TOUCH_BEGIN>
		<TOUCH_END public="1" static="1"><c path="String"/></TOUCH_END>
		<TOUCH_MOVE public="1" static="1"><c path="String"/></TOUCH_MOVE>
		<TOUCH_OUT public="1" static="1"><c path="String"/></TOUCH_OUT>
		<TOUCH_OVER public="1" static="1"><c path="String"/></TOUCH_OVER>
		<TOUCH_ROLL_OUT public="1" static="1"><c path="String"/></TOUCH_ROLL_OUT>
		<TOUCH_ROLL_OVER public="1" static="1"><c path="String"/></TOUCH_ROLL_OVER>
		<TOUCH_TAP public="1" static="1"><c path="String"/></TOUCH_TAP>
		<altKey public="1"><x path="Bool"/></altKey>
		<ctrlKey public="1"><x path="Bool"/></ctrlKey>
		<isPrimaryTouchPoint public="1"><x path="Bool"/></isPrimaryTouchPoint>
		<isRelatedObjectInaccessible public="1"><x path="Bool"/></isRelatedObjectInaccessible>
		<localX public="1"><x path="Float"/></localX>
		<localY public="1"><x path="Float"/></localY>
		<pressure public="1"><x path="Float"/></pressure>
		<relatedObject public="1"><c path="flash.display.InteractiveObject"/></relatedObject>
		<shiftKey public="1"><x path="Bool"/></shiftKey>
		<sizeX public="1"><x path="Float"/></sizeX>
		<sizeY public="1"><x path="Float"/></sizeY>
		<stageX public="1" set="null"><x path="Float"/></stageX>
		<stageY public="1" set="null"><x path="Float"/></stageY>
		<touchPointID public="1"><x path="Int"/></touchPointID>
		<updateAfterEvent public="1" set="method"><f a=""><x path="Void"/></f></updateAfterEvent>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?touchPointID:?isPrimaryTouchPoint:?localX:?localY:?sizeX:?sizeY:?pressure:?relatedObject:?ctrlKey:?altKey:?shiftKey" v=":true:false:0:false:0.:0.:0.:0.:0.::false:false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="flash.display.InteractiveObject"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{shiftKey:false,altKey:false,ctrlKey:false,pressure:0.,sizeY:0.,sizeX:0.,localY:0.,localX:0.,isPrimaryTouchPoint:false,touchPointID:0,cancelable:false,bubbles:true}</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.events.TransformGestureEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/TransformGestureEvent.hx" extern="1">
		<extends path="flash.events.GestureEvent"/>
		<GESTURE_PAN public="1" static="1"><c path="String"/></GESTURE_PAN>
		<GESTURE_ROTATE public="1" static="1"><c path="String"/></GESTURE_ROTATE>
		<GESTURE_SWIPE public="1" static="1"><c path="String"/></GESTURE_SWIPE>
		<GESTURE_ZOOM public="1" static="1"><c path="String"/></GESTURE_ZOOM>
		<offsetX public="1"><x path="Float"/></offsetX>
		<offsetY public="1"><x path="Float"/></offsetY>
		<rotation public="1"><x path="Float"/></rotation>
		<scaleX public="1"><x path="Float"/></scaleX>
		<scaleY public="1"><x path="Float"/></scaleY>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?phase:?localX:?localY:?scaleX:?scaleY:?rotation:?offsetX:?offsetY:?ctrlKey:?altKey:?shiftKey" v=":true:false::0:0:1:1:0:0:0:false:false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{shiftKey:false,altKey:false,ctrlKey:false,offsetY:0,offsetX:0,rotation:0,scaleY:1,scaleX:1,localY:0,localX:0,cancelable:false,bubbles:true}</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.events.UncaughtErrorEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/UncaughtErrorEvent.hx" extern="1">
		<extends path="flash.events.ErrorEvent"/>
		<UNCAUGHT_ERROR public="1" static="1"><c path="String"/></UNCAUGHT_ERROR>
		<error public="1" set="null"><d/></error>
		<new public="1" set="method">
			<f a="?type:?bubbles:?cancelable:?error_in" v=":true:true:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{cancelable:true,bubbles:true}</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.events.UncaughtErrorEvents" params="" file="C:\HaxeToolkit\haxe\std/flash/events/UncaughtErrorEvents.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.events.VideoEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/VideoEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<RENDER_STATE public="1" static="1"><c path="String"/></RENDER_STATE>
		<RENDER_STATUS_ACCELERATED public="1" static="1"><c path="String"/></RENDER_STATUS_ACCELERATED>
		<RENDER_STATUS_SOFTWARE public="1" static="1"><c path="String"/></RENDER_STATUS_SOFTWARE>
		<RENDER_STATUS_UNAVAILABLE public="1" static="1"><c path="String"/></RENDER_STATUS_UNAVAILABLE>
		<codecInfo public="1"><c path="String"/></codecInfo>
		<status public="1" set="null"><c path="String"/></status>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?status" v=":false:false:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{cancelable:false,bubbles:false}</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10_2</e></m></meta>
	</class>
	<class path="flash.events.VideoTextureEvent" params="" file="C:\HaxeToolkit\haxe\std/flash/events/VideoTextureEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<RENDER_STATE public="1" static="1"><c path="String"/></RENDER_STATE>
		<codecInfo public="1"><c path="String"/></codecInfo>
		<colorSpace public="1" set="null"><c path="String"/></colorSpace>
		<status public="1" set="null"><c path="String"/></status>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?status:?colorSpace" v=":false:false::">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{cancelable:false,bubbles:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.events.WeakFunctionClosure" params="" file="C:\HaxeToolkit\haxe\std/flash/events/WeakFunctionClosure.hx" extern="1"/>
	<class path="flash.events.WeakMethodClosure" params="" file="C:\HaxeToolkit\haxe\std/flash/events/WeakMethodClosure.hx" extern="1"><new public="1" set="method"><f a=""><x path="Void"/></f></new></class>
	<class path="flash.external.ExternalInterface" params="" file="C:\HaxeToolkit\haxe\std/flash/external/ExternalInterface.hx" extern="1">
		<available public="1" set="null" static="1"><x path="Bool"/></available>
		<marshallExceptions public="1" static="1"><x path="Bool"/></marshallExceptions>
		<objectID public="1" set="null" static="1"><c path="String"/></objectID>
		<addCallback public="1" set="method" static="1"><f a="functionName:closure">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></addCallback>
		<call public="1" set="method" static="1"><f a="functionName:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
</f></call>
	</class>
	<class path="flash.filters.BitmapFilter" params="" file="C:\HaxeToolkit\haxe\std/flash/filters/BitmapFilter.hx" extern="1">
		<clone public="1" set="method"><f a=""><c path="flash.filters.BitmapFilter"/></f></clone>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.filters.BevelFilter" params="" file="C:\HaxeToolkit\haxe\std/flash/filters/BevelFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<angle public="1"><x path="Float"/></angle>
		<blurX public="1"><x path="Float"/></blurX>
		<blurY public="1"><x path="Float"/></blurY>
		<distance public="1"><x path="Float"/></distance>
		<highlightAlpha public="1"><x path="Float"/></highlightAlpha>
		<highlightColor public="1"><x path="UInt"/></highlightColor>
		<knockout public="1"><x path="Bool"/></knockout>
		<quality public="1"><x path="Int"/></quality>
		<shadowAlpha public="1"><x path="Float"/></shadowAlpha>
		<shadowColor public="1"><x path="UInt"/></shadowColor>
		<strength public="1"><x path="Float"/></strength>
		<type public="1"><e path="flash.filters.BitmapFilterType"/></type>
		<new public="1" set="method">
			<f a="?distance:?angle:?highlightColor:?highlightAlpha:?shadowColor:?shadowAlpha:?blurX:?blurY:?strength:?quality:?type:?knockout" v="4:45:0xFFFFFF:1:0:1:4:4:1:1::false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<e path="flash.filters.BitmapFilterType"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{knockout:false,quality:1,strength:1,blurY:4,blurX:4,shadowAlpha:1,shadowColor:0,highlightAlpha:1,highlightColor:0xFFFFFF,angle:45,distance:4}</e></m></meta>
		</new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.filters.BitmapFilterQuality" params="" file="C:\HaxeToolkit\haxe\std/flash/filters/BitmapFilterQuality.hx" extern="1">
		<HIGH public="1" get="inline" set="null" expr="3" line="4" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</HIGH>
		<LOW public="1" get="inline" set="null" expr="1" line="5" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</LOW>
		<MEDIUM public="1" get="inline" set="null" expr="2" line="6" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</MEDIUM>
	</class>
	<enum path="flash.filters.BitmapFilterType" params="" file="C:\HaxeToolkit\haxe\std/flash/filters/BitmapFilterType.hx">
		<FULL/>
		<INNER/>
		<OUTER/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.filters.BlurFilter" params="" file="C:\HaxeToolkit\haxe\std/flash/filters/BlurFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<blurX public="1"><x path="Float"/></blurX>
		<blurY public="1"><x path="Float"/></blurY>
		<quality public="1"><x path="Int"/></quality>
		<new public="1" set="method">
			<f a="?blurX:?blurY:?quality" v="4:4:1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{quality:1,blurY:4,blurX:4}</e></m></meta>
		</new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.filters.ColorMatrixFilter" params="" file="C:\HaxeToolkit\haxe\std/flash/filters/ColorMatrixFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<matrix public="1"><c path="Array"><d/></c></matrix>
		<new public="1" set="method"><f a="?matrix">
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.filters.ConvolutionFilter" params="" file="C:\HaxeToolkit\haxe\std/flash/filters/ConvolutionFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<alpha public="1"><x path="Float"/></alpha>
		<bias public="1"><x path="Float"/></bias>
		<clamp public="1"><x path="Bool"/></clamp>
		<color public="1"><x path="UInt"/></color>
		<divisor public="1"><x path="Float"/></divisor>
		<matrix public="1"><c path="Array"><d/></c></matrix>
		<matrixX public="1"><x path="Float"/></matrixX>
		<matrixY public="1"><x path="Float"/></matrixY>
		<preserveAlpha public="1"><x path="Bool"/></preserveAlpha>
		<new public="1" set="method">
			<f a="?matrixX:?matrixY:?matrix:?divisor:?bias:?preserveAlpha:?clamp:?color:?alpha" v="0:0::1:0:true:true:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><d/></c>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{alpha:0,color:0,clamp:true,preserveAlpha:true,bias:0,divisor:1,matrixY:0,matrixX:0}</e></m></meta>
		</new>
	</class>
	<class path="flash.filters.DisplacementMapFilter" params="" file="C:\HaxeToolkit\haxe\std/flash/filters/DisplacementMapFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<alpha public="1"><x path="Float"/></alpha>
		<color public="1"><x path="UInt"/></color>
		<componentX public="1"><x path="UInt"/></componentX>
		<componentY public="1"><x path="UInt"/></componentY>
		<mapBitmap public="1"><c path="flash.display.BitmapData"/></mapBitmap>
		<mapPoint public="1"><c path="flash.geom.Point"/></mapPoint>
		<mode public="1"><e path="flash.filters.DisplacementMapFilterMode"/></mode>
		<scaleX public="1"><x path="Float"/></scaleX>
		<scaleY public="1"><x path="Float"/></scaleY>
		<new public="1" set="method">
			<f a="?mapBitmap:?mapPoint:?componentX:?componentY:?scaleX:?scaleY:?mode:?color:?alpha" v="::0:0:0:0::0:0">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Point"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
				<e path="flash.filters.DisplacementMapFilterMode"/>
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{alpha:0,color:0,scaleY:0,scaleX:0,componentY:0,componentX:0}</e></m></meta>
		</new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.filters.DisplacementMapFilterMode" params="" file="C:\HaxeToolkit\haxe\std/flash/filters/DisplacementMapFilterMode.hx">
		<CLAMP/>
		<COLOR/>
		<IGNORE/>
		<WRAP/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.filters.DropShadowFilter" params="" file="C:\HaxeToolkit\haxe\std/flash/filters/DropShadowFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<alpha public="1"><x path="Float"/></alpha>
		<angle public="1"><x path="Float"/></angle>
		<blurX public="1"><x path="Float"/></blurX>
		<blurY public="1"><x path="Float"/></blurY>
		<color public="1"><x path="UInt"/></color>
		<distance public="1"><x path="Float"/></distance>
		<hideObject public="1"><x path="Bool"/></hideObject>
		<inner public="1"><x path="Bool"/></inner>
		<knockout public="1"><x path="Bool"/></knockout>
		<quality public="1"><x path="Int"/></quality>
		<strength public="1"><x path="Float"/></strength>
		<new public="1" set="method">
			<f a="?distance:?angle:?color:?alpha:?blurX:?blurY:?strength:?quality:?inner:?knockout:?hideObject" v="4:45:0:1:4:4:1:1:false:false:false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{hideObject:false,knockout:false,inner:false,quality:1,strength:1,blurY:4,blurX:4,alpha:1,color:0,angle:45,distance:4}</e></m></meta>
		</new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.filters.GlowFilter" params="" file="C:\HaxeToolkit\haxe\std/flash/filters/GlowFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<alpha public="1"><x path="Float"/></alpha>
		<blurX public="1"><x path="Float"/></blurX>
		<blurY public="1"><x path="Float"/></blurY>
		<color public="1"><x path="UInt"/></color>
		<inner public="1"><x path="Bool"/></inner>
		<knockout public="1"><x path="Bool"/></knockout>
		<quality public="1"><x path="Int"/></quality>
		<strength public="1"><x path="Float"/></strength>
		<new public="1" set="method">
			<f a="?color:?alpha:?blurX:?blurY:?strength:?quality:?inner:?knockout" v="16711680:1:6:6:2:1:false:false">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{knockout:false,inner:false,quality:1,strength:2,blurY:6,blurX:6,alpha:1,color:16711680}</e></m></meta>
		</new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.filters.GradientBevelFilter" params="" file="C:\HaxeToolkit\haxe\std/flash/filters/GradientBevelFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<alphas public="1"><c path="Array"><d/></c></alphas>
		<angle public="1"><x path="Float"/></angle>
		<blurX public="1"><x path="Float"/></blurX>
		<blurY public="1"><x path="Float"/></blurY>
		<colors public="1"><c path="Array"><d/></c></colors>
		<distance public="1"><x path="Float"/></distance>
		<knockout public="1"><x path="Bool"/></knockout>
		<quality public="1"><x path="Int"/></quality>
		<ratios public="1"><c path="Array"><d/></c></ratios>
		<strength public="1"><x path="Float"/></strength>
		<type public="1"><c path="String"/></type>
		<new public="1" set="method">
			<f a="?distance:?angle:?colors:?alphas:?ratios:?blurX:?blurY:?strength:?quality:?type:?knockout" v="4:45::::4:4:1:1::false">
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{knockout:false,quality:1,strength:1,blurY:4,blurX:4,angle:45,distance:4}</e></m></meta>
		</new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.filters.GradientGlowFilter" params="" file="C:\HaxeToolkit\haxe\std/flash/filters/GradientGlowFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<alphas public="1"><c path="Array"><d/></c></alphas>
		<angle public="1"><x path="Float"/></angle>
		<blurX public="1"><x path="Float"/></blurX>
		<blurY public="1"><x path="Float"/></blurY>
		<colors public="1"><c path="Array"><d/></c></colors>
		<distance public="1"><x path="Float"/></distance>
		<knockout public="1"><x path="Bool"/></knockout>
		<quality public="1"><x path="Int"/></quality>
		<ratios public="1"><c path="Array"><d/></c></ratios>
		<strength public="1"><x path="Float"/></strength>
		<type public="1"><e path="flash.filters.BitmapFilterType"/></type>
		<new public="1" set="method">
			<f a="?distance:?angle:?colors:?alphas:?ratios:?blurX:?blurY:?strength:?quality:?type:?knockout" v="4:45::::4:4:1:1::false">
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<e path="flash.filters.BitmapFilterType"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{knockout:false,quality:1,strength:1,blurY:4,blurX:4,angle:45,distance:4}</e></m></meta>
		</new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.filters.ShaderFilter" params="" file="C:\HaxeToolkit\haxe\std/flash/filters/ShaderFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<bottomExtension public="1"><x path="Int"/></bottomExtension>
		<leftExtension public="1"><x path="Int"/></leftExtension>
		<rightExtension public="1"><x path="Int"/></rightExtension>
		<shader public="1"><c path="flash.display.Shader"/></shader>
		<topExtension public="1"><x path="Int"/></topExtension>
		<new public="1" set="method"><f a="?shader">
	<c path="flash.display.Shader"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.ColorTransform" params="" file="C:\HaxeToolkit\haxe\std/flash/geom/ColorTransform.hx" extern="1">
		<alphaMultiplier public="1"><x path="Float"/></alphaMultiplier>
		<alphaOffset public="1"><x path="Float"/></alphaOffset>
		<blueMultiplier public="1"><x path="Float"/></blueMultiplier>
		<blueOffset public="1"><x path="Float"/></blueOffset>
		<color public="1"><x path="UInt"/></color>
		<greenMultiplier public="1"><x path="Float"/></greenMultiplier>
		<greenOffset public="1"><x path="Float"/></greenOffset>
		<redMultiplier public="1"><x path="Float"/></redMultiplier>
		<redOffset public="1"><x path="Float"/></redOffset>
		<concat public="1" set="method"><f a="second">
	<c path="flash.geom.ColorTransform"/>
	<x path="Void"/>
</f></concat>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="?redMultiplier:?greenMultiplier:?blueMultiplier:?alphaMultiplier:?redOffset:?greenOffset:?blueOffset:?alphaOffset" v="1:1:1:1:0:0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{alphaOffset:0,blueOffset:0,greenOffset:0,redOffset:0,alphaMultiplier:1,blueMultiplier:1,greenMultiplier:1,redMultiplier:1}</e></m></meta>
		</new>
	</class>
	<class path="flash.geom.Matrix" params="" file="C:\HaxeToolkit\haxe\std/flash/geom/Matrix.hx" extern="1">
		<a public="1"><x path="Float"/></a>
		<b public="1"><x path="Float"/></b>
		<c public="1"><x path="Float"/></c>
		<d public="1"><x path="Float"/></d>
		<tx public="1"><x path="Float"/></tx>
		<ty public="1"><x path="Float"/></ty>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Matrix"/></f></clone>
		<concat public="1" set="method"><f a="m">
	<c path="flash.geom.Matrix"/>
	<x path="Void"/>
</f></concat>
		<copyColumnFrom public="1" set="method">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnFrom>
		<copyColumnTo public="1" set="method">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnTo>
		<copyFrom public="1" set="method">
			<f a="sourceMatrix">
				<c path="flash.geom.Matrix"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<copyRowFrom public="1" set="method">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowFrom>
		<copyRowTo public="1" set="method">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowTo>
		<createBox public="1" set="method">
			<f a="scaleX:scaleY:?rotation:?tx:?ty" v="::0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ty:0,tx:0,rotation:0}</e></m></meta>
		</createBox>
		<createGradientBox public="1" set="method">
			<f a="width:height:?rotation:?tx:?ty" v="::0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ty:0,tx:0,rotation:0}</e></m></meta>
		</createGradientBox>
		<deltaTransformPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></deltaTransformPoint>
		<identity public="1" set="method"><f a=""><x path="Void"/></f></identity>
		<invert public="1" set="method"><f a=""><x path="Void"/></f></invert>
		<rotate public="1" set="method"><f a="angle">
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<scale public="1" set="method"><f a="sx:sy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scale>
		<setTo public="1" set="method">
			<f a="aa:ba:ca:da:txa:tya">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<transformPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></transformPoint>
		<translate public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></translate>
		<new public="1" set="method">
			<f a="?a:?b:?c:?d:?tx:?ty" v="1:0:0:1:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ty:0,tx:0,d:1,c:0,b:0,a:1}</e></m></meta>
		</new>
	</class>
	<class path="flash.geom.Matrix3D" params="" file="C:\HaxeToolkit\haxe\std/flash/geom/Matrix3D.hx" extern="1">
		<interpolate public="1" set="method" static="1"><f a="thisMat:toMat:percent">
	<c path="flash.geom.Matrix3D"/>
	<c path="flash.geom.Matrix3D"/>
	<x path="Float"/>
	<c path="flash.geom.Matrix3D"/>
</f></interpolate>
		<determinant public="1" set="null"><x path="Float"/></determinant>
		<position public="1"><c path="flash.geom.Vector3D"/></position>
		<rawData public="1"><c path="flash.Vector"><x path="Float"/></c></rawData>
		<append public="1" set="method"><f a="lhs">
	<c path="flash.geom.Matrix3D"/>
	<x path="Void"/>
</f></append>
		<appendRotation public="1" set="method"><f a="degrees:axis:?pivotPoint">
	<x path="Float"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></appendRotation>
		<appendScale public="1" set="method"><f a="xScale:yScale:zScale">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></appendScale>
		<appendTranslation public="1" set="method"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></appendTranslation>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Matrix3D"/></f></clone>
		<copyColumnFrom public="1" set="method">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnFrom>
		<copyColumnTo public="1" set="method">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnTo>
		<copyFrom public="1" set="method">
			<f a="sourceMatrix3D">
				<c path="flash.geom.Matrix3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<copyRawDataFrom public="1" set="method">
			<f a="vector:?index:?transpose" v=":0:false">
				<c path="flash.Vector"><x path="Float"/></c>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{transpose:false,index:0}</e></m>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</copyRawDataFrom>
		<copyRawDataTo public="1" set="method">
			<f a="vector:?index:?transpose" v=":0:false">
				<c path="flash.Vector"><x path="Float"/></c>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{transpose:false,index:0}</e></m>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</copyRawDataTo>
		<copyRowFrom public="1" set="method">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowFrom>
		<copyRowTo public="1" set="method">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowTo>
		<copyToMatrix3D public="1" set="method">
			<f a="dest">
				<c path="flash.geom.Matrix3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyToMatrix3D>
		<decompose public="1" set="method"><f a="?orientationStyle">
	<e path="flash.geom.Orientation3D"/>
	<c path="flash.Vector"><c path="flash.geom.Vector3D"/></c>
</f></decompose>
		<deltaTransformVector public="1" set="method"><f a="v">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></deltaTransformVector>
		<identity public="1" set="method"><f a=""><x path="Void"/></f></identity>
		<interpolateTo public="1" set="method"><f a="toMat:percent">
	<c path="flash.geom.Matrix3D"/>
	<x path="Float"/>
	<x path="Void"/>
</f></interpolateTo>
		<invert public="1" set="method"><f a=""><x path="Bool"/></f></invert>
		<pointAt public="1" set="method"><f a="pos:?at:?up">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></pointAt>
		<prepend public="1" set="method"><f a="rhs">
	<c path="flash.geom.Matrix3D"/>
	<x path="Void"/>
</f></prepend>
		<prependRotation public="1" set="method"><f a="degrees:axis:?pivotPoint">
	<x path="Float"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></prependRotation>
		<prependScale public="1" set="method"><f a="xScale:yScale:zScale">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></prependScale>
		<prependTranslation public="1" set="method"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></prependTranslation>
		<recompose public="1" set="method"><f a="components:?orientationStyle">
	<c path="flash.Vector"><c path="flash.geom.Vector3D"/></c>
	<e path="flash.geom.Orientation3D"/>
	<x path="Bool"/>
</f></recompose>
		<transformVector public="1" set="method"><f a="v">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></transformVector>
		<transformVectors public="1" set="method"><f a="vin:vout">
	<c path="flash.Vector"><x path="Float"/></c>
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Void"/>
</f></transformVectors>
		<transpose public="1" set="method"><f a=""><x path="Void"/></f></transpose>
		<new public="1" set="method"><f a="?v">
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<enum path="flash.geom.Orientation3D" params="" file="C:\HaxeToolkit\haxe\std/flash/geom/Orientation3D.hx">
		<AXIS_ANGLE/>
		<EULER_ANGLES/>
		<QUATERNION/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.geom.PerspectiveProjection" params="" file="C:\HaxeToolkit\haxe\std/flash/geom/PerspectiveProjection.hx" extern="1">
		<fieldOfView public="1"><x path="Float"/></fieldOfView>
		<focalLength public="1"><x path="Float"/></focalLength>
		<projectionCenter public="1"><c path="flash.geom.Point"/></projectionCenter>
		<toMatrix3D public="1" set="method"><f a=""><c path="flash.geom.Matrix3D"/></f></toMatrix3D>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.geom.Point" params="" file="C:\HaxeToolkit\haxe\std/flash/geom/Point.hx" extern="1">
		<distance public="1" set="method" static="1"><f a="pt1:pt2">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
	<x path="Float"/>
</f></distance>
		<interpolate public="1" set="method" static="1"><f a="pt1:pt2:f">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
	<x path="Float"/>
	<c path="flash.geom.Point"/>
</f></interpolate>
		<polar public="1" set="method" static="1"><f a="len:angle">
	<x path="Float"/>
	<x path="Float"/>
	<c path="flash.geom.Point"/>
</f></polar>
		<length public="1" set="null"><x path="Float"/></length>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<add public="1" set="method"><f a="v">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></add>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Point"/></f></clone>
		<copyFrom public="1" set="method">
			<f a="sourcePoint">
				<c path="flash.geom.Point"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<equals public="1" set="method"><f a="toCompare">
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
</f></equals>
		<normalize public="1" set="method"><f a="thickness">
	<x path="Float"/>
	<x path="Void"/>
</f></normalize>
		<offset public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></offset>
		<setTo public="1" set="method">
			<f a="xa:ya">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<subtract public="1" set="method"><f a="v">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></subtract>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="?x:?y" v="0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{y:0,x:0}</e></m></meta>
		</new>
	</class>
	<class path="flash.geom.Rectangle" params="" file="C:\HaxeToolkit\haxe\std/flash/geom/Rectangle.hx" extern="1">
		<bottom public="1"><x path="Float"/></bottom>
		<bottomRight public="1"><c path="flash.geom.Point"/></bottomRight>
		<height public="1"><x path="Float"/></height>
		<left public="1"><x path="Float"/></left>
		<right public="1"><x path="Float"/></right>
		<size public="1"><c path="flash.geom.Point"/></size>
		<top public="1"><x path="Float"/></top>
		<topLeft public="1"><c path="flash.geom.Point"/></topLeft>
		<width public="1"><x path="Float"/></width>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Rectangle"/></f></clone>
		<contains public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></contains>
		<containsPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
</f></containsPoint>
		<containsRect public="1" set="method"><f a="rect">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></containsRect>
		<copyFrom public="1" set="method">
			<f a="sourceRect">
				<c path="flash.geom.Rectangle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<equals public="1" set="method"><f a="toCompare">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></equals>
		<inflate public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></inflate>
		<inflatePoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Void"/>
</f></inflatePoint>
		<intersection public="1" set="method"><f a="toIntersect">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></intersection>
		<intersects public="1" set="method"><f a="toIntersect">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></intersects>
		<isEmpty public="1" set="method"><f a=""><x path="Bool"/></f></isEmpty>
		<offset public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></offset>
		<offsetPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Void"/>
</f></offsetPoint>
		<setEmpty public="1" set="method"><f a=""><x path="Void"/></f></setEmpty>
		<setTo public="1" set="method">
			<f a="xa:ya:widtha:heighta">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<union public="1" set="method"><f a="toUnion">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></union>
		<new public="1" set="method">
			<f a="?x:?y:?width:?height" v="0:0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{height:0,width:0,y:0,x:0}</e></m></meta>
		</new>
	</class>
	<class path="flash.geom.Transform" params="" file="C:\HaxeToolkit\haxe\std/flash/geom/Transform.hx" extern="1">
		<colorTransform public="1"><c path="flash.geom.ColorTransform"/></colorTransform>
		<concatenatedColorTransform public="1" set="null"><c path="flash.geom.ColorTransform"/></concatenatedColorTransform>
		<concatenatedMatrix public="1" set="null"><c path="flash.geom.Matrix"/></concatenatedMatrix>
		<matrix public="1"><c path="flash.geom.Matrix"/></matrix>
		<matrix3D public="1">
			<c path="flash.geom.Matrix3D"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</matrix3D>
		<perspectiveProjection public="1">
			<c path="flash.geom.PerspectiveProjection"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</perspectiveProjection>
		<pixelBounds public="1" set="null"><c path="flash.geom.Rectangle"/></pixelBounds>
		<getRelativeMatrix3D public="1" set="method">
			<f a="relativeTo">
				<c path="flash.display.DisplayObject"/>
				<c path="flash.geom.Matrix3D"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</getRelativeMatrix3D>
		<new public="1" set="method"><f a="displayObject">
	<c path="flash.display.DisplayObject"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Utils3D" params="" file="C:\HaxeToolkit\haxe\std/flash/geom/Utils3D.hx" extern="1">
		<pointTowards public="1" set="method" static="1"><f a="percent:mat:pos:?at:?up">
	<x path="Float"/>
	<c path="flash.geom.Matrix3D"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Matrix3D"/>
</f></pointTowards>
		<projectVector public="1" set="method" static="1"><f a="m:v">
	<c path="flash.geom.Matrix3D"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></projectVector>
		<projectVectors public="1" set="method" static="1"><f a="m:verts:projectedVerts:uvts">
	<c path="flash.geom.Matrix3D"/>
	<c path="flash.Vector"><x path="Float"/></c>
	<c path="flash.Vector"><x path="Float"/></c>
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Void"/>
</f></projectVectors>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.geom.Vector3D" params="" file="C:\HaxeToolkit\haxe\std/flash/geom/Vector3D.hx" extern="1">
		<X_AXIS public="1" static="1"><c path="flash.geom.Vector3D"/></X_AXIS>
		<Y_AXIS public="1" static="1"><c path="flash.geom.Vector3D"/></Y_AXIS>
		<Z_AXIS public="1" static="1"><c path="flash.geom.Vector3D"/></Z_AXIS>
		<angleBetween public="1" set="method" static="1"><f a="a:b">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></angleBetween>
		<distance public="1" set="method" static="1"><f a="pt1:pt2">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></distance>
		<length public="1" set="null"><x path="Float"/></length>
		<lengthSquared public="1" set="null"><x path="Float"/></lengthSquared>
		<w public="1"><x path="Float"/></w>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<z public="1"><x path="Float"/></z>
		<add public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></add>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Vector3D"/></f></clone>
		<copyFrom public="1" set="method">
			<f a="sourceVector3D">
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<crossProduct public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></crossProduct>
		<decrementBy public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></decrementBy>
		<dotProduct public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></dotProduct>
		<equals public="1" set="method">
			<f a="toCompare:?allFour" v=":false">
				<c path="flash.geom.Vector3D"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{allFour:false}</e></m></meta>
		</equals>
		<incrementBy public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></incrementBy>
		<nearEquals public="1" set="method">
			<f a="toCompare:tolerance:?allFour" v="::false">
				<c path="flash.geom.Vector3D"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{allFour:false}</e></m></meta>
		</nearEquals>
		<negate public="1" set="method"><f a=""><x path="Void"/></f></negate>
		<normalize public="1" set="method"><f a=""><x path="Float"/></f></normalize>
		<project public="1" set="method"><f a=""><x path="Void"/></f></project>
		<scaleBy public="1" set="method"><f a="s">
	<x path="Float"/>
	<x path="Void"/>
</f></scaleBy>
		<setTo public="1" set="method">
			<f a="xa:ya:za">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<subtract public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></subtract>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="?x:?y:?z:?w" v="0:0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{w:0,z:0,y:0,x:0}</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.globalization.Collator" params="" file="C:\HaxeToolkit\haxe\std/flash/globalization/Collator.hx" extern="1">
		<getAvailableLocaleIDNames public="1" set="method" static="1"><f a=""><c path="flash.Vector"><c path="String"/></c></f></getAvailableLocaleIDNames>
		<actualLocaleIDName public="1" set="null"><c path="String"/></actualLocaleIDName>
		<ignoreCase public="1"><x path="Bool"/></ignoreCase>
		<ignoreCharacterWidth public="1"><x path="Bool"/></ignoreCharacterWidth>
		<ignoreDiacritics public="1"><x path="Bool"/></ignoreDiacritics>
		<ignoreKanaType public="1"><x path="Bool"/></ignoreKanaType>
		<ignoreSymbols public="1"><x path="Bool"/></ignoreSymbols>
		<lastOperationStatus public="1" set="null"><e path="flash.globalization.LastOperationStatus"/></lastOperationStatus>
		<numericComparison public="1"><x path="Bool"/></numericComparison>
		<requestedLocaleIDName public="1" set="null"><c path="String"/></requestedLocaleIDName>
		<compare public="1" set="method"><f a="string1:string2">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
</f></compare>
		<equals public="1" set="method"><f a="string1:string2">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
</f></equals>
		<new public="1" set="method"><f a="requestedLocaleIDName:?initialMode">
	<c path="String"/>
	<e path="flash.globalization.CollatorMode"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</class>
	<enum path="flash.globalization.CollatorMode" params="" file="C:\HaxeToolkit\haxe\std/flash/globalization/CollatorMode.hx">
		<MATCHING/>
		<SORTING/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.globalization.CurrencyFormatter" params="" file="C:\HaxeToolkit\haxe\std/flash/globalization/CurrencyFormatter.hx" extern="1">
		<getAvailableLocaleIDNames public="1" set="method" static="1"><f a=""><c path="flash.Vector"><c path="String"/></c></f></getAvailableLocaleIDNames>
		<actualLocaleIDName public="1" set="null"><c path="String"/></actualLocaleIDName>
		<currencyISOCode public="1" set="null"><c path="String"/></currencyISOCode>
		<currencySymbol public="1" set="null"><c path="String"/></currencySymbol>
		<decimalSeparator public="1"><c path="String"/></decimalSeparator>
		<digitsType public="1"><x path="UInt"/></digitsType>
		<fractionalDigits public="1"><x path="Int"/></fractionalDigits>
		<groupingPattern public="1"><c path="String"/></groupingPattern>
		<groupingSeparator public="1"><c path="String"/></groupingSeparator>
		<lastOperationStatus public="1" set="null"><e path="flash.globalization.LastOperationStatus"/></lastOperationStatus>
		<leadingZero public="1"><x path="Bool"/></leadingZero>
		<negativeCurrencyFormat public="1"><x path="UInt"/></negativeCurrencyFormat>
		<negativeSymbol public="1"><c path="String"/></negativeSymbol>
		<positiveCurrencyFormat public="1"><x path="UInt"/></positiveCurrencyFormat>
		<requestedLocaleIDName public="1" set="null"><c path="String"/></requestedLocaleIDName>
		<trailingZeros public="1"><x path="Bool"/></trailingZeros>
		<useGrouping public="1"><x path="Bool"/></useGrouping>
		<format public="1" set="method">
			<f a="value:?withCurrencySymbol" v=":false">
				<x path="Float"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{withCurrencySymbol:false}</e></m></meta>
		</format>
		<formattingWithCurrencySymbolIsSafe public="1" set="method"><f a="requestedISOCode">
	<c path="String"/>
	<x path="Bool"/>
</f></formattingWithCurrencySymbolIsSafe>
		<parse public="1" set="method"><f a="inputString">
	<c path="String"/>
	<c path="flash.globalization.CurrencyParseResult"/>
</f></parse>
		<setCurrency public="1" set="method"><f a="currencyISOCode:currencySymbol">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setCurrency>
		<new public="1" set="method"><f a="requestedLocaleIDName">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</class>
	<class path="flash.globalization.CurrencyParseResult" params="" file="C:\HaxeToolkit\haxe\std/flash/globalization/CurrencyParseResult.hx" extern="1">
		<currencyString public="1" set="null"><c path="String"/></currencyString>
		<value public="1" set="null"><x path="Float"/></value>
		<new public="1" set="method">
			<f a="?value:?symbol" v="0.:">
				<x path="Float"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{value:0.}</e></m></meta>
		</new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.globalization.DateTimeFormatter" params="" file="C:\HaxeToolkit\haxe\std/flash/globalization/DateTimeFormatter.hx" extern="1">
		<getAvailableLocaleIDNames public="1" set="method" static="1"><f a=""><c path="flash.Vector"><c path="String"/></c></f></getAvailableLocaleIDNames>
		<actualLocaleIDName public="1" set="null"><c path="String"/></actualLocaleIDName>
		<lastOperationStatus public="1" set="null"><e path="flash.globalization.LastOperationStatus"/></lastOperationStatus>
		<requestedLocaleIDName public="1" set="null"><c path="String"/></requestedLocaleIDName>
		<format public="1" set="method"><f a="dateTime">
	<c path="Date"/>
	<c path="String"/>
</f></format>
		<formatUTC public="1" set="method"><f a="dateTime">
	<c path="Date"/>
	<c path="String"/>
</f></formatUTC>
		<getDateStyle public="1" set="method"><f a=""><e path="flash.globalization.DateTimeStyle"/></f></getDateStyle>
		<getDateTimePattern public="1" set="method"><f a=""><e path="flash.globalization.DateTimeStyle"/></f></getDateTimePattern>
		<getFirstWeekday public="1" set="method"><f a=""><x path="Int"/></f></getFirstWeekday>
		<getMonthNames public="1" set="method"><f a="?nameStyle:?context">
	<e path="flash.globalization.DateTimeNameStyle"/>
	<e path="flash.globalization.DateTimeNameContext"/>
	<c path="flash.Vector"><c path="String"/></c>
</f></getMonthNames>
		<getTimeStyle public="1" set="method"><f a=""><e path="flash.globalization.DateTimeStyle"/></f></getTimeStyle>
		<getWeekdayNames public="1" set="method"><f a="?nameStyle:?context">
	<e path="flash.globalization.DateTimeNameStyle"/>
	<e path="flash.globalization.DateTimeNameContext"/>
	<c path="flash.Vector"><c path="String"/></c>
</f></getWeekdayNames>
		<setDateTimePattern public="1" set="method"><f a="pattern">
	<c path="String"/>
	<x path="Void"/>
</f></setDateTimePattern>
		<setDateTimeStyles public="1" set="method"><f a="dateStyle:timeStyle">
	<e path="flash.globalization.DateTimeStyle"/>
	<e path="flash.globalization.DateTimeStyle"/>
	<x path="Void"/>
</f></setDateTimeStyles>
		<new public="1" set="method"><f a="requestedLocaleIDName:?dateStyle:?timeStyle">
	<c path="String"/>
	<e path="flash.globalization.DateTimeStyle"/>
	<e path="flash.globalization.DateTimeStyle"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</class>
	<enum path="flash.globalization.DateTimeNameContext" params="" file="C:\HaxeToolkit\haxe\std/flash/globalization/DateTimeNameContext.hx">
		<FORMAT/>
		<STANDALONE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.globalization.DateTimeNameStyle" params="" file="C:\HaxeToolkit\haxe\std/flash/globalization/DateTimeNameStyle.hx">
		<FULL/>
		<LONG_ABBREVIATION/>
		<SHORT_ABBREVIATION/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.globalization.DateTimeStyle" params="" file="C:\HaxeToolkit\haxe\std/flash/globalization/DateTimeStyle.hx">
		<CUSTOM/>
		<LONG/>
		<MEDIUM/>
		<NONE/>
		<SHORT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.globalization.LastOperationStatus" params="" file="C:\HaxeToolkit\haxe\std/flash/globalization/LastOperationStatus.hx">
		<BUFFER_OVERFLOW_ERROR/>
		<ERROR_CODE_UNKNOWN/>
		<ILLEGAL_ARGUMENT_ERROR/>
		<INDEX_OUT_OF_BOUNDS_ERROR/>
		<INVALID_ATTR_VALUE/>
		<INVALID_CHAR_FOUND/>
		<MEMORY_ALLOCATION_ERROR/>
		<NO_ERROR/>
		<NUMBER_OVERFLOW_ERROR/>
		<PARSE_ERROR/>
		<PATTERN_SYNTAX_ERROR/>
		<PLATFORM_API_FAILED/>
		<TRUNCATED_CHAR_FOUND/>
		<UNEXPECTED_TOKEN/>
		<UNSUPPORTED_ERROR/>
		<USING_DEFAULT_WARNING/>
		<USING_FALLBACK_WARNING/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.globalization.LocaleID" params="" file="C:\HaxeToolkit\haxe\std/flash/globalization/LocaleID.hx" extern="1">
		<DEFAULT public="1" static="1"><c path="String"/></DEFAULT>
		<determinePreferredLocales public="1" set="method" static="1"><f a="want:have:?keyword">
	<c path="flash.Vector"><c path="String"/></c>
	<c path="flash.Vector"><c path="String"/></c>
	<c path="String"/>
	<c path="flash.Vector"><c path="String"/></c>
</f></determinePreferredLocales>
		<lastOperationStatus public="1" set="null"><e path="flash.globalization.LastOperationStatus"/></lastOperationStatus>
		<name public="1" set="null"><c path="String"/></name>
		<getKeysAndValues public="1" set="method"><f a=""><t path="flash.utils.Object"/></f></getKeysAndValues>
		<getLanguage public="1" set="method"><f a=""><c path="String"/></f></getLanguage>
		<getRegion public="1" set="method"><f a=""><c path="String"/></f></getRegion>
		<getScript public="1" set="method"><f a=""><c path="String"/></f></getScript>
		<getVariant public="1" set="method"><f a=""><c path="String"/></f></getVariant>
		<isRightToLeft public="1" set="method"><f a=""><x path="Bool"/></f></isRightToLeft>
		<new public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</class>
	<enum path="flash.globalization.NationalDigitsType" params="" file="C:\HaxeToolkit\haxe\std/flash/globalization/NationalDigitsType.hx">
		<ARABIC_INDIC/>
		<BALINESE/>
		<BENGALI/>
		<CHAM/>
		<DEVANAGARI/>
		<EUROPEAN/>
		<EXTENDED_ARABIC_INDIC/>
		<FULL_WIDTH/>
		<GUJARATI/>
		<GURMUKHI/>
		<KANNADA/>
		<KAYAH_LI/>
		<KHMER/>
		<LAO/>
		<LEPCHA/>
		<LIMBU/>
		<MALAYALAM/>
		<MONGOLIAN/>
		<MYANMAR/>
		<MYANMAR_SHAN/>
		<NEW_TAI_LUE/>
		<NKO/>
		<OL_CHIKI/>
		<ORIYA/>
		<OSMANYA/>
		<SAURASHTRA/>
		<SUNDANESE/>
		<TAMIL/>
		<TELUGU/>
		<THAI/>
		<TIBETAN/>
		<VAI/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>UInt</e></m>
		</meta>
	</enum>
	<class path="flash.globalization.NumberFormatter" params="" file="C:\HaxeToolkit\haxe\std/flash/globalization/NumberFormatter.hx" extern="1">
		<getAvailableLocaleIDNames public="1" set="method" static="1"><f a=""><c path="flash.Vector"><c path="String"/></c></f></getAvailableLocaleIDNames>
		<actualLocaleIDName public="1" set="null"><c path="String"/></actualLocaleIDName>
		<decimalSeparator public="1"><c path="String"/></decimalSeparator>
		<digitsType public="1"><e path="flash.globalization.NationalDigitsType"/></digitsType>
		<fractionalDigits public="1"><x path="Int"/></fractionalDigits>
		<groupingPattern public="1"><c path="String"/></groupingPattern>
		<groupingSeparator public="1"><c path="String"/></groupingSeparator>
		<lastOperationStatus public="1" set="null"><e path="flash.globalization.LastOperationStatus"/></lastOperationStatus>
		<leadingZero public="1"><x path="Bool"/></leadingZero>
		<negativeNumberFormat public="1"><x path="UInt"/></negativeNumberFormat>
		<negativeSymbol public="1"><c path="String"/></negativeSymbol>
		<requestedLocaleIDName public="1" set="null"><c path="String"/></requestedLocaleIDName>
		<trailingZeros public="1"><x path="Bool"/></trailingZeros>
		<useGrouping public="1"><x path="Bool"/></useGrouping>
		<formatInt public="1" set="method"><f a="value">
	<x path="Int"/>
	<c path="String"/>
</f></formatInt>
		<formatNumber public="1" set="method"><f a="value">
	<x path="Float"/>
	<c path="String"/>
</f></formatNumber>
		<formatUint public="1" set="method"><f a="value">
	<x path="UInt"/>
	<c path="String"/>
</f></formatUint>
		<parse public="1" set="method"><f a="parseString">
	<c path="String"/>
	<c path="flash.globalization.NumberParseResult"/>
</f></parse>
		<parseNumber public="1" set="method"><f a="parseString">
	<c path="String"/>
	<x path="Float"/>
</f></parseNumber>
		<new public="1" set="method"><f a="requestedLocaleIDName">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</class>
	<class path="flash.globalization.NumberParseResult" params="" file="C:\HaxeToolkit\haxe\std/flash/globalization/NumberParseResult.hx" extern="1">
		<endIndex public="1" set="null"><x path="Int"/></endIndex>
		<startIndex public="1" set="null"><x path="Int"/></startIndex>
		<value public="1" set="null"><x path="Float"/></value>
		<new public="1" set="method">
			<f a="?value:?startIndex:?endIndex" v="0.:2147483647:2147483647">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{endIndex:2147483647,startIndex:2147483647,value:0.}</e></m></meta>
		</new>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</class>
	<class path="flash.globalization.StringTools" params="" file="C:\HaxeToolkit\haxe\std/flash/globalization/StringTools.hx" extern="1">
		<getAvailableLocaleIDNames public="1" set="method" static="1"><f a=""><c path="flash.Vector"><c path="String"/></c></f></getAvailableLocaleIDNames>
		<actualLocaleIDName public="1" set="null"><c path="String"/></actualLocaleIDName>
		<lastOperationStatus public="1" set="null"><e path="flash.globalization.LastOperationStatus"/></lastOperationStatus>
		<requestedLocaleIDName public="1" set="null"><c path="String"/></requestedLocaleIDName>
		<toLowerCase public="1" set="method"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></toLowerCase>
		<toUpperCase public="1" set="method"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></toUpperCase>
		<new public="1" set="method"><f a="requestedLocaleIDName">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</class>
	<class path="flash.media.AVABRParameters" params="" file="C:\HaxeToolkit\haxe\std/flash/media/AVABRParameters.hx" extern="1">
		<AGGRESSIVE public="1" static="1"><c path="String"/></AGGRESSIVE>
		<CONSERVATIVE public="1" static="1"><c path="String"/></CONSERVATIVE>
		<MODERATE public="1" static="1"><c path="String"/></MODERATE>
		<maxBitsPerSecond public="1"><x path="Int"/></maxBitsPerSecond>
		<minBitsPerSecond public="1"><x path="Int"/></minBitsPerSecond>
		<policy public="1"><c path="String"/></policy>
		<startBitsPerSecond public="1"><x path="Int"/></startBitsPerSecond>
		<new public="1" set="method"><f a="init_policy:init_startBitsPerSecond:init_minBitsPerSecond:init_maxBitsPerSecond">
	<c path="String"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVABRProfileInfo" params="" file="C:\HaxeToolkit\haxe\std/flash/media/AVABRProfileInfo.hx" extern="1">
		<bitsPerSecond public="1" set="null"><x path="Int"/></bitsPerSecond>
		<height public="1" set="null"><x path="Int"/></height>
		<width public="1" set="null"><x path="Int"/></width>
		<new public="1" set="method"><f a="init_bitsPerSecond:init_width:init_height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVCaptionStyle" params="" file="C:\HaxeToolkit\haxe\std/flash/media/AVCaptionStyle.hx" extern="1">
		<BLACK public="1" static="1"><c path="String"/></BLACK>
		<BLUE public="1" static="1"><c path="String"/></BLUE>
		<BRIGHT_BLUE public="1" static="1"><c path="String"/></BRIGHT_BLUE>
		<BRIGHT_CYAN public="1" static="1"><c path="String"/></BRIGHT_CYAN>
		<BRIGHT_GREEN public="1" static="1"><c path="String"/></BRIGHT_GREEN>
		<BRIGHT_MAGENTA public="1" static="1"><c path="String"/></BRIGHT_MAGENTA>
		<BRIGHT_RED public="1" static="1"><c path="String"/></BRIGHT_RED>
		<BRIGHT_WHITE public="1" static="1"><c path="String"/></BRIGHT_WHITE>
		<BRIGHT_YELLOW public="1" static="1"><c path="String"/></BRIGHT_YELLOW>
		<CASUAL public="1" static="1"><c path="String"/></CASUAL>
		<CURSIVE public="1" static="1"><c path="String"/></CURSIVE>
		<CYAN public="1" static="1"><c path="String"/></CYAN>
		<DARK_BLUE public="1" static="1"><c path="String"/></DARK_BLUE>
		<DARK_CYAN public="1" static="1"><c path="String"/></DARK_CYAN>
		<DARK_GREEN public="1" static="1"><c path="String"/></DARK_GREEN>
		<DARK_MAGENTA public="1" static="1"><c path="String"/></DARK_MAGENTA>
		<DARK_RED public="1" static="1"><c path="String"/></DARK_RED>
		<DARK_YELLOW public="1" static="1"><c path="String"/></DARK_YELLOW>
		<DEFAULT public="1" static="1"><c path="String"/></DEFAULT>
		<DEPRESSED public="1" static="1"><c path="String"/></DEPRESSED>
		<GRAY public="1" static="1"><c path="String"/></GRAY>
		<GREEN public="1" static="1"><c path="String"/></GREEN>
		<LARGE public="1" static="1"><c path="String"/></LARGE>
		<LEFT_DROP_SHADOW public="1" static="1"><c path="String"/></LEFT_DROP_SHADOW>
		<MAGENTA public="1" static="1"><c path="String"/></MAGENTA>
		<MEDIUM public="1" static="1"><c path="String"/></MEDIUM>
		<MONOSPACED_WITHOUT_SERIFS public="1" static="1"><c path="String"/></MONOSPACED_WITHOUT_SERIFS>
		<MONOSPACE_WITH_SERIFS public="1" static="1"><c path="String"/></MONOSPACE_WITH_SERIFS>
		<NONE public="1" static="1"><c path="String"/></NONE>
		<PROPORTIONAL_WITHOUT_SERIFS public="1" static="1"><c path="String"/></PROPORTIONAL_WITHOUT_SERIFS>
		<PROPORTIONAL_WITH_SERIFS public="1" static="1"><c path="String"/></PROPORTIONAL_WITH_SERIFS>
		<RAISED public="1" static="1"><c path="String"/></RAISED>
		<RED public="1" static="1"><c path="String"/></RED>
		<RIGHT_DROP_SHADOW public="1" static="1"><c path="String"/></RIGHT_DROP_SHADOW>
		<SMALL public="1" static="1"><c path="String"/></SMALL>
		<SMALL_CAPITALS public="1" static="1"><c path="String"/></SMALL_CAPITALS>
		<UNIFORM public="1" static="1"><c path="String"/></UNIFORM>
		<WHITE public="1" static="1"><c path="String"/></WHITE>
		<YELLOW public="1" static="1"><c path="String"/></YELLOW>
		<backgroundColor public="1"><c path="String"/></backgroundColor>
		<backgroundOpacity public="1"><c path="String"/></backgroundOpacity>
		<bottomInset public="1"><c path="String"/></bottomInset>
		<edgeColor public="1"><c path="String"/></edgeColor>
		<fillColor public="1"><c path="String"/></fillColor>
		<fillOpacity public="1"><c path="String"/></fillOpacity>
		<font public="1"><c path="String"/></font>
		<fontColor public="1"><c path="String"/></fontColor>
		<fontEdge public="1"><c path="String"/></fontEdge>
		<fontOpacity public="1"><c path="String"/></fontOpacity>
		<size public="1"><c path="String"/></size>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.AVCuePoint" params="" file="C:\HaxeToolkit\haxe\std/flash/media/AVCuePoint.hx" extern="1">
		<dictionary public="1" set="null"><c path="flash.utils.Dictionary"/></dictionary>
		<localTime public="1" set="null"><x path="Float"/></localTime>
		<new public="1" set="method"><f a="init_dictionary:init_localTime">
	<c path="flash.utils.Dictionary"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVResult" params="" file="C:\HaxeToolkit\haxe\std/flash/media/AVResult.hx" extern="1">
		<ASYNC_OPERATION_IN_PROGRESS public="1" static="1"><x path="Int"/></ASYNC_OPERATION_IN_PROGRESS>
		<AUDIO_ONLY_STREAM_END public="1" static="1"><x path="Int"/></AUDIO_ONLY_STREAM_END>
		<AUDIO_ONLY_STREAM_START public="1" static="1"><x path="Int"/></AUDIO_ONLY_STREAM_START>
		<AUDIO_START_ERROR public="1" static="1"><x path="Int"/></AUDIO_START_ERROR>
		<BAD_MANIFEST_SIGNATURE public="1" static="1"><x path="Int"/></BAD_MANIFEST_SIGNATURE>
		<BAD_MEDIASAMPLE_FOUND public="1" static="1"><x path="Int"/></BAD_MEDIASAMPLE_FOUND>
		<BAD_MEDIA_INTERLEAVING public="1" static="1"><x path="Int"/></BAD_MEDIA_INTERLEAVING>
		<CALLED_FROM_WRONG_THREAD public="1" static="1"><x path="Int"/></CALLED_FROM_WRONG_THREAD>
		<CANNOT_ERASE_TIMELINE public="1" static="1"><x path="Int"/></CANNOT_ERASE_TIMELINE>
		<CANNOT_FAIL_OVER public="1" static="1"><x path="Int"/></CANNOT_FAIL_OVER>
		<CANNOT_HANDLE_MAIN_MANIFEST_UPDATE public="1" static="1"><x path="Int"/></CANNOT_HANDLE_MAIN_MANIFEST_UPDATE>
		<CANNOT_LOAD_PLAY_LIST public="1" static="1"><x path="Int"/></CANNOT_LOAD_PLAY_LIST>
		<CANNOT_SPLIT_TIMELINE public="1" static="1"><x path="Int"/></CANNOT_SPLIT_TIMELINE>
		<CODEC_NOT_SUPPORTED public="1" static="1"><x path="Int"/></CODEC_NOT_SUPPORTED>
		<COMPONENT_CREATION_FAILURE public="1" static="1"><x path="Int"/></COMPONENT_CREATION_FAILURE>
		<CONTAINER_NOT_SUPPORTED public="1" static="1"><x path="Int"/></CONTAINER_NOT_SUPPORTED>
		<CONTENT_LENGTH_MISMATCH public="1" static="1"><x path="Int"/></CONTENT_LENGTH_MISMATCH>
		<CRYPTO_ALGORITHM_NOT_SUPPORTED public="1" static="1"><x path="Int"/></CRYPTO_ALGORITHM_NOT_SUPPORTED>
		<CRYPTO_ERROR_BAD_CERTIFICATE public="1" static="1"><x path="Int"/></CRYPTO_ERROR_BAD_CERTIFICATE>
		<CRYPTO_ERROR_BAD_PARAMETER public="1" static="1"><x path="Int"/></CRYPTO_ERROR_BAD_PARAMETER>
		<CRYPTO_ERROR_BUFFER_TOO_SMALL public="1" static="1"><x path="Int"/></CRYPTO_ERROR_BUFFER_TOO_SMALL>
		<CRYPTO_ERROR_CORRUPTED_DATA public="1" static="1"><x path="Int"/></CRYPTO_ERROR_CORRUPTED_DATA>
		<CRYPTO_ERROR_DIGEST_FINISH public="1" static="1"><x path="Int"/></CRYPTO_ERROR_DIGEST_FINISH>
		<CRYPTO_ERROR_DIGEST_UPDATE public="1" static="1"><x path="Int"/></CRYPTO_ERROR_DIGEST_UPDATE>
		<CRYPTO_ERROR_UNKNOWN public="1" static="1"><x path="Int"/></CRYPTO_ERROR_UNKNOWN>
		<CURRENT_PERIOD_EXPIRED public="1" static="1"><x path="Int"/></CURRENT_PERIOD_EXPIRED>
		<DECODER_FAILED public="1" static="1"><x path="Int"/></DECODER_FAILED>
		<DEVICE_OPEN_ERROR public="1" static="1"><x path="Int"/></DEVICE_OPEN_ERROR>
		<DID_NOT_GET_NEXT_FRAGMENT public="1" static="1"><x path="Int"/></DID_NOT_GET_NEXT_FRAGMENT>
		<DRM_INIT_ERROR public="1" static="1"><x path="Int"/></DRM_INIT_ERROR>
		<DRM_NOT_AVAILABLE public="1" static="1"><x path="Int"/></DRM_NOT_AVAILABLE>
		<END_OF_PERIOD public="1" static="1"><x path="Int"/></END_OF_PERIOD>
		<EOF public="1" static="1"><x path="Int"/></EOF>
		<FILE_NOT_FOUND public="1" static="1"><x path="Int"/></FILE_NOT_FOUND>
		<FILE_OPEN_ERROR public="1" static="1"><x path="Int"/></FILE_OPEN_ERROR>
		<FILE_READ_ERROR public="1" static="1"><x path="Int"/></FILE_READ_ERROR>
		<FILE_STRUCTURE_INVALID public="1" static="1"><x path="Int"/></FILE_STRUCTURE_INVALID>
		<FILE_WRITE_ERROR public="1" static="1"><x path="Int"/></FILE_WRITE_ERROR>
		<FRAGMENT_READ_ERROR public="1" static="1"><x path="Int"/></FRAGMENT_READ_ERROR>
		<GENERIC_ERROR public="1" static="1"><x path="Int"/></GENERIC_ERROR>
		<HTTP_TIME_OUT public="1" static="1"><x path="Int"/></HTTP_TIME_OUT>
		<ID3_PARSE_ERROR public="1" static="1"><x path="Int"/></ID3_PARSE_ERROR>
		<INCOMPATIBLE_RENDER_MODE public="1" static="1"><x path="Int"/></INCOMPATIBLE_RENDER_MODE>
		<INCOMPATIBLE_VERSION public="1" static="1"><x path="Int"/></INCOMPATIBLE_VERSION>
		<INTERNAL_ERROR public="1" static="1"><x path="Int"/></INTERNAL_ERROR>
		<INVALID_KEY public="1" static="1"><x path="Int"/></INVALID_KEY>
		<INVALID_OPERATION public="1" static="1"><x path="Int"/></INVALID_OPERATION>
		<INVALID_PARAMETER public="1" static="1"><x path="Int"/></INVALID_PARAMETER>
		<INVALID_REPLACE_DURATION public="1" static="1"><x path="Int"/></INVALID_REPLACE_DURATION>
		<INVALID_SEEK_TIME public="1" static="1"><x path="Int"/></INVALID_SEEK_TIME>
		<INVALID_WITH_AUDIO_ONLY_FILE public="1" static="1"><x path="Int"/></INVALID_WITH_AUDIO_ONLY_FILE>
		<IRRECOVERABLE_ERROR public="1" static="1"><x path="Int"/></IRRECOVERABLE_ERROR>
		<KEY_NOT_FOUND public="1" static="1"><x path="Int"/></KEY_NOT_FOUND>
		<KEY_SERVER_NOT_FOUND public="1" static="1"><x path="Int"/></KEY_SERVER_NOT_FOUND>
		<LISTENER_NOT_FOUND public="1" static="1"><x path="Int"/></LISTENER_NOT_FOUND>
		<LIVE_HOLD public="1" static="1"><x path="Int"/></LIVE_HOLD>
		<LIVE_WINDOW_MOVED_BACKWARD public="1" static="1"><x path="Int"/></LIVE_WINDOW_MOVED_BACKWARD>
		<LOST_CONNECTION_RECOVERABLE public="1" static="1"><x path="Int"/></LOST_CONNECTION_RECOVERABLE>
		<MANIFEST_FILE_UNEXPECTEDLY_CHANGED public="1" static="1"><x path="Int"/></MANIFEST_FILE_UNEXPECTEDLY_CHANGED>
		<NETWORK_DOWN public="1" static="1"><x path="Int"/></NETWORK_DOWN>
		<NETWORK_ERROR public="1" static="1"><x path="Int"/></NETWORK_ERROR>
		<NETWORK_UNAVAILABLE public="1" static="1"><x path="Int"/></NETWORK_UNAVAILABLE>
		<NOT_IMPLEMENTED public="1" static="1"><x path="Int"/></NOT_IMPLEMENTED>
		<NO_AUDIO_SINK public="1" static="1"><x path="Int"/></NO_AUDIO_SINK>
		<NO_FIXED_SIZE public="1" static="1"><x path="Int"/></NO_FIXED_SIZE>
		<NO_TIMELINE public="1" static="1"><x path="Int"/></NO_TIMELINE>
		<NO_USEABLE_BITRATE_PROFILE public="1" static="1"><x path="Int"/></NO_USEABLE_BITRATE_PROFILE>
		<NULL_OPERATION public="1" static="1"><x path="Int"/></NULL_OPERATION>
		<ONLY_ALLOWED_IN_PAUSED_STATE public="1" static="1"><x path="Int"/></ONLY_ALLOWED_IN_PAUSED_STATE>
		<OPERATION_ABORTED public="1" static="1"><x path="Int"/></OPERATION_ABORTED>
		<OUT_OF_MEMORY public="1" static="1"><x path="Int"/></OUT_OF_MEMORY>
		<OVERFLOW public="1" static="1"><x path="Int"/></OVERFLOW>
		<PARSE_ERROR public="1" static="1"><x path="Int"/></PARSE_ERROR>
		<PARTIAL_REPLACEMENT public="1" static="1"><x path="Int"/></PARTIAL_REPLACEMENT>
		<PERIOD_HOLD public="1" static="1"><x path="Int"/></PERIOD_HOLD>
		<PERIOD_NOT_LOADED public="1" static="1"><x path="Int"/></PERIOD_NOT_LOADED>
		<PLAYBACK_NOT_ENABLED public="1" static="1"><x path="Int"/></PLAYBACK_NOT_ENABLED>
		<POSTROLL_WITH_LIVE_NOT_ALLOWED public="1" static="1"><x path="Int"/></POSTROLL_WITH_LIVE_NOT_ALLOWED>
		<PREVIOUS_STEP_SEEK_IN_PROGRESS public="1" static="1"><x path="Int"/></PREVIOUS_STEP_SEEK_IN_PROGRESS>
		<PROTOCOL_NOT_SUPPORTED public="1" static="1"><x path="Int"/></PROTOCOL_NOT_SUPPORTED>
		<RANGE_ERROR public="1" static="1"><x path="Int"/></RANGE_ERROR>
		<RANGE_SPANS_READHEAD public="1" static="1"><x path="Int"/></RANGE_SPANS_READHEAD>
		<RENDITION_M3U8_ERROR public="1" static="1"><x path="Int"/></RENDITION_M3U8_ERROR>
		<REPLACEMENT_FAILED public="1" static="1"><x path="Int"/></REPLACEMENT_FAILED>
		<RESOURCE_NOT_SPECIFIED public="1" static="1"><x path="Int"/></RESOURCE_NOT_SPECIFIED>
		<SECURITY_ERROR public="1" static="1"><x path="Int"/></SECURITY_ERROR>
		<SEEK_FAILED public="1" static="1"><x path="Int"/></SEEK_FAILED>
		<SEGMENT_SKIPPED_ON_FAILURE public="1" static="1"><x path="Int"/></SEGMENT_SKIPPED_ON_FAILURE>
		<SIZE_UNKNOWN public="1" static="1"><x path="Int"/></SIZE_UNKNOWN>
		<SPS_PPS_FOUND_OUTSIDE_AVCC public="1" static="1"><x path="Int"/></SPS_PPS_FOUND_OUTSIDE_AVCC>
		<SUCCESS public="1" static="1"><x path="Int"/></SUCCESS>
		<SWITCH_TO_ASYMMETRIC_PROFILE public="1" static="1"><x path="Int"/></SWITCH_TO_ASYMMETRIC_PROFILE>
		<TIMELINE_TOO_SHORT public="1" static="1"><x path="Int"/></TIMELINE_TOO_SHORT>
		<UNDERFLOW public="1" static="1"><x path="Int"/></UNDERFLOW>
		<UNSUPPORTED_CONFIGURATION public="1" static="1"><x path="Int"/></UNSUPPORTED_CONFIGURATION>
		<UNSUPPORTED_HLS_VERSION public="1" static="1"><x path="Int"/></UNSUPPORTED_HLS_VERSION>
		<UNSUPPORTED_OPERATION public="1" static="1"><x path="Int"/></UNSUPPORTED_OPERATION>
		<VIDEO_PROFILE_NOT_SUPPORTED public="1" static="1"><x path="Int"/></VIDEO_PROFILE_NOT_SUPPORTED>
		<WAITING_FOR_INIT public="1" static="1"><x path="Int"/></WAITING_FOR_INIT>
		<result public="1" set="null"><x path="Int"/></result>
		<new public="1" set="method"><f a="inResult">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVInsertionResult" params="" file="C:\HaxeToolkit\haxe\std/flash/media/AVInsertionResult.hx" extern="1">
		<extends path="flash.media.AVResult"/>
		<insertedBeforeReadHead public="1" set="null"><x path="Bool"/></insertedBeforeReadHead>
		<periodIndex public="1" set="null"><x path="Int"/></periodIndex>
		<new public="1" set="method"><f a="result:periodIndex:insertedBeforeReadHead">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVNetworkingParams" params="" file="C:\HaxeToolkit\haxe\std/flash/media/AVNetworkingParams.hx" extern="1">
		<forceNativeNetworking public="1"><x path="Bool"/></forceNativeNetworking>
		<readSetCookieHeader public="1"><x path="Bool"/></readSetCookieHeader>
		<useCookieHeaderForAllRequests public="1"><x path="Bool"/></useCookieHeaderForAllRequests>
		<new public="1" set="method">
			<f a="?init_forceNativeNetworking:?init_readSetCookieHeader:?init_useCookieHeaderForAllRequests" v="false:true:false">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{init_useCookieHeaderForAllRequests:false,init_readSetCookieHeader:true,init_forceNativeNetworking:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.media.AVPeriodInfo" params="" file="C:\HaxeToolkit\haxe\std/flash/media/AVPeriodInfo.hx" extern="1">
		<duration public="1" set="null"><x path="Float"/></duration>
		<firstCuePointIndex public="1" set="null"><x path="Int"/></firstCuePointIndex>
		<firstSubscribedTagIndex public="1" set="null"><x path="Int"/></firstSubscribedTagIndex>
		<lastCuePointIndex public="1" set="null"><x path="Int"/></lastCuePointIndex>
		<lastSubscribedTagIndex public="1" set="null"><x path="Int"/></lastSubscribedTagIndex>
		<localStartTime public="1" set="null"><x path="Float"/></localStartTime>
		<supportsTrickPlay public="1" set="null"><x path="Bool"/></supportsTrickPlay>
		<targetDuration public="1" set="null"><x path="Float"/></targetDuration>
		<userData public="1" set="null"><x path="Int"/></userData>
		<virtualStartTime public="1" set="null"><x path="Float"/></virtualStartTime>
		<new public="1" set="method"><f a="init_localStartTime:init_virtualStartTime:init_duration:init_firstCuePointIndex:init_lastCuePointIndex:init_firstSubscribedTagIndex:init_lastSubscribedTagIndex:init_userData:init_supportsTrickPlay:init_targetDuration">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVPlayState" params="" file="C:\HaxeToolkit\haxe\std/flash/media/AVPlayState.hx" extern="1">
		<BUFFERING public="1" static="1"><x path="Int"/></BUFFERING>
		<EOF public="1" static="1"><x path="Int"/></EOF>
		<PAUSED public="1" static="1"><x path="Int"/></PAUSED>
		<PLAYING public="1" static="1"><x path="Int"/></PLAYING>
		<READY public="1" static="1"><x path="Int"/></READY>
		<SUSPENDED public="1" static="1"><x path="Int"/></SUSPENDED>
		<TRICK_PLAY public="1" static="1"><x path="Int"/></TRICK_PLAY>
		<UNINITIALIZED public="1" static="1"><x path="Int"/></UNINITIALIZED>
		<UNRECOVERABLE_ERROR public="1" static="1"><x path="Int"/></UNRECOVERABLE_ERROR>
		<state public="1" set="null"><x path="Int"/></state>
		<new public="1" set="method"><f a="state">
	<x path="UInt"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVSource" params="" file="C:\HaxeToolkit\haxe\std/flash/media/AVSource.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.AVSegmentedSource" params="" file="C:\HaxeToolkit\haxe\std/flash/media/AVSegmentedSource.hx" extern="1">
		<extends path="flash.media.AVSource"/>
		<AUDIO public="1" static="1"><c path="String"/></AUDIO>
		<AUDIO_DESCRIPTION public="1" static="1"><c path="String"/></AUDIO_DESCRIPTION>
		<AUDIO_LANGUAGE public="1" static="1"><c path="String"/></AUDIO_LANGUAGE>
		<AUDIO_PID public="1" static="1"><c path="String"/></AUDIO_PID>
		<DASH public="1" static="1"><c path="String"/></DASH>
		<DATA public="1" static="1"><c path="String"/></DATA>
		<DATA_DESCRIPTION public="1" static="1"><c path="String"/></DATA_DESCRIPTION>
		<HLS public="1" static="1"><c path="String"/></HLS>
		<VIDEO public="1" static="1"><c path="String"/></VIDEO>
		<VIDEO_DESCRIPTION public="1" static="1"><c path="String"/></VIDEO_DESCRIPTION>
		<cookieHeader public="1" get="null"><c path="String"/></cookieHeader>
		<masterUpdateInterval public="1" get="null"><x path="Int"/></masterUpdateInterval>
		<networkingParams public="1"><c path="flash.media.AVNetworkingParams"/></networkingParams>
		<useRedirectedUrl public="1" get="null"><x path="Bool"/></useRedirectedUrl>
		<clearPauseAtPeriodEnd public="1" set="method"><f a="periodIndex">
	<x path="Int"/>
	<c path="flash.media.AVResult"/>
</f></clearPauseAtPeriodEnd>
		<getABRProfileCount public="1" set="method"><f a="periodIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getABRProfileCount>
		<getABRProfileInfoAtIndex public="1" set="method"><f a="periodIndex:abrProfileIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.media.AVABRProfileInfo"/>
</f></getABRProfileInfoAtIndex>
		<getBackgroundPeriodInfo public="1" set="method"><f a="periodIndex">
	<x path="Int"/>
	<c path="flash.media.AVPeriodInfo"/>
</f></getBackgroundPeriodInfo>
		<getBackgroundTimeline public="1" set="method"><f a=""><c path="flash.media.AVTimeline"/></f></getBackgroundTimeline>
		<getCuePoint public="1" set="method"><f a="periodIndex:cuePointIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.media.AVCuePoint"/>
</f></getCuePoint>
		<getPerceivedBandwidth public="1" set="method"><f a=""><x path="UInt"/></f></getPerceivedBandwidth>
		<getPeriodInfo public="1" set="method"><f a="periodIndex">
	<x path="Int"/>
	<c path="flash.media.AVPeriodInfo"/>
</f></getPeriodInfo>
		<getSubscribedTag public="1" set="method"><f a="periodIndex:tagDataIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.media.AVTagData"/>
</f></getSubscribedTag>
		<getSubscribedTagForBackgroundManifest public="1" set="method"><f a="periodIndex:tagDataIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.media.AVTagData"/>
</f></getSubscribedTagForBackgroundManifest>
		<getTimeline public="1" set="method"><f a=""><c path="flash.media.AVTimeline"/></f></getTimeline>
		<getTrackCount public="1" set="method"><f a="periodIndex:payloadType">
	<x path="Int"/>
	<c path="String"/>
	<x path="Int"/>
</f></getTrackCount>
		<getTrackInfo public="1" set="method"><f a="periodIndex:payloadType:trackIndex">
	<x path="Int"/>
	<c path="String"/>
	<x path="Int"/>
	<c path="flash.media.AVTrackInfo"/>
</f></getTrackInfo>
		<insertByLocalTime public="1" set="method">
			<f a="periodIndex:insertionTime:handle:?userData:?replaceDuration" v=":::0:0">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<c path="flash.media.AVInsertionResult"/>
			</f>
			<meta><m n=":value"><e>{replaceDuration:0,userData:0}</e></m></meta>
		</insertByLocalTime>
		<insertByVirtualTime public="1" set="method">
			<f a="insertionTime:handle:?userData:?replaceDuration" v="::0:0">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<c path="flash.media.AVInsertionResult"/>
			</f>
			<meta><m n=":value"><e>{replaceDuration:0,userData:0}</e></m></meta>
		</insertByVirtualTime>
		<load public="1" set="method">
			<f a="url:?containerType:?userData" v="::0">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="flash.media.AVResult"/>
			</f>
			<meta><m n=":value"><e>{userData:0}</e></m></meta>
		</load>
		<loadManifest public="1" set="method">
			<f a="uri:?userData:?containerType" v=":0:">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="flash.media.AVResult"/>
			</f>
			<meta><m n=":value"><e>{userData:0}</e></m></meta>
		</loadManifest>
		<loadWithBackgroundManifest public="1" set="method"><f a="url:containerType:userData:backgroundManifest">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="flash.media.AVResult"/>
</f></loadWithBackgroundManifest>
		<releaseManifest public="1" set="method"><f a="handle">
	<x path="Int"/>
	<c path="flash.media.AVResult"/>
</f></releaseManifest>
		<removeByLocalTime public="1" set="method"><f a="periodIndex:timeStart:timeEnd:replaceWithMainMedia">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
	<c path="flash.media.AVResult"/>
</f></removeByLocalTime>
		<removeByVirtualTime public="1" set="method"><f a="virtualTimeStart:virtualTimeEnd">
	<x path="Float"/>
	<x path="Float"/>
	<c path="flash.media.AVResult"/>
</f></removeByVirtualTime>
		<selectTrack public="1" set="method"><f a="periodIndex:payloadType:trackIndex">
	<x path="Int"/>
	<c path="String"/>
	<x path="Int"/>
	<c path="flash.media.AVResult"/>
</f></selectTrack>
		<selectTrackString public="1" set="method"><f a="periodIndex:payloadType:trackString">
	<x path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<c path="flash.media.AVResult"/>
</f></selectTrackString>
		<setABRParameters public="1" set="method"><f a="params">
	<c path="flash.media.AVABRParameters"/>
	<c path="flash.media.AVResult"/>
</f></setABRParameters>
		<setBandwidth public="1" set="method"><f a="bitsPerSecond">
	<x path="Int"/>
	<c path="flash.media.AVResult"/>
</f></setBandwidth>
		<setCuePointTags public="1" set="method"><f a="tagArray">
	<c path="Array"><d/></c>
	<c path="flash.media.AVResult"/>
</f></setCuePointTags>
		<setHoldAt public="1" set="method"><f a="time">
	<x path="Float"/>
	<c path="flash.media.AVResult"/>
</f></setHoldAt>
		<setPauseAtPeriodEnd public="1" set="method">
			<f a="periodIndex:?userData" v=":0">
				<x path="Int"/>
				<x path="Int"/>
				<c path="flash.media.AVResult"/>
			</f>
			<meta><m n=":value"><e>{userData:0}</e></m></meta>
		</setPauseAtPeriodEnd>
		<setSubscribedTags public="1" set="method"><f a="tagArray">
	<c path="Array"><d/></c>
	<c path="flash.media.AVResult"/>
</f></setSubscribedTags>
		<setSubscribedTagsForBackgroundManifest public="1" set="method"><f a="tagArray">
	<c path="Array"><d/></c>
	<c path="flash.media.AVResult"/>
</f></setSubscribedTagsForBackgroundManifest>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.AVStream" params="" file="C:\HaxeToolkit\haxe\std/flash/media/AVStream.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<HARDWARE public="1" static="1"><c path="String"/></HARDWARE>
		<SOFTWARE public="1" static="1"><c path="String"/></SOFTWARE>
		<UNDEFINED public="1" static="1"><c path="String"/></UNDEFINED>
		<backBufferLength public="1" set="null"><x path="Float"/></backBufferLength>
		<backBufferTime public="1" get="null"><x path="Float"/></backBufferTime>
		<bufferLength public="1" set="null"><x path="Float"/></bufferLength>
		<bufferTime public="1" get="null"><x path="Float"/></bufferTime>
		<captionStyle public="1" get="null"><c path="flash.media.AVCaptionStyle"/></captionStyle>
		<captionsEnabled public="1"><x path="Bool"/></captionsEnabled>
		<clientLivePoint public="1" set="null"><x path="Float"/></clientLivePoint>
		<currentFPS public="1" set="null"><x path="Float"/></currentFPS>
		<decoderType public="1" set="null"><c path="String"/></decoderType>
		<droppedFrames public="1" set="null"><x path="Int"/></droppedFrames>
		<frameTime public="1" set="null"><x path="Float"/></frameTime>
		<initialBufferTime public="1" get="null"><x path="Float"/></initialBufferTime>
		<playState public="1" set="null"><c path="flash.media.AVPlayState"/></playState>
		<renderType public="1" set="null"><c path="String"/></renderType>
		<time public="1" set="null"><x path="Float"/></time>
		<useHardwareDecoder public="1"><x path="Bool"/></useHardwareDecoder>
		<volume public="1"><x path="Float"/></volume>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<fastForward public="1" set="method"><f a="rate">
	<x path="Float"/>
	<c path="flash.media.AVResult"/>
</f></fastForward>
		<pause public="1" set="method"><f a=""><c path="flash.media.AVResult"/></f></pause>
		<play public="1" set="method"><f a=""><c path="flash.media.AVResult"/></f></play>
		<resume public="1" set="method"><f a=""><x path="Bool"/></f></resume>
		<rewind public="1" set="method"><f a="rate">
	<x path="Float"/>
	<c path="flash.media.AVResult"/>
</f></rewind>
		<seek public="1" set="method">
			<f a="offset:?inBufferSeek" v=":true">
				<x path="Float"/>
				<x path="Bool"/>
				<c path="flash.media.AVResult"/>
			</f>
			<meta><m n=":value"><e>{inBufferSeek:true}</e></m></meta>
		</seek>
		<seekToKeyFrame public="1" set="method">
			<f a="offset:?inBufferSeek" v=":true">
				<x path="Float"/>
				<x path="Bool"/>
				<c path="flash.media.AVResult"/>
			</f>
			<meta><m n=":value"><e>{inBufferSeek:true}</e></m></meta>
		</seekToKeyFrame>
		<seekToLivePoint public="1" set="method"><f a=""><c path="flash.media.AVResult"/></f></seekToLivePoint>
		<seekToLocalTime public="1" set="method"><f a="periodIndex:time">
	<x path="Int"/>
	<x path="Float"/>
	<c path="flash.media.AVResult"/>
</f></seekToLocalTime>
		<setPlaySpeed public="1" set="method"><f a="speed:reserved">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setPlaySpeed>
		<step public="1" set="method"><f a="frames">
	<x path="Int"/>
	<c path="flash.media.AVResult"/>
</f></step>
		<new public="1" set="method"><f a="source">
	<c path="flash.media.AVSource"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVTagData" params="" file="C:\HaxeToolkit\haxe\std/flash/media/AVTagData.hx" extern="1">
		<data public="1" set="null"><c path="String"/></data>
		<localTime public="1" set="null"><x path="Float"/></localTime>
		<new public="1" set="method"><f a="init_data:init_localTime">
	<c path="String"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVTimeline" params="" file="C:\HaxeToolkit\haxe\std/flash/media/AVTimeline.hx" extern="1">
		<complete public="1" set="null"><x path="Bool"/></complete>
		<firstPeriodIndex public="1" set="null"><x path="Int"/></firstPeriodIndex>
		<lastPeriodIndex public="1" set="null"><x path="Int"/></lastPeriodIndex>
		<type public="1" set="null"><c path="String"/></type>
		<virtualDuration public="1" set="null"><x path="Float"/></virtualDuration>
		<virtualStartTime public="1" set="null"><x path="Float"/></virtualStartTime>
		<new public="1" set="method"><f a="init_type:init_virtualStartTime:init_virtualDuration:init_firstPeriodIndex:init_lastPeriodIndex:init_complete">
	<c path="String"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVTrackInfo" params="" file="C:\HaxeToolkit\haxe\std/flash/media/AVTrackInfo.hx" extern="1">
		<DTI_608_CAPTIONS public="1" static="1"><c path="String"/></DTI_608_CAPTIONS>
		<DTI_708_CAPTIONS public="1" static="1"><c path="String"/></DTI_708_CAPTIONS>
		<DTI_WEBVTT_CAPTIONS public="1" static="1"><c path="String"/></DTI_WEBVTT_CAPTIONS>
		<activity public="1" set="null"><x path="Bool"/></activity>
		<autoSelect public="1" set="null"><x path="Bool"/></autoSelect>
		<dataTrackInfoServiceType public="1" set="null"><c path="String"/></dataTrackInfoServiceType>
		<defaultTrack public="1" set="null"><x path="Bool"/></defaultTrack>
		<description public="1" set="null"><c path="String"/></description>
		<forced public="1" set="null"><x path="Bool"/></forced>
		<language public="1" set="null"><c path="String"/></language>
		<pid public="1" set="null"><x path="Int"/></pid>
		<new public="1" set="method"><f a="init_description:init_language:init_defaultTrack:init_autoSelect:init_forced:init_activity:init_dataTrackInfoServiceType:init_pid">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.net.URLLoader" params="" file="C:\HaxeToolkit\haxe\std/flash/net/URLLoader.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<bytesLoaded public="1"><x path="UInt"/></bytesLoaded>
		<bytesTotal public="1"><x path="UInt"/></bytesTotal>
		<data public="1"><d/></data>
		<dataFormat public="1"><e path="flash.net.URLLoaderDataFormat"/></dataFormat>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<load public="1" set="method"><f a="request">
	<c path="flash.net.URLRequest"/>
	<x path="Void"/>
</f></load>
		<new public="1" set="method"><f a="?request">
	<c path="flash.net.URLRequest"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVURLLoader" params="" file="C:\HaxeToolkit\haxe\std/flash/media/AVURLLoader.hx" extern="1">
		<extends path="flash.net.URLLoader"/>
		<cookieHeader public="1" get="null"><c path="String"/></cookieHeader>
		<stream public="1"><c path="flash.media.AVURLStream"/></stream>
		<new public="1" set="method"><f a="?request">
	<c path="flash.net.URLRequest"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.utils.IDataInput" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/IDataInput.hx" extern="1" interface="1">
		<bytesAvailable public="1" set="null"><x path="UInt"/></bytesAvailable>
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{length:0,offset:0}</e></m></meta>
		</readBytes>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><x path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<x path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readShort public="1" set="method"><f a=""><x path="Int"/></f></readShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="length">
	<x path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUnsignedByte public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedShort>
	</class>
	<class path="flash.net.URLStream" params="" file="C:\HaxeToolkit\haxe\std/flash/net/URLStream.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<implements path="flash.utils.IDataInput"/>
		<bytesAvailable public="1" set="null"><x path="UInt"/></bytesAvailable>
		<connected public="1" set="null"><x path="Bool"/></connected>
		<diskCacheEnabled public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</diskCacheEnabled>
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<length public="1" set="null">
			<x path="Float"/>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</length>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<position public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</position>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<load public="1" set="method"><f a="request">
	<c path="flash.net.URLRequest"/>
	<x path="Void"/>
</f></load>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{length:0,offset:0}</e></m></meta>
		</readBytes>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><x path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<x path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readShort public="1" set="method"><f a=""><x path="Int"/></f></readShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="length">
	<x path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUnsignedByte public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedShort>
		<stop public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</stop>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.AVURLStream" params="" file="C:\HaxeToolkit\haxe\std/flash/media/AVURLStream.hx" extern="1">
		<extends path="flash.net.URLStream"/>
		<cookieHeader public="1" get="null"><c path="String"/></cookieHeader>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.AudioDecoder" params="" file="C:\HaxeToolkit\haxe\std/flash/media/AudioDecoder.hx" extern="1">
		<DOLBY_DIGITAL public="1" static="1"><c path="String"/></DOLBY_DIGITAL>
		<DOLBY_DIGITAL_PLUS public="1" static="1"><c path="String"/></DOLBY_DIGITAL_PLUS>
		<DTS public="1" static="1"><c path="String"/></DTS>
		<DTS_EXPRESS public="1" static="1"><c path="String"/></DTS_EXPRESS>
		<DTS_HD_HIGH_RESOLUTION_AUDIO public="1" static="1"><c path="String"/></DTS_HD_HIGH_RESOLUTION_AUDIO>
		<DTS_HD_MASTER_AUDIO public="1" static="1"><c path="String"/></DTS_HD_MASTER_AUDIO>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.Camera" params="" file="C:\HaxeToolkit\haxe\std/flash/media/Camera.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isSupported>
		<names public="1" set="null" static="1"><c path="Array"><d/></c></names>
		<_scanHardware public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</_scanHardware>
		<getCamera public="1" set="method" static="1"><f a="?name">
	<c path="String"/>
	<c path="flash.media.Camera"/>
</f></getCamera>
		<activityLevel public="1" set="null"><x path="Float"/></activityLevel>
		<bandwidth public="1" set="null"><x path="Int"/></bandwidth>
		<currentFPS public="1" set="null"><x path="Float"/></currentFPS>
		<fps public="1" set="null"><x path="Float"/></fps>
		<height public="1" set="null"><x path="Int"/></height>
		<index public="1" set="null"><x path="Int"/></index>
		<keyFrameInterval public="1" set="null"><x path="Int"/></keyFrameInterval>
		<loopback public="1" set="null"><x path="Bool"/></loopback>
		<motionLevel public="1" set="null"><x path="Int"/></motionLevel>
		<motionTimeout public="1" set="null"><x path="Int"/></motionTimeout>
		<muted public="1" set="null"><x path="Bool"/></muted>
		<name public="1" set="null"><c path="String"/></name>
		<position public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</position>
		<quality public="1" set="null"><x path="Int"/></quality>
		<width public="1" set="null"><x path="Int"/></width>
		<copyToByteArray public="1" set="method">
			<f a="rect:destination">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</copyToByteArray>
		<copyToVector public="1" set="method">
			<f a="rect:destination">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><x path="UInt"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</copyToVector>
		<drawToBitmapData public="1" set="method">
			<f a="destination">
				<c path="flash.display.BitmapData"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</drawToBitmapData>
		<setCursor public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></setCursor>
		<setKeyFrameInterval public="1" set="method"><f a="keyFrameInterval">
	<x path="Int"/>
	<x path="Void"/>
</f></setKeyFrameInterval>
		<setLoopback public="1" set="method">
			<f a="?compress" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{compress:false}</e></m></meta>
		</setLoopback>
		<setMode public="1" set="method">
			<f a="width:height:fps:?favorArea" v=":::true">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{favorArea:true}</e></m></meta>
		</setMode>
		<setMotionLevel public="1" set="method">
			<f a="motionLevel:?timeout" v=":2000">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{timeout:2000}</e></m></meta>
		</setMotionLevel>
		<setQuality public="1" set="method"><f a="bandwidth:quality">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setQuality>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.media.H264Level" params="" file="C:\HaxeToolkit\haxe\std/flash/media/H264Level.hx" extern="1">
		<LEVEL_1 public="1" static="1"><c path="String"/></LEVEL_1>
		<LEVEL_1B public="1" static="1"><c path="String"/></LEVEL_1B>
		<LEVEL_1_1 public="1" static="1"><c path="String"/></LEVEL_1_1>
		<LEVEL_1_2 public="1" static="1"><c path="String"/></LEVEL_1_2>
		<LEVEL_1_3 public="1" static="1"><c path="String"/></LEVEL_1_3>
		<LEVEL_2 public="1" static="1"><c path="String"/></LEVEL_2>
		<LEVEL_2_1 public="1" static="1"><c path="String"/></LEVEL_2_1>
		<LEVEL_2_2 public="1" static="1"><c path="String"/></LEVEL_2_2>
		<LEVEL_3 public="1" static="1"><c path="String"/></LEVEL_3>
		<LEVEL_3_1 public="1" static="1"><c path="String"/></LEVEL_3_1>
		<LEVEL_3_2 public="1" static="1"><c path="String"/></LEVEL_3_2>
		<LEVEL_4 public="1" static="1"><c path="String"/></LEVEL_4>
		<LEVEL_4_1 public="1" static="1"><c path="String"/></LEVEL_4_1>
		<LEVEL_4_2 public="1" static="1"><c path="String"/></LEVEL_4_2>
		<LEVEL_5 public="1" static="1"><c path="String"/></LEVEL_5>
		<LEVEL_5_1 public="1" static="1"><c path="String"/></LEVEL_5_1>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.H264Profile" params="" file="C:\HaxeToolkit\haxe\std/flash/media/H264Profile.hx" extern="1">
		<BASELINE public="1" static="1"><c path="String"/></BASELINE>
		<MAIN public="1" static="1"><c path="String"/></MAIN>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.VideoStreamSettings" params="" file="C:\HaxeToolkit\haxe\std/flash/media/VideoStreamSettings.hx" extern="1">
		<bandwidth public="1" set="null"><x path="Int"/></bandwidth>
		<codec public="1" set="null"><c path="String"/></codec>
		<fps public="1" set="null"><x path="Float"/></fps>
		<height public="1" set="null"><x path="Int"/></height>
		<keyFrameInterval public="1" set="null"><x path="Int"/></keyFrameInterval>
		<quality public="1" set="null"><x path="Int"/></quality>
		<width public="1" set="null"><x path="Int"/></width>
		<setKeyFrameInterval public="1" set="method"><f a="keyFrameInterval">
	<x path="Int"/>
	<x path="Void"/>
</f></setKeyFrameInterval>
		<setMode public="1" set="method"><f a="width:height:fps">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setMode>
		<setQuality public="1" set="method"><f a="bandwidth:quality">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setQuality>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.H264VideoStreamSettings" params="" file="C:\HaxeToolkit\haxe\std/flash/media/H264VideoStreamSettings.hx" extern="1">
		<extends path="flash.media.VideoStreamSettings"/>
		<level public="1" set="null"><c path="String"/></level>
		<profile public="1" set="null"><c path="String"/></profile>
		<setProfileLevel public="1" set="method"><f a="profile:level">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setProfileLevel>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.ID3Info" params="" file="C:\HaxeToolkit\haxe\std/flash/media/ID3Info.hx" extern="1">
		<album public="1"><c path="String"/></album>
		<artist public="1"><c path="String"/></artist>
		<comment public="1"><c path="String"/></comment>
		<genre public="1"><c path="String"/></genre>
		<songName public="1"><c path="String"/></songName>
		<track public="1"><c path="String"/></track>
		<year public="1"><c path="String"/></year>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.media.Microphone" params="" file="C:\HaxeToolkit\haxe\std/flash/media/Microphone.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isSupported>
		<names public="1" set="null" static="1"><c path="Array"><d/></c></names>
		<getEnhancedMicrophone public="1" set="method" static="1">
			<f a="?index" v="-1">
				<x path="Int"/>
				<c path="flash.media.Microphone"/>
			</f>
			<meta>
				<m n=":value"><e>{index:-1}</e></m>
				<m n=":require"><e>flash10_2</e></m>
			</meta>
		</getEnhancedMicrophone>
		<getMicrophone public="1" set="method" static="1">
			<f a="?index" v="-1">
				<x path="Int"/>
				<c path="flash.media.Microphone"/>
			</f>
			<meta><m n=":value"><e>{index:-1}</e></m></meta>
		</getMicrophone>
		<activityLevel public="1" set="null"><x path="Float"/></activityLevel>
		<codec public="1">
			<e path="flash.media.SoundCodec"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</codec>
		<enableVAD public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</enableVAD>
		<encodeQuality public="1">
			<x path="Int"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</encodeQuality>
		<enhancedOptions public="1">
			<c path="flash.media.MicrophoneEnhancedOptions"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</enhancedOptions>
		<framesPerPacket public="1">
			<x path="Int"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</framesPerPacket>
		<gain public="1"><x path="Float"/></gain>
		<index public="1" set="null"><x path="Int"/></index>
		<muted public="1" set="null"><x path="Bool"/></muted>
		<name public="1" set="null"><c path="String"/></name>
		<noiseSuppressionLevel public="1">
			<x path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</noiseSuppressionLevel>
		<rate public="1"><x path="Int"/></rate>
		<silenceLevel public="1" set="null"><x path="Float"/></silenceLevel>
		<silenceTimeout public="1" set="null"><x path="Int"/></silenceTimeout>
		<soundTransform public="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<useEchoSuppression public="1" set="null"><x path="Bool"/></useEchoSuppression>
		<setLoopBack public="1" set="method">
			<f a="?state" v="true">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{state:true}</e></m></meta>
		</setLoopBack>
		<setSilenceLevel public="1" set="method">
			<f a="silenceLevel:?timeout" v=":-1">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{timeout:-1}</e></m></meta>
		</setSilenceLevel>
		<setUseEchoSuppression public="1" set="method"><f a="useEchoSuppression">
	<x path="Bool"/>
	<x path="Void"/>
</f></setUseEchoSuppression>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.media.MicrophoneEnhancedMode" params="" file="C:\HaxeToolkit\haxe\std/flash/media/MicrophoneEnhancedMode.hx">
		<FULL_DUPLEX/>
		<HALF_DUPLEX/>
		<HEADSET/>
		<OFF/>
		<SPEAKER_MUTE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash10_2</e></m>
		</meta>
	</enum>
	<class path="flash.media.MicrophoneEnhancedOptions" params="" file="C:\HaxeToolkit\haxe\std/flash/media/MicrophoneEnhancedOptions.hx" extern="1">
		<autoGain public="1"><x path="Bool"/></autoGain>
		<echoPath public="1"><x path="Int"/></echoPath>
		<isVoiceDetected public="1"><x path="Int"/></isVoiceDetected>
		<mode public="1"><e path="flash.media.MicrophoneEnhancedMode"/></mode>
		<nonLinearProcessing public="1"><x path="Bool"/></nonLinearProcessing>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash10_2</e></m>
		</meta>
	</class>
	<class path="flash.media.Sound" params="" file="C:\HaxeToolkit\haxe\std/flash/media/Sound.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<bytesLoaded public="1" set="null"><x path="UInt"/></bytesLoaded>
		<bytesTotal public="1" set="null"><x path="Int"/></bytesTotal>
		<id3 public="1" set="null"><c path="flash.media.ID3Info"/></id3>
		<isBuffering public="1" set="null"><x path="Bool"/></isBuffering>
		<isURLInaccessible public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isURLInaccessible>
		<length public="1" set="null"><x path="Float"/></length>
		<url public="1" set="null"><c path="String"/></url>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<extract public="1" set="method">
			<f a="target:length:?startPosition" v="::-1">
				<c path="flash.utils.ByteArray"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":value"><e>{startPosition:-1}</e></m>
				<m n=":require"><e>flash10</e></m>
			</meta>
		</extract>
		<load public="1" set="method"><f a="stream:?context">
	<c path="flash.net.URLRequest"/>
	<c path="flash.media.SoundLoaderContext"/>
	<x path="Void"/>
</f></load>
		<loadCompressedDataFromByteArray public="1" set="method">
			<f a="bytes:bytesLength">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</loadCompressedDataFromByteArray>
		<loadPCMFromByteArray public="1" set="method">
			<f a="bytes:samples:?format:?stereo:?sampleRate" v=":::true:44100">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{sampleRate:44100,stereo:true}</e></m>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</loadPCMFromByteArray>
		<play public="1" set="method">
			<f a="?startTime:?loops:?sndTransform" v="0:0:">
				<x path="Float"/>
				<x path="Int"/>
				<c path="flash.media.SoundTransform"/>
				<c path="flash.media.SoundChannel"/>
			</f>
			<meta><m n=":value"><e>{loops:0,startTime:0}</e></m></meta>
		</play>
		<new public="1" set="method"><f a="?stream:?context">
	<c path="flash.net.URLRequest"/>
	<c path="flash.media.SoundLoaderContext"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.SoundChannel" params="" file="C:\HaxeToolkit\haxe\std/flash/media/SoundChannel.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<leftPeak public="1" set="null"><x path="Float"/></leftPeak>
		<position public="1" set="null"><x path="Float"/></position>
		<rightPeak public="1" set="null"><x path="Float"/></rightPeak>
		<soundTransform public="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<stop public="1" set="method"><f a=""><x path="Void"/></f></stop>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.media.SoundCodec" params="" file="C:\HaxeToolkit\haxe\std/flash/media/SoundCodec.hx">
		<NELLYMOSER/>
		<PCMA/>
		<PCMU/>
		<SPEEX/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.media.SoundLoaderContext" params="" file="C:\HaxeToolkit\haxe\std/flash/media/SoundLoaderContext.hx" extern="1">
		<bufferTime public="1"><x path="Float"/></bufferTime>
		<checkPolicyFile public="1"><x path="Bool"/></checkPolicyFile>
		<new public="1" set="method">
			<f a="?bufferTime:?checkPolicyFile" v="1000:false">
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{checkPolicyFile:false,bufferTime:1000}</e></m></meta>
		</new>
	</class>
	<class path="flash.media.SoundMixer" params="" file="C:\HaxeToolkit\haxe\std/flash/media/SoundMixer.hx" extern="1">
		<audioPlaybackMode public="1" static="1"><c path="String"/></audioPlaybackMode>
		<bufferTime public="1" static="1"><x path="Int"/></bufferTime>
		<soundTransform public="1" static="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<useSpeakerphoneForVoice public="1" static="1"><x path="Bool"/></useSpeakerphoneForVoice>
		<areSoundsInaccessible public="1" set="method" static="1"><f a=""><x path="Bool"/></f></areSoundsInaccessible>
		<computeSpectrum public="1" set="method" static="1">
			<f a="outputArray:?FFTMode:?stretchFactor" v=":false:0">
				<c path="flash.utils.ByteArray"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{stretchFactor:0,FFTMode:false}</e></m></meta>
		</computeSpectrum>
		<stopAll public="1" set="method" static="1"><f a=""><x path="Void"/></f></stopAll>
	</class>
	<class path="flash.media.SoundTransform" params="" file="C:\HaxeToolkit\haxe\std/flash/media/SoundTransform.hx" extern="1">
		<leftToLeft public="1"><x path="Float"/></leftToLeft>
		<leftToRight public="1"><x path="Float"/></leftToRight>
		<pan public="1"><x path="Float"/></pan>
		<rightToLeft public="1"><x path="Float"/></rightToLeft>
		<rightToRight public="1"><x path="Float"/></rightToRight>
		<volume public="1"><x path="Float"/></volume>
		<new public="1" set="method">
			<f a="?vol:?panning" v="1:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{panning:0,vol:1}</e></m></meta>
		</new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.media.StageVideo" params="" file="C:\HaxeToolkit\haxe\std/flash/media/StageVideo.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<colorSpaces public="1" set="null"><c path="flash.Vector"><c path="String"/></c></colorSpaces>
		<depth public="1"><x path="Int"/></depth>
		<pan public="1"><c path="flash.geom.Point"/></pan>
		<videoHeight public="1" set="null"><x path="Int"/></videoHeight>
		<videoWidth public="1" set="null"><x path="Int"/></videoWidth>
		<viewPort public="1"><c path="flash.geom.Rectangle"/></viewPort>
		<zoom public="1"><c path="flash.geom.Point"/></zoom>
		<attachAVStream public="1">
			<f a="avStream">
				<c path="flash.media.AVStream"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_7</e></m></meta>
		</attachAVStream>
		<attachCamera public="1" set="method">
			<f a="theCamera">
				<c path="flash.media.Camera"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</attachCamera>
		<attachNetStream public="1" set="method"><f a="netStream">
	<c path="flash.net.NetStream"/>
	<x path="Void"/>
</f></attachNetStream>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_2</e></m></meta>
	</class>
	<class path="flash.media.StageVideoAvailability" params="" file="C:\HaxeToolkit\haxe\std/flash/media/StageVideoAvailability.hx" extern="1">
		<AVAILABLE public="1" static="1"><c path="String"/></AVAILABLE>
		<UNAVAILABLE public="1" static="1"><c path="String"/></UNAVAILABLE>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.StageVideoAvailabilityReason" params="" file="C:\HaxeToolkit\haxe\std/flash/media/StageVideoAvailabilityReason.hx" extern="1">
		<DRIVER_TOO_OLD public="1" static="1"><c path="String"/></DRIVER_TOO_OLD>
		<NO_ERROR public="1" static="1"><c path="String"/></NO_ERROR>
		<UNAVAILABLE public="1" static="1"><c path="String"/></UNAVAILABLE>
		<USER_DISABLED public="1" static="1"><c path="String"/></USER_DISABLED>
		<WMODE_INCOMPATIBLE public="1" static="1"><c path="String"/></WMODE_INCOMPATIBLE>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.Video" params="" file="C:\HaxeToolkit\haxe\std/flash/media/Video.hx" extern="1">
		<extends path="flash.display.DisplayObject"/>
		<deblocking public="1"><x path="Int"/></deblocking>
		<smoothing public="1"><x path="Bool"/></smoothing>
		<videoHeight public="1" set="null"><x path="Int"/></videoHeight>
		<videoWidth public="1" set="null"><x path="Int"/></videoWidth>
		<attachCamera public="1" set="method"><f a="camera">
	<c path="flash.media.Camera"/>
	<x path="Void"/>
</f></attachCamera>
		<attachNetStream public="1" set="method"><f a="netStream">
	<c path="flash.net.NetStream"/>
	<x path="Void"/>
</f></attachNetStream>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<new public="1" set="method">
			<f a="?width:?height" v="320:240">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{height:240,width:320}</e></m></meta>
		</new>
	</class>
	<class path="flash.media.VideoCodec" params="" file="C:\HaxeToolkit\haxe\std/flash/media/VideoCodec.hx" extern="1">
		<H264AVC public="1" static="1"><c path="String"/></H264AVC>
		<SORENSON public="1" static="1"><c path="String"/></SORENSON>
		<VP6 public="1" static="1"><c path="String"/></VP6>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.VideoStatus" params="" file="C:\HaxeToolkit\haxe\std/flash/media/VideoStatus.hx" extern="1">
		<ACCELERATED public="1" static="1"><c path="String"/></ACCELERATED>
		<SOFTWARE public="1" static="1"><c path="String"/></SOFTWARE>
		<UNAVAILABLE public="1" static="1"><c path="String"/></UNAVAILABLE>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.IDynamicPropertyOutput" params="" file="C:\HaxeToolkit\haxe\std/flash/net/IDynamicPropertyOutput.hx" extern="1" interface="1"><writeDynamicProperty public="1" set="method"><f a="name:value">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></writeDynamicProperty></class>
	<class path="flash.net.DynamicPropertyOutput" params="" file="C:\HaxeToolkit\haxe\std/flash/net/DynamicPropertyOutput.hx" extern="1">
		<implements path="flash.net.IDynamicPropertyOutput"/>
		<writeDynamicProperty public="1" set="method"><f a="name:value">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></writeDynamicProperty>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.FileFilter" params="" file="C:\HaxeToolkit\haxe\std/flash/net/FileFilter.hx" extern="1">
		<description public="1"><c path="String"/></description>
		<extension public="1"><c path="String"/></extension>
		<macType public="1"><c path="String"/></macType>
		<new public="1" set="method"><f a="description:extension:?macType">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.net.FileReference" params="" file="C:\HaxeToolkit\haxe\std/flash/net/FileReference.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<creationDate public="1" set="null"><c path="Date"/></creationDate>
		<creator public="1" set="null"><c path="String"/></creator>
		<data public="1" set="null">
			<c path="flash.utils.ByteArray"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</data>
		<modificationDate public="1" set="null"><c path="Date"/></modificationDate>
		<name public="1" set="null"><c path="String"/></name>
		<size public="1" set="null"><x path="Float"/></size>
		<type public="1" set="null"><c path="String"/></type>
		<browse public="1" set="method"><f a="?typeFilter">
	<c path="Array"><c path="flash.net.FileFilter"/></c>
	<x path="Bool"/>
</f></browse>
		<cancel public="1" set="method"><f a=""><x path="Void"/></f></cancel>
		<download public="1" set="method"><f a="request:?defaultFileName">
	<c path="flash.net.URLRequest"/>
	<c path="String"/>
	<x path="Void"/>
</f></download>
		<load public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</load>
		<save public="1" set="method">
			<f a="data:?defaultFileName">
				<d/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</save>
		<upload public="1" set="method">
			<f a="request:?uploadDataFieldName:?testUpload" v="::false">
				<c path="flash.net.URLRequest"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{testUpload:false}</e></m></meta>
		</upload>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.FileReferenceList" params="" file="C:\HaxeToolkit\haxe\std/flash/net/FileReferenceList.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<fileList public="1" set="null"><c path="Array"><c path="flash.net.FileReference"/></c></fileList>
		<browse public="1" set="method"><f a="?typeFilter">
	<c path="Array"><c path="flash.net.FileFilter"/></c>
	<x path="Bool"/>
</f></browse>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.GroupSpecifier" params="" file="C:\HaxeToolkit\haxe\std/flash/net/GroupSpecifier.hx" extern="1">
		<maxSupportedGroupspecVersion public="1" set="null" static="1"><x path="Int"/></maxSupportedGroupspecVersion>
		<encodeBootstrapPeerIDSpec public="1" set="method" static="1"><f a="peerID">
	<c path="String"/>
	<c path="String"/>
</f></encodeBootstrapPeerIDSpec>
		<encodeIPMulticastAddressSpec public="1" set="method" static="1"><f a="address:?port:?source">
	<c path="String"/>
	<d/>
	<c path="String"/>
	<c path="String"/>
</f></encodeIPMulticastAddressSpec>
		<encodePostingAuthorization public="1" set="method" static="1"><f a="password">
	<c path="String"/>
	<c path="String"/>
</f></encodePostingAuthorization>
		<encodePublishAuthorization public="1" set="method" static="1"><f a="password">
	<c path="String"/>
	<c path="String"/>
</f></encodePublishAuthorization>
		<ipMulticastMemberUpdatesEnabled public="1"><x path="Bool"/></ipMulticastMemberUpdatesEnabled>
		<minGroupspecVersion public="1"><x path="Int"/></minGroupspecVersion>
		<multicastEnabled public="1"><x path="Bool"/></multicastEnabled>
		<objectReplicationEnabled public="1"><x path="Bool"/></objectReplicationEnabled>
		<peerToPeerDisabled public="1"><x path="Bool"/></peerToPeerDisabled>
		<postingEnabled public="1"><x path="Bool"/></postingEnabled>
		<routingEnabled public="1"><x path="Bool"/></routingEnabled>
		<serverChannelEnabled public="1"><x path="Bool"/></serverChannelEnabled>
		<addBootstrapPeer public="1" set="method"><f a="peerID">
	<c path="String"/>
	<x path="Void"/>
</f></addBootstrapPeer>
		<addIPMulticastAddress public="1" set="method"><f a="address:?port:?source">
	<c path="String"/>
	<d/>
	<c path="String"/>
	<x path="Void"/>
</f></addIPMulticastAddress>
		<authorizations public="1" set="method"><f a=""><c path="String"/></f></authorizations>
		<groupspecWithAuthorizations public="1" set="method"><f a=""><c path="String"/></f></groupspecWithAuthorizations>
		<groupspecWithoutAuthorizations public="1" set="method"><f a=""><c path="String"/></f></groupspecWithoutAuthorizations>
		<makeUnique public="1" set="method"><f a=""><x path="Void"/></f></makeUnique>
		<setPostingPassword public="1" set="method"><f a="?password:?salt">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setPostingPassword>
		<setPublishPassword public="1" set="method"><f a="?password:?salt">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setPublishPassword>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.net.IDynamicPropertyWriter" params="" file="C:\HaxeToolkit\haxe\std/flash/net/IDynamicPropertyWriter.hx" extern="1" interface="1"><writeDynamicProperties public="1" set="method"><f a="obj:output">
	<t path="flash.utils.Object"/>
	<c path="flash.net.IDynamicPropertyOutput"/>
	<x path="Void"/>
</f></writeDynamicProperties></class>
	<class path="flash.net.LocalConnection" params="" file="C:\HaxeToolkit\haxe\std/flash/net/LocalConnection.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isSupported>
		<client public="1"><d/></client>
		<domain public="1" set="null"><c path="String"/></domain>
		<isPerUser public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isPerUser>
		<allowDomain public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></allowDomain>
		<allowInsecureDomain public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></allowInsecureDomain>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<connect public="1" set="method"><f a="connectionName">
	<c path="String"/>
	<x path="Void"/>
</f></connect>
		<send public="1" set="method"><f a="connectionName:methodName:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></send>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.NetConnection" params="" file="C:\HaxeToolkit\haxe\std/flash/net/NetConnection.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<defaultObjectEncoding public="1" static="1"><x path="UInt"/></defaultObjectEncoding>
		<client public="1"><d/></client>
		<connected public="1" set="null"><x path="Bool"/></connected>
		<connectedProxyType public="1" set="null"><c path="String"/></connectedProxyType>
		<farID public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</farID>
		<farNonce public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</farNonce>
		<maxPeerConnections public="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</maxPeerConnections>
		<nearID public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</nearID>
		<nearNonce public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</nearNonce>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<protocol public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</protocol>
		<proxyType public="1"><c path="String"/></proxyType>
		<unconnectedPeerStreams public="1" set="null">
			<c path="Array"><d/></c>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</unconnectedPeerStreams>
		<uri public="1" set="null"><c path="String"/></uri>
		<usingTLS public="1" set="null"><x path="Bool"/></usingTLS>
		<addHeader public="1" set="method">
			<f a="operation:?mustUnderstand:?param" v=":false:">
				<c path="String"/>
				<x path="Bool"/>
				<t path="flash.utils.Object"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{mustUnderstand:false}</e></m></meta>
		</addHeader>
		<call public="1" set="method"><f a="command:responder:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<c path="flash.net.Responder"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></call>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<connect public="1" set="method"><f a="command:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></connect>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.NetGroup" params="" file="C:\HaxeToolkit\haxe\std/flash/net/NetGroup.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<estimatedMemberCount public="1" set="null"><x path="Float"/></estimatedMemberCount>
		<info public="1" set="null"><c path="flash.net.NetGroupInfo"/></info>
		<localCoverageFrom public="1" set="null"><c path="String"/></localCoverageFrom>
		<localCoverageTo public="1" set="null"><c path="String"/></localCoverageTo>
		<neighborCount public="1" set="null"><x path="Float"/></neighborCount>
		<receiveMode public="1"><c path="String"/></receiveMode>
		<replicationStrategy public="1"><c path="String"/></replicationStrategy>
		<addHaveObjects public="1" set="method"><f a="startIndex:endIndex">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addHaveObjects>
		<addMemberHint public="1" set="method"><f a="peerID">
	<c path="String"/>
	<x path="Bool"/>
</f></addMemberHint>
		<addNeighbor public="1" set="method"><f a="peerID">
	<c path="String"/>
	<x path="Bool"/>
</f></addNeighbor>
		<addWantObjects public="1" set="method"><f a="startIndex:endIndex">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addWantObjects>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<convertPeerIDToGroupAddress public="1" set="method"><f a="peerID">
	<c path="String"/>
	<c path="String"/>
</f></convertPeerIDToGroupAddress>
		<denyRequestedObject public="1" set="method"><f a="requestID">
	<x path="Int"/>
	<x path="Void"/>
</f></denyRequestedObject>
		<post public="1" set="method"><f a="message">
	<t path="flash.utils.Object"/>
	<c path="String"/>
</f></post>
		<removeHaveObjects public="1" set="method"><f a="startIndex:endIndex">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></removeHaveObjects>
		<removeWantObjects public="1" set="method"><f a="startIndex:endIndex">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></removeWantObjects>
		<sendToAllNeighbors public="1" set="method"><f a="message">
	<t path="flash.utils.Object"/>
	<c path="String"/>
</f></sendToAllNeighbors>
		<sendToNearest public="1" set="method"><f a="message:groupAddress">
	<t path="flash.utils.Object"/>
	<c path="String"/>
	<c path="String"/>
</f></sendToNearest>
		<sendToNeighbor public="1" set="method"><f a="message:sendMode">
	<t path="flash.utils.Object"/>
	<c path="String"/>
	<c path="String"/>
</f></sendToNeighbor>
		<writeRequestedObject public="1" set="method"><f a="requestID:object">
	<x path="Int"/>
	<t path="flash.utils.Object"/>
	<x path="Void"/>
</f></writeRequestedObject>
		<new public="1" set="method"><f a="connection:groupspec">
	<c path="flash.net.NetConnection"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.net.NetGroupInfo" params="" file="C:\HaxeToolkit\haxe\std/flash/net/NetGroupInfo.hx" extern="1">
		<objectReplicationReceiveBytesPerSecond public="1" set="null"><x path="Float"/></objectReplicationReceiveBytesPerSecond>
		<objectReplicationSendBytesPerSecond public="1" set="null"><x path="Float"/></objectReplicationSendBytesPerSecond>
		<postingReceiveControlBytesPerSecond public="1" set="null"><x path="Float"/></postingReceiveControlBytesPerSecond>
		<postingReceiveDataBytesPerSecond public="1" set="null"><x path="Float"/></postingReceiveDataBytesPerSecond>
		<postingSendControlBytesPerSecond public="1" set="null"><x path="Float"/></postingSendControlBytesPerSecond>
		<postingSendDataBytesPerSecond public="1" set="null"><x path="Float"/></postingSendDataBytesPerSecond>
		<routingReceiveBytesPerSecond public="1" set="null"><x path="Float"/></routingReceiveBytesPerSecond>
		<routingSendBytesPerSecond public="1" set="null"><x path="Float"/></routingSendBytesPerSecond>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="postingSendDataBytesPerSecond:postingSendControlBytesPerSecond:postingReceiveDataBytesPerSecond:postingReceiveControlBytesPerSecond:routingSendBytesPerSecond:routingReceiveBytesPerSecond:objectReplicationSendBytesPerSecond:objectReplicationReceiveBytesPerSecond">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</class>
	<class path="flash.net.NetGroupReceiveMode" params="" file="C:\HaxeToolkit\haxe\std/flash/net/NetGroupReceiveMode.hx" extern="1">
		<EXACT public="1" static="1"><c path="String"/></EXACT>
		<NEAREST public="1" static="1"><c path="String"/></NEAREST>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.NetGroupReplicationStrategy" params="" file="C:\HaxeToolkit\haxe\std/flash/net/NetGroupReplicationStrategy.hx" extern="1">
		<LOWEST_FIRST public="1" static="1"><c path="String"/></LOWEST_FIRST>
		<RAREST_FIRST public="1" static="1"><c path="String"/></RAREST_FIRST>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.NetGroupSendMode" params="" file="C:\HaxeToolkit\haxe\std/flash/net/NetGroupSendMode.hx" extern="1">
		<NEXT_DECREASING public="1" static="1"><c path="String"/></NEXT_DECREASING>
		<NEXT_INCREASING public="1" static="1"><c path="String"/></NEXT_INCREASING>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.NetGroupSendResult" params="" file="C:\HaxeToolkit\haxe\std/flash/net/NetGroupSendResult.hx" extern="1">
		<ERROR public="1" static="1"><c path="String"/></ERROR>
		<NO_ROUTE public="1" static="1"><c path="String"/></NO_ROUTE>
		<SENT public="1" static="1"><c path="String"/></SENT>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.NetMonitor" params="" file="C:\HaxeToolkit\haxe\std/flash/net/NetMonitor.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<listStreams public="1" set="method"><f a=""><c path="flash.Vector"><c path="flash.net.NetStream"/></c></f></listStreams>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash11</e></m></meta>
	</class>
	<class path="flash.net.NetStream" params="" file="C:\HaxeToolkit\haxe\std/flash/net/NetStream.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<CONNECT_TO_FMS public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</CONNECT_TO_FMS>
		<DIRECT_CONNECTIONS public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</DIRECT_CONNECTIONS>
		<resetDRMVouchers public="1" set="method" static="1"><f a=""><x path="Void"/></f></resetDRMVouchers>
		<audioCodec public="1" set="null"><x path="UInt"/></audioCodec>
		<audioReliable public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</audioReliable>
		<audioSampleAccess public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</audioSampleAccess>
		<backBufferLength public="1" set="null">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</backBufferLength>
		<backBufferTime public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</backBufferTime>
		<bufferLength public="1" set="null"><x path="Float"/></bufferLength>
		<bufferTime public="1"><x path="Float"/></bufferTime>
		<bufferTimeMax public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</bufferTimeMax>
		<bytesLoaded public="1" set="null"><x path="UInt"/></bytesLoaded>
		<bytesTotal public="1" set="null"><x path="UInt"/></bytesTotal>
		<checkPolicyFile public="1"><x path="Bool"/></checkPolicyFile>
		<client public="1"><d/></client>
		<currentFPS public="1" set="null"><x path="Float"/></currentFPS>
		<dataReliable public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</dataReliable>
		<decodedFrames public="1" set="null"><x path="UInt"/></decodedFrames>
		<farID public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</farID>
		<farNonce public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</farNonce>
		<inBufferSeek public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</inBufferSeek>
		<info public="1" set="null">
			<c path="flash.net.NetStreamInfo"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</info>
		<liveDelay public="1" set="null"><x path="Float"/></liveDelay>
		<maxPauseBufferTime public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</maxPauseBufferTime>
		<multicastAvailabilitySendToAll public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastAvailabilitySendToAll>
		<multicastAvailabilityUpdatePeriod public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastAvailabilityUpdatePeriod>
		<multicastFetchPeriod public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastFetchPeriod>
		<multicastInfo public="1" set="null">
			<c path="flash.net.NetStreamMulticastInfo"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastInfo>
		<multicastPushNeighborLimit public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastPushNeighborLimit>
		<multicastRelayMarginDuration public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastRelayMarginDuration>
		<multicastWindowDuration public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastWindowDuration>
		<nearNonce public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</nearNonce>
		<objectEncoding public="1" set="null"><x path="UInt"/></objectEncoding>
		<peerStreams public="1" set="null">
			<c path="Array"><d/></c>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</peerStreams>
		<soundTransform public="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<time public="1" set="null"><x path="Float"/></time>
		<useHardwareDecoder public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</useHardwareDecoder>
		<useJitterBuffer public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</useJitterBuffer>
		<videoCodec public="1" set="null"><x path="UInt"/></videoCodec>
		<videoReliable public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</videoReliable>
		<videoSampleAccess public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</videoSampleAccess>
		<videoStreamSettings public="1">
			<c path="flash.media.VideoStreamSettings"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</videoStreamSettings>
		<appendBytes public="1" set="method">
			<f a="bytes">
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</appendBytes>
		<appendBytesAction public="1" set="method">
			<f a="netStreamAppendBytesAction">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</appendBytesAction>
		<attach public="1" set="method">
			<f a="connection">
				<c path="flash.net.NetConnection"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</attach>
		<attachAudio public="1" set="method"><f a="microphone">
	<c path="flash.media.Microphone"/>
	<x path="Void"/>
</f></attachAudio>
		<attachCamera public="1" set="method">
			<f a="theCamera:?snapshotMilliseconds" v=":-1">
				<c path="flash.media.Camera"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{snapshotMilliseconds:-1}</e></m></meta>
		</attachCamera>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<dispose public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</dispose>
		<onPeerConnect public="1" set="method">
			<f a="subscriber">
				<c path="flash.net.NetStream"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</onPeerConnect>
		<pause public="1" set="method"><f a=""><x path="Void"/></f></pause>
		<play public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></play>
		<play2 public="1" set="method">
			<f a="param">
				<c path="flash.net.NetStreamPlayOptions"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</play2>
		<publish public="1" set="method"><f a="?name:?type">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></publish>
		<receiveAudio public="1" set="method"><f a="flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></receiveAudio>
		<receiveVideo public="1" set="method"><f a="flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></receiveVideo>
		<receiveVideoFPS public="1" set="method"><f a="FPS">
	<x path="Float"/>
	<x path="Void"/>
</f></receiveVideoFPS>
		<resume public="1" set="method"><f a=""><x path="Void"/></f></resume>
		<seek public="1" set="method"><f a="offset">
	<x path="Float"/>
	<x path="Void"/>
</f></seek>
		<send public="1" set="method"><f a="handlerName:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></send>
		<step public="1" set="method">
			<f a="frames">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</step>
		<togglePause public="1" set="method"><f a=""><x path="Void"/></f></togglePause>
		<new public="1" set="method"><f a="connection:?peerID">
	<c path="flash.net.NetConnection"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.net.NetStreamAppendBytesAction" params="" file="C:\HaxeToolkit\haxe\std/flash/net/NetStreamAppendBytesAction.hx" extern="1">
		<END_SEQUENCE public="1" static="1"><c path="String"/></END_SEQUENCE>
		<RESET_BEGIN public="1" static="1"><c path="String"/></RESET_BEGIN>
		<RESET_SEEK public="1" static="1"><c path="String"/></RESET_SEEK>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.NetStreamInfo" params="" file="C:\HaxeToolkit\haxe\std/flash/net/NetStreamInfo.hx" extern="1">
		<SRTT public="1" set="null"><x path="Float"/></SRTT>
		<audioBufferByteLength public="1" set="null"><x path="Float"/></audioBufferByteLength>
		<audioBufferLength public="1" set="null"><x path="Float"/></audioBufferLength>
		<audioByteCount public="1" set="null"><x path="Float"/></audioByteCount>
		<audioBytesPerSecond public="1" set="null"><x path="Float"/></audioBytesPerSecond>
		<audioLossRate public="1" set="null"><x path="Float"/></audioLossRate>
		<byteCount public="1" set="null"><x path="Float"/></byteCount>
		<currentBytesPerSecond public="1" set="null"><x path="Float"/></currentBytesPerSecond>
		<dataBufferByteLength public="1" set="null"><x path="Float"/></dataBufferByteLength>
		<dataBufferLength public="1" set="null"><x path="Float"/></dataBufferLength>
		<dataByteCount public="1" set="null"><x path="Float"/></dataByteCount>
		<dataBytesPerSecond public="1" set="null"><x path="Float"/></dataBytesPerSecond>
		<droppedFrames public="1" set="null"><x path="Float"/></droppedFrames>
		<isLive public="1" set="null"><x path="Bool"/></isLive>
		<maxBytesPerSecond public="1" set="null"><x path="Float"/></maxBytesPerSecond>
		<metaData public="1" set="null"><d/></metaData>
		<playbackBytesPerSecond public="1" set="null"><x path="Float"/></playbackBytesPerSecond>
		<resourceName public="1" set="null"><c path="String"/></resourceName>
		<uri public="1" set="null"><c path="String"/></uri>
		<videoBufferByteLength public="1" set="null"><x path="Float"/></videoBufferByteLength>
		<videoBufferLength public="1" set="null"><x path="Float"/></videoBufferLength>
		<videoByteCount public="1" set="null"><x path="Float"/></videoByteCount>
		<videoBytesPerSecond public="1" set="null"><x path="Float"/></videoBytesPerSecond>
		<videoLossRate public="1" set="null">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</videoLossRate>
		<xmpData public="1" set="null"><d/></xmpData>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method">
			<f a="curBPS:byteCount:maxBPS:audioBPS:audioByteCount:videoBPS:videoByteCount:dataBPS:dataByteCount:playbackBPS:droppedFrames:audioBufferByteLength:videoBufferByteLength:dataBufferByteLength:audioBufferLength:videoBufferLength:dataBufferLength:srtt:audioLossRate:videoLossRate:?metaData:?xmpData:?uri:?resourceName:?isLive" v="::::::::::::::::::::::::true">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<d/>
				<d/>
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{isLive:true}</e></m></meta>
		</new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.net.NetStreamMulticastInfo" params="" file="C:\HaxeToolkit\haxe\std/flash/net/NetStreamMulticastInfo.hx" extern="1">
		<bytesPushedFromPeers public="1" set="null"><x path="Float"/></bytesPushedFromPeers>
		<bytesPushedToPeers public="1" set="null"><x path="Float"/></bytesPushedToPeers>
		<bytesReceivedFromIPMulticast public="1" set="null"><x path="Float"/></bytesReceivedFromIPMulticast>
		<bytesReceivedFromServer public="1" set="null"><x path="Float"/></bytesReceivedFromServer>
		<bytesRequestedByPeers public="1" set="null"><x path="Float"/></bytesRequestedByPeers>
		<bytesRequestedFromPeers public="1" set="null"><x path="Float"/></bytesRequestedFromPeers>
		<fragmentsPushedFromPeers public="1" set="null"><x path="Float"/></fragmentsPushedFromPeers>
		<fragmentsPushedToPeers public="1" set="null"><x path="Float"/></fragmentsPushedToPeers>
		<fragmentsReceivedFromIPMulticast public="1" set="null"><x path="Float"/></fragmentsReceivedFromIPMulticast>
		<fragmentsReceivedFromServer public="1" set="null"><x path="Float"/></fragmentsReceivedFromServer>
		<fragmentsRequestedByPeers public="1" set="null"><x path="Float"/></fragmentsRequestedByPeers>
		<fragmentsRequestedFromPeers public="1" set="null"><x path="Float"/></fragmentsRequestedFromPeers>
		<receiveControlBytesPerSecond public="1" set="null"><x path="Float"/></receiveControlBytesPerSecond>
		<receiveDataBytesPerSecond public="1" set="null"><x path="Float"/></receiveDataBytesPerSecond>
		<receiveDataBytesPerSecondFromIPMulticast public="1" set="null"><x path="Float"/></receiveDataBytesPerSecondFromIPMulticast>
		<receiveDataBytesPerSecondFromServer public="1" set="null"><x path="Float"/></receiveDataBytesPerSecondFromServer>
		<sendControlBytesPerSecond public="1" set="null"><x path="Float"/></sendControlBytesPerSecond>
		<sendControlBytesPerSecondToServer public="1" set="null"><x path="Float"/></sendControlBytesPerSecondToServer>
		<sendDataBytesPerSecond public="1" set="null"><x path="Float"/></sendDataBytesPerSecond>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="sendDataBytesPerSecond:sendControlBytesPerSecond:receiveDataBytesPerSecond:receiveControlBytesPerSecond:bytesPushedToPeers:fragmentsPushedToPeers:bytesRequestedByPeers:fragmentsRequestedByPeers:bytesPushedFromPeers:fragmentsPushedFromPeers:bytesRequestedFromPeers:fragmentsRequestedFromPeers:sendControlBytesPerSecondToServer:receiveDataBytesPerSecondFromServer:bytesReceivedFromServer:fragmentsReceivedFromServer:receiveDataBytesPerSecondFromIPMulticast:bytesReceivedFromIPMulticast:fragmentsReceivedFromIPMulticast">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</class>
	<class path="flash.net.NetStreamPlayOptions" params="" file="C:\HaxeToolkit\haxe\std/flash/net/NetStreamPlayOptions.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<len public="1"><x path="Float"/></len>
		<offset public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</offset>
		<oldStreamName public="1"><c path="String"/></oldStreamName>
		<start public="1"><x path="Float"/></start>
		<streamName public="1"><c path="String"/></streamName>
		<transition public="1"><c path="String"/></transition>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<enum path="flash.net.NetStreamPlayTransitions" params="" file="C:\HaxeToolkit\haxe\std/flash/net/NetStreamPlayTransitions.hx">
		<SWAP/>
		<SWITCH/>
		<STOP/>
		<APPEND/>
		<RESET/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="flash.net.ObjectEncoding" params="" file="C:\HaxeToolkit\haxe\std/flash/net/ObjectEncoding.hx" extern="1">
		<AMF0 public="1" static="1"><x path="UInt"/></AMF0>
		<AMF3 public="1" static="1"><x path="UInt"/></AMF3>
		<DEFAULT public="1" static="1"><x path="UInt"/></DEFAULT>
		<dynamicPropertyWriter public="1" static="1"><c path="flash.net.IDynamicPropertyWriter"/></dynamicPropertyWriter>
	</class>
	<class path="flash.net.Responder" params="" file="C:\HaxeToolkit\haxe\std/flash/net/Responder.hx" extern="1"><new public="1" set="method"><f a="result:?status">
	<d/>
	<d/>
	<x path="Void"/>
</f></new></class>
	<class path="flash.utils.IDataOutput" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/IDataOutput.hx" extern="1" interface="1">
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<writeBoolean public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<writeByte public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{length:0,offset:0}</e></m></meta>
		</writeBytes>
		<writeDouble public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeFloat public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeInt public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeMultiByte public="1" set="method"><f a="value:charSet">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeMultiByte>
		<writeObject public="1" set="method"><f a="object">
	<d/>
	<x path="Void"/>
</f></writeObject>
		<writeShort public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeUTF public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTF>
		<writeUTFBytes public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTFBytes>
		<writeUnsignedInt public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Void"/>
</f></writeUnsignedInt>
	</class>
	<class path="flash.net.Socket" params="" file="C:\HaxeToolkit\haxe\std/flash/net/Socket.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<implements path="flash.utils.IDataInput"/>
		<implements path="flash.utils.IDataOutput"/>
		<bytesAvailable public="1" set="null"><x path="UInt"/></bytesAvailable>
		<bytesPending public="1" set="null">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</bytesPending>
		<connected public="1" set="null"><x path="Bool"/></connected>
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<timeout public="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</timeout>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<connect public="1" set="method"><f a="host:port">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></connect>
		<flush public="1" set="method"><f a=""><x path="Void"/></f></flush>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{length:0,offset:0}</e></m></meta>
		</readBytes>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><x path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<x path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readShort public="1" set="method"><f a=""><x path="Int"/></f></readShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="length">
	<x path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUnsignedByte public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedShort>
		<writeBoolean public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<writeByte public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{length:0,offset:0}</e></m></meta>
		</writeBytes>
		<writeDouble public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeFloat public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeInt public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeMultiByte public="1" set="method"><f a="value:charSet">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeMultiByte>
		<writeObject public="1" set="method"><f a="object">
	<d/>
	<x path="Void"/>
</f></writeObject>
		<writeShort public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeUTF public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTF>
		<writeUTFBytes public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTFBytes>
		<writeUnsignedInt public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Void"/>
</f></writeUnsignedInt>
		<new public="1" set="method">
			<f a="?host:?port" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{port:0}</e></m></meta>
		</new>
	</class>
	<class path="flash.net.SecureSocket" params="" file="C:\HaxeToolkit\haxe\std/flash/net/SecureSocket.hx" extern="1">
		<extends path="flash.net.Socket"/>
		<isSupported public="1" set="null" static="1"><x path="Bool"/></isSupported>
		<serverCertificate public="1" set="null"><c path="flash.security.X509Certificate"/></serverCertificate>
		<serverCertificateStatus public="1" set="null"><c path="String"/></serverCertificateStatus>
		<addBinaryChainBuildingCertificate public="1" set="method"><f a="certificate:trusted">
	<c path="flash.utils.ByteArray"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addBinaryChainBuildingCertificate>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash11</e></m></meta>
	</class>
	<class path="flash.net.SharedObject" params="" file="C:\HaxeToolkit\haxe\std/flash/net/SharedObject.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<defaultObjectEncoding public="1" static="1"><x path="UInt"/></defaultObjectEncoding>
		<preventBackup public="1" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11_7</e></m></meta>
		</preventBackup>
		<deleteAll public="1" set="method" static="1"><f a="url">
	<c path="String"/>
	<x path="Int"/>
</f></deleteAll>
		<getDiskUsage public="1" set="method" static="1"><f a="url">
	<c path="String"/>
	<x path="Int"/>
</f></getDiskUsage>
		<getLocal public="1" set="method" static="1">
			<f a="name:?localPath:?secure" v="::false">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<c path="flash.net.SharedObject"/>
			</f>
			<meta><m n=":value"><e>{secure:false}</e></m></meta>
		</getLocal>
		<getRemote public="1" set="method" static="1">
			<f a="name:?remotePath:?persistence:?secure" v="::false:false">
				<c path="String"/>
				<c path="String"/>
				<d/>
				<x path="Bool"/>
				<c path="flash.net.SharedObject"/>
			</f>
			<meta><m n=":value"><e>{secure:false,persistence:false}</e></m></meta>
		</getRemote>
		<client public="1"><d/></client>
		<data public="1" set="null"><d/></data>
		<fps public="1" get="null"><x path="Float"/></fps>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<size public="1" set="null"><x path="UInt"/></size>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<connect public="1" set="method"><f a="myConnection:?params">
	<c path="flash.net.NetConnection"/>
	<c path="String"/>
	<x path="Void"/>
</f></connect>
		<flush public="1" set="method">
			<f a="?minDiskSpace" v="0">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{minDiskSpace:0}</e></m></meta>
		</flush>
		<send public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></send>
		<setDirty public="1" set="method"><f a="propertyName">
	<c path="String"/>
	<x path="Void"/>
</f></setDirty>
		<setProperty public="1" set="method"><f a="propertyName:?value">
	<c path="String"/>
	<t path="flash.utils.Object"/>
	<x path="Void"/>
</f></setProperty>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.SharedObjectFlushStatus" params="" file="C:\HaxeToolkit\haxe\std/flash/net/SharedObjectFlushStatus.hx" extern="1">
		<FLUSHED public="1" static="1"><c path="String"/></FLUSHED>
		<PENDING public="1" static="1"><c path="String"/></PENDING>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="flash.net.URLLoaderDataFormat" params="" file="C:\HaxeToolkit\haxe\std/flash/net/URLLoaderDataFormat.hx">
		<BINARY/>
		<TEXT/>
		<VARIABLES/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.net.URLRequest" params="" file="C:\HaxeToolkit\haxe\std/flash/net/URLRequest.hx" extern="1">
		<contentType public="1"><c path="String"/></contentType>
		<data public="1"><d/></data>
		<digest public="1"><c path="String"/></digest>
		<method public="1"><c path="String"/></method>
		<requestHeaders public="1"><c path="Array"><c path="flash.net.URLRequestHeader"/></c></requestHeaders>
		<url public="1"><c path="String"/></url>
		<useRedirectedURL public="1" set="method">
			<f a="sourceRequest:?wholeURL:?pattern:?replace" v=":false::">
				<c path="flash.net.URLRequest"/>
				<x path="Bool"/>
				<d/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{wholeURL:false}</e></m></meta>
		</useRedirectedURL>
		<new public="1" set="method"><f a="?url">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.net.URLRequestHeader" params="" file="C:\HaxeToolkit\haxe\std/flash/net/URLRequestHeader.hx" extern="1">
		<name public="1"><c path="String"/></name>
		<value public="1"><c path="String"/></value>
		<new public="1" set="method"><f a="?name:?value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.net.URLRequestMethod" params="" file="C:\HaxeToolkit\haxe\std/flash/net/URLRequestMethod.hx" extern="1">
		<DELETE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</DELETE>
		<GET public="1" static="1"><c path="String"/></GET>
		<HEAD public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</HEAD>
		<OPTIONS public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</OPTIONS>
		<POST public="1" static="1"><c path="String"/></POST>
		<PUT public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</PUT>
	</class>
	<class path="flash.net.URLVariables" params="" file="C:\HaxeToolkit\haxe\std/flash/net/URLVariables.hx" extern="1">
		<decode public="1" set="method"><f a="source">
	<c path="String"/>
	<x path="Void"/>
</f></decode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="?source">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.net.XMLSocket" params="" file="C:\HaxeToolkit\haxe\std/flash/net/XMLSocket.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<connected public="1" set="null"><x path="Bool"/></connected>
		<timeout public="1">
			<x path="Int"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</timeout>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<connect public="1" set="method"><f a="host:port">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></connect>
		<send public="1" set="method"><f a="object">
	<d/>
	<x path="Void"/>
</f></send>
		<new public="1" set="method">
			<f a="?host:?port" v=":0">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{port:0}</e></m></meta>
		</new>
	</class>
	<class path="flash.net.drm.AddToDeviceGroupSetting" params="" file="C:\HaxeToolkit\haxe\std/flash/net/drm/AddToDeviceGroupSetting.hx" extern="1">
		<ALLOW_SERVER public="1" static="1"><c path="String"/></ALLOW_SERVER>
		<FORCE_REFRESH public="1" static="1"><c path="String"/></FORCE_REFRESH>
		<LOCAL_ONLY public="1" static="1"><c path="String"/></LOCAL_ONLY>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.drm.AuthenticationMethod" params="" file="C:\HaxeToolkit\haxe\std/flash/net/drm/AuthenticationMethod.hx" extern="1">
		<ANONYMOUS public="1" static="1"><c path="String"/></ANONYMOUS>
		<USERNAME_AND_PASSWORD public="1" static="1"><c path="String"/></USERNAME_AND_PASSWORD>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.drm.DRMManagerSession" params="" file="C:\HaxeToolkit\haxe\std/flash/net/drm/DRMManagerSession.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<STATUS_FAILED public="1" static="1"><x path="UInt"/></STATUS_FAILED>
		<STATUS_NOTREADY public="1" static="1"><x path="UInt"/></STATUS_NOTREADY>
		<STATUS_READY public="1" static="1"><x path="UInt"/></STATUS_READY>
		<STATUS_UNKNOWN public="1" static="1"><x path="UInt"/></STATUS_UNKNOWN>
		<m_isInSession public="1"><x path="Bool"/></m_isInSession>
		<metadata public="1"><c path="flash.net.drm.DRMContentData"/></metadata>
		<checkStatus public="1" set="method"><f a=""><x path="UInt"/></f></checkStatus>
		<errorCodeToThrow public="1" set="method"><f a="errorCode">
	<x path="UInt"/>
	<x path="Void"/>
</f></errorCodeToThrow>
		<getLastError public="1" set="method"><f a=""><x path="UInt"/></f></getLastError>
		<getLastServerErrorString public="1" set="method"><f a=""><c path="String"/></f></getLastServerErrorString>
		<getLastSubErrorID public="1" set="method"><f a=""><x path="UInt"/></f></getLastSubErrorID>
		<issueDRMErrorEvent public="1" set="method"><f a="metadata:errorID:subErrorID:serverErrorString">
	<c path="flash.net.drm.DRMContentData"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></issueDRMErrorEvent>
		<issueDRMStatusEvent public="1" set="method"><f a="inMetadata:voucher">
	<c path="flash.net.drm.DRMContentData"/>
	<c path="flash.net.drm.DRMVoucher"/>
	<d/>
</f></issueDRMStatusEvent>
		<onSessionComplete public="1" set="method"><f a=""><x path="Void"/></f></onSessionComplete>
		<onSessionError public="1" set="method"><f a=""><x path="Void"/></f></onSessionError>
		<setTimerUp public="1" set="method"><f a=""><x path="Void"/></f></setTimerUp>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.drm.DRMAddToDeviceGroupContext" params="" file="C:\HaxeToolkit\haxe\std/flash/net/drm/DRMAddToDeviceGroupContext.hx" extern="1">
		<extends path="flash.net.drm.DRMManagerSession"/>
		<addToDeviceGroup public="1" set="method"><f a="deviceGroup:forceRefresh">
	<c path="flash.net.drm.DRMDeviceGroup"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addToDeviceGroup>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.drm.DRMAuthenticationContext" params="" file="C:\HaxeToolkit\haxe\std/flash/net/drm/DRMAuthenticationContext.hx" extern="1">
		<extends path="flash.net.drm.DRMManagerSession"/>
		<authenticationToken public="1" set="null"><c path="flash.utils.ByteArray"/></authenticationToken>
		<authenticate public="1" set="method"><f a="url:domain:username:password">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></authenticate>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.drm.DRMContentData" params="" file="C:\HaxeToolkit\haxe\std/flash/net/drm/DRMContentData.hx" extern="1">
		<authenticationMethod public="1" set="null"><c path="String"/></authenticationMethod>
		<domain public="1" set="null"><c path="String"/></domain>
		<licenseID public="1" set="null"><c path="String"/></licenseID>
		<serverURL public="1" set="null"><c path="String"/></serverURL>
		<getVoucherAccessInfo public="1" set="method"><f a=""><c path="flash.Vector"><c path="flash.net.drm.VoucherAccessInfo"/></c></f></getVoucherAccessInfo>
		<new public="1" set="method"><f a="?rawData">
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.net.drm.DRMDeviceGroup" params="" file="C:\HaxeToolkit\haxe\std/flash/net/drm/DRMDeviceGroup.hx" extern="1">
		<authenticationMethod public="1" set="null"><c path="String"/></authenticationMethod>
		<domain public="1" set="null"><c path="String"/></domain>
		<name public="1"><c path="String"/></name>
		<serverURL public="1" set="null"><c path="String"/></serverURL>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.net.drm.DRMManager" params="" file="C:\HaxeToolkit\haxe\std/flash/net/drm/DRMManager.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" set="null" static="1"><x path="Bool"/></isSupported>
		<networkIdleTimeout public="1" static="1"><x path="Float"/></networkIdleTimeout>
		<getDRMManager public="1" set="method" static="1"><f a=""><c path="flash.net.drm.DRMManager"/></f></getDRMManager>
		<getDRMManagerInternal public="1" set="method" static="1"><f a=""><c path="flash.net.drm.DRMManager"/></f></getDRMManagerInternal>
		<addToDeviceGroup public="1" set="method">
			<f a="deviceGroup:?forceRefresh" v=":false">
				<c path="flash.net.drm.DRMDeviceGroup"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{forceRefresh:false}</e></m></meta>
		</addToDeviceGroup>
		<authenticate public="1" set="method"><f a="serverURL:domain:username:password">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></authenticate>
		<loadPreviewVoucher public="1" set="method"><f a="contentData">
	<c path="flash.net.drm.DRMContentData"/>
	<x path="Void"/>
</f></loadPreviewVoucher>
		<loadVoucher public="1" set="method"><f a="contentData:setting">
	<c path="flash.net.drm.DRMContentData"/>
	<c path="String"/>
	<x path="Void"/>
</f></loadVoucher>
		<removeFromDeviceGroup public="1" set="method"><f a="deviceGroup">
	<c path="flash.net.drm.DRMDeviceGroup"/>
	<x path="Void"/>
</f></removeFromDeviceGroup>
		<resetDRMVouchers public="1" set="method"><f a=""><x path="Void"/></f></resetDRMVouchers>
		<resetDRMVouchersInternal public="1" set="method"><f a="isAutoReset">
	<x path="Bool"/>
	<x path="Void"/>
</f></resetDRMVouchersInternal>
		<returnVoucher public="1" set="method"><f a="inServerURL:immediateCommit:licenseID:policyID">
	<c path="String"/>
	<x path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></returnVoucher>
		<setAuthenticationToken public="1" set="method"><f a="serverUrl:domain:token">
	<c path="String"/>
	<c path="String"/>
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></setAuthenticationToken>
		<storeVoucher public="1" set="method"><f a="voucher">
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></storeVoucher>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.drm.DRMModuleCycleProvider" params="" file="C:\HaxeToolkit\haxe\std/flash/net/drm/DRMModuleCycleProvider.hx" extern="1"><new public="1" set="method"><f a=""><x path="Void"/></f></new></class>
	<class path="flash.net.drm.DRMPlaybackTimeWindow" params="" file="C:\HaxeToolkit\haxe\std/flash/net/drm/DRMPlaybackTimeWindow.hx" extern="1">
		<endDate public="1" set="null"><c path="Date"/></endDate>
		<period public="1" set="null"><x path="UInt"/></period>
		<startDate public="1" set="null"><c path="Date"/></startDate>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.drm.DRMRemoveFromDeviceGroupContext" params="" file="C:\HaxeToolkit\haxe\std/flash/net/drm/DRMRemoveFromDeviceGroupContext.hx" extern="1">
		<extends path="flash.net.drm.DRMManagerSession"/>
		<removeFromDeviceGroup public="1" set="method"><f a="deviceGroup">
	<c path="flash.net.drm.DRMDeviceGroup"/>
	<x path="Void"/>
</f></removeFromDeviceGroup>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.drm.DRMResetContext" params="" file="C:\HaxeToolkit\haxe\std/flash/net/drm/DRMResetContext.hx" extern="1">
		<extends path="flash.net.drm.DRMManagerSession"/>
		<m_isAutoReset public="1"><x path="Bool"/></m_isAutoReset>
		<doReset public="1" set="method"><f a=""><x path="Void"/></f></doReset>
		<new public="1" set="method"><f a="isAutoReset">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.net.drm.DRMReturnVoucherContext" params="" file="C:\HaxeToolkit\haxe\std/flash/net/drm/DRMReturnVoucherContext.hx" extern="1">
		<extends path="flash.net.drm.DRMManagerSession"/>
		<returnVoucher public="1" set="method"><f a="inServerURL:immediateCommit:licenseID:policyID">
	<c path="String"/>
	<x path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></returnVoucher>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.drm.DRMURLDownloadContext" params="" file="C:\HaxeToolkit\haxe\std/flash/net/drm/DRMURLDownloadContext.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<httpGetASync public="1" set="method"><f a="url">
	<c path="String"/>
	<x path="Void"/>
</f></httpGetASync>
		<httpPostAndReceiveASync public="1" set="method"><f a="url:headerName:headerValue:data:serverType">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></httpPostAndReceiveASync>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.drm.DRMVoucher" params="" file="C:\HaxeToolkit\haxe\std/flash/net/drm/DRMVoucher.hx" extern="1">
		<licenseID public="1" set="null"><c path="String"/></licenseID>
		<offlineLeaseEndDate public="1" set="null"><c path="Date"/></offlineLeaseEndDate>
		<offlineLeaseStartDate public="1" set="null"><c path="Date"/></offlineLeaseStartDate>
		<playbackTimeWindow public="1" set="null"><c path="flash.net.drm.DRMPlaybackTimeWindow"/></playbackTimeWindow>
		<policies public="1" set="null"><d/></policies>
		<policyID public="1" set="null"><c path="String"/></policyID>
		<serverURL public="1" set="null"><c path="String"/></serverURL>
		<voucherEndDate public="1" set="null"><c path="Date"/></voucherEndDate>
		<voucherStartDate public="1" set="null"><c path="Date"/></voucherStartDate>
		<toByteArray public="1" set="method"><f a=""><c path="flash.utils.ByteArray"/></f></toByteArray>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.drm.DRMVoucherDownloadContext" params="" file="C:\HaxeToolkit\haxe\std/flash/net/drm/DRMVoucherDownloadContext.hx" extern="1">
		<extends path="flash.net.drm.DRMManagerSession"/>
		<voucher public="1" set="null"><c path="flash.net.drm.DRMVoucher"/></voucher>
		<download public="1" set="method">
			<f a="inMetadata:?previewVoucher" v=":false">
				<c path="flash.net.drm.DRMContentData"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{previewVoucher:false}</e></m></meta>
		</download>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.drm.DRMVoucherStoreContext" params="" file="C:\HaxeToolkit\haxe\std/flash/net/drm/DRMVoucherStoreContext.hx" extern="1">
		<extends path="flash.net.drm.DRMManagerSession"/>
		<voucher public="1" set="null"><c path="flash.net.drm.DRMVoucher"/></voucher>
		<getVoucherFromStore public="1" set="method"><f a="inMetadata">
	<c path="flash.net.drm.DRMContentData"/>
	<x path="Void"/>
</f></getVoucherFromStore>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.drm.LoadVoucherSetting" params="" file="C:\HaxeToolkit\haxe\std/flash/net/drm/LoadVoucherSetting.hx" extern="1">
		<ALLOW_SERVER public="1" static="1"><c path="String"/></ALLOW_SERVER>
		<FORCE_REFRESH public="1" static="1"><c path="String"/></FORCE_REFRESH>
		<LOCAL_ONLY public="1" static="1"><c path="String"/></LOCAL_ONLY>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.drm.VoucherAccessInfo" params="" file="C:\HaxeToolkit\haxe\std/flash/net/drm/VoucherAccessInfo.hx" extern="1">
		<authenticationMethod public="1" set="null"><c path="String"/></authenticationMethod>
		<deviceGroup public="1" set="null"><c path="flash.net.drm.DRMDeviceGroup"/></deviceGroup>
		<displayName public="1" set="null"><c path="String"/></displayName>
		<domain public="1" set="null"><c path="String"/></domain>
		<policyID public="1" set="null"><c path="String"/></policyID>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.printing.PrintJob" params="" file="C:\HaxeToolkit\haxe\std/flash/printing/PrintJob.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isSupported>
		<orientation public="1" set="null"><e path="flash.printing.PrintJobOrientation"/></orientation>
		<pageHeight public="1" set="null"><x path="Int"/></pageHeight>
		<pageWidth public="1" set="null"><x path="Int"/></pageWidth>
		<paperHeight public="1" set="null"><x path="Int"/></paperHeight>
		<paperWidth public="1" set="null"><x path="Int"/></paperWidth>
		<addPage public="1" set="method">
			<f a="sprite:?printArea:?options:?frameNum" v=":::0">
				<c path="flash.display.Sprite"/>
				<c path="flash.geom.Rectangle"/>
				<c path="flash.printing.PrintJobOptions"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{frameNum:0}</e></m></meta>
		</addPage>
		<send public="1" set="method"><f a=""><x path="Void"/></f></send>
		<start public="1" set="method"><f a=""><x path="Bool"/></f></start>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.printing.PrintJobOptions" params="" file="C:\HaxeToolkit\haxe\std/flash/printing/PrintJobOptions.hx" extern="1">
		<printAsBitmap public="1"><x path="Bool"/></printAsBitmap>
		<new public="1" set="method">
			<f a="?printAsBitmap" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{printAsBitmap:false}</e></m></meta>
		</new>
	</class>
	<enum path="flash.printing.PrintJobOrientation" params="" file="C:\HaxeToolkit\haxe\std/flash/printing/PrintJobOrientation.hx">
		<LANDSCAPE/>
		<PORTRAIT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.sampler.Api" params="" file="C:\HaxeToolkit\haxe\std/flash/sampler/Api.hx" extern="1">
		<clearSamples public="1" get="inline" set="null" line="5" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</clearSamples>
		<getGetterInvocationCount public="1" get="inline" set="null" line="9" static="1">
			<f a="obj:qname">
				<d/>
				<c path="flash.utils.QName"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getGetterInvocationCount>
		<getSetterInvocationCount public="1" get="inline" set="null" line="13" static="1">
			<f a="obj:qname">
				<d/>
				<c path="flash.utils.QName"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getSetterInvocationCount>
		<getInvocationCount public="1" get="inline" set="null" line="17" static="1">
			<f a="obj:qname">
				<d/>
				<c path="flash.utils.QName"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getInvocationCount>
		<getMemberNames public="1" get="inline" set="null" line="21" static="1">
			<f a="obj:?instanceNames" v=":false">
				<d/>
				<x path="Bool"/>
				<d><c path="flash.utils.QName"/></d>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e>{instanceNames:false}</e></m>
			</meta>
		</getMemberNames>
		<getSampleCount public="1" get="inline" set="null" line="25" static="1">
			<f a=""><x path="Float"/></f>
			<meta><m n=":has_untyped"/></meta>
		</getSampleCount>
		<getSamples public="1" get="inline" set="null" line="29" static="1">
			<f a=""><c path="Array"><c path="flash.sampler.Sample"/></c></f>
			<meta><m n=":has_untyped"/></meta>
		</getSamples>
		<getSize public="1" get="inline" set="null" line="33" static="1">
			<f a="obj">
				<d/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getSize>
		<isGetterSetter public="1" get="inline" set="null" line="37" static="1">
			<f a="obj:qname">
				<d/>
				<c path="flash.utils.QName"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</isGetterSetter>
		<pauseSampling public="1" get="inline" set="null" line="41" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</pauseSampling>
		<startSampling public="1" get="inline" set="null" line="45" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</startSampling>
		<stopSampling public="1" get="inline" set="null" line="49" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</stopSampling>
		<getLexicalScopes public="1" get="inline" set="null" line="53" static="1">
			<f a="fun">
				<d/>
				<c path="Array"><d/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getLexicalScopes>
		<getMasterString public="1" get="inline" set="null" line="57" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getMasterString>
		<getSavedThis public="1" get="inline" set="null" line="61" static="1">
			<f a="fun">
				<d/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getSavedThis>
		<sampleInternalAllocs public="1" get="inline" set="null" line="65" static="1">
			<f a="b">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</sampleInternalAllocs>
		<setSamplerCallback public="1" get="inline" set="null" line="69" static="1">
			<f a="callb">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setSamplerCallback>
	</class>
	<class path="flash.sampler.ClassFactory" params="" file="C:\HaxeToolkit\haxe\std/flash/sampler/ClassFactory.hx" extern="1">
		<DeleteObjectSampleClass public="1" static="1"><x path="Class"><d/></x></DeleteObjectSampleClass>
		<NewObjectSampleClass public="1" static="1"><x path="Class"><d/></x></NewObjectSampleClass>
		<SampleClass public="1" static="1"><x path="Class"><d/></x></SampleClass>
		<StackFrameClass public="1" static="1"><x path="Class"><d/></x></StackFrameClass>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.sampler.Sample" params="" file="C:\HaxeToolkit\haxe\std/flash/sampler/Sample.hx" extern="1">
		<stack public="1"><c path="Array"><c path="flash.sampler.StackFrame"/></c></stack>
		<time public="1"><x path="Float"/></time>
	</class>
	<class path="flash.sampler.DeleteObjectSample" params="" file="C:\HaxeToolkit\haxe\std/flash/sampler/DeleteObjectSample.hx" extern="1">
		<extends path="flash.sampler.Sample"/>
		<id public="1"><x path="Float"/></id>
		<size public="1"><x path="Float"/></size>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.sampler.NewObjectSample" params="" file="C:\HaxeToolkit\haxe\std/flash/sampler/NewObjectSample.hx" extern="1">
		<extends path="flash.sampler.Sample"/>
		<id public="1"><x path="Float"/></id>
		<object public="1" set="null"><d/></object>
		<size public="1" set="null">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</size>
		<type public="1"><x path="Class"><d/></x></type>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.sampler.StackFrame" params="" file="C:\HaxeToolkit\haxe\std/flash/sampler/StackFrame.hx" extern="1">
		<file public="1"><c path="String"/></file>
		<line public="1"><x path="UInt"/></line>
		<name public="1"><c path="String"/></name>
		<scriptID public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</scriptID>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.security.CertificateStatus" params="" file="C:\HaxeToolkit\haxe\std/flash/security/CertificateStatus.hx" extern="1">
		<EXPIRED public="1" static="1"><c path="String"/></EXPIRED>
		<INVALID public="1" static="1"><c path="String"/></INVALID>
		<INVALID_CHAIN public="1" static="1"><c path="String"/></INVALID_CHAIN>
		<NOT_YET_VALID public="1" static="1"><c path="String"/></NOT_YET_VALID>
		<PRINCIPAL_MISMATCH public="1" static="1"><c path="String"/></PRINCIPAL_MISMATCH>
		<REVOKED public="1" static="1"><c path="String"/></REVOKED>
		<TRUSTED public="1" static="1"><c path="String"/></TRUSTED>
		<UNKNOWN public="1" static="1"><c path="String"/></UNKNOWN>
		<UNTRUSTED_SIGNERS public="1" static="1"><c path="String"/></UNTRUSTED_SIGNERS>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.security.X500DistinguishedName" params="" file="C:\HaxeToolkit\haxe\std/flash/security/X500DistinguishedName.hx" extern="1">
		<commonName public="1" set="null"><c path="String"/></commonName>
		<countryName public="1" set="null"><c path="String"/></countryName>
		<localityName public="1" set="null"><c path="String"/></localityName>
		<organizationName public="1" set="null"><c path="String"/></organizationName>
		<organizationalUnitName public="1" set="null"><c path="String"/></organizationalUnitName>
		<stateOrProvinceName public="1" set="null"><c path="String"/></stateOrProvinceName>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.security.X509Certificate" params="" file="C:\HaxeToolkit\haxe\std/flash/security/X509Certificate.hx" extern="1">
		<encoded public="1" set="null"><c path="flash.utils.ByteArray"/></encoded>
		<issuer public="1" set="null"><c path="flash.security.X500DistinguishedName"/></issuer>
		<issuerUniqueID public="1" set="null"><c path="String"/></issuerUniqueID>
		<serialNumber public="1" set="null"><c path="String"/></serialNumber>
		<signatureAlgorithmOID public="1" set="null"><c path="String"/></signatureAlgorithmOID>
		<signatureAlgorithmParams public="1" set="null"><c path="flash.utils.ByteArray"/></signatureAlgorithmParams>
		<subject public="1" set="null"><c path="flash.security.X500DistinguishedName"/></subject>
		<subjectPublicKey public="1" set="null"><c path="String"/></subjectPublicKey>
		<subjectPublicKeyAlgorithmOID public="1" set="null"><c path="String"/></subjectPublicKeyAlgorithmOID>
		<subjectUniqueID public="1" set="null"><c path="String"/></subjectUniqueID>
		<validNotAfter public="1" set="null"><c path="Date"/></validNotAfter>
		<validNotBefore public="1" set="null"><c path="Date"/></validNotBefore>
		<version public="1" set="null"><x path="UInt"/></version>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.sensors.Accelerometer" params="" file="C:\HaxeToolkit\haxe\std/flash/sensors/Accelerometer.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" set="null" static="1"><x path="Bool"/></isSupported>
		<muted public="1" set="null"><x path="Bool"/></muted>
		<setRequestedUpdateInterval public="1" set="method"><f a="interval">
	<x path="Float"/>
	<x path="Void"/>
</f></setRequestedUpdateInterval>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.sensors.Geolocation" params="" file="C:\HaxeToolkit\haxe\std/flash/sensors/Geolocation.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" set="null" static="1"><x path="Bool"/></isSupported>
		<muted public="1" set="null"><x path="Bool"/></muted>
		<setRequestedUpdateInterval public="1" set="method"><f a="interval">
	<x path="Float"/>
	<x path="Void"/>
</f></setRequestedUpdateInterval>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.system.ApplicationDomain" params="" file="C:\HaxeToolkit\haxe\std/flash/system/ApplicationDomain.hx" extern="1">
		<MIN_DOMAIN_MEMORY_LENGTH public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</MIN_DOMAIN_MEMORY_LENGTH>
		<currentDomain public="1" set="null" static="1"><c path="flash.system.ApplicationDomain"/></currentDomain>
		<domainMemory public="1">
			<c path="flash.utils.ByteArray"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</domainMemory>
		<parentDomain public="1" set="null"><c path="flash.system.ApplicationDomain"/></parentDomain>
		<getDefinition public="1" set="method"><f a="name">
	<c path="String"/>
	<t path="flash.utils.Object"/>
</f></getDefinition>
		<getQualifiedDefinitionNames public="1" set="method">
			<f a=""><c path="flash.Vector"><c path="String"/></c></f>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</getQualifiedDefinitionNames>
		<hasDefinition public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></hasDefinition>
		<new public="1" set="method"><f a="?parentDomain">
	<c path="flash.system.ApplicationDomain"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.system.ApplicationInstaller" params="" file="C:\HaxeToolkit\haxe\std/flash/system/ApplicationInstaller.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<iconDigest public="1" set="method" static="1"><f a="icon">
	<c path="flash.utils.ByteArray"/>
	<c path="String"/>
</f></iconDigest>
		<stringsDigest public="1" set="method" static="1"><f a="strings">
	<c path="flash.xml.XML"/>
	<c path="String"/>
</f></stringsDigest>
		<isInstalled public="1" set="null"><x path="Bool"/></isInstalled>
		<install public="1" set="method"><f a="?mode">
	<c path="String"/>
	<x path="Void"/>
</f></install>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash11_3</e></m>
		</meta>
	</class>
	<enum path="flash.system.ApplicationInstallerMode" params="" file="C:\HaxeToolkit\haxe\std/flash/system/ApplicationInstallerMode.hx">
		<INSTALL_ONLY/>
		<INSTALL_WITH_SHORTCUTS/>
		<SHORTCUTS_ONLY/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.system.AuthorizedFeatures" params="" file="C:\HaxeToolkit\haxe\std/flash/system/AuthorizedFeatures.hx" extern="1">
		<createApplicationInstaller public="1" set="method"><f a="strings:icon">
	<c path="flash.xml.XML"/>
	<c path="flash.utils.ByteArray"/>
	<c path="flash.system.ApplicationInstaller"/>
</f></createApplicationInstaller>
		<enableAVURLLoader public="1" set="method"><f a="loader">
	<c path="flash.media.AVURLLoader"/>
	<x path="Bool"/>
</f></enableAVURLLoader>
		<enableAVURLStream public="1" set="method"><f a="stream">
	<c path="flash.media.AVURLStream"/>
	<x path="Bool"/>
</f></enableAVURLStream>
		<enableDiskCache public="1" set="method">
			<f a="stream">
				<c path="flash.net.URLStream"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</enableDiskCache>
		<enableHLSPlayback public="1">
			<f a="stream">
				<c path="flash.media.AVStream"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":require"><e>flash11_7</e></m></meta>
		</enableHLSPlayback>
		<isFeatureEnabled public="1" set="method">
			<f a="feature:?data">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</isFeatureEnabled>
		<isNegativeToken public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</isNegativeToken>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash11_3</e></m>
		</meta>
	</class>
	<class path="flash.system.AuthorizedFeaturesLoader" params="" file="C:\HaxeToolkit\haxe\std/flash/system/AuthorizedFeaturesLoader.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<authorizedFeatures public="1" set="null"><c path="flash.system.AuthorizedFeatures"/></authorizedFeatures>
		<loadAuthorizedFeatures public="1" set="method"><f a=""><x path="Void"/></f></loadAuthorizedFeatures>
		<loadAuthorizedFeaturesFromData public="1">
			<f a="data">
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_7</e></m></meta>
		</loadAuthorizedFeaturesFromData>
		<makeGlobal public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</makeGlobal>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash11_3</e></m>
		</meta>
	</class>
	<class path="flash.system.Capabilities" params="" file="C:\HaxeToolkit\haxe\std/flash/system/Capabilities.hx" extern="1">
		<_internal public="1" set="null" static="1"><x path="UInt"/></_internal>
		<avHardwareDisable public="1" set="null" static="1"><x path="Bool"/></avHardwareDisable>
		<cpuArchitecture public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</cpuArchitecture>
		<hasAccessibility public="1" set="null" static="1"><x path="Bool"/></hasAccessibility>
		<hasAudio public="1" set="null" static="1"><x path="Bool"/></hasAudio>
		<hasAudioEncoder public="1" set="null" static="1"><x path="Bool"/></hasAudioEncoder>
		<hasEmbeddedVideo public="1" set="null" static="1"><x path="Bool"/></hasEmbeddedVideo>
		<hasIME public="1" set="null" static="1"><x path="Bool"/></hasIME>
		<hasMP3 public="1" set="null" static="1"><x path="Bool"/></hasMP3>
		<hasPrinting public="1" set="null" static="1"><x path="Bool"/></hasPrinting>
		<hasScreenBroadcast public="1" set="null" static="1"><x path="Bool"/></hasScreenBroadcast>
		<hasScreenPlayback public="1" set="null" static="1"><x path="Bool"/></hasScreenPlayback>
		<hasStreamingAudio public="1" set="null" static="1"><x path="Bool"/></hasStreamingAudio>
		<hasStreamingVideo public="1" set="null" static="1"><x path="Bool"/></hasStreamingVideo>
		<hasTLS public="1" set="null" static="1"><x path="Bool"/></hasTLS>
		<hasVideoEncoder public="1" set="null" static="1"><x path="Bool"/></hasVideoEncoder>
		<isDebugger public="1" set="null" static="1"><x path="Bool"/></isDebugger>
		<isEmbeddedInAcrobat public="1" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</isEmbeddedInAcrobat>
		<language public="1" set="null" static="1"><c path="String"/></language>
		<localFileReadDisable public="1" set="null" static="1"><x path="Bool"/></localFileReadDisable>
		<manufacturer public="1" set="null" static="1"><c path="String"/></manufacturer>
		<maxLevelIDC public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</maxLevelIDC>
		<os public="1" set="null" static="1"><c path="String"/></os>
		<pixelAspectRatio public="1" set="null" static="1"><x path="Float"/></pixelAspectRatio>
		<playerType public="1" set="null" static="1"><c path="String"/></playerType>
		<screenColor public="1" set="null" static="1"><c path="String"/></screenColor>
		<screenDPI public="1" set="null" static="1"><x path="Float"/></screenDPI>
		<screenResolutionX public="1" set="null" static="1"><x path="Float"/></screenResolutionX>
		<screenResolutionY public="1" set="null" static="1"><x path="Float"/></screenResolutionY>
		<serverString public="1" set="null" static="1"><c path="String"/></serverString>
		<supports32BitProcesses public="1" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</supports32BitProcesses>
		<supports64BitProcesses public="1" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</supports64BitProcesses>
		<touchscreenType public="1" set="null" static="1">
			<e path="flash.system.TouchscreenType"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</touchscreenType>
		<version public="1" set="null" static="1"><c path="String"/></version>
		<hasMultiChannelAudio public="1" set="method" static="1">
			<f a="type">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</hasMultiChannelAudio>
	</class>
	<class path="flash.system.ConnexionsClient" params="" file="C:\HaxeToolkit\haxe\std/flash/system/ConnexionsClient.hx" extern="1">
		<Connexions public="1" set="method"><f a=""><d/></f></Connexions>
		<_init public="1" set="method"><f a="topLocation:documentReferrer:windowLocation:movie:userAgent:timeout">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></_init>
		<autoAdd public="1" set="method"><f a="port">
	<x path="Int"/>
	<d/>
</f></autoAdd>
		<manualAdd public="1" set="method"><f a="port">
	<x path="Int"/>
	<d/>
</f></manualAdd>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.system.DomainMemoryWithStage3D" params="" file="C:\HaxeToolkit\haxe\std/flash/system/DomainMemoryWithStage3D.hx" extern="1"><new public="1" set="method"><f a=""><x path="Void"/></f></new></class>
	<class path="flash.system.FSCommand" params="" file="C:\HaxeToolkit\haxe\std/flash/system/FSCommand.hx" extern="1"><_fscommand public="1" set="method" static="1"><f a="command:args">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></_fscommand></class>
	<class path="flash.system.IME" params="" file="C:\HaxeToolkit\haxe\std/flash/system/IME.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<conversionMode public="1" static="1"><e path="flash.system.IMEConversionMode"/></conversionMode>
		<enabled public="1" static="1"><x path="Bool"/></enabled>
		<isSupported public="1" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isSupported>
		<compositionAbandoned public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</compositionAbandoned>
		<compositionSelectionChanged public="1" set="method" static="1">
			<f a="start:end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</compositionSelectionChanged>
		<doConversion public="1" set="method" static="1"><f a=""><x path="Void"/></f></doConversion>
		<setCompositionString public="1" set="method" static="1"><f a="composition">
	<c path="String"/>
	<x path="Void"/>
</f></setCompositionString>
	</class>
	<enum path="flash.system.IMEConversionMode" params="" file="C:\HaxeToolkit\haxe\std/flash/system/IMEConversionMode.hx">
		<ALPHANUMERIC_FULL/>
		<ALPHANUMERIC_HALF/>
		<CHINESE/>
		<JAPANESE_HIRAGANA/>
		<JAPANESE_KATAKANA_FULL/>
		<JAPANESE_KATAKANA_HALF/>
		<KOREAN/>
		<UNKNOWN/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.system.ImageDecodingPolicy" params="" file="C:\HaxeToolkit\haxe\std/flash/system/ImageDecodingPolicy.hx">
		<ON_DEMAND/>
		<ON_LOAD/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.system.LoaderContext" params="" file="C:\HaxeToolkit\haxe\std/flash/system/LoaderContext.hx" extern="1">
		<allowCodeImport public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</allowCodeImport>
		<allowLoadBytesCodeExecution public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</allowLoadBytesCodeExecution>
		<applicationDomain public="1"><c path="flash.system.ApplicationDomain"/></applicationDomain>
		<checkPolicyFile public="1"><x path="Bool"/></checkPolicyFile>
		<imageDecodingPolicy public="1">
			<e path="flash.system.ImageDecodingPolicy"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</imageDecodingPolicy>
		<parameters public="1">
			<d/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</parameters>
		<requestedContentParent public="1">
			<c path="flash.display.DisplayObjectContainer"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</requestedContentParent>
		<securityDomain public="1"><c path="flash.system.SecurityDomain"/></securityDomain>
		<new public="1" set="method">
			<f a="?checkPolicyFile:?applicationDomain:?securityDomain" v="false::">
				<x path="Bool"/>
				<c path="flash.system.ApplicationDomain"/>
				<c path="flash.system.SecurityDomain"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{checkPolicyFile:false}</e></m></meta>
		</new>
	</class>
	<class path="flash.system.JPEGLoaderContext" params="" file="C:\HaxeToolkit\haxe\std/flash/system/JPEGLoaderContext.hx" extern="1">
		<extends path="flash.system.LoaderContext"/>
		<deblockingFilter public="1"><x path="Float"/></deblockingFilter>
		<new public="1" set="method">
			<f a="?deblockingFilter:?checkPolicyFile:?applicationDomain:?securityDomain" v="0:false::">
				<x path="Float"/>
				<x path="Bool"/>
				<c path="flash.system.ApplicationDomain"/>
				<c path="flash.system.SecurityDomain"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{checkPolicyFile:false,deblockingFilter:0}</e></m></meta>
		</new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.system.MessageChannel" params="" file="C:\HaxeToolkit\haxe\std/flash/system/MessageChannel.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<messageAvailable public="1" set="null"><x path="Bool"/></messageAvailable>
		<state public="1" set="null"><c path="flash.system.MessageChannelState"/></state>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<receive public="1" set="method">
			<f a="?blockUntilReceived" v="false">
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":value"><e>{blockUntilReceived:false}</e></m></meta>
		</receive>
		<send public="1" set="method">
			<f a="arg:?queueLimit" v=":-1">
				<d/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{queueLimit:-1}</e></m></meta>
		</send>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash11_4</e></m>
		</meta>
	</class>
	<class path="flash.system.MessageChannelState" params="" file="C:\HaxeToolkit\haxe\std/flash/system/MessageChannelState.hx" extern="1">
		<CLOSED public="1" static="1"><c path="String"/></CLOSED>
		<CLOSING public="1" static="1"><c path="String"/></CLOSING>
		<OPEN public="1" static="1"><c path="String"/></OPEN>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.system.Security" params="" file="C:\HaxeToolkit\haxe\std/flash/system/Security.hx" extern="1">
		<APPLICATION public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</APPLICATION>
		<LOCAL_TRUSTED public="1" static="1"><c path="String"/></LOCAL_TRUSTED>
		<LOCAL_WITH_FILE public="1" static="1"><c path="String"/></LOCAL_WITH_FILE>
		<LOCAL_WITH_NETWORK public="1" static="1"><c path="String"/></LOCAL_WITH_NETWORK>
		<REMOTE public="1" static="1"><c path="String"/></REMOTE>
		<disableAVM1Loading public="1" static="1"><x path="Bool"/></disableAVM1Loading>
		<exactSettings public="1" static="1"><x path="Bool"/></exactSettings>
		<pageDomain public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</pageDomain>
		<sandboxType public="1" set="null" static="1"><c path="String"/></sandboxType>
		<allowDomain public="1" set="method" static="1"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></allowDomain>
		<allowInsecureDomain public="1" set="method" static="1"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></allowInsecureDomain>
		<duplicateSandboxBridgeInputArguments public="1" set="method" static="1">
			<f a="toplevel:args">
				<d/>
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</duplicateSandboxBridgeInputArguments>
		<duplicateSandboxBridgeOutputArgument public="1" set="method" static="1">
			<f a="toplevel:arg">
				<d/>
				<d/>
				<d/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</duplicateSandboxBridgeOutputArgument>
		<loadPolicyFile public="1" set="method" static="1"><f a="url">
	<c path="String"/>
	<x path="Void"/>
</f></loadPolicyFile>
		<showSettings public="1" set="method" static="1"><f a="?panel">
	<e path="flash.system.SecurityPanel"/>
	<x path="Void"/>
</f></showSettings>
	</class>
	<class path="flash.system.SecurityDomain" params="" file="C:\HaxeToolkit\haxe\std/flash/system/SecurityDomain.hx" extern="1">
		<currentDomain public="1" set="null" static="1"><c path="flash.system.SecurityDomain"/></currentDomain>
		<domainID public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</domainID>
	</class>
	<enum path="flash.system.SecurityPanel" params="" file="C:\HaxeToolkit\haxe\std/flash/system/SecurityPanel.hx">
		<CAMERA/>
		<DEFAULT/>
		<DISPLAY/>
		<LOCAL_STORAGE/>
		<MICROPHONE/>
		<PRIVACY/>
		<SETTINGS_MANAGER/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.system.System" params="" file="C:\HaxeToolkit\haxe\std/flash/system/System.hx" extern="1">
		<freeMemory public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</freeMemory>
		<ime public="1" set="null" static="1"><c path="flash.system.IME"/></ime>
		<privateMemory public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</privateMemory>
		<processCPUUsage public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</processCPUUsage>
		<totalMemory public="1" set="null" static="1"><x path="UInt"/></totalMemory>
		<totalMemoryNumber public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</totalMemoryNumber>
		<useCodePage public="1" static="1"><x path="Bool"/></useCodePage>
		<vmVersion public="1" set="null" static="1"><c path="String"/></vmVersion>
		<disposeXML public="1" set="method" static="1">
			<f a="node">
				<c path="flash.xml.XML"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</disposeXML>
		<exit public="1" set="method" static="1"><f a="code">
	<x path="UInt"/>
	<x path="Void"/>
</f></exit>
		<gc public="1" set="method" static="1"><f a=""><x path="Void"/></f></gc>
		<pause public="1" set="method" static="1"><f a=""><x path="Void"/></f></pause>
		<pauseForGCIfCollectionImminent public="1" set="method" static="1">
			<f a="?imminence" v="0.75">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{imminence:0.75}</e></m>
				<m n=":require"><e>flash11</e></m>
			</meta>
		</pauseForGCIfCollectionImminent>
		<resume public="1" set="method" static="1"><f a=""><x path="Void"/></f></resume>
		<setClipboard public="1" set="method" static="1"><f a="string">
	<c path="String"/>
	<x path="Void"/>
</f></setClipboard>
	</class>
	<class path="flash.system.SystemUpdater" params="" file="C:\HaxeToolkit\haxe\std/flash/system/SystemUpdater.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<cancel public="1" set="method"><f a=""><x path="Void"/></f></cancel>
		<update public="1" set="method"><f a="type">
	<e path="flash.system.SystemUpdaterType"/>
	<x path="Void"/>
</f></update>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<enum path="flash.system.SystemUpdaterType" params="" file="C:\HaxeToolkit\haxe\std/flash/system/SystemUpdaterType.hx">
		<DRM/>
		<SYSTEM/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.system.TouchscreenType" params="" file="C:\HaxeToolkit\haxe\std/flash/system/TouchscreenType.hx">
		<FINGER/>
		<NONE/>
		<STYLUS/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.system.Worker" params="" file="C:\HaxeToolkit\haxe\std/flash/system/Worker.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<current public="1" set="null" static="1"><c path="flash.system.Worker"/></current>
		<isSupported public="1" set="null" static="1"><x path="Bool"/></isSupported>
		<isPrimordial public="1" set="null"><x path="Bool"/></isPrimordial>
		<state public="1" set="null"><e path="flash.system.WorkerState"/></state>
		<createMessageChannel public="1" set="method"><f a="receiver">
	<c path="flash.system.Worker"/>
	<c path="flash.system.MessageChannel"/>
</f></createMessageChannel>
		<getSharedProperty public="1" set="method"><f a="key">
	<c path="String"/>
	<d/>
</f></getSharedProperty>
		<setSharedProperty public="1" set="method"><f a="key:value">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></setSharedProperty>
		<start public="1" set="method"><f a=""><x path="Void"/></f></start>
		<terminate public="1" set="method"><f a=""><x path="Bool"/></f></terminate>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash11_4</e></m>
		</meta>
	</class>
	<class path="flash.system.WorkerDomain" params="" file="C:\HaxeToolkit\haxe\std/flash/system/WorkerDomain.hx" extern="1">
		<current public="1" set="null" static="1"><c path="flash.system.WorkerDomain"/></current>
		<isSupported public="1" set="null" static="1"><x path="Bool"/></isSupported>
		<createWorker public="1" set="method">
			<f a="swf:?giveAppPrivileges" v=":false">
				<c path="flash.utils.ByteArray"/>
				<x path="Bool"/>
				<c path="flash.system.Worker"/>
			</f>
			<meta><m n=":value"><e>{giveAppPrivileges:false}</e></m></meta>
		</createWorker>
		<listWorkers public="1" set="method"><f a=""><c path="flash.Vector"><c path="flash.system.Worker"/></c></f></listWorkers>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash11_4</e></m>
		</meta>
	</class>
	<enum path="flash.system.WorkerState" params="" file="C:\HaxeToolkit\haxe\std/flash/system/WorkerState.hx">
		<NEW/>
		<RUNNING/>
		<TERMINATED/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.AntiAliasType" params="" file="C:\HaxeToolkit\haxe\std/flash/text/AntiAliasType.hx">
		<ADVANCED/>
		<NORMAL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.text.CSMSettings" params="" file="C:\HaxeToolkit\haxe\std/flash/text/CSMSettings.hx" extern="1">
		<fontSize public="1"><x path="Float"/></fontSize>
		<insideCutoff public="1"><x path="Float"/></insideCutoff>
		<outsideCutoff public="1"><x path="Float"/></outsideCutoff>
		<new public="1" set="method"><f a="fontSize:insideCutoff:outsideCutoff">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.text.Font" params="" file="C:\HaxeToolkit\haxe\std/flash/text/Font.hx" extern="1">
		<enumerateFonts public="1" set="method" static="1">
			<f a="?enumerateDeviceFonts" v="false">
				<x path="Bool"/>
				<c path="Array"><c path="flash.text.Font"/></c>
			</f>
			<meta><m n=":value"><e>{enumerateDeviceFonts:false}</e></m></meta>
		</enumerateFonts>
		<registerFont public="1" set="method" static="1"><f a="font">
	<x path="Class"><d/></x>
	<x path="Void"/>
</f></registerFont>
		<fontName public="1" set="null"><c path="String"/></fontName>
		<fontStyle public="1" set="null"><e path="flash.text.FontStyle"/></fontStyle>
		<fontType public="1" set="null"><e path="flash.text.FontType"/></fontType>
		<hasGlyphs public="1" set="method"><f a="str">
	<c path="String"/>
	<x path="Bool"/>
</f></hasGlyphs>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="flash.text.FontStyle" params="" file="C:\HaxeToolkit\haxe\std/flash/text/FontStyle.hx">
		<BOLD/>
		<BOLD_ITALIC/>
		<ITALIC/>
		<REGULAR/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.FontType" params="" file="C:\HaxeToolkit\haxe\std/flash/text/FontType.hx">
		<DEVICE/>
		<EMBEDDED/>
		<EMBEDDED_CFF/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.GridFitType" params="" file="C:\HaxeToolkit\haxe\std/flash/text/GridFitType.hx">
		<NONE/>
		<PIXEL/>
		<SUBPIXEL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.text.StaticText" params="" file="C:\HaxeToolkit\haxe\std/flash/text/StaticText.hx" extern="1">
		<extends path="flash.display.DisplayObject"/>
		<text public="1" set="null"><c path="String"/></text>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.text.StyleSheet" params="" file="C:\HaxeToolkit\haxe\std/flash/text/StyleSheet.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<styleNames public="1" set="null"><c path="Array"><d/></c></styleNames>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<getStyle public="1" set="method"><f a="styleName">
	<c path="String"/>
	<t path="flash.utils.Object"/>
</f></getStyle>
		<parseCSS public="1" set="method"><f a="CSSText">
	<c path="String"/>
	<x path="Void"/>
</f></parseCSS>
		<setStyle public="1" set="method"><f a="styleName:styleObject">
	<c path="String"/>
	<t path="flash.utils.Object"/>
	<x path="Void"/>
</f></setStyle>
		<transform public="1" set="method"><f a="formatObject">
	<t path="flash.utils.Object"/>
	<c path="flash.text.TextFormat"/>
</f></transform>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<enum path="flash.text.TextColorType" params="" file="C:\HaxeToolkit\haxe\std/flash/text/TextColorType.hx">
		<DARK_COLOR/>
		<LIGHT_COLOR/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.TextDisplayMode" params="" file="C:\HaxeToolkit\haxe\std/flash/text/TextDisplayMode.hx">
		<CRT/>
		<DEFAULT/>
		<LCD/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.text.TextExtent" params="" file="C:\HaxeToolkit\haxe\std/flash/text/TextExtent.hx" extern="1">
		<ascent public="1"><x path="Float"/></ascent>
		<descent public="1"><x path="Float"/></descent>
		<height public="1"><x path="Float"/></height>
		<textFieldHeight public="1"><x path="Float"/></textFieldHeight>
		<textFieldWidth public="1"><x path="Float"/></textFieldWidth>
		<width public="1"><x path="Float"/></width>
		<new public="1" set="method"><f a="width:height:textFieldWidth:textFieldHeight:ascent:descent">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.text.TextField" params="" file="C:\HaxeToolkit\haxe\std/flash/text/TextField.hx" extern="1">
		<extends path="flash.display.InteractiveObject"/>
		<isFontCompatible public="1" set="method" static="1">
			<f a="fontName:fontStyle">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</isFontCompatible>
		<alwaysShowSelection public="1"><x path="Bool"/></alwaysShowSelection>
		<antiAliasType public="1"><e path="flash.text.AntiAliasType"/></antiAliasType>
		<autoSize public="1"><e path="flash.text.TextFieldAutoSize"/></autoSize>
		<background public="1"><x path="Bool"/></background>
		<backgroundColor public="1"><x path="UInt"/></backgroundColor>
		<border public="1"><x path="Bool"/></border>
		<borderColor public="1"><x path="UInt"/></borderColor>
		<bottomScrollV public="1" set="null"><x path="Int"/></bottomScrollV>
		<caretIndex public="1" set="null"><x path="Int"/></caretIndex>
		<condenseWhite public="1"><x path="Bool"/></condenseWhite>
		<defaultTextFormat public="1"><c path="flash.text.TextFormat"/></defaultTextFormat>
		<displayAsPassword public="1"><x path="Bool"/></displayAsPassword>
		<embedFonts public="1"><x path="Bool"/></embedFonts>
		<gridFitType public="1"><e path="flash.text.GridFitType"/></gridFitType>
		<htmlText public="1"><c path="String"/></htmlText>
		<length public="1" set="null"><x path="Int"/></length>
		<maxChars public="1"><x path="Int"/></maxChars>
		<maxScrollH public="1" set="null"><x path="Int"/></maxScrollH>
		<maxScrollV public="1" set="null"><x path="Int"/></maxScrollV>
		<mouseWheelEnabled public="1"><x path="Bool"/></mouseWheelEnabled>
		<multiline public="1"><x path="Bool"/></multiline>
		<numLines public="1" set="null"><x path="Int"/></numLines>
		<restrict public="1"><c path="String"/></restrict>
		<scrollH public="1"><x path="Int"/></scrollH>
		<scrollV public="1"><x path="Int"/></scrollV>
		<selectable public="1"><x path="Bool"/></selectable>
		<selectedText public="1" set="null"><c path="String"/></selectedText>
		<selectionBeginIndex public="1" set="null"><x path="Int"/></selectionBeginIndex>
		<selectionEndIndex public="1" set="null"><x path="Int"/></selectionEndIndex>
		<sharpness public="1"><x path="Float"/></sharpness>
		<styleSheet public="1"><c path="flash.text.StyleSheet"/></styleSheet>
		<text public="1"><c path="String"/></text>
		<textColor public="1"><x path="UInt"/></textColor>
		<textHeight public="1" set="null"><x path="Float"/></textHeight>
		<textInteractionMode public="1" set="null">
			<e path="flash.text.TextInteractionMode"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</textInteractionMode>
		<textWidth public="1" set="null"><x path="Float"/></textWidth>
		<thickness public="1"><x path="Float"/></thickness>
		<type public="1"><e path="flash.text.TextFieldType"/></type>
		<useRichTextClipboard public="1"><x path="Bool"/></useRichTextClipboard>
		<wordWrap public="1"><x path="Bool"/></wordWrap>
		<appendText public="1" set="method"><f a="newText">
	<c path="String"/>
	<x path="Void"/>
</f></appendText>
		<copyRichText public="1" set="method"><f a=""><c path="String"/></f></copyRichText>
		<getCharBoundaries public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<c path="flash.geom.Rectangle"/>
</f></getCharBoundaries>
		<getCharIndexAtPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></getCharIndexAtPoint>
		<getFirstCharInParagraph public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getFirstCharInParagraph>
		<getImageReference public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="flash.display.DisplayObject"/>
</f></getImageReference>
		<getLineIndexAtPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></getLineIndexAtPoint>
		<getLineIndexOfChar public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getLineIndexOfChar>
		<getLineLength public="1" set="method"><f a="lineIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getLineLength>
		<getLineMetrics public="1" set="method"><f a="lineIndex">
	<x path="Int"/>
	<c path="flash.text.TextLineMetrics"/>
</f></getLineMetrics>
		<getLineOffset public="1" set="method"><f a="lineIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getLineOffset>
		<getLineText public="1" set="method"><f a="lineIndex">
	<x path="Int"/>
	<c path="String"/>
</f></getLineText>
		<getParagraphLength public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getParagraphLength>
		<getRawText public="1" set="method"><f a=""><c path="String"/></f></getRawText>
		<getTextFormat public="1" set="method">
			<f a="?beginIndex:?endIndex" v="-1:-1">
				<x path="Int"/>
				<x path="Int"/>
				<c path="flash.text.TextFormat"/>
			</f>
			<meta><m n=":value"><e>{endIndex:-1,beginIndex:-1}</e></m></meta>
		</getTextFormat>
		<getTextRuns public="1" set="method">
			<f a="?beginIndex:?endIndex" v="0:2147483647">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><d/></c>
			</f>
			<meta><m n=":value"><e>{endIndex:2147483647,beginIndex:0}</e></m></meta>
		</getTextRuns>
		<getXMLText public="1" set="method">
			<f a="?beginIndex:?endIndex" v="0:2147483647">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{endIndex:2147483647,beginIndex:0}</e></m></meta>
		</getXMLText>
		<insertXMLText public="1" set="method">
			<f a="beginIndex:endIndex:richText:?pasting" v=":::false">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{pasting:false}</e></m></meta>
		</insertXMLText>
		<pasteRichText public="1" set="method"><f a="richText">
	<c path="String"/>
	<x path="Bool"/>
</f></pasteRichText>
		<replaceSelectedText public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></replaceSelectedText>
		<replaceText public="1" set="method"><f a="beginIndex:endIndex:newText">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></replaceText>
		<setSelection public="1" set="method"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setSelection>
		<setTextFormat public="1" set="method">
			<f a="format:?beginIndex:?endIndex" v=":-1:-1">
				<c path="flash.text.TextFormat"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{endIndex:-1,beginIndex:-1}</e></m></meta>
		</setTextFormat>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="flash.text.TextFieldAutoSize" params="" file="C:\HaxeToolkit\haxe\std/flash/text/TextFieldAutoSize.hx">
		<CENTER/>
		<LEFT/>
		<NONE/>
		<RIGHT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.TextFieldType" params="" file="C:\HaxeToolkit\haxe\std/flash/text/TextFieldType.hx">
		<DYNAMIC/>
		<INPUT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.text.TextFormat" params="" file="C:\HaxeToolkit\haxe\std/flash/text/TextFormat.hx" extern="1">
		<align public="1"><e path="flash.text.TextFormatAlign"/></align>
		<blockIndent public="1"><t path="Null"><x path="Float"/></t></blockIndent>
		<bold public="1"><t path="Null"><x path="Bool"/></t></bold>
		<bullet public="1"><t path="Null"><x path="Bool"/></t></bullet>
		<color public="1"><t path="Null"><x path="UInt"/></t></color>
		<display public="1"><e path="flash.text.TextFormatDisplay"/></display>
		<font public="1"><c path="String"/></font>
		<indent public="1"><t path="Null"><x path="Float"/></t></indent>
		<italic public="1"><t path="Null"><x path="Bool"/></t></italic>
		<kerning public="1"><t path="Null"><x path="Bool"/></t></kerning>
		<leading public="1"><t path="Null"><x path="Float"/></t></leading>
		<leftMargin public="1"><t path="Null"><x path="Float"/></t></leftMargin>
		<letterSpacing public="1"><t path="Null"><x path="Float"/></t></letterSpacing>
		<rightMargin public="1"><t path="Null"><x path="Float"/></t></rightMargin>
		<size public="1"><t path="Null"><x path="Float"/></t></size>
		<tabStops public="1"><c path="Array"><x path="UInt"/></c></tabStops>
		<target public="1"><c path="String"/></target>
		<underline public="1"><t path="Null"><x path="Bool"/></t></underline>
		<url public="1"><c path="String"/></url>
		<new public="1" set="method"><f a="?font:?size:?color:?bold:?italic:?underline:?url:?target:?align:?leftMargin:?rightMargin:?indent:?leading">
	<c path="String"/>
	<x path="Float"/>
	<x path="UInt"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<e path="flash.text.TextFormatAlign"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="flash.text.TextFormatAlign" params="" file="C:\HaxeToolkit\haxe\std/flash/text/TextFormatAlign.hx">
		<CENTER/>
		<END/>
		<JUSTIFY/>
		<LEFT/>
		<RIGHT/>
		<START/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.TextFormatDisplay" params="" file="C:\HaxeToolkit\haxe\std/flash/text/TextFormatDisplay.hx">
		<BLOCK/>
		<INLINE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.TextInteractionMode" params="" file="C:\HaxeToolkit\haxe\std/flash/text/TextInteractionMode.hx">
		<NORMAL/>
		<SELECTION/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.text.TextLineMetrics" params="" file="C:\HaxeToolkit\haxe\std/flash/text/TextLineMetrics.hx" extern="1">
		<ascent public="1"><x path="Float"/></ascent>
		<descent public="1"><x path="Float"/></descent>
		<height public="1"><x path="Float"/></height>
		<leading public="1"><x path="Float"/></leading>
		<width public="1"><x path="Float"/></width>
		<x public="1"><x path="Float"/></x>
		<new public="1" set="method"><f a="x:width:height:ascent:descent:leading">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.text.TextRenderer" params="" file="C:\HaxeToolkit\haxe\std/flash/text/TextRenderer.hx" extern="1">
		<antiAliasType public="1" static="1"><e path="flash.text.AntiAliasType"/></antiAliasType>
		<displayMode public="1" static="1"><e path="flash.text.TextDisplayMode"/></displayMode>
		<maxLevel public="1" static="1"><x path="Int"/></maxLevel>
		<setAdvancedAntiAliasingTable public="1" set="method" static="1"><f a="fontName:fontStyle:colorType:advancedAntiAliasingTable">
	<c path="String"/>
	<e path="flash.text.FontStyle"/>
	<e path="flash.text.TextColorType"/>
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></setAdvancedAntiAliasingTable>
	</class>
	<class path="flash.text.TextRun" params="" file="C:\HaxeToolkit\haxe\std/flash/text/TextRun.hx" extern="1">
		<beginIndex public="1"><x path="Int"/></beginIndex>
		<endIndex public="1"><x path="Int"/></endIndex>
		<textFormat public="1"><c path="flash.text.TextFormat"/></textFormat>
		<new public="1" set="method"><f a="beginIndex:endIndex:textFormat">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.text.TextFormat"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.text.TextSnapshot" params="" file="C:\HaxeToolkit\haxe\std/flash/text/TextSnapshot.hx" extern="1">
		<charCount public="1" set="null"><x path="Int"/></charCount>
		<findText public="1" set="method"><f a="beginIndex:textToFind:caseSensitive">
	<x path="Int"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></findText>
		<getSelected public="1" set="method"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></getSelected>
		<getSelectedText public="1" set="method">
			<f a="?includeLineEndings" v="false">
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{includeLineEndings:false}</e></m></meta>
		</getSelectedText>
		<getText public="1" set="method">
			<f a="beginIndex:endIndex:?includeLineEndings" v="::false">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{includeLineEndings:false}</e></m></meta>
		</getText>
		<getTextRunInfo public="1" set="method"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><d/></c>
</f></getTextRunInfo>
		<hitTestTextNearPos public="1" set="method">
			<f a="x:y:?maxDistance" v="::0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{maxDistance:0}</e></m></meta>
		</hitTestTextNearPos>
		<setSelectColor public="1" set="method">
			<f a="?hexColor" v="16776960">
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{hexColor:16776960}</e></m></meta>
		</setSelectColor>
		<setSelected public="1" set="method"><f a="beginIndex:endIndex:select">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setSelected>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="flash.text.engine.BreakOpportunity" params="" file="C:\HaxeToolkit\haxe\std/flash/text/engine/BreakOpportunity.hx">
		<ALL/>
		<ANY/>
		<AUTO/>
		<NONE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.engine.CFFHinting" params="" file="C:\HaxeToolkit\haxe\std/flash/text/engine/CFFHinting.hx">
		<HORIZONTAL_STEM/>
		<NONE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.text.engine.ContentElement" params="" file="C:\HaxeToolkit\haxe\std/flash/text/engine/ContentElement.hx" extern="1">
		<GRAPHIC_ELEMENT public="1" static="1"><x path="UInt"/></GRAPHIC_ELEMENT>
		<elementFormat public="1"><c path="flash.text.engine.ElementFormat"/></elementFormat>
		<eventMirror public="1"><c path="flash.events.EventDispatcher"/></eventMirror>
		<groupElement public="1" set="null"><c path="flash.text.engine.GroupElement"/></groupElement>
		<rawText public="1" set="null"><c path="String"/></rawText>
		<text public="1" set="null"><c path="String"/></text>
		<textBlock public="1" set="null"><c path="flash.text.engine.TextBlock"/></textBlock>
		<textBlockBeginIndex public="1" set="null"><x path="Int"/></textBlockBeginIndex>
		<textRotation public="1"><e path="flash.text.engine.TextRotation"/></textRotation>
		<userData public="1"><d/></userData>
		<new public="1" set="method"><f a="?elementFormat:?eventMirror:?textRotation">
	<c path="flash.text.engine.ElementFormat"/>
	<c path="flash.events.EventDispatcher"/>
	<e path="flash.text.engine.TextRotation"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="flash.text.engine.DigitCase" params="" file="C:\HaxeToolkit\haxe\std/flash/text/engine/DigitCase.hx">
		<DEFAULT/>
		<LINING/>
		<OLD_STYLE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.engine.DigitWidth" params="" file="C:\HaxeToolkit\haxe\std/flash/text/engine/DigitWidth.hx">
		<DEFAULT/>
		<PROPORTIONAL/>
		<TABULAR/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.text.engine.TextJustifier" params="" file="C:\HaxeToolkit\haxe\std/flash/text/engine/TextJustifier.hx" extern="1">
		<getJustifierForLocale public="1" set="method" static="1"><f a="locale">
	<c path="String"/>
	<c path="flash.text.engine.TextJustifier"/>
</f></getJustifierForLocale>
		<lineJustification public="1"><e path="flash.text.engine.LineJustification"/></lineJustification>
		<locale public="1" set="null"><c path="String"/></locale>
		<clone public="1" set="method"><f a=""><c path="flash.text.engine.TextJustifier"/></f></clone>
		<new public="1" set="method"><f a="locale:lineJustification">
	<c path="String"/>
	<e path="flash.text.engine.LineJustification"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.text.engine.EastAsianJustifier" params="" file="C:\HaxeToolkit\haxe\std/flash/text/engine/EastAsianJustifier.hx" extern="1">
		<extends path="flash.text.engine.TextJustifier"/>
		<composeTrailingIdeographicSpaces public="1"><x path="Bool"/></composeTrailingIdeographicSpaces>
		<justificationStyle public="1"><e path="flash.text.engine.JustificationStyle"/></justificationStyle>
		<new public="1" set="method"><f a="?locale:?lineJustification:?justificationStyle">
	<c path="String"/>
	<e path="flash.text.engine.LineJustification"/>
	<e path="flash.text.engine.JustificationStyle"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.text.engine.ElementFormat" params="" file="C:\HaxeToolkit\haxe\std/flash/text/engine/ElementFormat.hx" extern="1">
		<alignmentBaseline public="1"><e path="flash.text.engine.TextBaseline"/></alignmentBaseline>
		<alpha public="1"><x path="Float"/></alpha>
		<baselineShift public="1"><x path="Float"/></baselineShift>
		<breakOpportunity public="1"><e path="flash.text.engine.BreakOpportunity"/></breakOpportunity>
		<color public="1"><x path="UInt"/></color>
		<digitCase public="1"><e path="flash.text.engine.DigitCase"/></digitCase>
		<digitWidth public="1"><e path="flash.text.engine.DigitWidth"/></digitWidth>
		<dominantBaseline public="1"><e path="flash.text.engine.TextBaseline"/></dominantBaseline>
		<fontDescription public="1"><c path="flash.text.engine.FontDescription"/></fontDescription>
		<fontSize public="1"><x path="Float"/></fontSize>
		<kerning public="1"><e path="flash.text.engine.Kerning"/></kerning>
		<ligatureLevel public="1"><e path="flash.text.engine.LigatureLevel"/></ligatureLevel>
		<locale public="1"><c path="String"/></locale>
		<locked public="1"><x path="Bool"/></locked>
		<textRotation public="1"><e path="flash.text.engine.TextRotation"/></textRotation>
		<trackingLeft public="1"><x path="Float"/></trackingLeft>
		<trackingRight public="1"><x path="Float"/></trackingRight>
		<typographicCase public="1"><e path="flash.text.engine.TypographicCase"/></typographicCase>
		<clone public="1" set="method"><f a=""><c path="flash.text.engine.ElementFormat"/></f></clone>
		<getFontMetrics public="1" set="method"><f a=""><c path="flash.text.engine.FontMetrics"/></f></getFontMetrics>
		<new public="1" set="method">
			<f a="?fontDescription:?fontSize:?color:?alpha:?textRotation:?dominantBaseline:?alignmentBaseline:?baselineShift:?kerning:?trackingRight:?trackingLeft:?locale:?breakOpportunity:?digitCase:?digitWidth:?ligatureLevel:?typographicCase" v=":12:0:1::::0::0:0::::::">
				<c path="flash.text.engine.FontDescription"/>
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
				<e path="flash.text.engine.TextRotation"/>
				<e path="flash.text.engine.TextBaseline"/>
				<e path="flash.text.engine.TextBaseline"/>
				<x path="Float"/>
				<e path="flash.text.engine.Kerning"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="String"/>
				<e path="flash.text.engine.BreakOpportunity"/>
				<e path="flash.text.engine.DigitCase"/>
				<e path="flash.text.engine.DigitWidth"/>
				<e path="flash.text.engine.LigatureLevel"/>
				<e path="flash.text.engine.TypographicCase"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{trackingLeft:0,trackingRight:0,baselineShift:0,alpha:1,color:0,fontSize:12}</e></m></meta>
		</new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.text.engine.FontDescription" params="" file="C:\HaxeToolkit\haxe\std/flash/text/engine/FontDescription.hx" extern="1">
		<isDeviceFontCompatible public="1" set="method" static="1">
			<f a="fontName:fontWeight:fontPosture">
				<c path="String"/>
				<e path="flash.text.engine.FontWeight"/>
				<e path="flash.text.engine.FontPosture"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isDeviceFontCompatible>
		<isFontCompatible public="1" set="method" static="1"><f a="fontName:fontWeight:fontPosture">
	<c path="String"/>
	<e path="flash.text.engine.FontWeight"/>
	<e path="flash.text.engine.FontPosture"/>
	<x path="Bool"/>
</f></isFontCompatible>
		<cffHinting public="1"><e path="flash.text.engine.CFFHinting"/></cffHinting>
		<fontLookup public="1"><e path="flash.text.engine.FontLookup"/></fontLookup>
		<fontName public="1"><c path="String"/></fontName>
		<fontPosture public="1"><e path="flash.text.engine.FontPosture"/></fontPosture>
		<fontWeight public="1"><e path="flash.text.engine.FontWeight"/></fontWeight>
		<locked public="1"><x path="Bool"/></locked>
		<renderingMode public="1"><e path="flash.text.engine.RenderingMode"/></renderingMode>
		<clone public="1" set="method"><f a=""><c path="flash.text.engine.FontDescription"/></f></clone>
		<new public="1" set="method"><f a="?fontName:?fontWeight:?fontPosture:?fontLookup:?renderingMode:?cffHinting">
	<c path="String"/>
	<e path="flash.text.engine.FontWeight"/>
	<e path="flash.text.engine.FontPosture"/>
	<e path="flash.text.engine.FontLookup"/>
	<e path="flash.text.engine.RenderingMode"/>
	<e path="flash.text.engine.CFFHinting"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.text.engine.FontLookup" params="" file="C:\HaxeToolkit\haxe\std/flash/text/engine/FontLookup.hx">
		<DEVICE/>
		<EMBEDDED_CFF/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.text.engine.FontMetrics" params="" file="C:\HaxeToolkit\haxe\std/flash/text/engine/FontMetrics.hx" extern="1">
		<emBox public="1"><c path="flash.geom.Rectangle"/></emBox>
		<lineGap public="1"><x path="Float"/></lineGap>
		<strikethroughOffset public="1"><x path="Float"/></strikethroughOffset>
		<strikethroughThickness public="1"><x path="Float"/></strikethroughThickness>
		<subscriptOffset public="1"><x path="Float"/></subscriptOffset>
		<subscriptScale public="1"><x path="Float"/></subscriptScale>
		<superscriptOffset public="1"><x path="Float"/></superscriptOffset>
		<superscriptScale public="1"><x path="Float"/></superscriptScale>
		<underlineOffset public="1"><x path="Float"/></underlineOffset>
		<underlineThickness public="1"><x path="Float"/></underlineThickness>
		<new public="1" set="method">
			<f a="emBox:strikethroughOffset:strikethroughThickness:underlineOffset:underlineThickness:subscriptOffset:subscriptScale:superscriptOffset:superscriptScale:?lineGap" v=":::::::::0">
				<c path="flash.geom.Rectangle"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{lineGap:0}</e></m></meta>
		</new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.text.engine.FontPosture" params="" file="C:\HaxeToolkit\haxe\std/flash/text/engine/FontPosture.hx">
		<ITALIC/>
		<NORMAL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.engine.FontWeight" params="" file="C:\HaxeToolkit\haxe\std/flash/text/engine/FontWeight.hx">
		<BOLD/>
		<NORMAL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.text.engine.GraphicElement" params="" file="C:\HaxeToolkit\haxe\std/flash/text/engine/GraphicElement.hx" extern="1">
		<extends path="flash.text.engine.ContentElement"/>
		<elementHeight public="1"><x path="Float"/></elementHeight>
		<elementWidth public="1"><x path="Float"/></elementWidth>
		<graphic public="1"><c path="flash.display.DisplayObject"/></graphic>
		<new public="1" set="method">
			<f a="?graphic:?elementWidth:?elementHeight:?elementFormat:?eventMirror:?textRotation" v=":15:15:::">
				<c path="flash.display.DisplayObject"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="flash.text.engine.ElementFormat"/>
				<c path="flash.events.EventDispatcher"/>
				<e path="flash.text.engine.TextRotation"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{elementHeight:15,elementWidth:15}</e></m></meta>
		</new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.text.engine.GroupElement" params="" file="C:\HaxeToolkit\haxe\std/flash/text/engine/GroupElement.hx" extern="1">
		<extends path="flash.text.engine.ContentElement"/>
		<elementCount public="1" set="null"><x path="Int"/></elementCount>
		<getElementAt public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="flash.text.engine.ContentElement"/>
</f></getElementAt>
		<getElementAtCharIndex public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<c path="flash.text.engine.ContentElement"/>
</f></getElementAtCharIndex>
		<getElementIndex public="1" set="method"><f a="element">
	<c path="flash.text.engine.ContentElement"/>
	<x path="Int"/>
</f></getElementIndex>
		<groupElements public="1" set="method"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.text.engine.GroupElement"/>
</f></groupElements>
		<mergeTextElements public="1" set="method"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.text.engine.TextElement"/>
</f></mergeTextElements>
		<replaceElements public="1" set="method"><f a="beginIndex:endIndex:newElements">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.Vector"><c path="flash.text.engine.ContentElement"/></c>
	<c path="flash.Vector"><c path="flash.text.engine.ContentElement"/></c>
</f></replaceElements>
		<setElements public="1" set="method"><f a="value">
	<c path="flash.Vector"><c path="flash.text.engine.ContentElement"/></c>
	<x path="Void"/>
</f></setElements>
		<splitTextElement public="1" set="method"><f a="elementIndex:splitIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.text.engine.TextElement"/>
</f></splitTextElement>
		<ungroupElements public="1" set="method"><f a="groupIndex">
	<x path="Int"/>
	<x path="Void"/>
</f></ungroupElements>
		<new public="1" set="method"><f a="?elements:?elementFormat:?eventMirror:?textRotation">
	<c path="flash.Vector"><c path="flash.text.engine.ContentElement"/></c>
	<c path="flash.text.engine.ElementFormat"/>
	<c path="flash.events.EventDispatcher"/>
	<e path="flash.text.engine.TextRotation"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.text.engine.JustificationStyle" params="" file="C:\HaxeToolkit\haxe\std/flash/text/engine/JustificationStyle.hx">
		<PRIORITIZE_LEAST_ADJUSTMENT/>
		<PUSH_IN_KINSOKU/>
		<PUSH_OUT_ONLY/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.engine.Kerning" params="" file="C:\HaxeToolkit\haxe\std/flash/text/engine/Kerning.hx">
		<AUTO/>
		<OFF/>
		<ON/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.engine.LigatureLevel" params="" file="C:\HaxeToolkit\haxe\std/flash/text/engine/LigatureLevel.hx">
		<COMMON/>
		<EXOTIC/>
		<MINIMUM/>
		<NONE/>
		<UNCOMMON/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.engine.LineJustification" params="" file="C:\HaxeToolkit\haxe\std/flash/text/engine/LineJustification.hx">
		<ALL_BUT_LAST/>
		<ALL_BUT_MANDATORY_BREAK/>
		<ALL_INCLUDING_LAST/>
		<UNJUSTIFIED/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.engine.RenderingMode" params="" file="C:\HaxeToolkit\haxe\std/flash/text/engine/RenderingMode.hx">
		<CFF/>
		<NORMAL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.text.engine.SpaceJustifier" params="" file="C:\HaxeToolkit\haxe\std/flash/text/engine/SpaceJustifier.hx" extern="1">
		<extends path="flash.text.engine.TextJustifier"/>
		<letterSpacing public="1"><x path="Bool"/></letterSpacing>
		<maximumSpacing public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</maximumSpacing>
		<minimumSpacing public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</minimumSpacing>
		<optimumSpacing public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</optimumSpacing>
		<new public="1" set="method">
			<f a="?locale:?lineJustification:?letterSpacing" v="::false">
				<c path="String"/>
				<e path="flash.text.engine.LineJustification"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{letterSpacing:false}</e></m></meta>
		</new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.text.engine.TabAlignment" params="" file="C:\HaxeToolkit\haxe\std/flash/text/engine/TabAlignment.hx">
		<CENTER/>
		<DECIMAL/>
		<END/>
		<START/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.text.engine.TabStop" params="" file="C:\HaxeToolkit\haxe\std/flash/text/engine/TabStop.hx" extern="1">
		<alignment public="1"><e path="flash.text.engine.TabAlignment"/></alignment>
		<decimalAlignmentToken public="1"><c path="String"/></decimalAlignmentToken>
		<position public="1"><x path="Float"/></position>
		<new public="1" set="method">
			<f a="?alignment:?position:?decimalAlignmentToken" v=":0:">
				<e path="flash.text.engine.TabAlignment"/>
				<x path="Float"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{position:0}</e></m></meta>
		</new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.text.engine.TextBaseline" params="" file="C:\HaxeToolkit\haxe\std/flash/text/engine/TextBaseline.hx">
		<ASCENT/>
		<DESCENT/>
		<IDEOGRAPHIC_BOTTOM/>
		<IDEOGRAPHIC_CENTER/>
		<IDEOGRAPHIC_TOP/>
		<ROMAN/>
		<USE_DOMINANT_BASELINE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.text.engine.TextBlock" params="" file="C:\HaxeToolkit\haxe\std/flash/text/engine/TextBlock.hx" extern="1">
		<applyNonLinearFontScaling public="1"><x path="Bool"/></applyNonLinearFontScaling>
		<baselineFontDescription public="1"><c path="flash.text.engine.FontDescription"/></baselineFontDescription>
		<baselineFontSize public="1"><x path="Float"/></baselineFontSize>
		<baselineZero public="1"><e path="flash.text.engine.TextBaseline"/></baselineZero>
		<bidiLevel public="1"><x path="Int"/></bidiLevel>
		<content public="1"><c path="flash.text.engine.ContentElement"/></content>
		<firstInvalidLine public="1" set="null"><c path="flash.text.engine.TextLine"/></firstInvalidLine>
		<firstLine public="1" set="null"><c path="flash.text.engine.TextLine"/></firstLine>
		<lastLine public="1" set="null"><c path="flash.text.engine.TextLine"/></lastLine>
		<lineRotation public="1"><e path="flash.text.engine.TextRotation"/></lineRotation>
		<tabStops public="1"><c path="flash.Vector"><c path="flash.text.engine.TabStop"/></c></tabStops>
		<textJustifier public="1"><c path="flash.text.engine.TextJustifier"/></textJustifier>
		<textLineCreationResult public="1" set="null"><e path="flash.text.engine.TextLineCreationResult"/></textLineCreationResult>
		<userData public="1"><d/></userData>
		<createTextLine public="1" set="method">
			<f a="?previousLine:?width:?lineOffset:?fitSomething" v=":1000000:0:false">
				<c path="flash.text.engine.TextLine"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<c path="flash.text.engine.TextLine"/>
			</f>
			<meta><m n=":value"><e>{fitSomething:false,lineOffset:0,width:1000000}</e></m></meta>
		</createTextLine>
		<dump public="1" set="method"><f a=""><c path="String"/></f></dump>
		<findNextAtomBoundary public="1" set="method"><f a="afterCharIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></findNextAtomBoundary>
		<findNextWordBoundary public="1" set="method"><f a="afterCharIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></findNextWordBoundary>
		<findPreviousAtomBoundary public="1" set="method"><f a="beforeCharIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></findPreviousAtomBoundary>
		<findPreviousWordBoundary public="1" set="method"><f a="beforeCharIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></findPreviousWordBoundary>
		<getTextLineAtCharIndex public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<c path="flash.text.engine.TextLine"/>
</f></getTextLineAtCharIndex>
		<recreateTextLine public="1" set="method">
			<f a="textLine:?previousLine:?width:?lineOffset:?fitSomething" v="::1000000:0:false">
				<c path="flash.text.engine.TextLine"/>
				<c path="flash.text.engine.TextLine"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<c path="flash.text.engine.TextLine"/>
			</f>
			<meta>
				<m n=":value"><e>{fitSomething:false,lineOffset:0,width:1000000}</e></m>
				<m n=":require"><e>flash10_1</e></m>
			</meta>
		</recreateTextLine>
		<releaseLineCreationData public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</releaseLineCreationData>
		<releaseLines public="1" set="method"><f a="firstLine:lastLine">
	<c path="flash.text.engine.TextLine"/>
	<c path="flash.text.engine.TextLine"/>
	<x path="Void"/>
</f></releaseLines>
		<new public="1" set="method">
			<f a="?content:?tabStops:?textJustifier:?lineRotation:?baselineZero:?bidiLevel:?applyNonLinearFontScaling:?baselineFontDescription:?baselineFontSize" v=":::::0:true::12">
				<c path="flash.text.engine.ContentElement"/>
				<c path="flash.Vector"><c path="flash.text.engine.TabStop"/></c>
				<c path="flash.text.engine.TextJustifier"/>
				<e path="flash.text.engine.TextRotation"/>
				<e path="flash.text.engine.TextBaseline"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="flash.text.engine.FontDescription"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{baselineFontSize:12,applyNonLinearFontScaling:true,bidiLevel:0}</e></m></meta>
		</new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.text.engine.TextElement" params="" file="C:\HaxeToolkit\haxe\std/flash/text/engine/TextElement.hx" extern="1">
		<extends path="flash.text.engine.ContentElement"/>
		<replaceText public="1" set="method"><f a="beginIndex:endIndex:newText">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></replaceText>
		<new public="1" set="method"><f a="?text:?elementFormat:?eventMirror:?textRotation">
	<c path="String"/>
	<c path="flash.text.engine.ElementFormat"/>
	<c path="flash.events.EventDispatcher"/>
	<e path="flash.text.engine.TextRotation"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.text.engine.TextLine" params="" file="C:\HaxeToolkit\haxe\std/flash/text/engine/TextLine.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<MAX_LINE_WIDTH public="1" static="1"><x path="Int"/></MAX_LINE_WIDTH>
		<ascent public="1" set="null"><x path="Float"/></ascent>
		<atomCount public="1" set="null"><x path="Int"/></atomCount>
		<descent public="1" set="null"><x path="Float"/></descent>
		<hasGraphicElement public="1" set="null"><x path="Bool"/></hasGraphicElement>
		<hasTabs public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</hasTabs>
		<mirrorRegions public="1" set="null"><c path="flash.Vector"><c path="flash.text.engine.TextLineMirrorRegion"/></c></mirrorRegions>
		<nextLine public="1" set="null"><c path="flash.text.engine.TextLine"/></nextLine>
		<previousLine public="1" set="null"><c path="flash.text.engine.TextLine"/></previousLine>
		<rawTextLength public="1" set="null"><x path="Int"/></rawTextLength>
		<specifiedWidth public="1" set="null"><x path="Float"/></specifiedWidth>
		<textBlock public="1" set="null"><c path="flash.text.engine.TextBlock"/></textBlock>
		<textBlockBeginIndex public="1" set="null"><x path="Int"/></textBlockBeginIndex>
		<textHeight public="1" set="null"><x path="Float"/></textHeight>
		<textWidth public="1" set="null"><x path="Float"/></textWidth>
		<totalAscent public="1" set="null"><x path="Float"/></totalAscent>
		<totalDescent public="1" set="null"><x path="Float"/></totalDescent>
		<totalHeight public="1" set="null"><x path="Float"/></totalHeight>
		<unjustifiedTextWidth public="1" set="null"><x path="Float"/></unjustifiedTextWidth>
		<userData public="1"><d/></userData>
		<validity public="1"><c path="String"/></validity>
		<dump public="1" set="method"><f a=""><c path="String"/></f></dump>
		<flushAtomData public="1" set="method"><f a=""><x path="Void"/></f></flushAtomData>
		<getAtomBidiLevel public="1" set="method"><f a="atomIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getAtomBidiLevel>
		<getAtomBounds public="1" set="method"><f a="atomIndex">
	<x path="Int"/>
	<c path="flash.geom.Rectangle"/>
</f></getAtomBounds>
		<getAtomCenter public="1" set="method"><f a="atomIndex">
	<x path="Int"/>
	<x path="Float"/>
</f></getAtomCenter>
		<getAtomGraphic public="1" set="method"><f a="atomIndex">
	<x path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></getAtomGraphic>
		<getAtomIndexAtCharIndex public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getAtomIndexAtCharIndex>
		<getAtomIndexAtPoint public="1" set="method"><f a="stageX:stageY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></getAtomIndexAtPoint>
		<getAtomTextBlockBeginIndex public="1" set="method"><f a="atomIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getAtomTextBlockBeginIndex>
		<getAtomTextBlockEndIndex public="1" set="method"><f a="atomIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getAtomTextBlockEndIndex>
		<getAtomTextRotation public="1" set="method"><f a="atomIndex">
	<x path="Int"/>
	<c path="String"/>
</f></getAtomTextRotation>
		<getAtomWordBoundaryOnLeft public="1" set="method"><f a="atomIndex">
	<x path="Int"/>
	<x path="Bool"/>
</f></getAtomWordBoundaryOnLeft>
		<getBaselinePosition public="1" set="method"><f a="baseline">
	<c path="String"/>
	<x path="Float"/>
</f></getBaselinePosition>
		<getMirrorRegion public="1" set="method"><f a="mirror">
	<c path="flash.events.EventDispatcher"/>
	<c path="flash.text.engine.TextLineMirrorRegion"/>
</f></getMirrorRegion>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.text.engine.TextLineCreationResult" params="" file="C:\HaxeToolkit\haxe\std/flash/text/engine/TextLineCreationResult.hx">
		<COMPLETE/>
		<EMERGENCY/>
		<INSUFFICIENT_WIDTH/>
		<SUCCESS/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.text.engine.TextLineMirrorRegion" params="" file="C:\HaxeToolkit\haxe\std/flash/text/engine/TextLineMirrorRegion.hx" extern="1">
		<bounds public="1" set="null"><c path="flash.geom.Rectangle"/></bounds>
		<element public="1" set="null"><c path="flash.text.engine.ContentElement"/></element>
		<mirror public="1" set="null"><c path="flash.events.EventDispatcher"/></mirror>
		<nextRegion public="1" set="null"><c path="flash.text.engine.TextLineMirrorRegion"/></nextRegion>
		<previousRegion public="1" set="null"><c path="flash.text.engine.TextLineMirrorRegion"/></previousRegion>
		<textLine public="1" set="null"><c path="flash.text.engine.TextLine"/></textLine>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.text.engine.TextLineValidity" params="" file="C:\HaxeToolkit\haxe\std/flash/text/engine/TextLineValidity.hx">
		<INVALID/>
		<POSSIBLY_INVALID/>
		<STATIC/>
		<VALID/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.engine.TextRotation" params="" file="C:\HaxeToolkit\haxe\std/flash/text/engine/TextRotation.hx">
		<AUTO/>
		<ROTATE_0/>
		<ROTATE_180/>
		<ROTATE_270/>
		<ROTATE_90/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.engine.TypographicCase" params="" file="C:\HaxeToolkit\haxe\std/flash/text/engine/TypographicCase.hx">
		<CAPS/>
		<CAPS_AND_SMALL_CAPS/>
		<DEFAULT/>
		<LOWERCASE/>
		<SMALL_CAPS/>
		<TITLE/>
		<UPPERCASE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.text.ime.CompositionAttributeRange" params="" file="C:\HaxeToolkit\haxe\std/flash/text/ime/CompositionAttributeRange.hx" extern="1">
		<converted public="1"><x path="Bool"/></converted>
		<relativeEnd public="1"><x path="Int"/></relativeEnd>
		<relativeStart public="1"><x path="Int"/></relativeStart>
		<selected public="1"><x path="Bool"/></selected>
		<new public="1" set="method"><f a="relativeStart:relativeEnd:selected:converted">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.text.ime.IIMEClient" params="" file="C:\HaxeToolkit\haxe\std/flash/text/ime/IIMEClient.hx" extern="1" interface="1">
		<compositionEndIndex public="1" set="null"><x path="Int"/></compositionEndIndex>
		<compositionStartIndex public="1" set="null"><x path="Int"/></compositionStartIndex>
		<selectionActiveIndex public="1" set="null"><x path="Int"/></selectionActiveIndex>
		<selectionAnchorIndex public="1" set="null"><x path="Int"/></selectionAnchorIndex>
		<verticalTextLayout public="1" set="null"><x path="Bool"/></verticalTextLayout>
		<confirmComposition public="1" set="method">
			<f a="?text:?preserveSelection" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{preserveSelection:false}</e></m></meta>
		</confirmComposition>
		<getTextBounds public="1" set="method"><f a="startIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.geom.Rectangle"/>
</f></getTextBounds>
		<getTextInRange public="1" set="method"><f a="startIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></getTextInRange>
		<selectRange public="1" set="method"><f a="anchorIndex:activeIndex">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></selectRange>
		<updateComposition public="1" set="method"><f a="text:attributes:compositionStartIndex:compositionEndIndex">
	<c path="String"/>
	<c path="flash.Vector"><c path="flash.text.ime.CompositionAttributeRange"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></updateComposition>
	</class>
	<class path="flash.trace.Trace" params="" file="C:\HaxeToolkit\haxe\std/flash/trace/Trace.hx" extern="1">
		<FILE public="1" static="1"><d/></FILE>
		<LISTENER public="1" static="1"><d/></LISTENER>
		<METHODS public="1" static="1"><x path="Int"/></METHODS>
		<METHODS_AND_LINES public="1" static="1"><x path="Int"/></METHODS_AND_LINES>
		<METHODS_AND_LINES_WITH_ARGS public="1" static="1"><x path="Int"/></METHODS_AND_LINES_WITH_ARGS>
		<METHODS_WITH_ARGS public="1" static="1"><x path="Int"/></METHODS_WITH_ARGS>
		<OFF public="1" static="1"><x path="Int"/></OFF>
		<getLevel public="1" set="method" static="1">
			<f a="?target" v="2">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{target:2}</e></m></meta>
		</getLevel>
		<getListener public="1" set="method" static="1"><f a=""><d/></f></getListener>
		<setLevel public="1" set="method" static="1">
			<f a="l:?target" v=":2">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":value"><e>{target:2}</e></m></meta>
		</setLevel>
		<setListener public="1" set="method" static="1"><f a="f">
	<d/>
	<d/>
</f></setListener>
	</class>
	<class path="flash.ui.ContextMenu" params="" file="C:\HaxeToolkit\haxe\std/flash/ui/ContextMenu.hx" extern="1">
		<extends path="flash.display.NativeMenu"/>
		<isSupported public="1" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isSupported>
		<builtInItems public="1"><c path="flash.ui.ContextMenuBuiltInItems"/></builtInItems>
		<clipboardItems public="1">
			<c path="flash.ui.ContextMenuClipboardItems"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</clipboardItems>
		<clipboardMenu public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</clipboardMenu>
		<customItems public="1"><c path="Array"><d/></c></customItems>
		<link public="1">
			<c path="flash.net.URLRequest"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</link>
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenu"/></f></clone>
		<hideBuiltInItems public="1" set="method"><f a=""><x path="Void"/></f></hideBuiltInItems>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.ui.ContextMenuBuiltInItems" params="" file="C:\HaxeToolkit\haxe\std/flash/ui/ContextMenuBuiltInItems.hx" extern="1">
		<forwardAndBack public="1"><x path="Bool"/></forwardAndBack>
		<loop public="1"><x path="Bool"/></loop>
		<play public="1"><x path="Bool"/></play>
		<print public="1"><x path="Bool"/></print>
		<quality public="1"><x path="Bool"/></quality>
		<rewind public="1"><x path="Bool"/></rewind>
		<save public="1"><x path="Bool"/></save>
		<zoom public="1"><x path="Bool"/></zoom>
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenuBuiltInItems"/></f></clone>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.ui.ContextMenuClipboardItems" params="" file="C:\HaxeToolkit\haxe\std/flash/ui/ContextMenuClipboardItems.hx" extern="1">
		<clear public="1"><x path="Bool"/></clear>
		<copy public="1"><x path="Bool"/></copy>
		<cut public="1"><x path="Bool"/></cut>
		<paste public="1"><x path="Bool"/></paste>
		<selectAll public="1"><x path="Bool"/></selectAll>
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenuClipboardItems"/></f></clone>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.ui.ContextMenuItem" params="" file="C:\HaxeToolkit\haxe\std/flash/ui/ContextMenuItem.hx" extern="1">
		<extends path="flash.display.NativeMenuItem"/>
		<caption public="1"><c path="String"/></caption>
		<separatorBefore public="1"><x path="Bool"/></separatorBefore>
		<visible public="1"><x path="Bool"/></visible>
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenuItem"/></f></clone>
		<new public="1" set="method">
			<f a="caption:?separatorBefore:?enabled:?visible" v=":false:true:true">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{visible:true,enabled:true,separatorBefore:false}</e></m></meta>
		</new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.ui.GameInput" params="" file="C:\HaxeToolkit\haxe\std/flash/ui/GameInput.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" static="1"><x path="Bool"/></isSupported>
		<numDevices public="1" static="1"><x path="Int"/></numDevices>
		<getDeviceAt public="1" static="1"><f a="index">
	<x path="Int"/>
	<c path="flash.ui.GameInputDevice"/>
</f></getDeviceAt>
		<meta><m n=":require"><e>flash11_8</e></m></meta>
	</class>
	<class path="flash.ui.GameInputControl" params="" file="C:\HaxeToolkit\haxe\std/flash/ui/GameInputControl.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<device public="1" set="null"><c path="flash.ui.GameInputDevice"/></device>
		<id public="1" set="null"><c path="String"/></id>
		<maxValue public="1" set="null"><x path="Float"/></maxValue>
		<minValue public="1" set="null"><x path="Float"/></minValue>
		<value public="1" set="null"><x path="Float"/></value>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<enum path="flash.ui.GameInputControlType" params="" file="C:\HaxeToolkit\haxe\std/flash/ui/GameInputControlType.hx">
		<ACCELERATION/>
		<BUTTON/>
		<DIRECTION/>
		<MOVEMENT/>
		<ROTATION/>
		<TRIGGER/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.ui.GameInputDevice" params="" file="C:\HaxeToolkit\haxe\std/flash/ui/GameInputDevice.hx" extern="1">
		<MAX_BUFFER_SIZE public="1" static="1"><x path="Int"/></MAX_BUFFER_SIZE>
		<enabled public="1"><x path="Bool"/></enabled>
		<id public="1" set="null"><c path="String"/></id>
		<name public="1" set="null"><c path="String"/></name>
		<numControls public="1" set="null"><x path="Int"/></numControls>
		<sampleInterval public="1"><x path="Int"/></sampleInterval>
		<getCachedSamples public="1" set="method">
			<f a="data:?append" v=":false">
				<c path="flash.utils.ByteArray"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{append:false}</e></m></meta>
		</getCachedSamples>
		<getControlAt public="1" set="method"><f a="i">
	<x path="Int"/>
	<c path="flash.ui.GameInputControl"/>
</f></getControlAt>
		<startCachingSamples public="1" set="method"><f a="numSamples:controls">
	<x path="Int"/>
	<c path="flash.Vector"><c path="String"/></c>
	<x path="Void"/>
</f></startCachingSamples>
		<stopCachingSamples public="1" set="method"><f a=""><x path="Void"/></f></stopCachingSamples>
		<new public="1"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash11_8</e></m>
		</meta>
	</class>
	<enum path="flash.ui.GameInputFinger" params="" file="C:\HaxeToolkit\haxe\std/flash/ui/GameInputFinger.hx">
		<INDEX/>
		<MIDDLE/>
		<THUMB/>
		<UNKNOWN/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.ui.GameInputHand" params="" file="C:\HaxeToolkit\haxe\std/flash/ui/GameInputHand.hx">
		<LEFT/>
		<RIGHT/>
		<UNKNOWN/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.ui.KeyLocation" params="" file="C:\HaxeToolkit\haxe\std/flash/ui/KeyLocation.hx">
		<D_PAD/>
		<LEFT/>
		<NUM_PAD/>
		<RIGHT/>
		<STANDARD/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>UInt</e></m>
		</meta>
	</enum>
	<class path="flash.ui.Keyboard" params="" file="C:\HaxeToolkit\haxe\std/flash/ui/Keyboard.hx" extern="1">
		<A public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</A>
		<ALTERNATE public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</ALTERNATE>
		<AUDIO public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</AUDIO>
		<B public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</B>
		<BACK public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</BACK>
		<BACKQUOTE public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</BACKQUOTE>
		<BACKSLASH public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</BACKSLASH>
		<BACKSPACE public="1" static="1"><x path="UInt"/></BACKSPACE>
		<BLUE public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</BLUE>
		<C public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</C>
		<CAPS_LOCK public="1" static="1"><x path="UInt"/></CAPS_LOCK>
		<CHANNEL_DOWN public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</CHANNEL_DOWN>
		<CHANNEL_UP public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</CHANNEL_UP>
		<COMMA public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</COMMA>
		<COMMAND public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</COMMAND>
		<CONTROL public="1" static="1"><x path="UInt"/></CONTROL>
		<CharCodeStrings public="1" static="1">
			<c path="Array"><d/></c>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</CharCodeStrings>
		<D public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</D>
		<DELETE public="1" static="1"><x path="UInt"/></DELETE>
		<DOWN public="1" static="1"><x path="UInt"/></DOWN>
		<DVR public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</DVR>
		<E public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</E>
		<END public="1" static="1"><x path="UInt"/></END>
		<ENTER public="1" static="1"><x path="UInt"/></ENTER>
		<EQUAL public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</EQUAL>
		<ESCAPE public="1" static="1"><x path="UInt"/></ESCAPE>
		<EXIT public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</EXIT>
		<F public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</F>
		<F1 public="1" static="1"><x path="UInt"/></F1>
		<F10 public="1" static="1"><x path="UInt"/></F10>
		<F11 public="1" static="1"><x path="UInt"/></F11>
		<F12 public="1" static="1"><x path="UInt"/></F12>
		<F13 public="1" static="1"><x path="UInt"/></F13>
		<F14 public="1" static="1"><x path="UInt"/></F14>
		<F15 public="1" static="1"><x path="UInt"/></F15>
		<F2 public="1" static="1"><x path="UInt"/></F2>
		<F3 public="1" static="1"><x path="UInt"/></F3>
		<F4 public="1" static="1"><x path="UInt"/></F4>
		<F5 public="1" static="1"><x path="UInt"/></F5>
		<F6 public="1" static="1"><x path="UInt"/></F6>
		<F7 public="1" static="1"><x path="UInt"/></F7>
		<F8 public="1" static="1"><x path="UInt"/></F8>
		<F9 public="1" static="1"><x path="UInt"/></F9>
		<FAST_FORWARD public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</FAST_FORWARD>
		<G public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</G>
		<GREEN public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</GREEN>
		<GUIDE public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</GUIDE>
		<H public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</H>
		<HELP public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</HELP>
		<HOME public="1" static="1"><x path="UInt"/></HOME>
		<I public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</I>
		<INFO public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</INFO>
		<INPUT public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</INPUT>
		<INSERT public="1" static="1"><x path="UInt"/></INSERT>
		<J public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</J>
		<K public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</K>
		<KEYNAME_BEGIN public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_BEGIN>
		<KEYNAME_BREAK public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_BREAK>
		<KEYNAME_CLEARDISPLAY public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_CLEARDISPLAY>
		<KEYNAME_CLEARLINE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_CLEARLINE>
		<KEYNAME_DELETE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_DELETE>
		<KEYNAME_DELETECHAR public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_DELETECHAR>
		<KEYNAME_DELETELINE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_DELETELINE>
		<KEYNAME_DOWNARROW public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_DOWNARROW>
		<KEYNAME_END public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_END>
		<KEYNAME_EXECUTE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_EXECUTE>
		<KEYNAME_F1 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F1>
		<KEYNAME_F10 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F10>
		<KEYNAME_F11 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F11>
		<KEYNAME_F12 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F12>
		<KEYNAME_F13 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F13>
		<KEYNAME_F14 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F14>
		<KEYNAME_F15 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F15>
		<KEYNAME_F16 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F16>
		<KEYNAME_F17 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F17>
		<KEYNAME_F18 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F18>
		<KEYNAME_F19 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F19>
		<KEYNAME_F2 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F2>
		<KEYNAME_F20 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F20>
		<KEYNAME_F21 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F21>
		<KEYNAME_F22 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F22>
		<KEYNAME_F23 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F23>
		<KEYNAME_F24 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F24>
		<KEYNAME_F25 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F25>
		<KEYNAME_F26 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F26>
		<KEYNAME_F27 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F27>
		<KEYNAME_F28 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F28>
		<KEYNAME_F29 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F29>
		<KEYNAME_F3 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F3>
		<KEYNAME_F30 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F30>
		<KEYNAME_F31 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F31>
		<KEYNAME_F32 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F32>
		<KEYNAME_F33 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F33>
		<KEYNAME_F34 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F34>
		<KEYNAME_F35 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F35>
		<KEYNAME_F4 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F4>
		<KEYNAME_F5 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F5>
		<KEYNAME_F6 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F6>
		<KEYNAME_F7 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F7>
		<KEYNAME_F8 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F8>
		<KEYNAME_F9 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_F9>
		<KEYNAME_FIND public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_FIND>
		<KEYNAME_HELP public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_HELP>
		<KEYNAME_HOME public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_HOME>
		<KEYNAME_INSERT public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_INSERT>
		<KEYNAME_INSERTCHAR public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_INSERTCHAR>
		<KEYNAME_INSERTLINE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_INSERTLINE>
		<KEYNAME_LEFTARROW public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_LEFTARROW>
		<KEYNAME_MENU public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_MENU>
		<KEYNAME_MODESWITCH public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_MODESWITCH>
		<KEYNAME_NEXT public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_NEXT>
		<KEYNAME_PAGEDOWN public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_PAGEDOWN>
		<KEYNAME_PAGEUP public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_PAGEUP>
		<KEYNAME_PAUSE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_PAUSE>
		<KEYNAME_PREV public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_PREV>
		<KEYNAME_PRINT public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_PRINT>
		<KEYNAME_PRINTSCREEN public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_PRINTSCREEN>
		<KEYNAME_REDO public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_REDO>
		<KEYNAME_RESET public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_RESET>
		<KEYNAME_RIGHTARROW public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_RIGHTARROW>
		<KEYNAME_SCROLLLOCK public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_SCROLLLOCK>
		<KEYNAME_SELECT public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_SELECT>
		<KEYNAME_STOP public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_STOP>
		<KEYNAME_SYSREQ public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_SYSREQ>
		<KEYNAME_SYSTEM public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_SYSTEM>
		<KEYNAME_UNDO public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_UNDO>
		<KEYNAME_UPARROW public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_UPARROW>
		<KEYNAME_USER public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</KEYNAME_USER>
		<L public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</L>
		<LAST public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</LAST>
		<LEFT public="1" static="1"><x path="UInt"/></LEFT>
		<LEFTBRACKET public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</LEFTBRACKET>
		<LIVE public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</LIVE>
		<M public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</M>
		<MASTER_SHELL public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</MASTER_SHELL>
		<MENU public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</MENU>
		<MINUS public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</MINUS>
		<N public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</N>
		<NEXT public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</NEXT>
		<NUMBER_0 public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_0>
		<NUMBER_1 public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_1>
		<NUMBER_2 public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_2>
		<NUMBER_3 public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_3>
		<NUMBER_4 public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_4>
		<NUMBER_5 public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_5>
		<NUMBER_6 public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_6>
		<NUMBER_7 public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_7>
		<NUMBER_8 public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_8>
		<NUMBER_9 public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMBER_9>
		<NUMPAD public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</NUMPAD>
		<NUMPAD_0 public="1" static="1"><x path="UInt"/></NUMPAD_0>
		<NUMPAD_1 public="1" static="1"><x path="UInt"/></NUMPAD_1>
		<NUMPAD_2 public="1" static="1"><x path="UInt"/></NUMPAD_2>
		<NUMPAD_3 public="1" static="1"><x path="UInt"/></NUMPAD_3>
		<NUMPAD_4 public="1" static="1"><x path="UInt"/></NUMPAD_4>
		<NUMPAD_5 public="1" static="1"><x path="UInt"/></NUMPAD_5>
		<NUMPAD_6 public="1" static="1"><x path="UInt"/></NUMPAD_6>
		<NUMPAD_7 public="1" static="1"><x path="UInt"/></NUMPAD_7>
		<NUMPAD_8 public="1" static="1"><x path="UInt"/></NUMPAD_8>
		<NUMPAD_9 public="1" static="1"><x path="UInt"/></NUMPAD_9>
		<NUMPAD_ADD public="1" static="1"><x path="UInt"/></NUMPAD_ADD>
		<NUMPAD_DECIMAL public="1" static="1"><x path="UInt"/></NUMPAD_DECIMAL>
		<NUMPAD_DIVIDE public="1" static="1"><x path="UInt"/></NUMPAD_DIVIDE>
		<NUMPAD_ENTER public="1" static="1"><x path="UInt"/></NUMPAD_ENTER>
		<NUMPAD_MULTIPLY public="1" static="1"><x path="UInt"/></NUMPAD_MULTIPLY>
		<NUMPAD_SUBTRACT public="1" static="1"><x path="UInt"/></NUMPAD_SUBTRACT>
		<O public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</O>
		<P public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</P>
		<PAGE_DOWN public="1" static="1"><x path="UInt"/></PAGE_DOWN>
		<PAGE_UP public="1" static="1"><x path="UInt"/></PAGE_UP>
		<PAUSE public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</PAUSE>
		<PERIOD public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</PERIOD>
		<PLAY public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</PLAY>
		<PREVIOUS public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</PREVIOUS>
		<Q public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</Q>
		<QUOTE public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</QUOTE>
		<R public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</R>
		<RECORD public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</RECORD>
		<RED public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</RED>
		<REWIND public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</REWIND>
		<RIGHT public="1" static="1"><x path="UInt"/></RIGHT>
		<RIGHTBRACKET public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</RIGHTBRACKET>
		<S public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</S>
		<SEARCH public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</SEARCH>
		<SEMICOLON public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</SEMICOLON>
		<SETUP public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</SETUP>
		<SHIFT public="1" static="1"><x path="UInt"/></SHIFT>
		<SKIP_BACKWARD public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</SKIP_BACKWARD>
		<SKIP_FORWARD public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</SKIP_FORWARD>
		<SLASH public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</SLASH>
		<SPACE public="1" static="1"><x path="UInt"/></SPACE>
		<STOP public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</STOP>
		<STRING_BEGIN public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_BEGIN>
		<STRING_BREAK public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_BREAK>
		<STRING_CLEARDISPLAY public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_CLEARDISPLAY>
		<STRING_CLEARLINE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_CLEARLINE>
		<STRING_DELETE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_DELETE>
		<STRING_DELETECHAR public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_DELETECHAR>
		<STRING_DELETELINE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_DELETELINE>
		<STRING_DOWNARROW public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_DOWNARROW>
		<STRING_END public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_END>
		<STRING_EXECUTE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_EXECUTE>
		<STRING_F1 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F1>
		<STRING_F10 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F10>
		<STRING_F11 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F11>
		<STRING_F12 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F12>
		<STRING_F13 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F13>
		<STRING_F14 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F14>
		<STRING_F15 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F15>
		<STRING_F16 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F16>
		<STRING_F17 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F17>
		<STRING_F18 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F18>
		<STRING_F19 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F19>
		<STRING_F2 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F2>
		<STRING_F20 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F20>
		<STRING_F21 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F21>
		<STRING_F22 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F22>
		<STRING_F23 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F23>
		<STRING_F24 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F24>
		<STRING_F25 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F25>
		<STRING_F26 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F26>
		<STRING_F27 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F27>
		<STRING_F28 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F28>
		<STRING_F29 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F29>
		<STRING_F3 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F3>
		<STRING_F30 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F30>
		<STRING_F31 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F31>
		<STRING_F32 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F32>
		<STRING_F33 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F33>
		<STRING_F34 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F34>
		<STRING_F35 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F35>
		<STRING_F4 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F4>
		<STRING_F5 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F5>
		<STRING_F6 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F6>
		<STRING_F7 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F7>
		<STRING_F8 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F8>
		<STRING_F9 public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_F9>
		<STRING_FIND public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_FIND>
		<STRING_HELP public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_HELP>
		<STRING_HOME public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_HOME>
		<STRING_INSERT public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_INSERT>
		<STRING_INSERTCHAR public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_INSERTCHAR>
		<STRING_INSERTLINE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_INSERTLINE>
		<STRING_LEFTARROW public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_LEFTARROW>
		<STRING_MENU public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_MENU>
		<STRING_MODESWITCH public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_MODESWITCH>
		<STRING_NEXT public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_NEXT>
		<STRING_PAGEDOWN public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_PAGEDOWN>
		<STRING_PAGEUP public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_PAGEUP>
		<STRING_PAUSE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_PAUSE>
		<STRING_PREV public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_PREV>
		<STRING_PRINT public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_PRINT>
		<STRING_PRINTSCREEN public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_PRINTSCREEN>
		<STRING_REDO public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_REDO>
		<STRING_RESET public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_RESET>
		<STRING_RIGHTARROW public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_RIGHTARROW>
		<STRING_SCROLLLOCK public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_SCROLLLOCK>
		<STRING_SELECT public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_SELECT>
		<STRING_STOP public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_STOP>
		<STRING_SYSREQ public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_SYSREQ>
		<STRING_SYSTEM public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_SYSTEM>
		<STRING_UNDO public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_UNDO>
		<STRING_UPARROW public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_UPARROW>
		<STRING_USER public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</STRING_USER>
		<SUBTITLE public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</SUBTITLE>
		<T public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</T>
		<TAB public="1" static="1"><x path="UInt"/></TAB>
		<U public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</U>
		<UP public="1" static="1"><x path="UInt"/></UP>
		<V public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</V>
		<VOD public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</VOD>
		<W public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</W>
		<X public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</X>
		<Y public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</Y>
		<YELLOW public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</YELLOW>
		<Z public="1" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</Z>
		<capsLock public="1" set="null" static="1"><x path="Bool"/></capsLock>
		<hasVirtualKeyboard public="1" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</hasVirtualKeyboard>
		<numLock public="1" set="null" static="1"><x path="Bool"/></numLock>
		<physicalKeyboardType public="1" set="null" static="1">
			<e path="flash.ui.KeyboardType"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</physicalKeyboardType>
		<isAccessible public="1" set="method" static="1"><f a=""><x path="Bool"/></f></isAccessible>
	</class>
	<enum path="flash.ui.KeyboardType" params="" file="C:\HaxeToolkit\haxe\std/flash/ui/KeyboardType.hx">
		<ALPHANUMERIC/>
		<KEYPAD/>
		<NONE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.ui.Mouse" params="" file="C:\HaxeToolkit\haxe\std/flash/ui/Mouse.hx" extern="1">
		<cursor public="1" static="1">
			<d/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</cursor>
		<supportsCursor public="1" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</supportsCursor>
		<supportsNativeCursor public="1" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</supportsNativeCursor>
		<hide public="1" set="method" static="1"><f a=""><x path="Void"/></f></hide>
		<registerCursor public="1" set="method" static="1">
			<f a="name:cursor">
				<c path="String"/>
				<c path="flash.ui.MouseCursorData"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</registerCursor>
		<show public="1" set="method" static="1"><f a=""><x path="Void"/></f></show>
		<unregisterCursor public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</unregisterCursor>
	</class>
	<class path="flash.ui.MouseCursor" params="" file="C:\HaxeToolkit\haxe\std/flash/ui/MouseCursor.hx" extern="1">
		<ARROW public="1" static="1"><c path="String"/></ARROW>
		<AUTO public="1" static="1"><c path="String"/></AUTO>
		<BUTTON public="1" static="1"><c path="String"/></BUTTON>
		<HAND public="1" static="1"><c path="String"/></HAND>
		<IBEAM public="1" static="1"><c path="String"/></IBEAM>
	</class>
	<class path="flash.ui.MouseCursorData" params="" file="C:\HaxeToolkit\haxe\std/flash/ui/MouseCursorData.hx" extern="1">
		<data public="1"><c path="flash.Vector"><c path="flash.display.BitmapData"/></c></data>
		<frameRate public="1"><x path="Float"/></frameRate>
		<hotSpot public="1"><c path="flash.geom.Point"/></hotSpot>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash10_2</e></m>
		</meta>
	</class>
	<class path="flash.ui.Multitouch" params="" file="C:\HaxeToolkit\haxe\std/flash/ui/Multitouch.hx" extern="1">
		<inputMode public="1" static="1"><e path="flash.ui.MultitouchInputMode"/></inputMode>
		<mapTouchToMouse public="1" static="1"><x path="Bool"/></mapTouchToMouse>
		<maxTouchPoints public="1" set="null" static="1"><x path="Int"/></maxTouchPoints>
		<supportedGestures public="1" set="null" static="1"><c path="flash.Vector"><c path="String"/></c></supportedGestures>
		<supportsGestureEvents public="1" set="null" static="1"><x path="Bool"/></supportsGestureEvents>
		<supportsTouchEvents public="1" set="null" static="1"><x path="Bool"/></supportsTouchEvents>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<enum path="flash.ui.MultitouchInputMode" params="" file="C:\HaxeToolkit\haxe\std/flash/ui/MultitouchInputMode.hx">
		<GESTURE/>
		<NONE/>
		<TOUCH_POINT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</enum>
	<class path="flash.utils.IDataInput2" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/IDataInput2.hx" extern="1" interface="1"><extends path="flash.utils.IDataInput"/></class>
	<class path="flash.utils.IDataOutput2" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/IDataOutput2.hx" extern="1" interface="1"><extends path="flash.utils.IDataOutput"/></class>
	<class path="flash.utils.ByteArray" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/ByteArray.hx" extern="1">
		<implements path="flash.utils.IDataInput2"/>
		<implements path="flash.utils.IDataOutput2"/>
		<defaultObjectEncoding public="1" static="1"><x path="UInt"/></defaultObjectEncoding>
		<bytesAvailable public="1" set="null"><x path="UInt"/></bytesAvailable>
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<length public="1"><x path="UInt"/></length>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<position public="1"><x path="UInt"/></position>
		<shareable public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</shareable>
		<atomicCompareAndSwapIntAt public="1" set="method">
			<f a="byteIndex:expectedValue:newValue">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</atomicCompareAndSwapIntAt>
		<atomicCompareAndSwapLength public="1" set="method">
			<f a="expectedLength:newLength">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</atomicCompareAndSwapLength>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</clear>
		<compress public="1" set="method"><f a="?algorithm">
	<e path="flash.utils.CompressionAlgorithm"/>
	<x path="Void"/>
</f></compress>
		<deflate public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</deflate>
		<inflate public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</inflate>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{length:0,offset:0}</e></m></meta>
		</readBytes>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><x path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<x path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readShort public="1" set="method"><f a=""><x path="Int"/></f></readShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="length">
	<x path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUnsignedByte public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedShort>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<uncompress public="1" set="method"><f a="?algorithm">
	<e path="flash.utils.CompressionAlgorithm"/>
	<x path="Void"/>
</f></uncompress>
		<writeBoolean public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<writeByte public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{length:0,offset:0}</e></m></meta>
		</writeBytes>
		<writeDouble public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeFloat public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeInt public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeMultiByte public="1" set="method"><f a="value:charSet">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeMultiByte>
		<writeObject public="1" set="method"><f a="object">
	<d/>
	<x path="Void"/>
</f></writeObject>
		<writeShort public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeUTF public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTF>
		<writeUTFBytes public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTFBytes>
		<writeUnsignedInt public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Void"/>
</f></writeUnsignedInt>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="flash.utils.CompressionAlgorithm" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/CompressionAlgorithm.hx">
		<DEFLATE/>
		<LZMA/>
		<ZLIB/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash11</e></m>
		</meta>
	</enum>
	<class path="flash.utils.Dictionary" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/Dictionary.hx" extern="1">
		<new public="1" set="method">
			<f a="?weakKeys" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{weakKeys:false}</e></m></meta>
		</new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<enum path="flash.utils.Endian" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/Endian.hx">
		<BIG_ENDIAN/>
		<LITTLE_ENDIAN/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<typedef path="flash.utils.Function" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/Function.hx"><d/></typedef>
	<class path="flash.utils.IExternalizable" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/IExternalizable.hx" extern="1" interface="1">
		<readExternal public="1" set="method"><f a="input">
	<c path="flash.utils.IDataInput"/>
	<x path="Void"/>
</f></readExternal>
		<writeExternal public="1" set="method"><f a="output">
	<c path="flash.utils.IDataOutput"/>
	<x path="Void"/>
</f></writeExternal>
	</class>
	<class path="flash.utils.JSON" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/JSON.hx" extern="1">
		<parse public="1" set="method" static="1"><f a="text:?reviver">
	<c path="String"/>
	<d/>
	<d/>
</f></parse>
		<stringify public="1" set="method" static="1"><f a="value:?replacer:?space">
	<d/>
	<d/>
	<d/>
	<c path="String"/>
</f></stringify>
		<meta>
			<m n=":native"><e>"JSON"</e></m>
			<m n=":require"><e>flash11</e></m>
		</meta>
	</class>
	<class path="flash.utils.Namespace" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/Namespace.hx" extern="1">
		<prefix public="1" set="null"><d/></prefix>
		<uri public="1" set="null"><c path="String"/></uri>
		<new public="1" set="method"><f a="?prefix:?uri">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<typedef path="flash.utils.Object" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/Object.hx"><d/></typedef>
	<class path="flash.utils.ObjectInput" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/ObjectInput.hx" extern="1">
		<implements path="flash.utils.IDataInput"/>
		<bytesAvailable public="1" set="null"><x path="UInt"/></bytesAvailable>
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{length:0,offset:0}</e></m></meta>
		</readBytes>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><x path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<x path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readShort public="1" set="method"><f a=""><x path="Int"/></f></readShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="length">
	<x path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUnsignedByte public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedShort>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.utils.ObjectOutput" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/ObjectOutput.hx" extern="1">
		<implements path="flash.utils.IDataOutput"/>
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<writeBoolean public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<writeByte public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method">
			<f a="bytes:?offset:?length" v=":0:0">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{length:0,offset:0}</e></m></meta>
		</writeBytes>
		<writeDouble public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeFloat public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeInt public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeMultiByte public="1" set="method"><f a="value:charSet">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeMultiByte>
		<writeObject public="1" set="method"><f a="object">
	<d/>
	<x path="Void"/>
</f></writeObject>
		<writeShort public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeUTF public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTF>
		<writeUTFBytes public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTFBytes>
		<writeUnsignedInt public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Void"/>
</f></writeUnsignedInt>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.utils.Proxy" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/Proxy.hx" extern="1">
		<callProperty public="1" set="method">
			<f a="name:?p1:?p2:?p3:?p4:?p5">
				<d/>
				<d/>
				<d/>
				<d/>
				<d/>
				<d/>
				<d/>
			</f>
			<meta><m n=":ns"><e>"http://www.adobe.com/2006/actionscript/flash/proxy"</e></m></meta>
		</callProperty>
		<deleteProperty public="1" set="method">
			<f a="name">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":ns"><e>"http://www.adobe.com/2006/actionscript/flash/proxy"</e></m></meta>
		</deleteProperty>
		<getDescendants public="1" set="method">
			<f a="name">
				<d/>
				<d/>
			</f>
			<meta><m n=":ns"><e>"http://www.adobe.com/2006/actionscript/flash/proxy"</e></m></meta>
		</getDescendants>
		<getProperty public="1" set="method">
			<f a="name">
				<d/>
				<d/>
			</f>
			<meta><m n=":ns"><e>"http://www.adobe.com/2006/actionscript/flash/proxy"</e></m></meta>
		</getProperty>
		<hasProperty public="1" set="method">
			<f a="name">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":ns"><e>"http://www.adobe.com/2006/actionscript/flash/proxy"</e></m></meta>
		</hasProperty>
		<isAttribute public="1" set="method">
			<f a="name">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":ns"><e>"http://www.adobe.com/2006/actionscript/flash/proxy"</e></m></meta>
		</isAttribute>
		<nextName public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":ns"><e>"http://www.adobe.com/2006/actionscript/flash/proxy"</e></m></meta>
		</nextName>
		<nextNameIndex public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":ns"><e>"http://www.adobe.com/2006/actionscript/flash/proxy"</e></m></meta>
		</nextNameIndex>
		<nextValue public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":ns"><e>"http://www.adobe.com/2006/actionscript/flash/proxy"</e></m></meta>
		</nextValue>
		<setProperty public="1" set="method">
			<f a="name:value">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":ns"><e>"http://www.adobe.com/2006/actionscript/flash/proxy"</e></m></meta>
		</setProperty>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.utils.QName" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/QName.hx" extern="1">
		<localName public="1" set="null"><c path="String"/></localName>
		<uri public="1" set="null"><d/></uri>
		<new public="1" set="method"><f a="?namespace:?name">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.utils.RegExp" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/RegExp.hx" extern="1">
		<dotall public="1" set="null"><x path="Bool"/></dotall>
		<extended public="1" set="null"><x path="Bool"/></extended>
		<global public="1" set="null"><x path="Bool"/></global>
		<ignoreCase public="1" set="null"><x path="Bool"/></ignoreCase>
		<lastIndex public="1"><x path="Int"/></lastIndex>
		<multiline public="1" set="null"><x path="Bool"/></multiline>
		<source public="1" set="null"><c path="String"/></source>
		<exec public="1" set="method">
			<f a="?s">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":ns"><e>"http://adobe.com/AS3/2006/builtin"</e></m></meta>
		</exec>
		<test public="1" set="method">
			<f a="?s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":ns"><e>"http://adobe.com/AS3/2006/builtin"</e></m></meta>
		</test>
		<new public="1" set="method"><f a="?pattern:?options">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.utils.Timer" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/Timer.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<currentCount public="1" set="null"><x path="Int"/></currentCount>
		<delay public="1"><x path="Float"/></delay>
		<repeatCount public="1"><x path="Int"/></repeatCount>
		<running public="1" set="null"><x path="Bool"/></running>
		<reset public="1" set="method"><f a=""><x path="Void"/></f></reset>
		<start public="1" set="method"><f a=""><x path="Void"/></f></start>
		<stop public="1" set="method"><f a=""><x path="Void"/></f></stop>
		<new public="1" set="method">
			<f a="delay:?repeatCount" v=":0">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{repeatCount:0}</e></m></meta>
		</new>
	</class>
	<class path="flash.utils.SetIntervalTimer" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/SetIntervalTimer.hx" extern="1">
		<extends path="flash.utils.Timer"/>
		<clearInterval public="1" set="method" static="1"><f a="id_to_clear">
	<x path="UInt"/>
	<x path="Void"/>
</f></clearInterval>
		<id public="1"><x path="UInt"/></id>
		<new public="1" set="method"><f a="closure:delay:repeats:rest">
	<d/>
	<x path="Float"/>
	<x path="Bool"/>
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.utils.Telemetry" params="" file="C:\HaxeToolkit\haxe\std/flash/utils/Telemetry.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<connected public="1" set="null" static="1"><x path="Bool"/></connected>
		<spanMarker public="1" set="null" static="1"><x path="Float"/></spanMarker>
		<registerCommandHandler public="1" set="method" static="1"><f a="commandName:handler">
	<c path="String"/>
	<d/>
	<x path="Bool"/>
</f></registerCommandHandler>
		<unregisterCommandHandler public="1" set="method" static="1"><f a="commandName">
	<c path="String"/>
	<x path="Bool"/>
</f></unregisterCommandHandler>
		<sendMetric public="1" set="method" static="1"><f a="metric:value">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></sendMetric>
		<sendSpanMetric public="1" set="method" static="1"><f a="metric:startMarker">
	<c path="String"/>
	<x path="Float"/>
	<x path="Void"/>
</f></sendSpanMetric>
		<meta>
			<m n=":require"><e>flash11_4</e></m>
			<m n=":native"><e>"flash.profiler.Telemetry"</e></m>
		</meta>
	</class>
	<class path="flash.xml.XML" params="" file="C:\HaxeToolkit\haxe\std/flash/xml/XML.hx" extern="1">
		<ignoreComments public="1" static="1"><x path="Bool"/></ignoreComments>
		<ignoreProcessingInstructions public="1" static="1"><x path="Bool"/></ignoreProcessingInstructions>
		<ignoreWhitespace public="1" static="1"><x path="Bool"/></ignoreWhitespace>
		<prettyIndent public="1" static="1"><x path="Int"/></prettyIndent>
		<prettyPrinting public="1" static="1"><x path="Bool"/></prettyPrinting>
		<defaultSettings public="1" set="method" static="1"><f a=""><d/></f></defaultSettings>
		<setSettings public="1" set="method" static="1"><f a="?o">
	<d/>
	<x path="Void"/>
</f></setSettings>
		<settings public="1" set="method" static="1"><f a=""><d/></f></settings>
		<addNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></addNamespace>
		<appendChild public="1" set="method"><f a="child">
	<d/>
	<c path="flash.xml.XML"/>
</f></appendChild>
		<attribute public="1" set="method"><f a="arg">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></attribute>
		<attributes public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></attributes>
		<child public="1" set="method"><f a="propertyName">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></child>
		<childIndex public="1" set="method"><f a=""><x path="Int"/></f></childIndex>
		<children public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></children>
		<comments public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></comments>
		<contains public="1" set="method"><f a="value">
	<d/>
	<x path="Bool"/>
</f></contains>
		<copy public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></copy>
		<descendants public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></descendants>
		<elements public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></elements>
		<hasComplexContent public="1" set="method"><f a=""><x path="Bool"/></f></hasComplexContent>
		<hasSimpleContent public="1" set="method"><f a=""><x path="Bool"/></f></hasSimpleContent>
		<inScopeNamespaces public="1" set="method"><f a=""><c path="Array"><d/></c></f></inScopeNamespaces>
		<insertChildAfter public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildAfter>
		<insertChildBefore public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildBefore>
		<length public="1" set="method"><f a=""><x path="Int"/></f></length>
		<localName public="1" set="method"><f a=""><t path="flash.utils.Object"/></f></localName>
		<name public="1" set="method"><f a=""><t path="flash.utils.Object"/></f></name>
		<namespace public="1" set="method"><f a="?prefix">
	<d/>
	<c path="flash.utils.Namespace"/>
</f></namespace>
		<namespaceDeclarations public="1" set="method"><f a=""><c path="Array"><d/></c></f></namespaceDeclarations>
		<nodeKind public="1" set="method"><f a=""><c path="String"/></f></nodeKind>
		<normalize public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></normalize>
		<notification public="1" set="method"><f a=""><t path="flash.utils.Function"/></f></notification>
		<parent public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></parent>
		<prependChild public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></prependChild>
		<processingInstructions public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></processingInstructions>
		<removeNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></removeNamespace>
		<replace public="1" set="method"><f a="propertyName:value">
	<d/>
	<d/>
	<c path="flash.xml.XML"/>
</f></replace>
		<setChildren public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></setChildren>
		<setLocalName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setLocalName>
		<setName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setName>
		<setNamespace public="1" set="method"><f a="ns">
	<d/>
	<x path="Void"/>
</f></setNamespace>
		<setNotification public="1" set="method"><f a="f">
	<t path="flash.utils.Function"/>
	<d/>
</f></setNotification>
		<text public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></text>
		<toJSON public="1" set="method">
			<f a="k">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</toJSON>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<toXMLString public="1" set="method"><f a=""><c path="String"/></f></toXMLString>
		<valueOf public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></valueOf>
		<new public="1" set="method"><f a="?value">
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
		<haxe_dynamic><c path="flash.xml.XMLList"/></haxe_dynamic>
	</class>
	<class path="flash.xml.XMLNode" params="" file="C:\HaxeToolkit\haxe\std/flash/xml/XMLNode.hx" extern="1">
		<attributes public="1"><d/></attributes>
		<childNodes public="1" set="null"><c path="Array"><d/></c></childNodes>
		<firstChild public="1"><c path="flash.xml.XMLNode"/></firstChild>
		<lastChild public="1"><c path="flash.xml.XMLNode"/></lastChild>
		<localName public="1" set="null"><c path="String"/></localName>
		<namespaceURI public="1" set="null"><c path="String"/></namespaceURI>
		<nextSibling public="1"><c path="flash.xml.XMLNode"/></nextSibling>
		<nodeName public="1"><c path="String"/></nodeName>
		<nodeType public="1"><e path="flash.xml.XMLNodeType"/></nodeType>
		<nodeValue public="1"><c path="String"/></nodeValue>
		<parentNode public="1"><c path="flash.xml.XMLNode"/></parentNode>
		<prefix public="1" set="null"><c path="String"/></prefix>
		<previousSibling public="1"><c path="flash.xml.XMLNode"/></previousSibling>
		<appendChild public="1" set="method"><f a="node">
	<c path="flash.xml.XMLNode"/>
	<x path="Void"/>
</f></appendChild>
		<cloneNode public="1" set="method"><f a="deep">
	<x path="Bool"/>
	<c path="flash.xml.XMLNode"/>
</f></cloneNode>
		<getNamespaceForPrefix public="1" set="method"><f a="prefix">
	<c path="String"/>
	<c path="String"/>
</f></getNamespaceForPrefix>
		<getPrefixForNamespace public="1" set="method"><f a="ns">
	<c path="String"/>
	<c path="String"/>
</f></getPrefixForNamespace>
		<hasChildNodes public="1" set="method"><f a=""><x path="Bool"/></f></hasChildNodes>
		<insertBefore public="1" set="method"><f a="node:before">
	<c path="flash.xml.XMLNode"/>
	<c path="flash.xml.XMLNode"/>
	<x path="Void"/>
</f></insertBefore>
		<removeNode public="1" set="method"><f a=""><x path="Void"/></f></removeNode>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="type:value">
	<e path="flash.xml.XMLNodeType"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.xml.XMLDocument" params="" file="C:\HaxeToolkit\haxe\std/flash/xml/XMLDocument.hx" extern="1">
		<extends path="flash.xml.XMLNode"/>
		<docTypeDecl public="1"><d/></docTypeDecl>
		<idMap public="1"><d/></idMap>
		<ignoreWhite public="1"><x path="Bool"/></ignoreWhite>
		<xmlDecl public="1"><d/></xmlDecl>
		<createElement public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="flash.xml.XMLNode"/>
</f></createElement>
		<createTextNode public="1" set="method"><f a="text">
	<c path="String"/>
	<c path="flash.xml.XMLNode"/>
</f></createTextNode>
		<parseXML public="1" set="method"><f a="source">
	<c path="String"/>
	<x path="Void"/>
</f></parseXML>
		<new public="1" set="method"><f a="?source">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.xml.XMLList" params="" file="C:\HaxeToolkit\haxe\std/flash/xml/XMLList.hx" extern="1">
		<addNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></addNamespace>
		<appendChild public="1" set="method"><f a="child">
	<d/>
	<c path="flash.xml.XML"/>
</f></appendChild>
		<attribute public="1" set="method"><f a="arg">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></attribute>
		<attributes public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></attributes>
		<child public="1" set="method"><f a="propertyName">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></child>
		<childIndex public="1" set="method"><f a=""><x path="Int"/></f></childIndex>
		<children public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></children>
		<comments public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></comments>
		<contains public="1" set="method"><f a="value">
	<d/>
	<x path="Bool"/>
</f></contains>
		<copy public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></copy>
		<descendants public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></descendants>
		<elements public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></elements>
		<hasComplexContent public="1" set="method"><f a=""><x path="Bool"/></f></hasComplexContent>
		<hasSimpleContent public="1" set="method"><f a=""><x path="Bool"/></f></hasSimpleContent>
		<inScopeNamespaces public="1" set="method"><f a=""><c path="Array"><d/></c></f></inScopeNamespaces>
		<insertChildAfter public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildAfter>
		<insertChildBefore public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildBefore>
		<length public="1" set="method"><f a=""><x path="Int"/></f></length>
		<localName public="1" set="method"><f a=""><t path="flash.utils.Object"/></f></localName>
		<name public="1" set="method"><f a=""><t path="flash.utils.Object"/></f></name>
		<namespace public="1" set="method"><f a="?prefix">
	<d/>
	<c path="flash.utils.Namespace"/>
</f></namespace>
		<namespaceDeclarations public="1" set="method"><f a=""><c path="Array"><d/></c></f></namespaceDeclarations>
		<nodeKind public="1" set="method"><f a=""><c path="String"/></f></nodeKind>
		<normalize public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></normalize>
		<parent public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></parent>
		<prependChild public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></prependChild>
		<processingInstructions public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></processingInstructions>
		<removeNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></removeNamespace>
		<replace public="1" set="method"><f a="propertyName:value">
	<d/>
	<d/>
	<c path="flash.xml.XML"/>
</f></replace>
		<setChildren public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></setChildren>
		<setLocalName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setLocalName>
		<setName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setName>
		<setNamespace public="1" set="method"><f a="ns">
	<d/>
	<x path="Void"/>
</f></setNamespace>
		<text public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></text>
		<toJSON public="1" set="method">
			<f a="k">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</toJSON>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<toXMLString public="1" set="method"><f a=""><c path="String"/></f></toXMLString>
		<valueOf public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></valueOf>
		<new public="1" set="method"><f a="?value">
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.xml.XMLNodeType" params="" file="C:\HaxeToolkit\haxe\std/flash/xml/XMLNodeType.hx">
		<CDATA_NODE/>
		<COMMENT_NODE/>
		<DOCUMENT_TYPE_NODE/>
		<ELEMENT_NODE/>
		<PROCESSING_INSTRUCTION_NODE/>
		<TEXT_NODE/>
		<XML_DECLARATION/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>UInt</e></m>
		</meta>
	</enum>
	<class path="flash.xml.XMLParser" params="" file="C:\HaxeToolkit\haxe\std/flash/xml/XMLParser.hx" extern="1">
		<getNext public="1" set="method"><f a="tag">
	<c path="flash.xml.XMLTag"/>
	<x path="Int"/>
</f></getNext>
		<startParse public="1" set="method"><f a="source:ignoreWhite">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></startParse>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.xml.XMLTag" params="" file="C:\HaxeToolkit\haxe\std/flash/xml/XMLTag.hx" extern="1">
		<attrs public="1"><d/></attrs>
		<empty public="1"><x path="Bool"/></empty>
		<type public="1"><e path="flash.xml.XMLNodeType"/></type>
		<value public="1"><c path="String"/></value>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="haxe.StackItem" params="" file="C:\HaxeToolkit\haxe\std/haxe/CallStack.hx" module="haxe.CallStack">
		<CFunction/>
		<Module a="m"><c path="String"/></Module>
		<FilePos a="s:file:line">
			<t path="Null"><e path="haxe.StackItem"/></t>
			<c path="String"/>
			<x path="Int"/>
		</FilePos>
		<Method a="classname:method">
			<c path="String"/>
			<c path="String"/>
		</Method>
		<LocalFunction a="?v"><x path="Int"/></LocalFunction>
		<haxe_doc>Elements return by `CallStack` methods.</haxe_doc>
	</enum>
	<class path="haxe.CallStack" params="" file="C:\HaxeToolkit\haxe\std/haxe/CallStack.hx">
		<callStack public="1" set="method" line="77" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>Return the call stack elements, or an empty array if not available.</haxe_doc>
		</callStack>
		<exceptionStack public="1" set="method" line="140" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Return the exception stack : this is the stack elements between
		the place the last exception was thrown and the place it was
		caught, or an empty array if not available.</haxe_doc>
		</exceptionStack>
		<toString public="1" set="method" line="206" static="1">
			<f a="stack">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a representation of the stack as a printable string.</haxe_doc>
		</toString>
		<itemToString set="method" line="215" static="1"><f a="b:s">
	<c path="StringBuf"/>
	<e path="haxe.StackItem"/>
	<x path="Void"/>
</f></itemToString>
		<makeStack set="method" line="242" static="1"><f a="s">
	<c path="String"/>
	<c path="Array"><e path="haxe.StackItem"/></c>
</f></makeStack>
		<haxe_doc>Get informations about the call stack.</haxe_doc>
	</class>
	<abstract path="haxe.Function" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"/></impl>
	</abstract>
	<class path="haxe._Constraints.Function_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"/>
	<abstract path="haxe.FlatEnum" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"/></impl>
	</abstract>
	<class path="haxe._Constraints.FlatEnum_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"/>
	<class path="haxe.IMap" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" module="haxe.Constraints" interface="1">
		<get public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<t path="Null"><c path="haxe.IMap.V"/></t>
</f></get>
		<set public="1" set="method"><f a="k:v">
	<c path="haxe.IMap.K"/>
	<c path="haxe.IMap.V"/>
	<x path="Void"/>
</f></set>
		<exists public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Bool"/>
</f></exists>
		<remove public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Bool"/>
</f></remove>
		<keys public="1" set="method"><f a=""><t path="Iterator"><c path="haxe.IMap.K"/></t></f></keys>
		<iterator public="1" set="method"><f a=""><t path="Iterator"><c path="haxe.IMap.V"/></t></f></iterator>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
	</class>
	<abstract path="haxe.DynamicAccess" params="T" file="C:\HaxeToolkit\haxe\std/haxe/DynamicAccess.hx">
		<from><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></from>
		<this><d><c path="haxe.DynamicAccess.T"/></d></this>
		<to><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></to>
		<haxe_doc>DynamicAccess is an abstract type for working with anonymous structures
	that are intended to hold collections of objects by the string key.

	For example, these types of structures are often created from JSON.

	Basically, it wraps `Reflect` calls in a `Map`-like interface.</haxe_doc>
		<impl><class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess">
	<_new public="1" get="inline" set="null" line="37" static="1">
		<f a=""><x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x></f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new structure.</haxe_doc>
	</_new>
	<get public="1" get="inline" set="null" line="47" static="1">
		<f a="this:key">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<t path="Null"><c path="haxe.DynamicAccess.T"/></t>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Returns a value by specified `key`.

		If the structure does not contain the given key, null is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
	</get>
	<set public="1" get="inline" set="null" line="65" static="1">
		<f a="this:key:value">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<c path="haxe.DynamicAccess.T"/>
			<c path="haxe.DynamicAccess.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Sets a `value` for a specified `key`.

		If the structure contains the given key, its value will be overwritten.

		Returns the given value.

		If `key` is null, the result is unspecified.</haxe_doc>
	</set>
	<exists public="1" get="inline" set="null" line="79" static="1">
		<f a="this:key">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Tells if the structure contains a specified `key`.

		If `key` is null, the result is unspecified.</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="88" static="1">
		<f a="this:key">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Removes a specified `key` from the structure.

		Returns true, if `key` was present in structure, or false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="93" static="1">
		<f a="this">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="Array"><c path="String"/></c>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an array of `keys` in a structure.</haxe_doc>
	</keys>
</class></impl>
	</abstract>
	<class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess">
		<_new public="1" get="inline" set="null" line="37" static="1">
			<f a=""><x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x></f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new structure.</haxe_doc>
		</_new>
		<get public="1" get="inline" set="null" line="47" static="1">
			<f a="this:key">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<t path="Null"><c path="haxe.DynamicAccess.T"/></t>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Returns a value by specified `key`.

		If the structure does not contain the given key, null is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="65" static="1">
			<f a="this:key:value">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<c path="haxe.DynamicAccess.T"/>
				<c path="haxe.DynamicAccess.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Sets a `value` for a specified `key`.

		If the structure contains the given key, its value will be overwritten.

		Returns the given value.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<exists public="1" get="inline" set="null" line="79" static="1">
			<f a="this:key">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Tells if the structure contains a specified `key`.

		If `key` is null, the result is unspecified.</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="88" static="1">
			<f a="this:key">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Removes a specified `key` from the structure.

		Returns true, if `key` was present in structure, or false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="93" static="1">
			<f a="this">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an array of `keys` in a structure.</haxe_doc>
		</keys>
	</class>
	<abstract path="haxe.EnumFlags" params="T" file="C:\HaxeToolkit\haxe\std/haxe/EnumFlags.hx">
		<this><x path="Int"/></this>
		<haxe_doc>A typed interface for bit flags. This is not a real object, only a typed
	interface for an actual Int. Each flag can be tested/set with the
	corresponding enum instance. Up to 32 flags can be stored that way.

	Enum constructor indices are preserved from haxe syntax, so the first
	declared is index 0, the next index 1 etc. The methods are optimized if the
	enum instance is passed directly, e.g. as has(EnumCtor). Otherwise
	Type.enumIndex() reflection is used.</haxe_doc>
		<impl><class path="haxe._EnumFlags.EnumFlags_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/EnumFlags.hx" private="1" module="haxe.EnumFlags">
	<_new public="1" get="inline" set="null" line="39" static="1">
		<f a="?i" v="0">
			<x path="Int"/>
			<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
		</f>
		<meta>
			<m n=":value"><e>{i:0}</e></m>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Initializes the bitflags to `i`.</haxe_doc>
	</_new>
	<has public="1" get="inline" set="null" line="51" static="1">
		<f a="this:v">
			<x path="Int"/>
			<c path="haxe.EnumFlags.T"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Checks if the index of enum instance `v` is set.

		This method is optimized if `v` is an enum instance expression such as
		SomeEnum.SomeCtor.

		If `v` is null, the result is unspecified.</haxe_doc>
	</has>
	<set public="1" get="inline" set="null" line="63" static="1">
		<f a="this:v">
			<x path="Int"/>
			<c path="haxe.EnumFlags.T"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Sets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		SomeEnum.SomeCtor.

		If `v` is null, the result is unspecified.</haxe_doc>
	</set>
	<unset public="1" get="inline" set="null" line="75" static="1">
		<f a="this:v">
			<x path="Int"/>
			<c path="haxe.EnumFlags.T"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Unsets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		SomeEnum.SomeCtor.

		If `v` is null, the result is unspecified.</haxe_doc>
	</unset>
	<ofInt public="1" params="T" get="inline" set="null" line="83" static="1">
		<f a="i">
			<x path="Int"/>
			<x path="haxe.EnumFlags"><c path="ofInt.T"/></x>
		</f>
		<haxe_doc>Convert a integer bitflag into a typed one (this is a no-op, it does not
		have any impact on speed).</haxe_doc>
	</ofInt>
	<toInt public="1" get="inline" set="null" line="91" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Convert the typed bitflag into the corresponding int value (this is a
		no-op, it doesn't have any impact on speed).</haxe_doc>
	</toInt>
</class></impl>
	</abstract>
	<class path="haxe._EnumFlags.EnumFlags_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/EnumFlags.hx" private="1" module="haxe.EnumFlags">
		<_new public="1" get="inline" set="null" line="39" static="1">
			<f a="?i" v="0">
				<x path="Int"/>
				<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
			</f>
			<meta>
				<m n=":value"><e>{i:0}</e></m>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Initializes the bitflags to `i`.</haxe_doc>
		</_new>
		<has public="1" get="inline" set="null" line="51" static="1">
			<f a="this:v">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Checks if the index of enum instance `v` is set.

		This method is optimized if `v` is an enum instance expression such as
		SomeEnum.SomeCtor.

		If `v` is null, the result is unspecified.</haxe_doc>
		</has>
		<set public="1" get="inline" set="null" line="63" static="1">
			<f a="this:v">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Sets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		SomeEnum.SomeCtor.

		If `v` is null, the result is unspecified.</haxe_doc>
		</set>
		<unset public="1" get="inline" set="null" line="75" static="1">
			<f a="this:v">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Unsets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		SomeEnum.SomeCtor.

		If `v` is null, the result is unspecified.</haxe_doc>
		</unset>
		<ofInt public="1" params="T" get="inline" set="null" line="83" static="1">
			<f a="i">
				<x path="Int"/>
				<x path="haxe.EnumFlags"><c path="ofInt.T"/></x>
			</f>
			<haxe_doc>Convert a integer bitflag into a typed one (this is a no-op, it does not
		have any impact on speed).</haxe_doc>
		</ofInt>
		<toInt public="1" get="inline" set="null" line="91" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Convert the typed bitflag into the corresponding int value (this is a
		no-op, it doesn't have any impact on speed).</haxe_doc>
		</toInt>
	</class>
	<class path="haxe.EnumTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="41" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
			pack1.pack2.(...).packN.EnumName
		If `e` is a sub-type of a haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="54" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="70" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is null, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="87" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array [] if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="99" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getConstructors>
	</class>
	<class path="haxe.EnumValueTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="114" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="125" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="139" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="151" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getIndex>
		<match public="1" set="method" static="1">
			<f a="e:pattern">
				<x path="EnumValue"/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Matches enum instance `e` against pattern `pattern`, returning true if
		matching succeeded and false otherwise.

		Example usage:

		```
		if (e.match(pattern)) {
			// codeIfTrue
		} else {
			// codeIfFalse
		}
		```

		This is equivalent to the following code:

		```
		switch (e) {
			case pattern:
				// codeIfTrue
			case _:
				// codeIfFalse
		}
		```

		This method is implemented in the compiler. This definition exists only
		for documentation.</haxe_doc>
		</match>
	</class>
	<class path="haxe.Http" params="" file="C:\HaxeToolkit\haxe\std/haxe/Http.hx">
		<url public="1">
			<c path="String"/>
			<haxe_doc>The url of `this` request. It is used only by the request() method and
		can be changed in order to send the same request to different target
		Urls.</haxe_doc>
		</url>
		<responseData public="1" set="null"><t path="Null"><c path="String"/></t></responseData>
		<postData><c path="String"/></postData>
		<headers><c path="List"><a>
	<value><c path="String"/></value>
	<header><c path="String"/></header>
</a></c></headers>
		<params><c path="List"><a>
	<value><c path="String"/></value>
	<param><c path="String"/></param>
</a></c></params>
		<setHeader public="1" set="method" line="110">
			<f a="header:value">
				<c path="String"/>
				<c path="String"/>
				<c path="haxe.Http"/>
			</f>
			<haxe_doc>Sets the header identified as `header` to value `value`.

		If `header` or `value` are null, the result is unspecified.

		This method provides a fluent interface.</haxe_doc>
		</setHeader>
		<addHeader public="1" set="method" line="116"><f a="header:value">
	<c path="String"/>
	<c path="String"/>
	<c path="haxe.Http"/>
</f></addHeader>
		<setParameter public="1" set="method" line="128">
			<f a="param:value">
				<c path="String"/>
				<c path="String"/>
				<c path="haxe.Http"/>
			</f>
			<haxe_doc>Sets the parameter identified as `param` to value `value`.

		If `header` or `value` are null, the result is unspecified.

		This method provides a fluent interface.</haxe_doc>
		</setParameter>
		<addParameter public="1" set="method" line="134"><f a="param:value">
	<c path="String"/>
	<c path="String"/>
	<c path="haxe.Http"/>
</f></addParameter>
		<setPostData public="1" set="method" line="149">
			<f a="data">
				<c path="String"/>
				<c path="haxe.Http"/>
			</f>
			<haxe_doc>Sets the post data of `this` Http request to `data`.

		There can only be one post data per request. Subsequent calls overwrite
		the previously set value.

		If `data` is null, the post data is considered to be absent.

		This method provides a fluent interface.</haxe_doc>
		</setPostData>
		<req><c path="flash.net.URLLoader"/></req>
		<cancel public="1" set="method" line="166">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Cancels `this` Http request if `request` has been called and a response
		has not yet been received.</haxe_doc>
		</cancel>
		<request public="1" set="method" line="195">
			<f a="?post">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sends `this` Http request to the Url specified by `this.url`.

		If `post` is true, the request is sent as POST request, otherwise it is
		sent as GET request.

		Depending on the outcome of the request, this method calls the
		onStatus(), onError() or onData() callback functions.

		If `this.url` is null, the result is unspecified.

		If `this.url` is an invalid or inaccessible Url, the onError() callback
		function is called.

		(Js) If `this.async` is false, the callback functions are called before
		this method returns.</haxe_doc>
		</request>
		<onData public="1" set="dynamic" line="740">
			<f a="data">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a successful request, with `data` containing
		the result String.

		The intended usage is to bind it to a custom function:
		`httpInstance.onData = function(data) { // handle result }`</haxe_doc>
		</onData>
		<onError public="1" set="dynamic" line="750">
			<f a="msg">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a request error, with `msg` containing the
		error description.

		The intended usage is to bind it to a custom function:
		`httpInstance.onError = function(msg) { // handle error }`</haxe_doc>
		</onError>
		<onStatus public="1" set="dynamic" line="760">
			<f a="status">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a Http status change, with `status` being the
		new status.

		The intended usage is to bind it to a custom function:
		`httpInstance.onStatus = function(status) { // handle status }`</haxe_doc>
		</onStatus>
		<new public="1" set="method" line="88">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Http instance with `url` as parameter.

		This does not do a request until request() is called.

		If `url` is null, the field url must be set to a value before making the
		call to request(), or the result is unspecified.

		(Php) Https (SSL) connections are allowed only if the OpenSSL extension
		is enabled.</haxe_doc>
		</new>
		<haxe_doc>This class can be used to handle Http requests consistently across
	platforms. There are two intended usages:

	- call haxe.Http.requestUrl(url) and receive the result as a String (not
	available on flash)
	- create a new haxe.Http(url), register your callbacks for onData, onError
	and onStatus, then call request().</haxe_doc>
	</class>
	<abstract path="haxe.Int32" params="" file="C:\HaxeToolkit\haxe\std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
 	all platforms.</haxe_doc>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Int32.hx" private="1" module="haxe.Int32">
	<preIncrement get="inline" set="null" line="31" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>'???'</e></m>
		</meta>
	</preIncrement>
	<postIncrement get="inline" set="null" line="34" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>'???'</e></m>
		</meta>
	</postIncrement>
	<preDecrement get="inline" set="null" line="40" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>'???'</e></m>
		</meta>
	</preDecrement>
	<postDecrement get="inline" set="null" line="43" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>'???'</e></m>
		</meta>
	</postDecrement>
	<add get="inline" set="null" line="49" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A+B</e></m></meta>
	</add>
	<addInt get="inline" set="null" line="52" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":op"><e>A+B</e></m>
			<m n=":commutative"/>
		</meta>
	</addInt>
	<sub get="inline" set="null" line="57" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A-B</e></m></meta>
	</sub>
	<subInt get="inline" set="null" line="60" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A-B</e></m></meta>
	</subInt>
	<intSub get="inline" set="null" line="63" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A-B</e></m></meta>
	</intSub>
	<toFloat get="inline" set="null" line="171" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toFloat>
	<ucompare public="1" set="method" line="177" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
	</ucompare>
	<clamp get="inline" set="null" line="187" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></clamp>
</class></impl>
	</abstract>
	<class path="haxe._Int32.Int32_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Int32.hx" private="1" module="haxe.Int32">
		<preIncrement get="inline" set="null" line="31" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>'???'</e></m>
			</meta>
		</preIncrement>
		<postIncrement get="inline" set="null" line="34" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>'???'</e></m>
			</meta>
		</postIncrement>
		<preDecrement get="inline" set="null" line="40" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>'???'</e></m>
			</meta>
		</preDecrement>
		<postDecrement get="inline" set="null" line="43" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>'???'</e></m>
			</meta>
		</postDecrement>
		<add get="inline" set="null" line="49" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A+B</e></m></meta>
		</add>
		<addInt get="inline" set="null" line="52" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":op"><e>A+B</e></m>
				<m n=":commutative"/>
			</meta>
		</addInt>
		<sub get="inline" set="null" line="57" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A-B</e></m></meta>
		</sub>
		<subInt get="inline" set="null" line="60" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A-B</e></m></meta>
		</subInt>
		<intSub get="inline" set="null" line="63" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A-B</e></m></meta>
		</intSub>
		<toFloat get="inline" set="null" line="171" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toFloat>
		<ucompare public="1" set="method" line="177" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
		</ucompare>
		<clamp get="inline" set="null" line="187" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></clamp>
	</class>
	<abstract path="haxe.Int64" params="" file="C:\HaxeToolkit\haxe\std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<haxe_doc>A cross-platform signed 64-bit integer.
	Int64 instances can be created from two 32-bit words using `Int64.make()`.</haxe_doc>
		<meta><m n=":notNull"/></meta>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Int64.hx" private="1" module="haxe.Int64">
	<_new get="inline" set="null" line="35" static="1">
		<f a="x">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<copy public="1" get="inline" set="null" line="41" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Makes a copy of `this` Int64.</haxe_doc>
	</copy>
	<make public="1" get="inline" set="null" line="47" static="1">
		<f a="high:low">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int64"/>
		</f>
		<haxe_doc>Construct an Int64 from two 32-bit words `high` and `low`.</haxe_doc>
	</make>
	<ofInt public="1" get="inline" set="null" line="54" static="1">
		<f a="x">
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>Returns an Int64 with the value of the Int `x`.
		`x` is sign-extended to fill 64 bits.</haxe_doc>
	</ofInt>
	<toInt public="1" get="inline" set="null" line="61" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Returns an Int with the value of the Int64 `x`.
		Throws an exception  if `x` cannot be represented in 32 bits.</haxe_doc>
	</toInt>
	<is public="1" get="inline" set="null" line="71" static="1">
		<f a="val">
			<d/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns whether the value `val` is of type `haxe.Int64`</haxe_doc>
	</is>
	<getHigh public="1" get="inline" set="null" line="78" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":deprecated"><e>"Use high instead"</e></m></meta>
		<haxe_doc>Returns the high 32-bit word of `x`.</haxe_doc>
	</getHigh>
	<getLow public="1" get="inline" set="null" line="85" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":deprecated"><e>"Use low instead"</e></m></meta>
		<haxe_doc>Returns the low 32-bit word of `x`.</haxe_doc>
	</getLow>
	<isNeg public="1" get="inline" set="null" line="91" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns `true` if `x` is less than zero.</haxe_doc>
	</isNeg>
	<isZero public="1" get="inline" set="null" line="97" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns `true` if `x` is exactly zero.</haxe_doc>
	</isZero>
	<compare public="1" get="inline" set="null" line="105" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc><![CDATA[Compares `a` and `b` in signed mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
	</compare>
	<ucompare public="1" get="inline" set="null" line="116" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc><![CDATA[Compares `a` and `b` in unsigned mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
	</ucompare>
	<toStr public="1" get="inline" set="null" line="124" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns a signed decimal `String` representation of `x`.</haxe_doc>
	</toStr>
	<toString set="method" line="127" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
	<divMod public="1" set="method" line="152" static="1">
		<f a="dividend:divisor">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<a>
				<quotient><x path="haxe.Int64"/></quotient>
				<modulus><x path="haxe.Int64"/></modulus>
			</a>
		</f>
		<haxe_doc>Performs signed integer divison of `dividend` by `divisor`.
		Returns `{ quotient : Int64, modulus : Int64 }`.</haxe_doc>
	</divMod>
	<neg public="1" get="inline" set="null" line="199" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>'???'</e></m></meta>
		<haxe_doc>Returns the negative of `x`.</haxe_doc>
	</neg>
	<preIncrement get="inline" set="null" line="207" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>'???'</e></m>
		</meta>
	</preIncrement>
	<postIncrement get="inline" set="null" line="213" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>'???'</e></m>
		</meta>
	</postIncrement>
	<preDecrement get="inline" set="null" line="219" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>'???'</e></m>
		</meta>
	</preDecrement>
	<postDecrement get="inline" set="null" line="225" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>'???'</e></m>
		</meta>
	</postDecrement>
	<add public="1" get="inline" set="null" line="234" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A+B</e></m></meta>
		<haxe_doc>Returns the sum of `a` and `b`.</haxe_doc>
	</add>
	<addInt get="inline" set="null" line="241" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":op"><e>A+B</e></m>
			<m n=":commutative"/>
		</meta>
	</addInt>
	<sub public="1" get="inline" set="null" line="247" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A-B</e></m></meta>
		<haxe_doc>Returns `a` minus `b`.</haxe_doc>
	</sub>
	<subInt get="inline" set="null" line="254" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A-B</e></m></meta>
	</subInt>
	<intSub get="inline" set="null" line="257" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A-B</e></m></meta>
	</intSub>
	<mul public="1" get="inline" set="null" line="263" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A*B</e></m></meta>
		<haxe_doc>Returns the product of `a` and `b`.</haxe_doc>
	</mul>
	<mulInt get="inline" set="null" line="283" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":op"><e>A*B</e></m>
			<m n=":commutative"/>
		</meta>
	</mulInt>
	<div public="1" get="inline" set="null" line="289" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A/B</e></m></meta>
		<haxe_doc>Returns the quotient of `a` divided by `b`.</haxe_doc>
	</div>
	<divInt get="inline" set="null" line="292" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A/B</e></m></meta>
	</divInt>
	<intDiv get="inline" set="null" line="295" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A/B</e></m></meta>
	</intDiv>
	<mod public="1" get="inline" set="null" line="301" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A%B</e></m></meta>
		<haxe_doc>Returns the modulus of `a` divided by `b`.</haxe_doc>
	</mod>
	<modInt get="inline" set="null" line="304" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A%B</e></m></meta>
	</modInt>
	<intMod get="inline" set="null" line="307" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A%B</e></m></meta>
	</intMod>
	<eq public="1" get="inline" set="null" line="313" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A==B</e></m></meta>
		<haxe_doc>Returns `true` if `a` is equal to `b`.</haxe_doc>
	</eq>
	<eqInt get="inline" set="null" line="316" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":op"><e>A==B</e></m>
			<m n=":commutative"/>
		</meta>
	</eqInt>
	<neq public="1" get="inline" set="null" line="322" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A!=B</e></m></meta>
		<haxe_doc>Returns `true` if `a` is not equal to `b`.</haxe_doc>
	</neq>
	<neqInt get="inline" set="null" line="325" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":op"><e>A!=B</e></m>
			<m n=":commutative"/>
		</meta>
	</neqInt>
	<lt get="inline" set="null" line="328" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A<B]]></e></m></meta>
	</lt>
	<ltInt get="inline" set="null" line="331" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A<B]]></e></m></meta>
	</ltInt>
	<intLt get="inline" set="null" line="334" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A<B]]></e></m></meta>
	</intLt>
	<lte get="inline" set="null" line="337" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A<=B]]></e></m></meta>
	</lte>
	<lteInt get="inline" set="null" line="340" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A<=B]]></e></m></meta>
	</lteInt>
	<intLte get="inline" set="null" line="343" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A<=B]]></e></m></meta>
	</intLte>
	<gt get="inline" set="null" line="346" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A>B]]></e></m></meta>
	</gt>
	<gtInt get="inline" set="null" line="349" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A>B]]></e></m></meta>
	</gtInt>
	<intGt get="inline" set="null" line="352" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A>B]]></e></m></meta>
	</intGt>
	<gte get="inline" set="null" line="355" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A>=B]]></e></m></meta>
	</gte>
	<gteInt get="inline" set="null" line="358" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A>=B]]></e></m></meta>
	</gteInt>
	<intGte get="inline" set="null" line="361" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A>=B]]></e></m></meta>
	</intGte>
	<complement get="inline" set="null" line="367" static="1">
		<f a="a">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>'???'</e></m></meta>
		<haxe_doc>Returns the bitwise NOT of `a`.</haxe_doc>
	</complement>
	<and public="1" get="inline" set="null" line="373" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A&B]]></e></m></meta>
		<haxe_doc>Returns the bitwise AND of `a` and `b`.</haxe_doc>
	</and>
	<or public="1" get="inline" set="null" line="379" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A|B</e></m></meta>
		<haxe_doc>Returns the bitwise OR of `a` and `b`.</haxe_doc>
	</or>
	<xor public="1" get="inline" set="null" line="385" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A^B</e></m></meta>
		<haxe_doc>Returns the bitwise XOR of `a` and `b`.</haxe_doc>
	</xor>
	<shl public="1" get="inline" set="null" line="391" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A<<B]]></e></m></meta>
		<haxe_doc>Returns `a` left-shifted by `b` bits.</haxe_doc>
	</shl>
	<shr public="1" get="inline" set="null" line="402" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A>>B]]></e></m></meta>
		<haxe_doc>Returns `a` right-shifted by `b` bits in signed mode.
		`a` is sign-extended.</haxe_doc>
	</shr>
	<ushr public="1" get="inline" set="null" line="413" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A>>>B]]></e></m></meta>
		<haxe_doc>Returns `a` right-shifted by `b` bits in unsigned mode.
		`a` is padded with zeroes.</haxe_doc>
	</ushr>
	<high public="1" get="accessor" set="null" static="1">
		<x path="haxe.Int32"/>
		<meta><m n=":impl"/></meta>
	</high>
	<get_high get="inline" set="null" line="421" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_high>
	<set_high get="inline" set="null" line="422" static="1">
		<f a="this:x">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_high>
	<low public="1" get="accessor" set="null" static="1">
		<x path="haxe.Int32"/>
		<meta><m n=":impl"/></meta>
	</low>
	<get_low get="inline" set="null" line="425" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_low>
	<set_low get="inline" set="null" line="426" static="1">
		<f a="this:x">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_low>
</class></impl>
	</abstract>
	<class path="haxe._Int64.Int64_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<_new get="inline" set="null" line="35" static="1">
			<f a="x">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<copy public="1" get="inline" set="null" line="41" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Makes a copy of `this` Int64.</haxe_doc>
		</copy>
		<make public="1" get="inline" set="null" line="47" static="1">
			<f a="high:low">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Construct an Int64 from two 32-bit words `high` and `low`.</haxe_doc>
		</make>
		<ofInt public="1" get="inline" set="null" line="54" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>Returns an Int64 with the value of the Int `x`.
		`x` is sign-extended to fill 64 bits.</haxe_doc>
		</ofInt>
		<toInt public="1" get="inline" set="null" line="61" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns an Int with the value of the Int64 `x`.
		Throws an exception  if `x` cannot be represented in 32 bits.</haxe_doc>
		</toInt>
		<is public="1" get="inline" set="null" line="71" static="1">
			<f a="val">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns whether the value `val` is of type `haxe.Int64`</haxe_doc>
		</is>
		<getHigh public="1" get="inline" set="null" line="78" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":deprecated"><e>"Use high instead"</e></m></meta>
			<haxe_doc>Returns the high 32-bit word of `x`.</haxe_doc>
		</getHigh>
		<getLow public="1" get="inline" set="null" line="85" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":deprecated"><e>"Use low instead"</e></m></meta>
			<haxe_doc>Returns the low 32-bit word of `x`.</haxe_doc>
		</getLow>
		<isNeg public="1" get="inline" set="null" line="91" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `x` is less than zero.</haxe_doc>
		</isNeg>
		<isZero public="1" get="inline" set="null" line="97" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `x` is exactly zero.</haxe_doc>
		</isZero>
		<compare public="1" get="inline" set="null" line="105" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Compares `a` and `b` in signed mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
		</compare>
		<ucompare public="1" get="inline" set="null" line="116" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Compares `a` and `b` in unsigned mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
		</ucompare>
		<toStr public="1" get="inline" set="null" line="124" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a signed decimal `String` representation of `x`.</haxe_doc>
		</toStr>
		<toString set="method" line="127" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
		<divMod public="1" set="method" line="152" static="1">
			<f a="dividend:divisor">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<a>
					<quotient><x path="haxe.Int64"/></quotient>
					<modulus><x path="haxe.Int64"/></modulus>
				</a>
			</f>
			<haxe_doc>Performs signed integer divison of `dividend` by `divisor`.
		Returns `{ quotient : Int64, modulus : Int64 }`.</haxe_doc>
		</divMod>
		<neg public="1" get="inline" set="null" line="199" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>'???'</e></m></meta>
			<haxe_doc>Returns the negative of `x`.</haxe_doc>
		</neg>
		<preIncrement get="inline" set="null" line="207" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>'???'</e></m>
			</meta>
		</preIncrement>
		<postIncrement get="inline" set="null" line="213" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>'???'</e></m>
			</meta>
		</postIncrement>
		<preDecrement get="inline" set="null" line="219" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>'???'</e></m>
			</meta>
		</preDecrement>
		<postDecrement get="inline" set="null" line="225" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>'???'</e></m>
			</meta>
		</postDecrement>
		<add public="1" get="inline" set="null" line="234" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A+B</e></m></meta>
			<haxe_doc>Returns the sum of `a` and `b`.</haxe_doc>
		</add>
		<addInt get="inline" set="null" line="241" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":op"><e>A+B</e></m>
				<m n=":commutative"/>
			</meta>
		</addInt>
		<sub public="1" get="inline" set="null" line="247" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A-B</e></m></meta>
			<haxe_doc>Returns `a` minus `b`.</haxe_doc>
		</sub>
		<subInt get="inline" set="null" line="254" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A-B</e></m></meta>
		</subInt>
		<intSub get="inline" set="null" line="257" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A-B</e></m></meta>
		</intSub>
		<mul public="1" get="inline" set="null" line="263" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A*B</e></m></meta>
			<haxe_doc>Returns the product of `a` and `b`.</haxe_doc>
		</mul>
		<mulInt get="inline" set="null" line="283" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":op"><e>A*B</e></m>
				<m n=":commutative"/>
			</meta>
		</mulInt>
		<div public="1" get="inline" set="null" line="289" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A/B</e></m></meta>
			<haxe_doc>Returns the quotient of `a` divided by `b`.</haxe_doc>
		</div>
		<divInt get="inline" set="null" line="292" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A/B</e></m></meta>
		</divInt>
		<intDiv get="inline" set="null" line="295" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A/B</e></m></meta>
		</intDiv>
		<mod public="1" get="inline" set="null" line="301" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A%B</e></m></meta>
			<haxe_doc>Returns the modulus of `a` divided by `b`.</haxe_doc>
		</mod>
		<modInt get="inline" set="null" line="304" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A%B</e></m></meta>
		</modInt>
		<intMod get="inline" set="null" line="307" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A%B</e></m></meta>
		</intMod>
		<eq public="1" get="inline" set="null" line="313" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A==B</e></m></meta>
			<haxe_doc>Returns `true` if `a` is equal to `b`.</haxe_doc>
		</eq>
		<eqInt get="inline" set="null" line="316" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":op"><e>A==B</e></m>
				<m n=":commutative"/>
			</meta>
		</eqInt>
		<neq public="1" get="inline" set="null" line="322" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A!=B</e></m></meta>
			<haxe_doc>Returns `true` if `a` is not equal to `b`.</haxe_doc>
		</neq>
		<neqInt get="inline" set="null" line="325" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":op"><e>A!=B</e></m>
				<m n=":commutative"/>
			</meta>
		</neqInt>
		<lt get="inline" set="null" line="328" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A<B]]></e></m></meta>
		</lt>
		<ltInt get="inline" set="null" line="331" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A<B]]></e></m></meta>
		</ltInt>
		<intLt get="inline" set="null" line="334" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A<B]]></e></m></meta>
		</intLt>
		<lte get="inline" set="null" line="337" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A<=B]]></e></m></meta>
		</lte>
		<lteInt get="inline" set="null" line="340" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A<=B]]></e></m></meta>
		</lteInt>
		<intLte get="inline" set="null" line="343" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A<=B]]></e></m></meta>
		</intLte>
		<gt get="inline" set="null" line="346" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>B]]></e></m></meta>
		</gt>
		<gtInt get="inline" set="null" line="349" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>B]]></e></m></meta>
		</gtInt>
		<intGt get="inline" set="null" line="352" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>B]]></e></m></meta>
		</intGt>
		<gte get="inline" set="null" line="355" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>=B]]></e></m></meta>
		</gte>
		<gteInt get="inline" set="null" line="358" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>=B]]></e></m></meta>
		</gteInt>
		<intGte get="inline" set="null" line="361" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>=B]]></e></m></meta>
		</intGte>
		<complement get="inline" set="null" line="367" static="1">
			<f a="a">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>'???'</e></m></meta>
			<haxe_doc>Returns the bitwise NOT of `a`.</haxe_doc>
		</complement>
		<and public="1" get="inline" set="null" line="373" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A&B]]></e></m></meta>
			<haxe_doc>Returns the bitwise AND of `a` and `b`.</haxe_doc>
		</and>
		<or public="1" get="inline" set="null" line="379" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A|B</e></m></meta>
			<haxe_doc>Returns the bitwise OR of `a` and `b`.</haxe_doc>
		</or>
		<xor public="1" get="inline" set="null" line="385" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A^B</e></m></meta>
			<haxe_doc>Returns the bitwise XOR of `a` and `b`.</haxe_doc>
		</xor>
		<shl public="1" get="inline" set="null" line="391" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A<<B]]></e></m></meta>
			<haxe_doc>Returns `a` left-shifted by `b` bits.</haxe_doc>
		</shl>
		<shr public="1" get="inline" set="null" line="402" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>>B]]></e></m></meta>
			<haxe_doc>Returns `a` right-shifted by `b` bits in signed mode.
		`a` is sign-extended.</haxe_doc>
		</shr>
		<ushr public="1" get="inline" set="null" line="413" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>>>B]]></e></m></meta>
			<haxe_doc>Returns `a` right-shifted by `b` bits in unsigned mode.
		`a` is padded with zeroes.</haxe_doc>
		</ushr>
		<high public="1" get="accessor" set="null" static="1">
			<x path="haxe.Int32"/>
			<meta><m n=":impl"/></meta>
		</high>
		<get_high get="inline" set="null" line="421" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_high>
		<set_high get="inline" set="null" line="422" static="1">
			<f a="this:x">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_high>
		<low public="1" get="accessor" set="null" static="1">
			<x path="haxe.Int32"/>
			<meta><m n=":impl"/></meta>
		</low>
		<get_low get="inline" set="null" line="425" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_low>
		<set_low get="inline" set="null" line="426" static="1">
			<f a="this:x">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_low>
	</class>
	<typedef path="haxe._Int64.__Int64" params="" file="C:\HaxeToolkit\haxe\std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<c path="haxe._Int64.___Int64"/>
		<haxe_doc>* This typedef will fool @:coreApi into thinking that we are using
  * the same underlying type, even though it might be different on
  * specific platforms.</haxe_doc>
	</typedef>
	<class path="haxe._Int64.___Int64" params="" file="C:\HaxeToolkit\haxe\std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<high public="1"><x path="haxe.Int32"/></high>
		<low public="1"><x path="haxe.Int32"/></low>
		<toString public="1" set="method" line="450">
			<f a=""><c path="String"/></f>
			<haxe_doc>We also define toString here to ensure we always get a pretty string
		when tracing or calling Std.string. This tends not to happen when
		toString is only in the abstract.</haxe_doc>
		</toString>
		<new public="1" get="inline" set="null" line="440"><f a="high:low">
	<x path="haxe.Int32"/>
	<x path="haxe.Int32"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.Json" params="" file="C:\HaxeToolkit\haxe\std/flash/_std/haxe/Json.hx" extern="1">
		<parse public="1" set="method" static="1">
			<f a="text">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Parses given JSON-encoded `text` and returns the resulting object.

		JSON objects are parsed into anonymous structures and JSON arrays
		are parsed into Array<Dynamic>.

		If given `text` is not valid JSON, an exception will be thrown.]]></haxe_doc>
		</parse>
		<stringify public="1" set="method" static="1">
			<f a="value:?replacer:?space">
				<d/>
				<f a=":">
					<d/>
					<d/>
					<d/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes given `value` and returns the resulting JSON string.

		If `replacer` is given and is not null, it is used to retrieve
		actual object to be encoded. The `replacer` function two parameters,
		the key and the value being encoded. Initial key value is an empty string.
		
		If `space` is given and is not null, the result will be pretty-printed.
		Successive levels will be indented by this string.</haxe_doc>
		</stringify>
		<haxe_doc>Crossplatform JSON API : it will automatically use the optimized native API if available.
	Use -D haxeJSON to force usage of the Haxe implementation even if a native API is found : this will provide
	extra encoding features such as enums (replaced by their index) and StringMaps.</haxe_doc>
		<meta>
			<m n=":coreApi"/>
			<m n=":native"><e>"JSON"</e></m>
		</meta>
	</class>
	<class path="haxe.Log" params="" file="C:\HaxeToolkit\haxe\std/haxe/Log.hx">
		<trace public="1" set="dynamic" line="45" static="1">
			<f a="v:?infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the trace() call was made.

		This method can be rebound to a custom function:
			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v,infos) { // handle trace }
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to trace() will cause an
		exception.</haxe_doc>
		</trace>
		<clear public="1" set="dynamic" line="115" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Clears the trace output.</haxe_doc>
		</clear>
		<setColor public="1" set="dynamic" line="128" static="1">
			<f a="rgb">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Sets the color of the trace output to `rgb`.</haxe_doc>
		</setColor>
		<haxe_doc>Log primarily provides the trace() method, which is invoked upon a call to
	trace() in haxe code.</haxe_doc>
	</class>
	<typedef path="haxe.PosInfos" params="" file="C:\HaxeToolkit\haxe\std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<t path="Null"><c path="Array"><d/></c></t>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>PosInfos is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	(..., ?pos:haxe.PosInfos), each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe.Resource" params="" file="C:\HaxeToolkit\haxe\std/flash/_std/haxe/Resource.hx">
		<content static="1"><c path="Array"><a><name><c path="String"/></name></a></c></content>
		<listNames public="1" set="method" line="57" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Lists all available resource names. The resource name is the name part
		of the -resource file@name command line parameter.</haxe_doc>
		</listNames>
		<getString public="1" set="method" line="64" static="1">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the resource identified by `name` as a String.

		If `name` does not match any resource name, null is returned.</haxe_doc>
		</getString>
		<getBytes public="1" set="method" line="69" static="1">
			<f a="name">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Retrieves the resource identified by `name` as an instance of
		haxe.io.Bytes.

		If `name` does not match any resource name, null is returned.</haxe_doc>
		</getBytes>
		<resolve set="method" line="74" static="1">
			<f a="name">
				<c path="String"/>
				<c path="flash.utils.ByteArray"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</resolve>
		<haxe_doc>Resource can be used to access resources that were added through the
	-resource file@name command line parameter.

	Depending on their type they can be obtained as String through
	getString(name), or as binary data through getBytes(name).

	A list of all available resource names can be obtained from listNames().</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.Serializer" params="" file="C:\HaxeToolkit\haxe\std/haxe/Serializer.hx">
		<USE_CACHE public="1" expr="false" line="55" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>If the values you are serializing can contain circular references or
		objects repetitions, you should set USE_CACHE to true to prevent
		infinite loops.

		This may also reduce the size of serialization Strings at the expense of
		performance.

		This value can be changed for individual instances of Serializer by
		setting their useCache field.</haxe_doc>
		</USE_CACHE>
		<USE_ENUM_INDEX public="1" expr="false" line="67" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>Use constructor indexes for enums instead of names.

		This may reduce the size of serialization Strings, but makes them less
		suited for long-term storage: If constructors are removed or added from
		the enum, the indices may no longer match.

		This value can be changed for individual instances of Serializer by
		setting their useEnumIndex field.</haxe_doc>
		</USE_ENUM_INDEX>
		<BASE64 expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:&quot;" line="69" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:"</e></m></meta>
		</BASE64>
		<run public="1" set="method" line="544" static="1">
			<f a="v">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Serializes `v` and returns the String representation.

		This is a convenience function for creating a new instance of
		Serializer, serialize `v` into it and obtain the result through a call
		to toString().</haxe_doc>
		</run>
		<buf><c path="StringBuf"/></buf>
		<cache><c path="Array"><d/></c></cache>
		<shash><c path="haxe.ds.StringMap"><x path="Int"/></c></shash>
		<scount><x path="Int"/></scount>
		<useCache public="1">
			<x path="Bool"/>
			<haxe_doc>The individual cache setting for `this` Serializer instance.

		See USE_CACHE for a complete description.</haxe_doc>
		</useCache>
		<useEnumIndex public="1">
			<x path="Bool"/>
			<haxe_doc>The individual enum index setting for `this` Serializer instance.

		See USE_ENUM_INDEX for a complete description.</haxe_doc>
		</useEnumIndex>
		<toString public="1" set="method" line="115">
			<f a=""><c path="String"/></f>
			<haxe_doc>Return the String representation of `this` Serializer.

		The exact format specification can be found here:
		http://haxe.org/manual/serialization/format</haxe_doc>
		</toString>
		<serializeString set="method" line="152"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></serializeString>
		<serializeRef set="method" line="171"><f a="v">
	<unknown/>
	<x path="Bool"/>
</f></serializeRef>
		<serializeClassFields set="method" line="194">
			<f a="v:c">
				<a><hasOwnProperty set="null"><f a="">
	<c path="String"/>
	<x path="Bool"/>
</f></hasOwnProperty></a>
				<x path="Class"><d/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</serializeClassFields>
		<serializeFields set="method" line="208"><f a="v">
	<unknown/>
	<x path="Void"/>
</f></serializeFields>
		<serialize public="1" set="method" line="226">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Serializes `v`.

		All haxe-defined values and objects with the exception of functions can
		be serialized. Serialization of external/native objects is not
		guaranteed to work.

		The values of `this.useCache` and `this.useEnumIndex` may affect
		serialization output.</haxe_doc>
		</serialize>
		<__getField get="inline" set="null" line="519">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</__getField>
		<serializeException public="1" set="method" line="521">
			<f a="e">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</serializeException>
		<new public="1" set="method" line="100">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Serializer instance.

		Subsequent calls to `this.serialize` will append values to the
		internal buffer of this String. Once complete, the contents can be
		retrieved through a call to `this.toString`.

		Each Serializer instance maintains its own cache if this.useCache` is
		true.</haxe_doc>
		</new>
		<haxe_doc>The Serializer class can be used to encode values and objects into a String,
	from which the Unserializer class can recreate the original representation.

	This class can be used in two ways:

	- create a new Serializer() instance, call its serialize() method with
		any argument and finally retrieve the String representation from
		toString()
	- call Serializer.run() to obtain the serialized representation of a
		single argument

	Serialization is guaranteed to work for all haxe-defined classes, but may
	or may not work for instances of external/native classes.

	The specification of the serialization format can be found here:
	`http://haxe.org/manual/serialization/format`</haxe_doc>
	</class>
	<enum path="haxe._Template.TemplateExpr" params="" file="C:\HaxeToolkit\haxe\std/haxe/Template.hx" private="1" module="haxe.Template">
		<OpVar a="v"><c path="String"/></OpVar>
		<OpExpr a="expr"><f a=""><d/></f></OpExpr>
		<OpIf a="expr:eif:eelse">
			<f a=""><d/></f>
			<e path="haxe._Template.TemplateExpr"/>
			<e path="haxe._Template.TemplateExpr"/>
		</OpIf>
		<OpStr a="str"><c path="String"/></OpStr>
		<OpBlock a="l"><c path="List"><e path="haxe._Template.TemplateExpr"/></c></OpBlock>
		<OpForeach a="expr:loop">
			<f a=""><d/></f>
			<e path="haxe._Template.TemplateExpr"/>
		</OpForeach>
		<OpMacro a="name:params">
			<c path="String"/>
			<c path="List"><e path="haxe._Template.TemplateExpr"/></c>
		</OpMacro>
	</enum>
	<typedef path="haxe._Template.Token" params="" file="C:\HaxeToolkit\haxe\std/haxe/Template.hx" private="1" module="haxe.Template"><a>
	<s><x path="Bool"/></s>
	<p><c path="String"/></p>
	<l><c path="Array"><c path="String"/></c></l>
</a></typedef>
	<typedef path="haxe._Template.ExprToken" params="" file="C:\HaxeToolkit\haxe\std/haxe/Template.hx" private="1" module="haxe.Template"><a>
	<s><x path="Bool"/></s>
	<p><c path="String"/></p>
</a></typedef>
	<class path="haxe.Template" params="" file="C:\HaxeToolkit\haxe\std/haxe/Template.hx">
		<splitter expr="~/(::[A-Za-z0-9_ ()&amp;|!+=/&gt;&lt;*.&quot;-]+::|\$\$([A-Za-z0-9_-]+)\()/" line="54" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e><![CDATA[~/(::[A-Za-z0-9_ ()&|!+=/><*."-]+::|\$\$([A-Za-z0-9_-]+)\()/]]></e></m></meta>
		</splitter>
		<expr_splitter expr="~/(\(|\)|[ 
	]*&quot;[^&quot;]*&quot;[ 
	]*|[!+=/&gt;&lt;*.&amp;|-]+)/" line="55" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e><![CDATA[~/(\(|\)|[ 
	]*"[^"]*"[ 
	]*|[!+=/><*.&|-]+)/]]></e></m></meta>
		</expr_splitter>
		<expr_trim expr="~/^[ ]*([^ ]+)[ ]*$/" line="56" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[ ]*([^ ]+)[ ]*$/</e></m></meta>
		</expr_trim>
		<expr_int expr="~/^[0-9]+$/" line="57" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[0-9]+$/</e></m></meta>
		</expr_int>
		<expr_float expr="~/^([+-]?)(?=\d|,\d)\d*(,\d*)?([Ee]([+-]?\d+))?$/" line="58" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^([+-]?)(?=\d|,\d)\d*(,\d*)?([Ee]([+-]?\d+))?$/</e></m></meta>
		</expr_float>
		<globals public="1" expr="&apos;???&apos;" line="64" static="1">
			<d/>
			<meta><m n=":value"><e>'???'</e></m></meta>
			<haxe_doc>Global replacements which are used across all Template instances. This
		has lower priority than the context argument of execute().</haxe_doc>
		</globals>
		<expr><e path="haxe._Template.TemplateExpr"/></expr>
		<context><d/></context>
		<macros><d/></macros>
		<stack><c path="List"><d/></c></stack>
		<buf><c path="StringBuf"/></buf>
		<execute public="1" set="method" line="105">
			<f a="context:?macros">
				<d/>
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Executes `this` Template, taking into account `context` for
		replacements and `macros` for callback functions.

		If `context` has a field 'name', its value replaces all occurrences of
		::name:: in the Template. Otherwise Template.globals is checked instead,
		If 'name' is not a field of that either, ::name:: is replaced with null.

		If `macros` has a field 'name', all occurrences of $$name(args) are
		replaced with the result of calling that field. The first argument is
		always the resolve() method, followed by the given arguments.
		If `macros` has no such field, the result is unspecified.

		If `context` is null, the result is unspecified. If `macros` is null,
		no macros are used.</haxe_doc>
		</execute>
		<resolve set="method" line="114"><f a="v">
	<c path="String"/>
	<d/>
</f></resolve>
		<parseTokens set="method" line="125"><f a="data">
	<c path="String"/>
	<c path="List"><t path="haxe._Template.Token"/></c>
</f></parseTokens>
		<parseBlock set="method" line="171"><f a="tokens">
	<c path="List"><t path="haxe._Template.Token"/></c>
	<e path="haxe._Template.TemplateExpr"/>
</f></parseBlock>
		<parse set="method" line="186"><f a="tokens">
	<c path="List"><t path="haxe._Template.Token"/></c>
	<e path="haxe._Template.TemplateExpr"/>
</f></parse>
		<parseExpr set="method" line="236"><f a="data">
	<c path="String"/>
	<f a=""><unknown/></f>
</f></parseExpr>
		<makeConst set="method" line="267"><f a="v">
	<c path="String"/>
	<f a=""><d/></f>
</f></makeConst>
		<makePath set="method" line="286"><f a="e:l">
	<f a=""><d/></f>
	<c path="List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makePath>
		<makeExpr set="method" line="300"><f a="l">
	<c path="List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makeExpr>
		<makeExpr2 set="method" line="304"><f a="l">
	<c path="List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makeExpr2>
		<run set="method" line="350"><f a="e">
	<e path="haxe._Template.TemplateExpr"/>
	<x path="Void"/>
</f></run>
		<new public="1" set="method" line="82">
			<f a="str">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Template instance from `str`.

		`str` is parsed into tokens, which are stored for internal use. This
		means that multiple execute() operations on a single Template instance
		are more efficient than one execute() operations on multiple Template
		instances.

		If `str` is null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Template provides a basic templating mechanism to replace values in a source
	String, and to have some basic logic.

	A complete documentation of the supported syntax is available at:
	<a href="http://haxe.org/manual/std-template.html">http://haxe.org/manual/std-template.html</a>]]></haxe_doc>
	</class>
	<class path="haxe.Timer" params="" file="C:\HaxeToolkit\haxe\std/haxe/Timer.hx">
		<delay public="1" set="method" line="121" static="1">
			<f a="f:time_ms">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<c path="haxe.Timer"/>
			</f>
			<haxe_doc>Invokes `f` after `time_ms` milliseconds.

		This is a convenience function for creating a new Timer instance with
		`time_ms` as argument, binding its run() method to `f` and then stopping
		`this` Timer upon the first invocation.

		If `f` is null, the result is unspecified.</haxe_doc>
		</delay>
		<measure public="1" params="T" set="method" line="143" static="1">
			<f a="f:?pos">
				<f a=""><c path="measure.T"/></f>
				<t path="haxe.PosInfos"/>
				<c path="measure.T"/>
			</f>
			<haxe_doc>Measures the time it takes to execute `f`, in seconds with fractions.

		This is a convenience function for calculating the difference between
		Timer.stamp() before and after the invocation of `f`.

		The difference is passed as argument to Log.trace(), with "s" appended
		to denote the unit. The optional `pos` argument is passed through.

		If `f` is null, the result is unspecified.</haxe_doc>
		</measure>
		<stamp public="1" set="method" line="156" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a timestamp, in seconds with fractions.

		The value itself might differ depending on platforms, only differences
		between two values make sense.</haxe_doc>
		</stamp>
		<id><t path="Null"><x path="Int"/></t></id>
		<stop public="1" set="method" line="80">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Stops `this` Timer.

		After calling this method, no additional invocations of `this.run`
		will occur.

		It is not possible to restart `this` Timer once stopped.</haxe_doc>
		</stop>
		<run public="1" set="dynamic" line="108">
			<f a=""><x path="Void"/></f>
			<haxe_doc>This method is invoked repeatedly on `this` Timer.

		It can be overridden in a subclass, or rebound directly to a custom
		function:
			var timer = new haxe.Timer(1000); // 1000ms delay
			timer.run = function() { ... }

		Once bound, it can still be rebound to different functions until `this`
		Timer is stopped through a call to `this.stop`.</haxe_doc>
		</run>
		<new public="1" set="method" line="59">
			<f a="time_ms">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates a new timer that will run every `time_ms` milliseconds.

		After creating the Timer instance, it calls `this].run` repeatedly,
		with delays of `time_ms` milliseconds, until `this.stop` is called.

		The first invocation occurs after `time_ms` milliseconds, not
		immediately.

		The accuracy of this may be platform-dependent.</haxe_doc>
		</new>
		<haxe_doc>The Timer class allows you to create asynchronous timers on platforms that
	support events.

	The intended usage is to create an instance of the Timer class with a given
	interval, set its run() method to a custom function to be invoked and
	eventually call stop() to stop the Timer.

	Note that a running Timer may or may not prevent the program to exit
	automatically when main() returns.

	It is also possible to extend this class and override its run() method in
	the child class.</haxe_doc>
	</class>
	<abstract path="haxe.Ucs2" params="" file="C:\HaxeToolkit\haxe\std/haxe/Ucs2.hx">
		<this><c path="String"/></this>
		<haxe_doc>Cross platform UCS2 string API.</haxe_doc>
		<impl><class path="haxe._Ucs2.Ucs2_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Ucs2.hx" private="1" module="haxe.Ucs2">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
	</length>
	<_new get="inline" set="null" line="31" static="1">
		<f a="str">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
	</_new>
	<get_length get="inline" set="null" line="40" static="1">
		<f a="this">
			<c path="String"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
	</get_length>
	<toUpperCase public="1" get="inline" set="null" line="49" static="1">
		<f a="this">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
	</toUpperCase>
	<toLowerCase public="1" get="inline" set="null" line="58" static="1">
		<f a="this">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
	</toLowerCase>
	<charAt public="1" get="inline" set="null" line="68" static="1">
		<f a="this:index">
			<c path="String"/>
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns the character at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, the empty Ucs2 ""
		is returned.</haxe_doc>
	</charAt>
	<charCodeAt public="1" get="inline" set="null" line="81" static="1">
		<f a="this:index">
			<c path="String"/>
			<x path="Int"/>
			<t path="Null"><x path="Int"/></t>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns the character code at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, null is returned.

		To obtain the character code of a single character, "x".code can be used
		instead to @:extern public inline the character code at compile time. Note that this
		only works on Ucs2 literals of length 1.</haxe_doc>
	</charCodeAt>
	<indexOf public="1" get="inline" set="null" line="96" static="1">
		<f a="this:str:?startIndex">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns the position of the leftmost occurence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 starting from `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
	</indexOf>
	<lastIndexOf public="1" get="inline" set="null" line="111" static="1">
		<f a="this:str:?startIndex">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns the position of the rightmost occurence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 from 0 to `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
	</lastIndexOf>
	<split public="1" get="inline" set="null" line="135" static="1">
		<f a="this:delimiter">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
			<c path="Array"><x path="haxe.Ucs2"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Splits `this` Ucs2 at each occurence of `delimiter`.

		If `this` Ucs2 is the empty Ucs2 "", the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty Ucs2 "", `this` Ucs2 is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` Ucs2.

		If `delimiter` is not found within `this` Ucs2, the result is an Array
		with one element, which equals `this` Ucs2.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` Ucs2 is split into parts at each occurence of
		`delimiter`. If `this` Ucs2 starts (or ends) with [delimiter}, the
		result Array contains a leading (or trailing) empty Ucs2 "" element.
		Two subsequent delimiters also result in an empty Ucs2 "" element.</haxe_doc>
	</split>
	<substr public="1" get="inline" set="null" line="154" static="1">
		<f a="this:pos:?len">
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns `len` characters of `this` Ucs2, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` Ucs2 are included.

		If `pos` is negative, its value is calculated from the end of `this`
		Ucs2 by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` Ucs2 are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
	</substr>
	<substring public="1" get="inline" set="null" line="171" static="1">
		<f a="this:startIndex:?endIndex">
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns the part of `this` Ucs2 from `startIndex` to `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		Ucs2 "" is returned.</haxe_doc>
	</substring>
	<toNativeString public="1" get="inline" set="null" line="178" static="1">
		<f a="this">
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns the native underlying String.</haxe_doc>
	</toNativeString>
	<fromCharCode public="1" get="inline" set="null" line="188" static="1">
		<f a="code">
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta><m n=":extern"/></meta>
		<haxe_doc>Returns the Ucs2 corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
	</fromCharCode>
</class></impl>
	</abstract>
	<class path="haxe._Ucs2.Ucs2_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Ucs2.hx" private="1" module="haxe.Ucs2">
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
		</length>
		<_new get="inline" set="null" line="31" static="1">
			<f a="str">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
		</_new>
		<get_length get="inline" set="null" line="40" static="1">
			<f a="this">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
		</get_length>
		<toUpperCase public="1" get="inline" set="null" line="49" static="1">
			<f a="this">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" get="inline" set="null" line="58" static="1">
			<f a="this">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<charAt public="1" get="inline" set="null" line="68" static="1">
			<f a="this:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns the character at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, the empty Ucs2 ""
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" get="inline" set="null" line="81" static="1">
			<f a="this:index">
				<c path="String"/>
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns the character code at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, null is returned.

		To obtain the character code of a single character, "x".code can be used
		instead to @:extern public inline the character code at compile time. Note that this
		only works on Ucs2 literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" get="inline" set="null" line="96" static="1">
			<f a="this:str:?startIndex">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns the position of the leftmost occurence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 starting from `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" get="inline" set="null" line="111" static="1">
			<f a="this:str:?startIndex">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns the position of the rightmost occurence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 from 0 to `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" get="inline" set="null" line="135" static="1">
			<f a="this:delimiter">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
				<c path="Array"><x path="haxe.Ucs2"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Splits `this` Ucs2 at each occurence of `delimiter`.

		If `this` Ucs2 is the empty Ucs2 "", the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty Ucs2 "", `this` Ucs2 is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` Ucs2.

		If `delimiter` is not found within `this` Ucs2, the result is an Array
		with one element, which equals `this` Ucs2.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` Ucs2 is split into parts at each occurence of
		`delimiter`. If `this` Ucs2 starts (or ends) with [delimiter}, the
		result Array contains a leading (or trailing) empty Ucs2 "" element.
		Two subsequent delimiters also result in an empty Ucs2 "" element.</haxe_doc>
		</split>
		<substr public="1" get="inline" set="null" line="154" static="1">
			<f a="this:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns `len` characters of `this` Ucs2, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` Ucs2 are included.

		If `pos` is negative, its value is calculated from the end of `this`
		Ucs2 by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` Ucs2 are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" get="inline" set="null" line="171" static="1">
			<f a="this:startIndex:?endIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns the part of `this` Ucs2 from `startIndex` to `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		Ucs2 "" is returned.</haxe_doc>
		</substring>
		<toNativeString public="1" get="inline" set="null" line="178" static="1">
			<f a="this">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns the native underlying String.</haxe_doc>
		</toNativeString>
		<fromCharCode public="1" get="inline" set="null" line="188" static="1">
			<f a="code">
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta><m n=":extern"/></meta>
			<haxe_doc>Returns the Ucs2 corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
	</class>
	<class path="haxe.Unserializer" params="" file="C:\HaxeToolkit\haxe\std/haxe/Unserializer.hx">
		<DEFAULT_RESOLVER public="1" expr="Type" line="60" static="1">
			<t path="haxe.TypeResolver"/>
			<meta><m n=":value"><e>Type</e></m></meta>
			<haxe_doc><![CDATA[This value can be set to use custom type resolvers.

		A type resolver finds a Class or Enum instance from a given String. By
		default, the haxe Type Api is used.

		A type resolver must provide two methods:

		1. resolveClass(name:String):Class<Dynamic> is called to determine a
				Class from a class name
		2. resolveEnum(name:String):Enum<Dynamic> is called to determine an
				Enum from an enum name

		This value is applied when a new Unserializer instance is created.
		Changing it afterwards has no effect on previously created instances.]]></haxe_doc>
		</DEFAULT_RESOLVER>
		<BASE64 expr="Serializer.BASE64" line="62" static="1">
			<c path="String"/>
			<meta>
				<m n=":value"><e>Serializer.BASE64</e></m>
				<m n=":access"><e>haxe.Serializer</e></m>
			</meta>
		</BASE64>
		<CODES expr="null" line="65" static="1">
			<c path="flash.utils.ByteArray"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</CODES>
		<initCodes set="method" line="67" static="1"><f a=""><c path="flash.utils.ByteArray"/></f></initCodes>
		<run public="1" set="method" line="459" static="1">
			<f a="v">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Unserializes `v` and returns the according value.

		This is a convenience function for creating a new instance of
		Unserializer with `v` as buffer and calling its unserialize() method
		once.</haxe_doc>
		</run>
		<buf><c path="String"/></buf>
		<pos><x path="Int"/></pos>
		<length><x path="Int"/></length>
		<cache><c path="Array"><d/></c></cache>
		<scache><c path="Array"><c path="String"/></c></scache>
		<resolver><t path="haxe.TypeResolver"/></resolver>
		<setResolver public="1" set="method" line="124">
			<f a="r">
				<t path="haxe.TypeResolver"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the type resolver of `this` Unserializer instance to `r`.

		If `r` is null, a special resolver is used which returns null for all
		input values.

		See DEFAULT_RESOLVER for more information on type resolvers.</haxe_doc>
		</setResolver>
		<getResolver public="1" set="method" line="139">
			<f a=""><t path="haxe.TypeResolver"/></f>
			<haxe_doc>Gets the type resolver of `this` Unserializer instance.

		See DEFAULT_RESOLVER for more information on type resolvers.</haxe_doc>
		</getResolver>
		<get get="inline" set="null" line="143"><f a="p">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<readDigits set="method" line="147"><f a=""><x path="Int"/></f></readDigits>
		<readFloat set="method" line="172"><f a=""><x path="Float"/></f></readFloat>
		<unserializeObject set="method" line="185"><f a="o">
	<a/>
	<x path="Void"/>
</f></unserializeObject>
		<unserializeEnum set="method" line="200"><f a="edecl:tag">
	<x path="Enum"><unknown/></x>
	<c path="String"/>
	<unknown/>
</f></unserializeEnum>
		<unserialize public="1" set="method" line="232">
			<f a=""><d/></f>
			<haxe_doc>Unserializes the next part of `this` Unserializer instance and returns
		the according value.

		This function may call `this.resolver.resolveClass` to determine a
		Class from a String, and `this.resolver.resolveEnum` to determine an
		Enum from a String.

		If `this` Unserializer instance contains no more or invalid data, an
		exception is thrown.

		This operation may fail on structurally valid data if a type cannot be
		resolved or if a field cannot be set. This can happen when unserializing
		Strings that were serialized on a different haxe target, in which the
		serialization side has to make sure not to include platform-specific
		data.

		Classes are created from Type.createEmptyInstance, which means their
		constructors are not called.</haxe_doc>
		</unserialize>
		<new public="1" set="method" line="99">
			<f a="buf">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Unserializer instance, with its internal buffer
		initialized to `buf`.

		This does not parse `buf` immediately. It is parsed only when calls to
		`this.unserialize` are made.

		Each Unserializer instance maintains its own cache.</haxe_doc>
		</new>
		<haxe_doc>The Unserializer class is the complement to the Serializer class. It parses
	a serialization String and creates objects from the contained data.

	This class can be used in two ways:

	- create a new Unserializer() instance with a given serialization
		String, then call its unserialize() method until all values are
		extracted
	- call Unserializer.run() to unserialize a single value from a given
		String</haxe_doc>
	</class>
	<class path="haxe.Utf8" params="" file="C:\HaxeToolkit\haxe\std/haxe/Utf8.hx">
		<iter public="1" set="method" line="56" static="1">
			<f a="s:chars">
				<c path="String"/>
				<f a="">
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Call the `chars` function for each UTF8 char of the string.</haxe_doc>
		</iter>
		<encode public="1" set="method" line="64" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encode the input ISO string into the corresponding UTF8 one.</haxe_doc>
		</encode>
		<decode public="1" set="method" line="72" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Decode an UTF8 string back to an ISO string.
		Throw an exception if a given UTF8 character is not supported by the decoder.</haxe_doc>
		</decode>
		<charCodeAt public="1" get="inline" set="null" line="79" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Similar to `String.charCodeAt` but uses the UTF8 character position.</haxe_doc>
		</charCodeAt>
		<validate public="1" get="inline" set="null" line="86" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the String is correctly encoded as UTF8.</haxe_doc>
		</validate>
		<length public="1" get="inline" set="null" line="94" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of UTF8 chars of the String.</haxe_doc>
		</length>
		<compare public="1" set="method" line="101" static="1">
			<f a="a:b">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compare two UTF8 strings, character by character.</haxe_doc>
		</compare>
		<sub public="1" get="inline" set="null" line="108" static="1">
			<f a="s:pos:len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>This is similar to `String.substr` but the `pos` and `len` parts are considering UTF8 characters.</haxe_doc>
		</sub>
		<__b><c path="String"/></__b>
		<addChar public="1" get="inline" set="null" line="42">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Add the given UTF8 character code to the buffer.</haxe_doc>
		</addChar>
		<toString public="1" get="inline" set="null" line="49">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the buffer converted to a String;</haxe_doc>
		</toString>
		<new public="1" set="method" line="35">
			<f a="?size">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allocate a new Utf8 buffer using an optional bytes size.</haxe_doc>
		</new>
		<haxe_doc>Since all platforms does not guarantee that String always uses UTF-8 encoding, you
	can use this crossplatform API to perform operations on such strings.</haxe_doc>
	</class>
	<class path="haxe.crypto.Adler32" params="" file="C:\HaxeToolkit\haxe\std/haxe/crypto/Adler32.hx">
		<read public="1" set="method" line="60" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="haxe.crypto.Adler32"/>
</f></read>
		<make public="1" set="method" line="71" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></make>
		<a1><x path="Int"/></a1>
		<a2><x path="Int"/></a2>
		<get public="1" set="method" line="37"><f a=""><x path="Int"/></f></get>
		<update public="1" set="method" line="41"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update>
		<equals public="1" set="method" line="52"><f a="a">
	<c path="haxe.crypto.Adler32"/>
	<x path="Bool"/>
</f></equals>
		<toString public="1" set="method" line="56"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Calculates the Adler32 of the given Bytes.</haxe_doc>
	</class>
	<class path="haxe.io.Bytes" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="455" static="1"><f a="length">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></alloc>
		<ofString public="1" set="method" line="482" static="1"><f a="s">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></ofString>
		<ofData public="1" set="method" line="540" static="1"><f a="b">
	<t path="haxe.io.BytesData"/>
	<c path="haxe.io.Bytes"/>
</f></ofData>
		<fastGet public="1" get="inline" set="null" line="558" static="1">
			<f a="b:pos">
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Read the most efficiently possible the n-th byte of the data.
		Behavior when reading outside of the available data is unspecified.</haxe_doc>
		</fastGet>
		<length public="1" set="null"><x path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<get public="1" get="inline" set="null" line="41"><f a="pos">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<set public="1" get="inline" set="null" line="59"><f a="pos:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<blit public="1" set="method" line="79"><f a="pos:src:srcpos:len">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blit>
		<fill public="1" set="method" line="114"><f a="pos:len:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></fill>
		<sub public="1" set="method" line="133"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></sub>
		<compare public="1" set="method" line="161"><f a="other">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></compare>
		<getDouble public="1" set="method" line="213">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the IEEE double precision value at given position (in low endian encoding).
		Result is unspecified if reading outside of the bounds</haxe_doc>
		</getDouble>
		<getFloat public="1" set="method" line="232">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the IEEE single precision value at given position (in low endian encoding).
		Result is unspecified if reading outside of the bounds</haxe_doc>
		</getFloat>
		<setDouble public="1" set="method" line="252">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the IEEE double precision value at given position in low endian encoding.
		Result is unspecified if writing outside of the bounds.</haxe_doc>
		</setDouble>
		<setFloat public="1" set="method" line="275">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the IEEE single precision value at given position in low endian encoding.
		Result is unspecified if writing outside of the bounds.</haxe_doc>
		</setFloat>
		<getUInt16 public="1" get="inline" set="null" line="294">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 16 bit unsignged integer at given position (in low endian encoding).</haxe_doc>
		</getUInt16>
		<setUInt16 public="1" get="inline" set="null" line="305">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Returns the 16 bit unsignged integer at given position (in low endian encoding).</haxe_doc>
		</setUInt16>
		<getInt32 public="1" get="inline" set="null" line="317">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 32 bit integer at given position (in low endian encoding).</haxe_doc>
		</getInt32>
		<getInt64 public="1" get="inline" set="null" line="331">
			<f a="pos">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Returns the 64 bit integer at given position (in low endian encoding).</haxe_doc>
		</getInt64>
		<setInt32 public="1" get="inline" set="null" line="338">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the 32 bit integer at given position (in low endian encoding).</haxe_doc>
		</setInt32>
		<setInt64 public="1" get="inline" set="null" line="352">
			<f a="pos:v">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the 64 bit integer at given position (in low endian encoding).</haxe_doc>
		</setInt64>
		<getString public="1" set="method" line="357"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></getString>
		<readString public="1" get="inline" set="null" line="412">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":deprecated"><e>"readString is deprecated, use getString instead"</e></m>
				<m n=":noCompletion"/>
			</meta>
		</readString>
		<toString public="1" set="method" line="416"><f a=""><c path="String"/></f></toString>
		<toHex public="1" set="method" line="437"><f a=""><c path="String"/></f></toHex>
		<getData public="1" get="inline" set="null" line="451"><f a=""><t path="haxe.io.BytesData"/></f></getData>
		<new set="method" line="33"><f a="length:b">
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.crypto.Base64" params="" file="C:\HaxeToolkit\haxe\std/haxe/crypto/Base64.hx">
		<CHARS public="1" set="null" expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;" line="29" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</e></m></meta>
		</CHARS>
		<BYTES public="1" set="null" expr="haxe.io.Bytes.ofString(CHARS)" line="30" static="1">
			<c path="haxe.io.Bytes"/>
			<meta><m n=":value"><e>haxe.io.Bytes.ofString(CHARS)</e></m></meta>
		</BYTES>
		<encode public="1" set="method" line="32" static="1">
			<f a="bytes:?complement" v=":true">
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{complement:true}</e></m></meta>
		</encode>
		<decode public="1" set="method" line="45" static="1">
			<f a="str:?complement" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{complement:true}</e></m></meta>
		</decode>
		<haxe_doc>Allows to encode/decode String and bytes using Base64 encoding.</haxe_doc>
	</class>
	<class path="haxe.crypto.BaseCode" params="" file="C:\HaxeToolkit\haxe\std/haxe/crypto/BaseCode.hx">
		<encode public="1" set="method" line="127" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<decode public="1" set="method" line="132" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></decode>
		<base><c path="haxe.io.Bytes"/></base>
		<nbits><x path="Int"/></nbits>
		<tbl><c path="Array"><x path="Int"/></c></tbl>
		<encodeBytes public="1" set="method" line="44"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></encodeBytes>
		<initTable set="method" line="72"><f a=""><x path="Void"/></f></initTable>
		<decodeBytes public="1" set="method" line="81"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></decodeBytes>
		<encodeString public="1" set="method" line="111"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encodeString>
		<decodeString public="1" set="method" line="119"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></decodeString>
		<new public="1" set="method" line="33"><f a="base">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Allows to encode/decode String and bytes using a power of two base dictionnary.</haxe_doc>
	</class>
	<class path="haxe.crypto.Crc32" params="" file="C:\HaxeToolkit\haxe\std/haxe/crypto/Crc32.hx">
		<make public="1" set="method" line="67" static="1">
			<f a="data">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Calculates the CRC32 of the given data bytes</haxe_doc>
		</make>
		<crc><x path="Int"/></crc>
		<byte public="1" set="method" line="35"><f a="b">
	<x path="Int"/>
	<x path="Void"/>
</f></byte>
		<update public="1" set="method" line="46"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update>
		<get public="1" set="method" line="60"><f a=""><x path="Int"/></f></get>
		<new public="1" set="method" line="31"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Calculates the Crc32 of the given Bytes.</haxe_doc>
	</class>
	<enum path="haxe.crypto.HashMethod" params="" file="C:\HaxeToolkit\haxe\std/haxe/crypto/Hmac.hx" module="haxe.crypto.Hmac">
		<MD5/>
		<SHA1/>
		<SHA256/>
		<haxe_doc>Hash methods for Hmac calculation.</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="haxe.crypto.Hmac" params="" file="C:\HaxeToolkit\haxe\std/haxe/crypto/Hmac.hx">
		<method><e path="haxe.crypto.HashMethod"/></method>
		<blockSize><x path="Int"/></blockSize>
		<length><x path="Int"/></length>
		<doHash get="inline" set="null" line="54"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></doHash>
		<nullPad set="method" line="62"><f a="s:chunkLen">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></nullPad>
		<make public="1" set="method" line="73"><f a="key:msg">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<new public="1" set="method" line="42"><f a="hashMethod">
	<e path="haxe.crypto.HashMethod"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Calculates a Hmac of the given Bytes using a HashMethod.</haxe_doc>
	</class>
	<class path="haxe.crypto.Md5" params="" file="C:\HaxeToolkit\haxe\std/haxe/crypto/Md5.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="41" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<bytes2blks set="method" line="110" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><x path="Int"/></c>
</f></bytes2blks>
		<str2blks set="method" line="139" static="1"><f a="str">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<bitOR set="method" line="76"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitOR>
		<bitXOR set="method" line="82"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitXOR>
		<bitAND set="method" line="88"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitAND>
		<addme set="method" line="94"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></addme>
		<hex set="method" line="100"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<rol set="method" line="168"><f a="num:cnt">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></rol>
		<cmn set="method" line="172"><f a="q:a:b:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></cmn>
		<ff set="method" line="176"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ff>
		<gg set="method" line="180"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></gg>
		<hh set="method" line="184"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></hh>
		<ii set="method" line="188"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ii>
		<doEncode set="method" line="192"><f a="x">
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<new set="method" line="73"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a MD5 of a String.</haxe_doc>
	</class>
	<class path="haxe.crypto.Sha1" params="" file="C:\HaxeToolkit\haxe\std/haxe/crypto/Sha1.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="39" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<str2blks set="method" line="107" static="1"><f a="s">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<bytes2blks set="method" line="124" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><x path="Int"/></c>
</f></bytes2blks>
		<doEncode set="method" line="61"><f a="x">
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<rol get="inline" set="null" line="144">
			<f a="num:cnt">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Bitwise rotate a 32-bit number to the left</haxe_doc>
		</rol>
		<ft set="method" line="151">
			<f a="t:b:c:d">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Perform the appropriate triplet combination function for the current iteration</haxe_doc>
		</ft>
		<kt set="method" line="161">
			<f a="t">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Determine the appropriate additive constant for the current iteration</haxe_doc>
		</kt>
		<hex set="method" line="171"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<new set="method" line="58"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a Sha1 of a String.</haxe_doc>
	</class>
	<class path="haxe.crypto.Sha224" params="" file="C:\HaxeToolkit\haxe\std/haxe/crypto/Sha224.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="39" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<str2blks set="method" line="135" static="1"><f a="s">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<safeAdd set="method" line="151" static="1"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></safeAdd>
		<doEncode set="method" line="59"><f a="str:strlen">
	<c path="String"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<ROTR set="method" line="158"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ROTR>
		<SHR set="method" line="163"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></SHR>
		<Ch set="method" line="168"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Ch>
		<Maj set="method" line="173"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Maj>
		<Sigma0 set="method" line="177"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma0>
		<Sigma1 set="method" line="181"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma1>
		<Gamma0 set="method" line="185"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma0>
		<Gamma1 set="method" line="189"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma1>
		<hex set="method" line="193"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<new public="1" set="method" line="56"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a Sha224 of a String.</haxe_doc>
	</class>
	<class path="haxe.crypto.Sha256" params="" file="C:\HaxeToolkit\haxe\std/haxe/crypto/Sha256.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="39" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<str2blks set="method" line="115" static="1"><f a="s">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<bytes2blks set="method" line="132" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><x path="Int"/></c>
</f></bytes2blks>
		<doEncode set="method" line="59"><f a="m:l">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<S set="method" line="149"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></S>
		<R set="method" line="153"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></R>
		<Ch set="method" line="157"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Ch>
		<Maj set="method" line="161"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Maj>
		<Sigma0256 set="method" line="165"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma0256>
		<Sigma1256 set="method" line="169"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma1256>
		<Gamma0256 set="method" line="173"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma0256>
		<Gamma1256 set="method" line="177"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma1256>
		<safeAdd set="method" line="181"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></safeAdd>
		<hex set="method" line="187"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<new public="1" set="method" line="56"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a Sha256 of a String.</haxe_doc>
	</class>
	<class path="haxe.ds.ArraySort" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/ArraySort.hx">
		<sort public="1" params="T" set="method" line="43" static="1">
			<f a="a:cmp">
				<c path="Array"><c path="sort.T"/></c>
				<f a=":">
					<c path="sort.T"/>
					<c path="sort.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts Array `a` according to the comparison function `cmp`, where
		`cmp(x,y)` returns 0 if `x == y`, a positive Int if `x > y` and a
		negative Int if `x < y`.

		This operation modifies Array `a` in place.

		This operation is stable: The order of equal elements is preserved.

		If `a` or `cmp` are null, the result is unspecified.]]></haxe_doc>
		</sort>
		<rec params="T" set="method" line="47" static="1"><f a="a:cmp:from:to">
	<c path="Array"><c path="rec.T"/></c>
	<f a=":">
		<c path="rec.T"/>
		<c path="rec.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rec>
		<doMerge params="T" set="method" line="68" static="1"><f a="a:cmp:from:pivot:to:len1:len2">
	<c path="Array"><c path="doMerge.T"/></c>
	<f a=":">
		<c path="doMerge.T"/>
		<c path="doMerge.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></doMerge>
		<rotate params="T" set="method" line="94" static="1"><f a="a:cmp:from:mid:to">
	<c path="Array"><c path="rotate.T"/></c>
	<f a=":">
		<c path="doMerge.T"/>
		<c path="doMerge.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rotate>
		<gcd set="method" line="112" static="1"><f a="m:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></gcd>
		<upper params="T" set="method" line="121" static="1"><f a="a:cmp:from:to:val">
	<c path="Array"><c path="upper.T"/></c>
	<f a=":">
		<c path="upper.T"/>
		<c path="upper.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></upper>
		<lower params="T" set="method" line="136" static="1"><f a="a:cmp:from:to:val">
	<c path="Array"><c path="lower.T"/></c>
	<f a=":">
		<c path="lower.T"/>
		<c path="lower.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lower>
		<swap params="T" set="method" line="150" static="1"><f a="a:i:j">
	<c path="Array"><c path="swap.T"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></swap>
		<compare params="T" get="inline" set="null" line="156" static="1"><f a="a:cmp:i:j">
	<c path="Array"><c path="compare.T"/></c>
	<f a=":">
		<c path="compare.T"/>
		<c path="compare.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></compare>
		<haxe_doc>ArraySort provides a stable implementation of merge sort through its `sort`
	method. It should be used instead of `Array.sort` in cases where the order
	of equal elements has to be retained on all targets.</haxe_doc>
	</class>
	<class path="haxe.ds.BalancedTree" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx">
		<root><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></root>
		<set public="1" set="method" line="50">
			<f a="key:value">
				<c path="haxe.ds.BalancedTree.K"/>
				<c path="haxe.ds.BalancedTree.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds `key` to `value`.

		If `key` is already bound to a value, that binding disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" set="method" line="61">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<t path="Null"><c path="haxe.ds.BalancedTree.V"/></t>
			</f>
			<haxe_doc>Returns the value `key` is bound to.

		If `key` is not bound to any value, `null` is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<remove public="1" set="method" line="82">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the current binding of `key`.

		If `key` has no binding, `this` BalancedTree is unchanged and false is
		returned.

		Otherwise the binding of `key` is removed and true is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="99">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `key` is bound to a value.

		This method returns true even if `key` is bound to null.

		If `key` is null, the result is unspecified.</haxe_doc>
		</exists>
		<iterator public="1" set="method" line="115">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.V"/></t></f>
			<haxe_doc>Iterates over the bound values of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</iterator>
		<keys public="1" set="method" line="126">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.K"/></t></f>
			<haxe_doc>Iterates over the keys of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</keys>
		<setLoop set="method" line="132"><f a="k:v:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></setLoop>
		<removeLoop set="method" line="145"><f a="k:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeLoop>
		<iteratorLoop set="method" line="153"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="Array"><c path="haxe.ds.BalancedTree.V"/></c>
	<x path="Void"/>
</f></iteratorLoop>
		<keysLoop set="method" line="161"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="Array"><c path="haxe.ds.BalancedTree.K"/></c>
	<x path="Void"/>
</f></keysLoop>
		<merge set="method" line="169"><f a="t1:t2">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></merge>
		<minBinding set="method" line="176"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></minBinding>
		<removeMinBinding set="method" line="182"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeMinBinding>
		<balance set="method" line="187"><f a="l:k:v:r">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></balance>
		<compare set="method" line="201"><f a="k1:k2">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.K"/>
	<x path="Int"/>
</f></compare>
		<toString public="1" set="method" line="205"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="41">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new BalancedTree, which is initially empty.</haxe_doc>
		</new>
		<haxe_doc>BalancedTree allows key-value mapping with arbitrary keys, as long as they
	can be ordered. By default, `Reflect.compare` is used in the `compare`
	method, which can be overridden in subclasses.

	Operations have a logarithmic average and worst-case cost.

	Iteration over keys and values, using `keys` and `iterator` respectively,
	are in-order.</haxe_doc>
	</class>
	<class path="haxe.ds.TreeNode" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx" module="haxe.ds.BalancedTree">
		<left public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></left>
		<right public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></right>
		<key public="1"><c path="haxe.ds.TreeNode.K"/></key>
		<value public="1"><c path="haxe.ds.TreeNode.V"/></value>
		<_height><x path="Int"/></_height>
		<get_height public="1" get="inline" set="null" line="231">
			<f a=""><x path="Int"/></f>
			<meta><m n=":extern"/></meta>
		</get_height>
		<toString public="1" set="method" line="233"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="220">
			<f a="l:k:v:r:?h" v="::::-1">
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<c path="haxe.ds.TreeNode.K"/>
				<c path="haxe.ds.TreeNode.V"/>
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{h:-1}</e></m></meta>
		</new>
	</class>
	<enum path="haxe.ds.Either" params="L:R" file="C:\HaxeToolkit\haxe\std/haxe/ds/Either.hx">
		<Left a="v"><c path="haxe.ds.Either.L"/></Left>
		<Right a="v"><c path="haxe.ds.Either.R"/></Right>
		<haxe_doc>Either represents values which are either of type `L` (Left) or type `R`
	(Right).</haxe_doc>
	</enum>
	<class path="haxe.ds.EnumValueMap" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/ds/EnumValueMap.hx">
		<extends path="haxe.ds.BalancedTree">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</extends>
		<implements path="haxe.IMap">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</implements>
		<compare set="method" line="33" override="1"><f a="k1:k2">
	<x path="EnumValue"/>
	<x path="EnumValue"/>
	<x path="Int"/>
</f></compare>
		<compareArgs set="method" line="42"><f a="a1:a2">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<x path="Int"/>
</f></compareArgs>
		<compareArg set="method" line="52"><f a="v1:v2">
	<d/>
	<d/>
	<x path="Int"/>
</f></compareArg>
		<new public="1" set="method" line="31"><f a=""><x path="Void"/></f></new>
		<haxe_doc>EnumValueMap allows mapping of enum value keys to arbitrary values.

	Keys are compared by value and recursively over their parameters. If any
	parameter is not an enum value, `Reflect.compare` is used to compare them.</haxe_doc>
	</class>
	<class path="haxe.ds.GenericCell" params="T" file="C:\HaxeToolkit\haxe\std/haxe/ds/GenericStack.hx" module="haxe.ds.GenericStack">
		<elt public="1"><c path="haxe.ds.GenericCell.T"/></elt>
		<next public="1"><c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericCell.T"/></c></next>
		<new public="1" set="method" line="30"><f a="elt:next">
	<c path="haxe.ds.GenericCell.T"/>
	<c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericCell.T"/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":generic"/></meta>
	</class>
	<class path="haxe.ds.GenericStack" params="T" file="C:\HaxeToolkit\haxe\std/haxe/ds/GenericStack.hx">
		<head public="1"><c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericStack.T"/></c></head>
		<add public="1" get="inline" set="null" line="73">
			<f a="item">
				<c path="haxe.ds.GenericStack.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Pushes element `item` onto the stack.</haxe_doc>
		</add>
		<first public="1" get="inline" set="null" line="82">
			<f a=""><t path="Null"><c path="haxe.ds.GenericStack.T"/></t></f>
			<haxe_doc>Returns the topmost stack element without removing it.

		If the stack is empty, null is returned.</haxe_doc>
		</first>
		<pop public="1" get="inline" set="null" line="91">
			<f a=""><t path="Null"><c path="haxe.ds.GenericStack.T"/></t></f>
			<haxe_doc>Returns the topmost stack element and removes it.

		If the stack is empty, null is returned.</haxe_doc>
		</pop>
		<isEmpty public="1" get="inline" set="null" line="104">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if the stack is empty.</haxe_doc>
		</isEmpty>
		<remove public="1" set="method" line="117">
			<f a="v">
				<c path="haxe.ds.GenericStack.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first element which is equal to `v` according to the `==`
		operator.

		This method traverses the stack until it finds a matching element and
		unlinks it, returning true.

		If no matching element is found, false is returned.</haxe_doc>
		</remove>
		<iterator public="1" set="method" line="148">
			<f a=""><t path="Iterator"><c path="haxe.ds.GenericStack.T"/></t></f>
			<haxe_doc>Returns an iterator over the elements of `this` GenericStack.</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="166">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of `this` GenericStack.</haxe_doc>
		</toString>
		<new public="1" set="method" line="67">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty GenericStack.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A stack of elements.

	This class is generic, which means one type is generated for each type
	parameter T on static targets. For example:

	- `new GenericStack<Int>()` generates `GenericStack_Int`
	- `new GenericStack<String>()` generates `GenericStack_String`

	The generated name is an implementation detail and should not be relied
	upon.]]></haxe_doc>
		<meta><m n=":generic"/></meta>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/ds/HashMap.hx">
		<this><c path="haxe.ds._HashMap.HashMapData">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</c></this>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
	<_new public="1" get="inline" set="null" line="25" static="1">
		<f a=""><x path="haxe.ds.HashMap">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</x></f>
		<meta><m n=":impl"/></meta>
	</_new>
	<set public="1" get="inline" set="null" line="28" static="1">
		<f a="this:k:v">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<c path="haxe.ds.HashMap.V"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set>
	<get public="1" get="inline" set="null" line="32" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<t path="Null"><c path="haxe.ds.HashMap.V"/></t>
		</f>
		<meta><m n=":impl"/></meta>
	</get>
	<exists public="1" get="inline" set="null" line="35" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</exists>
	<remove public="1" get="inline" set="null" line="38" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</remove>
	<keys public="1" get="inline" set="null" line="42" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.HashMap.K"/></t>
		</f>
		<meta><m n=":impl"/></meta>
	</keys>
	<iterator public="1" get="inline" set="null" line="45" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.HashMap.V"/></t>
		</f>
		<meta><m n=":impl"/></meta>
	</iterator>
</class></impl>
	</abstract>
	<class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
		<_new public="1" get="inline" set="null" line="25" static="1">
			<f a=""><x path="haxe.ds.HashMap">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</x></f>
			<meta><m n=":impl"/></meta>
		</_new>
		<set public="1" get="inline" set="null" line="28" static="1">
			<f a="this:k:v">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set>
		<get public="1" get="inline" set="null" line="32" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<t path="Null"><c path="haxe.ds.HashMap.V"/></t>
			</f>
			<meta><m n=":impl"/></meta>
		</get>
		<exists public="1" get="inline" set="null" line="35" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</exists>
		<remove public="1" get="inline" set="null" line="38" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</remove>
		<keys public="1" get="inline" set="null" line="42" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.HashMap.K"/></t>
			</f>
			<meta><m n=":impl"/></meta>
		</keys>
		<iterator public="1" get="inline" set="null" line="45" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.HashMap.V"/></t>
			</f>
			<meta><m n=":impl"/></meta>
		</iterator>
	</class>
	<class path="haxe.ds._HashMap.HashMapData" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
		<keys public="1"><c path="haxe.ds.IntMap"><c path="haxe.ds._HashMap.HashMapData.K"/></c></keys>
		<values public="1"><c path="haxe.ds.IntMap"><c path="haxe.ds._HashMap.HashMapData.V"/></c></values>
		<new public="1" get="inline" set="null" line="53"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ds.IntMap" params="T" file="C:\HaxeToolkit\haxe\std/flash/_std/haxe/ds/IntMap.hx">
		<implements path="haxe.IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<h><c path="flash.utils.Dictionary"/></h>
		<set public="1" get="inline" set="null" line="32">
			<f a="key:value">
				<x path="Int"/>
				<c path="haxe.ds.IntMap.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="36">
			<f a="key">
				<x path="Int"/>
				<t path="Null"><c path="haxe.ds.IntMap.T"/></t>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="40">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="44">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="50">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="54">
			<f a=""><t path="Iterator"><c path="haxe.ds.IntMap.T"/></t></f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":analyzer"><e>ignore</e></m>
			</meta>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="63">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" set="method" line="28">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new IntMap.</haxe_doc>
		</new>
		<haxe_doc>IntMap allows mapping of Int keys to arbitrary values.

	See `Map` for documentation details.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.ds.ListSort" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/ListSort.hx">
		<sort public="1" params="T" get="inline" set="null" line="43" static="1">
			<f a="list:cmp">
				<c path="sort.T"/>
				<f a=":">
					<c path="sort.T"/>
					<c path="sort.T"/>
					<x path="Int"/>
				</f>
				<c path="sort.T"/>
			</f>
			<haxe_doc><![CDATA[Sorts List `lst` according to the comparison function `cmp`, where
		`cmp(x,y)` returns 0 if `x == y`, a positive Int if `x > y` and a
		negative Int if `x < y`.

		This operation modifies List `a` in place and returns its head once modified.
		The `prev` of the head is set to the tail of the sorted list.

		If `list` or `cmp` are null, the result is unspecified.]]></haxe_doc>
		</sort>
		<sortSingleLinked public="1" params="T" get="inline" set="null" line="100" static="1">
			<f a="list:cmp">
				<c path="sortSingleLinked.T"/>
				<f a=":">
					<c path="sortSingleLinked.T"/>
					<c path="sortSingleLinked.T"/>
					<x path="Int"/>
				</f>
				<c path="sortSingleLinked.T"/>
			</f>
			<haxe_doc>Same as [sort] but on single linked list.</haxe_doc>
		</sortSingleLinked>
		<haxe_doc>ListSort provides a stable implementation of merge sort through its `sort`
	method. It has a O(N.log(N)) complexity and does not require additional memory allocation</haxe_doc>
	</class>
	<class path="haxe.ds.ObjectMap" params="K:V" file="C:\HaxeToolkit\haxe\std/flash/_std/haxe/ds/ObjectMap.hx">
		<extends path="flash.utils.Dictionary"/>
		<implements path="haxe.IMap">
			<c path="haxe.ds.ObjectMap.K"/>
			<c path="haxe.ds.ObjectMap.V"/>
		</implements>
		<get public="1" get="inline" set="null" line="10">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<t path="Null"><c path="haxe.ds.ObjectMap.V"/></t>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="14">
			<f a="key:value">
				<c path="haxe.ds.ObjectMap.K"/>
				<c path="haxe.ds.ObjectMap.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<exists public="1" get="inline" set="null" line="18">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="22">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="42">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.K"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="46">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="52">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" set="method" line="6">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new ObjectMap.</haxe_doc>
		</new>
		<haxe_doc>ObjectMap allows mapping of object keys to arbitrary values.

	On static targets, the keys are considered to be strong references. Refer
	to `haxe.ds.WeakMap` for a weak reference version.

	See `Map` for documentation details.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.ds._ObjectMap.NativePropertyIterator" params="" file="C:\HaxeToolkit\haxe\std/flash/_std/haxe/ds/ObjectMap.hx" private="1" module="haxe.ds.ObjectMap">
		<iterator public="1" get="inline" set="null" line="68" static="1"><f a="collection">
	<d/>
	<c path="haxe.ds._ObjectMap.NativePropertyIterator"/>
</f></iterator>
		<collection><d/></collection>
		<index expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</index>
		<hasNext public="1" get="inline" set="null" line="76">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":has_untyped"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="85">
			<f a=""><d/></f>
			<meta><m n=":has_untyped"/></meta>
		</next>
		<new set="method" line="74"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ds._ObjectMap.NativeValueIterator" params="" file="C:\HaxeToolkit\haxe\std/flash/_std/haxe/ds/ObjectMap.hx" private="1" module="haxe.ds.ObjectMap">
		<iterator public="1" get="inline" set="null" line="97" static="1"><f a="collection">
	<d/>
	<c path="haxe.ds._ObjectMap.NativeValueIterator"/>
</f></iterator>
		<collection><d/></collection>
		<index expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</index>
		<hasNext public="1" get="inline" set="null" line="105">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":has_untyped"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="114">
			<f a=""><d/></f>
			<meta><m n=":has_untyped"/></meta>
		</next>
		<new set="method" line="103"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="haxe.ds.Option" params="T" file="C:\HaxeToolkit\haxe\std/haxe/ds/Option.hx">
		<Some a="v"><c path="haxe.ds.Option.T"/></Some>
		<None/>
		<haxe_doc>An Option is a wrapper type which can either have a value (Some) or not a
	value (None).</haxe_doc>
	</enum>
	<class path="haxe.ds.StringMap" params="T" file="C:\HaxeToolkit\haxe\std/flash/_std/haxe/ds/StringMap.hx">
		<implements path="haxe.IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<reserved expr="&apos;???&apos;" line="28" static="1">
			<a/>
			<meta><m n=":value"><e>'???'</e></m></meta>
		</reserved>
		<h><d/></h>
		<rh><d/></rh>
		<isReserved get="inline" set="null" line="34">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</isReserved>
		<set public="1" get="inline" set="null" line="38">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="45">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="haxe.ds.StringMap.T"/></t>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="51">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<setReserved set="method" line="57">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setReserved>
		<getReserved set="method" line="62">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="haxe.ds.StringMap.T"/></t>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getReserved>
		<existsReserved set="method" line="66">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</existsReserved>
		<remove public="1" set="method" line="71">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="105">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" get="inline" set="null" line="109">
			<f a=""><t path="Iterator"><c path="haxe.ds.StringMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="115">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" set="method" line="30">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.ds._StringMap.StringMapKeysIterator" params="" file="C:\HaxeToolkit\haxe\std/flash/_std/haxe/ds/StringMap.hx" private="1" module="haxe.ds.StringMap">
		<h><d/></h>
		<rh><d/></rh>
		<index><x path="Int"/></index>
		<nextIndex><x path="Int"/></nextIndex>
		<isReserved><x path="Bool"/></isReserved>
		<hasNext public="1" get="inline" set="null" line="152">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":has_untyped"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="166">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
		</next>
		<new get="inline" set="null" line="144"><f a="h:rh">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":allow"><e>haxe.ds.StringMap</e></m></meta>
	</class>
	<class path="haxe.ds._StringMap.StringMapValuesIterator" params="T" file="C:\HaxeToolkit\haxe\std/flash/_std/haxe/ds/StringMap.hx" private="1" module="haxe.ds.StringMap">
		<h><d/></h>
		<rh><d/></rh>
		<index><x path="Int"/></index>
		<nextIndex><x path="Int"/></nextIndex>
		<hasNext public="1" get="inline" set="null" line="189">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":has_untyped"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="202">
			<f a=""><c path="haxe.ds._StringMap.StringMapValuesIterator.T"/></f>
			<meta><m n=":has_untyped"/></meta>
		</next>
		<new get="inline" set="null" line="182"><f a="h:rh">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":allow"><e>haxe.ds.StringMap</e></m></meta>
	</class>
	<class path="haxe.ds.UnsafeStringMap" params="T" file="C:\HaxeToolkit\haxe\std/flash/_std/haxe/ds/UnsafeStringMap.hx">
		<implements path="haxe.IMap">
			<c path="String"/>
			<c path="haxe.ds.UnsafeStringMap.T"/>
		</implements>
		<h><c path="flash.utils.Dictionary"/></h>
		<set public="1" get="inline" set="null" line="37">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.UnsafeStringMap.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</set>
		<get public="1" get="inline" set="null" line="41">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="haxe.ds.UnsafeStringMap.T"/></t>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</get>
		<exists public="1" get="inline" set="null" line="45">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</exists>
		<remove public="1" set="method" line="49">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</remove>
		<keys public="1" set="method" line="55">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<meta><m n=":has_untyped"/></meta>
		</keys>
		<iterator public="1" set="method" line="59">
			<f a=""><t path="Iterator"><c path="haxe.ds.UnsafeStringMap.T"/></t></f>
			<meta><m n=":has_untyped"/></meta>
		</iterator>
		<toString public="1" set="method" line="68"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="33"><f a=""><x path="Void"/></f></new>
		<haxe_doc>This is similar to `StringMap` excepts that it does not sanitize the keys.
	As a result, it will be faster to access the map for reading, but it might fail
	with some reserved keys such as `constructor` or `prototype`.</haxe_doc>
	</class>
	<typedef path="haxe.ds._Vector.VectorData" params="T" file="C:\HaxeToolkit\haxe\std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector"><c path="flash.Vector"><c path="haxe.ds._Vector.VectorData.T"/></c></typedef>
	<abstract path="haxe.ds.Vector" params="T" file="C:\HaxeToolkit\haxe\std/haxe/ds/Vector.hx">
		<this><t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t></this>
		<haxe_doc>A Vector is a storage of fixed size. It can be faster than Array on some
	targets, and is never slower.</haxe_doc>
		<impl><class path="haxe.ds._Vector.Vector_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector">
	<_new public="1" get="inline" set="null" line="56" static="1">
		<f a="length">
			<x path="Int"/>
			<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Vector of length `length`.

		Initially `this` Vector contains `length` neutral elements:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
	</_new>
	<get public="1" get="inline" set="null" line="84" static="1">
		<f a="this:index">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
			<c path="haxe.ds.Vector.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Returns the value at index `index`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
	</get>
	<set public="1" get="inline" set="null" line="100" static="1">
		<f a="this:index:val">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
			<c path="haxe.ds.Vector.T"/>
			<c path="haxe.ds.Vector.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Sets the value at index `index` to `val`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
	</set>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the length of `this` Vector.</haxe_doc>
	</length>
	<get_length get="inline" set="null" line="115" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
		</meta>
	</get_length>
	<blit public="1" params="T" set="method" line="136" static="1">
		<f a="src:srcPos:dest:destPos:len">
			<x path="haxe.ds.Vector"><c path="blit.T"/></x>
			<x path="Int"/>
			<x path="haxe.ds.Vector"><c path="blit.T"/></x>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Copies `length` of elements from `src` Vector, beginning at `srcPos` to
		`dest` Vector, beginning at `destPos`

		The results are unspecified if `length` results in out-of-bounds access,
		or if `src` or `dest` are null</haxe_doc>
	</blit>
	<toArray public="1" get="inline" set="null" line="157" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<c path="Array"><c path="haxe.ds.Vector.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Array, copy the content from the Vector to it, and returns it.</haxe_doc>
	</toArray>
	<toData public="1" get="inline" set="null" line="180" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Extracts the data of `this` Vector.

		This returns the internal representation type.</haxe_doc>
	</toData>
	<fromData public="1" params="T" get="inline" set="null" line="190" static="1">
		<f a="data">
			<t path="haxe.ds._Vector.VectorData"><c path="fromData.T"/></t>
			<x path="haxe.ds.Vector"><c path="fromData.T"/></x>
		</f>
		<haxe_doc>Initializes a new Vector from `data`.

		Since `data` is the internal representation of Vector, this is a no-op.

		If `data` is null, the corresponding Vector is also `null`.</haxe_doc>
	</fromData>
	<fromArrayCopy public="1" params="T" get="inline" set="null" line="205" static="1">
		<f a="array">
			<c path="Array"><c path="fromArrayCopy.T"/></c>
			<x path="haxe.ds.Vector"><c path="fromArrayCopy.T"/></x>
		</f>
		<haxe_doc>Creates a new Vector by copying the elements of `array`.

		This always creates a copy, even on platforms where the internal
		representation is Array.

		The elements are not copied and retain their identity, so
		`a[i] == Vector.fromArrayCopy(a).get(i)` is true for any valid i.

		If `array` is null, the result is unspecified.</haxe_doc>
	</fromArrayCopy>
</class></impl>
	</abstract>
	<class path="haxe.ds._Vector.Vector_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector">
		<_new public="1" get="inline" set="null" line="56" static="1">
			<f a="length">
				<x path="Int"/>
				<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Vector of length `length`.

		Initially `this` Vector contains `length` neutral elements:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
		</_new>
		<get public="1" get="inline" set="null" line="84" static="1">
			<f a="this:index">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
				<c path="haxe.ds.Vector.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Returns the value at index `index`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="100" static="1">
			<f a="this:index:val">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
				<c path="haxe.ds.Vector.T"/>
				<c path="haxe.ds.Vector.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Sets the value at index `index` to `val`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
		</set>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the length of `this` Vector.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="115" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
			</meta>
		</get_length>
		<blit public="1" params="T" set="method" line="136" static="1">
			<f a="src:srcPos:dest:destPos:len">
				<x path="haxe.ds.Vector"><c path="blit.T"/></x>
				<x path="Int"/>
				<x path="haxe.ds.Vector"><c path="blit.T"/></x>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies `length` of elements from `src` Vector, beginning at `srcPos` to
		`dest` Vector, beginning at `destPos`

		The results are unspecified if `length` results in out-of-bounds access,
		or if `src` or `dest` are null</haxe_doc>
		</blit>
		<toArray public="1" get="inline" set="null" line="157" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<c path="Array"><c path="haxe.ds.Vector.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Array, copy the content from the Vector to it, and returns it.</haxe_doc>
		</toArray>
		<toData public="1" get="inline" set="null" line="180" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Extracts the data of `this` Vector.

		This returns the internal representation type.</haxe_doc>
		</toData>
		<fromData public="1" params="T" get="inline" set="null" line="190" static="1">
			<f a="data">
				<t path="haxe.ds._Vector.VectorData"><c path="fromData.T"/></t>
				<x path="haxe.ds.Vector"><c path="fromData.T"/></x>
			</f>
			<haxe_doc>Initializes a new Vector from `data`.

		Since `data` is the internal representation of Vector, this is a no-op.

		If `data` is null, the corresponding Vector is also `null`.</haxe_doc>
		</fromData>
		<fromArrayCopy public="1" params="T" get="inline" set="null" line="205" static="1">
			<f a="array">
				<c path="Array"><c path="fromArrayCopy.T"/></c>
				<x path="haxe.ds.Vector"><c path="fromArrayCopy.T"/></x>
			</f>
			<haxe_doc>Creates a new Vector by copying the elements of `array`.

		This always creates a copy, even on platforms where the internal
		representation is Array.

		The elements are not copied and retain their identity, so
		`a[i] == Vector.fromArrayCopy(a).get(i)` is true for any valid i.

		If `array` is null, the result is unspecified.</haxe_doc>
		</fromArrayCopy>
	</class>
	<class path="haxe.ds.WeakMap" params="K:V" file="C:\HaxeToolkit\haxe\std/flash/_std/haxe/ds/WeakMap.hx">
		<extends path="flash.utils.Dictionary"/>
		<implements path="haxe.IMap">
			<c path="haxe.ds.WeakMap.K"/>
			<c path="haxe.ds.WeakMap.V"/>
		</implements>
		<get public="1" get="inline" set="null" line="10">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<t path="Null"><c path="haxe.ds.WeakMap.V"/></t>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="14">
			<f a="key:value">
				<c path="haxe.ds.WeakMap.K"/>
				<c path="haxe.ds.WeakMap.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<exists public="1" get="inline" set="null" line="18">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="22">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="42">
			<f a=""><t path="Iterator"><c path="haxe.ds.WeakMap.K"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="46">
			<f a=""><t path="Iterator"><c path="haxe.ds.WeakMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="52">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" set="method" line="6">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new WeakMap.</haxe_doc>
		</new>
		<haxe_doc>WeakMap allows mapping of object keys to arbitrary values.

	The keys are considered to be weak references on static targets.

	See `Map` for documentation details.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.ds._WeakMap.NativePropertyIterator" params="" file="C:\HaxeToolkit\haxe\std/flash/_std/haxe/ds/WeakMap.hx" private="1" module="haxe.ds.WeakMap">
		<iterator public="1" get="inline" set="null" line="68" static="1"><f a="collection">
	<d/>
	<c path="haxe.ds._WeakMap.NativePropertyIterator"/>
</f></iterator>
		<collection><d/></collection>
		<index expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</index>
		<hasNext public="1" get="inline" set="null" line="76">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":has_untyped"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="85">
			<f a=""><d/></f>
			<meta><m n=":has_untyped"/></meta>
		</next>
		<new set="method" line="74"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ds._WeakMap.NativeValueIterator" params="" file="C:\HaxeToolkit\haxe\std/flash/_std/haxe/ds/WeakMap.hx" private="1" module="haxe.ds.WeakMap">
		<iterator public="1" get="inline" set="null" line="97" static="1"><f a="collection">
	<d/>
	<c path="haxe.ds._WeakMap.NativeValueIterator"/>
</f></iterator>
		<collection><d/></collection>
		<index expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</index>
		<hasNext public="1" get="inline" set="null" line="105">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":has_untyped"/></meta>
		</hasNext>
		<next public="1" get="inline" set="null" line="114">
			<f a=""><d/></f>
			<meta><m n=":has_untyped"/></meta>
		</next>
		<new set="method" line="103"><f a=""><x path="Void"/></f></new>
	</class>
	<abstract path="haxe.extern.EitherType" params="T1:T2" file="C:\HaxeToolkit\haxe\std/haxe/extern/EitherType.hx">
		<from>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
		</from>
		<this><d/></this>
		<to>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
		</to>
		<haxe_doc>An abstract type allowing values to be either of `T1` or `T2` type.
    Supports implicit casts from/to either types.

    It is useful for interfacing with external code on dynamic platforms
    such as JavaScript or Python.

    Otherwise, use of this type is discouraged.</haxe_doc>
		<impl><class path="haxe.extern._EitherType.EitherType_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/extern/EitherType.hx" private="1" module="haxe.extern.EitherType" extern="1"/></impl>
	</abstract>
	<class path="haxe.extern._EitherType.EitherType_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/extern/EitherType.hx" private="1" module="haxe.extern.EitherType" extern="1"/>
	<abstract path="haxe.extern.Rest" params="T" file="C:\HaxeToolkit\haxe\std/haxe/extern/Rest.hx">
		<this><c path="Array"><c path="haxe.extern.Rest.T"/></c></this>
		<haxe_doc>A special abstract type that represents "rest" function argument.

    Should be used as a type for the last argument of an extern method,
    representing that arbitrary number of arguments of given type can be
    passed to that method.</haxe_doc>
		<impl><class path="haxe.extern._Rest.Rest_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/extern/Rest.hx" private="1" module="haxe.extern.Rest" extern="1"/></impl>
	</abstract>
	<class path="haxe.extern._Rest.Rest_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/extern/Rest.hx" private="1" module="haxe.extern.Rest" extern="1"/>
	<class path="haxe.format.JsonParser" params="" file="C:\HaxeToolkit\haxe\std/haxe/format/JsonParser.hx">
		<parse public="1" get="inline" set="null" line="42" static="1">
			<f a="str">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Parses given JSON-encoded `str` and returns the resulting object.

		JSON objects are parsed into anonymous structures and JSON arrays
		are parsed into Array<Dynamic>.

		If given `str` is not valid JSON, an exception will be thrown.

		If `str` is null, the result is unspecified.]]></haxe_doc>
		</parse>
		<str><c path="String"/></str>
		<pos><x path="Int"/></pos>
		<parseRec set="method" line="54"><f a=""><d/></f></parseRec>
		<parseString set="method" line="136"><f a=""><c path="String"/></f></parseString>
		<parseNumber get="inline" set="null" line="205"><f a="c">
	<x path="Int"/>
	<d/>
</f></parseNumber>
		<nextChar get="inline" set="null" line="243"><f a=""><x path="Int"/></f></nextChar>
		<invalidChar set="method" line="247"><f a=""><x path="Void"/></f></invalidChar>
		<invalidNumber set="method" line="252"><f a="start">
	<x path="Int"/>
	<x path="Void"/>
</f></invalidNumber>
		<new set="method" line="49"><f a="str">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An implementation of JSON parser in Haxe.

	This class is used by `haxe.Json` when native JSON implementation
	is not available.</haxe_doc>
	</class>
	<class path="haxe.format.JsonPrinter" params="" file="C:\HaxeToolkit\haxe\std/haxe/format/JsonPrinter.hx">
		<print public="1" set="method" line="42" static="1">
			<f a="o:?replacer:?space">
				<d/>
				<f a=":">
					<d/>
					<d/>
					<d/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `o` value and returns the resulting JSON string.

		If `replacer` is given and is not null, it is used to retrieve
		actual object to be encoded. The `replacer` function two parameters,
		the key and the value being encoded. Initial key value is an empty string.

		If `space` is given and is not null, the result will be pretty-printed.
		Successive levels will be indented by this string.</haxe_doc>
		</print>
		<buf><c path="flash.utils.ByteArray"/></buf>
		<replacer><f a=":">
	<d/>
	<d/>
	<d/>
</f></replacer>
		<indent><c path="String"/></indent>
		<pretty><x path="Bool"/></pretty>
		<nind><x path="Int"/></nind>
		<ipad get="inline" set="null" line="69"><f a=""><x path="Void"/></f></ipad>
		<newl get="inline" set="null" line="73"><f a=""><x path="Void"/></f></newl>
		<write set="method" line="77"><f a="k:v">
	<d/>
	<d/>
	<x path="Void"/>
</f></write>
		<addChar get="inline" set="null" line="138">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</addChar>
		<add get="inline" set="null" line="146">
			<f a="v">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</add>
		<classString set="method" line="156"><f a="v">
	<d/>
	<x path="Void"/>
</f></classString>
		<objString get="inline" set="null" line="161"><f a="v">
	<d/>
	<x path="Void"/>
</f></objString>
		<fieldsString set="method" line="165"><f a="v:fields">
	<d/>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></fieldsString>
		<quote set="method" line="191"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></quote>
		<new set="method" line="54"><f a="replacer:space">
	<f a=":">
		<d/>
		<d/>
		<d/>
	</f>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An implementation of JSON printer in Haxe.

	This class is used by `haxe.Json` when native JSON implementation
	is not available.</haxe_doc>
	</class>
	<typedef path="haxe.io.ArrayBufferViewData" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/ArrayBufferView.hx" module="haxe.io.ArrayBufferView"><c path="haxe.io.ArrayBufferViewImpl"/></typedef>
	<class path="haxe.io.ArrayBufferViewImpl" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/ArrayBufferView.hx" module="haxe.io.ArrayBufferView">
		<bytes public="1"><c path="haxe.io.Bytes"/></bytes>
		<byteOffset public="1"><x path="Int"/></byteOffset>
		<byteLength public="1"><x path="Int"/></byteLength>
		<sub public="1" set="method" line="14"><f a="begin:?length">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.ArrayBufferViewImpl"/>
</f></sub>
		<subarray public="1" set="method" line="19"><f a="?begin:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.ArrayBufferViewImpl"/>
</f></subarray>
		<new public="1" set="method" line="9"><f a="bytes:pos:length">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="haxe.io.ArrayBufferView" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/ArrayBufferView.hx">
		<this><t path="haxe.io.ArrayBufferViewData"/></this>
		<impl><class path="haxe.io._ArrayBufferView.ArrayBufferView_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/ArrayBufferView.hx" private="1" module="haxe.io.ArrayBufferView">
	<EMULATED public="1" get="accessor" set="null" static="1">
		<x path="Bool"/>
		<haxe_doc>On some platforms configurations (for instance JS with no TypedArray support as in IE8-), Haxe will
		try to emulate the array buffers API. However in that case memory sharing will not be supported :
		each typed array or will copy its own data set. This flag allows users to detect if we are doing such emulation.
		At the moment only JavaScript is concerned.</haxe_doc>
	</EMULATED>
	<get_EMULATED get="inline" set="null" line="35" static="1"><f a=""><x path="Bool"/></f></get_EMULATED>
	<buffer public="1" get="accessor" set="null" static="1">
		<c path="haxe.io.Bytes"/>
		<meta><m n=":impl"/></meta>
	</buffer>
	<byteOffset public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</byteOffset>
	<byteLength public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</byteLength>
	<_new public="1" get="inline" set="null" line="43" static="1">
		<f a="size">
			<x path="Int"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_byteOffset get="inline" set="null" line="47" static="1">
		<f a="this">
			<t path="haxe.io.ArrayBufferViewData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_byteOffset>
	<get_byteLength get="inline" set="null" line="48" static="1">
		<f a="this">
			<t path="haxe.io.ArrayBufferViewData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_byteLength>
	<get_buffer get="inline" set="null" line="49" static="1">
		<f a="this">
			<t path="haxe.io.ArrayBufferViewData"/>
			<c path="haxe.io.Bytes"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_buffer>
	<sub public="1" get="inline" set="null" line="51" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.ArrayBufferViewData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="55" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.ArrayBufferViewData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="59" static="1">
		<f a="this">
			<t path="haxe.io.ArrayBufferViewData"/>
			<t path="haxe.io.ArrayBufferViewData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" get="inline" set="null" line="63" static="1"><f a="a">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></fromData>
	<fromBytes public="1" set="method" line="67" static="1">
		<f a="bytes:?pos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":value"><e>{pos:0}</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._ArrayBufferView.ArrayBufferView_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/ArrayBufferView.hx" private="1" module="haxe.io.ArrayBufferView">
		<EMULATED public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<haxe_doc>On some platforms configurations (for instance JS with no TypedArray support as in IE8-), Haxe will
		try to emulate the array buffers API. However in that case memory sharing will not be supported :
		each typed array or will copy its own data set. This flag allows users to detect if we are doing such emulation.
		At the moment only JavaScript is concerned.</haxe_doc>
		</EMULATED>
		<get_EMULATED get="inline" set="null" line="35" static="1"><f a=""><x path="Bool"/></f></get_EMULATED>
		<buffer public="1" get="accessor" set="null" static="1">
			<c path="haxe.io.Bytes"/>
			<meta><m n=":impl"/></meta>
		</buffer>
		<byteOffset public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</byteOffset>
		<byteLength public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</byteLength>
		<_new public="1" get="inline" set="null" line="43" static="1">
			<f a="size">
				<x path="Int"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_byteOffset get="inline" set="null" line="47" static="1">
			<f a="this">
				<t path="haxe.io.ArrayBufferViewData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_byteOffset>
		<get_byteLength get="inline" set="null" line="48" static="1">
			<f a="this">
				<t path="haxe.io.ArrayBufferViewData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_byteLength>
		<get_buffer get="inline" set="null" line="49" static="1">
			<f a="this">
				<t path="haxe.io.ArrayBufferViewData"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_buffer>
		<sub public="1" get="inline" set="null" line="51" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.ArrayBufferViewData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="55" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.ArrayBufferViewData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="59" static="1">
			<f a="this">
				<t path="haxe.io.ArrayBufferViewData"/>
				<t path="haxe.io.ArrayBufferViewData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" get="inline" set="null" line="63" static="1"><f a="a">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></fromData>
		<fromBytes public="1" set="method" line="67" static="1">
			<f a="bytes:?pos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":value"><e>{pos:0}</e></m></meta>
		</fromBytes>
	</class>
	<class path="haxe.io.Input" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Input.hx">
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when reading numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<readByte public="1" set="method" line="46">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read and return one byte.</haxe_doc>
		</readByte>
		<readBytes public="1" set="method" line="61">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Returns the actual length of read data that can be smaller than `len`.

		See `readFullBytes` that tries to read the exact amount of specified bytes.</haxe_doc>
		</readBytes>
		<close public="1" set="method" line="87">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the input source.

		Behaviour while reading after calling this method is unspecified.</haxe_doc>
		</close>
		<set_bigEndian set="method" line="90"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<readAll public="1" set="method" line="103">
			<f a="?bufsize">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Read and return all available data.

		The `bufsize` optional argument specifies the size of chunks by
		which data is read. Its default value is target-specific.</haxe_doc>
		</readAll>
		<readFullBytes public="1" set="method" line="130">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Unlike `readBytes`, this method tries to read the exact `len` amount of bytes.</haxe_doc>
		</readFullBytes>
		<read public="1" set="method" line="141">
			<f a="nbytes">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Read and return `nbytes` bytes.</haxe_doc>
		</read>
		<readUntil public="1" set="method" line="158">
			<f a="end">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Read a string until a character code specified by `end` is occurred.

		The final character is not included in the resulting string.</haxe_doc>
		</readUntil>
		<readLine public="1" set="method" line="171">
			<f a=""><c path="String"/></f>
			<haxe_doc>Read a line of text separated by CR and/or LF bytes.

		The CR/LF characters are not included in the resulting string.</haxe_doc>
		</readLine>
		<readFloat public="1" set="method" line="193">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Read a 32-bit floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readFloat>
		<readDouble public="1" set="method" line="202">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Read a 64-bit double-precision floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readDouble>
		<readInt8 public="1" set="method" line="211">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 8-bit signed integer.</haxe_doc>
		</readInt8>
		<readInt16 public="1" set="method" line="223">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 16-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt16>
		<readUInt16 public="1" set="method" line="237">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 16-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readUInt16>
		<readInt24 public="1" set="method" line="248">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 24-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt24>
		<readUInt24 public="1" set="method" line="263">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 24-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readUInt24>
		<readInt32 public="1" set="method" line="275">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt32>
		<readString public="1" set="method" line="294">
			<f a="len">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Read and `len` bytes as a string.</haxe_doc>
		</readString>
		<getDoubleSig set="method" line="316"><f a="bytes">
	<c path="Array"><x path="Int"/></c>
	<x path="Float"/>
</f></getDoubleSig>
		<haxe_doc>An Input is an abstract reader. See other classes in the `haxe.io` package
	for several possible implementations.</haxe_doc>
	</class>
	<class path="haxe.io.BufferInput" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/BufferInput.hx">
		<extends path="haxe.io.Input"/>
		<i public="1"><c path="haxe.io.Input"/></i>
		<buf public="1"><c path="haxe.io.Bytes"/></buf>
		<available public="1"><x path="Int"/></available>
		<pos public="1"><x path="Int"/></pos>
		<refill public="1" set="method" line="38"><f a=""><x path="Void"/></f></refill>
		<readByte public="1" set="method" line="46" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="54" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="31">
			<f a="i:buf:?pos:?available" v="::0:0">
				<c path="haxe.io.Input"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{available:0,pos:0}</e></m></meta>
		</new>
	</class>
	<class path="haxe.io.BytesBuffer" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/BytesBuffer.hx">
		<b><c path="flash.utils.ByteArray"/></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the buffer in bytes.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="64"><f a=""><x path="Int"/></f></get_length>
		<addByte public="1" get="inline" set="null" line="76"><f a="byte">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<add public="1" get="inline" set="null" line="94"><f a="src">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></add>
		<addString public="1" get="inline" set="null" line="118"><f a="v">
	<c path="String"/>
	<x path="Void"/>
</f></addString>
		<addInt32 public="1" get="inline" set="null" line="128"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></addInt32>
		<addInt64 public="1" get="inline" set="null" line="139"><f a="v">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></addInt64>
		<addFloat public="1" get="inline" set="null" line="144"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></addFloat>
		<addDouble public="1" get="inline" set="null" line="152"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></addDouble>
		<addBytes public="1" get="inline" set="null" line="160"><f a="src:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<getBytes public="1" set="method" line="191">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns either a copy or a reference of the current bytes.
		Once called, the buffer can no longer be used.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="45"><f a=""><x path="Void"/></f></new>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/BytesData.hx"><c path="flash.utils.ByteArray"/></typedef>
	<class path="haxe.io.BytesInput" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/BytesInput.hx">
		<extends path="haxe.io.Input"/>
		<b><t path="haxe.io.BytesData"/></b>
		<position public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<haxe_doc>The current position in the stream in bytes.</haxe_doc>
		</position>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the stream in bytes.</haxe_doc>
		</length>
		<get_position get="inline" set="null" line="63"><f a=""><x path="Int"/></f></get_position>
		<get_length get="inline" set="null" line="71"><f a=""><x path="Int"/></f></get_length>
		<set_position set="method" line="79"><f a="p">
	<x path="Int"/>
	<x path="Int"/>
</f></set_position>
		<readByte public="1" set="method" line="90" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="111" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<set_bigEndian set="method" line="159" override="1">
			<f a="e">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</set_bigEndian>
		<readFloat public="1" set="method" line="166" override="1">
			<f a=""><x path="Float"/></f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</readFloat>
		<readDouble public="1" set="method" line="171" override="1">
			<f a=""><x path="Float"/></f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</readDouble>
		<readInt8 public="1" set="method" line="176" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</readInt8>
		<readInt16 public="1" set="method" line="181" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</readInt16>
		<readUInt16 public="1" set="method" line="186" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</readUInt16>
		<readInt32 public="1" set="method" line="191" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</readInt32>
		<readString public="1" set="method" line="196" override="1">
			<f a="len">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</readString>
		<new public="1" set="method" line="38"><f a="b:?pos:?len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.io.Output" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Output.hx">
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when writing numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<writeByte public="1" set="method" line="46">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write one byte.</haxe_doc>
		</writeByte>
		<writeBytes public="1" set="method" line="57">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Returns the actual length of written data that can differ from `len`.

		See `writeFullBytes` that tries to write the exact amount of specified bytes.</haxe_doc>
		</writeBytes>
		<flush public="1" set="method" line="83">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Flush any buffered data.</haxe_doc>
		</flush>
		<close public="1" set="method" line="91">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the output.

		Behaviour while writing after calling this method is unspecified.</haxe_doc>
		</close>
		<set_bigEndian set="method" line="94"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<write public="1" set="method" line="104">
			<f a="s">
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write all bytes stored in `s`.</haxe_doc>
		</write>
		<writeFullBytes public="1" set="method" line="120">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Unlike `writeBytes`, this method tries to write the exact `len` amount of bytes.</haxe_doc>
		</writeFullBytes>
		<writeFloat public="1" set="method" line="133">
			<f a="x">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeFloat>
		<writeDouble public="1" set="method" line="142">
			<f a="x">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 64-bit double-precision floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeDouble>
		<writeInt8 public="1" set="method" line="156">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 8-bit signed integer.</haxe_doc>
		</writeInt8>
		<writeInt16 public="1" set="method" line="167">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 16-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt16>
		<writeUInt16 public="1" set="method" line="177">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 16-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeUInt16>
		<writeInt24 public="1" set="method" line="193">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 24-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt24>
		<writeUInt24 public="1" set="method" line="203">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 24-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeUInt24>
		<writeInt32 public="1" set="method" line="221">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt32>
		<prepare public="1" set="method" line="242">
			<f a="nbytes">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inform that we are about to write at least `nbytes` bytes.

		The underlying implementation can allocate proper working space depending
		on this information, or simply ignore it. This is not a mandatory call
		but a tip and is only used in some specific cases.</haxe_doc>
		</prepare>
		<writeInput public="1" set="method" line="251">
			<f a="i:?bufsize">
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Read all available data from `i` and write it.

		The `bufsize` optional argument specifies the size of chunks by
		which data is read and written. Its default value is 4096.</haxe_doc>
		</writeInput>
		<writeString public="1" set="method" line="276">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `s` string.</haxe_doc>
		</writeString>
		<haxe_doc>An Output is an abstract write. A specific output implementation will only
	have to override the [writeByte] and maybe the [write], [flush] and [close]
	methods. See [File.write] and [String.write] for two ways of creating an
	Output.</haxe_doc>
	</class>
	<class path="haxe.io.BytesOutput" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/BytesOutput.hx">
		<extends path="haxe.io.Output"/>
		<b><c path="flash.utils.ByteArray"/></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the stream in bytes.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="47"><f a=""><x path="Int"/></f></get_length>
		<writeByte public="1" set="method" line="51" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="59" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<set_bigEndian set="method" line="73" override="1">
			<f a="e">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</set_bigEndian>
		<writeFloat public="1" set="method" line="80" override="1">
			<f a="f">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</writeFloat>
		<writeDouble public="1" set="method" line="85" override="1">
			<f a="f">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</writeDouble>
		<writeInt8 public="1" set="method" line="90" override="1">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</writeInt8>
		<writeInt16 public="1" set="method" line="97" override="1">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</writeInt16>
		<writeUInt16 public="1" set="method" line="103" override="1">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</writeUInt16>
		<writeInt32 public="1" set="method" line="109" override="1">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</writeInt32>
		<prepare public="1" set="method" line="114" override="1">
			<f a="size">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</prepare>
		<writeString public="1" set="method" line="119" override="1">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":dox"><e>hide</e></m></meta>
		</writeString>
		<getBytes public="1" set="method" line="125">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<meta><m n=":has_untyped"/></meta>
		</getBytes>
		<new public="1" set="method" line="35"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.io.Eof" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Eof.hx">
		<toString set="method" line="30">
			<f a=""><c path="String"/></f>
			<meta><m n=":keep"/></meta>
		</toString>
		<new public="1" set="method" line="28"><f a=""><x path="Void"/></f></new>
		<haxe_doc>This exception is raised when reading while data is no longer available in the [Input].</haxe_doc>
	</class>
	<enum path="haxe.io.Error" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
	</enum>
	<class path="haxe.io.FPHelper" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/FPHelper.hx">
		<i64tmp expr="Int64.ofInt(0)" line="35" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":value"><e>Int64.ofInt(0)</e></m></meta>
		</i64tmp>
		<helper expr="&apos;???&apos;" line="50" static="1">
			<c path="flash.utils.ByteArray"/>
			<meta><m n=":value"><e>'???'</e></m></meta>
		</helper>
		<i32ToFloat public="1" set="method" line="62" static="1"><f a="i">
	<x path="Int"/>
	<x path="Float"/>
</f></i32ToFloat>
		<floatToI32 public="1" set="method" line="109" static="1"><f a="f">
	<x path="Float"/>
	<x path="Int"/>
</f></floatToI32>
		<i64ToDouble public="1" set="method" line="149" static="1"><f a="low:high">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></i64ToDouble>
		<doubleToI64 public="1" set="method" line="208" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Returns an Int64 representing the bytes representation of the double precision IEEE float value.
		WARNING : for performance reason, the same Int64 value might be reused every time. Copy its low/high values before calling again.
		We still ensure that this is safe to use in a multithread environment</haxe_doc>
		</doubleToI64>
		<haxe_doc>Helper that converts between floating point and binary representation.
	Always works in low-endian encoding.</haxe_doc>
	</class>
	<typedef path="haxe.io.Float32ArrayData" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Float32Array.hx" module="haxe.io.Float32Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.Float32Array" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Float32Array.hx">
		<this><t path="haxe.io.Float32ArrayData"/></this>
		<impl><class path="haxe.io._Float32Array.Float32Array_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Float32Array.hx" private="1" module="haxe.io.Float32Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_length get="inline" set="null" line="36" static="1">
		<f a="this">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="40" static="1">
		<f a="this">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="44" static="1">
		<f a="this:index">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="48" static="1">
		<f a="this:index:value">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="56" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="60" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="64" static="1">
		<f a="this">
			<t path="haxe.io.Float32ArrayData"/>
			<t path="haxe.io.Float32ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="haxe.io.Float32Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="72" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":value"><e>{pos:0}</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="81" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":value"><e>{bytePos:0}</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._Float32Array.Float32Array_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Float32Array.hx" private="1" module="haxe.io.Float32Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_length get="inline" set="null" line="36" static="1">
			<f a="this">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="40" static="1">
			<f a="this">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="44" static="1">
			<f a="this:index">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="48" static="1">
			<f a="this:index:value">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="56" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="60" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="64" static="1">
			<f a="this">
				<t path="haxe.io.Float32ArrayData"/>
				<t path="haxe.io.Float32ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="haxe.io.Float32Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="72" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":value"><e>{pos:0}</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="81" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":value"><e>{bytePos:0}</e></m></meta>
		</fromBytes>
	</class>
	<typedef path="haxe.io.Float64ArrayData" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Float64Array.hx" module="haxe.io.Float64Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.Float64Array" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Float64Array.hx">
		<this><t path="haxe.io.Float64ArrayData"/></this>
		<impl><class path="haxe.io._Float64Array.Float64Array_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Float64Array.hx" private="1" module="haxe.io.Float64Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="8" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>8</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_length get="inline" set="null" line="36" static="1">
		<f a="this">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="40" static="1">
		<f a="this">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="44" static="1">
		<f a="this:index">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="48" static="1">
		<f a="this:index:value">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="56" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="60" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="64" static="1">
		<f a="this">
			<t path="haxe.io.Float64ArrayData"/>
			<t path="haxe.io.Float64ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="haxe.io.Float64Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="72" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":value"><e>{pos:0}</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="81" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":value"><e>{bytePos:0}</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._Float64Array.Float64Array_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Float64Array.hx" private="1" module="haxe.io.Float64Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="8" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_length get="inline" set="null" line="36" static="1">
			<f a="this">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="40" static="1">
			<f a="this">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="44" static="1">
			<f a="this:index">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="48" static="1">
			<f a="this:index:value">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="56" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="60" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="64" static="1">
			<f a="this">
				<t path="haxe.io.Float64ArrayData"/>
				<t path="haxe.io.Float64ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="haxe.io.Float64Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="72" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":value"><e>{pos:0}</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="81" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":value"><e>{bytePos:0}</e></m></meta>
		</fromBytes>
	</class>
	<typedef path="haxe.io.Int32ArrayData" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Int32Array.hx" module="haxe.io.Int32Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.Int32Array" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Int32Array.hx">
		<this><t path="haxe.io.Int32ArrayData"/></this>
		<impl><class path="haxe.io._Int32Array.Int32Array_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Int32Array.hx" private="1" module="haxe.io.Int32Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_length get="inline" set="null" line="36" static="1">
		<f a="this">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="40" static="1">
		<f a="this">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="44" static="1">
		<f a="this:index">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="48" static="1">
		<f a="this:index:value">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="56" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="60" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="64" static="1">
		<f a="this">
			<t path="haxe.io.Int32ArrayData"/>
			<t path="haxe.io.Int32ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="haxe.io.Int32Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="72" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":value"><e>{pos:0}</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="81" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":value"><e>{bytePos:0}</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._Int32Array.Int32Array_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Int32Array.hx" private="1" module="haxe.io.Int32Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_length get="inline" set="null" line="36" static="1">
			<f a="this">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="40" static="1">
			<f a="this">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="44" static="1">
			<f a="this:index">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="48" static="1">
			<f a="this:index:value">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="56" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="60" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="64" static="1">
			<f a="this">
				<t path="haxe.io.Int32ArrayData"/>
				<t path="haxe.io.Int32ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="haxe.io.Int32Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="72" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":value"><e>{pos:0}</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="81" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":value"><e>{bytePos:0}</e></m></meta>
		</fromBytes>
	</class>
	<class path="haxe.io.Path" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Path.hx">
		<withoutExtension public="1" set="method" line="123" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String representation of `path` without the file extension.

		If `path` is null, the result is unspecified.</haxe_doc>
		</withoutExtension>
		<withoutDirectory public="1" set="method" line="134" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String representation of `path` without the directory.

		If `path` is null, the result is unspecified.</haxe_doc>
		</withoutDirectory>
		<directory public="1" set="method" line="147" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the directory of `path`.

		If the directory is null, the empty String "" is returned.

		If `path` is null, the result is unspecified.</haxe_doc>
		</directory>
		<extension public="1" set="method" line="161" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the extension of `path`.

		If the extension is null, the empty String "" is returned.

		If `path` is null, the result is unspecified.</haxe_doc>
		</extension>
		<withExtension public="1" set="method" line="175" static="1">
			<f a="path:ext">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String representation of `path` where the extension is `ext`.

		If `path` has no extension, `ext` is added as extension.

		If `path` or `ext` are null, the result is unspecified.</haxe_doc>
		</withExtension>
		<join public="1" set="method" line="189" static="1">
			<f a="paths">
				<c path="Array"><c path="String"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all paths in `paths` together.

		If `paths` is empty, the empty String `""` is returned. Otherwise the
		paths are joined with a slash between them.

		If `paths` is null, the result is unspecified.</haxe_doc>
		</join>
		<normalize public="1" set="method" line="210" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Normalize a given `path` (e.g. make '/usr/local/../lib' to '/usr/lib').

		Also replaces backslashes \ with slashes / and afterwards turns
		multiple slashes into a single one.

		If `path` is null, the result is unspecified.</haxe_doc>
		</normalize>
		<addTrailingSlash public="1" set="method" line="265" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Adds a trailing slash to `path`, if it does not have one already.

		If the last slash in `path` is a backslash, a backslash is appended to
		`path`.

		If the last slash in `path` is a slash, or if no slash is found, a slash
		is appended to `path`. In particular, this applies to the empty String
		"".

		If `path` is null, the result is unspecified.</haxe_doc>
		</addTrailingSlash>
		<removeTrailingSlashes public="1" set="method" line="290" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":require"><e><![CDATA[haxe_ver>=3.1]]></e></m></meta>
			<haxe_doc>Removes trailing slashes from `path`.

		If `path` does not end with a `/` or `\`, `path` is returned unchanged.

		Otherwise the substring of `path` excluding the trailing slashes or
		backslashes is returned.

		If `path` is null, the result is unspecified.</haxe_doc>
		</removeTrailingSlashes>
		<isAbsolute public="1" set="method" line="304" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":require"><e><![CDATA[haxe_ver>=3.2]]></e></m></meta>
			<haxe_doc>Returns true if the path is an absolute path, and false otherwise.</haxe_doc>
		</isAbsolute>
		<unescape set="method" line="310" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></unescape>
		<escape set="method" line="315" static="1">
			<f a="path:?allowSlashes" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{allowSlashes:false}</e></m></meta>
		</escape>
		<dir public="1">
			<c path="String"/>
			<haxe_doc>The directory.

		This is the leading part of the path that is not part of the file name
		and the extension.

		Does not end with a `/` or `\` separator.

		If the path has no directory, the value is null.</haxe_doc>
		</dir>
		<file public="1">
			<c path="String"/>
			<haxe_doc>The file name.

		This is the part of the part between the directory and the extension.

		If there is no file name, e.g. for ".htaccess" or "/dir/", the value
		is the empty String "".</haxe_doc>
		</file>
		<ext public="1">
			<c path="String"/>
			<haxe_doc>The file extension.

		It is separated from the file name by a dot. This dot is not part of
		the extension.

		If the path has no extension, the value is null.</haxe_doc>
		</ext>
		<backslash public="1">
			<x path="Bool"/>
			<haxe_doc>True if the last directory separator is a backslash, false otherwise.</haxe_doc>
		</backslash>
		<toString public="1" set="method" line="114">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of `this` path.

		If `this.backslash` is true, backslash is used as directory separator,
		otherwise slash is used. This only affects the separator between
		`this.dir` and `this.file`.

		If `this.directory` or `this.extension` is null, their representation
		is the empty String "".</haxe_doc>
		</toString>
		<new public="1" set="method" line="76">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Path instance by parsing `path`.

		Path information can be retrieved by accessing the dir, file and ext
		properties.</haxe_doc>
		</new>
		<haxe_doc>This class provides a convenient way of working with paths. It supports the
	common path formats:

	- directory1/directory2/filename.extension
	- directory1\directory2\filename.excention</haxe_doc>
	</class>
	<class path="haxe.io.StringInput" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/StringInput.hx">
		<extends path="haxe.io.BytesInput"/>
		<new public="1" set="method" line="26"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="haxe.io.UInt16ArrayData" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/UInt16Array.hx" module="haxe.io.UInt16Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.UInt16Array" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/UInt16Array.hx">
		<this><t path="haxe.io.UInt16ArrayData"/></this>
		<impl><class path="haxe.io._UInt16Array.UInt16Array_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/UInt16Array.hx" private="1" module="haxe.io.UInt16Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>2</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_length get="inline" set="null" line="36" static="1">
		<f a="this">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="40" static="1">
		<f a="this">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="44" static="1">
		<f a="this:index">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="48" static="1">
		<f a="this:index:value">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="56" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="60" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="64" static="1">
		<f a="this">
			<t path="haxe.io.UInt16ArrayData"/>
			<t path="haxe.io.UInt16ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="haxe.io.UInt16Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="72" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":value"><e>{pos:0}</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="81" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":value"><e>{bytePos:0}</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._UInt16Array.UInt16Array_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/UInt16Array.hx" private="1" module="haxe.io.UInt16Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_length get="inline" set="null" line="36" static="1">
			<f a="this">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="40" static="1">
			<f a="this">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="44" static="1">
			<f a="this:index">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="48" static="1">
			<f a="this:index:value">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="56" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="60" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="64" static="1">
			<f a="this">
				<t path="haxe.io.UInt16ArrayData"/>
				<t path="haxe.io.UInt16ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="haxe.io.UInt16Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="72" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":value"><e>{pos:0}</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="81" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":value"><e>{bytePos:0}</e></m></meta>
		</fromBytes>
	</class>
	<typedef path="haxe.io.UInt32ArrayData" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/UInt32Array.hx" module="haxe.io.UInt32Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.UInt32Array" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/UInt32Array.hx">
		<this><t path="haxe.io.UInt32ArrayData"/></this>
		<impl><class path="haxe.io._UInt32Array.UInt32Array_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/UInt32Array.hx" private="1" module="haxe.io.UInt32Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_length get="inline" set="null" line="36" static="1">
		<f a="this">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="40" static="1">
		<f a="this">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="44" static="1">
		<f a="this:index">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="48" static="1">
		<f a="this:index:value">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="56" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="60" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="64" static="1">
		<f a="this">
			<t path="haxe.io.UInt32ArrayData"/>
			<t path="haxe.io.UInt32ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="haxe.io.UInt32Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="72" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="UInt"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":value"><e>{pos:0}</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="81" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":value"><e>{bytePos:0}</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._UInt32Array.UInt32Array_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/UInt32Array.hx" private="1" module="haxe.io.UInt32Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_length get="inline" set="null" line="36" static="1">
			<f a="this">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="40" static="1">
			<f a="this">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="44" static="1">
			<f a="this:index">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="48" static="1">
			<f a="this:index:value">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="56" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="60" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="64" static="1">
			<f a="this">
				<t path="haxe.io.UInt32ArrayData"/>
				<t path="haxe.io.UInt32ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="haxe.io.UInt32Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="72" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="UInt"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":value"><e>{pos:0}</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="81" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":value"><e>{bytePos:0}</e></m></meta>
		</fromBytes>
	</class>
	<typedef path="haxe.io.UInt8ArrayData" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/UInt8Array.hx" module="haxe.io.UInt8Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.UInt8Array" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/UInt8Array.hx">
		<this><t path="haxe.io.UInt8ArrayData"/></this>
		<impl><class path="haxe.io._UInt8Array.UInt8Array_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/UInt8Array.hx" private="1" module="haxe.io.UInt8Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>1</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_length get="inline" set="null" line="36" static="1">
		<f a="this">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="40" static="1">
		<f a="this">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="44" static="1">
		<f a="this:index">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="48" static="1">
		<f a="this:index:value">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="56" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="60" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="64" static="1">
		<f a="this">
			<t path="haxe.io.UInt8ArrayData"/>
			<t path="haxe.io.UInt8ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="haxe.io.UInt8Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="72" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":value"><e>{pos:0}</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="81" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":value"><e>{bytePos:0}</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._UInt8Array.UInt8Array_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/UInt8Array.hx" private="1" module="haxe.io.UInt8Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_length get="inline" set="null" line="36" static="1">
			<f a="this">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="40" static="1">
			<f a="this">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="44" static="1">
			<f a="this:index">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="48" static="1">
			<f a="this:index:value">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="56" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="60" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="64" static="1">
			<f a="this">
				<t path="haxe.io.UInt8ArrayData"/>
				<t path="haxe.io.UInt8ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="haxe.io.UInt8Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="72" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":value"><e>{pos:0}</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="81" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":value"><e>{bytePos:0}</e></m></meta>
		</fromBytes>
	</class>
	<class path="haxe.macro.ComplexTypeTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/ComplexTypeTools.hx">
		<toString public="1" set="method" line="40" static="1">
			<f a="c">
				<e path="haxe.macro.ComplexType"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts type [c] to a human-readable String representation.

		The result is guaranteed to be valid haxe code, but there may be
		differences from the original lexical syntax.</haxe_doc>
		</toString>
		<haxe_doc>This class provides some utility methods to work with AST-level types. It is
	best used through 'using haxe.macro.ComplexTypeTools' syntax and then provides
	additional methods on haxe.macro.Expr.ComplexType instances.</haxe_doc>
	</class>
	<typedef path="haxe.macro.Position" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<min><x path="Int"/></min>
	<max><x path="Int"/></max>
	<file><c path="String"/></file>
</a></typedef>
	<enum path="haxe.macro.Constant" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<CInt a="v"><c path="String"/></CInt>
		<CFloat a="f"><c path="String"/></CFloat>
		<CString a="s"><c path="String"/></CString>
		<CIdent a="s"><c path="String"/></CIdent>
		<CRegexp a="r:opt">
			<c path="String"/>
			<c path="String"/>
		</CRegexp>
	</enum>
	<enum path="haxe.macro.Binop" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpAdd><haxe_doc>`+`</haxe_doc></OpAdd>
		<OpMult><haxe_doc>`*`</haxe_doc></OpMult>
		<OpDiv><haxe_doc>`/`</haxe_doc></OpDiv>
		<OpSub><haxe_doc>`-`</haxe_doc></OpSub>
		<OpAssign><haxe_doc>`=`</haxe_doc></OpAssign>
		<OpEq><haxe_doc>`==`</haxe_doc></OpEq>
		<OpNotEq><haxe_doc>`!=`</haxe_doc></OpNotEq>
		<OpGt><haxe_doc><![CDATA[`>`]]></haxe_doc></OpGt>
		<OpGte><haxe_doc><![CDATA[`>=`]]></haxe_doc></OpGte>
		<OpLt><haxe_doc><![CDATA[`<`]]></haxe_doc></OpLt>
		<OpLte><haxe_doc><![CDATA[`<=`]]></haxe_doc></OpLte>
		<OpAnd><haxe_doc><![CDATA[`&`]]></haxe_doc></OpAnd>
		<OpOr><haxe_doc>`|`</haxe_doc></OpOr>
		<OpXor><haxe_doc>`^`</haxe_doc></OpXor>
		<OpBoolAnd><haxe_doc><![CDATA[`&&`]]></haxe_doc></OpBoolAnd>
		<OpBoolOr><haxe_doc>`||`</haxe_doc></OpBoolOr>
		<OpShl><haxe_doc><![CDATA[`<<`]]></haxe_doc></OpShl>
		<OpShr><haxe_doc><![CDATA[`>>`]]></haxe_doc></OpShr>
		<OpUShr><haxe_doc><![CDATA[`>>>`]]></haxe_doc></OpUShr>
		<OpMod><haxe_doc>`%`</haxe_doc></OpMod>
		<OpAssignOp a="op">
			<e path="haxe.macro.Binop"/>
			<haxe_doc><![CDATA[`+=`
		`-=`
		`/=`
		`*=`
		`<<=`
		`>>=`
		`>>>=`
		`|=`
		`&=`
		`^=`
		`%=`]]></haxe_doc>
		</OpAssignOp>
		<OpInterval><haxe_doc>`...`</haxe_doc></OpInterval>
		<OpArrow><haxe_doc><![CDATA[`=>`]]></haxe_doc></OpArrow>
	</enum>
	<enum path="haxe.macro.Unop" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpIncrement><haxe_doc>`++`</haxe_doc></OpIncrement>
		<OpDecrement><haxe_doc>`--`</haxe_doc></OpDecrement>
		<OpNot><haxe_doc>`!`</haxe_doc></OpNot>
		<OpNeg><haxe_doc>`-`</haxe_doc></OpNeg>
		<OpNegBits><haxe_doc>`~`</haxe_doc></OpNegBits>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="haxe.macro.Expr" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.ExprDef"/></expr>
</a></typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><t path="haxe.macro.Expr"/></typedef>
	<typedef path="haxe.macro.Case" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<values><c path="Array"><t path="haxe.macro.Expr"/></c></values>
	<guard>
		<t path="Null"><t path="Null"><t path="haxe.macro.Expr"/></t></t>
		<meta><m n=":optional"/></meta>
	</guard>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
</a></typedef>
	<typedef path="haxe.macro.Var" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<name><c path="String"/></name>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
</a></typedef>
	<typedef path="haxe.macro.Catch" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<type><e path="haxe.macro.ComplexType"/></type>
	<name><c path="String"/></name>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></typedef>
	<enum path="haxe.macro.ExprDef" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<EConst a="c"><e path="haxe.macro.Constant"/></EConst>
		<EArray a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EArray>
		<EBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EBinop>
		<EField a="e:field">
			<t path="haxe.macro.Expr"/>
			<c path="String"/>
		</EField>
		<EParenthesis a="e"><t path="haxe.macro.Expr"/></EParenthesis>
		<EObjectDecl a="fields"><c path="Array"><a>
	<field><c path="String"/></field>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></c></EObjectDecl>
		<EArrayDecl a="values"><c path="Array"><t path="haxe.macro.Expr"/></c></EArrayDecl>
		<ECall a="e:params">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
		</ECall>
		<ENew a="t:params">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
		</ENew>
		<EUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<x path="Bool"/>
			<t path="haxe.macro.Expr"/>
		</EUnop>
		<EVars a="vars"><c path="Array"><t path="haxe.macro.Var"/></c></EVars>
		<EFunction a="name:f">
			<t path="Null"><c path="String"/></t>
			<t path="haxe.macro.Function"/>
		</EFunction>
		<EBlock a="exprs"><c path="Array"><t path="haxe.macro.Expr"/></c></EBlock>
		<EFor a="it:expr">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EFor>
		<EIn a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EIn>
		<EIf a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="Null"><t path="haxe.macro.Expr"/></t>
		</EIf>
		<EWhile a="econd:e:normalWhile">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<x path="Bool"/>
		</EWhile>
		<ESwitch a="e:cases:edef">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Case"/></c>
			<t path="Null"><t path="Null"><t path="haxe.macro.Expr"/></t></t>
		</ESwitch>
		<ETry a="e:catches">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Catch"/></c>
		</ETry>
		<EReturn a="?e"><t path="haxe.macro.Expr"/></EReturn>
		<EBreak/>
		<EContinue/>
		<EUntyped a="e"><t path="haxe.macro.Expr"/></EUntyped>
		<EThrow a="e"><t path="haxe.macro.Expr"/></EThrow>
		<ECast a="e:t">
			<t path="haxe.macro.Expr"/>
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
		</ECast>
		<EDisplay a="e:isCall">
			<t path="haxe.macro.Expr"/>
			<x path="Bool"/>
		</EDisplay>
		<EDisplayNew a="t"><t path="haxe.macro.TypePath"/></EDisplayNew>
		<ETernary a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</ETernary>
		<ECheckType a="e:t">
			<t path="haxe.macro.Expr"/>
			<e path="haxe.macro.ComplexType"/>
		</ECheckType>
		<EMeta a="s:e">
			<t path="haxe.macro.MetadataEntry"/>
			<t path="haxe.macro.Expr"/>
		</EMeta>
	</enum>
	<enum path="haxe.macro.ComplexType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPath a="p"><t path="haxe.macro.TypePath"/></TPath>
		<TFunction a="args:ret">
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<e path="haxe.macro.ComplexType"/>
		</TFunction>
		<TAnonymous a="fields"><c path="Array"><t path="haxe.macro.Field"/></c></TAnonymous>
		<TParent a="t"><e path="haxe.macro.ComplexType"/></TParent>
		<TExtend a="p:fields">
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<c path="Array"><t path="haxe.macro.Field"/></c>
		</TExtend>
		<TOptional a="t"><e path="haxe.macro.ComplexType"/></TOptional>
	</enum>
	<typedef path="haxe.macro.TypePath" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<sub>
		<t path="Null"><t path="Null"><c path="String"/></t></t>
		<meta><m n=":optional"/></meta>
	</sub>
	<params>
		<t path="Null"><c path="Array"><e path="haxe.macro.TypeParam"/></c></t>
		<meta><m n=":optional"/></meta>
	</params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
</a></typedef>
	<enum path="haxe.macro.TypeParam" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPType a="t"><e path="haxe.macro.ComplexType"/></TPType>
		<TPExpr a="e"><t path="haxe.macro.Expr"/></TPExpr>
	</enum>
	<typedef path="haxe.macro.TypeParamDecl" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<params>
		<t path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></t>
		<meta><m n=":optional"/></meta>
	</params>
	<name><c path="String"/></name>
	<constraints>
		<t path="Null"><c path="Array"><e path="haxe.macro.ComplexType"/></c></t>
		<meta><m n=":optional"/></meta>
	</constraints>
</a></typedef>
	<typedef path="haxe.macro.Function" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<ret><t path="Null"><e path="haxe.macro.ComplexType"/></t></ret>
	<params>
		<t path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></t>
		<meta><m n=":optional"/></meta>
	</params>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
	<args><c path="Array"><t path="haxe.macro.FunctionArg"/></c></args>
</a></typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<value>
		<t path="Null"><t path="Null"><t path="haxe.macro.Expr"/></t></t>
		<meta><m n=":optional"/></meta>
	</value>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<opt>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</opt>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.MetadataEntry" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params>
		<t path="Null"><c path="Array"><t path="haxe.macro.Expr"/></c></t>
		<meta><m n=":optional"/></meta>
	</params>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.Metadata" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><c path="Array"><t path="haxe.macro.MetadataEntry"/></c></typedef>
	<typedef path="haxe.macro.Field" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
	<meta>
		<t path="Null"><t path="haxe.macro.Metadata"/></t>
		<meta><m n=":optional"/></meta>
	</meta>
	<kind><e path="haxe.macro.FieldType"/></kind>
	<doc>
		<t path="Null"><t path="Null"><c path="String"/></t></t>
		<meta><m n=":optional"/></meta>
	</doc>
	<access>
		<t path="Null"><c path="Array"><e path="haxe.macro.Access"/></c></t>
		<meta><m n=":optional"/></meta>
	</access>
</a></typedef>
	<enum path="haxe.macro.Access" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<APublic/>
		<APrivate/>
		<AStatic/>
		<AOverride/>
		<ADynamic/>
		<AInline/>
		<AMacro/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.FieldType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<FVar a="t:?e">
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			<t path="haxe.macro.Expr"/>
		</FVar>
		<FFun a="f"><t path="haxe.macro.Function"/></FFun>
		<FProp a="get:set:?t:?e">
			<c path="String"/>
			<c path="String"/>
			<e path="haxe.macro.ComplexType"/>
			<t path="haxe.macro.Expr"/>
		</FProp>
	</enum>
	<typedef path="haxe.macro.TypeDefinition" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params>
		<t path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></t>
		<meta><m n=":optional"/></meta>
	</params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<meta>
		<t path="Null"><t path="haxe.macro.Metadata"/></t>
		<meta><m n=":optional"/></meta>
	</meta>
	<kind><e path="haxe.macro.TypeDefKind"/></kind>
	<isExtern>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</isExtern>
	<fields><c path="Array"><t path="haxe.macro.Field"/></c></fields>
</a></typedef>
	<enum path="haxe.macro.TypeDefKind" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TDEnum/>
		<TDStructure/>
		<TDClass a="?superClass:?interfaces:?isInterface">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<x path="Bool"/>
		</TDClass>
		<TDAlias a="t"><e path="haxe.macro.ComplexType"/></TDAlias>
		<TDAbstract a="tthis:?from:?to">
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
		</TDAbstract>
	</enum>
	<class path="haxe.macro.Error" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<message public="1"><c path="String"/></message>
		<pos public="1"><t path="haxe.macro.Position"/></pos>
		<toString set="method" line="333"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="329"><f a="m:p">
	<c path="String"/>
	<t path="haxe.macro.Position"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>This error can be used to handle or produce compilation errors in macros.</haxe_doc>
	</class>
	<enum path="haxe.macro.ImportMode" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<INormal/>
		<IAsName a="alias"><c path="String"/></IAsName>
		<IAll/>
	</enum>
	<typedef path="haxe.macro.ImportExpr" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<path><c path="Array"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
</a></c></path>
	<mode><e path="haxe.macro.ImportMode"/></mode>
</a></typedef>
	<class path="haxe.macro.ExprTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/ExprTools.hx">
		<toString public="1" set="method" line="44" static="1">
			<f a="e">
				<t path="haxe.macro.Expr"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts expression [e] to a human-readable String representation.

		The result is guaranteed to be valid haxe code, but there may be
		differences from the original lexical syntax.</haxe_doc>
		</toString>
		<iter public="1" set="method" line="70" static="1">
			<f a="e:f">
				<t path="haxe.macro.Expr"/>
				<f a="">
					<t path="haxe.macro.Expr"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls function [f] on each sub-expression of [e].

		If [e] has no sub-expressions, this operation has no effect.

		Otherwise [f] is called once per sub-expression of [e], with the
		sub-expression as argument. These calls are done in order of the
		sub-expression declarations.

		This method does not call itself recursively. It should instead be used
		in a recursive function which handles the expression nodes of interest.

		Usage example:

		function findStrings(e:Expr) {
			switch(e.expr) {
				case EConst(CString(s)):
					// handle s
				case _:
					ExprTools.iter(e, findStrings);
			}
		}</haxe_doc>
		</iter>
		<map public="1" set="method" line="156" static="1">
			<f a="e:f">
				<t path="haxe.macro.Expr"/>
				<f a="">
					<t path="haxe.macro.Expr"/>
					<t path="haxe.macro.Expr"/>
				</f>
				<t path="haxe.macro.Expr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of [e] by calling [f] on each of them.

		If [e] has no sub-expressions, this operation returns [e] unchanged.

		Otherwise [f] is called once per sub-expression of [e], with the
		sub-expression as argument. These calls are done in order of the
		sub-expression declarations.

		This method does not call itself recursively. It should instead be used
		in a recursive function which handles the expression nodes of interest.

		Usage example:

		function capitalizeStrings(e:Expr) {
			return switch(e.expr) {
				case EConst(CString(s)):
					{ expr: EConst(CString(s.toUpperCase())), pos: e.pos };
				case _:
					ExprTools.map(e, capitalizeStrings);
			}
		}</haxe_doc>
		</map>
		<getValue public="1" set="method" line="230" static="1">
			<f a="e">
				<t path="haxe.macro.Expr"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Returns the value `e` represents.

		Supported expressions are:
			- `Int`, `Float` and `String` literals
			- identifiers `true`, `false` and `null`
			- structure declarations if all their fields are values
			- array declarations if all their elements are values
			- unary operators `-`, `!` and `~` if the operand is a value
			- binary operators except `=>`, `...` and assignments

		Parentheses, metadata and the `untyped` keyword are ignored.

		If any non-value is encountered, an exception of type `String` is
		thrown.

		If `e` is null, the result is unspecified.]]></haxe_doc>
		</getValue>
		<opt get="inline" set="null" line="290" static="1"><f a="e:f">
	<t path="Null"><t path="haxe.macro.Expr"/></t>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<t path="haxe.macro.Expr"/>
	</f>
	<t path="haxe.macro.Expr"/>
</f></opt>
		<opt2 get="inline" set="null" line="293" static="1"><f a="e:f">
	<t path="Null"><t path="haxe.macro.Expr"/></t>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></opt2>
		<haxe_doc>This class provides some utility methods to work with expressions. It is
	best used through 'using haxe.macro.ExprTools' syntax and then provides
	additional methods on haxe.macro.Expr instances.

	While mainly intended to be used in macros, it works in non-macro code as
	well.</haxe_doc>
	</class>
	<class path="haxe.macro.ExprArrayTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/ExprTools.hx" module="haxe.macro.ExprTools">
		<map public="1" set="method" line="302" static="1"><f a="el:f">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<t path="haxe.macro.Expr"/>
	</f>
	<c path="Array"><t path="haxe.macro.Expr"/></c>
</f></map>
		<iter public="1" set="method" line="309" static="1"><f a="el:f">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></iter>
		<haxe_doc>This class provides functions on expression arrays for convenience. For a
	detailed reference on each method, see the documentation of ExprTools.</haxe_doc>
	</class>
	<class path="haxe.macro.Format" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Format.hx"><haxe_doc>The actual macro implemented for Std.format</haxe_doc></class>
	<typedef path="haxe.macro.JSGenApi" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/JSGenApi.hx">
		<a>
			<types>
				<c path="Array"><e path="haxe.macro.Type"/></c>
				<haxe_doc>all the types that were compiled by Haxe</haxe_doc>
			</types>
			<setTypeAccessor set="method">
				<f a="callb">
					<f a="">
						<e path="haxe.macro.Type"/>
						<c path="String"/>
					</f>
					<x path="Void"/>
				</f>
				<haxe_doc>define the JS code that gets generated when a class or enum is accessed in a typed expression</haxe_doc>
			</setTypeAccessor>
			<setCurrentClass set="method">
				<f a="c">
					<t path="haxe.macro.ClassType"/>
					<x path="Void"/>
				</f>
				<haxe_doc>select the current classe</haxe_doc>
			</setCurrentClass>
			<quoteString set="method">
				<f a="s">
					<c path="String"/>
					<c path="String"/>
				</f>
				<haxe_doc>quote and escape the given string constant</haxe_doc>
			</quoteString>
			<outputFile>
				<c path="String"/>
				<haxe_doc>the file in which the JS code can be generated</haxe_doc>
			</outputFile>
			<main>
				<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
				<haxe_doc>the main call expression, if a -main class is defined</haxe_doc>
			</main>
			<isKeyword set="method">
				<f a="ident">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>tells if the given identifier is a JS keyword</haxe_doc>
			</isKeyword>
			<hasFeature set="method">
				<f a="f">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>check if a feature is used</haxe_doc>
			</hasFeature>
			<generateValue set="method">
				<f a="e">
					<t path="haxe.macro.TypedExpr"/>
					<c path="String"/>
				</f>
				<haxe_doc>generate the JS code for a given typed expression-value</haxe_doc>
			</generateValue>
			<generateStatement set="method">
				<f a="e">
					<t path="haxe.macro.TypedExpr"/>
					<c path="String"/>
				</f>
				<haxe_doc>generate the JS code for any given typed expression</haxe_doc>
			</generateStatement>
			<buildMetaData set="method">
				<f a="t">
					<t path="haxe.macro.BaseType"/>
					<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
				</f>
				<haxe_doc>create the metadata expression for the given type</haxe_doc>
			</buildMetaData>
			<addFeature set="method">
				<f a="f">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>add a feature</haxe_doc>
			</addFeature>
		</a>
		<haxe_doc>This is the api that is passed to the custom JS generator.</haxe_doc>
	</typedef>
	<class path="haxe.macro.MacroStringTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/MacroStringTools.hx">
		<toFieldExpr public="1" set="method" line="72" static="1">
			<f a="sl">
				<c path="Array"><c path="String"/></c>
				<t path="haxe.macro.Expr"/>
			</f>
			<haxe_doc>Converts an array of Strings `sl` to a field expression.

		If `sl` has no elements, the result is null.

		If `sl` has one element, the result is `EConst(CIdent(sl[0])`.

		Otherwise the result is a chain of `EField` nodes.

		If `sl` is null, the result is unspecified.</haxe_doc>
		</toFieldExpr>
		<toDotPath public="1" set="method" line="87" static="1">
			<f a="pack:name">
				<c path="Array"><c path="String"/></c>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts a path given by package `pack` and name `name` to a `String`
		separated by dots.

		If `pack` has no elements, the result is `name`.

		If `pack` is null, the result is unspecified.

		Otherwise the elements of `pack` are joined with a separating dot, with
		an appended dot separating the result from `name`.</haxe_doc>
		</toDotPath>
		<toComplex public="1" set="method" line="91" static="1"><f a="path">
	<c path="String"/>
	<e path="haxe.macro.ComplexType"/>
</f></toComplex>
		<haxe_doc>This class provides some utility methods to work with strings in macro
	context.</haxe_doc>
	</class>
	<class path="haxe.macro.MacroType" params="Const" file="C:\HaxeToolkit\haxe\std/haxe/macro/MacroType.hx" extern="1"><haxe_doc><![CDATA[This type is meant to be used to generate custom types using a macro.
	For instance by doing MacroType<[my.Class.myMacro(55)]>]]></haxe_doc></class>
	<class path="haxe.macro.PositionTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/PositionTools.hx">
		<here public="1" set="method" static="1">
			<f a=""><t path="haxe.macro.Position"/></f>
			<haxe_doc>Returns the `Position` where the caller of `here` is.</haxe_doc>
		</here>
		<getInfos public="1" set="method" line="22" static="1">
			<f a="p">
				<t path="haxe.macro.Position"/>
				<a>
					<min><x path="Int"/></min>
					<max><x path="Int"/></max>
					<file><c path="String"/></file>
				</a>
			</f>
			<haxe_doc>Like `Context.getPosInfos`, except this method is available on all platforms.</haxe_doc>
		</getInfos>
		<make public="1" set="method" line="33" static="1">
			<f a="inf">
				<a>
					<min><x path="Int"/></min>
					<max><x path="Int"/></max>
					<file><c path="String"/></file>
				</a>
				<t path="haxe.macro.Position"/>
			</f>
			<haxe_doc>Like `Context.makePosition`, except this method is available on all platforms.</haxe_doc>
		</make>
	</class>
	<class path="haxe.macro.Printer" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Printer.hx">
		<tabs><c path="String"/></tabs>
		<tabString><c path="String"/></tabString>
		<printUnop public="1" set="method" line="38"><f a="op">
	<e path="haxe.macro.Unop"/>
	<c path="String"/>
</f></printUnop>
		<printBinop public="1" set="method" line="46"><f a="op">
	<e path="haxe.macro.Binop"/>
	<c path="String"/>
</f></printBinop>
		<escapeString set="method" line="74"><f a="s:delim">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></escapeString>
		<printFormatString public="1" set="method" line="78"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></printFormatString>
		<printString public="1" set="method" line="82"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></printString>
		<printConstant public="1" set="method" line="86"><f a="c">
	<e path="haxe.macro.Constant"/>
	<c path="String"/>
</f></printConstant>
		<printTypeParam public="1" set="method" line="95"><f a="param">
	<e path="haxe.macro.TypeParam"/>
	<c path="String"/>
</f></printTypeParam>
		<printTypePath public="1" set="method" line="100"><f a="tp">
	<t path="haxe.macro.TypePath"/>
	<c path="String"/>
</f></printTypePath>
		<printComplexType public="1" set="method" line="107"><f a="ct">
	<e path="haxe.macro.ComplexType"/>
	<c path="String"/>
</f></printComplexType>
		<printMetadata public="1" set="method" line="116"><f a="meta">
	<t path="haxe.macro.MetadataEntry"/>
	<c path="String"/>
</f></printMetadata>
		<printAccess public="1" set="method" line="120"><f a="access">
	<e path="haxe.macro.Access"/>
	<c path="String"/>
</f></printAccess>
		<printField public="1" set="method" line="130"><f a="field">
	<t path="haxe.macro.Field"/>
	<c path="String"/>
</f></printField>
		<printTypeParamDecl public="1" set="method" line="140"><f a="tpd">
	<t path="haxe.macro.TypeParamDecl"/>
	<c path="String"/>
</f></printTypeParamDecl>
		<printFunctionArg public="1" set="method" line="145"><f a="arg">
	<t path="haxe.macro.FunctionArg"/>
	<c path="String"/>
</f></printFunctionArg>
		<printFunction public="1" set="method" line="151"><f a="func">
	<t path="haxe.macro.Function"/>
	<c path="String"/>
</f></printFunction>
		<printVar public="1" set="method" line="157"><f a="v">
	<t path="haxe.macro.Var"/>
	<c path="String"/>
</f></printVar>
		<printExpr public="1" set="method" line="163"><f a="e">
	<t path="haxe.macro.Expr"/>
	<c path="String"/>
</f></printExpr>
		<printExprs public="1" set="method" line="225"><f a="el:sep">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<c path="String"/>
	<c path="String"/>
</f></printExprs>
		<printExtension set="method" line="229"><f a="tpl:fields">
	<c path="Array"><t path="haxe.macro.TypePath"/></c>
	<c path="Array"><t path="haxe.macro.Field"/></c>
	<c path="String"/>
</f></printExtension>
		<printStructure set="method" line="234"><f a="fields">
	<c path="Array"><t path="haxe.macro.Field"/></c>
	<c path="String"/>
</f></printStructure>
		<printTypeDefinition public="1" set="method" line="239">
			<f a="t:?printPackage" v=":true">
				<t path="haxe.macro.TypeDefinition"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{printPackage:true}</e></m></meta>
		</printTypeDefinition>
		<opt params="T" set="method" line="310">
			<f a="v:f:?prefix" v="::&quot;&quot;">
				<c path="opt.T"/>
				<f a="">
					<c path="opt.T"/>
					<c path="String"/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{prefix:""}</e></m></meta>
		</opt>
		<new public="1" set="method" line="33">
			<f a="?tabString" v="&quot;\t&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{tabString:"\t"}</e></m></meta>
		</new>
	</class>
	<typedef path="haxe.macro.TExprTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.ExprTools"/>
		<haxe_doc>This class can be added via 'using haxe.macro.Tools' in order to enable
	'using' functionality on all macro tool classes listed below.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TComplexTypeTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Tools.hx" module="haxe.macro.Tools"><c path="haxe.macro.ComplexTypeTools"/></typedef>
	<typedef path="haxe.macro.TTypeTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Tools.hx" module="haxe.macro.Tools"><c path="haxe.macro.TypeTools"/></typedef>
	<typedef path="haxe.macro.TMacroStringTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Tools.hx" module="haxe.macro.Tools"><c path="haxe.macro.MacroStringTools"/></typedef>
	<typedef path="haxe.macro.TTypedExprTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Tools.hx" module="haxe.macro.Tools"><c path="haxe.macro.TypedExprTools"/></typedef>
	<typedef path="haxe.macro.TPositionTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Tools.hx" module="haxe.macro.Tools"><c path="haxe.macro.PositionTools"/></typedef>
	<typedef path="haxe.macro.Ref" params="T" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<toString set="method"><f a=""><c path="String"/></f></toString>
	<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
</a></typedef>
	<enum path="haxe.macro.Type" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx">
		<TMono a="t">
			<t path="haxe.macro.Ref"><t path="Null"><e path="haxe.macro.Type"/></t></t>
			<haxe_doc>Represents a monomorph.

		@see http://haxe.org/manual/types-monomorph.html</haxe_doc>
		</TMono>
		<TEnum a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents an enum instance.

		@see http://haxe.org/manual/types-enum-instance.html</haxe_doc>
		</TEnum>
		<TInst a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents a class instance.

		@see http://haxe.org/manual/types-class-instance.html</haxe_doc>
		</TInst>
		<TType a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents a typedef.

		@see http://haxe.org/manual/type-system-typedef.html</haxe_doc>
		</TType>
		<TFun a="args:ret">
			<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<e path="haxe.macro.Type"/>
			<haxe_doc>Represents a function type.

		@see http://haxe.org/manual/types-function.html</haxe_doc>
		</TFun>
		<TAnonymous a="a">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AnonType"/></t>
			<haxe_doc>Represents an anonymous structure type.

		@see http://haxe.org/manual/types-anonymous-structure.html</haxe_doc>
		</TAnonymous>
		<TDynamic a="t">
			<t path="Null"><e path="haxe.macro.Type"/></t>
			<haxe_doc>Represents Dynamic.

		@see http://haxe.org/manual/types-dynamic.html</haxe_doc>
		</TDynamic>
		<TLazy a="f">
			<f a=""><e path="haxe.macro.Type"/></f>
			<haxe_doc>Used internally by the compiler to delay some typing.</haxe_doc>
		</TLazy>
		<TAbstract a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents an abstract type.

		@see http://haxe.org/manual/types-abstract.html</haxe_doc>
		</TAbstract>
	</enum>
	<typedef path="haxe.macro.AnonType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<status><e path="haxe.macro.AnonStatus"/></status>
	<fields><c path="Array"><t path="haxe.macro.ClassField"/></c></fields>
</a></typedef>
	<enum path="haxe.macro.AnonStatus" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<AClosed/>
		<AOpened/>
		<AConst/>
		<AExtend a="tl"><t path="haxe.macro.Ref"><c path="Array"><e path="haxe.macro.Type"/></c></t></AExtend>
		<AClassStatics a="t"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></AClassStatics>
		<AEnumStatics a="t"><t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t></AEnumStatics>
		<AAbstractStatics a="t"><t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t></AAbstractStatics>
	</enum>
	<typedef path="haxe.macro.TypeParameter" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.BaseType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.ClassField" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<kind><e path="haxe.macro.FieldKind"/></kind>
	<isPublic><x path="Bool"/></isPublic>
	<expr set="method"><f a=""><t path="Null"><t path="haxe.macro.TypedExpr"/></t></f></expr>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<enum path="haxe.macro.ClassKind" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<KNormal/>
		<KTypeParameter a="constraints"><c path="Array"><e path="haxe.macro.Type"/></c></KTypeParameter>
		<KExtension a="cl:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</KExtension>
		<KExpr a="expr"><t path="haxe.macro.Expr"/></KExpr>
		<KGeneric/>
		<KGenericInstance a="cl:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</KGenericInstance>
		<KMacroType/>
		<KAbstractImpl a="a"><t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t></KAbstractImpl>
		<KGenericBuild/>
	</enum>
	<typedef path="haxe.macro.ClassType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<superClass><t path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></t></superClass>
	<statics><t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t></statics>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<overrides><c path="Array"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></c></overrides>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<kind><e path="haxe.macro.ClassKind"/></kind>
	<isPrivate><x path="Bool"/></isPrivate>
	<isInterface><x path="Bool"/></isInterface>
	<isExtern><x path="Bool"/></isExtern>
	<interfaces><c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c></interfaces>
	<init><t path="Null"><t path="haxe.macro.TypedExpr"/></t></init>
	<fields><t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t></fields>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<constructor><t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></t></constructor>
</a></typedef>
	<typedef path="haxe.macro.EnumField" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<index><x path="Int"/></index>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.EnumType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<names><c path="Array"><c path="String"/></c></names>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<constructs><x path="Map">
	<c path="String"/>
	<t path="haxe.macro.EnumField"/>
</x></constructs>
</a></typedef>
	<typedef path="haxe.macro.DefType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.AbstractType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<unops><c path="Array"><a>
	<postFix><x path="Bool"/></postFix>
	<op><e path="haxe.macro.Unop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c></unops>
	<type><e path="haxe.macro.Type"/></type>
	<to><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c></to>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<impl><t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t></impl>
	<from><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c></from>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<binops><c path="Array"><a>
	<op><e path="haxe.macro.Binop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c></binops>
	<array><c path="Array"><t path="haxe.macro.ClassField"/></c></array>
</a></typedef>
	<typedef path="haxe.macro.MetaAccess" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<remove set="method">
				<f a="name">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Removes all `name` metadata entries from the origin of `this`
		MetaAccess.

		This method might clear several metadata entries of the same name.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `remove` has no effect on that array.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</remove>
			<has set="method">
				<f a="name">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>Tells if the origin of `this` MetaAccess has a `name` metadata entry.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</has>
			<get set="method">
				<f a=""><t path="haxe.macro.Metadata"/></f>
				<haxe_doc>Return the wrapped `Metadata` array.

		Modifying this array has no effect on the origin of `this` MetaAccess.
		The `add` and `remove` methods can be used for that.</haxe_doc>
			</get>
			<extract set="method">
				<f a="name">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
				</f>
				<haxe_doc>Extract metadata entries by given `name`.

		If there's no metadata with such name, empty array is returned.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</extract>
			<add set="method">
				<f a="name:params:pos">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.Expr"/></c>
					<t path="haxe.macro.Position"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Adds the metadata specified by `name`, `params` and `pos` to the origin
		of `this` MetaAccess.

		Metadata names are not unique during compilation, so this method never
		overwrites a previous metadata.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `add` has no effect on that array.

		If any argument is null, compilation fails with an error.</haxe_doc>
			</add>
		</a>
		<haxe_doc>MetaAccess is a wrapper for the `Metadata` array. It can be used to add
	metadata to and remove metadata from its origin.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.FieldKind" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<FVar a="read:write">
			<e path="haxe.macro.VarAccess"/>
			<e path="haxe.macro.VarAccess"/>
		</FVar>
		<FMethod a="k"><e path="haxe.macro.MethodKind"/></FMethod>
	</enum>
	<enum path="haxe.macro.VarAccess" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<AccNormal/>
		<AccNo/>
		<AccNever/>
		<AccResolve/>
		<AccCall/>
		<AccInline/>
		<AccRequire a="r:?msg">
			<c path="String"/>
			<c path="String"/>
		</AccRequire>
	</enum>
	<enum path="haxe.macro.MethodKind" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<MethNormal/>
		<MethInline/>
		<MethDynamic/>
		<MethMacro/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.TConstant" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TInt a="i"><x path="Int"/></TInt>
		<TFloat a="s"><c path="String"/></TFloat>
		<TString a="s"><c path="String"/></TString>
		<TBool a="b"><x path="Bool"/></TBool>
		<TNull/>
		<TThis/>
		<TSuper/>
	</enum>
	<typedef path="haxe.macro.TVar" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t set="null"><e path="haxe.macro.Type"/></t>
	<name set="null"><c path="String"/></name>
	<id set="null"><x path="Int"/></id>
	<extra set="null"><t path="Null"><a>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<expr><t path="Null"><t path="haxe.macro.TypedExpr"/></t></expr>
</a></t></extra>
	<capture set="null"><x path="Bool"/></capture>
</a></typedef>
	<enum path="haxe.macro.ModuleType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TClassDecl a="c"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></TClassDecl>
		<TEnumDecl a="e"><t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t></TEnumDecl>
		<TTypeDecl a="t"><t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t></TTypeDecl>
		<TAbstract a="a"><t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t></TAbstract>
	</enum>
	<typedef path="haxe.macro.TFunc" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t><e path="haxe.macro.Type"/></t>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
	<args><c path="Array"><a>
	<value><t path="Null"><e path="haxe.macro.TConstant"/></t></value>
	<v><t path="haxe.macro.TVar"/></v>
</a></c></args>
</a></typedef>
	<enum path="haxe.macro.FieldAccess" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<FInstance a="c:params:cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
		</FInstance>
		<FStatic a="c:cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
		</FStatic>
		<FAnon a="cf"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></FAnon>
		<FDynamic a="s"><c path="String"/></FDynamic>
		<FClosure a="c:cf">
			<t path="Null"><a>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
	<c><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></c>
</a></t>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
		</FClosure>
		<FEnum a="e:ef">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<t path="haxe.macro.EnumField"/>
		</FEnum>
	</enum>
	<enum path="haxe.macro.TypedExprDef" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TConst a="c"><e path="haxe.macro.TConstant"/></TConst>
		<TLocal a="v"><t path="haxe.macro.TVar"/></TLocal>
		<TArray a="e1:e2">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
		</TArray>
		<TBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
		</TBinop>
		<TField a="e:fa">
			<t path="haxe.macro.TypedExpr"/>
			<e path="haxe.macro.FieldAccess"/>
		</TField>
		<TTypeExpr a="m"><e path="haxe.macro.ModuleType"/></TTypeExpr>
		<TParenthesis a="e"><t path="haxe.macro.TypedExpr"/></TParenthesis>
		<TObjectDecl a="fields"><c path="Array"><a>
	<name><c path="String"/></name>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c></TObjectDecl>
		<TArrayDecl a="el"><c path="Array"><t path="haxe.macro.TypedExpr"/></c></TArrayDecl>
		<TCall a="e:el">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
		</TCall>
		<TNew a="c:params:el">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
		</TNew>
		<TUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<x path="Bool"/>
			<t path="haxe.macro.TypedExpr"/>
		</TUnop>
		<TFunction a="tfunc"><t path="haxe.macro.TFunc"/></TFunction>
		<TVar a="v:expr">
			<t path="haxe.macro.TVar"/>
			<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
		</TVar>
		<TBlock a="el"><c path="Array"><t path="haxe.macro.TypedExpr"/></c></TBlock>
		<TFor a="v:e1:e2">
			<t path="haxe.macro.TVar"/>
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
		</TFor>
		<TIf a="econd:eif:eelse">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
		</TIf>
		<TWhile a="econd:e:normalWhile">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<x path="Bool"/>
		</TWhile>
		<TSwitch a="e:cases:edef">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><a>
	<values><c path="Array"><t path="haxe.macro.TypedExpr"/></c></values>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
			<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
		</TSwitch>
		<TTry a="e:catches">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><a>
	<v><t path="haxe.macro.TVar"/></v>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
		</TTry>
		<TReturn a="e"><t path="Null"><t path="haxe.macro.TypedExpr"/></t></TReturn>
		<TBreak/>
		<TContinue/>
		<TThrow a="e"><t path="haxe.macro.TypedExpr"/></TThrow>
		<TCast a="e:m">
			<t path="haxe.macro.TypedExpr"/>
			<t path="Null"><e path="haxe.macro.ModuleType"/></t>
		</TCast>
		<TMeta a="m:e1">
			<t path="haxe.macro.MetadataEntry"/>
			<t path="haxe.macro.TypedExpr"/>
		</TMeta>
		<TEnumParameter a="e1:ef:index">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.EnumField"/>
			<x path="Int"/>
		</TEnumParameter>
	</enum>
	<typedef path="haxe.macro.TypedExpr" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t><e path="haxe.macro.Type"/></t>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.TypedExprDef"/></expr>
</a></typedef>
	<class path="haxe.macro.TypeTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/TypeTools.hx">
		<nullable set="method" line="38" static="1"><f a="complexType">
	<e path="haxe.macro.ComplexType"/>
	<e path="haxe.macro.ComplexType"/>
</f></nullable>
		<toField set="method" line="40" static="1"><f a="cf">
	<t path="haxe.macro.ClassField"/>
	<t path="haxe.macro.Field"/>
</f></toField>
		<toComplexType public="1" set="method" line="95" static="1">
			<f a="type">
				<t path="Null"><e path="haxe.macro.Type"/></t>
				<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			</f>
			<haxe_doc>Returns a syntax-level type corresponding to Type `t`.

		This function is mostly inverse to `ComplexTypeTools.toType`, but may
		lose some information on types that do not have a corresponding syntax
		version, such as monomorphs. In these cases, the result is null.

		If `t` is null, an internal exception is thrown.</haxe_doc>
		</toComplexType>
		<toTypePath set="method" line="142" static="1"><f a="baseType:params">
	<t path="haxe.macro.BaseType"/>
	<c path="Array"><e path="haxe.macro.Type"/></c>
	<t path="haxe.macro.TypePath"/>
</f></toTypePath>
		<findField public="1" set="method" line="330" static="1">
			<f a="c:name:?isStatic" v="::false">
				<t path="haxe.macro.ClassType"/>
				<c path="String"/>
				<x path="Bool"/>
				<t path="Null"><t path="haxe.macro.ClassField"/></t>
			</f>
			<meta><m n=":value"><e>{isStatic:false}</e></m></meta>
			<haxe_doc>Resolves the field named `name` on class `c`.

		If `isStatic` is true, the classes' static fields are checked. Otherwise
		the classes' member fields are checked.

		If the field is found, it is returned. Otherwise if `c` has a super
		class, `findField` recursively checks that super class. Otherwise null
		is returned.

		If any argument is null, the result is unspecified.</haxe_doc>
		</findField>
		<haxe_doc>This class provides some utility methods to work with types. It is
	best used through 'using haxe.macro.TypeTools' syntax and then provides
	additional methods on haxe.macro.Type instances.</haxe_doc>
	</class>
	<class path="haxe.macro.TypedExprTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/TypedExprTools.hx">
		<with set="method" line="28" static="1"><f a="e:?edef:?t">
	<t path="haxe.macro.TypedExpr"/>
	<e path="haxe.macro.TypedExprDef"/>
	<e path="haxe.macro.Type"/>
	<a>
		<t><e path="haxe.macro.Type"/></t>
		<pos><t path="haxe.macro.Position"/></pos>
		<expr><e path="haxe.macro.TypedExprDef"/></expr>
	</a>
</f></with>
		<map public="1" set="method" line="43" static="1">
			<f a="e:f">
				<t path="haxe.macro.TypedExpr"/>
				<f a="">
					<t path="haxe.macro.TypedExpr"/>
					<t path="haxe.macro.TypedExpr"/>
				</f>
				<t path="haxe.macro.TypedExpr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of [e] by calling [f] on each of them.

		See `haxe.macro.ExprTools.map` for details on expression mapping in
		general. This function works the same way, but with a different data
		structure.</haxe_doc>
		</map>
		<iter public="1" set="method" line="78" static="1">
			<f a="e:f">
				<t path="haxe.macro.TypedExpr"/>
				<f a="">
					<t path="haxe.macro.TypedExpr"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls function [f] on each sub-expression of [e].

		See `haxe.macro.ExprTools.iter` for details on iterating expressions in
		general. This function works the same way, but with a different data
		structure.</haxe_doc>
		</iter>
		<mapWithType public="1" set="method" line="123" static="1">
			<f a="e:f:ft:fv">
				<t path="haxe.macro.TypedExpr"/>
				<f a="">
					<t path="haxe.macro.TypedExpr"/>
					<t path="haxe.macro.TypedExpr"/>
				</f>
				<f a="">
					<e path="haxe.macro.Type"/>
					<e path="haxe.macro.Type"/>
				</f>
				<f a="">
					<t path="haxe.macro.TVar"/>
					<t path="haxe.macro.TVar"/>
				</f>
				<t path="haxe.macro.TypedExpr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of [e] by calling [f] on each of them.
		Additionally, types are mapped using `ft` and variables are mapped using
		`fv`.

		See `haxe.macro.ExprTools.map` for details on expression mapping in
		general. This function works the same way, but with a different data
		structure.</haxe_doc>
		</mapWithType>
	</class>
	<class path="haxe.remoting.AsyncConnection" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/AsyncConnection.hx" interface="1">
		<resolve public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<call public="1" set="method"><f a="params:?result">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<setErrorHandler public="1" set="method"><f a="error">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.AMFConnection" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/AMFConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<urlConnect public="1" set="method" line="68" static="1"><f a="gatewayUrl">
	<c path="String"/>
	<c path="haxe.remoting.AMFConnection"/>
</f></urlConnect>
		<connect public="1" set="method" line="78" static="1"><f a="nc">
	<c path="flash.net.NetConnection"/>
	<c path="haxe.remoting.AMFConnection"/>
</f></connect>
		<registerClassAlias public="1" set="method" line="82" static="1">
			<f a="s:cl">
				<c path="String"/>
				<x path="Class"><d/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</registerClassAlias>
		<__data><a>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
	<cnx><c path="flash.net.NetConnection"/></cnx>
</a></__data>
		<__path><c path="Array"><c path="String"/></c></__path>
		<resolve public="1" set="method" line="41"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="47"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<close public="1" set="method" line="51"><f a=""><x path="Void"/></f></close>
		<call public="1" set="method" line="55">
			<f a="params:?onResult">
				<c path="Array"><d/></c>
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</call>
		<new set="method" line="36"><f a="data:path">
	<a>
		<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
		<cnx><c path="flash.net.NetConnection"/></cnx>
	</a>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.AsyncAdapter" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/AsyncAdapter.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<create public="1" set="method" line="56" static="1"><f a="cnx">
	<c path="haxe.remoting.Connection"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></create>
		<__cnx><c path="haxe.remoting.Connection"/></__cnx>
		<__error><a><ref><f a="">
	<d/>
	<x path="Void"/>
</f></ref></a></__error>
		<resolve public="1" set="method" line="37"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="41"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<call public="1" set="method" line="45"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<new set="method" line="32"><f a="cnx:error">
	<c path="haxe.remoting.Connection"/>
	<a><ref><f a="">
	<d/>
	<x path="Void"/>
</f></ref></a>
	<x path="Void"/>
</f></new>
		<haxe_doc>Build an AsyncConnection from a synchronized Connection.</haxe_doc>
	</class>
	<class path="haxe.remoting.AsyncDebugConnection" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/AsyncDebugConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<create public="1" set="method" line="76" static="1"><f a="cnx">
	<c path="haxe.remoting.AsyncConnection"/>
	<c path="haxe.remoting.AsyncDebugConnection"/>
</f></create>
		<__path><c path="Array"><c path="String"/></c></__path>
		<__cnx><c path="haxe.remoting.AsyncConnection"/></__cnx>
		<__data><a>
	<onresult><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<x path="Void"/>
</f></onresult>
	<onerror><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<x path="Void"/>
</f></onerror>
	<oncall><f a=":">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></oncall>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
</a></__data>
		<resolve public="1" set="method" line="41"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="47"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<setErrorDebug public="1" set="method" line="51"><f a="h">
	<f a="::">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorDebug>
		<setResultDebug public="1" set="method" line="55"><f a="h">
	<f a="::">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setResultDebug>
		<setCallDebug public="1" set="method" line="59"><f a="h">
	<f a=":">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setCallDebug>
		<call public="1" set="method" line="63"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<new set="method" line="35"><f a="path:cnx:data">
	<c path="Array"><c path="String"/></c>
	<c path="haxe.remoting.AsyncConnection"/>
	<a>
		<onresult><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<x path="Void"/>
</f></onresult>
		<onerror><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<x path="Void"/>
</f></onerror>
		<oncall><f a=":">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></oncall>
		<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
	</a>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncDebugConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.AsyncProxy" params="T" file="C:\HaxeToolkit\haxe\std/haxe/remoting/AsyncProxy.hx">
		<__cnx><c path="haxe.remoting.AsyncConnection"/></__cnx>
		<new set="method" line="33"><f a="c">
	<c path="haxe.remoting.AsyncConnection"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>This class is magic. When you extend it with a class C, it will automaticaly
	create a stub class with all public methods forwarding remoting messages over
	the connection.</haxe_doc>
	</class>
	<class path="haxe.remoting.Connection" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/Connection.hx" interface="1">
		<resolve public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.Connection"/>
</f></resolve>
		<call public="1" set="method"><f a="params">
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<haxe_dynamic><c path="haxe.remoting.Connection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.Context" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/Context.hx">
		<share public="1" set="method" line="55" static="1"><f a="name:obj">
	<c path="String"/>
	<a/>
	<c path="haxe.remoting.Context"/>
</f></share>
		<objects><c path="haxe.ds.StringMap"><a>
	<rec><x path="Bool"/></rec>
	<obj><d/></obj>
</a></c></objects>
		<addObject public="1" set="method" line="32"><f a="name:obj:?recursive">
	<c path="String"/>
	<a/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addObject>
		<call public="1" set="method" line="36"><f a="path:params">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<new public="1" set="method" line="28"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.remoting.ContextAll" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/ContextAll.hx">
		<extends path="haxe.remoting.Context"/>
		<call public="1" set="method" line="26" override="1"><f a="path:params">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<new public="1" set="method" line="24"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.remoting.DelayedConnection" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/DelayedConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<process set="method" line="70" static="1"><f a="d">
	<c path="haxe.remoting.DelayedConnection"/>
	<x path="Void"/>
</f></process>
		<create public="1" set="method" line="86" static="1"><f a=""><c path="haxe.remoting.DelayedConnection"/></f></create>
		<connection public="1" get="accessor" set="accessor"><c path="haxe.remoting.AsyncConnection"/></connection>
		<__path><c path="Array"><c path="String"/></c></__path>
		<__data><a>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
	<cnx><c path="haxe.remoting.AsyncConnection"/></cnx>
	<cache><c path="Array"><a>
	<path><c path="Array"><c path="String"/></c></path>
	<params><c path="Array"><d/></c></params>
	<onResult><f a="">
	<d/>
	<x path="Void"/>
</f></onResult>
	<onError><f a="">
	<d/>
	<x path="Void"/>
</f></onError>
</a></c></cache>
</a></__data>
		<setErrorHandler public="1" set="method" line="45"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<resolve public="1" set="method" line="49"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<get_connection set="method" line="55"><f a=""><c path="haxe.remoting.AsyncConnection"/></f></get_connection>
		<set_connection set="method" line="59"><f a="cnx">
	<c path="haxe.remoting.AsyncConnection"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></set_connection>
		<call public="1" set="method" line="65"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<new set="method" line="40"><f a="data:path">
	<a>
		<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
		<cnx><c path="haxe.remoting.AsyncConnection"/></cnx>
		<cache><c path="Array"><a>
	<path><c path="Array"><c path="String"/></c></path>
	<params><c path="Array"><d/></c></params>
	<onResult><f a="">
	<d/>
	<x path="Void"/>
</f></onResult>
	<onError><f a="">
	<d/>
	<x path="Void"/>
</f></onError>
</a></c></cache>
	</a>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.ExternalConnection" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/ExternalConnection.hx">
		<implements path="haxe.remoting.Connection"/>
		<escapeString set="method" line="49" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></escapeString>
		<connections expr="&apos;???&apos;" line="90" static="1">
			<c path="haxe.ds.StringMap"><c path="haxe.remoting.ExternalConnection"/></c>
			<meta><m n=":value"><e>'???'</e></m></meta>
		</connections>
		<doCall set="method" line="93" static="1">
			<f a="name:path:params">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":keep"/></meta>
		</doCall>
		<jsConnect public="1" set="method" line="119" static="1"><f a="name:?ctx">
	<c path="String"/>
	<c path="haxe.remoting.Context"/>
	<c path="haxe.remoting.ExternalConnection"/>
</f></jsConnect>
		<__data><a>
	<name><c path="String"/></name>
	<ctx><c path="haxe.remoting.Context"/></ctx>
</a></__data>
		<__path><c path="Array"><c path="String"/></c></__path>
		<resolve public="1" set="method" line="38"><f a="field">
	<c path="String"/>
	<c path="haxe.remoting.Connection"/>
</f></resolve>
		<close public="1" set="method" line="44"><f a=""><x path="Void"/></f></close>
		<call public="1" set="method" line="58"><f a="params">
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<new set="method" line="33"><f a="data:path">
	<a>
		<name><c path="String"/></name>
		<ctx><c path="haxe.remoting.Context"/></ctx>
	</a>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>Synchronous communications between Flash and Javascript.</haxe_doc>
		<meta><m n=":expose"/></meta>
		<haxe_dynamic><c path="haxe.remoting.Connection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.FlashJsConnection" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/FlashJsConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<connections expr="&apos;???&apos;" line="90" static="1">
			<c path="haxe.ds.StringMap"><c path="haxe.remoting.FlashJsConnection"/></c>
			<meta><m n=":value"><e>'???'</e></m></meta>
		</connections>
		<escapeString set="method" line="92" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></escapeString>
		<doCall set="method" line="100" static="1"><f a="name:path:params">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></doCall>
		<connect public="1" set="method" line="120" static="1"><f a="name:objId:?ctx">
	<c path="String"/>
	<c path="String"/>
	<c path="haxe.remoting.Context"/>
	<c path="haxe.remoting.FlashJsConnection"/>
</f></connect>
		<__path><c path="Array"><c path="String"/></c></__path>
		<__data><a>
	<timer><c path="haxe.Timer"/></timer>
	<queue><c path="Array"><f a=""><x path="Void"/></f></c></queue>
	<name><c path="String"/></name>
	<id><c path="String"/></id>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
	<ctx><c path="haxe.remoting.Context"/></ctx>
</a></__data>
		<close public="1" set="method" line="43"><f a=""><x path="Void"/></f></close>
		<resolve public="1" set="method" line="47"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="53"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<call public="1" set="method" line="57"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<new set="method" line="38"><f a="data:path">
	<a>
		<timer><c path="haxe.Timer"/></timer>
		<queue><c path="Array"><f a=""><x path="Void"/></f></c></queue>
		<name><c path="String"/></name>
		<id><c path="String"/></id>
		<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
		<ctx><c path="haxe.remoting.Context"/></ctx>
	</a>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.HttpAsyncConnection" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/HttpAsyncConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<urlConnect public="1" set="method" line="73" static="1"><f a="url">
	<c path="String"/>
	<c path="haxe.remoting.HttpAsyncConnection"/>
</f></urlConnect>
		<__data><a>
	<url><c path="String"/></url>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
</a></__data>
		<__path><c path="Array"><c path="String"/></c></__path>
		<resolve public="1" set="method" line="34"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="40"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<call public="1" set="method" line="44"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<new set="method" line="29"><f a="data:path">
	<a>
		<url><c path="String"/></url>
		<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
	</a>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.HttpConnection" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/HttpConnection.hx">
		<implements path="haxe.remoting.Connection"/>
		<TIMEOUT public="1" expr="10." line="26" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>10.</e></m></meta>
		</TIMEOUT>
		<processRequest public="1" set="method" line="94" static="1"><f a="requestData:ctx">
	<c path="String"/>
	<c path="haxe.remoting.Context"/>
	<c path="String"/>
</f></processRequest>
		<__url><c path="String"/></__url>
		<__path><c path="Array"><c path="String"/></c></__path>
		<resolve public="1" set="method" line="36"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.Connection"/>
</f></resolve>
		<call public="1" set="method" line="42"><f a="params">
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<new set="method" line="31"><f a="url:path">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.Connection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.LocalConnection" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/LocalConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<ID expr="0" line="26" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</ID>
		<remotingCall set="method" line="75" static="1"><f a="c:id:path:args">
	<c path="haxe.remoting.LocalConnection"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></remotingCall>
		<remotingResult set="method" line="90" static="1"><f a="c:id:result">
	<c path="haxe.remoting.LocalConnection"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></remotingResult>
		<connect public="1" set="method" line="107" static="1"><f a="name:?ctx:?allowDomains">
	<c path="String"/>
	<c path="haxe.remoting.Context"/>
	<c path="Array"><c path="String"/></c>
	<c path="haxe.remoting.LocalConnection"/>
</f></connect>
		<__path><c path="Array"><c path="String"/></c></__path>
		<__data><a>
	<target><c path="String"/></target>
	<results><c path="haxe.ds.IntMap"><a>
	<result><f a="">
	<d/>
	<x path="Void"/>
</f></result>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
</a></c></results>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
	<ctx><c path="haxe.remoting.Context"/></ctx>
	<cnx><c path="flash.net.LocalConnection"/></cnx>
</a></__data>
		<resolve public="1" set="method" line="46"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="52"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<call public="1" set="method" line="56"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<close public="1" set="method" line="71"><f a=""><x path="Void"/></f></close>
		<new set="method" line="41"><f a="data:path">
	<a>
		<target><c path="String"/></target>
		<results><c path="haxe.ds.IntMap"><a>
	<result><f a="">
	<d/>
	<x path="Void"/>
</f></result>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
</a></c></results>
		<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
		<ctx><c path="haxe.remoting.Context"/></ctx>
		<cnx><c path="flash.net.LocalConnection"/></cnx>
	</a>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.Proxy" params="T" file="C:\HaxeToolkit\haxe\std/haxe/remoting/Proxy.hx">
		<__cnx><c path="haxe.remoting.Connection"/></__cnx>
		<new set="method" line="33"><f a="c">
	<c path="haxe.remoting.Connection"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>This class is magic. When you extend it with a class C, it will automaticaly
	create a stub class with all public methods forwarding remoting messages over
	the connection.</haxe_doc>
	</class>
	<class path="haxe.remoting.SocketConnection" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/SocketConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<create public="1" set="method" line="120" static="1"><f a="s:?ctx">
	<t path="haxe.remoting.Socket"/>
	<c path="haxe.remoting.Context"/>
	<c path="haxe.remoting.SocketConnection"/>
</f></create>
		<__path><c path="Array"><c path="String"/></c></__path>
		<__data><a>
	<results><c path="List"><a>
	<onResult><f a="">
	<d/>
	<x path="Void"/>
</f></onResult>
	<onError><f a="">
	<d/>
	<x path="Void"/>
</f></onError>
</a></c></results>
	<protocol><c path="haxe.remoting.SocketProtocol"/></protocol>
	<log><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<x path="Void"/>
</f></log>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
</a></__data>
		<resolve public="1" set="method" line="44"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<call public="1" set="method" line="50"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<setErrorHandler public="1" set="method" line="59"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<setErrorLogger public="1" set="method" line="63"><f a="h">
	<f a="::">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorLogger>
		<setProtocol public="1" set="method" line="67"><f a="p">
	<c path="haxe.remoting.SocketProtocol"/>
	<x path="Void"/>
</f></setProtocol>
		<getProtocol public="1" set="method" line="71"><f a=""><c path="haxe.remoting.SocketProtocol"/></f></getProtocol>
		<close public="1" set="method" line="75"><f a=""><x path="Void"/></f></close>
		<processMessage public="1" set="method" line="79"><f a="data">
	<c path="String"/>
	<x path="Void"/>
</f></processMessage>
		<defaultLog set="method" line="111"><f a="path:args:e">
	<a><join set="null"><f a="">
	<c path="String"/>
	<c path="String"/>
</f></join></a>
	<a><join set="null"><f a="">
	<c path="String"/>
	<c path="String"/>
</f></join></a>
	<unknown/>
	<x path="Void"/>
</f></defaultLog>
		<new set="method" line="39"><f a="data:path">
	<a>
		<results><c path="List"><a>
	<onResult><f a="">
	<d/>
	<x path="Void"/>
</f></onResult>
	<onError><f a="">
	<d/>
	<x path="Void"/>
</f></onError>
</a></c></results>
		<protocol><c path="haxe.remoting.SocketProtocol"/></protocol>
		<log><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<x path="Void"/>
</f></log>
		<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
	</a>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<typedef path="haxe.remoting.Socket" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/SocketProtocol.hx" module="haxe.remoting.SocketProtocol"><c path="flash.net.XMLSocket"/></typedef>
	<class path="haxe.remoting.SocketProtocol" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/SocketProtocol.hx">
		<socket public="1"><t path="haxe.remoting.Socket"/></socket>
		<context public="1"><c path="haxe.remoting.Context"/></context>
		<decodeChar set="method" line="59"><f a="c">
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
</f></decodeChar>
		<encodeChar set="method" line="78"><f a="c">
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
</f></encodeChar>
		<messageLength public="1" set="method" line="99"><f a="c1:c2">
	<x path="Int"/>
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
</f></messageLength>
		<encodeMessageLength public="1" set="method" line="107"><f a="len">
	<x path="Int"/>
	<a>
		<c2><t path="Null"><x path="Int"/></t></c2>
		<c1><t path="Null"><x path="Int"/></t></c1>
	</a>
</f></encodeMessageLength>
		<sendRequest public="1" set="method" line="115"><f a="path:params">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></sendRequest>
		<sendAnswer public="1" set="method" line="123"><f a="answer:?isException">
	<d/>
	<x path="Bool"/>
	<x path="Void"/>
</f></sendAnswer>
		<sendMessage public="1" set="method" line="133"><f a="msg">
	<c path="String"/>
	<x path="Void"/>
</f></sendMessage>
		<decodeData public="1" set="dynamic" line="146"><f a="data">
	<c path="String"/>
	<c path="String"/>
</f></decodeData>
		<isRequest public="1" set="method" line="150"><f a="data">
	<c path="String"/>
	<x path="Bool"/>
</f></isRequest>
		<processRequest public="1" set="method" line="158"><f a="data:?onError">
	<c path="String"/>
	<f a="::">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></processRequest>
		<processAnswer public="1" set="method" line="180"><f a="data">
	<c path="String"/>
	<d/>
</f></processAnswer>
		<new public="1" set="method" line="54"><f a="sock:ctx">
	<t path="haxe.remoting.Socket"/>
	<c path="haxe.remoting.Context"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>The Haxe Remoting Socket Protocol is composed of serialized string exchanges.
	Each string is prefixed with a 2-chars header encoding the string size (up to 4KB)
	and postfixed with the \0 message delimiting char.
	A request string is composed of the following serialized values :
		- the boolean true for a request
		- an array of strings representing the object+method path
		- an array of parameters
	A response string is composed of the following serialized values :
		- the boolean false for a response
		- a serialized value representing the result
	Exceptions are serialized with [serializeException] so they will be thrown immediatly
	when they are unserialized.</haxe_doc>
	</class>
	<class path="haxe.remoting.SocketWrapper" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/SocketWrapper.hx">
		<ID expr="0" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</ID>
		<create set="method" line="32" static="1"><f a="prefix">
	<c path="String"/>
	<c path="String"/>
</f></create>
		<init set="method" line="63" static="1"><f a=""><unknown/></f></init>
		<_ expr="init()" line="73" static="1">
			<unknown/>
			<meta><m n=":value"><e>init()</e></m></meta>
		</_>
		<haxe_doc>See [js.XMLSocket]</haxe_doc>
	</class>
	<typedef path="haxe.rtti.Path" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="String"/></typedef>
	<typedef path="haxe.rtti.Platforms" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="List"><c path="String"/></c></typedef>
	<typedef path="haxe.rtti.FunctionArgument" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<value>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</value>
	<t><e path="haxe.rtti.CType"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></typedef>
	<enum path="haxe.rtti.CType" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx">
		<CUnknown/>
		<CEnum a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CEnum>
		<CClass a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CClass>
		<CTypedef a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CTypedef>
		<CFunction a="args:ret">
			<c path="List"><t path="haxe.rtti.FunctionArgument"/></c>
			<e path="haxe.rtti.CType"/>
		</CFunction>
		<CAnonymous a="fields"><c path="List"><t path="haxe.rtti.ClassField"/></c></CAnonymous>
		<CDynamic a="?t"><e path="haxe.rtti.CType"/></CDynamic>
		<CAbstract a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CAbstract>
	</enum>
	<typedef path="haxe.rtti.PathParams" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<path><t path="haxe.rtti.Path"/></path>
	<params><c path="List"><e path="haxe.rtti.CType"/></c></params>
</a></typedef>
	<typedef path="haxe.rtti.TypeParams" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="Array"><c path="String"/></c></typedef>
	<enum path="haxe.rtti.Rights" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<RNormal/>
		<RNo/>
		<RCall a="m"><c path="String"/></RCall>
		<RMethod/>
		<RDynamic/>
		<RInline/>
	</enum>
	<typedef path="haxe.rtti.MetaData" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="Array"><a>
	<params><c path="Array"><c path="String"/></c></params>
	<name><c path="String"/></name>
</a></c></typedef>
	<typedef path="haxe.rtti.ClassField" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<type><e path="haxe.rtti.CType"/></type>
	<set><e path="haxe.rtti.Rights"/></set>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<overloads><t path="Null"><c path="List"><t path="haxe.rtti.ClassField"/></c></t></overloads>
	<name><c path="String"/></name>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<line><t path="Null"><x path="Int"/></t></line>
	<isPublic><x path="Bool"/></isPublic>
	<isOverride><x path="Bool"/></isOverride>
	<get><e path="haxe.rtti.Rights"/></get>
	<expr><t path="Null"><c path="String"/></t></expr>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.rtti.TypeInfos" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<file><t path="Null"><c path="String"/></t></file>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.rtti.Classdef" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<tdynamic><t path="Null"><e path="haxe.rtti.CType"/></t></tdynamic>
	<superClass><t path="Null"><t path="haxe.rtti.PathParams"/></t></superClass>
	<statics><c path="List"><t path="haxe.rtti.ClassField"/></c></statics>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isInterface><x path="Bool"/></isInterface>
	<isExtern><x path="Bool"/></isExtern>
	<interfaces><c path="List"><t path="haxe.rtti.PathParams"/></c></interfaces>
	<file><t path="Null"><c path="String"/></t></file>
	<fields><c path="List"><t path="haxe.rtti.ClassField"/></c></fields>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.rtti.EnumField" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<name><c path="String"/></name>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<doc><c path="String"/></doc>
	<args><t path="Null"><c path="List"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c></t></args>
</a></typedef>
	<typedef path="haxe.rtti.Enumdef" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<file><t path="Null"><c path="String"/></t></file>
	<doc><t path="Null"><c path="String"/></t></doc>
	<constructors><c path="List"><t path="haxe.rtti.EnumField"/></c></constructors>
</a></typedef>
	<typedef path="haxe.rtti.Typedef" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<types><x path="Map">
	<c path="String"/>
	<e path="haxe.rtti.CType"/>
</x></types>
	<type><e path="haxe.rtti.CType"/></type>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<file><t path="Null"><c path="String"/></t></file>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.rtti.Abstractdef" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<to><c path="Array"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<field><t path="Null"><c path="String"/></t></field>
</a></c></to>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<impl><t path="haxe.rtti.Classdef"/></impl>
	<from><c path="Array"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<field><t path="Null"><c path="String"/></t></field>
</a></c></from>
	<file><t path="Null"><c path="String"/></t></file>
	<doc><t path="Null"><c path="String"/></t></doc>
	<athis><e path="haxe.rtti.CType"/></athis>
</a></typedef>
	<enum path="haxe.rtti.TypeTree" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<TPackage a="name:full:subs">
			<c path="String"/>
			<c path="String"/>
			<c path="Array"><e path="haxe.rtti.TypeTree"/></c>
		</TPackage>
		<TClassdecl a="c"><t path="haxe.rtti.Classdef"/></TClassdecl>
		<TEnumdecl a="e"><t path="haxe.rtti.Enumdef"/></TEnumdecl>
		<TTypedecl a="t"><t path="haxe.rtti.Typedef"/></TTypedecl>
		<TAbstractdecl a="a"><t path="haxe.rtti.Abstractdef"/></TAbstractdecl>
	</enum>
	<typedef path="haxe.rtti.TypeRoot" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="Array"><e path="haxe.rtti.TypeTree"/></c></typedef>
	<class path="haxe.rtti.TypeApi" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<typeInfos public="1" set="method" line="133" static="1"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<t path="haxe.rtti.TypeInfos"/>
</f></typeInfos>
		<isVar public="1" set="method" line="145" static="1"><f a="t">
	<e path="haxe.rtti.CType"/>
	<x path="Bool"/>
</f></isVar>
		<leq params="T" set="method" line="152" static="1"><f a="f:l1:l2">
	<f a=":">
		<c path="leq.T"/>
		<c path="leq.T"/>
		<x path="Bool"/>
	</f>
	<c path="List"><c path="leq.T"/></c>
	<c path="List"><c path="leq.T"/></c>
	<x path="Bool"/>
</f></leq>
		<rightsEq public="1" set="method" line="166" static="1"><f a="r1:r2">
	<e path="haxe.rtti.Rights"/>
	<e path="haxe.rtti.Rights"/>
	<x path="Bool"/>
</f></rightsEq>
		<typeEq public="1" set="method" line="181" static="1"><f a="t1:t2">
	<e path="haxe.rtti.CType"/>
	<e path="haxe.rtti.CType"/>
	<x path="Bool"/>
</f></typeEq>
		<fieldEq public="1" set="method" line="234" static="1"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></fieldEq>
		<constructorEq public="1" set="method" line="254" static="1"><f a="c1:c2">
	<t path="haxe.rtti.EnumField"/>
	<t path="haxe.rtti.EnumField"/>
	<x path="Bool"/>
</f></constructorEq>
	</class>
	<class path="haxe.rtti.CTypeTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<toString public="1" set="method" line="269" static="1"><f a="t">
	<e path="haxe.rtti.CType"/>
	<c path="String"/>
</f></toString>
		<nameWithParams set="method" line="292" static="1"><f a="name:params">
	<c path="String"/>
	<c path="List"><e path="haxe.rtti.CType"/></c>
	<c path="String"/>
</f></nameWithParams>
		<functionArgumentName set="method" line="299" static="1"><f a="arg">
	<t path="haxe.rtti.FunctionArgument"/>
	<c path="String"/>
</f></functionArgumentName>
		<classField set="method" line="303" static="1"><f a="cf">
	<t path="haxe.rtti.ClassField"/>
	<c path="String"/>
</f></classField>
	</class>
	<class path="haxe.rtti.Meta" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/Meta.hx">
		<getType public="1" set="method" line="32" static="1">
			<f a="t">
				<d/>
				<d><c path="Array"><d/></c></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given type (class or enum)</haxe_doc>
		</getType>
		<getMeta set="method" line="37" static="1">
			<f a="t">
				<d/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getMeta>
		<getStatics public="1" set="method" line="65" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given class static fields</haxe_doc>
		</getStatics>
		<getFields public="1" set="method" line="73" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given class fields or enum constructors</haxe_doc>
		</getFields>
		<haxe_doc>An api to access classes and enums metadata at runtime.</haxe_doc>
	</class>
	<class path="haxe.rtti.Rtti" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/Rtti.hx">
		<getRtti public="1" params="T" set="method" line="39" static="1">
			<f a="c">
				<x path="Class"><c path="getRtti.T"/></x>
				<t path="haxe.rtti.Classdef"/>
			</f>
			<haxe_doc>Returns the `haxe.rtti.CType.Classdef` corresponding to class `c`.

		If `c` has no runtime type information, e.g. because no `@:rtti@` was
		added, `null` is returned.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getRtti>
		<hasRtti public="1" params="T" set="method" line="57" static="1">
			<f a="c">
				<x path="Class"><c path="hasRtti.T"/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `c` has runtime type information.

		If `c` is null, the result is unspecified.</haxe_doc>
		</hasRtti>
		<haxe_doc>Rtti is a helper class which supplements the `@:rtti` metadata.</haxe_doc>
	</class>
	<class path="haxe.rtti.XmlParser" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/XmlParser.hx">
		<root public="1"><t path="haxe.rtti.TypeRoot"/></root>
		<curplatform><c path="String"/></curplatform>
		<sort public="1" set="method" line="35"><f a="?l">
	<t path="haxe.rtti.TypeRoot"/>
	<x path="Void"/>
</f></sort>
		<sortFields set="method" line="62"><f a="fl">
	<t path="Iterable"><t path="haxe.rtti.ClassField"/></t>
	<c path="List"><t path="haxe.rtti.ClassField"/></c>
</f></sortFields>
		<process public="1" set="method" line="82"><f a="x:platform">
	<c path="Xml"/>
	<c path="String"/>
	<x path="Void"/>
</f></process>
		<mergeRights set="method" line="88"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></mergeRights>
		<mergeDoc set="method" line="97"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></mergeDoc>
		<mergeFields set="method" line="105"><f a="f:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></mergeFields>
		<newField public="1" set="dynamic" line="109"><f a="c:f">
	<t path="haxe.rtti.Classdef"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Void"/>
</f></newField>
		<mergeClasses set="method" line="112"><f a="c:c2">
	<t path="haxe.rtti.Classdef"/>
	<t path="haxe.rtti.Classdef"/>
	<x path="Bool"/>
</f></mergeClasses>
		<mergeEnums set="method" line="150"><f a="e:e2">
	<t path="haxe.rtti.Enumdef"/>
	<t path="haxe.rtti.Enumdef"/>
	<x path="Bool"/>
</f></mergeEnums>
		<mergeTypedefs set="method" line="170"><f a="t:t2">
	<t path="haxe.rtti.Typedef"/>
	<t path="haxe.rtti.Typedef"/>
	<x path="Bool"/>
</f></mergeTypedefs>
		<mergeAbstracts set="method" line="178"><f a="a:a2">
	<t path="haxe.rtti.Abstractdef"/>
	<t path="haxe.rtti.Abstractdef"/>
	<x path="Bool"/>
</f></mergeAbstracts>
		<merge set="method" line="194"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<x path="Void"/>
</f></merge>
		<mkPath set="method" line="284"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.Path"/>
</f></mkPath>
		<mkTypeParams set="method" line="288"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.TypeParams"/>
</f></mkTypeParams>
		<mkRights set="method" line="295"><f a="r">
	<c path="String"/>
	<e path="haxe.rtti.Rights"/>
</f></mkRights>
		<xerror set="method" line="305"><f a="c">
	<c path="haxe.xml.Fast"/>
	<d/>
</f></xerror>
		<xroot set="method" line="309"><f a="x">
	<c path="haxe.xml.Fast"/>
	<x path="Void"/>
</f></xroot>
		<processElement public="1" set="method" line="315"><f a="x">
	<c path="Xml"/>
	<e path="haxe.rtti.TypeTree"/>
</f></processElement>
		<xmeta set="method" line="326"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.MetaData"/>
</f></xmeta>
		<xoverloads set="method" line="337"><f a="x">
	<c path="haxe.xml.Fast"/>
	<c path="List"><t path="haxe.rtti.ClassField"/></c>
</f></xoverloads>
		<xpath set="method" line="345"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.PathParams"/>
</f></xpath>
		<xclass set="method" line="356"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Classdef"/>
</f></xclass>
		<xclassfield set="method" line="396">
			<f a="x:?defPublic" v=":false">
				<c path="haxe.xml.Fast"/>
				<x path="Bool"/>
				<t path="haxe.rtti.ClassField"/>
			</f>
			<meta><m n=":value"><e>{defPublic:false}</e></m></meta>
		</xclassfield>
		<xenum set="method" line="426"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Enumdef"/>
</f></xenum>
		<xenumfield set="method" line="451"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.EnumField"/>
</f></xenumfield>
		<xabstract set="method" line="481"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Abstractdef"/>
</f></xabstract>
		<xtypedef set="method" line="520"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Typedef"/>
</f></xtypedef>
		<xtype set="method" line="548"><f a="x">
	<c path="haxe.xml.Fast"/>
	<e path="haxe.rtti.CType"/>
</f></xtype>
		<xtypeparams set="method" line="604"><f a="x">
	<c path="haxe.xml.Fast"/>
	<c path="List"><e path="haxe.rtti.CType"/></c>
</f></xtypeparams>
		<defplat set="method" line="611"><f a=""><c path="List"><c path="String"/></c></f></defplat>
		<new public="1" set="method" line="31"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.unit.TestCase" params="" file="C:\HaxeToolkit\haxe\std/haxe/unit/TestCase.hx">
		<currentTest public="1"><c path="haxe.unit.TestStatus"/></currentTest>
		<setup public="1" set="method" line="33"><f a=""><x path="Void"/></f></setup>
		<tearDown public="1" set="method" line="36"><f a=""><x path="Void"/></f></tearDown>
		<print public="1" set="method" line="39"><f a="v">
	<d/>
	<x path="Void"/>
</f></print>
		<assertTrue public="1" set="method" line="43"><f a="b:?c">
	<x path="Bool"/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></assertTrue>
		<assertFalse public="1" set="method" line="53"><f a="b:?c">
	<x path="Bool"/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></assertFalse>
		<assertEquals public="1" params="T" set="method" line="63"><f a="expected:actual:?c">
	<c path="assertEquals.T"/>
	<c path="assertEquals.T"/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></assertEquals>
		<new public="1" set="method" line="30"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":keepSub"/>
			<m n=":publicFields"/>
		</meta>
	</class>
	<class path="haxe.unit.TestResult" params="" file="C:\HaxeToolkit\haxe\std/haxe/unit/TestResult.hx">
		<m_tests><c path="List"><c path="haxe.unit.TestStatus"/></c></m_tests>
		<success public="1" set="null"><x path="Bool"/></success>
		<add public="1" set="method" line="34"><f a="t">
	<c path="haxe.unit.TestStatus"/>
	<x path="Void"/>
</f></add>
		<toString public="1" set="method" line="40"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="29"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.unit.TestRunner" params="" file="C:\HaxeToolkit\haxe\std/haxe/unit/TestRunner.hx">
		<tf expr="null" line="30" static="1">
			<c path="flash.text.TextField"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</tf>
		<print public="1" set="dynamic" line="33" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</print>
		<customTrace set="method" line="75" static="1"><f a="v:?p">
	<unknown/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></customTrace>
		<result public="1" set="null"><c path="haxe.unit.TestResult"/></result>
		<cases><c path="List"><c path="haxe.unit.TestCase"/></c></cases>
		<add public="1" set="method" line="84"><f a="c">
	<c path="haxe.unit.TestCase"/>
	<x path="Void"/>
</f></add>
		<run public="1" set="method" line="88"><f a=""><x path="Bool"/></f></run>
		<runCase set="method" line="97"><f a="t">
	<c path="haxe.unit.TestCase"/>
	<x path="Void"/>
</f></runCase>
		<new public="1" set="method" line="79"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.unit.TestStatus" params="" file="C:\HaxeToolkit\haxe\std/haxe/unit/TestStatus.hx">
		<done public="1"><x path="Bool"/></done>
		<success public="1"><x path="Bool"/></success>
		<error public="1"><c path="String"/></error>
		<method public="1"><c path="String"/></method>
		<classname public="1"><c path="String"/></classname>
		<posInfos public="1"><t path="haxe.PosInfos"/></posInfos>
		<backtrace public="1"><c path="String"/></backtrace>
		<new public="1" set="method" line="36"><f a=""><x path="Void"/></f></new>
	</class>
	<typedef path="haxe.web.DispatchConfig" params="" file="C:\HaxeToolkit\haxe\std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch"><a>
	<rules><d/></rules>
	<obj><d/></obj>
</a></typedef>
	<typedef path="haxe.web.Lock" params="T" file="C:\HaxeToolkit\haxe\std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch"><c path="haxe.web.Lock.T"/></typedef>
	<enum path="haxe.web.MatchRule" params="" file="C:\HaxeToolkit\haxe\std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch">
		<MRInt/>
		<MRBool/>
		<MRFloat/>
		<MRString/>
		<MRDate/>
		<MREnum a="e"><c path="String"/></MREnum>
		<MRDispatch/>
		<MRSpod a="c:lock">
			<c path="String"/>
			<x path="Bool"/>
		</MRSpod>
		<MROpt a="r"><e path="haxe.web.MatchRule"/></MROpt>
	</enum>
	<enum path="haxe.web.DispatchRule" params="" file="C:\HaxeToolkit\haxe\std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch">
		<DRMatch a="r"><e path="haxe.web.MatchRule"/></DRMatch>
		<DRMult a="r"><c path="Array"><e path="haxe.web.MatchRule"/></c></DRMult>
		<DRArgs a="r:args:opt">
			<e path="haxe.web.DispatchRule"/>
			<c path="Array"><a>
	<rule><e path="haxe.web.MatchRule"/></rule>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<x path="Bool"/>
		</DRArgs>
		<DRMeta a="r"><e path="haxe.web.DispatchRule"/></DRMeta>
	</enum>
	<enum path="haxe.web.DispatchError" params="" file="C:\HaxeToolkit\haxe\std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch">
		<DENotFound a="part"><c path="String"/></DENotFound>
		<DEInvalidValue/>
		<DEMissing/>
		<DEMissingParam a="p"><c path="String"/></DEMissingParam>
		<DETooManyValues/>
	</enum>
	<class path="haxe.web.Redirect" params="" file="C:\HaxeToolkit\haxe\std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch"><new public="1" set="method" line="65"><f a=""><x path="Void"/></f></new></class>
	<class path="haxe.web.Dispatch" params="" file="C:\HaxeToolkit\haxe\std/haxe/web/Dispatch.hx">
		<GET_RULES static="1"><c path="Array"><c path="Array"><a>
	<rule><e path="haxe.web.MatchRule"/></rule>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c></c></GET_RULES>
		<make public="1" set="method" static="1"><f a="obj">
	<a/>
	<t path="haxe.web.DispatchConfig"/>
</f></make>
		<run public="1" set="method" static="1"><f a="url:params:obj">
	<c path="String"/>
	<x path="Map">
		<c path="String"/>
		<c path="String"/>
	</x>
	<a/>
	<x path="Void"/>
</f></run>
		<extractConfig set="method" line="468" static="1"><f a="obj">
	<d/>
	<t path="haxe.web.DispatchConfig"/>
</f></extractConfig>
		<parts public="1"><c path="Array"><c path="String"/></c></parts>
		<params public="1"><x path="Map">
	<c path="String"/>
	<c path="String"/>
</x></params>
		<name public="1"><c path="String"/></name>
		<cfg public="1"><t path="haxe.web.DispatchConfig"/></cfg>
		<subDispatch><x path="Bool"/></subDispatch>
		<dispatch public="1" set="method"><f a="obj">
	<a/>
	<x path="Void"/>
</f></dispatch>
		<getParams public="1" set="method"><f a=""><d/></f></getParams>
		<onMeta public="1" set="dynamic" line="103"><f a="v:args">
	<c path="String"/>
	<t path="Null"><c path="Array"><d/></c></t>
	<x path="Void"/>
</f></onMeta>
		<resolveName set="method" line="106"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></resolveName>
		<runtimeDispatch public="1" set="method" line="110"><f a="cfg">
	<t path="haxe.web.DispatchConfig"/>
	<x path="Void"/>
</f></runtimeDispatch>
		<redirect public="1" set="method" line="138"><f a="url:?params">
	<c path="String"/>
	<x path="Map">
		<c path="String"/>
		<c path="String"/>
	</x>
	<x path="Void"/>
</f></redirect>
		<runtimeGetParams public="1" set="method" line="146"><f a="cfgIndex">
	<x path="Int"/>
	<d/>
</f></runtimeGetParams>
		<match set="method" line="152"><f a="v:r:opt">
	<c path="String"/>
	<e path="haxe.web.MatchRule"/>
	<x path="Bool"/>
	<d/>
</f></match>
		<checkParams set="method" line="217"><f a="params:opt">
	<c path="Array"><a>
	<rule><e path="haxe.web.MatchRule"/></rule>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
	<x path="Bool"/>
	<a/>
</f></checkParams>
		<loop set="method" line="231"><f a="args:r">
	<c path="Array"><d/></c>
	<e path="haxe.web.DispatchRule"/>
	<x path="Void"/>
</f></loop>
		<new public="1" set="method" line="77"><f a="url:params">
	<c path="String"/>
	<x path="Map">
		<c path="String"/>
		<c path="String"/>
	</x>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="haxe.xml.Filter" params="" file="C:\HaxeToolkit\haxe\std/haxe/xml/Check.hx" module="haxe.xml.Check">
		<FInt/>
		<FBool/>
		<FEnum a="values"><c path="Array"><c path="String"/></c></FEnum>
		<FReg a="matcher"><c path="EReg"/></FReg>
	</enum>
	<enum path="haxe.xml.Attrib" params="" file="C:\HaxeToolkit\haxe\std/haxe/xml/Check.hx" module="haxe.xml.Check"><Att a="name:?filter:?defvalue">
	<c path="String"/>
	<e path="haxe.xml.Filter"/>
	<c path="String"/>
</Att></enum>
	<enum path="haxe.xml.Rule" params="" file="C:\HaxeToolkit\haxe\std/haxe/xml/Check.hx" module="haxe.xml.Check">
		<RNode a="name:?attribs:?childs">
			<c path="String"/>
			<c path="Array"><e path="haxe.xml.Attrib"/></c>
			<e path="haxe.xml.Rule"/>
		</RNode>
		<RData a="?filter"><e path="haxe.xml.Filter"/></RData>
		<RMulti a="rule:?atLeastOne">
			<e path="haxe.xml.Rule"/>
			<x path="Bool"/>
		</RMulti>
		<RList a="rules:?ordered">
			<c path="Array"><e path="haxe.xml.Rule"/></c>
			<x path="Bool"/>
		</RList>
		<RChoice a="choices"><c path="Array"><e path="haxe.xml.Rule"/></c></RChoice>
		<ROptional a="rule"><e path="haxe.xml.Rule"/></ROptional>
	</enum>
	<enum path="haxe.xml._Check.CheckResult" params="" file="C:\HaxeToolkit\haxe\std/haxe/xml/Check.hx" private="1" module="haxe.xml.Check">
		<CMatch/>
		<CMissing a="r"><e path="haxe.xml.Rule"/></CMissing>
		<CExtra a="x"><c path="Xml"/></CExtra>
		<CElementExpected a="name:x">
			<c path="String"/>
			<c path="Xml"/>
		</CElementExpected>
		<CDataExpected a="x"><c path="Xml"/></CDataExpected>
		<CExtraAttrib a="att:x">
			<c path="String"/>
			<c path="Xml"/>
		</CExtraAttrib>
		<CMissingAttrib a="att:x">
			<c path="String"/>
			<c path="Xml"/>
		</CMissingAttrib>
		<CInvalidAttrib a="att:x:f">
			<c path="String"/>
			<c path="Xml"/>
			<e path="haxe.xml.Filter"/>
		</CInvalidAttrib>
		<CInvalidData a="x:f">
			<c path="Xml"/>
			<e path="haxe.xml.Filter"/>
		</CInvalidData>
		<CInElement a="x:r">
			<c path="Xml"/>
			<e path="haxe.xml._Check.CheckResult"/>
		</CInElement>
	</enum>
	<class path="haxe.xml.Check" params="" file="C:\HaxeToolkit\haxe\std/haxe/xml/Check.hx">
		<blanks expr="~/^[ 
	]*$/" line="59" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[ 
	]*$/</e></m></meta>
		</blanks>
		<isBlank set="method" line="61" static="1"><f a="x">
	<c path="Xml"/>
	<x path="Bool"/>
</f></isBlank>
		<filterMatch set="method" line="65" static="1"><f a="s:f">
	<c path="String"/>
	<e path="haxe.xml.Filter"/>
	<x path="Bool"/>
</f></filterMatch>
		<isNullable set="method" line="79" static="1"><f a="r">
	<e path="haxe.xml.Rule"/>
	<x path="Bool"/>
</f></isNullable>
		<check set="method" line="102" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<e path="haxe.xml._Check.CheckResult"/>
</f></check>
		<checkList set="method" line="167" static="1"><f a="it:r">
	<t path="Iterator"><c path="Xml"/></t>
	<e path="haxe.xml.Rule"/>
	<e path="haxe.xml._Check.CheckResult"/>
</f></checkList>
		<makeWhere set="method" line="240" static="1"><f a="path">
	<c path="Array"><c path="Xml"/></c>
	<c path="String"/>
</f></makeWhere>
		<makeString set="method" line="255" static="1"><f a="x">
	<c path="Xml"/>
	<c path="String"/>
</f></makeString>
		<makeRule set="method" line="264" static="1"><f a="r">
	<e path="haxe.xml.Rule"/>
	<c path="String"/>
</f></makeRule>
		<makeError set="method" line="275" static="1"><f a="m:?path">
	<e path="haxe.xml._Check.CheckResult"/>
	<c path="Array"><c path="Xml"/></c>
	<c path="String"/>
</f></makeError>
		<checkNode public="1" set="method" line="305" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<x path="Void"/>
</f></checkNode>
		<checkDocument public="1" set="method" line="312" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<x path="Void"/>
</f></checkDocument>
	</class>
	<class path="haxe.xml._Fast.NodeAccess" params="" file="C:\HaxeToolkit\haxe\std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="32"><f a="name">
	<c path="String"/>
	<c path="haxe.xml.Fast"/>
</f></resolve>
		<new public="1" set="method" line="28"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.xml.Fast"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.AttribAccess" params="" file="C:\HaxeToolkit\haxe\std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="51"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></resolve>
		<new public="1" set="method" line="47"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="String"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.HasAttribAccess" params="" file="C:\HaxeToolkit\haxe\std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="70"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></resolve>
		<new public="1" set="method" line="66"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><x path="Bool"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.HasNodeAccess" params="" file="C:\HaxeToolkit\haxe\std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="86"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></resolve>
		<new public="1" set="method" line="82"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><x path="Bool"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.NodeListAccess" params="" file="C:\HaxeToolkit\haxe\std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="100"><f a="name">
	<c path="String"/>
	<c path="List"><c path="haxe.xml.Fast"/></c>
</f></resolve>
		<new public="1" set="method" line="96"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="List"><c path="haxe.xml.Fast"/></c></haxe_dynamic>
	</class>
	<class path="haxe.xml.Fast" params="" file="C:\HaxeToolkit\haxe\std/haxe/xml/Fast.hx">
		<x public="1" set="null"><c path="Xml"/></x>
		<name public="1" get="accessor" set="null"><c path="String"/></name>
		<innerData public="1" get="accessor" set="null"><c path="String"/></innerData>
		<innerHTML public="1" get="accessor" set="null"><c path="String"/></innerHTML>
		<node public="1" set="null"><c path="haxe.xml._Fast.NodeAccess"/></node>
		<nodes public="1" set="null"><c path="haxe.xml._Fast.NodeListAccess"/></nodes>
		<att public="1" set="null"><c path="haxe.xml._Fast.AttribAccess"/></att>
		<has public="1" set="null"><c path="haxe.xml._Fast.HasAttribAccess"/></has>
		<hasNode public="1" set="null"><c path="haxe.xml._Fast.HasNodeAccess"/></hasNode>
		<elements public="1" get="accessor" set="null"><t path="Iterator"><c path="haxe.xml.Fast"/></t></elements>
		<get_name set="method" line="133"><f a=""><c path="String"/></f></get_name>
		<get_innerData set="method" line="137"><f a=""><c path="String"/></f></get_innerData>
		<get_innerHTML set="method" line="157"><f a=""><c path="String"/></f></get_innerHTML>
		<get_elements set="method" line="164"><f a=""><a>
	<next><f a=""><c path="haxe.xml.Fast"/></f></next>
	<hasNext><f a=""><x path="Bool"/></f></hasNext>
</a></f></get_elements>
		<new public="1" set="method" line="122"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.xml._Parser.S" params="" file="C:\HaxeToolkit\haxe\std/haxe/xml/Parser.hx" private="1" module="haxe.xml.Parser" extern="1">
		<IGNORE_SPACES public="1" get="inline" set="null" expr="0" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</IGNORE_SPACES>
		<BEGIN public="1" get="inline" set="null" expr="1" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</BEGIN>
		<BEGIN_NODE public="1" get="inline" set="null" expr="2" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</BEGIN_NODE>
		<TAG_NAME public="1" get="inline" set="null" expr="3" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</TAG_NAME>
		<BODY public="1" get="inline" set="null" expr="4" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BODY>
		<ATTRIB_NAME public="1" get="inline" set="null" expr="5" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</ATTRIB_NAME>
		<EQUALS public="1" get="inline" set="null" expr="6" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</EQUALS>
		<ATTVAL_BEGIN public="1" get="inline" set="null" expr="7" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</ATTVAL_BEGIN>
		<ATTRIB_VAL public="1" get="inline" set="null" expr="8" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</ATTRIB_VAL>
		<CHILDS public="1" get="inline" set="null" expr="9" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</CHILDS>
		<CLOSE public="1" get="inline" set="null" expr="10" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</CLOSE>
		<WAIT_END public="1" get="inline" set="null" expr="11" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>11</e></m></meta>
		</WAIT_END>
		<WAIT_END_RET public="1" get="inline" set="null" expr="12" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</WAIT_END_RET>
		<PCDATA public="1" get="inline" set="null" expr="13" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>13</e></m></meta>
		</PCDATA>
		<HEADER public="1" get="inline" set="null" expr="14" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>14</e></m></meta>
		</HEADER>
		<COMMENT public="1" get="inline" set="null" expr="15" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>15</e></m></meta>
		</COMMENT>
		<DOCTYPE public="1" get="inline" set="null" expr="16" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</DOCTYPE>
		<CDATA public="1" get="inline" set="null" expr="17" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>17</e></m></meta>
		</CDATA>
		<ESCAPE public="1" get="inline" set="null" expr="18" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>18</e></m></meta>
		</ESCAPE>
	</class>
	<class path="haxe.xml.Parser" params="" file="C:\HaxeToolkit\haxe\std/haxe/xml/Parser.hx">
		<escapes expr="&apos;???&apos;" line="51" static="1">
			<c path="haxe.ds.StringMap"><c path="String"/></c>
			<meta><m n=":value"><e>'???'</e></m></meta>
		</escapes>
		<parse public="1" set="method" line="64" static="1">
			<f a="str:?strict" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="Xml"/>
			</f>
			<meta><m n=":value"><e>{strict:false}</e></m></meta>
			<haxe_doc>Parses the String into an XML Document. Set strict parsing to true in order to enable a strict check of XML attributes and entities.</haxe_doc>
		</parse>
		<doParse set="method" line="71" static="1">
			<f a="str:strict:?p:?parent" v="::0:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="Xml"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{p:0}</e></m></meta>
		</doParse>
		<isValidChar get="inline" set="null" line="393" static="1"><f a="c">
	<x path="Int"/>
	<x path="Bool"/>
</f></isValidChar>
	</class>
	<class path="haxe.xml.Printer" params="" file="C:\HaxeToolkit\haxe\std/haxe/xml/Printer.hx">
		<print public="1" set="method" line="33" static="1">
			<f a="xml:?pretty" v=":false">
				<c path="Xml"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{pretty:false}</e></m></meta>
		</print>
		<output><c path="StringBuf"/></output>
		<pretty><x path="Bool"/></pretty>
		<writeNode set="method" line="47"><f a="value:tabs">
	<c path="Xml"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeNode>
		<write get="inline" set="null" line="100"><f a="input">
	<c path="String"/>
	<x path="Void"/>
</f></write>
		<newline get="inline" set="null" line="104"><f a=""><x path="Void"/></f></newline>
		<hasChildren set="method" line="110"><f a="value">
	<c path="Xml"/>
	<x path="Bool"/>
</f></hasChildren>
		<new set="method" line="42"><f a="pretty">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.xml.Proxy" params="Const:T" file="C:\HaxeToolkit\haxe\std/haxe/xml/Proxy.hx">
		<__f><f a="">
	<c path="String"/>
	<c path="haxe.xml.Proxy.T"/>
</f></__f>
		<resolve public="1" set="method" line="50"><f a="k">
	<c path="String"/>
	<c path="haxe.xml.Proxy.T"/>
</f></resolve>
		<new public="1" set="method" line="46"><f a="f">
	<f a="">
		<c path="String"/>
		<c path="haxe.xml.Proxy.T"/>
	</f>
	<x path="Void"/>
</f></new>
		<haxe_doc><![CDATA[This proxy can be inherited with an XML file name parameter.
	It will	only allow access to fields which corresponds to an "id" attribute
	value in the XML file :

	[
	class MyXml extends haxe.xml.Proxy<"my.xml",MyStructure> {
	}
	...
	var h = new haxe.ds.StringMap<MyStructure>();
	// ... fill h with "my.xml" content
	var m = new MyXml(h.get);
	trace(m.myNode.structField);
	// access to "myNode" is only possible
	// if you have an id="myNode" attribute
	// in your XML, and completion works as well
	]]]></haxe_doc>
	</class>
	<class path="haxe.zip.Compress" params="" file="C:\HaxeToolkit\haxe\std/flash/_std/haxe/zip/Compress.hx">
		<run public="1" set="method" line="41" static="1"><f a="s:level">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<execute public="1" set="method" line="31"><f a="src:srcPos:dst:dstPos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></execute>
		<setFlushMode public="1" set="method" line="35"><f a="f">
	<e path="haxe.zip.FlushMode"/>
	<x path="Void"/>
</f></setFlushMode>
		<close public="1" set="method" line="38"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="27"><f a="level">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":coreApi"/></meta>
	</class>
	<enum path="haxe.zip.ExtraField" params="" file="C:\HaxeToolkit\haxe\std/haxe/zip/Entry.hx" module="haxe.zip.Entry">
		<FUnknown a="tag:bytes">
			<x path="Int"/>
			<c path="haxe.io.Bytes"/>
		</FUnknown>
		<FInfoZipUnicodePath a="name:crc">
			<c path="String"/>
			<x path="Int"/>
		</FInfoZipUnicodePath>
		<FUtf8/>
	</enum>
	<typedef path="haxe.zip.Entry" params="" file="C:\HaxeToolkit\haxe\std/haxe/zip/Entry.hx"><a>
	<fileTime><c path="Date"/></fileTime>
	<fileSize><x path="Int"/></fileSize>
	<fileName><c path="String"/></fileName>
	<extraFields>
		<t path="Null"><t path="Null"><c path="List"><e path="haxe.zip.ExtraField"/></c></t></t>
		<meta><m n=":optional"/></meta>
	</extraFields>
	<dataSize><x path="Int"/></dataSize>
	<data><t path="Null"><c path="haxe.io.Bytes"/></t></data>
	<crc32><t path="Null"><x path="Int"/></t></crc32>
	<compressed><x path="Bool"/></compressed>
</a></typedef>
	<enum path="haxe.zip.FlushMode" params="" file="C:\HaxeToolkit\haxe\std/haxe/zip/FlushMode.hx">
		<NO/>
		<SYNC/>
		<FULL/>
		<FINISH/>
		<BLOCK/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.zip.Huffman" params="" file="C:\HaxeToolkit\haxe\std/haxe/zip/Huffman.hx">
		<Found a="i"><x path="Int"/></Found>
		<NeedBit a="left:right">
			<e path="haxe.zip.Huffman"/>
			<e path="haxe.zip.Huffman"/>
		</NeedBit>
		<NeedBits a="n:table">
			<x path="Int"/>
			<c path="Array"><e path="haxe.zip.Huffman"/></c>
		</NeedBits>
	</enum>
	<class path="haxe.zip.HuffTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/zip/Huffman.hx" module="haxe.zip.Huffman">
		<treeDepth set="method" line="35"><f a="t">
	<e path="haxe.zip.Huffman"/>
	<x path="Int"/>
</f></treeDepth>
		<treeCompress set="method" line="46"><f a="t">
	<e path="haxe.zip.Huffman"/>
	<e path="haxe.zip.Huffman"/>
</f></treeCompress>
		<treeWalk set="method" line="63"><f a="table:p:cd:d:t">
	<c path="Array"><e path="haxe.zip.Huffman"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
	<x path="Void"/>
</f></treeWalk>
		<treeMake set="method" line="76"><f a="bits:maxbits:v:len">
	<c path="haxe.ds.IntMap"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
</f></treeMake>
		<make public="1" set="method" line="86"><f a="lengths:pos:nlengths:maxbits">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
</f></make>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.zip._InflateImpl.Window" params="" file="C:\HaxeToolkit\haxe\std/haxe/zip/InflateImpl.hx" private="1" module="haxe.zip.InflateImpl">
		<SIZE public="1" get="inline" set="null" expr="1&lt;&lt;15" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e><![CDATA[1<<15]]></e></m></meta>
		</SIZE>
		<BUFSIZE public="1" get="inline" set="null" expr="1&lt;&lt;16" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e><![CDATA[1<<16]]></e></m></meta>
		</BUFSIZE>
		<buffer public="1"><c path="haxe.io.Bytes"/></buffer>
		<pos public="1"><x path="Int"/></pos>
		<crc><c path="haxe.crypto.Adler32"/></crc>
		<slide public="1" set="method" line="41"><f a=""><x path="Void"/></f></slide>
		<addBytes public="1" set="method" line="49"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<addByte public="1" set="method" line="55"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<getLastChar public="1" set="method" line="61"><f a=""><x path="Int"/></f></getLastChar>
		<available public="1" set="method" line="65"><f a=""><x path="Int"/></f></available>
		<checksum public="1" set="method" line="69"><f a=""><c path="haxe.crypto.Adler32"/></f></checksum>
		<new public="1" set="method" line="35"><f a="hasCrc">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="haxe.zip._InflateImpl.State" params="" file="C:\HaxeToolkit\haxe\std/haxe/zip/InflateImpl.hx" private="1" module="haxe.zip.InflateImpl">
		<Head/>
		<Block/>
		<CData/>
		<Flat/>
		<Crc/>
		<Dist/>
		<DistOne/>
		<Done/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="haxe.zip.InflateImpl" params="" file="C:\HaxeToolkit\haxe\std/haxe/zip/InflateImpl.hx">
		<LEN_EXTRA_BITS_TBL expr="[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1]" line="92" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1]</e></m></meta>
		</LEN_EXTRA_BITS_TBL>
		<LEN_BASE_VAL_TBL expr="[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258]" line="93" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258]</e></m></meta>
		</LEN_BASE_VAL_TBL>
		<DIST_EXTRA_BITS_TBL expr="[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1]" line="94" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1]</e></m></meta>
		</DIST_EXTRA_BITS_TBL>
		<DIST_BASE_VAL_TBL expr="[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577]" line="95" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577]</e></m></meta>
		</DIST_BASE_VAL_TBL>
		<CODE_LENGTHS_POS expr="[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]" line="96" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]</e></m></meta>
		</CODE_LENGTHS_POS>
		<FIXED_HUFFMAN expr="null" line="114" static="1">
			<e path="haxe.zip.Huffman"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</FIXED_HUFFMAN>
		<run public="1" set="method" line="363" static="1">
			<f a="i:?bufsize" v=":65536">
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{bufsize:65536}</e></m></meta>
		</run>
		<nbits><x path="Int"/></nbits>
		<bits><x path="Int"/></bits>
		<state><e path="haxe.zip._InflateImpl.State"/></state>
		<final><x path="Bool"/></final>
		<huffman><e path="haxe.zip.Huffman"/></huffman>
		<huffdist><t path="Null"><e path="haxe.zip.Huffman"/></t></huffdist>
		<htools><c path="haxe.zip.HuffTools"/></htools>
		<len><x path="Int"/></len>
		<dist><x path="Int"/></dist>
		<needed><x path="Int"/></needed>
		<output><c path="haxe.io.Bytes"/></output>
		<outpos><x path="Int"/></outpos>
		<input><c path="haxe.io.Input"/></input>
		<lengths><c path="Array"><x path="Int"/></c></lengths>
		<window><c path="haxe.zip._InflateImpl.Window"/></window>
		<buildFixedHuffman set="method" line="136"><f a=""><e path="haxe.zip.Huffman"/></f></buildFixedHuffman>
		<readBytes public="1" set="method" line="146"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<getBits set="method" line="156"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getBits>
		<getBit set="method" line="167"><f a=""><x path="Bool"/></f></getBit>
		<getRevBits set="method" line="178"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getRevBits>
		<resetBits set="method" line="187"><f a=""><x path="Void"/></f></resetBits>
		<addBytes set="method" line="192"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<addByte set="method" line="199"><f a="b">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<addDistOne set="method" line="206"><f a="n">
	<x path="Int"/>
	<x path="Void"/>
</f></addDistOne>
		<addDist set="method" line="212"><f a="d:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addDist>
		<applyHuffman set="method" line="216"><f a="h">
	<e path="haxe.zip.Huffman"/>
	<x path="Int"/>
</f></applyHuffman>
		<inflateLengths set="method" line="224"><f a="a:max">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></inflateLengths>
		<inflateLoop set="method" line="253"><f a=""><x path="Bool"/></f></inflateLoop>
		<new public="1" set="method" line="116">
			<f a="i:?header:?crc" v=":true:true">
				<c path="haxe.io.Input"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{crc:true,header:true}</e></m></meta>
		</new>
		<haxe_doc>A pure Haxe implementation of the ZLIB Inflate algorithm which allows reading compressed data without any platform-specific support.</haxe_doc>
	</class>
	<class path="haxe.zip.Reader" params="" file="C:\HaxeToolkit\haxe\std/haxe/zip/Reader.hx">
		<readZip public="1" set="method" line="190" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="List"><t path="haxe.zip.Entry"/></c>
</f></readZip>
		<unzip public="1" set="method" line="195" static="1"><f a="f">
	<t path="haxe.zip.Entry"/>
	<t path="Null"><c path="haxe.io.Bytes"/></t>
</f></unzip>
		<i><c path="haxe.io.Input"/></i>
		<readZipDate set="method" line="35"><f a=""><c path="Date"/></f></readZipDate>
		<readExtraFields set="method" line="47"><f a="length">
	<x path="Int"/>
	<c path="List"><e path="haxe.zip.ExtraField"/></c>
</f></readExtraFields>
		<readEntryHeader public="1" set="method" line="75"><f a=""><t path="haxe.zip.Entry"/></f></readEntryHeader>
		<read public="1" set="method" line="118"><f a=""><c path="List"><t path="haxe.zip.Entry"/></c></f></read>
		<new public="1" set="method" line="31"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.zip.Tools" params="" file="C:\HaxeToolkit\haxe\std/haxe/zip/Tools.hx"><compress public="1" set="method" line="26" static="1"><f a="f:level">
	<t path="haxe.zip.Entry"/>
	<x path="Int"/>
	<x path="Void"/>
</f></compress></class>
	<class path="haxe.zip.Uncompress" params="" file="C:\HaxeToolkit\haxe\std/flash/_std/haxe/zip/Uncompress.hx">
		<run public="1" set="method" line="41" static="1"><f a="src:?bufsize">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<execute public="1" set="method" line="31"><f a="src:srcPos:dst:dstPos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></execute>
		<setFlushMode public="1" set="method" line="35"><f a="f">
	<e path="haxe.zip.FlushMode"/>
	<x path="Void"/>
</f></setFlushMode>
		<close public="1" set="method" line="38"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="27"><f a="?windowBits">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.zip.Writer" params="" file="C:\HaxeToolkit\haxe\std/haxe/zip/Writer.hx">
		<CENTRAL_DIRECTORY_RECORD_FIELDS_SIZE get="inline" set="null" expr="46" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>46</e></m></meta>
		</CENTRAL_DIRECTORY_RECORD_FIELDS_SIZE>
		<LOCAL_FILE_HEADER_FIELDS_SIZE get="inline" set="null" expr="30" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>30</e></m></meta>
		</LOCAL_FILE_HEADER_FIELDS_SIZE>
		<o><c path="haxe.io.Output"/></o>
		<files><c path="List"><a>
	<size><x path="Int"/></size>
	<name><c path="String"/></name>
	<fields><c path="haxe.io.Bytes"/></fields>
	<date><c path="Date"/></date>
	<crc><x path="Int"/></crc>
	<compressed><x path="Bool"/></compressed>
	<clen><x path="Int"/></clen>
</a></c></files>
		<writeZipDate set="method" line="50"><f a="date">
	<c path="Date"/>
	<x path="Void"/>
</f></writeZipDate>
		<writeEntryHeader public="1" set="method" line="61"><f a="f">
	<t path="haxe.zip.Entry"/>
	<x path="Void"/>
</f></writeEntryHeader>
		<write public="1" set="method" line="121"><f a="files">
	<c path="List"><t path="haxe.zip.Entry"/></c>
	<x path="Void"/>
</f></write>
		<writeCDR public="1" set="method" line="129"><f a=""><x path="Void"/></f></writeCDR>
		<new public="1" set="method" line="45"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
</haxe>