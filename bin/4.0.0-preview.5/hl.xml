<!-- This file can be parsed by haxe.rtti.XmlParser -->
<haxe>
	<abstract path="Any" params="" file="/home/travis/build/HaxeFoundation/haxe/std/Any.hx">
		<from><icast field="__cast"><c path="__cast.T"/></icast></from>
		<this><d/></this>
		<to><icast field="__promote"><c path="__promote.T"/></icast></to>
		<haxe_doc>`Any` is a type that is compatible with any other in both ways.

	This means that a value of any type can be assigned to `Any`, and
	vice-versa, a value of `Any` type can be assigned to any other type.

	It's a more type-safe alternative to `Dynamic`, because it doesn't
	support field access or operators and it's bound to monomorphs. So,
	to work with the actual value, it needs to be explicitly promoted
	to another type.</haxe_doc>
		<impl><class path="_Any.Any_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/Any.hx" private="1" module="Any">
	<__promote params="T" get="inline" set="null" line="35" static="1">
		<f a="this">
			<d/>
			<c path="__promote.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":to"/>
		</meta>
	</__promote>
	<__cast params="T" get="inline" set="null" line="36" static="1">
		<f a="value">
			<c path="__cast.T"/>
			<x path="Any"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":from"/>
		</meta>
	</__cast>
	<toString get="inline" set="null" line="37" static="1">
		<f a="this">
			<d/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</toString>
</class></impl>
	</abstract>
	<class path="_Any.Any_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/Any.hx" private="1" module="Any">
		<__promote params="T" get="inline" set="null" line="35" static="1">
			<f a="this">
				<d/>
				<c path="__promote.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":to"/>
			</meta>
		</__promote>
		<__cast params="T" get="inline" set="null" line="36" static="1">
			<f a="value">
				<c path="__cast.T"/>
				<x path="Any"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":from"/>
			</meta>
		</__cast>
		<toString get="inline" set="null" line="37" static="1">
			<f a="this">
				<d/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</toString>
	</class>
	<class path="Array" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` is less than or equals
		`pos`, the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.ArraySort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, an empty Array [] is 
		returned and `this` Array is unchanged.

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use `Std.string()` to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurrence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed accordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurrence of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurrence of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<map public="1" params="S" set="method">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" set="method">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<resize public="1" set="method">
			<f a="len">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the length of the Array.

		If `len` is shorter than the array's current size, the last
		`length - len` elements will be removed. If `len` is longer, the Array
		will be extended, with new elements set to a target-specific default
		value:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets</haxe_doc>
		</resize>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.

	@see https://haxe.org/manual/std-Array.html
	@see https://haxe.org/manual/lf-array-comprehension.html</haxe_doc>
	</class>
	<abstract path="Class" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/Date.hx">
		<now public="1" set="method" line="84" static="1">
			<f a=""><c path="Date"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromInt set="method" line="90" static="1">
			<f a="t">
				<x path="Int"/>
				<c path="Date"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</fromInt>
		<fromTime public="1" set="method" line="96" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a Date from timestamp (in milliseconds) `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" line="102" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a Date from a formatted string `s`, with the following accepted
		formats:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats are expressed in local time, the third in UTC
		Epoch.</haxe_doc>
		</fromString>
		<date_new set="method" line="109" static="1">
			<f a="year:month:day:hours:minutes:seconds">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative"/></meta>
		</date_new>
		<date_now set="method" line="114" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":hlNative"/></meta>
		</date_now>
		<date_from_time set="method" line="119" static="1">
			<f a="t">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative"/></meta>
		</date_from_time>
		<date_from_string set="method" line="124" static="1">
			<f a="b:len">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative"/></meta>
		</date_from_string>
		<date_get_time set="method" line="129" static="1">
			<f a="t">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":hlNative"/></meta>
		</date_get_time>
		<date_get_inf set="method" line="134" static="1">
			<f a="t:year:month:day:hours:minutes:seconds:wday">
				<x path="Int"/>
				<x path="hl.Ref"><x path="Int"/></x>
				<x path="hl.Ref"><x path="Int"/></x>
				<x path="hl.Ref"><x path="Int"/></x>
				<x path="hl.Ref"><x path="Int"/></x>
				<x path="hl.Ref"><x path="Int"/></x>
				<x path="hl.Ref"><x path="Int"/></x>
				<x path="hl.Ref"><x path="Int"/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative"/></meta>
		</date_get_inf>
		<date_to_string set="method" line="138" static="1">
			<f a="t:outLen">
				<x path="Int"/>
				<x path="hl.Ref"><x path="Int"/></x>
				<x path="hl.Bytes"/>
			</f>
			<meta><m n=":hlNative"/></meta>
		</date_to_string>
		<t><x path="Int"/></t>
		<getTime public="1" set="method" line="32">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp (in milliseconds) of the date. It might
		only have a per-second precision depending on the platforms.

		For measuring time differences with millisecond accuracy on
		all platforms, see `haxe.Timer.stamp`.</haxe_doc>
		</getTime>
		<getFullYear public="1" set="method" line="36">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4-digits).</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method" line="42">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range).</haxe_doc>
		</getMonth>
		<getDate public="1" set="method" line="48">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range).</haxe_doc>
		</getDate>
		<getHours public="1" set="method" line="54">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range).</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method" line="60">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range).</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method" line="66">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range).</haxe_doc>
		</getSeconds>
		<getDay public="1" set="method" line="72">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range) where `0` is Sunday.</haxe_doc>
		</getDay>
		<toString public="1" set="method" line="78">
			<f a=""><c path="String"/></f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>Returns a string representation of `this` Date, by using the
		standard format [YYYY-MM-DD HH:MM:SS]. See `DateTools.format` for
		other formating rules.</haxe_doc>
		</toString>
		<new public="1" set="method" line="28">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There are some extra functions available in the `DateTools` class.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
		<meta>
			<m n=":coreApi"/>
			<m n=":final"/>
		</meta>
	</class>
	<class path="DateTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/DateTools.hx">
		<DAY_SHORT_NAMES expr="[&quot;Sun&quot;, &quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;]" line="36" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]</e></m></meta>
		</DAY_SHORT_NAMES>
		<DAY_NAMES expr="[&quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;]" line="37" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]</e></m></meta>
		</DAY_NAMES>
		<MONTH_SHORT_NAMES expr="[&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;]" line="38" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]</e></m></meta>
		</MONTH_SHORT_NAMES>
		<MONTH_NAMES expr="[&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;]" line="39" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]</e></m></meta>
		</MONTH_NAMES>
		<__format_get set="method" line="41" static="1">
			<f a="d:e">
				<c path="Date"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__format_get>
		<__format set="method" line="104" static="1"><f a="d:f">
	<c path="Date"/>
	<c path="String"/>
	<c path="String"/>
</f></__format>
		<format public="1" set="method" line="143" static="1">
			<f a="d:f">
				<c path="Date"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Format the date `d` according to the format `f`. The format is
		compatible with the `strftime` standard format, except that there is no
		support in Flash and JS for day and months names (due to lack of proper
		internationalization API). On Haxe/Neko/Windows, some formats are not
		supported.

		```haxe
		var t = DateTools.format(Date.now(), "%Y-%m-%d_%H:%M:%S");
		// 2016-07-08_14:44:05

		var t = DateTools.format(Date.now(), "%r");
		// 02:44:05 PM

		var t = DateTools.format(Date.now(), "%T");
		// 14:44:05

		var t = DateTools.format(Date.now(), "%F");
		// 2016-07-08
		```</haxe_doc>
		</format>
		<delta public="1" get="inline" set="null" line="159" static="1">
			<f a="d:t">
				<c path="Date"/>
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns the result of adding timestamp `t` to Date `d`.

		This is a convenience function for calling
		`Date.fromTime(d.getTime() + t)`.</haxe_doc>
		</delta>
		<DAYS_OF_MONTH expr="[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]" line="163" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]</e></m></meta>
		</DAYS_OF_MONTH>
		<getMonthDays public="1" set="method" line="170" static="1">
			<f a="d">
				<c path="Date"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of days in the month of Date `d`.

		This method handles leap years.</haxe_doc>
		</getMonthDays>
		<seconds public="1" get="inline" set="null" line="184" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of seconds to a timestamp.</haxe_doc>
		</seconds>
		<minutes public="1" get="inline" set="null" line="191" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of minutes to a timestamp.</haxe_doc>
		</minutes>
		<hours public="1" get="inline" set="null" line="198" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of hours to a timestamp.</haxe_doc>
		</hours>
		<days public="1" get="inline" set="null" line="205" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of days to a timestamp.</haxe_doc>
		</days>
		<parse public="1" set="method" line="212" static="1">
			<f a="t">
				<x path="Float"/>
				<a>
					<seconds><x path="Int"/></seconds>
					<ms><x path="Float"/></ms>
					<minutes><x path="Int"/></minutes>
					<hours><x path="Int"/></hours>
					<days><x path="Int"/></days>
				</a>
			</f>
			<haxe_doc>Separate a date-time into several components</haxe_doc>
		</parse>
		<make public="1" set="method" line="228" static="1">
			<f a="o">
				<a>
					<seconds><x path="Int"/></seconds>
					<ms><x path="Float"/></ms>
					<minutes><x path="Int"/></minutes>
					<hours><x path="Int"/></hours>
					<days><x path="Int"/></days>
				</a>
				<x path="Float"/>
			</f>
			<haxe_doc>Build a date-time from several components</haxe_doc>
		</make>
		<haxe_doc>The DateTools class contains some extra functionalities for handling `Date`
	instances and timestamps.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
	</class>
	<typedef path="_EReg.ERegValue" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/EReg.hx" private="1" module="EReg"><c path="hl.Abstract"><c path="Sereg"/></c></typedef>
	<class path="EReg" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/EReg.hx">
		<escape public="1" set="method" line="186" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Escape the string `s` for use as a part of regular expression.

		If `s` is null, the result is unspecified.</haxe_doc>
		</escape>
		<escapeRegExpRe expr="~/[\[\]{}()*+?.\\\^$|]/" line="189" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/[\[\]{}()*+?.\\\^$|]/</e></m></meta>
		</escapeRegExpRe>
		<regexp_new_options set="method" line="191" static="1">
			<f a="bytes:options">
				<x path="hl.Bytes"/>
				<x path="hl.Bytes"/>
				<t path="_EReg.ERegValue"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"regexp_new_options"</e>
</m></meta>
		</regexp_new_options>
		<regexp_match set="method" line="195" static="1">
			<f a="r:str:pos:size">
				<t path="_EReg.ERegValue"/>
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"regexp_match"</e>
</m></meta>
		</regexp_match>
		<regexp_matched_pos set="method" line="199" static="1">
			<f a="r:n:size">
				<t path="_EReg.ERegValue"/>
				<x path="Int"/>
				<x path="hl.Ref"><x path="Int"/></x>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"regexp_matched_pos"</e>
</m></meta>
		</regexp_matched_pos>
		<r><t path="_EReg.ERegValue"/></r>
		<last><c path="String"/></last>
		<global><x path="Bool"/></global>
		<match public="1" set="method" line="40">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `this` regular expression matches String `s`.

		This method modifies the internal state.

		If `s` is `null`, the result is unspecified.</haxe_doc>
		</match>
		<matched public="1" set="method" line="49">
			<f a="n">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the matched sub-group `n` of `this` EReg.

		This method should only be called after `this.match` or
		`this.matchSub`, and then operates on the String of that operation.

		The index `n` corresponds to the n-th set of parentheses in the pattern
		of `this` EReg. If no such sub-group exists, the result is unspecified.

		If `n` equals 0, the whole matched substring is returned.</haxe_doc>
		</matched>
		<matchedLeft public="1" set="method" line="55">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the part to the left of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the left of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedLeft>
		<matchedRight public="1" set="method" line="60">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the part to the right of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the right of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedRight>
		<matchedPos public="1" set="method" line="66">
			<f a=""><a>
	<pos><x path="Int"/></pos>
	<len><x path="Int"/></len>
</a></f>
			<haxe_doc>Returns the position and length of the last matched substring, within
		the String which was last used as argument to `this.match` or
		`this.matchSub`.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, the position and
		length of the leftmost substring is returned.</haxe_doc>
		</matchedPos>
		<matchSub public="1" set="method" line="73">
			<f a="s:pos:?len" v="::-1">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
			<haxe_doc>Tells if `this` regular expression matches a substring of String `s`.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.match(s.substr(pos,len))` can be used instead.

		This method modifies the internal state.

		If `s` is null, the result is unspecified.</haxe_doc>
		</matchSub>
		<split public="1" set="method" line="82">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits String `s` at all substrings `this` EReg matches.

		If a match is found at the start of `s`, the result contains a leading
		empty String "" entry.

		If a match is found at the end of `s`, the result contains a trailing
		empty String "" entry.

		If two matching substrings appear next to each other, the result
		contains the empty String `""` between them.

		By default, this method splits `s` into two parts at the first matched
		substring. If the global g modifier is in place, `s` is split at each
		matched substring.

		If `s` is null, the result is unspecified.</haxe_doc>
		</split>
		<replace public="1" set="method" line="107">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replaces the first substring of `s` which `this` EReg matches with `by`.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `by` contains `$1` to `$9`, the digit corresponds to number of a
		matched sub-group and its value is used instead. If no such sub-group
		exists, the replacement is unspecified. The string `$$` becomes `$`.

		If `s` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<map public="1" set="method" line="160">
			<f a="s:f">
				<c path="String"/>
				<f a="">
					<c path="EReg"/>
					<c path="String"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>Calls the function `f` for the substring of `s` which `this` EReg matches
		and replaces that substring with the result of `f` call.

		The `f` function takes `this` EReg object as its first argument and should
		return a replacement string for the substring matched.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `s` or `f` are null, the result is unspecified.</haxe_doc>
		</map>
		<new public="1" set="method" line="32">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new regular expression with pattern `r` and modifiers `opt`.

		This is equivalent to the shorthand syntax `~/r/opt`

		If `r` or `opt` are null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The EReg class represents regular expressions.

	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.

	EReg instances can be created by calling the constructor, or with the
	special syntax `~/pattern/modifier`

	EReg instances maintain an internal state, which is affected by several of
	its methods.

	A detailed explanation of the supported operations is available at
	<https://haxe.org/manual/std-regex.html>]]></haxe_doc>
		<meta>
			<m n=":access"><e>String</e></m>
			<m n=":coreApi"/>
			<m n=":final"/>
		</meta>
	</class>
	<abstract path="Enum" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/home/travis/build/HaxeFoundation/haxe/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="_EnumValue.EnumValue_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/EnumValue.hx" private="1" module="EnumValue"><match public="1" set="method" line="58" static="1">
	<f a="this:pattern">
		<x path="EnumValue"/>
		<d/>
		<x path="Bool"/>
	</f>
	<meta><m n=":impl"/></meta>
	<haxe_doc>Matches enum instance `e` against pattern `pattern`, returning `true` if
		matching succeeded and `false` otherwise.

		Example usage:

		```haxe
		if (e.match(pattern)) {
			// codeIfTrue
		} else {
			// codeIfFalse
		}
		```

		This is equivalent to the following code:

		```haxe
		switch (e) {
			case pattern:
				// codeIfTrue
			case _:
				// codeIfFalse
		}
		```

		This method is implemented in the compiler. This definition exists only
		for documentation.</haxe_doc>
</match></class></impl>
	</abstract>
	<class path="_EnumValue.EnumValue_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/EnumValue.hx" private="1" module="EnumValue"><match public="1" set="method" line="58" static="1">
	<f a="this:pattern">
		<x path="EnumValue"/>
		<d/>
		<x path="Bool"/>
	</f>
	<meta><m n=":impl"/></meta>
	<haxe_doc>Matches enum instance `e` against pattern `pattern`, returning `true` if
		matching succeeded and `false` otherwise.

		Example usage:

		```haxe
		if (e.match(pattern)) {
			// codeIfTrue
		} else {
			// codeIfFalse
		}
		```

		This is equivalent to the following code:

		```haxe
		switch (e) {
			case pattern:
				// codeIfTrue
			case _:
				// codeIfFalse
		}
		```

		This method is implemented in the compiler. This definition exists only
		for documentation.</haxe_doc>
</match></class>
	<class path="IntIterator" params="" file="/home/travis/build/HaxeFoundation/haxe/std/IntIterator.hx">
		<min><x path="Int"/></min>
		<max><x path="Int"/></max>
		<hasNext public="1" get="inline" set="null" line="54">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns true if the iterator has other items, false otherwise.</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="63">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Moves to the next item of the iterator.

		If this is called while hasNext() is false, the result is unspecified.</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="46">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Iterates from `min` (inclusive) to `max` (exclusive).

		If `max <= min`, the iterator will not act as a countdown.]]></haxe_doc>
		</new>
		<haxe_doc>IntIterator is used for implementing interval iterations.

	It is usually not used explicitly, but through its special syntax:
	`min...max`

	While it is possible to assign an instance of IntIterator to a variable or
	field, it is worth noting that IntIterator does not reset after being used
	in a for-loop. Subsequent uses of the same instance will then have no
	effect.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</class>
	<class path="Lambda" params="" file="/home/travis/build/HaxeFoundation/haxe/std/Lambda.hx">
		<array public="1" params="A" set="method" line="47" static="1">
			<f a="it">
				<t path="Iterable"><c path="array.A"/></t>
				<c path="Array"><c path="array.A"/></c>
			</f>
			<haxe_doc>Creates an Array from Iterable `it`.

		If `it` is an Array, this function returns a copy of it.</haxe_doc>
		</array>
		<list public="1" params="A" set="method" line="59" static="1">
			<f a="it">
				<t path="Iterable"><c path="list.A"/></t>
				<c path="haxe.ds.List"><c path="list.A"/></c>
			</f>
			<haxe_doc>Creates a List form Iterable `it`.

		If `it` is a List, this function returns a copy of it.</haxe_doc>
		</list>
		<map public="1" params="A:B" get="inline" set="null" line="71" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="map.A"/></t>
				<f a="">
					<c path="map.A"/>
					<c path="map.B"/>
				</f>
				<c path="Array"><c path="map.B"/></c>
			</f>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `it`.
		The order of elements is preserved.
		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<mapi public="1" params="A:B" get="inline" set="null" line="80" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="mapi.A"/></t>
				<f a=":">
					<x path="Int"/>
					<c path="mapi.A"/>
					<c path="mapi.B"/>
				</f>
				<c path="Array"><c path="mapi.B"/></c>
			</f>
			<haxe_doc>Similar to map, but also passes the index of each element to `f`.
		The order of elements is preserved.
		If `f` is null, the result is unspecified.</haxe_doc>
		</mapi>
		<flatten public="1" params="A" get="inline" set="null" line="89" static="1">
			<f a="it">
				<t path="Iterable"><t path="Iterable"><c path="flatten.A"/></t></t>
				<c path="Array"><c path="flatten.A"/></c>
			</f>
			<haxe_doc>Concatenate a list of iterables.
		The order of elements is preserved.</haxe_doc>
		</flatten>
		<flatMap public="1" params="A:B" get="inline" set="null" line="98" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="flatMap.A"/></t>
				<f a="">
					<c path="flatMap.A"/>
					<t path="Iterable"><c path="flatMap.B"/></t>
				</f>
				<c path="Array"><c path="flatMap.B"/></c>
			</f>
			<haxe_doc>A composition of map and flatten.
		The order of elements is preserved.
		If `f` is null, the result is unspecified.</haxe_doc>
		</flatMap>
		<has public="1" params="A" set="method" line="110" static="1">
			<f a="it:elt">
				<t path="Iterable"><c path="has.A"/></t>
				<c path="has.A"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains `elt`.

		This function returns true as soon as an element is found which is equal
		to `elt` according to the `==` operator.

		If no such element is found, the result is false.</haxe_doc>
		</has>
		<exists public="1" params="A" set="method" line="127" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="exists.A"/></t>
				<f a="">
					<c path="exists.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains an element for which `f` is true.

		This function returns true as soon as an element is found for which a
		call to `f` returns true.

		If no such element is found, the result is false.

		If `f` is null, the result is unspecified.</haxe_doc>
		</exists>
		<foreach public="1" params="A" set="method" line="146" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="foreach.A"/></t>
				<f a="">
					<c path="foreach.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is true for all elements of `it`.

		This function returns false as soon as an element is found for which a
		call to `f` returns false.

		If no such element is found, the result is true.

		In particular, this function always returns true if `it` is empty.

		If `f` is null, the result is unspecified.</haxe_doc>
		</foreach>
		<iter public="1" params="A" set="method" line="158" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="iter.A"/></t>
				<f a="">
					<c path="iter.A"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls `f` on all elements of `it`, in order.

		If `f` is null, the result is unspecified.</haxe_doc>
		</iter>
		<filter public="1" params="A" set="method" line="169" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="filter.A"/></t>
				<f a="">
					<c path="filter.A"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="filter.A"/></c>
			</f>
			<haxe_doc>Returns a Array containing those elements of `it` for which `f` returned
		true.
		If `it` is empty, the result is the empty Array even if `f` is null.
		Otherwise if `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<fold public="1" params="A:B" set="method" line="185" static="1">
			<f a="it:f:first">
				<t path="Iterable"><c path="fold.A"/></t>
				<f a=":">
					<c path="fold.A"/>
					<c path="fold.B"/>
					<c path="fold.B"/>
				</f>
				<c path="fold.B"/>
				<c path="fold.B"/>
			</f>
			<haxe_doc>Functional fold on Iterable `it`, using function `f` with start argument
		`first`.

		If `it` has no elements, the result is `first`.

		Otherwise the first element of `it` is passed to `f` alongside `first`.
		The result of that call is then passed to `f` with the next element of
		`it`, and so on until `it` has no more elements.

		If `it` or `f` are null, the result is unspecified.</haxe_doc>
		</fold>
		<count public="1" params="A" set="method" line="197" static="1">
			<f a="it:?pred">
				<t path="Iterable"><c path="count.A"/></t>
				<f a="">
					<c path="count.A"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of elements in `it` for which `pred` is true, or the
		total number of elements in `it` if `pred` is null.

		This function traverses all elements.</haxe_doc>
		</count>
		<empty public="1" params="T" set="method" line="212" static="1">
			<f a="it">
				<t path="Iterable"><c path="empty.T"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if Iterable `it` does not contain any element.</haxe_doc>
		</empty>
		<indexOf public="1" params="T" set="method" line="223" static="1">
			<f a="it:v">
				<t path="Iterable"><c path="indexOf.T"/></t>
				<c path="indexOf.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of the first element `v` within Iterable `it`.

		This function uses operator `==` to check for equality.

		If `v` does not exist in `it`, the result is -1.</haxe_doc>
		</indexOf>
		<find public="1" params="T" set="method" line="243" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="find.T"/></t>
				<f a="">
					<c path="find.T"/>
					<x path="Bool"/>
				</f>
				<x path="Null"><c path="find.T"/></x>
			</f>
			<haxe_doc>Returns the first element of `it` for which `f` is true.

		This function returns as soon as an element is found for which a call to
		`f` returns true.

		If no such element is found, the result is null.

		If `f` is null, the result is unspecified.</haxe_doc>
		</find>
		<concat public="1" params="T" set="method" line="256" static="1">
			<f a="a:b">
				<t path="Iterable"><c path="concat.T"/></t>
				<t path="Iterable"><c path="concat.T"/></t>
				<c path="Array"><c path="concat.T"/></c>
			</f>
			<haxe_doc>Returns a new Array containing all elements of Iterable `a` followed by
		all elements of Iterable `b`.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</concat>
		<haxe_doc>The `Lambda` class is a collection of methods to support functional
	programming. It is ideally used with `using Lambda` and then acts as an
	extension to Iterable types.

	On static platforms, working with the Iterable structure might be slower
	than performing the operations directly on known types, such as Array and
	List.

	If the first argument to any of the methods is null, the result is
	unspecified.

	@see https://haxe.org/manual/std-Lambda.html</haxe_doc>
	</class>
	<typedef path="List" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/List.hx"><c path="haxe.ds.List"><c path="List.T"/></c></typedef>
	<typedef path="Map" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/Map.hx"><x path="haxe.ds.Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></typedef>
	<typedef path="IMap" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":deprecated"/>
		</meta>
	</typedef>
	<class path="Math" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/Math.hx">
		<sqrt public="1" set="method" line="25" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"math_sqrt"</e>
</m></meta>
			<haxe_doc>Returns the square root of `v`.

		If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result
		is `NaN`.
		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `0.0`, the result is `0.0`.</haxe_doc>
		</sqrt>
		<abs public="1" set="method" line="26" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"math_abs"</e>
</m></meta>
			<haxe_doc>Returns the absolute value of `v`.

		If `v` is positive or 0, the result is unchanged. Otherwise the result
		is -`v`.

		If `v` is `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is
		`POSITIVE_INFINITY`.

		If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</abs>
		<floor public="1" set="method" line="27" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"math_floor"</e>
</m></meta>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</floor>
		<round public="1" set="method" line="28" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"math_round"</e>
</m></meta>
			<haxe_doc>Rounds `v` to the nearest integer value.

		Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</round>
		<ceil public="1" set="method" line="29" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"math_ceil"</e>
</m></meta>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</ceil>
		<isFinite public="1" set="method" line="30" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"math_isfinite"</e>
</m></meta>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is `POSITIVE_INFINITY`, `NEGATIVE_INFINITY` or `NaN`, the result
		is `false`, otherwise the result is `true`.</haxe_doc>
		</isFinite>
		<isNaN public="1" set="method" line="31" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"math_isnan"</e>
</m></meta>
			<haxe_doc>Tells if `f` is not a valid number.

		If `f` is `NaN`, the result is `true`, otherwise the result is `false`.
		In particular, both `POSITIVE_INFINITY` and `NEGATIVE_INFINITY` are
		not considered `NaN`.</haxe_doc>
		</isNaN>
		<ffloor public="1" set="method" line="33" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"math_ffloor"</e>
</m></meta>
		</ffloor>
		<fround public="1" set="method" line="34" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"math_fround"</e>
</m></meta>
		</fround>
		<fceil public="1" set="method" line="35" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"math_fceil"</e>
</m></meta>
		</fceil>
		<cos public="1" set="method" line="37" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"math_cos"</e>
</m></meta>
			<haxe_doc>Returns the trigonometric cosine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</cos>
		<sin public="1" set="method" line="38" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"math_sin"</e>
</m></meta>
			<haxe_doc>Returns the trigonometric sine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</sin>
		<exp public="1" set="method" line="39" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"math_exp"</e>
</m></meta>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.

		exp(1.0) is approximately 2.718281828459.

		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `NEGATIVE_INFINITY`, the result is `0.0`.
		If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</exp>
		<log public="1" set="method" line="40" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"math_log"</e>
</m></meta>
			<haxe_doc>Returns the natural logarithm of `v`.

		This is the mathematical inverse operation of exp,
		i.e. `log(exp(v)) == v` always holds.

		If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result
		is `NaN`.
		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `0.0`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</log>
		<tan public="1" set="method" line="41" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"math_tan"</e>
</m></meta>
			<haxe_doc>Returns the trigonometric tangent of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</tan>
		<atan public="1" set="method" line="42" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"math_atan"</e>
</m></meta>
			<haxe_doc>Returns the trigonometric arc tangent of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</atan>
		<acos public="1" set="method" line="43" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"math_acos"</e>
</m></meta>
			<haxe_doc>Returns the trigonometric arc cosine of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</acos>
		<asin public="1" set="method" line="44" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"math_asin"</e>
</m></meta>
			<haxe_doc>Returns the trigonometric arc of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</asin>
		<pow public="1" set="method" line="45" static="1">
			<f a="v:exp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"math_pow"</e>
</m></meta>
			<haxe_doc>Returns a specified base `v` raised to the specified power `exp`.</haxe_doc>
		</pow>
		<atan2 public="1" set="method" line="46" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"math_atan2"</e>
</m></meta>
			<haxe_doc>Returns the trigonometric arc tangent whose tangent is the quotient of
		two specified numbers, in radians.

		If parameter `x` or `y`  is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is `NaN`.</haxe_doc>
		</atan2>
		<random public="1" set="method" line="48" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to 0.0,
		and less than 1.0.</haxe_doc>
		</random>
		<min public="1" set="method" line="50" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		If `a` or `b` are `NaN`, the result is `NaN`.
		If `a` or `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.
		If `a` and `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.</haxe_doc>
		</min>
		<max public="1" set="method" line="51" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		If `a` or `b` are `NaN`, the result is `NaN`.
		If `a` or `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `a` and `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</max>
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter,
		specified by the constant, π. `PI` is approximately 3.141592653589793.</haxe_doc>
		</PI>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes an invalid number.

		NaN stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: Math.sqrt(-1).

		All further operations with `NaN` as an operand will result in `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.

		In order to test if a value is `NaN`, you should use `Math.isNaN()` function.</haxe_doc>
		</NaN>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes positive infinity.

		For example, this is the result of 1.0 / 0.0.

		Operations with `POSITIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes negative infinity.

		For example, this is the result of -1.0 / 0.0.

		Operations with `NEGATIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<haxe_doc>This class defines mathematical functions and constants.

	@see https://haxe.org/manual/std-math.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="Reflect" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/Reflect.hx">
		<hasField public="1" set="method" line="26" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if structure `o` has a field named `field`.

		This is only guaranteed to work for anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</hasField>
		<field public="1" set="method" line="32" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`.

		If `o` is not an object or has no field named `field`, the result is
		null.

		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.

		If `field` is null, the result is unspecified.

		(As3) If used on a property field, the getter will be invoked. It is
		not possible to obtain the value directly.</haxe_doc>
		</field>
		<setField public="1" set="method" line="38" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`.

		If `o` has no field named `field`, this function is only guaranteed to
		work for anonymous structures.

		If `o` or `field` are null, the result is unspecified.

		(As3) If used on a property field, the setter will be invoked. It is
		not possible to set the value directly.</haxe_doc>
		</setField>
		<getProperty public="1" set="method" line="43" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`, taking
		property getter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.field`, but might be slower.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</getProperty>
		<setProperty public="1" set="method" line="50" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`, taking
		property setter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.setField`, but might be slower.

		If `field` is null, the result is unspecified.</haxe_doc>
		</setProperty>
		<callMethod public="1" set="method" line="58" static="1">
			<f a="o:func:args">
				<d/>
				<x path="haxe.Function"/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Call a method `func` with the given arguments `args`.

		The object `o` is ignored in most cases. It serves as the `this`-context in the following
		situations:

		* (neko) Allows switching the context to `o` in all cases.
		* (macro) Same as neko for Haxe 3. No context switching in Haxe 4.
		* (js, lua) Require the `o` argument if `func` does not, but should have a context.
		    This can occur by accessing a function field natively, e.g. through `Reflect.field`
			or by using `(object : Dynamic).field`. However, if `func` has a context, `o` is
			ignored like on other targets.</haxe_doc>
		</callMethod>
		<getObjectFields set="method" line="86" static="1">
			<f a="v">
				<d/>
				<x path="hl.NativeArray"><x path="hl.Bytes"/></x>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"obj_fields"</e>
</m></meta>
		</getObjectFields>
		<fields public="1" set="method" line="90" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the fields of structure `o`.

		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<isFunction public="1" get="inline" set="null" line="96" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `f` is a function, false otherwise.

		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" line="101" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"dyn_compare"</e>
</m></meta>
			<haxe_doc>Compares `a` and `b`.

		If `a` is less than `b`, the result is negative. If `b` is less than
		`a`, the result is positive. If `a` and `b` are equal, the result is 0.

		This function is only defined if `a` and `b` are of the same type.

		If that type is a function, the result is unspecified and
		`Reflect.compareMethods` should be used instead.

		For all other types, the result is 0 if `a` and `b` are equal. If they
		are not equal, the result depends on the type and is negative if:

		- Numeric types: a is less than b
		- String: a is lexicographically less than b
		- Other: unspecified

		If `a` and `b` are null, the result is 0. If only one of them is null,
		the result is unspecified.</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" line="106" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"fun_compare"</e>
</m></meta>
			<haxe_doc>Compares the functions `f1` and `f2`.

		If `f1` or `f2` are null, the result is false.
		If `f1` or `f2` are not functions, the result is unspecified.

		Otherwise the result is true if `f1` and the `f2` are physically equal,
		false otherwise.

		If `f1` or `f2` are member method closures, the result is true if they
		are closures of the same method on the same object value, false otherwise.</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" line="110" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Tells if `v` is an object.

		The result is true if `v` is one of the following:

		- class instance
		- structure
		- `Class<T>`
		- `Enum<T>`

		Otherwise, including if `v` is null, the result is false.]]></haxe_doc>
		</isObject>
		<isEnumValue public="1" set="method" line="115" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `v` is an enum value.

		The result is true if `v` is of type EnumValue, i.e. an enum
		constructor.

		Otherwise, including if `v` is null, the result is false.</haxe_doc>
		</isEnumValue>
		<deleteField public="1" set="method" line="120" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the field named `field` from structure `o`.

		This method is only guaranteed to work on anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" line="125" static="1">
			<f a="o">
				<c path="copy.T"/>
				<c path="copy.T"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"obj_copy"</e>
</m></meta>
			<haxe_doc>Copies the fields of structure `o`.

		This is only guaranteed to work on anonymous structures.

		If `o` is null, the result is unspecified.</haxe_doc>
		</copy>
		<makeVarArgs public="1" get="inline" set="null" line="130" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
			<overloads><makeVarArgs public="1" get="inline" set="null"><f a="f">
	<f a="">
		<c path="Array"><d/></c>
		<x path="Void"/>
	</f>
	<d/>
</f></makeVarArgs></overloads>
		</makeVarArgs>
		<_makeVarArgs set="method" line="134" static="1"><f a="f">
	<f a="">
		<c path="Array"><d/></c>
		<d/>
	</f>
	<d/>
</f></_makeVarArgs>
		<haxe_doc>The Reflect API is a way to manipulate values dynamically through an
	abstract interface in an untyped manner. Use with care.

	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<typedef path="_Std.Rand" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/Std.hx" private="1" module="Std"><c path="hl.Abstract"><c path="Shl_random"/></c></typedef>
	<class path="Std" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/Std.hx">
		<rnd static="1"><t path="_Std.Rand"/></rnd>
		<rnd_sys set="method" line="35" static="1">
			<f a=""><t path="_Std.Rand"/></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"rnd_init_system"</e>
</m></meta>
		</rnd_sys>
		<rnd_int set="method" line="36" static="1">
			<f a="r">
				<t path="_Std.Rand"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"rnd_int"</e>
</m></meta>
		</rnd_int>
		<rnd_float set="method" line="37" static="1">
			<f a="r">
				<t path="_Std.Rand"/>
				<x path="Float"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"rnd_float"</e>
</m></meta>
		</rnd_float>
		<random public="1" set="method" line="39" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<is public="1" set="method" line="43" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.</haxe_doc>
		</is>
		<instance public="1" params="T:S" set="method" static="1">
			<f a="value:c">
				<c path="instance.T"/>
				<x path="Class"><c path="instance.S"/></x>
				<c path="instance.S"/>
			</f>
			<haxe_doc>Checks if object `value` is an instance of class `c`.

		Compiles only if the class specified by `c` can be assigned to the type
		of `value`.

		This method checks if a downcast is possible. That is, if the runtime
		type of `value` is assignable to the class specified by `c`, `value` is
		returned. Otherwise null is returned.

		This method is not guaranteed to work with interfaces or core types such
		as `String`, `Array` and `Date`.

		If `value` is null, the result is null. If `c` is null, the result is
		unspecified.</haxe_doc>
		</instance>
		<int public="1" get="inline" set="null" line="69" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</int>
		<string public="1" set="method" line="73" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<parseInt public="1" set="method" line="79" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If `x` is null, the result is unspecified.
		If `x` cannot be parsed as integer, the result is `null`.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="84" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a `NaN` value instead of null.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<__add__ set="method" line="89" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<d/>
			</f>
			<meta><m n=":keep"/></meta>
		</__add__>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="Void" params="" file="/home/travis/build/HaxeFoundation/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/home/travis/build/HaxeFoundation/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/home/travis/build/HaxeFoundation/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Single" params="" file="/home/travis/build/HaxeFoundation/haxe/std/StdTypes.hx" module="StdTypes">
		<from><icast><x path="Float"/></icast></from>
		<this><x path="Single"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc>Single-precision IEEE 32bit float (4-byte).</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Null" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/StdTypes.hx" module="StdTypes">
		<from><icast><c path="Null.T"/></icast></from>
		<this><x path="Null"><c path="Null.T"/></x></this>
		<to><icast><c path="Null.T"/></icast></to>
		<haxe_doc>`Null` can be useful in two cases. In order to document some methods
	that accept or can return a `null` value, or for the Flash compiler and AS3
	generator to distinguish between base values that can be `null` and others that
	can't.

	@see https://haxe.org/manual/types-nullability.html</haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="/home/travis/build/HaxeFoundation/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterator" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/StdTypes.hx" module="StdTypes">
		<t path="Iterator"><a>
	<value><c path="KeyValueIterator.V"/></value>
	<key><c path="KeyValueIterator.K"/></key>
</a></t>
		<haxe_doc>A `KeyValueIterator` is an `Iterator` that has a key and a value.</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterable" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/StdTypes.hx" module="StdTypes">
		<a><keyValueIterator set="method"><f a=""><t path="KeyValueIterator">
	<c path="KeyValueIterable.K"/>
	<c path="KeyValueIterable.V"/>
</t></f></keyValueIterator></a>
		<haxe_doc>A `KeyValueIterable` is a data structure which has an `iterator()` method
	to iterate over key-value-pairs.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="String" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/String.hx">
		<fromCharCode public="1" set="method" line="169" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<__alloc__ get="inline" set="null" line="203" static="1">
			<f a="b:length">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
		</__alloc__>
		<call_toString set="method" line="210" static="1">
			<f a="v">
				<d/>
				<x path="hl.Bytes"/>
			</f>
			<meta><m n=":keep"/></meta>
		</call_toString>
		<fromUCS2 get="inline" set="null" line="215" static="1">
			<f a="b">
				<x path="hl.Bytes"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</fromUCS2>
		<fromUTF8 set="method" line="222" static="1">
			<f a="b">
				<x path="hl.Bytes"/>
				<c path="String"/>
			</f>
			<meta><m n=":keep"/></meta>
		</fromUTF8>
		<__add__ set="method" line="228" static="1">
			<f a="a:b">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":keep"/></meta>
		</__add__>
		<bytes><x path="hl.Bytes"/></bytes>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method" line="33">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method" line="37">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method" line="41">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method" line="49">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<findChar get="inline" set="null" line="56"><f a="start:len:src:srcLen">
	<x path="Int"/>
	<x path="Int"/>
	<x path="hl.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
</f></findChar>
		<indexOf public="1" set="method" line="66">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method" line="78">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method" line="93">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<substr public="1" set="method" line="119">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method" line="142">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<toString public="1" set="method" line="165">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<toUtf8 set="method" line="187"><f a=""><x path="hl.Bytes"/></f></toUtf8>
		<__string set="method" line="191">
			<f a=""><x path="hl.Bytes"/></f>
			<meta><m n=":keep"/></meta>
		</__string>
		<__compare set="method" line="195">
			<f a="v">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":keep"/></meta>
		</__compare>
		<new public="1" set="method" line="28">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.
	
	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="StringBuf" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/StringBuf.hx">
		<b><x path="hl.Bytes"/></b>
		<size><x path="Int"/></size>
		<pos><x path="Int"/></pos>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` StringBuf in characters.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="35"><f a=""><x path="Int"/></f></get_length>
		<__expand get="inline" set="null" line="39"><f a="need">
	<x path="Int"/>
	<x path="Void"/>
</f></__expand>
		<__add get="inline" set="null" line="48"><f a="bytes:spos:ssize">
	<x path="hl.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></__add>
		<add public="1" params="T" set="method" line="54">
			<f a="x">
				<c path="add.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the representation of `x` to `this` StringBuf.

		The exact representation of `x` may vary per platform. To get more
		consistent behavior, this function should be called with
		Std.string(x).

		If `x` is null, the String "null" is appended.</haxe_doc>
		</add>
		<addSub public="1" set="method" line="60">
			<f a="s:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a substring of `s` to `this` StringBuf.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.add(s.substr(pos,len))` can be used instead.

		If `s` or `pos` are null, the result is unspecified.

		If `len` is omitted or null, the substring ranges from `pos` to the end
		of `s`.</haxe_doc>
		</addSub>
		<addChar public="1" set="method" line="72">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the character identified by `c` to `this` StringBuf.

		If `c` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</addChar>
		<toString public="1" set="method" line="88">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the content of `this` StringBuf as String.

		The buffer is not emptied by this operation.</haxe_doc>
		</toString>
		<new public="1" set="method" line="29">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Its cross-platform implementation uses String concatenation internally, but
	StringBuf may be optimized for different targets.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values. However, the internal buffer cannot be modified.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="StringTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/StringTools.hx">
		<urlEncode public="1" get="inline" set="null" line="37" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encode an URL by using the standard format.</haxe_doc>
		</urlEncode>
		<urlDecode public="1" get="inline" set="null" line="107" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Decode an URL using the standard format.</haxe_doc>
		</urlDecode>
		<htmlEscape public="1" set="method" line="153" static="1">
			<f a="s:?quotes">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Escapes HTML special characters of the string `s`.

		The following replacements are made:

		- `&` becomes `&amp`;
		- `<` becomes `&lt`;
		- `>` becomes `&gt`;

		If `quotes` is true, the following characters are also replaced:

		- `"` becomes `&quot`;
		- `'` becomes `&#039`;]]></haxe_doc>
		</htmlEscape>
		<htmlUnescape public="1" set="method" line="182" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Unescapes HTML special characters of the string `s`.

		This is the inverse operation to htmlEscape, i.e. the following always
		holds: `htmlUnescape(htmlEscape(s)) == s`

		The replacements follow:

		- `&amp;` becomes `&`
		- `&lt;` becomes `<`
		- `&gt;` becomes `>`
		- `&quot;` becomes `"`
		- `&#039;` becomes `'`]]></haxe_doc>
		</htmlUnescape>
		<startsWith public="1" set="method" line="193" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` starts with the string `start`.

		If `start` is `null`, the result is unspecified.

		If `start` is the empty String `""`, the result is true.</haxe_doc>
		</startsWith>
		<endsWith public="1" set="method" line="223" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` ends with the string `end`.

		If `end` is `null`, the result is unspecified.

		If `end` is the empty String `""`, the result is true.</haxe_doc>
		</endsWith>
		<isSpace public="1" set="method" line="259" static="1">
			<f a="s:pos">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the character in the string `s` at position `pos` is a space.

		A character is considered to be a space character if its character code
		is 9,10,11,12,13 or 32.

		If `s` is the empty String `""`, or if pos is not a valid position within
		`s`, the result is false.</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="276" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="301" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="323" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading and trailing space characters of `s`.

		This is a convenience function for `ltrim(rtrim(s))`.</haxe_doc>
		</trim>
		<lpad public="1" set="method" line="345" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Concatenates `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String `""` or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</lpad>
		<rpad public="1" set="method" line="370" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Appends `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String `""` or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</rpad>
		<replace public="1" set="method" line="392" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replace all occurrences of the String `sub` in the String `s` by the
		String `by`.

		If `sub` is the empty String `""`, `by` is inserted after each character
		of `s` except the last one. If `by` is also the empty String `""`, `s`
		remains unchanged.

		If `sub` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<hex public="1" set="method" line="414" static="1">
			<f a="n:?digits">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `n` into a hexadecimal representation.

		If `digits` is specified, the resulting String is padded with "0" until
		its `length` equals `digits`.</haxe_doc>
		</hex>
		<fastCodeAt public="1" get="inline" set="null" line="456" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the character code at position `index` of String `s`, or an
		end-of-file indicator at if `position` equals `s.length`.

		This method is faster than `String.charCodeAt()` on some platforms, but
		the result is unspecified if `index` is negative or greater than
		`s.length`.

		End of file status can be checked by calling `StringTools.isEof()` with
		the returned value as argument.

		This operation is not guaranteed to work if `s` contains the `\0`
		character.</haxe_doc>
		</fastCodeAt>
		<isEof public="1" get="inline" set="null" line="483" static="1">
			<f a="c">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</isEof>
		<quoteUnixArg public="1" set="method" line="506" static="1">
			<f a="argument">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Unix.
		The input will be quoted, or escaped if necessary.</haxe_doc>
		</quoteUnixArg>
		<winMetaCharacters public="1" expr="[&quot; &quot;.code, &quot;(&quot;.code, &quot;)&quot;.code, &quot;%&quot;.code, &quot;!&quot;.code, &quot;^&quot;.code, &quot;\&quot;&quot;.code, &quot;&lt;&quot;.code, &quot;&gt;&quot;.code, &quot;&amp;&quot;.code, &quot;|&quot;.code, &quot;\n&quot;.code, &quot;\r&quot;.code, &quot;,&quot;.code, &quot;;&quot;.code]" line="524" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e><![CDATA[[" ".code, "(".code, ")".code, "%".code, "!".code, "^".code, "\"".code, "<".code, ">".code, "&".code, "|".code, "\n".code, "\r".code, ",".code, ";".code]]]></e></m></meta>
			<haxe_doc>Character codes of the characters that will be escaped by `quoteWinArg(_, true)`.</haxe_doc>
		</winMetaCharacters>
		<quoteWinArg public="1" set="method" line="539" static="1">
			<f a="argument:escapeMetaCharacters">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Windows.
		The input will be quoted, or escaped if necessary, such that the output
		will be parsed as a single argument using the rule specified in
		http://msdn.microsoft.com/en-us/library/ms880421

		Examples:
		```
		quoteWinArg("abc") == "abc";
		quoteWinArg("ab c") == '"ab c"';
		```</haxe_doc>
		</quoteWinArg>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	`using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
	to the `String` class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="SysError" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/Sys.hx" module="Sys">
		<msg public="1"><c path="String"/></msg>
		<toString public="1" set="method" line="27">
			<f a=""><c path="String"/></f>
			<meta><m n=":keep"/></meta>
		</toString>
		<new public="1" set="method" line="24"><f a="msg">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="hl._Bytes.Bytes_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/Bytes.hx" private="1" module="hl.Bytes">
		<_new public="1" get="inline" set="null" line="26" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="hl.Bytes"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<blit public="1" set="method" line="30" static="1">
			<f a="this:pos:src:srcPos:len">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"bytes_blit"</e>
				</m>
			</meta>
		</blit>
		<getUI8 public="1" get="inline" set="null" line="33" static="1">
			<f a="this:pos">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</getUI8>
		<setUI8 public="1" get="inline" set="null" line="37" static="1">
			<f a="this:pos:value">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</setUI8>
		<getI32 public="1" get="inline" set="null" line="42" static="1">
			<f a="this:pos">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
			</meta>
		</getI32>
		<getUI16 public="1" get="inline" set="null" line="46" static="1">
			<f a="this:pos">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
			</meta>
		</getUI16>
		<setUI16 public="1" get="inline" set="null" line="50" static="1">
			<f a="this:pos:v">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
			</meta>
		</setUI16>
		<getF32 public="1" get="inline" set="null" line="54" static="1">
			<f a="this:pos">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<t path="hl.F32"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
			</meta>
		</getF32>
		<getF64 public="1" get="inline" set="null" line="58" static="1">
			<f a="this:pos">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
			</meta>
		</getF64>
		<setI32 public="1" get="inline" set="null" line="62" static="1">
			<f a="this:pos:value">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
			</meta>
		</setI32>
		<setF32 public="1" get="inline" set="null" line="66" static="1">
			<f a="this:pos:value">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<t path="hl.F32"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
			</meta>
		</setF32>
		<setF64 public="1" get="inline" set="null" line="70" static="1">
			<f a="this:pos:value">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
			</meta>
		</setF64>
		<alloc set="method" line="75" static="1">
			<f a="size">
				<x path="Int"/>
				<x path="hl.Bytes"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"alloc_bytes"</e>
</m></meta>
		</alloc>
		<parseInt public="1" set="method" line="80" static="1">
			<f a="this:pos:size">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"parse_int"</e>
				</m>
			</meta>
		</parseInt>
		<parseFloat public="1" set="method" line="85" static="1">
			<f a="this:pos:size">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"parse_float"</e>
				</m>
			</meta>
		</parseFloat>
		<compare public="1" set="method" line="90" static="1">
			<f a="this:pos:bytes:bytesPos:size">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"bytes_compare"</e>
				</m>
			</meta>
		</compare>
		<find public="1" set="method" line="95" static="1">
			<f a="this:pos:size:bytes:bytesPos:bytesSize">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"bytes_find"</e>
				</m>
			</meta>
		</find>
		<fill public="1" set="method" line="100" static="1">
			<f a="this:pos:size:v">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"bytes_fill"</e>
				</m>
			</meta>
		</fill>
		<sortI32 public="1" set="method" line="104" static="1">
			<f a="this:pos:length:f">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<f a=":">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"bsort_i32"</e>
				</m>
			</meta>
		</sortI32>
		<sortF64 public="1" set="method" line="108" static="1">
			<f a="this:pos:length:f">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<f a=":">
					<x path="Float"/>
					<x path="Float"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"bsort_f64"</e>
				</m>
			</meta>
		</sortF64>
		<offset public="1" set="method" line="116" static="1">
			<f a="this:delta">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="hl.Bytes"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"bytes_offset"</e>
				</m>
			</meta>
			<haxe_doc>Please note that you need to retain the original unoffset'ed Bytes so it does not get garbage collected, unless the pointer was not GC allocated.</haxe_doc>
		</offset>
		<subtract public="1" set="method" line="124" static="1">
			<f a="this:other">
				<x path="hl.Bytes"/>
				<x path="hl.Bytes"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"bytes_subtract"</e>
				</m>
			</meta>
			<haxe_doc>Returns an offset between the two pointers. This might overflow in 64 bits if the addresses of the two pointers differs by more than 4GB</haxe_doc>
		</subtract>
		<get_address set="method" line="129" static="1">
			<f a="b:high">
				<x path="hl.Bytes"/>
				<x path="hl.Ref"><x path="Int"/></x>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"bytes_address"</e>
</m></meta>
		</get_address>
		<from_address set="method" line="134" static="1">
			<f a="low:high">
				<x path="Int"/>
				<x path="Int"/>
				<x path="hl.Bytes"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"bytes_from_address"</e>
</m></meta>
		</from_address>
		<fromAddress public="1" get="inline" set="null" line="141" static="1">
			<f a="h">
				<x path="haxe.Int64"/>
				<x path="hl.Bytes"/>
			</f>
			<haxe_doc>Creates an pointer at a given memory address (highly unsafe)</haxe_doc>
		</fromAddress>
		<address public="1" set="method" line="148" static="1">
			<f a="this">
				<x path="hl.Bytes"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the address value of the bytes. On 32 bit system the upper 32 bits will always be 0</haxe_doc>
		</address>
		<sub public="1" set="method" line="154" static="1">
			<f a="this:pos:size">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="hl.Bytes"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<ucs2Length public="1" set="method" line="161" static="1">
			<f a="this:bytePos">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"ucs2length"</e>
				</m>
			</meta>
		</ucs2Length>
		<hash set="method" line="166" static="1">
			<f a="this">
				<x path="hl.Bytes"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"hash"</e>
				</m>
			</meta>
		</hash>
		<utf8ToUtf16 public="1" set="method" line="171" static="1">
			<f a="this:bytePos:outSize">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="hl.Ref"><x path="Int"/></x>
				<x path="hl.Bytes"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"utf8_to_utf16"</e>
				</m>
			</meta>
		</utf8ToUtf16>
		<utf16ToUtf8 public="1" set="method" line="176" static="1">
			<f a="this:bytePos:outSize">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="hl.Ref"><x path="Int"/></x>
				<x path="hl.Bytes"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"utf16_to_utf8"</e>
				</m>
			</meta>
		</utf16ToUtf8>
		<ucs2Upper set="method" line="181" static="1">
			<f a="this:bytePos:size">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="hl.Bytes"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"ucs2_upper"</e>
				</m>
			</meta>
		</ucs2Upper>
		<ucs2Lower set="method" line="186" static="1">
			<f a="this:bytePos:size">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="hl.Bytes"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"ucs2_lower"</e>
				</m>
			</meta>
		</ucs2Lower>
		<urlEncode set="method" line="191" static="1">
			<f a="this:outSize">
				<x path="hl.Bytes"/>
				<x path="hl.Ref"><x path="Int"/></x>
				<x path="hl.Bytes"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"url_encode"</e>
				</m>
			</meta>
		</urlEncode>
		<urlDecode set="method" line="196" static="1">
			<f a="this:outSize">
				<x path="hl.Bytes"/>
				<x path="hl.Ref"><x path="Int"/></x>
				<x path="hl.Bytes"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"url_decode"</e>
				</m>
			</meta>
		</urlDecode>
		<fromValue public="1" set="method" line="201" static="1">
			<f a="v:length">
				<d/>
				<x path="hl.Ref"><x path="Int"/></x>
				<x path="hl.Bytes"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"value_to_string"</e>
</m></meta>
		</fromValue>
		<getArray public="1" params="T" get="inline" set="null" line="208" static="1">
			<f a="a">
				<c path="Array"><c path="getArray.T"/></c>
				<x path="hl.Bytes"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Get the bytes reference from an array of basic types (no copy occurs)</haxe_doc>
		</getArray>
		<fromBytes public="1" get="inline" set="null" line="213" static="1">
			<f a="bytes">
				<c path="haxe.io.Bytes"/>
				<x path="hl.Bytes"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromBytes>
		<toBytes public="1" get="inline" set="null" line="217" static="1">
			<f a="this:len">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toBytes>
	</class>
	<class path="sys.FileSystem" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/FileSystem.hx">
		<exists public="1" set="method" line="28" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the file or directory specified by `path` exists.

		If `path` is null, the result is unspecified.</haxe_doc>
		</exists>
		<rename public="1" set="method" line="32" static="1">
			<f a="path:newPath">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renames/moves the file or directory specified by `path` to `newPath`.

		If `path` is not a valid file system entry, or if it is not accessible,
		or if `newPath` is not accessible, an exception is thrown.

		If `path` or `newPath` are null, the result is unspecified.</haxe_doc>
		</rename>
		<stat public="1" set="method" line="36" static="1">
			<f a="path">
				<c path="String"/>
				<t path="sys.FileStat"/>
			</f>
			<haxe_doc>Returns `FileStat` information on the file or directory specified by
		`path`.

		If `path` is null, the result is unspecified.</haxe_doc>
		</stat>
		<fullPath public="1" set="method" line="54" static="1">
			<f a="relPath">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the full path of the file or directory specified by `relPath`,
		which is relative to the current working directory. Symlinks will be
		followed and the path will be normalized.

		If `relPath` is null, the result is unspecified.</haxe_doc>
		</fullPath>
		<absolutePath public="1" set="method" line="58" static="1">
			<f a="relPath">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the full path of the file or directory specified by `relPath`,
		which is relative to the current working directory. The path doesn't
		have to exist.

		If `relPath` is null, the result is unspecified.</haxe_doc>
		</absolutePath>
		<isDirectory public="1" set="method" line="63" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the file or directory specified by `path` is a directory.

		If `path` is not a valid file system entry or if its destination is not
		accessible, an exception is thrown.

		If `path` is null, the result is unspecified.</haxe_doc>
		</isDirectory>
		<createDirectory public="1" set="method" line="67" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a directory specified by `path`.

		This method is recursive: The parent directories don't have to exist.

		If the directory cannot be created, an exception is thrown.

		If `path` is null, the result is unspecified.</haxe_doc>
		</createDirectory>
		<deleteFile public="1" set="method" line="82" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes the file specified by `path`.

		If `path` does not denote a valid file, or if that file cannot be
		deleted, an exception is thrown.

		If `path` is null, the result is unspecified.</haxe_doc>
		</deleteFile>
		<deleteDirectory public="1" set="method" line="86" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes the directory specified by `path`.

		If `path` does not denote a valid directory, or if that directory cannot
		be deleted, an exception is thrown.

		If `path` is null, the result is unspecified.</haxe_doc>
		</deleteDirectory>
		<readDirectory public="1" set="method" line="90" static="1">
			<f a="path">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the names of all files and directories in the directory specified
		by `path`.

		If `path` does not denote a valid directory, an exception is thrown.

		If `path` is null, the result is unspecified.</haxe_doc>
		</readDirectory>
		<makeCompatiblePath get="inline" set="null" line="97" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></makeCompatiblePath>
		<sys_read_dir set="method" line="105" static="1">
			<f a="path">
				<x path="hl.Bytes"/>
				<x path="hl.NativeArray"><x path="hl.Bytes"/></x>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"sys_read_dir"</e>
</m></meta>
		</sys_read_dir>
		<sys_create_dir set="method" line="106" static="1">
			<f a="path:rights">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"sys_create_dir"</e>
</m></meta>
		</sys_create_dir>
		<sys_is_dir set="method" line="107" static="1">
			<f a="path">
				<x path="hl.Bytes"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"sys_is_dir"</e>
</m></meta>
		</sys_is_dir>
		<sys_stat set="method" line="108" static="1">
			<f a="path">
				<x path="hl.Bytes"/>
				<x path="hl.NativeArray"><x path="Int"/></x>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"sys_stat"</e>
</m></meta>
		</sys_stat>
		<sys_rename set="method" line="109" static="1">
			<f a="path:to">
				<x path="hl.Bytes"/>
				<x path="hl.Bytes"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"sys_rename"</e>
</m></meta>
		</sys_rename>
		<sys_delete set="method" line="110" static="1">
			<f a="path">
				<x path="hl.Bytes"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"sys_delete"</e>
</m></meta>
		</sys_delete>
		<sys_full_path set="method" line="111" static="1">
			<f a="path">
				<x path="hl.Bytes"/>
				<x path="hl.Bytes"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"sys_full_path"</e>
</m></meta>
		</sys_full_path>
		<sys_remove_dir set="method" line="112" static="1">
			<f a="path">
				<x path="hl.Bytes"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"sys_remove_dir"</e>
</m></meta>
		</sys_remove_dir>
		<sys_exists set="method" line="113" static="1">
			<f a="path">
				<x path="hl.Bytes"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"sys_exists"</e>
</m></meta>
		</sys_exists>
		<haxe_doc>This class allows you to get information about the files and directories.

	See `sys.io.File` for the complementary file API.</haxe_doc>
		<meta>
			<m n=":coreApi"/>
			<m n=":access"><e>Sys</e></m>
		</meta>
	</class>
	<class path="Sys" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/Sys.hx">
		<utf8Path static="1"><x path="Bool"/></utf8Path>
		<getPath set="method" line="41" static="1"><f a="s">
	<c path="String"/>
	<x path="hl.Bytes"/>
</f></getPath>
		<makePath set="method" line="44" static="1"><f a="b">
	<x path="hl.Bytes"/>
	<c path="String"/>
</f></makePath>
		<print public="1" set="method" line="49" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Print any value on the standard output.</haxe_doc>
		</print>
		<println public="1" set="method" line="53" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Print any value on the standard output, followed by a newline.</haxe_doc>
		</println>
		<args public="1" set="method" line="58" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Returns all the arguments that were passed by the command line.</haxe_doc>
		</args>
		<stdin public="1" set="method" line="62" static="1">
			<f a=""><c path="haxe.io.Input"/></f>
			<haxe_doc>Returns the process standard input, from which you can read what user enters. Usually it will block until the user send a full input line. See `getChar` for an alternative.</haxe_doc>
		</stdin>
		<stdout public="1" set="method" line="66" static="1">
			<f a=""><c path="haxe.io.Output"/></f>
			<haxe_doc>Returns the process standard output on which you can write.</haxe_doc>
		</stdout>
		<stderr public="1" set="method" line="70" static="1">
			<f a=""><c path="haxe.io.Output"/></f>
			<haxe_doc>Returns the process standard error on which you can write.</haxe_doc>
		</stderr>
		<getEnv public="1" set="method" line="74" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the value of the given environment variable.</haxe_doc>
		</getEnv>
		<putEnv public="1" set="method" line="81" static="1">
			<f a="s:v">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the value of the given environment variable.</haxe_doc>
		</putEnv>
		<environment public="1" set="method" line="85" static="1">
			<f a=""><t path="Map">
	<c path="String"/>
	<c path="String"/>
</t></f>
			<haxe_doc>Returns all environment variables.</haxe_doc>
		</environment>
		<sleep public="1" set="method" line="96" static="1">
			<f a="seconds">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"sys_sleep"</e>
</m></meta>
			<haxe_doc>Suspend the current execution for the given time (in seconds).</haxe_doc>
		</sleep>
		<setTimeLocale public="1" set="method" line="99" static="1">
			<f a="loc">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Change the current time locale, which will affect `DateTools.format` date formating.
		Returns true if the locale was successfully changed</haxe_doc>
		</setTimeLocale>
		<getCwd public="1" set="method" line="103" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Get the current working directory (usually the one in which the program was started)</haxe_doc>
		</getCwd>
		<setCwd public="1" set="method" line="107" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Change the current working directory.</haxe_doc>
		</setCwd>
		<systemName public="1" set="method" line="111" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the name of the system you are running on. For instance :
			"Windows", "Linux", "BSD" and "Mac" depending on your desktop OS.</haxe_doc>
		</systemName>
		<command public="1" set="method" line="115" static="1">
			<f a="cmd:?args">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="Int"/>
			</f>
			<haxe_doc>Run the given command. The command output will be printed on the same output as the current process.
		The current process will block until the command terminates and it will return the command result (0 if there was no error).

		Command arguments can be passed in two ways: 1. using `args`, 2. appending to `cmd` and leaving `args` as `null`.

		 1. When using `args` to pass command arguments, each argument will be automatically quoted, and shell meta-characters will be escaped if needed.
		`cmd` should be an executable name that can be located in the `PATH` environment variable, or a path to an executable.

		 2. When `args` is not given or is `null`, command arguments can be appended to `cmd`. No automatic quoting/escaping will be performed. `cmd` should be formatted exactly as it would be when typed at the command line.
		It can run executables, as well as shell commands that are not executables (e.g. on Windows: `dir`, `cd`, `echo` etc).

		Read the `sys.io.Process` api for a more complete way to start background processes.</haxe_doc>
		</command>
		<executablePath public="1" set="method" line="135" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":deprecated"><e>"Use programPath instead"</e></m></meta>
			<haxe_doc>Returns the path to the current executable that we are running.</haxe_doc>
		</executablePath>
		<programPath public="1" set="method" line="139" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the absolute path to the current program file that we are running.
		Concretely, for an executable binary, it returns the path to the binary.
		For a script (e.g. a PHP file), it returns the path to the script.</haxe_doc>
		</programPath>
		<sys_program_path expr="{
	var hlFile = sys_hl_file();
	if (hlFile == null) makePath(sys_exe_path()) else sys.FileSystem.fullPath(makePath(hlFile));
}" line="142" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>{
	var hlFile = sys_hl_file();
	if (hlFile == null) makePath(sys_exe_path()) else sys.FileSystem.fullPath(makePath(hlFile));
}</e></m></meta>
		</sys_program_path>
		<sys_utf8_path set="method" line="150" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"sys_utf8_path"</e>
</m></meta>
		</sys_utf8_path>
		<time public="1" set="method" line="152" static="1">
			<f a=""><x path="Float"/></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"sys_time"</e>
</m></meta>
			<haxe_doc>Gives the most precise timestamp value (in seconds).</haxe_doc>
		</time>
		<exit public="1" set="method" line="153" static="1">
			<f a="code">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"sys_exit"</e>
</m></meta>
			<haxe_doc>Exit the current process with the given error code.</haxe_doc>
		</exit>
		<cpuTime public="1" set="method" line="154" static="1">
			<f a=""><x path="Float"/></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"sys_cpu_time"</e>
</m></meta>
			<haxe_doc>Gives the most precise timestamp value (in seconds) but only account for the actual time spent running on the CPU for the current thread/process.</haxe_doc>
		</cpuTime>
		<getChar public="1" set="method" line="155" static="1">
			<f a="echo">
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"sys_get_char"</e>
</m></meta>
			<haxe_doc>Read a single input character from the standard input and returns it. Setting `echo` to true will also display it on the output.</haxe_doc>
		</getChar>
		<sys_print set="method" line="157" static="1">
			<f a="v">
				<x path="hl.Bytes"/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"sys_print"</e>
</m></meta>
		</sys_print>
		<file_stdin set="method" line="158" static="1">
			<f a=""><e path="sys.io.FileHandle"/></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"file_stdin"</e>
</m></meta>
		</file_stdin>
		<file_stdout set="method" line="159" static="1">
			<f a=""><e path="sys.io.FileHandle"/></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"file_stdout"</e>
</m></meta>
		</file_stdout>
		<file_stderr set="method" line="160" static="1">
			<f a=""><e path="sys.io.FileHandle"/></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"file_stderr"</e>
</m></meta>
		</file_stderr>
		<sys_args set="method" line="161" static="1">
			<f a=""><x path="hl.NativeArray"><x path="hl.Bytes"/></x></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"sys_args"</e>
</m></meta>
		</sys_args>
		<get_env set="method" line="162" static="1">
			<f a="key">
				<x path="hl.Bytes"/>
				<x path="hl.Bytes"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"sys_get_env"</e>
</m></meta>
		</get_env>
		<put_env set="method" line="163" static="1">
			<f a="key:val">
				<x path="hl.Bytes"/>
				<x path="hl.Bytes"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"sys_put_env"</e>
</m></meta>
		</put_env>
		<sys_env set="method" line="164" static="1">
			<f a=""><x path="hl.NativeArray"><x path="hl.Bytes"/></x></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"sys_env"</e>
</m></meta>
		</sys_env>
		<set_time_locale set="method" line="165" static="1">
			<f a="loc">
				<x path="hl.Bytes"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"sys_set_time_locale"</e>
</m></meta>
		</set_time_locale>
		<get_cwd set="method" line="166" static="1">
			<f a=""><x path="hl.Bytes"/></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"sys_get_cwd"</e>
</m></meta>
		</get_cwd>
		<set_cwd set="method" line="167" static="1">
			<f a="path">
				<x path="hl.Bytes"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"sys_set_cwd"</e>
</m></meta>
		</set_cwd>
		<sys_command set="method" line="168" static="1">
			<f a="cmd">
				<x path="hl.Bytes"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"sys_command"</e>
</m></meta>
		</sys_command>
		<sys_exe_path set="method" line="169" static="1">
			<f a=""><x path="hl.Bytes"/></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"sys_exe_path"</e>
</m></meta>
		</sys_exe_path>
		<sys_hl_file set="method" line="170" static="1">
			<f a=""><x path="hl.Bytes"/></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"sys_hl_file"</e>
</m></meta>
		</sys_hl_file>
		<sys_string set="method" line="171" static="1">
			<f a=""><x path="hl.Bytes"/></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"sys_string"</e>
</m></meta>
		</sys_string>
		<haxe_doc>This class gives you access to many base functionalities of system platforms. Looks in `sys` sub packages for more system APIs.</haxe_doc>
		<meta>
			<m n=":coreApi"/>
			<m n=":keepInit"/>
			<m n=":access"><e>String</e></m>
		</meta>
	</class>
	<enum path="ValueType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/Type.hx" module="Type">
		<TNull/>
		<TInt/>
		<TFloat/>
		<TBool/>
		<TObject/>
		<TFunction/>
		<TClass a="c"><x path="Class"><d/></x></TClass>
		<TEnum a="e"><x path="Enum"><d/></x></TEnum>
		<TUnknown/>
	</enum>
	<class path="Type" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/Type.hx">
		<allTypes get="accessor" set="null" static="1"><x path="hl.types.BytesMap"/></allTypes>
		<get_allTypes get="inline" set="null" line="39" static="1">
			<f a=""><x path="hl.types.BytesMap"/></f>
			<meta><m n=":has_untyped"/></meta>
		</get_allTypes>
		<init set="method" line="41" static="1">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
		</init>
		<initClass set="method" line="45" static="1">
			<f a="ct:t:name">
				<x path="hl.Type"/>
				<x path="hl.Type"/>
				<x path="hl.Bytes"/>
				<c path="hl.Class"/>
			</f>
			<meta><m n=":keep"/></meta>
		</initClass>
		<initEnum set="method" line="54" static="1">
			<f a="et:t">
				<x path="hl.Type"/>
				<x path="hl.Type"/>
				<c path="hl.Enum"/>
			</f>
			<meta><m n=":keep"/></meta>
		</initEnum>
		<register set="method" line="72" static="1">
			<f a="b:t">
				<x path="hl.Bytes"/>
				<c path="hl.BaseType"/>
				<x path="Void"/>
			</f>
			<meta><m n=":keep"/></meta>
		</register>
		<getClass public="1" params="T" set="method" line="76" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.

		If `o` is null or of a different type, null is returned.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" line="87" static="1">
			<f a="o">
				<x path="EnumValue"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc><![CDATA[Returns the enum of enum instance `o`.

		An enum instance is the result of using an enum constructor. Given an
		`enum Color { Red; }`, `getEnum(Red)` returns `Enum<Color>`.

		If `o` is null, null is returned.

		In general, type parameter information cannot be obtained at runtime.]]></haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" line="94" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Returns the super-class of class `c`.

		If `c` has no super class, null is returned.

		If `c` is null, the result is unspecified.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" line="100" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of class `c`, including its path.

		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `c` has no package, the class name is returned.

		If `c` is null, the result is unspecified.

		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" line="105" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		`pack1.pack2.(...).packN.EnumName`
		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" line="110" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Resolves a class by name.

		If `name` is the path of an existing class, that class is returned.

		Otherwise null is returned.

		If `name` is null or the path to a different type, the result is
		unspecified.

		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="117" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc>Resolves an enum by name.

		If `name` is the path of an existing enum, that enum is returned.

		Otherwise null is returned.

		If `name` is null the result is unspecified.

		If `name` is the path to a different type, null is returned.

		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" line="124" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`, using `args` as arguments to the
		class constructor.

		This function guarantees that the class constructor is called.

		Default values of constructors arguments are not guaranteed to be
		taken into account.

		If `cl` or `args` are null, or if the number of elements in `args` does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if `cl` has no own constructor, the
		result is unspecified.

		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" line="139" static="1">
			<f a="cl">
				<x path="Class"><c path="createEmptyInstance.T"/></x>
				<c path="createEmptyInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`.

		This function guarantees that the class constructor is not called.

		If `cl` is null, the result is unspecified.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" line="144" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" line="151" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createEnumIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" set="method" line="174" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the instance fields of class `c`.

		This only includes fields which are known at compile-time. In
		particular, using getInstanceFields(getClass(obj)) will not include
		any fields which were added to obj at runtime.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.

		(As3) This method only returns instance fields that are public.</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" line="180" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of static fields of class `c`.

		This does not include static fields of parent classes.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.

		(As3) This method only returns class fields that are public.</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" line="192" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" line="197" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>Returns the runtime type of value `v`.

		The result corresponds to the type `v` has at runtime, which may vary
		per platform. Assumptions regarding this should be minimized to avoid
		surprises.</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" line="230" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"type_enum_eq"</e>
</m></meta>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</enumEq>
		<enumConstructor public="1" set="method" line="234" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumConstructor>
		<_enumParameters set="method" line="240" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="hl.NativeArray"><d/></x>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"enum_parameters"</e>
</m></meta>
		</_enumParameters>
		<enumParameters public="1" set="method" line="244" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumParameters>
		<enumIndex public="1" set="method" line="249" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumIndex>
		<allEnums public="1" params="T" set="method" line="253" static="1">
			<f a="e">
				<x path="Enum"><c path="allEnums.T"/></x>
				<c path="Array"><c path="allEnums.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</allEnums>
		<haxe_doc>The Haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.

	@see https://haxe.org/manual/types.html
	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="UInt" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/UInt.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="_UInt.UInt_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/UInt.hx" private="1" module="UInt">
	<add get="inline" set="null" line="26" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</add>
	<div get="inline" set="null" line="30" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</div>
	<mul get="inline" set="null" line="34" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</mul>
	<sub get="inline" set="null" line="38" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</sub>
	<and get="inline" set="null" line="50" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
	</and>
	<or get="inline" set="null" line="54" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A | B</e></m></meta>
	</or>
	<xor get="inline" set="null" line="58" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A ^ B</e></m></meta>
	</xor>
	<shl get="inline" set="null" line="62" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
	</shl>
	<shr get="inline" set="null" line="66" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
	</shr>
	<ushr get="inline" set="null" line="70" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
	</ushr>
	<addWithFloat get="inline" set="null" line="76" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</addWithFloat>
	<mulWithFloat get="inline" set="null" line="80" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</mulWithFloat>
	<divFloat get="inline" set="null" line="84" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divFloat>
	<floatDiv get="inline" set="null" line="88" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</floatDiv>
	<subFloat get="inline" set="null" line="92" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subFloat>
	<floatSub get="inline" set="null" line="96" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</floatSub>
	<gtFloat get="inline" set="null" line="100" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gtFloat>
	<gteFloat get="inline" set="null" line="109" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gteFloat>
	<floatGt get="inline" set="null" line="114" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</floatGt>
	<floatGte get="inline" set="null" line="118" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</floatGte>
	<ltFloat get="inline" set="null" line="122" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</ltFloat>
	<lteFloat get="inline" set="null" line="126" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lteFloat>
	<floatLt get="inline" set="null" line="130" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</floatLt>
	<floatLte get="inline" set="null" line="134" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</floatLte>
	<modFloat get="inline" set="null" line="138" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</modFloat>
	<floatMod get="inline" set="null" line="142" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</floatMod>
	<negBits get="inline" set="null" line="146" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>~A</e></m>
		</meta>
	</negBits>
	<prefixIncrement get="inline" set="null" line="150" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>++A</e></m>
		</meta>
	</prefixIncrement>
	<postfixIncrement get="inline" set="null" line="154" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</postfixIncrement>
	<prefixDecrement get="inline" set="null" line="158" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>--A</e></m>
		</meta>
	</prefixDecrement>
	<postfixDecrement get="inline" set="null" line="162" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A--</e></m>
		</meta>
	</postfixDecrement>
	<toString get="inline" set="null" line="167" static="1">
		<f a="this:?radix">
			<x path="Int"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
	<toInt get="inline" set="null" line="171" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toInt>
	<toFloat get="inline" set="null" line="175" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toFloat>
	<meta><m n=":coreApi"/></meta>
</class></impl>
	</abstract>
	<class path="_UInt.UInt_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/UInt.hx" private="1" module="UInt">
		<add get="inline" set="null" line="26" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</add>
		<div get="inline" set="null" line="30" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</div>
		<mul get="inline" set="null" line="34" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</mul>
		<sub get="inline" set="null" line="38" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</sub>
		<and get="inline" set="null" line="50" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
		</and>
		<or get="inline" set="null" line="54" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A | B</e></m></meta>
		</or>
		<xor get="inline" set="null" line="58" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A ^ B</e></m></meta>
		</xor>
		<shl get="inline" set="null" line="62" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
		</shl>
		<shr get="inline" set="null" line="66" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
		</shr>
		<ushr get="inline" set="null" line="70" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
		</ushr>
		<addWithFloat get="inline" set="null" line="76" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</addWithFloat>
		<mulWithFloat get="inline" set="null" line="80" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</mulWithFloat>
		<divFloat get="inline" set="null" line="84" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divFloat>
		<floatDiv get="inline" set="null" line="88" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</floatDiv>
		<subFloat get="inline" set="null" line="92" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subFloat>
		<floatSub get="inline" set="null" line="96" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</floatSub>
		<gtFloat get="inline" set="null" line="100" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gtFloat>
		<gteFloat get="inline" set="null" line="109" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gteFloat>
		<floatGt get="inline" set="null" line="114" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</floatGt>
		<floatGte get="inline" set="null" line="118" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</floatGte>
		<ltFloat get="inline" set="null" line="122" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</ltFloat>
		<lteFloat get="inline" set="null" line="126" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lteFloat>
		<floatLt get="inline" set="null" line="130" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</floatLt>
		<floatLte get="inline" set="null" line="134" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</floatLte>
		<modFloat get="inline" set="null" line="138" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</modFloat>
		<floatMod get="inline" set="null" line="142" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</floatMod>
		<negBits get="inline" set="null" line="146" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>~A</e></m>
			</meta>
		</negBits>
		<prefixIncrement get="inline" set="null" line="150" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>++A</e></m>
			</meta>
		</prefixIncrement>
		<postfixIncrement get="inline" set="null" line="154" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</postfixIncrement>
		<prefixDecrement get="inline" set="null" line="158" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>--A</e></m>
			</meta>
		</prefixDecrement>
		<postfixDecrement get="inline" set="null" line="162" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A--</e></m>
			</meta>
		</postfixDecrement>
		<toString get="inline" set="null" line="167" static="1">
			<f a="this:?radix">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
		<toInt get="inline" set="null" line="171" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toInt>
		<toFloat get="inline" set="null" line="175" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toFloat>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="XmlType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/Xml.hx" module="Xml">
		<this><x path="Int"/></this>
		<haxe_doc>Xml node types.

	@see https://haxe.org/manual/std-Xml.html</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="_Xml.XmlType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/Xml.hx" private="1" module="Xml" extern="1">
	<Element public="1" get="inline" set="null" expr="cast 0" line="32" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents an XML element type.</haxe_doc>
	</Element>
	<PCData public="1" get="inline" set="null" expr="cast 1" line="36" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents XML parsed character data type.</haxe_doc>
	</PCData>
	<CData public="1" get="inline" set="null" expr="cast 2" line="40" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents XML character data type.</haxe_doc>
	</CData>
	<Comment public="1" get="inline" set="null" expr="cast 3" line="44" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents an XML comment type.</haxe_doc>
	</Comment>
	<DocType public="1" get="inline" set="null" expr="cast 4" line="48" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents an XML doctype element type.</haxe_doc>
	</DocType>
	<ProcessingInstruction public="1" get="inline" set="null" expr="cast 5" line="52" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents an XML processing instruction type.</haxe_doc>
	</ProcessingInstruction>
	<Document public="1" get="inline" set="null" expr="cast 6" line="56" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents an XML document type.</haxe_doc>
	</Document>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="_Xml.XmlType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/Xml.hx" private="1" module="Xml" extern="1">
		<Element public="1" get="inline" set="null" expr="cast 0" line="32" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents an XML element type.</haxe_doc>
		</Element>
		<PCData public="1" get="inline" set="null" expr="cast 1" line="36" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents XML parsed character data type.</haxe_doc>
		</PCData>
		<CData public="1" get="inline" set="null" expr="cast 2" line="40" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents XML character data type.</haxe_doc>
		</CData>
		<Comment public="1" get="inline" set="null" expr="cast 3" line="44" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents an XML comment type.</haxe_doc>
		</Comment>
		<DocType public="1" get="inline" set="null" expr="cast 4" line="48" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents an XML doctype element type.</haxe_doc>
		</DocType>
		<ProcessingInstruction public="1" get="inline" set="null" expr="cast 5" line="52" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents an XML processing instruction type.</haxe_doc>
		</ProcessingInstruction>
		<Document public="1" get="inline" set="null" expr="cast 6" line="56" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents an XML document type.</haxe_doc>
		</Document>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="Xml" params="" file="/home/travis/build/HaxeFoundation/haxe/std/Xml.hx">
		<Element public="1" set="null" expr="XmlType.Element" line="68" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Element</e></m></meta>
			<haxe_doc>XML element type.</haxe_doc>
		</Element>
		<PCData public="1" set="null" expr="XmlType.PCData" line="72" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.PCData</e></m></meta>
			<haxe_doc>XML parsed character data type.</haxe_doc>
		</PCData>
		<CData public="1" set="null" expr="XmlType.CData" line="76" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.CData</e></m></meta>
			<haxe_doc>XML character data type.</haxe_doc>
		</CData>
		<Comment public="1" set="null" expr="XmlType.Comment" line="80" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Comment</e></m></meta>
			<haxe_doc>XML comment type.</haxe_doc>
		</Comment>
		<DocType public="1" set="null" expr="XmlType.DocType" line="84" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.DocType</e></m></meta>
			<haxe_doc>XML doctype element type.</haxe_doc>
		</DocType>
		<ProcessingInstruction public="1" set="null" expr="XmlType.ProcessingInstruction" line="88" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.ProcessingInstruction</e></m></meta>
			<haxe_doc>XML processing instruction type.</haxe_doc>
		</ProcessingInstruction>
		<Document public="1" set="null" expr="XmlType.Document" line="92" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Document</e></m></meta>
			<haxe_doc>XML document type.</haxe_doc>
		</Document>
		<parse public="1" set="method" line="97" static="1">
			<f a="str">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Parses the String into an Xml document.</haxe_doc>
		</parse>
		<createElement public="1" set="method" line="158" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createElement>
		<createPCData public="1" set="method" line="167" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createPCData>
		<createCData public="1" set="method" line="176" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createCData>
		<createComment public="1" set="method" line="185" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createComment>
		<createDocType public="1" set="method" line="194" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocType>
		<createProcessingInstruction public="1" set="method" line="203" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createProcessingInstruction>
		<createDocument public="1" set="method" line="212" static="1">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocument>
		<nodeType public="1" set="null">
			<x path="XmlType"/>
			<haxe_doc>Returns the type of the Xml Node. This should be used before
		accessing other functions since some might raise an exception
		if the node type is not correct.</haxe_doc>
		</nodeType>
		<nodeName public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>Returns the node name of an Element.</haxe_doc>
		</nodeName>
		<nodeValue public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>Returns the node value. Only works if the Xml node is not an Element or a Document.</haxe_doc>
		</nodeValue>
		<parent public="1" set="null">
			<c path="Xml"/>
			<haxe_doc>Returns the parent object in the Xml hierarchy.
		The parent can be `null`, an Element or a Document.</haxe_doc>
		</parent>
		<children><c path="Array"><c path="Xml"/></c></children>
		<attributeMap><t path="Map">
	<c path="String"/>
	<c path="String"/>
</t></attributeMap>
		<get_nodeName get="inline" set="null" line="127"><f a=""><c path="String"/></f></get_nodeName>
		<set_nodeName get="inline" set="null" line="134"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></set_nodeName>
		<get_nodeValue get="inline" set="null" line="141"><f a=""><c path="String"/></f></get_nodeValue>
		<set_nodeValue get="inline" set="null" line="148"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></set_nodeValue>
		<get public="1" set="method" line="220">
			<f a="att">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the given attribute of an Element node. Returns `null` if not found.
		Attributes are case-sensitive.</haxe_doc>
		</get>
		<set public="1" set="method" line="231">
			<f a="att:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the given attribute value for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</set>
		<remove public="1" set="method" line="242">
			<f a="att">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an attribute for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="253">
			<f a="att">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the Element node has a given attribute.
		Attributes are case-sensitive.</haxe_doc>
		</exists>
		<attributes public="1" set="method" line="263">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>Returns an `Iterator` on all the attribute names.</haxe_doc>
		</attributes>
		<iterator public="1" get="inline" set="null" line="274">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</iterator>
		<elements public="1" set="method" line="283">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elements>
		<elementsNamed public="1" set="method" line="293">
			<f a="name">
				<c path="String"/>
				<t path="Iterator"><c path="Xml"/></t>
			</f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements with the given nodeName.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elementsNamed>
		<firstChild public="1" get="inline" set="null" line="302">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node.</haxe_doc>
		</firstChild>
		<firstElement public="1" set="method" line="310">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node which is an Element.</haxe_doc>
		</firstElement>
		<addChild public="1" set="method" line="326">
			<f a="x">
				<c path="Xml"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a child node to the Document or Element.
		A child node can only be inside one given parent node, which is indicated by the `parent` property.
		If the child is already inside this Document or Element, it will be moved to the last position among the Document or Element's children.
		If the child node was previously inside a different node, it will be moved to this Document or Element.</haxe_doc>
		</addChild>
		<removeChild public="1" set="method" line="339">
			<f a="x">
				<c path="Xml"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes a child from the Document or Element.
		Returns true if the child was successfuly removed.</haxe_doc>
		</removeChild>
		<insertChild public="1" set="method" line="354">
			<f a="x:pos">
				<c path="Xml"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts a child at the given position among the other childs.
		A child node can only be inside one given parent node, which is indicated by the [parent] property.
		If the child is already inside this Document or Element, it will be moved to the new position among the Document or Element's children.
		If the child node was previously inside a different node, it will be moved to this Document or Element.</haxe_doc>
		</insertChild>
		<toString public="1" get="inline" set="null" line="366">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of the Xml node.</haxe_doc>
		</toString>
		<ensureElementType get="inline" set="null" line="376"><f a=""><x path="Void"/></f></ensureElementType>
		<new set="method" line="370"><f a="nodeType">
	<x path="XmlType"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Cross-platform Xml API.

	@see https://haxe.org/manual/std-Xml.html</haxe_doc>
	</class>
	<enum path="haxe.StackItem" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/CallStack.hx" module="haxe.CallStack">
		<CFunction/>
		<Module a="m"><c path="String"/></Module>
		<FilePos a="s:file:line:?column">
			<x path="Null"><e path="haxe.StackItem"/></x>
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
		</FilePos>
		<Method a="classname:method">
			<c path="String"/>
			<c path="String"/>
		</Method>
		<LocalFunction a="?v"><x path="Int"/></LocalFunction>
		<haxe_doc>Elements return by `CallStack` methods.</haxe_doc>
	</enum>
	<class path="haxe.CallStack" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/CallStack.hx">
		<callStack public="1" set="method" line="86" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>Return the call stack elements, or an empty array if not available.</haxe_doc>
		</callStack>
		<_getExceptionStack set="method" line="163" static="1">
			<f a=""><x path="hl.NativeArray"><x path="hl.Bytes"/></x></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"exception_stack"</e>
</m></meta>
		</_getExceptionStack>
		<exceptionStack public="1" set="method" line="172" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>Return the exception stack : this is the stack elements between
		the place the last exception was thrown and the place it was
		caught, or an empty array if not available.</haxe_doc>
		</exceptionStack>
		<toString public="1" set="method" line="237" static="1">
			<f a="stack">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a representation of the stack as a printable string.</haxe_doc>
		</toString>
		<itemToString set="method" line="246" static="1"><f a="b:s">
	<c path="StringBuf"/>
	<e path="haxe.StackItem"/>
	<x path="Void"/>
</f></itemToString>
		<makeStack set="method" line="277" static="1"><f a="s">
	<x path="hl.NativeArray"><x path="hl.Bytes"/></x>
	<c path="Array"><e path="haxe.StackItem"/></c>
</f></makeStack>
		<haxe_doc>Get information about the call stack.</haxe_doc>
	</class>
	<abstract path="haxe.Function" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"/></impl>
	</abstract>
	<class path="haxe._Constraints.Function_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"/>
	<abstract path="haxe.FlatEnum" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"/></impl>
	</abstract>
	<class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"/>
	<abstract path="haxe.Constructible" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which

	  * is public and
	  * unifies with the type used for type parameter `T`.

	If a type parameter A is assigned to a type parameter B which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"/></impl>
	</abstract>
	<class path="haxe._Constraints.Constructible_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"/>
	<class path="haxe.IMap" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Constraints.hx" module="haxe.Constraints" interface="1">
		<get public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Null"><c path="haxe.IMap.V"/></x>
</f></get>
		<set public="1" set="method"><f a="k:v">
	<c path="haxe.IMap.K"/>
	<c path="haxe.IMap.V"/>
	<x path="Void"/>
</f></set>
		<exists public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Bool"/>
</f></exists>
		<remove public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Bool"/>
</f></remove>
		<keys public="1" set="method"><f a=""><t path="Iterator"><c path="haxe.IMap.K"/></t></f></keys>
		<iterator public="1" set="method"><f a=""><t path="Iterator"><c path="haxe.IMap.V"/></t></f></iterator>
		<keyValueIterator public="1" set="method"><f a=""><t path="KeyValueIterator">
	<c path="haxe.IMap.K"/>
	<c path="haxe.IMap.V"/>
</t></f></keyValueIterator>
		<copy public="1" set="method"><f a=""><c path="haxe.IMap">
	<c path="haxe.IMap.K"/>
	<c path="haxe.IMap.V"/>
</c></f></copy>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
	</class>
	<abstract path="haxe.DynamicAccess" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/DynamicAccess.hx">
		<from><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></from>
		<this><d><c path="haxe.DynamicAccess.T"/></d></this>
		<to><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></to>
		<haxe_doc>DynamicAccess is an abstract type for working with anonymous structures
	that are intended to hold collections of objects by the string key.

	For example, these types of structures are often created from JSON.

	Basically, it wraps `Reflect` calls in a `Map`-like interface.</haxe_doc>
		<impl><class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess">
	<_new public="1" get="inline" set="null" line="37" static="1">
		<f a=""><x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x></f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Creates a new structure.</haxe_doc>
	</_new>
	<get public="1" get="inline" set="null" line="47" static="1">
		<f a="this:key">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<x path="Null"><c path="haxe.DynamicAccess.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Returns a value by specified `key`.

		If the structure does not contain the given key, null is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
	</get>
	<set public="1" get="inline" set="null" line="65" static="1">
		<f a="this:key:value">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<c path="haxe.DynamicAccess.T"/>
			<c path="haxe.DynamicAccess.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Sets a `value` for a specified `key`.

		If the structure contains the given key, its value will be overwritten.

		Returns the given value.

		If `key` is null, the result is unspecified.</haxe_doc>
	</set>
	<exists public="1" get="inline" set="null" line="79" static="1">
		<f a="this:key">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Tells if the structure contains a specified `key`.

		If `key` is null, the result is unspecified.</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="88" static="1">
		<f a="this:key">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Removes a specified `key` from the structure.

		Returns true, if `key` was present in structure, or false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="93" static="1">
		<f a="this">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="Array"><c path="String"/></c>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an array of `keys` in a structure.</haxe_doc>
	</keys>
	<copy public="1" get="inline" set="null" line="98" static="1">
		<f a="this">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a shallow copy of the structure</haxe_doc>
	</copy>
</class></impl>
	</abstract>
	<class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess">
		<_new public="1" get="inline" set="null" line="37" static="1">
			<f a=""><x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x></f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Creates a new structure.</haxe_doc>
		</_new>
		<get public="1" get="inline" set="null" line="47" static="1">
			<f a="this:key">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<x path="Null"><c path="haxe.DynamicAccess.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Returns a value by specified `key`.

		If the structure does not contain the given key, null is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="65" static="1">
			<f a="this:key:value">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<c path="haxe.DynamicAccess.T"/>
				<c path="haxe.DynamicAccess.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Sets a `value` for a specified `key`.

		If the structure contains the given key, its value will be overwritten.

		Returns the given value.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<exists public="1" get="inline" set="null" line="79" static="1">
			<f a="this:key">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Tells if the structure contains a specified `key`.

		If `key` is null, the result is unspecified.</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="88" static="1">
			<f a="this:key">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Removes a specified `key` from the structure.

		Returns true, if `key` was present in structure, or false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="93" static="1">
			<f a="this">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an array of `keys` in a structure.</haxe_doc>
		</keys>
		<copy public="1" get="inline" set="null" line="98" static="1">
			<f a="this">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a shallow copy of the structure</haxe_doc>
		</copy>
	</class>
	<class path="haxe._EntryPoint.Lock" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/EntryPoint.hx" private="1" module="haxe.EntryPoint">
		<release public="1" get="inline" set="null" line="19"><f a=""><x path="Void"/></f></release>
		<wait public="1" get="inline" set="null" line="21"><f a="?t">
	<x path="Float"/>
	<x path="Void"/>
</f></wait>
		<new public="1" set="method" line="17"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe._EntryPoint.Mutex" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/EntryPoint.hx" private="1" module="haxe.EntryPoint">
		<acquire public="1" get="inline" set="null" line="27"><f a=""><x path="Void"/></f></acquire>
		<release public="1" get="inline" set="null" line="29"><f a=""><x path="Void"/></f></release>
		<new public="1" set="method" line="25"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe._EntryPoint.Thread" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/EntryPoint.hx" private="1" module="haxe.EntryPoint"><create public="1" set="method" line="33" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></create></class>
	<class path="haxe.EntryPoint" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/EntryPoint.hx">
		<sleepLock expr="new Lock()" line="46" static="1">
			<c path="haxe._EntryPoint.Lock"/>
			<meta><m n=":value"><e>new Lock()</e></m></meta>
		</sleepLock>
		<mutex expr="new Mutex()" line="47" static="1">
			<c path="haxe._EntryPoint.Mutex"/>
			<meta><m n=":value"><e>new Mutex()</e></m></meta>
		</mutex>
		<pending expr="new Array&lt;Void&gt;()" line="49" static="1">
			<c path="Array"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e><![CDATA[new Array<Void>()]]></e></m></meta>
		</pending>
		<threadCount public="1" set="null" expr="0" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</threadCount>
		<wakeup public="1" set="method" line="56" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Wakeup a sleeping run()</haxe_doc>
		</wakeup>
		<runInMainThread public="1" set="method" line="62" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></runInMainThread>
		<addThread public="1" set="method" line="73" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></addThread>
		<processEvents set="method" line="91" static="1"><f a=""><x path="Float"/></f></processEvents>
		<run public="1" set="method" line="113" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>Start the main loop. Depending on the platform, this can return immediately or will only return when the application exits.</haxe_doc>
		</run>
		<haxe_doc>If haxe.MainLoop is kept from DCE, then we will insert an haxe.EntryPoint.run() call just at then end of main().
	This class can be redefined by custom frameworks so they can handle their own main loop logic.</haxe_doc>
	</class>
	<abstract path="haxe.EnumFlags" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/EnumFlags.hx">
		<this><x path="Int"/></this>
		<haxe_doc>A typed interface for bit flags. This is not a real object, only a typed
	interface for an actual Int. Each flag can be tested/set with the
	corresponding enum instance. Up to 32 flags can be stored that way.

	Enum constructor indices are preserved from Haxe syntax, so the first
	declared is index 0, the next index 1 etc. The methods are optimized if the
	enum instance is passed directly, e.g. as has(EnumCtor). Otherwise
	Type.enumIndex() reflection is used.</haxe_doc>
		<impl><class path="haxe._EnumFlags.EnumFlags_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/EnumFlags.hx" private="1" module="haxe.EnumFlags">
	<_new public="1" get="inline" set="null" line="39" static="1">
		<f a="?i" v="0">
			<x path="Int"/>
			<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
		</f>
		<meta>
			<m n=":value"><e>{ i : 0 }</e></m>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Initializes the bitflags to `i`.</haxe_doc>
	</_new>
	<has public="1" get="inline" set="null" line="51" static="1">
		<f a="this:v">
			<x path="Int"/>
			<c path="haxe.EnumFlags.T"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Checks if the index of enum instance `v` is set.

		This method is optimized if `v` is an enum instance expression such as
		SomeEnum.SomeCtor.

		If `v` is null, the result is unspecified.</haxe_doc>
	</has>
	<set public="1" get="inline" set="null" line="63" static="1">
		<f a="this:v">
			<x path="Int"/>
			<c path="haxe.EnumFlags.T"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Sets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		SomeEnum.SomeCtor.

		If `v` is null, the result is unspecified.</haxe_doc>
	</set>
	<unset public="1" get="inline" set="null" line="75" static="1">
		<f a="this:v">
			<x path="Int"/>
			<c path="haxe.EnumFlags.T"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Unsets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		SomeEnum.SomeCtor.

		If `v` is null, the result is unspecified.</haxe_doc>
	</unset>
	<ofInt public="1" params="T" get="inline" set="null" line="83" static="1">
		<f a="i">
			<x path="Int"/>
			<x path="haxe.EnumFlags"><c path="ofInt.T"/></x>
		</f>
		<haxe_doc>Convert a integer bitflag into a typed one (this is a no-op, it does not
		have any impact on speed).</haxe_doc>
	</ofInt>
	<toInt public="1" get="inline" set="null" line="91" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Convert the typed bitflag into the corresponding int value (this is a
		no-op, it doesn't have any impact on speed).</haxe_doc>
	</toInt>
</class></impl>
	</abstract>
	<class path="haxe._EnumFlags.EnumFlags_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/EnumFlags.hx" private="1" module="haxe.EnumFlags">
		<_new public="1" get="inline" set="null" line="39" static="1">
			<f a="?i" v="0">
				<x path="Int"/>
				<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
			</f>
			<meta>
				<m n=":value"><e>{ i : 0 }</e></m>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Initializes the bitflags to `i`.</haxe_doc>
		</_new>
		<has public="1" get="inline" set="null" line="51" static="1">
			<f a="this:v">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Checks if the index of enum instance `v` is set.

		This method is optimized if `v` is an enum instance expression such as
		SomeEnum.SomeCtor.

		If `v` is null, the result is unspecified.</haxe_doc>
		</has>
		<set public="1" get="inline" set="null" line="63" static="1">
			<f a="this:v">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Sets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		SomeEnum.SomeCtor.

		If `v` is null, the result is unspecified.</haxe_doc>
		</set>
		<unset public="1" get="inline" set="null" line="75" static="1">
			<f a="this:v">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Unsets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		SomeEnum.SomeCtor.

		If `v` is null, the result is unspecified.</haxe_doc>
		</unset>
		<ofInt public="1" params="T" get="inline" set="null" line="83" static="1">
			<f a="i">
				<x path="Int"/>
				<x path="haxe.EnumFlags"><c path="ofInt.T"/></x>
			</f>
			<haxe_doc>Convert a integer bitflag into a typed one (this is a no-op, it does not
		have any impact on speed).</haxe_doc>
		</ofInt>
		<toInt public="1" get="inline" set="null" line="91" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Convert the typed bitflag into the corresponding int value (this is a
		no-op, it doesn't have any impact on speed).</haxe_doc>
		</toInt>
	</class>
	<class path="haxe.EnumTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="50" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
			pack1.pack2.(...).packN.EnumName
		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="63" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="79" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="96" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="108" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an
  [extension](https://haxe.org/manual/lf-static-extension.html) to the
  `enum` types.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="132" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="143" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="157" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="169" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an
  [extension](https://haxe.org/manual/lf-static-extension.html) to the
  `EnumValue` types.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<typedef path="haxe.Http" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Http.hx"><c path="sys.Http"/></typedef>
	<abstract path="haxe.Int32" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
 	all platforms.</haxe_doc>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Int32.hx" private="1" module="haxe.Int32">
	<negate get="inline" set="null" line="29" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>-A</e></m>
		</meta>
	</negate>
	<preIncrement get="inline" set="null" line="31" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>++A</e></m>
		</meta>
	</preIncrement>
	<postIncrement get="inline" set="null" line="34" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</postIncrement>
	<preDecrement get="inline" set="null" line="40" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>--A</e></m>
		</meta>
	</preDecrement>
	<postDecrement get="inline" set="null" line="43" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A--</e></m>
		</meta>
	</postDecrement>
	<add get="inline" set="null" line="49" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</add>
	<addInt get="inline" set="null" line="52" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":op"><e>A + B</e></m>
			<m n=":commutative"/>
		</meta>
	</addInt>
	<sub get="inline" set="null" line="57" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</sub>
	<subInt get="inline" set="null" line="60" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subInt>
	<intSub get="inline" set="null" line="63" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</intSub>
	<toFloat get="inline" set="null" line="220" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toFloat>
	<ucompare public="1" set="method" line="226" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
	</ucompare>
	<clamp get="inline" set="null" line="237" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></clamp>
</class></impl>
	</abstract>
	<class path="haxe._Int32.Int32_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Int32.hx" private="1" module="haxe.Int32">
		<negate get="inline" set="null" line="29" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>-A</e></m>
			</meta>
		</negate>
		<preIncrement get="inline" set="null" line="31" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>++A</e></m>
			</meta>
		</preIncrement>
		<postIncrement get="inline" set="null" line="34" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</postIncrement>
		<preDecrement get="inline" set="null" line="40" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>--A</e></m>
			</meta>
		</preDecrement>
		<postDecrement get="inline" set="null" line="43" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A--</e></m>
			</meta>
		</postDecrement>
		<add get="inline" set="null" line="49" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</add>
		<addInt get="inline" set="null" line="52" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":op"><e>A + B</e></m>
				<m n=":commutative"/>
			</meta>
		</addInt>
		<sub get="inline" set="null" line="57" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</sub>
		<subInt get="inline" set="null" line="60" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subInt>
		<intSub get="inline" set="null" line="63" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</intSub>
		<toFloat get="inline" set="null" line="220" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toFloat>
		<ucompare public="1" set="method" line="226" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
		</ucompare>
		<clamp get="inline" set="null" line="237" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></clamp>
	</class>
	<abstract path="haxe.Int64" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<haxe_doc>A cross-platform signed 64-bit integer.
	Int64 instances can be created from two 32-bit words using `Int64.make()`.</haxe_doc>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
	<_new get="inline" set="null" line="35" static="1">
		<f a="x">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<copy public="1" get="inline" set="null" line="41" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Makes a copy of `this` Int64.</haxe_doc>
	</copy>
	<make public="1" get="inline" set="null" line="47" static="1">
		<f a="high:low">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int64"/>
		</f>
		<haxe_doc>Construct an Int64 from two 32-bit words `high` and `low`.</haxe_doc>
	</make>
	<ofInt public="1" get="inline" set="null" line="54" static="1">
		<f a="x">
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>Returns an Int64 with the value of the Int `x`.
		`x` is sign-extended to fill 64 bits.</haxe_doc>
	</ofInt>
	<toInt public="1" get="inline" set="null" line="65" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Returns an Int with the value of the Int64 `x`.
		Throws an exception  if `x` cannot be represented in 32 bits.</haxe_doc>
	</toInt>
	<is public="1" get="inline" set="null" line="75" static="1">
		<f a="val">
			<d/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns whether the value `val` is of type `haxe.Int64`</haxe_doc>
	</is>
	<getHigh public="1" get="inline" set="null" line="82" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":deprecated"><e>"Use high instead"</e></m></meta>
		<haxe_doc>Returns the high 32-bit word of `x`.</haxe_doc>
	</getHigh>
	<getLow public="1" get="inline" set="null" line="89" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":deprecated"><e>"Use low instead"</e></m></meta>
		<haxe_doc>Returns the low 32-bit word of `x`.</haxe_doc>
	</getLow>
	<isNeg public="1" get="inline" set="null" line="95" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns `true` if `x` is less than zero.</haxe_doc>
	</isNeg>
	<isZero public="1" get="inline" set="null" line="101" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns `true` if `x` is exactly zero.</haxe_doc>
	</isZero>
	<compare public="1" get="inline" set="null" line="109" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc><![CDATA[Compares `a` and `b` in signed mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
	</compare>
	<ucompare public="1" get="inline" set="null" line="120" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc><![CDATA[Compares `a` and `b` in unsigned mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
	</ucompare>
	<toStr public="1" get="inline" set="null" line="128" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns a signed decimal `String` representation of `x`.</haxe_doc>
	</toStr>
	<toString set="method" line="131" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
	<parseString public="1" get="inline" set="null" line="157" static="1"><f a="sParam">
	<c path="String"/>
	<x path="haxe.Int64"/>
</f></parseString>
	<fromFloat public="1" get="inline" set="null" line="161" static="1"><f a="f">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></fromFloat>
	<divMod public="1" set="method" line="169" static="1">
		<f a="dividend:divisor">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<a>
				<quotient><x path="haxe.Int64"/></quotient>
				<modulus><x path="haxe.Int64"/></modulus>
			</a>
		</f>
		<haxe_doc>Performs signed integer divison of `dividend` by `divisor`.
		Returns `{ quotient : Int64, modulus : Int64 }`.</haxe_doc>
	</divMod>
	<neg public="1" get="inline" set="null" line="216" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc>Returns the negative of `x`.</haxe_doc>
	</neg>
	<preIncrement get="inline" set="null" line="224" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>++A</e></m>
		</meta>
	</preIncrement>
	<postIncrement get="inline" set="null" line="231" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</postIncrement>
	<preDecrement get="inline" set="null" line="237" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>--A</e></m>
		</meta>
	</preDecrement>
	<postDecrement get="inline" set="null" line="244" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A--</e></m>
		</meta>
	</postDecrement>
	<add public="1" get="inline" set="null" line="253" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc>Returns the sum of `a` and `b`.</haxe_doc>
	</add>
	<addInt get="inline" set="null" line="260" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":op"><e>A + B</e></m>
			<m n=":commutative"/>
		</meta>
	</addInt>
	<sub public="1" get="inline" set="null" line="266" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc>Returns `a` minus `b`.</haxe_doc>
	</sub>
	<subInt get="inline" set="null" line="273" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subInt>
	<intSub get="inline" set="null" line="276" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</intSub>
	<mul public="1" get="inline" set="null" line="282" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
		<haxe_doc>Returns the product of `a` and `b`.</haxe_doc>
	</mul>
	<mulInt get="inline" set="null" line="302" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
	</mulInt>
	<div public="1" get="inline" set="null" line="308" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
		<haxe_doc>Returns the quotient of `a` divided by `b`.</haxe_doc>
	</div>
	<divInt get="inline" set="null" line="311" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divInt>
	<intDiv get="inline" set="null" line="314" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</intDiv>
	<mod public="1" get="inline" set="null" line="320" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
		<haxe_doc>Returns the modulus of `a` divided by `b`.</haxe_doc>
	</mod>
	<modInt get="inline" set="null" line="323" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</modInt>
	<intMod get="inline" set="null" line="326" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</intMod>
	<eq public="1" get="inline" set="null" line="332" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc>Returns `true` if `a` is equal to `b`.</haxe_doc>
	</eq>
	<eqInt get="inline" set="null" line="335" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":op"><e>A == B</e></m>
			<m n=":commutative"/>
		</meta>
	</eqInt>
	<neq public="1" get="inline" set="null" line="341" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc>Returns `true` if `a` is not equal to `b`.</haxe_doc>
	</neq>
	<neqInt get="inline" set="null" line="344" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":op"><e>A != B</e></m>
			<m n=":commutative"/>
		</meta>
	</neqInt>
	<lt get="inline" set="null" line="347" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</lt>
	<ltInt get="inline" set="null" line="350" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</ltInt>
	<intLt get="inline" set="null" line="353" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</intLt>
	<lte get="inline" set="null" line="356" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lte>
	<lteInt get="inline" set="null" line="359" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lteInt>
	<intLte get="inline" set="null" line="362" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</intLte>
	<gt get="inline" set="null" line="365" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gt>
	<gtInt get="inline" set="null" line="368" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gtInt>
	<intGt get="inline" set="null" line="371" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</intGt>
	<gte get="inline" set="null" line="374" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gte>
	<gteInt get="inline" set="null" line="377" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gteInt>
	<intGte get="inline" set="null" line="380" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</intGte>
	<complement get="inline" set="null" line="386" static="1">
		<f a="a">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>~A</e></m></meta>
		<haxe_doc>Returns the bitwise NOT of `a`.</haxe_doc>
	</complement>
	<and public="1" get="inline" set="null" line="392" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
		<haxe_doc>Returns the bitwise AND of `a` and `b`.</haxe_doc>
	</and>
	<or public="1" get="inline" set="null" line="398" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A | B</e></m></meta>
		<haxe_doc>Returns the bitwise OR of `a` and `b`.</haxe_doc>
	</or>
	<xor public="1" get="inline" set="null" line="404" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A ^ B</e></m></meta>
		<haxe_doc>Returns the bitwise XOR of `a` and `b`.</haxe_doc>
	</xor>
	<shl public="1" get="inline" set="null" line="410" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
		<haxe_doc>Returns `a` left-shifted by `b` bits.</haxe_doc>
	</shl>
	<shr public="1" get="inline" set="null" line="421" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
		<haxe_doc>Returns `a` right-shifted by `b` bits in signed mode.
		`a` is sign-extended.</haxe_doc>
	</shr>
	<ushr public="1" get="inline" set="null" line="432" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
		<haxe_doc>Returns `a` right-shifted by `b` bits in unsigned mode.
		`a` is padded with zeroes.</haxe_doc>
	</ushr>
	<high public="1" get="accessor" set="null" static="1">
		<x path="haxe.Int32"/>
		<meta><m n=":impl"/></meta>
	</high>
	<get_high get="inline" set="null" line="440" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_high>
	<set_high get="inline" set="null" line="441" static="1">
		<f a="this:x">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_high>
	<low public="1" get="accessor" set="null" static="1">
		<x path="haxe.Int32"/>
		<meta><m n=":impl"/></meta>
	</low>
	<get_low get="inline" set="null" line="444" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_low>
	<set_low get="inline" set="null" line="445" static="1">
		<f a="this:x">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_low>
</class></impl>
	</abstract>
	<class path="haxe._Int64.Int64_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<_new get="inline" set="null" line="35" static="1">
			<f a="x">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<copy public="1" get="inline" set="null" line="41" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Makes a copy of `this` Int64.</haxe_doc>
		</copy>
		<make public="1" get="inline" set="null" line="47" static="1">
			<f a="high:low">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Construct an Int64 from two 32-bit words `high` and `low`.</haxe_doc>
		</make>
		<ofInt public="1" get="inline" set="null" line="54" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>Returns an Int64 with the value of the Int `x`.
		`x` is sign-extended to fill 64 bits.</haxe_doc>
		</ofInt>
		<toInt public="1" get="inline" set="null" line="65" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns an Int with the value of the Int64 `x`.
		Throws an exception  if `x` cannot be represented in 32 bits.</haxe_doc>
		</toInt>
		<is public="1" get="inline" set="null" line="75" static="1">
			<f a="val">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns whether the value `val` is of type `haxe.Int64`</haxe_doc>
		</is>
		<getHigh public="1" get="inline" set="null" line="82" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":deprecated"><e>"Use high instead"</e></m></meta>
			<haxe_doc>Returns the high 32-bit word of `x`.</haxe_doc>
		</getHigh>
		<getLow public="1" get="inline" set="null" line="89" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":deprecated"><e>"Use low instead"</e></m></meta>
			<haxe_doc>Returns the low 32-bit word of `x`.</haxe_doc>
		</getLow>
		<isNeg public="1" get="inline" set="null" line="95" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `x` is less than zero.</haxe_doc>
		</isNeg>
		<isZero public="1" get="inline" set="null" line="101" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `x` is exactly zero.</haxe_doc>
		</isZero>
		<compare public="1" get="inline" set="null" line="109" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Compares `a` and `b` in signed mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
		</compare>
		<ucompare public="1" get="inline" set="null" line="120" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Compares `a` and `b` in unsigned mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
		</ucompare>
		<toStr public="1" get="inline" set="null" line="128" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a signed decimal `String` representation of `x`.</haxe_doc>
		</toStr>
		<toString set="method" line="131" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
		<parseString public="1" get="inline" set="null" line="157" static="1"><f a="sParam">
	<c path="String"/>
	<x path="haxe.Int64"/>
</f></parseString>
		<fromFloat public="1" get="inline" set="null" line="161" static="1"><f a="f">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></fromFloat>
		<divMod public="1" set="method" line="169" static="1">
			<f a="dividend:divisor">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<a>
					<quotient><x path="haxe.Int64"/></quotient>
					<modulus><x path="haxe.Int64"/></modulus>
				</a>
			</f>
			<haxe_doc>Performs signed integer divison of `dividend` by `divisor`.
		Returns `{ quotient : Int64, modulus : Int64 }`.</haxe_doc>
		</divMod>
		<neg public="1" get="inline" set="null" line="216" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc>Returns the negative of `x`.</haxe_doc>
		</neg>
		<preIncrement get="inline" set="null" line="224" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>++A</e></m>
			</meta>
		</preIncrement>
		<postIncrement get="inline" set="null" line="231" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</postIncrement>
		<preDecrement get="inline" set="null" line="237" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>--A</e></m>
			</meta>
		</preDecrement>
		<postDecrement get="inline" set="null" line="244" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A--</e></m>
			</meta>
		</postDecrement>
		<add public="1" get="inline" set="null" line="253" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc>Returns the sum of `a` and `b`.</haxe_doc>
		</add>
		<addInt get="inline" set="null" line="260" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":op"><e>A + B</e></m>
				<m n=":commutative"/>
			</meta>
		</addInt>
		<sub public="1" get="inline" set="null" line="266" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc>Returns `a` minus `b`.</haxe_doc>
		</sub>
		<subInt get="inline" set="null" line="273" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subInt>
		<intSub get="inline" set="null" line="276" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</intSub>
		<mul public="1" get="inline" set="null" line="282" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
			<haxe_doc>Returns the product of `a` and `b`.</haxe_doc>
		</mul>
		<mulInt get="inline" set="null" line="302" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
		</mulInt>
		<div public="1" get="inline" set="null" line="308" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
			<haxe_doc>Returns the quotient of `a` divided by `b`.</haxe_doc>
		</div>
		<divInt get="inline" set="null" line="311" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divInt>
		<intDiv get="inline" set="null" line="314" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</intDiv>
		<mod public="1" get="inline" set="null" line="320" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
			<haxe_doc>Returns the modulus of `a` divided by `b`.</haxe_doc>
		</mod>
		<modInt get="inline" set="null" line="323" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</modInt>
		<intMod get="inline" set="null" line="326" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</intMod>
		<eq public="1" get="inline" set="null" line="332" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc>Returns `true` if `a` is equal to `b`.</haxe_doc>
		</eq>
		<eqInt get="inline" set="null" line="335" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":op"><e>A == B</e></m>
				<m n=":commutative"/>
			</meta>
		</eqInt>
		<neq public="1" get="inline" set="null" line="341" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc>Returns `true` if `a` is not equal to `b`.</haxe_doc>
		</neq>
		<neqInt get="inline" set="null" line="344" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":op"><e>A != B</e></m>
				<m n=":commutative"/>
			</meta>
		</neqInt>
		<lt get="inline" set="null" line="347" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</lt>
		<ltInt get="inline" set="null" line="350" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</ltInt>
		<intLt get="inline" set="null" line="353" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</intLt>
		<lte get="inline" set="null" line="356" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lte>
		<lteInt get="inline" set="null" line="359" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lteInt>
		<intLte get="inline" set="null" line="362" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</intLte>
		<gt get="inline" set="null" line="365" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gt>
		<gtInt get="inline" set="null" line="368" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gtInt>
		<intGt get="inline" set="null" line="371" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</intGt>
		<gte get="inline" set="null" line="374" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gte>
		<gteInt get="inline" set="null" line="377" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gteInt>
		<intGte get="inline" set="null" line="380" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</intGte>
		<complement get="inline" set="null" line="386" static="1">
			<f a="a">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>~A</e></m></meta>
			<haxe_doc>Returns the bitwise NOT of `a`.</haxe_doc>
		</complement>
		<and public="1" get="inline" set="null" line="392" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
			<haxe_doc>Returns the bitwise AND of `a` and `b`.</haxe_doc>
		</and>
		<or public="1" get="inline" set="null" line="398" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A | B</e></m></meta>
			<haxe_doc>Returns the bitwise OR of `a` and `b`.</haxe_doc>
		</or>
		<xor public="1" get="inline" set="null" line="404" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A ^ B</e></m></meta>
			<haxe_doc>Returns the bitwise XOR of `a` and `b`.</haxe_doc>
		</xor>
		<shl public="1" get="inline" set="null" line="410" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
			<haxe_doc>Returns `a` left-shifted by `b` bits.</haxe_doc>
		</shl>
		<shr public="1" get="inline" set="null" line="421" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
			<haxe_doc>Returns `a` right-shifted by `b` bits in signed mode.
		`a` is sign-extended.</haxe_doc>
		</shr>
		<ushr public="1" get="inline" set="null" line="432" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
			<haxe_doc>Returns `a` right-shifted by `b` bits in unsigned mode.
		`a` is padded with zeroes.</haxe_doc>
		</ushr>
		<high public="1" get="accessor" set="null" static="1">
			<x path="haxe.Int32"/>
			<meta><m n=":impl"/></meta>
		</high>
		<get_high get="inline" set="null" line="440" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_high>
		<set_high get="inline" set="null" line="441" static="1">
			<f a="this:x">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_high>
		<low public="1" get="accessor" set="null" static="1">
			<x path="haxe.Int32"/>
			<meta><m n=":impl"/></meta>
		</low>
		<get_low get="inline" set="null" line="444" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_low>
		<set_low get="inline" set="null" line="445" static="1">
			<f a="this:x">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_low>
	</class>
	<typedef path="haxe._Int64.__Int64" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<c path="haxe._Int64.___Int64"/>
		<haxe_doc>* This typedef will fool @:coreApi into thinking that we are using
  * the same underlying type, even though it might be different on
  * specific platforms.</haxe_doc>
	</typedef>
	<class path="haxe._Int64.___Int64" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<high public="1"><x path="haxe.Int32"/></high>
		<low public="1"><x path="haxe.Int32"/></low>
		<toString public="1" set="method" line="469">
			<f a=""><c path="String"/></f>
			<haxe_doc>We also define toString here to ensure we always get a pretty string
		when tracing or calling Std.string. This tends not to happen when
		toString is only in the abstract.</haxe_doc>
		</toString>
		<new public="1" get="inline" set="null" line="459"><f a="high:low">
	<x path="haxe.Int32"/>
	<x path="haxe.Int32"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.Int64Helper" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Int64Helper.hx">
		<parseString public="1" set="method" line="35" static="1">
			<f a="sParam">
				<c path="String"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Create `Int64` from given string.</haxe_doc>
		</parseString>
		<fromFloat public="1" set="method" line="78" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Create `Int64` from given float.</haxe_doc>
		</fromFloat>
		<haxe_doc>Helper for parsing to `Int64` instances.</haxe_doc>
	</class>
	<class path="haxe.Json" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Json.hx">
		<parse public="1" get="inline" set="null" line="43" static="1">
			<f a="text">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Parses given JSON-encoded `text` and returns the resulting object.

		JSON objects are parsed into anonymous structures and JSON arrays
		are parsed into `Array<Dynamic>`.

		If given `text` is not valid JSON, an exception will be thrown.

		@see https://haxe.org/manual/std-Json-parsing.html]]></haxe_doc>
		</parse>
		<stringify public="1" get="inline" set="null" line="59" static="1">
			<f a="value:?replacer:?space">
				<d/>
				<f a="key:value">
					<d/>
					<d/>
					<d/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes the given `value` and returns the resulting JSON string.

		If `replacer` is given and is not null, it is used to retrieve the
		actual object to be encoded. The `replacer` function takes two parameters,
		the key and the value being encoded. Initial key value is an empty string.
		
		If `space` is given and is not null, the result will be pretty-printed.
		Successive levels will be indented by this string.

		@see https://haxe.org/manual/std-Json-encoding.html</haxe_doc>
		</stringify>
		<haxe_doc>Cross-platform JSON API: it will automatically use the optimized native API if available.
	Use `-D haxeJSON` to force usage of the Haxe implementation even if a native API is found:
	This will provide extra encoding features such as enums (replaced by their index) and StringMaps.

	@see https://haxe.org/manual/std-Json.html</haxe_doc>
	</class>
	<class path="haxe.Log" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Log.hx">
		<formatOutput public="1" set="method" line="33" static="1">
			<f a="v:infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<c path="String"/>
			</f>
			<haxe_doc>Format the output of `trace` before printing it.</haxe_doc>
		</formatOutput>
		<trace public="1" set="dynamic" line="60" static="1">
			<f a="v:?infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the `trace()` call was made.

		This method can be rebound to a custom function:
		
			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v, ?infos) {
			  // handle trace
			}
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to `trace()` will cause an
		exception.</haxe_doc>
		</trace>
		<haxe_doc>Log primarily provides the `trace()` method, which is invoked upon a call to
	`trace()` in Haxe code.</haxe_doc>
	</class>
	<class path="haxe.MainEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/MainLoop.hx" module="haxe.MainLoop">
		<f><f a=""><x path="Void"/></f></f>
		<prev><c path="haxe.MainEvent"/></prev>
		<next><c path="haxe.MainEvent"/></next>
		<isBlocking public="1" expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
			<haxe_doc>Tells if the event can lock the process from exiting (default:true)</haxe_doc>
		</isBlocking>
		<nextRun public="1" set="null"><x path="Float"/></nextRun>
		<priority public="1" set="null"><x path="Int"/></priority>
		<delay public="1" set="method" line="26">
			<f a="t">
				<x path="Null"><x path="Float"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Delay the execution of the event for the given time, in seconds.
		If t is null, the event will be run at tick() time.</haxe_doc>
		</delay>
		<call public="1" get="inline" set="null" line="33">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Call the event. Will do nothing if the event has been stopped.</haxe_doc>
		</call>
		<stop public="1" set="method" line="40">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stop the event from firing anymore.</haxe_doc>
		</stop>
		<new set="method" line="16"><f a="f:p">
	<f a=""><x path="Void"/></f>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.MainLoop" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/MainLoop.hx">
		<pending static="1"><c path="haxe.MainEvent"/></pending>
		<threadCount public="1" get="accessor" set="null" static="1"><x path="Int"/></threadCount>
		<get_threadCount get="inline" set="null" line="61" static="1"><f a=""><x path="Int"/></f></get_threadCount>
		<hasEvents public="1" set="method" line="63" static="1"><f a=""><x path="Bool"/></f></hasEvents>
		<addThread public="1" set="method" line="73" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></addThread>
		<runInMainThread public="1" set="method" line="77" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></runInMainThread>
		<add public="1" set="method" line="84" static="1">
			<f a="f:?priority" v=":0">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<c path="haxe.MainEvent"/>
			</f>
			<meta><m n=":value"><e>{ priority : 0 }</e></m></meta>
			<haxe_doc>Add a pending event to be run into the main loop.</haxe_doc>
		</add>
		<sortEvents set="method" line="95" static="1"><f a=""><x path="Void"/></f></sortEvents>
		<tick set="method" line="156" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Run the pending events. Return the time for next event.</haxe_doc>
		</tick>
		<meta><m n=":access"><e>haxe.MainEvent</e></m></meta>
	</class>
	<typedef path="haxe.PosInfos" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<x path="Null"><c path="Array"><d/></c></x>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>PosInfos is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	(..., ?pos:haxe.PosInfos), each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe._Resource.ResourceContent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/haxe/Resource.hx" private="1" module="haxe.Resource">
		<name public="1"><x path="hl.Bytes"/></name>
		<data public="1"><x path="hl.Bytes"/></data>
		<dataLen public="1"><x path="Int"/></dataLen>
	</class>
	<class path="haxe.Resource" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/haxe/Resource.hx">
		<content static="1"><x path="hl.NativeArray"><c path="haxe._Resource.ResourceContent"/></x></content>
		<listNames public="1" set="method" line="35" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Lists all available resource names. The resource name is the name part
		of the -resource file@name command line parameter.</haxe_doc>
		</listNames>
		<getString public="1" set="method" line="39" static="1">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the resource identified by `name` as a String.

		If `name` does not match any resource name, null is returned.</haxe_doc>
		</getString>
		<getBytes public="1" set="method" line="46" static="1">
			<f a="name">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Retrieves the resource identified by `name` as an instance of
		haxe.io.Bytes.

		If `name` does not match any resource name, null is returned.</haxe_doc>
		</getBytes>
		<haxe_doc>Resource can be used to access resources that were added through the
	-resource file@name command line parameter.

	Depending on their type they can be obtained as String through
	getString(name), or as binary data through getBytes(name).

	A list of all available resource names can be obtained from listNames().</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.Serializer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Serializer.hx">
		<USE_CACHE public="1" expr="false" line="56" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>If the values you are serializing can contain circular references or
		objects repetitions, you should set `USE_CACHE` to true to prevent
		infinite loops.

		This may also reduce the size of serialization Strings at the expense of
		performance.

		This value can be changed for individual instances of Serializer by
		setting their useCache field.</haxe_doc>
		</USE_CACHE>
		<USE_ENUM_INDEX public="1" expr="false" line="68" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>Use constructor indexes for enums instead of names.

		This may reduce the size of serialization Strings, but makes them less
		suited for long-term storage: If constructors are removed or added from
		the enum, the indices may no longer match.

		This value can be changed for individual instances of Serializer by
		setting their useEnumIndex field.</haxe_doc>
		</USE_ENUM_INDEX>
		<BASE64 expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:&quot;" line="70" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:"</e></m></meta>
		</BASE64>
		<BASE64_CODES expr="null" line="71" static="1">
			<x path="haxe.ds.Vector"><x path="Null"><x path="Int"/></x></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</BASE64_CODES>
		<run public="1" set="method" line="565" static="1">
			<f a="v">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Serializes `v` and returns the String representation.

		This is a convenience function for creating a new instance of
		Serializer, serialize `v` into it and obtain the result through a call
		to toString().</haxe_doc>
		</run>
		<buf><c path="StringBuf"/></buf>
		<cache><c path="Array"><d/></c></cache>
		<shash><c path="haxe.ds.StringMap"><x path="Int"/></c></shash>
		<scount><x path="Int"/></scount>
		<useCache public="1">
			<x path="Bool"/>
			<haxe_doc>The individual cache setting for `this` Serializer instance.

		See USE_CACHE for a complete description.</haxe_doc>
		</useCache>
		<useEnumIndex public="1">
			<x path="Bool"/>
			<haxe_doc>The individual enum index setting for `this` Serializer instance.

		See USE_ENUM_INDEX for a complete description.</haxe_doc>
		</useEnumIndex>
		<toString public="1" set="method" line="117">
			<f a=""><c path="String"/></f>
			<haxe_doc>Return the String representation of `this` Serializer.

		The exact format specification can be found here:
		https://haxe.org/manual/serialization/format</haxe_doc>
		</toString>
		<serializeString set="method" line="154"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></serializeString>
		<serializeRef set="method" line="173"><f a="v">
	<d/>
	<x path="Bool"/>
</f></serializeRef>
		<serializeFields set="method" line="210"><f a="v">
	<a/>
	<x path="Void"/>
</f></serializeFields>
		<serialize public="1" set="method" line="228">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Serializes `v`.

		All haxe-defined values and objects with the exception of functions can
		be serialized. Serialization of external/native objects is not
		guaranteed to work.

		The values of `this.useCache` and `this.useEnumIndex` may affect
		serialization output.</haxe_doc>
		</serialize>
		<__getField get="inline" set="null" line="540"><f a="o:f">
	<d/>
	<c path="String"/>
	<d/>
</f></__getField>
		<serializeException public="1" set="method" line="542"><f a="e">
	<d/>
	<x path="Void"/>
</f></serializeException>
		<new public="1" set="method" line="102">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Serializer instance.

		Subsequent calls to `this.serialize` will append values to the
		internal buffer of this String. Once complete, the contents can be
		retrieved through a call to `this.toString`.

		Each Serializer instance maintains its own cache if this.useCache` is
		true.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The Serializer class can be used to encode values and objects into a `String`,
	from which the `Unserializer` class can recreate the original representation.

	This class can be used in two ways:

	- create a `new Serializer()` instance, call its `serialize()` method with
		any argument and finally retrieve the String representation from
		`toString()`
	- call `Serializer.run()` to obtain the serialized representation of a
		single argument

	Serialization is guaranteed to work for all haxe-defined classes, but may
	or may not work for instances of external/native classes.

	The specification of the serialization format can be found here:
	<https://haxe.org/manual/std-serialization-format.html>]]></haxe_doc>
	</class>
	<enum path="haxe._Template.TemplateExpr" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Template.hx" private="1" module="haxe.Template">
		<OpVar a="v"><c path="String"/></OpVar>
		<OpExpr a="expr"><f a=""><d/></f></OpExpr>
		<OpIf a="expr:eif:eelse">
			<f a=""><d/></f>
			<e path="haxe._Template.TemplateExpr"/>
			<e path="haxe._Template.TemplateExpr"/>
		</OpIf>
		<OpStr a="str"><c path="String"/></OpStr>
		<OpBlock a="l"><c path="haxe.ds.List"><e path="haxe._Template.TemplateExpr"/></c></OpBlock>
		<OpForeach a="expr:loop">
			<f a=""><d/></f>
			<e path="haxe._Template.TemplateExpr"/>
		</OpForeach>
		<OpMacro a="name:params">
			<c path="String"/>
			<c path="haxe.ds.List"><e path="haxe._Template.TemplateExpr"/></c>
		</OpMacro>
	</enum>
	<typedef path="haxe._Template.Token" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Template.hx" private="1" module="haxe.Template"><a>
	<s><x path="Bool"/></s>
	<p><c path="String"/></p>
	<l><c path="Array"><c path="String"/></c></l>
</a></typedef>
	<typedef path="haxe._Template.ExprToken" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Template.hx" private="1" module="haxe.Template"><a>
	<s><x path="Bool"/></s>
	<p><c path="String"/></p>
</a></typedef>
	<class path="haxe.Template" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Template.hx">
		<splitter expr="~/(::[A-Za-z0-9_ ()&amp;|!+=/&gt;&lt;*.&quot;-]+::|\$\$([A-Za-z0-9_-]+)\()/" line="56" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e><![CDATA[~/(::[A-Za-z0-9_ ()&|!+=/><*."-]+::|\$\$([A-Za-z0-9_-]+)\()/]]></e></m></meta>
		</splitter>
		<expr_splitter expr="~/(\(|\)|[ 
	]*&quot;[^&quot;]*&quot;[ 
	]*|[!+=/&gt;&lt;*.&amp;|-]+)/" line="57" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e><![CDATA[~/(\(|\)|[ 
	]*"[^"]*"[ 
	]*|[!+=/><*.&|-]+)/]]></e></m></meta>
		</expr_splitter>
		<expr_trim expr="~/^[ ]*([^ ]+)[ ]*$/" line="58" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[ ]*([^ ]+)[ ]*$/</e></m></meta>
		</expr_trim>
		<expr_int expr="~/^[0-9]+$/" line="59" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[0-9]+$/</e></m></meta>
		</expr_int>
		<expr_float expr="~/^([+-]?)(?=\d|,\d)\d*(,\d*)?([Ee]([+-]?\d+))?$/" line="60" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^([+-]?)(?=\d|,\d)\d*(,\d*)?([Ee]([+-]?\d+))?$/</e></m></meta>
		</expr_float>
		<globals public="1" expr="{ }" line="66" static="1">
			<d/>
			<meta><m n=":value"><e>{ }</e></m></meta>
			<haxe_doc>Global replacements which are used across all Template instances. This
		has lower priority than the context argument of execute().</haxe_doc>
		</globals>
		<hxKeepArrayIterator expr="[].iterator()" line="69" static="1">
			<t path="Iterator"><unknown/></t>
			<meta>
				<m n=":value"><e>[].iterator()</e></m>
				<m n=":ifFeature"><e>"haxe.Template.run"</e></m>
			</meta>
		</hxKeepArrayIterator>
		<expr><e path="haxe._Template.TemplateExpr"/></expr>
		<context><d/></context>
		<macros><d/></macros>
		<stack><c path="haxe.ds.List"><d/></c></stack>
		<buf><c path="StringBuf"/></buf>
		<execute public="1" set="method" line="110">
			<f a="context:?macros">
				<d/>
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Executes `this` Template, taking into account `context` for
		replacements and `macros` for callback functions.

		If `context` has a field 'name', its value replaces all occurrences of
		::name:: in the Template. Otherwise Template.globals is checked instead,
		If 'name' is not a field of that either, ::name:: is replaced with null.

		If `macros` has a field 'name', all occurrences of $$name(args) are
		replaced with the result of calling that field. The first argument is
		always the resolve() method, followed by the given arguments.
		If `macros` has no such field, the result is unspecified.

		If `context` is null, the result is unspecified. If `macros` is null,
		no macros are used.</haxe_doc>
		</execute>
		<resolve set="method" line="119"><f a="v">
	<c path="String"/>
	<d/>
</f></resolve>
		<parseTokens set="method" line="133"><f a="data">
	<c path="String"/>
	<c path="haxe.ds.List"><t path="haxe._Template.Token"/></c>
</f></parseTokens>
		<parseBlock set="method" line="179"><f a="tokens">
	<c path="haxe.ds.List"><t path="haxe._Template.Token"/></c>
	<e path="haxe._Template.TemplateExpr"/>
</f></parseBlock>
		<parse set="method" line="194"><f a="tokens">
	<c path="haxe.ds.List"><t path="haxe._Template.Token"/></c>
	<e path="haxe._Template.TemplateExpr"/>
</f></parse>
		<parseExpr set="method" line="244"><f a="data">
	<c path="String"/>
	<f a=""><unknown/></f>
</f></parseExpr>
		<makeConst set="method" line="275"><f a="v">
	<c path="String"/>
	<f a=""><d/></f>
</f></makeConst>
		<makePath set="method" line="294"><f a="e:l">
	<f a=""><d/></f>
	<c path="haxe.ds.List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makePath>
		<makeExpr set="method" line="308"><f a="l">
	<c path="haxe.ds.List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makeExpr>
		<makeExpr2 set="method" line="312"><f a="l">
	<c path="haxe.ds.List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makeExpr2>
		<run set="method" line="358"><f a="e">
	<e path="haxe._Template.TemplateExpr"/>
	<x path="Void"/>
</f></run>
		<new public="1" set="method" line="87">
			<f a="str">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Template instance from `str`.

		`str` is parsed into tokens, which are stored for internal use. This
		means that multiple execute() operations on a single Template instance
		are more efficient than one execute() operations on multiple Template
		instances.

		If `str` is null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Template provides a basic templating mechanism to replace values in a source
	String, and to have some basic logic.

	A complete documentation of the supported syntax is available at:
	<https://haxe.org/manual/std-template.html>]]></haxe_doc>
	</class>
	<class path="haxe.Timer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Timer.hx">
		<delay public="1" set="method" line="136" static="1">
			<f a="f:time_ms">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<c path="haxe.Timer"/>
			</f>
			<haxe_doc>Invokes `f` after `time_ms` milliseconds.

		This is a convenience function for creating a new Timer instance with
		`time_ms` as argument, binding its run() method to `f` and then stopping
		`this` Timer upon the first invocation.

		If `f` is null, the result is unspecified.</haxe_doc>
		</delay>
		<measure public="1" params="T" set="method" line="156" static="1">
			<f a="f:?pos">
				<f a=""><c path="measure.T"/></f>
				<t path="haxe.PosInfos"/>
				<c path="measure.T"/>
			</f>
			<haxe_doc>Measures the time it takes to execute `f`, in seconds with fractions.

		This is a convenience function for calculating the difference between
		Timer.stamp() before and after the invocation of `f`.

		The difference is passed as argument to Log.trace(), with "s" appended
		to denote the unit. The optional `pos` argument is passed through.

		If `f` is null, the result is unspecified.</haxe_doc>
		</measure>
		<stamp public="1" get="inline" set="null" line="169" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a timestamp, in seconds with fractions.

		The value itself might differ depending on platforms, only differences
		between two values make sense.</haxe_doc>
		</stamp>
		<event><c path="haxe.MainEvent"/></event>
		<stop public="1" set="method" line="88">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stops `this` Timer.

		After calling this method, no additional invocations of `this.run`
		will occur.

		It is not possible to restart `this` Timer once stopped.</haxe_doc>
		</stop>
		<run public="1" set="dynamic" line="123">
			<f a=""><x path="Void"/></f>
			<haxe_doc>This method is invoked repeatedly on `this` Timer.

		It can be overridden in a subclass, or rebound directly to a custom
		function:
			var timer = new haxe.Timer(1000); // 1000ms delay
			timer.run = function() { ... }

		Once bound, it can still be rebound to different functions until `this`
		Timer is stopped through a call to `this.stop`.</haxe_doc>
		</run>
		<new public="1" set="method" line="60">
			<f a="time_ms">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new timer that will run every `time_ms` milliseconds.

		After creating the Timer instance, it calls `this.run` repeatedly,
		with delays of `time_ms` milliseconds, until `this.stop` is called.

		The first invocation occurs after `time_ms` milliseconds, not
		immediately.

		The accuracy of this may be platform-dependent.</haxe_doc>
		</new>
		<haxe_doc>The Timer class allows you to create asynchronous timers on platforms that
	support events.

	The intended usage is to create an instance of the Timer class with a given
	interval, set its run() method to a custom function to be invoked and
	eventually call stop() to stop the Timer.

	Note that a running Timer may or may not prevent the program to exit
	automatically when main() returns.

	It is also possible to extend this class and override its run() method in
	the child class.</haxe_doc>
	</class>
	<abstract path="haxe.Ucs2" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Ucs2.hx">
		<this><c path="String"/></this>
		<haxe_doc>Cross platform UCS2 string API.</haxe_doc>
		<impl><class path="haxe._Ucs2.Ucs2_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Ucs2.hx" private="1" module="haxe.Ucs2">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<_new get="inline" set="null" line="31" static="1">
		<f a="str">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<get_length get="inline" set="null" line="40" static="1">
		<f a="this">
			<c path="String"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<toUpperCase public="1" get="inline" set="null" line="49" static="1">
		<f a="this">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
	</toUpperCase>
	<toLowerCase public="1" get="inline" set="null" line="58" static="1">
		<f a="this">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
	</toLowerCase>
	<charAt public="1" get="inline" set="null" line="68" static="1">
		<f a="this:index">
			<c path="String"/>
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the character at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, the empty Ucs2 ""
		is returned.</haxe_doc>
	</charAt>
	<charCodeAt public="1" get="inline" set="null" line="81" static="1">
		<f a="this:index">
			<c path="String"/>
			<x path="Int"/>
			<x path="Null"><x path="Int"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the character code at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, null is returned.

		To obtain the character code of a single character, "x".code can be used
		instead to extern public inline the character code at compile time. Note that this
		only works on Ucs2 literals of length 1.</haxe_doc>
	</charCodeAt>
	<indexOf public="1" get="inline" set="null" line="96" static="1">
		<f a="this:str:?startIndex">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 starting from `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
	</indexOf>
	<lastIndexOf public="1" get="inline" set="null" line="111" static="1">
		<f a="this:str:?startIndex">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 from 0 to `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
	</lastIndexOf>
	<split public="1" get="inline" set="null" line="135" static="1">
		<f a="this:delimiter">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
			<c path="Array"><x path="haxe.Ucs2"/></c>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Splits `this` Ucs2 at each occurrence of `delimiter`.

		If `this` Ucs2 is the empty Ucs2 "", the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty Ucs2 "", `this` Ucs2 is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` Ucs2.

		If `delimiter` is not found within `this` Ucs2, the result is an Array
		with one element, which equals `this` Ucs2.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` Ucs2 is split into parts at each occurrence of
		`delimiter`. If `this` Ucs2 starts (or ends) with `delimiter`, the
		result Array contains a leading (or trailing) empty Ucs2 "" element.
		Two subsequent delimiters also result in an empty Ucs2 "" element.</haxe_doc>
	</split>
	<substr public="1" get="inline" set="null" line="154" static="1">
		<f a="this:pos:?len">
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns `len` characters of `this` Ucs2, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` Ucs2 are included.

		If `pos` is negative, its value is calculated from the end of `this`
		Ucs2 by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` Ucs2 are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
	</substr>
	<substring public="1" get="inline" set="null" line="171" static="1">
		<f a="this:startIndex:?endIndex">
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the part of `this` Ucs2 from `startIndex` to `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		Ucs2 "" is returned.</haxe_doc>
	</substring>
	<toNativeString public="1" get="inline" set="null" line="178" static="1">
		<f a="this">
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the native underlying String.</haxe_doc>
	</toNativeString>
	<fromCharCode public="1" get="inline" set="null" line="188" static="1">
		<f a="code">
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<haxe_doc>Returns the Ucs2 corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
	</fromCharCode>
</class></impl>
	</abstract>
	<class path="haxe._Ucs2.Ucs2_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Ucs2.hx" private="1" module="haxe.Ucs2">
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<_new get="inline" set="null" line="31" static="1">
			<f a="str">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<get_length get="inline" set="null" line="40" static="1">
			<f a="this">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<toUpperCase public="1" get="inline" set="null" line="49" static="1">
			<f a="this">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" get="inline" set="null" line="58" static="1">
			<f a="this">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<charAt public="1" get="inline" set="null" line="68" static="1">
			<f a="this:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the character at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, the empty Ucs2 ""
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" get="inline" set="null" line="81" static="1">
			<f a="this:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the character code at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, null is returned.

		To obtain the character code of a single character, "x".code can be used
		instead to extern public inline the character code at compile time. Note that this
		only works on Ucs2 literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" get="inline" set="null" line="96" static="1">
			<f a="this:str:?startIndex">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 starting from `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" get="inline" set="null" line="111" static="1">
			<f a="this:str:?startIndex">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 from 0 to `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" get="inline" set="null" line="135" static="1">
			<f a="this:delimiter">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
				<c path="Array"><x path="haxe.Ucs2"/></c>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Splits `this` Ucs2 at each occurrence of `delimiter`.

		If `this` Ucs2 is the empty Ucs2 "", the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty Ucs2 "", `this` Ucs2 is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` Ucs2.

		If `delimiter` is not found within `this` Ucs2, the result is an Array
		with one element, which equals `this` Ucs2.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` Ucs2 is split into parts at each occurrence of
		`delimiter`. If `this` Ucs2 starts (or ends) with `delimiter`, the
		result Array contains a leading (or trailing) empty Ucs2 "" element.
		Two subsequent delimiters also result in an empty Ucs2 "" element.</haxe_doc>
		</split>
		<substr public="1" get="inline" set="null" line="154" static="1">
			<f a="this:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns `len` characters of `this` Ucs2, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` Ucs2 are included.

		If `pos` is negative, its value is calculated from the end of `this`
		Ucs2 by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` Ucs2 are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" get="inline" set="null" line="171" static="1">
			<f a="this:startIndex:?endIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the part of `this` Ucs2 from `startIndex` to `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		Ucs2 "" is returned.</haxe_doc>
		</substring>
		<toNativeString public="1" get="inline" set="null" line="178" static="1">
			<f a="this">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the native underlying String.</haxe_doc>
		</toNativeString>
		<fromCharCode public="1" get="inline" set="null" line="188" static="1">
			<f a="code">
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<haxe_doc>Returns the Ucs2 corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
	</class>
	<class path="haxe._Unserializer.DefaultResolver" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Unserializer.hx" private="1" module="haxe.Unserializer">
		<resolveClass public="1" get="inline" set="null" line="479"><f a="name">
	<c path="String"/>
	<x path="Class"><d/></x>
</f></resolveClass>
		<resolveEnum public="1" get="inline" set="null" line="480"><f a="name">
	<c path="String"/>
	<x path="Enum"><d/></x>
</f></resolveEnum>
		<new public="1" set="method" line="478"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.Unserializer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Unserializer.hx">
		<DEFAULT_RESOLVER public="1" expr="new DefaultResolver()" line="65" static="1">
			<t path="haxe.TypeResolver"/>
			<meta><m n=":value"><e>new DefaultResolver()</e></m></meta>
			<haxe_doc><![CDATA[This value can be set to use custom type resolvers.

		A type resolver finds a `Class` or `Enum` instance from a given `String`.
		By default, the Haxe `Type` Api is used.

		A type resolver must provide two methods:

		1. `resolveClass(name:String):Class<Dynamic>` is called to determine a
				`Class` from a class name
		2. `resolveEnum(name:String):Enum<Dynamic>` is called to determine an
				`Enum` from an enum name

		This value is applied when a new `Unserializer` instance is created.
		Changing it afterwards has no effect on previously created instances.]]></haxe_doc>
		</DEFAULT_RESOLVER>
		<BASE64 expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:&quot;" line="67" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:"</e></m></meta>
		</BASE64>
		<CODES expr="null" line="70" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>null</e></m></meta>
		</CODES>
		<initCodes set="method" line="72" static="1"><f a=""><c path="Array"><x path="Int"/></c></f></initCodes>
		<run public="1" set="method" line="467" static="1">
			<f a="v">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Unserializes `v` and returns the according value.

		This is a convenience function for creating a new instance of
		Unserializer with `v` as buffer and calling its unserialize() method
		once.</haxe_doc>
		</run>
		<buf><c path="String"/></buf>
		<pos><x path="Int"/></pos>
		<length><x path="Int"/></length>
		<cache><c path="Array"><d/></c></cache>
		<scache><c path="Array"><c path="String"/></c></scache>
		<resolver><t path="haxe.TypeResolver"/></resolver>
		<setResolver public="1" set="method" line="129">
			<f a="r">
				<t path="haxe.TypeResolver"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the type resolver of `this` Unserializer instance to `r`.

		If `r` is null, a special resolver is used which returns null for all
		input values.

		See `DEFAULT_RESOLVER` for more information on type resolvers.</haxe_doc>
		</setResolver>
		<getResolver public="1" set="method" line="141">
			<f a=""><t path="haxe.TypeResolver"/></f>
			<haxe_doc>Gets the type resolver of `this` Unserializer instance.

		See `DEFAULT_RESOLVER` for more information on type resolvers.</haxe_doc>
		</getResolver>
		<get get="inline" set="null" line="145"><f a="p">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<readDigits set="method" line="149"><f a=""><x path="Int"/></f></readDigits>
		<readFloat set="method" line="174"><f a=""><x path="Float"/></f></readFloat>
		<unserializeObject set="method" line="188"><f a="o">
	<a/>
	<x path="Void"/>
</f></unserializeObject>
		<unserializeEnum params="T" set="method" line="203"><f a="edecl:tag">
	<x path="Enum"><c path="unserializeEnum.T"/></x>
	<c path="String"/>
	<c path="unserializeEnum.T"/>
</f></unserializeEnum>
		<unserialize public="1" set="method" line="235">
			<f a=""><d/></f>
			<haxe_doc>Unserializes the next part of `this` Unserializer instance and returns
		the according value.

		This function may call `this.resolver.resolveClass` to determine a
		Class from a String, and `this.resolver.resolveEnum` to determine an
		Enum from a String.

		If `this` Unserializer instance contains no more or invalid data, an
		exception is thrown.

		This operation may fail on structurally valid data if a type cannot be
		resolved or if a field cannot be set. This can happen when unserializing
		Strings that were serialized on a different Haxe target, in which the
		serialization side has to make sure not to include platform-specific
		data.

		Classes are created from `Type.createEmptyInstance`, which means their
		constructors are not called.</haxe_doc>
		</unserialize>
		<new public="1" set="method" line="104">
			<f a="buf">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Unserializer instance, with its internal buffer
		initialized to `buf`.

		This does not parse `buf` immediately. It is parsed only when calls to
		`this.unserialize` are made.

		Each Unserializer instance maintains its own cache.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Unserializer` class is the complement to the `Serializer` class. It parses
	a serialization `String` and creates objects from the contained data.

	This class can be used in two ways:

	- create a `new Unserializer()` instance with a given serialization
		String, then call its `unserialize()` method until all values are
		extracted
	- call `Unserializer.run()`  to unserialize a single value from a given
		String

	The specification of the serialization format can be found here:
	<https://haxe.org/manual/serialization/format>]]></haxe_doc>
	</class>
	<class path="haxe._Unserializer.NullResolver" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Unserializer.hx" private="1" module="haxe.Unserializer">
		<instance public="1" get="accessor" set="null" static="1"><c path="haxe._Unserializer.NullResolver"/></instance>
		<get_instance get="inline" set="null" line="488" static="1"><f a=""><c path="haxe._Unserializer.NullResolver"/></f></get_instance>
		<resolveClass public="1" get="inline" set="null" line="485"><f a="name">
	<c path="String"/>
	<x path="Class"><d/></x>
</f></resolveClass>
		<resolveEnum public="1" get="inline" set="null" line="486"><f a="name">
	<c path="String"/>
	<x path="Enum"><d/></x>
</f></resolveEnum>
		<new set="method" line="484"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.Utf8" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Utf8.hx">
		<iter public="1" set="method" line="56" static="1">
			<f a="s:chars">
				<c path="String"/>
				<f a="">
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Call the `chars` function for each UTF8 char of the string.</haxe_doc>
		</iter>
		<encode public="1" set="method" line="64" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encode the input ISO string into the corresponding UTF8 one.</haxe_doc>
		</encode>
		<decode public="1" set="method" line="72" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Decode an UTF8 string back to an ISO string.
		Throw an exception if a given UTF8 character is not supported by the decoder.</haxe_doc>
		</decode>
		<charCodeAt public="1" get="inline" set="null" line="79" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Similar to `String.charCodeAt` but uses the UTF8 character position.</haxe_doc>
		</charCodeAt>
		<validate public="1" get="inline" set="null" line="86" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the String is correctly encoded as UTF8.</haxe_doc>
		</validate>
		<length public="1" get="inline" set="null" line="94" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of UTF8 chars of the String.</haxe_doc>
		</length>
		<compare public="1" set="method" line="101" static="1">
			<f a="a:b">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compare two UTF8 strings, character by character.</haxe_doc>
		</compare>
		<sub public="1" get="inline" set="null" line="108" static="1">
			<f a="s:pos:len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>This is similar to `String.substr` but the `pos` and `len` parts are considering UTF8 characters.</haxe_doc>
		</sub>
		<__b><c path="String"/></__b>
		<addChar public="1" get="inline" set="null" line="42">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Add the given UTF8 character code to the buffer.</haxe_doc>
		</addChar>
		<toString public="1" get="inline" set="null" line="49">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the buffer converted to a String.</haxe_doc>
		</toString>
		<new public="1" set="method" line="35">
			<f a="?size">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allocate a new Utf8 buffer using an optional bytes size.</haxe_doc>
		</new>
		<haxe_doc>Since not all platforms guarantee that `String` always uses UTF-8 encoding, you
	can use this cross-platform API to perform operations on such strings.</haxe_doc>
	</class>
	<class path="haxe.crypto.Adler32" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/crypto/Adler32.hx">
		<read public="1" set="method" line="60" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="haxe.crypto.Adler32"/>
</f></read>
		<make public="1" set="method" line="71" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></make>
		<a1><x path="Int"/></a1>
		<a2><x path="Int"/></a2>
		<get public="1" set="method" line="37"><f a=""><x path="Int"/></f></get>
		<update public="1" set="method" line="41"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update>
		<equals public="1" set="method" line="52"><f a="a">
	<c path="haxe.crypto.Adler32"/>
	<x path="Bool"/>
</f></equals>
		<toString public="1" set="method" line="56"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Calculates the Adler32 of the given Bytes.</haxe_doc>
	</class>
	<class path="haxe.io.Bytes" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="160" static="1"><f a="length">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></alloc>
		<ofString public="1" set="method" line="166" static="1">
			<f a="s:?encoding">
				<c path="String"/>
				<e path="haxe.io.Encoding"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Returns bytes representation of the given String, using specific encoding (UTF-8 by default)</haxe_doc>
		</ofString>
		<ofData public="1" set="method" line="178" static="1"><f a="b">
	<t path="haxe.io.BytesData"/>
	<c path="haxe.io.Bytes"/>
</f></ofData>
		<ofHex public="1" set="method" line="182" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Convert hexadecimal string to Bytes.
		Support only straight hex string ( Example: "0FDA14058916052309" )</haxe_doc>
		</ofHex>
		<fastGet public="1" get="inline" set="null" line="199" static="1">
			<f a="b:pos">
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Read the most efficiently possible the n-th byte of the data.
		Behavior when reading outside of the available data is unspecified.</haxe_doc>
		</fastGet>
		<length public="1" set="null"><x path="Int"/></length>
		<b><x path="hl.Bytes"/></b>
		<out get="inline" set="null" line="35"><f a="pos">
	<x path="Int"/>
	<x path="Bool"/>
</f></out>
		<outRange get="inline" set="null" line="39"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></outRange>
		<get public="1" set="method" line="43"><f a="pos">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<set public="1" set="method" line="47"><f a="pos:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<blit public="1" set="method" line="52"><f a="pos:src:srcpos:len">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blit>
		<fill public="1" set="method" line="57"><f a="pos:len:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></fill>
		<sub public="1" set="method" line="62"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></sub>
		<compare public="1" set="method" line="67"><f a="other">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></compare>
		<getDouble public="1" set="method" line="75">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the IEEE double precision value at given position (in low endian encoding).
		Result is unspecified if reading outside of the bounds</haxe_doc>
		</getDouble>
		<getFloat public="1" set="method" line="79">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the IEEE single precision value at given position (in low endian encoding).
		Result is unspecified if reading outside of the bounds</haxe_doc>
		</getFloat>
		<setDouble public="1" set="method" line="83">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the IEEE double precision value at given position in low endian encoding.
		Result is unspecified if writing outside of the bounds.</haxe_doc>
		</setDouble>
		<setFloat public="1" set="method" line="88">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the IEEE single precision value at given position in low endian encoding.
		Result is unspecified if writing outside of the bounds.</haxe_doc>
		</setFloat>
		<getUInt16 public="1" get="inline" set="null" line="93">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 16 bit unsigned integer at given position (in low endian encoding).</haxe_doc>
		</getUInt16>
		<setUInt16 public="1" get="inline" set="null" line="97">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the 16 bit unsigned integer at given position (in low endian encoding).</haxe_doc>
		</setUInt16>
		<getInt32 public="1" set="method" line="102">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 32 bit integer at given position (in low endian encoding).</haxe_doc>
		</getInt32>
		<getInt64 public="1" set="method" line="106">
			<f a="pos">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Returns the 64 bit integer at given position (in low endian encoding).</haxe_doc>
		</getInt64>
		<setInt32 public="1" set="method" line="112">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the 32 bit integer at given position (in low endian encoding).</haxe_doc>
		</setInt32>
		<setInt64 public="1" get="inline" set="null" line="117">
			<f a="pos:v">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the 64 bit integer at given position (in low endian encoding).</haxe_doc>
		</setInt64>
		<getString public="1" set="method" line="122"><f a="pos:len:?encoding">
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.io.Encoding"/>
	<c path="String"/>
</f></getString>
		<readString public="1" get="inline" set="null" line="134">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":deprecated"><e>"readString is deprecated, use getString instead"</e></m>
				<m n=":noCompletion"/>
			</meta>
		</readString>
		<toString public="1" set="method" line="138">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns string representation of the bytes as UTF8</haxe_doc>
		</toString>
		<toHex public="1" set="method" line="142"><f a=""><c path="String"/></f></toHex>
		<getData public="1" get="inline" set="null" line="156"><f a=""><t path="haxe.io.BytesData"/></f></getData>
		<new set="method" line="30"><f a="b:length">
	<x path="hl.Bytes"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":coreApi"/></meta>
	</class>
	<enum path="haxe.io.Encoding" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Encoding.hx">
		<UTF8/>
		<RawNative><haxe_doc>Output the string the way the platform represent it in memory. This is the most efficient but is platform-specific</haxe_doc></RawNative>
		<haxe_doc>String binary encoding supported by Haxe I/O</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="haxe.crypto.Base64" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/crypto/Base64.hx">
		<CHARS public="1" set="null" expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;" line="29" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</e></m></meta>
		</CHARS>
		<BYTES public="1" set="null" expr="haxe.io.Bytes.ofString(CHARS)" line="30" static="1">
			<c path="haxe.io.Bytes"/>
			<meta><m n=":value"><e>haxe.io.Bytes.ofString(CHARS)</e></m></meta>
		</BYTES>
		<encode public="1" set="method" line="32" static="1">
			<f a="bytes:?complement" v=":true">
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ complement : true }</e></m></meta>
		</encode>
		<decode public="1" set="method" line="45" static="1">
			<f a="str:?complement" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ complement : true }</e></m></meta>
		</decode>
		<haxe_doc>Allows one to encode/decode String and bytes using Base64 encoding.</haxe_doc>
	</class>
	<class path="haxe.crypto.BaseCode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/crypto/BaseCode.hx">
		<encode public="1" set="method" line="127" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<decode public="1" set="method" line="132" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></decode>
		<base><c path="haxe.io.Bytes"/></base>
		<nbits><x path="Int"/></nbits>
		<tbl><c path="Array"><x path="Int"/></c></tbl>
		<encodeBytes public="1" set="method" line="44"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></encodeBytes>
		<initTable set="method" line="72"><f a=""><x path="Void"/></f></initTable>
		<decodeBytes public="1" set="method" line="81"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></decodeBytes>
		<encodeString public="1" set="method" line="111"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encodeString>
		<decodeString public="1" set="method" line="119"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></decodeString>
		<new public="1" set="method" line="33"><f a="base">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Allows one to encode/decode String and bytes using a power of two base dictionary.</haxe_doc>
	</class>
	<class path="haxe.crypto.Crc32" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/crypto/Crc32.hx">
		<make public="1" set="method" line="67" static="1">
			<f a="data">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Calculates the CRC32 of the given data bytes</haxe_doc>
		</make>
		<crc><x path="Int"/></crc>
		<byte public="1" set="method" line="35"><f a="b">
	<x path="Int"/>
	<x path="Void"/>
</f></byte>
		<update public="1" set="method" line="46"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update>
		<get public="1" set="method" line="60"><f a=""><x path="Int"/></f></get>
		<new public="1" set="method" line="31"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Calculates the Crc32 of the given Bytes.</haxe_doc>
	</class>
	<enum path="haxe.crypto.HashMethod" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/crypto/Hmac.hx" module="haxe.crypto.Hmac">
		<MD5/>
		<SHA1/>
		<SHA256/>
		<haxe_doc>Hash methods for Hmac calculation.</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="haxe.crypto.Hmac" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/crypto/Hmac.hx">
		<method><e path="haxe.crypto.HashMethod"/></method>
		<blockSize><x path="Int"/></blockSize>
		<length><x path="Int"/></length>
		<doHash get="inline" set="null" line="54"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></doHash>
		<nullPad set="method" line="62"><f a="s:chunkLen">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></nullPad>
		<make public="1" set="method" line="73"><f a="key:msg">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<new public="1" set="method" line="42"><f a="hashMethod">
	<e path="haxe.crypto.HashMethod"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Calculates a Hmac of the given Bytes using a HashMethod.</haxe_doc>
	</class>
	<class path="haxe.crypto.Md5" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/haxe/crypto/Md5.hx">
		<encode public="1" set="method" line="26" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="32" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
	</class>
	<class path="haxe.crypto.Sha1" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/haxe/crypto/Sha1.hx">
		<encode public="1" set="method" line="26" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="32" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
	</class>
	<class path="haxe.crypto.Sha224" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/crypto/Sha224.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="35" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<str2blks set="method" line="127" static="1"><f a="s">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<safeAdd get="inline" set="null" line="143" static="1"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></safeAdd>
		<doEncode set="method" line="51"><f a="str:strlen">
	<c path="String"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<ROTR get="inline" set="null" line="151"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ROTR>
		<SHR get="inline" set="null" line="157"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></SHR>
		<Ch get="inline" set="null" line="163"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Ch>
		<Maj get="inline" set="null" line="169"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Maj>
		<Sigma0 get="inline" set="null" line="174"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma0>
		<Sigma1 get="inline" set="null" line="179"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma1>
		<Gamma0 get="inline" set="null" line="184"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma0>
		<Gamma1 get="inline" set="null" line="189"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma1>
		<hex set="method" line="194"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<new public="1" set="method" line="48"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a Sha224 of a String.</haxe_doc>
	</class>
	<class path="haxe.crypto.Sha256" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/crypto/Sha256.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="35" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<str2blks set="method" line="107" static="1"><f a="s">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<bytes2blks set="method" line="127" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><x path="Int"/></c>
</f></bytes2blks>
		<doEncode set="method" line="51"><f a="m:l">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<S get="inline" set="null" line="143"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></S>
		<R get="inline" set="null" line="148"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></R>
		<Ch get="inline" set="null" line="153"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Ch>
		<Maj get="inline" set="null" line="158"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Maj>
		<Sigma0256 get="inline" set="null" line="163"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma0256>
		<Sigma1256 get="inline" set="null" line="168"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma1256>
		<Gamma0256 get="inline" set="null" line="173"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma0256>
		<Gamma1256 get="inline" set="null" line="178"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma1256>
		<safeAdd get="inline" set="null" line="183"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></safeAdd>
		<hex set="method" line="190"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<new public="1" set="method" line="48"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a Sha256 of a String.</haxe_doc>
	</class>
	<typedef path="haxe.display.JsonTodo" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><d/></typedef>
	<typedef path="haxe.display.JsonPos" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<min><x path="Int"/></min>
	<max><x path="Int"/></max>
	<file><c path="String"/></file>
</a></typedef>
	<typedef path="haxe.display.JsonDoc" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><x path="Null"><c path="String"/></x></typedef>
	<abstract path="haxe.display.ImportStatus" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.ImportStatus_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
	<Imported public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.ImportStatus"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>This type is already available with it's unqualified name for one of these reasons:
          - it's a toplevel type
          - it's imported with an `import` in the current module
          - it's imported in an `import.hx` file</haxe_doc>
	</Imported>
	<Unimported public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.ImportStatus"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The type is currently not imported. It can be accessed either
        with its fully qualified name or by inserting an import.</haxe_doc>
	</Unimported>
	<Shadowed public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.ImportStatus"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A type with the same name is already imported in the module.
        The fully qualified name has to be used to access it.</haxe_doc>
	</Shadowed>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.ImportStatus_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
		<Imported public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.ImportStatus"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>This type is already available with it's unqualified name for one of these reasons:
          - it's a toplevel type
          - it's imported with an `import` in the current module
          - it's imported in an `import.hx` file</haxe_doc>
		</Imported>
		<Unimported public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.ImportStatus"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The type is currently not imported. It can be accessed either
        with its fully qualified name or by inserting an import.</haxe_doc>
		</Unimported>
		<Shadowed public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.ImportStatus"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A type with the same name is already imported in the module.
        The fully qualified name has to be used to access it.</haxe_doc>
		</Shadowed>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonPackagePath" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a><pack><c path="Array"><c path="String"/></c></pack></a></typedef>
	<typedef path="haxe.display.JsonModulePath" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<pack><c path="Array"><c path="String"/></c></pack>
	<moduleName><c path="String"/></moduleName>
	<importStatus>
		<x path="Null"><x path="haxe.display.ImportStatus"/></x>
		<meta><m n=":optional"/></meta>
	</importStatus>
</a></typedef>
	<typedef path="haxe.display.JsonTypePath" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<typeName><c path="String"/></typeName>
	<pack><c path="Array"><c path="String"/></c></pack>
	<moduleName><c path="String"/></moduleName>
	<importStatus>
		<x path="Null"><x path="haxe.display.ImportStatus"/></x>
		<meta><m n=":optional"/></meta>
	</importStatus>
</a></typedef>
	<typedef path="haxe.display.JsonStaticFieldPath" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<typeName><c path="String"/></typeName>
	<pack><c path="Array"><c path="String"/></c></pack>
	<moduleName><c path="String"/></moduleName>
	<importStatus>
		<x path="Null"><x path="haxe.display.ImportStatus"/></x>
		<meta><m n=":optional"/></meta>
	</importStatus>
	<fieldName><c path="String"/></fieldName>
</a></typedef>
	<typedef path="haxe.display.JsonTypePathWithParams" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<path><t path="haxe.display.JsonTypePath"/></path>
	<params><t path="haxe.display.JsonTypes"/></params>
</a></typedef>
	<typedef path="haxe.display.JsonFunctionArgument" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<value>
		<x path="Null"><a><string><c path="String"/></string></a></x>
		<meta><m n=":optional"/></meta>
	</value>
	<t><t path="haxe.display.JsonType"><d/></t></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.display.JsonFunctionSignature" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<ret><t path="haxe.display.JsonType"><d/></t></ret>
	<args><c path="Array"><t path="haxe.display.JsonFunctionArgument"/></c></args>
</a></typedef>
	<abstract path="haxe.display.JsonAnonStatusKind" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonAnonStatusKind_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
	<AClosed public="1" get="inline" set="null" expr="cast &quot;AClosed&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AClosed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AClosed>
	<AOpened public="1" get="inline" set="null" expr="cast &quot;AOpened&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AOpened"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AOpened>
	<AConst public="1" get="inline" set="null" expr="cast &quot;AConst&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AConst"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AConst>
	<AExtend public="1" get="inline" set="null" expr="cast &quot;AExtend&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypes"/></x>
		<meta>
			<m n=":value"><e>cast "AExtend"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AExtend>
	<AClassStatics public="1" get="inline" set="null" expr="cast &quot;AClassStatics&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
		<meta>
			<m n=":value"><e>cast "AClassStatics"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AClassStatics>
	<AEnumStatics public="1" get="inline" set="null" expr="cast &quot;AEnumStatics&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
		<meta>
			<m n=":value"><e>cast "AEnumStatics"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AEnumStatics>
	<AAbstractStatics public="1" get="inline" set="null" expr="cast &quot;AAbstractStatics&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
		<meta>
			<m n=":value"><e>cast "AAbstractStatics"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AAbstractStatics>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonAnonStatusKind_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
		<AClosed public="1" get="inline" set="null" expr="cast &quot;AClosed&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AClosed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AClosed>
		<AOpened public="1" get="inline" set="null" expr="cast &quot;AOpened&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AOpened"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AOpened>
		<AConst public="1" get="inline" set="null" expr="cast &quot;AConst&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AConst"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AConst>
		<AExtend public="1" get="inline" set="null" expr="cast &quot;AExtend&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypes"/></x>
			<meta>
				<m n=":value"><e>cast "AExtend"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AExtend>
		<AClassStatics public="1" get="inline" set="null" expr="cast &quot;AClassStatics&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
			<meta>
				<m n=":value"><e>cast "AClassStatics"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AClassStatics>
		<AEnumStatics public="1" get="inline" set="null" expr="cast &quot;AEnumStatics&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
			<meta>
				<m n=":value"><e>cast "AEnumStatics"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AEnumStatics>
		<AAbstractStatics public="1" get="inline" set="null" expr="cast &quot;AAbstractStatics&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
			<meta>
				<m n=":value"><e>cast "AAbstractStatics"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AAbstractStatics>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonAnonStatus" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatus.T"/></x></kind>
	<args><c path="haxe.display.JsonAnonStatus.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonAnon" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<status><t path="haxe.display.JsonAnonStatus"><d/></t></status>
	<fields><t path="haxe.display.JsonClassFields"/></fields>
</a></typedef>
	<abstract path="haxe.display.JsonTypeKind" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonTypeKind_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
	<TMono public="1" get="inline" set="null" expr="cast &quot;TMono&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><c path="haxe.display.JsonTypeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "TMono"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TMono>
	<TInst public="1" get="inline" set="null" expr="cast &quot;TInst&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "TInst"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TInst>
	<TEnum public="1" get="inline" set="null" expr="cast &quot;TEnum&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "TEnum"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TEnum>
	<TType public="1" get="inline" set="null" expr="cast &quot;TType&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "TType"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TType>
	<TAbstract public="1" get="inline" set="null" expr="cast &quot;TAbstract&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "TAbstract"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TAbstract>
	<TFun public="1" get="inline" set="null" expr="cast &quot;TFun&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonFunctionSignature"/></x>
		<meta>
			<m n=":value"><e>cast "TFun"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TFun>
	<TAnonymous public="1" get="inline" set="null" expr="cast &quot;TAnonymous&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonAnon"/></x>
		<meta>
			<m n=":value"><e>cast "TAnonymous"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TAnonymous>
	<TDynamic public="1" get="inline" set="null" expr="cast &quot;TDynamic&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><x path="Null"><t path="haxe.display.JsonType"><d/></t></x></x>
		<meta>
			<m n=":value"><e>cast "TDynamic"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TDynamic>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonTypeKind_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
		<TMono public="1" get="inline" set="null" expr="cast &quot;TMono&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><c path="haxe.display.JsonTypeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "TMono"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TMono>
		<TInst public="1" get="inline" set="null" expr="cast &quot;TInst&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "TInst"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TInst>
		<TEnum public="1" get="inline" set="null" expr="cast &quot;TEnum&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "TEnum"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TEnum>
		<TType public="1" get="inline" set="null" expr="cast &quot;TType&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "TType"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TType>
		<TAbstract public="1" get="inline" set="null" expr="cast &quot;TAbstract&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "TAbstract"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TAbstract>
		<TFun public="1" get="inline" set="null" expr="cast &quot;TFun&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonFunctionSignature"/></x>
			<meta>
				<m n=":value"><e>cast "TFun"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TFun>
		<TAnonymous public="1" get="inline" set="null" expr="cast &quot;TAnonymous&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonAnon"/></x>
			<meta>
				<m n=":value"><e>cast "TAnonymous"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TAnonymous>
		<TDynamic public="1" get="inline" set="null" expr="cast &quot;TDynamic&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><x path="Null"><t path="haxe.display.JsonType"><d/></t></x></x>
			<meta>
				<m n=":value"><e>cast "TDynamic"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TDynamic>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonType" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonTypeKind"><c path="haxe.display.JsonType.T"/></x></kind>
	<args><c path="haxe.display.JsonType.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonTypes" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonType"><d/></t></c></typedef>
	<typedef path="haxe.display.JsonTypeParameter" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<name><c path="String"/></name>
	<constraints><t path="haxe.display.JsonTypes"/></constraints>
</a></typedef>
	<typedef path="haxe.display.JsonTypeParameters" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonTypeParameter"/></c></typedef>
	<abstract path="haxe.display.JsonBinopKind" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonBinopKind_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
	<OpAdd public="1" get="inline" set="null" expr="cast &quot;OpAdd&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpAdd"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpAdd>
	<OpMult public="1" get="inline" set="null" expr="cast &quot;OpMult&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpMult"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpMult>
	<OpDiv public="1" get="inline" set="null" expr="cast &quot;OpDiv&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpDiv"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpDiv>
	<OpSub public="1" get="inline" set="null" expr="cast &quot;OpSub&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpSub"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpSub>
	<OpAssign public="1" get="inline" set="null" expr="cast &quot;OpAssign&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpAssign"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpAssign>
	<OpEq public="1" get="inline" set="null" expr="cast &quot;OpEq&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpEq"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpEq>
	<OpNotEq public="1" get="inline" set="null" expr="cast &quot;OpNotEq&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpNotEq"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpNotEq>
	<OpGt public="1" get="inline" set="null" expr="cast &quot;OpGt&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpGt"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpGt>
	<OpGte public="1" get="inline" set="null" expr="cast &quot;OpGte&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpGte"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpGte>
	<OpLt public="1" get="inline" set="null" expr="cast &quot;OpLt&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpLt"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpLt>
	<OpLte public="1" get="inline" set="null" expr="cast &quot;OpLte&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpLte"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpLte>
	<OpAnd public="1" get="inline" set="null" expr="cast &quot;OpAnd&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpAnd"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpAnd>
	<OpOr public="1" get="inline" set="null" expr="cast &quot;OpOr&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpOr"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpOr>
	<OpXor public="1" get="inline" set="null" expr="cast &quot;OpXor&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpXor"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpXor>
	<OpBoolAnd public="1" get="inline" set="null" expr="cast &quot;OpBoolAnd&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpBoolAnd"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpBoolAnd>
	<OpBoolOr public="1" get="inline" set="null" expr="cast &quot;OpBoolOr&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpBoolOr"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpBoolOr>
	<OpShl public="1" get="inline" set="null" expr="cast &quot;OpShl&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpShl"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpShl>
	<OpShr public="1" get="inline" set="null" expr="cast &quot;OpShr&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpShr"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpShr>
	<OpUShr public="1" get="inline" set="null" expr="cast &quot;OpUShr&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpUShr"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpUShr>
	<OpMod public="1" get="inline" set="null" expr="cast &quot;OpMod&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpMod"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpMod>
	<OpAssignOp public="1" get="inline" set="null" expr="cast &quot;OpAssignOp&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><t path="haxe.display.JsonBinop"><d/></t></x>
		<meta>
			<m n=":value"><e>cast "OpAssignOp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpAssignOp>
	<OpInterval public="1" get="inline" set="null" expr="cast &quot;OpInterval&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpInterval"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpInterval>
	<OpArrow public="1" get="inline" set="null" expr="cast &quot;OpArrow&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpArrow"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpArrow>
	<OpIn public="1" get="inline" set="null" expr="cast &quot;OpIn&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpIn"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpIn>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonBinopKind_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
		<OpAdd public="1" get="inline" set="null" expr="cast &quot;OpAdd&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpAdd"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpAdd>
		<OpMult public="1" get="inline" set="null" expr="cast &quot;OpMult&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpMult"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpMult>
		<OpDiv public="1" get="inline" set="null" expr="cast &quot;OpDiv&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpDiv"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpDiv>
		<OpSub public="1" get="inline" set="null" expr="cast &quot;OpSub&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpSub"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpSub>
		<OpAssign public="1" get="inline" set="null" expr="cast &quot;OpAssign&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpAssign"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpAssign>
		<OpEq public="1" get="inline" set="null" expr="cast &quot;OpEq&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpEq"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpEq>
		<OpNotEq public="1" get="inline" set="null" expr="cast &quot;OpNotEq&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpNotEq"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpNotEq>
		<OpGt public="1" get="inline" set="null" expr="cast &quot;OpGt&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpGt"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpGt>
		<OpGte public="1" get="inline" set="null" expr="cast &quot;OpGte&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpGte"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpGte>
		<OpLt public="1" get="inline" set="null" expr="cast &quot;OpLt&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpLt"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpLt>
		<OpLte public="1" get="inline" set="null" expr="cast &quot;OpLte&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpLte"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpLte>
		<OpAnd public="1" get="inline" set="null" expr="cast &quot;OpAnd&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpAnd"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpAnd>
		<OpOr public="1" get="inline" set="null" expr="cast &quot;OpOr&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpOr"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpOr>
		<OpXor public="1" get="inline" set="null" expr="cast &quot;OpXor&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpXor"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpXor>
		<OpBoolAnd public="1" get="inline" set="null" expr="cast &quot;OpBoolAnd&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpBoolAnd"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpBoolAnd>
		<OpBoolOr public="1" get="inline" set="null" expr="cast &quot;OpBoolOr&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpBoolOr"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpBoolOr>
		<OpShl public="1" get="inline" set="null" expr="cast &quot;OpShl&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpShl"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpShl>
		<OpShr public="1" get="inline" set="null" expr="cast &quot;OpShr&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpShr"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpShr>
		<OpUShr public="1" get="inline" set="null" expr="cast &quot;OpUShr&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpUShr"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpUShr>
		<OpMod public="1" get="inline" set="null" expr="cast &quot;OpMod&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpMod"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpMod>
		<OpAssignOp public="1" get="inline" set="null" expr="cast &quot;OpAssignOp&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><t path="haxe.display.JsonBinop"><d/></t></x>
			<meta>
				<m n=":value"><e>cast "OpAssignOp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpAssignOp>
		<OpInterval public="1" get="inline" set="null" expr="cast &quot;OpInterval&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpInterval"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpInterval>
		<OpArrow public="1" get="inline" set="null" expr="cast &quot;OpArrow&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpArrow"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpArrow>
		<OpIn public="1" get="inline" set="null" expr="cast &quot;OpIn&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpIn"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpIn>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonBinop" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinop.T"/></x></kind>
	<args><c path="haxe.display.JsonBinop.T"/></args>
</a></typedef>
	<abstract path="haxe.display.JsonUnop" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonUnop_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
	<OpIncrement public="1" get="inline" set="null" expr="cast &quot;OpIncrement&quot;" line="1" static="1">
		<x path="haxe.display.JsonUnop"/>
		<meta>
			<m n=":value"><e>cast "OpIncrement"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpIncrement>
	<OpDecrement public="1" get="inline" set="null" expr="cast &quot;OpDecrement&quot;" line="1" static="1">
		<x path="haxe.display.JsonUnop"/>
		<meta>
			<m n=":value"><e>cast "OpDecrement"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpDecrement>
	<OpNot public="1" get="inline" set="null" expr="cast &quot;OpNot&quot;" line="1" static="1">
		<x path="haxe.display.JsonUnop"/>
		<meta>
			<m n=":value"><e>cast "OpNot"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpNot>
	<OpNeg public="1" get="inline" set="null" expr="cast &quot;OpNeg&quot;" line="1" static="1">
		<x path="haxe.display.JsonUnop"/>
		<meta>
			<m n=":value"><e>cast "OpNeg"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpNeg>
	<OpNegBits public="1" get="inline" set="null" expr="cast &quot;OpNegBits&quot;" line="1" static="1">
		<x path="haxe.display.JsonUnop"/>
		<meta>
			<m n=":value"><e>cast "OpNegBits"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpNegBits>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonUnop_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
		<OpIncrement public="1" get="inline" set="null" expr="cast &quot;OpIncrement&quot;" line="1" static="1">
			<x path="haxe.display.JsonUnop"/>
			<meta>
				<m n=":value"><e>cast "OpIncrement"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpIncrement>
		<OpDecrement public="1" get="inline" set="null" expr="cast &quot;OpDecrement&quot;" line="1" static="1">
			<x path="haxe.display.JsonUnop"/>
			<meta>
				<m n=":value"><e>cast "OpDecrement"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpDecrement>
		<OpNot public="1" get="inline" set="null" expr="cast &quot;OpNot&quot;" line="1" static="1">
			<x path="haxe.display.JsonUnop"/>
			<meta>
				<m n=":value"><e>cast "OpNot"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpNot>
		<OpNeg public="1" get="inline" set="null" expr="cast &quot;OpNeg&quot;" line="1" static="1">
			<x path="haxe.display.JsonUnop"/>
			<meta>
				<m n=":value"><e>cast "OpNeg"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpNeg>
		<OpNegBits public="1" get="inline" set="null" expr="cast &quot;OpNegBits&quot;" line="1" static="1">
			<x path="haxe.display.JsonUnop"/>
			<meta>
				<m n=":value"><e>cast "OpNegBits"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpNegBits>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonExpr" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><t path="haxe.display.JsonTodo"/></typedef>
	<typedef path="haxe.display.JsonMetadataEntry" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<name><c path="String"/></name>
	<args><c path="Array"><t path="haxe.display.JsonExpr"/></c></args>
</a></typedef>
	<typedef path="haxe.display.JsonMetadata" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonMetadataEntry"/></c></typedef>
	<abstract path="haxe.display.JsonTConstantKind" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonTConstantKind_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
	<TInt public="1" get="inline" set="null" expr="cast &quot;TInt&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
		<meta>
			<m n=":value"><e>cast "TInt"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TInt>
	<TFloat public="1" get="inline" set="null" expr="cast &quot;TFloat&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
		<meta>
			<m n=":value"><e>cast "TFloat"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TFloat>
	<TString public="1" get="inline" set="null" expr="cast &quot;TString&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
		<meta>
			<m n=":value"><e>cast "TString"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TString>
	<TBool public="1" get="inline" set="null" expr="cast &quot;TBool&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><x path="Bool"/></x>
		<meta>
			<m n=":value"><e>cast "TBool"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TBool>
	<TNull public="1" get="inline" set="null" expr="cast &quot;TNull&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "TNull"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TNull>
	<TThis public="1" get="inline" set="null" expr="cast &quot;TThis&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "TThis"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TThis>
	<TSuper public="1" get="inline" set="null" expr="cast &quot;TSuper&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "TSuper"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TSuper>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonTConstantKind_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
		<TInt public="1" get="inline" set="null" expr="cast &quot;TInt&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
			<meta>
				<m n=":value"><e>cast "TInt"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TInt>
		<TFloat public="1" get="inline" set="null" expr="cast &quot;TFloat&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
			<meta>
				<m n=":value"><e>cast "TFloat"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TFloat>
		<TString public="1" get="inline" set="null" expr="cast &quot;TString&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
			<meta>
				<m n=":value"><e>cast "TString"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TString>
		<TBool public="1" get="inline" set="null" expr="cast &quot;TBool&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><x path="Bool"/></x>
			<meta>
				<m n=":value"><e>cast "TBool"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TBool>
		<TNull public="1" get="inline" set="null" expr="cast &quot;TNull&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "TNull"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TNull>
		<TThis public="1" get="inline" set="null" expr="cast &quot;TThis&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "TThis"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TThis>
		<TSuper public="1" get="inline" set="null" expr="cast &quot;TSuper&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "TSuper"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TSuper>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonTConstant" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstant.T"/></x></kind>
	<args><c path="haxe.display.JsonTConstant.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonTExpr" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><t path="haxe.display.JsonTodo"/></typedef>
	<abstract path="haxe.display.JsonVarAccessKind" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonVarAccessKind_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
	<AccNormal public="1" get="inline" set="null" expr="cast &quot;AccNormal&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccNormal"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AccNormal>
	<AccNo public="1" get="inline" set="null" expr="cast &quot;AccNo&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccNo"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AccNo>
	<AccNever public="1" get="inline" set="null" expr="cast &quot;AccNever&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccNever"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AccNever>
	<AccResolve public="1" get="inline" set="null" expr="cast &quot;AccResolve&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccResolve"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AccResolve>
	<AccCall public="1" get="inline" set="null" expr="cast &quot;AccCall&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccCall"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AccCall>
	<AccInline public="1" get="inline" set="null" expr="cast &quot;AccInline&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccInline"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AccInline>
	<AccRequire public="1" get="inline" set="null" expr="cast &quot;AccRequire&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><a>
	<require><c path="String"/></require>
	<message><x path="Null"><c path="String"/></x></message>
</a></x>
		<meta>
			<m n=":value"><e>cast "AccRequire"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AccRequire>
	<AccCtor public="1" get="inline" set="null" expr="cast &quot;AccCtor&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccCtor"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AccCtor>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonVarAccessKind_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
		<AccNormal public="1" get="inline" set="null" expr="cast &quot;AccNormal&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccNormal"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AccNormal>
		<AccNo public="1" get="inline" set="null" expr="cast &quot;AccNo&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccNo"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AccNo>
		<AccNever public="1" get="inline" set="null" expr="cast &quot;AccNever&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccNever"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AccNever>
		<AccResolve public="1" get="inline" set="null" expr="cast &quot;AccResolve&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccResolve"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AccResolve>
		<AccCall public="1" get="inline" set="null" expr="cast &quot;AccCall&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccCall"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AccCall>
		<AccInline public="1" get="inline" set="null" expr="cast &quot;AccInline&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccInline"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AccInline>
		<AccRequire public="1" get="inline" set="null" expr="cast &quot;AccRequire&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><a>
	<require><c path="String"/></require>
	<message><x path="Null"><c path="String"/></x></message>
</a></x>
			<meta>
				<m n=":value"><e>cast "AccRequire"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AccRequire>
		<AccCtor public="1" get="inline" set="null" expr="cast &quot;AccCtor&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccCtor"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AccCtor>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonVarAccess" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccess.T"/></x></kind>
	<args><c path="haxe.display.JsonVarAccess.T"/></args>
</a></typedef>
	<abstract path="haxe.display.JsonMethodKind" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonMethodKind_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
	<MethNormal public="1" get="inline" set="null" expr="cast &quot;MethNormal&quot;" line="1" static="1">
		<x path="haxe.display.JsonMethodKind"/>
		<meta>
			<m n=":value"><e>cast "MethNormal"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MethNormal>
	<MethInline public="1" get="inline" set="null" expr="cast &quot;MethInline&quot;" line="1" static="1">
		<x path="haxe.display.JsonMethodKind"/>
		<meta>
			<m n=":value"><e>cast "MethInline"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MethInline>
	<MethDynamic public="1" get="inline" set="null" expr="cast &quot;MethDynamic&quot;" line="1" static="1">
		<x path="haxe.display.JsonMethodKind"/>
		<meta>
			<m n=":value"><e>cast "MethDynamic"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MethDynamic>
	<MethMacro public="1" get="inline" set="null" expr="cast &quot;MethMacro&quot;" line="1" static="1">
		<x path="haxe.display.JsonMethodKind"/>
		<meta>
			<m n=":value"><e>cast "MethMacro"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MethMacro>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonMethodKind_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
		<MethNormal public="1" get="inline" set="null" expr="cast &quot;MethNormal&quot;" line="1" static="1">
			<x path="haxe.display.JsonMethodKind"/>
			<meta>
				<m n=":value"><e>cast "MethNormal"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MethNormal>
		<MethInline public="1" get="inline" set="null" expr="cast &quot;MethInline&quot;" line="1" static="1">
			<x path="haxe.display.JsonMethodKind"/>
			<meta>
				<m n=":value"><e>cast "MethInline"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MethInline>
		<MethDynamic public="1" get="inline" set="null" expr="cast &quot;MethDynamic&quot;" line="1" static="1">
			<x path="haxe.display.JsonMethodKind"/>
			<meta>
				<m n=":value"><e>cast "MethDynamic"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MethDynamic>
		<MethMacro public="1" get="inline" set="null" expr="cast &quot;MethMacro&quot;" line="1" static="1">
			<x path="haxe.display.JsonMethodKind"/>
			<meta>
				<m n=":value"><e>cast "MethMacro"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MethMacro>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.display.JsonFieldKindKind" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonFieldKindKind_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
	<FVar public="1" get="inline" set="null" expr="cast &quot;FVar&quot;" line="1" static="1">
		<x path="haxe.display.JsonFieldKindKind"><a>
	<write><t path="haxe.display.JsonVarAccess"><d/></t></write>
	<read><t path="haxe.display.JsonVarAccess"><d/></t></read>
</a></x>
		<meta>
			<m n=":value"><e>cast "FVar"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FVar>
	<FMethod public="1" get="inline" set="null" expr="cast &quot;FMethod&quot;" line="1" static="1">
		<x path="haxe.display.JsonFieldKindKind"><x path="haxe.display.JsonMethodKind"/></x>
		<meta>
			<m n=":value"><e>cast "FMethod"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FMethod>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonFieldKindKind_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
		<FVar public="1" get="inline" set="null" expr="cast &quot;FVar&quot;" line="1" static="1">
			<x path="haxe.display.JsonFieldKindKind"><a>
	<write><t path="haxe.display.JsonVarAccess"><d/></t></write>
	<read><t path="haxe.display.JsonVarAccess"><d/></t></read>
</a></x>
			<meta>
				<m n=":value"><e>cast "FVar"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FVar>
		<FMethod public="1" get="inline" set="null" expr="cast &quot;FMethod&quot;" line="1" static="1">
			<x path="haxe.display.JsonFieldKindKind"><x path="haxe.display.JsonMethodKind"/></x>
			<meta>
				<m n=":value"><e>cast "FMethod"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FMethod>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonFieldKind" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonFieldKindKind"><c path="haxe.display.JsonFieldKind.T"/></x></kind>
	<args><c path="haxe.display.JsonFieldKind.T"/></args>
</a></typedef>
	<abstract path="haxe.display.JsonClassFieldScope" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonClassFieldScope_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
	<Static public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.JsonClassFieldScope"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Static>
	<Member public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.JsonClassFieldScope"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Member>
	<Constructor public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.JsonClassFieldScope"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Constructor>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonClassFieldScope_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
		<Static public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.JsonClassFieldScope"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Static>
		<Member public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.JsonClassFieldScope"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Member>
		<Constructor public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.JsonClassFieldScope"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Constructor>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonClassField" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<type><t path="haxe.display.JsonType"><d/></t></type>
	<scope><x path="haxe.display.JsonClassFieldScope"/></scope>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<params><t path="haxe.display.JsonTypeParameters"/></params>
	<overloads><t path="haxe.display.JsonClassFields"/></overloads>
	<name><c path="String"/></name>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<kind><t path="haxe.display.JsonFieldKind"><d/></t></kind>
	<isPublic><x path="Bool"/></isPublic>
	<isFinal><x path="Bool"/></isFinal>
	<expr>
		<x path="Null"><a><string><c path="String"/></string></a></x>
		<meta><m n=":optional"/></meta>
	</expr>
	<doc><t path="haxe.display.JsonDoc"/></doc>
</a></typedef>
	<typedef path="haxe.display.JsonClassFields" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonClassField"/></c></typedef>
	<typedef path="haxe.display.JsonClassFieldReference" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="String"/></typedef>
	<typedef path="haxe.display.JsonEnumField" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<type><t path="haxe.display.JsonType"><d/></t></type>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<params><t path="haxe.display.JsonTypeParameters"/></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<index><x path="Int"/></index>
	<doc><t path="haxe.display.JsonDoc"/></doc>
</a></typedef>
	<typedef path="haxe.display.JsonEnumFields" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonEnumField"/></c></typedef>
	<abstract path="haxe.display.JsonClassKindKind" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonClassKindKind_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
	<KNormal public="1" get="inline" set="null" expr="cast &quot;KNormal&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "KNormal"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KNormal>
	<KTypeParameter public="1" get="inline" set="null" expr="cast &quot;KTypeParameter&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypes"/></x>
		<meta>
			<m n=":value"><e>cast "KTypeParameter"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KTypeParameter>
	<KExtension public="1" get="inline" set="null" expr="cast &quot;KExtension&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "KExtension"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KExtension>
	<KExpr public="1" get="inline" set="null" expr="cast &quot;KExpr&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonExpr"/></x>
		<meta>
			<m n=":value"><e>cast "KExpr"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KExpr>
	<KGeneric public="1" get="inline" set="null" expr="cast &quot;KGeneric&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "KGeneric"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KGeneric>
	<KGenericInstance public="1" get="inline" set="null" expr="cast &quot;KGenericInstance&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "KGenericInstance"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KGenericInstance>
	<KMacroType public="1" get="inline" set="null" expr="cast &quot;KMacroType&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "KMacroType"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KMacroType>
	<KAbstractImpl public="1" get="inline" set="null" expr="cast &quot;KAbstractImpl&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePath"/></x>
		<meta>
			<m n=":value"><e>cast "KAbstractImpl"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KAbstractImpl>
	<KGenericBuild public="1" get="inline" set="null" expr="cast &quot;KGenericBuild&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "KGenericBuild"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KGenericBuild>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonClassKindKind_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
		<KNormal public="1" get="inline" set="null" expr="cast &quot;KNormal&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "KNormal"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KNormal>
		<KTypeParameter public="1" get="inline" set="null" expr="cast &quot;KTypeParameter&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypes"/></x>
			<meta>
				<m n=":value"><e>cast "KTypeParameter"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KTypeParameter>
		<KExtension public="1" get="inline" set="null" expr="cast &quot;KExtension&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "KExtension"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KExtension>
		<KExpr public="1" get="inline" set="null" expr="cast &quot;KExpr&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonExpr"/></x>
			<meta>
				<m n=":value"><e>cast "KExpr"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KExpr>
		<KGeneric public="1" get="inline" set="null" expr="cast &quot;KGeneric&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "KGeneric"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KGeneric>
		<KGenericInstance public="1" get="inline" set="null" expr="cast &quot;KGenericInstance&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "KGenericInstance"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KGenericInstance>
		<KMacroType public="1" get="inline" set="null" expr="cast &quot;KMacroType&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "KMacroType"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KMacroType>
		<KAbstractImpl public="1" get="inline" set="null" expr="cast &quot;KAbstractImpl&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePath"/></x>
			<meta>
				<m n=":value"><e>cast "KAbstractImpl"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KAbstractImpl>
		<KGenericBuild public="1" get="inline" set="null" expr="cast &quot;KGenericBuild&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "KGenericBuild"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KGenericBuild>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonClassKind" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKind.T"/></x></kind>
	<args><c path="haxe.display.JsonClassKind.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonClass" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<superClass><x path="Null"><t path="haxe.display.JsonTypePathWithParams"/></x></superClass>
	<statics><t path="haxe.display.JsonClassFields"/></statics>
	<overrides><c path="Array"><t path="haxe.display.JsonClassFieldReference"/></c></overrides>
	<kind><t path="haxe.display.JsonClassKind"><d/></t></kind>
	<isInterface><x path="Bool"/></isInterface>
	<isExtern><x path="Bool"/></isExtern>
	<interfaces><c path="Array"><t path="haxe.display.JsonTypePathWithParams"/></c></interfaces>
	<init><x path="Null"><t path="haxe.display.JsonTExpr"/></x></init>
	<fields><t path="haxe.display.JsonClassFields"/></fields>
	<constructor><x path="Null"><t path="haxe.display.JsonClassField"/></x></constructor>
</a></typedef>
	<typedef path="haxe.display.JsonEnum" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<isExtern><x path="Bool"/></isExtern>
	<constructors><t path="haxe.display.JsonEnumFields"/></constructors>
</a></typedef>
	<typedef path="haxe.display.JsonTypedef" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a><type><t path="haxe.display.JsonType"><d/></t></type></a></typedef>
	<typedef path="haxe.display.JsonAbstractBinop" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<op><t path="haxe.display.JsonBinop"><d/></t></op>
	<field><t path="haxe.display.JsonClassFieldReference"/></field>
</a></typedef>
	<typedef path="haxe.display.JsonAbstractUnop" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<postFix><x path="Bool"/></postFix>
	<op><x path="haxe.display.JsonUnop"/></op>
	<field><t path="haxe.display.JsonClassFieldReference"/></field>
</a></typedef>
	<typedef path="haxe.display.JsonAbstractCast" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<t><t path="haxe.display.JsonType"><d/></t></t>
	<field><t path="haxe.display.JsonClassFieldReference"/></field>
</a></typedef>
	<typedef path="haxe.display.JsonAbstract" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<unops><c path="Array"><t path="haxe.display.JsonAbstractUnop"/></c></unops>
	<type><t path="haxe.display.JsonType"><d/></t></type>
	<to><c path="Array"><t path="haxe.display.JsonAbstractCast"/></c></to>
	<resolve><x path="Null"><t path="haxe.display.JsonClassFieldReference"/></x></resolve>
	<impl><x path="Null"><t path="haxe.display.JsonClass"/></x></impl>
	<from><c path="Array"><t path="haxe.display.JsonAbstractCast"/></c></from>
	<binops><c path="Array"><t path="haxe.display.JsonAbstractBinop"/></c></binops>
	<array><t path="haxe.display.JsonClassFields"/></array>
</a></typedef>
	<abstract path="haxe.display.JsonModuleTypeKind" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonModuleTypeKind_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
	<Class public="1" get="inline" set="null" expr="cast &quot;class&quot;" line="361" static="1">
		<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonClass"/></x>
		<meta>
			<m n=":value"><e>cast "class"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Class>
	<Enum public="1" get="inline" set="null" expr="cast &quot;enum&quot;" line="362" static="1">
		<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonEnum"/></x>
		<meta>
			<m n=":value"><e>cast "enum"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Enum>
	<Typedef public="1" get="inline" set="null" expr="cast &quot;typedef&quot;" line="363" static="1">
		<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonTypedef"/></x>
		<meta>
			<m n=":value"><e>cast "typedef"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Typedef>
	<Abstract public="1" get="inline" set="null" expr="cast &quot;abstract&quot;" line="364" static="1">
		<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonAbstract"/></x>
		<meta>
			<m n=":value"><e>cast "abstract"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Abstract>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonModuleTypeKind_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
		<Class public="1" get="inline" set="null" expr="cast &quot;class&quot;" line="361" static="1">
			<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonClass"/></x>
			<meta>
				<m n=":value"><e>cast "class"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Class>
		<Enum public="1" get="inline" set="null" expr="cast &quot;enum&quot;" line="362" static="1">
			<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonEnum"/></x>
			<meta>
				<m n=":value"><e>cast "enum"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Enum>
		<Typedef public="1" get="inline" set="null" expr="cast &quot;typedef&quot;" line="363" static="1">
			<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonTypedef"/></x>
			<meta>
				<m n=":value"><e>cast "typedef"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Typedef>
		<Abstract public="1" get="inline" set="null" expr="cast &quot;abstract&quot;" line="364" static="1">
			<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonAbstract"/></x>
			<meta>
				<m n=":value"><e>cast "abstract"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Abstract>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.display.JsonModuleType" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<params><t path="haxe.display.JsonTypeParameters"/></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<moduleName><c path="String"/></moduleName>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<kind><x path="haxe.display.JsonModuleTypeKind"><c path="haxe.display.JsonModuleType.T"/></x></kind>
	<isPrivate><x path="Bool"/></isPrivate>
	<doc><t path="haxe.display.JsonDoc"/></doc>
	<args><c path="haxe.display.JsonModuleType.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonModuleTypes" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/JsonModuleTypes.hx"><c path="Array"><t path="haxe.display.JsonModuleType"><d/></t></c></typedef>
	<typedef path="haxe.display.Position" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/Position.hx">
		<a>
			<line>
				<x path="Int"/>
				<haxe_doc>Line position in a document (zero-based).</haxe_doc>
			</line>
			<character>
				<x path="Int"/>
				<haxe_doc>Character offset on a line in a document (1-based).</haxe_doc>
			</character>
		</a>
		<haxe_doc>Position in a text document expressed as zero-based line and character offset.</haxe_doc>
	</typedef>
	<typedef path="haxe.display.Range" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/Position.hx" module="haxe.display.Position">
		<a>
			<start>
				<t path="haxe.display.Position"/>
				<haxe_doc>The range's start position</haxe_doc>
			</start>
			<end>
				<t path="haxe.display.Position"/>
				<haxe_doc>The range's end position</haxe_doc>
			</end>
		</a>
		<haxe_doc>A range in a text document expressed as (zero-based) start and end positions.</haxe_doc>
	</typedef>
	<typedef path="haxe.display.Location" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/display/Position.hx" module="haxe.display.Position">
		<a>
			<range><t path="haxe.display.Range"/></range>
			<file><c path="String"/></file>
		</a>
		<haxe_doc>Represents a location inside a resource, such as a line inside a text file.</haxe_doc>
	</typedef>
	<class path="haxe.ds.ArraySort" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/ArraySort.hx">
		<sort public="1" params="T" set="method" line="43" static="1">
			<f a="a:cmp">
				<c path="Array"><c path="sort.T"/></c>
				<f a=":">
					<c path="sort.T"/>
					<c path="sort.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts Array `a` according to the comparison function `cmp`, where
		`cmp(x,y)` returns 0 if `x == y`, a positive Int if `x > y` and a
		negative Int if `x < y`.

		This operation modifies Array `a` in place.

		This operation is stable: The order of equal elements is preserved.

		If `a` or `cmp` are null, the result is unspecified.]]></haxe_doc>
		</sort>
		<rec params="T" set="method" line="47" static="1"><f a="a:cmp:from:to">
	<c path="Array"><c path="rec.T"/></c>
	<f a=":">
		<c path="rec.T"/>
		<c path="rec.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rec>
		<doMerge params="T" set="method" line="68" static="1"><f a="a:cmp:from:pivot:to:len1:len2">
	<c path="Array"><c path="doMerge.T"/></c>
	<f a=":">
		<c path="doMerge.T"/>
		<c path="doMerge.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></doMerge>
		<rotate params="T" set="method" line="94" static="1"><f a="a:cmp:from:mid:to">
	<c path="Array"><c path="rotate.T"/></c>
	<f a=":">
		<c path="rotate.T"/>
		<c path="rotate.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rotate>
		<gcd set="method" line="112" static="1"><f a="m:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></gcd>
		<upper params="T" set="method" line="121" static="1"><f a="a:cmp:from:to:val">
	<c path="Array"><c path="upper.T"/></c>
	<f a=":">
		<c path="upper.T"/>
		<c path="upper.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></upper>
		<lower params="T" set="method" line="136" static="1"><f a="a:cmp:from:to:val">
	<c path="Array"><c path="lower.T"/></c>
	<f a=":">
		<c path="lower.T"/>
		<c path="lower.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lower>
		<swap params="T" set="method" line="150" static="1"><f a="a:i:j">
	<c path="Array"><c path="swap.T"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></swap>
		<compare params="T" get="inline" set="null" line="156" static="1"><f a="a:cmp:i:j">
	<c path="Array"><c path="compare.T"/></c>
	<f a=":">
		<c path="compare.T"/>
		<c path="compare.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></compare>
		<haxe_doc>ArraySort provides a stable implementation of merge sort through its `sort`
	method. It should be used instead of `Array.sort` in cases where the order
	of equal elements has to be retained on all targets.</haxe_doc>
	</class>
	<class path="haxe.ds.BalancedTree" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/BalancedTree.hx">
		<implements path="haxe.IMap">
			<c path="haxe.ds.BalancedTree.K"/>
			<c path="haxe.ds.BalancedTree.V"/>
		</implements>
		<root><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></root>
		<set public="1" set="method" line="50">
			<f a="key:value">
				<c path="haxe.ds.BalancedTree.K"/>
				<c path="haxe.ds.BalancedTree.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds `key` to `value`.

		If `key` is already bound to a value, that binding disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" set="method" line="61">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Null"><c path="haxe.ds.BalancedTree.V"/></x>
			</f>
			<haxe_doc>Returns the value `key` is bound to.

		If `key` is not bound to any value, `null` is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<remove public="1" set="method" line="82">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the current binding of `key`.

		If `key` has no binding, `this` BalancedTree is unchanged and false is
		returned.

		Otherwise the binding of `key` is removed and true is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="99">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `key` is bound to a value.

		This method returns true even if `key` is bound to null.

		If `key` is null, the result is unspecified.</haxe_doc>
		</exists>
		<iterator public="1" set="method" line="115">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.V"/></t></f>
			<haxe_doc>Iterates over the bound values of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="124">
			<f a=""><t path="KeyValueIterator">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<keys public="1" set="method" line="133">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.K"/></t></f>
			<haxe_doc>Iterates over the keys of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</keys>
		<copy public="1" set="method" line="139"><f a=""><c path="haxe.ds.BalancedTree">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></f></copy>
		<setLoop set="method" line="145"><f a="k:v:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></setLoop>
		<removeLoop set="method" line="158"><f a="k:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeLoop>
		<iteratorLoop set="method" line="166"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="Array"><c path="haxe.ds.BalancedTree.V"/></c>
	<x path="Void"/>
</f></iteratorLoop>
		<keysLoop set="method" line="174"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="Array"><c path="haxe.ds.BalancedTree.K"/></c>
	<x path="Void"/>
</f></keysLoop>
		<merge set="method" line="182"><f a="t1:t2">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></merge>
		<minBinding set="method" line="189"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></minBinding>
		<removeMinBinding set="method" line="195"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeMinBinding>
		<balance set="method" line="200"><f a="l:k:v:r">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></balance>
		<compare set="method" line="214"><f a="k1:k2">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.K"/>
	<x path="Int"/>
</f></compare>
		<toString public="1" set="method" line="218"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="41">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new BalancedTree, which is initially empty.</haxe_doc>
		</new>
		<haxe_doc>BalancedTree allows key-value mapping with arbitrary keys, as long as they
	can be ordered. By default, `Reflect.compare` is used in the `compare`
	method, which can be overridden in subclasses.

	Operations have a logarithmic average and worst-case cost.

	Iteration over keys and values, using `keys` and `iterator` respectively,
	are in-order.</haxe_doc>
	</class>
	<class path="haxe.ds.TreeNode" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/BalancedTree.hx" module="haxe.ds.BalancedTree">
		<left public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></left>
		<right public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></right>
		<key public="1"><c path="haxe.ds.TreeNode.K"/></key>
		<value public="1"><c path="haxe.ds.TreeNode.V"/></value>
		<_height><x path="Int"/></_height>
		<get_height public="1" get="inline" set="null" line="247"><f a=""><x path="Int"/></f></get_height>
		<toString public="1" set="method" line="249"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="236">
			<f a="l:k:v:r:?h" v="::::-1">
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<c path="haxe.ds.TreeNode.K"/>
				<c path="haxe.ds.TreeNode.V"/>
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ h : -1 }</e></m></meta>
		</new>
		<haxe_doc>A tree node of `haxe.ds.BalancedTree`.</haxe_doc>
	</class>
	<enum path="haxe.ds.Either" params="L:R" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/Either.hx">
		<Left a="v"><c path="haxe.ds.Either.L"/></Left>
		<Right a="v"><c path="haxe.ds.Either.R"/></Right>
		<haxe_doc>Either represents values which are either of type `L` (Left) or type `R`
	(Right).</haxe_doc>
	</enum>
	<class path="haxe.ds.EnumValueMap" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/EnumValueMap.hx">
		<extends path="haxe.ds.BalancedTree">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</extends>
		<implements path="haxe.IMap">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</implements>
		<compare set="method" line="33" override="1"><f a="k1:k2">
	<x path="EnumValue"/>
	<x path="EnumValue"/>
	<x path="Int"/>
</f></compare>
		<compareArgs set="method" line="42"><f a="a1:a2">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<x path="Int"/>
</f></compareArgs>
		<compareArg set="method" line="52"><f a="v1:v2">
	<d/>
	<d/>
	<x path="Int"/>
</f></compareArg>
		<new public="1" set="method" line="31"><f a=""><x path="Void"/></f></new>
		<haxe_doc>EnumValueMap allows mapping of enum value keys to arbitrary values.

	Keys are compared by value and recursively over their parameters. If any
	parameter is not an enum value, `Reflect.compare` is used to compare them.</haxe_doc>
	</class>
	<class path="haxe.ds.GenericCell" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/GenericStack.hx" module="haxe.ds.GenericStack">
		<elt public="1"><c path="haxe.ds.GenericCell.T"/></elt>
		<next public="1"><c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericCell.T"/></c></next>
		<new public="1" set="method" line="35"><f a="elt:next">
	<c path="haxe.ds.GenericCell.T"/>
	<c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericCell.T"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>A cell of `haxe.ds.GenericStack`.
  
	@see https://haxe.org/manual/std-GenericStack.html</haxe_doc>
	</class>
	<class path="haxe.ds.GenericStack" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/GenericStack.hx">
		<head public="1"><c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericStack.T"/></c></head>
		<add public="1" get="inline" set="null" line="91">
			<f a="item">
				<c path="haxe.ds.GenericStack.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Pushes element `item` onto the stack.</haxe_doc>
		</add>
		<first public="1" get="inline" set="null" line="100">
			<f a=""><x path="Null"><c path="haxe.ds.GenericStack.T"/></x></f>
			<haxe_doc>Returns the topmost stack element without removing it.

		If the stack is empty, null is returned.</haxe_doc>
		</first>
		<pop public="1" get="inline" set="null" line="109">
			<f a=""><x path="Null"><c path="haxe.ds.GenericStack.T"/></x></f>
			<haxe_doc>Returns the topmost stack element and removes it.

		If the stack is empty, null is returned.</haxe_doc>
		</pop>
		<isEmpty public="1" get="inline" set="null" line="122">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if the stack is empty.</haxe_doc>
		</isEmpty>
		<remove public="1" set="method" line="135">
			<f a="v">
				<c path="haxe.ds.GenericStack.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first element which is equal to `v` according to the `==`
		operator.

		This method traverses the stack until it finds a matching element and
		unlinks it, returning true.

		If no matching element is found, false is returned.</haxe_doc>
		</remove>
		<iterator public="1" set="method" line="166">
			<f a=""><t path="Iterator"><c path="haxe.ds.GenericStack.T"/></t></f>
			<haxe_doc>Returns an iterator over the elements of `this` GenericStack.</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="184">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of `this` GenericStack.</haxe_doc>
		</toString>
		<new public="1" set="method" line="85">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty GenericStack.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A stack of elements.

	This class is generic, which means one type is generated for each type
	parameter T on static targets. For example:

	- `new GenericStack<Int>()` generates `GenericStack_Int`
	- `new GenericStack<String>()` generates `GenericStack_String`

	The generated name is an implementation detail and should not be relied
	upon.

	@see https://haxe.org/manual/std-GenericStack.html]]></haxe_doc>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/HashMap.hx">
		<this><c path="haxe.ds._HashMap.HashMapData">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</c></this>
		<haxe_doc>HashMap allows mapping of hashable objects to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
	<_new public="1" get="inline" set="null" line="35" static="1">
		<f a=""><x path="haxe.ds.HashMap">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</x></f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Creates a new HashMap.</haxe_doc>
	</_new>
	<set public="1" get="inline" set="null" line="42" static="1">
		<f a="this:k:v">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<c path="haxe.ds.HashMap.V"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.set`</haxe_doc>
	</set>
	<get public="1" get="inline" set="null" line="50" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Null"><c path="haxe.ds.HashMap.V"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.get`</haxe_doc>
	</get>
	<exists public="1" get="inline" set="null" line="57" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.exists`</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="64" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.remove`</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="72" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.HashMap.K"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.keys`</haxe_doc>
	</keys>
	<copy public="1" set="method" line="79" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<x path="haxe.ds.HashMap">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.copy`</haxe_doc>
	</copy>
	<iterator public="1" get="inline" set="null" line="89" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.HashMap.V"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.iterator`</haxe_doc>
	</iterator>
</class></impl>
	</abstract>
	<class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
		<_new public="1" get="inline" set="null" line="35" static="1">
			<f a=""><x path="haxe.ds.HashMap">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</x></f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Creates a new HashMap.</haxe_doc>
		</_new>
		<set public="1" get="inline" set="null" line="42" static="1">
			<f a="this:k:v">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="50" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Null"><c path="haxe.ds.HashMap.V"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="57" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="64" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="72" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.HashMap.K"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<copy public="1" set="method" line="79" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<x path="haxe.ds.HashMap">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<iterator public="1" get="inline" set="null" line="89" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.HashMap.V"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
	</class>
	<class path="haxe.ds._HashMap.HashMapData" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
		<keys public="1"><c path="haxe.ds.IntMap"><c path="haxe.ds._HashMap.HashMapData.K"/></c></keys>
		<values public="1"><c path="haxe.ds.IntMap"><c path="haxe.ds._HashMap.HashMapData.V"/></c></values>
		<new public="1" get="inline" set="null" line="97"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ds.IntMap" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/haxe/ds/IntMap.hx">
		<implements path="haxe.IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<h><x path="hl.types.IntMap"/></h>
		<set public="1" set="method" line="34">
			<f a="key:value">
				<x path="Int"/>
				<c path="haxe.ds.IntMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method" line="38">
			<f a="key">
				<x path="Int"/>
				<x path="Null"><c path="haxe.ds.IntMap.T"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method" line="42">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="46">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="50">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="54">
			<f a=""><t path="Iterator"><c path="haxe.ds.IntMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="58">
			<f a=""><t path="KeyValueIterator">
	<x path="Int"/>
	<c path="haxe.ds.IntMap.T"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method" line="62">
			<f a=""><c path="haxe.ds.IntMap"><c path="haxe.ds.IntMap.T"/></c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method" line="68">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" set="method" line="30">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new IntMap.</haxe_doc>
		</new>
		<haxe_doc>IntMap allows mapping of Int keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.ds.List" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/List.hx">
		<h><c path="haxe.ds._List.ListNode"><c path="haxe.ds.List.T"/></c></h>
		<q><c path="haxe.ds._List.ListNode"><c path="haxe.ds.List.T"/></c></q>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` List.</haxe_doc>
		</length>
		<add public="1" set="method" line="53">
			<f a="item">
				<c path="haxe.ds.List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the end of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</add>
		<push public="1" set="method" line="68">
			<f a="item">
				<c path="haxe.ds.List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the beginning of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<first public="1" set="method" line="81">
			<f a=""><x path="Null"><c path="haxe.ds.List.T"/></x></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		This function does not modify `this` List.</haxe_doc>
		</first>
		<last public="1" set="method" line="90">
			<f a=""><x path="Null"><c path="haxe.ds.List.T"/></x></f>
			<haxe_doc>Returns the last element of `this` List, or null if no elements exist.

		This function does not modify `this` List.</haxe_doc>
		</last>
		<pop public="1" set="method" line="100">
			<f a=""><x path="Null"><c path="haxe.ds.List.T"/></x></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		The element is removed from `this` List.</haxe_doc>
		</pop>
		<isEmpty public="1" set="method" line="114">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if `this` List is empty.</haxe_doc>
		</isEmpty>
		<clear public="1" set="method" line="124">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Empties `this` List.

		This function does not traverse the elements, but simply sets the
		internal references to null and `this.length` to 0.</haxe_doc>
		</clear>
		<remove public="1" set="method" line="138">
			<f a="v">
				<c path="haxe.ds.List.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurrence of `v` in `this` List.

		If `v` is found by checking standard equality, it is removed from `this`
		List and the function returns true.

		Otherwise, false is returned.</haxe_doc>
		</remove>
		<iterator public="1" get="inline" set="null" line="161">
			<f a=""><c path="haxe.ds._List.ListIterator"><c path="haxe.ds.List.T"/></c></f>
			<haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="168">
			<f a=""><c path="haxe.ds._List.ListKeyValueIterator"><c path="haxe.ds.List.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the List indices and values.</haxe_doc>
		</keyValueIterator>
		<toString public="1" set="method" line="178">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` List.

		The result is enclosed in { } with the individual elements being
		separated by a comma.</haxe_doc>
		</toString>
		<join public="1" set="method" line="199">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` List, with `sep` separating
		each element.</haxe_doc>
		</join>
		<filter public="1" set="method" line="218">
			<f a="f">
				<f a="">
					<c path="haxe.ds.List.T"/>
					<x path="Bool"/>
				</f>
				<c path="haxe.ds.List"><c path="haxe.ds.List.T"/></c>
			</f>
			<haxe_doc>Returns a list filtered with `f`. The returned list will contain all
		elements for which `f(x) == true`.</haxe_doc>
		</filter>
		<map public="1" params="X" set="method" line="234">
			<f a="f">
				<f a="">
					<c path="haxe.ds.List.T"/>
					<c path="map.X"/>
				</f>
				<c path="haxe.ds.List"><c path="map.X"/></c>
			</f>
			<haxe_doc>Returns a new list where all elements have been converted by the
		function `f`.</haxe_doc>
		</map>
		<new public="1" set="method" line="44">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of element container objects
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole list content every time.

	@see https://haxe.org/manual/std-List.html</haxe_doc>
	</class>
	<class path="haxe.ds._List.ListNode" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/List.hx" private="1" module="haxe.ds.List">
		<create public="1" params="T" get="inline" set="null" line="267" static="1"><f a="item:next">
	<c path="create.T"/>
	<c path="haxe.ds._List.ListNode"><c path="create.T"/></c>
	<c path="haxe.ds._List.ListNode"><c path="create.T"/></c>
</f></create>
		<item public="1"><c path="haxe.ds._List.ListNode.T"/></item>
		<next public="1"><c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListNode.T"/></c></next>
		<new public="1" set="method" line="263"><f a="item:next">
	<c path="haxe.ds._List.ListNode.T"/>
	<c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListNode.T"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ds._List.ListIterator" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/List.hx" private="1" module="haxe.ds.List">
		<head><c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListIterator.T"/></c></head>
		<hasNext public="1" get="inline" set="null" line="280"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="284"><f a=""><c path="haxe.ds._List.ListIterator.T"/></f></next>
		<new public="1" get="inline" set="null" line="276"><f a="head">
	<c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListIterator.T"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ds._List.ListKeyValueIterator" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/List.hx" private="1" module="haxe.ds.List">
		<idx><x path="Int"/></idx>
		<head><c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListKeyValueIterator.T"/></c></head>
		<hasNext public="1" get="inline" set="null" line="300"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="304"><f a=""><a>
	<value><c path="haxe.ds._List.ListKeyValueIterator.T"/></value>
	<key><x path="Int"/></key>
</a></f></next>
		<new public="1" get="inline" set="null" line="295"><f a="head">
	<c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListKeyValueIterator.T"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ds.ListSort" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/ListSort.hx">
		<sort public="1" params="T" get="inline" set="null" line="43" static="1">
			<f a="list:cmp">
				<c path="sort.T"/>
				<f a=":">
					<c path="sort.T"/>
					<c path="sort.T"/>
					<x path="Int"/>
				</f>
				<c path="sort.T"/>
			</f>
			<haxe_doc><![CDATA[Sorts List `lst` according to the comparison function `cmp`, where
		`cmp(x,y)` returns 0 if `x == y`, a positive Int if `x > y` and a
		negative Int if `x < y`.

		This operation modifies List `a` in place and returns its head once modified.
		The `prev` of the head is set to the tail of the sorted list.

		If `list` or `cmp` are null, the result is unspecified.]]></haxe_doc>
		</sort>
		<sortSingleLinked public="1" params="T" get="inline" set="null" line="100" static="1">
			<f a="list:cmp">
				<c path="sortSingleLinked.T"/>
				<f a=":">
					<c path="sortSingleLinked.T"/>
					<c path="sortSingleLinked.T"/>
					<x path="Int"/>
				</f>
				<c path="sortSingleLinked.T"/>
			</f>
			<haxe_doc>Same as `sort` but on single linked list.</haxe_doc>
		</sortSingleLinked>
		<haxe_doc>ListSort provides a stable implementation of merge sort through its `sort`
	method. It has a O(N.log(N)) complexity and does not require additional memory allocation.</haxe_doc>
	</class>
	<abstract path="haxe.ds.Map" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="haxe.IMap">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `key1 => value1, key2 => value2` syntax.

	Map is an abstract type, it is not available at runtime.

	@see https://haxe.org/manual/std-Map.html]]></haxe_doc>
		<meta><m n=":multiType"><e>@:followWithAbstracts K</e></m></meta>
		<impl><class path="haxe.ds._Map.Map_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map">
	<_new public="1" set="method" static="1">
		<f a=""><x path="haxe.ds.Map">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</x></f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if K is a `String`, `haxe.ds.StringMap` is used
		2. if K is an `Int`, `haxe.ds.IntMap` is used
		3. if K is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if K is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if K is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on ObjectMap by default.</haxe_doc>
	</_new>
	<set public="1" get="inline" set="null" line="75" static="1">
		<f a="this:key:value">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<c path="haxe.ds.Map.V"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Maps `key` to `value`.

		If `key` already has a mapping, the previous value disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
	</set>
	<get public="1" get="inline" set="null" line="92" static="1">
		<f a="this:key">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<x path="Null"><c path="haxe.ds.Map.V"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Returns the current mapping of `key`.

		If no such mapping exists, null is returned.

		Note that a check like `map.get(key) == null` can hold for two reasons:

		1. the map has no mapping for `key`
		2. the map has a mapping with a value of `null`

		If it is important to distinguish these cases, `exists()` should be
		used.

		If `key` is null, the result is unspecified.</haxe_doc>
	</get>
	<exists public="1" get="inline" set="null" line="99" static="1">
		<f a="this:key">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns true if `key` has a mapping, false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="107" static="1">
		<f a="this:key">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Removes the mapping of `key` and returns true if such a mapping existed,
		false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="114" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.Map.K"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an Iterator over the keys of `this` Map.

		The order of keys is undefined.</haxe_doc>
	</keys>
	<iterator public="1" get="inline" set="null" line="123" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.Map.V"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an Iterator over the values of `this` Map.

		The order of values is undefined.</haxe_doc>
	</iterator>
	<keyValueIterator public="1" get="inline" set="null" line="132" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<t path="KeyValueIterator">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an Iterator over the keys and values of `this` Map.

		The order of values is undefined.</haxe_doc>
	</keyValueIterator>
	<copy public="1" get="inline" set="null" line="141" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<x path="haxe.ds.Map">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a shallow copy of `this` map.

		The order of values is undefined.</haxe_doc>
	</copy>
	<toString public="1" get="inline" set="null" line="150" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a String representation of `this` Map.

		The exact representation depends on the platform and key-type.</haxe_doc>
	</toString>
	<arrayWrite public="1" get="inline" set="null" line="154" static="1">
		<f a="this:k:v">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<c path="haxe.ds.Map.V"/>
			<c path="haxe.ds.Map.V"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
			<m n=":noCompletion"/>
		</meta>
	</arrayWrite>
	<toStringMap params="K:V" get="inline" set="null" line="159" static="1">
		<f a="t">
			<c path="haxe.IMap">
				<c path="toStringMap.K"/>
				<c path="toStringMap.V"/>
			</c>
			<c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toStringMap>
	<toIntMap params="K:V" get="inline" set="null" line="163" static="1">
		<f a="t">
			<c path="haxe.IMap">
				<c path="toIntMap.K"/>
				<c path="toIntMap.V"/>
			</c>
			<c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toIntMap>
	<toEnumValueMapMap params="K:V" get="inline" set="null" line="167" static="1">
		<f a="t">
			<c path="haxe.IMap">
				<c path="toEnumValueMapMap.K"/>
				<c path="toEnumValueMapMap.V"/>
			</c>
			<c path="haxe.ds.EnumValueMap">
				<c path="toEnumValueMapMap.K"/>
				<c path="toEnumValueMapMap.V"/>
			</c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toEnumValueMapMap>
	<toObjectMap params="K:V" get="inline" set="null" line="171" static="1">
		<f a="t">
			<c path="haxe.IMap">
				<c path="toObjectMap.K"/>
				<c path="toObjectMap.V"/>
			</c>
			<c path="haxe.ds.ObjectMap">
				<c path="toObjectMap.K"/>
				<c path="toObjectMap.V"/>
			</c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toObjectMap>
	<fromStringMap params="V" get="inline" set="null" line="175" static="1">
		<f a="map">
			<c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c>
			<x path="haxe.ds.Map">
				<c path="String"/>
				<c path="fromStringMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromStringMap>
	<fromIntMap params="V" get="inline" set="null" line="179" static="1">
		<f a="map">
			<c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c>
			<x path="haxe.ds.Map">
				<x path="Int"/>
				<c path="fromIntMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromIntMap>
	<fromObjectMap params="K:V" get="inline" set="null" line="183" static="1">
		<f a="map">
			<c path="haxe.ds.ObjectMap">
				<c path="fromObjectMap.K"/>
				<c path="fromObjectMap.V"/>
			</c>
			<x path="haxe.ds.Map">
				<c path="fromObjectMap.K"/>
				<c path="fromObjectMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromObjectMap>
</class></impl>
	</abstract>
	<class path="haxe.ds._Map.Map_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map">
		<_new public="1" set="method" static="1">
			<f a=""><x path="haxe.ds.Map">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</x></f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if K is a `String`, `haxe.ds.StringMap` is used
		2. if K is an `Int`, `haxe.ds.IntMap` is used
		3. if K is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if K is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if K is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on ObjectMap by default.</haxe_doc>
		</_new>
		<set public="1" get="inline" set="null" line="75" static="1">
			<f a="this:key:value">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Maps `key` to `value`.

		If `key` already has a mapping, the previous value disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="92" static="1">
			<f a="this:key">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<x path="Null"><c path="haxe.ds.Map.V"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Returns the current mapping of `key`.

		If no such mapping exists, null is returned.

		Note that a check like `map.get(key) == null` can hold for two reasons:

		1. the map has no mapping for `key`
		2. the map has a mapping with a value of `null`

		If it is important to distinguish these cases, `exists()` should be
		used.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="99" static="1">
			<f a="this:key">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns true if `key` has a mapping, false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="107" static="1">
			<f a="this:key">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Removes the mapping of `key` and returns true if such a mapping existed,
		false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="114" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.Map.K"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an Iterator over the keys of `this` Map.

		The order of keys is undefined.</haxe_doc>
		</keys>
		<iterator public="1" get="inline" set="null" line="123" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.Map.V"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an Iterator over the values of `this` Map.

		The order of values is undefined.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="132" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<t path="KeyValueIterator">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an Iterator over the keys and values of `this` Map.

		The order of values is undefined.</haxe_doc>
		</keyValueIterator>
		<copy public="1" get="inline" set="null" line="141" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<x path="haxe.ds.Map">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a shallow copy of `this` map.

		The order of values is undefined.</haxe_doc>
		</copy>
		<toString public="1" get="inline" set="null" line="150" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a String representation of `this` Map.

		The exact representation depends on the platform and key-type.</haxe_doc>
		</toString>
		<arrayWrite public="1" get="inline" set="null" line="154" static="1">
			<f a="this:k:v">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
				<c path="haxe.ds.Map.V"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
				<m n=":noCompletion"/>
			</meta>
		</arrayWrite>
		<toStringMap params="K:V" get="inline" set="null" line="159" static="1">
			<f a="t">
				<c path="haxe.IMap">
					<c path="toStringMap.K"/>
					<c path="toStringMap.V"/>
				</c>
				<c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toStringMap>
		<toIntMap params="K:V" get="inline" set="null" line="163" static="1">
			<f a="t">
				<c path="haxe.IMap">
					<c path="toIntMap.K"/>
					<c path="toIntMap.V"/>
				</c>
				<c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toIntMap>
		<toEnumValueMapMap params="K:V" get="inline" set="null" line="167" static="1">
			<f a="t">
				<c path="haxe.IMap">
					<c path="toEnumValueMapMap.K"/>
					<c path="toEnumValueMapMap.V"/>
				</c>
				<c path="haxe.ds.EnumValueMap">
					<c path="toEnumValueMapMap.K"/>
					<c path="toEnumValueMapMap.V"/>
				</c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toEnumValueMapMap>
		<toObjectMap params="K:V" get="inline" set="null" line="171" static="1">
			<f a="t">
				<c path="haxe.IMap">
					<c path="toObjectMap.K"/>
					<c path="toObjectMap.V"/>
				</c>
				<c path="haxe.ds.ObjectMap">
					<c path="toObjectMap.K"/>
					<c path="toObjectMap.V"/>
				</c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toObjectMap>
		<fromStringMap params="V" get="inline" set="null" line="175" static="1">
			<f a="map">
				<c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c>
				<x path="haxe.ds.Map">
					<c path="String"/>
					<c path="fromStringMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromStringMap>
		<fromIntMap params="V" get="inline" set="null" line="179" static="1">
			<f a="map">
				<c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c>
				<x path="haxe.ds.Map">
					<x path="Int"/>
					<c path="fromIntMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromIntMap>
		<fromObjectMap params="K:V" get="inline" set="null" line="183" static="1">
			<f a="map">
				<c path="haxe.ds.ObjectMap">
					<c path="fromObjectMap.K"/>
					<c path="fromObjectMap.V"/>
				</c>
				<x path="haxe.ds.Map">
					<c path="fromObjectMap.K"/>
					<c path="fromObjectMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromObjectMap>
	</class>
	<class path="haxe.ds.ObjectMap" params="K:T" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/haxe/ds/ObjectMap.hx">
		<implements path="haxe.IMap">
			<c path="haxe.ds.ObjectMap.K"/>
			<c path="haxe.ds.ObjectMap.T"/>
		</implements>
		<h><x path="hl.types.ObjectMap"/></h>
		<set public="1" set="method" line="34">
			<f a="key:value">
				<c path="haxe.ds.ObjectMap.K"/>
				<c path="haxe.ds.ObjectMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method" line="38">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Null"><c path="haxe.ds.ObjectMap.T"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method" line="42">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="46">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="50">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.K"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="54">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="58">
			<f a=""><t path="KeyValueIterator">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.T"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method" line="62">
			<f a=""><c path="haxe.ds.ObjectMap">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.T"/>
</c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method" line="68">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" set="method" line="30">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new ObjectMap.</haxe_doc>
		</new>
		<haxe_doc>ObjectMap allows mapping of object keys to arbitrary values.

	On static targets, the keys are considered to be strong references. Refer
	to `haxe.ds.WeakMap` for a weak reference version.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<enum path="haxe.ds.Option" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/Option.hx">
		<Some a="v"><c path="haxe.ds.Option.T"/></Some>
		<None/>
		<haxe_doc>An Option is a wrapper type which can either have a value (Some) or not a
	value (None).

	@see https://haxe.org/manual/std-Option.html</haxe_doc>
	</enum>
	<abstract path="haxe.ds.ReadOnlyArray" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/ReadOnlyArray.hx">
		<from><icast><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></this>
		<haxe_doc>ReadOnlyArray is an abstract over an ordinary Array but only exposes
 API's that don't modify the Array instance, hence read-only.
 Notice that this doesn't necessarily mean that the instance is immutable.
 Because other code holding the reference as ordinary Array can still modify it.</haxe_doc>
		<meta><m n=":forward">
	<e>concat</e>
	<e>copy</e>
	<e>filter</e>
	<e>indexOf</e>
	<e>iterator</e>
	<e>join</e>
	<e>lastIndexOf</e>
	<e>map</e>
	<e>slice</e>
	<e>toString</e>
</m></meta>
		<impl><class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<get_length get="inline" set="null" line="34" static="1">
		<f a="this">
			<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get get="inline" set="null" line="35" static="1">
		<f a="this:i">
			<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
			<x path="Int"/>
			<c path="haxe.ds.ReadOnlyArray.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
</class></impl>
	</abstract>
	<class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray">
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<get_length get="inline" set="null" line="34" static="1">
			<f a="this">
				<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get get="inline" set="null" line="35" static="1">
			<f a="this:i">
				<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
				<x path="Int"/>
				<c path="haxe.ds.ReadOnlyArray.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
	</class>
	<class path="haxe.ds._StringMap.StringMapKeysIterator" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/haxe/ds/StringMap.hx" private="1" module="haxe.ds.StringMap">
		<arr><x path="hl.NativeArray"><x path="hl.Bytes"/></x></arr>
		<pos><x path="Int"/></pos>
		<length><x path="Int"/></length>
		<hasNext public="1" get="inline" set="null" line="36"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="40"><f a=""><c path="String"/></f></next>
		<new public="1" get="inline" set="null" line="30"><f a="h">
	<x path="hl.types.BytesMap"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ds.StringMap" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/haxe/ds/StringMap.hx">
		<implements path="haxe.IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<h><x path="hl.types.BytesMap"/></h>
		<set public="1" set="method" line="56">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method" line="60">
			<f a="key">
				<c path="String"/>
				<x path="Null"><c path="haxe.ds.StringMap.T"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method" line="65">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="70">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="75">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="79">
			<f a=""><t path="Iterator"><c path="haxe.ds.StringMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="83">
			<f a=""><t path="KeyValueIterator">
	<c path="String"/>
	<c path="haxe.ds.StringMap.T"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method" line="87">
			<f a=""><c path="haxe.ds.StringMap"><c path="haxe.ds.StringMap.T"/></c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method" line="93">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" set="method" line="52">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<typedef path="haxe.ds._Vector.VectorData" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector"><c path="Array"><c path="haxe.ds._Vector.VectorData.T"/></c></typedef>
	<abstract path="haxe.ds.Vector" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/haxe/ds/Vector.hx">
		<this><t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t></this>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe.ds._Vector.Vector_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector">
	<_new public="1" get="inline" set="null" line="29" static="1">
		<f a="length">
			<x path="Int"/>
			<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Creates a new Vector of length `length`.

		Initially `this` Vector contains `length` neutral elements:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
	</_new>
	<get public="1" get="inline" set="null" line="34" static="1">
		<f a="this:index">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
			<c path="haxe.ds.Vector.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
		<haxe_doc>Returns the value at index `index`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
	</get>
	<set public="1" get="inline" set="null" line="38" static="1">
		<f a="this:index:val">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
			<c path="haxe.ds.Vector.T"/>
			<c path="haxe.ds.Vector.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
		<haxe_doc>Sets the value at index `index` to `val`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
	</set>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the length of `this` Vector.</haxe_doc>
	</length>
	<get_length get="inline" set="null" line="44" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<blit public="1" params="T" get="inline" set="null" line="48" static="1">
		<f a="src:srcPos:dest:destPos:len">
			<x path="haxe.ds.Vector"><c path="blit.T"/></x>
			<x path="Int"/>
			<x path="haxe.ds.Vector"><c path="blit.T"/></x>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Copies `length` of elements from `src` Vector, beginning at `srcPos` to
		`dest` Vector, beginning at `destPos`

		The results are unspecified if `length` results in out-of-bounds access,
		or if `src` or `dest` are null</haxe_doc>
	</blit>
	<toArray public="1" get="inline" set="null" line="52" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<c path="Array"><c path="haxe.ds.Vector.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Array, copy the content from the Vector to it, and returns it.</haxe_doc>
	</toArray>
	<toData public="1" get="inline" set="null" line="56" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Extracts the data of `this` Vector.

		This returns the internal representation type.</haxe_doc>
	</toData>
	<fromData public="1" params="T" get="inline" set="null" line="59" static="1">
		<f a="data">
			<t path="haxe.ds._Vector.VectorData"><c path="fromData.T"/></t>
			<x path="haxe.ds.Vector"><c path="fromData.T"/></x>
		</f>
		<haxe_doc>Initializes a new Vector from `data`.

		Since `data` is the internal representation of Vector, this is a no-op.

		If `data` is null, the corresponding Vector is also `null`.</haxe_doc>
	</fromData>
	<fromArrayCopy public="1" params="T" get="inline" set="null" line="62" static="1">
		<f a="array">
			<c path="Array"><c path="fromArrayCopy.T"/></c>
			<x path="haxe.ds.Vector"><c path="fromArrayCopy.T"/></x>
		</f>
		<haxe_doc>Creates a new Vector by copying the elements of `array`.

		This always creates a copy, even on platforms where the internal
		representation is Array.

		The elements are not copied and retain their identity, so
		`a[i] == Vector.fromArrayCopy(a).get(i)` is true for any valid i.

		If `array` is null, the result is unspecified.</haxe_doc>
	</fromArrayCopy>
	<copy public="1" params="T" get="inline" set="null" line="66" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="copy.T"/></t>
			<x path="haxe.ds.Vector"><c path="copy.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a shallow copy of `this` Vector.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
	</copy>
	<join public="1" params="T" get="inline" set="null" line="70" static="1">
		<f a="this:sep">
			<t path="haxe.ds._Vector.VectorData"><c path="join.T"/></t>
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a string representation of `this` Vector, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` Vector has length 0, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
	</join>
	<sort public="1" params="T" get="inline" set="null" line="74" static="1">
		<f a="this:f">
			<t path="haxe.ds._Vector.VectorData"><c path="sort.T"/></t>
			<f a=":">
				<c path="sort.T"/>
				<c path="sort.T"/>
				<x path="Int"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Sorts `this` Vector according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Vector in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained.

		If `f` is null, the result is unspecified.]]></haxe_doc>
	</sort>
	<map public="1" params="S" get="inline" set="null" line="78" static="1">
		<f a="this:f">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<f a="">
				<c path="haxe.ds.Vector.T"/>
				<c path="map.S"/>
			</f>
			<x path="haxe.ds.Vector"><c path="map.S"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Vector by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
	</map>
	<meta><m n=":coreApi"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.ds._Vector.Vector_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector">
		<_new public="1" get="inline" set="null" line="29" static="1">
			<f a="length">
				<x path="Int"/>
				<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Creates a new Vector of length `length`.

		Initially `this` Vector contains `length` neutral elements:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
		</_new>
		<get public="1" get="inline" set="null" line="34" static="1">
			<f a="this:index">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
				<c path="haxe.ds.Vector.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
			<haxe_doc>Returns the value at index `index`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="38" static="1">
			<f a="this:index:val">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
				<c path="haxe.ds.Vector.T"/>
				<c path="haxe.ds.Vector.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
			<haxe_doc>Sets the value at index `index` to `val`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
		</set>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the length of `this` Vector.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="44" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<blit public="1" params="T" get="inline" set="null" line="48" static="1">
			<f a="src:srcPos:dest:destPos:len">
				<x path="haxe.ds.Vector"><c path="blit.T"/></x>
				<x path="Int"/>
				<x path="haxe.ds.Vector"><c path="blit.T"/></x>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies `length` of elements from `src` Vector, beginning at `srcPos` to
		`dest` Vector, beginning at `destPos`

		The results are unspecified if `length` results in out-of-bounds access,
		or if `src` or `dest` are null</haxe_doc>
		</blit>
		<toArray public="1" get="inline" set="null" line="52" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<c path="Array"><c path="haxe.ds.Vector.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Array, copy the content from the Vector to it, and returns it.</haxe_doc>
		</toArray>
		<toData public="1" get="inline" set="null" line="56" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Extracts the data of `this` Vector.

		This returns the internal representation type.</haxe_doc>
		</toData>
		<fromData public="1" params="T" get="inline" set="null" line="59" static="1">
			<f a="data">
				<t path="haxe.ds._Vector.VectorData"><c path="fromData.T"/></t>
				<x path="haxe.ds.Vector"><c path="fromData.T"/></x>
			</f>
			<haxe_doc>Initializes a new Vector from `data`.

		Since `data` is the internal representation of Vector, this is a no-op.

		If `data` is null, the corresponding Vector is also `null`.</haxe_doc>
		</fromData>
		<fromArrayCopy public="1" params="T" get="inline" set="null" line="62" static="1">
			<f a="array">
				<c path="Array"><c path="fromArrayCopy.T"/></c>
				<x path="haxe.ds.Vector"><c path="fromArrayCopy.T"/></x>
			</f>
			<haxe_doc>Creates a new Vector by copying the elements of `array`.

		This always creates a copy, even on platforms where the internal
		representation is Array.

		The elements are not copied and retain their identity, so
		`a[i] == Vector.fromArrayCopy(a).get(i)` is true for any valid i.

		If `array` is null, the result is unspecified.</haxe_doc>
		</fromArrayCopy>
		<copy public="1" params="T" get="inline" set="null" line="66" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="copy.T"/></t>
				<x path="haxe.ds.Vector"><c path="copy.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a shallow copy of `this` Vector.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<join public="1" params="T" get="inline" set="null" line="70" static="1">
			<f a="this:sep">
				<t path="haxe.ds._Vector.VectorData"><c path="join.T"/></t>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a string representation of `this` Vector, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` Vector has length 0, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<sort public="1" params="T" get="inline" set="null" line="74" static="1">
			<f a="this:f">
				<t path="haxe.ds._Vector.VectorData"><c path="sort.T"/></t>
				<f a=":">
					<c path="sort.T"/>
					<c path="sort.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Sorts `this` Vector according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Vector in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<map public="1" params="S" get="inline" set="null" line="78" static="1">
			<f a="this:f">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<f a="">
					<c path="haxe.ds.Vector.T"/>
					<c path="map.S"/>
				</f>
				<x path="haxe.ds.Vector"><c path="map.S"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Vector by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.ds.WeakMap" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/WeakMap.hx">
		<implements path="haxe.IMap">
			<c path="haxe.ds.WeakMap.K"/>
			<c path="haxe.ds.WeakMap.V"/>
		</implements>
		<set public="1" set="method" line="46">
			<f a="key:value">
				<c path="haxe.ds.WeakMap.K"/>
				<c path="haxe.ds.WeakMap.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method" line="52">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Null"><c path="haxe.ds.WeakMap.V"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method" line="59">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="66">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="73">
			<f a=""><t path="Iterator"><c path="haxe.ds.WeakMap.K"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="80">
			<f a=""><t path="Iterator"><c path="haxe.ds.WeakMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="87">
			<f a=""><t path="KeyValueIterator">
	<c path="haxe.ds.WeakMap.K"/>
	<c path="haxe.ds.WeakMap.V"/>
</t></f>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method" line="94">
			<f a=""><c path="haxe.ds.WeakMap">
	<c path="haxe.ds.WeakMap.K"/>
	<c path="haxe.ds.WeakMap.V"/>
</c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method" line="101">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" set="method" line="39">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new WeakMap.</haxe_doc>
		</new>
		<haxe_doc>WeakMap allows mapping of object keys to arbitrary values.

	The keys are considered to be weak references on static targets.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
	</class>
	<abstract path="haxe.extern.AsVar" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/extern/AsVar.hx">
		<from><icast><c path="haxe.extern.AsVar.T"/></icast></from>
		<this><c path="haxe.extern.AsVar.T"/></this>
		<to><icast><c path="haxe.extern.AsVar.T"/></icast></to>
		<haxe_doc>If this type is used as an argument type, the compiler ensures that
	argument expressions are bound to a local variable.</haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":semantics"><e>variable</e></m>
		</meta>
		<impl><class path="haxe.extern._AsVar.AsVar_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/extern/AsVar.hx" private="1" module="haxe.extern.AsVar" extern="1"/></impl>
	</abstract>
	<class path="haxe.extern._AsVar.AsVar_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/extern/AsVar.hx" private="1" module="haxe.extern.AsVar" extern="1"/>
	<abstract path="haxe.extern.EitherType" params="T1:T2" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/extern/EitherType.hx">
		<from>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
		</from>
		<this><d/></this>
		<to>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
		</to>
		<haxe_doc><![CDATA[An abstract type allowing values to be either of `T1` or `T2` type.
	Supports implicit casts from/to either types.

	It is useful for interfacing with external code on dynamic platforms
	such as JavaScript or Python.

	Otherwise, use of this type is discouraged.
	
	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<impl><class path="haxe.extern._EitherType.EitherType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/extern/EitherType.hx" private="1" module="haxe.extern.EitherType" extern="1"/></impl>
	</abstract>
	<class path="haxe.extern._EitherType.EitherType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/extern/EitherType.hx" private="1" module="haxe.extern.EitherType" extern="1"/>
	<abstract path="haxe.extern.Rest" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/extern/Rest.hx">
		<this><c path="Array"><c path="haxe.extern.Rest.T"/></c></this>
		<haxe_doc><![CDATA[A special abstract type that represents "rest" function argument.

	Should be used as a type for the last argument of an extern method,
	representing that arbitrary number of arguments of given type can be
	passed to that method.
	
	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<impl><class path="haxe.extern._Rest.Rest_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/extern/Rest.hx" private="1" module="haxe.extern.Rest" extern="1"/></impl>
	</abstract>
	<class path="haxe.extern._Rest.Rest_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/extern/Rest.hx" private="1" module="haxe.extern.Rest" extern="1"/>
	<class path="haxe.format.JsonParser" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/format/JsonParser.hx">
		<parse public="1" get="inline" set="null" line="44" static="1">
			<f a="str">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Parses given JSON-encoded `str` and returns the resulting object.

		JSON objects are parsed into anonymous structures and JSON arrays
		are parsed into `Array<Dynamic>`.

		If given `str` is not valid JSON, an exception will be thrown.

		If `str` is null, the result is unspecified.]]></haxe_doc>
		</parse>
		<str><c path="String"/></str>
		<pos><x path="Int"/></pos>
		<doParse set="method" line="56"><f a=""><d/></f></doParse>
		<parseRec set="method" line="70"><f a=""><d/></f></parseRec>
		<parseString set="method" line="152"><f a=""><c path="String"/></f></parseString>
		<parseNumber get="inline" set="null" line="221"><f a="c">
	<x path="Int"/>
	<d/>
</f></parseNumber>
		<nextChar get="inline" set="null" line="260"><f a=""><x path="Int"/></f></nextChar>
		<invalidChar set="method" line="264"><f a=""><x path="Void"/></f></invalidChar>
		<invalidNumber set="method" line="269"><f a="start">
	<x path="Int"/>
	<x path="Void"/>
</f></invalidNumber>
		<new set="method" line="51"><f a="str">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An implementation of JSON parser in Haxe.

	This class is used by `haxe.Json` when native JSON implementation
	is not available.

	@see https://haxe.org/manual/std-Json-parsing.html</haxe_doc>
	</class>
	<class path="haxe.format.JsonPrinter" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/format/JsonPrinter.hx">
		<print public="1" set="method" line="44" static="1">
			<f a="o:?replacer:?space">
				<d/>
				<f a="key:value">
					<d/>
					<d/>
					<d/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `o`'s value and returns the resulting JSON string.

		If `replacer` is given and is not null, it is used to retrieve
		actual object to be encoded. The `replacer` function takes two parameters,
		the key and the value being encoded. Initial key value is an empty string.

		If `space` is given and is not null, the result will be pretty-printed.
		Successive levels will be indented by this string.</haxe_doc>
		</print>
		<buf><c path="StringBuf"/></buf>
		<replacer><f a="key:value">
	<d/>
	<d/>
	<d/>
</f></replacer>
		<indent><c path="String"/></indent>
		<pretty><x path="Bool"/></pretty>
		<nind><x path="Int"/></nind>
		<ipad get="inline" set="null" line="71"><f a=""><x path="Void"/></f></ipad>
		<newl get="inline" set="null" line="75"><f a=""><x path="Void"/></f></newl>
		<write set="method" line="79"><f a="k:v">
	<d/>
	<d/>
	<x path="Void"/>
</f></write>
		<addChar get="inline" set="null" line="136"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></addChar>
		<add get="inline" set="null" line="144"><f a="v">
	<c path="String"/>
	<x path="Void"/>
</f></add>
		<classString set="method" line="153"><f a="v">
	<d/>
	<x path="Void"/>
</f></classString>
		<objString get="inline" set="null" line="157"><f a="v">
	<d/>
	<x path="Void"/>
</f></objString>
		<fieldsString set="method" line="161"><f a="v:fields">
	<d/>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></fieldsString>
		<quote set="method" line="187"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></quote>
		<new set="method" line="56"><f a="replacer:space">
	<f a="key:value">
		<d/>
		<d/>
		<d/>
	</f>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An implementation of JSON printer in Haxe.

	This class is used by `haxe.Json` when native JSON implementation
	is not available.

	@see https://haxe.org/manual/std-Json-encoding.html</haxe_doc>
	</class>
	<typedef path="haxe.http._HttpBase.StringKeyValue" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/http/HttpBase.hx" private="1" module="haxe.http.HttpBase"><a>
	<value><c path="String"/></value>
	<name><c path="String"/></name>
</a></typedef>
	<class path="haxe.http.HttpBase" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/http/HttpBase.hx">
		<url public="1">
			<c path="String"/>
			<haxe_doc>The url of `this` request. It is used only by the `request()` method and
		can be changed in order to send the same request to different target
		Urls.</haxe_doc>
		</url>
		<responseData public="1" set="null"><x path="Null"><c path="String"/></x></responseData>
		<postData><c path="String"/></postData>
		<headers><c path="Array"><t path="haxe.http._HttpBase.StringKeyValue"/></c></headers>
		<params><c path="Array"><t path="haxe.http._HttpBase.StringKeyValue"/></c></params>
		<setHeader public="1" set="method" line="75">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the header identified as `header` to value `value`.

		If `header` or `value` are null, the result is unspecified.

		This method provides a fluent interface.</haxe_doc>
		</setHeader>
		<addHeader public="1" set="method" line="86"><f a="header:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></addHeader>
		<setParameter public="1" set="method" line="98">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the parameter identified as `param` to value `value`.

		If `header` or `value` are null, the result is unspecified.

		This method provides a fluent interface.</haxe_doc>
		</setParameter>
		<addParameter public="1" set="method" line="109"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></addParameter>
		<setPostData public="1" set="method" line="124">
			<f a="data">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the post data of `this` Http request to `data`.

		There can only be one post data per request. Subsequent calls overwrite
		the previously set value.

		If `data` is null, the post data is considered to be absent.

		This method provides a fluent interface.</haxe_doc>
		</setPostData>
		<request public="1" set="method" line="146">
			<f a="?post">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sends `this` Http request to the Url specified by `this.url`.

		If `post` is true, the request is sent as POST request, otherwise it is
		sent as GET request.

		Depending on the outcome of the request, this method calls the
		`onStatus()`, `onError()` or `onData()` callback functions.

		If `this.url` is null, the result is unspecified.

		If `this.url` is an invalid or inaccessible Url, the `onError()` callback
		function is called.

		[js] If `this.async` is false, the callback functions are called before
		this method returns.</haxe_doc>
		</request>
		<onData public="1" set="dynamic" line="158">
			<f a="data">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a successful request, with `data` containing
		the result String.

		The intended usage is to bind it to a custom function:
		`httpInstance.onData = function(data) { // handle result }`</haxe_doc>
		</onData>
		<onError public="1" set="dynamic" line="168">
			<f a="msg">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a request error, with `msg` containing the
		error description.

		The intended usage is to bind it to a custom function:
		`httpInstance.onError = function(msg) { // handle error }`</haxe_doc>
		</onError>
		<onStatus public="1" set="dynamic" line="178">
			<f a="status">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a Http status change, with `status` being the
		new status.

		The intended usage is to bind it to a custom function:
		`httpInstance.onStatus = function(status) { // handle status }`</haxe_doc>
		</onStatus>
		<new public="1" set="method" line="62">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Http instance with `url` as parameter.

		This does not do a request until `request()` is called.

		If `url` is null, the field url must be set to a value before making the
		call to `request()`, or the result is unspecified.

		(Php) Https (SSL) connections are allowed only if the OpenSSL extension
		is enabled.</haxe_doc>
		</new>
		<haxe_doc>This class can be used to handle Http requests consistently across
	platforms. There are two intended usages:

	- call `haxe.Http.requestUrl(url)` and receive the result as a `String`
	(not available on flash)
	- create a `new haxe.Http(url)`, register your callbacks for `onData`,
	`onError` and `onStatus`, then call `request()`.</haxe_doc>
	</class>
	<abstract path="haxe.http.HttpMethod" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/http/HttpMethod.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>HTTP defines methods (sometimes referred to as verbs) to indicate the desired action to be performed on the identified resource. What this resource represents, whether pre-existing data or data that is generated dynamically, depends on the implementation of the server. Often, the resource corresponds to a file or the output of an executable residing on the server. The HTTP/1.0 specification[11] defined the GET, POST and HEAD methods and the HTTP/1.1 specification[12] added 5 new methods: OPTIONS, PUT, DELETE, TRACE and CONNECT. By being specified in these documents their semantics are well known and can be depended upon. Any client can use any method and the server can be configured to support any combination of methods. If a method is unknown to an intermediate it will be treated as an unsafe and non-idempotent method. There is no limit to the number of methods that can be defined and this allows for future methods to be specified without breaking existing infrastructure.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.http._HttpMethod.HttpMethod_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/http/HttpMethod.hx" private="1" module="haxe.http.HttpMethod" extern="1">
	<Post public="1" get="inline" set="null" expr="cast &quot;POST&quot;" line="10" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "POST"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The POST method requests that the server accept the entity enclosed in the request as a new subordinate of the web resource identified by the URI. The data POSTed might be, for example, an annotation for existing resources; a message for a bulletin board, newsgroup, mailing list, or comment thread; a block of data that is the result of submitting a web form to a data-handling process; or an item to add to a database</haxe_doc>
	</Post>
	<Get public="1" get="inline" set="null" expr="cast &quot;GET&quot;" line="15" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "GET"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The GET method requests a representation of the specified resource. Requests using GET should only retrieve data and should have no other effect. (This is also true of some other HTTP methods.)[1] The W3C has published guidance principles on this distinction, saying, "Web application design should be informed by the above principles, but also by the relevant limitations."[13] See safe methods below.</haxe_doc>
	</Get>
	<Head public="1" get="inline" set="null" expr="cast &quot;HEAD&quot;" line="20" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "HEAD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The HEAD method asks for a response identical to that of a GET request, but without the response body. This is useful for retrieving meta-information written in response headers, without having to transport the entire content.</haxe_doc>
	</Head>
	<Put public="1" get="inline" set="null" expr="cast &quot;PUT&quot;" line="25" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "PUT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The PUT method requests that the enclosed entity be stored under the supplied URI. If the URI refers to an already existing resource, it is modified; if the URI does not point to an existing resource, then the server can create the resource with that URI</haxe_doc>
	</Put>
	<Delete public="1" get="inline" set="null" expr="cast &quot;DELETE&quot;" line="30" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "DELETE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The DELETE method deletes the specified resource.</haxe_doc>
	</Delete>
	<Trace public="1" get="inline" set="null" expr="cast &quot;TRACE&quot;" line="35" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "TRACE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The TRACE method echoes the received request so that a client can see what (if any) changes or additions have been made by intermediate servers</haxe_doc>
	</Trace>
	<Options public="1" get="inline" set="null" expr="cast &quot;OPTIONS&quot;" line="40" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "OPTIONS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The OPTIONS method returns the HTTP methods that the server supports for the specified URL. This can be used to check the functionality of a web server by requesting '*' instead of a specific resource.</haxe_doc>
	</Options>
	<Connect public="1" get="inline" set="null" expr="cast &quot;CONNECT&quot;" line="45" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "CONNECT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The CONNECT method converts the request connection to a transparent TCP/IP tunnel, usually to facilitate SSL-encrypted communication (HTTPS) through an unencrypted HTTP proxy.</haxe_doc>
	</Connect>
	<Patch public="1" get="inline" set="null" expr="cast &quot;PATCH&quot;" line="50" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "PATCH"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The PATCH method applies partial modifications to a resource.</haxe_doc>
	</Patch>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.http._HttpMethod.HttpMethod_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/http/HttpMethod.hx" private="1" module="haxe.http.HttpMethod" extern="1">
		<Post public="1" get="inline" set="null" expr="cast &quot;POST&quot;" line="10" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "POST"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The POST method requests that the server accept the entity enclosed in the request as a new subordinate of the web resource identified by the URI. The data POSTed might be, for example, an annotation for existing resources; a message for a bulletin board, newsgroup, mailing list, or comment thread; a block of data that is the result of submitting a web form to a data-handling process; or an item to add to a database</haxe_doc>
		</Post>
		<Get public="1" get="inline" set="null" expr="cast &quot;GET&quot;" line="15" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "GET"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The GET method requests a representation of the specified resource. Requests using GET should only retrieve data and should have no other effect. (This is also true of some other HTTP methods.)[1] The W3C has published guidance principles on this distinction, saying, "Web application design should be informed by the above principles, but also by the relevant limitations."[13] See safe methods below.</haxe_doc>
		</Get>
		<Head public="1" get="inline" set="null" expr="cast &quot;HEAD&quot;" line="20" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "HEAD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The HEAD method asks for a response identical to that of a GET request, but without the response body. This is useful for retrieving meta-information written in response headers, without having to transport the entire content.</haxe_doc>
		</Head>
		<Put public="1" get="inline" set="null" expr="cast &quot;PUT&quot;" line="25" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "PUT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The PUT method requests that the enclosed entity be stored under the supplied URI. If the URI refers to an already existing resource, it is modified; if the URI does not point to an existing resource, then the server can create the resource with that URI</haxe_doc>
		</Put>
		<Delete public="1" get="inline" set="null" expr="cast &quot;DELETE&quot;" line="30" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "DELETE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The DELETE method deletes the specified resource.</haxe_doc>
		</Delete>
		<Trace public="1" get="inline" set="null" expr="cast &quot;TRACE&quot;" line="35" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "TRACE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The TRACE method echoes the received request so that a client can see what (if any) changes or additions have been made by intermediate servers</haxe_doc>
		</Trace>
		<Options public="1" get="inline" set="null" expr="cast &quot;OPTIONS&quot;" line="40" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "OPTIONS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The OPTIONS method returns the HTTP methods that the server supports for the specified URL. This can be used to check the functionality of a web server by requesting '*' instead of a specific resource.</haxe_doc>
		</Options>
		<Connect public="1" get="inline" set="null" expr="cast &quot;CONNECT&quot;" line="45" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "CONNECT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The CONNECT method converts the request connection to a transparent TCP/IP tunnel, usually to facilitate SSL-encrypted communication (HTTPS) through an unencrypted HTTP proxy.</haxe_doc>
		</Connect>
		<Patch public="1" get="inline" set="null" expr="cast &quot;PATCH&quot;" line="50" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "PATCH"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The PATCH method applies partial modifications to a resource.</haxe_doc>
		</Patch>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.http.HttpStatus" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/http/HttpStatus.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>HTTP Request Status</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.http._HttpStatus.HttpStatus_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/http/HttpStatus.hx" private="1" module="haxe.http.HttpStatus" extern="1">
	<Continue public="1" get="inline" set="null" expr="cast 100" line="7" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 100</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Continue>
	<SwitchingProtocols public="1" get="inline" set="null" expr="cast 101" line="8" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 101</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SwitchingProtocols>
	<Processing public="1" get="inline" set="null" expr="cast 102" line="9" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 102</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Processing>
	<OK public="1" get="inline" set="null" expr="cast 200" line="10" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 200</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OK>
	<Created public="1" get="inline" set="null" expr="cast 201" line="11" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 201</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Created>
	<Accepted public="1" get="inline" set="null" expr="cast 202" line="12" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 202</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Accepted>
	<NonAuthoritativeInformation public="1" get="inline" set="null" expr="cast 203" line="13" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 203</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NonAuthoritativeInformation>
	<NoContent public="1" get="inline" set="null" expr="cast 204" line="14" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 204</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NoContent>
	<ResetContent public="1" get="inline" set="null" expr="cast 205" line="15" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 205</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ResetContent>
	<PartialContent public="1" get="inline" set="null" expr="cast 206" line="16" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 206</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PartialContent>
	<MultiStatus public="1" get="inline" set="null" expr="cast 207" line="17" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 207</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MultiStatus>
	<AlreadyReported public="1" get="inline" set="null" expr="cast 208" line="18" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 208</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AlreadyReported>
	<IMUsed public="1" get="inline" set="null" expr="cast 226" line="19" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 226</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IMUsed>
	<MultipleChoices public="1" get="inline" set="null" expr="cast 300" line="20" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 300</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MultipleChoices>
	<MovedPermanently public="1" get="inline" set="null" expr="cast 301" line="21" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 301</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MovedPermanently>
	<Found public="1" get="inline" set="null" expr="cast 302" line="22" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 302</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Found>
	<SeeOther public="1" get="inline" set="null" expr="cast 303" line="23" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 303</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SeeOther>
	<NotModified public="1" get="inline" set="null" expr="cast 304" line="24" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 304</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NotModified>
	<UseProxy public="1" get="inline" set="null" expr="cast 305" line="25" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 305</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UseProxy>
	<SwitchProxy public="1" get="inline" set="null" expr="cast 306" line="26" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 306</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SwitchProxy>
	<TemporaryRedirect public="1" get="inline" set="null" expr="cast 307" line="27" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 307</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TemporaryRedirect>
	<PermanentRedirect public="1" get="inline" set="null" expr="cast 308" line="28" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 308</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PermanentRedirect>
	<BadRequest public="1" get="inline" set="null" expr="cast 400" line="29" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 400</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BadRequest>
	<Unauthorized public="1" get="inline" set="null" expr="cast 401" line="30" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 401</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Unauthorized>
	<PaymentRequired public="1" get="inline" set="null" expr="cast 402" line="31" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 402</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PaymentRequired>
	<Forbidden public="1" get="inline" set="null" expr="cast 403" line="32" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 403</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Forbidden>
	<NotFound public="1" get="inline" set="null" expr="cast 404" line="33" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 404</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NotFound>
	<MethodNotAllowed public="1" get="inline" set="null" expr="cast 405" line="34" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 405</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MethodNotAllowed>
	<NotAcceptable public="1" get="inline" set="null" expr="cast 406" line="35" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 406</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NotAcceptable>
	<ProxyAuthenticationRequired public="1" get="inline" set="null" expr="cast 407" line="36" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 407</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ProxyAuthenticationRequired>
	<RequestTimeout public="1" get="inline" set="null" expr="cast 408" line="37" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 408</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RequestTimeout>
	<Conflict public="1" get="inline" set="null" expr="cast 409" line="38" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 409</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Conflict>
	<Gone public="1" get="inline" set="null" expr="cast 410" line="39" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 410</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Gone>
	<LengthRequired public="1" get="inline" set="null" expr="cast 411" line="40" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 411</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LengthRequired>
	<PreconditionFailed public="1" get="inline" set="null" expr="cast 412" line="41" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 412</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PreconditionFailed>
	<PayloadTooLarge public="1" get="inline" set="null" expr="cast 413" line="42" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 413</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PayloadTooLarge>
	<URITooLong public="1" get="inline" set="null" expr="cast 414" line="43" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 414</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</URITooLong>
	<UnsupportedMediaType public="1" get="inline" set="null" expr="cast 415" line="44" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 415</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UnsupportedMediaType>
	<RangeNotSatisfiable public="1" get="inline" set="null" expr="cast 416" line="45" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 416</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RangeNotSatisfiable>
	<ExpectationFailed public="1" get="inline" set="null" expr="cast 417" line="46" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 417</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ExpectationFailed>
	<ImATeapot public="1" get="inline" set="null" expr="cast 418" line="47" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 418</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImATeapot>
	<MisdirectedRequest public="1" get="inline" set="null" expr="cast 421" line="48" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 421</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MisdirectedRequest>
	<UnprocessableEntity public="1" get="inline" set="null" expr="cast 422" line="49" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 422</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UnprocessableEntity>
	<Locked public="1" get="inline" set="null" expr="cast 423" line="50" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 423</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Locked>
	<FailedDependency public="1" get="inline" set="null" expr="cast 424" line="51" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 424</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FailedDependency>
	<UpgradeRequired public="1" get="inline" set="null" expr="cast 426" line="52" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 426</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UpgradeRequired>
	<PreconditionRequired public="1" get="inline" set="null" expr="cast 428" line="53" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 428</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PreconditionRequired>
	<TooManyRequests public="1" get="inline" set="null" expr="cast 429" line="54" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 429</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TooManyRequests>
	<RequestHeaderFieldsTooLarge public="1" get="inline" set="null" expr="cast 431" line="55" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 431</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RequestHeaderFieldsTooLarge>
	<UnavailableForLegalReasons public="1" get="inline" set="null" expr="cast 451" line="56" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 451</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UnavailableForLegalReasons>
	<InternalServerError public="1" get="inline" set="null" expr="cast 500" line="57" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 500</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</InternalServerError>
	<NotImplemented public="1" get="inline" set="null" expr="cast 501" line="58" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 501</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NotImplemented>
	<BadGateway public="1" get="inline" set="null" expr="cast 502" line="59" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 502</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BadGateway>
	<ServiceUnavailable public="1" get="inline" set="null" expr="cast 503" line="60" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 503</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ServiceUnavailable>
	<GatewayTimeout public="1" get="inline" set="null" expr="cast 504" line="61" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 504</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GatewayTimeout>
	<HTTPVersionNotSupported public="1" get="inline" set="null" expr="cast 505" line="62" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 505</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HTTPVersionNotSupported>
	<VariantAlsoNegotiates public="1" get="inline" set="null" expr="cast 506" line="63" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 506</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VariantAlsoNegotiates>
	<InsufficientStorage public="1" get="inline" set="null" expr="cast 507" line="64" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 507</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</InsufficientStorage>
	<LoopDetected public="1" get="inline" set="null" expr="cast 508" line="65" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 508</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LoopDetected>
	<NotExtended public="1" get="inline" set="null" expr="cast 510" line="66" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 510</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NotExtended>
	<NetworkAuthenticationRequired public="1" get="inline" set="null" expr="cast 511" line="67" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 511</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NetworkAuthenticationRequired>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.http._HttpStatus.HttpStatus_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/http/HttpStatus.hx" private="1" module="haxe.http.HttpStatus" extern="1">
		<Continue public="1" get="inline" set="null" expr="cast 100" line="7" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 100</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Continue>
		<SwitchingProtocols public="1" get="inline" set="null" expr="cast 101" line="8" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 101</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SwitchingProtocols>
		<Processing public="1" get="inline" set="null" expr="cast 102" line="9" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 102</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Processing>
		<OK public="1" get="inline" set="null" expr="cast 200" line="10" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 200</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OK>
		<Created public="1" get="inline" set="null" expr="cast 201" line="11" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 201</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Created>
		<Accepted public="1" get="inline" set="null" expr="cast 202" line="12" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 202</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Accepted>
		<NonAuthoritativeInformation public="1" get="inline" set="null" expr="cast 203" line="13" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 203</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NonAuthoritativeInformation>
		<NoContent public="1" get="inline" set="null" expr="cast 204" line="14" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 204</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NoContent>
		<ResetContent public="1" get="inline" set="null" expr="cast 205" line="15" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 205</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ResetContent>
		<PartialContent public="1" get="inline" set="null" expr="cast 206" line="16" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 206</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PartialContent>
		<MultiStatus public="1" get="inline" set="null" expr="cast 207" line="17" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 207</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MultiStatus>
		<AlreadyReported public="1" get="inline" set="null" expr="cast 208" line="18" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 208</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AlreadyReported>
		<IMUsed public="1" get="inline" set="null" expr="cast 226" line="19" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 226</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IMUsed>
		<MultipleChoices public="1" get="inline" set="null" expr="cast 300" line="20" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 300</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MultipleChoices>
		<MovedPermanently public="1" get="inline" set="null" expr="cast 301" line="21" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 301</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MovedPermanently>
		<Found public="1" get="inline" set="null" expr="cast 302" line="22" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 302</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Found>
		<SeeOther public="1" get="inline" set="null" expr="cast 303" line="23" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 303</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SeeOther>
		<NotModified public="1" get="inline" set="null" expr="cast 304" line="24" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 304</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NotModified>
		<UseProxy public="1" get="inline" set="null" expr="cast 305" line="25" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 305</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UseProxy>
		<SwitchProxy public="1" get="inline" set="null" expr="cast 306" line="26" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 306</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SwitchProxy>
		<TemporaryRedirect public="1" get="inline" set="null" expr="cast 307" line="27" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 307</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TemporaryRedirect>
		<PermanentRedirect public="1" get="inline" set="null" expr="cast 308" line="28" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 308</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PermanentRedirect>
		<BadRequest public="1" get="inline" set="null" expr="cast 400" line="29" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 400</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BadRequest>
		<Unauthorized public="1" get="inline" set="null" expr="cast 401" line="30" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 401</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Unauthorized>
		<PaymentRequired public="1" get="inline" set="null" expr="cast 402" line="31" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 402</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PaymentRequired>
		<Forbidden public="1" get="inline" set="null" expr="cast 403" line="32" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 403</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Forbidden>
		<NotFound public="1" get="inline" set="null" expr="cast 404" line="33" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 404</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NotFound>
		<MethodNotAllowed public="1" get="inline" set="null" expr="cast 405" line="34" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 405</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MethodNotAllowed>
		<NotAcceptable public="1" get="inline" set="null" expr="cast 406" line="35" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 406</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NotAcceptable>
		<ProxyAuthenticationRequired public="1" get="inline" set="null" expr="cast 407" line="36" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 407</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ProxyAuthenticationRequired>
		<RequestTimeout public="1" get="inline" set="null" expr="cast 408" line="37" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 408</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RequestTimeout>
		<Conflict public="1" get="inline" set="null" expr="cast 409" line="38" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 409</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Conflict>
		<Gone public="1" get="inline" set="null" expr="cast 410" line="39" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 410</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Gone>
		<LengthRequired public="1" get="inline" set="null" expr="cast 411" line="40" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 411</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LengthRequired>
		<PreconditionFailed public="1" get="inline" set="null" expr="cast 412" line="41" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 412</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PreconditionFailed>
		<PayloadTooLarge public="1" get="inline" set="null" expr="cast 413" line="42" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 413</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PayloadTooLarge>
		<URITooLong public="1" get="inline" set="null" expr="cast 414" line="43" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 414</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</URITooLong>
		<UnsupportedMediaType public="1" get="inline" set="null" expr="cast 415" line="44" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 415</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UnsupportedMediaType>
		<RangeNotSatisfiable public="1" get="inline" set="null" expr="cast 416" line="45" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 416</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RangeNotSatisfiable>
		<ExpectationFailed public="1" get="inline" set="null" expr="cast 417" line="46" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 417</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ExpectationFailed>
		<ImATeapot public="1" get="inline" set="null" expr="cast 418" line="47" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 418</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImATeapot>
		<MisdirectedRequest public="1" get="inline" set="null" expr="cast 421" line="48" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 421</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MisdirectedRequest>
		<UnprocessableEntity public="1" get="inline" set="null" expr="cast 422" line="49" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 422</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UnprocessableEntity>
		<Locked public="1" get="inline" set="null" expr="cast 423" line="50" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 423</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Locked>
		<FailedDependency public="1" get="inline" set="null" expr="cast 424" line="51" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 424</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FailedDependency>
		<UpgradeRequired public="1" get="inline" set="null" expr="cast 426" line="52" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 426</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UpgradeRequired>
		<PreconditionRequired public="1" get="inline" set="null" expr="cast 428" line="53" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 428</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PreconditionRequired>
		<TooManyRequests public="1" get="inline" set="null" expr="cast 429" line="54" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 429</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TooManyRequests>
		<RequestHeaderFieldsTooLarge public="1" get="inline" set="null" expr="cast 431" line="55" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 431</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RequestHeaderFieldsTooLarge>
		<UnavailableForLegalReasons public="1" get="inline" set="null" expr="cast 451" line="56" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 451</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UnavailableForLegalReasons>
		<InternalServerError public="1" get="inline" set="null" expr="cast 500" line="57" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 500</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</InternalServerError>
		<NotImplemented public="1" get="inline" set="null" expr="cast 501" line="58" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 501</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NotImplemented>
		<BadGateway public="1" get="inline" set="null" expr="cast 502" line="59" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 502</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BadGateway>
		<ServiceUnavailable public="1" get="inline" set="null" expr="cast 503" line="60" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 503</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ServiceUnavailable>
		<GatewayTimeout public="1" get="inline" set="null" expr="cast 504" line="61" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 504</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GatewayTimeout>
		<HTTPVersionNotSupported public="1" get="inline" set="null" expr="cast 505" line="62" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 505</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HTTPVersionNotSupported>
		<VariantAlsoNegotiates public="1" get="inline" set="null" expr="cast 506" line="63" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 506</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VariantAlsoNegotiates>
		<InsufficientStorage public="1" get="inline" set="null" expr="cast 507" line="64" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 507</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</InsufficientStorage>
		<LoopDetected public="1" get="inline" set="null" expr="cast 508" line="65" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 508</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LoopDetected>
		<NotExtended public="1" get="inline" set="null" expr="cast 510" line="66" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 510</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NotExtended>
		<NetworkAuthenticationRequired public="1" get="inline" set="null" expr="cast 511" line="67" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 511</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NetworkAuthenticationRequired>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="haxe.io.ArrayBufferViewData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/ArrayBufferView.hx" module="haxe.io.ArrayBufferView"><c path="haxe.io.ArrayBufferViewImpl"/></typedef>
	<class path="haxe.io.ArrayBufferViewImpl" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/ArrayBufferView.hx" module="haxe.io.ArrayBufferView">
		<bytes public="1"><c path="haxe.io.Bytes"/></bytes>
		<byteOffset public="1"><x path="Int"/></byteOffset>
		<byteLength public="1"><x path="Int"/></byteLength>
		<sub public="1" set="method" line="35"><f a="begin:?length">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.ArrayBufferViewImpl"/>
</f></sub>
		<subarray public="1" set="method" line="40"><f a="?begin:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.ArrayBufferViewImpl"/>
</f></subarray>
		<new public="1" set="method" line="30"><f a="bytes:pos:length">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="haxe.io.ArrayBufferView" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/ArrayBufferView.hx">
		<this><t path="haxe.io.ArrayBufferViewData"/></this>
		<impl><class path="haxe.io._ArrayBufferView.ArrayBufferView_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/ArrayBufferView.hx" private="1" module="haxe.io.ArrayBufferView">
	<buffer public="1" get="accessor" set="null" static="1">
		<c path="haxe.io.Bytes"/>
		<meta><m n=":impl"/></meta>
	</buffer>
	<byteOffset public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</byteOffset>
	<byteLength public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</byteLength>
	<_new public="1" get="inline" set="null" line="53" static="1">
		<f a="size">
			<x path="Int"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<get_byteOffset get="inline" set="null" line="57" static="1">
		<f a="this">
			<t path="haxe.io.ArrayBufferViewData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_byteOffset>
	<get_byteLength get="inline" set="null" line="58" static="1">
		<f a="this">
			<t path="haxe.io.ArrayBufferViewData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_byteLength>
	<get_buffer get="inline" set="null" line="59" static="1">
		<f a="this">
			<t path="haxe.io.ArrayBufferViewData"/>
			<c path="haxe.io.Bytes"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_buffer>
	<sub public="1" get="inline" set="null" line="61" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.ArrayBufferViewData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="65" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.ArrayBufferViewData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="69" static="1">
		<f a="this">
			<t path="haxe.io.ArrayBufferViewData"/>
			<t path="haxe.io.ArrayBufferViewData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" get="inline" set="null" line="73" static="1"><f a="a">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></fromData>
	<fromBytes public="1" set="method" line="77" static="1">
		<f a="bytes:?pos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._ArrayBufferView.ArrayBufferView_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/ArrayBufferView.hx" private="1" module="haxe.io.ArrayBufferView">
		<buffer public="1" get="accessor" set="null" static="1">
			<c path="haxe.io.Bytes"/>
			<meta><m n=":impl"/></meta>
		</buffer>
		<byteOffset public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</byteOffset>
		<byteLength public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</byteLength>
		<_new public="1" get="inline" set="null" line="53" static="1">
			<f a="size">
				<x path="Int"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<get_byteOffset get="inline" set="null" line="57" static="1">
			<f a="this">
				<t path="haxe.io.ArrayBufferViewData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_byteOffset>
		<get_byteLength get="inline" set="null" line="58" static="1">
			<f a="this">
				<t path="haxe.io.ArrayBufferViewData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_byteLength>
		<get_buffer get="inline" set="null" line="59" static="1">
			<f a="this">
				<t path="haxe.io.ArrayBufferViewData"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_buffer>
		<sub public="1" get="inline" set="null" line="61" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.ArrayBufferViewData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="65" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.ArrayBufferViewData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="69" static="1">
			<f a="this">
				<t path="haxe.io.ArrayBufferViewData"/>
				<t path="haxe.io.ArrayBufferViewData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" get="inline" set="null" line="73" static="1"><f a="a">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></fromData>
		<fromBytes public="1" set="method" line="77" static="1">
			<f a="bytes:?pos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromBytes>
	</class>
	<class path="haxe.io.Input" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Input.hx">
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when reading numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<readByte public="1" set="method" line="49">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read and return one byte.</haxe_doc>
		</readByte>
		<readBytes public="1" set="method" line="64">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Returns the actual length of read data that can be smaller than `len`.

		See `readFullBytes` that tries to read the exact amount of specified bytes.</haxe_doc>
		</readBytes>
		<close public="1" set="method" line="92">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the input source.

		Behaviour while reading after calling this method is unspecified.</haxe_doc>
		</close>
		<set_bigEndian set="method" line="95"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<readAll public="1" set="method" line="108">
			<f a="?bufsize">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Read and return all available data.

		The `bufsize` optional argument specifies the size of chunks by
		which data is read. Its default value is target-specific.</haxe_doc>
		</readAll>
		<readFullBytes public="1" set="method" line="134">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Unlike `readBytes`, this method tries to read the exact `len` amount of bytes.</haxe_doc>
		</readFullBytes>
		<read public="1" set="method" line="147">
			<f a="nbytes">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Read and return `nbytes` bytes.</haxe_doc>
		</read>
		<readUntil public="1" set="method" line="164">
			<f a="end">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Read a string until a character code specified by `end` is occurred.

		The final character is not included in the resulting string.</haxe_doc>
		</readUntil>
		<readLine public="1" set="method" line="177">
			<f a=""><c path="String"/></f>
			<haxe_doc>Read a line of text separated by CR and/or LF bytes.

		The CR/LF characters are not included in the resulting string.</haxe_doc>
		</readLine>
		<readFloat public="1" set="method" line="199">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Read a 32-bit floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readFloat>
		<readDouble public="1" set="method" line="208">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Read a 64-bit double-precision floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readDouble>
		<readInt8 public="1" set="method" line="217">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 8-bit signed integer.</haxe_doc>
		</readInt8>
		<readInt16 public="1" set="method" line="229">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 16-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt16>
		<readUInt16 public="1" set="method" line="243">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 16-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readUInt16>
		<readInt24 public="1" set="method" line="254">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 24-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt24>
		<readUInt24 public="1" set="method" line="269">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 24-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readUInt24>
		<readInt32 public="1" set="method" line="281">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt32>
		<readString public="1" set="method" line="303">
			<f a="len:?encoding">
				<x path="Int"/>
				<e path="haxe.io.Encoding"/>
				<c path="String"/>
			</f>
			<haxe_doc>Read and `len` bytes as a string.</haxe_doc>
		</readString>
		<haxe_doc>An Input is an abstract reader. See other classes in the `haxe.io` package
	for several possible implementations.

	All functions which read data throw `Eof` when the end of the stream
	is reached.</haxe_doc>
	</class>
	<class path="haxe.io.BufferInput" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/BufferInput.hx">
		<extends path="haxe.io.Input"/>
		<i public="1"><c path="haxe.io.Input"/></i>
		<buf public="1"><c path="haxe.io.Bytes"/></buf>
		<available public="1"><x path="Int"/></available>
		<pos public="1"><x path="Int"/></pos>
		<refill public="1" set="method" line="38"><f a=""><x path="Void"/></f></refill>
		<readByte public="1" set="method" line="46" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="54" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="31">
			<f a="i:buf:?pos:?available" v="::0:0">
				<c path="haxe.io.Input"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ available : 0, pos : 0 }</e></m></meta>
		</new>
	</class>
	<class path="haxe.io.BytesBuffer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/haxe/io/BytesBuffer.hx">
		<b><x path="hl.Bytes"/></b>
		<pos><x path="Int"/></pos>
		<size><x path="Int"/></size>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the buffer in bytes.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="39"><f a=""><x path="Int"/></f></get_length>
		<addByte public="1" get="inline" set="null" line="43"><f a="byte">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<__expand set="method" line="48"><f a="req">
	<x path="Int"/>
	<x path="Void"/>
</f></__expand>
		<__add set="method" line="57"><f a="b:bpos:blen">
	<x path="hl.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></__add>
		<add public="1" get="inline" set="null" line="63"><f a="src">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></add>
		<addString public="1" get="inline" set="null" line="67"><f a="v:?encoding">
	<c path="String"/>
	<e path="haxe.io.Encoding"/>
	<x path="Void"/>
</f></addString>
		<addInt32 public="1" get="inline" set="null" line="72"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></addInt32>
		<addInt64 public="1" get="inline" set="null" line="78"><f a="v">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></addInt64>
		<addFloat public="1" get="inline" set="null" line="85"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></addFloat>
		<addDouble public="1" get="inline" set="null" line="91"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></addDouble>
		<addBytes public="1" get="inline" set="null" line="97"><f a="src:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<getBytes public="1" set="method" line="102">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>Returns either a copy or a reference of the current bytes.
		Once called, the buffer should no longer be used.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="33"><f a=""><x path="Void"/></f></new>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.io.BytesDataImpl" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/BytesData.hx" module="haxe.io.BytesData">
		<bytes public="1"><x path="hl.Bytes"/></bytes>
		<length public="1"><x path="Int"/></length>
		<new public="1" set="method" line="42"><f a="b:length">
	<x path="hl.Bytes"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="haxe.io.BytesDataAbstract" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/BytesData.hx" module="haxe.io.BytesData">
		<this><c path="haxe.io.BytesDataImpl"/></this>
		<to><icast field="toBytes"><x path="hl.Bytes"/></icast></to>
		<meta><m n=":forward">
	<e>bytes</e>
	<e>length</e>
</m></meta>
		<impl><class path="haxe.io._BytesData.BytesDataAbstract_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/BytesData.hx" private="1" module="haxe.io.BytesData">
	<_new public="1" get="inline" set="null" line="49" static="1">
		<f a="b:length">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="haxe.io.BytesDataAbstract"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<get get="inline" set="null" line="52" static="1">
		<f a="this:i">
			<c path="haxe.io.BytesDataImpl"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set get="inline" set="null" line="53" static="1">
		<f a="this:i:v">
			<c path="haxe.io.BytesDataImpl"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<toBytes get="inline" set="null" line="54" static="1">
		<f a="this">
			<c path="haxe.io.BytesDataImpl"/>
			<x path="hl.Bytes"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._BytesData.BytesDataAbstract_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/BytesData.hx" private="1" module="haxe.io.BytesData">
		<_new public="1" get="inline" set="null" line="49" static="1">
			<f a="b:length">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="haxe.io.BytesDataAbstract"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<get get="inline" set="null" line="52" static="1">
			<f a="this:i">
				<c path="haxe.io.BytesDataImpl"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set get="inline" set="null" line="53" static="1">
			<f a="this:i:v">
				<c path="haxe.io.BytesDataImpl"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<toBytes get="inline" set="null" line="54" static="1">
			<f a="this">
				<c path="haxe.io.BytesDataImpl"/>
				<x path="hl.Bytes"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toBytes>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/BytesData.hx"><x path="haxe.io.BytesDataAbstract"/></typedef>
	<class path="haxe.io.BytesInput" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/BytesInput.hx">
		<extends path="haxe.io.Input"/>
		<b><x path="hl.Bytes"/></b>
		<pos><x path="Int"/></pos>
		<len><x path="Int"/></len>
		<totlen><x path="Int"/></totlen>
		<position public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<haxe_doc>The current position in the stream in bytes.</haxe_doc>
		</position>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the stream in bytes.</haxe_doc>
		</length>
		<get_position get="inline" set="null" line="63"><f a=""><x path="Int"/></f></get_position>
		<get_length get="inline" set="null" line="71"><f a=""><x path="Int"/></f></get_length>
		<set_position set="method" line="79"><f a="p">
	<x path="Int"/>
	<x path="Int"/>
</f></set_position>
		<readByte public="1" set="method" line="90" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="109" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="38"><f a="b:?pos:?len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.io.Output" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Output.hx">
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when writing numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<writeByte public="1" set="method" line="46">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write one byte.</haxe_doc>
		</writeByte>
		<writeBytes public="1" set="method" line="57">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Returns the actual length of written data that can differ from `len`.

		See `writeFullBytes` that tries to write the exact amount of specified bytes.</haxe_doc>
		</writeBytes>
		<flush public="1" set="method" line="85">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Flush any buffered data.</haxe_doc>
		</flush>
		<close public="1" set="method" line="93">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the output.

		Behaviour while writing after calling this method is unspecified.</haxe_doc>
		</close>
		<set_bigEndian set="method" line="96"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<write public="1" set="method" line="106">
			<f a="s">
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write all bytes stored in `s`.</haxe_doc>
		</write>
		<writeFullBytes public="1" set="method" line="122">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Unlike `writeBytes`, this method tries to write the exact `len` amount of bytes.</haxe_doc>
		</writeFullBytes>
		<writeFloat public="1" set="method" line="135">
			<f a="x">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeFloat>
		<writeDouble public="1" set="method" line="144">
			<f a="x">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 64-bit double-precision floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeDouble>
		<writeInt8 public="1" set="method" line="158">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 8-bit signed integer.</haxe_doc>
		</writeInt8>
		<writeInt16 public="1" set="method" line="169">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 16-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt16>
		<writeUInt16 public="1" set="method" line="179">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 16-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeUInt16>
		<writeInt24 public="1" set="method" line="195">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 24-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt24>
		<writeUInt24 public="1" set="method" line="205">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 24-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeUInt24>
		<writeInt32 public="1" set="method" line="223">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt32>
		<prepare public="1" set="method" line="244">
			<f a="nbytes">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inform that we are about to write at least `nbytes` bytes.

		The underlying implementation can allocate proper working space depending
		on this information, or simply ignore it. This is not a mandatory call
		but a tip and is only used in some specific cases.</haxe_doc>
		</prepare>
		<writeInput public="1" set="method" line="253">
			<f a="i:?bufsize">
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Read all available data from `i` and write it.

		The `bufsize` optional argument specifies the size of chunks by
		which data is read and written. Its default value is 4096.</haxe_doc>
		</writeInput>
		<writeString public="1" set="method" line="278">
			<f a="s:?encoding">
				<c path="String"/>
				<e path="haxe.io.Encoding"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `s` string.</haxe_doc>
		</writeString>
		<haxe_doc>An Output is an abstract write. A specific output implementation will only
	have to override the `writeByte` and maybe the `write`, `flush` and `close`
	methods. See `File.write` and `String.write` for two ways of creating an
	Output.</haxe_doc>
	</class>
	<class path="haxe.io.BytesOutput" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/BytesOutput.hx">
		<extends path="haxe.io.Output"/>
		<b><c path="haxe.io.BytesBuffer"/></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the stream in bytes.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="47"><f a=""><x path="Int"/></f></get_length>
		<writeByte public="1" set="method" line="51" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="59" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<getBytes public="1" set="method" line="134">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>Returns the `Bytes` of this output.

		This function should not be called more than once on a given
		`BytesOutput` instance.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="35"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.io.Eof" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Eof.hx">
		<toString set="method" line="32">
			<f a=""><c path="String"/></f>
			<meta><m n=":ifFeature"><e>"haxe.io.Eof.*"</e></m></meta>
		</toString>
		<new public="1" set="method" line="28"><f a=""><x path="Void"/></f></new>
		<haxe_doc>This exception is raised when reading while data is no longer available in the `haxe.io.Input`.</haxe_doc>
	</class>
	<enum path="haxe.io.Error" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
	</enum>
	<class path="haxe.io.FPHelper" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/haxe/io/FPHelper.hx">
		<i64tmp expr="Int64.ofInt(0)" line="27" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":value"><e>Int64.ofInt(0)</e></m></meta>
		</i64tmp>
		<helper expr="new hl.Bytes(8)" line="28" static="1">
			<x path="hl.Bytes"/>
			<meta><m n=":value"><e>new hl.Bytes(8)</e></m></meta>
		</helper>
		<i32ToFloat public="1" set="method" line="30" static="1"><f a="i">
	<x path="Int"/>
	<x path="Single"/>
</f></i32ToFloat>
		<floatToI32 public="1" set="method" line="35" static="1"><f a="f">
	<x path="Single"/>
	<x path="Int"/>
</f></floatToI32>
		<i64ToDouble public="1" set="method" line="40" static="1"><f a="low:high">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></i64ToDouble>
		<doubleToI64 public="1" set="method" line="46" static="1"><f a="v">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></doubleToI64>
	</class>
	<typedef path="haxe.io.Float32ArrayData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Float32Array.hx" module="haxe.io.Float32Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.Float32Array" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Float32Array.hx">
		<this><t path="haxe.io.Float32ArrayData"/></this>
		<impl><class path="haxe.io._Float32Array.Float32Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Float32Array.hx" private="1" module="haxe.io.Float32Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<get_length get="inline" set="null" line="36" static="1">
		<f a="this">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="40" static="1">
		<f a="this">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="44" static="1">
		<f a="this:index">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="48" static="1">
		<f a="this:index:value">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="56" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="60" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="64" static="1">
		<f a="this">
			<t path="haxe.io.Float32ArrayData"/>
			<t path="haxe.io.Float32ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="haxe.io.Float32Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="72" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="81" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._Float32Array.Float32Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Float32Array.hx" private="1" module="haxe.io.Float32Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<get_length get="inline" set="null" line="36" static="1">
			<f a="this">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="40" static="1">
			<f a="this">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="44" static="1">
			<f a="this:index">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="48" static="1">
			<f a="this:index:value">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="56" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="60" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="64" static="1">
			<f a="this">
				<t path="haxe.io.Float32ArrayData"/>
				<t path="haxe.io.Float32ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="haxe.io.Float32Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="72" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="81" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
	</class>
	<typedef path="haxe.io.Float64ArrayData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Float64Array.hx" module="haxe.io.Float64Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.Float64Array" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Float64Array.hx">
		<this><t path="haxe.io.Float64ArrayData"/></this>
		<impl><class path="haxe.io._Float64Array.Float64Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Float64Array.hx" private="1" module="haxe.io.Float64Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="8" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>8</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<get_length get="inline" set="null" line="36" static="1">
		<f a="this">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="40" static="1">
		<f a="this">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="44" static="1">
		<f a="this:index">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="48" static="1">
		<f a="this:index:value">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="56" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="60" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="64" static="1">
		<f a="this">
			<t path="haxe.io.Float64ArrayData"/>
			<t path="haxe.io.Float64ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="haxe.io.Float64Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="72" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="81" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._Float64Array.Float64Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Float64Array.hx" private="1" module="haxe.io.Float64Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="8" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<get_length get="inline" set="null" line="36" static="1">
			<f a="this">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="40" static="1">
			<f a="this">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="44" static="1">
			<f a="this:index">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="48" static="1">
			<f a="this:index:value">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="56" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="60" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="64" static="1">
			<f a="this">
				<t path="haxe.io.Float64ArrayData"/>
				<t path="haxe.io.Float64ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="haxe.io.Float64Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="72" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="81" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
	</class>
	<typedef path="haxe.io.Int32ArrayData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Int32Array.hx" module="haxe.io.Int32Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.Int32Array" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Int32Array.hx">
		<this><t path="haxe.io.Int32ArrayData"/></this>
		<impl><class path="haxe.io._Int32Array.Int32Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Int32Array.hx" private="1" module="haxe.io.Int32Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<get_length get="inline" set="null" line="36" static="1">
		<f a="this">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="40" static="1">
		<f a="this">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="44" static="1">
		<f a="this:index">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="48" static="1">
		<f a="this:index:value">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="56" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="60" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="64" static="1">
		<f a="this">
			<t path="haxe.io.Int32ArrayData"/>
			<t path="haxe.io.Int32ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="haxe.io.Int32Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="72" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="81" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._Int32Array.Int32Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Int32Array.hx" private="1" module="haxe.io.Int32Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<get_length get="inline" set="null" line="36" static="1">
			<f a="this">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="40" static="1">
			<f a="this">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="44" static="1">
			<f a="this:index">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="48" static="1">
			<f a="this:index:value">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="56" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="60" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="64" static="1">
			<f a="this">
				<t path="haxe.io.Int32ArrayData"/>
				<t path="haxe.io.Int32ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="haxe.io.Int32Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="72" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="81" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
	</class>
	<abstract path="haxe.io.Mime" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Mime.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>Html MimeType Enum
    @see : http://www.sitepoint.com/web-foundations/mime-types-complete-list/</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.io._Mime.Mime_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Mime.hx" private="1" module="haxe.io.Mime" extern="1">
	<XWorldX3dmf public="1" get="inline" set="null" expr="cast &quot;x-world/x-3dmf&quot;" line="9" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "x-world/x-3dmf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XWorldX3dmf>
	<ApplicationOctetStream public="1" get="inline" set="null" expr="cast &quot;application/octet-stream&quot;" line="10" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/octet-stream"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationOctetStream>
	<ApplicationXAuthorwareBin public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-bin&quot;" line="11" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-authorware-bin"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXAuthorwareBin>
	<ApplicationXAuthorwareMap public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-map&quot;" line="12" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-authorware-map"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXAuthorwareMap>
	<ApplicationXAuthorwareSeg public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-seg&quot;" line="13" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-authorware-seg"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXAuthorwareSeg>
	<TextVndAbc public="1" get="inline" set="null" expr="cast &quot;text/vnd.abc&quot;" line="14" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/vnd.abc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextVndAbc>
	<TextHtml public="1" get="inline" set="null" expr="cast &quot;text/html&quot;" line="15" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/html"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextHtml>
	<VideoAnimaflex public="1" get="inline" set="null" expr="cast &quot;video/animaflex&quot;" line="16" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/animaflex"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoAnimaflex>
	<ApplicationPostscript public="1" get="inline" set="null" expr="cast &quot;application/postscript&quot;" line="17" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/postscript"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationPostscript>
	<AudioAiff public="1" get="inline" set="null" expr="cast &quot;audio/aiff&quot;" line="18" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/aiff"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioAiff>
	<AudioXAiff public="1" get="inline" set="null" expr="cast &quot;audio/x-aiff&quot;" line="19" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-aiff"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXAiff>
	<ApplicationXAim public="1" get="inline" set="null" expr="cast &quot;application/x-aim&quot;" line="20" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-aim"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXAim>
	<TextXAudiosoftIntra public="1" get="inline" set="null" expr="cast &quot;text/x-audiosoft-intra&quot;" line="21" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-audiosoft-intra"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXAudiosoftIntra>
	<ApplicationXNaviAnimation public="1" get="inline" set="null" expr="cast &quot;application/x-navi-animation&quot;" line="22" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-navi-animation"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXNaviAnimation>
	<ApplicationXNokia9000CommunicatorAddOnSoftware public="1" get="inline" set="null" expr="cast &quot;application/x-nokia-9000-communicator-add-on-software&quot;" line="23" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-nokia-9000-communicator-add-on-software"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXNokia9000CommunicatorAddOnSoftware>
	<ApplicationMime public="1" get="inline" set="null" expr="cast &quot;application/mime&quot;" line="24" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mime"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationMime>
	<ApplicationArj public="1" get="inline" set="null" expr="cast &quot;application/arj&quot;" line="25" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/arj"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationArj>
	<ImageXJg public="1" get="inline" set="null" expr="cast &quot;image/x-jg&quot;" line="26" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-jg"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXJg>
	<VideoXMsAsf public="1" get="inline" set="null" expr="cast &quot;video/x-ms-asf&quot;" line="27" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-ms-asf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoXMsAsf>
	<TextXAsm public="1" get="inline" set="null" expr="cast &quot;text/x-asm&quot;" line="28" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-asm"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXAsm>
	<TextAsp public="1" get="inline" set="null" expr="cast &quot;text/asp&quot;" line="29" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/asp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextAsp>
	<ApplicationXMplayer2 public="1" get="inline" set="null" expr="cast &quot;application/x-mplayer2&quot;" line="30" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-mplayer2"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXMplayer2>
	<AudioBasic public="1" get="inline" set="null" expr="cast &quot;audio/basic&quot;" line="31" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/basic"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioBasic>
	<ApplicationXTroffMsvideo public="1" get="inline" set="null" expr="cast &quot;application/x-troff-msvideo&quot;" line="32" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-troff-msvideo"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXTroffMsvideo>
	<VideoAvi public="1" get="inline" set="null" expr="cast &quot;video/avi&quot;" line="33" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/avi"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoAvi>
	<VideoMsvideo public="1" get="inline" set="null" expr="cast &quot;video/msvideo&quot;" line="34" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/msvideo"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoMsvideo>
	<VideoXMsvideo public="1" get="inline" set="null" expr="cast &quot;video/x-msvideo&quot;" line="35" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-msvideo"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoXMsvideo>
	<VideoAvsVideo public="1" get="inline" set="null" expr="cast &quot;video/avs-video&quot;" line="36" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/avs-video"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoAvsVideo>
	<ApplicationXBcpio public="1" get="inline" set="null" expr="cast &quot;application/x-bcpio&quot;" line="37" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bcpio"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXBcpio>
	<ApplicationMacBinary public="1" get="inline" set="null" expr="cast &quot;application/mac-binary&quot;" line="38" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mac-binary"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationMacBinary>
	<ApplicationMacbinary public="1" get="inline" set="null" expr="cast &quot;application/macbinary&quot;" line="39" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/macbinary"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationMacbinary>
	<ApplicationXBinary public="1" get="inline" set="null" expr="cast &quot;application/x-binary&quot;" line="40" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-binary"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXBinary>
	<ApplicationXMacbinary public="1" get="inline" set="null" expr="cast &quot;application/x-macbinary&quot;" line="41" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-macbinary"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXMacbinary>
	<ImageBmp public="1" get="inline" set="null" expr="cast &quot;image/bmp&quot;" line="42" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/bmp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageBmp>
	<ImageXWindowsBmp public="1" get="inline" set="null" expr="cast &quot;image/x-windows-bmp&quot;" line="43" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-windows-bmp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXWindowsBmp>
	<ApplicationBook public="1" get="inline" set="null" expr="cast &quot;application/book&quot;" line="44" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/book"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationBook>
	<ApplicationXBzip2 public="1" get="inline" set="null" expr="cast &quot;application/x-bzip2&quot;" line="45" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bzip2"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXBzip2>
	<ApplicationXBsh public="1" get="inline" set="null" expr="cast &quot;application/x-bsh&quot;" line="46" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bsh"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXBsh>
	<ApplicationXBzip public="1" get="inline" set="null" expr="cast &quot;application/x-bzip&quot;" line="47" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bzip"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXBzip>
	<TextPlain public="1" get="inline" set="null" expr="cast &quot;text/plain&quot;" line="48" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/plain"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextPlain>
	<TextXC public="1" get="inline" set="null" expr="cast &quot;text/x-c&quot;" line="49" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-c"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXC>
	<ApplicationVndMsPkiSeccat public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.seccat&quot;" line="50" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.ms-pki.seccat"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndMsPkiSeccat>
	<ApplicationClariscad public="1" get="inline" set="null" expr="cast &quot;application/clariscad&quot;" line="51" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/clariscad"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationClariscad>
	<ApplicationXCocoa public="1" get="inline" set="null" expr="cast &quot;application/x-cocoa&quot;" line="52" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-cocoa"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXCocoa>
	<ApplicationCdf public="1" get="inline" set="null" expr="cast &quot;application/cdf&quot;" line="53" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/cdf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationCdf>
	<ApplicationXCdf public="1" get="inline" set="null" expr="cast &quot;application/x-cdf&quot;" line="54" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-cdf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXCdf>
	<ApplicationXNetcdf public="1" get="inline" set="null" expr="cast &quot;application/x-netcdf&quot;" line="55" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-netcdf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXNetcdf>
	<ApplicationPkixCert public="1" get="inline" set="null" expr="cast &quot;application/pkix-cert&quot;" line="56" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkix-cert"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationPkixCert>
	<ApplicationXX509CaCert public="1" get="inline" set="null" expr="cast &quot;application/x-x509-ca-cert&quot;" line="57" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-x509-ca-cert"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXX509CaCert>
	<ApplicationXChat public="1" get="inline" set="null" expr="cast &quot;application/x-chat&quot;" line="58" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-chat"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXChat>
	<ApplicationJava public="1" get="inline" set="null" expr="cast &quot;application/java&quot;" line="59" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/java"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationJava>
	<ApplicationJavaByteCode public="1" get="inline" set="null" expr="cast &quot;application/java-byte-code&quot;" line="60" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/java-byte-code"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationJavaByteCode>
	<ApplicationXJavaClass public="1" get="inline" set="null" expr="cast &quot;application/x-java-class&quot;" line="61" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-java-class"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXJavaClass>
	<ApplicationXCpio public="1" get="inline" set="null" expr="cast &quot;application/x-cpio&quot;" line="62" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-cpio"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXCpio>
	<ApplicationMacCompactpro public="1" get="inline" set="null" expr="cast &quot;application/mac-compactpro&quot;" line="63" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mac-compactpro"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationMacCompactpro>
	<ApplicationPkcsCrl public="1" get="inline" set="null" expr="cast &quot;application/pkcs-crl&quot;" line="64" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkcs-crl"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationPkcsCrl>
	<ApplicationXCsh public="1" get="inline" set="null" expr="cast &quot;application/x-csh&quot;" line="65" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-csh"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXCsh>
	<TextCss public="1" get="inline" set="null" expr="cast &quot;text/css&quot;" line="66" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/css"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextCss>
	<ApplicationXDirector public="1" get="inline" set="null" expr="cast &quot;application/x-director&quot;" line="67" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-director"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXDirector>
	<ApplicationXDeepv public="1" get="inline" set="null" expr="cast &quot;application/x-deepv&quot;" line="68" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-deepv"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXDeepv>
	<VideoXDv public="1" get="inline" set="null" expr="cast &quot;video/x-dv&quot;" line="69" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-dv"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoXDv>
	<VideoDl public="1" get="inline" set="null" expr="cast &quot;video/dl&quot;" line="70" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/dl"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoDl>
	<ApplicationMsword public="1" get="inline" set="null" expr="cast &quot;application/msword&quot;" line="71" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/msword"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationMsword>
	<ApplicationCommonground public="1" get="inline" set="null" expr="cast &quot;application/commonground&quot;" line="72" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/commonground"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationCommonground>
	<ApplicationDrafting public="1" get="inline" set="null" expr="cast &quot;application/drafting&quot;" line="73" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/drafting"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationDrafting>
	<ApplicationXDvi public="1" get="inline" set="null" expr="cast &quot;application/x-dvi&quot;" line="74" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-dvi"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXDvi>
	<DrawingXDwf public="1" get="inline" set="null" expr="cast &quot;drawing/x-dwf (old)&quot;" line="75" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "drawing/x-dwf (old)"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DrawingXDwf>
	<ApplicationAcad public="1" get="inline" set="null" expr="cast &quot;application/acad&quot;" line="76" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/acad"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationAcad>
	<ApplicationDxf public="1" get="inline" set="null" expr="cast &quot;application/dxf&quot;" line="77" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/dxf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationDxf>
	<TextXScriptElisp public="1" get="inline" set="null" expr="cast &quot;text/x-script.elisp&quot;" line="78" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script.elisp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXScriptElisp>
	<ApplicationXBytecodeElisp public="1" get="inline" set="null" expr="cast &quot;application/x-bytecode.elisp (compiled elisp)&quot;" line="79" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bytecode.elisp (compiled elisp)"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXBytecodeElisp>
	<ApplicationXEnvoy public="1" get="inline" set="null" expr="cast &quot;application/x-envoy&quot;" line="80" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-envoy"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXEnvoy>
	<ApplicationXEsrehber public="1" get="inline" set="null" expr="cast &quot;application/x-esrehber&quot;" line="81" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-esrehber"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXEsrehber>
	<TextXSetext public="1" get="inline" set="null" expr="cast &quot;text/x-setext&quot;" line="82" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-setext"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXSetext>
	<ApplicationEnvoy public="1" get="inline" set="null" expr="cast &quot;application/envoy&quot;" line="83" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/envoy"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationEnvoy>
	<TextXFortran public="1" get="inline" set="null" expr="cast &quot;text/x-fortran&quot;" line="84" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-fortran"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXFortran>
	<ApplicationVndFdf public="1" get="inline" set="null" expr="cast &quot;application/vnd.fdf&quot;" line="85" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.fdf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndFdf>
	<ImageFif public="1" get="inline" set="null" expr="cast &quot;image/fif&quot;" line="86" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/fif"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageFif>
	<VideoFli public="1" get="inline" set="null" expr="cast &quot;video/fli&quot;" line="87" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/fli"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoFli>
	<ImageFlorian public="1" get="inline" set="null" expr="cast &quot;image/florian&quot;" line="88" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/florian"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageFlorian>
	<TextVndFmiFlexstor public="1" get="inline" set="null" expr="cast &quot;text/vnd.fmi.flexstor&quot;" line="89" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/vnd.fmi.flexstor"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextVndFmiFlexstor>
	<VideoXAtomic3dFeature public="1" get="inline" set="null" expr="cast &quot;video/x-atomic3d-feature&quot;" line="90" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-atomic3d-feature"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoXAtomic3dFeature>
	<ImageVndFpx public="1" get="inline" set="null" expr="cast &quot;image/vnd.fpx&quot;" line="91" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.fpx"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageVndFpx>
	<ApplicationFreeloader public="1" get="inline" set="null" expr="cast &quot;application/freeloader&quot;" line="92" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/freeloader"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationFreeloader>
	<AudioMake public="1" get="inline" set="null" expr="cast &quot;audio/make&quot;" line="93" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/make"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioMake>
	<ImageG3fax public="1" get="inline" set="null" expr="cast &quot;image/g3fax&quot;" line="94" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/g3fax"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageG3fax>
	<ImageGif public="1" get="inline" set="null" expr="cast &quot;image/gif&quot;" line="95" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/gif"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageGif>
	<VideoGl public="1" get="inline" set="null" expr="cast &quot;video/gl&quot;" line="96" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/gl"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoGl>
	<AudioXGsm public="1" get="inline" set="null" expr="cast &quot;audio/x-gsm&quot;" line="97" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-gsm"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXGsm>
	<ApplicationXGsp public="1" get="inline" set="null" expr="cast &quot;application/x-gsp&quot;" line="98" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-gsp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXGsp>
	<ApplicationXGss public="1" get="inline" set="null" expr="cast &quot;application/x-gss&quot;" line="99" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-gss"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXGss>
	<ApplicationXGtar public="1" get="inline" set="null" expr="cast &quot;application/x-gtar&quot;" line="100" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-gtar"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXGtar>
	<ApplicationXCompressed public="1" get="inline" set="null" expr="cast &quot;application/x-compressed&quot;" line="101" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-compressed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXCompressed>
	<ApplicationXGzip public="1" get="inline" set="null" expr="cast &quot;application/x-gzip&quot;" line="102" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-gzip"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXGzip>
	<ApplicationXHdf public="1" get="inline" set="null" expr="cast &quot;application/x-hdf&quot;" line="103" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-hdf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXHdf>
	<ApplicationXHelpfile public="1" get="inline" set="null" expr="cast &quot;application/x-helpfile&quot;" line="104" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-helpfile"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXHelpfile>
	<TextXScript public="1" get="inline" set="null" expr="cast &quot;text/x-script&quot;" line="105" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXScript>
	<ApplicationHlp public="1" get="inline" set="null" expr="cast &quot;application/hlp&quot;" line="106" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/hlp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationHlp>
	<ApplicationVndHpHpgl public="1" get="inline" set="null" expr="cast &quot;application/vnd.hp-hpgl&quot;" line="107" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.hp-hpgl"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndHpHpgl>
	<ApplicationBinhex public="1" get="inline" set="null" expr="cast &quot;application/binhex&quot;" line="108" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/binhex"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationBinhex>
	<ApplicationHta public="1" get="inline" set="null" expr="cast &quot;application/hta&quot;" line="109" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/hta"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationHta>
	<TextXComponent public="1" get="inline" set="null" expr="cast &quot;text/x-component&quot;" line="110" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-component"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXComponent>
	<TextWebviewhtml public="1" get="inline" set="null" expr="cast &quot;text/webviewhtml&quot;" line="111" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/webviewhtml"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextWebviewhtml>
	<XConferenceXCooltalk public="1" get="inline" set="null" expr="cast &quot;x-conference/x-cooltalk&quot;" line="112" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "x-conference/x-cooltalk"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XConferenceXCooltalk>
	<ImageXIcon public="1" get="inline" set="null" expr="cast &quot;image/x-icon&quot;" line="113" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-icon"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXIcon>
	<ImageIef public="1" get="inline" set="null" expr="cast &quot;image/ief&quot;" line="114" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/ief"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageIef>
	<ApplicationIges public="1" get="inline" set="null" expr="cast &quot;application/iges&quot;" line="115" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/iges"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationIges>
	<ApplicationXIma public="1" get="inline" set="null" expr="cast &quot;application/x-ima&quot;" line="116" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-ima"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXIma>
	<ApplicationXHttpdImap public="1" get="inline" set="null" expr="cast &quot;application/x-httpd-imap&quot;" line="117" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-httpd-imap"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXHttpdImap>
	<ApplicationInf public="1" get="inline" set="null" expr="cast &quot;application/inf&quot;" line="118" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/inf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationInf>
	<ApplicationXInternettSignup public="1" get="inline" set="null" expr="cast &quot;application/x-internett-signup&quot;" line="119" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-internett-signup"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXInternettSignup>
	<ApplicationXIp2 public="1" get="inline" set="null" expr="cast &quot;application/x-ip2&quot;" line="120" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-ip2"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXIp2>
	<VideoXIsvideo public="1" get="inline" set="null" expr="cast &quot;video/x-isvideo&quot;" line="121" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-isvideo"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoXIsvideo>
	<AudioIt public="1" get="inline" set="null" expr="cast &quot;audio/it&quot;" line="122" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/it"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioIt>
	<ApplicationXInventor public="1" get="inline" set="null" expr="cast &quot;application/x-inventor&quot;" line="123" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-inventor"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXInventor>
	<IWorldIVrml public="1" get="inline" set="null" expr="cast &quot;i-world/i-vrml&quot;" line="124" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "i-world/i-vrml"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IWorldIVrml>
	<ApplicationXLivescreen public="1" get="inline" set="null" expr="cast &quot;application/x-livescreen&quot;" line="125" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-livescreen"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXLivescreen>
	<AudioXJam public="1" get="inline" set="null" expr="cast &quot;audio/x-jam&quot;" line="126" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-jam"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXJam>
	<ApplicationXJavaCommerce public="1" get="inline" set="null" expr="cast &quot;application/x-java-commerce&quot;" line="127" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-java-commerce"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXJavaCommerce>
	<ImageJpeg public="1" get="inline" set="null" expr="cast &quot;image/jpeg&quot;" line="128" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/jpeg"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageJpeg>
	<ImageXJps public="1" get="inline" set="null" expr="cast &quot;image/x-jps&quot;" line="129" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-jps"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXJps>
	<TextJavascript public="1" get="inline" set="null" expr="cast &quot;text/javascript&quot;" line="130" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/javascript"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextJavascript>
	<ApplicationJson public="1" get="inline" set="null" expr="cast &quot;application/json&quot;" line="131" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/json"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationJson>
	<ApplicationJavascript public="1" get="inline" set="null" expr="cast &quot;application/javascript&quot;" line="132" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/javascript"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationJavascript>
	<ImageJutvision public="1" get="inline" set="null" expr="cast &quot;image/jutvision&quot;" line="133" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/jutvision"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageJutvision>
	<AudioMidi public="1" get="inline" set="null" expr="cast &quot;audio/midi&quot;" line="134" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/midi"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioMidi>
	<ApplicationXKsh public="1" get="inline" set="null" expr="cast &quot;application/x-ksh&quot;" line="135" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-ksh"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXKsh>
	<AudioNspaudio public="1" get="inline" set="null" expr="cast &quot;audio/nspaudio&quot;" line="136" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/nspaudio"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioNspaudio>
	<AudioXLiveaudio public="1" get="inline" set="null" expr="cast &quot;audio/x-liveaudio&quot;" line="137" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-liveaudio"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXLiveaudio>
	<ApplicationXLatex public="1" get="inline" set="null" expr="cast &quot;application/x-latex&quot;" line="138" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-latex"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXLatex>
	<ApplicationXLisp public="1" get="inline" set="null" expr="cast &quot;application/x-lisp&quot;" line="139" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-lisp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXLisp>
	<TextXLaAsf public="1" get="inline" set="null" expr="cast &quot;text/x-la-asf&quot;" line="140" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-la-asf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXLaAsf>
	<ApplicationLzx public="1" get="inline" set="null" expr="cast &quot;application/lzx&quot;" line="141" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/lzx"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationLzx>
	<VideoMpeg public="1" get="inline" set="null" expr="cast &quot;video/mpeg&quot;" line="142" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/mpeg"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoMpeg>
	<AudioMpeg public="1" get="inline" set="null" expr="cast &quot;audio/mpeg&quot;" line="143" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/mpeg"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioMpeg>
	<AudioXMpequrl public="1" get="inline" set="null" expr="cast &quot;audio/x-mpequrl&quot;" line="144" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-mpequrl"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXMpequrl>
	<ApplicationXTroffMan public="1" get="inline" set="null" expr="cast &quot;application/x-troff-man&quot;" line="145" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-troff-man"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXTroffMan>
	<ApplicationXNavimap public="1" get="inline" set="null" expr="cast &quot;application/x-navimap&quot;" line="146" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-navimap"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXNavimap>
	<ApplicationMbedlet public="1" get="inline" set="null" expr="cast &quot;application/mbedlet&quot;" line="147" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mbedlet"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationMbedlet>
	<ApplicationXMagicCapPackage10 public="1" get="inline" set="null" expr="cast &quot;application/x-magic-cap-package-1.0&quot;" line="148" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-magic-cap-package-1.0"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXMagicCapPackage10>
	<ApplicationMcad public="1" get="inline" set="null" expr="cast &quot;application/mcad&quot;" line="149" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mcad"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationMcad>
	<ImageVasa public="1" get="inline" set="null" expr="cast &quot;image/vasa&quot;" line="150" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vasa"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageVasa>
	<ApplicationNetmc public="1" get="inline" set="null" expr="cast &quot;application/netmc&quot;" line="151" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/netmc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationNetmc>
	<ApplicationXTroffMe public="1" get="inline" set="null" expr="cast &quot;application/x-troff-me&quot;" line="152" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-troff-me"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXTroffMe>
	<MessageRfc822 public="1" get="inline" set="null" expr="cast &quot;message/rfc822&quot;" line="153" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "message/rfc822"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MessageRfc822>
	<ApplicationXMif public="1" get="inline" set="null" expr="cast &quot;application/x-mif&quot;" line="154" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-mif"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXMif>
	<WwwMime public="1" get="inline" set="null" expr="cast &quot;www/mime&quot;" line="155" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "www/mime"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WwwMime>
	<AudioXVndAudioexplosionMjuicemediafile public="1" get="inline" set="null" expr="cast &quot;audio/x-vnd.audioexplosion.mjuicemediafile&quot;" line="156" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-vnd.audioexplosion.mjuicemediafile"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXVndAudioexplosionMjuicemediafile>
	<VideoXMotionJpeg public="1" get="inline" set="null" expr="cast &quot;video/x-motion-jpeg&quot;" line="157" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-motion-jpeg"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoXMotionJpeg>
	<ApplicationBase64 public="1" get="inline" set="null" expr="cast &quot;application/base64&quot;" line="158" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/base64"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationBase64>
	<AudioMod public="1" get="inline" set="null" expr="cast &quot;audio/mod&quot;" line="159" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/mod"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioMod>
	<VideoQuicktime public="1" get="inline" set="null" expr="cast &quot;video/quicktime&quot;" line="160" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/quicktime"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoQuicktime>
	<VideoXSgiMovie public="1" get="inline" set="null" expr="cast &quot;video/x-sgi-movie&quot;" line="161" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-sgi-movie"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoXSgiMovie>
	<AudioMpeg3 public="1" get="inline" set="null" expr="cast &quot;audio/mpeg3&quot;" line="162" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/mpeg3"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioMpeg3>
	<ApplicationXProject public="1" get="inline" set="null" expr="cast &quot;application/x-project&quot;" line="163" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-project"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXProject>
	<ApplicationVndMsProject public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-project&quot;" line="164" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.ms-project"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndMsProject>
	<ApplicationMarc public="1" get="inline" set="null" expr="cast &quot;application/marc&quot;" line="165" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/marc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationMarc>
	<ApplicationXTroffMs public="1" get="inline" set="null" expr="cast &quot;application/x-troff-ms&quot;" line="166" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-troff-ms"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXTroffMs>
	<ApplicationXVndAudioexplosionMzz public="1" get="inline" set="null" expr="cast &quot;application/x-vnd.audioexplosion.mzz&quot;" line="167" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-vnd.audioexplosion.mzz"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXVndAudioexplosionMzz>
	<ImageNaplps public="1" get="inline" set="null" expr="cast &quot;image/naplps&quot;" line="168" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/naplps"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageNaplps>
	<ApplicationVndNokiaConfigurationMessage public="1" get="inline" set="null" expr="cast &quot;application/vnd.nokia.configuration-message&quot;" line="169" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.nokia.configuration-message"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndNokiaConfigurationMessage>
	<ImageXNiff public="1" get="inline" set="null" expr="cast &quot;image/x-niff&quot;" line="170" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-niff"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXNiff>
	<ApplicationXMixTransfer public="1" get="inline" set="null" expr="cast &quot;application/x-mix-transfer&quot;" line="171" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-mix-transfer"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXMixTransfer>
	<ApplicationXConference public="1" get="inline" set="null" expr="cast &quot;application/x-conference&quot;" line="172" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-conference"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXConference>
	<ApplicationXNavidoc public="1" get="inline" set="null" expr="cast &quot;application/x-navidoc&quot;" line="173" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-navidoc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXNavidoc>
	<ApplicationOda public="1" get="inline" set="null" expr="cast &quot;application/oda&quot;" line="174" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/oda"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationOda>
	<ApplicationXOmc public="1" get="inline" set="null" expr="cast &quot;application/x-omc&quot;" line="175" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-omc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXOmc>
	<ApplicationXOmcdatamaker public="1" get="inline" set="null" expr="cast &quot;application/x-omcdatamaker&quot;" line="176" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-omcdatamaker"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXOmcdatamaker>
	<ApplicationXOmcregerator public="1" get="inline" set="null" expr="cast &quot;application/x-omcregerator&quot;" line="177" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-omcregerator"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXOmcregerator>
	<TextXPascal public="1" get="inline" set="null" expr="cast &quot;text/x-pascal&quot;" line="178" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-pascal"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXPascal>
	<ApplicationPkcs10 public="1" get="inline" set="null" expr="cast &quot;application/pkcs10&quot;" line="179" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkcs10"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationPkcs10>
	<ApplicationPkcs12 public="1" get="inline" set="null" expr="cast &quot;application/pkcs-12&quot;" line="180" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkcs-12"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationPkcs12>
	<ApplicationXPkcs7Signature public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-signature&quot;" line="181" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-pkcs7-signature"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXPkcs7Signature>
	<ApplicationPkcs7Mime public="1" get="inline" set="null" expr="cast &quot;application/pkcs7-mime&quot;" line="182" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkcs7-mime"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationPkcs7Mime>
	<ApplicationXPkcs7Certreqresp public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-certreqresp&quot;" line="183" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-pkcs7-certreqresp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXPkcs7Certreqresp>
	<ApplicationPkcs7Signature public="1" get="inline" set="null" expr="cast &quot;application/pkcs7-signature&quot;" line="184" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkcs7-signature"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationPkcs7Signature>
	<ApplicationPro_eng public="1" get="inline" set="null" expr="cast &quot;application/pro_eng&quot;" line="185" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pro_eng"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationPro_eng>
	<TextPascal public="1" get="inline" set="null" expr="cast &quot;text/pascal&quot;" line="186" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/pascal"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextPascal>
	<ImageXPortableBitmap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-bitmap&quot;" line="187" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-portable-bitmap"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXPortableBitmap>
	<ApplicationVndHpPcl public="1" get="inline" set="null" expr="cast &quot;application/vnd.hp-pcl&quot;" line="188" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.hp-pcl"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndHpPcl>
	<ImageXPict public="1" get="inline" set="null" expr="cast &quot;image/x-pict&quot;" line="189" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-pict"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXPict>
	<ImageXPcx public="1" get="inline" set="null" expr="cast &quot;image/x-pcx&quot;" line="190" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-pcx"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXPcx>
	<ChemicalXPdb public="1" get="inline" set="null" expr="cast &quot;chemical/x-pdb&quot;" line="191" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "chemical/x-pdb"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ChemicalXPdb>
	<ApplicationPdf public="1" get="inline" set="null" expr="cast &quot;application/pdf&quot;" line="192" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pdf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationPdf>
	<ImageXPortableGraymap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-graymap&quot;" line="193" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-portable-graymap"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXPortableGraymap>
	<ImagePict public="1" get="inline" set="null" expr="cast &quot;image/pict&quot;" line="194" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/pict"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImagePict>
	<ApplicationXNewtonCompatiblePkg public="1" get="inline" set="null" expr="cast &quot;application/x-newton-compatible-pkg&quot;" line="195" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-newton-compatible-pkg"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXNewtonCompatiblePkg>
	<ApplicationVndMsPkiPko public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.pko&quot;" line="196" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.ms-pki.pko"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndMsPkiPko>
	<ApplicationXPixclscript public="1" get="inline" set="null" expr="cast &quot;application/x-pixclscript&quot;" line="197" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-pixclscript"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXPixclscript>
	<ImageXXpixmap public="1" get="inline" set="null" expr="cast &quot;image/x-xpixmap&quot;" line="198" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-xpixmap"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXXpixmap>
	<ApplicationXPagemaker public="1" get="inline" set="null" expr="cast &quot;application/x-pagemaker&quot;" line="199" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-pagemaker"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXPagemaker>
	<ImagePng public="1" get="inline" set="null" expr="cast &quot;image/png&quot;" line="200" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/png"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImagePng>
	<ApplicationXPortableAnymap public="1" get="inline" set="null" expr="cast &quot;application/x-portable-anymap&quot;" line="201" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-portable-anymap"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXPortableAnymap>
	<ApplicationMspowerpoint public="1" get="inline" set="null" expr="cast &quot;application/mspowerpoint&quot;" line="202" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mspowerpoint"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationMspowerpoint>
	<ModelXPov public="1" get="inline" set="null" expr="cast &quot;model/x-pov&quot;" line="203" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "model/x-pov"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ModelXPov>
	<ApplicationVndMsPowerpoint public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-powerpoint&quot;" line="204" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.ms-powerpoint"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndMsPowerpoint>
	<ImageXPortablePixmap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-pixmap&quot;" line="205" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-portable-pixmap"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXPortablePixmap>
	<ApplicationXFreelance public="1" get="inline" set="null" expr="cast &quot;application/x-freelance&quot;" line="206" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-freelance"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXFreelance>
	<PaleovuXPv public="1" get="inline" set="null" expr="cast &quot;paleovu/x-pv&quot;" line="207" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "paleovu/x-pv"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PaleovuXPv>
	<TextXScriptPhyton public="1" get="inline" set="null" expr="cast &quot;text/x-script.phyton&quot;" line="208" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script.phyton"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXScriptPhyton>
	<ApplicationXBytecodePython public="1" get="inline" set="null" expr="cast &quot;application/x-bytecode.python&quot;" line="209" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bytecode.python"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXBytecodePython>
	<AudioVndQcelp public="1" get="inline" set="null" expr="cast &quot;audio/vnd.qcelp&quot;" line="210" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/vnd.qcelp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioVndQcelp>
	<ImageXQuicktime public="1" get="inline" set="null" expr="cast &quot;image/x-quicktime&quot;" line="211" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-quicktime"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXQuicktime>
	<VideoXQtc public="1" get="inline" set="null" expr="cast &quot;video/x-qtc&quot;" line="212" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-qtc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoXQtc>
	<AudioXPnRealaudio public="1" get="inline" set="null" expr="cast &quot;audio/x-pn-realaudio&quot;" line="213" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-pn-realaudio"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXPnRealaudio>
	<ApplicationXCmuRaster public="1" get="inline" set="null" expr="cast &quot;application/x-cmu-raster&quot;" line="214" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-cmu-raster"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXCmuRaster>
	<ImageCmuRaster public="1" get="inline" set="null" expr="cast &quot;image/cmu-raster&quot;" line="215" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/cmu-raster"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageCmuRaster>
	<TextXScriptRexx public="1" get="inline" set="null" expr="cast &quot;text/x-script.rexx&quot;" line="216" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script.rexx"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXScriptRexx>
	<ImageVndRnRealflash public="1" get="inline" set="null" expr="cast &quot;image/vnd.rn-realflash&quot;" line="217" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.rn-realflash"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageVndRnRealflash>
	<ImageXRgb public="1" get="inline" set="null" expr="cast &quot;image/x-rgb&quot;" line="218" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-rgb"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXRgb>
	<ApplicationVndRnRealmedia public="1" get="inline" set="null" expr="cast &quot;application/vnd.rn-realmedia&quot;" line="219" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.rn-realmedia"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndRnRealmedia>
	<AudioMid public="1" get="inline" set="null" expr="cast &quot;audio/mid&quot;" line="220" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/mid"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioMid>
	<ApplicationRingingTones public="1" get="inline" set="null" expr="cast &quot;application/ringing-tones&quot;" line="221" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/ringing-tones"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationRingingTones>
	<ApplicationVndRnRealplayer public="1" get="inline" set="null" expr="cast &quot;application/vnd.rn-realplayer&quot;" line="222" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.rn-realplayer"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndRnRealplayer>
	<ApplicationXTroff public="1" get="inline" set="null" expr="cast &quot;application/x-troff&quot;" line="223" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-troff"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXTroff>
	<ImageVndRnRealpix public="1" get="inline" set="null" expr="cast &quot;image/vnd.rn-realpix&quot;" line="224" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.rn-realpix"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageVndRnRealpix>
	<AudioXPnRealaudioPlugin public="1" get="inline" set="null" expr="cast &quot;audio/x-pn-realaudio-plugin&quot;" line="225" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-pn-realaudio-plugin"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXPnRealaudioPlugin>
	<TextRichtext public="1" get="inline" set="null" expr="cast &quot;text/richtext&quot;" line="226" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/richtext"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextRichtext>
	<ApplicationRtf public="1" get="inline" set="null" expr="cast &quot;application/rtf&quot;" line="227" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/rtf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationRtf>
	<VideoVndRnRealvideo public="1" get="inline" set="null" expr="cast &quot;video/vnd.rn-realvideo&quot;" line="228" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/vnd.rn-realvideo"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoVndRnRealvideo>
	<AudioS3m public="1" get="inline" set="null" expr="cast &quot;audio/s3m&quot;" line="229" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/s3m"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioS3m>
	<ApplicationXTbook public="1" get="inline" set="null" expr="cast &quot;application/x-tbook&quot;" line="230" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-tbook"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXTbook>
	<ApplicationXLotusscreencam public="1" get="inline" set="null" expr="cast &quot;application/x-lotusscreencam&quot;" line="231" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-lotusscreencam"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXLotusscreencam>
	<ApplicationSdp public="1" get="inline" set="null" expr="cast &quot;application/sdp&quot;" line="232" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/sdp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationSdp>
	<ApplicationSounder public="1" get="inline" set="null" expr="cast &quot;application/sounder&quot;" line="233" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/sounder"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationSounder>
	<ApplicationSea public="1" get="inline" set="null" expr="cast &quot;application/sea&quot;" line="234" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/sea"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationSea>
	<ApplicationSet public="1" get="inline" set="null" expr="cast &quot;application/set&quot;" line="235" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/set"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationSet>
	<AudioXPsid public="1" get="inline" set="null" expr="cast &quot;audio/x-psid&quot;" line="236" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-psid"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXPsid>
	<ApplicationXSit public="1" get="inline" set="null" expr="cast &quot;application/x-sit&quot;" line="237" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-sit"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXSit>
	<ApplicationXKoan public="1" get="inline" set="null" expr="cast &quot;application/x-koan&quot;" line="238" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-koan"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXKoan>
	<ApplicationXSeelogo public="1" get="inline" set="null" expr="cast &quot;application/x-seelogo&quot;" line="239" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-seelogo"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXSeelogo>
	<ApplicationSmil public="1" get="inline" set="null" expr="cast &quot;application/smil&quot;" line="240" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/smil"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationSmil>
	<ApplicationSolids public="1" get="inline" set="null" expr="cast &quot;application/solids&quot;" line="241" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/solids"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationSolids>
	<ApplicationXPkcs7Certificates public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-certificates&quot;" line="242" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-pkcs7-certificates"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXPkcs7Certificates>
	<ApplicationFuturesplash public="1" get="inline" set="null" expr="cast &quot;application/futuresplash&quot;" line="243" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/futuresplash"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationFuturesplash>
	<ApplicationXSprite public="1" get="inline" set="null" expr="cast &quot;application/x-sprite&quot;" line="244" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-sprite"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXSprite>
	<ApplicationXWaisSource public="1" get="inline" set="null" expr="cast &quot;application/x-wais-source&quot;" line="245" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-wais-source"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXWaisSource>
	<TextXServerParsedHtml public="1" get="inline" set="null" expr="cast &quot;text/x-server-parsed-html&quot;" line="246" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-server-parsed-html"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXServerParsedHtml>
	<ApplicationStreamingmedia public="1" get="inline" set="null" expr="cast &quot;application/streamingmedia&quot;" line="247" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/streamingmedia"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationStreamingmedia>
	<ApplicationVndMsPkiCertstore public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.certstore&quot;" line="248" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.ms-pki.certstore"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndMsPkiCertstore>
	<ApplicationStep public="1" get="inline" set="null" expr="cast &quot;application/step&quot;" line="249" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/step"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationStep>
	<ApplicationSla public="1" get="inline" set="null" expr="cast &quot;application/sla&quot;" line="250" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/sla"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationSla>
	<ApplicationXSv4cpio public="1" get="inline" set="null" expr="cast &quot;application/x-sv4cpio&quot;" line="251" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-sv4cpio"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXSv4cpio>
	<ApplicationXSv4crc public="1" get="inline" set="null" expr="cast &quot;application/x-sv4crc&quot;" line="252" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-sv4crc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXSv4crc>
	<ImageVndDwg public="1" get="inline" set="null" expr="cast &quot;image/vnd.dwg&quot;" line="253" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.dwg"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageVndDwg>
	<ApplicationXWorld public="1" get="inline" set="null" expr="cast &quot;application/x-world&quot;" line="254" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-world"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXWorld>
	<ApplicationXShockwaveFlash public="1" get="inline" set="null" expr="cast &quot;application/x-shockwave-flash&quot;" line="255" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-shockwave-flash"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXShockwaveFlash>
	<TextXSpeech public="1" get="inline" set="null" expr="cast &quot;text/x-speech&quot;" line="256" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-speech"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXSpeech>
	<ApplicationXTar public="1" get="inline" set="null" expr="cast &quot;application/x-tar&quot;" line="257" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-tar"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXTar>
	<ApplicationToolbook public="1" get="inline" set="null" expr="cast &quot;application/toolbook&quot;" line="258" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/toolbook"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationToolbook>
	<ApplicationXTcl public="1" get="inline" set="null" expr="cast &quot;application/x-tcl&quot;" line="259" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-tcl"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXTcl>
	<TextXScriptTcsh public="1" get="inline" set="null" expr="cast &quot;text/x-script.tcsh&quot;" line="260" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script.tcsh"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXScriptTcsh>
	<ApplicationXTex public="1" get="inline" set="null" expr="cast &quot;application/x-tex&quot;" line="261" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-tex"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXTex>
	<ApplicationXTexinfo public="1" get="inline" set="null" expr="cast &quot;application/x-texinfo&quot;" line="262" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-texinfo"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXTexinfo>
	<ApplicationGnutar public="1" get="inline" set="null" expr="cast &quot;application/gnutar&quot;" line="263" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/gnutar"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationGnutar>
	<ImageTiff public="1" get="inline" set="null" expr="cast &quot;image/tiff&quot;" line="264" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/tiff"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageTiff>
	<AudioTspAudio public="1" get="inline" set="null" expr="cast &quot;audio/tsp-audio&quot;" line="265" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/tsp-audio"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioTspAudio>
	<ApplicationDsptype public="1" get="inline" set="null" expr="cast &quot;application/dsptype&quot;" line="266" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/dsptype"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationDsptype>
	<TextTabSeparatedValues public="1" get="inline" set="null" expr="cast &quot;text/tab-separated-values&quot;" line="267" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/tab-separated-values"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextTabSeparatedValues>
	<TextXUil public="1" get="inline" set="null" expr="cast &quot;text/x-uil&quot;" line="268" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-uil"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXUil>
	<TextUriList public="1" get="inline" set="null" expr="cast &quot;text/uri-list&quot;" line="269" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/uri-list"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextUriList>
	<ApplicationIDeas public="1" get="inline" set="null" expr="cast &quot;application/i-deas&quot;" line="270" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/i-deas"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationIDeas>
	<ApplicationXUstar public="1" get="inline" set="null" expr="cast &quot;application/x-ustar&quot;" line="271" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-ustar"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXUstar>
	<TextXUuencode public="1" get="inline" set="null" expr="cast &quot;text/x-uuencode&quot;" line="272" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-uuencode"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXUuencode>
	<ApplicationXCdlink public="1" get="inline" set="null" expr="cast &quot;application/x-cdlink&quot;" line="273" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-cdlink"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXCdlink>
	<TextXVcalendar public="1" get="inline" set="null" expr="cast &quot;text/x-vcalendar&quot;" line="274" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-vcalendar"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXVcalendar>
	<ApplicationVda public="1" get="inline" set="null" expr="cast &quot;application/vda&quot;" line="275" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vda"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVda>
	<VideoVdo public="1" get="inline" set="null" expr="cast &quot;video/vdo&quot;" line="276" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/vdo"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoVdo>
	<ApplicationGroupwise public="1" get="inline" set="null" expr="cast &quot;application/groupwise&quot;" line="277" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/groupwise"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationGroupwise>
	<VideoVivo public="1" get="inline" set="null" expr="cast &quot;video/vivo&quot;" line="278" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/vivo"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoVivo>
	<ApplicationVocaltecMediaDesc public="1" get="inline" set="null" expr="cast &quot;application/vocaltec-media-desc&quot;" line="279" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vocaltec-media-desc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVocaltecMediaDesc>
	<ApplicationVocaltecMediaFile public="1" get="inline" set="null" expr="cast &quot;application/vocaltec-media-file&quot;" line="280" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vocaltec-media-file"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVocaltecMediaFile>
	<AudioVoc public="1" get="inline" set="null" expr="cast &quot;audio/voc&quot;" line="281" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/voc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioVoc>
	<VideoVosaic public="1" get="inline" set="null" expr="cast &quot;video/vosaic&quot;" line="282" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/vosaic"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoVosaic>
	<AudioVoxware public="1" get="inline" set="null" expr="cast &quot;audio/voxware&quot;" line="283" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/voxware"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioVoxware>
	<AudioXTwinvqPlugin public="1" get="inline" set="null" expr="cast &quot;audio/x-twinvq-plugin&quot;" line="284" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-twinvq-plugin"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXTwinvqPlugin>
	<AudioXTwinvq public="1" get="inline" set="null" expr="cast &quot;audio/x-twinvq&quot;" line="285" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-twinvq"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXTwinvq>
	<ApplicationXVrml public="1" get="inline" set="null" expr="cast &quot;application/x-vrml&quot;" line="286" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-vrml"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXVrml>
	<XWorldXVrt public="1" get="inline" set="null" expr="cast &quot;x-world/x-vrt&quot;" line="287" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "x-world/x-vrt"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XWorldXVrt>
	<ApplicationXVisio public="1" get="inline" set="null" expr="cast &quot;application/x-visio&quot;" line="288" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-visio"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXVisio>
	<ApplicationWordperfect60 public="1" get="inline" set="null" expr="cast &quot;application/wordperfect6.0&quot;" line="289" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/wordperfect6.0"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationWordperfect60>
	<ApplicationWordperfect61 public="1" get="inline" set="null" expr="cast &quot;application/wordperfect6.1&quot;" line="290" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/wordperfect6.1"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationWordperfect61>
	<AudioWav public="1" get="inline" set="null" expr="cast &quot;audio/wav&quot;" line="291" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/wav"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioWav>
	<ApplicationXQpro public="1" get="inline" set="null" expr="cast &quot;application/x-qpro&quot;" line="292" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-qpro"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXQpro>
	<ImageVndWapWbmp public="1" get="inline" set="null" expr="cast &quot;image/vnd.wap.wbmp&quot;" line="293" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.wap.wbmp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageVndWapWbmp>
	<ApplicationVndXara public="1" get="inline" set="null" expr="cast &quot;application/vnd.xara&quot;" line="294" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.xara"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndXara>
	<ImageWebp public="1" get="inline" set="null" expr="cast &quot;image/webp&quot;" line="295" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/webp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageWebp>
	<ApplicationX123 public="1" get="inline" set="null" expr="cast &quot;application/x-123&quot;" line="296" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-123"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationX123>
	<WindowsMetafile public="1" get="inline" set="null" expr="cast &quot;windows/metafile&quot;" line="297" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "windows/metafile"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WindowsMetafile>
	<TextVndWapWml public="1" get="inline" set="null" expr="cast &quot;text/vnd.wap.wml&quot;" line="298" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/vnd.wap.wml"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextVndWapWml>
	<ApplicationVndWapWmlc public="1" get="inline" set="null" expr="cast &quot;application/vnd.wap.wmlc&quot;" line="299" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.wap.wmlc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndWapWmlc>
	<TextVndWapWmlscript public="1" get="inline" set="null" expr="cast &quot;text/vnd.wap.wmlscript&quot;" line="300" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/vnd.wap.wmlscript"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextVndWapWmlscript>
	<ApplicationVndWapWmlscriptc public="1" get="inline" set="null" expr="cast &quot;application/vnd.wap.wmlscriptc&quot;" line="301" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.wap.wmlscriptc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndWapWmlscriptc>
	<ApplicationWordperfect public="1" get="inline" set="null" expr="cast &quot;application/wordperfect&quot;" line="302" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/wordperfect"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationWordperfect>
	<ApplicationXLotus public="1" get="inline" set="null" expr="cast &quot;application/x-lotus&quot;" line="303" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-lotus"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXLotus>
	<ApplicationMswrite public="1" get="inline" set="null" expr="cast &quot;application/mswrite&quot;" line="304" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mswrite"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationMswrite>
	<ModelVrml public="1" get="inline" set="null" expr="cast &quot;model/vrml&quot;" line="305" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "model/vrml"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ModelVrml>
	<TextScriplet public="1" get="inline" set="null" expr="cast &quot;text/scriplet&quot;" line="306" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/scriplet"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextScriplet>
	<ApplicationXWintalk public="1" get="inline" set="null" expr="cast &quot;application/x-wintalk&quot;" line="307" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-wintalk"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXWintalk>
	<ImageXXbitmap public="1" get="inline" set="null" expr="cast &quot;image/x-xbitmap&quot;" line="308" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-xbitmap"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXXbitmap>
	<VideoXAmtDemorun public="1" get="inline" set="null" expr="cast &quot;video/x-amt-demorun&quot;" line="309" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-amt-demorun"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoXAmtDemorun>
	<XglDrawing public="1" get="inline" set="null" expr="cast &quot;xgl/drawing&quot;" line="310" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "xgl/drawing"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XglDrawing>
	<ImageVndXiff public="1" get="inline" set="null" expr="cast &quot;image/vnd.xiff&quot;" line="311" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.xiff"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageVndXiff>
	<ApplicationExcel public="1" get="inline" set="null" expr="cast &quot;application/excel&quot;" line="312" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/excel"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationExcel>
	<AudioXm public="1" get="inline" set="null" expr="cast &quot;audio/xm&quot;" line="313" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/xm"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXm>
	<ApplicationXml public="1" get="inline" set="null" expr="cast &quot;application/xml&quot;" line="314" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/xml"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXml>
	<XglMovie public="1" get="inline" set="null" expr="cast &quot;xgl/movie&quot;" line="315" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "xgl/movie"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XglMovie>
	<ApplicationXVndLsXpix public="1" get="inline" set="null" expr="cast &quot;application/x-vnd.ls-xpix&quot;" line="316" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-vnd.ls-xpix"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXVndLsXpix>
	<VideoXAmtShowrun public="1" get="inline" set="null" expr="cast &quot;video/x-amt-showrun&quot;" line="317" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-amt-showrun"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoXAmtShowrun>
	<ImageXXwd public="1" get="inline" set="null" expr="cast &quot;image/x-xwd&quot;" line="318" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-xwd"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXXwd>
	<ApplicationXCompress public="1" get="inline" set="null" expr="cast &quot;application/x-compress&quot;" line="319" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-compress"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXCompress>
	<MultipartXZip public="1" get="inline" set="null" expr="cast &quot;multipart/x-zip&quot;" line="320" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "multipart/x-zip"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MultipartXZip>
	<TextXScriptZsh public="1" get="inline" set="null" expr="cast &quot;text/x-script.zsh&quot;" line="321" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script.zsh"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXScriptZsh>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io._Mime.Mime_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Mime.hx" private="1" module="haxe.io.Mime" extern="1">
		<XWorldX3dmf public="1" get="inline" set="null" expr="cast &quot;x-world/x-3dmf&quot;" line="9" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "x-world/x-3dmf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XWorldX3dmf>
		<ApplicationOctetStream public="1" get="inline" set="null" expr="cast &quot;application/octet-stream&quot;" line="10" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/octet-stream"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationOctetStream>
		<ApplicationXAuthorwareBin public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-bin&quot;" line="11" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-authorware-bin"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXAuthorwareBin>
		<ApplicationXAuthorwareMap public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-map&quot;" line="12" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-authorware-map"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXAuthorwareMap>
		<ApplicationXAuthorwareSeg public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-seg&quot;" line="13" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-authorware-seg"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXAuthorwareSeg>
		<TextVndAbc public="1" get="inline" set="null" expr="cast &quot;text/vnd.abc&quot;" line="14" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/vnd.abc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextVndAbc>
		<TextHtml public="1" get="inline" set="null" expr="cast &quot;text/html&quot;" line="15" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/html"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextHtml>
		<VideoAnimaflex public="1" get="inline" set="null" expr="cast &quot;video/animaflex&quot;" line="16" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/animaflex"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoAnimaflex>
		<ApplicationPostscript public="1" get="inline" set="null" expr="cast &quot;application/postscript&quot;" line="17" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/postscript"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationPostscript>
		<AudioAiff public="1" get="inline" set="null" expr="cast &quot;audio/aiff&quot;" line="18" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/aiff"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioAiff>
		<AudioXAiff public="1" get="inline" set="null" expr="cast &quot;audio/x-aiff&quot;" line="19" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-aiff"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXAiff>
		<ApplicationXAim public="1" get="inline" set="null" expr="cast &quot;application/x-aim&quot;" line="20" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-aim"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXAim>
		<TextXAudiosoftIntra public="1" get="inline" set="null" expr="cast &quot;text/x-audiosoft-intra&quot;" line="21" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-audiosoft-intra"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXAudiosoftIntra>
		<ApplicationXNaviAnimation public="1" get="inline" set="null" expr="cast &quot;application/x-navi-animation&quot;" line="22" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-navi-animation"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXNaviAnimation>
		<ApplicationXNokia9000CommunicatorAddOnSoftware public="1" get="inline" set="null" expr="cast &quot;application/x-nokia-9000-communicator-add-on-software&quot;" line="23" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-nokia-9000-communicator-add-on-software"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXNokia9000CommunicatorAddOnSoftware>
		<ApplicationMime public="1" get="inline" set="null" expr="cast &quot;application/mime&quot;" line="24" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mime"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationMime>
		<ApplicationArj public="1" get="inline" set="null" expr="cast &quot;application/arj&quot;" line="25" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/arj"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationArj>
		<ImageXJg public="1" get="inline" set="null" expr="cast &quot;image/x-jg&quot;" line="26" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-jg"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXJg>
		<VideoXMsAsf public="1" get="inline" set="null" expr="cast &quot;video/x-ms-asf&quot;" line="27" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-ms-asf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoXMsAsf>
		<TextXAsm public="1" get="inline" set="null" expr="cast &quot;text/x-asm&quot;" line="28" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-asm"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXAsm>
		<TextAsp public="1" get="inline" set="null" expr="cast &quot;text/asp&quot;" line="29" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/asp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextAsp>
		<ApplicationXMplayer2 public="1" get="inline" set="null" expr="cast &quot;application/x-mplayer2&quot;" line="30" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-mplayer2"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXMplayer2>
		<AudioBasic public="1" get="inline" set="null" expr="cast &quot;audio/basic&quot;" line="31" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/basic"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioBasic>
		<ApplicationXTroffMsvideo public="1" get="inline" set="null" expr="cast &quot;application/x-troff-msvideo&quot;" line="32" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-troff-msvideo"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXTroffMsvideo>
		<VideoAvi public="1" get="inline" set="null" expr="cast &quot;video/avi&quot;" line="33" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/avi"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoAvi>
		<VideoMsvideo public="1" get="inline" set="null" expr="cast &quot;video/msvideo&quot;" line="34" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/msvideo"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoMsvideo>
		<VideoXMsvideo public="1" get="inline" set="null" expr="cast &quot;video/x-msvideo&quot;" line="35" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-msvideo"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoXMsvideo>
		<VideoAvsVideo public="1" get="inline" set="null" expr="cast &quot;video/avs-video&quot;" line="36" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/avs-video"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoAvsVideo>
		<ApplicationXBcpio public="1" get="inline" set="null" expr="cast &quot;application/x-bcpio&quot;" line="37" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bcpio"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXBcpio>
		<ApplicationMacBinary public="1" get="inline" set="null" expr="cast &quot;application/mac-binary&quot;" line="38" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mac-binary"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationMacBinary>
		<ApplicationMacbinary public="1" get="inline" set="null" expr="cast &quot;application/macbinary&quot;" line="39" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/macbinary"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationMacbinary>
		<ApplicationXBinary public="1" get="inline" set="null" expr="cast &quot;application/x-binary&quot;" line="40" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-binary"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXBinary>
		<ApplicationXMacbinary public="1" get="inline" set="null" expr="cast &quot;application/x-macbinary&quot;" line="41" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-macbinary"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXMacbinary>
		<ImageBmp public="1" get="inline" set="null" expr="cast &quot;image/bmp&quot;" line="42" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/bmp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageBmp>
		<ImageXWindowsBmp public="1" get="inline" set="null" expr="cast &quot;image/x-windows-bmp&quot;" line="43" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-windows-bmp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXWindowsBmp>
		<ApplicationBook public="1" get="inline" set="null" expr="cast &quot;application/book&quot;" line="44" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/book"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationBook>
		<ApplicationXBzip2 public="1" get="inline" set="null" expr="cast &quot;application/x-bzip2&quot;" line="45" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bzip2"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXBzip2>
		<ApplicationXBsh public="1" get="inline" set="null" expr="cast &quot;application/x-bsh&quot;" line="46" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bsh"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXBsh>
		<ApplicationXBzip public="1" get="inline" set="null" expr="cast &quot;application/x-bzip&quot;" line="47" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bzip"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXBzip>
		<TextPlain public="1" get="inline" set="null" expr="cast &quot;text/plain&quot;" line="48" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/plain"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextPlain>
		<TextXC public="1" get="inline" set="null" expr="cast &quot;text/x-c&quot;" line="49" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-c"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXC>
		<ApplicationVndMsPkiSeccat public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.seccat&quot;" line="50" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.ms-pki.seccat"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndMsPkiSeccat>
		<ApplicationClariscad public="1" get="inline" set="null" expr="cast &quot;application/clariscad&quot;" line="51" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/clariscad"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationClariscad>
		<ApplicationXCocoa public="1" get="inline" set="null" expr="cast &quot;application/x-cocoa&quot;" line="52" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-cocoa"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXCocoa>
		<ApplicationCdf public="1" get="inline" set="null" expr="cast &quot;application/cdf&quot;" line="53" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/cdf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationCdf>
		<ApplicationXCdf public="1" get="inline" set="null" expr="cast &quot;application/x-cdf&quot;" line="54" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-cdf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXCdf>
		<ApplicationXNetcdf public="1" get="inline" set="null" expr="cast &quot;application/x-netcdf&quot;" line="55" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-netcdf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXNetcdf>
		<ApplicationPkixCert public="1" get="inline" set="null" expr="cast &quot;application/pkix-cert&quot;" line="56" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkix-cert"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationPkixCert>
		<ApplicationXX509CaCert public="1" get="inline" set="null" expr="cast &quot;application/x-x509-ca-cert&quot;" line="57" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-x509-ca-cert"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXX509CaCert>
		<ApplicationXChat public="1" get="inline" set="null" expr="cast &quot;application/x-chat&quot;" line="58" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-chat"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXChat>
		<ApplicationJava public="1" get="inline" set="null" expr="cast &quot;application/java&quot;" line="59" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/java"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationJava>
		<ApplicationJavaByteCode public="1" get="inline" set="null" expr="cast &quot;application/java-byte-code&quot;" line="60" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/java-byte-code"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationJavaByteCode>
		<ApplicationXJavaClass public="1" get="inline" set="null" expr="cast &quot;application/x-java-class&quot;" line="61" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-java-class"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXJavaClass>
		<ApplicationXCpio public="1" get="inline" set="null" expr="cast &quot;application/x-cpio&quot;" line="62" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-cpio"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXCpio>
		<ApplicationMacCompactpro public="1" get="inline" set="null" expr="cast &quot;application/mac-compactpro&quot;" line="63" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mac-compactpro"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationMacCompactpro>
		<ApplicationPkcsCrl public="1" get="inline" set="null" expr="cast &quot;application/pkcs-crl&quot;" line="64" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkcs-crl"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationPkcsCrl>
		<ApplicationXCsh public="1" get="inline" set="null" expr="cast &quot;application/x-csh&quot;" line="65" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-csh"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXCsh>
		<TextCss public="1" get="inline" set="null" expr="cast &quot;text/css&quot;" line="66" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/css"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextCss>
		<ApplicationXDirector public="1" get="inline" set="null" expr="cast &quot;application/x-director&quot;" line="67" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-director"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXDirector>
		<ApplicationXDeepv public="1" get="inline" set="null" expr="cast &quot;application/x-deepv&quot;" line="68" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-deepv"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXDeepv>
		<VideoXDv public="1" get="inline" set="null" expr="cast &quot;video/x-dv&quot;" line="69" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-dv"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoXDv>
		<VideoDl public="1" get="inline" set="null" expr="cast &quot;video/dl&quot;" line="70" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/dl"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoDl>
		<ApplicationMsword public="1" get="inline" set="null" expr="cast &quot;application/msword&quot;" line="71" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/msword"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationMsword>
		<ApplicationCommonground public="1" get="inline" set="null" expr="cast &quot;application/commonground&quot;" line="72" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/commonground"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationCommonground>
		<ApplicationDrafting public="1" get="inline" set="null" expr="cast &quot;application/drafting&quot;" line="73" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/drafting"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationDrafting>
		<ApplicationXDvi public="1" get="inline" set="null" expr="cast &quot;application/x-dvi&quot;" line="74" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-dvi"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXDvi>
		<DrawingXDwf public="1" get="inline" set="null" expr="cast &quot;drawing/x-dwf (old)&quot;" line="75" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "drawing/x-dwf (old)"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DrawingXDwf>
		<ApplicationAcad public="1" get="inline" set="null" expr="cast &quot;application/acad&quot;" line="76" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/acad"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationAcad>
		<ApplicationDxf public="1" get="inline" set="null" expr="cast &quot;application/dxf&quot;" line="77" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/dxf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationDxf>
		<TextXScriptElisp public="1" get="inline" set="null" expr="cast &quot;text/x-script.elisp&quot;" line="78" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script.elisp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXScriptElisp>
		<ApplicationXBytecodeElisp public="1" get="inline" set="null" expr="cast &quot;application/x-bytecode.elisp (compiled elisp)&quot;" line="79" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bytecode.elisp (compiled elisp)"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXBytecodeElisp>
		<ApplicationXEnvoy public="1" get="inline" set="null" expr="cast &quot;application/x-envoy&quot;" line="80" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-envoy"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXEnvoy>
		<ApplicationXEsrehber public="1" get="inline" set="null" expr="cast &quot;application/x-esrehber&quot;" line="81" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-esrehber"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXEsrehber>
		<TextXSetext public="1" get="inline" set="null" expr="cast &quot;text/x-setext&quot;" line="82" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-setext"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXSetext>
		<ApplicationEnvoy public="1" get="inline" set="null" expr="cast &quot;application/envoy&quot;" line="83" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/envoy"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationEnvoy>
		<TextXFortran public="1" get="inline" set="null" expr="cast &quot;text/x-fortran&quot;" line="84" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-fortran"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXFortran>
		<ApplicationVndFdf public="1" get="inline" set="null" expr="cast &quot;application/vnd.fdf&quot;" line="85" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.fdf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndFdf>
		<ImageFif public="1" get="inline" set="null" expr="cast &quot;image/fif&quot;" line="86" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/fif"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageFif>
		<VideoFli public="1" get="inline" set="null" expr="cast &quot;video/fli&quot;" line="87" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/fli"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoFli>
		<ImageFlorian public="1" get="inline" set="null" expr="cast &quot;image/florian&quot;" line="88" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/florian"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageFlorian>
		<TextVndFmiFlexstor public="1" get="inline" set="null" expr="cast &quot;text/vnd.fmi.flexstor&quot;" line="89" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/vnd.fmi.flexstor"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextVndFmiFlexstor>
		<VideoXAtomic3dFeature public="1" get="inline" set="null" expr="cast &quot;video/x-atomic3d-feature&quot;" line="90" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-atomic3d-feature"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoXAtomic3dFeature>
		<ImageVndFpx public="1" get="inline" set="null" expr="cast &quot;image/vnd.fpx&quot;" line="91" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.fpx"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageVndFpx>
		<ApplicationFreeloader public="1" get="inline" set="null" expr="cast &quot;application/freeloader&quot;" line="92" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/freeloader"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationFreeloader>
		<AudioMake public="1" get="inline" set="null" expr="cast &quot;audio/make&quot;" line="93" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/make"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioMake>
		<ImageG3fax public="1" get="inline" set="null" expr="cast &quot;image/g3fax&quot;" line="94" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/g3fax"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageG3fax>
		<ImageGif public="1" get="inline" set="null" expr="cast &quot;image/gif&quot;" line="95" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/gif"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageGif>
		<VideoGl public="1" get="inline" set="null" expr="cast &quot;video/gl&quot;" line="96" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/gl"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoGl>
		<AudioXGsm public="1" get="inline" set="null" expr="cast &quot;audio/x-gsm&quot;" line="97" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-gsm"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXGsm>
		<ApplicationXGsp public="1" get="inline" set="null" expr="cast &quot;application/x-gsp&quot;" line="98" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-gsp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXGsp>
		<ApplicationXGss public="1" get="inline" set="null" expr="cast &quot;application/x-gss&quot;" line="99" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-gss"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXGss>
		<ApplicationXGtar public="1" get="inline" set="null" expr="cast &quot;application/x-gtar&quot;" line="100" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-gtar"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXGtar>
		<ApplicationXCompressed public="1" get="inline" set="null" expr="cast &quot;application/x-compressed&quot;" line="101" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-compressed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXCompressed>
		<ApplicationXGzip public="1" get="inline" set="null" expr="cast &quot;application/x-gzip&quot;" line="102" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-gzip"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXGzip>
		<ApplicationXHdf public="1" get="inline" set="null" expr="cast &quot;application/x-hdf&quot;" line="103" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-hdf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXHdf>
		<ApplicationXHelpfile public="1" get="inline" set="null" expr="cast &quot;application/x-helpfile&quot;" line="104" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-helpfile"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXHelpfile>
		<TextXScript public="1" get="inline" set="null" expr="cast &quot;text/x-script&quot;" line="105" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXScript>
		<ApplicationHlp public="1" get="inline" set="null" expr="cast &quot;application/hlp&quot;" line="106" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/hlp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationHlp>
		<ApplicationVndHpHpgl public="1" get="inline" set="null" expr="cast &quot;application/vnd.hp-hpgl&quot;" line="107" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.hp-hpgl"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndHpHpgl>
		<ApplicationBinhex public="1" get="inline" set="null" expr="cast &quot;application/binhex&quot;" line="108" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/binhex"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationBinhex>
		<ApplicationHta public="1" get="inline" set="null" expr="cast &quot;application/hta&quot;" line="109" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/hta"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationHta>
		<TextXComponent public="1" get="inline" set="null" expr="cast &quot;text/x-component&quot;" line="110" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-component"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXComponent>
		<TextWebviewhtml public="1" get="inline" set="null" expr="cast &quot;text/webviewhtml&quot;" line="111" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/webviewhtml"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextWebviewhtml>
		<XConferenceXCooltalk public="1" get="inline" set="null" expr="cast &quot;x-conference/x-cooltalk&quot;" line="112" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "x-conference/x-cooltalk"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XConferenceXCooltalk>
		<ImageXIcon public="1" get="inline" set="null" expr="cast &quot;image/x-icon&quot;" line="113" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-icon"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXIcon>
		<ImageIef public="1" get="inline" set="null" expr="cast &quot;image/ief&quot;" line="114" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/ief"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageIef>
		<ApplicationIges public="1" get="inline" set="null" expr="cast &quot;application/iges&quot;" line="115" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/iges"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationIges>
		<ApplicationXIma public="1" get="inline" set="null" expr="cast &quot;application/x-ima&quot;" line="116" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-ima"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXIma>
		<ApplicationXHttpdImap public="1" get="inline" set="null" expr="cast &quot;application/x-httpd-imap&quot;" line="117" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-httpd-imap"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXHttpdImap>
		<ApplicationInf public="1" get="inline" set="null" expr="cast &quot;application/inf&quot;" line="118" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/inf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationInf>
		<ApplicationXInternettSignup public="1" get="inline" set="null" expr="cast &quot;application/x-internett-signup&quot;" line="119" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-internett-signup"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXInternettSignup>
		<ApplicationXIp2 public="1" get="inline" set="null" expr="cast &quot;application/x-ip2&quot;" line="120" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-ip2"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXIp2>
		<VideoXIsvideo public="1" get="inline" set="null" expr="cast &quot;video/x-isvideo&quot;" line="121" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-isvideo"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoXIsvideo>
		<AudioIt public="1" get="inline" set="null" expr="cast &quot;audio/it&quot;" line="122" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/it"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioIt>
		<ApplicationXInventor public="1" get="inline" set="null" expr="cast &quot;application/x-inventor&quot;" line="123" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-inventor"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXInventor>
		<IWorldIVrml public="1" get="inline" set="null" expr="cast &quot;i-world/i-vrml&quot;" line="124" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "i-world/i-vrml"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IWorldIVrml>
		<ApplicationXLivescreen public="1" get="inline" set="null" expr="cast &quot;application/x-livescreen&quot;" line="125" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-livescreen"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXLivescreen>
		<AudioXJam public="1" get="inline" set="null" expr="cast &quot;audio/x-jam&quot;" line="126" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-jam"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXJam>
		<ApplicationXJavaCommerce public="1" get="inline" set="null" expr="cast &quot;application/x-java-commerce&quot;" line="127" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-java-commerce"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXJavaCommerce>
		<ImageJpeg public="1" get="inline" set="null" expr="cast &quot;image/jpeg&quot;" line="128" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/jpeg"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageJpeg>
		<ImageXJps public="1" get="inline" set="null" expr="cast &quot;image/x-jps&quot;" line="129" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-jps"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXJps>
		<TextJavascript public="1" get="inline" set="null" expr="cast &quot;text/javascript&quot;" line="130" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/javascript"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextJavascript>
		<ApplicationJson public="1" get="inline" set="null" expr="cast &quot;application/json&quot;" line="131" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/json"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationJson>
		<ApplicationJavascript public="1" get="inline" set="null" expr="cast &quot;application/javascript&quot;" line="132" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/javascript"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationJavascript>
		<ImageJutvision public="1" get="inline" set="null" expr="cast &quot;image/jutvision&quot;" line="133" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/jutvision"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageJutvision>
		<AudioMidi public="1" get="inline" set="null" expr="cast &quot;audio/midi&quot;" line="134" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/midi"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioMidi>
		<ApplicationXKsh public="1" get="inline" set="null" expr="cast &quot;application/x-ksh&quot;" line="135" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-ksh"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXKsh>
		<AudioNspaudio public="1" get="inline" set="null" expr="cast &quot;audio/nspaudio&quot;" line="136" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/nspaudio"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioNspaudio>
		<AudioXLiveaudio public="1" get="inline" set="null" expr="cast &quot;audio/x-liveaudio&quot;" line="137" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-liveaudio"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXLiveaudio>
		<ApplicationXLatex public="1" get="inline" set="null" expr="cast &quot;application/x-latex&quot;" line="138" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-latex"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXLatex>
		<ApplicationXLisp public="1" get="inline" set="null" expr="cast &quot;application/x-lisp&quot;" line="139" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-lisp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXLisp>
		<TextXLaAsf public="1" get="inline" set="null" expr="cast &quot;text/x-la-asf&quot;" line="140" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-la-asf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXLaAsf>
		<ApplicationLzx public="1" get="inline" set="null" expr="cast &quot;application/lzx&quot;" line="141" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/lzx"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationLzx>
		<VideoMpeg public="1" get="inline" set="null" expr="cast &quot;video/mpeg&quot;" line="142" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/mpeg"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoMpeg>
		<AudioMpeg public="1" get="inline" set="null" expr="cast &quot;audio/mpeg&quot;" line="143" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/mpeg"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioMpeg>
		<AudioXMpequrl public="1" get="inline" set="null" expr="cast &quot;audio/x-mpequrl&quot;" line="144" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-mpequrl"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXMpequrl>
		<ApplicationXTroffMan public="1" get="inline" set="null" expr="cast &quot;application/x-troff-man&quot;" line="145" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-troff-man"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXTroffMan>
		<ApplicationXNavimap public="1" get="inline" set="null" expr="cast &quot;application/x-navimap&quot;" line="146" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-navimap"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXNavimap>
		<ApplicationMbedlet public="1" get="inline" set="null" expr="cast &quot;application/mbedlet&quot;" line="147" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mbedlet"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationMbedlet>
		<ApplicationXMagicCapPackage10 public="1" get="inline" set="null" expr="cast &quot;application/x-magic-cap-package-1.0&quot;" line="148" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-magic-cap-package-1.0"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXMagicCapPackage10>
		<ApplicationMcad public="1" get="inline" set="null" expr="cast &quot;application/mcad&quot;" line="149" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mcad"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationMcad>
		<ImageVasa public="1" get="inline" set="null" expr="cast &quot;image/vasa&quot;" line="150" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vasa"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageVasa>
		<ApplicationNetmc public="1" get="inline" set="null" expr="cast &quot;application/netmc&quot;" line="151" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/netmc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationNetmc>
		<ApplicationXTroffMe public="1" get="inline" set="null" expr="cast &quot;application/x-troff-me&quot;" line="152" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-troff-me"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXTroffMe>
		<MessageRfc822 public="1" get="inline" set="null" expr="cast &quot;message/rfc822&quot;" line="153" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "message/rfc822"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MessageRfc822>
		<ApplicationXMif public="1" get="inline" set="null" expr="cast &quot;application/x-mif&quot;" line="154" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-mif"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXMif>
		<WwwMime public="1" get="inline" set="null" expr="cast &quot;www/mime&quot;" line="155" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "www/mime"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WwwMime>
		<AudioXVndAudioexplosionMjuicemediafile public="1" get="inline" set="null" expr="cast &quot;audio/x-vnd.audioexplosion.mjuicemediafile&quot;" line="156" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-vnd.audioexplosion.mjuicemediafile"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXVndAudioexplosionMjuicemediafile>
		<VideoXMotionJpeg public="1" get="inline" set="null" expr="cast &quot;video/x-motion-jpeg&quot;" line="157" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-motion-jpeg"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoXMotionJpeg>
		<ApplicationBase64 public="1" get="inline" set="null" expr="cast &quot;application/base64&quot;" line="158" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/base64"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationBase64>
		<AudioMod public="1" get="inline" set="null" expr="cast &quot;audio/mod&quot;" line="159" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/mod"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioMod>
		<VideoQuicktime public="1" get="inline" set="null" expr="cast &quot;video/quicktime&quot;" line="160" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/quicktime"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoQuicktime>
		<VideoXSgiMovie public="1" get="inline" set="null" expr="cast &quot;video/x-sgi-movie&quot;" line="161" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-sgi-movie"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoXSgiMovie>
		<AudioMpeg3 public="1" get="inline" set="null" expr="cast &quot;audio/mpeg3&quot;" line="162" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/mpeg3"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioMpeg3>
		<ApplicationXProject public="1" get="inline" set="null" expr="cast &quot;application/x-project&quot;" line="163" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-project"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXProject>
		<ApplicationVndMsProject public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-project&quot;" line="164" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.ms-project"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndMsProject>
		<ApplicationMarc public="1" get="inline" set="null" expr="cast &quot;application/marc&quot;" line="165" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/marc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationMarc>
		<ApplicationXTroffMs public="1" get="inline" set="null" expr="cast &quot;application/x-troff-ms&quot;" line="166" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-troff-ms"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXTroffMs>
		<ApplicationXVndAudioexplosionMzz public="1" get="inline" set="null" expr="cast &quot;application/x-vnd.audioexplosion.mzz&quot;" line="167" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-vnd.audioexplosion.mzz"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXVndAudioexplosionMzz>
		<ImageNaplps public="1" get="inline" set="null" expr="cast &quot;image/naplps&quot;" line="168" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/naplps"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageNaplps>
		<ApplicationVndNokiaConfigurationMessage public="1" get="inline" set="null" expr="cast &quot;application/vnd.nokia.configuration-message&quot;" line="169" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.nokia.configuration-message"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndNokiaConfigurationMessage>
		<ImageXNiff public="1" get="inline" set="null" expr="cast &quot;image/x-niff&quot;" line="170" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-niff"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXNiff>
		<ApplicationXMixTransfer public="1" get="inline" set="null" expr="cast &quot;application/x-mix-transfer&quot;" line="171" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-mix-transfer"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXMixTransfer>
		<ApplicationXConference public="1" get="inline" set="null" expr="cast &quot;application/x-conference&quot;" line="172" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-conference"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXConference>
		<ApplicationXNavidoc public="1" get="inline" set="null" expr="cast &quot;application/x-navidoc&quot;" line="173" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-navidoc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXNavidoc>
		<ApplicationOda public="1" get="inline" set="null" expr="cast &quot;application/oda&quot;" line="174" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/oda"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationOda>
		<ApplicationXOmc public="1" get="inline" set="null" expr="cast &quot;application/x-omc&quot;" line="175" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-omc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXOmc>
		<ApplicationXOmcdatamaker public="1" get="inline" set="null" expr="cast &quot;application/x-omcdatamaker&quot;" line="176" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-omcdatamaker"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXOmcdatamaker>
		<ApplicationXOmcregerator public="1" get="inline" set="null" expr="cast &quot;application/x-omcregerator&quot;" line="177" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-omcregerator"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXOmcregerator>
		<TextXPascal public="1" get="inline" set="null" expr="cast &quot;text/x-pascal&quot;" line="178" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-pascal"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXPascal>
		<ApplicationPkcs10 public="1" get="inline" set="null" expr="cast &quot;application/pkcs10&quot;" line="179" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkcs10"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationPkcs10>
		<ApplicationPkcs12 public="1" get="inline" set="null" expr="cast &quot;application/pkcs-12&quot;" line="180" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkcs-12"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationPkcs12>
		<ApplicationXPkcs7Signature public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-signature&quot;" line="181" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-pkcs7-signature"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXPkcs7Signature>
		<ApplicationPkcs7Mime public="1" get="inline" set="null" expr="cast &quot;application/pkcs7-mime&quot;" line="182" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkcs7-mime"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationPkcs7Mime>
		<ApplicationXPkcs7Certreqresp public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-certreqresp&quot;" line="183" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-pkcs7-certreqresp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXPkcs7Certreqresp>
		<ApplicationPkcs7Signature public="1" get="inline" set="null" expr="cast &quot;application/pkcs7-signature&quot;" line="184" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkcs7-signature"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationPkcs7Signature>
		<ApplicationPro_eng public="1" get="inline" set="null" expr="cast &quot;application/pro_eng&quot;" line="185" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pro_eng"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationPro_eng>
		<TextPascal public="1" get="inline" set="null" expr="cast &quot;text/pascal&quot;" line="186" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/pascal"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextPascal>
		<ImageXPortableBitmap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-bitmap&quot;" line="187" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-portable-bitmap"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXPortableBitmap>
		<ApplicationVndHpPcl public="1" get="inline" set="null" expr="cast &quot;application/vnd.hp-pcl&quot;" line="188" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.hp-pcl"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndHpPcl>
		<ImageXPict public="1" get="inline" set="null" expr="cast &quot;image/x-pict&quot;" line="189" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-pict"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXPict>
		<ImageXPcx public="1" get="inline" set="null" expr="cast &quot;image/x-pcx&quot;" line="190" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-pcx"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXPcx>
		<ChemicalXPdb public="1" get="inline" set="null" expr="cast &quot;chemical/x-pdb&quot;" line="191" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "chemical/x-pdb"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ChemicalXPdb>
		<ApplicationPdf public="1" get="inline" set="null" expr="cast &quot;application/pdf&quot;" line="192" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pdf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationPdf>
		<ImageXPortableGraymap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-graymap&quot;" line="193" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-portable-graymap"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXPortableGraymap>
		<ImagePict public="1" get="inline" set="null" expr="cast &quot;image/pict&quot;" line="194" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/pict"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImagePict>
		<ApplicationXNewtonCompatiblePkg public="1" get="inline" set="null" expr="cast &quot;application/x-newton-compatible-pkg&quot;" line="195" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-newton-compatible-pkg"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXNewtonCompatiblePkg>
		<ApplicationVndMsPkiPko public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.pko&quot;" line="196" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.ms-pki.pko"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndMsPkiPko>
		<ApplicationXPixclscript public="1" get="inline" set="null" expr="cast &quot;application/x-pixclscript&quot;" line="197" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-pixclscript"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXPixclscript>
		<ImageXXpixmap public="1" get="inline" set="null" expr="cast &quot;image/x-xpixmap&quot;" line="198" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-xpixmap"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXXpixmap>
		<ApplicationXPagemaker public="1" get="inline" set="null" expr="cast &quot;application/x-pagemaker&quot;" line="199" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-pagemaker"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXPagemaker>
		<ImagePng public="1" get="inline" set="null" expr="cast &quot;image/png&quot;" line="200" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/png"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImagePng>
		<ApplicationXPortableAnymap public="1" get="inline" set="null" expr="cast &quot;application/x-portable-anymap&quot;" line="201" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-portable-anymap"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXPortableAnymap>
		<ApplicationMspowerpoint public="1" get="inline" set="null" expr="cast &quot;application/mspowerpoint&quot;" line="202" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mspowerpoint"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationMspowerpoint>
		<ModelXPov public="1" get="inline" set="null" expr="cast &quot;model/x-pov&quot;" line="203" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "model/x-pov"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ModelXPov>
		<ApplicationVndMsPowerpoint public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-powerpoint&quot;" line="204" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.ms-powerpoint"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndMsPowerpoint>
		<ImageXPortablePixmap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-pixmap&quot;" line="205" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-portable-pixmap"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXPortablePixmap>
		<ApplicationXFreelance public="1" get="inline" set="null" expr="cast &quot;application/x-freelance&quot;" line="206" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-freelance"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXFreelance>
		<PaleovuXPv public="1" get="inline" set="null" expr="cast &quot;paleovu/x-pv&quot;" line="207" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "paleovu/x-pv"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PaleovuXPv>
		<TextXScriptPhyton public="1" get="inline" set="null" expr="cast &quot;text/x-script.phyton&quot;" line="208" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script.phyton"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXScriptPhyton>
		<ApplicationXBytecodePython public="1" get="inline" set="null" expr="cast &quot;application/x-bytecode.python&quot;" line="209" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bytecode.python"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXBytecodePython>
		<AudioVndQcelp public="1" get="inline" set="null" expr="cast &quot;audio/vnd.qcelp&quot;" line="210" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/vnd.qcelp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioVndQcelp>
		<ImageXQuicktime public="1" get="inline" set="null" expr="cast &quot;image/x-quicktime&quot;" line="211" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-quicktime"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXQuicktime>
		<VideoXQtc public="1" get="inline" set="null" expr="cast &quot;video/x-qtc&quot;" line="212" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-qtc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoXQtc>
		<AudioXPnRealaudio public="1" get="inline" set="null" expr="cast &quot;audio/x-pn-realaudio&quot;" line="213" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-pn-realaudio"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXPnRealaudio>
		<ApplicationXCmuRaster public="1" get="inline" set="null" expr="cast &quot;application/x-cmu-raster&quot;" line="214" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-cmu-raster"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXCmuRaster>
		<ImageCmuRaster public="1" get="inline" set="null" expr="cast &quot;image/cmu-raster&quot;" line="215" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/cmu-raster"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageCmuRaster>
		<TextXScriptRexx public="1" get="inline" set="null" expr="cast &quot;text/x-script.rexx&quot;" line="216" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script.rexx"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXScriptRexx>
		<ImageVndRnRealflash public="1" get="inline" set="null" expr="cast &quot;image/vnd.rn-realflash&quot;" line="217" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.rn-realflash"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageVndRnRealflash>
		<ImageXRgb public="1" get="inline" set="null" expr="cast &quot;image/x-rgb&quot;" line="218" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-rgb"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXRgb>
		<ApplicationVndRnRealmedia public="1" get="inline" set="null" expr="cast &quot;application/vnd.rn-realmedia&quot;" line="219" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.rn-realmedia"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndRnRealmedia>
		<AudioMid public="1" get="inline" set="null" expr="cast &quot;audio/mid&quot;" line="220" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/mid"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioMid>
		<ApplicationRingingTones public="1" get="inline" set="null" expr="cast &quot;application/ringing-tones&quot;" line="221" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/ringing-tones"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationRingingTones>
		<ApplicationVndRnRealplayer public="1" get="inline" set="null" expr="cast &quot;application/vnd.rn-realplayer&quot;" line="222" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.rn-realplayer"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndRnRealplayer>
		<ApplicationXTroff public="1" get="inline" set="null" expr="cast &quot;application/x-troff&quot;" line="223" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-troff"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXTroff>
		<ImageVndRnRealpix public="1" get="inline" set="null" expr="cast &quot;image/vnd.rn-realpix&quot;" line="224" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.rn-realpix"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageVndRnRealpix>
		<AudioXPnRealaudioPlugin public="1" get="inline" set="null" expr="cast &quot;audio/x-pn-realaudio-plugin&quot;" line="225" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-pn-realaudio-plugin"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXPnRealaudioPlugin>
		<TextRichtext public="1" get="inline" set="null" expr="cast &quot;text/richtext&quot;" line="226" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/richtext"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextRichtext>
		<ApplicationRtf public="1" get="inline" set="null" expr="cast &quot;application/rtf&quot;" line="227" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/rtf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationRtf>
		<VideoVndRnRealvideo public="1" get="inline" set="null" expr="cast &quot;video/vnd.rn-realvideo&quot;" line="228" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/vnd.rn-realvideo"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoVndRnRealvideo>
		<AudioS3m public="1" get="inline" set="null" expr="cast &quot;audio/s3m&quot;" line="229" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/s3m"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioS3m>
		<ApplicationXTbook public="1" get="inline" set="null" expr="cast &quot;application/x-tbook&quot;" line="230" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-tbook"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXTbook>
		<ApplicationXLotusscreencam public="1" get="inline" set="null" expr="cast &quot;application/x-lotusscreencam&quot;" line="231" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-lotusscreencam"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXLotusscreencam>
		<ApplicationSdp public="1" get="inline" set="null" expr="cast &quot;application/sdp&quot;" line="232" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/sdp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationSdp>
		<ApplicationSounder public="1" get="inline" set="null" expr="cast &quot;application/sounder&quot;" line="233" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/sounder"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationSounder>
		<ApplicationSea public="1" get="inline" set="null" expr="cast &quot;application/sea&quot;" line="234" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/sea"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationSea>
		<ApplicationSet public="1" get="inline" set="null" expr="cast &quot;application/set&quot;" line="235" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/set"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationSet>
		<AudioXPsid public="1" get="inline" set="null" expr="cast &quot;audio/x-psid&quot;" line="236" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-psid"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXPsid>
		<ApplicationXSit public="1" get="inline" set="null" expr="cast &quot;application/x-sit&quot;" line="237" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-sit"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXSit>
		<ApplicationXKoan public="1" get="inline" set="null" expr="cast &quot;application/x-koan&quot;" line="238" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-koan"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXKoan>
		<ApplicationXSeelogo public="1" get="inline" set="null" expr="cast &quot;application/x-seelogo&quot;" line="239" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-seelogo"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXSeelogo>
		<ApplicationSmil public="1" get="inline" set="null" expr="cast &quot;application/smil&quot;" line="240" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/smil"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationSmil>
		<ApplicationSolids public="1" get="inline" set="null" expr="cast &quot;application/solids&quot;" line="241" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/solids"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationSolids>
		<ApplicationXPkcs7Certificates public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-certificates&quot;" line="242" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-pkcs7-certificates"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXPkcs7Certificates>
		<ApplicationFuturesplash public="1" get="inline" set="null" expr="cast &quot;application/futuresplash&quot;" line="243" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/futuresplash"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationFuturesplash>
		<ApplicationXSprite public="1" get="inline" set="null" expr="cast &quot;application/x-sprite&quot;" line="244" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-sprite"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXSprite>
		<ApplicationXWaisSource public="1" get="inline" set="null" expr="cast &quot;application/x-wais-source&quot;" line="245" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-wais-source"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXWaisSource>
		<TextXServerParsedHtml public="1" get="inline" set="null" expr="cast &quot;text/x-server-parsed-html&quot;" line="246" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-server-parsed-html"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXServerParsedHtml>
		<ApplicationStreamingmedia public="1" get="inline" set="null" expr="cast &quot;application/streamingmedia&quot;" line="247" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/streamingmedia"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationStreamingmedia>
		<ApplicationVndMsPkiCertstore public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.certstore&quot;" line="248" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.ms-pki.certstore"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndMsPkiCertstore>
		<ApplicationStep public="1" get="inline" set="null" expr="cast &quot;application/step&quot;" line="249" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/step"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationStep>
		<ApplicationSla public="1" get="inline" set="null" expr="cast &quot;application/sla&quot;" line="250" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/sla"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationSla>
		<ApplicationXSv4cpio public="1" get="inline" set="null" expr="cast &quot;application/x-sv4cpio&quot;" line="251" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-sv4cpio"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXSv4cpio>
		<ApplicationXSv4crc public="1" get="inline" set="null" expr="cast &quot;application/x-sv4crc&quot;" line="252" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-sv4crc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXSv4crc>
		<ImageVndDwg public="1" get="inline" set="null" expr="cast &quot;image/vnd.dwg&quot;" line="253" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.dwg"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageVndDwg>
		<ApplicationXWorld public="1" get="inline" set="null" expr="cast &quot;application/x-world&quot;" line="254" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-world"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXWorld>
		<ApplicationXShockwaveFlash public="1" get="inline" set="null" expr="cast &quot;application/x-shockwave-flash&quot;" line="255" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-shockwave-flash"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXShockwaveFlash>
		<TextXSpeech public="1" get="inline" set="null" expr="cast &quot;text/x-speech&quot;" line="256" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-speech"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXSpeech>
		<ApplicationXTar public="1" get="inline" set="null" expr="cast &quot;application/x-tar&quot;" line="257" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-tar"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXTar>
		<ApplicationToolbook public="1" get="inline" set="null" expr="cast &quot;application/toolbook&quot;" line="258" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/toolbook"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationToolbook>
		<ApplicationXTcl public="1" get="inline" set="null" expr="cast &quot;application/x-tcl&quot;" line="259" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-tcl"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXTcl>
		<TextXScriptTcsh public="1" get="inline" set="null" expr="cast &quot;text/x-script.tcsh&quot;" line="260" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script.tcsh"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXScriptTcsh>
		<ApplicationXTex public="1" get="inline" set="null" expr="cast &quot;application/x-tex&quot;" line="261" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-tex"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXTex>
		<ApplicationXTexinfo public="1" get="inline" set="null" expr="cast &quot;application/x-texinfo&quot;" line="262" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-texinfo"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXTexinfo>
		<ApplicationGnutar public="1" get="inline" set="null" expr="cast &quot;application/gnutar&quot;" line="263" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/gnutar"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationGnutar>
		<ImageTiff public="1" get="inline" set="null" expr="cast &quot;image/tiff&quot;" line="264" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/tiff"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageTiff>
		<AudioTspAudio public="1" get="inline" set="null" expr="cast &quot;audio/tsp-audio&quot;" line="265" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/tsp-audio"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioTspAudio>
		<ApplicationDsptype public="1" get="inline" set="null" expr="cast &quot;application/dsptype&quot;" line="266" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/dsptype"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationDsptype>
		<TextTabSeparatedValues public="1" get="inline" set="null" expr="cast &quot;text/tab-separated-values&quot;" line="267" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/tab-separated-values"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextTabSeparatedValues>
		<TextXUil public="1" get="inline" set="null" expr="cast &quot;text/x-uil&quot;" line="268" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-uil"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXUil>
		<TextUriList public="1" get="inline" set="null" expr="cast &quot;text/uri-list&quot;" line="269" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/uri-list"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextUriList>
		<ApplicationIDeas public="1" get="inline" set="null" expr="cast &quot;application/i-deas&quot;" line="270" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/i-deas"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationIDeas>
		<ApplicationXUstar public="1" get="inline" set="null" expr="cast &quot;application/x-ustar&quot;" line="271" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-ustar"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXUstar>
		<TextXUuencode public="1" get="inline" set="null" expr="cast &quot;text/x-uuencode&quot;" line="272" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-uuencode"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXUuencode>
		<ApplicationXCdlink public="1" get="inline" set="null" expr="cast &quot;application/x-cdlink&quot;" line="273" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-cdlink"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXCdlink>
		<TextXVcalendar public="1" get="inline" set="null" expr="cast &quot;text/x-vcalendar&quot;" line="274" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-vcalendar"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXVcalendar>
		<ApplicationVda public="1" get="inline" set="null" expr="cast &quot;application/vda&quot;" line="275" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vda"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVda>
		<VideoVdo public="1" get="inline" set="null" expr="cast &quot;video/vdo&quot;" line="276" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/vdo"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoVdo>
		<ApplicationGroupwise public="1" get="inline" set="null" expr="cast &quot;application/groupwise&quot;" line="277" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/groupwise"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationGroupwise>
		<VideoVivo public="1" get="inline" set="null" expr="cast &quot;video/vivo&quot;" line="278" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/vivo"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoVivo>
		<ApplicationVocaltecMediaDesc public="1" get="inline" set="null" expr="cast &quot;application/vocaltec-media-desc&quot;" line="279" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vocaltec-media-desc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVocaltecMediaDesc>
		<ApplicationVocaltecMediaFile public="1" get="inline" set="null" expr="cast &quot;application/vocaltec-media-file&quot;" line="280" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vocaltec-media-file"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVocaltecMediaFile>
		<AudioVoc public="1" get="inline" set="null" expr="cast &quot;audio/voc&quot;" line="281" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/voc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioVoc>
		<VideoVosaic public="1" get="inline" set="null" expr="cast &quot;video/vosaic&quot;" line="282" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/vosaic"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoVosaic>
		<AudioVoxware public="1" get="inline" set="null" expr="cast &quot;audio/voxware&quot;" line="283" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/voxware"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioVoxware>
		<AudioXTwinvqPlugin public="1" get="inline" set="null" expr="cast &quot;audio/x-twinvq-plugin&quot;" line="284" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-twinvq-plugin"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXTwinvqPlugin>
		<AudioXTwinvq public="1" get="inline" set="null" expr="cast &quot;audio/x-twinvq&quot;" line="285" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-twinvq"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXTwinvq>
		<ApplicationXVrml public="1" get="inline" set="null" expr="cast &quot;application/x-vrml&quot;" line="286" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-vrml"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXVrml>
		<XWorldXVrt public="1" get="inline" set="null" expr="cast &quot;x-world/x-vrt&quot;" line="287" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "x-world/x-vrt"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XWorldXVrt>
		<ApplicationXVisio public="1" get="inline" set="null" expr="cast &quot;application/x-visio&quot;" line="288" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-visio"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXVisio>
		<ApplicationWordperfect60 public="1" get="inline" set="null" expr="cast &quot;application/wordperfect6.0&quot;" line="289" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/wordperfect6.0"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationWordperfect60>
		<ApplicationWordperfect61 public="1" get="inline" set="null" expr="cast &quot;application/wordperfect6.1&quot;" line="290" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/wordperfect6.1"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationWordperfect61>
		<AudioWav public="1" get="inline" set="null" expr="cast &quot;audio/wav&quot;" line="291" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/wav"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioWav>
		<ApplicationXQpro public="1" get="inline" set="null" expr="cast &quot;application/x-qpro&quot;" line="292" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-qpro"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXQpro>
		<ImageVndWapWbmp public="1" get="inline" set="null" expr="cast &quot;image/vnd.wap.wbmp&quot;" line="293" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.wap.wbmp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageVndWapWbmp>
		<ApplicationVndXara public="1" get="inline" set="null" expr="cast &quot;application/vnd.xara&quot;" line="294" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.xara"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndXara>
		<ImageWebp public="1" get="inline" set="null" expr="cast &quot;image/webp&quot;" line="295" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/webp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageWebp>
		<ApplicationX123 public="1" get="inline" set="null" expr="cast &quot;application/x-123&quot;" line="296" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-123"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationX123>
		<WindowsMetafile public="1" get="inline" set="null" expr="cast &quot;windows/metafile&quot;" line="297" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "windows/metafile"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WindowsMetafile>
		<TextVndWapWml public="1" get="inline" set="null" expr="cast &quot;text/vnd.wap.wml&quot;" line="298" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/vnd.wap.wml"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextVndWapWml>
		<ApplicationVndWapWmlc public="1" get="inline" set="null" expr="cast &quot;application/vnd.wap.wmlc&quot;" line="299" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.wap.wmlc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndWapWmlc>
		<TextVndWapWmlscript public="1" get="inline" set="null" expr="cast &quot;text/vnd.wap.wmlscript&quot;" line="300" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/vnd.wap.wmlscript"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextVndWapWmlscript>
		<ApplicationVndWapWmlscriptc public="1" get="inline" set="null" expr="cast &quot;application/vnd.wap.wmlscriptc&quot;" line="301" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.wap.wmlscriptc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndWapWmlscriptc>
		<ApplicationWordperfect public="1" get="inline" set="null" expr="cast &quot;application/wordperfect&quot;" line="302" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/wordperfect"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationWordperfect>
		<ApplicationXLotus public="1" get="inline" set="null" expr="cast &quot;application/x-lotus&quot;" line="303" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-lotus"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXLotus>
		<ApplicationMswrite public="1" get="inline" set="null" expr="cast &quot;application/mswrite&quot;" line="304" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mswrite"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationMswrite>
		<ModelVrml public="1" get="inline" set="null" expr="cast &quot;model/vrml&quot;" line="305" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "model/vrml"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ModelVrml>
		<TextScriplet public="1" get="inline" set="null" expr="cast &quot;text/scriplet&quot;" line="306" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/scriplet"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextScriplet>
		<ApplicationXWintalk public="1" get="inline" set="null" expr="cast &quot;application/x-wintalk&quot;" line="307" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-wintalk"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXWintalk>
		<ImageXXbitmap public="1" get="inline" set="null" expr="cast &quot;image/x-xbitmap&quot;" line="308" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-xbitmap"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXXbitmap>
		<VideoXAmtDemorun public="1" get="inline" set="null" expr="cast &quot;video/x-amt-demorun&quot;" line="309" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-amt-demorun"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoXAmtDemorun>
		<XglDrawing public="1" get="inline" set="null" expr="cast &quot;xgl/drawing&quot;" line="310" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "xgl/drawing"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XglDrawing>
		<ImageVndXiff public="1" get="inline" set="null" expr="cast &quot;image/vnd.xiff&quot;" line="311" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.xiff"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageVndXiff>
		<ApplicationExcel public="1" get="inline" set="null" expr="cast &quot;application/excel&quot;" line="312" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/excel"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationExcel>
		<AudioXm public="1" get="inline" set="null" expr="cast &quot;audio/xm&quot;" line="313" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/xm"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXm>
		<ApplicationXml public="1" get="inline" set="null" expr="cast &quot;application/xml&quot;" line="314" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/xml"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXml>
		<XglMovie public="1" get="inline" set="null" expr="cast &quot;xgl/movie&quot;" line="315" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "xgl/movie"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XglMovie>
		<ApplicationXVndLsXpix public="1" get="inline" set="null" expr="cast &quot;application/x-vnd.ls-xpix&quot;" line="316" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-vnd.ls-xpix"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXVndLsXpix>
		<VideoXAmtShowrun public="1" get="inline" set="null" expr="cast &quot;video/x-amt-showrun&quot;" line="317" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-amt-showrun"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoXAmtShowrun>
		<ImageXXwd public="1" get="inline" set="null" expr="cast &quot;image/x-xwd&quot;" line="318" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-xwd"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXXwd>
		<ApplicationXCompress public="1" get="inline" set="null" expr="cast &quot;application/x-compress&quot;" line="319" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-compress"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXCompress>
		<MultipartXZip public="1" get="inline" set="null" expr="cast &quot;multipart/x-zip&quot;" line="320" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "multipart/x-zip"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MultipartXZip>
		<TextXScriptZsh public="1" get="inline" set="null" expr="cast &quot;text/x-script.zsh&quot;" line="321" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script.zsh"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXScriptZsh>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="haxe.io.Path" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Path.hx">
		<withoutExtension public="1" set="method" line="123" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String representation of `path` without the file extension.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</withoutExtension>
		<withoutDirectory public="1" set="method" line="134" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String representation of `path` without the directory.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</withoutDirectory>
		<directory public="1" set="method" line="147" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the directory of `path`.

		If the directory is `null`, the empty String `""` is returned.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</directory>
		<extension public="1" set="method" line="161" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the extension of `path`.

		If the extension is `null`, the empty String `""` is returned.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</extension>
		<withExtension public="1" set="method" line="175" static="1">
			<f a="path:ext">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String representation of `path` where the extension is `ext`.

		If `path` has no extension, `ext` is added as extension.

		If `path` or `ext` are `null`, the result is unspecified.</haxe_doc>
		</withExtension>
		<join public="1" set="method" line="189" static="1">
			<f a="paths">
				<c path="Array"><c path="String"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all paths in `paths` together.

		If `paths` is empty, the empty String `""` is returned. Otherwise the
		paths are joined with a slash between them.

		If `paths` is `null`, the result is unspecified.</haxe_doc>
		</join>
		<normalize public="1" set="method" line="210" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Normalize a given `path` (e.g. turn `'/usr/local/../lib'` into `'/usr/lib'`).

		Also replaces backslashes `\` with slashes `/` and afterwards turns
		multiple slashes into a single one.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</normalize>
		<addTrailingSlash public="1" set="method" line="260" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Adds a trailing slash to `path`, if it does not have one already.

		If the last slash in `path` is a backslash, a backslash is appended to
		`path`.

		If the last slash in `path` is a slash, or if no slash is found, a slash
		is appended to `path`. In particular, this applies to the empty String
		`""`.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</addTrailingSlash>
		<removeTrailingSlashes public="1" set="method" line="285" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":require"><e><![CDATA[haxe_ver >= 3.1]]></e></m></meta>
			<haxe_doc>Removes trailing slashes from `path`.

		If `path` does not end with a `/` or `\`, `path` is returned unchanged.

		Otherwise the substring of `path` excluding the trailing slashes or
		backslashes is returned.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</removeTrailingSlashes>
		<isAbsolute public="1" set="method" line="299" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":require"><e><![CDATA[haxe_ver >= 3.2]]></e></m></meta>
			<haxe_doc>Returns `true` if the path is an absolute path, and `false` otherwise.</haxe_doc>
		</isAbsolute>
		<unescape set="method" line="306" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></unescape>
		<escape set="method" line="311" static="1">
			<f a="path:?allowSlashes" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ allowSlashes : false }</e></m></meta>
		</escape>
		<dir public="1">
			<c path="String"/>
			<haxe_doc>The directory.

		This is the leading part of the path that is not part of the file name
		and the extension.

		Does not end with a `/` or `\` separator.

		If the path has no directory, the value is `null`.</haxe_doc>
		</dir>
		<file public="1">
			<c path="String"/>
			<haxe_doc>The file name.

		This is the part of the part between the directory and the extension.

		If there is no file name, e.g. for `".htaccess"` or `"/dir/"`, the value
		is the empty String `""`.</haxe_doc>
		</file>
		<ext public="1">
			<c path="String"/>
			<haxe_doc>The file extension.

		It is separated from the file name by a dot. This dot is not part of
		the extension.

		If the path has no extension, the value is `null`.</haxe_doc>
		</ext>
		<backslash public="1">
			<x path="Bool"/>
			<haxe_doc>`true` if the last directory separator is a backslash, `false` otherwise.</haxe_doc>
		</backslash>
		<toString public="1" set="method" line="114">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of `this` path.

		If `this.backslash` is `true`, backslash is used as directory separator,
		otherwise slash is used. This only affects the separator between
		`this.dir` and `this.file`.

		If `this.directory` or `this.extension` is `null`, their representation
		is the empty String `""`.</haxe_doc>
		</toString>
		<new public="1" set="method" line="76">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new `Path` instance by parsing `path`.

		Path information can be retrieved by accessing the `dir`, `file` and `ext`
		properties.</haxe_doc>
		</new>
		<haxe_doc>This class provides a convenient way of working with paths. It supports the
	common path formats:

	- `directory1/directory2/filename.extension`
	- `directory1\directory2\filename.extension`</haxe_doc>
	</class>
	<abstract path="haxe.io.Scheme" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Scheme.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>The scheme consists of a sequence of characters beginning with a letter and followed by any combination of letters, digits, plus (+), period (.), or hyphen (-). Although schemes are case-insensitive, the canonical form is lowercase and documents that specify schemes must do so with lowercase letters. It is followed by a colon (:).</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.io._Scheme.Scheme_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Scheme.hx" private="1" module="haxe.io.Scheme" extern="1">
	<Http public="1" get="inline" set="null" expr="cast &quot;http&quot;" line="7" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "http"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Http>
	<Https public="1" get="inline" set="null" expr="cast &quot;https&quot;" line="8" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "https"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Https>
	<Ftp public="1" get="inline" set="null" expr="cast &quot;ftp&quot;" line="9" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "ftp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Ftp>
	<MailTo public="1" get="inline" set="null" expr="cast &quot;mailto&quot;" line="10" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "mailto"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MailTo>
	<File public="1" get="inline" set="null" expr="cast &quot;file&quot;" line="11" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "file"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</File>
	<Data public="1" get="inline" set="null" expr="cast &quot;data&quot;" line="12" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "data"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Data>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io._Scheme.Scheme_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Scheme.hx" private="1" module="haxe.io.Scheme" extern="1">
		<Http public="1" get="inline" set="null" expr="cast &quot;http&quot;" line="7" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "http"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Http>
		<Https public="1" get="inline" set="null" expr="cast &quot;https&quot;" line="8" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "https"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Https>
		<Ftp public="1" get="inline" set="null" expr="cast &quot;ftp&quot;" line="9" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "ftp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Ftp>
		<MailTo public="1" get="inline" set="null" expr="cast &quot;mailto&quot;" line="10" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "mailto"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MailTo>
		<File public="1" get="inline" set="null" expr="cast &quot;file&quot;" line="11" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "file"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</File>
		<Data public="1" get="inline" set="null" expr="cast &quot;data&quot;" line="12" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "data"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Data>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="haxe.io.StringInput" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/StringInput.hx">
		<extends path="haxe.io.BytesInput"/>
		<new public="1" set="method" line="26"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="haxe.io.UInt16ArrayData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/UInt16Array.hx" module="haxe.io.UInt16Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.UInt16Array" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/UInt16Array.hx">
		<this><t path="haxe.io.UInt16ArrayData"/></this>
		<impl><class path="haxe.io._UInt16Array.UInt16Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/UInt16Array.hx" private="1" module="haxe.io.UInt16Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>2</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<get_length get="inline" set="null" line="36" static="1">
		<f a="this">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="40" static="1">
		<f a="this">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="44" static="1">
		<f a="this:index">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="48" static="1">
		<f a="this:index:value">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="56" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="60" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="64" static="1">
		<f a="this">
			<t path="haxe.io.UInt16ArrayData"/>
			<t path="haxe.io.UInt16ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="haxe.io.UInt16Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="72" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="81" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._UInt16Array.UInt16Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/UInt16Array.hx" private="1" module="haxe.io.UInt16Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<get_length get="inline" set="null" line="36" static="1">
			<f a="this">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="40" static="1">
			<f a="this">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="44" static="1">
			<f a="this:index">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="48" static="1">
			<f a="this:index:value">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="56" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="60" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="64" static="1">
			<f a="this">
				<t path="haxe.io.UInt16ArrayData"/>
				<t path="haxe.io.UInt16ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="haxe.io.UInt16Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="72" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="81" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
	</class>
	<typedef path="haxe.io.UInt32ArrayData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/UInt32Array.hx" module="haxe.io.UInt32Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.UInt32Array" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/UInt32Array.hx">
		<this><t path="haxe.io.UInt32ArrayData"/></this>
		<impl><class path="haxe.io._UInt32Array.UInt32Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/UInt32Array.hx" private="1" module="haxe.io.UInt32Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<get_length get="inline" set="null" line="36" static="1">
		<f a="this">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="40" static="1">
		<f a="this">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="44" static="1">
		<f a="this:index">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="48" static="1">
		<f a="this:index:value">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="56" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="60" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="64" static="1">
		<f a="this">
			<t path="haxe.io.UInt32ArrayData"/>
			<t path="haxe.io.UInt32ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="haxe.io.UInt32Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="72" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="UInt"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="81" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._UInt32Array.UInt32Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/UInt32Array.hx" private="1" module="haxe.io.UInt32Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<get_length get="inline" set="null" line="36" static="1">
			<f a="this">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="40" static="1">
			<f a="this">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="44" static="1">
			<f a="this:index">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="48" static="1">
			<f a="this:index:value">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="56" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="60" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="64" static="1">
			<f a="this">
				<t path="haxe.io.UInt32ArrayData"/>
				<t path="haxe.io.UInt32ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="haxe.io.UInt32Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="72" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="UInt"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="81" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
	</class>
	<typedef path="haxe.io.UInt8ArrayData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/UInt8Array.hx" module="haxe.io.UInt8Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.UInt8Array" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/UInt8Array.hx">
		<this><t path="haxe.io.UInt8ArrayData"/></this>
		<impl><class path="haxe.io._UInt8Array.UInt8Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/UInt8Array.hx" private="1" module="haxe.io.UInt8Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>1</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<get_length get="inline" set="null" line="36" static="1">
		<f a="this">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="40" static="1">
		<f a="this">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="44" static="1">
		<f a="this:index">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="48" static="1">
		<f a="this:index:value">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="56" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="60" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="64" static="1">
		<f a="this">
			<t path="haxe.io.UInt8ArrayData"/>
			<t path="haxe.io.UInt8ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="haxe.io.UInt8Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="72" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="81" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
</class></impl>
	</abstract>
	<class path="haxe.io._UInt8Array.UInt8Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/UInt8Array.hx" private="1" module="haxe.io.UInt8Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<get_length get="inline" set="null" line="36" static="1">
			<f a="this">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="40" static="1">
			<f a="this">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="44" static="1">
			<f a="this:index">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="48" static="1">
			<f a="this:index:value">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="56" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="60" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="64" static="1">
			<f a="this">
				<t path="haxe.io.UInt8ArrayData"/>
				<t path="haxe.io.UInt8ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="haxe.io.UInt8Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="72" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="81" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
	</class>
	<class path="haxe.iterators.MapKeyValueIterator" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/iterators/MapKeyValueIterator.hx">
		<map><c path="haxe.IMap">
	<c path="haxe.iterators.MapKeyValueIterator.K"/>
	<c path="haxe.iterators.MapKeyValueIterator.V"/>
</c></map>
		<keys><t path="Iterator"><c path="haxe.iterators.MapKeyValueIterator.K"/></t></keys>
		<hasNext public="1" get="inline" set="null" line="42">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="49">
			<f a=""><a>
	<value><c path="haxe.iterators.MapKeyValueIterator.V"/></value>
	<key><c path="haxe.iterators.MapKeyValueIterator.K"/></key>
</a></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="34"><f a="map">
	<c path="haxe.IMap">
		<c path="haxe.iterators.MapKeyValueIterator.K"/>
		<c path="haxe.iterators.MapKeyValueIterator.V"/>
	</c>
	<x path="Void"/>
</f></new>
		<haxe_doc>This Key/Value iterator can be used to iterate across maps.</haxe_doc>
		<meta><m n=":ifFeature">
	<e>"anon_read.keyValueIterator"</e>
	<e>"dynamic_read.keyValueIterator"</e>
</m></meta>
	</class>
	<class path="haxe.iterators.StringIteratorUnicode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/iterators/StringIteratorUnicode.hx">
		<unicodeIterator public="1" get="inline" set="null" line="66" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.iterators.StringIteratorUnicode"/>
			</f>
			<haxe_doc>Convenience function which can be used as a static extension.</haxe_doc>
		</unicodeIterator>
		<offset expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</offset>
		<s><c path="String"/></s>
		<hasNext public="1" get="inline" set="null" line="46">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="53">
			<f a=""><x path="Int"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="39">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `StringIteratorUnicode` over String `s`.</haxe_doc>
		</new>
		<haxe_doc>This iterator can be used to iterate across strings in a cross-platform
	way. It handles surrogate pairs on platforms that require it. On each
	iteration, it returns the next character code.

	Note that this has different semantics than a standard for-loop over the
	String's length due to the fact that it deals with surrogate pairs.</haxe_doc>
	</class>
	<class path="haxe.iterators.StringKeyValueIteratorUnicode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/iterators/StringKeyValueIteratorUnicode.hx">
		<unicodeKeyValueIterator public="1" get="inline" set="null" line="69" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.iterators.StringKeyValueIteratorUnicode"/>
			</f>
			<haxe_doc>Convenience function which can be used as a static extension.</haxe_doc>
		</unicodeKeyValueIterator>
		<byteOffset expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</byteOffset>
		<charOffset expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</charOffset>
		<s><c path="String"/></s>
		<hasNext public="1" get="inline" set="null" line="49">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="56">
			<f a=""><a>
	<value><x path="Int"/></value>
	<key><x path="Int"/></key>
</a></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="42">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `StringKeyValueIteratorUnicode` over String `s`.</haxe_doc>
		</new>
		<haxe_doc>This iterator can be used to iterate across strings in a cross-platform
	way. It handles surrogate pairs on platforms that require it. On each
	iteration, it returns the next character offset as key and the next
	character code as value.

	Note that in the general case, because of surrogate pairs, the key values
	should not be used as offsets for various String API operations. For the
	same reason, the last key value returned might be less than `s.length - 1`.</haxe_doc>
	</class>
	<abstract path="haxe.macro.ModuleCheckPolicy" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/CompilationServer.hx" module="haxe.macro.CompilationServer">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.macro._CompilationServer.ModuleCheckPolicy_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/CompilationServer.hx" private="1" module="haxe.macro.CompilationServer" extern="1">
	<NoCheckFileTimeModification public="1" get="inline" set="null" expr="cast 0" line="10" static="1">
		<x path="haxe.macro.ModuleCheckPolicy"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Disables file modification checks, avoiding some filesystem operations.</haxe_doc>
	</NoCheckFileTimeModification>
	<CheckFileContentModification public="1" get="inline" set="null" expr="cast 1" line="16" static="1">
		<x path="haxe.macro.ModuleCheckPolicy"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>If a file is modified, also checks if its content changed. This check
		is not free, but useful when .hx files are auto-generated.</haxe_doc>
	</CheckFileContentModification>
	<NoCheckDependencies public="1" get="inline" set="null" expr="cast 2" line="26" static="1">
		<x path="haxe.macro.ModuleCheckPolicy"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Disables dependency checks of the module.

		This should only be used for modules that don't depend on any module that
		might change. It is effectively a promise to the compiler that the module
		is unaffected by changes made to other modules. If that promise is broken,
		the compiler is sad and things probably stop working.</haxe_doc>
	</NoCheckDependencies>
	<NoCheckShadowing public="1" get="inline" set="null" expr="cast 3" line="33" static="1">
		<x path="haxe.macro.ModuleCheckPolicy"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Disables file shadowing checks. Shadowing can occur when a new file
		is added to a class-path that has higher priority than the class-path
		of the current module file.</haxe_doc>
	</NoCheckShadowing>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.macro._CompilationServer.ModuleCheckPolicy_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/CompilationServer.hx" private="1" module="haxe.macro.CompilationServer" extern="1">
		<NoCheckFileTimeModification public="1" get="inline" set="null" expr="cast 0" line="10" static="1">
			<x path="haxe.macro.ModuleCheckPolicy"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Disables file modification checks, avoiding some filesystem operations.</haxe_doc>
		</NoCheckFileTimeModification>
		<CheckFileContentModification public="1" get="inline" set="null" expr="cast 1" line="16" static="1">
			<x path="haxe.macro.ModuleCheckPolicy"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>If a file is modified, also checks if its content changed. This check
		is not free, but useful when .hx files are auto-generated.</haxe_doc>
		</CheckFileContentModification>
		<NoCheckDependencies public="1" get="inline" set="null" expr="cast 2" line="26" static="1">
			<x path="haxe.macro.ModuleCheckPolicy"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Disables dependency checks of the module.

		This should only be used for modules that don't depend on any module that
		might change. It is effectively a promise to the compiler that the module
		is unaffected by changes made to other modules. If that promise is broken,
		the compiler is sad and things probably stop working.</haxe_doc>
		</NoCheckDependencies>
		<NoCheckShadowing public="1" get="inline" set="null" expr="cast 3" line="33" static="1">
			<x path="haxe.macro.ModuleCheckPolicy"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Disables file shadowing checks. Shadowing can occur when a new file
		is added to a class-path that has higher priority than the class-path
		of the current module file.</haxe_doc>
		</NoCheckShadowing>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="haxe.macro.ContextOptions" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/CompilationServer.hx" module="haxe.macro.CompilationServer">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.macro._CompilationServer.ContextOptions_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/CompilationServer.hx" private="1" module="haxe.macro.CompilationServer" extern="1">
	<NormalContext public="1" get="inline" set="null" expr="cast 0" line="40" static="1">
		<x path="haxe.macro.ContextOptions"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Affects only the normal context.</haxe_doc>
	</NormalContext>
	<MacroContext public="1" get="inline" set="null" expr="cast 1" line="45" static="1">
		<x path="haxe.macro.ContextOptions"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Affects only the macro context.</haxe_doc>
	</MacroContext>
	<NormalAndMacroContext public="1" get="inline" set="null" expr="cast 2" line="50" static="1">
		<x path="haxe.macro.ContextOptions"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Affects the normal and macro contexts.</haxe_doc>
	</NormalAndMacroContext>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.macro._CompilationServer.ContextOptions_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/CompilationServer.hx" private="1" module="haxe.macro.CompilationServer" extern="1">
		<NormalContext public="1" get="inline" set="null" expr="cast 0" line="40" static="1">
			<x path="haxe.macro.ContextOptions"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Affects only the normal context.</haxe_doc>
		</NormalContext>
		<MacroContext public="1" get="inline" set="null" expr="cast 1" line="45" static="1">
			<x path="haxe.macro.ContextOptions"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Affects only the macro context.</haxe_doc>
		</MacroContext>
		<NormalAndMacroContext public="1" get="inline" set="null" expr="cast 2" line="50" static="1">
			<x path="haxe.macro.ContextOptions"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Affects the normal and macro contexts.</haxe_doc>
		</NormalAndMacroContext>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="haxe.macro.CompilationServer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/CompilationServer.hx"><haxe_doc>This class provides some methods which can be invoked from command line using
	`--macro server.field(args)`.</haxe_doc></class>
	<class path="haxe.macro.Compiler" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Compiler.hx">
		<getDefine public="1" set="method" static="1">
			<f a="key">
				<d/>
				<d/>
			</f>
			<haxe_doc>A conditional compiler flag can be set command line using
		`-D key=value`.

		Returns the value of a compiler flag.

		If the compiler flag is defined but no value is set,
		`Compiler.getDefine` returns `"1"` (e.g. `-D key`).

		If the compiler flag is not defined, `Compiler.getDefine` returns
		`null`.

		@see https://haxe.org/manual/lf-condition-compilation.html</haxe_doc>
		</getDefine>
		<haxe_doc>All these methods can be called for compiler configuration macros.</haxe_doc>
		<meta><m n=":hlNative"><e>"macro"</e></m></meta>
	</class>
	<abstract path="haxe.macro.IncludePosition" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.macro._Compiler.IncludePosition_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Compiler.hx" private="1" module="haxe.macro.Compiler" extern="1">
	<Top public="1" get="inline" set="null" expr="cast &quot;top&quot;" line="457" static="1">
		<x path="haxe.macro.IncludePosition"/>
		<meta>
			<m n=":value"><e>cast "top"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Prepend the file content to the output file.</haxe_doc>
	</Top>
	<Closure public="1" get="inline" set="null" expr="cast &quot;closure&quot;" line="463" static="1">
		<x path="haxe.macro.IncludePosition"/>
		<meta>
			<m n=":value"><e>cast "closure"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Prepend the file content to the body of the top-level closure.

		Since the closure is in strict-mode, there may be run-time error if the input is not strict-mode-compatible.</haxe_doc>
	</Closure>
	<Inline public="1" get="inline" set="null" expr="cast &quot;inline&quot;" line="467" static="1">
		<x path="haxe.macro.IncludePosition"/>
		<meta>
			<m n=":value"><e>cast "inline"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Directly inject the file content at the call site.</haxe_doc>
	</Inline>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.macro._Compiler.IncludePosition_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Compiler.hx" private="1" module="haxe.macro.Compiler" extern="1">
		<Top public="1" get="inline" set="null" expr="cast &quot;top&quot;" line="457" static="1">
			<x path="haxe.macro.IncludePosition"/>
			<meta>
				<m n=":value"><e>cast "top"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Prepend the file content to the output file.</haxe_doc>
		</Top>
		<Closure public="1" get="inline" set="null" expr="cast &quot;closure&quot;" line="463" static="1">
			<x path="haxe.macro.IncludePosition"/>
			<meta>
				<m n=":value"><e>cast "closure"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Prepend the file content to the body of the top-level closure.

		Since the closure is in strict-mode, there may be run-time error if the input is not strict-mode-compatible.</haxe_doc>
		</Closure>
		<Inline public="1" get="inline" set="null" expr="cast &quot;inline&quot;" line="467" static="1">
			<x path="haxe.macro.IncludePosition"/>
			<meta>
				<m n=":value"><e>cast "inline"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Directly inject the file content at the call site.</haxe_doc>
		</Inline>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="haxe.macro.ComplexTypeTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/ComplexTypeTools.hx">
		<toString public="1" set="method" line="40" static="1">
			<f a="c">
				<e path="haxe.macro.ComplexType"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts type `c` to a human-readable `String` representation.

		The result is guaranteed to be valid Haxe code, but there may be
		differences from the original lexical syntax.</haxe_doc>
		</toString>
		<haxe_doc>This class provides some utility methods to work with AST-level types. It is
	best used through `using haxe.macro.ComplexTypeTools` syntax and then provides
	additional methods on `haxe.macro.ComplexType` instances.</haxe_doc>
	</class>
	<typedef path="haxe.macro.Position" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<min>
				<x path="Int"/>
				<haxe_doc>Position of the first character.</haxe_doc>
			</min>
			<max>
				<x path="Int"/>
				<haxe_doc>Position of the last character.</haxe_doc>
			</max>
			<file>
				<c path="String"/>
				<haxe_doc>Reference to the filename.</haxe_doc>
			</file>
		</a>
		<haxe_doc>Represents a position in a file.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.Constant" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<CInt a="v">
			<c path="String"/>
			<haxe_doc>Represents an integer literal.</haxe_doc>
		</CInt>
		<CFloat a="f">
			<c path="String"/>
			<haxe_doc>Represents a float literal.</haxe_doc>
		</CFloat>
		<CString a="s">
			<c path="String"/>
			<haxe_doc>Represents a string literal.</haxe_doc>
		</CString>
		<CIdent a="s">
			<c path="String"/>
			<haxe_doc>Represents an identifier.</haxe_doc>
		</CIdent>
		<CRegexp a="r:opt">
			<c path="String"/>
			<c path="String"/>
			<haxe_doc>Represents a regular expression literal.

		Example: `~/haxe/i`
		 * The first argument _haxe_ is a string with regular expression pattern.
		 * The second argument _i_ is a string with regular expression flags.

		@see https://haxe.org/manual/std-regex.html</haxe_doc>
		</CRegexp>
		<haxe_doc>Represents a constant.
	@see https://haxe.org/manual/expression-constants.html</haxe_doc>
	</enum>
	<enum path="haxe.macro.Binop" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpAdd><haxe_doc>`+`</haxe_doc></OpAdd>
		<OpMult><haxe_doc>`*`</haxe_doc></OpMult>
		<OpDiv><haxe_doc>`/`</haxe_doc></OpDiv>
		<OpSub><haxe_doc>`-`</haxe_doc></OpSub>
		<OpAssign><haxe_doc>`=`</haxe_doc></OpAssign>
		<OpEq><haxe_doc>`==`</haxe_doc></OpEq>
		<OpNotEq><haxe_doc>`!=`</haxe_doc></OpNotEq>
		<OpGt><haxe_doc><![CDATA[`>`]]></haxe_doc></OpGt>
		<OpGte><haxe_doc><![CDATA[`>=`]]></haxe_doc></OpGte>
		<OpLt><haxe_doc><![CDATA[`<`]]></haxe_doc></OpLt>
		<OpLte><haxe_doc><![CDATA[`<=`]]></haxe_doc></OpLte>
		<OpAnd><haxe_doc><![CDATA[`&`]]></haxe_doc></OpAnd>
		<OpOr><haxe_doc>`|`</haxe_doc></OpOr>
		<OpXor><haxe_doc>`^`</haxe_doc></OpXor>
		<OpBoolAnd><haxe_doc><![CDATA[`&&`]]></haxe_doc></OpBoolAnd>
		<OpBoolOr><haxe_doc>`||`</haxe_doc></OpBoolOr>
		<OpShl><haxe_doc><![CDATA[`<<`]]></haxe_doc></OpShl>
		<OpShr><haxe_doc><![CDATA[`>>`]]></haxe_doc></OpShr>
		<OpUShr><haxe_doc><![CDATA[`>>>`]]></haxe_doc></OpUShr>
		<OpMod><haxe_doc>`%`</haxe_doc></OpMod>
		<OpAssignOp a="op">
			<e path="haxe.macro.Binop"/>
			<haxe_doc><![CDATA[`+=`
		`-=`
		`/=`
		`*=`
		`<<=`
		`>>=`
		`>>>=`
		`|=`
		`&=`
		`^=`
		`%=`]]></haxe_doc>
		</OpAssignOp>
		<OpInterval><haxe_doc>`...`</haxe_doc></OpInterval>
		<OpArrow><haxe_doc><![CDATA[`=>`]]></haxe_doc></OpArrow>
		<OpIn><haxe_doc>`in`</haxe_doc></OpIn>
		<haxe_doc>A binary operator.
	@see https://haxe.org/manual/types-numeric-operators.html</haxe_doc>
	</enum>
	<enum path="haxe.macro.Unop" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpIncrement><haxe_doc>`++`</haxe_doc></OpIncrement>
		<OpDecrement><haxe_doc>`--`</haxe_doc></OpDecrement>
		<OpNot><haxe_doc>`!`</haxe_doc></OpNot>
		<OpNeg><haxe_doc>`-`</haxe_doc></OpNeg>
		<OpNegBits><haxe_doc>`~`</haxe_doc></OpNegBits>
		<haxe_doc>A unary operator.
	@see https://haxe.org/manual/types-numeric-operators.html</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="haxe.macro.Expr" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.ExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a node in the AST.
	@see https://haxe.org/manual/macro-reification-expression.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<t path="haxe.macro.Expr"/>
		<haxe_doc>Represents a AST node identical to `Expr`, but it allows constraining the
	type of accepted expressions.
	@see https://haxe.org/manual/macro-ExprOf.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Case" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<values>
				<c path="Array"><t path="haxe.macro.Expr"/></c>
				<haxe_doc>The value expressions of the case.</haxe_doc>
			</values>
			<guard>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional guard expressions of the case, if available.</haxe_doc>
			</guard>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<haxe_doc>The expression of the case, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a switch case.
	@see https://haxe.org/manual/expression-switch.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Var" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<haxe_doc>The type-hint of the variable, if available.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<isFinal>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the variable can be assigned to.</haxe_doc>
			</isFinal>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<haxe_doc>The expression of the variable, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a variable in the AST.
	@see https://haxe.org/manual/expression-var.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Catch" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<e path="haxe.macro.ComplexType"/>
				<haxe_doc>The type of the catch.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the catch variable.</haxe_doc>
			</name>
			<expr>
				<t path="haxe.macro.Expr"/>
				<haxe_doc>The expression of the catch.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a catch in the AST.
	@https://haxe.org/manual/expression-try-catch.html</haxe_doc>
	</typedef>
	<enum path="haxe.macro.QuoteStatus" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<Unquoted><haxe_doc>No quotes</haxe_doc></Unquoted>
		<Quoted><haxe_doc>Double quotes `"`</haxe_doc></Quoted>
		<haxe_doc>Represents the way something is quoted.</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="haxe.macro.ObjectField" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<quotes>
				<x path="Null"><e path="haxe.macro.QuoteStatus"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>How the field name is quoted.</haxe_doc>
			</quotes>
			<field>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</field>
			<expr>
				<t path="haxe.macro.Expr"/>
				<haxe_doc>The field expression.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents the field of an object declaration.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.ExprDef" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<EConst a="c">
			<e path="haxe.macro.Constant"/>
			<haxe_doc>A constant.</haxe_doc>
		</EConst>
		<EArray a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Array access `e1[e2]`.</haxe_doc>
		</EArray>
		<EBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Binary operator `e1 op e2`.</haxe_doc>
		</EBinop>
		<EField a="e:field">
			<t path="haxe.macro.Expr"/>
			<c path="String"/>
			<haxe_doc>Field access on `e.field`.</haxe_doc>
		</EField>
		<EParenthesis a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Parentheses `(e)`.</haxe_doc>
		</EParenthesis>
		<EObjectDecl a="fields">
			<c path="Array"><t path="haxe.macro.ObjectField"/></c>
			<haxe_doc>An object declaration.</haxe_doc>
		</EObjectDecl>
		<EArrayDecl a="values">
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>An array declaration `[el]`.</haxe_doc>
		</EArrayDecl>
		<ECall a="e:params">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>A call `e(params)`.</haxe_doc>
		</ECall>
		<ENew a="t:params">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>A constructor call `new t(params)`.</haxe_doc>
		</ENew>
		<EUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<x path="Bool"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>An unary operator `op` on `e`:

		* e++ (op = OpIncrement, postFix = true)
		* e-- (op = OpDecrement, postFix = true)
		* ++e (op = OpIncrement, postFix = false)
		* --e (op = OpDecrement, postFix = false)
		* -e (op = OpNeg, postFix = false)
		* !e (op = OpNot, postFix = false)
		* ~e (op = OpNegBits, postFix = false)</haxe_doc>
		</EUnop>
		<EVars a="vars">
			<c path="Array"><t path="haxe.macro.Var"/></c>
			<haxe_doc>Variable declarations.</haxe_doc>
		</EVars>
		<EFunction a="name:f">
			<x path="Null"><c path="String"/></x>
			<t path="haxe.macro.Function"/>
			<haxe_doc>A function declaration.</haxe_doc>
		</EFunction>
		<EBlock a="exprs">
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>A block of expressions `{exprs}`.</haxe_doc>
		</EBlock>
		<EFor a="it:expr">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `for` expression.</haxe_doc>
		</EFor>
		<EIf a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<x path="Null"><t path="haxe.macro.Expr"/></x>
			<haxe_doc>An `if(econd) eif` or `if(econd) eif else eelse` expression.</haxe_doc>
		</EIf>
		<EWhile a="econd:e:normalWhile">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<x path="Bool"/>
			<haxe_doc>Represents a `while` expression.
		When `normalWhile` is `true` it is `while (...)`.
		When `normalWhile` is `false` it is `do {...} while (...)`.</haxe_doc>
		</EWhile>
		<ESwitch a="e:cases:edef">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Case"/></c>
			<x path="Null"><t path="haxe.macro.Expr"/></x>
			<haxe_doc>Represents a `switch` expression with related cases and an optional.
		`default` case if edef != null.</haxe_doc>
		</ESwitch>
		<ETry a="e:catches">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Catch"/></c>
			<haxe_doc>Represents a `try`-expression with related catches.</haxe_doc>
		</ETry>
		<EReturn a="?e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `return` or `return e` expression.</haxe_doc>
		</EReturn>
		<EBreak><haxe_doc>A `break` expression.</haxe_doc></EBreak>
		<EContinue><haxe_doc>A `continue` expression.</haxe_doc></EContinue>
		<EUntyped a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>An `untyped e` source code.</haxe_doc>
		</EUntyped>
		<EThrow a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `throw e` expression.</haxe_doc>
		</EThrow>
		<ECast a="e:t">
			<t path="haxe.macro.Expr"/>
			<x path="Null"><e path="haxe.macro.ComplexType"/></x>
			<haxe_doc>A `cast e` or `cast (e, m)` expression.</haxe_doc>
		</ECast>
		<EDisplay a="e:displayKind">
			<t path="haxe.macro.Expr"/>
			<e path="haxe.macro.DisplayKind"/>
			<haxe_doc>Internally used to provide completion.</haxe_doc>
		</EDisplay>
		<EDisplayNew a="t">
			<t path="haxe.macro.TypePath"/>
			<haxe_doc>Internally used to provide completion.</haxe_doc>
		</EDisplayNew>
		<ETernary a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `(econd) ? eif : eelse` expression.</haxe_doc>
		</ETernary>
		<ECheckType a="e:t">
			<t path="haxe.macro.Expr"/>
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>A `(e:t)` expression.</haxe_doc>
		</ECheckType>
		<EMeta a="s:e">
			<t path="haxe.macro.MetadataEntry"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `@m e` expression.</haxe_doc>
		</EMeta>
		<haxe_doc>Represents the kind of a node in the AST.</haxe_doc>
	</enum>
	<enum path="haxe.macro.DisplayKind" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<DKCall/>
		<DKDot/>
		<DKStructure/>
		<DKMarked/>
		<DKPattern a="outermost"><x path="Bool"/></DKPattern>
	</enum>
	<enum path="haxe.macro.ComplexType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPath a="p">
			<t path="haxe.macro.TypePath"/>
			<haxe_doc>Represents the type path.</haxe_doc>
		</TPath>
		<TFunction a="args:ret">
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents a function type.
		@see https://haxe.org/manual/types-function.html</haxe_doc>
		</TFunction>
		<TAnonymous a="fields">
			<c path="Array"><t path="haxe.macro.Field"/></c>
			<haxe_doc>Represents an anonymous structure type.
		@see https://haxe.org/manual/types-anonymous-structure.html</haxe_doc>
		</TAnonymous>
		<TParent a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc><![CDATA[Represents parentheses around a type, e.g. the `(Int -> Void)` part in
		`(Int -> Void) -> String`.]]></haxe_doc>
		</TParent>
		<TExtend a="p:fields">
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<c path="Array"><t path="haxe.macro.Field"/></c>
			<haxe_doc><![CDATA[Represents typedef extensions `> Iterable<T>`.
		The array `p` holds the type paths to the given types.
		@see https://haxe.org/manual/type-system-extensions.html]]></haxe_doc>
		</TExtend>
		<TOptional a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents an optional type.</haxe_doc>
		</TOptional>
		<TNamed a="n:t">
			<c path="String"/>
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents a type with a name.</haxe_doc>
		</TNamed>
		<TIntersection a="tl">
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<haxe_doc><![CDATA[Represents an intersection type `T1 & T2 & ... & TN`.]]></haxe_doc>
		</TIntersection>
		<haxe_doc>Represents a type syntax in the AST.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypePath" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<sub>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sub is set on module sub-type access:
		`pack.Module.Type` has name = Module, sub = Type, if available.</haxe_doc>
			</sub>
			<params>
				<x path="Null"><c path="Array"><e path="haxe.macro.TypeParam"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Optional parameters of the type path.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>Represents the package of the type path.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type path.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a type path in the AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.TypeParam" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPType a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc></haxe_doc>
		</TPType>
		<TPExpr a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc></haxe_doc>
		</TPExpr>
		<haxe_doc><![CDATA[Represents a concrete type parameter in the AST.

	Haxe allows expressions in concrete type parameters, e.g.
	`new YourType<["hello", "world"]>`. In that case the value is `TPExpr` while
	in the normal case it's `TPType`.]]></haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypeParamDecl" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the type parameter.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the type parameter.</haxe_doc>
			</meta>
			<constraints>
				<x path="Null"><c path="Array"><e path="haxe.macro.ComplexType"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional constraints of the type parameter.</haxe_doc>
			</constraints>
		</a>
		<haxe_doc>Represents a type parameter declaration in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Function" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<ret>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<haxe_doc>The return type-hint of the function, if available.</haxe_doc>
			</ret>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An optional list of function parameter type declarations.</haxe_doc>
			</params>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<haxe_doc>The expression of the function body, if available.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><t path="haxe.macro.FunctionArg"/></c>
				<haxe_doc>A list of function arguments.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<value>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional value of the function argument, if available.</haxe_doc>
			</value>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<haxe_doc>The type-hint of the function argument, if available.</haxe_doc>
			</type>
			<opt>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the function argument is optional.</haxe_doc>
			</opt>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the function argument.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the function argument.</haxe_doc>
			</meta>
		</a>
		<haxe_doc>Represents a function argument in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetadataEntry" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the metadata entry.</haxe_doc>
			</pos>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.Expr"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the metadata entry.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the metadata entry.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a metadata entry in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Metadata" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
		<haxe_doc>Represents metadata in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Field" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the field.</haxe_doc>
			</pos>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldType"/>
				<haxe_doc>The kind of the field.</haxe_doc>
			</kind>
			<doc>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the field, if available. If the field has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
			<access>
				<x path="Null"><c path="Array"><e path="haxe.macro.Access"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The access modifiers of the field. By default fields have private access.
		@see https://haxe.org/manual/class-field-access-modifier.html</haxe_doc>
			</access>
		</a>
		<haxe_doc>Represents a field in the AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.Access" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<APublic><haxe_doc>Public access modifier, grants access from anywhere.
		@see https://haxe.org/manual/class-field-visibility.html</haxe_doc></APublic>
		<APrivate><haxe_doc>Private access modifier, grants access to class and its sub-classes
		only.
		@see https://haxe.org/manual/class-field-visibility.html</haxe_doc></APrivate>
		<AStatic><haxe_doc>Static access modifier.</haxe_doc></AStatic>
		<AOverride><haxe_doc>Override access modifier.
		@see https://haxe.org/manual/class-field-override.html</haxe_doc></AOverride>
		<ADynamic><haxe_doc>Dynamic (re-)bindable access modifier.
		@see https://haxe.org/manual/class-field-dynamic.html</haxe_doc></ADynamic>
		<AInline><haxe_doc>Inline access modifier. Allows expressions to be directly inserted in
		place of calls to them.
		@see https://haxe.org/manual/class-field-inline.html</haxe_doc></AInline>
		<AMacro><haxe_doc>Macros access modifier. Allows expression macro functions. These are
		normal functions which are executed as soon as they are typed.</haxe_doc></AMacro>
		<AFinal><haxe_doc>Final access modifier. For functions, they can not be overridden. For
		variables, it means they can be assigned to only once.</haxe_doc></AFinal>
		<AExtern><haxe_doc>Extern access modifier.</haxe_doc></AExtern>
		<haxe_doc>Represents an access modifier.
	@see https://haxe.org/manual/class-field-access-modifier.html</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.FieldType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<FVar a="t:?e">
			<x path="Null"><e path="haxe.macro.ComplexType"/></x>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Represents a variable field type.</haxe_doc>
		</FVar>
		<FFun a="f">
			<t path="haxe.macro.Function"/>
			<haxe_doc>Represents a function field type.</haxe_doc>
		</FFun>
		<FProp a="get:set:?t:?e">
			<c path="String"/>
			<c path="String"/>
			<e path="haxe.macro.ComplexType"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Represents a property with getter and setter field type.</haxe_doc>
		</FProp>
		<haxe_doc>Represents the field type in the AST.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypeDefinition" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position to the type definition.</haxe_doc>
			</pos>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The parameter type declarations of the type definition.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type definition.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type definition.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the type definition.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.TypeDefKind"/>
				<haxe_doc>The kind of the type definition.</haxe_doc>
			</kind>
			<isExtern>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<fields>
				<c path="Array"><t path="haxe.macro.Field"/></c>
				<haxe_doc>The fields of the type definition.</haxe_doc>
			</fields>
			<doc>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the type, if available. If the type has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a type definition.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.TypeDefKind" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TDEnum><haxe_doc>Represents an enum kind.</haxe_doc></TDEnum>
		<TDStructure><haxe_doc>Represents a structure kind.</haxe_doc></TDStructure>
		<TDClass a="?superClass:?interfaces:?isInterface:?isFinal">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<x path="Bool"/>
			<x path="Bool"/>
			<haxe_doc>Represents a class kind.</haxe_doc>
		</TDClass>
		<TDAlias a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents an alias/typedef kind.</haxe_doc>
		</TDAlias>
		<TDAbstract a="tthis:?from:?to">
			<x path="Null"><e path="haxe.macro.ComplexType"/></x>
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<haxe_doc>Represents an abstract kind.</haxe_doc>
		</TDAbstract>
		<haxe_doc>Represents a type definition kind.</haxe_doc>
	</enum>
	<class path="haxe.macro.Error" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<message public="1">
			<c path="String"/>
			<haxe_doc>The error message.</haxe_doc>
		</message>
		<pos public="1">
			<t path="haxe.macro.Position"/>
			<haxe_doc>The position of the error.</haxe_doc>
		</pos>
		<toString set="method" line="973">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the string representation of the error.</haxe_doc>
		</toString>
		<new public="1" set="method" line="965">
			<f a="m:p">
				<c path="String"/>
				<t path="haxe.macro.Position"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Instantiates an error with given message and position.</haxe_doc>
		</new>
		<haxe_doc>This error can be used to handle or produce compilation errors in macros.</haxe_doc>
	</class>
	<enum path="haxe.macro.ImportMode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<INormal><haxe_doc>Represents a default import `import c`.</haxe_doc></INormal>
		<IAsName a="alias">
			<c path="String"/>
			<haxe_doc>Represents the alias import `import c as alias`.</haxe_doc>
		</IAsName>
		<IAll><haxe_doc>Represents the wildcard import `import *`.</haxe_doc></IAll>
		<haxe_doc>Represents the import mode.
	@see https://haxe.org/manual/type-system-import.html</haxe_doc>
	</enum>
	<typedef path="haxe.macro.ImportExpr" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<path>
				<c path="Array"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
</a></c>
				<haxe_doc>The path to the import expression.</haxe_doc>
			</path>
			<mode>
				<e path="haxe.macro.ImportMode"/>
				<haxe_doc>The mode of the import expression.</haxe_doc>
			</mode>
		</a>
		<haxe_doc>Represents the import expression.</haxe_doc>
	</typedef>
	<class path="haxe.macro.ExprTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/ExprTools.hx">
		<toString public="1" set="method" line="44" static="1">
			<f a="e">
				<t path="haxe.macro.Expr"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts expression `e` to a human-readable String representation.

		The result is guaranteed to be valid Haxe code, but there may be
		differences from the original lexical syntax.</haxe_doc>
		</toString>
		<iter public="1" set="method" line="71" static="1">
			<f a="e:f">
				<t path="haxe.macro.Expr"/>
				<f a="">
					<t path="haxe.macro.Expr"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls function `f` on each sub-expression of `e`.

		If `e` has no sub-expressions, this operation has no effect.

		Otherwise `f` is called once per sub-expression of `e`, with the
		sub-expression as argument. These calls are done in order of the
		sub-expression declarations.

		This method does not call itself recursively. It should instead be used
		in a recursive function which handles the expression nodes of interest.

		Usage example:
		```haxe
		function findStrings(e:Expr) {
			switch(e.expr) {
				case EConst(CString(s)):
					// handle s
				case _:
					ExprTools.iter(e, findStrings);
			}
		}
		```</haxe_doc>
		</iter>
		<map public="1" set="method" line="157" static="1">
			<f a="e:f">
				<t path="haxe.macro.Expr"/>
				<f a="">
					<t path="haxe.macro.Expr"/>
					<t path="haxe.macro.Expr"/>
				</f>
				<t path="haxe.macro.Expr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of `e` by calling `f` on each of them.

		If `e` has no sub-expressions, this operation returns `e` unchanged.

		Otherwise `f` is called once per sub-expression of `e`, with the
		sub-expression as argument. These calls are done in order of the
		sub-expression declarations.

		This method does not call itself recursively. It should instead be used
		in a recursive function which handles the expression nodes of interest.

		Usage example:
		```haxe
		function capitalizeStrings(e:Expr) {
			return switch(e.expr) {
				case EConst(CString(s)):
					{ expr: EConst(CString(s.toUpperCase())), pos: e.pos };
				case _:
					ExprTools.map(e, capitalizeStrings);
			}
		}
		```haxe</haxe_doc>
		</map>
		<getValue public="1" set="method" line="234" static="1">
			<f a="e">
				<t path="haxe.macro.Expr"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Returns the value `e` represents.

		Supported expressions are:

		 - `Int`, `Float` and `String` literals
		 - identifiers `true`, `false` and `null`
		 - structure declarations if all their fields are values
		 - array declarations if all their elements are values
		 - unary operators `-`, `!` and `~` if the operand is a value
		 - binary operators except `=>`, `...` and assignments

		Parentheses, metadata and the `untyped` keyword are ignored.

		If any non-value is encountered, an exception of type `String` is
		thrown.

		If `e` is null, the result is unspecified.]]></haxe_doc>
		</getValue>
		<opt get="inline" set="null" line="294" static="1"><f a="e:f">
	<x path="Null"><t path="haxe.macro.Expr"/></x>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<t path="haxe.macro.Expr"/>
	</f>
	<t path="haxe.macro.Expr"/>
</f></opt>
		<opt2 get="inline" set="null" line="297" static="1"><f a="e:f">
	<x path="Null"><t path="haxe.macro.Expr"/></x>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></opt2>
		<haxe_doc>This class provides some utility methods to work with expressions. It is
	best used through 'using haxe.macro.ExprTools' syntax and then provides
	additional methods on haxe.macro.Expr instances.

	While mainly intended to be used in macros, it works in non-macro code as
	well.</haxe_doc>
	</class>
	<class path="haxe.macro.ExprArrayTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/ExprTools.hx" module="haxe.macro.ExprTools">
		<map public="1" set="method" line="306" static="1"><f a="el:f">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<t path="haxe.macro.Expr"/>
	</f>
	<c path="Array"><t path="haxe.macro.Expr"/></c>
</f></map>
		<iter public="1" set="method" line="313" static="1"><f a="el:f">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></iter>
		<haxe_doc>This class provides functions on expression arrays for convenience. For a
	detailed reference on each method, see the documentation of ExprTools.</haxe_doc>
	</class>
	<class path="haxe.macro.Format" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Format.hx"><haxe_doc>The actual macro implemented for Std.format</haxe_doc></class>
	<typedef path="haxe.macro.JSGenApi" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/JSGenApi.hx">
		<a>
			<types>
				<c path="Array"><e path="haxe.macro.Type"/></c>
				<haxe_doc>all the types that were compiled by Haxe</haxe_doc>
			</types>
			<setTypeAccessor set="method">
				<f a="callb">
					<f a="">
						<e path="haxe.macro.Type"/>
						<c path="String"/>
					</f>
					<x path="Void"/>
				</f>
				<haxe_doc>define the JS code that gets generated when a class or enum is accessed in a typed expression</haxe_doc>
			</setTypeAccessor>
			<setCurrentClass set="method">
				<f a="c">
					<t path="haxe.macro.ClassType"/>
					<x path="Void"/>
				</f>
				<haxe_doc>select the current classe</haxe_doc>
			</setCurrentClass>
			<quoteString set="method">
				<f a="s">
					<c path="String"/>
					<c path="String"/>
				</f>
				<haxe_doc>quote and escape the given string constant</haxe_doc>
			</quoteString>
			<outputFile>
				<c path="String"/>
				<haxe_doc>the file in which the JS code can be generated</haxe_doc>
			</outputFile>
			<main>
				<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
				<haxe_doc>the main call expression, if a -main class is defined</haxe_doc>
			</main>
			<isKeyword set="method">
				<f a="ident">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>tells if the given identifier is a JS keyword</haxe_doc>
			</isKeyword>
			<hasFeature set="method">
				<f a="f">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>check if a feature is used</haxe_doc>
			</hasFeature>
			<generateValue set="method">
				<f a="e">
					<t path="haxe.macro.TypedExpr"/>
					<c path="String"/>
				</f>
				<haxe_doc>generate the JS code for a given typed expression-value</haxe_doc>
			</generateValue>
			<generateStatement set="method">
				<f a="e">
					<t path="haxe.macro.TypedExpr"/>
					<c path="String"/>
				</f>
				<haxe_doc>generate the JS code for any given typed expression</haxe_doc>
			</generateStatement>
			<buildMetaData set="method">
				<f a="t">
					<t path="haxe.macro.BaseType"/>
					<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
				</f>
				<haxe_doc>create the metadata expression for the given type</haxe_doc>
			</buildMetaData>
			<addFeature set="method">
				<f a="f">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>add a feature</haxe_doc>
			</addFeature>
		</a>
		<haxe_doc>This is the api that is passed to the custom JS generator.</haxe_doc>
	</typedef>
	<class path="haxe.macro.MacroStringTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/MacroStringTools.hx">
		<toFieldExpr public="1" set="method" line="85" static="1">
			<f a="sl">
				<c path="Array"><c path="String"/></c>
				<t path="haxe.macro.Expr"/>
			</f>
			<haxe_doc>Converts an array of Strings `sl` to a field expression.

		If `sl` has no elements, the result is null.

		If `sl` has one element, the result is `EConst(CIdent(sl[0])`.

		Otherwise the result is a chain of `EField` nodes.

		If `sl` is null, the result is unspecified.</haxe_doc>
		</toFieldExpr>
		<toDotPath public="1" set="method" line="100" static="1">
			<f a="pack:name">
				<c path="Array"><c path="String"/></c>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts a path given by package `pack` and name `name` to a `String`
		separated by dots.

		If `pack` has no elements, the result is `name`.

		If `pack` is null, the result is unspecified.

		Otherwise the elements of `pack` are joined with a separating dot, with
		an appended dot separating the result from `name`.</haxe_doc>
		</toDotPath>
		<toComplex public="1" set="method" line="104" static="1"><f a="path">
	<c path="String"/>
	<e path="haxe.macro.ComplexType"/>
</f></toComplex>
		<haxe_doc>This class provides some utility methods to work with strings in macro
	context.</haxe_doc>
		<meta><m n=":hlNative"><e>"macro"</e></m></meta>
	</class>
	<class path="haxe.macro.MacroType" params="Const" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/MacroType.hx" extern="1"><haxe_doc><![CDATA[This type is meant to be used to generate custom types using a macro.
	For instance by doing MacroType<[my.Class.myMacro(55)]>]]></haxe_doc></class>
	<class path="haxe.macro.PositionTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/PositionTools.hx">
		<here public="1" set="method" static="1">
			<f a=""><t path="haxe.macro.Position"/></f>
			<haxe_doc>Returns the `Position` where the caller of `here` is.</haxe_doc>
		</here>
		<getInfos public="1" set="method" line="44" static="1">
			<f a="p">
				<t path="haxe.macro.Position"/>
				<a>
					<min><x path="Int"/></min>
					<max><x path="Int"/></max>
					<file><c path="String"/></file>
				</a>
			</f>
			<haxe_doc>Like `Context.getPosInfos`, except this method is available on all platforms.</haxe_doc>
		</getInfos>
		<make public="1" set="method" line="55" static="1">
			<f a="inf">
				<a>
					<min><x path="Int"/></min>
					<max><x path="Int"/></max>
					<file><c path="String"/></file>
				</a>
				<t path="haxe.macro.Position"/>
			</f>
			<haxe_doc>Like `Context.makePosition`, except this method is available on all platforms.</haxe_doc>
		</make>
	</class>
	<class path="haxe.macro.Printer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Printer.hx">
		<tabs><c path="String"/></tabs>
		<tabString><c path="String"/></tabString>
		<printUnop public="1" set="method" line="42"><f a="op">
	<e path="haxe.macro.Unop"/>
	<c path="String"/>
</f></printUnop>
		<printBinop public="1" set="method" line="50"><f a="op">
	<e path="haxe.macro.Binop"/>
	<c path="String"/>
</f></printBinop>
		<escapeString set="method" line="79"><f a="s:delim">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></escapeString>
		<printFormatString public="1" set="method" line="83"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></printFormatString>
		<printString public="1" set="method" line="87"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></printString>
		<printConstant public="1" set="method" line="91"><f a="c">
	<e path="haxe.macro.Constant"/>
	<c path="String"/>
</f></printConstant>
		<printTypeParam public="1" set="method" line="100"><f a="param">
	<e path="haxe.macro.TypeParam"/>
	<c path="String"/>
</f></printTypeParam>
		<printTypePath public="1" set="method" line="105"><f a="tp">
	<t path="haxe.macro.TypePath"/>
	<c path="String"/>
</f></printTypePath>
		<printComplexType public="1" set="method" line="112"><f a="ct">
	<e path="haxe.macro.ComplexType"/>
	<c path="String"/>
</f></printComplexType>
		<printMetadata public="1" set="method" line="131"><f a="meta">
	<t path="haxe.macro.MetadataEntry"/>
	<c path="String"/>
</f></printMetadata>
		<printAccess public="1" set="method" line="135"><f a="access">
	<e path="haxe.macro.Access"/>
	<c path="String"/>
</f></printAccess>
		<printField public="1" set="method" line="147"><f a="field">
	<t path="haxe.macro.Field"/>
	<c path="String"/>
</f></printField>
		<printTypeParamDecl public="1" set="method" line="157"><f a="tpd">
	<t path="haxe.macro.TypeParamDecl"/>
	<c path="String"/>
</f></printTypeParamDecl>
		<printFunctionArg public="1" set="method" line="162"><f a="arg">
	<t path="haxe.macro.FunctionArg"/>
	<c path="String"/>
</f></printFunctionArg>
		<printFunction public="1" set="method" line="168"><f a="func">
	<t path="haxe.macro.Function"/>
	<c path="String"/>
</f></printFunction>
		<printVar public="1" set="method" line="174"><f a="v">
	<t path="haxe.macro.Var"/>
	<c path="String"/>
</f></printVar>
		<printObjectFieldKey public="1" set="method" line="180"><f a="of">
	<t path="haxe.macro.ObjectField"/>
	<c path="String"/>
</f></printObjectFieldKey>
		<printObjectField public="1" set="method" line="187"><f a="of">
	<t path="haxe.macro.ObjectField"/>
	<c path="String"/>
</f></printObjectField>
		<printExpr public="1" set="method" line="191"><f a="e">
	<t path="haxe.macro.Expr"/>
	<c path="String"/>
</f></printExpr>
		<printExprs public="1" set="method" line="252"><f a="el:sep">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<c path="String"/>
	<c path="String"/>
</f></printExprs>
		<printExtension set="method" line="256"><f a="tpl:fields">
	<c path="Array"><t path="haxe.macro.TypePath"/></c>
	<c path="Array"><t path="haxe.macro.Field"/></c>
	<c path="String"/>
</f></printExtension>
		<printStructure set="method" line="261"><f a="fields">
	<c path="Array"><t path="haxe.macro.Field"/></c>
	<c path="String"/>
</f></printStructure>
		<printTypeDefinition public="1" set="method" line="266">
			<f a="t:?printPackage" v=":true">
				<t path="haxe.macro.TypeDefinition"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ printPackage : true }</e></m></meta>
		</printTypeDefinition>
		<printFieldWithDelimiter set="method" line="326"><f a="f">
	<t path="haxe.macro.Field"/>
	<c path="String"/>
</f></printFieldWithDelimiter>
		<opt params="T" set="method" line="337">
			<f a="v:f:?prefix" v="::&quot;&quot;">
				<c path="opt.T"/>
				<f a="">
					<c path="opt.T"/>
					<c path="String"/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ prefix : "" }</e></m></meta>
		</opt>
		<new public="1" set="method" line="37">
			<f a="?tabString" v="&quot;\t&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ tabString : "\t" }</e></m></meta>
		</new>
		<haxe_doc>This class provides some utility methods to convert elements from the
	macro context to a human-readable String representation.</haxe_doc>
	</class>
	<typedef path="haxe.macro.TExprTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.ExprTools"/>
		<haxe_doc><![CDATA[This class can be added via `using haxe.macro.Tools` in order to enable
	`using` functionality on these macro tool classes:

	- `haxe.macro.ExprTools`
	- `haxe.macro.ComplexTypeTools`
	- `haxe.macro.TypeTools`
	- `haxe.macro.MacroStringTools`
	- `haxe.macro.TypedExprTools`
	- `haxe.macro.PositionTools`
  
  @see <https://haxe.org/manual/lf-static-extension.html>]]></haxe_doc>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TComplexTypeTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.ComplexTypeTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TTypeTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.TypeTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TMacroStringTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.MacroStringTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TTypedExprTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.TypedExprTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TPositionTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.PositionTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.Ref" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<toString set="method"><f a=""><c path="String"/></f></toString>
			<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
		</a>
		<haxe_doc>Represents a reference to internal compiler structure. It exists to avoid
	expensive encoding if it is not required and to ensure that physical
	equality remains intact.

	A structure is only encoded when user requests it through `ref.get()`.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.Type" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx">
		<TMono a="t">
			<t path="haxe.macro.Ref"><x path="Null"><e path="haxe.macro.Type"/></x></t>
			<haxe_doc>Represents a monomorph.

		@see https://haxe.org/manual/types-monomorph.html</haxe_doc>
		</TMono>
		<TEnum a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents an enum instance.

		@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		</TEnum>
		<TInst a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents a class instance.

		@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		</TInst>
		<TType a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents a typedef.

		@see https://haxe.org/manual/type-system-typedef.html</haxe_doc>
		</TType>
		<TFun a="args:ret">
			<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<e path="haxe.macro.Type"/>
			<haxe_doc>Represents a function type.

		@see https://haxe.org/manual/types-function.html</haxe_doc>
		</TFun>
		<TAnonymous a="a">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AnonType"/></t>
			<haxe_doc>Represents an anonymous structure type.

		@see https://haxe.org/manual/types-anonymous-structure.html</haxe_doc>
		</TAnonymous>
		<TDynamic a="t">
			<x path="Null"><e path="haxe.macro.Type"/></x>
			<haxe_doc>Represents Dynamic.

		@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		</TDynamic>
		<TLazy a="f">
			<f a=""><e path="haxe.macro.Type"/></f>
			<haxe_doc>Used internally by the compiler to delay some typing.</haxe_doc>
		</TLazy>
		<TAbstract a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents an abstract type.

		@see https://haxe.org/manual/types-abstract.html</haxe_doc>
		</TAbstract>
		<haxe_doc>Represents a type.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.AnonType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<status>
				<e path="haxe.macro.AnonStatus"/>
				<haxe_doc>The status/kind of the structure.</haxe_doc>
			</status>
			<fields>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The class fields of the structure.</haxe_doc>
			</fields>
		</a>
		<haxe_doc>Represents information for anonymous structure types.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.AnonStatus" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<AClosed><haxe_doc>A closed structure is considered complete. That is, no further fields
		can be added to it.</haxe_doc></AClosed>
		<AOpened><haxe_doc>An open structure allows having additional fields added to it, which is
		used during type inference. It is closed upon unification.</haxe_doc></AOpened>
		<AConst><haxe_doc>A const structure is one that appears directly in syntax. It cannot be
		assigned to a smaller structure type (that is, it does not allow
		structural sub-typing).</haxe_doc></AConst>
		<AExtend a="tl">
			<t path="haxe.macro.Ref"><c path="Array"><e path="haxe.macro.Type"/></c></t>
			<haxe_doc>Represents a structure which extends one or multiple structures defined
		in `tl`.

		@see https://haxe.org/manual/type-system-extensions.html</haxe_doc>
		</AExtend>
		<AClassStatics a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<haxe_doc>A structure that represents the static fields of a class.</haxe_doc>
		</AClassStatics>
		<AEnumStatics a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<haxe_doc>A structure that represents the constructors of an enum.</haxe_doc>
		</AEnumStatics>
		<AAbstractStatics a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<haxe_doc>A structure that represents the static fields of an abstract.</haxe_doc>
		</AAbstractStatics>
		<haxe_doc>Represents the kind of the anonymous structure type.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypeParameter" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the type parameter. It is guaranteed to be a `TInst` with a
		`KTypeParameter` kind.</haxe_doc>
			</t>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents the declaration of type parameters.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassField" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the class field.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the class field.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the class field.</haxe_doc>
			</params>
			<overloads>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The overload fields of the class field.</haxe_doc>
			</overloads>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the class field.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the class field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldKind"/>
				<haxe_doc>The class field kind.</haxe_doc>
			</kind>
			<isPublic>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is public.</haxe_doc>
			</isPublic>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is final.</haxe_doc>
			</isFinal>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is extern.</haxe_doc>
			</isExtern>
			<expr set="method">
				<f a=""><x path="Null"><t path="haxe.macro.TypedExpr"/></x></f>
				<haxe_doc>Returns the typed expression of the class field.</haxe_doc>
			</expr>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a class field.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumField" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the enum constructor.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the enum constructor.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the enum constructor.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the enum constructor.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the enum constructor.</haxe_doc>
			</meta>
			<index>
				<x path="Int"/>
				<haxe_doc>The index of the enum constructor, i.e. in which position it appears
		in the syntax.</haxe_doc>
			</index>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the enum constructor.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents an enum constructor.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.ClassKind" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<KNormal><haxe_doc>A normal class.</haxe_doc></KNormal>
		<KTypeParameter a="constraints">
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>A type parameter class with a set of constraints.</haxe_doc>
		</KTypeParameter>
		<KExtension a="cl:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>A structurally extended class.

		@deprecated</haxe_doc>
		</KExtension>
		<KExpr a="expr">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A special kind of class to encode expressions into type parameters.</haxe_doc>
		</KExpr>
		<KGeneric><haxe_doc>A `@:generic` base class.</haxe_doc></KGeneric>
		<KGenericInstance a="cl:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>A concrete `@:generic` instance, referencing the original class and the
		applied type parameters.</haxe_doc>
		</KGenericInstance>
		<KMacroType><haxe_doc>A special class for `haxe.macro.MacroType`.

		@deprecated</haxe_doc></KMacroType>
		<KAbstractImpl a="a">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<haxe_doc>An implementation class of an abstract, i.e. where all its run-time code
		is.</haxe_doc>
		</KAbstractImpl>
		<KGenericBuild><haxe_doc>A `@:genericBuild` class</haxe_doc></KGenericBuild>
		<haxe_doc>Represents the kind of a class.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.BaseType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The information that all types (`ClassType`, `EnumType`, `DefType`,
	`AbstractType`) have in common.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<superClass>
				<x path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></x>
				<haxe_doc>The parent class and its type parameters, if available.</haxe_doc>
			</superClass>
			<statics>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The static fields of the class.</haxe_doc>
			</statics>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<overrides>
				<c path="Array"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></c>
				<haxe_doc>The list of fields that have override status.</haxe_doc>
			</overrides>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.ClassKind"/>
				<haxe_doc>The kind of the class.</haxe_doc>
			</kind>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isInterface>
				<x path="Bool"/>
				<haxe_doc>If true the type is an interface, otherwise it is a class.</haxe_doc>
			</isInterface>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>If true the class is final and cannot be extended.</haxe_doc>
			</isFinal>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<interfaces>
				<c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c>
				<haxe_doc>The implemented interfaces and their type parameters.</haxe_doc>
			</interfaces>
			<init>
				<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
				<haxe_doc>The `__init__` expression of the class, if available.</haxe_doc>
			</init>
			<fields>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The member fields of the class.</haxe_doc>
			</fields>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructor>
				<x path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></x>
				<haxe_doc>The constructor of the class, if available.</haxe_doc>
			</constructor>
		</a>
		<haxe_doc>Represents a class type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<names>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>An ordered list of enum constructor names.</haxe_doc>
			</names>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructs>
				<t path="Map">
					<c path="String"/>
					<t path="haxe.macro.EnumField"/>
				</t>
				<haxe_doc>The available enum constructors.</haxe_doc>
			</constructs>
		</a>
		<haxe_doc>Represents an enum type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.DefType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The target type of the typedef.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a typedef.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.AbstractType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<unops>
				<c path="Array"><a>
	<postFix><x path="Bool"/></postFix>
	<op><e path="haxe.macro.Unop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined unary operators of the abstract.</haxe_doc>
			</unops>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The underlying type of the abstract.</haxe_doc>
			</type>
			<to>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><x path="Null"><t path="haxe.macro.ClassField"/></x></field>
</a></c>
				<haxe_doc>The available implicit to-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</to>
			<resolveWrite>
				<x path="Null"><t path="haxe.macro.ClassField"/></x>
				<meta><m n=":require"><e><![CDATA[haxe_ver >= 4.0]]></e></m></meta>
				<haxe_doc>The method used for resolving unknown field access, if available.</haxe_doc>
			</resolveWrite>
			<resolve>
				<x path="Null"><t path="haxe.macro.ClassField"/></x>
				<meta><m n=":require"><e><![CDATA[haxe_ver >= 3.3]]></e></m></meta>
				<haxe_doc>The method used for resolving unknown field access, if available.</haxe_doc>
			</resolve>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<impl>
				<x path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></x>
				<haxe_doc>The implementation class of the abstract, if available.</haxe_doc>
			</impl>
			<from>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><x path="Null"><t path="haxe.macro.ClassField"/></x></field>
</a></c>
				<haxe_doc>The available implicit from-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</from>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<binops>
				<c path="Array"><a>
	<op><e path="haxe.macro.Binop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined binary operators of the abstract.</haxe_doc>
			</binops>
			<array>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The defined array-access fields of the abstract.</haxe_doc>
			</array>
		</a>
		<haxe_doc>Represents an abstract type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetaAccess" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<remove set="method">
				<f a="name">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Removes all `name` metadata entries from the origin of `this`
		MetaAccess.

		This method might clear several metadata entries of the same name.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `remove` has no effect on that array.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</remove>
			<has set="method">
				<f a="name">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>Tells if the origin of `this` MetaAccess has a `name` metadata entry.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</has>
			<get set="method">
				<f a=""><t path="haxe.macro.Metadata"/></f>
				<haxe_doc>Return the wrapped `Metadata` array.

		Modifying this array has no effect on the origin of `this` MetaAccess.
		The `add` and `remove` methods can be used for that.</haxe_doc>
			</get>
			<extract set="method">
				<f a="name">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
				</f>
				<haxe_doc>Extract metadata entries by given `name`.

		If there's no metadata with such name, empty array `[]` is returned.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</extract>
			<add set="method">
				<f a="name:params:pos">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.Expr"/></c>
					<t path="haxe.macro.Position"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Adds the metadata specified by `name`, `params` and `pos` to the origin
		of `this` MetaAccess.

		Metadata names are not unique during compilation, so this method never
		overwrites a previous metadata.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `add` has no effect on that array.

		If any argument is null, compilation fails with an error.</haxe_doc>
			</add>
		</a>
		<haxe_doc>MetaAccess is a wrapper for the `Metadata` array. It can be used to add
	metadata to and remove metadata from its origin.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.FieldKind" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<FVar a="read:write">
			<e path="haxe.macro.VarAccess"/>
			<e path="haxe.macro.VarAccess"/>
			<haxe_doc>A variable of property, depending on the `read` and `write` values.</haxe_doc>
		</FVar>
		<FMethod a="k">
			<e path="haxe.macro.MethodKind"/>
			<haxe_doc>A method</haxe_doc>
		</FMethod>
		<haxe_doc>Represents a field kind.</haxe_doc>
	</enum>
	<enum path="haxe.macro.VarAccess" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<AccNormal><haxe_doc>Normal access (`default`).</haxe_doc></AccNormal>
		<AccNo><haxe_doc>Private access (`null`).</haxe_doc></AccNo>
		<AccNever><haxe_doc>No access (`never`).</haxe_doc></AccNever>
		<AccResolve><haxe_doc>Unused.</haxe_doc></AccResolve>
		<AccCall><haxe_doc>Access through accessor function (`get`, `set`, `dynamic`).</haxe_doc></AccCall>
		<AccInline><haxe_doc>Inline access (`inline`).</haxe_doc></AccInline>
		<AccRequire a="r:?msg">
			<c path="String"/>
			<c path="String"/>
			<haxe_doc>Failed access due to a `@:require` metadata.</haxe_doc>
		</AccRequire>
		<AccCtor><haxe_doc>Access is only allowed from the constructor.</haxe_doc></AccCtor>
		<haxe_doc>Represents the variable accessor.</haxe_doc>
	</enum>
	<enum path="haxe.macro.MethodKind" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<MethNormal><haxe_doc>A normal method.</haxe_doc></MethNormal>
		<MethInline><haxe_doc>An inline method.

		@see https://haxe.org/manual/class-field-inline.html</haxe_doc></MethInline>
		<MethDynamic><haxe_doc>A dynamic, rebindable method.

		@see https://haxe.org/manual/class-field-dynamic.html</haxe_doc></MethDynamic>
		<MethMacro><haxe_doc>A macro method.</haxe_doc></MethMacro>
		<haxe_doc>Represents the method kind.</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.TConstant" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TInt a="i">
			<x path="Int"/>
			<haxe_doc>An `Int` literal.</haxe_doc>
		</TInt>
		<TFloat a="s">
			<c path="String"/>
			<haxe_doc>A `Float` literal, represented as String to avoid precision loss.</haxe_doc>
		</TFloat>
		<TString a="s">
			<c path="String"/>
			<haxe_doc>A `String` literal.</haxe_doc>
		</TString>
		<TBool a="b">
			<x path="Bool"/>
			<haxe_doc>A `Bool` literal.</haxe_doc>
		</TBool>
		<TNull><haxe_doc>The constant `null`.</haxe_doc></TNull>
		<TThis><haxe_doc>The constant `this`.</haxe_doc></TThis>
		<TSuper><haxe_doc>The constant `super`.</haxe_doc></TSuper>
		<haxe_doc>Represents typed constant.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TVar" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t set="null">
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the variable.</haxe_doc>
			</t>
			<name set="null">
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<meta set="null">
				<x path="Null"><t path="haxe.macro.MetaAccess"/></x>
				<haxe_doc>The metadata of the variable.</haxe_doc>
			</meta>
			<id set="null">
				<x path="Int"/>
				<haxe_doc>The unique ID of the variable.</haxe_doc>
			</id>
			<extra set="null">
				<x path="Null"><a>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<expr><x path="Null"><t path="haxe.macro.TypedExpr"/></x></expr>
</a></x>
				<haxe_doc>Special information which is internally used to keep track of closure.
		information</haxe_doc>
			</extra>
			<capture set="null">
				<x path="Bool"/>
				<haxe_doc>Whether or not the variable has been captured by a closure.</haxe_doc>
			</capture>
		</a>
		<haxe_doc>Represents a variable in the typed AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.ModuleType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TClassDecl a="c">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<haxe_doc>A class.</haxe_doc>
		</TClassDecl>
		<TEnumDecl a="e">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<haxe_doc>An enum.</haxe_doc>
		</TEnumDecl>
		<TTypeDecl a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t>
			<haxe_doc>A typedef.</haxe_doc>
		</TTypeDecl>
		<TAbstract a="a">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<haxe_doc>An abstract.</haxe_doc>
		</TAbstract>
		<haxe_doc>Represents a module type. These are the types that can be declared in a Haxe
	module and which are passed to the generators (except `TTypeDecl`).</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TFunc" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The return type of the function.</haxe_doc>
			</t>
			<expr>
				<t path="haxe.macro.TypedExpr"/>
				<haxe_doc>The expression of the function body.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><a>
	<value><x path="Null"><t path="haxe.macro.TypedExpr"/></x></value>
	<v><t path="haxe.macro.TVar"/></v>
</a></c>
				<haxe_doc>A list of function arguments identified by an argument variable `v` and
		an optional initialization `value`.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the typed AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.FieldAccess" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<FInstance a="c:params:cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Access of field `cf` on a class instance `c` with type parameters
		`params`.</haxe_doc>
		</FInstance>
		<FStatic a="c:cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Static access of a field `cf` on a class `c`.</haxe_doc>
		</FStatic>
		<FAnon a="cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Access of field `cf` on an anonymous structure.</haxe_doc>
		</FAnon>
		<FDynamic a="s">
			<c path="String"/>
			<haxe_doc>Dynamic field access of a field named `s`.</haxe_doc>
		</FDynamic>
		<FClosure a="c:cf">
			<x path="Null"><a>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
	<c><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></c>
</a></x>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Closure field access of field `cf` on a class instance `c` with type
		parameters `params`.</haxe_doc>
		</FClosure>
		<FEnum a="e:ef">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<t path="haxe.macro.EnumField"/>
			<haxe_doc>Field access to an enum constructor `ef` of enum `e`.</haxe_doc>
		</FEnum>
		<haxe_doc>Represents the kind of field access in the typed AST.</haxe_doc>
	</enum>
	<enum path="haxe.macro.TypedExprDef" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TConst a="c">
			<e path="haxe.macro.TConstant"/>
			<haxe_doc>A constant.</haxe_doc>
		</TConst>
		<TLocal a="v">
			<t path="haxe.macro.TVar"/>
			<haxe_doc>Reference to a local variable `v`.</haxe_doc>
		</TLocal>
		<TArray a="e1:e2">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Array access `e1[e2]`.</haxe_doc>
		</TArray>
		<TBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Binary operator `e1 op e2`.</haxe_doc>
		</TBinop>
		<TField a="e:fa">
			<t path="haxe.macro.TypedExpr"/>
			<e path="haxe.macro.FieldAccess"/>
			<haxe_doc>Field access on `e` according to `fa`.</haxe_doc>
		</TField>
		<TTypeExpr a="m">
			<e path="haxe.macro.ModuleType"/>
			<haxe_doc>Reference to a module type `m`.</haxe_doc>
		</TTypeExpr>
		<TParenthesis a="e">
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Parentheses `(e)`.</haxe_doc>
		</TParenthesis>
		<TObjectDecl a="fields">
			<c path="Array"><a>
	<name><c path="String"/></name>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
			<haxe_doc>An object declaration.</haxe_doc>
		</TObjectDecl>
		<TArrayDecl a="el">
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc>An array declaration `[el]`.</haxe_doc>
		</TArrayDecl>
		<TCall a="e:el">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc>A call `e(el)`.</haxe_doc>
		</TCall>
		<TNew a="c:params:el">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc><![CDATA[A constructor call `new c<params>(el)`.]]></haxe_doc>
		</TNew>
		<TUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<x path="Bool"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>An unary operator `op` on `e`:

		* e++ (op = OpIncrement, postFix = true)
		* e-- (op = OpDecrement, postFix = true)
		* ++e (op = OpIncrement, postFix = false)
		* --e (op = OpDecrement, postFix = false)
		* -e (op = OpNeg, postFix = false)
		* !e (op = OpNot, postFix = false)
		* ~e (op = OpNegBits, postFix = false)</haxe_doc>
		</TUnop>
		<TFunction a="tfunc">
			<t path="haxe.macro.TFunc"/>
			<haxe_doc>A function declaration.</haxe_doc>
		</TFunction>
		<TVar a="v:expr">
			<t path="haxe.macro.TVar"/>
			<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
			<haxe_doc>A variable declaration `var v` or `var v = expr`.</haxe_doc>
		</TVar>
		<TBlock a="el">
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc>A block declaration `{el}`.</haxe_doc>
		</TBlock>
		<TFor a="v:e1:e2">
			<t path="haxe.macro.TVar"/>
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>A `for` expression.</haxe_doc>
		</TFor>
		<TIf a="econd:eif:eelse">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
			<haxe_doc>An `if(econd) eif` or `if(econd) eif else eelse` expression.</haxe_doc>
		</TIf>
		<TWhile a="econd:e:normalWhile">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<x path="Bool"/>
			<haxe_doc>Represents a `while` expression.
		When `normalWhile` is `true` it is `while (...)`.
		When `normalWhile` is `false` it is `do {...} while (...)`.</haxe_doc>
		</TWhile>
		<TSwitch a="e:cases:edef">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><a>
	<values><c path="Array"><t path="haxe.macro.TypedExpr"/></c></values>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
			<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
			<haxe_doc>Represents a `switch` expression with related cases and an optional
		`default` case if edef != null.</haxe_doc>
		</TSwitch>
		<TTry a="e:catches">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><a>
	<v><t path="haxe.macro.TVar"/></v>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
			<haxe_doc>Represents a `try`-expression with related catches.</haxe_doc>
		</TTry>
		<TReturn a="e">
			<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
			<haxe_doc>A `return` or `return e` expression.</haxe_doc>
		</TReturn>
		<TBreak><haxe_doc>A `break` expression.</haxe_doc></TBreak>
		<TContinue><haxe_doc>A `continue` expression.</haxe_doc></TContinue>
		<TThrow a="e">
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>A `throw e` expression.</haxe_doc>
		</TThrow>
		<TCast a="e:m">
			<t path="haxe.macro.TypedExpr"/>
			<x path="Null"><e path="haxe.macro.ModuleType"/></x>
			<haxe_doc>A `cast e` or `cast (e, m)` expression.</haxe_doc>
		</TCast>
		<TMeta a="m:e1">
			<t path="haxe.macro.MetadataEntry"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>A `@m e1` expression.</haxe_doc>
		</TMeta>
		<TEnumParameter a="e1:ef:index">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.EnumField"/>
			<x path="Int"/>
			<haxe_doc>Access to an enum parameter (generated by the pattern matcher).</haxe_doc>
		</TEnumParameter>
		<TEnumIndex a="e1">
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Access to an enum index (generated by the pattern matcher).</haxe_doc>
		</TEnumIndex>
		<TIdent a="s">
			<c path="String"/>
			<haxe_doc>An unknown identifier.</haxe_doc>
		</TIdent>
		<haxe_doc>Represents kind of a node in the typed AST.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypedExpr" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the expression.</haxe_doc>
			</t>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.TypedExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a typed AST node.</haxe_doc>
	</typedef>
	<class path="haxe.macro.TypeTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/TypeTools.hx">
		<nullable set="method" line="41" static="1"><f a="complexType">
	<e path="haxe.macro.ComplexType"/>
	<e path="haxe.macro.ComplexType"/>
</f></nullable>
		<toField set="method" line="43" static="1"><f a="cf">
	<t path="haxe.macro.ClassField"/>
	<t path="haxe.macro.Field"/>
</f></toField>
		<toComplexType public="1" set="method" line="102" static="1">
			<f a="type">
				<x path="Null"><e path="haxe.macro.Type"/></x>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
			</f>
			<haxe_doc>Returns a syntax-level type corresponding to Type `t`.

		This function is mostly inverse to `ComplexTypeTools.toType`, but may
		lose some information on types that do not have a corresponding syntax
		version, such as monomorphs. In these cases, the result is null.

		If `t` is null, an internal exception is thrown.</haxe_doc>
		</toComplexType>
		<toTypeParam set="method" line="149" static="1"><f a="type">
	<e path="haxe.macro.Type"/>
	<e path="haxe.macro.TypeParam"/>
</f></toTypeParam>
		<toTypePath set="method" line="156" static="1"><f a="baseType:params">
	<t path="haxe.macro.BaseType"/>
	<c path="Array"><e path="haxe.macro.Type"/></c>
	<t path="haxe.macro.TypePath"/>
</f></toTypePath>
		<findField public="1" set="method" line="378" static="1">
			<f a="c:name:?isStatic" v="::false">
				<t path="haxe.macro.ClassType"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Null"><t path="haxe.macro.ClassField"/></x>
			</f>
			<meta><m n=":value"><e>{ isStatic : false }</e></m></meta>
			<haxe_doc>Resolves the field named `name` on class `c`.

		If `isStatic` is true, the classes' static fields are checked. Otherwise
		the classes' member fields are checked.

		If the field is found, it is returned. Otherwise if `c` has a super
		class, `findField` recursively checks that super class. Otherwise null
		is returned.

		If any argument is null, the result is unspecified.</haxe_doc>
		</findField>
		<haxe_doc>This class provides some utility methods to work with types. It is
	best used through 'using haxe.macro.TypeTools' syntax and then provides
	additional methods on haxe.macro.Type instances.</haxe_doc>
		<meta><m n=":hlNative"><e>"macro"</e></m></meta>
	</class>
	<class path="haxe.macro.TypedExprTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/TypedExprTools.hx">
		<with set="method" line="33" static="1"><f a="e:?edef:?t">
	<t path="haxe.macro.TypedExpr"/>
	<e path="haxe.macro.TypedExprDef"/>
	<e path="haxe.macro.Type"/>
	<a>
		<t><x path="Null"><e path="haxe.macro.Type"/></x></t>
		<pos><t path="haxe.macro.Position"/></pos>
		<expr><x path="Null"><e path="haxe.macro.TypedExprDef"/></x></expr>
	</a>
</f></with>
		<map public="1" set="method" line="48" static="1">
			<f a="e:f">
				<t path="haxe.macro.TypedExpr"/>
				<f a="">
					<t path="haxe.macro.TypedExpr"/>
					<t path="haxe.macro.TypedExpr"/>
				</f>
				<t path="haxe.macro.TypedExpr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of `e` by calling `f` on each of them.

		See `haxe.macro.ExprTools.map` for details on expression mapping in
		general. This function works the same way, but with a different data
		structure.</haxe_doc>
		</map>
		<iter public="1" set="method" line="84" static="1">
			<f a="e:f">
				<t path="haxe.macro.TypedExpr"/>
				<f a="">
					<t path="haxe.macro.TypedExpr"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls function `f` on each sub-expression of `e`.

		See `haxe.macro.ExprTools.iter` for details on iterating expressions in
		general. This function works the same way, but with a different data
		structure.</haxe_doc>
		</iter>
		<mapWithType public="1" set="method" line="129" static="1">
			<f a="e:f:ft:fv">
				<t path="haxe.macro.TypedExpr"/>
				<f a="">
					<t path="haxe.macro.TypedExpr"/>
					<t path="haxe.macro.TypedExpr"/>
				</f>
				<f a="">
					<e path="haxe.macro.Type"/>
					<e path="haxe.macro.Type"/>
				</f>
				<f a="">
					<t path="haxe.macro.TVar"/>
					<t path="haxe.macro.TVar"/>
				</f>
				<t path="haxe.macro.TypedExpr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of `e` by calling `f` on each of them.
		Additionally, types are mapped using `ft` and variables are mapped using
		`fv`.

		See `haxe.macro.ExprTools.map` for details on expression mapping in
		general. This function works the same way, but with a different data
		structure.</haxe_doc>
		</mapWithType>
		<haxe_doc>This class provides some utility methods to work with typed expressions.
	It is best used through 'using haxe.macro.TypedExprTools' syntax and then
	provides additional methods on `haxe.macro.TypedExpr` instances.</haxe_doc>
	</class>
	<typedef path="haxe.rtti.Path" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="String"/>
		<haxe_doc>The (dot-)path of the runtime type.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Platforms" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="Array"><c path="String"/></c>
		<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.FunctionArgument" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<value>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</value>
			<t><e path="haxe.rtti.CType"/></t>
			<opt><x path="Bool"/></opt>
			<name><c path="String"/></name>
		</a>
		<haxe_doc>The function argument runtime type information.</haxe_doc>
	</typedef>
	<enum path="haxe.rtti.CType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx">
		<CUnknown/>
		<CEnum a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="Array"><e path="haxe.rtti.CType"/></c>
		</CEnum>
		<CClass a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="Array"><e path="haxe.rtti.CType"/></c>
		</CClass>
		<CTypedef a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="Array"><e path="haxe.rtti.CType"/></c>
		</CTypedef>
		<CFunction a="args:ret">
			<c path="Array"><t path="haxe.rtti.FunctionArgument"/></c>
			<e path="haxe.rtti.CType"/>
		</CFunction>
		<CAnonymous a="fields"><c path="Array"><t path="haxe.rtti.ClassField"/></c></CAnonymous>
		<CDynamic a="?t"><e path="haxe.rtti.CType"/></CDynamic>
		<CAbstract a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="Array"><e path="haxe.rtti.CType"/></c>
		</CAbstract>
		<haxe_doc>The runtime member types.</haxe_doc>
	</enum>
	<typedef path="haxe.rtti.PathParams" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The path of the type.</haxe_doc>
			</path>
			<params>
				<c path="Array"><e path="haxe.rtti.CType"/></c>
				<haxe_doc>The array of parameters types.</haxe_doc>
			</params>
		</a>
		<haxe_doc>The type parameters in the runtime type information.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.TypeParams" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="Array"><c path="String"/></c>
		<haxe_doc>An array of strings representing the names of the type parameters the type
	has. As of Haxe 3.2.0, this does not include the constraints.</haxe_doc>
	</typedef>
	<enum path="haxe.rtti.Rights" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<RNormal/>
		<RNo/>
		<RCall a="m"><c path="String"/></RCall>
		<RMethod/>
		<RDynamic/>
		<RInline/>
		<haxe_doc>Represents the runtime rights of a type.</haxe_doc>
	</enum>
	<typedef path="haxe.rtti.MetaData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="Array"><a>
	<params><c path="Array"><c path="String"/></c></params>
	<name><c path="String"/></name>
</a></c>
		<haxe_doc>The list of runtime metadata.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.ClassField" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<type>
				<e path="haxe.rtti.CType"/>
				<haxe_doc>The type of the field.</haxe_doc>
			</type>
			<set>
				<e path="haxe.rtti.Rights"/>
				<haxe_doc>The [write access](https://haxe.org/manual/dictionary.html#define-write-access)
		behavior of the field.</haxe_doc>
			</set>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the field is available.</haxe_doc>
			</platforms>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters
		the field has.</haxe_doc>
			</params>
			<overloads>
				<x path="Null"><c path="Array"><t path="haxe.rtti.ClassField"/></c></x>
				<haxe_doc>The list of available overloads for the fields or `null` if no overloads
		exists.</haxe_doc>
			</overloads>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The meta data the field was annotated with.</haxe_doc>
			</meta>
			<line>
				<x path="Null"><x path="Int"/></x>
				<haxe_doc>The line number where the field is defined. This information is only
		available if the field has an expression.
		Otherwise the value is `null`.</haxe_doc>
			</line>
			<isPublic>
				<x path="Bool"/>
				<haxe_doc>Whether or not the field is public.</haxe_doc>
			</isPublic>
			<isOverride>
				<x path="Bool"/>
				<haxe_doc>Whether or not the field overrides another field.</haxe_doc>
			</isOverride>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>Whether or not the field is final.</haxe_doc>
			</isFinal>
			<get>
				<e path="haxe.rtti.Rights"/>
				<haxe_doc>The [read access](https://haxe.org/manual/dictionary.html#define-read-access)
		behavior of the field.</haxe_doc>
			</get>
			<expr>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The actual expression of the field or `null` if there is no expression.</haxe_doc>
			</expr>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the field. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or
		if the field has no documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc><![CDATA[The runtime class field information.

	@see <https://haxe.org/manual/cr-rtti-structure.html#class-field-information>]]></haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.TypeInfos" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [private](https://haxe.org/manual/dictionary.html#define-private-type).</haxe_doc>
			</isPrivate>
			<file>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The full slash path of the .hx file containing the type.
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The general runtime type information.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Classdef" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<tdynamic>
				<x path="Null"><e path="haxe.rtti.CType"/></x>
				<haxe_doc>The type which is dynamically implemented by the class or `null` if no
		such type exists.</haxe_doc>
			</tdynamic>
			<superClass>
				<x path="Null"><t path="haxe.rtti.PathParams"/></x>
				<haxe_doc>The class' parent class defined by its type path and list of type
		parameters.</haxe_doc>
			</superClass>
			<statics>
				<c path="Array"><t path="haxe.rtti.ClassField"/></c>
				<haxe_doc>The list of static class fields.</haxe_doc>
			</statics>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [private](https://haxe.org/manual/dictionary.html#define-private-type).</haxe_doc>
			</isPrivate>
			<isInterface>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class is actually an [interface](https://haxe.org/manual/types-interfaces.html).</haxe_doc>
			</isInterface>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class is [extern](https://haxe.org/manual/lf-externs.html).</haxe_doc>
			</isExtern>
			<interfaces>
				<c path="Array"><t path="haxe.rtti.PathParams"/></c>
				<haxe_doc>The list of interfaces defined by their type path and list of type
		parameters.</haxe_doc>
			</interfaces>
			<file>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The full slash path of the .hx file containing the type.
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<fields>
				<c path="Array"><t path="haxe.rtti.ClassField"/></c>
				<haxe_doc>The list of member [class fields](https://haxe.org/manual/class-field.html).</haxe_doc>
			</fields>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The runtime class definition information.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.EnumField" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the constructor is
		available.</haxe_doc>
			</platforms>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the constructor.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The meta data the constructor was annotated with.</haxe_doc>
			</meta>
			<doc>
				<c path="String"/>
				<haxe_doc>The documentation of the constructor. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
			<args>
				<x path="Null"><c path="Array"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c></x>
				<haxe_doc>The list of arguments the constructor has or `null` if no arguments are
		available.</haxe_doc>
			</args>
		</a>
		<haxe_doc><![CDATA[The runtime enum constructor information.

	@see <https://haxe.org/manual/cr-rtti-structure.html#enum-constructor-information>]]></haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Enumdef" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [private](https://haxe.org/manual/dictionary.html#define-private-type).</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the enum is [extern](https://haxe.org/manual/lf-externs.html).</haxe_doc>
			</isExtern>
			<file>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The full slash path of the .hx file containing the type.
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
			<constructors>
				<c path="Array"><t path="haxe.rtti.EnumField"/></c>
				<haxe_doc>The list of enum constructors.</haxe_doc>
			</constructors>
		</a>
		<haxe_doc><![CDATA[The enum runtime type information.

	@see <https://haxe.org/manual/cr-rtti-structure.html#enum-type-information>]]></haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Typedef" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<types>
				<t path="Map">
					<c path="String"/>
					<e path="haxe.rtti.CType"/>
				</t>
				<haxe_doc>The types of the typedef, by platform.</haxe_doc>
			</types>
			<type>
				<e path="haxe.rtti.CType"/>
				<haxe_doc>The type of the typedef.</haxe_doc>
			</type>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [private](https://haxe.org/manual/dictionary.html#define-private-type).</haxe_doc>
			</isPrivate>
			<file>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The full slash path of the .hx file containing the type.
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The typedef runtime information.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Abstractdef" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<to><c path="Array"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<field><x path="Null"><c path="String"/></x></field>
</a></c></to>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [private](https://haxe.org/manual/dictionary.html#define-private-type).</haxe_doc>
			</isPrivate>
			<impl><t path="haxe.rtti.Classdef"/></impl>
			<from><c path="Array"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<field><x path="Null"><c path="String"/></x></field>
</a></c></from>
			<file>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The full slash path of the .hx file containing the type.
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
			<athis><e path="haxe.rtti.CType"/></athis>
		</a>
		<haxe_doc><![CDATA[The abstract type runtime information.

	@see <https://haxe.org/manual/cr-rtti-structure.html#abstract-type-information>]]></haxe_doc>
	</typedef>
	<enum path="haxe.rtti.TypeTree" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<TPackage a="name:full:subs">
			<c path="String"/>
			<c path="String"/>
			<c path="Array"><e path="haxe.rtti.TypeTree"/></c>
		</TPackage>
		<TClassdecl a="c"><t path="haxe.rtti.Classdef"/></TClassdecl>
		<TEnumdecl a="e"><t path="haxe.rtti.Enumdef"/></TEnumdecl>
		<TTypedecl a="t"><t path="haxe.rtti.Typedef"/></TTypedecl>
		<TAbstractdecl a="a"><t path="haxe.rtti.Abstractdef"/></TAbstractdecl>
		<haxe_doc>The tree types of the runtime type.</haxe_doc>
	</enum>
	<typedef path="haxe.rtti.TypeRoot" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="Array"><e path="haxe.rtti.TypeTree"/></c>
		<haxe_doc>Array of `TypeTree`.</haxe_doc>
	</typedef>
	<class path="haxe.rtti.TypeApi" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<typeInfos public="1" set="method" line="373" static="1"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<t path="haxe.rtti.TypeInfos"/>
</f></typeInfos>
		<isVar public="1" set="method" line="389" static="1">
			<f a="t">
				<e path="haxe.rtti.CType"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the given `CType` is a variable or `false` if it is a
		function.</haxe_doc>
		</isVar>
		<leq params="T" set="method" line="396" static="1"><f a="f:l1:l2">
	<f a=":">
		<c path="leq.T"/>
		<c path="leq.T"/>
		<x path="Bool"/>
	</f>
	<c path="Array"><c path="leq.T"/></c>
	<c path="Array"><c path="leq.T"/></c>
	<x path="Bool"/>
</f></leq>
		<rightsEq public="1" set="method" line="416" static="1">
			<f a="r1:r2">
				<e path="haxe.rtti.Rights"/>
				<e path="haxe.rtti.Rights"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Unlike `r1 == r2`, this function performs a deep equality check on
		the given `Rights` instances.

		If `r1` or `r2` are `null`, the result is unspecified.</haxe_doc>
		</rightsEq>
		<typeEq public="1" set="method" line="437" static="1">
			<f a="t1:t2">
				<e path="haxe.rtti.CType"/>
				<e path="haxe.rtti.CType"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Unlike `t1 == t2`, this function performs a deep equality check on
		the given `CType` instances.

		If `t1` or `t2` are `null`, the result is unspecified.</haxe_doc>
		</typeEq>
		<fieldEq public="1" set="method" line="496" static="1">
			<f a="f1:f2">
				<t path="haxe.rtti.ClassField"/>
				<t path="haxe.rtti.ClassField"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Unlike `f1 == f2`, this function performs a deep equality check on
		the given `ClassField` instances.

		If `f1` or `f2` are `null`, the result is unspecified.</haxe_doc>
		</fieldEq>
		<constructorEq public="1" set="method" line="522" static="1">
			<f a="c1:c2">
				<t path="haxe.rtti.EnumField"/>
				<t path="haxe.rtti.EnumField"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Unlike `c1 == c2`, this function performs a deep equality check on
		the arguments of the enum constructors, if exists.

		If `c1` or `c2` are `null`, the result is unspecified.</haxe_doc>
		</constructorEq>
		<haxe_doc>Contains type and equality checks functionalities for RTTI.</haxe_doc>
	</class>
	<class path="haxe.rtti.CTypeTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<toString public="1" set="method" line="544" static="1">
			<f a="t">
				<e path="haxe.rtti.CType"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the string representation of `CType`.</haxe_doc>
		</toString>
		<nameWithParams set="method" line="567" static="1"><f a="name:params">
	<c path="String"/>
	<c path="Array"><e path="haxe.rtti.CType"/></c>
	<c path="String"/>
</f></nameWithParams>
		<functionArgumentName set="method" line="574" static="1"><f a="arg">
	<t path="haxe.rtti.FunctionArgument"/>
	<c path="String"/>
</f></functionArgumentName>
		<classField set="method" line="578" static="1"><f a="cf">
	<t path="haxe.rtti.ClassField"/>
	<c path="String"/>
</f></classField>
		<haxe_doc>The CTypeTools class contains some extra functionalities for handling
	`CType` instances.</haxe_doc>
	</class>
	<typedef path="haxe.rtti._Meta.MetaObject" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/Meta.hx" private="1" module="haxe.rtti.Meta"><a>
	<statics>
		<x path="Null"><d><d><x path="Null"><c path="Array"><d/></c></x></d></d></x>
		<meta><m n=":optional"/></meta>
	</statics>
	<obj>
		<x path="Null"><d><x path="Null"><c path="Array"><d/></c></x></d></x>
		<meta><m n=":optional"/></meta>
	</obj>
	<fields>
		<x path="Null"><d><d><x path="Null"><c path="Array"><d/></c></x></d></d></x>
		<meta><m n=":optional"/></meta>
	</fields>
</a></typedef>
	<class path="haxe.rtti.Meta" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/Meta.hx">
		<getType public="1" set="method" line="40" static="1">
			<f a="t">
				<d/>
				<d><c path="Array"><d/></c></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given type (class or enum)</haxe_doc>
		</getType>
		<isInterface set="method" line="46" static="1"><f a="t">
	<d/>
	<x path="Bool"/>
</f></isInterface>
		<getMeta set="method" line="58" static="1"><f a="t">
	<d/>
	<t path="haxe.rtti._Meta.MetaObject"/>
</f></getMeta>
		<getStatics public="1" set="method" line="85" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given class static fields</haxe_doc>
		</getStatics>
		<getFields public="1" set="method" line="93" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given class fields or enum constructors</haxe_doc>
		</getFields>
		<haxe_doc><![CDATA[An API to access classes and enums metadata at runtime.

	@see <https://haxe.org/manual/cr-rtti.html>]]></haxe_doc>
	</class>
	<class path="haxe.rtti.Rtti" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/Rtti.hx">
		<getRtti public="1" params="T" set="method" line="41" static="1">
			<f a="c">
				<x path="Class"><c path="getRtti.T"/></x>
				<t path="haxe.rtti.Classdef"/>
			</f>
			<haxe_doc>Returns the `haxe.rtti.CType.Classdef` corresponding to class `c`.

		If `c` has no runtime type information, e.g. because no `@:rtti@` was
		added, `null` is returned.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getRtti>
		<hasRtti public="1" params="T" set="method" line="59" static="1">
			<f a="c">
				<x path="Class"><c path="hasRtti.T"/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `c` has runtime type information.

		If `c` is null, the result is unspecified.</haxe_doc>
		</hasRtti>
		<haxe_doc><![CDATA[Rtti is a helper class which supplements the `@:rtti` metadata.

	@see <https://haxe.org/manual/cr-rtti.html>]]></haxe_doc>
	</class>
	<class path="haxe.rtti.XmlParser" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/XmlParser.hx">
		<root public="1"><t path="haxe.rtti.TypeRoot"/></root>
		<curplatform><c path="String"/></curplatform>
		<sort public="1" set="method" line="41"><f a="?l">
	<t path="haxe.rtti.TypeRoot"/>
	<x path="Void"/>
</f></sort>
		<sortFields set="method" line="68"><f a="a">
	<c path="Array"><t path="haxe.rtti.ClassField"/></c>
	<x path="Void"/>
</f></sortFields>
		<process public="1" set="method" line="86"><f a="x:platform">
	<c path="Xml"/>
	<c path="String"/>
	<x path="Void"/>
</f></process>
		<mergeRights set="method" line="92"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></mergeRights>
		<mergeDoc set="method" line="101"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></mergeDoc>
		<mergeFields set="method" line="109"><f a="f:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></mergeFields>
		<newField public="1" set="dynamic" line="113"><f a="c:f">
	<t path="haxe.rtti.Classdef"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Void"/>
</f></newField>
		<mergeClasses set="method" line="116"><f a="c:c2">
	<t path="haxe.rtti.Classdef"/>
	<t path="haxe.rtti.Classdef"/>
	<x path="Bool"/>
</f></mergeClasses>
		<mergeEnums set="method" line="154"><f a="e:e2">
	<t path="haxe.rtti.Enumdef"/>
	<t path="haxe.rtti.Enumdef"/>
	<x path="Bool"/>
</f></mergeEnums>
		<mergeTypedefs set="method" line="174"><f a="t:t2">
	<t path="haxe.rtti.Typedef"/>
	<t path="haxe.rtti.Typedef"/>
	<x path="Bool"/>
</f></mergeTypedefs>
		<mergeAbstracts set="method" line="182"><f a="a:a2">
	<t path="haxe.rtti.Abstractdef"/>
	<t path="haxe.rtti.Abstractdef"/>
	<x path="Bool"/>
</f></mergeAbstracts>
		<merge set="method" line="198"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<x path="Void"/>
</f></merge>
		<mkPath set="method" line="285"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.Path"/>
</f></mkPath>
		<mkTypeParams set="method" line="289"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.TypeParams"/>
</f></mkTypeParams>
		<mkRights set="method" line="296"><f a="r">
	<c path="String"/>
	<e path="haxe.rtti.Rights"/>
</f></mkRights>
		<xerror set="method" line="306"><f a="c">
	<x path="haxe.xml.Access"/>
	<d/>
</f></xerror>
		<xroot set="method" line="310"><f a="x">
	<x path="haxe.xml.Access"/>
	<x path="Void"/>
</f></xroot>
		<processElement public="1" set="method" line="316"><f a="x">
	<c path="Xml"/>
	<e path="haxe.rtti.TypeTree"/>
</f></processElement>
		<xmeta set="method" line="327"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.MetaData"/>
</f></xmeta>
		<xoverloads set="method" line="338"><f a="x">
	<x path="haxe.xml.Access"/>
	<c path="Array"><t path="haxe.rtti.ClassField"/></c>
</f></xoverloads>
		<xpath set="method" line="346"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.PathParams"/>
</f></xpath>
		<xclass set="method" line="357"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.Classdef"/>
</f></xclass>
		<xclassfield set="method" line="397">
			<f a="x:?defPublic" v=":false">
				<x path="haxe.xml.Access"/>
				<x path="Bool"/>
				<t path="haxe.rtti.ClassField"/>
			</f>
			<meta><m n=":value"><e>{ defPublic : false }</e></m></meta>
		</xclassfield>
		<xenum set="method" line="428"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.Enumdef"/>
</f></xenum>
		<xenumfield set="method" line="453"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.EnumField"/>
</f></xenumfield>
		<xabstract set="method" line="484"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.Abstractdef"/>
</f></xabstract>
		<xtypedef set="method" line="523"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.Typedef"/>
</f></xtypedef>
		<xtype set="method" line="551"><f a="x">
	<x path="haxe.xml.Access"/>
	<e path="haxe.rtti.CType"/>
</f></xtype>
		<xtypeparams set="method" line="607"><f a="x">
	<x path="haxe.xml.Access"/>
	<c path="Array"><e path="haxe.rtti.CType"/></c>
</f></xtypeparams>
		<defplat set="method" line="614"><f a=""><c path="Array"><c path="String"/></c></f></defplat>
		<new public="1" set="method" line="37"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[XmlParser processes the runtime type information (RTTI) which
	is stored as a XML string in a static field `__rtti`.

	@see <https://haxe.org/manual/cr-rtti.html>]]></haxe_doc>
	</class>
	<abstract path="haxe.xml._Access.NodeAccess" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.NodeAccess_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access"><resolve public="1" set="method" line="27" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<x path="haxe.xml.Access"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":op"><e>a.b</e></m>
	</meta>
</resolve></class></impl>
	</abstract>
	<class path="haxe.xml._Access.NodeAccess_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access"><resolve public="1" set="method" line="27" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<x path="haxe.xml.Access"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":op"><e>a.b</e></m>
	</meta>
</resolve></class>
	<abstract path="haxe.xml._Access.AttribAccess" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.AttribAccess_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
	<resolve public="1" set="method" line="41" static="1">
		<f a="this:name">
			<c path="Xml"/>
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>a.b</e></m>
		</meta>
	</resolve>
	<_hx_set set="method" line="51" static="1">
		<f a="this:name:value">
			<c path="Xml"/>
			<c path="String"/>
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>a.b</e></m>
		</meta>
	</_hx_set>
</class></impl>
	</abstract>
	<class path="haxe.xml._Access.AttribAccess_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<resolve public="1" set="method" line="41" static="1">
			<f a="this:name">
				<c path="Xml"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>a.b</e></m>
			</meta>
		</resolve>
		<_hx_set set="method" line="51" static="1">
			<f a="this:name:value">
				<c path="Xml"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>a.b</e></m>
			</meta>
		</_hx_set>
	</class>
	<abstract path="haxe.xml._Access.HasAttribAccess" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.HasAttribAccess_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access"><resolve public="1" set="method" line="63" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<x path="Bool"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":op"><e>a.b</e></m>
	</meta>
</resolve></class></impl>
	</abstract>
	<class path="haxe.xml._Access.HasAttribAccess_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access"><resolve public="1" set="method" line="63" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<x path="Bool"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":op"><e>a.b</e></m>
	</meta>
</resolve></class>
	<abstract path="haxe.xml._Access.HasNodeAccess" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.HasNodeAccess_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access"><resolve public="1" set="method" line="74" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<x path="Bool"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":op"><e>a.b</e></m>
	</meta>
</resolve></class></impl>
	</abstract>
	<class path="haxe.xml._Access.HasNodeAccess_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access"><resolve public="1" set="method" line="74" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<x path="Bool"/>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":op"><e>a.b</e></m>
	</meta>
</resolve></class>
	<abstract path="haxe.xml._Access.NodeListAccess" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.NodeListAccess_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access"><resolve public="1" set="method" line="83" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<c path="Array"><x path="haxe.xml.Access"/></c>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":op"><e>a.b</e></m>
	</meta>
</resolve></class></impl>
	</abstract>
	<class path="haxe.xml._Access.NodeListAccess_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access"><resolve public="1" set="method" line="83" static="1">
	<f a="this:name">
		<c path="Xml"/>
		<c path="String"/>
		<c path="Array"><x path="haxe.xml.Access"/></c>
	</f>
	<meta>
		<m n=":impl"/>
		<m n=":op"><e>a.b</e></m>
	</meta>
</resolve></class>
	<abstract path="haxe.xml.Access" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Access.hx">
		<this><c path="Xml"/></this>
		<haxe_doc>The `haxe.xml.Access` API helps providing a fast dot-syntax access to the
	most common `Xml` methods.</haxe_doc>
		<impl><class path="haxe.xml._Access.Access_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
	<x public="1" get="accessor" set="null" static="1">
		<c path="Xml"/>
		<meta><m n=":impl"/></meta>
	</x>
	<get_x public="1" get="inline" set="null" line="98" static="1">
		<f a="this">
			<c path="Xml"/>
			<c path="Xml"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_x>
	<name public="1" get="accessor" set="null" static="1">
		<c path="String"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>The name of the current element. This is the same as `Xml.nodeName`.</haxe_doc>
	</name>
	<get_name get="inline" set="null" line="104" static="1">
		<f a="this">
			<c path="Xml"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_name>
	<innerData public="1" get="accessor" set="null" static="1">
		<c path="String"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>The inner PCDATA or CDATA of the node.

		An exception is thrown if there is no data or if there not only data
		but also other nodes.</haxe_doc>
	</innerData>
	<innerHTML public="1" get="accessor" set="null" static="1">
		<c path="String"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>The XML string built with all the sub nodes, excluding the current one.</haxe_doc>
	</innerHTML>
	<node public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.NodeAccess"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Access to the first sub element with the given name.

		An exception is thrown if the element doesn't exists.
		Use `hasNode` to check the existence of a node.

		```haxe
		var access = new haxe.xml.Access(Xml.parse("<user><name>John</name></user>"));
		var user = access.node.user;
		var name = user.node.name;
		trace(name.innerData); // John

		// Uncaught Error: Document is missing element password
		var password = user.node.password;
		```]]></haxe_doc>
	</node>
	<get_node get="inline" set="null" line="138" static="1">
		<f a="this">
			<c path="Xml"/>
			<x path="haxe.xml._Access.NodeAccess"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_node>
	<nodes public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.NodeListAccess"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Access to the List of elements with the given name.
		```haxe
		var fast = new haxe.xml.Access(Xml.parse("
			<users>
				<user name='John'/>
				<user name='Andy'/>
				<user name='Dan'/>
			</users>"
		));

		var users = fast.node.users;
		for (user in users.nodes.user) {
			trace(user.att.name);
		}
		```]]></haxe_doc>
	</nodes>
	<get_nodes get="inline" set="null" line="158" static="1">
		<f a="this">
			<c path="Xml"/>
			<x path="haxe.xml._Access.NodeListAccess"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_nodes>
	<att public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.AttribAccess"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Access to a given attribute.

		An exception is thrown if the attribute doesn't exists.
		Use `has` to check the existence of an attribute.

		```haxe
		var f = new haxe.xml.Access(Xml.parse("<user name='Mark'></user>"));
		var user = f.node.user;
		if (user.has.name) {
			trace(user.att.name); // Mark
		}
		```]]></haxe_doc>
	</att>
	<get_att get="inline" set="null" line="175" static="1">
		<f a="this">
			<c path="Xml"/>
			<x path="haxe.xml._Access.AttribAccess"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_att>
	<has public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.HasAttribAccess"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Check the existence of an attribute with the given name.</haxe_doc>
	</has>
	<get_has get="inline" set="null" line="181" static="1">
		<f a="this">
			<c path="Xml"/>
			<x path="haxe.xml._Access.HasAttribAccess"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_has>
	<hasNode public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.HasNodeAccess"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Check the existence of a sub node with the given name.

		```haxe
		var f = new haxe.xml.Access(Xml.parse("<user><age>31</age></user>"));
		var user = f.node.user;
		if (user.hasNode.age) {
			trace(user.node.age.innerData); // 31
		}
		```]]></haxe_doc>
	</hasNode>
	<get_hasNode get="inline" set="null" line="195" static="1">
		<f a="this">
			<c path="Xml"/>
			<x path="haxe.xml._Access.HasNodeAccess"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_hasNode>
	<elements public="1" get="accessor" set="null" static="1">
		<t path="Iterator"><x path="haxe.xml.Access"/></t>
		<meta><m n=":impl"/></meta>
		<haxe_doc>The list of all sub-elements which are the nodes with type `Xml.Element`.</haxe_doc>
	</elements>
	<get_elements get="inline" set="null" line="201" static="1">
		<f a="this">
			<c path="Xml"/>
			<t path="Iterator"><x path="haxe.xml.Access"/></t>
		</f>
		<meta><m n=":impl"/></meta>
	</get_elements>
	<_new public="1" get="inline" set="null" line="203" static="1">
		<f a="x">
			<c path="Xml"/>
			<x path="haxe.xml.Access"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<get_innerData set="method" line="209" static="1">
		<f a="this">
			<c path="Xml"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_innerData>
	<get_innerHTML set="method" line="231" static="1">
		<f a="this">
			<c path="Xml"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_innerHTML>
</class></impl>
	</abstract>
	<class path="haxe.xml._Access.Access_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<x public="1" get="accessor" set="null" static="1">
			<c path="Xml"/>
			<meta><m n=":impl"/></meta>
		</x>
		<get_x public="1" get="inline" set="null" line="98" static="1">
			<f a="this">
				<c path="Xml"/>
				<c path="Xml"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_x>
		<name public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>The name of the current element. This is the same as `Xml.nodeName`.</haxe_doc>
		</name>
		<get_name get="inline" set="null" line="104" static="1">
			<f a="this">
				<c path="Xml"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_name>
		<innerData public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>The inner PCDATA or CDATA of the node.

		An exception is thrown if there is no data or if there not only data
		but also other nodes.</haxe_doc>
		</innerData>
		<innerHTML public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>The XML string built with all the sub nodes, excluding the current one.</haxe_doc>
		</innerHTML>
		<node public="1" get="accessor" set="null" static="1">
			<x path="haxe.xml._Access.NodeAccess"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Access to the first sub element with the given name.

		An exception is thrown if the element doesn't exists.
		Use `hasNode` to check the existence of a node.

		```haxe
		var access = new haxe.xml.Access(Xml.parse("<user><name>John</name></user>"));
		var user = access.node.user;
		var name = user.node.name;
		trace(name.innerData); // John

		// Uncaught Error: Document is missing element password
		var password = user.node.password;
		```]]></haxe_doc>
		</node>
		<get_node get="inline" set="null" line="138" static="1">
			<f a="this">
				<c path="Xml"/>
				<x path="haxe.xml._Access.NodeAccess"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_node>
		<nodes public="1" get="accessor" set="null" static="1">
			<x path="haxe.xml._Access.NodeListAccess"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Access to the List of elements with the given name.
		```haxe
		var fast = new haxe.xml.Access(Xml.parse("
			<users>
				<user name='John'/>
				<user name='Andy'/>
				<user name='Dan'/>
			</users>"
		));

		var users = fast.node.users;
		for (user in users.nodes.user) {
			trace(user.att.name);
		}
		```]]></haxe_doc>
		</nodes>
		<get_nodes get="inline" set="null" line="158" static="1">
			<f a="this">
				<c path="Xml"/>
				<x path="haxe.xml._Access.NodeListAccess"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_nodes>
		<att public="1" get="accessor" set="null" static="1">
			<x path="haxe.xml._Access.AttribAccess"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Access to a given attribute.

		An exception is thrown if the attribute doesn't exists.
		Use `has` to check the existence of an attribute.

		```haxe
		var f = new haxe.xml.Access(Xml.parse("<user name='Mark'></user>"));
		var user = f.node.user;
		if (user.has.name) {
			trace(user.att.name); // Mark
		}
		```]]></haxe_doc>
		</att>
		<get_att get="inline" set="null" line="175" static="1">
			<f a="this">
				<c path="Xml"/>
				<x path="haxe.xml._Access.AttribAccess"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_att>
		<has public="1" get="accessor" set="null" static="1">
			<x path="haxe.xml._Access.HasAttribAccess"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Check the existence of an attribute with the given name.</haxe_doc>
		</has>
		<get_has get="inline" set="null" line="181" static="1">
			<f a="this">
				<c path="Xml"/>
				<x path="haxe.xml._Access.HasAttribAccess"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_has>
		<hasNode public="1" get="accessor" set="null" static="1">
			<x path="haxe.xml._Access.HasNodeAccess"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Check the existence of a sub node with the given name.

		```haxe
		var f = new haxe.xml.Access(Xml.parse("<user><age>31</age></user>"));
		var user = f.node.user;
		if (user.hasNode.age) {
			trace(user.node.age.innerData); // 31
		}
		```]]></haxe_doc>
		</hasNode>
		<get_hasNode get="inline" set="null" line="195" static="1">
			<f a="this">
				<c path="Xml"/>
				<x path="haxe.xml._Access.HasNodeAccess"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_hasNode>
		<elements public="1" get="accessor" set="null" static="1">
			<t path="Iterator"><x path="haxe.xml.Access"/></t>
			<meta><m n=":impl"/></meta>
			<haxe_doc>The list of all sub-elements which are the nodes with type `Xml.Element`.</haxe_doc>
		</elements>
		<get_elements get="inline" set="null" line="201" static="1">
			<f a="this">
				<c path="Xml"/>
				<t path="Iterator"><x path="haxe.xml.Access"/></t>
			</f>
			<meta><m n=":impl"/></meta>
		</get_elements>
		<_new public="1" get="inline" set="null" line="203" static="1">
			<f a="x">
				<c path="Xml"/>
				<x path="haxe.xml.Access"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<get_innerData set="method" line="209" static="1">
			<f a="this">
				<c path="Xml"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_innerData>
		<get_innerHTML set="method" line="231" static="1">
			<f a="this">
				<c path="Xml"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_innerHTML>
	</class>
	<enum path="haxe.xml.Filter" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Check.hx" module="haxe.xml.Check">
		<FInt/>
		<FBool/>
		<FEnum a="values"><c path="Array"><c path="String"/></c></FEnum>
		<FReg a="matcher"><c path="EReg"/></FReg>
	</enum>
	<enum path="haxe.xml.Attrib" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Check.hx" module="haxe.xml.Check"><Att a="name:?filter:?defvalue">
	<c path="String"/>
	<e path="haxe.xml.Filter"/>
	<c path="String"/>
</Att></enum>
	<enum path="haxe.xml.Rule" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Check.hx" module="haxe.xml.Check">
		<RNode a="name:?attribs:?childs">
			<c path="String"/>
			<c path="Array"><e path="haxe.xml.Attrib"/></c>
			<e path="haxe.xml.Rule"/>
		</RNode>
		<RData a="?filter"><e path="haxe.xml.Filter"/></RData>
		<RMulti a="rule:?atLeastOne">
			<e path="haxe.xml.Rule"/>
			<x path="Bool"/>
		</RMulti>
		<RList a="rules:?ordered">
			<c path="Array"><e path="haxe.xml.Rule"/></c>
			<x path="Bool"/>
		</RList>
		<RChoice a="choices"><c path="Array"><e path="haxe.xml.Rule"/></c></RChoice>
		<ROptional a="rule"><e path="haxe.xml.Rule"/></ROptional>
	</enum>
	<enum path="haxe.xml._Check.CheckResult" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Check.hx" private="1" module="haxe.xml.Check">
		<CMatch/>
		<CMissing a="r"><e path="haxe.xml.Rule"/></CMissing>
		<CExtra a="x"><c path="Xml"/></CExtra>
		<CElementExpected a="name:x">
			<c path="String"/>
			<c path="Xml"/>
		</CElementExpected>
		<CDataExpected a="x"><c path="Xml"/></CDataExpected>
		<CExtraAttrib a="att:x">
			<c path="String"/>
			<c path="Xml"/>
		</CExtraAttrib>
		<CMissingAttrib a="att:x">
			<c path="String"/>
			<c path="Xml"/>
		</CMissingAttrib>
		<CInvalidAttrib a="att:x:f">
			<c path="String"/>
			<c path="Xml"/>
			<e path="haxe.xml.Filter"/>
		</CInvalidAttrib>
		<CInvalidData a="x:f">
			<c path="Xml"/>
			<e path="haxe.xml.Filter"/>
		</CInvalidData>
		<CInElement a="x:r">
			<c path="Xml"/>
			<e path="haxe.xml._Check.CheckResult"/>
		</CInElement>
	</enum>
	<class path="haxe.xml.Check" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Check.hx">
		<blanks expr="~/^[ 
	]*$/" line="59" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[ 
	]*$/</e></m></meta>
		</blanks>
		<isBlank set="method" line="61" static="1"><f a="x">
	<c path="Xml"/>
	<x path="Bool"/>
</f></isBlank>
		<filterMatch set="method" line="65" static="1"><f a="s:f">
	<c path="String"/>
	<e path="haxe.xml.Filter"/>
	<x path="Bool"/>
</f></filterMatch>
		<isNullable set="method" line="79" static="1"><f a="r">
	<e path="haxe.xml.Rule"/>
	<x path="Bool"/>
</f></isNullable>
		<check set="method" line="102" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<e path="haxe.xml._Check.CheckResult"/>
</f></check>
		<checkList set="method" line="167" static="1"><f a="it:r">
	<t path="Iterator"><c path="Xml"/></t>
	<e path="haxe.xml.Rule"/>
	<e path="haxe.xml._Check.CheckResult"/>
</f></checkList>
		<makeWhere set="method" line="240" static="1"><f a="path">
	<c path="Array"><c path="Xml"/></c>
	<c path="String"/>
</f></makeWhere>
		<makeString set="method" line="255" static="1"><f a="x">
	<c path="Xml"/>
	<c path="String"/>
</f></makeString>
		<makeRule set="method" line="264" static="1"><f a="r">
	<e path="haxe.xml.Rule"/>
	<c path="String"/>
</f></makeRule>
		<makeError set="method" line="275" static="1"><f a="m:?path">
	<e path="haxe.xml._Check.CheckResult"/>
	<c path="Array"><c path="Xml"/></c>
	<c path="String"/>
</f></makeError>
		<checkNode public="1" set="method" line="305" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<x path="Void"/>
</f></checkNode>
		<checkDocument public="1" set="method" line="312" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<x path="Void"/>
</f></checkDocument>
	</class>
	<typedef path="haxe.xml.Fast" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Fast.hx">
		<x path="haxe.xml.Access"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<class path="haxe.xml._Parser.S" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Parser.hx" private="1" module="haxe.xml.Parser" extern="1">
		<IGNORE_SPACES public="1" get="inline" set="null" expr="0" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</IGNORE_SPACES>
		<BEGIN public="1" get="inline" set="null" expr="1" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</BEGIN>
		<BEGIN_NODE public="1" get="inline" set="null" expr="2" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</BEGIN_NODE>
		<TAG_NAME public="1" get="inline" set="null" expr="3" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</TAG_NAME>
		<BODY public="1" get="inline" set="null" expr="4" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BODY>
		<ATTRIB_NAME public="1" get="inline" set="null" expr="5" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</ATTRIB_NAME>
		<EQUALS public="1" get="inline" set="null" expr="6" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</EQUALS>
		<ATTVAL_BEGIN public="1" get="inline" set="null" expr="7" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</ATTVAL_BEGIN>
		<ATTRIB_VAL public="1" get="inline" set="null" expr="8" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</ATTRIB_VAL>
		<CHILDS public="1" get="inline" set="null" expr="9" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</CHILDS>
		<CLOSE public="1" get="inline" set="null" expr="10" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</CLOSE>
		<WAIT_END public="1" get="inline" set="null" expr="11" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>11</e></m></meta>
		</WAIT_END>
		<WAIT_END_RET public="1" get="inline" set="null" expr="12" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</WAIT_END_RET>
		<PCDATA public="1" get="inline" set="null" expr="13" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>13</e></m></meta>
		</PCDATA>
		<HEADER public="1" get="inline" set="null" expr="14" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>14</e></m></meta>
		</HEADER>
		<COMMENT public="1" get="inline" set="null" expr="15" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>15</e></m></meta>
		</COMMENT>
		<DOCTYPE public="1" get="inline" set="null" expr="16" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</DOCTYPE>
		<CDATA public="1" get="inline" set="null" expr="17" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>17</e></m></meta>
		</CDATA>
		<ESCAPE public="1" get="inline" set="null" expr="18" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>18</e></m></meta>
		</ESCAPE>
	</class>
	<class path="haxe.xml.XmlParserException" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Parser.hx" module="haxe.xml.Parser">
		<message public="1">
			<c path="String"/>
			<haxe_doc>* the XML parsing error message</haxe_doc>
		</message>
		<lineNumber public="1">
			<x path="Int"/>
			<haxe_doc>* the line number at which the XML parsing error occurred</haxe_doc>
		</lineNumber>
		<positionAtLine public="1">
			<x path="Int"/>
			<haxe_doc>* the character position in the reported line at which the parsing error occurred</haxe_doc>
		</positionAtLine>
		<position public="1">
			<x path="Int"/>
			<haxe_doc>* the character position in the XML string at which the parsing error occurred</haxe_doc>
		</position>
		<xml public="1">
			<c path="String"/>
			<haxe_doc>* the invalid XML string</haxe_doc>
		</xml>
		<toString public="1" set="method" line="96"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="76"><f a="message:xml:position">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="hl.types._BytesMap.BytesMap_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/types/BytesMap.hx" private="1" module="hl.types.BytesMap">
		<_new public="1" get="inline" set="null" line="28" static="1">
			<f a=""><x path="hl.types.BytesMap"/></f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<alloc set="method" line="32" static="1">
			<f a=""><t path="hl.types.BytesMapData"/></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"hballoc"</e>
</m></meta>
		</alloc>
		<set public="1" set="method" line="37" static="1">
			<f a="this:key:value">
				<t path="hl.types.BytesMapData"/>
				<x path="hl.Bytes"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"hbset"</e>
				</m>
			</meta>
		</set>
		<exists public="1" set="method" line="41" static="1">
			<f a="this:key">
				<t path="hl.types.BytesMapData"/>
				<x path="hl.Bytes"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"hbexists"</e>
				</m>
			</meta>
		</exists>
		<get public="1" set="method" line="46" static="1">
			<f a="this:key">
				<t path="hl.types.BytesMapData"/>
				<x path="hl.Bytes"/>
				<d/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"hbget"</e>
				</m>
			</meta>
		</get>
		<remove public="1" set="method" line="51" static="1">
			<f a="this:key">
				<t path="hl.types.BytesMapData"/>
				<x path="hl.Bytes"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"hbremove"</e>
				</m>
			</meta>
		</remove>
		<keysArray public="1" set="method" line="56" static="1">
			<f a="this">
				<t path="hl.types.BytesMapData"/>
				<x path="hl.NativeArray"><x path="hl.Bytes"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"hbkeys"</e>
				</m>
			</meta>
		</keysArray>
		<valuesArray public="1" set="method" line="61" static="1">
			<f a="this">
				<t path="hl.types.BytesMapData"/>
				<x path="hl.NativeArray"><d/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"hbvalues"</e>
				</m>
			</meta>
		</valuesArray>
		<iterator public="1" get="inline" set="null" line="65" static="1">
			<f a="this">
				<t path="hl.types.BytesMapData"/>
				<c path="hl.NativeArrayIterator_Dynamic"/>
			</f>
			<meta><m n=":impl"/></meta>
		</iterator>
	</class>
	<class path="haxe.xml.Parser" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Parser.hx">
		<escapes expr="{
	var h = new haxe.ds.StringMap();
	h.set(&quot;lt&quot;, &quot;&lt;&quot;);
	h.set(&quot;gt&quot;, &quot;&gt;&quot;);
	h.set(&quot;amp&quot;, &quot;&amp;&quot;);
	h.set(&quot;quot&quot;, &quot;\&quot;&quot;);
	h.set(&quot;apos&quot;, &quot;&apos;&quot;);
	h;
}" line="104" static="1">
			<c path="haxe.ds.StringMap"><c path="String"/></c>
			<meta><m n=":value"><e><![CDATA[{
	var h = new haxe.ds.StringMap();
	h.set("lt", "<");
	h.set("gt", ">");
	h.set("amp", "&");
	h.set("quot", "\"");
	h.set("apos", "'");
	h;
}]]></e></m></meta>
		</escapes>
		<parse public="1" set="method" line="119" static="1">
			<f a="str:?strict" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="Xml"/>
			</f>
			<meta><m n=":value"><e>{ strict : false }</e></m></meta>
			<haxe_doc>* Parses the String into an XML Document. Set strict parsing to true in order to enable a strict check of XML attributes and entities.
	 *
	 * @throws haxe.xml.XmlParserException</haxe_doc>
		</parse>
		<doParse set="method" line="126" static="1">
			<f a="str:strict:?p:?parent" v="::0:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="Xml"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ p : 0 }</e></m></meta>
		</doParse>
		<isValidChar get="inline" set="null" line="448" static="1"><f a="c">
	<x path="Int"/>
	<x path="Bool"/>
</f></isValidChar>
	</class>
	<class path="haxe.xml.Printer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Printer.hx">
		<print public="1" set="method" line="35" static="1">
			<f a="xml:?pretty" v=":false">
				<c path="Xml"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ pretty : false }</e></m></meta>
			<haxe_doc>Convert `Xml` to string representation.

		Set `pretty` to `true` to prettify the result.</haxe_doc>
		</print>
		<output><c path="StringBuf"/></output>
		<pretty><x path="Bool"/></pretty>
		<writeNode set="method" line="49"><f a="value:tabs">
	<c path="Xml"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeNode>
		<write get="inline" set="null" line="104"><f a="input">
	<c path="String"/>
	<x path="Void"/>
</f></write>
		<newline get="inline" set="null" line="108"><f a=""><x path="Void"/></f></newline>
		<hasChildren set="method" line="114"><f a="value">
	<c path="Xml"/>
	<x path="Bool"/>
</f></hasChildren>
		<new set="method" line="44"><f a="pretty">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>This class provides utility methods to convert Xml instances to
	String representation.</haxe_doc>
	</class>
	<class path="haxe.xml.Proxy" params="Const:T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Proxy.hx">
		<__f><f a="">
	<c path="String"/>
	<c path="haxe.xml.Proxy.T"/>
</f></__f>
		<resolve public="1" set="method" line="49"><f a="k">
	<c path="String"/>
	<c path="haxe.xml.Proxy.T"/>
</f></resolve>
		<new public="1" set="method" line="45"><f a="f">
	<f a="">
		<c path="String"/>
		<c path="haxe.xml.Proxy.T"/>
	</f>
	<x path="Void"/>
</f></new>
		<haxe_doc><![CDATA[This proxy can be inherited with an XML file name parameter.
	It will	only allow access to fields which corresponds to an "id" attribute
	value in the XML file :

	```haxe
	class MyXml extends haxe.xml.Proxy<"my.xml", MyStructure> {
	}
	
	var h = new haxe.ds.StringMap<MyStructure>();
	// ... fill h with "my.xml" content
	var m = new MyXml(h.get);
	trace(m.myNode.structField);
	// Access to "myNode" is only possible if you have an id="myNode" attribute
	// in your XML, and completion works as well.
	```]]></haxe_doc>
	</class>
	<typedef path="haxe.zip._Compress.Deflater" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/haxe/zip/Compress.hx" private="1" module="haxe.zip.Compress"><c path="hl.Abstract"><c path="Sfmt_zip"/></c></typedef>
	<class path="haxe.zip.Compress" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/haxe/zip/Compress.hx">
		<run public="1" set="method" line="49" static="1"><f a="s:level">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<deflate_init set="method" line="63" static="1"><f a="level">
	<x path="Int"/>
	<t path="haxe.zip._Compress.Deflater"/>
</f></deflate_init>
		<deflate_buffer set="method" line="64" static="1"><f a="i:bytes:bytesPos:bytesLen:dst:dstPos:dstLen:read:write">
	<t path="haxe.zip._Compress.Deflater"/>
	<x path="hl.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="hl.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="hl.Ref"><x path="Int"/></x>
	<x path="hl.Ref"><x path="Int"/></x>
	<x path="Bool"/>
</f></deflate_buffer>
		<deflate_bound set="method" line="67" static="1"><f a="i:length">
	<t path="haxe.zip._Compress.Deflater"/>
	<x path="Int"/>
	<x path="Int"/>
</f></deflate_bound>
		<s><t path="haxe.zip._Compress.Deflater"/></s>
		<execute public="1" set="method" line="35"><f a="src:srcPos:dst:dstPos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></execute>
		<setFlushMode public="1" set="method" line="41"><f a="f">
	<e path="haxe.zip.FlushMode"/>
	<x path="Void"/>
</f></setFlushMode>
		<close public="1" set="method" line="45"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="31"><f a="level">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":coreApi"/>
			<m n=":hlNative"><e>"fmt"</e></m>
		</meta>
	</class>
	<enum path="haxe.zip.ExtraField" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/Entry.hx" module="haxe.zip.Entry">
		<FUnknown a="tag:bytes">
			<x path="Int"/>
			<c path="haxe.io.Bytes"/>
		</FUnknown>
		<FInfoZipUnicodePath a="name:crc">
			<c path="String"/>
			<x path="Int"/>
		</FInfoZipUnicodePath>
		<FUtf8/>
	</enum>
	<typedef path="haxe.zip.Entry" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/Entry.hx"><a>
	<fileTime><c path="Date"/></fileTime>
	<fileSize><x path="Int"/></fileSize>
	<fileName><c path="String"/></fileName>
	<extraFields>
		<x path="Null"><c path="haxe.ds.List"><e path="haxe.zip.ExtraField"/></c></x>
		<meta><m n=":optional"/></meta>
	</extraFields>
	<dataSize><x path="Int"/></dataSize>
	<data><x path="Null"><c path="haxe.io.Bytes"/></x></data>
	<crc32><x path="Null"><x path="Int"/></x></crc32>
	<compressed><x path="Bool"/></compressed>
</a></typedef>
	<enum path="haxe.zip.FlushMode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/FlushMode.hx">
		<NO/>
		<SYNC/>
		<FULL/>
		<FINISH/>
		<BLOCK/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.zip.Huffman" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/Huffman.hx">
		<Found a="i"><x path="Int"/></Found>
		<NeedBit a="left:right">
			<e path="haxe.zip.Huffman"/>
			<e path="haxe.zip.Huffman"/>
		</NeedBit>
		<NeedBits a="n:table">
			<x path="Int"/>
			<c path="Array"><e path="haxe.zip.Huffman"/></c>
		</NeedBits>
	</enum>
	<class path="haxe.zip.HuffTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/Huffman.hx" module="haxe.zip.Huffman">
		<treeDepth set="method" line="35"><f a="t">
	<e path="haxe.zip.Huffman"/>
	<x path="Int"/>
</f></treeDepth>
		<treeCompress set="method" line="46"><f a="t">
	<e path="haxe.zip.Huffman"/>
	<e path="haxe.zip.Huffman"/>
</f></treeCompress>
		<treeWalk set="method" line="63"><f a="table:p:cd:d:t">
	<c path="Array"><e path="haxe.zip.Huffman"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
	<x path="Void"/>
</f></treeWalk>
		<treeMake set="method" line="76"><f a="bits:maxbits:v:len">
	<c path="haxe.ds.IntMap"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
</f></treeMake>
		<make public="1" set="method" line="86"><f a="lengths:pos:nlengths:maxbits">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
</f></make>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.zip._InflateImpl.Window" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/InflateImpl.hx" private="1" module="haxe.zip.InflateImpl">
		<SIZE public="1" get="inline" set="null" expr="1 &lt;&lt; 15" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e><![CDATA[1 << 15]]></e></m></meta>
		</SIZE>
		<BUFSIZE public="1" get="inline" set="null" expr="1 &lt;&lt; 16" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e><![CDATA[1 << 16]]></e></m></meta>
		</BUFSIZE>
		<buffer public="1"><c path="haxe.io.Bytes"/></buffer>
		<pos public="1"><x path="Int"/></pos>
		<crc><c path="haxe.crypto.Adler32"/></crc>
		<slide public="1" set="method" line="41"><f a=""><x path="Void"/></f></slide>
		<addBytes public="1" set="method" line="49"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<addByte public="1" set="method" line="55"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<getLastChar public="1" set="method" line="61"><f a=""><x path="Int"/></f></getLastChar>
		<available public="1" set="method" line="65"><f a=""><x path="Int"/></f></available>
		<checksum public="1" set="method" line="69"><f a=""><c path="haxe.crypto.Adler32"/></f></checksum>
		<new public="1" set="method" line="35"><f a="hasCrc">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="haxe.zip._InflateImpl.State" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/InflateImpl.hx" private="1" module="haxe.zip.InflateImpl">
		<Head/>
		<Block/>
		<CData/>
		<Flat/>
		<Crc/>
		<Dist/>
		<DistOne/>
		<Done/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="haxe.zip.InflateImpl" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/InflateImpl.hx">
		<LEN_EXTRA_BITS_TBL expr="[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, -1, -1]" line="92" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, -1, -1]</e></m></meta>
		</LEN_EXTRA_BITS_TBL>
		<LEN_BASE_VAL_TBL expr="[3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258]" line="93" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258]</e></m></meta>
		</LEN_BASE_VAL_TBL>
		<DIST_EXTRA_BITS_TBL expr="[0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, -1, -1]" line="94" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, -1, -1]</e></m></meta>
		</DIST_EXTRA_BITS_TBL>
		<DIST_BASE_VAL_TBL expr="[1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]" line="95" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]</e></m></meta>
		</DIST_BASE_VAL_TBL>
		<CODE_LENGTHS_POS expr="[16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]" line="96" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]</e></m></meta>
		</CODE_LENGTHS_POS>
		<FIXED_HUFFMAN expr="null" line="114" static="1">
			<e path="haxe.zip.Huffman"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</FIXED_HUFFMAN>
		<run public="1" set="method" line="363" static="1">
			<f a="i:?bufsize" v=":65536">
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ bufsize : 65536 }</e></m></meta>
		</run>
		<nbits><x path="Int"/></nbits>
		<bits><x path="Int"/></bits>
		<state><e path="haxe.zip._InflateImpl.State"/></state>
		<isFinal><x path="Bool"/></isFinal>
		<huffman><e path="haxe.zip.Huffman"/></huffman>
		<huffdist><x path="Null"><e path="haxe.zip.Huffman"/></x></huffdist>
		<htools><c path="haxe.zip.HuffTools"/></htools>
		<len><x path="Int"/></len>
		<dist><x path="Int"/></dist>
		<needed><x path="Int"/></needed>
		<output><c path="haxe.io.Bytes"/></output>
		<outpos><x path="Int"/></outpos>
		<input><c path="haxe.io.Input"/></input>
		<lengths><c path="Array"><x path="Int"/></c></lengths>
		<window><c path="haxe.zip._InflateImpl.Window"/></window>
		<buildFixedHuffman set="method" line="136"><f a=""><e path="haxe.zip.Huffman"/></f></buildFixedHuffman>
		<readBytes public="1" set="method" line="146"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<getBits set="method" line="156"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getBits>
		<getBit set="method" line="167"><f a=""><x path="Bool"/></f></getBit>
		<getRevBits set="method" line="178"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getRevBits>
		<resetBits set="method" line="187"><f a=""><x path="Void"/></f></resetBits>
		<addBytes set="method" line="192"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<addByte set="method" line="199"><f a="b">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<addDistOne set="method" line="206"><f a="n">
	<x path="Int"/>
	<x path="Void"/>
</f></addDistOne>
		<addDist set="method" line="212"><f a="d:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addDist>
		<applyHuffman set="method" line="216"><f a="h">
	<e path="haxe.zip.Huffman"/>
	<x path="Int"/>
</f></applyHuffman>
		<inflateLengths set="method" line="224"><f a="a:max">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></inflateLengths>
		<inflateLoop set="method" line="253"><f a=""><x path="Bool"/></f></inflateLoop>
		<new public="1" set="method" line="116">
			<f a="i:?header:?crc" v=":true:true">
				<c path="haxe.io.Input"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ crc : true, header : true }</e></m></meta>
		</new>
		<haxe_doc>A pure Haxe implementation of the ZLIB Inflate algorithm which allows reading compressed data without any platform-specific support.</haxe_doc>
	</class>
	<class path="haxe.zip.Reader" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/Reader.hx">
		<readZip public="1" set="method" line="191" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="haxe.ds.List"><t path="haxe.zip.Entry"/></c>
</f></readZip>
		<unzip public="1" set="method" line="196" static="1"><f a="f">
	<t path="haxe.zip.Entry"/>
	<x path="Null"><c path="haxe.io.Bytes"/></x>
</f></unzip>
		<i><c path="haxe.io.Input"/></i>
		<readZipDate set="method" line="36"><f a=""><c path="Date"/></f></readZipDate>
		<readExtraFields set="method" line="48"><f a="length">
	<x path="Int"/>
	<c path="haxe.ds.List"><e path="haxe.zip.ExtraField"/></c>
</f></readExtraFields>
		<readEntryHeader public="1" set="method" line="76"><f a=""><t path="haxe.zip.Entry"/></f></readEntryHeader>
		<read public="1" set="method" line="119"><f a=""><c path="haxe.ds.List"><t path="haxe.zip.Entry"/></c></f></read>
		<new public="1" set="method" line="32"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.zip.Tools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/Tools.hx"><compress public="1" set="method" line="26" static="1"><f a="f:level">
	<t path="haxe.zip.Entry"/>
	<x path="Int"/>
	<x path="Void"/>
</f></compress></class>
	<typedef path="haxe.zip._Uncompress.Inflater" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/haxe/zip/Uncompress.hx" private="1" module="haxe.zip.Uncompress"><c path="hl.Abstract"><c path="Sfmt_zip"/></c></typedef>
	<class path="haxe.zip.Uncompress" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/haxe/zip/Uncompress.hx">
		<run public="1" set="method" line="49" static="1"><f a="src:?bufsize">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<inflate_init set="method" line="67" static="1"><f a="bits">
	<x path="Int"/>
	<t path="haxe.zip._Uncompress.Inflater"/>
</f></inflate_init>
		<inflate_buffer set="method" line="68" static="1"><f a="i:bytes:bytesPos:bytesLen:dst:dstPos:dstLen:read:write">
	<t path="haxe.zip._Uncompress.Inflater"/>
	<x path="hl.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="hl.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="hl.Ref"><x path="Int"/></x>
	<x path="hl.Ref"><x path="Int"/></x>
	<x path="Bool"/>
</f></inflate_buffer>
		<zip_end set="method" line="71" static="1"><f a="i">
	<t path="haxe.zip._Uncompress.Inflater"/>
	<x path="Void"/>
</f></zip_end>
		<zip_flush_mode set="method" line="72" static="1"><f a="i:flush">
	<t path="haxe.zip._Uncompress.Inflater"/>
	<x path="Int"/>
	<x path="Void"/>
</f></zip_flush_mode>
		<s><t path="haxe.zip._Uncompress.Inflater"/></s>
		<execute public="1" set="method" line="35"><f a="src:srcPos:dst:dstPos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></execute>
		<setFlushMode public="1" set="method" line="41"><f a="f">
	<e path="haxe.zip.FlushMode"/>
	<x path="Void"/>
</f></setFlushMode>
		<close public="1" set="method" line="45"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="31"><f a="?windowBits">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":coreApi"/>
			<m n=":hlNative"><e>"fmt"</e></m>
		</meta>
	</class>
	<class path="haxe.zip.Writer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/Writer.hx">
		<CENTRAL_DIRECTORY_RECORD_FIELDS_SIZE get="inline" set="null" expr="46" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>46</e></m></meta>
		</CENTRAL_DIRECTORY_RECORD_FIELDS_SIZE>
		<LOCAL_FILE_HEADER_FIELDS_SIZE get="inline" set="null" expr="30" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>30</e></m></meta>
		</LOCAL_FILE_HEADER_FIELDS_SIZE>
		<o><c path="haxe.io.Output"/></o>
		<files><c path="haxe.ds.List"><a>
	<size><x path="Int"/></size>
	<name><c path="String"/></name>
	<fields><c path="haxe.io.Bytes"/></fields>
	<date><c path="Date"/></date>
	<crc><x path="Int"/></crc>
	<compressed><x path="Bool"/></compressed>
	<clen><x path="Int"/></clen>
</a></c></files>
		<writeZipDate set="method" line="52"><f a="date">
	<c path="Date"/>
	<x path="Void"/>
</f></writeZipDate>
		<writeEntryHeader public="1" set="method" line="63"><f a="f">
	<t path="haxe.zip.Entry"/>
	<x path="Void"/>
</f></writeEntryHeader>
		<write public="1" set="method" line="123"><f a="files">
	<c path="haxe.ds.List"><t path="haxe.zip.Entry"/></c>
	<x path="Void"/>
</f></write>
		<writeCDR public="1" set="method" line="131"><f a=""><x path="Void"/></f></writeCDR>
		<new public="1" set="method" line="47"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="hl.Abstract" params="Const" file="/home/travis/build/HaxeFoundation/haxe/std/hl/Abstract.hx" extern="1"/>
	<class path="hl.Api" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/Api.hx" extern="1">
		<rethrow public="1" get="inline" set="null" line="26" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</rethrow>
		<getField public="1" set="method" static="1">
			<f a="obj:hash">
				<d/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"obj_get_field"</e>
</m></meta>
		</getField>
		<setField public="1" set="method" static="1">
			<f a="obj:hash:value">
				<d/>
				<x path="Int"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"obj_set_field"</e>
</m></meta>
		</setField>
		<hasField public="1" set="method" static="1">
			<f a="obj:hash">
				<d/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"obj_has_field"</e>
</m></meta>
		</hasField>
		<deleteField public="1" set="method" static="1">
			<f a="obj:hash">
				<d/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"obj_delete_field"</e>
</m></meta>
		</deleteField>
		<callMethod public="1" set="method" static="1">
			<f a="f:args">
				<x path="haxe.Function"/>
				<x path="hl.NativeArray"><d/></x>
				<d/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"call_method"</e>
</m></meta>
		</callMethod>
		<getClosureValue public="1" set="method" static="1">
			<f a="f">
				<x path="haxe.Function"/>
				<d/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"get_closure_value"</e>
</m></meta>
		</getClosureValue>
		<makeClosure public="1" set="method" static="1">
			<f a="f:v">
				<x path="haxe.Function"/>
				<d/>
				<d/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"make_closure"</e>
</m></meta>
		</makeClosure>
		<noClosure public="1" set="method" static="1">
			<f a="f">
				<x path="haxe.Function"/>
				<x path="haxe.Function"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"no_closure"</e>
</m></meta>
		</noClosure>
		<safeCast public="1" set="method" static="1">
			<f a="v:t">
				<d/>
				<x path="hl.Type"/>
				<d/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"value_cast"</e>
</m></meta>
		</safeCast>
		<makeVarArgs public="1" set="method" static="1">
			<f a="v">
				<f a="">
					<x path="hl.NativeArray"><d/></x>
					<d/>
				</f>
				<x path="haxe.Function"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"make_var_args"</e>
</m></meta>
		</makeVarArgs>
		<getVirtualValue public="1" set="method" static="1">
			<f a="v">
				<d/>
				<d/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"get_virtual_value"</e>
</m></meta>
		</getVirtualValue>
		<setErrorHandler public="1" set="method" static="1">
			<f a="v">
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"set_error_handler"</e>
</m></meta>
		</setErrorHandler>
		<breakPoint public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"breakpoint"</e>
</m></meta>
		</breakPoint>
		<is64 public="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"sys_is64"</e>
</m></meta>
		</is64>
		<comparePointer public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"ptr_compare"</e>
</m></meta>
		</comparePointer>
	</class>
	<class path="hl.BaseType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/BaseType.hx">
		<__type__ public="1"><x path="hl.Type"/></__type__>
		<__meta__ public="1"><d/></__meta__>
		<__implementedBy__ public="1"><x path="hl.NativeArray"><x path="hl.Type"/></x></__implementedBy__>
		<check public="1" set="method" line="29"><f a="v">
	<d/>
	<x path="Bool"/>
</f></check>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="hl.Class" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/BaseType.hx" module="hl.BaseType">
		<extends path="hl.BaseType"/>
		<__name__ public="1"><c path="String"/></__name__>
		<__constructor__ public="1"><d/></__constructor__>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="hl.Enum" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/BaseType.hx" module="hl.BaseType">
		<extends path="hl.BaseType"/>
		<__ename__ public="1"><c path="String"/></__ename__>
		<__emap__ public="1"><x path="hl.types.BytesMap"/></__emap__>
		<__constructs__ public="1"><c path="Array"><c path="String"/></c></__constructs__>
		<__evalues__ public="1"><x path="hl.NativeArray"><d/></x></__evalues__>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="hl.CoreType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/BaseType.hx" module="hl.BaseType">
		<extends path="hl.Class"/>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="hl.CoreEnum" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/BaseType.hx" module="hl.BaseType">
		<extends path="hl.Enum"/>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="hl.Boot" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/Boot.hx" extern="1"><meta><m n=":dox"><e>hide</e></m></meta></class>
	<abstract path="hl.Bytes" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/Bytes.hx">
		<from><icast field="fromBytes"><c path="haxe.io.Bytes"/></icast></from>
		<this><x path="hl.Bytes"/></this>
		<meta><m n=":coreType"/></meta>
		<impl><class path="hl._Bytes.Bytes_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/Bytes.hx" private="1" module="hl.Bytes">
	<_new public="1" get="inline" set="null" line="26" static="1">
		<f a="v">
			<x path="Int"/>
			<x path="hl.Bytes"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<blit public="1" set="method" line="30" static="1">
		<f a="this:pos:src:srcPos:len">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"bytes_blit"</e>
			</m>
		</meta>
	</blit>
	<getUI8 public="1" get="inline" set="null" line="33" static="1">
		<f a="this:pos">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</getUI8>
	<setUI8 public="1" get="inline" set="null" line="37" static="1">
		<f a="this:pos:value">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</setUI8>
	<getI32 public="1" get="inline" set="null" line="42" static="1">
		<f a="this:pos">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
		</meta>
	</getI32>
	<getUI16 public="1" get="inline" set="null" line="46" static="1">
		<f a="this:pos">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
		</meta>
	</getUI16>
	<setUI16 public="1" get="inline" set="null" line="50" static="1">
		<f a="this:pos:v">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
		</meta>
	</setUI16>
	<getF32 public="1" get="inline" set="null" line="54" static="1">
		<f a="this:pos">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<t path="hl.F32"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
		</meta>
	</getF32>
	<getF64 public="1" get="inline" set="null" line="58" static="1">
		<f a="this:pos">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
		</meta>
	</getF64>
	<setI32 public="1" get="inline" set="null" line="62" static="1">
		<f a="this:pos:value">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
		</meta>
	</setI32>
	<setF32 public="1" get="inline" set="null" line="66" static="1">
		<f a="this:pos:value">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<t path="hl.F32"/>
			<x path="Void"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
		</meta>
	</setF32>
	<setF64 public="1" get="inline" set="null" line="70" static="1">
		<f a="this:pos:value">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Void"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
		</meta>
	</setF64>
	<alloc set="method" line="75" static="1">
		<f a="size">
			<x path="Int"/>
			<x path="hl.Bytes"/>
		</f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"alloc_bytes"</e>
</m></meta>
	</alloc>
	<parseInt public="1" set="method" line="80" static="1">
		<f a="this:pos:size">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Null"><x path="Int"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"parse_int"</e>
			</m>
		</meta>
	</parseInt>
	<parseFloat public="1" set="method" line="85" static="1">
		<f a="this:pos:size">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"parse_float"</e>
			</m>
		</meta>
	</parseFloat>
	<compare public="1" set="method" line="90" static="1">
		<f a="this:pos:bytes:bytesPos:size">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"bytes_compare"</e>
			</m>
		</meta>
	</compare>
	<find public="1" set="method" line="95" static="1">
		<f a="this:pos:size:bytes:bytesPos:bytesSize">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"bytes_find"</e>
			</m>
		</meta>
	</find>
	<fill public="1" set="method" line="100" static="1">
		<f a="this:pos:size:v">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"bytes_fill"</e>
			</m>
		</meta>
	</fill>
	<sortI32 public="1" set="method" line="104" static="1">
		<f a="this:pos:length:f">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<x path="Void"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"bsort_i32"</e>
			</m>
		</meta>
	</sortI32>
	<sortF64 public="1" set="method" line="108" static="1">
		<f a="this:pos:length:f">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<f a=":">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<x path="Void"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"bsort_f64"</e>
			</m>
		</meta>
	</sortF64>
	<offset public="1" set="method" line="116" static="1">
		<f a="this:delta">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="hl.Bytes"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"bytes_offset"</e>
			</m>
		</meta>
		<haxe_doc>Please note that you need to retain the original unoffset'ed Bytes so it does not get garbage collected, unless the pointer was not GC allocated.</haxe_doc>
	</offset>
	<subtract public="1" set="method" line="124" static="1">
		<f a="this:other">
			<x path="hl.Bytes"/>
			<x path="hl.Bytes"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"bytes_subtract"</e>
			</m>
		</meta>
		<haxe_doc>Returns an offset between the two pointers. This might overflow in 64 bits if the addresses of the two pointers differs by more than 4GB</haxe_doc>
	</subtract>
	<get_address set="method" line="129" static="1">
		<f a="b:high">
			<x path="hl.Bytes"/>
			<x path="hl.Ref"><x path="Int"/></x>
			<x path="Int"/>
		</f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"bytes_address"</e>
</m></meta>
	</get_address>
	<from_address set="method" line="134" static="1">
		<f a="low:high">
			<x path="Int"/>
			<x path="Int"/>
			<x path="hl.Bytes"/>
		</f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"bytes_from_address"</e>
</m></meta>
	</from_address>
	<fromAddress public="1" get="inline" set="null" line="141" static="1">
		<f a="h">
			<x path="haxe.Int64"/>
			<x path="hl.Bytes"/>
		</f>
		<haxe_doc>Creates an pointer at a given memory address (highly unsafe)</haxe_doc>
	</fromAddress>
	<address public="1" set="method" line="148" static="1">
		<f a="this">
			<x path="hl.Bytes"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the address value of the bytes. On 32 bit system the upper 32 bits will always be 0</haxe_doc>
	</address>
	<sub public="1" set="method" line="154" static="1">
		<f a="this:pos:size">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="hl.Bytes"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<ucs2Length public="1" set="method" line="161" static="1">
		<f a="this:bytePos">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"ucs2length"</e>
			</m>
		</meta>
	</ucs2Length>
	<hash set="method" line="166" static="1">
		<f a="this">
			<x path="hl.Bytes"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"hash"</e>
			</m>
		</meta>
	</hash>
	<utf8ToUtf16 public="1" set="method" line="171" static="1">
		<f a="this:bytePos:outSize">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="hl.Ref"><x path="Int"/></x>
			<x path="hl.Bytes"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"utf8_to_utf16"</e>
			</m>
		</meta>
	</utf8ToUtf16>
	<utf16ToUtf8 public="1" set="method" line="176" static="1">
		<f a="this:bytePos:outSize">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="hl.Ref"><x path="Int"/></x>
			<x path="hl.Bytes"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"utf16_to_utf8"</e>
			</m>
		</meta>
	</utf16ToUtf8>
	<ucs2Upper set="method" line="181" static="1">
		<f a="this:bytePos:size">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="hl.Bytes"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"ucs2_upper"</e>
			</m>
		</meta>
	</ucs2Upper>
	<ucs2Lower set="method" line="186" static="1">
		<f a="this:bytePos:size">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="hl.Bytes"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"ucs2_lower"</e>
			</m>
		</meta>
	</ucs2Lower>
	<urlEncode set="method" line="191" static="1">
		<f a="this:outSize">
			<x path="hl.Bytes"/>
			<x path="hl.Ref"><x path="Int"/></x>
			<x path="hl.Bytes"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"url_encode"</e>
			</m>
		</meta>
	</urlEncode>
	<urlDecode set="method" line="196" static="1">
		<f a="this:outSize">
			<x path="hl.Bytes"/>
			<x path="hl.Ref"><x path="Int"/></x>
			<x path="hl.Bytes"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"url_decode"</e>
			</m>
		</meta>
	</urlDecode>
	<fromValue public="1" set="method" line="201" static="1">
		<f a="v:length">
			<d/>
			<x path="hl.Ref"><x path="Int"/></x>
			<x path="hl.Bytes"/>
		</f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"value_to_string"</e>
</m></meta>
	</fromValue>
	<getArray public="1" params="T" get="inline" set="null" line="208" static="1">
		<f a="a">
			<c path="Array"><c path="getArray.T"/></c>
			<x path="hl.Bytes"/>
		</f>
		<meta><m n=":has_untyped"/></meta>
		<haxe_doc>Get the bytes reference from an array of basic types (no copy occurs)</haxe_doc>
	</getArray>
	<fromBytes public="1" get="inline" set="null" line="213" static="1">
		<f a="bytes">
			<c path="haxe.io.Bytes"/>
			<x path="hl.Bytes"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromBytes>
	<toBytes public="1" get="inline" set="null" line="217" static="1">
		<f a="this:len">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<c path="haxe.io.Bytes"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toBytes>
</class></impl>
	</abstract>
	<abstract path="hl.BytesAccess" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/hl/BytesAccess.hx">
		<from><icast><x path="hl.Bytes"/></icast></from>
		<this><x path="hl.BytesAccess"><c path="hl.BytesAccess.T"/></x></this>
		<to><icast><x path="hl.Bytes"/></icast></to>
		<meta><m n=":coreType"/></meta>
		<impl><class path="hl._BytesAccess.BytesAccess_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/BytesAccess.hx" private="1" module="hl.BytesAccess">
	<sizeBits public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</sizeBits>
	<nullValue public="1" get="accessor" set="null" static="1">
		<c path="hl.BytesAccess.T"/>
		<meta><m n=":impl"/></meta>
	</nullValue>
	<get_sizeBits get="inline" set="null" line="30" static="1">
		<f a="this">
			<x path="hl.BytesAccess"><c path="hl.BytesAccess.T"/></x>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
		</meta>
	</get_sizeBits>
	<get_nullValue get="inline" set="null" line="34" static="1">
		<f a="this">
			<x path="hl.BytesAccess"><c path="hl.BytesAccess.T"/></x>
			<c path="hl.BytesAccess.T"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
		</meta>
	</get_nullValue>
	<blit public="1" get="inline" set="null" line="38" static="1">
		<f a="this:pos:src:srcPos:len">
			<x path="hl.BytesAccess"><c path="hl.BytesAccess.T"/></x>
			<x path="Int"/>
			<x path="hl.BytesAccess"><c path="hl.BytesAccess.T"/></x>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</blit>
	<get public="1" get="inline" set="null" line="42" static="1">
		<f a="this:pos">
			<x path="hl.BytesAccess"><c path="hl.BytesAccess.T"/></x>
			<x path="Int"/>
			<c path="hl.BytesAccess.T"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="46" static="1">
		<f a="this:pos:value">
			<x path="hl.BytesAccess"><c path="hl.BytesAccess.T"/></x>
			<x path="Int"/>
			<c path="hl.BytesAccess.T"/>
			<c path="hl.BytesAccess.T"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
</class></impl>
	</abstract>
	<class path="hl._BytesAccess.BytesAccess_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/BytesAccess.hx" private="1" module="hl.BytesAccess">
		<sizeBits public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</sizeBits>
		<nullValue public="1" get="accessor" set="null" static="1">
			<c path="hl.BytesAccess.T"/>
			<meta><m n=":impl"/></meta>
		</nullValue>
		<get_sizeBits get="inline" set="null" line="30" static="1">
			<f a="this">
				<x path="hl.BytesAccess"><c path="hl.BytesAccess.T"/></x>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
			</meta>
		</get_sizeBits>
		<get_nullValue get="inline" set="null" line="34" static="1">
			<f a="this">
				<x path="hl.BytesAccess"><c path="hl.BytesAccess.T"/></x>
				<c path="hl.BytesAccess.T"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
			</meta>
		</get_nullValue>
		<blit public="1" get="inline" set="null" line="38" static="1">
			<f a="this:pos:src:srcPos:len">
				<x path="hl.BytesAccess"><c path="hl.BytesAccess.T"/></x>
				<x path="Int"/>
				<x path="hl.BytesAccess"><c path="hl.BytesAccess.T"/></x>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</blit>
		<get public="1" get="inline" set="null" line="42" static="1">
			<f a="this:pos">
				<x path="hl.BytesAccess"><c path="hl.BytesAccess.T"/></x>
				<x path="Int"/>
				<c path="hl.BytesAccess.T"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="46" static="1">
			<f a="this:pos:value">
				<x path="hl.BytesAccess"><c path="hl.BytesAccess.T"/></x>
				<x path="Int"/>
				<c path="hl.BytesAccess.T"/>
				<c path="hl.BytesAccess.T"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
	</class>
	<typedef path="hl.F32" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/F32.hx"><x path="Single"/></typedef>
	<typedef path="hl.F64" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/F64.hx"><x path="Float"/></typedef>
	<abstract path="hl.PixelFormat" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/Format.hx" module="hl.Format">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="hl._Format.PixelFormat_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/Format.hx" private="1" module="hl.Format" extern="1">
	<RGB public="1" get="inline" set="null" expr="cast 0" line="25" static="1">
		<x path="hl.PixelFormat"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RGB>
	<BGR public="1" get="inline" set="null" expr="cast 1" line="26" static="1">
		<x path="hl.PixelFormat"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BGR>
	<RGBX public="1" get="inline" set="null" expr="cast 2" line="27" static="1">
		<x path="hl.PixelFormat"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RGBX>
	<BGRX public="1" get="inline" set="null" expr="cast 3" line="28" static="1">
		<x path="hl.PixelFormat"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BGRX>
	<XBGR public="1" get="inline" set="null" expr="cast 4" line="29" static="1">
		<x path="hl.PixelFormat"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XBGR>
	<XRGB public="1" get="inline" set="null" expr="cast 5" line="30" static="1">
		<x path="hl.PixelFormat"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XRGB>
	<GRAY public="1" get="inline" set="null" expr="cast 6" line="31" static="1">
		<x path="hl.PixelFormat"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GRAY>
	<RGBA public="1" get="inline" set="null" expr="cast 7" line="32" static="1">
		<x path="hl.PixelFormat"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RGBA>
	<BGRA public="1" get="inline" set="null" expr="cast 8" line="33" static="1">
		<x path="hl.PixelFormat"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BGRA>
	<ABGR public="1" get="inline" set="null" expr="cast 9" line="34" static="1">
		<x path="hl.PixelFormat"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ABGR>
	<ARGB public="1" get="inline" set="null" expr="cast 10" line="35" static="1">
		<x path="hl.PixelFormat"/>
		<meta>
			<m n=":value"><e>cast 10</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ARGB>
	<CMYK public="1" get="inline" set="null" expr="cast 11" line="36" static="1">
		<x path="hl.PixelFormat"/>
		<meta>
			<m n=":value"><e>cast 11</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CMYK>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hl._Format.PixelFormat_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/Format.hx" private="1" module="hl.Format" extern="1">
		<RGB public="1" get="inline" set="null" expr="cast 0" line="25" static="1">
			<x path="hl.PixelFormat"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RGB>
		<BGR public="1" get="inline" set="null" expr="cast 1" line="26" static="1">
			<x path="hl.PixelFormat"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BGR>
		<RGBX public="1" get="inline" set="null" expr="cast 2" line="27" static="1">
			<x path="hl.PixelFormat"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RGBX>
		<BGRX public="1" get="inline" set="null" expr="cast 3" line="28" static="1">
			<x path="hl.PixelFormat"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BGRX>
		<XBGR public="1" get="inline" set="null" expr="cast 4" line="29" static="1">
			<x path="hl.PixelFormat"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XBGR>
		<XRGB public="1" get="inline" set="null" expr="cast 5" line="30" static="1">
			<x path="hl.PixelFormat"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XRGB>
		<GRAY public="1" get="inline" set="null" expr="cast 6" line="31" static="1">
			<x path="hl.PixelFormat"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GRAY>
		<RGBA public="1" get="inline" set="null" expr="cast 7" line="32" static="1">
			<x path="hl.PixelFormat"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RGBA>
		<BGRA public="1" get="inline" set="null" expr="cast 8" line="33" static="1">
			<x path="hl.PixelFormat"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BGRA>
		<ABGR public="1" get="inline" set="null" expr="cast 9" line="34" static="1">
			<x path="hl.PixelFormat"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ABGR>
		<ARGB public="1" get="inline" set="null" expr="cast 10" line="35" static="1">
			<x path="hl.PixelFormat"/>
			<meta>
				<m n=":value"><e>cast 10</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ARGB>
		<CMYK public="1" get="inline" set="null" expr="cast 11" line="36" static="1">
			<x path="hl.PixelFormat"/>
			<meta>
				<m n=":value"><e>cast 11</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CMYK>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="hl.Format" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/Format.hx">
		<decodeJPG public="1" set="method" line="48" static="1">
			<f a="src:srcLen:dst:width:height:stride:format:flags">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="hl.PixelFormat"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"fmt"</e>
	<e>"jpg_decode"</e>
</m></meta>
			<haxe_doc>Decode JPG data into the target buffer.</haxe_doc>
		</decodeJPG>
		<decodePNG public="1" set="method" line="56" static="1">
			<f a="src:srcLen:dst:width:height:stride:format:flags">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="hl.PixelFormat"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"fmt"</e>
	<e>"png_decode"</e>
</m></meta>
			<haxe_doc>Decode PNG data into the target buffer.</haxe_doc>
		</decodePNG>
		<scaleImage public="1" set="method" line="65" static="1">
			<f a="out:outPos:outStride:outWidth:outHeight:_in:inPos:inStride:inWidth:inHeight:flags">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"fmt"</e>
	<e>"img_scale"</e>
</m></meta>
			<haxe_doc>Upscale/downscale an image.
		Currently supported flag bits: 1 = bilinear filtering</haxe_doc>
		</scaleImage>
		<digest public="1" set="method" line="74" static="1">
			<f a="out:src:srcLen:algorithm">
				<x path="hl.Bytes"/>
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"fmt"</e>
	<e>"digest"</e>
</m></meta>
			<haxe_doc>Performs a cryptographic digest of some bytes.
		0 = Md5 , 1 = Sha1 , 2 = Crc32, 3 = Adler32
		Set 256 flag to tell the src are String bytes.</haxe_doc>
		</digest>
		<haxe_doc>These are the bindings for the HL `fmt.hdll` library, which contains various low level formats handling.</haxe_doc>
	</class>
	<class path="hl.Mikktspace" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/Format.hx" module="hl.Format">
		<_compute set="method" line="98" static="1">
			<f a="m:threshold">
				<d/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"fmt"</e>
	<e>"compute_mikkt_tangents"</e>
</m></meta>
		</_compute>
		<buffer public="1"><x path="hl.BytesAccess"><x path="Single"/></x></buffer>
		<stride public="1"><x path="Int"/></stride>
		<xPos public="1"><x path="Int"/></xPos>
		<normalPos public="1"><x path="Int"/></normalPos>
		<uvPos public="1"><x path="Int"/></uvPos>
		<tangents public="1"><x path="hl.BytesAccess"><x path="Single"/></x></tangents>
		<tangentStride public="1"><x path="Int"/></tangentStride>
		<tangentPos public="1"><x path="Int"/></tangentPos>
		<indexes public="1"><x path="hl.BytesAccess"><x path="Int"/></x></indexes>
		<indices public="1"><x path="Int"/></indices>
		<compute public="1" set="method" line="94">
			<f a="?threshold" v="180.">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ threshold : 180. }</e></m></meta>
		</compute>
		<new public="1" set="method" line="91"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="hl.GcFlag" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/Gc.hx" module="hl.Gc">
		<Profile><haxe_doc>Activate profiling: regularly print on stdout gc allocation stats</haxe_doc></Profile>
		<DumpMem><haxe_doc>Allows one to dump a hlmemory.dump file when HL runs out of memory to be examined with hl memory inspector tool.</haxe_doc></DumpMem>
		<NoThreads><haxe_doc>Disable GC locking for multithreads</haxe_doc></NoThreads>
		<ForceMajor><haxe_doc>Force major GC on each allocation</haxe_doc></ForceMajor>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="hl.Gc" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/Gc.hx">
		<flags public="1" get="accessor" set="accessor" static="1"><x path="haxe.EnumFlags"><e path="hl.GcFlag"/></x></flags>
		<stats public="1" set="method" line="47" static="1"><f a=""><a>
	<totalAllocated><x path="Float"/></totalAllocated>
	<currentMemory><x path="Float"/></currentMemory>
	<allocationCount><x path="Float"/></allocationCount>
</a></f></stats>
		<dumpMemory public="1" set="method" line="56" static="1">
			<f a="?fileName" v="&quot;hlmemory.dump&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ fileName : "hlmemory.dump" }</e></m></meta>
			<haxe_doc>Dump whole memory into target filename for analysis.</haxe_doc>
		</dumpMemory>
		<get_flags set="method" line="60" static="1"><f a=""><x path="haxe.EnumFlags"><e path="hl.GcFlag"/></x></f></get_flags>
		<set_flags set="method" line="64" static="1"><f a="v">
	<x path="haxe.EnumFlags"><e path="hl.GcFlag"/></x>
	<x path="haxe.EnumFlags"><e path="hl.GcFlag"/></x>
</f></set_flags>
		<blocking public="1" set="method" line="74" static="1">
			<f a="b">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"blocking"</e>
</m></meta>
			<haxe_doc>Enter/leave a blocking section: when in a blocking section the thread cannot
		allocate any memory but other threads will not wait for it for collecting memory.</haxe_doc>
		</blocking>
		<_dump set="method" line="77" static="1">
			<f a="b">
				<x path="hl.Bytes"/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"gc_dump_memory"</e>
</m></meta>
		</_dump>
		<enable public="1" set="method" line="79" static="1">
			<f a="b">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"gc_enable"</e>
</m></meta>
		</enable>
		<major public="1" set="method" line="80" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"gc_major"</e>
</m></meta>
		</major>
		<_stats set="method" line="81" static="1">
			<f a="totalAllocated:allocationCount:currentMemory">
				<x path="hl.Ref"><x path="Float"/></x>
				<x path="hl.Ref"><x path="Float"/></x>
				<x path="hl.Ref"><x path="Float"/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"gc_stats"</e>
</m></meta>
		</_stats>
		<_get_flags set="method" line="83" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"gc_get_flags"</e>
</m></meta>
		</_get_flags>
		<_set_flags set="method" line="84" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"gc_set_flags"</e>
</m></meta>
		</_set_flags>
	</class>
	<abstract path="hl.I64" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/I64.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="hl.I64"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="hl.NativeArrayIterator" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/hl/NativeArray.hx" module="hl.NativeArray">
		<arr><x path="hl.NativeArray"><c path="hl.NativeArrayIterator.T"/></x></arr>
		<pos><x path="Int"/></pos>
		<length><x path="Int"/></length>
		<hasNext public="1" get="inline" set="null" line="35"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="39"><f a=""><c path="hl.NativeArrayIterator.T"/></f></next>
		<new public="1" get="inline" set="null" line="29"><f a="arr">
	<x path="hl.NativeArray"><c path="hl.NativeArrayIterator.T"/></x>
	<x path="Void"/>
</f></new>
		<meta><m n=":generic"/></meta>
	</class>
	<abstract path="hl.NativeArray" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/hl/NativeArray.hx">
		<this><x path="hl.NativeArray"><c path="hl.NativeArray.T"/></x></this>
		<to><icast field="getRef"><x path="hl.Ref"><c path="hl.NativeArray.T"/></x></icast></to>
		<meta><m n=":coreType"/></meta>
		<impl><class path="hl._NativeArray.NativeArray_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/NativeArray.hx" private="1" module="hl.NativeArray">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<_new public="1" get="inline" set="null" line="48" static="1">
		<f a="length">
			<x path="Int"/>
			<x path="hl.NativeArray"><c path="hl.NativeArray.T"/></x>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<get_length get="inline" set="null" line="52" static="1">
		<f a="this">
			<x path="hl.NativeArray"><c path="hl.NativeArray.T"/></x>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
		</meta>
	</get_length>
	<get get="inline" set="null" line="56" static="1">
		<f a="this:pos">
			<x path="hl.NativeArray"><c path="hl.NativeArray.T"/></x>
			<x path="Int"/>
			<c path="hl.NativeArray.T"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set get="inline" set="null" line="60" static="1">
		<f a="this:pos:value">
			<x path="hl.NativeArray"><c path="hl.NativeArray.T"/></x>
			<x path="Int"/>
			<c path="hl.NativeArray.T"/>
			<c path="hl.NativeArray.T"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="65" static="1">
		<f a="this:pos:len">
			<x path="hl.NativeArray"><c path="hl.NativeArray.T"/></x>
			<x path="Int"/>
			<x path="Int"/>
			<x path="hl.NativeArray"><c path="hl.NativeArray.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<getRef public="1" get="inline" set="null" line="71" static="1">
		<f a="this">
			<x path="hl.NativeArray"><c path="hl.NativeArray.T"/></x>
			<x path="hl.Ref"><c path="hl.NativeArray.T"/></x>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</getRef>
	<getType public="1" set="method" line="75" static="1">
		<f a="this">
			<x path="hl.NativeArray"><c path="hl.NativeArray.T"/></x>
			<x path="hl.Type"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"array_type"</e>
			</m>
		</meta>
	</getType>
	<blit public="1" set="method" line="79" static="1">
		<f a="this:pos:src:srcPos:srcLen">
			<x path="hl.NativeArray"><c path="hl.NativeArray.T"/></x>
			<x path="Int"/>
			<x path="hl.NativeArray"><c path="hl.NativeArray.T"/></x>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"array_blit"</e>
			</m>
		</meta>
	</blit>
</class></impl>
	</abstract>
	<class path="hl._NativeArray.NativeArray_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/NativeArray.hx" private="1" module="hl.NativeArray">
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<_new public="1" get="inline" set="null" line="48" static="1">
			<f a="length">
				<x path="Int"/>
				<x path="hl.NativeArray"><c path="hl.NativeArray.T"/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<get_length get="inline" set="null" line="52" static="1">
			<f a="this">
				<x path="hl.NativeArray"><c path="hl.NativeArray.T"/></x>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
			</meta>
		</get_length>
		<get get="inline" set="null" line="56" static="1">
			<f a="this:pos">
				<x path="hl.NativeArray"><c path="hl.NativeArray.T"/></x>
				<x path="Int"/>
				<c path="hl.NativeArray.T"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set get="inline" set="null" line="60" static="1">
			<f a="this:pos:value">
				<x path="hl.NativeArray"><c path="hl.NativeArray.T"/></x>
				<x path="Int"/>
				<c path="hl.NativeArray.T"/>
				<c path="hl.NativeArray.T"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="65" static="1">
			<f a="this:pos:len">
				<x path="hl.NativeArray"><c path="hl.NativeArray.T"/></x>
				<x path="Int"/>
				<x path="Int"/>
				<x path="hl.NativeArray"><c path="hl.NativeArray.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<getRef public="1" get="inline" set="null" line="71" static="1">
			<f a="this">
				<x path="hl.NativeArray"><c path="hl.NativeArray.T"/></x>
				<x path="hl.Ref"><c path="hl.NativeArray.T"/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</getRef>
		<getType public="1" set="method" line="75" static="1">
			<f a="this">
				<x path="hl.NativeArray"><c path="hl.NativeArray.T"/></x>
				<x path="hl.Type"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"array_type"</e>
				</m>
			</meta>
		</getType>
		<blit public="1" set="method" line="79" static="1">
			<f a="this:pos:src:srcPos:srcLen">
				<x path="hl.NativeArray"><c path="hl.NativeArray.T"/></x>
				<x path="Int"/>
				<x path="hl.NativeArray"><c path="hl.NativeArray.T"/></x>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"array_blit"</e>
				</m>
			</meta>
		</blit>
	</class>
	<typedef path="hl.Symbol" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/Profile.hx" module="hl.Profile"><c path="hl.Abstract"><c path="Shl_symbol"/></c></typedef>
	<class path="hl.Allocation" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/Profile.hx" module="hl.Profile">
		<t public="1"><x path="hl.Type"/></t>
		<count public="1"><x path="Int"/></count>
		<size public="1"><x path="Int"/></size>
		<stack public="1"><c path="Array"><c path="String"/></c></stack>
		<toString public="1" set="method" line="15">
			<f a=""><c path="String"/></f>
			<meta><m n=":keep"/></meta>
		</toString>
		<new public="1" set="method" line="10"><f a="t:count:size">
	<x path="hl.Type"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="hl.Profile" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/Profile.hx">
		<enable public="1" get="accessor" set="accessor" static="1">
			<x path="Bool"/>
			<haxe_doc>Enable allocation tracking per thread. All threads are enabled by default.</haxe_doc>
		</enable>
		<getData public="1" set="method" line="28" static="1">
			<f a="?sortBySize" v="false">
				<x path="Bool"/>
				<c path="Array"><c path="hl.Allocation"/></c>
			</f>
			<meta><m n=":value"><e>{ sortBySize : false }</e></m></meta>
		</getData>
		<dump public="1" set="method" line="53" static="1">
			<f a="?fileName:?sortBySize" v="&quot;alloc.dump&quot;:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ sortBySize : false, fileName : "alloc.dump" }</e></m></meta>
		</dump>
		<reset public="1" set="method" line="76" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"track_reset"</e>
</m></meta>
			<haxe_doc>Reset accumulated tracked data.</haxe_doc>
		</reset>
		<start public="1" set="method" line="82" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"track_init"</e>
</m></meta>
			<haxe_doc>Start tracking. Enabled by default.</haxe_doc>
		</start>
		<stop public="1" set="method" line="88" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"track_stop"</e>
</m></meta>
			<haxe_doc>Stop tracking for all threads.</haxe_doc>
		</stop>
		<BUFSIZE expr="512" line="91" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>512</e></m></meta>
		</BUFSIZE>
		<buf expr="new hl.Bytes(BUFSIZE * 2)" line="92" static="1">
			<x path="hl.Bytes"/>
			<meta><m n=":value"><e>new hl.Bytes(BUFSIZE * 2)</e></m></meta>
		</buf>
		<resolveSymbol set="method" line="93" static="1"><f a="s">
	<t path="hl.Symbol"/>
	<c path="String"/>
</f></resolveSymbol>
		<get_enable set="method" line="100" static="1"><f a=""><x path="Bool"/></f></get_enable>
		<set_enable set="method" line="101" static="1"><f a="v">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_enable>
		<resolve_symbol set="method" line="106" static="1"><f a="s:buf:bufSize">
	<t path="hl.Symbol"/>
	<x path="hl.Bytes"/>
	<x path="hl.Ref"><x path="Int"/></x>
	<x path="hl.Bytes"/>
</f></resolve_symbol>
		<track_count set="method" line="107" static="1"><f a="maxDepth">
	<x path="hl.Ref"><x path="Int"/></x>
	<x path="Int"/>
</f></track_count>
		<track_entry set="method" line="108" static="1"><f a="id:type:count:size:stack">
	<x path="Int"/>
	<x path="hl.Ref"><x path="hl.Type"/></x>
	<x path="hl.Ref"><x path="Int"/></x>
	<x path="hl.Ref"><x path="Int"/></x>
	<x path="hl.NativeArray"><t path="hl.Symbol"/></x>
	<x path="Void"/>
</f></track_entry>
		<track_enable set="method" line="109" static="1"><f a="b">
	<x path="Bool"/>
	<x path="Void"/>
</f></track_enable>
		<track_lock set="method" line="110" static="1"><f a="b">
	<x path="Bool"/>
	<x path="Void"/>
</f></track_lock>
		<track_enabled set="method" line="111" static="1"><f a=""><x path="Bool"/></f></track_enabled>
		<meta><m n=":hlNative"><e>"std"</e></m></meta>
	</class>
	<abstract path="hl.Ref" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/hl/Ref.hx">
		<from><icast field="make"><c path="make.T"/></icast></from>
		<this><x path="hl.Ref"><c path="hl.Ref.T"/></x></this>
		<meta>
			<m n=":semantics"><e>reference</e></m>
			<m n=":coreType"/>
		</meta>
		<impl><class path="hl._Ref.Ref_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/Ref.hx" private="1" module="hl.Ref">
	<make public="1" params="T" get="inline" set="null" line="27" static="1">
		<f a="v">
			<c path="make.T"/>
			<x path="hl.Ref"><c path="make.T"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</make>
	<_new public="1" get="inline" set="null" line="31" static="1">
		<f a="v">
			<c path="hl.Ref.T"/>
			<x path="hl.Ref"><c path="hl.Ref.T"/></x>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<get public="1" get="inline" set="null" line="34" static="1">
		<f a="this">
			<x path="hl.Ref"><c path="hl.Ref.T"/></x>
			<c path="hl.Ref.T"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="37" static="1">
		<f a="this:v">
			<x path="hl.Ref"><c path="hl.Ref.T"/></x>
			<c path="hl.Ref.T"/>
			<x path="Void"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
		</meta>
	</set>
	<offset public="1" get="inline" set="null" line="40" static="1">
		<f a="this:v">
			<x path="hl.Ref"><c path="hl.Ref.T"/></x>
			<x path="Int"/>
			<x path="hl.Ref"><c path="hl.Ref.T"/></x>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
		</meta>
	</offset>
</class></impl>
	</abstract>
	<class path="hl._Ref.Ref_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/Ref.hx" private="1" module="hl.Ref">
		<make public="1" params="T" get="inline" set="null" line="27" static="1">
			<f a="v">
				<c path="make.T"/>
				<x path="hl.Ref"><c path="make.T"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</make>
		<_new public="1" get="inline" set="null" line="31" static="1">
			<f a="v">
				<c path="hl.Ref.T"/>
				<x path="hl.Ref"><c path="hl.Ref.T"/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<get public="1" get="inline" set="null" line="34" static="1">
			<f a="this">
				<x path="hl.Ref"><c path="hl.Ref.T"/></x>
				<c path="hl.Ref.T"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="37" static="1">
			<f a="this:v">
				<x path="hl.Ref"><c path="hl.Ref.T"/></x>
				<c path="hl.Ref.T"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
			</meta>
		</set>
		<offset public="1" get="inline" set="null" line="40" static="1">
			<f a="this:v">
				<x path="hl.Ref"><c path="hl.Ref.T"/></x>
				<x path="Int"/>
				<x path="hl.Ref"><c path="hl.Ref.T"/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
			</meta>
		</offset>
	</class>
	<abstract path="hl.TypeKind" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/Type.hx" module="hl.Type">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="hl._Type.TypeKind_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/Type.hx" private="1" module="hl.Type" extern="1">
	<HVoid public="1" get="inline" set="null" expr="cast 0" line="26" static="1">
		<x path="hl.TypeKind"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HVoid>
	<HUI8 public="1" get="inline" set="null" expr="cast 1" line="27" static="1">
		<x path="hl.TypeKind"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HUI8>
	<HUI16 public="1" get="inline" set="null" expr="cast 2" line="28" static="1">
		<x path="hl.TypeKind"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HUI16>
	<HI32 public="1" get="inline" set="null" expr="cast 3" line="29" static="1">
		<x path="hl.TypeKind"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HI32>
	<HI64 public="1" get="inline" set="null" expr="cast 4" line="30" static="1">
		<x path="hl.TypeKind"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HI64>
	<HF32 public="1" get="inline" set="null" expr="cast 5" line="31" static="1">
		<x path="hl.TypeKind"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HF32>
	<HF64 public="1" get="inline" set="null" expr="cast 6" line="32" static="1">
		<x path="hl.TypeKind"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HF64>
	<HBool public="1" get="inline" set="null" expr="cast 7" line="33" static="1">
		<x path="hl.TypeKind"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HBool>
	<HBytes public="1" get="inline" set="null" expr="cast 8" line="34" static="1">
		<x path="hl.TypeKind"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HBytes>
	<HDyn public="1" get="inline" set="null" expr="cast 9" line="35" static="1">
		<x path="hl.TypeKind"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HDyn>
	<HFun public="1" get="inline" set="null" expr="cast 10" line="36" static="1">
		<x path="hl.TypeKind"/>
		<meta>
			<m n=":value"><e>cast 10</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HFun>
	<HObj public="1" get="inline" set="null" expr="cast 11" line="37" static="1">
		<x path="hl.TypeKind"/>
		<meta>
			<m n=":value"><e>cast 11</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HObj>
	<HArray public="1" get="inline" set="null" expr="cast 12" line="38" static="1">
		<x path="hl.TypeKind"/>
		<meta>
			<m n=":value"><e>cast 12</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HArray>
	<HType public="1" get="inline" set="null" expr="cast 13" line="39" static="1">
		<x path="hl.TypeKind"/>
		<meta>
			<m n=":value"><e>cast 13</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HType>
	<HRef public="1" get="inline" set="null" expr="cast 14" line="40" static="1">
		<x path="hl.TypeKind"/>
		<meta>
			<m n=":value"><e>cast 14</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HRef>
	<HVirtual public="1" get="inline" set="null" expr="cast 15" line="41" static="1">
		<x path="hl.TypeKind"/>
		<meta>
			<m n=":value"><e>cast 15</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HVirtual>
	<HDynObj public="1" get="inline" set="null" expr="cast 16" line="42" static="1">
		<x path="hl.TypeKind"/>
		<meta>
			<m n=":value"><e>cast 16</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HDynObj>
	<HAbstract public="1" get="inline" set="null" expr="cast 17" line="43" static="1">
		<x path="hl.TypeKind"/>
		<meta>
			<m n=":value"><e>cast 17</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HAbstract>
	<HEnum public="1" get="inline" set="null" expr="cast 18" line="44" static="1">
		<x path="hl.TypeKind"/>
		<meta>
			<m n=":value"><e>cast 18</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HEnum>
	<HNull public="1" get="inline" set="null" expr="cast 19" line="45" static="1">
		<x path="hl.TypeKind"/>
		<meta>
			<m n=":value"><e>cast 19</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HNull>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hl._Type.TypeKind_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/Type.hx" private="1" module="hl.Type" extern="1">
		<HVoid public="1" get="inline" set="null" expr="cast 0" line="26" static="1">
			<x path="hl.TypeKind"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HVoid>
		<HUI8 public="1" get="inline" set="null" expr="cast 1" line="27" static="1">
			<x path="hl.TypeKind"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HUI8>
		<HUI16 public="1" get="inline" set="null" expr="cast 2" line="28" static="1">
			<x path="hl.TypeKind"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HUI16>
		<HI32 public="1" get="inline" set="null" expr="cast 3" line="29" static="1">
			<x path="hl.TypeKind"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HI32>
		<HI64 public="1" get="inline" set="null" expr="cast 4" line="30" static="1">
			<x path="hl.TypeKind"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HI64>
		<HF32 public="1" get="inline" set="null" expr="cast 5" line="31" static="1">
			<x path="hl.TypeKind"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HF32>
		<HF64 public="1" get="inline" set="null" expr="cast 6" line="32" static="1">
			<x path="hl.TypeKind"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HF64>
		<HBool public="1" get="inline" set="null" expr="cast 7" line="33" static="1">
			<x path="hl.TypeKind"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HBool>
		<HBytes public="1" get="inline" set="null" expr="cast 8" line="34" static="1">
			<x path="hl.TypeKind"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HBytes>
		<HDyn public="1" get="inline" set="null" expr="cast 9" line="35" static="1">
			<x path="hl.TypeKind"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HDyn>
		<HFun public="1" get="inline" set="null" expr="cast 10" line="36" static="1">
			<x path="hl.TypeKind"/>
			<meta>
				<m n=":value"><e>cast 10</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HFun>
		<HObj public="1" get="inline" set="null" expr="cast 11" line="37" static="1">
			<x path="hl.TypeKind"/>
			<meta>
				<m n=":value"><e>cast 11</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HObj>
		<HArray public="1" get="inline" set="null" expr="cast 12" line="38" static="1">
			<x path="hl.TypeKind"/>
			<meta>
				<m n=":value"><e>cast 12</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HArray>
		<HType public="1" get="inline" set="null" expr="cast 13" line="39" static="1">
			<x path="hl.TypeKind"/>
			<meta>
				<m n=":value"><e>cast 13</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HType>
		<HRef public="1" get="inline" set="null" expr="cast 14" line="40" static="1">
			<x path="hl.TypeKind"/>
			<meta>
				<m n=":value"><e>cast 14</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HRef>
		<HVirtual public="1" get="inline" set="null" expr="cast 15" line="41" static="1">
			<x path="hl.TypeKind"/>
			<meta>
				<m n=":value"><e>cast 15</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HVirtual>
		<HDynObj public="1" get="inline" set="null" expr="cast 16" line="42" static="1">
			<x path="hl.TypeKind"/>
			<meta>
				<m n=":value"><e>cast 16</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HDynObj>
		<HAbstract public="1" get="inline" set="null" expr="cast 17" line="43" static="1">
			<x path="hl.TypeKind"/>
			<meta>
				<m n=":value"><e>cast 17</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HAbstract>
		<HEnum public="1" get="inline" set="null" expr="cast 18" line="44" static="1">
			<x path="hl.TypeKind"/>
			<meta>
				<m n=":value"><e>cast 18</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HEnum>
		<HNull public="1" get="inline" set="null" expr="cast 19" line="45" static="1">
			<x path="hl.TypeKind"/>
			<meta>
				<m n=":value"><e>cast 19</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HNull>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="hl.Type" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/Type.hx">
		<this><x path="hl.Type"/></this>
		<meta><m n=":coreType"/></meta>
		<impl><class path="hl._Type.Type_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/Type.hx" private="1" module="hl.Type">
	<kind public="1" get="accessor" set="null" static="1">
		<x path="hl.TypeKind"/>
		<meta><m n=":impl"/></meta>
	</kind>
	<get_kind get="inline" set="null" line="52" static="1">
		<f a="this">
			<x path="hl.Type"/>
			<x path="hl.TypeKind"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
		</meta>
	</get_kind>
	<getNameBytes set="method" line="56" static="1">
		<f a="this">
			<x path="hl.Type"/>
			<x path="hl.Bytes"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"type_name"</e>
			</m>
		</meta>
	</getNameBytes>
	<getDynamic public="1" get="inline" set="null" line="60" static="1">
		<f a="v">
			<d/>
			<x path="hl.Type"/>
		</f>
		<meta><m n=":has_untyped"/></meta>
	</getDynamic>
	<get public="1" params="T" get="inline" set="null" line="64" static="1">
		<f a="v">
			<c path="get.T"/>
			<x path="hl.Type"/>
		</f>
		<meta><m n=":has_untyped"/></meta>
	</get>
	<getTypeName public="1" get="inline" set="null" line="68" static="1">
		<f a="this">
			<x path="hl.Type"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getTypeName>
	<safeCast public="1" set="method" line="74" static="1">
		<f a="this:t">
			<x path="hl.Type"/>
			<x path="hl.Type"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"type_safe_cast"</e>
			</m>
		</meta>
	</safeCast>
	<getInstanceFields public="1" set="method" line="78" static="1">
		<f a="this">
			<x path="hl.Type"/>
			<x path="hl.NativeArray"><x path="hl.Bytes"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"type_instance_fields"</e>
			</m>
		</meta>
	</getInstanceFields>
	<getGlobal public="1" set="method" line="82" static="1">
		<f a="this">
			<x path="hl.Type"/>
			<d/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"type_get_global"</e>
			</m>
		</meta>
	</getGlobal>
	<setGlobal public="1" set="method" line="86" static="1">
		<f a="this:v">
			<x path="hl.Type"/>
			<d/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"type_set_global"</e>
			</m>
		</meta>
	</setGlobal>
	<getArgsCount public="1" set="method" line="90" static="1">
		<f a="this">
			<x path="hl.Type"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"type_args_count"</e>
			</m>
		</meta>
	</getArgsCount>
	<getSuper public="1" set="method" line="94" static="1">
		<f a="this">
			<x path="hl.Type"/>
			<x path="hl.Type"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"type_super"</e>
			</m>
		</meta>
	</getSuper>
	<getEnumFields public="1" set="method" line="98" static="1">
		<f a="this">
			<x path="hl.Type"/>
			<x path="hl.NativeArray"><x path="hl.Bytes"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"type_enum_fields"</e>
			</m>
		</meta>
	</getEnumFields>
	<getEnumValues public="1" set="method" line="102" static="1">
		<f a="this">
			<x path="hl.Type"/>
			<x path="hl.NativeArray"><d/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"type_enum_values"</e>
			</m>
		</meta>
	</getEnumValues>
	<allocObject public="1" set="method" line="106" static="1">
		<f a="this">
			<x path="hl.Type"/>
			<d/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"alloc_obj"</e>
			</m>
		</meta>
	</allocObject>
	<allocEnum public="1" set="method" line="110" static="1">
		<f a="this:index:args:nargs">
			<x path="hl.Type"/>
			<x path="Int"/>
			<x path="hl.NativeArray"><d/></x>
			<x path="Int"/>
			<d/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"alloc_enum_dyn"</e>
			</m>
		</meta>
	</allocEnum>
</class></impl>
	</abstract>
	<class path="hl._Type.Type_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/Type.hx" private="1" module="hl.Type">
		<kind public="1" get="accessor" set="null" static="1">
			<x path="hl.TypeKind"/>
			<meta><m n=":impl"/></meta>
		</kind>
		<get_kind get="inline" set="null" line="52" static="1">
			<f a="this">
				<x path="hl.Type"/>
				<x path="hl.TypeKind"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
			</meta>
		</get_kind>
		<getNameBytes set="method" line="56" static="1">
			<f a="this">
				<x path="hl.Type"/>
				<x path="hl.Bytes"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"type_name"</e>
				</m>
			</meta>
		</getNameBytes>
		<getDynamic public="1" get="inline" set="null" line="60" static="1">
			<f a="v">
				<d/>
				<x path="hl.Type"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getDynamic>
		<get public="1" params="T" get="inline" set="null" line="64" static="1">
			<f a="v">
				<c path="get.T"/>
				<x path="hl.Type"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</get>
		<getTypeName public="1" get="inline" set="null" line="68" static="1">
			<f a="this">
				<x path="hl.Type"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getTypeName>
		<safeCast public="1" set="method" line="74" static="1">
			<f a="this:t">
				<x path="hl.Type"/>
				<x path="hl.Type"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"type_safe_cast"</e>
				</m>
			</meta>
		</safeCast>
		<getInstanceFields public="1" set="method" line="78" static="1">
			<f a="this">
				<x path="hl.Type"/>
				<x path="hl.NativeArray"><x path="hl.Bytes"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"type_instance_fields"</e>
				</m>
			</meta>
		</getInstanceFields>
		<getGlobal public="1" set="method" line="82" static="1">
			<f a="this">
				<x path="hl.Type"/>
				<d/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"type_get_global"</e>
				</m>
			</meta>
		</getGlobal>
		<setGlobal public="1" set="method" line="86" static="1">
			<f a="this:v">
				<x path="hl.Type"/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"type_set_global"</e>
				</m>
			</meta>
		</setGlobal>
		<getArgsCount public="1" set="method" line="90" static="1">
			<f a="this">
				<x path="hl.Type"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"type_args_count"</e>
				</m>
			</meta>
		</getArgsCount>
		<getSuper public="1" set="method" line="94" static="1">
			<f a="this">
				<x path="hl.Type"/>
				<x path="hl.Type"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"type_super"</e>
				</m>
			</meta>
		</getSuper>
		<getEnumFields public="1" set="method" line="98" static="1">
			<f a="this">
				<x path="hl.Type"/>
				<x path="hl.NativeArray"><x path="hl.Bytes"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"type_enum_fields"</e>
				</m>
			</meta>
		</getEnumFields>
		<getEnumValues public="1" set="method" line="102" static="1">
			<f a="this">
				<x path="hl.Type"/>
				<x path="hl.NativeArray"><d/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"type_enum_values"</e>
				</m>
			</meta>
		</getEnumValues>
		<allocObject public="1" set="method" line="106" static="1">
			<f a="this">
				<x path="hl.Type"/>
				<d/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"alloc_obj"</e>
				</m>
			</meta>
		</allocObject>
		<allocEnum public="1" set="method" line="110" static="1">
			<f a="this:index:args:nargs">
				<x path="hl.Type"/>
				<x path="Int"/>
				<x path="hl.NativeArray"><d/></x>
				<x path="Int"/>
				<d/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"alloc_enum_dyn"</e>
				</m>
			</meta>
		</allocEnum>
	</class>
	<typedef path="hl.SentinelHandle" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/UI.hx" module="hl.UI"><c path="hl.Abstract"><c path="Sui_sentinel"/></c></typedef>
	<abstract path="hl.Sentinel" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/UI.hx" module="hl.UI">
		<this><t path="hl.SentinelHandle"/></this>
		<impl><class path="hl._UI.Sentinel_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/UI.hx" private="1" module="hl.UI">
	<pause public="1" get="accessor" set="accessor" static="1">
		<x path="Bool"/>
		<meta><m n=":impl"/></meta>
	</pause>
	<_new public="1" set="method" line="30" static="1">
		<f a="timeout:callback">
			<x path="Float"/>
			<f a=""><x path="Void"/></f>
			<x path="hl.Sentinel"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<get_pause set="method" line="34" static="1">
		<f a="this">
			<t path="hl.SentinelHandle"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_pause>
	<set_pause set="method" line="38" static="1">
		<f a="this:p">
			<t path="hl.SentinelHandle"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_pause>
	<tick public="1" set="method" line="43" static="1">
		<f a="this">
			<t path="hl.SentinelHandle"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</tick>
	<create_sentinel set="method" line="47" static="1">
		<f a="timeout:callb">
			<x path="Float"/>
			<f a=""><x path="Void"/></f>
			<t path="hl.SentinelHandle"/>
		</f>
		<meta><m n=":hlNative">
	<e>"ui"</e>
	<e>"ui_start_sentinel"</e>
</m></meta>
	</create_sentinel>
	<_tick set="method" line="51" static="1">
		<f a="h">
			<t path="hl.SentinelHandle"/>
			<x path="Void"/>
		</f>
		<meta><m n=":hlNative">
	<e>"ui"</e>
	<e>"ui_sentinel_tick"</e>
</m></meta>
	</_tick>
	<_pause set="method" line="52" static="1">
		<f a="h:b">
			<t path="hl.SentinelHandle"/>
			<x path="Bool"/>
			<x path="Void"/>
		</f>
		<meta><m n=":hlNative">
	<e>"ui"</e>
	<e>"ui_sentinel_pause"</e>
</m></meta>
	</_pause>
	<is_paused set="method" line="53" static="1">
		<f a="h">
			<t path="hl.SentinelHandle"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":hlNative">
	<e>"ui"</e>
	<e>"ui_sentinel_is_paused"</e>
</m></meta>
	</is_paused>
</class></impl>
	</abstract>
	<class path="hl._UI.Sentinel_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/UI.hx" private="1" module="hl.UI">
		<pause public="1" get="accessor" set="accessor" static="1">
			<x path="Bool"/>
			<meta><m n=":impl"/></meta>
		</pause>
		<_new public="1" set="method" line="30" static="1">
			<f a="timeout:callback">
				<x path="Float"/>
				<f a=""><x path="Void"/></f>
				<x path="hl.Sentinel"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<get_pause set="method" line="34" static="1">
			<f a="this">
				<t path="hl.SentinelHandle"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_pause>
		<set_pause set="method" line="38" static="1">
			<f a="this:p">
				<t path="hl.SentinelHandle"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_pause>
		<tick public="1" set="method" line="43" static="1">
			<f a="this">
				<t path="hl.SentinelHandle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</tick>
		<create_sentinel set="method" line="47" static="1">
			<f a="timeout:callb">
				<x path="Float"/>
				<f a=""><x path="Void"/></f>
				<t path="hl.SentinelHandle"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ui"</e>
	<e>"ui_start_sentinel"</e>
</m></meta>
		</create_sentinel>
		<_tick set="method" line="51" static="1">
			<f a="h">
				<t path="hl.SentinelHandle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ui"</e>
	<e>"ui_sentinel_tick"</e>
</m></meta>
		</_tick>
		<_pause set="method" line="52" static="1">
			<f a="h:b">
				<t path="hl.SentinelHandle"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ui"</e>
	<e>"ui_sentinel_pause"</e>
</m></meta>
		</_pause>
		<is_paused set="method" line="53" static="1">
			<f a="h">
				<t path="hl.SentinelHandle"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ui"</e>
	<e>"ui_sentinel_is_paused"</e>
</m></meta>
		</is_paused>
	</class>
	<typedef path="hl.WinHandle" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/UI.hx" module="hl.UI"><c path="hl.Abstract"><c path="Sui_window"/></c></typedef>
	<class path="hl.Window" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/UI.hx" module="hl.UI">
		<win_destroy set="method" line="77" static="1">
			<f a="win">
				<t path="hl.WinHandle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ui"</e>
	<e>"ui_win_destroy"</e>
</m></meta>
		</win_destroy>
		<win_set_text set="method" line="81" static="1">
			<f a="win:text">
				<t path="hl.WinHandle"/>
				<x path="hl.Bytes"/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ui"</e>
	<e>"ui_win_set_text"</e>
</m></meta>
		</win_set_text>
		<win_set_enable set="method" line="85" static="1">
			<f a="win:enable">
				<t path="hl.WinHandle"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ui"</e>
	<e>"ui_win_set_enable"</e>
</m></meta>
		</win_set_enable>
		<h><t path="hl.WinHandle"/></h>
		<setText public="1" set="method" line="63"><f a="text">
	<c path="String"/>
	<x path="Void"/>
</f></setText>
		<setEnable public="1" set="method" line="67"><f a="b">
	<x path="Bool"/>
	<x path="Void"/>
</f></setEnable>
		<destroy public="1" set="method" line="71"><f a=""><x path="Void"/></f></destroy>
	</class>
	<class path="hl.Button" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/UI.hx" module="hl.UI">
		<extends path="hl.Window"/>
		<button_new set="method" line="101" static="1">
			<f a="parent:text:onClick">
				<t path="hl.WinHandle"/>
				<x path="hl.Bytes"/>
				<f a=""><x path="Void"/></f>
				<t path="hl.WinHandle"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ui"</e>
	<e>"ui_button_new"</e>
</m></meta>
		</button_new>
		<onClick public="1" set="dynamic" line="97"><f a=""><x path="Void"/></f></onClick>
		<new public="1" set="method" line="93"><f a="parent:text">
	<c path="hl.Window"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="hl.WinLog" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/UI.hx" module="hl.UI">
		<extends path="hl.Window"/>
		<winlog_new set="method" line="119" static="1">
			<f a="text:width:height">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<t path="hl.WinHandle"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ui"</e>
	<e>"ui_winlog_new"</e>
</m></meta>
		</winlog_new>
		<winlog_set_text set="method" line="124" static="1">
			<f a="win:text:autoScroll">
				<t path="hl.WinHandle"/>
				<x path="hl.Bytes"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ui"</e>
	<e>"ui_winlog_set_text"</e>
</m></meta>
		</winlog_set_text>
		<setTextContent public="1" set="method" line="113">
			<f a="text:?autoScroll" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ autoScroll : false }</e></m></meta>
		</setTextContent>
		<new public="1" set="method" line="109"><f a="title:width:height">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="hl.DialogFlags" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/UI.hx" module="hl.UI">
		<YesNo/>
		<IsError/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<abstract path="hl.LoopResult" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/UI.hx" module="hl.UI">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="hl._UI.LoopResult_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/UI.hx" private="1" module="hl.UI" extern="1">
	<NoMessage public="1" get="inline" set="null" expr="cast 0" line="135" static="1">
		<x path="hl.LoopResult"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NoMessage>
	<HandledMessage public="1" get="inline" set="null" expr="cast 1" line="136" static="1">
		<x path="hl.LoopResult"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HandledMessage>
	<Quit public="1" get="inline" set="null" expr="cast 2" line="137" static="1">
		<x path="hl.LoopResult"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Quit>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hl._UI.LoopResult_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/UI.hx" private="1" module="hl.UI" extern="1">
		<NoMessage public="1" get="inline" set="null" expr="cast 0" line="135" static="1">
			<x path="hl.LoopResult"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NoMessage>
		<HandledMessage public="1" get="inline" set="null" expr="cast 1" line="136" static="1">
			<x path="hl.LoopResult"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HandledMessage>
		<Quit public="1" get="inline" set="null" expr="cast 2" line="137" static="1">
			<x path="hl.LoopResult"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Quit>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="hl.FileOptions" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/UI.hx" module="hl.UI"><a>
	<window>
		<x path="Null"><c path="hl.Window"/></x>
		<meta><m n=":optional"/></meta>
	</window>
	<title>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</title>
	<filters>
		<x path="Null"><c path="Array"><a>
	<name><c path="String"/></name>
	<exts><c path="Array"><c path="String"/></c></exts>
</a></c></x>
		<meta><m n=":optional"/></meta>
	</filters>
	<filterIndex>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</filterIndex>
	<fileName>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</fileName>
</a></typedef>
	<class path="hl.UI" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/UI.hx">
		<init set="method" line="153" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":hlNative">
	<e>"ui"</e>
	<e>"ui_init"</e>
</m></meta>
		</init>
		<_dialog set="method" line="160" static="1">
			<f a="title:text:flags">
				<x path="hl.Bytes"/>
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ui"</e>
	<e>"ui_dialog"</e>
</m></meta>
		</_dialog>
		<dialog public="1" set="method" line="164" static="1"><f a="title:text:flags">
	<c path="String"/>
	<c path="String"/>
	<x path="haxe.EnumFlags"><e path="hl.DialogFlags"/></x>
	<x path="Void"/>
</f></dialog>
		<loop public="1" set="method" line="169" static="1">
			<f a="blocking">
				<x path="Bool"/>
				<x path="hl.LoopResult"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ui"</e>
	<e>"ui_loop"</e>
</m></meta>
		</loop>
		<stopLoop public="1" set="method" line="174" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":hlNative">
	<e>"ui"</e>
	<e>"ui_stop_loop"</e>
</m></meta>
		</stopLoop>
		<closeConsole public="1" set="method" line="178" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":hlNative">
	<e>"ui"</e>
	<e>"ui_close_console"</e>
</m></meta>
		</closeConsole>
		<loadFile public="1" set="method" line="181" static="1"><f a="opts">
	<t path="hl.FileOptions"/>
	<x path="Null"><c path="String"/></x>
</f></loadFile>
		<saveFile public="1" set="method" line="185" static="1"><f a="opts">
	<t path="hl.FileOptions"/>
	<x path="Null"><c path="String"/></x>
</f></saveFile>
		<chooseFile set="method" line="189" static="1"><f a="save:opts">
	<x path="Bool"/>
	<t path="hl.FileOptions"/>
	<x path="Null"><c path="String"/></x>
</f></chooseFile>
		<_chooseFile set="method" line="229" static="1">
			<f a="forSave:obj">
				<x path="Bool"/>
				<d/>
				<x path="hl.Bytes"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ui"</e>
	<e>"ui_choose_file"</e>
</m></meta>
		</_chooseFile>
		<haxe_doc>These are the bindings for the HL `ui.hdll` library, which contains some low level system access.</haxe_doc>
	</class>
	<abstract path="hl.UI16" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/UI16.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="hl.UI16"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="hl.UI8" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/UI8.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="hl.UI8"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="hl.types.ArrayAccess" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/types/ArrayBase.hx" module="hl.types.ArrayBase">
		<getDyn public="1" set="method" line="27"><f a="pos">
	<x path="Int"/>
	<d/>
</f></getDyn>
		<setDyn public="1" set="method" line="32"><f a="pos:v">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></setDyn>
		<blit public="1" set="method" line="36"><f a="pos:src:srcpos:len">
	<x path="Int"/>
	<c path="hl.types.ArrayAccess"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blit>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="hl.types.ArrayBase" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/types/ArrayBase.hx">
		<extends path="hl.types.ArrayAccess"/>
		<allocI32 public="1" set="method" line="118" static="1">
			<f a="bytes:length">
				<x path="hl.BytesAccess"><x path="Int"/></x>
				<x path="Int"/>
				<t path="hl.types.ArrayI32"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</allocI32>
		<allocUI16 public="1" set="method" line="126" static="1">
			<f a="bytes:length">
				<x path="hl.BytesAccess"><x path="hl.UI16"/></x>
				<x path="Int"/>
				<t path="hl.types.ArrayUI16"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</allocUI16>
		<allocF32 public="1" set="method" line="134" static="1">
			<f a="bytes:length">
				<x path="hl.BytesAccess"><t path="hl.F32"/></x>
				<x path="Int"/>
				<t path="hl.types.ArrayF32"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</allocF32>
		<allocF64 public="1" set="method" line="142" static="1">
			<f a="bytes:length">
				<x path="hl.BytesAccess"><x path="Float"/></x>
				<x path="Int"/>
				<t path="hl.types.ArrayF64"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</allocF64>
		<length public="1" set="null"><x path="Int"/></length>
		<pushDyn public="1" set="method" line="48"><f a="v">
	<d/>
	<x path="Int"/>
</f></pushDyn>
		<popDyn public="1" set="method" line="53"><f a=""><x path="Null"><d/></x></f></popDyn>
		<shiftDyn public="1" set="method" line="58"><f a=""><x path="Null"><d/></x></f></shiftDyn>
		<unshiftDyn public="1" set="method" line="63"><f a="v">
	<d/>
	<x path="Void"/>
</f></unshiftDyn>
		<insertDyn public="1" set="method" line="67"><f a="pos:v">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></insertDyn>
		<removeDyn public="1" set="method" line="71"><f a="v">
	<d/>
	<x path="Bool"/>
</f></removeDyn>
		<sortDyn public="1" set="method" line="76"><f a="f">
	<f a=":">
		<d/>
		<d/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></sortDyn>
		<slice public="1" set="method" line="80"><f a="pos:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="hl.types.ArrayBase"/>
</f></slice>
		<splice public="1" set="method" line="85"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="hl.types.ArrayBase"/>
</f></splice>
		<join public="1" set="method" line="90"><f a="sep">
	<c path="String"/>
	<c path="String"/>
</f></join>
		<reverse public="1" set="method" line="95"><f a=""><x path="Void"/></f></reverse>
		<resize public="1" set="method" line="99"><f a="len">
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
		<toString public="1" set="method" line="103"><f a=""><c path="String"/></f></toString>
		<__cast set="method" line="108"><f a="t">
	<x path="hl.Type"/>
	<d/>
</f></__cast>
		<isArrayObj set="method" line="114"><f a=""><x path="Bool"/></f></isArrayObj>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="hl.types.BytesIterator" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/hl/types/ArrayBytes.hx" module="hl.types.ArrayBytes">
		<pos><x path="Int"/></pos>
		<a><c path="hl.types.ArrayBytes"><c path="hl.types.BytesIterator.T"/></c></a>
		<hasNext public="1" set="method" line="32"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method" line="35"><f a=""><c path="hl.types.BytesIterator.T"/></f></next>
		<new public="1" set="method" line="29"><f a="a">
	<c path="hl.types.ArrayBytes"><c path="hl.types.BytesIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":generic"/>
		</meta>
	</class>
	<class path="hl.types.ArrayBytes" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/hl/types/ArrayBytes.hx">
		<extends path="hl.types.ArrayBase"/>
		<bytes><x path="hl.BytesAccess"><c path="hl.types.ArrayBytes.T"/></x></bytes>
		<size><x path="Int"/></size>
		<concat public="1" set="method" line="51"><f a="a">
	<c path="hl.types.ArrayBytes"><c path="hl.types.ArrayBytes.T"/></c>
	<c path="hl.types.ArrayBytes"><c path="hl.types.ArrayBytes.T"/></c>
</f></concat>
		<join public="1" set="method" line="61" override="1"><f a="sep">
	<c path="String"/>
	<c path="String"/>
</f></join>
		<pop public="1" set="method" line="70"><f a=""><x path="Null"><c path="hl.types.ArrayBytes.T"/></x></f></pop>
		<push public="1" set="method" line="77"><f a="x">
	<c path="hl.types.ArrayBytes.T"/>
	<x path="Int"/>
</f></push>
		<reverse public="1" set="method" line="87" override="1"><f a=""><x path="Void"/></f></reverse>
		<shift public="1" set="method" line="96"><f a=""><x path="Null"><c path="hl.types.ArrayBytes.T"/></x></f></shift>
		<blit public="1" set="method" line="105" override="1"><f a="pos:src:srcpos:len">
	<x path="Int"/>
	<c path="hl.types.ArrayAccess"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blit>
		<slice public="1" set="method" line="111" override="1"><f a="pos:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="hl.types.ArrayBytes"><c path="hl.types.ArrayBytes.T"/></c>
</f></slice>
		<sort public="1" set="method" line="136"><f a="f">
	<f a=":">
		<c path="hl.types.ArrayBytes.T"/>
		<c path="hl.types.ArrayBytes.T"/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></sort>
		<splice public="1" set="method" line="143" override="1"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="hl.types.ArrayBytes"><c path="hl.types.ArrayBytes.T"/></c>
</f></splice>
		<toString public="1" set="method" line="168" override="1"><f a=""><c path="String"/></f></toString>
		<unshift public="1" set="method" line="179"><f a="x">
	<c path="hl.types.ArrayBytes.T"/>
	<x path="Void"/>
</f></unshift>
		<insert public="1" set="method" line="185"><f a="pos:x">
	<x path="Int"/>
	<c path="hl.types.ArrayBytes.T"/>
	<x path="Void"/>
</f></insert>
		<remove public="1" set="method" line="195"><f a="x">
	<c path="hl.types.ArrayBytes.T"/>
	<x path="Bool"/>
</f></remove>
		<indexOf public="1" set="method" line="204"><f a="x:?fromIndex">
	<c path="hl.types.ArrayBytes.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></indexOf>
		<lastIndexOf public="1" set="method" line="216"><f a="x:?fromIndex">
	<c path="hl.types.ArrayBytes.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lastIndexOf>
		<copy public="1" set="method" line="231"><f a=""><c path="hl.types.ArrayBytes"><c path="hl.types.ArrayBytes.T"/></c></f></copy>
		<iterator public="1" set="method" line="239"><f a=""><t path="Iterator"><c path="hl.types.ArrayBytes.T"/></t></f></iterator>
		<map public="1" params="S" set="method" line="243"><f a="f">
	<f a="">
		<c path="hl.types.ArrayBytes.T"/>
		<c path="map.S"/>
	</f>
	<c path="hl.types.ArrayDyn"/>
</f></map>
		<filter public="1" set="method" line="251"><f a="f">
	<f a="">
		<c path="hl.types.ArrayBytes.T"/>
		<x path="Bool"/>
	</f>
	<c path="hl.types.ArrayBytes"><c path="hl.types.ArrayBytes.T"/></c>
</f></filter>
		<resize public="1" set="method" line="260" override="1"><f a="len">
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
		<getDyn public="1" set="method" line="269" override="1"><f a="pos">
	<x path="Int"/>
	<d/>
</f></getDyn>
		<setDyn public="1" set="method" line="276" override="1"><f a="pos:v">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></setDyn>
		<pushDyn public="1" set="method" line="283" override="1"><f a="v">
	<d/>
	<x path="Int"/>
</f></pushDyn>
		<popDyn public="1" set="method" line="284" override="1"><f a=""><x path="Null"><d/></x></f></popDyn>
		<shiftDyn public="1" set="method" line="285" override="1"><f a=""><x path="Null"><d/></x></f></shiftDyn>
		<unshiftDyn public="1" set="method" line="286" override="1"><f a="v">
	<d/>
	<x path="Void"/>
</f></unshiftDyn>
		<insertDyn public="1" set="method" line="287" override="1"><f a="pos:v">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></insertDyn>
		<removeDyn public="1" set="method" line="288" override="1"><f a="v">
	<d/>
	<x path="Bool"/>
</f></removeDyn>
		<sortDyn public="1" set="method" line="289" override="1"><f a="f">
	<f a=":">
		<d/>
		<d/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></sortDyn>
		<__expand set="method" line="292"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></__expand>
		<new public="1" set="method" line="46"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":keep"/>
			<m n=":generic"/>
		</meta>
	</class>
	<typedef path="hl.types.ArrayI32" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/types/ArrayBytes.hx" module="hl.types.ArrayBytes"><c path="hl.types.ArrayBytes_Int"/></typedef>
	<typedef path="hl.types.ArrayUI16" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/types/ArrayBytes.hx" module="hl.types.ArrayBytes"><c path="hl.types.ArrayBytes_hl_UI16"/></typedef>
	<typedef path="hl.types.ArrayF32" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/types/ArrayBytes.hx" module="hl.types.ArrayBytes"><c path="hl.types.ArrayBytes_Single"/></typedef>
	<typedef path="hl.types.ArrayF64" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/types/ArrayBytes.hx" module="hl.types.ArrayBytes"><c path="hl.types.ArrayBytes_Float"/></typedef>
	<class path="hl.types.ArrayDynIterator" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/types/ArrayDyn.hx" module="hl.types.ArrayDyn">
		<a><c path="hl.types.ArrayBase"/></a>
		<len><x path="Int"/></len>
		<pos><x path="Int"/></pos>
		<hasNext public="1" set="method" line="34"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method" line="37"><f a=""><unknown/></f></next>
		<new public="1" set="method" line="29"><f a="a">
	<c path="hl.types.ArrayBase"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="hl.types.ArrayDyn" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/types/ArrayDyn.hx">
		<extends path="hl.types.ArrayAccess"/>
		<alloc public="1" set="method" line="224" static="1">
			<f a="a:?allowReinterpret" v=":false">
				<c path="hl.types.ArrayBase"/>
				<x path="Bool"/>
				<c path="hl.types.ArrayDyn"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e>{ allowReinterpret : false }</e></m>
			</meta>
		</alloc>
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<array><c path="hl.types.ArrayBase"/></array>
		<allowReinterpret><x path="Bool"/></allowReinterpret>
		<get_length get="inline" set="null" line="54"><f a=""><x path="Int"/></f></get_length>
		<getDyn public="1" set="method" line="56" override="1"><f a="i">
	<x path="Int"/>
	<unknown/>
</f></getDyn>
		<setDyn public="1" set="method" line="60" override="1"><f a="pos:value">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></setDyn>
		<blit public="1" set="method" line="64" override="1"><f a="pos:src:srcpos:len">
	<x path="Int"/>
	<c path="hl.types.ArrayAccess"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blit>
		<concat public="1" set="method" line="68"><f a="a">
	<c path="hl.types.ArrayDyn"/>
	<c path="hl.types.ArrayDyn"/>
</f></concat>
		<join public="1" set="method" line="80"><f a="sep">
	<c path="String"/>
	<c path="String"/>
</f></join>
		<pop public="1" set="method" line="84"><f a=""><x path="Null"><d/></x></f></pop>
		<push public="1" set="method" line="88"><f a="x">
	<d/>
	<x path="Int"/>
</f></push>
		<reverse public="1" set="method" line="92"><f a=""><x path="Void"/></f></reverse>
		<resize public="1" set="method" line="96"><f a="len">
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
		<shift public="1" set="method" line="100"><f a=""><x path="Null"><d/></x></f></shift>
		<slice public="1" set="method" line="104"><f a="pos:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="hl.types.ArrayDyn"/>
</f></slice>
		<sort public="1" set="method" line="108"><f a="f">
	<f a=":">
		<d/>
		<d/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></sort>
		<splice public="1" set="method" line="112"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="hl.types.ArrayDyn"/>
</f></splice>
		<toString public="1" set="method" line="116"><f a=""><c path="String"/></f></toString>
		<unshift public="1" set="method" line="120"><f a="x">
	<d/>
	<x path="Void"/>
</f></unshift>
		<insert public="1" set="method" line="124"><f a="pos:x">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></insert>
		<remove public="1" set="method" line="128"><f a="x">
	<d/>
	<x path="Bool"/>
</f></remove>
		<indexOf public="1" set="method" line="132"><f a="x:?fromIndex">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
</f></indexOf>
		<lastIndexOf public="1" set="method" line="144"><f a="x:?fromIndex">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
</f></lastIndexOf>
		<copy public="1" set="method" line="159"><f a=""><c path="hl.types.ArrayDyn"/></f></copy>
		<iterator public="1" set="method" line="166"><f a=""><t path="Iterator"><d/></t></f></iterator>
		<map public="1" set="method" line="170"><f a="f">
	<f a="">
		<d/>
		<d/>
	</f>
	<c path="hl.types.ArrayDyn"/>
</f></map>
		<filter public="1" set="method" line="177"><f a="f">
	<f a="">
		<d/>
		<x path="Bool"/>
	</f>
	<c path="hl.types.ArrayDyn"/>
</f></filter>
		<__get_field set="method" line="186">
			<f a="fid">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__get_field>
		<__cast set="method" line="192"><f a="t">
	<x path="hl.Type"/>
	<d/>
</f></__cast>
		<__compare set="method" line="220">
			<f a="a">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":keep"/></meta>
		</__compare>
		<new public="1" set="method" line="49"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="hl.types.ArrayObj" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/hl/types/ArrayObj.hx">
		<extends path="hl.types.ArrayBase"/>
		<alloc public="1" params="T" set="method" line="292" static="1">
			<f a="a">
				<x path="hl.NativeArray"><c path="alloc.T"/></x>
				<c path="hl.types.ArrayObj"><c path="alloc.T"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</alloc>
		<array><x path="hl.NativeArray"><d/></x></array>
		<concat public="1" set="method" line="34"><f a="a">
	<c path="hl.types.ArrayObj"><c path="hl.types.ArrayObj.T"/></c>
	<c path="hl.types.ArrayObj"><c path="hl.types.ArrayObj.T"/></c>
</f></concat>
		<join public="1" set="method" line="41" override="1"><f a="sep">
	<c path="String"/>
	<c path="String"/>
</f></join>
		<isArrayObj set="method" line="50" override="1"><f a=""><x path="Bool"/></f></isArrayObj>
		<pop public="1" set="method" line="54"><f a=""><x path="Null"><c path="hl.types.ArrayObj.T"/></x></f></pop>
		<push public="1" set="method" line="63"><f a="x">
	<c path="hl.types.ArrayObj.T"/>
	<x path="Int"/>
</f></push>
		<reverse public="1" set="method" line="73" override="1"><f a=""><x path="Void"/></f></reverse>
		<shift public="1" set="method" line="82"><f a=""><x path="Null"><c path="hl.types.ArrayObj.T"/></x></f></shift>
		<slice public="1" set="method" line="92" override="1"><f a="pos:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="hl.types.ArrayObj"><c path="hl.types.ArrayObj.T"/></c>
</f></slice>
		<sort public="1" set="method" line="114"><f a="f">
	<f a=":">
		<c path="hl.types.ArrayObj.T"/>
		<c path="hl.types.ArrayObj.T"/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></sort>
		<splice public="1" set="method" line="119" override="1"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="hl.types.ArrayObj"><c path="hl.types.ArrayObj.T"/></c>
</f></splice>
		<toString public="1" set="method" line="142" override="1"><f a=""><c path="String"/></f></toString>
		<unshift public="1" set="method" line="153"><f a="x">
	<c path="hl.types.ArrayObj.T"/>
	<x path="Void"/>
</f></unshift>
		<insert public="1" set="method" line="159"><f a="pos:x">
	<x path="Int"/>
	<c path="hl.types.ArrayObj.T"/>
	<x path="Void"/>
</f></insert>
		<remove public="1" set="method" line="169"><f a="x">
	<c path="hl.types.ArrayObj.T"/>
	<x path="Bool"/>
</f></remove>
		<indexOf public="1" set="method" line="178"><f a="x:?fromIndex">
	<c path="hl.types.ArrayObj.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></indexOf>
		<blit public="1" set="method" line="194" override="1"><f a="pos:src:srcpos:len">
	<x path="Int"/>
	<c path="hl.types.ArrayAccess"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blit>
		<lastIndexOf public="1" set="method" line="200"><f a="x:?fromIndex">
	<c path="hl.types.ArrayObj.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lastIndexOf>
		<copy public="1" set="method" line="215"><f a=""><c path="hl.types.ArrayObj"><c path="hl.types.ArrayObj.T"/></c></f></copy>
		<iterator public="1" set="method" line="221"><f a=""><t path="Iterator"><c path="hl.types.ArrayObj.T"/></t></f></iterator>
		<map public="1" params="S" set="method" line="227"><f a="f">
	<f a="">
		<c path="hl.types.ArrayObj.T"/>
		<c path="map.S"/>
	</f>
	<c path="hl.types.ArrayDyn"/>
</f></map>
		<filter public="1" set="method" line="235"><f a="f">
	<f a="">
		<c path="hl.types.ArrayObj.T"/>
		<x path="Bool"/>
	</f>
	<c path="hl.types.ArrayObj"><c path="hl.types.ArrayObj.T"/></c>
</f></filter>
		<resize public="1" set="method" line="244" override="1"><f a="len">
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
		<__expand set="method" line="256"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></__expand>
		<getDyn public="1" set="method" line="270" override="1"><f a="pos">
	<x path="Int"/>
	<d/>
</f></getDyn>
		<setDyn public="1" set="method" line="277" override="1"><f a="pos:v">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></setDyn>
		<pushDyn public="1" set="method" line="284" override="1"><f a="v">
	<d/>
	<x path="Int"/>
</f></pushDyn>
		<popDyn public="1" set="method" line="285" override="1"><f a=""><x path="Null"><d/></x></f></popDyn>
		<shiftDyn public="1" set="method" line="286" override="1"><f a=""><x path="Null"><d/></x></f></shiftDyn>
		<unshiftDyn public="1" set="method" line="287" override="1"><f a="v">
	<d/>
	<x path="Void"/>
</f></unshiftDyn>
		<insertDyn public="1" set="method" line="288" override="1"><f a="pos:v">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></insertDyn>
		<removeDyn public="1" set="method" line="289" override="1"><f a="v">
	<d/>
	<x path="Bool"/>
</f></removeDyn>
		<sortDyn public="1" set="method" line="290" override="1"><f a="f">
	<f a=":">
		<d/>
		<d/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></sortDyn>
		<new public="1" set="method" line="29"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="hl.types.BytesMapData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/types/BytesMap.hx" module="hl.types.BytesMap"><c path="hl.Abstract"><c path="Shl_bytes_map"/></c></typedef>
	<abstract path="hl.types.BytesMap" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/types/BytesMap.hx">
		<this><t path="hl.types.BytesMapData"/></this>
		<impl><class path="hl.types._BytesMap.BytesMap_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/types/BytesMap.hx" private="1" module="hl.types.BytesMap">
	<_new public="1" get="inline" set="null" line="28" static="1">
		<f a=""><x path="hl.types.BytesMap"/></f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<alloc set="method" line="32" static="1">
		<f a=""><t path="hl.types.BytesMapData"/></f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"hballoc"</e>
</m></meta>
	</alloc>
	<set public="1" set="method" line="37" static="1">
		<f a="this:key:value">
			<t path="hl.types.BytesMapData"/>
			<x path="hl.Bytes"/>
			<d/>
			<x path="Void"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"hbset"</e>
			</m>
		</meta>
	</set>
	<exists public="1" set="method" line="41" static="1">
		<f a="this:key">
			<t path="hl.types.BytesMapData"/>
			<x path="hl.Bytes"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"hbexists"</e>
			</m>
		</meta>
	</exists>
	<get public="1" set="method" line="46" static="1">
		<f a="this:key">
			<t path="hl.types.BytesMapData"/>
			<x path="hl.Bytes"/>
			<d/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"hbget"</e>
			</m>
		</meta>
	</get>
	<remove public="1" set="method" line="51" static="1">
		<f a="this:key">
			<t path="hl.types.BytesMapData"/>
			<x path="hl.Bytes"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"hbremove"</e>
			</m>
		</meta>
	</remove>
	<keysArray public="1" set="method" line="56" static="1">
		<f a="this">
			<t path="hl.types.BytesMapData"/>
			<x path="hl.NativeArray"><x path="hl.Bytes"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"hbkeys"</e>
			</m>
		</meta>
	</keysArray>
	<valuesArray public="1" set="method" line="61" static="1">
		<f a="this">
			<t path="hl.types.BytesMapData"/>
			<x path="hl.NativeArray"><d/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"hbvalues"</e>
			</m>
		</meta>
	</valuesArray>
	<iterator public="1" get="inline" set="null" line="65" static="1">
		<f a="this">
			<t path="hl.types.BytesMapData"/>
			<c path="hl.NativeArrayIterator_Dynamic"/>
		</f>
		<meta><m n=":impl"/></meta>
	</iterator>
</class></impl>
	</abstract>
	<typedef path="hl.types.IntMapData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/types/IntMap.hx" module="hl.types.IntMap"><c path="hl.Abstract"><c path="Shl_int_map"/></c></typedef>
	<abstract path="hl.types.IntMap" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/types/IntMap.hx">
		<this><t path="hl.types.IntMapData"/></this>
		<impl><class path="hl.types._IntMap.IntMap_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/types/IntMap.hx" private="1" module="hl.types.IntMap">
	<_new public="1" get="inline" set="null" line="28" static="1">
		<f a=""><x path="hl.types.IntMap"/></f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<alloc set="method" line="32" static="1">
		<f a=""><t path="hl.types.IntMapData"/></f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"hialloc"</e>
</m></meta>
	</alloc>
	<set public="1" set="method" line="37" static="1">
		<f a="this:key:value">
			<t path="hl.types.IntMapData"/>
			<x path="Int"/>
			<d/>
			<x path="Void"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"hiset"</e>
			</m>
		</meta>
	</set>
	<exists public="1" set="method" line="41" static="1">
		<f a="this:key">
			<t path="hl.types.IntMapData"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"hiexists"</e>
			</m>
		</meta>
	</exists>
	<get public="1" set="method" line="46" static="1">
		<f a="this:key">
			<t path="hl.types.IntMapData"/>
			<x path="Int"/>
			<d/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"higet"</e>
			</m>
		</meta>
	</get>
	<remove public="1" set="method" line="51" static="1">
		<f a="this:key">
			<t path="hl.types.IntMapData"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"hiremove"</e>
			</m>
		</meta>
	</remove>
	<keysArray public="1" set="method" line="56" static="1">
		<f a="this">
			<t path="hl.types.IntMapData"/>
			<x path="hl.NativeArray"><x path="Int"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"hikeys"</e>
			</m>
		</meta>
	</keysArray>
	<valuesArray public="1" set="method" line="61" static="1">
		<f a="this">
			<t path="hl.types.IntMapData"/>
			<x path="hl.NativeArray"><d/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"hivalues"</e>
			</m>
		</meta>
	</valuesArray>
	<iterator public="1" get="inline" set="null" line="65" static="1">
		<f a="this">
			<t path="hl.types.IntMapData"/>
			<c path="hl.NativeArrayIterator_Dynamic"/>
		</f>
		<meta><m n=":impl"/></meta>
	</iterator>
</class></impl>
	</abstract>
	<class path="hl.types._IntMap.IntMap_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/types/IntMap.hx" private="1" module="hl.types.IntMap">
		<_new public="1" get="inline" set="null" line="28" static="1">
			<f a=""><x path="hl.types.IntMap"/></f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<alloc set="method" line="32" static="1">
			<f a=""><t path="hl.types.IntMapData"/></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"hialloc"</e>
</m></meta>
		</alloc>
		<set public="1" set="method" line="37" static="1">
			<f a="this:key:value">
				<t path="hl.types.IntMapData"/>
				<x path="Int"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"hiset"</e>
				</m>
			</meta>
		</set>
		<exists public="1" set="method" line="41" static="1">
			<f a="this:key">
				<t path="hl.types.IntMapData"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"hiexists"</e>
				</m>
			</meta>
		</exists>
		<get public="1" set="method" line="46" static="1">
			<f a="this:key">
				<t path="hl.types.IntMapData"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"higet"</e>
				</m>
			</meta>
		</get>
		<remove public="1" set="method" line="51" static="1">
			<f a="this:key">
				<t path="hl.types.IntMapData"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"hiremove"</e>
				</m>
			</meta>
		</remove>
		<keysArray public="1" set="method" line="56" static="1">
			<f a="this">
				<t path="hl.types.IntMapData"/>
				<x path="hl.NativeArray"><x path="Int"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"hikeys"</e>
				</m>
			</meta>
		</keysArray>
		<valuesArray public="1" set="method" line="61" static="1">
			<f a="this">
				<t path="hl.types.IntMapData"/>
				<x path="hl.NativeArray"><d/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"hivalues"</e>
				</m>
			</meta>
		</valuesArray>
		<iterator public="1" get="inline" set="null" line="65" static="1">
			<f a="this">
				<t path="hl.types.IntMapData"/>
				<c path="hl.NativeArrayIterator_Dynamic"/>
			</f>
			<meta><m n=":impl"/></meta>
		</iterator>
	</class>
	<typedef path="hl.types.ObjectMapData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/types/ObjectMap.hx" module="hl.types.ObjectMap"><c path="hl.Abstract"><c path="Shl_obj_map"/></c></typedef>
	<abstract path="hl.types.ObjectMap" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/types/ObjectMap.hx">
		<this><t path="hl.types.ObjectMapData"/></this>
		<impl><class path="hl.types._ObjectMap.ObjectMap_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/types/ObjectMap.hx" private="1" module="hl.types.ObjectMap">
	<_new public="1" get="inline" set="null" line="28" static="1">
		<f a=""><x path="hl.types.ObjectMap"/></f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<alloc set="method" line="32" static="1">
		<f a=""><t path="hl.types.ObjectMapData"/></f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"hoalloc"</e>
</m></meta>
	</alloc>
	<set public="1" set="method" line="37" static="1">
		<f a="this:key:value">
			<t path="hl.types.ObjectMapData"/>
			<d/>
			<d/>
			<x path="Void"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"hoset"</e>
			</m>
		</meta>
	</set>
	<exists public="1" set="method" line="41" static="1">
		<f a="this:key">
			<t path="hl.types.ObjectMapData"/>
			<d/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"hoexists"</e>
			</m>
		</meta>
	</exists>
	<get public="1" set="method" line="46" static="1">
		<f a="this:key">
			<t path="hl.types.ObjectMapData"/>
			<d/>
			<d/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"hoget"</e>
			</m>
		</meta>
	</get>
	<remove public="1" set="method" line="51" static="1">
		<f a="this:key">
			<t path="hl.types.ObjectMapData"/>
			<d/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"horemove"</e>
			</m>
		</meta>
	</remove>
	<keysArray public="1" set="method" line="56" static="1">
		<f a="this">
			<t path="hl.types.ObjectMapData"/>
			<x path="hl.NativeArray"><d/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"hokeys"</e>
			</m>
		</meta>
	</keysArray>
	<valuesArray public="1" set="method" line="61" static="1">
		<f a="this">
			<t path="hl.types.ObjectMapData"/>
			<x path="hl.NativeArray"><d/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"hovalues"</e>
			</m>
		</meta>
	</valuesArray>
	<iterator public="1" get="inline" set="null" line="65" static="1">
		<f a="this">
			<t path="hl.types.ObjectMapData"/>
			<c path="hl.NativeArrayIterator_Dynamic"/>
		</f>
		<meta><m n=":impl"/></meta>
	</iterator>
</class></impl>
	</abstract>
	<class path="hl.types._ObjectMap.ObjectMap_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/types/ObjectMap.hx" private="1" module="hl.types.ObjectMap">
		<_new public="1" get="inline" set="null" line="28" static="1">
			<f a=""><x path="hl.types.ObjectMap"/></f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<alloc set="method" line="32" static="1">
			<f a=""><t path="hl.types.ObjectMapData"/></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"hoalloc"</e>
</m></meta>
		</alloc>
		<set public="1" set="method" line="37" static="1">
			<f a="this:key:value">
				<t path="hl.types.ObjectMapData"/>
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"hoset"</e>
				</m>
			</meta>
		</set>
		<exists public="1" set="method" line="41" static="1">
			<f a="this:key">
				<t path="hl.types.ObjectMapData"/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"hoexists"</e>
				</m>
			</meta>
		</exists>
		<get public="1" set="method" line="46" static="1">
			<f a="this:key">
				<t path="hl.types.ObjectMapData"/>
				<d/>
				<d/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"hoget"</e>
				</m>
			</meta>
		</get>
		<remove public="1" set="method" line="51" static="1">
			<f a="this:key">
				<t path="hl.types.ObjectMapData"/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"horemove"</e>
				</m>
			</meta>
		</remove>
		<keysArray public="1" set="method" line="56" static="1">
			<f a="this">
				<t path="hl.types.ObjectMapData"/>
				<x path="hl.NativeArray"><d/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"hokeys"</e>
				</m>
			</meta>
		</keysArray>
		<valuesArray public="1" set="method" line="61" static="1">
			<f a="this">
				<t path="hl.types.ObjectMapData"/>
				<x path="hl.NativeArray"><d/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"hovalues"</e>
				</m>
			</meta>
		</valuesArray>
		<iterator public="1" get="inline" set="null" line="65" static="1">
			<f a="this">
				<t path="hl.types.ObjectMapData"/>
				<c path="hl.NativeArrayIterator_Dynamic"/>
			</f>
			<meta><m n=":impl"/></meta>
		</iterator>
	</class>
	<class path="hl.uv.Handle" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/uv/Handle.hx">
		<close_handle set="method" line="16" static="1"><f a="h:callb">
	<t path="hl.uv.HandleData"/>
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></close_handle>
		<handle public="1"><t path="hl.uv.HandleData"/></handle>
		<close public="1" set="method" line="11"><f a="?callb">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></close>
		<new set="method" line="7"><f a="h">
	<t path="hl.uv.HandleData"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":hlNative"><e>"uv"</e></m></meta>
	</class>
	<typedef path="hl.uv.HandleData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/uv/HandleData.hx"><c path="hl.Abstract"><c path="Suv_handle"/></c></typedef>
	<abstract path="hl.uv.LoopRunMode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/uv/Loop.hx" module="hl.uv.Loop">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="hl.uv._Loop.LoopRunMode_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/uv/Loop.hx" private="1" module="hl.uv.Loop" extern="1">
	<Default public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
		<x path="hl.uv.LoopRunMode"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Default>
	<Once public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
		<x path="hl.uv.LoopRunMode"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Once>
	<NoWait public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
		<x path="hl.uv.LoopRunMode"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NoWait>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="hl.uv._Loop.LoopRunMode_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/uv/Loop.hx" private="1" module="hl.uv.Loop" extern="1">
		<Default public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
			<x path="hl.uv.LoopRunMode"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Default>
		<Once public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
			<x path="hl.uv.LoopRunMode"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Once>
		<NoWait public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
			<x path="hl.uv.LoopRunMode"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NoWait>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="hl.uv.Loop" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/uv/Loop.hx">
		<this><c path="hl.Abstract"><c path="Suv_loop"/></c></this>
		<impl><class path="hl.uv._Loop.Loop_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/uv/Loop.hx" private="1" module="hl.uv.Loop">
	<close public="1" set="method" line="11" static="1">
		<f a="this">
			<c path="hl.Abstract"><c path="Suv_loop"/></c>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"uv"</e>
				<e>"loop_close"</e>
			</m>
		</meta>
	</close>
	<run public="1" set="method" line="15" static="1">
		<f a="this:mode">
			<c path="hl.Abstract"><c path="Suv_loop"/></c>
			<x path="hl.uv.LoopRunMode"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"uv"</e>
				<e>"run"</e>
			</m>
		</meta>
	</run>
	<alive public="1" set="method" line="19" static="1">
		<f a="this">
			<c path="hl.Abstract"><c path="Suv_loop"/></c>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"uv"</e>
				<e>"loop_alive"</e>
			</m>
		</meta>
	</alive>
	<stop public="1" set="method" line="23" static="1">
		<f a="this">
			<c path="hl.Abstract"><c path="Suv_loop"/></c>
			<x path="Void"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"uv"</e>
				<e>"stop"</e>
			</m>
		</meta>
	</stop>
	<getDefault public="1" set="method" line="26" static="1"><f a=""><x path="hl.uv.Loop"/></f></getDefault>
	<default_loop set="method" line="39" static="1">
		<f a=""><x path="hl.uv.Loop"/></f>
		<meta><m n=":hlNative">
	<e>"uv"</e>
	<e>"default_loop"</e>
</m></meta>
	</default_loop>
	<loopEvent static="1"><c path="haxe.MainEvent"/></loopEvent>
</class></impl>
	</abstract>
	<class path="hl.uv._Loop.Loop_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/uv/Loop.hx" private="1" module="hl.uv.Loop">
		<close public="1" set="method" line="11" static="1">
			<f a="this">
				<c path="hl.Abstract"><c path="Suv_loop"/></c>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"uv"</e>
					<e>"loop_close"</e>
				</m>
			</meta>
		</close>
		<run public="1" set="method" line="15" static="1">
			<f a="this:mode">
				<c path="hl.Abstract"><c path="Suv_loop"/></c>
				<x path="hl.uv.LoopRunMode"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"uv"</e>
					<e>"run"</e>
				</m>
			</meta>
		</run>
		<alive public="1" set="method" line="19" static="1">
			<f a="this">
				<c path="hl.Abstract"><c path="Suv_loop"/></c>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"uv"</e>
					<e>"loop_alive"</e>
				</m>
			</meta>
		</alive>
		<stop public="1" set="method" line="23" static="1">
			<f a="this">
				<c path="hl.Abstract"><c path="Suv_loop"/></c>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"uv"</e>
					<e>"stop"</e>
				</m>
			</meta>
		</stop>
		<getDefault public="1" set="method" line="26" static="1"><f a=""><x path="hl.uv.Loop"/></f></getDefault>
		<default_loop set="method" line="39" static="1">
			<f a=""><x path="hl.uv.Loop"/></f>
			<meta><m n=":hlNative">
	<e>"uv"</e>
	<e>"default_loop"</e>
</m></meta>
		</default_loop>
		<loopEvent static="1"><c path="haxe.MainEvent"/></loopEvent>
	</class>
	<class path="hl.uv.Stream" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/uv/Stream.hx">
		<extends path="hl.uv.Handle"/>
		<stream_write set="method" line="30" static="1"><f a="handle:bytes:len:callb">
	<t path="hl.uv.HandleData"/>
	<x path="hl.Bytes"/>
	<x path="Int"/>
	<f a="">
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
</f></stream_write>
		<stream_read_start set="method" line="34" static="1"><f a="handle:callb">
	<t path="hl.uv.HandleData"/>
	<f a=":">
		<x path="hl.Bytes"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
</f></stream_read_start>
		<stream_read_stop set="method" line="38" static="1"><f a="handle">
	<t path="hl.uv.HandleData"/>
	<x path="Void"/>
</f></stream_read_stop>
		<stream_listen set="method" line="41" static="1"><f a="handle:n:callb">
	<t path="hl.uv.HandleData"/>
	<x path="Int"/>
	<f a=""><x path="Void"/></f>
	<x path="Bool"/>
</f></stream_listen>
		<write public="1" set="method" line="6">
			<f a="bytes:?onWrite:?pos:?len" v="::0:-1">
				<c path="haxe.io.Bytes"/>
				<f a="">
					<x path="Bool"/>
					<x path="Void"/>
				</f>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ len : -1, pos : 0 }</e></m></meta>
		</write>
		<readStartRaw public="1" set="method" line="12"><f a="onData">
	<f a=":">
		<x path="hl.Bytes"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></readStartRaw>
		<readStart public="1" set="method" line="16"><f a="onData">
	<f a="">
		<c path="haxe.io.Bytes"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></readStart>
		<readStop public="1" set="method" line="20"><f a=""><x path="Void"/></f></readStop>
		<listen public="1" set="method" line="24"><f a="n:onConnect">
	<x path="Int"/>
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></listen>
		<new set="method" line="4"><f a="h">
	<t path="hl.uv.HandleData"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":hlNative"><e>"uv"</e></m></meta>
	</class>
	<class path="hl.uv.Tcp" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/uv/Tcp.hx">
		<extends path="hl.uv.Stream"/>
		<tcp_init_wrap set="method" line="31" static="1"><f a="loop">
	<x path="hl.uv.Loop"/>
	<t path="hl.uv.HandleData"/>
</f></tcp_init_wrap>
		<tcp_connect_wrap set="method" line="35" static="1"><f a="h:host:port:onConnected">
	<t path="hl.uv.HandleData"/>
	<x path="Int"/>
	<x path="Int"/>
	<f a="">
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<t path="hl.uv.HandleData"/>
</f></tcp_connect_wrap>
		<tcp_bind_wrap set="method" line="39" static="1"><f a="h:host:port">
	<t path="hl.uv.HandleData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></tcp_bind_wrap>
		<tcp_accept_wrap set="method" line="43" static="1"><f a="h">
	<t path="hl.uv.HandleData"/>
	<t path="hl.uv.HandleData"/>
</f></tcp_accept_wrap>
		<tcp_nodelay_wrap set="method" line="47" static="1"><f a="h:b">
	<t path="hl.uv.HandleData"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></tcp_nodelay_wrap>
		<connect public="1" set="method" line="11"><f a="host:port:onConnected">
	<c path="sys.net.Host"/>
	<x path="Int"/>
	<f a="">
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></connect>
		<bind public="1" set="method" line="16"><f a="host:port">
	<c path="sys.net.Host"/>
	<x path="Int"/>
	<x path="Void"/>
</f></bind>
		<accept public="1" set="method" line="21"><f a=""><c path="hl.uv.Stream"/></f></accept>
		<noDelay public="1" set="method" line="27"><f a="b">
	<x path="Bool"/>
	<x path="Void"/>
</f></noDelay>
		<new public="1" set="method" line="6"><f a="?loop">
	<x path="hl.uv.Loop"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":hlNative"><e>"uv"</e></m></meta>
	</class>
	<abstract path="hl.vm.Deque" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/hl/vm/Deque.hx">
		<this><c path="hl.Abstract"><c path="Shl_deque"/></c></this>
		<haxe_doc>A message queue for multithread access.</haxe_doc>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"deque_"</e>
</m></meta>
		<impl><class path="hl.vm._Deque.Deque_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/vm/Deque.hx" private="1" module="hl.vm.Deque">
	<_new public="1" set="method" line="33" static="1">
		<f a=""><x path="hl.vm.Deque"><c path="hl.vm.Deque.T"/></x></f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Create a message queue for multithread access.</haxe_doc>
	</_new>
	<add public="1" set="method" line="40" static="1">
		<f a="this:i">
			<c path="hl.Abstract"><c path="Shl_deque"/></c>
			<c path="hl.vm.Deque.T"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Add a message at the end of the queue.</haxe_doc>
	</add>
	<push public="1" set="method" line="46" static="1">
		<f a="this:i">
			<c path="hl.Abstract"><c path="Shl_deque"/></c>
			<c path="hl.vm.Deque.T"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Add a message at the head of the queue.</haxe_doc>
	</push>
	<pop public="1" set="method" line="53" static="1">
		<f a="this:block">
			<c path="hl.Abstract"><c path="Shl_deque"/></c>
			<x path="Bool"/>
			<x path="Null"><c path="hl.vm.Deque.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Pop a message from the queue head. Either block until a message
		is available or return immediately with `null`.</haxe_doc>
	</pop>
	<alloc set="method" line="57" static="1"><f a=""><c path="hl.Abstract"><c path="Shl_deque"/></c></f></alloc>
	<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"deque_"</e>
</m></meta>
</class></impl>
	</abstract>
	<class path="hl.vm._Deque.Deque_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/vm/Deque.hx" private="1" module="hl.vm.Deque">
		<_new public="1" set="method" line="33" static="1">
			<f a=""><x path="hl.vm.Deque"><c path="hl.vm.Deque.T"/></x></f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Create a message queue for multithread access.</haxe_doc>
		</_new>
		<add public="1" set="method" line="40" static="1">
			<f a="this:i">
				<c path="hl.Abstract"><c path="Shl_deque"/></c>
				<c path="hl.vm.Deque.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Add a message at the end of the queue.</haxe_doc>
		</add>
		<push public="1" set="method" line="46" static="1">
			<f a="this:i">
				<c path="hl.Abstract"><c path="Shl_deque"/></c>
				<c path="hl.vm.Deque.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Add a message at the head of the queue.</haxe_doc>
		</push>
		<pop public="1" set="method" line="53" static="1">
			<f a="this:block">
				<c path="hl.Abstract"><c path="Shl_deque"/></c>
				<x path="Bool"/>
				<x path="Null"><c path="hl.vm.Deque.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Pop a message from the queue head. Either block until a message
		is available or return immediately with `null`.</haxe_doc>
		</pop>
		<alloc set="method" line="57" static="1"><f a=""><c path="hl.Abstract"><c path="Shl_deque"/></c></f></alloc>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"deque_"</e>
</m></meta>
	</class>
	<abstract path="hl.vm.Mutex" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/vm/Mutex.hx">
		<this><c path="hl.Abstract"><c path="Shl_mutex"/></c></this>
		<haxe_doc>Creates a mutex, which can be used to acquire a temporary lock 
	to access some ressource. The main difference with a lock is 
	that a mutex must always be released by the owner thread.</haxe_doc>
		<impl><class path="hl.vm._Mutex.Mutex_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/vm/Mutex.hx" private="1" module="hl.vm.Mutex">
	<_new public="1" set="method" line="34" static="1">
		<f a=""><x path="hl.vm.Mutex"/></f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Creates a mutex.</haxe_doc>
	</_new>
	<acquire public="1" set="method" line="43" static="1">
		<f a="this">
			<c path="hl.Abstract"><c path="Shl_mutex"/></c>
			<x path="Void"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"mutex_acquire"</e>
			</m>
		</meta>
		<haxe_doc>The current thread acquire the mutex or wait if not available.
		The same thread can acquire several times the same mutex but 
		must release it as many times it has been acquired.</haxe_doc>
	</acquire>
	<tryAcquire public="1" set="method" line="50" static="1">
		<f a="this">
			<c path="hl.Abstract"><c path="Shl_mutex"/></c>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"mutex_try_acquire"</e>
			</m>
		</meta>
		<haxe_doc>Try to acquire the mutex, returns true if acquire or false 
		if it's already locked by another thread.</haxe_doc>
	</tryAcquire>
	<release public="1" set="method" line="59" static="1">
		<f a="this">
			<c path="hl.Abstract"><c path="Shl_mutex"/></c>
			<x path="Void"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":hlNative">
				<e>"std"</e>
				<e>"mutex_release"</e>
			</m>
		</meta>
		<haxe_doc>Release a mutex that has been acquired by the current thread. 
		The behavior is undefined if the current thread does not own
		the mutex.</haxe_doc>
	</release>
	<alloc public="1" set="method" line="62" static="1">
		<f a="b">
			<x path="Bool"/>
			<c path="hl.Abstract"><c path="Shl_mutex"/></c>
		</f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"mutex_alloc"</e>
</m></meta>
	</alloc>
</class></impl>
	</abstract>
	<class path="hl.vm._Mutex.Mutex_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/vm/Mutex.hx" private="1" module="hl.vm.Mutex">
		<_new public="1" set="method" line="34" static="1">
			<f a=""><x path="hl.vm.Mutex"/></f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Creates a mutex.</haxe_doc>
		</_new>
		<acquire public="1" set="method" line="43" static="1">
			<f a="this">
				<c path="hl.Abstract"><c path="Shl_mutex"/></c>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"mutex_acquire"</e>
				</m>
			</meta>
			<haxe_doc>The current thread acquire the mutex or wait if not available.
		The same thread can acquire several times the same mutex but 
		must release it as many times it has been acquired.</haxe_doc>
		</acquire>
		<tryAcquire public="1" set="method" line="50" static="1">
			<f a="this">
				<c path="hl.Abstract"><c path="Shl_mutex"/></c>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"mutex_try_acquire"</e>
				</m>
			</meta>
			<haxe_doc>Try to acquire the mutex, returns true if acquire or false 
		if it's already locked by another thread.</haxe_doc>
		</tryAcquire>
		<release public="1" set="method" line="59" static="1">
			<f a="this">
				<c path="hl.Abstract"><c path="Shl_mutex"/></c>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":hlNative">
					<e>"std"</e>
					<e>"mutex_release"</e>
				</m>
			</meta>
			<haxe_doc>Release a mutex that has been acquired by the current thread. 
		The behavior is undefined if the current thread does not own
		the mutex.</haxe_doc>
		</release>
		<alloc public="1" set="method" line="62" static="1">
			<f a="b">
				<x path="Bool"/>
				<c path="hl.Abstract"><c path="Shl_mutex"/></c>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"mutex_alloc"</e>
</m></meta>
		</alloc>
	</class>
	<typedef path="hl.vm.ThreadHandle" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/vm/Thread.hx" module="hl.vm.Thread"><c path="hl.Abstract"><c path="Shl_thread"/></c></typedef>
	<abstract path="hl.vm.Thread" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/vm/Thread.hx">
		<this><t path="hl.vm.ThreadHandle"/></this>
		<impl><class path="hl.vm._Thread.Thread_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/vm/Thread.hx" private="1" module="hl.vm.Thread">
	<sendMessage public="1" set="method" line="28" static="1">
		<f a="this:msg">
			<t path="hl.vm.ThreadHandle"/>
			<d/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sendMessage>
	<readMessage public="1" set="method" line="32" static="1">
		<f a="?block" v="true">
			<x path="Bool"/>
			<d/>
		</f>
		<meta><m n=":value"><e>{ block : true }</e></m></meta>
	</readMessage>
	<queue_mutex expr="null" line="36" static="1">
		<x path="hl.vm.Mutex"/>
		<meta><m n=":value"><e>null</e></m></meta>
	</queue_mutex>
	<threads_queues expr="null" line="37" static="1">
		<c path="Array"><a>
	<t><t path="hl.vm.ThreadHandle"/></t>
	<q><x path="hl.vm.Deque"><d/></x></q>
</a></c>
		<meta><m n=":value"><e>null</e></m></meta>
	</threads_queues>
	<getQueue set="method" line="38" static="1"><f a="t">
	<t path="hl.vm.ThreadHandle"/>
	<x path="hl.vm.Deque"><d/></x>
</f></getQueue>
	<create public="1" set="method" line="59" static="1">
		<f a="callb">
			<f a=""><x path="Void"/></f>
			<x path="hl.vm.Thread"/>
		</f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"thread_create"</e>
</m></meta>
	</create>
	<current public="1" set="method" line="64" static="1">
		<f a=""><x path="hl.vm.Thread"/></f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"thread_current"</e>
</m></meta>
	</current>
</class></impl>
	</abstract>
	<class path="hl.vm._Thread.Thread_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/vm/Thread.hx" private="1" module="hl.vm.Thread">
		<sendMessage public="1" set="method" line="28" static="1">
			<f a="this:msg">
				<t path="hl.vm.ThreadHandle"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sendMessage>
		<readMessage public="1" set="method" line="32" static="1">
			<f a="?block" v="true">
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":value"><e>{ block : true }</e></m></meta>
		</readMessage>
		<queue_mutex expr="null" line="36" static="1">
			<x path="hl.vm.Mutex"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</queue_mutex>
		<threads_queues expr="null" line="37" static="1">
			<c path="Array"><a>
	<t><t path="hl.vm.ThreadHandle"/></t>
	<q><x path="hl.vm.Deque"><d/></x></q>
</a></c>
			<meta><m n=":value"><e>null</e></m></meta>
		</threads_queues>
		<getQueue set="method" line="38" static="1"><f a="t">
	<t path="hl.vm.ThreadHandle"/>
	<x path="hl.vm.Deque"><d/></x>
</f></getQueue>
		<create public="1" set="method" line="59" static="1">
			<f a="callb">
				<f a=""><x path="Void"/></f>
				<x path="hl.vm.Thread"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"thread_create"</e>
</m></meta>
		</create>
		<current public="1" set="method" line="64" static="1">
			<f a=""><x path="hl.vm.Thread"/></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"thread_current"</e>
</m></meta>
		</current>
	</class>
	<abstract path="hl.vm.Tls" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/hl/vm/Tls.hx">
		<this><c path="hl.Abstract"><c path="Shl_tls"/></c></this>
		<haxe_doc>Creates thread local storage.
	Warning : ATM Tls does not protect the value from being GC'ed. Keep the value reachable to avoid crashes.</haxe_doc>
		<meta><m n=":hlNative"><e>"std"</e></m></meta>
		<impl><class path="hl.vm._Tls.Tls_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/vm/Tls.hx" private="1" module="hl.vm.Tls">
	<value public="1" get="accessor" set="accessor" static="1">
		<c path="hl.vm.Tls.T"/>
		<meta><m n=":impl"/></meta>
	</value>
	<_new public="1" set="method" line="39" static="1">
		<f a=""><x path="hl.vm.Tls"><c path="hl.vm.Tls.T"/></x></f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Creates thread local storage. This is placeholder that can store
		a value that will be different depending on the local thread. 
		Set the tls value to `null` before exiting the thread 
		or the memory will never be collected.</haxe_doc>
	</_new>
	<get_value set="method" line="46" static="1">
		<f a="this">
			<c path="hl.Abstract"><c path="Shl_tls"/></c>
			<c path="hl.vm.Tls.T"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the value set by tls_set for the local thread.</haxe_doc>
	</get_value>
	<set_value set="method" line="53" static="1">
		<f a="this:v">
			<c path="hl.Abstract"><c path="Shl_tls"/></c>
			<c path="hl.vm.Tls.T"/>
			<c path="hl.vm.Tls.T"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Set the value of the TLS for the local thread.</haxe_doc>
	</set_value>
	<tls_alloc set="method" line="58" static="1"><f a="gcValue">
	<x path="Bool"/>
	<c path="hl.Abstract"><c path="Shl_tls"/></c>
</f></tls_alloc>
	<tls_get set="method" line="59" static="1"><f a="t">
	<c path="hl.Abstract"><c path="Shl_tls"/></c>
	<d/>
</f></tls_get>
	<tls_set set="method" line="60" static="1"><f a="t:v">
	<c path="hl.Abstract"><c path="Shl_tls"/></c>
	<d/>
	<x path="Void"/>
</f></tls_set>
	<meta><m n=":hlNative"><e>"std"</e></m></meta>
</class></impl>
	</abstract>
	<class path="hl.vm._Tls.Tls_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/vm/Tls.hx" private="1" module="hl.vm.Tls">
		<value public="1" get="accessor" set="accessor" static="1">
			<c path="hl.vm.Tls.T"/>
			<meta><m n=":impl"/></meta>
		</value>
		<_new public="1" set="method" line="39" static="1">
			<f a=""><x path="hl.vm.Tls"><c path="hl.vm.Tls.T"/></x></f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Creates thread local storage. This is placeholder that can store
		a value that will be different depending on the local thread. 
		Set the tls value to `null` before exiting the thread 
		or the memory will never be collected.</haxe_doc>
		</_new>
		<get_value set="method" line="46" static="1">
			<f a="this">
				<c path="hl.Abstract"><c path="Shl_tls"/></c>
				<c path="hl.vm.Tls.T"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the value set by tls_set for the local thread.</haxe_doc>
		</get_value>
		<set_value set="method" line="53" static="1">
			<f a="this:v">
				<c path="hl.Abstract"><c path="Shl_tls"/></c>
				<c path="hl.vm.Tls.T"/>
				<c path="hl.vm.Tls.T"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Set the value of the TLS for the local thread.</haxe_doc>
		</set_value>
		<tls_alloc set="method" line="58" static="1"><f a="gcValue">
	<x path="Bool"/>
	<c path="hl.Abstract"><c path="Shl_tls"/></c>
</f></tls_alloc>
		<tls_get set="method" line="59" static="1"><f a="t">
	<c path="hl.Abstract"><c path="Shl_tls"/></c>
	<d/>
</f></tls_get>
		<tls_set set="method" line="60" static="1"><f a="t:v">
	<c path="hl.Abstract"><c path="Shl_tls"/></c>
	<d/>
	<x path="Void"/>
</f></tls_set>
		<meta><m n=":hlNative"><e>"std"</e></m></meta>
	</class>
	<typedef path="sys.FileStat" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/FileStat.hx">
		<a>
			<uid>
				<x path="Int"/>
				<haxe_doc>The user id for the file's owner.</haxe_doc>
			</uid>
			<size>
				<x path="Int"/>
				<haxe_doc>The size of the file, in bytes.</haxe_doc>
			</size>
			<rdev>
				<x path="Int"/>
				<haxe_doc>The device type on which stat resides (special files only).</haxe_doc>
			</rdev>
			<nlink>
				<x path="Int"/>
				<haxe_doc>The number of hard links to stat.</haxe_doc>
			</nlink>
			<mtime>
				<c path="Date"/>
				<haxe_doc>The last modification time for the file.</haxe_doc>
			</mtime>
			<mode>
				<x path="Int"/>
				<haxe_doc>The permission bits of stat. The meaning of the bits is platform dependent.</haxe_doc>
			</mode>
			<ino>
				<x path="Int"/>
				<haxe_doc>The inode number for stat.</haxe_doc>
			</ino>
			<gid>
				<x path="Int"/>
				<haxe_doc>The user group id for the file's owner.</haxe_doc>
			</gid>
			<dev>
				<x path="Int"/>
				<haxe_doc>The device on which stat resides.</haxe_doc>
			</dev>
			<ctime>
				<c path="Date"/>
				<haxe_doc>The creation time for the file (not all file systems support this).</haxe_doc>
			</ctime>
			<atime>
				<c path="Date"/>
				<haxe_doc>The last access time for the file (when enabled by the file system).</haxe_doc>
			</atime>
		</a>
		<haxe_doc>File information, as given by `sys.FileSystem.stat`.</haxe_doc>
	</typedef>
	<class path="sys.Http" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/Http.hx">
		<extends path="haxe.http.HttpBase"/>
		<PROXY public="1" expr="null" line="35" static="1">
			<a>
				<port><x path="Int"/></port>
				<host><c path="String"/></host>
				<auth><a>
	<user><c path="String"/></user>
	<pass><c path="String"/></pass>
</a></auth>
			</a>
			<meta><m n=":value"><e>null</e></m></meta>
		</PROXY>
		<requestUrl public="1" set="method" line="447" static="1">
			<f a="url">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Makes a synchronous request to `url`.

		This creates a new Http instance and makes a GET request by calling its
		`request(false)` method.

		If `url` is null, the result is unspecified.</haxe_doc>
		</requestUrl>
		<noShutdown public="1"><x path="Bool"/></noShutdown>
		<cnxTimeout public="1"><x path="Float"/></cnxTimeout>
		<responseHeaders public="1"><t path="Map">
	<c path="String"/>
	<c path="String"/>
</t></responseHeaders>
		<chunk_size><x path="Null"><x path="Int"/></x></chunk_size>
		<chunk_buf><c path="haxe.io.Bytes"/></chunk_buf>
		<file><a>
	<size><x path="Int"/></size>
	<param><c path="String"/></param>
	<mimeType><c path="String"/></mimeType>
	<io><c path="haxe.io.Input"/></io>
	<filename><c path="String"/></filename>
</a></file>
		<request public="1" set="method" line="45" override="1"><f a="?post">
	<x path="Bool"/>
	<x path="Void"/>
</f></request>
		<fileTransfert public="1" get="inline" set="null" line="71">
			<f a="argname:filename:file:size:?mimeType" v="::::&quot;application/octet-stream&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ mimeType : "application/octet-stream" }</e></m>
				<m n=":noCompletion"/>
				<m n=":deprecated"><e>"Use fileTransfer instead"</e></m>
			</meta>
		</fileTransfert>
		<fileTransfer public="1" set="method" line="75">
			<f a="argname:filename:file:size:?mimeType" v="::::&quot;application/octet-stream&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ mimeType : "application/octet-stream" }</e></m></meta>
		</fileTransfer>
		<customRequest public="1" set="method" line="79"><f a="post:api:?sock:?method">
	<x path="Bool"/>
	<c path="haxe.io.Output"/>
	<c path="sys.net.Socket"/>
	<c path="String"/>
	<x path="Void"/>
</f></customRequest>
		<readHttpResponse set="method" line="240"><f a="api:sock">
	<c path="haxe.io.Output"/>
	<c path="sys.net.Socket"/>
	<x path="Void"/>
</f></readHttpResponse>
		<readChunk set="method" line="382"><f a="chunk_re:api:buf:len">
	<c path="EReg"/>
	<c path="haxe.io.Output"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></readChunk>
		<new public="1" set="method" line="37"><f a="url">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.db.Connection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/db/Connection.hx" interface="1">
		<request public="1" set="method"><f a="s">
	<c path="String"/>
	<c path="sys.db.ResultSet"/>
</f></request>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<escape public="1" set="method"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></escape>
		<quote public="1" set="method"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></quote>
		<addValue public="1" set="method"><f a="s:v">
	<c path="StringBuf"/>
	<d/>
	<x path="Void"/>
</f></addValue>
		<lastInsertId public="1" set="method"><f a=""><x path="Int"/></f></lastInsertId>
		<dbName public="1" set="method"><f a=""><c path="String"/></f></dbName>
		<startTransaction public="1" set="method"><f a=""><x path="Void"/></f></startTransaction>
		<commit public="1" set="method"><f a=""><x path="Void"/></f></commit>
		<rollback public="1" set="method"><f a=""><x path="Void"/></f></rollback>
	</class>
	<class path="sys.db._Mysql.MysqlParams" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/db/Mysql.hx" private="1" module="sys.db.Mysql">
		<host public="1"><x path="hl.Bytes"/></host>
		<user public="1"><x path="hl.Bytes"/></user>
		<pass public="1"><x path="hl.Bytes"/></pass>
		<socket public="1"><x path="hl.Bytes"/></socket>
		<port public="1"><x path="Int"/></port>
		<new public="1" set="method" line="30"><f a=""><x path="Void"/></f></new>
	</class>
	<typedef path="sys.db._Mysql.ConnectionHandler" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/db/Mysql.hx" private="1" module="sys.db.Mysql"><c path="hl.Abstract"><c path="Smysql_cnx"/></c></typedef>
	<typedef path="sys.db._Mysql.ResultHandler" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/db/Mysql.hx" private="1" module="sys.db.Mysql"><c path="hl.Abstract"><c path="Smysql_result"/></c></typedef>
	<class path="sys.db.ResultSet" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/db/ResultSet.hx" interface="1">
		<get_nfields public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</get_nfields>
		<get_length public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</get_length>
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<nfields public="1" get="accessor" set="null"><x path="Int"/></nfields>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method"><f a=""><d/></f></next>
		<results public="1" set="method"><f a=""><t path="List"><d/></t></f></results>
		<getResult public="1" set="method"><f a="n">
	<x path="Int"/>
	<c path="String"/>
</f></getResult>
		<getIntResult public="1" set="method"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getIntResult>
		<getFloatResult public="1" set="method"><f a="n">
	<x path="Int"/>
	<x path="Float"/>
</f></getFloatResult>
		<getFieldsNames public="1" set="method"><f a=""><x path="Null"><c path="Array"><c path="String"/></c></x></f></getFieldsNames>
	</class>
	<class path="sys.db._Mysql.MysqlResultSet" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/db/Mysql.hx" private="1" module="sys.db.Mysql">
		<implements path="sys.db.ResultSet"/>
		<result_get_length set="method" line="99" static="1"><f a="r">
	<t path="sys.db._Mysql.ResultHandler"/>
	<x path="Int"/>
</f></result_get_length>
		<result_get_nfields set="method" line="100" static="1"><f a="r">
	<t path="sys.db._Mysql.ResultHandler"/>
	<x path="Int"/>
</f></result_get_nfields>
		<result_next set="method" line="101" static="1"><f a="r">
	<t path="sys.db._Mysql.ResultHandler"/>
	<d/>
</f></result_next>
		<result_get set="method" line="102" static="1"><f a="r:n">
	<t path="sys.db._Mysql.ResultHandler"/>
	<x path="Int"/>
	<x path="hl.Bytes"/>
</f></result_get>
		<result_get_int set="method" line="103" static="1"><f a="r:n">
	<t path="sys.db._Mysql.ResultHandler"/>
	<x path="Int"/>
	<x path="Int"/>
</f></result_get_int>
		<result_get_float set="method" line="104" static="1"><f a="r:n">
	<t path="sys.db._Mysql.ResultHandler"/>
	<x path="Int"/>
	<x path="Float"/>
</f></result_get_float>
		<result_fields_names set="method" line="105" static="1"><f a="r">
	<t path="sys.db._Mysql.ResultHandler"/>
	<x path="hl.NativeArray"><x path="hl.Bytes"/></x>
</f></result_fields_names>
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<nfields public="1" get="accessor" set="null"><x path="Int"/></nfields>
		<r><t path="sys.db._Mysql.ResultHandler"/></r>
		<cache><d/></cache>
		<get_length set="method" line="49"><f a=""><x path="Int"/></f></get_length>
		<get_nfields set="method" line="53"><f a=""><x path="Int"/></f></get_nfields>
		<hasNext public="1" set="method" line="57"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method" line="63"><f a=""><d/></f></next>
		<results public="1" set="method" line="73"><f a=""><t path="List"><d/></t></f></results>
		<getResult public="1" set="method" line="80"><f a="n">
	<x path="Int"/>
	<c path="String"/>
</f></getResult>
		<getIntResult public="1" set="method" line="86"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getIntResult>
		<getFloatResult public="1" set="method" line="90"><f a="n">
	<x path="Int"/>
	<x path="Float"/>
</f></getFloatResult>
		<getFieldsNames public="1" set="method" line="94"><f a=""><c path="Array"><c path="String"/></c></f></getFieldsNames>
		<new set="method" line="45"><f a="r">
	<t path="sys.db._Mysql.ResultHandler"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":hlNative"><e>"mysql"</e></m></meta>
	</class>
	<class path="sys.db._Mysql.MysqlConnection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/db/Mysql.hx" private="1" module="sys.db.Mysql">
		<implements path="sys.db.Connection"/>
		<close_wrap set="method" line="174" static="1"><f a="h">
	<t path="sys.db._Mysql.ConnectionHandler"/>
	<x path="Void"/>
</f></close_wrap>
		<connect_wrap set="method" line="175" static="1"><f a="p">
	<c path="sys.db._Mysql.MysqlParams"/>
	<t path="sys.db._Mysql.ConnectionHandler"/>
</f></connect_wrap>
		<select_db_wrap set="method" line="176" static="1"><f a="h:db">
	<t path="sys.db._Mysql.ConnectionHandler"/>
	<x path="hl.Bytes"/>
	<x path="Bool"/>
</f></select_db_wrap>
		<request_wrap set="method" line="178" static="1">
			<f a="h:rq:rqLen">
				<t path="sys.db._Mysql.ConnectionHandler"/>
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<t path="sys.db._Mysql.ResultHandler"/>
			</f>
			<meta><m n=":hlNative">
	<e>"mysql"</e>
	<e>"request"</e>
</m></meta>
		</request_wrap>
		<escape_wrap set="method" line="180" static="1">
			<f a="h:str">
				<t path="sys.db._Mysql.ConnectionHandler"/>
				<x path="hl.Bytes"/>
				<x path="hl.Bytes"/>
			</f>
			<meta><m n=":hlNative">
	<e>"mysql"</e>
	<e>"escape"</e>
</m></meta>
		</escape_wrap>
		<setConvFuns set="method" line="181" static="1"><f a="fstring:fbytes:fdate">
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></setConvFuns>
		<h><t path="sys.db._Mysql.ConnectionHandler"/></h>
		<close public="1" set="method" line="118"><f a=""><x path="Void"/></f></close>
		<request public="1" set="method" line="123"><f a="s">
	<c path="String"/>
	<c path="sys.db._Mysql.MysqlResultSet"/>
</f></request>
		<escape public="1" set="method" line="129"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></escape>
		<quote public="1" set="method" line="133"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></quote>
		<addValue public="1" set="method" line="137"><f a="s:v">
	<c path="StringBuf"/>
	<d/>
	<x path="Void"/>
</f></addValue>
		<lastInsertId public="1" set="method" line="154"><f a=""><x path="Int"/></f></lastInsertId>
		<dbName public="1" set="method" line="158"><f a=""><c path="String"/></f></dbName>
		<startTransaction public="1" set="method" line="162"><f a=""><x path="Void"/></f></startTransaction>
		<commit public="1" set="method" line="166"><f a=""><x path="Void"/></f></commit>
		<rollback public="1" set="method" line="170"><f a=""><x path="Void"/></f></rollback>
		<new set="method" line="114"><f a="h">
	<t path="sys.db._Mysql.ConnectionHandler"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":hlNative"><e>"mysql"</e></m></meta>
	</class>
	<class path="sys.db.Mysql" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/db/Mysql.hx">
		<INIT_DONE expr="false" line="187" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</INIT_DONE>
		<connect public="1" set="method" line="189" static="1"><f a="params">
	<a>
		<user><c path="String"/></user>
		<socket>
			<x path="Null"><c path="String"/></x>
			<meta><m n=":optional"/></meta>
		</socket>
		<port>
			<x path="Null"><x path="Int"/></x>
			<meta><m n=":optional"/></meta>
		</port>
		<pass><c path="String"/></pass>
		<host><c path="String"/></host>
		<database>
			<x path="Null"><c path="String"/></x>
			<meta><m n=":optional"/></meta>
		</database>
	</a>
	<c path="sys.db.Connection"/>
</f></connect>
	</class>
	<typedef path="sys.db._Sqlite.SqliteConnectionHandle" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/db/Sqlite.hx" private="1" module="sys.db.Sqlite"><c path="hl.Abstract"><c path="Ssqlite_database"/></c></typedef>
	<typedef path="sys.db._Sqlite.SqliteResultHandle" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/db/Sqlite.hx" private="1" module="sys.db.Sqlite"><c path="hl.Abstract"><c path="Ssqlite_result"/></c></typedef>
	<class path="sys.db._Sqlite.SqliteLib" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/db/Sqlite.hx" private="1" module="sys.db.Sqlite">
		<connect public="1" set="method" line="31" static="1"><f a="path">
	<x path="hl.Bytes"/>
	<t path="sys.db._Sqlite.SqliteConnectionHandle"/>
</f></connect>
		<close public="1" set="method" line="32" static="1"><f a="c">
	<t path="sys.db._Sqlite.SqliteConnectionHandle"/>
	<x path="Void"/>
</f></close>
		<request public="1" set="method" line="33" static="1"><f a="c:sql">
	<t path="sys.db._Sqlite.SqliteConnectionHandle"/>
	<x path="hl.Bytes"/>
	<t path="sys.db._Sqlite.SqliteResultHandle"/>
</f></request>
		<last_id public="1" set="method" line="34" static="1"><f a="c">
	<t path="sys.db._Sqlite.SqliteConnectionHandle"/>
	<x path="Int"/>
</f></last_id>
		<result_next public="1" set="method" line="36" static="1"><f a="c">
	<t path="sys.db._Sqlite.SqliteResultHandle"/>
	<x path="hl.NativeArray"><d/></x>
</f></result_next>
		<result_get public="1" set="method" line="38" static="1"><f a="c:n">
	<t path="sys.db._Sqlite.SqliteResultHandle"/>
	<x path="Int"/>
	<x path="Null"><x path="hl.Bytes"/></x>
</f></result_get>
		<result_get_int public="1" set="method" line="39" static="1"><f a="c:n">
	<t path="sys.db._Sqlite.SqliteResultHandle"/>
	<x path="Int"/>
	<x path="Null"><x path="Int"/></x>
</f></result_get_int>
		<result_get_float public="1" set="method" line="40" static="1"><f a="c:n">
	<t path="sys.db._Sqlite.SqliteResultHandle"/>
	<x path="Int"/>
	<x path="Null"><x path="Float"/></x>
</f></result_get_float>
		<result_get_length public="1" set="method" line="41" static="1"><f a="c">
	<t path="sys.db._Sqlite.SqliteResultHandle"/>
	<x path="Null"><x path="Int"/></x>
</f></result_get_length>
		<result_get_nfields public="1" set="method" line="42" static="1"><f a="c">
	<t path="sys.db._Sqlite.SqliteResultHandle"/>
	<x path="Int"/>
</f></result_get_nfields>
		<result_get_fields public="1" set="method" line="43" static="1"><f a="c">
	<t path="sys.db._Sqlite.SqliteResultHandle"/>
	<x path="hl.NativeArray"><x path="hl.Bytes"/></x>
</f></result_get_fields>
		<meta><m n=":hlNative"><e>"sqlite"</e></m></meta>
	</class>
	<class path="sys.db._Sqlite.SqliteConnection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/db/Sqlite.hx" private="1" module="sys.db.Sqlite">
		<implements path="sys.db.Connection"/>
		<c><t path="sys.db._Sqlite.SqliteConnectionHandle"/></c>
		<close public="1" set="method" line="59"><f a=""><x path="Void"/></f></close>
		<request public="1" set="method" line="64"><f a="s">
	<c path="String"/>
	<c path="sys.db.ResultSet"/>
</f></request>
		<escape public="1" set="method" line="80"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></escape>
		<quote public="1" set="method" line="85"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></quote>
		<addValue public="1" set="method" line="93"><f a="s:v">
	<c path="StringBuf"/>
	<d/>
	<x path="Void"/>
</f></addValue>
		<lastInsertId public="1" set="method" line="103"><f a=""><x path="Int"/></f></lastInsertId>
		<dbName public="1" set="method" line="108"><f a=""><c path="String"/></f></dbName>
		<startTransaction public="1" set="method" line="113"><f a=""><x path="Void"/></f></startTransaction>
		<commit public="1" set="method" line="118"><f a=""><x path="Void"/></f></commit>
		<rollback public="1" set="method" line="124"><f a=""><x path="Void"/></f></rollback>
		<new public="1" set="method" line="54"><f a="file">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":access"><e>Sys</e></m>
			<m n=":access"><e>String</e></m>
		</meta>
	</class>
	<class path="sys.db._Sqlite.SqliteResultSet" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/db/Sqlite.hx" private="1" module="sys.db.Sqlite">
		<implements path="sys.db.ResultSet"/>
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<nfields public="1" get="accessor" set="null"><x path="Int"/></nfields>
		<names><c path="Array"><c path="String"/></c></names>
		<cache><t path="List"><d/></t></cache>
		<r><t path="sys.db._Sqlite.SqliteResultHandle"/></r>
		<get_length set="method" line="151"><f a=""><x path="Int"/></f></get_length>
		<get_nfields set="method" line="170"><f a=""><x path="Int"/></f></get_nfields>
		<hasNext public="1" set="method" line="175"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method" line="186"><f a=""><d/></f></next>
		<doNext set="method" line="195"><f a=""><d/></f></doNext>
		<results public="1" set="method" line="218"><f a=""><t path="List"><d/></t></f></results>
		<getResult public="1" set="method" line="233"><f a="n">
	<x path="Int"/>
	<c path="String"/>
</f></getResult>
		<getIntResult public="1" set="method" line="242"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getIntResult>
		<getFloatResult public="1" set="method" line="247"><f a="n">
	<x path="Int"/>
	<x path="Float"/>
</f></getFloatResult>
		<getFieldsNames public="1" set="method" line="252"><f a=""><c path="Array"><c path="String"/></c></f></getFieldsNames>
		<new public="1" set="method" line="144"><f a="r">
	<t path="sys.db._Sqlite.SqliteResultHandle"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":access"><e>String</e></m></meta>
	</class>
	<class path="sys.db.Sqlite" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/db/Sqlite.hx">
		<open public="1" set="method" line="274" static="1"><f a="file">
	<c path="String"/>
	<c path="sys.db.Connection"/>
</f></open>
		<meta><m n=":coreApi"/></meta>
	</class>
	<enum path="sys.io.FileHandle" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/io/File.hx" module="sys.io.File"><meta><m n=":flatEnum"/></meta></enum>
	<class path="sys.io.File" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/io/File.hx">
		<getContent public="1" set="method" line="33" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the content of the file specified by `path` as a String.

		If the file does not exist or can not be read, an exception is thrown.

		`sys.FileSystem.exists` can be used to check for existence.

		If `path` is null, the result is unspecified.</haxe_doc>
		</getContent>
		<getBytes public="1" set="method" line="39" static="1">
			<f a="path">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Retrieves the binary content of the file specified by `path`.

		If the file does not exist or can not be read, an exception is thrown.

		`sys.FileSystem.exists` can be used to check for existence.

		If `path` is null, the result is unspecified.</haxe_doc>
		</getBytes>
		<saveContent public="1" set="method" line="46" static="1">
			<f a="path:content">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores `content` in the file specified by `path`.

		If the file cannot be written to, an exception is thrown.

		If `path` or `content` are null, the result is unspecified.</haxe_doc>
		</saveContent>
		<saveBytes public="1" set="method" line="52" static="1">
			<f a="path:bytes">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores `bytes` in the file specified by `path` in binary mode.

		If the file cannot be written to, an exception is thrown.

		If `path` or `bytes` are null, the result is unspecified.</haxe_doc>
		</saveBytes>
		<read public="1" set="method" line="58" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileInput"/>
			</f>
			<meta><m n=":value"><e>{ binary : true }</e></m></meta>
			<haxe_doc>Returns an `FileInput` handle to the file specified by `path`.

		If `binary` is true, the file is opened in binary mode. Otherwise it is
		opened in non-binary mode.

		If the file does not exist or can not be read, an exception is thrown.

		Operations on the returned `FileInput` handle read on the opened file.

		File handles should be closed via `FileInput.close` once the operation
		is complete.

		If `path` is null, the result is unspecified.</haxe_doc>
		</read>
		<write public="1" set="method" line="64" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileOutput"/>
			</f>
			<meta><m n=":value"><e>{ binary : true }</e></m></meta>
			<haxe_doc>Returns an `FileOutput` handle to the file specified by `path`.

		If `binary` is true, the file is opened in binary mode. Otherwise it is
		opened in non-binary mode.

		If the file cannot be written to, an exception is thrown.

		Operations on the returned `FileOutput` handle write to the opened file.
		If the file existed, its previous content is overwritten.

		File handles should be closed via `FileOutput.close` once the operation
		is complete.

		If `path` is null, the result is unspecified.</haxe_doc>
		</write>
		<append public="1" set="method" line="70" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileOutput"/>
			</f>
			<meta><m n=":value"><e>{ binary : true }</e></m></meta>
			<haxe_doc>Similar to `sys.io.File.write`, but appends to the file if it exists
		instead of overwriting its contents.</haxe_doc>
		</append>
		<update public="1" set="method" line="76" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileOutput"/>
			</f>
			<meta><m n=":value"><e>{ binary : true }</e></m></meta>
			<haxe_doc>Similar to `sys.io.File.append`. While `append` can only seek or write
		starting from the end of the file's previous contents, `update` can
		seek to any position, so the file's previous contents can be
		selectively overwritten.</haxe_doc>
		</update>
		<copy public="1" set="method" line="85" static="1">
			<f a="srcPath:dstPath">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies the contents of the file specified by `srcPath` to the file
		specified by `dstPath`.

		If the `srcPath` does not exist or cannot be read, or if the `dstPath`
		file cannot be written to, an exception is thrown.

		If the file at `dstPath` exists, its contents are overwritten.

		If `srcPath` or `dstPath` are null, the result is unspecified.</haxe_doc>
		</copy>
		<file_open set="method" line="93" static="1">
			<f a="path:mode:binary">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Bool"/>
				<e path="sys.io.FileHandle"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"file_open"</e>
</m></meta>
		</file_open>
		<file_contents set="method" line="94" static="1">
			<f a="path:size">
				<x path="hl.Bytes"/>
				<x path="hl.Ref"><x path="Int"/></x>
				<x path="hl.Bytes"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"file_contents"</e>
</m></meta>
		</file_contents>
		<haxe_doc>API for reading and writing to files.

	See `sys.FileSystem` for the complementary file system API.</haxe_doc>
		<meta>
			<m n=":access"><e>Sys</e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="sys.io.FileInput" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/io/FileInput.hx">
		<extends path="haxe.io.Input"/>
		<file_eof set="method" line="67" static="1">
			<f a="f">
				<e path="sys.io.FileHandle"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"file_eof"</e>
</m></meta>
		</file_eof>
		<file_read set="method" line="68" static="1">
			<f a="f:bytes:pos:len">
				<e path="sys.io.FileHandle"/>
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"file_read"</e>
</m></meta>
		</file_read>
		<file_read_char set="method" line="69" static="1">
			<f a="f">
				<e path="sys.io.FileHandle"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"file_read_char"</e>
</m></meta>
		</file_read_char>
		<file_close set="method" line="70" static="1">
			<f a="f">
				<e path="sys.io.FileHandle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"file_close"</e>
</m></meta>
		</file_close>
		<file_seek set="method" line="71" static="1">
			<f a="f:pos:from">
				<e path="sys.io.FileHandle"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"file_seek"</e>
</m></meta>
		</file_seek>
		<file_tell set="method" line="72" static="1">
			<f a="f">
				<e path="sys.io.FileHandle"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"file_tell"</e>
</m></meta>
		</file_tell>
		<__f><e path="sys.io.FileHandle"/></__f>
		<readByte public="1" set="method" line="33" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="39" override="1"><f a="s:p:l">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<close public="1" set="method" line="46" override="1"><f a=""><x path="Void"/></f></close>
		<seek public="1" set="method" line="52"><f a="p:pos">
	<x path="Int"/>
	<e path="sys.io.FileSeek"/>
	<x path="Void"/>
</f></seek>
		<tell public="1" set="method" line="57"><f a=""><x path="Int"/></f></tell>
		<eof public="1" set="method" line="63"><f a=""><x path="Bool"/></f></eof>
		<new set="method" line="29"><f a="f">
	<e path="sys.io.FileHandle"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Use `sys.io.File.read` to create a `FileInput`.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="sys.io.FileOutput" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/io/FileOutput.hx">
		<extends path="haxe.io.Output"/>
		<file_flush set="method" line="65" static="1">
			<f a="f">
				<e path="sys.io.FileHandle"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"file_flush"</e>
</m></meta>
		</file_flush>
		<file_write set="method" line="66" static="1">
			<f a="f:bytes:pos:len">
				<e path="sys.io.FileHandle"/>
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"file_write"</e>
</m></meta>
		</file_write>
		<file_write_char set="method" line="67" static="1">
			<f a="f:v">
				<e path="sys.io.FileHandle"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"file_write_char"</e>
</m></meta>
		</file_write_char>
		<__f><e path="sys.io.FileHandle"/></__f>
		<writeByte public="1" set="method" line="33" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="37" override="1"><f a="s:p:l">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<flush public="1" set="method" line="44" override="1"><f a=""><x path="Void"/></f></flush>
		<close public="1" set="method" line="48" override="1"><f a=""><x path="Void"/></f></close>
		<seek public="1" set="method" line="54"><f a="p:pos">
	<x path="Int"/>
	<e path="sys.io.FileSeek"/>
	<x path="Void"/>
</f></seek>
		<tell public="1" set="method" line="59"><f a=""><x path="Int"/></f></tell>
		<new set="method" line="29"><f a="f">
	<e path="sys.io.FileHandle"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Use `sys.io.File.write` to create a `FileOutput`.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<enum path="sys.io.FileSeek" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/io/FileSeek.hx">
		<SeekBegin/>
		<SeekCur/>
		<SeekEnd/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="sys.io._Process.ProcessHandle" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/io/Process.hx" private="1" module="sys.io.Process"><c path="hl.Abstract"><c path="Shl_process"/></c></typedef>
	<class path="sys.io._Process.Stdin" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/io/Process.hx" private="1" module="sys.io.Process">
		<extends path="haxe.io.Output"/>
		<_stdin_write set="method" line="52" static="1">
			<f a="p:bytes:pos:len">
				<t path="sys.io._Process.ProcessHandle"/>
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"process_stdin_write"</e>
</m></meta>
		</_stdin_write>
		<_stdin_close set="method" line="53" static="1">
			<f a="p">
				<t path="sys.io._Process.ProcessHandle"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"process_stdin_close"</e>
</m></meta>
		</_stdin_close>
		<p><d/></p>
		<buf><c path="haxe.io.Bytes"/></buf>
		<close public="1" set="method" line="36" override="1"><f a=""><x path="Void"/></f></close>
		<writeByte public="1" set="method" line="41" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="46" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<new public="1" set="method" line="31"><f a="p">
	<t path="sys.io._Process.ProcessHandle"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.io._Process.Stdout" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/io/Process.hx" private="1" module="sys.io.Process">
		<extends path="haxe.io.Input"/>
		<_stdout_read set="method" line="81" static="1">
			<f a="p:bytes:pos:len">
				<t path="sys.io._Process.ProcessHandle"/>
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"process_stdout_read"</e>
</m></meta>
		</_stdout_read>
		<_stderr_read set="method" line="82" static="1">
			<f a="p:bytes:pos:len">
				<t path="sys.io._Process.ProcessHandle"/>
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"process_stderr_read"</e>
</m></meta>
		</_stderr_read>
		<p><t path="sys.io._Process.ProcessHandle"/></p>
		<out><x path="Bool"/></out>
		<buf><c path="haxe.io.Bytes"/></buf>
		<readByte public="1" set="method" line="69" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="75" override="1"><f a="str:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="63"><f a="p:out">
	<t path="sys.io._Process.ProcessHandle"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.io.Process" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/io/Process.hx">
		<isWin expr="Sys.systemName() == &quot;Windows&quot;" line="94" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>Sys.systemName() == "Windows"</e></m></meta>
		</isWin>
		<_run set="method" line="176" static="1">
			<f a="cmd:args:detached">
				<x path="hl.Bytes"/>
				<x path="hl.NativeArray"><x path="hl.Bytes"/></x>
				<x path="Bool"/>
				<t path="sys.io._Process.ProcessHandle"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"process_run"</e>
</m></meta>
		</_run>
		<_exit set="method" line="177" static="1">
			<f a="p:running">
				<t path="sys.io._Process.ProcessHandle"/>
				<x path="hl.Ref"><x path="Bool"/></x>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"process_exit"</e>
</m></meta>
		</_exit>
		<_pid set="method" line="178" static="1">
			<f a="p">
				<t path="sys.io._Process.ProcessHandle"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"process_pid"</e>
</m></meta>
		</_pid>
		<_close set="method" line="179" static="1">
			<f a="p">
				<t path="sys.io._Process.ProcessHandle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"process_close"</e>
</m></meta>
		</_close>
		<_kill set="method" line="180" static="1">
			<f a="p">
				<t path="sys.io._Process.ProcessHandle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"process_kill"</e>
</m></meta>
		</_kill>
		<p><t path="sys.io._Process.ProcessHandle"/></p>
		<stdout public="1" set="null">
			<c path="haxe.io.Input"/>
			<haxe_doc>Standard output. The output stream where a process writes its output data.</haxe_doc>
		</stdout>
		<stderr public="1" set="null">
			<c path="haxe.io.Input"/>
			<haxe_doc>Standard error. The output stream to output error messages or diagnostics.</haxe_doc>
		</stderr>
		<stdin public="1" set="null">
			<c path="haxe.io.Output"/>
			<haxe_doc>Standard input. The stream data going into a process.</haxe_doc>
		</stdin>
		<getPid public="1" set="method" line="156">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Return the process ID.</haxe_doc>
		</getPid>
		<exitCode public="1" set="method" line="160">
			<f a="?block" v="true">
				<x path="Bool"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<meta><m n=":value"><e>{ block : true }</e></m></meta>
			<haxe_doc>Query the exit code of the process.
		If `block` is true or not specified, it will block until the process terminates.
		If `block` is false, it will return either the process exit code if it's already terminated or null if it's still running.
		If the process has already exited, return the exit code immediately.</haxe_doc>
		</exitCode>
		<close public="1" set="method" line="168">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the process handle and release the associated resources.
		All `Process` fields should not be used after `close()` is called.</haxe_doc>
		</close>
		<kill public="1" set="method" line="172">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Kill the process.</haxe_doc>
		</kill>
		<new public="1" set="method" line="96">
			<f a="cmd:?args:?detached">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Construct a `Process` object, which run the given command immediately.

		Command arguments can be passed in two ways: 1. using `args`, 2. appending to `cmd` and leaving `args` as `null`.

		 1. When using `args` to pass command arguments, each argument will be automatically quoted, and shell meta-characters will be escaped if needed.
		`cmd` should be an executable name that can be located in the `PATH` environment variable, or a path to an executable.

		 2. When `args` is not given or is `null`, command arguments can be appended to `cmd`. No automatic quoting/escaping will be performed. `cmd` should be formatted exactly as it would be when typed at the command line.
		It can run executables, as well as shell commands that are not executables (e.g. on Windows: `dir`, `cd`, `echo` etc).

		`detached` allows the created process to be standalone. You cannot communicate with it but you can look at its exit code.
		
		`close()` should be called when the `Process` is no longer used.</haxe_doc>
		</new>
		<meta>
			<m n=":access"><e>Sys</e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="sys.net.Address" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/net/Address.hx">
		<host public="1"><x path="Int"/></host>
		<port public="1"><x path="Int"/></port>
		<getHost public="1" set="method" line="36">
			<f a=""><c path="sys.net.Host"/></f>
			<meta><m n=":has_untyped"/></meta>
		</getHost>
		<compare public="1" set="method" line="42"><f a="a">
	<c path="sys.net.Address"/>
	<x path="Int"/>
</f></compare>
		<clone public="1" set="method" line="50"><f a=""><c path="sys.net.Address"/></f></clone>
		<new public="1" set="method" line="31"><f a=""><x path="Void"/></f></new>
		<haxe_doc>An address is used to represent a port on a given host ip. 
	It is used by `sys.net.UdpSocket`.</haxe_doc>
	</class>
	<class path="sys.net.Host" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/net/Host.hx">
		<localhost public="1" set="method" line="45" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the local computer host name</haxe_doc>
		</localhost>
		<host_resolve set="method" line="49" static="1">
			<f a="name">
				<x path="hl.Bytes"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"host_resolve"</e>
</m></meta>
		</host_resolve>
		<host_reverse set="method" line="50" static="1">
			<f a="host">
				<x path="Int"/>
				<x path="hl.Bytes"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"host_reverse"</e>
</m></meta>
		</host_reverse>
		<host_to_string set="method" line="51" static="1">
			<f a="host">
				<x path="Int"/>
				<x path="hl.Bytes"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"host_to_string"</e>
</m></meta>
		</host_to_string>
		<host_local set="method" line="52" static="1">
			<f a=""><x path="hl.Bytes"/></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"host_local"</e>
</m></meta>
		</host_local>
		<host public="1" set="null">
			<c path="String"/>
			<haxe_doc>The provided host string.</haxe_doc>
		</host>
		<ip public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The actual IP corresponding to the host.</haxe_doc>
		</ip>
		<toString public="1" set="method" line="37">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the IP representation of the host</haxe_doc>
		</toString>
		<reverse public="1" set="method" line="41">
			<f a=""><c path="String"/></f>
			<haxe_doc>Perform a reverse-DNS query to resolve a host name from an IP.</haxe_doc>
		</reverse>
		<new public="1" set="method" line="31">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Host : the name can be an IP in the form "127.0.0.1" or an host name such as "google.com", in which case
		the corresponding IP address is resolved using DNS. An exception occur if the host name could not be found.</haxe_doc>
		</new>
		<haxe_doc>A given IP host name.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="sys.net._Socket.SocketOutput" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/net/Socket.hx" private="1" module="sys.net.Socket">
		<extends path="haxe.io.Output"/>
		<socket_send_char set="method" line="62" static="1">
			<f a="s:c">
				<e path="sys.net.SocketHandle"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"socket_send_char"</e>
</m></meta>
		</socket_send_char>
		<socket_send set="method" line="63" static="1">
			<f a="s:bytes:pos:len">
				<e path="sys.net.SocketHandle"/>
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"socket_send"</e>
</m></meta>
		</socket_send>
		<sock><c path="sys.net.Socket"/></sock>
		<writeByte public="1" set="method" line="39" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="47" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<close public="1" set="method" line="57" override="1"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="35"><f a="s">
	<c path="sys.net.Socket"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.net._Socket.SocketInput" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/net/Socket.hx" private="1" module="sys.net.Socket">
		<extends path="haxe.io.Input"/>
		<socket_recv set="method" line="98" static="1">
			<f a="s:bytes:pos:len">
				<e path="sys.net.SocketHandle"/>
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"socket_recv"</e>
</m></meta>
		</socket_recv>
		<socket_recv_char set="method" line="99" static="1">
			<f a="s">
				<e path="sys.net.SocketHandle"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"socket_recv_char"</e>
</m></meta>
		</socket_recv_char>
		<sock><c path="sys.net.Socket"/></sock>
		<readByte public="1" set="method" line="75" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="84" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<close public="1" set="method" line="94" override="1"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="71"><f a="s">
	<c path="sys.net.Socket"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.net.Socket" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/net/Socket.hx">
		<tmp expr="null" line="207" static="1">
			<x path="hl.Bytes"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</tmp>
		<curTmpSize expr="0" line="208" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</curTmpSize>
		<makeArray set="method" line="210" static="1"><f a="a">
	<c path="Array"><c path="sys.net.Socket"/></c>
	<x path="hl.NativeArray"><e path="sys.net.SocketHandle"/></x>
</f></makeArray>
		<outArray set="method" line="218" static="1"><f a="a:original">
	<x path="hl.NativeArray"><e path="sys.net.SocketHandle"/></x>
	<c path="Array"><c path="sys.net.Socket"/></c>
	<c path="Array"><c path="sys.net.Socket"/></c>
</f></outArray>
		<select public="1" set="method" line="232" static="1">
			<f a="read:write:others:?timeout">
				<c path="Array"><c path="sys.net.Socket"/></c>
				<c path="Array"><c path="sys.net.Socket"/></c>
				<c path="Array"><c path="sys.net.Socket"/></c>
				<x path="Float"/>
				<a>
					<write><c path="Array"><c path="sys.net.Socket"/></c></write>
					<read><c path="Array"><c path="sys.net.Socket"/></c></read>
					<others><c path="Array"><c path="sys.net.Socket"/></c></others>
				</a>
			</f>
			<haxe_doc>Wait until one of the sockets groups is ready for the given operation :
		 - `read`contains sockets on which we want to wait for available data to be read,
		 - `write` contains sockets on which we want to wait until we are allowed to write some data to their output buffers,
		 - `others` contains sockets on which we want to wait for exceptional conditions.
		 - `select` will block until one of the condition is met, in which case it will return the sockets for which the condition was true.
		In case a `timeout` (in seconds) is specified, select might wait at worse until the timeout expires.</haxe_doc>
		</select>
		<socket_init set="method" line="253" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"socket_init"</e>
</m></meta>
		</socket_init>
		<socket_new set="method" line="254" static="1">
			<f a="udp">
				<x path="Bool"/>
				<e path="sys.net.SocketHandle"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"socket_new"</e>
</m></meta>
		</socket_new>
		<socket_close set="method" line="255" static="1">
			<f a="s">
				<e path="sys.net.SocketHandle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"socket_close"</e>
</m></meta>
		</socket_close>
		<socket_connect set="method" line="256" static="1">
			<f a="s:host:port">
				<e path="sys.net.SocketHandle"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"socket_connect"</e>
</m></meta>
		</socket_connect>
		<socket_listen set="method" line="257" static="1">
			<f a="s:count">
				<e path="sys.net.SocketHandle"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"socket_listen"</e>
</m></meta>
		</socket_listen>
		<socket_bind set="method" line="258" static="1">
			<f a="s:host:port">
				<e path="sys.net.SocketHandle"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"socket_bind"</e>
</m></meta>
		</socket_bind>
		<socket_accept set="method" line="259" static="1">
			<f a="s">
				<e path="sys.net.SocketHandle"/>
				<e path="sys.net.SocketHandle"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"socket_accept"</e>
</m></meta>
		</socket_accept>
		<socket_peer set="method" line="260" static="1">
			<f a="s:host:port">
				<e path="sys.net.SocketHandle"/>
				<x path="hl.Ref"><x path="Int"/></x>
				<x path="hl.Ref"><x path="Int"/></x>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"socket_peer"</e>
</m></meta>
		</socket_peer>
		<socket_host set="method" line="261" static="1">
			<f a="s:host:port">
				<e path="sys.net.SocketHandle"/>
				<x path="hl.Ref"><x path="Int"/></x>
				<x path="hl.Ref"><x path="Int"/></x>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"socket_host"</e>
</m></meta>
		</socket_host>
		<socket_set_timeout set="method" line="262" static="1">
			<f a="s:timeout">
				<e path="sys.net.SocketHandle"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"socket_set_timeout"</e>
</m></meta>
		</socket_set_timeout>
		<socket_shutdown set="method" line="263" static="1">
			<f a="s:read:write">
				<e path="sys.net.SocketHandle"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"socket_shutdown"</e>
</m></meta>
		</socket_shutdown>
		<socket_set_blocking set="method" line="264" static="1">
			<f a="s:b">
				<e path="sys.net.SocketHandle"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"socket_set_blocking"</e>
</m></meta>
		</socket_set_blocking>
		<socket_set_fast_send set="method" line="265" static="1">
			<f a="s:b">
				<e path="sys.net.SocketHandle"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"socket_set_fast_send"</e>
</m></meta>
		</socket_set_fast_send>
		<socket_fd_size set="method" line="267" static="1">
			<f a="count">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"socket_fd_size"</e>
</m></meta>
		</socket_fd_size>
		<socket_select set="method" line="268" static="1">
			<f a="read:write:other:tmpData:tmpSize:timeout">
				<x path="hl.NativeArray"><e path="sys.net.SocketHandle"/></x>
				<x path="hl.NativeArray"><e path="sys.net.SocketHandle"/></x>
				<x path="hl.NativeArray"><e path="sys.net.SocketHandle"/></x>
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"socket_select"</e>
</m></meta>
		</socket_select>
		<__s><e path="sys.net.SocketHandle"/></__s>
		<input public="1" set="null">
			<c path="haxe.io.Input"/>
			<haxe_doc>The stream on which you can read available data. By default the stream is blocking until the requested data is available,
		use `setBlocking(false)` or `setTimeout` to prevent infinite waiting.</haxe_doc>
		</input>
		<output public="1" set="null">
			<c path="haxe.io.Output"/>
			<haxe_doc>The stream on which you can send data. Please note that in case the output buffer you will block while writing the data, use `setBlocking(false)` or `setTimeout` to prevent that.</haxe_doc>
		</output>
		<custom public="1">
			<d/>
			<haxe_doc>A custom value that can be associated with the socket. Can be used to retrieve your custom infos after a `select`.
	*</haxe_doc>
		</custom>
		<init set="method" line="120"><f a=""><x path="Void"/></f></init>
		<close public="1" set="method" line="126">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Closes the socket : make sure to properly close all your sockets or you will crash when you run out of file descriptors.</haxe_doc>
		</close>
		<read public="1" set="method" line="133">
			<f a=""><c path="String"/></f>
			<haxe_doc>Read the whole data available on the socket.</haxe_doc>
		</read>
		<write public="1" set="method" line="137">
			<f a="content">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write the whole data to the socket output.</haxe_doc>
		</write>
		<connect public="1" set="method" line="141">
			<f a="host:port">
				<c path="sys.net.Host"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Connect to the given server host/port. Throw an exception in case we couldn't successfully connect.</haxe_doc>
		</connect>
		<listen public="1" set="method" line="146">
			<f a="connections">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allow the socket to listen for incoming questions. The parameter tells how many pending connections we can have until they get refused. Use `accept()` to accept incoming connections.</haxe_doc>
		</listen>
		<shutdown public="1" set="method" line="151">
			<f a="read:write">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Shutdown the socket, either for reading or writing.</haxe_doc>
		</shutdown>
		<bind public="1" set="method" line="156">
			<f a="host:port">
				<c path="sys.net.Host"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Bind the socket to the given host/port so it can afterwards listen for connections there.</haxe_doc>
		</bind>
		<accept public="1" set="method" line="161">
			<f a=""><c path="sys.net.Socket"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Accept a new connected client. This will return a connected socket on which you can read/write some data.</haxe_doc>
		</accept>
		<peer public="1" set="method" line="172">
			<f a=""><a>
	<port><x path="Int"/></port>
	<host><c path="sys.net.Host"/></host>
</a></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Return the information about the other side of a connected socket.</haxe_doc>
		</peer>
		<host public="1" set="method" line="181">
			<f a=""><a>
	<port><x path="Int"/></port>
	<host><c path="sys.net.Host"/></host>
</a></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Return the information about our side of a connected socket.</haxe_doc>
		</host>
		<setTimeout public="1" set="method" line="190">
			<f a="timeout">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Gives a timeout after which blocking socket operations (such as reading and writing) will abort and throw an exception.</haxe_doc>
		</setTimeout>
		<waitForRead public="1" set="method" line="194">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Block until some data is available for read on the socket.</haxe_doc>
		</waitForRead>
		<setBlocking public="1" set="method" line="198">
			<f a="b">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Change the blocking mode of the socket. A blocking socket is the default behavior. A non-blocking socket will abort blocking operations immediately by throwing a haxe.io.Error.Blocked value.</haxe_doc>
		</setBlocking>
		<setFastSend public="1" set="method" line="202">
			<f a="b">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allows the socket to immediately send the data when written to its output : this will cause less ping but might increase the number of packets / data size, especially when doing a lot of small writes.</haxe_doc>
		</setFastSend>
		<new public="1" set="method" line="116">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new unconnected socket.</haxe_doc>
		</new>
		<haxe_doc>A TCP socket class : allow you to both connect to a given server and exchange messages or start your own server and wait for connections.</haxe_doc>
		<meta>
			<m n=":coreApi"/>
			<m n=":keepInit"/>
		</meta>
	</class>
	<class path="sys.net.UdpSocket" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/net/UdpSocket.hx">
		<extends path="sys.net.Socket"/>
		<socket_send_to set="method" line="60" static="1">
			<f a="s:bytes:len:host:port">
				<e path="sys.net.SocketHandle"/>
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"socket_send_to"</e>
</m></meta>
		</socket_send_to>
		<socket_recv_from set="method" line="62" static="1">
			<f a="s:bytes:len:host:port">
				<e path="sys.net.SocketHandle"/>
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="hl.Ref"><x path="Int"/></x>
				<x path="hl.Ref"><x path="Int"/></x>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"socket_recv_from"</e>
</m></meta>
		</socket_recv_from>
		<init set="method" line="32" override="1"><f a=""><x path="Void"/></f></init>
		<sendTo public="1" set="method" line="37"><f a="buf:pos:len:addr">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="sys.net.Address"/>
	<x path="Int"/>
</f></sendTo>
		<readFrom public="1" set="method" line="47"><f a="buf:pos:len:addr">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="sys.net.Address"/>
	<x path="Int"/>
</f></readFrom>
		<new public="1" set="method" line="28"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="sys.ssl.Certificate" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/ssl/Certificate.hx">
		<loadFile public="1" set="method" line="19" static="1"><f a="file">
	<c path="String"/>
	<c path="sys.ssl.Certificate"/>
</f></loadFile>
		<loadPath public="1" set="method" line="23" static="1"><f a="path">
	<c path="String"/>
	<c path="sys.ssl.Certificate"/>
</f></loadPath>
		<fromString public="1" set="method" line="27" static="1"><f a="str">
	<c path="String"/>
	<c path="sys.ssl.Certificate"/>
</f></fromString>
		<loadDefaults public="1" set="method" line="31" static="1"><f a=""><c path="sys.ssl.Certificate"/></f></loadDefaults>
		<cert_load_defaults set="method" line="117" static="1">
			<f a=""><t path="sys.ssl.CertificatePtr"/></f>
			<meta><m n=":hlNative">
	<e>"ssl"</e>
	<e>"cert_load_defaults"</e>
</m></meta>
		</cert_load_defaults>
		<cert_load_file set="method" line="118" static="1">
			<f a="file">
				<x path="hl.Bytes"/>
				<t path="sys.ssl.CertificatePtr"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ssl"</e>
	<e>"cert_load_file"</e>
</m></meta>
		</cert_load_file>
		<cert_load_path set="method" line="119" static="1">
			<f a="path">
				<x path="hl.Bytes"/>
				<t path="sys.ssl.CertificatePtr"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ssl"</e>
	<e>"cert_load_path"</e>
</m></meta>
		</cert_load_path>
		<cert_get_subject set="method" line="120" static="1">
			<f a="cert:obj">
				<t path="sys.ssl.CertificatePtr"/>
				<x path="hl.Bytes"/>
				<x path="hl.Bytes"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ssl"</e>
	<e>"cert_get_subject"</e>
</m></meta>
		</cert_get_subject>
		<cert_get_issuer set="method" line="121" static="1">
			<f a="cert:obj">
				<t path="sys.ssl.CertificatePtr"/>
				<x path="hl.Bytes"/>
				<x path="hl.Bytes"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ssl"</e>
	<e>"cert_get_issuer"</e>
</m></meta>
		</cert_get_issuer>
		<cert_get_altnames set="method" line="122" static="1">
			<f a="cert">
				<t path="sys.ssl.CertificatePtr"/>
				<x path="hl.NativeArray"><x path="hl.Bytes"/></x>
			</f>
			<meta><m n=":hlNative">
	<e>"ssl"</e>
	<e>"cert_get_altnames"</e>
</m></meta>
		</cert_get_altnames>
		<cert_get_notbefore set="method" line="123" static="1">
			<f a="cert">
				<t path="sys.ssl.CertificatePtr"/>
				<x path="hl.NativeArray"><x path="Int"/></x>
			</f>
			<meta><m n=":hlNative">
	<e>"ssl"</e>
	<e>"cert_get_notbefore"</e>
</m></meta>
		</cert_get_notbefore>
		<cert_get_notafter set="method" line="124" static="1">
			<f a="cert">
				<t path="sys.ssl.CertificatePtr"/>
				<x path="hl.NativeArray"><x path="Int"/></x>
			</f>
			<meta><m n=":hlNative">
	<e>"ssl"</e>
	<e>"cert_get_notafter"</e>
</m></meta>
		</cert_get_notafter>
		<cert_get_next set="method" line="125" static="1">
			<f a="cert">
				<t path="sys.ssl.CertificatePtr"/>
				<x path="Null"><t path="sys.ssl.CertificatePtr"/></x>
			</f>
			<meta><m n=":hlNative">
	<e>"ssl"</e>
	<e>"cert_get_next"</e>
</m></meta>
		</cert_get_next>
		<cert_add_pem set="method" line="126" static="1">
			<f a="cert:data">
				<x path="Null"><t path="sys.ssl.CertificatePtr"/></x>
				<x path="hl.Bytes"/>
				<t path="sys.ssl.CertificatePtr"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ssl"</e>
	<e>"cert_add_pem"</e>
</m></meta>
		</cert_add_pem>
		<cert_add_der set="method" line="127" static="1">
			<f a="cert:data:len">
				<x path="Null"><t path="sys.ssl.CertificatePtr"/></x>
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<t path="sys.ssl.CertificatePtr"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ssl"</e>
	<e>"cert_add_der"</e>
</m></meta>
		</cert_add_der>
		<__h><x path="Null"><c path="sys.ssl.Certificate"/></x></__h>
		<__x><t path="sys.ssl.CertificatePtr"/></__x>
		<commonName public="1" get="accessor" set="null"><x path="Null"><c path="String"/></x></commonName>
		<altNames public="1" get="accessor" set="null"><c path="Array"><c path="String"/></c></altNames>
		<notBefore public="1" get="accessor" set="null"><c path="Date"/></notBefore>
		<notAfter public="1" get="accessor" set="null"><c path="Date"/></notAfter>
		<get_commonName set="method" line="75"><f a=""><x path="Null"><c path="String"/></x></f></get_commonName>
		<get_altNames set="method" line="79"><f a=""><c path="Array"><c path="String"/></c></f></get_altNames>
		<subject public="1" set="method" line="84"><f a="field">
	<c path="String"/>
	<x path="Null"><c path="String"/></x>
</f></subject>
		<issuer public="1" set="method" line="89"><f a="field">
	<c path="String"/>
	<x path="Null"><c path="String"/></x>
</f></issuer>
		<get_notBefore set="method" line="94"><f a=""><c path="Date"/></f></get_notBefore>
		<get_notAfter set="method" line="99"><f a=""><c path="Date"/></f></get_notAfter>
		<next public="1" set="method" line="104"><f a=""><x path="Null"><c path="sys.ssl.Certificate"/></x></f></next>
		<add public="1" set="method" line="109"><f a="pem">
	<c path="String"/>
	<x path="Void"/>
</f></add>
		<addDER public="1" set="method" line="113"><f a="der">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></addDER>
		<new set="method" line="14">
			<f a="x:?h">
				<t path="sys.ssl.CertificatePtr"/>
				<c path="sys.ssl.Certificate"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>sys.ssl.Socket</e></m></meta>
		</new>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="sys.ssl.Digest" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/ssl/Digest.hx">
		<make public="1" set="method" line="7" static="1"><f a="data:alg">
	<c path="haxe.io.Bytes"/>
	<x path="sys.ssl.DigestAlgorithm"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<sign public="1" set="method" line="13" static="1"><f a="data:privKey:alg">
	<c path="haxe.io.Bytes"/>
	<c path="sys.ssl.Key"/>
	<x path="sys.ssl.DigestAlgorithm"/>
	<c path="haxe.io.Bytes"/>
</f></sign>
		<verify public="1" set="method" line="19" static="1"><f a="data:signature:pubKey:alg">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
	<c path="sys.ssl.Key"/>
	<x path="sys.ssl.DigestAlgorithm"/>
	<x path="Bool"/>
</f></verify>
		<dgst_make set="method" line="23" static="1">
			<f a="data:len:alg:size">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="hl.Bytes"/>
				<x path="hl.Ref"><x path="Int"/></x>
				<x path="hl.Bytes"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ssl"</e>
	<e>"dgst_make"</e>
</m></meta>
		</dgst_make>
		<dgst_sign set="method" line="24" static="1">
			<f a="data:len:key:alg:size">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<t path="sys.ssl.KeyPtr"/>
				<x path="hl.Bytes"/>
				<x path="hl.Ref"><x path="Int"/></x>
				<x path="hl.Bytes"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ssl"</e>
	<e>"dgst_sign"</e>
</m></meta>
		</dgst_sign>
		<dgst_verify set="method" line="25" static="1">
			<f a="data:dlen:sign:slen:key:alg">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<t path="sys.ssl.KeyPtr"/>
				<x path="hl.Bytes"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ssl"</e>
	<e>"dgst_verify"</e>
</m></meta>
		</dgst_verify>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="sys.ssl.DigestAlgorithm" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/ssl/DigestAlgorithm.hx">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="sys.ssl._DigestAlgorithm.DigestAlgorithm_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/ssl/DigestAlgorithm.hx" private="1" module="sys.ssl.DigestAlgorithm" extern="1">
	<MD5 public="1" get="inline" set="null" expr="cast &quot;MD5&quot;" line="5" static="1">
		<x path="sys.ssl.DigestAlgorithm"/>
		<meta>
			<m n=":value"><e>cast "MD5"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MD5>
	<SHA1 public="1" get="inline" set="null" expr="cast &quot;SHA1&quot;" line="6" static="1">
		<x path="sys.ssl.DigestAlgorithm"/>
		<meta>
			<m n=":value"><e>cast "SHA1"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SHA1>
	<SHA224 public="1" get="inline" set="null" expr="cast &quot;SHA224&quot;" line="7" static="1">
		<x path="sys.ssl.DigestAlgorithm"/>
		<meta>
			<m n=":value"><e>cast "SHA224"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SHA224>
	<SHA256 public="1" get="inline" set="null" expr="cast &quot;SHA256&quot;" line="8" static="1">
		<x path="sys.ssl.DigestAlgorithm"/>
		<meta>
			<m n=":value"><e>cast "SHA256"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SHA256>
	<SHA384 public="1" get="inline" set="null" expr="cast &quot;SHA384&quot;" line="9" static="1">
		<x path="sys.ssl.DigestAlgorithm"/>
		<meta>
			<m n=":value"><e>cast "SHA384"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SHA384>
	<SHA512 public="1" get="inline" set="null" expr="cast &quot;SHA512&quot;" line="10" static="1">
		<x path="sys.ssl.DigestAlgorithm"/>
		<meta>
			<m n=":value"><e>cast "SHA512"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SHA512>
	<RIPEMD160 public="1" get="inline" set="null" expr="cast &quot;RIPEMD160&quot;" line="11" static="1">
		<x path="sys.ssl.DigestAlgorithm"/>
		<meta>
			<m n=":value"><e>cast "RIPEMD160"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RIPEMD160>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="sys.ssl._DigestAlgorithm.DigestAlgorithm_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/ssl/DigestAlgorithm.hx" private="1" module="sys.ssl.DigestAlgorithm" extern="1">
		<MD5 public="1" get="inline" set="null" expr="cast &quot;MD5&quot;" line="5" static="1">
			<x path="sys.ssl.DigestAlgorithm"/>
			<meta>
				<m n=":value"><e>cast "MD5"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MD5>
		<SHA1 public="1" get="inline" set="null" expr="cast &quot;SHA1&quot;" line="6" static="1">
			<x path="sys.ssl.DigestAlgorithm"/>
			<meta>
				<m n=":value"><e>cast "SHA1"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SHA1>
		<SHA224 public="1" get="inline" set="null" expr="cast &quot;SHA224&quot;" line="7" static="1">
			<x path="sys.ssl.DigestAlgorithm"/>
			<meta>
				<m n=":value"><e>cast "SHA224"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SHA224>
		<SHA256 public="1" get="inline" set="null" expr="cast &quot;SHA256&quot;" line="8" static="1">
			<x path="sys.ssl.DigestAlgorithm"/>
			<meta>
				<m n=":value"><e>cast "SHA256"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SHA256>
		<SHA384 public="1" get="inline" set="null" expr="cast &quot;SHA384&quot;" line="9" static="1">
			<x path="sys.ssl.DigestAlgorithm"/>
			<meta>
				<m n=":value"><e>cast "SHA384"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SHA384>
		<SHA512 public="1" get="inline" set="null" expr="cast &quot;SHA512&quot;" line="10" static="1">
			<x path="sys.ssl.DigestAlgorithm"/>
			<meta>
				<m n=":value"><e>cast "SHA512"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SHA512>
		<RIPEMD160 public="1" get="inline" set="null" expr="cast &quot;RIPEMD160&quot;" line="11" static="1">
			<x path="sys.ssl.DigestAlgorithm"/>
			<meta>
				<m n=":value"><e>cast "RIPEMD160"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RIPEMD160>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="sys.ssl.Key" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/ssl/Key.hx">
		<loadFile public="1" set="method" line="16" static="1"><f a="file:?isPublic:?pass">
	<c path="String"/>
	<x path="Bool"/>
	<c path="String"/>
	<c path="sys.ssl.Key"/>
</f></loadFile>
		<readPEM public="1" set="method" line="25" static="1"><f a="data:isPublic:?pass">
	<c path="String"/>
	<x path="Bool"/>
	<c path="String"/>
	<c path="sys.ssl.Key"/>
</f></readPEM>
		<readDER public="1" set="method" line="29" static="1"><f a="data:isPublic">
	<c path="haxe.io.Bytes"/>
	<x path="Bool"/>
	<c path="sys.ssl.Key"/>
</f></readDER>
		<key_from_pem set="method" line="33" static="1">
			<f a="data:pub:pass">
				<x path="hl.Bytes"/>
				<x path="Bool"/>
				<x path="Null"><x path="hl.Bytes"/></x>
				<t path="sys.ssl.KeyPtr"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ssl"</e>
	<e>"key_from_pem"</e>
</m></meta>
		</key_from_pem>
		<key_from_der set="method" line="34" static="1">
			<f a="data:len:pub">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Bool"/>
				<t path="sys.ssl.KeyPtr"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ssl"</e>
	<e>"key_from_der"</e>
</m></meta>
		</key_from_der>
		<__k><t path="sys.ssl.KeyPtr"/></__k>
		<new set="method" line="12"><f a="k">
	<t path="sys.ssl.KeyPtr"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":coreApi"/></meta>
	</class>
	<typedef path="sys.ssl._Socket.ConfigPtr" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/ssl/Socket.hx" private="1" module="sys.ssl.Socket"><c path="hl.Abstract"><c path="Smbedtls_ssl_config"/></c></typedef>
	<typedef path="sys.ssl._Socket.ContextPtr" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/ssl/Socket.hx" private="1" module="sys.ssl.Socket"><c path="hl.Abstract"><c path="Smbedtls_ssl_context"/></c></typedef>
	<class path="sys.ssl._Socket.SNICbResult" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/ssl/Socket.hx" private="1" module="sys.ssl.Socket">
		<cert public="1"><t path="sys.ssl.CertificatePtr"/></cert>
		<key public="1"><t path="sys.ssl.KeyPtr"/></key>
		<new public="1" set="method" line="14"><f a="cert:key">
	<c path="sys.ssl.Certificate"/>
	<c path="sys.ssl.Key"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="sys.ssl._Socket.SocketInput" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/ssl/Socket.hx" private="1" module="sys.ssl.Socket">
		<extends path="haxe.io.Input"/>
		<ssl_recv set="method" line="54" static="1">
			<f a="ssl:bytes:pos:len">
				<t path="sys.ssl._Socket.ContextPtr"/>
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ssl"</e>
	<e>"ssl_recv"</e>
</m></meta>
		</ssl_recv>
		<ssl_recv_char set="method" line="55" static="1">
			<f a="ssl">
				<t path="sys.ssl._Socket.ContextPtr"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ssl"</e>
	<e>"ssl_recv_char"</e>
</m></meta>
		</ssl_recv_char>
		<__s>
			<c path="sys.ssl.Socket"/>
			<meta><m n=":allow"><e>sys.ssl.Socket</e></m></meta>
		</__s>
		<readByte public="1" set="method" line="27" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="37" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<close public="1" set="method" line="49" override="1"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="23"><f a="s">
	<c path="sys.ssl.Socket"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.ssl._Socket.SocketOutput" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/ssl/Socket.hx" private="1" module="sys.ssl.Socket">
		<extends path="haxe.io.Output"/>
		<ssl_send set="method" line="91" static="1">
			<f a="ssl:bytes:pos:len">
				<t path="sys.ssl._Socket.ContextPtr"/>
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ssl"</e>
	<e>"ssl_send"</e>
</m></meta>
		</ssl_send>
		<ssl_send_char set="method" line="92" static="1">
			<f a="ssl:c">
				<t path="sys.ssl._Socket.ContextPtr"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ssl"</e>
	<e>"ssl_send_char"</e>
</m></meta>
		</ssl_send_char>
		<__s>
			<c path="sys.ssl.Socket"/>
			<meta><m n=":allow"><e>sys.ssl.Socket</e></m></meta>
		</__s>
		<writeByte public="1" set="method" line="65" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="74" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<close public="1" set="method" line="86" override="1"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="61"><f a="s">
	<c path="sys.ssl.Socket"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.ssl.Socket" params="" file="/home/travis/build/HaxeFoundation/haxe/std/hl/_std/sys/ssl/Socket.hx">
		<extends path="sys.net.Socket"/>
		<DEFAULT_VERIFY_CERT public="1" expr="true" line="99" static="1">
			<x path="Null"><x path="Bool"/></x>
			<meta><m n=":value"><e>true</e></m></meta>
		</DEFAULT_VERIFY_CERT>
		<DEFAULT_CA public="1" static="1"><x path="Null"><c path="sys.ssl.Certificate"/></x></DEFAULT_CA>
		<ssl_new set="method" line="248" static="1">
			<f a="conf">
				<t path="sys.ssl._Socket.ConfigPtr"/>
				<t path="sys.ssl._Socket.ContextPtr"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ssl"</e>
	<e>"ssl_new"</e>
</m></meta>
		</ssl_new>
		<ssl_close set="method" line="249" static="1">
			<f a="ssl">
				<t path="sys.ssl._Socket.ContextPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ssl"</e>
	<e>"ssl_close"</e>
</m></meta>
		</ssl_close>
		<ssl_handshake set="method" line="250" static="1">
			<f a="ssl">
				<t path="sys.ssl._Socket.ContextPtr"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ssl"</e>
	<e>"ssl_handshake"</e>
</m></meta>
		</ssl_handshake>
		<ssl_set_socket set="method" line="251" static="1">
			<f a="ssl:socket">
				<t path="sys.ssl._Socket.ContextPtr"/>
				<e path="sys.net.SocketHandle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ssl"</e>
	<e>"ssl_set_socket"</e>
</m></meta>
		</ssl_set_socket>
		<ssl_set_hostname set="method" line="252" static="1">
			<f a="ssl:name">
				<t path="sys.ssl._Socket.ContextPtr"/>
				<x path="hl.Bytes"/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ssl"</e>
	<e>"ssl_set_hostname"</e>
</m></meta>
		</ssl_set_hostname>
		<ssl_get_peer_certificate set="method" line="253" static="1">
			<f a="ssl">
				<t path="sys.ssl._Socket.ContextPtr"/>
				<t path="sys.ssl.CertificatePtr"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ssl"</e>
	<e>"ssl_get_peer_certificate"</e>
</m></meta>
		</ssl_get_peer_certificate>
		<conf_new set="method" line="255" static="1">
			<f a="server">
				<x path="Bool"/>
				<t path="sys.ssl._Socket.ConfigPtr"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ssl"</e>
	<e>"conf_new"</e>
</m></meta>
		</conf_new>
		<conf_close set="method" line="256" static="1">
			<f a="conf">
				<t path="sys.ssl._Socket.ConfigPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ssl"</e>
	<e>"conf_close"</e>
</m></meta>
		</conf_close>
		<conf_set_ca set="method" line="257" static="1">
			<f a="conf:ca">
				<t path="sys.ssl._Socket.ConfigPtr"/>
				<t path="sys.ssl.CertificatePtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ssl"</e>
	<e>"conf_set_ca"</e>
</m></meta>
		</conf_set_ca>
		<conf_set_verify set="method" line="258" static="1">
			<f a="conf:mode">
				<t path="sys.ssl._Socket.ConfigPtr"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ssl"</e>
	<e>"conf_set_verify"</e>
</m></meta>
		</conf_set_verify>
		<conf_set_cert set="method" line="259" static="1">
			<f a="conf:cert:pkey">
				<t path="sys.ssl._Socket.ConfigPtr"/>
				<t path="sys.ssl.CertificatePtr"/>
				<t path="sys.ssl.KeyPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ssl"</e>
	<e>"conf_set_cert"</e>
</m></meta>
		</conf_set_cert>
		<conf_set_servername_callback set="method" line="260" static="1">
			<f a="conf:cb">
				<t path="sys.ssl._Socket.ConfigPtr"/>
				<f a="">
					<x path="hl.Bytes"/>
					<c path="sys.ssl._Socket.SNICbResult"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"ssl"</e>
	<e>"conf_set_servername_callback"</e>
</m></meta>
		</conf_set_servername_callback>
		<conf><t path="sys.ssl._Socket.ConfigPtr"/></conf>
		<ssl><t path="sys.ssl._Socket.ContextPtr"/></ssl>
		<verifyCert public="1">
			<x path="Null"><x path="Bool"/></x>
			<haxe_doc>Define if peer certificate is verified during SSL handshake.</haxe_doc>
		</verifyCert>
		<caCert><x path="Null"><c path="sys.ssl.Certificate"/></x></caCert>
		<hostname><c path="String"/></hostname>
		<ownCert><x path="Null"><c path="sys.ssl.Certificate"/></x></ownCert>
		<ownKey><x path="Null"><c path="sys.ssl.Key"/></x></ownKey>
		<altSNIContexts><x path="Null"><c path="Array"><a>
	<match><f a="">
	<c path="String"/>
	<x path="Bool"/>
</f></match>
	<key><c path="sys.ssl.Key"/></key>
	<cert><c path="sys.ssl.Certificate"/></cert>
</a></c></x></altSNIContexts>
		<sniCallback><f a="">
	<x path="hl.Bytes"/>
	<c path="sys.ssl._Socket.SNICbResult"/>
</f></sniCallback>
		<handshakeDone><x path="Bool"/></handshakeDone>
		<isBlocking expr="true">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</isBlocking>
		<init set="method" line="117" override="1"><f a=""><x path="Void"/></f></init>
		<connect public="1" set="method" line="130" override="1"><f a="host:port">
	<c path="sys.net.Host"/>
	<x path="Int"/>
	<x path="Void"/>
</f></connect>
		<handshake public="1" set="method" line="145">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Perform the SSL handshake.</haxe_doc>
		</handshake>
		<setBlocking public="1" set="method" line="157" override="1"><f a="b">
	<x path="Bool"/>
	<x path="Void"/>
</f></setBlocking>
		<setCA public="1" set="method" line="162">
			<f a="cert">
				<c path="sys.ssl.Certificate"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Configure the certificate chain for peer certificate verification.</haxe_doc>
		</setCA>
		<setHostname public="1" set="method" line="166">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Configure the hostname for Server Name Indication TLS extension.</haxe_doc>
		</setHostname>
		<setCertificate public="1" set="method" line="170">
			<f a="cert:key">
				<c path="sys.ssl.Certificate"/>
				<c path="sys.ssl.Key"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Configure own certificate and private key.</haxe_doc>
		</setCertificate>
		<close public="1" set="method" line="175" override="1"><f a=""><x path="Void"/></f></close>
		<addSNICertificate public="1" set="method" line="188">
			<f a="cbServernameMatch:cert:key">
				<f a="">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<c path="sys.ssl.Certificate"/>
				<c path="sys.ssl.Key"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Configure additionals certificates and private keys for Server Name Indication extension.
		The callback may be called during handshake to determine the certificate to use.</haxe_doc>
		</addSNICertificate>
		<bind public="1" set="method" line="194" override="1"><f a="host:port">
	<c path="sys.net.Host"/>
	<x path="Int"/>
	<x path="Void"/>
</f></bind>
		<accept public="1" set="method" line="200" override="1"><f a=""><c path="sys.ssl.Socket"/></f></accept>
		<peerCertificate public="1" set="method" line="215">
			<f a=""><c path="sys.ssl.Certificate"/></f>
			<haxe_doc>Return the certificate received from the other side of a connection.</haxe_doc>
		</peerCertificate>
		<buildConfig set="method" line="220"><f a="server">
	<x path="Bool"/>
	<t path="sys.ssl._Socket.ConfigPtr"/>
</f></buildConfig>
		<new public="1" set="method" line="97"><f a=""><x path="Void"/></f></new>
		<haxe_doc>A TLS socket class : allow you to both connect to a given server and exchange messages or start your own server and wait for connections.</haxe_doc>
		<meta>
			<m n=":coreApi"/>
			<m n=":access"><e>sys.net.Socket</e></m>
		</meta>
	</class>
</haxe>