<haxe>
	<abstract path="Any" params="" file="/home/travis/build/HaxeFoundation/haxe/std/Any.hx">
		<from><icast field="__cast"><c path="__cast.T"/></icast></from>
		<this><d/></this>
		<to><icast field="__promote"><c path="__promote.T"/></icast></to>
		<haxe_doc>`Any` is a type that is compatible with any other in both ways.

	This means that a value of any type can be assigned to `Any`, and
	vice-versa, a value of `Any` type can be assigned to any other type.

	It's a more type-safe alternative to `Dynamic`, because it doesn't
	support field access or operators and it's bound to monomorphs. So,
	to work with the actual value, it needs to be explicitly promoted
	to another type.</haxe_doc>
		<impl><class path="_Any.Any_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/Any.hx" private="1" module="Any">
	<__promote params="T" get="inline" set="null" line="35" static="1">
		<f a="this">
			<d/>
			<c path="__promote.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":extern"/>
			<m n=":to"/>
		</meta>
	</__promote>
	<__cast params="T" get="inline" set="null" line="36" static="1">
		<f a="value">
			<c path="__cast.T"/>
			<x path="Any"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":extern"/>
			<m n=":from"/>
		</meta>
	</__cast>
	<toString get="inline" set="null" line="37" static="1">
		<f a="this">
			<d/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":extern"/>
		</meta>
	</toString>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="_Any.Any_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/Any.hx" private="1" module="Any">
		<__promote params="T" get="inline" set="null" line="35" static="1">
			<f a="this">
				<d/>
				<c path="__promote.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":extern"/>
				<m n=":to"/>
			</meta>
		</__promote>
		<__cast params="T" get="inline" set="null" line="36" static="1">
			<f a="value">
				<c path="__cast.T"/>
				<x path="Any"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":extern"/>
				<m n=":from"/>
			</meta>
		</__cast>
		<toString get="inline" set="null" line="37" static="1">
			<f a="this">
				<d/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":extern"/>
			</meta>
		</toString>
		<meta><m n=":final"/></meta>
	</class>
	<class path="Array" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/Array.hx">
		<ofNative params="X" set="method" line="41" static="1">
			<f a="native">
				<c path="java.NativeArray"><c path="ofNative.X"/></c>
				<c path="Array"><c path="ofNative.X"/></c>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\t\treturn new Array<X>(_native);\n\t"]]></e></m></meta>
		</ofNative>
		<alloc params="Y" set="method" line="49" static="1">
			<f a="size">
				<x path="Int"/>
				<c path="Array"><c path="alloc.Y"/></c>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\t\treturn new Array<Y>((Y[]) ((java.lang.Object)new java.lang.Object[size]));\n\t"]]></e></m></meta>
		</alloc>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<__a><c path="java.NativeArray"><c path="Array.T"/></c></__a>
		<concat public="1" set="method" line="60">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<concatNative set="method" line="71"><f a="a">
	<c path="java.NativeArray"><c path="Array.T"/></c>
	<x path="Void"/>
</f></concatNative>
		<join public="1" set="method" line="90">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method" line="109">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method" line="125">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method" line="141">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method" line="157">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method" line="173">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` is less than or equals
		`pos`, the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method" line="195">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.ArraySort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<quicksort set="method" line="202"><f a="lo:hi:f">
	<x path="Int"/>
	<x path="Int"/>
	<f a=":">
		<c path="Array.T"/>
		<c path="Array.T"/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></quicksort>
		<splice public="1" set="method" line="223">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, an empty Array [] is 
		returned and `this` Array is unchanged.

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<spliceVoid set="method" line="251"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></spliceVoid>
		<toString public="1" set="method" line="274">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use `Std.string()` to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<unshift public="1" set="method" line="293">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<insert public="1" set="method" line="312">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<remove public="1" set="method" line="346">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurrence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed accordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<indexOf public="1" set="method" line="365">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurrence of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method" line="381">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurrence of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<copy public="1" set="method" line="396">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" get="inline" set="null" line="405">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<map public="1" params="S" set="method" line="410">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" set="method" line="417">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<__get set="method" line="425"><f a="idx">
	<x path="Int"/>
	<c path="Array.T"/>
</f></__get>
		<__set set="method" line="434"><f a="idx:v">
	<x path="Int"/>
	<c path="Array.T"/>
	<c path="Array.T"/>
</f></__set>
		<__unsafe_get get="inline" set="null" line="454"><f a="idx">
	<x path="Int"/>
	<c path="Array.T"/>
</f></__unsafe_get>
		<__unsafe_set get="inline" set="null" line="459"><f a="idx:val">
	<x path="Int"/>
	<c path="Array.T"/>
	<c path="Array.T"/>
</f></__unsafe_set>
		<new public="1" set="method" line="54">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.

	@see https://haxe.org/manual/std-Array.html
	@see https://haxe.org/manual/lf-array-comprehension.html</haxe_doc>
		<meta>
			<m n=":classCode"><e>"\n\tpublic Array(T[] _native)\n\t{\n\t\tthis.__a = _native;\n\t\tthis.length = _native.length;\n\t}\n"</e></m>
			<m n=":final"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="_Array.ArrayIterator" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/Array.hx" private="1" module="Array">
		<arr><c path="Array"><c path="_Array.ArrayIterator.T"/></c></arr>
		<len><x path="Int"/></len>
		<i><x path="Int"/></i>
		<hasNext public="1" get="inline" set="null" line="479"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="480"><f a=""><c path="_Array.ArrayIterator.T"/></f></next>
		<new public="1" get="inline" set="null" line="472"><f a="a">
	<c path="Array"><c path="_Array.ArrayIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<abstract path="Class" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/Date.hx">
		<now public="1" set="method" line="92" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" set="method" line="99" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from timestamp `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" line="106" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from a formated string `s`, with the following accepted
		formats:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats are expressed in local time, the third in UTC
		Epoch.</haxe_doc>
		</fromString>
		<date><c path="java.util.Date"/></date>
		<getTime public="1" get="inline" set="null" line="37">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp (in milliseconds) of the date. It might
		only have a per-second precision depending on the platforms.</haxe_doc>
		</getTime>
		<getHours public="1" get="inline" set="null" line="42">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range).</haxe_doc>
		</getHours>
		<getMinutes public="1" get="inline" set="null" line="47">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range).</haxe_doc>
		</getMinutes>
		<getSeconds public="1" get="inline" set="null" line="52">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range).</haxe_doc>
		</getSeconds>
		<getFullYear public="1" get="inline" set="null" line="57">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4-digits).</haxe_doc>
		</getFullYear>
		<getMonth public="1" get="inline" set="null" line="62">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range).</haxe_doc>
		</getMonth>
		<getDate public="1" get="inline" set="null" line="67">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range).</haxe_doc>
		</getDate>
		<getDay public="1" get="inline" set="null" line="72">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range) where `0` is Sunday.</haxe_doc>
		</getDay>
		<toString public="1" set="method" line="77">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date, by using the
		standard format [YYYY-MM-DD HH:MM:SS]. See `DateTools.format` for
		other formating rules.</haxe_doc>
		</toString>
		<new public="1" set="method" line="30">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There are some extra functions available in the `DateTools` class.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
		<meta>
			<m n=":SuppressWarnings"><e>"deprecation"</e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="DateTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/DateTools.hx">
		<DAY_SHORT_NAMES expr="[&quot;Sun&quot;, &quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;]" line="36" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]</e></m></meta>
		</DAY_SHORT_NAMES>
		<DAY_NAMES expr="[&quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;]" line="37" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]</e></m></meta>
		</DAY_NAMES>
		<MONTH_SHORT_NAMES expr="[&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;]" line="38" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]</e></m></meta>
		</MONTH_SHORT_NAMES>
		<MONTH_NAMES expr="[&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;]" line="39" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]</e></m></meta>
		</MONTH_NAMES>
		<__format_get set="method" line="41" static="1">
			<f a="d:e">
				<c path="Date"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__format_get>
		<__format set="method" line="104" static="1"><f a="d:f">
	<c path="Date"/>
	<c path="String"/>
	<c path="String"/>
</f></__format>
		<format public="1" set="method" line="143" static="1">
			<f a="d:f">
				<c path="Date"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Format the date `d` according to the format `f`. The format is
		compatible with the `strftime` standard format, except that there is no
		support in Flash and JS for day and months names (due to lack of proper
		internationalization API). On Haxe/Neko/Windows, some formats are not
		supported.

		```haxe
		var t = DateTools.format(Date.now(), "%Y-%m-%d_%H:%M:%S");
		// 2016-07-08_14:44:05

		var t = DateTools.format(Date.now(), "%r");
		// 02:44:05 PM

		var t = DateTools.format(Date.now(), "%T");
		// 14:44:05

		var t = DateTools.format(Date.now(), "%F");
		// 2016-07-08
		```</haxe_doc>
		</format>
		<delta public="1" get="inline" set="null" line="159" static="1">
			<f a="d:t">
				<c path="Date"/>
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns the result of adding timestamp `t` to Date `d`.

		This is a convenience function for calling
		`Date.fromTime(d.getTime() + t)`.</haxe_doc>
		</delta>
		<DAYS_OF_MONTH expr="[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]" line="163" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]</e></m></meta>
		</DAYS_OF_MONTH>
		<getMonthDays public="1" set="method" line="170" static="1">
			<f a="d">
				<c path="Date"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of days in the month of Date `d`.

		This method handles leap years.</haxe_doc>
		</getMonthDays>
		<seconds public="1" get="inline" set="null" line="184" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of seconds to a timestamp.</haxe_doc>
		</seconds>
		<minutes public="1" get="inline" set="null" line="191" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of minutes to a timestamp.</haxe_doc>
		</minutes>
		<hours public="1" get="inline" set="null" line="198" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of hours to a timestamp.</haxe_doc>
		</hours>
		<days public="1" get="inline" set="null" line="205" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of days to a timestamp.</haxe_doc>
		</days>
		<parse public="1" set="method" line="212" static="1">
			<f a="t">
				<x path="Float"/>
				<a>
					<seconds><x path="Int"/></seconds>
					<ms><x path="Float"/></ms>
					<minutes><x path="Int"/></minutes>
					<hours><x path="Int"/></hours>
					<days><x path="Int"/></days>
				</a>
			</f>
			<haxe_doc>Separate a date-time into several components</haxe_doc>
		</parse>
		<make public="1" set="method" line="228" static="1">
			<f a="o">
				<a>
					<seconds><x path="Int"/></seconds>
					<ms><x path="Float"/></ms>
					<minutes><x path="Int"/></minutes>
					<hours><x path="Int"/></hours>
					<days><x path="Int"/></days>
				</a>
				<x path="Float"/>
			</f>
			<haxe_doc>Build a date-time from several components</haxe_doc>
		</make>
		<haxe_doc>The DateTools class contains some extra functionalities for handling `Date`
	instances and timestamps.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
	</class>
	<class path="EReg" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/EReg.hx">
		<convert set="method" line="52" static="1"><f a="r">
	<c path="String"/>
	<c path="String"/>
</f></convert>
		<pattern><c path="String"/></pattern>
		<matcher><c path="java.util.regex.Matcher"/></matcher>
		<cur><c path="String"/></cur>
		<isGlobal><x path="Bool"/></isGlobal>
		<match public="1" set="method" line="80">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `this` regular expression matches String `s`.

		This method modifies the internal state.

		If `s` is `null`, the result is unspecified.</haxe_doc>
		</match>
		<matched public="1" set="method" line="86">
			<f a="n">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the matched sub-group `n` of `this` EReg.

		This method should only be called after `this.match` or
		`this.matchSub`, and then operates on the String of that operation.

		The index `n` corresponds to the n-th set of parentheses in the pattern
		of `this` EReg. If no such sub-group exists, an exception is thrown.

		If `n` equals 0, the whole matched substring is returned.</haxe_doc>
		</matched>
		<matchedLeft public="1" set="method" line="94">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the part to the left of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the left of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedLeft>
		<matchedRight public="1" set="method" line="99">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the part to the right of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the right of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedRight>
		<matchedPos public="1" set="method" line="104">
			<f a=""><a>
	<pos><x path="Int"/></pos>
	<len><x path="Int"/></len>
</a></f>
			<haxe_doc>Returns the position and length of the last matched substring, within
		the String which was last used as argument to `this.match` or
		`this.matchSub`.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, the position and
		length of the leftmost substring is returned.</haxe_doc>
		</matchedPos>
		<matchSub public="1" set="method" line="109">
			<f a="s:pos:?len" v="::-1">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
			<haxe_doc>Tells if `this` regular expression matches a substring of String `s`.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.match(s.substr(pos,len))` can be used instead.

		This method modifies the internal state.

		If `s` is null, the result is unspecified.</haxe_doc>
		</matchSub>
		<split public="1" set="method" line="115">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Splits String `s` at all substrings `this` EReg matches.

		If a match is found at the start of `s`, the result contains a leading
		empty String "" entry.

		If a match is found at the end of `s`, the result contains a trailing
		empty String "" entry.

		If two matching substrings appear next to each other, the result
		contains the empty String `""` between them.

		By default, this method splits `s` into two parts at the first matched
		substring. If the global g modifier is in place, `s` is split at each
		matched substring.

		If `s` is null, the result is unspecified.</haxe_doc>
		</split>
		<start get="inline" set="null" line="139"><f a="group">
	<x path="Int"/>
	<x path="Int"/>
</f></start>
		<len get="inline" set="null" line="144"><f a="group">
	<x path="Int"/>
	<x path="Int"/>
</f></len>
		<replace public="1" set="method" line="149">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replaces the first substring of `s` which `this` EReg matches with `by`.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `by` contains `$1` to `$9`, the digit corresponds to number of a
		matched sub-group and its value is used instead. If no such sub-group
		exists, the replacement is unspecified. The string `$$` becomes `$`.

		If `s` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<map public="1" set="method" line="156">
			<f a="s:f">
				<c path="String"/>
				<f a="">
					<c path="EReg"/>
					<c path="String"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>Calls the function `f` for the substring of `s` which `this` EReg matches
		and replaces that substring with the result of `f` call.

		The `f` function takes `this` EReg object as its first argument and should
		return a replacement string for the substring matched.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `s` or `f` are null, the result is unspecified.</haxe_doc>
		</map>
		<new public="1" set="method" line="31">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new regular expression with pattern `r` and modifiers `opt`.

		This is equivalent to the shorthand syntax `~/r/opt`

		If `r` or `opt` are null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The EReg class represents regular expressions.

	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.

	EReg instances can be created by calling the constructor, or with the
	special syntax `~/pattern/modifier`

	EReg instances maintain an internal state, which is affected by several of
	its methods.

	A detailed explanation of the supported operations is available at
	<https://haxe.org/manual/std-regex.html>]]></haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="Enum" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/home/travis/build/HaxeFoundation/haxe/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<class path="IntIterator" params="" file="/home/travis/build/HaxeFoundation/haxe/std/IntIterator.hx">
		<min><x path="Int"/></min>
		<max><x path="Int"/></max>
		<hasNext public="1" get="inline" set="null" line="54">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns true if the iterator has other items, false otherwise.</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="63">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Moves to the next item of the iterator.

		If this is called while hasNext() is false, the result is unspecified.</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="46">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Iterates from `min` (inclusive) to `max` (exclusive).

		If `max <= min`, the iterator will not act as a countdown.]]></haxe_doc>
		</new>
		<haxe_doc>IntIterator is used for implementing interval iterations.

	It is usually not used explicitly, but through its special syntax:
	`min...max`

	While it is possible to assign an instance of IntIterator to a variable or
	field, it is worth noting that IntIterator does not reset after being used
	in a for-loop. Subsequent uses of the same instance will then have no
	effect.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</class>
	<class path="Lambda" params="" file="/home/travis/build/HaxeFoundation/haxe/std/Lambda.hx">
		<array public="1" params="A" set="method" line="44" static="1">
			<f a="it">
				<t path="Iterable"><c path="array.A"/></t>
				<c path="Array"><c path="array.A"/></c>
			</f>
			<haxe_doc>Creates an Array from Iterable `it`.

		If `it` is an Array, this function returns a copy of it.</haxe_doc>
		</array>
		<list public="1" params="A" set="method" line="56" static="1">
			<f a="it">
				<t path="Iterable"><c path="list.A"/></t>
				<c path="List"><c path="list.A"/></c>
			</f>
			<haxe_doc>Creates a List form Iterable `it`.

		If `it` is a List, this function returns a copy of it.</haxe_doc>
		</list>
		<map public="1" params="A:B" set="method" line="70" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="map.A"/></t>
				<f a="">
					<c path="map.A"/>
					<c path="map.B"/>
				</f>
				<c path="List"><c path="map.B"/></c>
			</f>
			<haxe_doc>Creates a new List by applying function `f` to all elements of `it`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<mapi public="1" params="A:B" set="method" line="84" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="mapi.A"/></t>
				<f a=":">
					<x path="Int"/>
					<c path="mapi.A"/>
					<c path="mapi.B"/>
				</f>
				<c path="List"><c path="mapi.B"/></c>
			</f>
			<haxe_doc>Similar to map, but also passes the index of each element to `f`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</mapi>
		<flatten public="1" params="A" set="method" line="97" static="1">
			<f a="it">
				<t path="Iterable"><t path="Iterable"><c path="flatten.A"/></t></t>
				<c path="List"><c path="flatten.A"/></c>
			</f>
			<haxe_doc>Concatenate a list of lists.

		The order of elements is preserved.</haxe_doc>
		</flatten>
		<flatMap public="1" params="A:B" set="method" line="112" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="flatMap.A"/></t>
				<f a="">
					<c path="flatMap.A"/>
					<t path="Iterable"><c path="flatMap.B"/></t>
				</f>
				<c path="List"><c path="flatMap.B"/></c>
			</f>
			<haxe_doc>A composition of map and flatten.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</flatMap>
		<has public="1" params="A" set="method" line="124" static="1">
			<f a="it:elt">
				<t path="Iterable"><c path="has.A"/></t>
				<c path="has.A"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains `elt`.

		This function returns true as soon as an element is found which is equal
		to `elt` according to the `==` operator.

		If no such element is found, the result is false.</haxe_doc>
		</has>
		<exists public="1" params="A" set="method" line="141" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="exists.A"/></t>
				<f a="">
					<c path="exists.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains an element for which `f` is true.

		This function returns true as soon as an element is found for which a
		call to `f` returns true.

		If no such element is found, the result is false.

		If `f` is null, the result is unspecified.</haxe_doc>
		</exists>
		<foreach public="1" params="A" set="method" line="160" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="foreach.A"/></t>
				<f a="">
					<c path="foreach.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is true for all elements of `it`.

		This function returns false as soon as an element is found for which a
		call to `f` returns false.

		If no such element is found, the result is true.

		In particular, this function always returns true if `it` is empty.

		If `f` is null, the result is unspecified.</haxe_doc>
		</foreach>
		<iter public="1" params="A" set="method" line="172" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="iter.A"/></t>
				<f a="">
					<c path="iter.A"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls `f` on all elements of `it`, in order.

		If `f` is null, the result is unspecified.</haxe_doc>
		</iter>
		<filter public="1" params="A" set="method" line="185" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="filter.A"/></t>
				<f a="">
					<c path="filter.A"/>
					<x path="Bool"/>
				</f>
				<c path="List"><c path="filter.A"/></c>
			</f>
			<haxe_doc>Returns a List containing those elements of `it` for which `f` returned
		true.

		If `it` is empty, the result is the empty List even if `f` is null.

		Otherwise if `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<fold public="1" params="A:B" set="method" line="205" static="1">
			<f a="it:f:first">
				<t path="Iterable"><c path="fold.A"/></t>
				<f a=":">
					<c path="fold.A"/>
					<c path="fold.B"/>
					<c path="fold.B"/>
				</f>
				<c path="fold.B"/>
				<c path="fold.B"/>
			</f>
			<haxe_doc>Functional fold on Iterable `it`, using function `f` with start argument
		`first`.

		If `it` has no elements, the result is `first`.

		Otherwise the first element of `it` is passed to `f` alongside `first`.
		The result of that call is then passed to `f` with the next element of
		`it`, and so on until `it` has no more elements.

		If `it` or `f` are null, the result is unspecified.</haxe_doc>
		</fold>
		<count public="1" params="A" set="method" line="217" static="1">
			<f a="it:?pred">
				<t path="Iterable"><c path="count.A"/></t>
				<f a="">
					<c path="count.A"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of elements in `it` for which `pred` is true, or the
		total number of elements in `it` if `pred` is null.

		This function traverses all elements.</haxe_doc>
		</count>
		<empty public="1" params="T" set="method" line="232" static="1">
			<f a="it">
				<t path="Iterable"><c path="empty.T"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if Iterable `it` does not contain any element.</haxe_doc>
		</empty>
		<indexOf public="1" params="T" set="method" line="243" static="1">
			<f a="it:v">
				<t path="Iterable"><c path="indexOf.T"/></t>
				<c path="indexOf.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of the first element `v` within Iterable `it`.

		This function uses operator `==` to check for equality.

		If `v` does not exist in `it`, the result is -1.</haxe_doc>
		</indexOf>
		<find public="1" params="T" set="method" line="263" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="find.T"/></t>
				<f a="">
					<c path="find.T"/>
					<x path="Bool"/>
				</f>
				<t path="Null"><c path="find.T"/></t>
			</f>
			<haxe_doc>Returns the first element of `it` for which `f` is true.

		This function returns as soon as an element is found for which a call to
		`f` returns true.

		If no such element is found, the result is null.

		If `f` is null, the result is unspecified.</haxe_doc>
		</find>
		<concat public="1" params="T" set="method" line="276" static="1">
			<f a="a:b">
				<t path="Iterable"><c path="concat.T"/></t>
				<t path="Iterable"><c path="concat.T"/></t>
				<c path="List"><c path="concat.T"/></c>
			</f>
			<haxe_doc>Returns a new List containing all elements of Iterable `a` followed by
		all elements of Iterable `b`.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</concat>
		<haxe_doc>The `Lambda` class is a collection of methods to support functional
	programming. It is ideally used with `using Lambda` and then acts as an
	extension to Iterable types.

	On static platforms, working with the Iterable structure might be slower
	than performing the operations directly on known types, such as Array and
	List.

	If the first argument to any of the methods is null, the result is
	unspecified.

	@see https://haxe.org/manual/std-Lambda.html</haxe_doc>
	</class>
	<class path="List" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/List.hx">
		<h><c path="_List.ListNode"><c path="List.T"/></c></h>
		<q><c path="_List.ListNode"><c path="List.T"/></c></q>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` List.</haxe_doc>
		</length>
		<add public="1" set="method" line="52">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the end of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</add>
		<push public="1" set="method" line="67">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the beginning of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<first public="1" set="method" line="80">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		This function does not modify `this` List.</haxe_doc>
		</first>
		<last public="1" set="method" line="89">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the last element of `this` List, or null if no elements exist.

		This function does not modify `this` List.</haxe_doc>
		</last>
		<pop public="1" set="method" line="99">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		The element is removed from `this` List.</haxe_doc>
		</pop>
		<isEmpty public="1" set="method" line="113">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if `this` List is empty.</haxe_doc>
		</isEmpty>
		<clear public="1" set="method" line="123">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Empties `this` List.

		This function does not traverse the elements, but simply sets the
		internal references to null and `this.length` to 0.</haxe_doc>
		</clear>
		<remove public="1" set="method" line="137">
			<f a="v">
				<c path="List.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurrence of `v` in `this` List.

		If `v` is found by checking standard equality, it is removed from `this`
		List and the function returns true.

		Otherwise, false is returned.</haxe_doc>
		</remove>
		<iterator public="1" get="inline" set="null" line="160">
			<f a=""><c path="_List.ListIterator"><c path="List.T"/></c></f>
			<haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="170">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` List.

		The result is enclosed in { } with the individual elements being
		separated by a comma.</haxe_doc>
		</toString>
		<join public="1" set="method" line="191">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` List, with `sep` separating
		each element.</haxe_doc>
		</join>
		<filter public="1" set="method" line="210">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<x path="Bool"/>
				</f>
				<c path="List"><c path="List.T"/></c>
			</f>
			<haxe_doc>Returns a list filtered with `f`. The returned list will contain all
		elements for which `f(x) == true`.</haxe_doc>
		</filter>
		<map public="1" params="X" set="method" line="226">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<c path="map.X"/>
				</f>
				<c path="List"><c path="map.X"/></c>
			</f>
			<haxe_doc>Returns a new list where all elements have been converted by the
		function `f`.</haxe_doc>
		</map>
		<new public="1" set="method" line="43">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of element container objects
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole list content every time.

	@see https://haxe.org/manual/std-List.html</haxe_doc>
	</class>
	<class path="_List.ListNode" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/List.hx" private="1" module="List">
		<create public="1" params="T" get="inline" set="null" line="259" static="1">
			<f a="item:next">
				<c path="create.T"/>
				<c path="_List.ListNode"><c path="create.T"/></c>
				<c path="_List.ListNode"><c path="create.T"/></c>
			</f>
			<meta><m n=":extern"/></meta>
		</create>
		<item public="1"><c path="_List.ListNode.T"/></item>
		<next public="1"><c path="_List.ListNode"><c path="_List.ListNode.T"/></c></next>
		<new public="1" set="method" line="255"><f a="item:next">
	<c path="_List.ListNode.T"/>
	<c path="_List.ListNode"><c path="_List.ListNode.T"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="_List.ListIterator" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/List.hx" private="1" module="List">
		<head><c path="_List.ListNode"><c path="_List.ListIterator.T"/></c></head>
		<hasNext public="1" get="inline" set="null" line="272"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="276"><f a=""><c path="_List.ListIterator.T"/></f></next>
		<new public="1" get="inline" set="null" line="268"><f a="head">
	<c path="_List.ListNode"><c path="_List.ListIterator.T"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="Map" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><t path="IMap">
	<c path="Map.K"/>
	<c path="Map.V"/>
</t></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `key1 => value1, key2 => value2` syntax.

	Map is an abstract type, it is not available at runtime.

	@see https://haxe.org/manual/std-Map.html]]></haxe_doc>
		<meta><m n=":multiType"><e>@:followWithAbstracts K</e></m></meta>
		<impl><class path="_Map.Map_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/Map.hx" private="1" module="Map">
	<_new public="1" set="method" static="1">
		<f a=""><x path="Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></f>
		<meta>
			<m n=":extern"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if K is a `String`, `haxe.ds.StringMap` is used
		2. if K is an `Int`, `haxe.ds.IntMap` is used
		3. if K is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if K is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if K is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on ObjectMap by default.</haxe_doc>
	</_new>
	<set public="1" get="inline" set="null" line="73" static="1">
		<f a="this:key:value">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="Map.K"/>
			<c path="Map.V"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Maps `key` to `value`.

		If `key` already has a mapping, the previous value disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
	</set>
	<get public="1" get="inline" set="null" line="90" static="1">
		<f a="this:key">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="Map.K"/>
			<t path="Null"><c path="Map.V"/></t>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Returns the current mapping of `key`.

		If no such mapping exists, null is returned.

		Note that a check like `map.get(key) == null` can hold for two reasons:

		1. the map has no mapping for `key`
		2. the map has a mapping with a value of `null`

		If it is important to distinguish these cases, `exists()` should be
		used.

		If `key` is null, the result is unspecified.</haxe_doc>
	</get>
	<exists public="1" get="inline" set="null" line="97" static="1">
		<f a="this:key">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="Map.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns true if `key` has a mapping, false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="105" static="1">
		<f a="this:key">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="Map.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Removes the mapping of `key` and returns true if such a mapping existed,
		false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="112" static="1">
		<f a="this">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<t path="Iterator"><c path="Map.K"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an Iterator over the keys of `this` Map.

		The order of keys is undefined.</haxe_doc>
	</keys>
	<iterator public="1" get="inline" set="null" line="121" static="1">
		<f a="this">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<t path="Iterator"><c path="Map.V"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an Iterator over the values of `this` Map.

		The order of values is undefined.</haxe_doc>
	</iterator>
	<toString public="1" get="inline" set="null" line="130" static="1">
		<f a="this">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a String representation of `this` Map.

		The exact representation depends on the platform and key-type.</haxe_doc>
	</toString>
	<arrayWrite public="1" get="inline" set="null" line="134" static="1">
		<f a="this:k:v">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="Map.K"/>
			<c path="Map.V"/>
			<c path="Map.V"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
			<m n=":noCompletion"/>
		</meta>
	</arrayWrite>
	<toStringMap params="K:V" get="inline" set="null" line="139" static="1">
		<f a="t">
			<t path="IMap">
				<c path="toStringMap.K"/>
				<c path="toStringMap.V"/>
			</t>
			<c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toStringMap>
	<toIntMap params="K:V" get="inline" set="null" line="143" static="1">
		<f a="t">
			<t path="IMap">
				<c path="toIntMap.K"/>
				<c path="toIntMap.V"/>
			</t>
			<c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toIntMap>
	<toEnumValueMapMap params="K:V" get="inline" set="null" line="147" static="1">
		<f a="t">
			<t path="IMap">
				<c path="toEnumValueMapMap.K"/>
				<c path="toEnumValueMapMap.V"/>
			</t>
			<c path="haxe.ds.EnumValueMap">
				<c path="toEnumValueMapMap.K"/>
				<c path="toEnumValueMapMap.V"/>
			</c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toEnumValueMapMap>
	<toObjectMap params="K:V" get="inline" set="null" line="151" static="1">
		<f a="t">
			<t path="IMap">
				<c path="toObjectMap.K"/>
				<c path="toObjectMap.V"/>
			</t>
			<c path="haxe.ds.ObjectMap">
				<c path="toObjectMap.K"/>
				<c path="toObjectMap.V"/>
			</c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toObjectMap>
	<fromStringMap params="V" get="inline" set="null" line="155" static="1">
		<f a="map">
			<c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c>
			<x path="Map">
				<c path="String"/>
				<c path="fromStringMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromStringMap>
	<fromIntMap params="V" get="inline" set="null" line="159" static="1">
		<f a="map">
			<c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c>
			<x path="Map">
				<x path="Int"/>
				<c path="fromIntMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromIntMap>
	<fromObjectMap params="K:V" get="inline" set="null" line="163" static="1">
		<f a="map">
			<c path="haxe.ds.ObjectMap">
				<c path="fromObjectMap.K"/>
				<c path="fromObjectMap.V"/>
			</c>
			<x path="Map">
				<c path="fromObjectMap.K"/>
				<c path="fromObjectMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromObjectMap>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="_Map.Map_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/Map.hx" private="1" module="Map">
		<_new public="1" set="method" static="1">
			<f a=""><x path="Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></f>
			<meta>
				<m n=":extern"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if K is a `String`, `haxe.ds.StringMap` is used
		2. if K is an `Int`, `haxe.ds.IntMap` is used
		3. if K is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if K is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if K is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on ObjectMap by default.</haxe_doc>
		</_new>
		<set public="1" get="inline" set="null" line="73" static="1">
			<f a="this:key:value">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="Map.K"/>
				<c path="Map.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Maps `key` to `value`.

		If `key` already has a mapping, the previous value disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="90" static="1">
			<f a="this:key">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="Map.K"/>
				<t path="Null"><c path="Map.V"/></t>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Returns the current mapping of `key`.

		If no such mapping exists, null is returned.

		Note that a check like `map.get(key) == null` can hold for two reasons:

		1. the map has no mapping for `key`
		2. the map has a mapping with a value of `null`

		If it is important to distinguish these cases, `exists()` should be
		used.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="97" static="1">
			<f a="this:key">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="Map.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns true if `key` has a mapping, false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="105" static="1">
			<f a="this:key">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="Map.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Removes the mapping of `key` and returns true if such a mapping existed,
		false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="112" static="1">
			<f a="this">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<t path="Iterator"><c path="Map.K"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an Iterator over the keys of `this` Map.

		The order of keys is undefined.</haxe_doc>
		</keys>
		<iterator public="1" get="inline" set="null" line="121" static="1">
			<f a="this">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<t path="Iterator"><c path="Map.V"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an Iterator over the values of `this` Map.

		The order of values is undefined.</haxe_doc>
		</iterator>
		<toString public="1" get="inline" set="null" line="130" static="1">
			<f a="this">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a String representation of `this` Map.

		The exact representation depends on the platform and key-type.</haxe_doc>
		</toString>
		<arrayWrite public="1" get="inline" set="null" line="134" static="1">
			<f a="this:k:v">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="Map.K"/>
				<c path="Map.V"/>
				<c path="Map.V"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
				<m n=":noCompletion"/>
			</meta>
		</arrayWrite>
		<toStringMap params="K:V" get="inline" set="null" line="139" static="1">
			<f a="t">
				<t path="IMap">
					<c path="toStringMap.K"/>
					<c path="toStringMap.V"/>
				</t>
				<c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toStringMap>
		<toIntMap params="K:V" get="inline" set="null" line="143" static="1">
			<f a="t">
				<t path="IMap">
					<c path="toIntMap.K"/>
					<c path="toIntMap.V"/>
				</t>
				<c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toIntMap>
		<toEnumValueMapMap params="K:V" get="inline" set="null" line="147" static="1">
			<f a="t">
				<t path="IMap">
					<c path="toEnumValueMapMap.K"/>
					<c path="toEnumValueMapMap.V"/>
				</t>
				<c path="haxe.ds.EnumValueMap">
					<c path="toEnumValueMapMap.K"/>
					<c path="toEnumValueMapMap.V"/>
				</c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toEnumValueMapMap>
		<toObjectMap params="K:V" get="inline" set="null" line="151" static="1">
			<f a="t">
				<t path="IMap">
					<c path="toObjectMap.K"/>
					<c path="toObjectMap.V"/>
				</t>
				<c path="haxe.ds.ObjectMap">
					<c path="toObjectMap.K"/>
					<c path="toObjectMap.V"/>
				</c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toObjectMap>
		<fromStringMap params="V" get="inline" set="null" line="155" static="1">
			<f a="map">
				<c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c>
				<x path="Map">
					<c path="String"/>
					<c path="fromStringMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromStringMap>
		<fromIntMap params="V" get="inline" set="null" line="159" static="1">
			<f a="map">
				<c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c>
				<x path="Map">
					<x path="Int"/>
					<c path="fromIntMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromIntMap>
		<fromObjectMap params="K:V" get="inline" set="null" line="163" static="1">
			<f a="map">
				<c path="haxe.ds.ObjectMap">
					<c path="fromObjectMap.K"/>
					<c path="fromObjectMap.V"/>
				</c>
				<x path="Map">
					<c path="fromObjectMap.K"/>
					<c path="fromObjectMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromObjectMap>
		<meta><m n=":final"/></meta>
	</class>
	<typedef path="IMap" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":deprecated"/>
		</meta>
	</typedef>
	<class path="Math" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/Math.hx" extern="1">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter,
		specified by the constant, π. `PI` is approximately 3.141592653589793.</haxe_doc>
		</PI>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc><![CDATA[A special `Float` constant which denotes an invalid number.

		NaN stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: Math.sqrt(-1).

		All further operations with `NaN` as an operand will result in `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.

		In order to test if a value is `NaN`, you should use `Math.isNaN()` function.

		@php In PHP versions prior to 5.3.1 VC 9 there may be unexpected
		results when performing arithmetic operations with `NaN` on Windows,
		see <https://bugs.php.net/bug.php?id=42143>]]></haxe_doc>
		</NaN>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes negative infinity.

		For example, this is the result of -1.0 / 0.0.

		Operations with `NEGATIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes positive infinity.

		For example, this is the result of 1.0 / 0.0.

		Operations with `POSITIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<abs public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.

		If `v` is positive or 0, the result is unchanged. Otherwise the result
		is -`v`.

		If `v` is `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is
		`POSITIVE_INFINITY`.

		If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</abs>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		If `a` or `b` are `NaN`, the result is `NaN`.
		If `a` or `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.
		If `a` and `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.</haxe_doc>
		</min>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		If `a` or `b` are `NaN`, the result is `NaN`.
		If `a` or `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `a` and `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</max>
		<sin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</sin>
		<cos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</cos>
		<atan2 public="1" set="method" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent whose tangent is the quotient of
		two specified numbers, in radians.

		If parameter `x` or `y`  is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is `NaN`.</haxe_doc>
		</atan2>
		<tan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric tangent of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</tan>
		<exp public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.

		exp(1.0) is approximately 2.718281828459.

		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `NEGATIVE_INFINITY`, the result is `0.0`.
		If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</exp>
		<log public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.

		This is the mathematical inverse operation of exp,
		i.e. `log(exp(v)) == v` always holds.

		If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result
		is `NaN`.
		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `0.0`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</log>
		<sqrt public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.

		If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result
		is `NaN`.
		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `0.0`, the result is `0.0`.</haxe_doc>
		</sqrt>
		<round public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value.

		Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</ceil>
		<atan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</atan>
		<fround public="1" get="inline" set="null" line="45" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fround>
		<ffloor public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></ffloor>
		<fceil public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fceil>
		<asin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</asin>
		<acos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc cosine of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</acos>
		<pow public="1" set="method" static="1">
			<f a="v:exp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a specified base `v` raised to the specified power `exp`.</haxe_doc>
		</pow>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to 0.0,
		and less than 1.0.</haxe_doc>
		</random>
		<isFinite public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is `POSITIVE_INFINITY`, `NEGATIVE_INFINITY` or `NaN`, the result
		is `false`, otherwise the result is `true`.</haxe_doc>
		</isFinite>
		<isNaN public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is not a valid number.

		If `f` is `NaN`, the result is `true`, otherwise the result is `false`.
		In particular, both `POSITIVE_INFINITY` and `NEGATIVE_INFINITY` are
		not considered `NaN`.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.

	@see https://haxe.org/manual/std-math.html</haxe_doc>
		<meta>
			<m n=":coreApi"/>
			<m n=":native"><e>"java.lang.Math"</e></m>
		</meta>
	</class>
	<class path="Reflect" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/Reflect.hx">
		<hasField public="1" set="method" line="30" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if structure `o` has a field named `field`.

		This is only guaranteed to work for anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</hasField>
		<field public="1" set="method" line="39" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Returns the value of the field named `field` on object `o`.

		If `o` is not an object or has no field named `field`, the result is
		null.

		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.

		If `field` is null, the result is unspecified.

		(As3) If used on a property field, the getter will be invoked. It is
		not possible to obtain the value directly.</haxe_doc>
		</field>
		<setField public="1" set="method" line="48" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`.

		If `o` has no field named `field`, this function is only guaranteed to
		work for anonymous structures.

		If `o` or `field` are null, the result is unspecified.

		(As3) If used on a property field, the setter will be invoked. It is
		not possible to set the value directly.</haxe_doc>
		</setField>
		<getProperty public="1" set="method" line="57" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the value of the field named `field` on object `o`, taking
		property getter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.field`, but might be slower.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</getProperty>
		<setProperty public="1" set="method" line="68" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`, taking
		property setter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.setField`, but might be slower.

		If `field` is null, the result is unspecified.</haxe_doc>
		</setProperty>
		<callMethod public="1" set="method" line="79" static="1">
			<f a="o:func:args">
				<d/>
				<x path="haxe.Function"/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Call a method with the given object and arguments.</haxe_doc>
		</callMethod>
		<fields public="1" set="method" line="85" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Returns the fields of structure `o`.

		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="98" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `f` is a function, false otherwise.

		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" line="103" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares `a` and `b`.

		If `a` is less than `b`, the result is negative. If `b` is less than
		`a`, the result is positive. If `a` and `b` are equal, the result is 0.

		This function is only defined if `a` and `b` are of the same type.

		If that type is a function, the result is unspecified and
		`Reflect.compareMethods` should be used instead.

		For all other types, the result is 0 if `a` and `b` are equal. If they
		are not equal, the result depends on the type and is negative if:

		- Numeric types: a is less than b
		- String: a is lexicographically less than b
		- Other: unspecified

		If `a` and `b` are null, the result is 0. If only one of them is null,
		the result is unspecified.</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" line="109" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":access"><e>java.internal.Closure</e></m></meta>
			<haxe_doc>Compares the functions `f1` and `f2`.

		If `f1` or `f2` are not functions, the result is unspecified.

		Otherwise the result is true if `f1` and the `f2` are physically equal,
		false otherwise.</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" line="122" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Tells if `v` is an object.

		The result is true if `v` is one of the following:

		- class instance
		- structure
		- `Class<T>`
		- `Enum<T>`

		Otherwise, including if `v` is null, the result is false.]]></haxe_doc>
		</isObject>
		<isEnumValue public="1" set="method" line="127" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `v` is an enum value.

		The result is true if `v` is of type EnumValue, i.e. an enum
		constructor.

		Otherwise, including if `v` is null, the result is false.</haxe_doc>
		</isEnumValue>
		<deleteField public="1" set="method" line="131" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the field named `field` from structure `o`.

		This method is only guaranteed to work on anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" line="136" static="1">
			<f a="o">
				<c path="copy.T"/>
				<c path="copy.T"/>
			</f>
			<haxe_doc>Copies the fields of structure `o`.

		This is only guaranteed to work on anonymous structures.

		If `o` is null, the result is unspecified.</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" line="145" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
			<overloads><makeVarArgs public="1" set="method"><f a="f">
	<f a="">
		<c path="Array"><d/></c>
		<x path="Void"/>
	</f>
	<d/>
</f></makeVarArgs></overloads>
		</makeVarArgs>
		<haxe_doc>The Reflect API is a way to manipulate values dynamically through an
	abstract interface in an untyped manner. Use with care.

	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="Std" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/Std.hx">
		<is public="1" set="method" line="28" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.</haxe_doc>
		</is>
		<string public="1" set="method" line="56" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" set="method" line="60" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="134" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\tif (x == null) return null;\n\n\t\tint ret = 0;\n\t\tint base = 10;\n\t\tint i = 0;\n\t\tint len = x.length();\n\n\t\tif (x.startsWith(\"0\") && len > 2)\n\t\t{\n\t\t\tchar c = x.charAt(1);\n\t\t\tif (c == 'x' || c == 'X')\n\t\t\t{\n\t\t\t\ti = 2;\n\t\t\t\tbase = 16;\n\t\t\t}\n\t\t}\n\n\t\tboolean foundAny = i != 0;\n\t\tboolean isNeg = false;\n\t\tfor (; i < len; i++)\n\t\t{\n\t\t\tchar c = x.charAt(i);\n\t\t\tif (!foundAny)\n\t\t\t{\n\t\t\t\tswitch(c)\n\t\t\t\t{\n\t\t\t\t\tcase '-':\n\t\t\t\t\t\tisNeg = true;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tcase '+':\n\t\t\t\t\tcase '\\n':\n\t\t\t\t\tcase '\\t':\n\t\t\t\t\tcase '\\r':\n\t\t\t\t\tcase ' ':\n\t\t\t\t\t\tif (isNeg) return null;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (c >= '0' && c <= '9')\n\t\t\t{\n\t\t\t\tif (!foundAny && c == '0')\n\t\t\t\t{\n\t\t\t\t\tfoundAny = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tret *= base; foundAny = true;\n\n\t\t\t\tret += ((int) (c - '0'));\n\t\t\t} else if (base == 16) {\n\t\t\t\tif (c >= 'a' && c <= 'f') {\n\t\t\t\t\tret *= base; foundAny = true;\n\t\t\t\t\tret += ((int) (c - 'a')) + 10;\n\t\t\t\t} else if (c >= 'A' && c <= 'F') {\n\t\t\t\t\tret *= base; foundAny = true;\n\t\t\t\t\tret += ((int) (c - 'A')) + 10;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (foundAny)\n\t\t\treturn isNeg ? -ret : ret;\n\t\telse\n\t\t\treturn null;\n\t"]]></e></m></meta>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If the input cannot be recognized, the result is `null`.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="138" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a `NaN` value instead of null.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<instance public="1" params="T:S" get="inline" set="null" line="186" static="1">
			<f a="value:c">
				<c path="instance.T"/>
				<x path="Class"><c path="instance.S"/></x>
				<c path="instance.S"/>
			</f>
			<haxe_doc>Checks if object `value` is an instance of class `c`.

		Compiles only if the class specified by `c` can be assigned to the type
		of `value`.

		This method checks if a downcast is possible. That is, if the runtime
		type of `value` is assignable to the class specified by `c`, `value` is
		returned. Otherwise null is returned.

		This method is not guaranteed to work with interfaces or core types such
		as `String`, `Array` and `Date`.

		If `value` is null, the result is null. If `c` is null, the result is
		unspecified.</haxe_doc>
		</instance>
		<random public="1" set="method" line="190" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":coreApi"/>
			<m n=":nativeGen"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="/home/travis/build/HaxeFoundation/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/home/travis/build/HaxeFoundation/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/home/travis/build/HaxeFoundation/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Single" params="" file="/home/travis/build/HaxeFoundation/haxe/std/StdTypes.hx" module="StdTypes">
		<from><icast><x path="Float"/></icast></from>
		<this><x path="Single"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc>Single-precision IEEE 32bit float (4-byte).</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Null" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>`Null` can be useful in two cases. In order to document some methods
	that accept or can return a `null` value, or for the Flash compiler and AS3
	generator to distinguish between base values that can be `null` and others that
	can't.

	@see https://haxe.org/manual/types-nullability.html</haxe_doc>
	</typedef>
	<abstract path="Bool" params="" file="/home/travis/build/HaxeFoundation/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="java.lang.CharSequence" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/CharSequence.class" extern="1" interface="1"><meta>
	<m n=":abstract"/>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.CharSequence"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"CharSequence"</e>
	</m>
</meta></class>
	<class path="String" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/String.hx" extern="1">
		<implements path="java.lang.CharSequence"/>
		<fromCharCode public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<compareTo set="method"><f a="anotherString">
	<c path="String"/>
	<x path="Int"/>
</f></compareTo>
		<codePointAt set="method"><f a="idx">
	<x path="Int"/>
	<x path="Int"/>
</f></codePointAt>
		<getBytes set="method">
			<f a="encoding">
				<c path="String"/>
				<t path="haxe.io.BytesData"/>
			</f>
			<overloads><getBytes set="method"><f a=""><t path="haxe.io.BytesData"/></f></getBytes></overloads>
		</getBytes>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
			<overloads>
				<new public="1" set="method"><f a="b:offset:length:charsetName">
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="b:offset:length">
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.
	
	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="StringBuf" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/StringBuf.hx">
		<b><c path="java.lang.StringBuilder"/></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` StringBuf in characters.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="34"><f a=""><x path="Int"/></f></get_length>
		<add public="1" params="T" set="method" line="38">
			<f a="x">
				<c path="add.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the representation of `x` to `this` StringBuf.

		The exact representation of `x` may vary per platform. To get more
		consistent behavior, this function should be called with
		Std.string(x).

		If `x` is null, the String "null" is appended.</haxe_doc>
		</add>
		<addSub public="1" set="method" line="49">
			<f a="s:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a substring of `s` to `this` StringBuf.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.add(s.substr(pos,len))` can be used instead.

		If `s` or `pos` are null, the result is unspecified.

		If `len` is omitted or null, the substring ranges from `pos` to the end
		of `s`.</haxe_doc>
		</addSub>
		<addChar public="1" set="method" line="54">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Appends the character identified by `c` to `this` StringBuf.

		If `c` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</addChar>
		<toString public="1" set="method" line="58">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the content of `this` StringBuf as String.

		The buffer is not emptied by this operation.</haxe_doc>
		</toString>
		<new public="1" set="method" line="30">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Its cross-platform implementation uses String concatenation internally, but
	StringBuf may be optimized for different targets.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values. However, the internal buffer cannot be modified.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="StringTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/StringTools.hx">
		<urlEncode public="1" set="method" line="37" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encode an URL by using the standard format.</haxe_doc>
		</urlEncode>
		<postProcessUrlEncode set="method" line="69" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></postProcessUrlEncode>
		<urlDecode public="1" set="method" line="107" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Decode an URL using the standard format.</haxe_doc>
		</urlDecode>
		<htmlEscape public="1" set="method" line="153" static="1">
			<f a="s:?quotes">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Escapes HTML special characters of the string `s`.

		The following replacements are made:

		- `&` becomes `&amp`;
		- `<` becomes `&lt`;
		- `>` becomes `&gt`;

		If `quotes` is true, the following characters are also replaced:

		- `"` becomes `&quot`;
		- `'` becomes `&#039`;]]></haxe_doc>
		</htmlEscape>
		<htmlUnescape public="1" set="method" line="172" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Unescapes HTML special characters of the string `s`.

		This is the inverse operation to htmlEscape, i.e. the following always
		holds: `htmlUnescape(htmlEscape(s)) == s`

		The replacements follow:

		- `&amp;` becomes `&`
		- `&lt;` becomes `<`
		- `&gt;` becomes `>`
		- `&quot;` becomes `"`
		- `&#039;` becomes `'`]]></haxe_doc>
		</htmlUnescape>
		<startsWith public="1" get="inline" set="null" line="183" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if the string `s` starts with the string `start`.

		If `start` is `null`, the result is unspecified.

		If `start` is the empty String `""`, the result is true.</haxe_doc>
		</startsWith>
		<endsWith public="1" get="inline" set="null" line="211" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if the string `s` ends with the string `end`.

		If `end` is `null`, the result is unspecified.

		If `end` is the empty String `""`, the result is true.</haxe_doc>
		</endsWith>
		<isSpace public="1" set="method" line="245" static="1">
			<f a="s:pos">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the character in the string `s` at position `pos` is a space.

		A character is considered to be a space character if its character code
		is 9,10,11,12,13 or 32.

		If `s` is the empty String `""`, or if pos is not a valid position within
		`s`, the result is false.</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="262" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="287" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</rtrim>
		<trim public="1" get="inline" set="null" line="309" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Removes leading and trailing space characters of `s`.

		This is a convenience function for `ltrim(rtrim(s))`.</haxe_doc>
		</trim>
		<lpad public="1" set="method" line="331" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Concatenates `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String `""` or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</lpad>
		<rpad public="1" set="method" line="353" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Appends `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String `""` or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</rpad>
		<replace public="1" set="method" line="374" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Replace all occurrences of the String `sub` in the String `s` by the
		String `by`.

		If `sub` is the empty String `""`, `by` is inserted after each character
		of `s`. If `by` is also the empty String `""`, `s` remains unchanged.

		This is a convenience function for `s.split(sub).join(by)`.

		If `sub` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<hex public="1" set="method" line="396" static="1">
			<f a="n:?digits">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `n` into a hexadecimal representation.

		If `digits` is specified, the resulting String is padded with "0" until
		its `length` equals `digits`.</haxe_doc>
		</hex>
		<fastCodeAt public="1" get="inline" set="null" line="438" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the character code at position `index` of String `s`, or an
		end-of-file indicator at if `position` equals `s.length`.

		This method is faster than `String.charCodeAt()` on some platforms, but
		the result is unspecified if `index` is negative or greater than
		`s.length`.

		End of file status can be checked by calling `StringTools.isEof()` with
		the returned value as argument.

		This operation is not guaranteed to work if `s` contains the `\0`
		character.</haxe_doc>
		</fastCodeAt>
		<isEof public="1" get="inline" set="null" line="465" static="1">
			<f a="c">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</isEof>
		<quoteUnixArg public="1" set="method" line="488" static="1">
			<f a="argument">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Unix.
		The input will be quoted, or escaped if necessary.</haxe_doc>
		</quoteUnixArg>
		<winMetaCharacters public="1" expr="[&quot; &quot;.code, &quot;(&quot;.code, &quot;)&quot;.code, &quot;%&quot;.code, &quot;!&quot;.code, &quot;^&quot;.code, &quot;\&quot;&quot;.code, &quot;&lt;&quot;.code, &quot;&gt;&quot;.code, &quot;&amp;&quot;.code, &quot;|&quot;.code, &quot;\n&quot;.code, &quot;\r&quot;.code, &quot;,&quot;.code, &quot;;&quot;.code]" line="506" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e><![CDATA[[" ".code, "(".code, ")".code, "%".code, "!".code, "^".code, "\"".code, "<".code, ">".code, "&".code, "|".code, "\n".code, "\r".code, ",".code, ";".code]]]></e></m></meta>
			<haxe_doc>Character codes of the characters that will be escaped by `quoteWinArg(_, true)`.</haxe_doc>
		</winMetaCharacters>
		<quoteWinArg public="1" set="method" line="521" static="1">
			<f a="argument:escapeMetaCharacters">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Windows.
		The input will be quoted, or escaped if necessary, such that the output
		will be parsed as a single argument using the rule specified in
		http://msdn.microsoft.com/en-us/library/ms880421

		Examples:
		```
		quoteWinArg("abc") == "abc";
		quoteWinArg("ab c") == '"ab c"';
		```</haxe_doc>
		</quoteWinArg>
		<_charAt get="inline" set="null" line="584" static="1">
			<f a="str:idx">
				<c path="String"/>
				<x path="Int"/>
				<x path="java.Char16"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</_charAt>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	`using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
	to the `String` class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="Sys" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/Sys.hx">
		<_args static="1"><c path="java.NativeArray"><c path="String"/></c></_args>
		<_env static="1"><c path="haxe.ds.StringMap"><c path="String"/></c></_env>
		<_sysName static="1"><c path="String"/></_sysName>
		<print public="1" get="inline" set="null" line="32" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Print any value on the standard output.</haxe_doc>
		</print>
		<println public="1" get="inline" set="null" line="37" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Print any value on the standard output, followed by a newline.</haxe_doc>
		</println>
		<args public="1" set="method" line="42" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Returns all the arguments that were passed by the command line.</haxe_doc>
		</args>
		<getEnv public="1" set="method" line="49" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the value of the given environment variable.</haxe_doc>
		</getEnv>
		<putEnv public="1" set="method" line="54" static="1">
			<f a="s:v">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the value of the given environment variable.</haxe_doc>
		</putEnv>
		<environment public="1" set="method" line="60" static="1">
			<f a=""><x path="Map">
	<c path="String"/>
	<c path="String"/>
</x></f>
			<haxe_doc>Returns all environment variables.</haxe_doc>
		</environment>
		<sleep public="1" set="method" line="73" static="1">
			<f a="seconds">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Suspend the current execution for the given time (in seconds).</haxe_doc>
		</sleep>
		<setTimeLocale public="1" set="method" line="81" static="1">
			<f a="loc">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Change the current time locale, which will affect `DateTools.format` date formating.
		Returns true if the locale was successfully changed</haxe_doc>
		</setTimeLocale>
		<getCwd public="1" set="method" line="86" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Get the current working directory (usually the one in which the program was started)</haxe_doc>
		</getCwd>
		<setCwd public="1" set="method" line="91" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Change the current working directory.</haxe_doc>
		</setCwd>
		<systemName public="1" set="method" line="97" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the name of the system you are running on. For instance :
			"Windows", "Linux", "BSD" and "Mac" depending on your desktop OS.</haxe_doc>
		</systemName>
		<command public="1" set="method" line="113" static="1">
			<f a="cmd:?args">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="Int"/>
			</f>
			<haxe_doc>Run the given command. The command output will be printed on the same output as the current process.
		The current process will block until the command terminates and it will return the command result (0 if there was no error).

		Command arguments can be passed in two ways: 1. using `args`, 2. appending to `cmd` and leaving `args` as `null`.

		 1. When using `args` to pass command arguments, each argument will be automatically quoted, and shell meta-characters will be escaped if needed.
		`cmd` should be an executable name that can be located in the `PATH` environment variable, or a path to an executable.

		 2. When `args` is not given or is `null`, command arguments can be appended to `cmd`. No automatic quoting/escaping will be performed. `cmd` should be formatted exactly as it would be when typed at the command line.
		It can run executables, as well as shell commands that are not executables (e.g. on Windows: `dir`, `cd`, `echo` etc).

		Read the `sys.io.Process` api for a more complete way to start background processes.</haxe_doc>
		</command>
		<exit public="1" set="method" line="140" static="1">
			<f a="code">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Exit the current process with the given error code.</haxe_doc>
		</exit>
		<time public="1" set="method" line="145" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Gives the most precise timestamp value (in seconds).</haxe_doc>
		</time>
		<cpuTime public="1" set="method" line="150" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Gives the most precise timestamp value (in seconds) but only account for the actual time spent running on the CPU for the current thread/process.</haxe_doc>
		</cpuTime>
		<executablePath public="1" set="method" line="155" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":deprecated"><e>"Use programPath instead"</e></m></meta>
			<haxe_doc>Returns the path to the current executable that we are running.</haxe_doc>
		</executablePath>
		<programPath public="1" set="method" line="160" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the absolute path to the current program file that we are running.
		Concretely, for an executable binary, it returns the path to the binary.
		For a script (e.g. a PHP file), it returns the path to the script.</haxe_doc>
		</programPath>
		<getChar public="1" set="method" line="167" static="1">
			<f a="echo">
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Read a single input character from the standard input (without blocking) and returns it. Setting `echo` to true will also display it on the output.</haxe_doc>
		</getChar>
		<stdin public="1" set="method" line="173" static="1">
			<f a=""><c path="haxe.io.Input"/></f>
			<haxe_doc>Returns the process standard input, from which you can read what user enters. Usually it will block until the user send a full input line. See `getChar` for an alternative.</haxe_doc>
		</stdin>
		<stdout public="1" set="method" line="179" static="1">
			<f a=""><c path="haxe.io.Output"/></f>
			<haxe_doc>Returns the process standard output on which you can write.</haxe_doc>
		</stdout>
		<stderr public="1" set="method" line="184" static="1">
			<f a=""><c path="haxe.io.Output"/></f>
			<haxe_doc>Returns the process standard error on which you can write.</haxe_doc>
		</stderr>
		<haxe_doc>This class gives you access to many base functionalities of system platforms. Looks in `sys` sub packages for more system APIs.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<enum path="ValueType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/Type.hx" module="Type">
		<TNull/>
		<TInt/>
		<TFloat/>
		<TBool/>
		<TObject/>
		<TFunction/>
		<TClass a="c"><x path="Class"><d/></x></TClass>
		<TEnum a="e"><x path="Enum"><d/></x></TEnum>
		<TUnknown/>
	</enum>
	<class path="java.NativeArray" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/java/NativeArray.hx" extern="1">
		<make public="1" params="T" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><c path="make.T"/></x>
				<c path="java.NativeArray"><c path="make.T"/></c>
			</f>
			<haxe_doc>Creates a new array with the specified elements.

		Usage:
		```haxe
		var elements = NativeArray.make(1,2,3,4,5,6);
		```</haxe_doc>
		</make>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the array</haxe_doc>
		</length>
		<new public="1" set="method">
			<f a="len">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allocates a new array with size `len`</haxe_doc>
		</new>
		<haxe_doc>Represents a java fixed-size Array (`T[]`)</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<enum path="java.internal.EmptyObject" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/internal/Runtime.hx" module="java.internal.Runtime">
		<EMPTY/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":keep"/>
			<m n=":native"><e>"haxe.lang.EmptyObject"</e></m>
		</meta>
	</enum>
	<class path="Type" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/Type.hx">
		<getClass public="1" params="T" set="method" line="41" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.

		If `o` is null or of a different type, null is returned.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" line="49" static="1">
			<f a="o">
				<x path="EnumValue"/>
				<x path="Enum"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Returns the enum of enum instance `o`.

		An enum instance is the result of using an enum constructor. Given an
		`enum Color { Red; }`, `getEnum(Red)` returns `Enum<Color>`.

		If `o` is null, null is returned.

		In general, type parameter information cannot be obtained at runtime.]]></haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" line="57" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the super-class of class `c`.

		If `c` has no super class, null is returned.

		If `c` is null, the result is unspecified.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" line="67" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of class `c`, including its path.

		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `c` has no package, the class name is returned.

		If `c` is null, the result is unspecified.

		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" line="84" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		`pack1.pack2.(...).packN.EnumName`
		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" line="95" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Resolves a class by name.

		If `name` is the path of an existing class, that class is returned.

		Otherwise null is returned.

		If `name` is null or the path to a different type, the result is
		unspecified.

		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="123" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":functionCode"><e><![CDATA["\n\t\tif (\"Bool\".equals(name)) return boolean.class;\n\t\tClass r = resolveClass(name);\n\t\tif (r != null && (r.getSuperclass() == java.lang.Enum.class || haxe.lang.Enum.class.isAssignableFrom(r)))\n\t\t\treturn r;\n\t\treturn null;\n\t"]]></e></m>
			</meta>
			<haxe_doc>Resolves an enum by name.

		If `name` is the path of an existing enum, that enum is returned.

		Otherwise null is returned.

		If `name` is null the result is unspecified.

		If `name` is the path to a different type, null is returned.

		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" line="241" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":functionCode"><e><![CDATA["\n\t\t\tint len = args.length;\n\t\t\tjava.lang.Class[] cls = new java.lang.Class[len];\n\t\t\tjava.lang.Object[] objs = new java.lang.Object[len];\n\n\t\t\tjava.lang.reflect.Constructor[] ms = cl.getConstructors();\n\t\t\tint msl = ms.length;\n\t\t\tint realMsl = 0;\n\t\t\tfor(int i =0; i < msl; i++)\n\t\t\t{\n\t\t\t\tif (!ms[i].isVarArgs() && ms[i].getParameterTypes().length != len)\n\t\t\t\t{\n\t\t\t\t\tms[i] = null;\n\t\t\t\t} else {\n\t\t\t\t\tms[realMsl] = ms[i];\n\t\t\t\t\tif (realMsl != i)\n\t\t\t\t\t\tms[i] = null;\n\t\t\t\t\trealMsl++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tboolean hasNumber = false;\n\n\t\t\tfor (int i = 0; i < len; i++)\n\t\t\t{\n\t\t\t\tObject o = args.__get(i);\n\t\t\t\tobjs[i]= o;\n\t\t\t\tcls[i] = o.getClass();\n\t\t\t\tboolean isNum = false;\n\n\t\t\t\tif (o instanceof java.lang.Number)\n\t\t\t\t{\n\t\t\t\t\tcls[i] = java.lang.Number.class;\n\t\t\t\t\tisNum = hasNumber = true;\n\t\t\t\t}\n\n\t\t\t\tmsl = realMsl;\n\t\t\t\trealMsl = 0;\n\n\t\t\t\tfor (int j = 0; j < msl; j++)\n\t\t\t\t{\n\t\t\t\t\tjava.lang.Class[] allcls = ms[j].getParameterTypes();\n\t\t\t\t\tif (i < allcls.length)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! ((isNum && allcls[i].isPrimitive()) || allcls[i].isAssignableFrom(cls[i])) )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tms[j] = null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tms[realMsl] = ms[j];\n\t\t\t\t\t\t\tif (realMsl != j)\n\t\t\t\t\t\t\t\tms[j] = null;\n\t\t\t\t\t\t\trealMsl++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tjava.lang.reflect.Constructor found = ms[0];\n\n\t\t\tif (hasNumber)\n\t\t\t{\n\t\t\t\tjava.lang.Class[] allcls = found.getParameterTypes();\n\n\t\t\t\tfor (int i = 0; i < len; i++)\n\t\t\t\t{\n\t\t\t\t\tjava.lang.Object o = objs[i];\n\t\t\t\t\tif (o instanceof java.lang.Number)\n\t\t\t\t\t{\n\t\t\t\t\t\tjava.lang.Class curCls = null;\n\t\t\t\t\t\tif (i < allcls.length)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurCls = allcls[i];\n\t\t\t\t\t\t\tif (!curCls.isAssignableFrom(o.getClass()))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tString name = curCls.getName();\n\t\t\t\t\t\t\t\tif (name.equals(\"double\") || name.equals(\"java.lang.Double\"))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tobjs[i] = ((java.lang.Number)o).doubleValue();\n\t\t\t\t\t\t\t\t} else if (name.equals(\"int\") || name.equals(\"java.lang.Integer\"))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tobjs[i] = ((java.lang.Number)o).intValue();\n\t\t\t\t\t\t\t\t} else if (name.equals(\"float\") || name.equals(\"java.lang.Float\"))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tobjs[i] = ((java.lang.Number)o).floatValue();\n\t\t\t\t\t\t\t\t} else if (name.equals(\"byte\") || name.equals(\"java.lang.Byte\"))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tobjs[i] = ((java.lang.Number)o).byteValue();\n\t\t\t\t\t\t\t\t} else if (name.equals(\"short\") || name.equals(\"java.lang.Short\"))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tobjs[i] = ((java.lang.Number)o).shortValue();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} //else varargs not handled TODO\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\ttry {\n\t\t\tfound.setAccessible(true);\n\t\t\treturn (T) found.newInstance(objs);\n\t\t}\n\t\tcatch (java.lang.reflect.InvocationTargetException e)\n\t\t{\n\t\t\tthrow haxe.lang.HaxeException.wrap(e.getCause());\n\t\t}\n\n\t\tcatch (Throwable t)\n\t\t{\n\t\t\tthrow haxe.lang.HaxeException.wrap(t);\n\t\t}\n\t"]]></e></m>
			</meta>
			<haxe_doc>Creates an instance of class `cl`, using `args` as arguments to the
		class constructor.

		This function guarantees that the class constructor is called.

		Default values of constructors arguments are not guaranteed to be
		taken into account.

		If `cl` or `args` are null, or if the number of elements in `args` does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if `cl` has no own constructor, the
		result is unspecified.

		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<__createEmptyInstance_EMPTY_TYPES expr="java.NativeArray.make(java.Lib.toNativeEnum(java.internal.Runtime.EmptyObject))" line="247" static="1">
			<c path="java.NativeArray"><c path="java.lang.Class"><e path="java.internal.EmptyObject"/></c></c>
			<meta>
				<m n=":value"><e>java.NativeArray.make(java.Lib.toNativeEnum(java.internal.Runtime.EmptyObject))</e></m>
				<m n=":protected"/>
				<m n=":readOnly"/>
			</meta>
		</__createEmptyInstance_EMPTY_TYPES>
		<__createEmptyInstance_EMPTY_ARGS expr="java.NativeArray.make(java.internal.Runtime.EmptyObject.EMPTY)" line="248" static="1">
			<c path="java.NativeArray"><e path="java.internal.EmptyObject"/></c>
			<meta>
				<m n=":value"><e>java.NativeArray.make(java.internal.Runtime.EmptyObject.EMPTY)</e></m>
				<m n=":protected"/>
				<m n=":readOnly"/>
			</meta>
		</__createEmptyInstance_EMPTY_ARGS>
		<createEmptyInstance public="1" params="T" set="method" line="250" static="1">
			<f a="cl">
				<x path="Class"><c path="createEmptyInstance.T"/></x>
				<c path="createEmptyInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`.

		This function guarantees that the class constructor is not called.

		If `cl` is null, the result is unspecified.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" line="271" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<meta><m n=":functionCode"><e>"\n\t\tif (params == null || params.length == 0)\n\t\t{\n\t\t\tjava.lang.Object ret = haxe.lang.Runtime.slowGetField(e, constr, true);\n\t\t\tif (ret instanceof haxe.lang.Function)\n\t\t\t\tthrow haxe.lang.HaxeException.wrap(\"Constructor \" + constr + \" needs parameters\");\n\t\t\treturn (T) ret;\n\t\t} else {\n\t\t\treturn (T) haxe.lang.Runtime.slowCallField(e, constr, params);\n\t\t}\n\t"</e></m></meta>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" line="276" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createEnumIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" set="method" line="306" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\tif (c == java.lang.String.class)\n\t\t{\n\t\t\treturn haxe.lang.StringRefl.fields;\n\t\t}\n\n\t\tArray<String> ret = new Array<String>();\n\t\tfor (java.lang.reflect.Field f : c.getFields())\n\t\t{\n\t\t\tjava.lang.String fname = f.getName();\n\t\t\tif (!java.lang.reflect.Modifier.isStatic(f.getModifiers()) && !fname.startsWith(\"__hx_\"))\n\t\t\t\tret.push(fname);\n\t\t}\n\n\t\tfor (java.lang.reflect.Method m : c.getMethods())\n\t\t{\n\t\t\tif (m.getDeclaringClass() == java.lang.Object.class)\n\t\t\t\tcontinue;\n\t\t\tjava.lang.String mname = m.getName();\n\t\t\tif (!java.lang.reflect.Modifier.isStatic(m.getModifiers()) && !mname.startsWith(\"__hx_\"))\n\t\t\t\tret.push(mname);\n\t\t}\n\n\t\treturn ret;\n\t"]]></e></m></meta>
			<haxe_doc>Returns a list of the instance fields of class `c`.

		This only includes fields which are known at compile-time. In
		particular, using getInstanceFields(getClass(obj)) will not include
		any fields which were added to obj at runtime.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.

		(As3) This method only returns instance fields that are public.</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" line="336" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\tArray<String> ret = new Array<String>();\n\t\tif (c == java.lang.String.class)\n\t\t{\n\t\t\tret.push(\"fromCharCode\");\n\t\t\treturn ret;\n\t\t}\n\n\t\tfor (java.lang.reflect.Field f : c.getDeclaredFields())\n\t\t{\n\t\t\tjava.lang.String fname = f.getName();\n\t\t\tif (java.lang.reflect.Modifier.isStatic(f.getModifiers()) && !fname.startsWith(\"__hx_\"))\n\t\t\tret.push(fname);\n\t\t}\n\n\t\tfor (java.lang.reflect.Method m : c.getDeclaredMethods())\n\t\t{\n\t\t\tif (m.getDeclaringClass() == java.lang.Object.class)\n\t\t\t\tcontinue;\n\t\t\tjava.lang.String mname = m.getName();\n\t\t\tif (java.lang.reflect.Modifier.isStatic(m.getModifiers()) && !mname.startsWith(\"__hx_\"))\n\t\t\t\tret.push(mname);\n\t\t}\n\n\t\treturn ret;\n\t"]]></e></m></meta>
			<haxe_doc>Returns a list of static fields of class `c`.

		This does not include static fields of parent classes.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.

		(As3) This method only returns class fields that are public.</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" line="340" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" line="380" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":functionCode"><e>"\n\t\tif (v == null) return ValueType.TNull;\n\n\t\tif (v instanceof haxe.lang.IHxObject) {\n\t\t\thaxe.lang.IHxObject vobj = (haxe.lang.IHxObject) v;\n\t\t\tjava.lang.Class cl = vobj.getClass();\n\t\t\tif (v instanceof haxe.lang.DynamicObject)\n\t\t\t\treturn ValueType.TObject;\n\t\t\telse\n\t\t\t\treturn ValueType.TClass(cl);\n\t\t} else if (v instanceof java.lang.Number) {\n\t\t\tjava.lang.Number n = (java.lang.Number) v;\n\t\t\tif (n.intValue() == n.doubleValue())\n\t\t\t\treturn ValueType.TInt;\n\t\t\telse\n\t\t\t\treturn ValueType.TFloat;\n\t\t} else if (v instanceof haxe.lang.Function) {\n\t\t\treturn ValueType.TFunction;\n\t\t} else if (v instanceof java.lang.Enum || v instanceof haxe.lang.Enum) {\n\t\t\treturn ValueType.TEnum(v.getClass());\n\t\t} else if (v instanceof java.lang.Boolean) {\n\t\t\treturn ValueType.TBool;\n\t\t} else if (v instanceof java.lang.Class) {\n\t\t\treturn ValueType.TObject;\n\t\t} else {\n\t\t\treturn ValueType.TClass(v.getClass());\n\t\t}\n\t"</e></m>
			</meta>
			<haxe_doc>Returns the runtime type of value `v`.

		The result corresponds to the type `v` has at runtime, which may vary
		per platform. Assumptions regarding this should be minimized to avoid
		surprises.</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" line="391" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":functionCode"><e>"\n\t\t\tif (a instanceof haxe.lang.Enum)\n\t\t\t\treturn a.equals(b);\n\t\t\telse\n\t\t\t\treturn haxe.lang.Runtime.eq(a, b);\n\t"</e></m>
			</meta>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</enumEq>
		<enumConstructor public="1" set="method" line="402" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":functionCode"><e>"\n\t\tif (e instanceof java.lang.Enum)\n\t\t\treturn ((java.lang.Enum) e).name();\n\t\telse\n\t\t\treturn ((haxe.lang.Enum) e).getTag();\n\t"</e></m>
			</meta>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" set="method" line="410" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":functionCode"><e>"\n\t\treturn ( e instanceof java.lang.Enum ) ? new haxe.root.Array() : ((haxe.lang.Enum) e).getParams();\n\t"</e></m>
			</meta>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumParameters>
		<enumIndex public="1" set="method" line="421" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":functionCode"><e>"\n\t\tif (e instanceof java.lang.Enum)\n\t\t\treturn ((java.lang.Enum) e).ordinal();\n\t\telse\n\t\t\treturn ((haxe.lang.Enum) e).index;\n\t"</e></m>
			</meta>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumIndex>
		<allEnums public="1" params="T" set="method" line="426" static="1">
			<f a="e">
				<x path="Enum"><c path="allEnums.T"/></x>
				<c path="Array"><c path="allEnums.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</allEnums>
		<haxe_doc>The Haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.

	@see https://haxe.org/manual/types.html
	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="UInt" params="" file="/home/travis/build/HaxeFoundation/haxe/std/UInt.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>The unsigned `Int` type is only defined for Flash and C#.
	Simulate it for other platforms.

	@see https://haxe.org/manual/types-basic-types.html</haxe_doc>
		<impl><class path="_UInt.UInt_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/UInt.hx" private="1" module="UInt">
	<add get="inline" set="null" line="104" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</add>
	<div get="inline" set="null" line="108" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</div>
	<mul get="inline" set="null" line="112" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</mul>
	<sub get="inline" set="null" line="116" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</sub>
	<gt get="inline" set="null" line="120" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gt>
	<gte get="inline" set="null" line="128" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gte>
	<lt get="inline" set="null" line="136" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</lt>
	<lte get="inline" set="null" line="140" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lte>
	<and get="inline" set="null" line="144" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
	</and>
	<or get="inline" set="null" line="148" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A | B</e></m></meta>
	</or>
	<xor get="inline" set="null" line="152" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A ^ B</e></m></meta>
	</xor>
	<shl get="inline" set="null" line="156" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
	</shl>
	<shr get="inline" set="null" line="160" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
	</shr>
	<ushr get="inline" set="null" line="164" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
	</ushr>
	<mod get="inline" set="null" line="168" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</mod>
	<addWithFloat get="inline" set="null" line="172" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</addWithFloat>
	<mulWithFloat get="inline" set="null" line="176" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</mulWithFloat>
	<divFloat get="inline" set="null" line="180" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divFloat>
	<floatDiv get="inline" set="null" line="184" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</floatDiv>
	<subFloat get="inline" set="null" line="188" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subFloat>
	<floatSub get="inline" set="null" line="192" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</floatSub>
	<gtFloat get="inline" set="null" line="196" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gtFloat>
	<equalsInt params="T" get="inline" set="null" line="200" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="equalsInt.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A == B</e></m>
		</meta>
	</equalsInt>
	<notEqualsInt params="T" get="inline" set="null" line="204" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="notEqualsInt.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A != B</e></m>
		</meta>
	</notEqualsInt>
	<equalsFloat params="T" get="inline" set="null" line="208" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="equalsFloat.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A == B</e></m>
		</meta>
	</equalsFloat>
	<notEqualsFloat params="T" get="inline" set="null" line="212" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="notEqualsFloat.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A != B</e></m>
		</meta>
	</notEqualsFloat>
	<gteFloat get="inline" set="null" line="216" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gteFloat>
	<floatGt get="inline" set="null" line="221" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</floatGt>
	<floatGte get="inline" set="null" line="225" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</floatGte>
	<ltFloat get="inline" set="null" line="229" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</ltFloat>
	<lteFloat get="inline" set="null" line="233" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lteFloat>
	<floatLt get="inline" set="null" line="237" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</floatLt>
	<floatLte get="inline" set="null" line="241" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</floatLte>
	<modFloat get="inline" set="null" line="245" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</modFloat>
	<floatMod get="inline" set="null" line="249" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</floatMod>
	<negBits get="inline" set="null" line="253" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>~A</e></m>
		</meta>
	</negBits>
	<prefixIncrement get="inline" set="null" line="257" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>++A</e></m>
		</meta>
	</prefixIncrement>
	<postfixIncrement get="inline" set="null" line="261" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</postfixIncrement>
	<prefixDecrement get="inline" set="null" line="265" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>--A</e></m>
		</meta>
	</prefixDecrement>
	<postfixDecrement get="inline" set="null" line="269" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A--</e></m>
		</meta>
	</postfixDecrement>
	<toString get="inline" set="null" line="274" static="1">
		<f a="this:?radix">
			<x path="Int"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
	<toInt get="inline" set="null" line="278" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toInt>
	<toFloat get="inline" set="null" line="282" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toFloat>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="_UInt.UInt_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/UInt.hx" private="1" module="UInt">
		<add get="inline" set="null" line="104" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</add>
		<div get="inline" set="null" line="108" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</div>
		<mul get="inline" set="null" line="112" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</mul>
		<sub get="inline" set="null" line="116" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</sub>
		<gt get="inline" set="null" line="120" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gt>
		<gte get="inline" set="null" line="128" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gte>
		<lt get="inline" set="null" line="136" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</lt>
		<lte get="inline" set="null" line="140" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lte>
		<and get="inline" set="null" line="144" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
		</and>
		<or get="inline" set="null" line="148" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A | B</e></m></meta>
		</or>
		<xor get="inline" set="null" line="152" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A ^ B</e></m></meta>
		</xor>
		<shl get="inline" set="null" line="156" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
		</shl>
		<shr get="inline" set="null" line="160" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
		</shr>
		<ushr get="inline" set="null" line="164" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
		</ushr>
		<mod get="inline" set="null" line="168" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</mod>
		<addWithFloat get="inline" set="null" line="172" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</addWithFloat>
		<mulWithFloat get="inline" set="null" line="176" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</mulWithFloat>
		<divFloat get="inline" set="null" line="180" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divFloat>
		<floatDiv get="inline" set="null" line="184" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</floatDiv>
		<subFloat get="inline" set="null" line="188" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subFloat>
		<floatSub get="inline" set="null" line="192" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</floatSub>
		<gtFloat get="inline" set="null" line="196" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gtFloat>
		<equalsInt params="T" get="inline" set="null" line="200" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="equalsInt.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A == B</e></m>
			</meta>
		</equalsInt>
		<notEqualsInt params="T" get="inline" set="null" line="204" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="notEqualsInt.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A != B</e></m>
			</meta>
		</notEqualsInt>
		<equalsFloat params="T" get="inline" set="null" line="208" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="equalsFloat.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A == B</e></m>
			</meta>
		</equalsFloat>
		<notEqualsFloat params="T" get="inline" set="null" line="212" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="notEqualsFloat.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A != B</e></m>
			</meta>
		</notEqualsFloat>
		<gteFloat get="inline" set="null" line="216" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gteFloat>
		<floatGt get="inline" set="null" line="221" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</floatGt>
		<floatGte get="inline" set="null" line="225" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</floatGte>
		<ltFloat get="inline" set="null" line="229" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</ltFloat>
		<lteFloat get="inline" set="null" line="233" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lteFloat>
		<floatLt get="inline" set="null" line="237" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</floatLt>
		<floatLte get="inline" set="null" line="241" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</floatLte>
		<modFloat get="inline" set="null" line="245" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</modFloat>
		<floatMod get="inline" set="null" line="249" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</floatMod>
		<negBits get="inline" set="null" line="253" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>~A</e></m>
			</meta>
		</negBits>
		<prefixIncrement get="inline" set="null" line="257" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>++A</e></m>
			</meta>
		</prefixIncrement>
		<postfixIncrement get="inline" set="null" line="261" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</postfixIncrement>
		<prefixDecrement get="inline" set="null" line="265" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>--A</e></m>
			</meta>
		</prefixDecrement>
		<postfixDecrement get="inline" set="null" line="269" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A--</e></m>
			</meta>
		</postfixDecrement>
		<toString get="inline" set="null" line="274" static="1">
			<f a="this:?radix">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
		<toInt get="inline" set="null" line="278" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toInt>
		<toFloat get="inline" set="null" line="282" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toFloat>
		<meta><m n=":final"/></meta>
	</class>
	<abstract path="XmlType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/Xml.hx" module="Xml">
		<this><x path="Int"/></this>
		<haxe_doc>Xml node types.

	@see https://haxe.org/manual/std-Xml.html</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="_Xml.XmlType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/Xml.hx" private="1" module="Xml" extern="1">
	<Element public="1" get="inline" set="null" expr="cast 0" line="32" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents an XML element type.</haxe_doc>
	</Element>
	<PCData public="1" get="inline" set="null" expr="cast 1" line="36" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents XML parsed character data type.</haxe_doc>
	</PCData>
	<CData public="1" get="inline" set="null" expr="cast 2" line="40" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents XML character data type.</haxe_doc>
	</CData>
	<Comment public="1" get="inline" set="null" expr="cast 3" line="44" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents an XML comment type.</haxe_doc>
	</Comment>
	<DocType public="1" get="inline" set="null" expr="cast 4" line="48" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents an XML doctype element type.</haxe_doc>
	</DocType>
	<ProcessingInstruction public="1" get="inline" set="null" expr="cast 5" line="52" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents an XML processing instruction type.</haxe_doc>
	</ProcessingInstruction>
	<Document public="1" get="inline" set="null" expr="cast 6" line="56" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents an XML document type.</haxe_doc>
	</Document>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="_Xml.XmlType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/Xml.hx" private="1" module="Xml" extern="1">
		<Element public="1" get="inline" set="null" expr="cast 0" line="32" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents an XML element type.</haxe_doc>
		</Element>
		<PCData public="1" get="inline" set="null" expr="cast 1" line="36" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents XML parsed character data type.</haxe_doc>
		</PCData>
		<CData public="1" get="inline" set="null" expr="cast 2" line="40" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents XML character data type.</haxe_doc>
		</CData>
		<Comment public="1" get="inline" set="null" expr="cast 3" line="44" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents an XML comment type.</haxe_doc>
		</Comment>
		<DocType public="1" get="inline" set="null" expr="cast 4" line="48" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents an XML doctype element type.</haxe_doc>
		</DocType>
		<ProcessingInstruction public="1" get="inline" set="null" expr="cast 5" line="52" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents an XML processing instruction type.</haxe_doc>
		</ProcessingInstruction>
		<Document public="1" get="inline" set="null" expr="cast 6" line="56" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents an XML document type.</haxe_doc>
		</Document>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="Xml" params="" file="/home/travis/build/HaxeFoundation/haxe/std/Xml.hx">
		<Element public="1" set="null" expr="XmlType.Element" line="68" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Element</e></m></meta>
			<haxe_doc>XML element type.</haxe_doc>
		</Element>
		<PCData public="1" set="null" expr="XmlType.PCData" line="72" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.PCData</e></m></meta>
			<haxe_doc>XML parsed character data type.</haxe_doc>
		</PCData>
		<CData public="1" set="null" expr="XmlType.CData" line="76" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.CData</e></m></meta>
			<haxe_doc>XML character data type.</haxe_doc>
		</CData>
		<Comment public="1" set="null" expr="XmlType.Comment" line="80" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Comment</e></m></meta>
			<haxe_doc>XML comment type.</haxe_doc>
		</Comment>
		<DocType public="1" set="null" expr="XmlType.DocType" line="84" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.DocType</e></m></meta>
			<haxe_doc>XML doctype element type.</haxe_doc>
		</DocType>
		<ProcessingInstruction public="1" set="null" expr="XmlType.ProcessingInstruction" line="88" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.ProcessingInstruction</e></m></meta>
			<haxe_doc>XML processing instruction type.</haxe_doc>
		</ProcessingInstruction>
		<Document public="1" set="null" expr="XmlType.Document" line="92" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Document</e></m></meta>
			<haxe_doc>XML document type.</haxe_doc>
		</Document>
		<parse public="1" set="method" line="97" static="1">
			<f a="str">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Parses the String into an Xml document.</haxe_doc>
		</parse>
		<createElement public="1" set="method" line="158" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createElement>
		<createPCData public="1" set="method" line="167" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createPCData>
		<createCData public="1" set="method" line="176" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createCData>
		<createComment public="1" set="method" line="185" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createComment>
		<createDocType public="1" set="method" line="194" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocType>
		<createProcessingInstruction public="1" set="method" line="203" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createProcessingInstruction>
		<createDocument public="1" set="method" line="212" static="1">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocument>
		<nodeType public="1" set="null">
			<x path="XmlType"/>
			<haxe_doc>Returns the type of the Xml Node. This should be used before
		accessing other functions since some might raise an exception
		if the node type is not correct.</haxe_doc>
		</nodeType>
		<nodeName public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>Returns the node name of an Element.</haxe_doc>
		</nodeName>
		<nodeValue public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>Returns the node value. Only works if the Xml node is not an Element or a Document.</haxe_doc>
		</nodeValue>
		<parent public="1" set="null">
			<c path="Xml"/>
			<haxe_doc>Returns the parent object in the Xml hierarchy.
		The parent can be `null`, an Element or a Document.</haxe_doc>
		</parent>
		<children><c path="Array"><c path="Xml"/></c></children>
		<attributeMap><x path="Map">
	<c path="String"/>
	<c path="String"/>
</x></attributeMap>
		<get_nodeName get="inline" set="null" line="127"><f a=""><c path="String"/></f></get_nodeName>
		<set_nodeName get="inline" set="null" line="134"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></set_nodeName>
		<get_nodeValue get="inline" set="null" line="141"><f a=""><c path="String"/></f></get_nodeValue>
		<set_nodeValue get="inline" set="null" line="148"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></set_nodeValue>
		<get public="1" set="method" line="220">
			<f a="att">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the given attribute of an Element node. Returns `null` if not found.
		Attributes are case-sensitive.</haxe_doc>
		</get>
		<set public="1" set="method" line="231">
			<f a="att:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the given attribute value for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</set>
		<remove public="1" set="method" line="242">
			<f a="att">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an attribute for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="253">
			<f a="att">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the Element node has a given attribute.
		Attributes are case-sensitive.</haxe_doc>
		</exists>
		<attributes public="1" set="method" line="263">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>Returns an `Iterator` on all the attribute names.</haxe_doc>
		</attributes>
		<iterator public="1" get="inline" set="null" line="274">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</iterator>
		<elements public="1" set="method" line="283">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elements>
		<elementsNamed public="1" set="method" line="293">
			<f a="name">
				<c path="String"/>
				<t path="Iterator"><c path="Xml"/></t>
			</f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements with the given nodeName.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elementsNamed>
		<firstChild public="1" get="inline" set="null" line="302">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node.</haxe_doc>
		</firstChild>
		<firstElement public="1" set="method" line="310">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node which is an Element.</haxe_doc>
		</firstElement>
		<addChild public="1" set="method" line="326">
			<f a="x">
				<c path="Xml"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a child node to the Document or Element.
		A child node can only be inside one given parent node, which is indicated by the `parent` property.
		If the child is already inside this Document or Element, it will be moved to the last position among the Document or Element's children.
		If the child node was previously inside a different node, it will be moved to this Document or Element.</haxe_doc>
		</addChild>
		<removeChild public="1" set="method" line="339">
			<f a="x">
				<c path="Xml"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes a child from the Document or Element.
		Returns true if the child was successfuly removed.</haxe_doc>
		</removeChild>
		<insertChild public="1" set="method" line="354">
			<f a="x:pos">
				<c path="Xml"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts a child at the given position among the other childs.
		A child node can only be inside one given parent node, which is indicated by the [parent] property.
		If the child is already inside this Document or Element, it will be moved to the new position among the Document or Element's children.
		If the child node was previously inside a different node, it will be moved to this Document or Element.</haxe_doc>
		</insertChild>
		<toString public="1" get="inline" set="null" line="366">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of the Xml node.</haxe_doc>
		</toString>
		<ensureElementType get="inline" set="null" line="376"><f a=""><x path="Void"/></f></ensureElementType>
		<new set="method" line="370"><f a="nodeType">
	<x path="XmlType"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Cross-platform Xml API.

	@see https://haxe.org/manual/std-Xml.html</haxe_doc>
	</class>
	<enum path="haxe.StackItem" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/CallStack.hx" module="haxe.CallStack">
		<CFunction/>
		<Module a="m"><c path="String"/></Module>
		<FilePos a="s:file:line">
			<t path="Null"><e path="haxe.StackItem"/></t>
			<c path="String"/>
			<x path="Int"/>
		</FilePos>
		<Method a="classname:method">
			<c path="String"/>
			<c path="String"/>
		</Method>
		<LocalFunction a="?v"><x path="Int"/></LocalFunction>
		<haxe_doc>Elements return by `CallStack` methods.</haxe_doc>
	</enum>
	<class path="haxe.CallStack" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/CallStack.hx">
		<callStack public="1" set="method" line="77" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>Return the call stack elements, or an empty array if not available.</haxe_doc>
		</callStack>
		<exceptionStack public="1" set="method" line="163" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>Return the exception stack : this is the stack elements between
		the place the last exception was thrown and the place it was
		caught, or an empty array if not available.</haxe_doc>
		</exceptionStack>
		<toString public="1" set="method" line="231" static="1">
			<f a="stack">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a representation of the stack as a printable string.</haxe_doc>
		</toString>
		<itemToString set="method" line="240" static="1"><f a="b:s">
	<c path="StringBuf"/>
	<e path="haxe.StackItem"/>
	<x path="Void"/>
</f></itemToString>
		<makeStack set="method" line="267" static="1"><f a="s">
	<unknown/>
	<unknown/>
</f></makeStack>
		<haxe_doc>Get information about the call stack.</haxe_doc>
	</class>
	<abstract path="haxe.Function" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"><meta><m n=":final"/></meta></class></impl>
	</abstract>
	<class path="haxe._Constraints.Function_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"><meta><m n=":final"/></meta></class>
	<abstract path="haxe.FlatEnum" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"><meta><m n=":final"/></meta></class></impl>
	</abstract>
	<class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"><meta><m n=":final"/></meta></class>
	<abstract path="haxe.Constructible" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which
		* is public and
		* unifies with the type used for type parameter `T`.

	If a type parameter A is assigned to a type parameter B which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"><meta><m n=":final"/></meta></class></impl>
	</abstract>
	<class path="haxe._Constraints.Constructible_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"><meta><m n=":final"/></meta></class>
	<class path="haxe.IMap" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Constraints.hx" module="haxe.Constraints" interface="1">
		<get public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<t path="Null"><c path="haxe.IMap.V"/></t>
</f></get>
		<set public="1" set="method"><f a="k:v">
	<c path="haxe.IMap.K"/>
	<c path="haxe.IMap.V"/>
	<x path="Void"/>
</f></set>
		<exists public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Bool"/>
</f></exists>
		<remove public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Bool"/>
</f></remove>
		<keys public="1" set="method"><f a=""><t path="Iterator"><c path="haxe.IMap.K"/></t></f></keys>
		<iterator public="1" set="method"><f a=""><t path="Iterator"><c path="haxe.IMap.V"/></t></f></iterator>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
	</class>
	<abstract path="haxe.DynamicAccess" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/DynamicAccess.hx">
		<from><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></from>
		<this><d><c path="haxe.DynamicAccess.T"/></d></this>
		<to><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></to>
		<haxe_doc>DynamicAccess is an abstract type for working with anonymous structures
	that are intended to hold collections of objects by the string key.

	For example, these types of structures are often created from JSON.

	Basically, it wraps `Reflect` calls in a `Map`-like interface.</haxe_doc>
		<impl><class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess">
	<_new public="1" get="inline" set="null" line="37" static="1">
		<f a=""><x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x></f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new structure.</haxe_doc>
	</_new>
	<get public="1" get="inline" set="null" line="47" static="1">
		<f a="this:key">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<t path="Null"><c path="haxe.DynamicAccess.T"/></t>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Returns a value by specified `key`.

		If the structure does not contain the given key, null is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
	</get>
	<set public="1" get="inline" set="null" line="65" static="1">
		<f a="this:key:value">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<c path="haxe.DynamicAccess.T"/>
			<c path="haxe.DynamicAccess.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Sets a `value` for a specified `key`.

		If the structure contains the given key, its value will be overwritten.

		Returns the given value.

		If `key` is null, the result is unspecified.</haxe_doc>
	</set>
	<exists public="1" get="inline" set="null" line="79" static="1">
		<f a="this:key">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Tells if the structure contains a specified `key`.

		If `key` is null, the result is unspecified.</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="88" static="1">
		<f a="this:key">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Removes a specified `key` from the structure.

		Returns true, if `key` was present in structure, or false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="93" static="1">
		<f a="this">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="Array"><c path="String"/></c>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an array of `keys` in a structure.</haxe_doc>
	</keys>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess">
		<_new public="1" get="inline" set="null" line="37" static="1">
			<f a=""><x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x></f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new structure.</haxe_doc>
		</_new>
		<get public="1" get="inline" set="null" line="47" static="1">
			<f a="this:key">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<t path="Null"><c path="haxe.DynamicAccess.T"/></t>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Returns a value by specified `key`.

		If the structure does not contain the given key, null is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="65" static="1">
			<f a="this:key:value">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<c path="haxe.DynamicAccess.T"/>
				<c path="haxe.DynamicAccess.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Sets a `value` for a specified `key`.

		If the structure contains the given key, its value will be overwritten.

		Returns the given value.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<exists public="1" get="inline" set="null" line="79" static="1">
			<f a="this:key">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Tells if the structure contains a specified `key`.

		If `key` is null, the result is unspecified.</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="88" static="1">
			<f a="this:key">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Removes a specified `key` from the structure.

		Returns true, if `key` was present in structure, or false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="93" static="1">
			<f a="this">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an array of `keys` in a structure.</haxe_doc>
		</keys>
		<meta><m n=":final"/></meta>
	</class>
	<class path="java.vm.Mutex" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/vm/Mutex.hx">
		<lock>
			<c path="java.util.concurrent.locks.ReentrantLock"/>
			<meta><m n=":private"/></meta>
		</lock>
		<tryAcquire public="1" set="method" line="41">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Try to acquire the mutex, returns true if acquire or false if it's already locked by another thread.</haxe_doc>
		</tryAcquire>
		<acquire public="1" set="method" line="50">
			<f a=""><x path="Void"/></f>
			<haxe_doc>The current thread acquire the mutex or wait if not available.
		The same thread can acquire several times the same mutex, but must release it as many times it has been acquired.</haxe_doc>
		</acquire>
		<release public="1" set="method" line="58">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Release a mutex that has been acquired by the current thread. If the current thread does not own the mutex, an exception will be thrown</haxe_doc>
		</release>
		<new public="1" set="method" line="33">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a mutex, which can be used to acquire a temporary lock to access some resource.
		The main difference with a lock is that a mutex must always be released by the owner thread</haxe_doc>
		</new>
		<meta><m n=":native"><e>"haxe.java.vm.Mutex"</e></m></meta>
	</class>
	<class path="java.util.concurrent.locks.Lock" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/locks/Lock.class" extern="1" interface="1">
		<newCondition public="1" set="method">
			<f a=""><c path="java.util.concurrent.locks.Condition"/></f>
			<meta><m n=":overload"/></meta>
		</newCondition>
		<unlock public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</unlock>
		<tryLock public="1" set="method">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<e path="java.util.concurrent.TimeUnit"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
			</meta>
			<overloads><tryLock public="1" set="method">
	<f a=""><x path="Bool"/></f>
	<meta><m n=":overload"/></meta>
</tryLock></overloads>
		</tryLock>
		<lockInterruptibly public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
			</meta>
		</lockInterruptibly>
		<lock public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</lock>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.concurrent.locks.Lock"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.concurrent.locks"</e>
				<e>"Lock"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.Serializable" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/io/Serializable.class" extern="1" interface="1"><meta>
	<m n=":abstract"/>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.io.Serializable"</e></m>
	<m n=":javaCanonical">
		<e>"java.io"</e>
		<e>"Serializable"</e>
	</m>
</meta></class>
	<class path="java.util.concurrent.locks.ReentrantLock" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/locks/ReentrantLock.class" extern="1">
		<implements path="java.util.concurrent.locks.Lock"/>
		<implements path="java.io.Serializable"/>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<getWaitingThreads set="method">
			<f a="param1">
				<c path="java.util.concurrent.locks.Condition"/>
				<c path="java.util.Collection"><c path="java.lang.Thread"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</getWaitingThreads>
		<getWaitQueueLength public="1" set="method">
			<f a="param1">
				<c path="java.util.concurrent.locks.Condition"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getWaitQueueLength>
		<hasWaiters public="1" set="method">
			<f a="param1">
				<c path="java.util.concurrent.locks.Condition"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</hasWaiters>
		<getQueuedThreads set="method">
			<f a=""><c path="java.util.Collection"><c path="java.lang.Thread"/></c></f>
			<meta><m n=":overload"/></meta>
		</getQueuedThreads>
		<getQueueLength public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getQueueLength>
		<hasQueuedThread public="1" set="method">
			<f a="param1">
				<c path="java.lang.Thread"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</hasQueuedThread>
		<hasQueuedThreads public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</hasQueuedThreads>
		<getOwner set="method">
			<f a=""><c path="java.lang.Thread"/></f>
			<meta><m n=":overload"/></meta>
		</getOwner>
		<isFair public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</isFair>
		<isLocked public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isLocked>
		<isHeldByCurrentThread public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isHeldByCurrentThread>
		<getHoldCount public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getHoldCount>
		<newCondition public="1" set="method">
			<f a=""><c path="java.util.concurrent.locks.Condition"/></f>
			<meta><m n=":overload"/></meta>
		</newCondition>
		<unlock public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</unlock>
		<tryLock public="1" set="method">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<e path="java.util.concurrent.TimeUnit"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
			</meta>
			<overloads><tryLock public="1" set="method">
	<f a=""><x path="Bool"/></f>
	<meta><m n=":overload"/></meta>
</tryLock></overloads>
		</tryLock>
		<lockInterruptibly public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
			</meta>
		</lockInterruptibly>
		<lock public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</lock>
		<new public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.concurrent.locks.ReentrantLock"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.concurrent.locks"</e>
				<e>"ReentrantLock"</e>
			</m>
		</meta>
	</class>
	<class path="java.vm.Lock" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/vm/Lock.hx">
		<releasedCount expr="0" line="29">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":private"/>
				<m n=":volatile"/>
			</meta>
		</releasedCount>
		<wait public="1" set="method" line="42">
			<f a="?timeout">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Waits for a lock to be released and acquire it.
		If `timeout` (in seconds) is not null and expires then the returned value is false</haxe_doc>
		</wait>
		<release public="1" set="method" line="95">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Release a lock. The thread does not need to own the lock to be able to release it.
		If a lock is released several times, it can be acquired as many times</haxe_doc>
		</release>
		<new public="1" set="method" line="34">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new lock, which is initially locked</haxe_doc>
		</new>
		<meta><m n=":native"><e>"haxe.java.vm.Lock"</e></m></meta>
	</class>
	<class path="haxe.EntryPoint" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/EntryPoint.hx">
		<sleepLock expr="new Lock()" line="46" static="1">
			<c path="java.vm.Lock"/>
			<meta><m n=":value"><e>new Lock()</e></m></meta>
		</sleepLock>
		<mutex expr="new Mutex()" line="47" static="1">
			<c path="java.vm.Mutex"/>
			<meta><m n=":value"><e>new Mutex()</e></m></meta>
		</mutex>
		<pending expr="new Array&lt;Void&gt;()" line="49" static="1">
			<c path="Array"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e><![CDATA[new Array<Void>()]]></e></m></meta>
		</pending>
		<threadCount public="1" set="null" expr="0" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</threadCount>
		<wakeup public="1" set="method" line="56" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Wakeup a sleeping run()</haxe_doc>
		</wakeup>
		<runInMainThread public="1" set="method" line="62" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></runInMainThread>
		<addThread public="1" set="method" line="73" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></addThread>
		<processEvents set="method" line="91" static="1"><f a=""><x path="Float"/></f></processEvents>
		<run public="1" set="method" line="112" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>Start the main loop. Depending on the platform, this can return immediately or will only return when the application exits.</haxe_doc>
		</run>
		<haxe_doc>If haxe.MainLoop is kept from DCE, then we will insert an haxe.EntryPoint.run() call just at then end of main().
	This class can be redefined by custom frameworks so they can handle their own main loop logic.</haxe_doc>
	</class>
	<abstract path="haxe.EnumFlags" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/EnumFlags.hx">
		<this><x path="Int"/></this>
		<haxe_doc>A typed interface for bit flags. This is not a real object, only a typed
	interface for an actual Int. Each flag can be tested/set with the
	corresponding enum instance. Up to 32 flags can be stored that way.

	Enum constructor indices are preserved from Haxe syntax, so the first
	declared is index 0, the next index 1 etc. The methods are optimized if the
	enum instance is passed directly, e.g. as has(EnumCtor). Otherwise
	Type.enumIndex() reflection is used.</haxe_doc>
		<impl><class path="haxe._EnumFlags.EnumFlags_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/EnumFlags.hx" private="1" module="haxe.EnumFlags">
	<_new public="1" get="inline" set="null" line="39" static="1">
		<f a="?i" v="0">
			<x path="Int"/>
			<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
		</f>
		<meta>
			<m n=":value"><e>{ i : 0 }</e></m>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Initializes the bitflags to `i`.</haxe_doc>
	</_new>
	<has public="1" get="inline" set="null" line="51" static="1">
		<f a="this:v">
			<x path="Int"/>
			<c path="haxe.EnumFlags.T"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Checks if the index of enum instance `v` is set.

		This method is optimized if `v` is an enum instance expression such as
		SomeEnum.SomeCtor.

		If `v` is null, the result is unspecified.</haxe_doc>
	</has>
	<set public="1" get="inline" set="null" line="63" static="1">
		<f a="this:v">
			<x path="Int"/>
			<c path="haxe.EnumFlags.T"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Sets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		SomeEnum.SomeCtor.

		If `v` is null, the result is unspecified.</haxe_doc>
	</set>
	<unset public="1" get="inline" set="null" line="75" static="1">
		<f a="this:v">
			<x path="Int"/>
			<c path="haxe.EnumFlags.T"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Unsets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		SomeEnum.SomeCtor.

		If `v` is null, the result is unspecified.</haxe_doc>
	</unset>
	<ofInt public="1" params="T" get="inline" set="null" line="83" static="1">
		<f a="i">
			<x path="Int"/>
			<x path="haxe.EnumFlags"><c path="ofInt.T"/></x>
		</f>
		<haxe_doc>Convert a integer bitflag into a typed one (this is a no-op, it does not
		have any impact on speed).</haxe_doc>
	</ofInt>
	<toInt public="1" get="inline" set="null" line="91" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Convert the typed bitflag into the corresponding int value (this is a
		no-op, it doesn't have any impact on speed).</haxe_doc>
	</toInt>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="haxe._EnumFlags.EnumFlags_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/EnumFlags.hx" private="1" module="haxe.EnumFlags">
		<_new public="1" get="inline" set="null" line="39" static="1">
			<f a="?i" v="0">
				<x path="Int"/>
				<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
			</f>
			<meta>
				<m n=":value"><e>{ i : 0 }</e></m>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Initializes the bitflags to `i`.</haxe_doc>
		</_new>
		<has public="1" get="inline" set="null" line="51" static="1">
			<f a="this:v">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Checks if the index of enum instance `v` is set.

		This method is optimized if `v` is an enum instance expression such as
		SomeEnum.SomeCtor.

		If `v` is null, the result is unspecified.</haxe_doc>
		</has>
		<set public="1" get="inline" set="null" line="63" static="1">
			<f a="this:v">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Sets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		SomeEnum.SomeCtor.

		If `v` is null, the result is unspecified.</haxe_doc>
		</set>
		<unset public="1" get="inline" set="null" line="75" static="1">
			<f a="this:v">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Unsets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		SomeEnum.SomeCtor.

		If `v` is null, the result is unspecified.</haxe_doc>
		</unset>
		<ofInt public="1" params="T" get="inline" set="null" line="83" static="1">
			<f a="i">
				<x path="Int"/>
				<x path="haxe.EnumFlags"><c path="ofInt.T"/></x>
			</f>
			<haxe_doc>Convert a integer bitflag into a typed one (this is a no-op, it does not
		have any impact on speed).</haxe_doc>
		</ofInt>
		<toInt public="1" get="inline" set="null" line="91" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Convert the typed bitflag into the corresponding int value (this is a
		no-op, it doesn't have any impact on speed).</haxe_doc>
		</toInt>
		<meta><m n=":final"/></meta>
	</class>
	<class path="haxe.EnumTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="50" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
			pack1.pack2.(...).packN.EnumName
		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="63" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="79" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="96" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="108" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an 
  [extension](https://haxe.org/manual/lf-static-extension.html) to the 
  `enum` types.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="132" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="143" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="157" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="169" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<match public="1" set="method" static="1">
			<f a="e:pattern">
				<x path="EnumValue"/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Matches enum instance `e` against pattern `pattern`, returning `true` if
		matching succeeded and `false` otherwise.

		Example usage:

		```haxe
		if (e.match(pattern)) {
			// codeIfTrue
		} else {
			// codeIfFalse
		}
		```

		This is equivalent to the following code:

		```haxe
		switch (e) {
			case pattern:
				// codeIfTrue
			case _:
				// codeIfFalse
		}
		```

		This method is implemented in the compiler. This definition exists only
		for documentation.</haxe_doc>
		</match>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an 
  [extension](https://haxe.org/manual/lf-static-extension.html) to the 
  `EnumValue` types.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.Http" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Http.hx">
		<PROXY public="1" expr="null" line="65" static="1">
			<a>
				<port><x path="Int"/></port>
				<host><c path="String"/></host>
				<auth><a>
	<user><c path="String"/></user>
	<pass><c path="String"/></pass>
</a></auth>
			</a>
			<meta><m n=":value"><e>null</e></m></meta>
		</PROXY>
		<requestUrl public="1" set="method" line="825" static="1">
			<f a="url">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Makes a synchronous request to `url`.

		This creates a new Http instance and makes a GET request by calling its
		`request(false)` method.

		If `url` is null, the result is unspecified.</haxe_doc>
		</requestUrl>
		<url public="1">
			<c path="String"/>
			<haxe_doc>The url of `this` request. It is used only by the `request()` method and
		can be changed in order to send the same request to different target
		Urls.</haxe_doc>
		</url>
		<responseData public="1" set="null"><t path="Null"><c path="String"/></t></responseData>
		<noShutdown public="1"><x path="Bool"/></noShutdown>
		<cnxTimeout public="1"><x path="Float"/></cnxTimeout>
		<responseHeaders public="1"><x path="Map">
	<c path="String"/>
	<c path="String"/>
</x></responseHeaders>
		<chunk_size><t path="Null"><x path="Int"/></t></chunk_size>
		<chunk_buf><c path="haxe.io.Bytes"/></chunk_buf>
		<file><a>
	<size><x path="Int"/></size>
	<param><c path="String"/></param>
	<mimeType><c path="String"/></mimeType>
	<io><c path="haxe.io.Input"/></io>
	<filename><c path="String"/></filename>
</a></file>
		<postData><c path="String"/></postData>
		<headers><c path="List"><a>
	<value><c path="String"/></value>
	<header><c path="String"/></header>
</a></c></headers>
		<params><c path="List"><a>
	<value><c path="String"/></value>
	<param><c path="String"/></param>
</a></c></params>
		<setHeader public="1" set="method" line="102">
			<f a="header:value">
				<c path="String"/>
				<c path="String"/>
				<c path="haxe.Http"/>
			</f>
			<haxe_doc>Sets the header identified as `header` to value `value`.

		If `header` or `value` are null, the result is unspecified.

		This method provides a fluent interface.</haxe_doc>
		</setHeader>
		<addHeader public="1" set="method" line="108"><f a="header:value">
	<c path="String"/>
	<c path="String"/>
	<c path="haxe.Http"/>
</f></addHeader>
		<setParameter public="1" set="method" line="120">
			<f a="param:value">
				<c path="String"/>
				<c path="String"/>
				<c path="haxe.Http"/>
			</f>
			<haxe_doc>Sets the parameter identified as `param` to value `value`.

		If `header` or `value` are null, the result is unspecified.

		This method provides a fluent interface.</haxe_doc>
		</setParameter>
		<addParameter public="1" set="method" line="126"><f a="param:value">
	<c path="String"/>
	<c path="String"/>
	<c path="haxe.Http"/>
</f></addParameter>
		<setPostData public="1" set="method" line="141">
			<f a="data">
				<c path="String"/>
				<c path="haxe.Http"/>
			</f>
			<haxe_doc>Sets the post data of `this` Http request to `data`.

		There can only be one post data per request. Subsequent calls overwrite
		the previously set value.

		If `data` is null, the post data is considered to be absent.

		This method provides a fluent interface.</haxe_doc>
		</setPostData>
		<request public="1" set="method" line="189">
			<f a="?post">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sends `this` Http request to the Url specified by `this.url`.

		If `post` is true, the request is sent as POST request, otherwise it is
		sent as GET request.

		Depending on the outcome of the request, this method calls the
		`onStatus()`, `onError()` or `onData()` callback functions.

		If `this.url` is null, the result is unspecified.

		If `this.url` is an invalid or inaccessible Url, the `onError()` callback
		function is called.

		[js] If `this.async` is false, the callback functions are called before
		this method returns.</haxe_doc>
		</request>
		<fileTransfert public="1" get="inline" set="null" line="417">
			<f a="argname:filename:file:size:?mimeType" v="::::&quot;application/octet-stream&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ mimeType : "application/octet-stream" }</e></m>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Note: Deprecated in 4.0</haxe_doc>
		</fileTransfert>
		<fileTransfer public="1" set="method" line="421">
			<f a="argname:filename:file:size:?mimeType" v="::::&quot;application/octet-stream&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ mimeType : "application/octet-stream" }</e></m></meta>
		</fileTransfer>
		<customRequest public="1" set="method" line="425"><f a="post:api:?sock:?method">
	<x path="Bool"/>
	<c path="haxe.io.Output"/>
	<c path="sys.net.Socket"/>
	<c path="String"/>
	<x path="Void"/>
</f></customRequest>
		<readHttpResponse set="method" line="585"><f a="api:sock">
	<c path="haxe.io.Output"/>
	<c path="sys.net.Socket"/>
	<x path="Void"/>
</f></readHttpResponse>
		<readChunk set="method" line="727"><f a="chunk_re:api:buf:len">
	<c path="EReg"/>
	<c path="haxe.io.Output"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></readChunk>
		<onData public="1" set="dynamic" line="793">
			<f a="data">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a successful request, with `data` containing
		the result String.

		The intended usage is to bind it to a custom function:  
		`httpInstance.onData = function(data) { // handle result }`</haxe_doc>
		</onData>
		<onError public="1" set="dynamic" line="803">
			<f a="msg">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a request error, with `msg` containing the
		error description.

		The intended usage is to bind it to a custom function:  
		`httpInstance.onError = function(msg) { // handle error }`</haxe_doc>
		</onError>
		<onStatus public="1" set="dynamic" line="813">
			<f a="status">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a Http status change, with `status` being the
		new status.

		The intended usage is to bind it to a custom function:  
		`httpInstance.onStatus = function(status) { // handle status }`</haxe_doc>
		</onStatus>
		<new public="1" set="method" line="79">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Http instance with `url` as parameter.

		This does not do a request until `request()` is called.

		If `url` is null, the field url must be set to a value before making the
		call to `request()`, or the result is unspecified.

		(Php) Https (SSL) connections are allowed only if the OpenSSL extension
		is enabled.</haxe_doc>
		</new>
		<haxe_doc>This class can be used to handle Http requests consistently across
	platforms. There are two intended usages:

	- call `haxe.Http.requestUrl(url)` and receive the result as a `String`
	(not available on flash)
	- create a `new haxe.Http(url)`, register your callbacks for `onData`, 
	`onError` and `onStatus`, then call `request()`.</haxe_doc>
	</class>
	<abstract path="haxe.Int32" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
 	all platforms.</haxe_doc>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Int32.hx" private="1" module="haxe.Int32">
	<preIncrement get="inline" set="null" line="31" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>++A</e></m>
		</meta>
	</preIncrement>
	<postIncrement get="inline" set="null" line="34" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</postIncrement>
	<preDecrement get="inline" set="null" line="40" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>--A</e></m>
		</meta>
	</preDecrement>
	<postDecrement get="inline" set="null" line="43" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A--</e></m>
		</meta>
	</postDecrement>
	<add get="inline" set="null" line="49" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</add>
	<addInt get="inline" set="null" line="52" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":op"><e>A + B</e></m>
			<m n=":commutative"/>
		</meta>
	</addInt>
	<sub get="inline" set="null" line="57" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</sub>
	<subInt get="inline" set="null" line="60" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subInt>
	<intSub get="inline" set="null" line="63" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</intSub>
	<toFloat get="inline" set="null" line="216" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toFloat>
	<ucompare public="1" set="method" line="222" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
	</ucompare>
	<clamp get="inline" set="null" line="233" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></clamp>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="haxe._Int32.Int32_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Int32.hx" private="1" module="haxe.Int32">
		<preIncrement get="inline" set="null" line="31" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>++A</e></m>
			</meta>
		</preIncrement>
		<postIncrement get="inline" set="null" line="34" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</postIncrement>
		<preDecrement get="inline" set="null" line="40" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>--A</e></m>
			</meta>
		</preDecrement>
		<postDecrement get="inline" set="null" line="43" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A--</e></m>
			</meta>
		</postDecrement>
		<add get="inline" set="null" line="49" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</add>
		<addInt get="inline" set="null" line="52" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":op"><e>A + B</e></m>
				<m n=":commutative"/>
			</meta>
		</addInt>
		<sub get="inline" set="null" line="57" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</sub>
		<subInt get="inline" set="null" line="60" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subInt>
		<intSub get="inline" set="null" line="63" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</intSub>
		<toFloat get="inline" set="null" line="216" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toFloat>
		<ucompare public="1" set="method" line="222" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
		</ucompare>
		<clamp get="inline" set="null" line="233" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></clamp>
		<meta><m n=":final"/></meta>
	</class>
	<typedef path="haxe._Int64.__Int64" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/haxe/Int64.hx" private="1" module="haxe.Int64"><x path="java.Int64"/></typedef>
	<abstract path="haxe.Int64" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/haxe/Int64.hx" private="1" module="haxe.Int64">
	<make public="1" get="inline" set="null" line="33" static="1">
		<f a="high:low">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":has_untyped"/></meta>
		<haxe_doc>Construct an Int64 from two 32-bit words `high` and `low`.</haxe_doc>
	</make>
	<_new get="inline" set="null" line="36" static="1">
		<f a="x">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<val get="accessor" set="accessor" static="1">
		<t path="haxe._Int64.__Int64"/>
		<meta><m n=":impl"/></meta>
	</val>
	<get_val get="inline" set="null" line="40" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<t path="haxe._Int64.__Int64"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_val>
	<set_val get="inline" set="null" line="41" static="1">
		<f a="this:x">
			<t path="haxe._Int64.__Int64"/>
			<t path="haxe._Int64.__Int64"/>
			<t path="haxe._Int64.__Int64"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_val>
	<high public="1" get="accessor" set="null" static="1">
		<x path="haxe.Int32"/>
		<meta><m n=":impl"/></meta>
	</high>
	<get_high public="1" get="inline" set="null" line="44" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_high>
	<low public="1" get="accessor" set="null" static="1">
		<x path="haxe.Int32"/>
		<meta><m n=":impl"/></meta>
	</low>
	<get_low public="1" get="inline" set="null" line="47" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_low>
	<copy public="1" get="inline" set="null" line="49" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Makes a copy of `this` Int64.</haxe_doc>
	</copy>
	<ofInt public="1" get="inline" set="null" line="52" static="1">
		<f a="x">
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>Returns an Int64 with the value of the Int `x`.
		`x` is sign-extended to fill 64 bits.</haxe_doc>
	</ofInt>
	<is public="1" get="inline" set="null" line="55" static="1">
		<f a="val">
			<d/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns whether the value `val` is of type `haxe.Int64`</haxe_doc>
	</is>
	<toInt public="1" get="inline" set="null" line="58" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Returns an Int with the value of the Int64 `x`.
		Throws an exception  if `x` cannot be represented in 32 bits.</haxe_doc>
	</toInt>
	<getHigh public="1" get="inline" set="null" line="64" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<haxe_doc>Returns the high 32-bit word of `x`.</haxe_doc>
	</getHigh>
	<getLow public="1" get="inline" set="null" line="67" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<haxe_doc>Returns the low 32-bit word of `x`.</haxe_doc>
	</getLow>
	<isNeg public="1" get="inline" set="null" line="70" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns `true` if `x` is less than zero.</haxe_doc>
	</isNeg>
	<isZero public="1" get="inline" set="null" line="73" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns `true` if `x` is exactly zero.</haxe_doc>
	</isZero>
	<compare public="1" get="inline" set="null" line="76" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc><![CDATA[Compares `a` and `b` in signed mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
	</compare>
	<ucompare public="1" get="inline" set="null" line="83" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc><![CDATA[Compares `a` and `b` in unsigned mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
	</ucompare>
	<toStr public="1" get="inline" set="null" line="89" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns a signed decimal `String` representation of `x`.</haxe_doc>
	</toStr>
	<divMod public="1" get="inline" set="null" line="92" static="1">
		<f a="dividend:divisor">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<a>
				<quotient><x path="haxe.Int64"/></quotient>
				<modulus><x path="haxe.Int64"/></modulus>
			</a>
		</f>
		<haxe_doc>Performs signed integer divison of `dividend` by `divisor`.
		Returns `{ quotient : Int64, modulus : Int64 }`.</haxe_doc>
	</divMod>
	<toString get="inline" set="null" line="95" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
	<parseString public="1" set="method" line="98" static="1"><f a="sParam">
	<c path="String"/>
	<x path="haxe.Int64"/>
</f></parseString>
	<fromFloat public="1" set="method" line="103" static="1"><f a="f">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></fromFloat>
	<neg public="1" set="method" line="107" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc>Returns the negative of `x`.</haxe_doc>
	</neg>
	<preIncrement get="inline" set="null" line="110" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>++A</e></m>
		</meta>
	</preIncrement>
	<postIncrement get="inline" set="null" line="113" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</postIncrement>
	<preDecrement get="inline" set="null" line="116" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>--A</e></m>
		</meta>
	</preDecrement>
	<postDecrement get="inline" set="null" line="119" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A--</e></m>
		</meta>
	</postDecrement>
	<add public="1" get="inline" set="null" line="122" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc>Returns the sum of `a` and `b`.</haxe_doc>
	</add>
	<addInt get="inline" set="null" line="125" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":op"><e>A + B</e></m>
			<m n=":commutative"/>
		</meta>
	</addInt>
	<sub public="1" get="inline" set="null" line="128" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc>Returns `a` minus `b`.</haxe_doc>
	</sub>
	<subInt get="inline" set="null" line="131" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subInt>
	<intSub get="inline" set="null" line="134" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</intSub>
	<mul public="1" get="inline" set="null" line="137" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
		<haxe_doc>Returns the product of `a` and `b`.</haxe_doc>
	</mul>
	<mulInt get="inline" set="null" line="140" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
	</mulInt>
	<div public="1" get="inline" set="null" line="143" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
		<haxe_doc>Returns the quotient of `a` divided by `b`.</haxe_doc>
	</div>
	<divInt get="inline" set="null" line="146" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divInt>
	<intDiv get="inline" set="null" line="149" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</intDiv>
	<mod public="1" get="inline" set="null" line="152" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
		<haxe_doc>Returns the modulus of `a` divided by `b`.</haxe_doc>
	</mod>
	<modInt get="inline" set="null" line="155" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</modInt>
	<intMod get="inline" set="null" line="158" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</intMod>
	<eq public="1" get="inline" set="null" line="161" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc>Returns `true` if `a` is equal to `b`.</haxe_doc>
	</eq>
	<eqInt get="inline" set="null" line="164" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":op"><e>A == B</e></m>
			<m n=":commutative"/>
		</meta>
	</eqInt>
	<neq public="1" get="inline" set="null" line="167" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc>Returns `true` if `a` is not equal to `b`.</haxe_doc>
	</neq>
	<neqInt get="inline" set="null" line="170" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":op"><e>A != B</e></m>
			<m n=":commutative"/>
		</meta>
	</neqInt>
	<lt get="inline" set="null" line="173" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</lt>
	<ltInt get="inline" set="null" line="176" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</ltInt>
	<intLt get="inline" set="null" line="179" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</intLt>
	<lte get="inline" set="null" line="182" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lte>
	<lteInt get="inline" set="null" line="185" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lteInt>
	<intLte get="inline" set="null" line="188" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</intLte>
	<gt get="inline" set="null" line="191" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gt>
	<gtInt get="inline" set="null" line="194" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gtInt>
	<intGt get="inline" set="null" line="197" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</intGt>
	<gte get="inline" set="null" line="200" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gte>
	<gteInt get="inline" set="null" line="203" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gteInt>
	<intGte get="inline" set="null" line="206" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</intGte>
	<complement get="inline" set="null" line="209" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>~A</e></m></meta>
	</complement>
	<and public="1" get="inline" set="null" line="212" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
		<haxe_doc>Returns the bitwise AND of `a` and `b`.</haxe_doc>
	</and>
	<or public="1" get="inline" set="null" line="215" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A | B</e></m></meta>
		<haxe_doc>Returns the bitwise OR of `a` and `b`.</haxe_doc>
	</or>
	<xor public="1" get="inline" set="null" line="218" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A ^ B</e></m></meta>
		<haxe_doc>Returns the bitwise XOR of `a` and `b`.</haxe_doc>
	</xor>
	<shl public="1" get="inline" set="null" line="221" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
		<haxe_doc>Returns `a` left-shifted by `b` bits.</haxe_doc>
	</shl>
	<shr public="1" get="inline" set="null" line="224" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
		<haxe_doc>Returns `a` right-shifted by `b` bits in signed mode.
		`a` is sign-extended.</haxe_doc>
	</shr>
	<ushr public="1" get="inline" set="null" line="227" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
		<haxe_doc>Returns `a` right-shifted by `b` bits in unsigned mode.
		`a` is padded with zeroes.</haxe_doc>
	</ushr>
	<meta>
		<m n=":final"/>
		<m n=":coreApi"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe._Int64.Int64_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<make public="1" get="inline" set="null" line="33" static="1">
			<f a="high:low">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Construct an Int64 from two 32-bit words `high` and `low`.</haxe_doc>
		</make>
		<_new get="inline" set="null" line="36" static="1">
			<f a="x">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<val get="accessor" set="accessor" static="1">
			<t path="haxe._Int64.__Int64"/>
			<meta><m n=":impl"/></meta>
		</val>
		<get_val get="inline" set="null" line="40" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_val>
		<set_val get="inline" set="null" line="41" static="1">
			<f a="this:x">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_val>
		<high public="1" get="accessor" set="null" static="1">
			<x path="haxe.Int32"/>
			<meta><m n=":impl"/></meta>
		</high>
		<get_high public="1" get="inline" set="null" line="44" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_high>
		<low public="1" get="accessor" set="null" static="1">
			<x path="haxe.Int32"/>
			<meta><m n=":impl"/></meta>
		</low>
		<get_low public="1" get="inline" set="null" line="47" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_low>
		<copy public="1" get="inline" set="null" line="49" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Makes a copy of `this` Int64.</haxe_doc>
		</copy>
		<ofInt public="1" get="inline" set="null" line="52" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>Returns an Int64 with the value of the Int `x`.
		`x` is sign-extended to fill 64 bits.</haxe_doc>
		</ofInt>
		<is public="1" get="inline" set="null" line="55" static="1">
			<f a="val">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns whether the value `val` is of type `haxe.Int64`</haxe_doc>
		</is>
		<toInt public="1" get="inline" set="null" line="58" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns an Int with the value of the Int64 `x`.
		Throws an exception  if `x` cannot be represented in 32 bits.</haxe_doc>
		</toInt>
		<getHigh public="1" get="inline" set="null" line="64" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<haxe_doc>Returns the high 32-bit word of `x`.</haxe_doc>
		</getHigh>
		<getLow public="1" get="inline" set="null" line="67" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<haxe_doc>Returns the low 32-bit word of `x`.</haxe_doc>
		</getLow>
		<isNeg public="1" get="inline" set="null" line="70" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `x` is less than zero.</haxe_doc>
		</isNeg>
		<isZero public="1" get="inline" set="null" line="73" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `x` is exactly zero.</haxe_doc>
		</isZero>
		<compare public="1" get="inline" set="null" line="76" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Compares `a` and `b` in signed mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
		</compare>
		<ucompare public="1" get="inline" set="null" line="83" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Compares `a` and `b` in unsigned mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
		</ucompare>
		<toStr public="1" get="inline" set="null" line="89" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a signed decimal `String` representation of `x`.</haxe_doc>
		</toStr>
		<divMod public="1" get="inline" set="null" line="92" static="1">
			<f a="dividend:divisor">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<a>
					<quotient><x path="haxe.Int64"/></quotient>
					<modulus><x path="haxe.Int64"/></modulus>
				</a>
			</f>
			<haxe_doc>Performs signed integer divison of `dividend` by `divisor`.
		Returns `{ quotient : Int64, modulus : Int64 }`.</haxe_doc>
		</divMod>
		<toString get="inline" set="null" line="95" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
		<parseString public="1" set="method" line="98" static="1"><f a="sParam">
	<c path="String"/>
	<x path="haxe.Int64"/>
</f></parseString>
		<fromFloat public="1" set="method" line="103" static="1"><f a="f">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></fromFloat>
		<neg public="1" set="method" line="107" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc>Returns the negative of `x`.</haxe_doc>
		</neg>
		<preIncrement get="inline" set="null" line="110" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>++A</e></m>
			</meta>
		</preIncrement>
		<postIncrement get="inline" set="null" line="113" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</postIncrement>
		<preDecrement get="inline" set="null" line="116" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>--A</e></m>
			</meta>
		</preDecrement>
		<postDecrement get="inline" set="null" line="119" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A--</e></m>
			</meta>
		</postDecrement>
		<add public="1" get="inline" set="null" line="122" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc>Returns the sum of `a` and `b`.</haxe_doc>
		</add>
		<addInt get="inline" set="null" line="125" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":op"><e>A + B</e></m>
				<m n=":commutative"/>
			</meta>
		</addInt>
		<sub public="1" get="inline" set="null" line="128" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc>Returns `a` minus `b`.</haxe_doc>
		</sub>
		<subInt get="inline" set="null" line="131" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subInt>
		<intSub get="inline" set="null" line="134" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</intSub>
		<mul public="1" get="inline" set="null" line="137" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
			<haxe_doc>Returns the product of `a` and `b`.</haxe_doc>
		</mul>
		<mulInt get="inline" set="null" line="140" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
		</mulInt>
		<div public="1" get="inline" set="null" line="143" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
			<haxe_doc>Returns the quotient of `a` divided by `b`.</haxe_doc>
		</div>
		<divInt get="inline" set="null" line="146" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divInt>
		<intDiv get="inline" set="null" line="149" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</intDiv>
		<mod public="1" get="inline" set="null" line="152" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
			<haxe_doc>Returns the modulus of `a` divided by `b`.</haxe_doc>
		</mod>
		<modInt get="inline" set="null" line="155" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</modInt>
		<intMod get="inline" set="null" line="158" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</intMod>
		<eq public="1" get="inline" set="null" line="161" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc>Returns `true` if `a` is equal to `b`.</haxe_doc>
		</eq>
		<eqInt get="inline" set="null" line="164" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":op"><e>A == B</e></m>
				<m n=":commutative"/>
			</meta>
		</eqInt>
		<neq public="1" get="inline" set="null" line="167" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc>Returns `true` if `a` is not equal to `b`.</haxe_doc>
		</neq>
		<neqInt get="inline" set="null" line="170" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":op"><e>A != B</e></m>
				<m n=":commutative"/>
			</meta>
		</neqInt>
		<lt get="inline" set="null" line="173" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</lt>
		<ltInt get="inline" set="null" line="176" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</ltInt>
		<intLt get="inline" set="null" line="179" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</intLt>
		<lte get="inline" set="null" line="182" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lte>
		<lteInt get="inline" set="null" line="185" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lteInt>
		<intLte get="inline" set="null" line="188" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</intLte>
		<gt get="inline" set="null" line="191" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gt>
		<gtInt get="inline" set="null" line="194" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gtInt>
		<intGt get="inline" set="null" line="197" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</intGt>
		<gte get="inline" set="null" line="200" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gte>
		<gteInt get="inline" set="null" line="203" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gteInt>
		<intGte get="inline" set="null" line="206" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</intGte>
		<complement get="inline" set="null" line="209" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>~A</e></m></meta>
		</complement>
		<and public="1" get="inline" set="null" line="212" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
			<haxe_doc>Returns the bitwise AND of `a` and `b`.</haxe_doc>
		</and>
		<or public="1" get="inline" set="null" line="215" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A | B</e></m></meta>
			<haxe_doc>Returns the bitwise OR of `a` and `b`.</haxe_doc>
		</or>
		<xor public="1" get="inline" set="null" line="218" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A ^ B</e></m></meta>
			<haxe_doc>Returns the bitwise XOR of `a` and `b`.</haxe_doc>
		</xor>
		<shl public="1" get="inline" set="null" line="221" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
			<haxe_doc>Returns `a` left-shifted by `b` bits.</haxe_doc>
		</shl>
		<shr public="1" get="inline" set="null" line="224" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
			<haxe_doc>Returns `a` right-shifted by `b` bits in signed mode.
		`a` is sign-extended.</haxe_doc>
		</shr>
		<ushr public="1" get="inline" set="null" line="227" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
			<haxe_doc>Returns `a` right-shifted by `b` bits in unsigned mode.
		`a` is padded with zeroes.</haxe_doc>
		</ushr>
		<meta>
			<m n=":final"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.Int64Helper" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Int64Helper.hx">
		<parseString public="1" set="method" line="35" static="1">
			<f a="sParam">
				<c path="String"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Create `Int64` from given string.</haxe_doc>
		</parseString>
		<fromFloat public="1" set="method" line="75" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Create `Int64` from given float.</haxe_doc>
		</fromFloat>
		<haxe_doc>Helper for parsing to `Int64` instances.</haxe_doc>
	</class>
	<class path="haxe.Json" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Json.hx">
		<parse public="1" get="inline" set="null" line="43" static="1">
			<f a="text">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Parses given JSON-encoded `text` and returns the resulting object.

		JSON objects are parsed into anonymous structures and JSON arrays
		are parsed into `Array<Dynamic>`.

		If given `text` is not valid JSON, an exception will be thrown.

		@see https://haxe.org/manual/std-Json-parsing.html]]></haxe_doc>
		</parse>
		<stringify public="1" get="inline" set="null" line="59" static="1">
			<f a="value:?replacer:?space">
				<d/>
				<f a=":">
					<d/>
					<d/>
					<d/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes the given `value` and returns the resulting JSON string.

		If `replacer` is given and is not null, it is used to retrieve the
		actual object to be encoded. The `replacer` function takes two parameters,
		the key and the value being encoded. Initial key value is an empty string.
		
		If `space` is given and is not null, the result will be pretty-printed.
		Successive levels will be indented by this string.

		@see https://haxe.org/manual/std-Json-encoding.html</haxe_doc>
		</stringify>
		<haxe_doc>Cross-platform JSON API: it will automatically use the optimized native API if available.
	Use `-D haxeJSON` to force usage of the Haxe implementation even if a native API is found:
	This will provide extra encoding features such as enums (replaced by their index) and StringMaps.

	@see https://haxe.org/manual/std-Json.html</haxe_doc>
	</class>
	<class path="haxe.Log" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Log.hx">
		<trace public="1" set="dynamic" line="47" static="1">
			<f a="v:?infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the `trace()` call was made.

		This method can be rebound to a custom function:
			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v, ?infos) {
			  // handle trace
			}
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to `trace()` will cause an
		exception.</haxe_doc>
		</trace>
		<haxe_doc>Log primarily provides the `trace()` method, which is invoked upon a call to
	`trace()` in Haxe code.</haxe_doc>
	</class>
	<class path="haxe.MainEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/MainLoop.hx" module="haxe.MainLoop">
		<f><f a=""><x path="Void"/></f></f>
		<prev><c path="haxe.MainEvent"/></prev>
		<next><c path="haxe.MainEvent"/></next>
		<nextRun public="1" set="null"><x path="Float"/></nextRun>
		<priority public="1" set="null"><x path="Int"/></priority>
		<delay public="1" set="method" line="22">
			<f a="t">
				<t path="Null"><x path="Float"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Delay the execution of the event for the given time, in seconds.
		If t is null, the event will be run at tick() time.</haxe_doc>
		</delay>
		<call public="1" get="inline" set="null" line="29">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Call the event. Will do nothing is the event has been stopped.</haxe_doc>
		</call>
		<stop public="1" set="method" line="36">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stop the event from firing anymore.</haxe_doc>
		</stop>
		<new set="method" line="12"><f a="f:p">
	<f a=""><x path="Void"/></f>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.MainLoop" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/MainLoop.hx">
		<pending expr="null" line="53" static="1">
			<c path="haxe.MainEvent"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</pending>
		<threadCount public="1" get="accessor" set="null" static="1"><x path="Int"/></threadCount>
		<get_threadCount get="inline" set="null" line="57" static="1"><f a=""><x path="Int"/></f></get_threadCount>
		<hasEvents public="1" get="inline" set="null" line="59" static="1"><f a=""><x path="Bool"/></f></hasEvents>
		<addThread public="1" set="method" line="63" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></addThread>
		<runInMainThread public="1" set="method" line="67" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></runInMainThread>
		<add public="1" set="method" line="74" static="1">
			<f a="f:?priority" v=":0">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<c path="haxe.MainEvent"/>
			</f>
			<meta><m n=":value"><e>{ priority : 0 }</e></m></meta>
			<haxe_doc>Add a pending event to be run into the main loop.</haxe_doc>
		</add>
		<sortEvents set="method" line="85" static="1"><f a=""><x path="Void"/></f></sortEvents>
		<tick set="method" line="146" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Run the pending events. Return the time for next event.</haxe_doc>
		</tick>
		<meta><m n=":access"><e>haxe.MainEvent</e></m></meta>
	</class>
	<typedef path="haxe.PosInfos" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<t path="Null"><c path="Array"><d/></c></t>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>PosInfos is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	(..., ?pos:haxe.PosInfos), each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe.Resource" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/haxe/Resource.hx">
		<content static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":keep"/></meta>
		</content>
		<listNames public="1" get="inline" set="null" line="28" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Lists all available resource names. The resource name is the name part
		of the -resource file@name command line parameter.</haxe_doc>
		</listNames>
		<getString public="1" set="method" line="33" static="1">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":access"><e>haxe.io.Path.escape</e></m></meta>
			<haxe_doc>Retrieves the resource identified by `name` as a String.

		If `name` does not match any resource name, null is returned.</haxe_doc>
		</getString>
		<getBytes public="1" set="method" line="43" static="1">
			<f a="name">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":access"><e>haxe.io.Path.escape</e></m></meta>
			<haxe_doc>Retrieves the resource identified by `name` as an instance of
		haxe.io.Bytes.

		If `name` does not match any resource name, null is returned.</haxe_doc>
		</getBytes>
		<haxe_doc>Resource can be used to access resources that were added through the
	-resource file@name command line parameter.

	Depending on their type they can be obtained as String through
	getString(name), or as binary data through getBytes(name).

	A list of all available resource names can be obtained from listNames().</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.Serializer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Serializer.hx">
		<USE_CACHE public="1" expr="false" line="55" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>If the values you are serializing can contain circular references or
		objects repetitions, you should set `USE_CACHE` to true to prevent
		infinite loops.

		This may also reduce the size of serialization Strings at the expense of
		performance.

		This value can be changed for individual instances of Serializer by
		setting their useCache field.</haxe_doc>
		</USE_CACHE>
		<USE_ENUM_INDEX public="1" expr="false" line="67" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>Use constructor indexes for enums instead of names.

		This may reduce the size of serialization Strings, but makes them less
		suited for long-term storage: If constructors are removed or added from
		the enum, the indices may no longer match.

		This value can be changed for individual instances of Serializer by
		setting their useEnumIndex field.</haxe_doc>
		</USE_ENUM_INDEX>
		<BASE64 expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:&quot;" line="69" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:"</e></m></meta>
		</BASE64>
		<BASE64_CODES expr="null" line="70" static="1">
			<x path="haxe.ds.Vector"><t path="Null"><x path="Int"/></t></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</BASE64_CODES>
		<run public="1" set="method" line="556" static="1">
			<f a="v">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Serializes `v` and returns the String representation.

		This is a convenience function for creating a new instance of
		Serializer, serialize `v` into it and obtain the result through a call
		to toString().</haxe_doc>
		</run>
		<buf><c path="StringBuf"/></buf>
		<cache><c path="Array"><d/></c></cache>
		<shash><c path="haxe.ds.StringMap"><x path="Int"/></c></shash>
		<scount><x path="Int"/></scount>
		<useCache public="1">
			<x path="Bool"/>
			<haxe_doc>The individual cache setting for `this` Serializer instance.

		See USE_CACHE for a complete description.</haxe_doc>
		</useCache>
		<useEnumIndex public="1">
			<x path="Bool"/>
			<haxe_doc>The individual enum index setting for `this` Serializer instance.

		See USE_ENUM_INDEX for a complete description.</haxe_doc>
		</useEnumIndex>
		<toString public="1" set="method" line="116">
			<f a=""><c path="String"/></f>
			<haxe_doc>Return the String representation of `this` Serializer.

		The exact format specification can be found here:
		https://haxe.org/manual/serialization/format</haxe_doc>
		</toString>
		<serializeString set="method" line="153"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></serializeString>
		<serializeRef set="method" line="172"><f a="v">
	<unknown/>
	<x path="Bool"/>
</f></serializeRef>
		<serializeFields set="method" line="209"><f a="v">
	<unknown/>
	<x path="Void"/>
</f></serializeFields>
		<serialize public="1" set="method" line="227">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Serializes `v`.

		All haxe-defined values and objects with the exception of functions can
		be serialized. Serialization of external/native objects is not
		guaranteed to work.

		The values of `this.useCache` and `this.useEnumIndex` may affect
		serialization output.</haxe_doc>
		</serialize>
		<__getField get="inline" set="null" line="531">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</__getField>
		<serializeException public="1" set="method" line="533"><f a="e">
	<d/>
	<x path="Void"/>
</f></serializeException>
		<new public="1" set="method" line="101">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Serializer instance.

		Subsequent calls to `this.serialize` will append values to the
		internal buffer of this String. Once complete, the contents can be
		retrieved through a call to `this.toString`.

		Each Serializer instance maintains its own cache if this.useCache` is
		true.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The Serializer class can be used to encode values and objects into a `String`,
	from which the `Unserializer` class can recreate the original representation.

	This class can be used in two ways:

	- create a `new Serializer()` instance, call its `serialize()` method with
		any argument and finally retrieve the String representation from
		`toString()`
	- call `Serializer.run()` to obtain the serialized representation of a
		single argument

	Serialization is guaranteed to work for all haxe-defined classes, but may
	or may not work for instances of external/native classes.

	The specification of the serialization format can be found here:
	<https://haxe.org/manual/serialization/format>]]></haxe_doc>
	</class>
	<enum path="haxe._Template.TemplateExpr" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Template.hx" private="1" module="haxe.Template">
		<OpVar a="v"><c path="String"/></OpVar>
		<OpExpr a="expr"><f a=""><d/></f></OpExpr>
		<OpIf a="expr:eif:eelse">
			<f a=""><d/></f>
			<e path="haxe._Template.TemplateExpr"/>
			<e path="haxe._Template.TemplateExpr"/>
		</OpIf>
		<OpStr a="str"><c path="String"/></OpStr>
		<OpBlock a="l"><c path="List"><e path="haxe._Template.TemplateExpr"/></c></OpBlock>
		<OpForeach a="expr:loop">
			<f a=""><d/></f>
			<e path="haxe._Template.TemplateExpr"/>
		</OpForeach>
		<OpMacro a="name:params">
			<c path="String"/>
			<c path="List"><e path="haxe._Template.TemplateExpr"/></c>
		</OpMacro>
	</enum>
	<typedef path="haxe._Template.Token" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Template.hx" private="1" module="haxe.Template"><a>
	<s><x path="Bool"/></s>
	<p><c path="String"/></p>
	<l><c path="Array"><c path="String"/></c></l>
</a></typedef>
	<typedef path="haxe._Template.ExprToken" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Template.hx" private="1" module="haxe.Template"><a>
	<s><x path="Bool"/></s>
	<p><c path="String"/></p>
</a></typedef>
	<class path="java.util.regex.Pattern" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern.class" extern="1">
		<implements path="java.io.Serializable"/>
		<quote public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</quote>
		<matches public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.lang.CharSequence"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</matches>
		<compile public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<c path="java.util.regex.Pattern"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compile public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<c path="java.util.regex.Pattern"/>
	</f>
	<meta><m n=":overload"/></meta>
</compile></overloads>
		</compile>
		<_compile public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<c path="java.util.regex.Pattern"/>
			</f>
			<meta>
				<m n=":native"><e>"compile"</e></m>
				<m n=":deprecated"><e>"This static field `_compile` is deprecated and will be removed in later versions. Please use `compile` instead"</e></m>
				<m n=":overload"/>
			</meta>
			<overloads><compile public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<c path="java.util.regex.Pattern"/>
	</f>
	<meta>
		<m n=":native"><e>"compile"</e></m>
		<m n=":deprecated"><e>"This static field `_compile` is deprecated and will be removed in later versions. Please use `compile` instead"</e></m>
		<m n=":overload"/>
	</meta>
</compile></overloads>
		</_compile>
		<UNIX_LINES public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</UNIX_LINES>
		<CASE_INSENSITIVE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</CASE_INSENSITIVE>
		<COMMENTS public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</COMMENTS>
		<MULTILINE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MULTILINE>
		<LITERAL public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</LITERAL>
		<DOTALL public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</DOTALL>
		<UNICODE_CASE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</UNICODE_CASE>
		<CANON_EQ public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</CANON_EQ>
		<UNICODE_CHARACTER_CLASS public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</UNICODE_CHARACTER_CLASS>
		<split public="1" set="method">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.NativeArray"><c path="String"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><split public="1" set="method">
	<f a="param1:param2">
		<c path="java.lang.CharSequence"/>
		<x path="Int"/>
		<c path="java.NativeArray"><c path="String"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</split></overloads>
		</split>
		<flags public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</flags>
		<matcher public="1" set="method">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.util.regex.Matcher"/>
			</f>
			<meta><m n=":overload"/></meta>
		</matcher>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<pattern public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</pattern>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern"</e>
			</m>
		</meta>
	</class>
	<class path="haxe.Template" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Template.hx">
		<splitter expr="~/(::[A-Za-z0-9_ ()&amp;|!+=/&gt;&lt;*.&quot;-]+::|\$\$([A-Za-z0-9_-]+)\()/" line="54" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e><![CDATA[~/(::[A-Za-z0-9_ ()&|!+=/><*."-]+::|\$\$([A-Za-z0-9_-]+)\()/]]></e></m></meta>
		</splitter>
		<expr_splitter expr="~/(\(|\)|[ 
	]*&quot;[^&quot;]*&quot;[ 
	]*|[!+=/&gt;&lt;*.&amp;|-]+)/" line="55" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e><![CDATA[~/(\(|\)|[ 
	]*"[^"]*"[ 
	]*|[!+=/><*.&|-]+)/]]></e></m></meta>
		</expr_splitter>
		<expr_trim expr="~/^[ ]*([^ ]+)[ ]*$/" line="56" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[ ]*([^ ]+)[ ]*$/</e></m></meta>
		</expr_trim>
		<expr_int expr="~/^[0-9]+$/" line="57" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[0-9]+$/</e></m></meta>
		</expr_int>
		<expr_float expr="~/^([+-]?)(?=\d|,\d)\d*(,\d*)?([Ee]([+-]?\d+))?$/" line="58" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^([+-]?)(?=\d|,\d)\d*(,\d*)?([Ee]([+-]?\d+))?$/</e></m></meta>
		</expr_float>
		<globals public="1" expr="{ }" line="64" static="1">
			<d/>
			<meta><m n=":value"><e>{ }</e></m></meta>
			<haxe_doc>Global replacements which are used across all Template instances. This
		has lower priority than the context argument of execute().</haxe_doc>
		</globals>
		<expr><e path="haxe._Template.TemplateExpr"/></expr>
		<context><d/></context>
		<macros><d/></macros>
		<stack><c path="List"><d/></c></stack>
		<buf><c path="StringBuf"/></buf>
		<execute public="1" set="method" line="105">
			<f a="context:?macros">
				<d/>
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Executes `this` Template, taking into account `context` for
		replacements and `macros` for callback functions.

		If `context` has a field 'name', its value replaces all occurrences of
		::name:: in the Template. Otherwise Template.globals is checked instead,
		If 'name' is not a field of that either, ::name:: is replaced with null.

		If `macros` has a field 'name', all occurrences of $$name(args) are
		replaced with the result of calling that field. The first argument is
		always the resolve() method, followed by the given arguments.
		If `macros` has no such field, the result is unspecified.

		If `context` is null, the result is unspecified. If `macros` is null,
		no macros are used.</haxe_doc>
		</execute>
		<resolve set="method" line="114"><f a="v">
	<c path="String"/>
	<d/>
</f></resolve>
		<parseTokens set="method" line="128"><f a="data">
	<c path="String"/>
	<c path="List"><t path="haxe._Template.Token"/></c>
</f></parseTokens>
		<parseBlock set="method" line="174"><f a="tokens">
	<c path="List"><t path="haxe._Template.Token"/></c>
	<e path="haxe._Template.TemplateExpr"/>
</f></parseBlock>
		<parse set="method" line="189"><f a="tokens">
	<c path="List"><t path="haxe._Template.Token"/></c>
	<e path="haxe._Template.TemplateExpr"/>
</f></parse>
		<parseExpr set="method" line="239"><f a="data">
	<c path="String"/>
	<f a=""><unknown/></f>
</f></parseExpr>
		<makeConst set="method" line="270"><f a="v">
	<c path="String"/>
	<f a=""><d/></f>
</f></makeConst>
		<makePath set="method" line="289"><f a="e:l">
	<f a=""><d/></f>
	<c path="List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makePath>
		<makeExpr set="method" line="303"><f a="l">
	<c path="List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makeExpr>
		<makeExpr2 set="method" line="307"><f a="l">
	<c path="List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makeExpr2>
		<run set="method" line="353"><f a="e">
	<e path="haxe._Template.TemplateExpr"/>
	<x path="Void"/>
</f></run>
		<new public="1" set="method" line="82">
			<f a="str">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Template instance from `str`.

		`str` is parsed into tokens, which are stored for internal use. This
		means that multiple execute() operations on a single Template instance
		are more efficient than one execute() operations on multiple Template
		instances.

		If `str` is null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Template provides a basic templating mechanism to replace values in a source
	String, and to have some basic logic.

	A complete documentation of the supported syntax is available at:
	<https://haxe.org/manual/std-template.html>]]></haxe_doc>
	</class>
	<class path="haxe.Timer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Timer.hx">
		<delay public="1" set="method" line="136" static="1">
			<f a="f:time_ms">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<c path="haxe.Timer"/>
			</f>
			<haxe_doc>Invokes `f` after `time_ms` milliseconds.

		This is a convenience function for creating a new Timer instance with
		`time_ms` as argument, binding its run() method to `f` and then stopping
		`this` Timer upon the first invocation.

		If `f` is null, the result is unspecified.</haxe_doc>
		</delay>
		<measure public="1" params="T" set="method" line="156" static="1">
			<f a="f:?pos">
				<f a=""><c path="measure.T"/></f>
				<t path="haxe.PosInfos"/>
				<c path="measure.T"/>
			</f>
			<haxe_doc>Measures the time it takes to execute `f`, in seconds with fractions.

		This is a convenience function for calculating the difference between
		Timer.stamp() before and after the invocation of `f`.

		The difference is passed as argument to Log.trace(), with "s" appended
		to denote the unit. The optional `pos` argument is passed through.

		If `f` is null, the result is unspecified.</haxe_doc>
		</measure>
		<stamp public="1" get="inline" set="null" line="169" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a timestamp, in seconds with fractions.

		The value itself might differ depending on platforms, only differences
		between two values make sense.</haxe_doc>
		</stamp>
		<timer><c path="java.util.Timer"/></timer>
		<task><c path="java.util.TimerTask"/></task>
		<stop public="1" set="method" line="88">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stops `this` Timer.

		After calling this method, no additional invocations of `this.run`
		will occur.

		It is not possible to restart `this` Timer once stopped.</haxe_doc>
		</stop>
		<run public="1" set="dynamic" line="123">
			<f a=""><x path="Void"/></f>
			<haxe_doc>This method is invoked repeatedly on `this` Timer.

		It can be overridden in a subclass, or rebound directly to a custom
		function:
			var timer = new haxe.Timer(1000); // 1000ms delay
			timer.run = function() { ... }

		Once bound, it can still be rebound to different functions until `this`
		Timer is stopped through a call to `this.stop`.</haxe_doc>
		</run>
		<new public="1" set="method" line="60">
			<f a="time_ms">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new timer that will run every `time_ms` milliseconds.

		After creating the Timer instance, it calls `this.run` repeatedly,
		with delays of `time_ms` milliseconds, until `this.stop` is called.

		The first invocation occurs after `time_ms` milliseconds, not
		immediately.

		The accuracy of this may be platform-dependent.</haxe_doc>
		</new>
		<haxe_doc>The Timer class allows you to create asynchronous timers on platforms that
	support events.

	The intended usage is to create an instance of the Timer class with a given
	interval, set its run() method to a custom function to be invoked and
	eventually call stop() to stop the Timer.

	Note that a running Timer may or may not prevent the program to exit
	automatically when main() returns.

	It is also possible to extend this class and override its run() method in
	the child class.</haxe_doc>
	</class>
	<class path="java.lang.Runnable" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Runnable.class" extern="1" interface="1">
		<run public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</run>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Runnable"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Runnable"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.TimerTask" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/TimerTask.class" extern="1">
		<implements path="java.lang.Runnable"/>
		<scheduledExecutionTime public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</scheduledExecutionTime>
		<cancel public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</cancel>
		<run public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</run>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.TimerTask"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"TimerTask"</e>
			</m>
		</meta>
	</class>
	<class path="haxe._Timer.TimerTask" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Timer.hx" private="1" module="haxe.Timer">
		<extends path="java.util.TimerTask"/>
		<timer><c path="haxe.Timer"/></timer>
		<run public="1" set="method" line="199" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</run>
		<new public="1" set="method" line="194"><f a="timer">
	<c path="haxe.Timer"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<abstract path="haxe.Ucs2" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Ucs2.hx">
		<this><c path="String"/></this>
		<haxe_doc>Cross platform UCS2 string API.</haxe_doc>
		<impl><class path="haxe._Ucs2.Ucs2_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Ucs2.hx" private="1" module="haxe.Ucs2">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
	</length>
	<_new get="inline" set="null" line="31" static="1">
		<f a="str">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
	</_new>
	<get_length get="inline" set="null" line="40" static="1">
		<f a="this">
			<c path="String"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
	</get_length>
	<toUpperCase public="1" get="inline" set="null" line="49" static="1">
		<f a="this">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
	</toUpperCase>
	<toLowerCase public="1" get="inline" set="null" line="58" static="1">
		<f a="this">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
	</toLowerCase>
	<charAt public="1" get="inline" set="null" line="68" static="1">
		<f a="this:index">
			<c path="String"/>
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns the character at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, the empty Ucs2 ""
		is returned.</haxe_doc>
	</charAt>
	<charCodeAt public="1" get="inline" set="null" line="81" static="1">
		<f a="this:index">
			<c path="String"/>
			<x path="Int"/>
			<t path="Null"><x path="Int"/></t>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns the character code at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, null is returned.

		To obtain the character code of a single character, "x".code can be used
		instead to @:extern public inline the character code at compile time. Note that this
		only works on Ucs2 literals of length 1.</haxe_doc>
	</charCodeAt>
	<indexOf public="1" get="inline" set="null" line="96" static="1">
		<f a="this:str:?startIndex">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 starting from `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
	</indexOf>
	<lastIndexOf public="1" get="inline" set="null" line="111" static="1">
		<f a="this:str:?startIndex">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 from 0 to `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
	</lastIndexOf>
	<split public="1" get="inline" set="null" line="135" static="1">
		<f a="this:delimiter">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
			<c path="Array"><x path="haxe.Ucs2"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Splits `this` Ucs2 at each occurrence of `delimiter`.

		If `this` Ucs2 is the empty Ucs2 "", the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty Ucs2 "", `this` Ucs2 is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` Ucs2.

		If `delimiter` is not found within `this` Ucs2, the result is an Array
		with one element, which equals `this` Ucs2.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` Ucs2 is split into parts at each occurrence of
		`delimiter`. If `this` Ucs2 starts (or ends) with `delimiter`, the
		result Array contains a leading (or trailing) empty Ucs2 "" element.
		Two subsequent delimiters also result in an empty Ucs2 "" element.</haxe_doc>
	</split>
	<substr public="1" get="inline" set="null" line="154" static="1">
		<f a="this:pos:?len">
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns `len` characters of `this` Ucs2, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` Ucs2 are included.

		If `pos` is negative, its value is calculated from the end of `this`
		Ucs2 by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` Ucs2 are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
	</substr>
	<substring public="1" get="inline" set="null" line="171" static="1">
		<f a="this:startIndex:?endIndex">
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns the part of `this` Ucs2 from `startIndex` to `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		Ucs2 "" is returned.</haxe_doc>
	</substring>
	<toNativeString public="1" get="inline" set="null" line="178" static="1">
		<f a="this">
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns the native underlying String.</haxe_doc>
	</toNativeString>
	<fromCharCode public="1" get="inline" set="null" line="188" static="1">
		<f a="code">
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta><m n=":extern"/></meta>
		<haxe_doc>Returns the Ucs2 corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
	</fromCharCode>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="haxe._Ucs2.Ucs2_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Ucs2.hx" private="1" module="haxe.Ucs2">
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
		</length>
		<_new get="inline" set="null" line="31" static="1">
			<f a="str">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
		</_new>
		<get_length get="inline" set="null" line="40" static="1">
			<f a="this">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
		</get_length>
		<toUpperCase public="1" get="inline" set="null" line="49" static="1">
			<f a="this">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" get="inline" set="null" line="58" static="1">
			<f a="this">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<charAt public="1" get="inline" set="null" line="68" static="1">
			<f a="this:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns the character at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, the empty Ucs2 ""
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" get="inline" set="null" line="81" static="1">
			<f a="this:index">
				<c path="String"/>
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns the character code at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, null is returned.

		To obtain the character code of a single character, "x".code can be used
		instead to @:extern public inline the character code at compile time. Note that this
		only works on Ucs2 literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" get="inline" set="null" line="96" static="1">
			<f a="this:str:?startIndex">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 starting from `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" get="inline" set="null" line="111" static="1">
			<f a="this:str:?startIndex">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 from 0 to `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" get="inline" set="null" line="135" static="1">
			<f a="this:delimiter">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
				<c path="Array"><x path="haxe.Ucs2"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Splits `this` Ucs2 at each occurrence of `delimiter`.

		If `this` Ucs2 is the empty Ucs2 "", the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty Ucs2 "", `this` Ucs2 is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` Ucs2.

		If `delimiter` is not found within `this` Ucs2, the result is an Array
		with one element, which equals `this` Ucs2.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` Ucs2 is split into parts at each occurrence of
		`delimiter`. If `this` Ucs2 starts (or ends) with `delimiter`, the
		result Array contains a leading (or trailing) empty Ucs2 "" element.
		Two subsequent delimiters also result in an empty Ucs2 "" element.</haxe_doc>
		</split>
		<substr public="1" get="inline" set="null" line="154" static="1">
			<f a="this:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns `len` characters of `this` Ucs2, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` Ucs2 are included.

		If `pos` is negative, its value is calculated from the end of `this`
		Ucs2 by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` Ucs2 are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" get="inline" set="null" line="171" static="1">
			<f a="this:startIndex:?endIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns the part of `this` Ucs2 from `startIndex` to `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		Ucs2 "" is returned.</haxe_doc>
		</substring>
		<toNativeString public="1" get="inline" set="null" line="178" static="1">
			<f a="this">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns the native underlying String.</haxe_doc>
		</toNativeString>
		<fromCharCode public="1" get="inline" set="null" line="188" static="1">
			<f a="code">
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta><m n=":extern"/></meta>
			<haxe_doc>Returns the Ucs2 corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<meta><m n=":final"/></meta>
	</class>
	<class path="haxe._Unserializer.DefaultResolver" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Unserializer.hx" private="1" module="haxe.Unserializer">
		<resolveClass public="1" get="inline" set="null" line="477">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<meta><m n=":final"/></meta>
		</resolveClass>
		<resolveEnum public="1" get="inline" set="null" line="478">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<meta><m n=":final"/></meta>
		</resolveEnum>
		<new public="1" set="method" line="476"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.Unserializer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Unserializer.hx">
		<DEFAULT_RESOLVER public="1" expr="new DefaultResolver()" line="63" static="1">
			<t path="haxe.TypeResolver"/>
			<meta><m n=":value"><e>new DefaultResolver()</e></m></meta>
			<haxe_doc><![CDATA[This value can be set to use custom type resolvers.

		A type resolver finds a `Class` or `Enum` instance from a given `String`. 
		By default, the Haxe `Type` Api is used.

		A type resolver must provide two methods:

		1. `resolveClass(name:String):Class<Dynamic>` is called to determine a
				`Class` from a class name
		2. `resolveEnum(name:String):Enum<Dynamic>` is called to determine an
				`Enum` from an enum name

		This value is applied when a new `Unserializer` instance is created.
		Changing it afterwards has no effect on previously created instances.]]></haxe_doc>
		</DEFAULT_RESOLVER>
		<BASE64 expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:&quot;" line="65" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:"</e></m></meta>
		</BASE64>
		<CODES expr="null" line="68" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>null</e></m></meta>
		</CODES>
		<initCodes set="method" line="70" static="1"><f a=""><c path="Array"><x path="Int"/></c></f></initCodes>
		<run public="1" set="method" line="465" static="1">
			<f a="v">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Unserializes `v` and returns the according value.

		This is a convenience function for creating a new instance of
		Unserializer with `v` as buffer and calling its unserialize() method
		once.</haxe_doc>
		</run>
		<buf><c path="String"/></buf>
		<pos><x path="Int"/></pos>
		<length><x path="Int"/></length>
		<cache><c path="Array"><d/></c></cache>
		<scache><c path="Array"><c path="String"/></c></scache>
		<resolver><t path="haxe.TypeResolver"/></resolver>
		<setResolver public="1" set="method" line="127">
			<f a="r">
				<t path="haxe.TypeResolver"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the type resolver of `this` Unserializer instance to `r`.

		If `r` is null, a special resolver is used which returns null for all
		input values.

		See `DEFAULT_RESOLVER` for more information on type resolvers.</haxe_doc>
		</setResolver>
		<getResolver public="1" set="method" line="139">
			<f a=""><t path="haxe.TypeResolver"/></f>
			<haxe_doc>Gets the type resolver of `this` Unserializer instance.

		See `DEFAULT_RESOLVER` for more information on type resolvers.</haxe_doc>
		</getResolver>
		<get get="inline" set="null" line="143"><f a="p">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<readDigits set="method" line="147"><f a=""><x path="Int"/></f></readDigits>
		<readFloat set="method" line="172"><f a=""><x path="Float"/></f></readFloat>
		<unserializeObject set="method" line="186"><f a="o">
	<a/>
	<x path="Void"/>
</f></unserializeObject>
		<unserializeEnum set="method" line="201"><f a="edecl:tag">
	<x path="Enum"><unknown/></x>
	<c path="String"/>
	<unknown/>
</f></unserializeEnum>
		<unserialize public="1" set="method" line="233">
			<f a=""><d/></f>
			<haxe_doc>Unserializes the next part of `this` Unserializer instance and returns
		the according value.

		This function may call `this.resolver.resolveClass` to determine a
		Class from a String, and `this.resolver.resolveEnum` to determine an
		Enum from a String.

		If `this` Unserializer instance contains no more or invalid data, an
		exception is thrown.

		This operation may fail on structurally valid data if a type cannot be
		resolved or if a field cannot be set. This can happen when unserializing
		Strings that were serialized on a different Haxe target, in which the
		serialization side has to make sure not to include platform-specific
		data.

		Classes are created from `Type.createEmptyInstance`, which means their
		constructors are not called.</haxe_doc>
		</unserialize>
		<new public="1" set="method" line="102">
			<f a="buf">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Unserializer instance, with its internal buffer
		initialized to `buf`.

		This does not parse `buf` immediately. It is parsed only when calls to
		`this.unserialize` are made.

		Each Unserializer instance maintains its own cache.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Unserializer` class is the complement to the `Serializer` class. It parses
	a serialization `String` and creates objects from the contained data.

	This class can be used in two ways:

	- create a `new Unserializer()` instance with a given serialization
		String, then call its `unserialize()` method until all values are
		extracted
	- call `Unserializer.run()`  to unserialize a single value from a given
		String

	The specification of the serialization format can be found here:
	<https://haxe.org/manual/serialization/format>]]></haxe_doc>
	</class>
	<class path="haxe._Unserializer.NullResolver" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Unserializer.hx" private="1" module="haxe.Unserializer">
		<instance public="1" get="accessor" set="null" static="1"><c path="haxe._Unserializer.NullResolver"/></instance>
		<get_instance get="inline" set="null" line="486" static="1"><f a=""><c path="haxe._Unserializer.NullResolver"/></f></get_instance>
		<resolveClass public="1" get="inline" set="null" line="483">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<meta><m n=":final"/></meta>
		</resolveClass>
		<resolveEnum public="1" get="inline" set="null" line="484">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<meta><m n=":final"/></meta>
		</resolveEnum>
		<new set="method" line="482"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.Utf8" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Utf8.hx">
		<iter public="1" set="method" line="56" static="1">
			<f a="s:chars">
				<c path="String"/>
				<f a="">
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Call the `chars` function for each UTF8 char of the string.</haxe_doc>
		</iter>
		<encode public="1" set="method" line="64" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encode the input ISO string into the corresponding UTF8 one.</haxe_doc>
		</encode>
		<decode public="1" set="method" line="72" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Decode an UTF8 string back to an ISO string.
		Throw an exception if a given UTF8 character is not supported by the decoder.</haxe_doc>
		</decode>
		<charCodeAt public="1" get="inline" set="null" line="79" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Similar to `String.charCodeAt` but uses the UTF8 character position.</haxe_doc>
		</charCodeAt>
		<validate public="1" get="inline" set="null" line="86" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the String is correctly encoded as UTF8.</haxe_doc>
		</validate>
		<length public="1" get="inline" set="null" line="94" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of UTF8 chars of the String.</haxe_doc>
		</length>
		<compare public="1" set="method" line="101" static="1">
			<f a="a:b">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compare two UTF8 strings, character by character.</haxe_doc>
		</compare>
		<sub public="1" get="inline" set="null" line="108" static="1">
			<f a="s:pos:len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>This is similar to `String.substr` but the `pos` and `len` parts are considering UTF8 characters.</haxe_doc>
		</sub>
		<__b><c path="String"/></__b>
		<addChar public="1" get="inline" set="null" line="42">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Add the given UTF8 character code to the buffer.</haxe_doc>
		</addChar>
		<toString public="1" get="inline" set="null" line="49">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the buffer converted to a String.</haxe_doc>
		</toString>
		<new public="1" set="method" line="35">
			<f a="?size">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allocate a new Utf8 buffer using an optional bytes size.</haxe_doc>
		</new>
		<haxe_doc>Since not all platforms guarantee that `String` always uses UTF-8 encoding, you
	can use this cross-platform API to perform operations on such strings.</haxe_doc>
	</class>
	<class path="haxe.crypto.Adler32" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/crypto/Adler32.hx">
		<read public="1" set="method" line="60" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="haxe.crypto.Adler32"/>
</f></read>
		<make public="1" set="method" line="71" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></make>
		<a1><x path="Int"/></a1>
		<a2><x path="Int"/></a2>
		<get public="1" set="method" line="37"><f a=""><x path="Int"/></f></get>
		<update public="1" set="method" line="41"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update>
		<equals public="1" set="method" line="52"><f a="a">
	<c path="haxe.crypto.Adler32"/>
	<x path="Bool"/>
</f></equals>
		<toString public="1" set="method" line="56"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Calculates the Adler32 of the given Bytes.</haxe_doc>
	</class>
	<class path="haxe.io.Bytes" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="462" static="1"><f a="length">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></alloc>
		<ofString public="1" set="method" line="490" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</ofString>
		<ofData public="1" set="method" line="551" static="1"><f a="b">
	<t path="haxe.io.BytesData"/>
	<c path="haxe.io.Bytes"/>
</f></ofData>
		<fastGet public="1" get="inline" set="null" line="569" static="1">
			<f a="b:pos">
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Read the most efficiently possible the n-th byte of the data.
		Behavior when reading outside of the available data is unspecified.</haxe_doc>
		</fastGet>
		<length public="1" set="null"><x path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<get public="1" get="inline" set="null" line="41">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</get>
		<set public="1" get="inline" set="null" line="59"><f a="pos:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<blit public="1" set="method" line="79"><f a="pos:src:srcpos:len">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blit>
		<fill public="1" set="method" line="114"><f a="pos:len:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></fill>
		<sub public="1" set="method" line="133"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></sub>
		<compare public="1" set="method" line="161">
			<f a="other">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</compare>
		<getDouble public="1" set="method" line="213">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the IEEE double precision value at given position (in low endian encoding).
		Result is unspecified if reading outside of the bounds</haxe_doc>
		</getDouble>
		<getFloat public="1" set="method" line="232">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the IEEE single precision value at given position (in low endian encoding).
		Result is unspecified if reading outside of the bounds</haxe_doc>
		</getFloat>
		<setDouble public="1" set="method" line="252">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the IEEE double precision value at given position in low endian encoding.
		Result is unspecified if writing outside of the bounds.</haxe_doc>
		</setDouble>
		<setFloat public="1" set="method" line="275">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the IEEE single precision value at given position in low endian encoding.
		Result is unspecified if writing outside of the bounds.</haxe_doc>
		</setFloat>
		<getUInt16 public="1" get="inline" set="null" line="294">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 16 bit unsigned integer at given position (in low endian encoding).</haxe_doc>
		</getUInt16>
		<setUInt16 public="1" get="inline" set="null" line="305">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the 16 bit unsigned integer at given position (in low endian encoding).</haxe_doc>
		</setUInt16>
		<getInt32 public="1" get="inline" set="null" line="317">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 32 bit integer at given position (in low endian encoding).</haxe_doc>
		</getInt32>
		<getInt64 public="1" get="inline" set="null" line="334">
			<f a="pos">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Returns the 64 bit integer at given position (in low endian encoding).</haxe_doc>
		</getInt64>
		<setInt32 public="1" get="inline" set="null" line="341">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the 32 bit integer at given position (in low endian encoding).</haxe_doc>
		</setInt32>
		<setInt64 public="1" get="inline" set="null" line="355">
			<f a="pos:v">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the 64 bit integer at given position (in low endian encoding).</haxe_doc>
		</setInt64>
		<getString public="1" set="method" line="360"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></getString>
		<readString public="1" get="inline" set="null" line="419">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":deprecated"><e>"readString is deprecated, use getString instead"</e></m>
				<m n=":noCompletion"/>
			</meta>
		</readString>
		<toString public="1" set="method" line="423"><f a=""><c path="String"/></f></toString>
		<toHex public="1" set="method" line="444"><f a=""><c path="String"/></f></toHex>
		<getData public="1" get="inline" set="null" line="458"><f a=""><t path="haxe.io.BytesData"/></f></getData>
		<new set="method" line="33"><f a="length:b">
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.crypto.Base64" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/crypto/Base64.hx">
		<CHARS public="1" set="null" expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;" line="29" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</e></m></meta>
		</CHARS>
		<BYTES public="1" set="null" expr="haxe.io.Bytes.ofString(CHARS)" line="30" static="1">
			<c path="haxe.io.Bytes"/>
			<meta><m n=":value"><e>haxe.io.Bytes.ofString(CHARS)</e></m></meta>
		</BYTES>
		<encode public="1" set="method" line="32" static="1">
			<f a="bytes:?complement" v=":true">
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ complement : true }</e></m></meta>
		</encode>
		<decode public="1" set="method" line="45" static="1">
			<f a="str:?complement" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ complement : true }</e></m></meta>
		</decode>
		<haxe_doc>Allows to encode/decode String and bytes using Base64 encoding.</haxe_doc>
	</class>
	<class path="haxe.crypto.BaseCode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/crypto/BaseCode.hx">
		<encode public="1" set="method" line="127" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<decode public="1" set="method" line="132" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></decode>
		<base><c path="haxe.io.Bytes"/></base>
		<nbits><x path="Int"/></nbits>
		<tbl><c path="Array"><x path="Int"/></c></tbl>
		<encodeBytes public="1" set="method" line="44"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></encodeBytes>
		<initTable set="method" line="72"><f a=""><x path="Void"/></f></initTable>
		<decodeBytes public="1" set="method" line="81"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></decodeBytes>
		<encodeString public="1" set="method" line="111"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encodeString>
		<decodeString public="1" set="method" line="119"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></decodeString>
		<new public="1" set="method" line="33"><f a="base">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Allows to encode/decode String and bytes using a power of two base dictionary.</haxe_doc>
	</class>
	<class path="haxe.crypto.Crc32" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/crypto/Crc32.hx">
		<make public="1" set="method" line="67" static="1">
			<f a="data">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Calculates the CRC32 of the given data bytes</haxe_doc>
		</make>
		<crc><x path="Int"/></crc>
		<byte public="1" set="method" line="35"><f a="b">
	<x path="Int"/>
	<x path="Void"/>
</f></byte>
		<update public="1" set="method" line="46"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update>
		<get public="1" set="method" line="60"><f a=""><x path="Int"/></f></get>
		<new public="1" set="method" line="31"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Calculates the Crc32 of the given Bytes.</haxe_doc>
	</class>
	<enum path="haxe.crypto.HashMethod" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/crypto/Hmac.hx" module="haxe.crypto.Hmac">
		<MD5/>
		<SHA1/>
		<SHA256/>
		<haxe_doc>Hash methods for Hmac calculation.</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="haxe.crypto.Hmac" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/crypto/Hmac.hx">
		<method><e path="haxe.crypto.HashMethod"/></method>
		<blockSize><x path="Int"/></blockSize>
		<length><x path="Int"/></length>
		<doHash get="inline" set="null" line="54"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></doHash>
		<nullPad set="method" line="62"><f a="s:chunkLen">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></nullPad>
		<make public="1" set="method" line="73"><f a="key:msg">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<new public="1" set="method" line="42"><f a="hashMethod">
	<e path="haxe.crypto.HashMethod"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Calculates a Hmac of the given Bytes using a HashMethod.</haxe_doc>
	</class>
	<class path="haxe.crypto.Md5" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/crypto/Md5.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="41" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<bytes2blks set="method" line="110" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><x path="Int"/></c>
</f></bytes2blks>
		<str2blks set="method" line="139" static="1"><f a="str">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<bitOR set="method" line="76"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitOR>
		<bitXOR set="method" line="82"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitXOR>
		<bitAND set="method" line="88"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitAND>
		<addme set="method" line="94"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></addme>
		<hex set="method" line="100"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<rol set="method" line="172"><f a="num:cnt">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></rol>
		<cmn set="method" line="176"><f a="q:a:b:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></cmn>
		<ff set="method" line="180"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ff>
		<gg set="method" line="184"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></gg>
		<hh set="method" line="188"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></hh>
		<ii set="method" line="192"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ii>
		<doEncode set="method" line="196"><f a="x">
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<new set="method" line="73"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a MD5 of a String.</haxe_doc>
	</class>
	<class path="haxe.crypto.Sha1" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/crypto/Sha1.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="39" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<str2blks set="method" line="107" static="1"><f a="s">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<bytes2blks set="method" line="127" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><x path="Int"/></c>
</f></bytes2blks>
		<doEncode set="method" line="61"><f a="x">
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<rol get="inline" set="null" line="147">
			<f a="num:cnt">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Bitwise rotate a 32-bit number to the left</haxe_doc>
		</rol>
		<ft set="method" line="154">
			<f a="t:b:c:d">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Perform the appropriate triplet combination function for the current iteration</haxe_doc>
		</ft>
		<kt set="method" line="164">
			<f a="t">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Determine the appropriate additive constant for the current iteration</haxe_doc>
		</kt>
		<hex set="method" line="174"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<new set="method" line="58"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a Sha1 of a String.</haxe_doc>
	</class>
	<class path="haxe.crypto.Sha224" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/crypto/Sha224.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="39" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<str2blks set="method" line="135" static="1"><f a="s">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<safeAdd set="method" line="151" static="1"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></safeAdd>
		<doEncode set="method" line="59"><f a="str:strlen">
	<c path="String"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<ROTR set="method" line="158"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ROTR>
		<SHR set="method" line="163"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></SHR>
		<Ch set="method" line="168"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Ch>
		<Maj set="method" line="173"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Maj>
		<Sigma0 set="method" line="177"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma0>
		<Sigma1 set="method" line="181"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma1>
		<Gamma0 set="method" line="185"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma0>
		<Gamma1 set="method" line="189"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma1>
		<hex set="method" line="193"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<new public="1" set="method" line="56"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a Sha224 of a String.</haxe_doc>
	</class>
	<class path="haxe.crypto.Sha256" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/crypto/Sha256.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="39" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<str2blks set="method" line="115" static="1"><f a="s">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<bytes2blks set="method" line="135" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><x path="Int"/></c>
</f></bytes2blks>
		<doEncode set="method" line="59"><f a="m:l">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<S set="method" line="152"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></S>
		<R set="method" line="156"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></R>
		<Ch set="method" line="160"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Ch>
		<Maj set="method" line="164"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Maj>
		<Sigma0256 set="method" line="168"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma0256>
		<Sigma1256 set="method" line="172"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma1256>
		<Gamma0256 set="method" line="176"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma0256>
		<Gamma1256 set="method" line="180"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma1256>
		<safeAdd set="method" line="184"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></safeAdd>
		<hex set="method" line="190"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<new public="1" set="method" line="56"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a Sha256 of a String.</haxe_doc>
	</class>
	<class path="haxe.ds.ArraySort" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/ArraySort.hx">
		<sort public="1" params="T" set="method" line="43" static="1">
			<f a="a:cmp">
				<c path="Array"><c path="sort.T"/></c>
				<f a=":">
					<c path="sort.T"/>
					<c path="sort.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts Array `a` according to the comparison function `cmp`, where
		`cmp(x,y)` returns 0 if `x == y`, a positive Int if `x > y` and a
		negative Int if `x < y`.

		This operation modifies Array `a` in place.

		This operation is stable: The order of equal elements is preserved.

		If `a` or `cmp` are null, the result is unspecified.]]></haxe_doc>
		</sort>
		<rec params="T" set="method" line="47" static="1"><f a="a:cmp:from:to">
	<c path="Array"><c path="rec.T"/></c>
	<f a=":">
		<c path="rec.T"/>
		<c path="rec.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rec>
		<doMerge params="T" set="method" line="68" static="1"><f a="a:cmp:from:pivot:to:len1:len2">
	<c path="Array"><c path="doMerge.T"/></c>
	<f a=":">
		<c path="doMerge.T"/>
		<c path="doMerge.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></doMerge>
		<rotate params="T" set="method" line="94" static="1"><f a="a:cmp:from:mid:to">
	<c path="Array"><c path="rotate.T"/></c>
	<f a=":">
		<c path="doMerge.T"/>
		<c path="doMerge.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rotate>
		<gcd set="method" line="112" static="1"><f a="m:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></gcd>
		<upper params="T" set="method" line="121" static="1"><f a="a:cmp:from:to:val">
	<c path="Array"><c path="upper.T"/></c>
	<f a=":">
		<c path="upper.T"/>
		<c path="upper.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></upper>
		<lower params="T" set="method" line="136" static="1"><f a="a:cmp:from:to:val">
	<c path="Array"><c path="lower.T"/></c>
	<f a=":">
		<c path="lower.T"/>
		<c path="lower.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lower>
		<swap params="T" set="method" line="150" static="1"><f a="a:i:j">
	<c path="Array"><c path="swap.T"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></swap>
		<compare params="T" get="inline" set="null" line="156" static="1"><f a="a:cmp:i:j">
	<c path="Array"><c path="compare.T"/></c>
	<f a=":">
		<c path="compare.T"/>
		<c path="compare.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></compare>
		<haxe_doc>ArraySort provides a stable implementation of merge sort through its `sort`
	method. It should be used instead of `Array.sort` in cases where the order
	of equal elements has to be retained on all targets.</haxe_doc>
	</class>
	<class path="haxe.ds.BalancedTree" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/BalancedTree.hx">
		<root><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></root>
		<set public="1" set="method" line="50">
			<f a="key:value">
				<c path="haxe.ds.BalancedTree.K"/>
				<c path="haxe.ds.BalancedTree.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds `key` to `value`.

		If `key` is already bound to a value, that binding disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" set="method" line="61">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<t path="Null"><c path="haxe.ds.BalancedTree.V"/></t>
			</f>
			<haxe_doc>Returns the value `key` is bound to.

		If `key` is not bound to any value, `null` is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<remove public="1" set="method" line="82">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the current binding of `key`.

		If `key` has no binding, `this` BalancedTree is unchanged and false is
		returned.

		Otherwise the binding of `key` is removed and true is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="99">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `key` is bound to a value.

		This method returns true even if `key` is bound to null.

		If `key` is null, the result is unspecified.</haxe_doc>
		</exists>
		<iterator public="1" set="method" line="115">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.V"/></t></f>
			<haxe_doc>Iterates over the bound values of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</iterator>
		<keys public="1" set="method" line="126">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.K"/></t></f>
			<haxe_doc>Iterates over the keys of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</keys>
		<setLoop set="method" line="132"><f a="k:v:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></setLoop>
		<removeLoop set="method" line="145"><f a="k:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeLoop>
		<iteratorLoop set="method" line="153"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="Array"><c path="haxe.ds.BalancedTree.V"/></c>
	<x path="Void"/>
</f></iteratorLoop>
		<keysLoop set="method" line="161"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="Array"><c path="haxe.ds.BalancedTree.K"/></c>
	<x path="Void"/>
</f></keysLoop>
		<merge set="method" line="169"><f a="t1:t2">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></merge>
		<minBinding set="method" line="176"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></minBinding>
		<removeMinBinding set="method" line="182"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeMinBinding>
		<balance set="method" line="187"><f a="l:k:v:r">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></balance>
		<compare set="method" line="201"><f a="k1:k2">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.K"/>
	<x path="Int"/>
</f></compare>
		<toString public="1" set="method" line="205"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="41">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new BalancedTree, which is initially empty.</haxe_doc>
		</new>
		<haxe_doc>BalancedTree allows key-value mapping with arbitrary keys, as long as they
	can be ordered. By default, `Reflect.compare` is used in the `compare`
	method, which can be overridden in subclasses.

	Operations have a logarithmic average and worst-case cost.

	Iteration over keys and values, using `keys` and `iterator` respectively,
	are in-order.</haxe_doc>
	</class>
	<class path="haxe.ds.TreeNode" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/BalancedTree.hx" module="haxe.ds.BalancedTree">
		<left public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></left>
		<right public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></right>
		<key public="1"><c path="haxe.ds.TreeNode.K"/></key>
		<value public="1"><c path="haxe.ds.TreeNode.V"/></value>
		<_height><x path="Int"/></_height>
		<get_height public="1" get="inline" set="null" line="234">
			<f a=""><x path="Int"/></f>
			<meta><m n=":extern"/></meta>
		</get_height>
		<toString public="1" set="method" line="236"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="223">
			<f a="l:k:v:r:?h" v="::::-1">
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<c path="haxe.ds.TreeNode.K"/>
				<c path="haxe.ds.TreeNode.V"/>
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ h : -1 }</e></m></meta>
		</new>
		<haxe_doc>A tree node of `haxe.ds.BalancedTree`.</haxe_doc>
	</class>
	<enum path="haxe.ds.Either" params="L:R" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/Either.hx">
		<Left a="v"><c path="haxe.ds.Either.L"/></Left>
		<Right a="v"><c path="haxe.ds.Either.R"/></Right>
		<haxe_doc>Either represents values which are either of type `L` (Left) or type `R`
	(Right).</haxe_doc>
	</enum>
	<class path="haxe.ds.EnumValueMap" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/EnumValueMap.hx">
		<extends path="haxe.ds.BalancedTree">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</extends>
		<implements path="haxe.IMap">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</implements>
		<compare set="method" line="33" override="1"><f a="k1:k2">
	<x path="EnumValue"/>
	<x path="EnumValue"/>
	<x path="Int"/>
</f></compare>
		<compareArgs set="method" line="42"><f a="a1:a2">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<x path="Int"/>
</f></compareArgs>
		<compareArg set="method" line="52"><f a="v1:v2">
	<d/>
	<d/>
	<x path="Int"/>
</f></compareArg>
		<haxe_doc>EnumValueMap allows mapping of enum value keys to arbitrary values.

	Keys are compared by value and recursively over their parameters. If any
	parameter is not an enum value, `Reflect.compare` is used to compare them.</haxe_doc>
	</class>
	<class path="haxe.ds.GenericCell" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/GenericStack.hx" module="haxe.ds.GenericStack">
		<elt public="1"><c path="haxe.ds.GenericCell.T"/></elt>
		<next public="1"><c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericCell.T"/></c></next>
		<new public="1" set="method" line="35"><f a="elt:next">
	<c path="haxe.ds.GenericCell.T"/>
	<c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericCell.T"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>A cell of `haxe.ds.GenericStack`.
  
	@see https://haxe.org/manual/std-GenericStack.html</haxe_doc>
	</class>
	<class path="haxe.ds.GenericStack" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/GenericStack.hx">
		<head public="1"><c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericStack.T"/></c></head>
		<add public="1" get="inline" set="null" line="80">
			<f a="item">
				<c path="haxe.ds.GenericStack.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Pushes element `item` onto the stack.</haxe_doc>
		</add>
		<first public="1" get="inline" set="null" line="89">
			<f a=""><t path="Null"><c path="haxe.ds.GenericStack.T"/></t></f>
			<haxe_doc>Returns the topmost stack element without removing it.

		If the stack is empty, null is returned.</haxe_doc>
		</first>
		<pop public="1" get="inline" set="null" line="98">
			<f a=""><t path="Null"><c path="haxe.ds.GenericStack.T"/></t></f>
			<haxe_doc>Returns the topmost stack element and removes it.

		If the stack is empty, null is returned.</haxe_doc>
		</pop>
		<isEmpty public="1" get="inline" set="null" line="111">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if the stack is empty.</haxe_doc>
		</isEmpty>
		<remove public="1" set="method" line="124">
			<f a="v">
				<c path="haxe.ds.GenericStack.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first element which is equal to `v` according to the `==`
		operator.

		This method traverses the stack until it finds a matching element and
		unlinks it, returning true.

		If no matching element is found, false is returned.</haxe_doc>
		</remove>
		<iterator public="1" set="method" line="155">
			<f a=""><t path="Iterator"><c path="haxe.ds.GenericStack.T"/></t></f>
			<haxe_doc>Returns an iterator over the elements of `this` GenericStack.</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="173">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of `this` GenericStack.</haxe_doc>
		</toString>
		<new public="1" set="method" line="74">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty GenericStack.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A stack of elements.

	This class is generic, which means one type is generated for each type
	parameter T on static targets. For example:

	- `new GenericStack<Int>()` generates `GenericStack_Int`
	- `new GenericStack<String>()` generates `GenericStack_String`

	The generated name is an implementation detail and should not be relied
	upon.

	@see https://haxe.org/manual/std-GenericStack.html]]></haxe_doc>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/HashMap.hx">
		<this><c path="haxe.ds._HashMap.HashMapData">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</c></this>
		<haxe_doc>HashMap allows mapping of hashable objects to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
	<_new public="1" get="inline" set="null" line="35" static="1">
		<f a=""><x path="haxe.ds.HashMap">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</x></f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new HashMap.</haxe_doc>
	</_new>
	<set public="1" get="inline" set="null" line="42" static="1">
		<f a="this:k:v">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<c path="haxe.ds.HashMap.V"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.set`</haxe_doc>
	</set>
	<get public="1" get="inline" set="null" line="50" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<t path="Null"><c path="haxe.ds.HashMap.V"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.get`</haxe_doc>
	</get>
	<exists public="1" get="inline" set="null" line="57" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.exists`</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="64" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.remove`</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="72" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.HashMap.K"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.keys`</haxe_doc>
	</keys>
	<iterator public="1" get="inline" set="null" line="79" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.HashMap.V"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.iterator`</haxe_doc>
	</iterator>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
		<_new public="1" get="inline" set="null" line="35" static="1">
			<f a=""><x path="haxe.ds.HashMap">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</x></f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new HashMap.</haxe_doc>
		</_new>
		<set public="1" get="inline" set="null" line="42" static="1">
			<f a="this:k:v">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="50" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<t path="Null"><c path="haxe.ds.HashMap.V"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="57" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="64" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="72" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.HashMap.K"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" get="inline" set="null" line="79" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.HashMap.V"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<meta><m n=":final"/></meta>
	</class>
	<class path="haxe.ds._HashMap.HashMapData" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
		<keys public="1"><c path="haxe.ds.IntMap"><c path="haxe.ds._HashMap.HashMapData.K"/></c></keys>
		<values public="1"><c path="haxe.ds.IntMap"><c path="haxe.ds._HashMap.HashMapData.V"/></c></values>
		<new public="1" get="inline" set="null" line="87"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ds.IntMap" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/haxe/ds/IntMap.hx">
		<implements path="haxe.IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<HASH_UPPER get="inline" set="null" expr="0.7" line="36" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.7</e></m></meta>
		</HASH_UPPER>
		<assert get="inline" set="null" line="408" static="1"><f a="x">
	<x path="Bool"/>
	<x path="Void"/>
</f></assert>
		<defaultK get="inline" set="null" line="415" static="1"><f a=""><x path="Int"/></f></defaultK>
		<arrayCopy get="inline" set="null" line="417" static="1"><f a="sourceArray:sourceIndex:destinationArray:destinationIndex:length">
	<d/>
	<x path="Int"/>
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></arrayCopy>
		<getInc get="inline" set="null" line="420" static="1"><f a="k:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getInc>
		<hash get="inline" set="null" line="423" static="1"><f a="i">
	<x path="Int"/>
	<x path="Int"/>
</f></hash>
		<flagIsEmpty get="inline" set="null" line="426" static="1"><f a="flag:i">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Bool"/>
</f></flagIsEmpty>
		<flagIsDel get="inline" set="null" line="429" static="1"><f a="flag:i">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Bool"/>
</f></flagIsDel>
		<isEither get="inline" set="null" line="432" static="1"><f a="flag:i">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Bool"/>
</f></isEither>
		<setIsDelFalse get="inline" set="null" line="435" static="1"><f a="flag:i">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></setIsDelFalse>
		<setIsEmptyFalse get="inline" set="null" line="438" static="1"><f a="flag:i">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></setIsEmptyFalse>
		<setIsBothFalse get="inline" set="null" line="441" static="1"><f a="flag:i">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></setIsBothFalse>
		<setIsDelTrue get="inline" set="null" line="444" static="1"><f a="flag:i">
	<c path="java.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></setIsDelTrue>
		<roundUp get="inline" set="null" line="447" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></roundUp>
		<flagsSize get="inline" set="null" line="458" static="1"><f a="m">
	<x path="Int"/>
	<x path="Int"/>
</f></flagsSize>
		<flags><c path="java.NativeArray"><x path="Int"/></c></flags>
		<_keys><c path="java.NativeArray"><x path="Int"/></c></_keys>
		<vals><c path="java.NativeArray"><c path="haxe.ds.IntMap.T"/></c></vals>
		<nBuckets><x path="Int"/></nBuckets>
		<size><x path="Int"/></size>
		<nOccupied><x path="Int"/></nOccupied>
		<upperBound><x path="Int"/></upperBound>
		<cachedKey><x path="Int"/></cachedKey>
		<cachedIndex><x path="Int"/></cachedIndex>
		<set public="1" set="method" line="55">
			<f a="key:value">
				<x path="Int"/>
				<c path="haxe.ds.IntMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<lookup set="method" line="118">
			<f a="key">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":final"/></meta>
		</lookup>
		<get public="1" set="method" line="140">
			<f a="key">
				<x path="Int"/>
				<t path="Null"><c path="haxe.ds.IntMap.T"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<getDefault set="method" line="160"><f a="key:def">
	<x path="Int"/>
	<c path="haxe.ds.IntMap.T"/>
	<c path="haxe.ds.IntMap.T"/>
</f></getDefault>
		<exists public="1" set="method" line="180">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="200">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<resize set="method" line="228">
			<f a="newNBuckets">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":final"/></meta>
		</resize>
		<keys public="1" set="method" line="334">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns an iterator of all keys in the hashtable.
		Implementation detail: Do not set() any new value while iterating, as it may cause a resize, which will break iteration</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="365">
			<f a=""><t path="Iterator"><c path="haxe.ds.IntMap.T"/></t></f>
			<haxe_doc>Returns an iterator of all values in the hashtable.
		Implementation detail: Do not set() any new value while iterating, as it may cause a resize, which will break iteration</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="393">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns an displayable representation of the hashtable content.</haxe_doc>
		</toString>
		<new public="1" set="method" line="50">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new IntMap.</haxe_doc>
		</new>
		<haxe_doc>IntMap allows mapping of Int keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.ds.ListSort" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/ListSort.hx">
		<sort public="1" params="T" get="inline" set="null" line="43" static="1">
			<f a="list:cmp">
				<c path="sort.T"/>
				<f a=":">
					<c path="sort.T"/>
					<c path="sort.T"/>
					<x path="Int"/>
				</f>
				<c path="sort.T"/>
			</f>
			<haxe_doc><![CDATA[Sorts List `lst` according to the comparison function `cmp`, where
		`cmp(x,y)` returns 0 if `x == y`, a positive Int if `x > y` and a
		negative Int if `x < y`.

		This operation modifies List `a` in place and returns its head once modified.
		The `prev` of the head is set to the tail of the sorted list.

		If `list` or `cmp` are null, the result is unspecified.]]></haxe_doc>
		</sort>
		<sortSingleLinked public="1" params="T" get="inline" set="null" line="100" static="1">
			<f a="list:cmp">
				<c path="sortSingleLinked.T"/>
				<f a=":">
					<c path="sortSingleLinked.T"/>
					<c path="sortSingleLinked.T"/>
					<x path="Int"/>
				</f>
				<c path="sortSingleLinked.T"/>
			</f>
			<haxe_doc>Same as `sort` but on single linked list.</haxe_doc>
		</sortSingleLinked>
		<haxe_doc>ListSort provides a stable implementation of merge sort through its `sort`
	method. It has a O(N.log(N)) complexity and does not require additional memory allocation.</haxe_doc>
	</class>
	<class path="haxe.ds.ObjectMap" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/haxe/ds/ObjectMap.hx">
		<implements path="haxe.IMap">
			<c path="haxe.ds.ObjectMap.K"/>
			<c path="haxe.ds.ObjectMap.V"/>
		</implements>
		<HASH_UPPER get="inline" set="null" expr="0.77" line="28" static="1">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>0.77</e></m>
				<m n=":extern"/>
			</meta>
		</HASH_UPPER>
		<FLAG_EMPTY get="inline" set="null" expr="0" line="29" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":extern"/>
			</meta>
		</FLAG_EMPTY>
		<FLAG_DEL get="inline" set="null" expr="1" line="30" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>1</e></m>
				<m n=":extern"/>
			</meta>
		</FLAG_DEL>
		<roundUp get="inline" set="null" line="432" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":extern"/></meta>
		</roundUp>
		<getInc get="inline" set="null" line="443" static="1">
			<f a="k:mask">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":extern"/></meta>
		</getInc>
		<isEither get="inline" set="null" line="446" static="1">
			<f a="v">
				<t path="haxe.ds._ObjectMap.HashType"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":extern"/></meta>
		</isEither>
		<isEmpty get="inline" set="null" line="449" static="1">
			<f a="v">
				<t path="haxe.ds._ObjectMap.HashType"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":extern"/></meta>
		</isEmpty>
		<isDel get="inline" set="null" line="452" static="1">
			<f a="v">
				<t path="haxe.ds._ObjectMap.HashType"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":extern"/></meta>
		</isDel>
		<hash get="inline" set="null" line="456" static="1">
			<f a="s">
				<d/>
				<t path="haxe.ds._ObjectMap.HashType"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</hash>
		<arrayCopy get="inline" set="null" line="484" static="1">
			<f a="sourceArray:sourceIndex:destinationArray:destinationIndex:length">
				<d/>
				<x path="Int"/>
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</arrayCopy>
		<assert get="inline" set="null" line="487" static="1">
			<f a="x">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</assert>
		<hashes>
			<c path="java.NativeArray"><t path="haxe.ds._ObjectMap.HashType"/></c>
			<haxe_doc>* This is the most important structure here and the reason why it's so fast.
	 * It's an array of all the hashes contained in the table. These hashes cannot be 0 nor 1,
	 * which stand for "empty" and "deleted" states.
	 *
	 * The lookup algorithm will keep looking until a 0 or the key wanted is found;
	 * The insertion algorithm will do the same but will also break when FLAG_DEL is found;</haxe_doc>
		</hashes>
		<_keys><c path="java.NativeArray"><c path="haxe.ds.ObjectMap.K"/></c></_keys>
		<vals><c path="java.NativeArray"><c path="haxe.ds.ObjectMap.V"/></c></vals>
		<nBuckets><x path="Int"/></nBuckets>
		<size><x path="Int"/></size>
		<nOccupied><x path="Int"/></nOccupied>
		<upperBound><x path="Int"/></upperBound>
		<cachedKey><c path="haxe.ds.ObjectMap.K"/></cachedKey>
		<cachedIndex><x path="Int"/></cachedIndex>
		<set public="1" set="method" line="64">
			<f a="key:value">
				<c path="haxe.ds.ObjectMap.K"/>
				<c path="haxe.ds.ObjectMap.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<lookup set="method" line="136">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":final"/>
			</meta>
		</lookup>
		<resize set="method" line="167">
			<f a="newNBuckets">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":final"/>
				<m n=":private"/>
			</meta>
		</resize>
		<get public="1" set="method" line="270">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<t path="Null"><c path="haxe.ds.ObjectMap.V"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<getDefault set="method" line="290"><f a="key:def">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.V"/>
	<c path="haxe.ds.ObjectMap.V"/>
</f></getDefault>
		<exists public="1" set="method" line="310">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="330">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="358">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.K"/></t></f>
			<haxe_doc>Returns an iterator of all keys in the hashtable.
		Implementation detail: Do not set() any new value while iterating, as it may cause a resize, which will break iteration</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="389">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.V"/></t></f>
			<haxe_doc>Returns an iterator of all values in the hashtable.
		Implementation detail: Do not set() any new value while iterating, as it may cause a resize, which will break iteration</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="417">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns an displayable representation of the hashtable content.</haxe_doc>
		</toString>
		<new public="1" set="method" line="59">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new ObjectMap.</haxe_doc>
		</new>
		<haxe_doc>ObjectMap allows mapping of object keys to arbitrary values.

	On static targets, the keys are considered to be strong references. Refer
	to `haxe.ds.WeakMap` for a weak reference version.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<typedef path="haxe.ds._ObjectMap.HashType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/haxe/ds/ObjectMap.hx" private="1" module="haxe.ds.ObjectMap"><x path="Int"/></typedef>
	<enum path="haxe.ds.Option" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/Option.hx">
		<Some a="v"><c path="haxe.ds.Option.T"/></Some>
		<None/>
		<haxe_doc>An Option is a wrapper type which can either have a value (Some) or not a
	value (None).

	@see https://haxe.org/manual/std-Option.html</haxe_doc>
	</enum>
	<class path="haxe.ds.StringMap" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/haxe/ds/StringMap.hx">
		<implements path="haxe.IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<HASH_UPPER get="inline" set="null" expr="0.77" line="28" static="1">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>0.77</e></m>
				<m n=":extern"/>
			</meta>
		</HASH_UPPER>
		<FLAG_EMPTY get="inline" set="null" expr="0" line="29" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":extern"/>
			</meta>
		</FLAG_EMPTY>
		<FLAG_DEL get="inline" set="null" expr="1" line="30" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>1</e></m>
				<m n=":extern"/>
			</meta>
		</FLAG_DEL>
		<roundUp get="inline" set="null" line="432" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":extern"/></meta>
		</roundUp>
		<getInc get="inline" set="null" line="443" static="1">
			<f a="k:mask">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":extern"/></meta>
		</getInc>
		<isEither get="inline" set="null" line="446" static="1">
			<f a="v">
				<t path="haxe.ds._StringMap.HashType"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":extern"/></meta>
		</isEither>
		<isEmpty get="inline" set="null" line="449" static="1">
			<f a="v">
				<t path="haxe.ds._StringMap.HashType"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":extern"/></meta>
		</isEmpty>
		<isDel get="inline" set="null" line="452" static="1">
			<f a="v">
				<t path="haxe.ds._StringMap.HashType"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":extern"/></meta>
		</isDel>
		<hash get="inline" set="null" line="456" static="1">
			<f a="s">
				<c path="String"/>
				<t path="haxe.ds._StringMap.HashType"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</hash>
		<arrayCopy get="inline" set="null" line="484" static="1">
			<f a="sourceArray:sourceIndex:destinationArray:destinationIndex:length">
				<d/>
				<x path="Int"/>
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</arrayCopy>
		<assert get="inline" set="null" line="487" static="1">
			<f a="x">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</assert>
		<hashes>
			<c path="java.NativeArray"><t path="haxe.ds._StringMap.HashType"/></c>
			<haxe_doc>* This is the most important structure here and the reason why it's so fast.
	 * It's an array of all the hashes contained in the table. These hashes cannot be 0 nor 1,
	 * which stand for "empty" and "deleted" states.
	 *
	 * The lookup algorithm will keep looking until a 0 or the key wanted is found;
	 * The insertion algorithm will do the same but will also break when FLAG_DEL is found;</haxe_doc>
		</hashes>
		<_keys><c path="java.NativeArray"><c path="String"/></c></_keys>
		<vals><c path="java.NativeArray"><c path="haxe.ds.StringMap.T"/></c></vals>
		<nBuckets><x path="Int"/></nBuckets>
		<size><x path="Int"/></size>
		<nOccupied><x path="Int"/></nOccupied>
		<upperBound><x path="Int"/></upperBound>
		<cachedKey><c path="String"/></cachedKey>
		<cachedIndex><x path="Int"/></cachedIndex>
		<set public="1" set="method" line="64">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<lookup set="method" line="136">
			<f a="key">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":final"/></meta>
		</lookup>
		<resize set="method" line="167">
			<f a="newNBuckets">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":final"/>
				<m n=":private"/>
			</meta>
		</resize>
		<get public="1" set="method" line="270">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="haxe.ds.StringMap.T"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<getDefault set="method" line="290"><f a="key:def">
	<c path="String"/>
	<c path="haxe.ds.StringMap.T"/>
	<c path="haxe.ds.StringMap.T"/>
</f></getDefault>
		<exists public="1" set="method" line="310">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="330">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="358">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>Returns an iterator of all keys in the hashtable.
		Implementation detail: Do not set() any new value while iterating, as it may cause a resize, which will break iteration</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="389">
			<f a=""><t path="Iterator"><c path="haxe.ds.StringMap.T"/></t></f>
			<haxe_doc>Returns an iterator of all values in the hashtable.
		Implementation detail: Do not set() any new value while iterating, as it may cause a resize, which will break iteration</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="417">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns an displayable representation of the hashtable content.</haxe_doc>
		</toString>
		<new public="1" set="method" line="59">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<typedef path="haxe.ds._StringMap.HashType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/haxe/ds/StringMap.hx" private="1" module="haxe.ds.StringMap"><x path="Int"/></typedef>
	<typedef path="haxe.ds._Vector.VectorData" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector"><c path="java.NativeArray"><c path="haxe.ds._Vector.VectorData.T"/></c></typedef>
	<abstract path="haxe.ds.Vector" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/Vector.hx">
		<this><t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t></this>
		<haxe_doc>A Vector is a storage of fixed size. It can be faster than Array on some
	targets, and is never slower.

	@see https://haxe.org/manual/std-vector.html</haxe_doc>
		<impl><class path="haxe.ds._Vector.Vector_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector">
	<_new public="1" get="inline" set="null" line="60" static="1">
		<f a="length">
			<x path="Int"/>
			<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Vector of length `length`.

		Initially `this` Vector contains `length` neutral elements:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
	</_new>
	<get public="1" get="inline" set="null" line="89" static="1">
		<f a="this:index">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
			<c path="haxe.ds.Vector.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
		<haxe_doc>Returns the value at index `index`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
	</get>
	<set public="1" get="inline" set="null" line="105" static="1">
		<f a="this:index:val">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
			<c path="haxe.ds.Vector.T"/>
			<c path="haxe.ds.Vector.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
		<haxe_doc>Sets the value at index `index` to `val`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
	</set>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the length of `this` Vector.</haxe_doc>
	</length>
	<get_length get="inline" set="null" line="120" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<blit public="1" params="T" get="inline" set="null" line="141" static="1">
		<f a="src:srcPos:dest:destPos:len">
			<x path="haxe.ds.Vector"><c path="blit.T"/></x>
			<x path="Int"/>
			<x path="haxe.ds.Vector"><c path="blit.T"/></x>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Copies `length` of elements from `src` Vector, beginning at `srcPos` to
		`dest` Vector, beginning at `destPos`

		The results are unspecified if `length` results in out-of-bounds access,
		or if `src` or `dest` are null</haxe_doc>
	</blit>
	<toArray public="1" get="inline" set="null" line="181" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<c path="Array"><c path="haxe.ds.Vector.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Array, copy the content from the Vector to it, and returns it.</haxe_doc>
	</toArray>
	<toData public="1" get="inline" set="null" line="206" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Extracts the data of `this` Vector.

		This returns the internal representation type.</haxe_doc>
	</toData>
	<fromData public="1" params="T" get="inline" set="null" line="216" static="1">
		<f a="data">
			<t path="haxe.ds._Vector.VectorData"><c path="fromData.T"/></t>
			<x path="haxe.ds.Vector"><c path="fromData.T"/></x>
		</f>
		<haxe_doc>Initializes a new Vector from `data`.

		Since `data` is the internal representation of Vector, this is a no-op.

		If `data` is null, the corresponding Vector is also `null`.</haxe_doc>
	</fromData>
	<fromArrayCopy public="1" params="T" get="inline" set="null" line="231" static="1">
		<f a="array">
			<c path="Array"><c path="fromArrayCopy.T"/></c>
			<x path="haxe.ds.Vector"><c path="fromArrayCopy.T"/></x>
		</f>
		<haxe_doc>Creates a new Vector by copying the elements of `array`.

		This always creates a copy, even on platforms where the internal
		representation is Array.

		The elements are not copied and retain their identity, so
		`a[i] == Vector.fromArrayCopy(a).get(i)` is true for any valid i.

		If `array` is null, the result is unspecified.</haxe_doc>
	</fromArrayCopy>
	<copy public="1" params="T" get="inline" set="null" line="260" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="copy.T"/></t>
			<x path="haxe.ds.Vector"><c path="copy.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a shallow copy of `this` Vector.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
	</copy>
	<join public="1" params="T" get="inline" set="null" line="279" static="1">
		<f a="this:sep">
			<t path="haxe.ds._Vector.VectorData"><c path="join.T"/></t>
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a string representation of `this` Vector, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` Vector has length 0, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
	</join>
	<map public="1" params="S" get="inline" set="null" line="303" static="1">
		<f a="this:f">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<f a="">
				<c path="haxe.ds.Vector.T"/>
				<c path="map.S"/>
			</f>
			<x path="haxe.ds.Vector"><c path="map.S"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Vector by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
	</map>
	<sort public="1" params="T" get="inline" set="null" line="327" static="1">
		<f a="this:f">
			<t path="haxe.ds._Vector.VectorData"><c path="sort.T"/></t>
			<f a=":">
				<c path="sort.T"/>
				<c path="sort.T"/>
				<x path="Int"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Sorts `this` Vector according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Vector in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained.

		If `f` is null, the result is unspecified.]]></haxe_doc>
	</sort>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.ds._Vector.Vector_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector">
		<_new public="1" get="inline" set="null" line="60" static="1">
			<f a="length">
				<x path="Int"/>
				<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Vector of length `length`.

		Initially `this` Vector contains `length` neutral elements:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
		</_new>
		<get public="1" get="inline" set="null" line="89" static="1">
			<f a="this:index">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
				<c path="haxe.ds.Vector.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
			<haxe_doc>Returns the value at index `index`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="105" static="1">
			<f a="this:index:val">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
				<c path="haxe.ds.Vector.T"/>
				<c path="haxe.ds.Vector.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
			<haxe_doc>Sets the value at index `index` to `val`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
		</set>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the length of `this` Vector.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="120" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<blit public="1" params="T" get="inline" set="null" line="141" static="1">
			<f a="src:srcPos:dest:destPos:len">
				<x path="haxe.ds.Vector"><c path="blit.T"/></x>
				<x path="Int"/>
				<x path="haxe.ds.Vector"><c path="blit.T"/></x>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies `length` of elements from `src` Vector, beginning at `srcPos` to
		`dest` Vector, beginning at `destPos`

		The results are unspecified if `length` results in out-of-bounds access,
		or if `src` or `dest` are null</haxe_doc>
		</blit>
		<toArray public="1" get="inline" set="null" line="181" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<c path="Array"><c path="haxe.ds.Vector.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Array, copy the content from the Vector to it, and returns it.</haxe_doc>
		</toArray>
		<toData public="1" get="inline" set="null" line="206" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Extracts the data of `this` Vector.

		This returns the internal representation type.</haxe_doc>
		</toData>
		<fromData public="1" params="T" get="inline" set="null" line="216" static="1">
			<f a="data">
				<t path="haxe.ds._Vector.VectorData"><c path="fromData.T"/></t>
				<x path="haxe.ds.Vector"><c path="fromData.T"/></x>
			</f>
			<haxe_doc>Initializes a new Vector from `data`.

		Since `data` is the internal representation of Vector, this is a no-op.

		If `data` is null, the corresponding Vector is also `null`.</haxe_doc>
		</fromData>
		<fromArrayCopy public="1" params="T" get="inline" set="null" line="231" static="1">
			<f a="array">
				<c path="Array"><c path="fromArrayCopy.T"/></c>
				<x path="haxe.ds.Vector"><c path="fromArrayCopy.T"/></x>
			</f>
			<haxe_doc>Creates a new Vector by copying the elements of `array`.

		This always creates a copy, even on platforms where the internal
		representation is Array.

		The elements are not copied and retain their identity, so
		`a[i] == Vector.fromArrayCopy(a).get(i)` is true for any valid i.

		If `array` is null, the result is unspecified.</haxe_doc>
		</fromArrayCopy>
		<copy public="1" params="T" get="inline" set="null" line="260" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="copy.T"/></t>
				<x path="haxe.ds.Vector"><c path="copy.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a shallow copy of `this` Vector.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<join public="1" params="T" get="inline" set="null" line="279" static="1">
			<f a="this:sep">
				<t path="haxe.ds._Vector.VectorData"><c path="join.T"/></t>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a string representation of `this` Vector, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` Vector has length 0, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<map public="1" params="S" get="inline" set="null" line="303" static="1">
			<f a="this:f">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<f a="">
					<c path="haxe.ds.Vector.T"/>
					<c path="map.S"/>
				</f>
				<x path="haxe.ds.Vector"><c path="map.S"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Vector by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<sort public="1" params="T" get="inline" set="null" line="327" static="1">
			<f a="this:f">
				<t path="haxe.ds._Vector.VectorData"><c path="sort.T"/></t>
				<f a=":">
					<c path="sort.T"/>
					<c path="sort.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Sorts `this` Vector according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Vector in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<meta><m n=":final"/></meta>
	</class>
	<class path="haxe.ds.WeakMap" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/haxe/ds/WeakMap.hx">
		<implements path="haxe.IMap">
			<c path="haxe.ds.WeakMap.K"/>
			<c path="haxe.ds.WeakMap.V"/>
		</implements>
		<HASH_UPPER get="inline" set="null" expr="0.77" line="30" static="1">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>0.77</e></m>
				<m n=":extern"/>
			</meta>
		</HASH_UPPER>
		<FLAG_EMPTY get="inline" set="null" expr="0" line="31" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":extern"/>
			</meta>
		</FLAG_EMPTY>
		<FLAG_DEL get="inline" set="null" expr="1" line="32" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>1</e></m>
				<m n=":extern"/>
			</meta>
		</FLAG_DEL>
		<roundUp get="inline" set="null" line="470" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":extern"/></meta>
		</roundUp>
		<getInc get="inline" set="null" line="481" static="1">
			<f a="k:mask">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":extern"/></meta>
		</getInc>
		<isEither get="inline" set="null" line="484" static="1">
			<f a="v">
				<t path="haxe.ds._WeakMap.HashType"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":extern"/></meta>
		</isEither>
		<isEmpty get="inline" set="null" line="487" static="1">
			<f a="v">
				<t path="haxe.ds._WeakMap.HashType"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":extern"/></meta>
		</isEmpty>
		<isDel get="inline" set="null" line="490" static="1">
			<f a="v">
				<t path="haxe.ds._WeakMap.HashType"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":extern"/></meta>
		</isDel>
		<hash get="inline" set="null" line="494" static="1">
			<f a="s">
				<d/>
				<t path="haxe.ds._WeakMap.HashType"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</hash>
		<arrayCopy get="inline" set="null" line="522" static="1">
			<f a="sourceArray:sourceIndex:destinationArray:destinationIndex:length">
				<d/>
				<x path="Int"/>
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</arrayCopy>
		<assert get="inline" set="null" line="525" static="1">
			<f a="x">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</assert>
		<hashes>
			<c path="java.NativeArray"><t path="haxe.ds._WeakMap.HashType"/></c>
			<haxe_doc>* This is the most important structure here and the reason why it's so fast.
	 * It's an array of all the hashes contained in the table. These hashes cannot be 0 nor 1,
	 * which stand for "empty" and "deleted" states.
	 *
	 * The lookup algorithm will keep looking until a 0 or the key wanted is found;
	 * The insertion algorithm will do the same but will also break when FLAG_DEL is found;</haxe_doc>
		</hashes>
		<entries><c path="java.NativeArray"><c path="haxe.ds._WeakMap.Entry">
	<c path="haxe.ds.WeakMap.K"/>
	<c path="haxe.ds.WeakMap.V"/>
</c></c></entries>
		<queue><c path="java.lang.ref.ReferenceQueue"><c path="haxe.ds.WeakMap.K"/></c></queue>
		<nBuckets><x path="Int"/></nBuckets>
		<size><x path="Int"/></size>
		<nOccupied><x path="Int"/></nOccupied>
		<upperBound><x path="Int"/></upperBound>
		<cachedEntry><c path="haxe.ds._WeakMap.Entry">
	<c path="haxe.ds.WeakMap.K"/>
	<c path="haxe.ds.WeakMap.V"/>
</c></cachedEntry>
		<cachedIndex><x path="Int"/></cachedIndex>
		<cleanupRefs set="method" line="70">
			<f a=""><x path="Void"/></f>
			<meta><m n=":analyzer"><e>ignore</e></m></meta>
		</cleanupRefs>
		<set public="1" set="method" line="105">
			<f a="key:value">
				<c path="haxe.ds.WeakMap.K"/>
				<c path="haxe.ds.WeakMap.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<lookup set="method" line="176">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Int"/>
			</f>
			<meta><m n=":final"/></meta>
		</lookup>
		<resize set="method" line="207">
			<f a="newNBuckets">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":final"/>
				<m n=":private"/>
			</meta>
		</resize>
		<get public="1" set="method" line="292">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<t path="Null"><c path="haxe.ds.WeakMap.V"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<getDefault set="method" line="314"><f a="key:def">
	<c path="haxe.ds.WeakMap.K"/>
	<c path="haxe.ds.WeakMap.V"/>
	<c path="haxe.ds.WeakMap.V"/>
</f></getDefault>
		<exists public="1" set="method" line="336">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="358">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="389">
			<f a=""><t path="Iterator"><c path="haxe.ds.WeakMap.K"/></t></f>
			<haxe_doc>Returns an iterator of all keys in the hashtable.
		Implementation detail: Do not set() any new value while iterating, as it may cause a resize, which will break iteration</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="426">
			<f a=""><t path="Iterator"><c path="haxe.ds.WeakMap.V"/></t></f>
			<haxe_doc>Returns an iterator of all values in the hashtable.
		Implementation detail: Do not set() any new value while iterating, as it may cause a resize, which will break iteration</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="455">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns an displayable representation of the hashtable content.</haxe_doc>
		</toString>
		<new public="1" set="method" line="63">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new WeakMap.</haxe_doc>
		</new>
		<haxe_doc>WeakMap allows mapping of object keys to arbitrary values.

	The keys are considered to be weak references on static targets.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="java.lang.ref.Reference" params="T" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ref/Reference.class" extern="1">
		<enqueue public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</enqueue>
		<isEnqueued public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isEnqueued>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</clear>
		<get public="1" set="method">
			<f a=""><c path="java.lang.ref.Reference.T"/></f>
			<meta><m n=":overload"/></meta>
		</get>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ref.Reference"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.ref"</e>
				<e>"Reference"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ref.WeakReference" params="T" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ref/WeakReference.class" extern="1">
		<extends path="java.lang.ref.Reference"><c path="java.lang.ref.WeakReference.T"/></extends>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.lang.ref.WeakReference.T"/>
				<c path="java.lang.ref.ReferenceQueue"><d/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1">
		<c path="java.lang.ref.WeakReference.T"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ref.WeakReference"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.ref"</e>
				<e>"WeakReference"</e>
			</m>
		</meta>
	</class>
	<class path="haxe.ds._WeakMap.Entry" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/haxe/ds/WeakMap.hx" private="1" module="haxe.ds.WeakMap">
		<extends path="java.lang.ref.WeakReference"><c path="haxe.ds._WeakMap.Entry.K"/></extends>
		<value public="1"><c path="haxe.ds._WeakMap.Entry.V"/></value>
		<hash public="1" set="null"><x path="Int"/></hash>
		<keyEquals public="1" get="inline" set="null" line="544">
			<f a="k">
				<c path="haxe.ds._WeakMap.Entry.K"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":final"/>
			</meta>
		</keyEquals>
		<new public="1" set="method" line="537"><f a="key:value:hash:queue">
	<c path="haxe.ds._WeakMap.Entry.K"/>
	<c path="haxe.ds._WeakMap.Entry.V"/>
	<x path="Int"/>
	<c path="java.lang.ref.ReferenceQueue"><c path="haxe.ds._WeakMap.Entry.K"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="haxe.ds._WeakMap.HashType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/haxe/ds/WeakMap.hx" private="1" module="haxe.ds.WeakMap"><x path="Int"/></typedef>
	<abstract path="haxe.extern.AsVar" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/extern/AsVar.hx">
		<from><icast><c path="haxe.extern.AsVar.T"/></icast></from>
		<this><c path="haxe.extern.AsVar.T"/></this>
		<to><icast><c path="haxe.extern.AsVar.T"/></icast></to>
		<haxe_doc>If this type is used as an argument type, the compiler ensures that
	argument expressions are bound to a local variable.</haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":analyzer"><e>as_var</e></m>
		</meta>
		<impl><class path="haxe.extern._AsVar.AsVar_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/extern/AsVar.hx" private="1" module="haxe.extern.AsVar" extern="1"><meta><m n=":final"/></meta></class></impl>
	</abstract>
	<class path="haxe.extern._AsVar.AsVar_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/extern/AsVar.hx" private="1" module="haxe.extern.AsVar" extern="1"><meta><m n=":final"/></meta></class>
	<abstract path="haxe.extern.EitherType" params="T1:T2" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/extern/EitherType.hx">
		<from>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
		</from>
		<this><d/></this>
		<to>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
		</to>
		<haxe_doc><![CDATA[An abstract type allowing values to be either of `T1` or `T2` type.
	Supports implicit casts from/to either types.

	It is useful for interfacing with external code on dynamic platforms
	such as JavaScript or Python.

	Otherwise, use of this type is discouraged.
	
	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<impl><class path="haxe.extern._EitherType.EitherType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/extern/EitherType.hx" private="1" module="haxe.extern.EitherType" extern="1"><meta><m n=":final"/></meta></class></impl>
	</abstract>
	<class path="haxe.extern._EitherType.EitherType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/extern/EitherType.hx" private="1" module="haxe.extern.EitherType" extern="1"><meta><m n=":final"/></meta></class>
	<abstract path="haxe.extern.Rest" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/extern/Rest.hx">
		<this><c path="Array"><c path="haxe.extern.Rest.T"/></c></this>
		<haxe_doc><![CDATA[A special abstract type that represents "rest" function argument.

	Should be used as a type for the last argument of an extern method,
	representing that arbitrary number of arguments of given type can be
	passed to that method.
	
	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<impl><class path="haxe.extern._Rest.Rest_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/extern/Rest.hx" private="1" module="haxe.extern.Rest" extern="1"><meta><m n=":final"/></meta></class></impl>
	</abstract>
	<class path="haxe.extern._Rest.Rest_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/extern/Rest.hx" private="1" module="haxe.extern.Rest" extern="1"><meta><m n=":final"/></meta></class>
	<class path="haxe.format.JsonParser" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/format/JsonParser.hx">
		<parse public="1" get="inline" set="null" line="44" static="1">
			<f a="str">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Parses given JSON-encoded `str` and returns the resulting object.

		JSON objects are parsed into anonymous structures and JSON arrays
		are parsed into `Array<Dynamic>`.

		If given `str` is not valid JSON, an exception will be thrown.

		If `str` is null, the result is unspecified.]]></haxe_doc>
		</parse>
		<str><c path="String"/></str>
		<pos><x path="Int"/></pos>
		<parseRec set="method" line="56"><f a=""><d/></f></parseRec>
		<parseString set="method" line="138"><f a=""><c path="String"/></f></parseString>
		<parseNumber get="inline" set="null" line="207"><f a="c">
	<x path="Int"/>
	<d/>
</f></parseNumber>
		<nextChar get="inline" set="null" line="245"><f a=""><x path="Int"/></f></nextChar>
		<invalidChar set="method" line="249"><f a=""><x path="Void"/></f></invalidChar>
		<invalidNumber set="method" line="254"><f a="start">
	<x path="Int"/>
	<x path="Void"/>
</f></invalidNumber>
		<new set="method" line="51"><f a="str">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An implementation of JSON parser in Haxe.

	This class is used by `haxe.Json` when native JSON implementation
	is not available.

	@see https://haxe.org/manual/std-Json-parsing.html</haxe_doc>
	</class>
	<class path="haxe.format.JsonPrinter" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/format/JsonPrinter.hx">
		<print public="1" set="method" line="44" static="1">
			<f a="o:?replacer:?space">
				<d/>
				<f a=":">
					<d/>
					<d/>
					<d/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `o`'s value and returns the resulting JSON string.

		If `replacer` is given and is not null, it is used to retrieve
		actual object to be encoded. The `replacer` function takes two parameters,
		the key and the value being encoded. Initial key value is an empty string.

		If `space` is given and is not null, the result will be pretty-printed.
		Successive levels will be indented by this string.</haxe_doc>
		</print>
		<buf><c path="StringBuf"/></buf>
		<replacer><f a=":">
	<d/>
	<d/>
	<d/>
</f></replacer>
		<indent><c path="String"/></indent>
		<pretty><x path="Bool"/></pretty>
		<nind><x path="Int"/></nind>
		<ipad get="inline" set="null" line="71"><f a=""><x path="Void"/></f></ipad>
		<newl get="inline" set="null" line="75"><f a=""><x path="Void"/></f></newl>
		<write set="method" line="79"><f a="k:v">
	<d/>
	<d/>
	<x path="Void"/>
</f></write>
		<addChar get="inline" set="null" line="140">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</addChar>
		<add get="inline" set="null" line="148">
			<f a="v">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</add>
		<objString get="inline" set="null" line="163"><f a="v">
	<d/>
	<x path="Void"/>
</f></objString>
		<fieldsString set="method" line="167"><f a="v:fields">
	<d/>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></fieldsString>
		<quote set="method" line="193"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></quote>
		<new set="method" line="56"><f a="replacer:space">
	<f a=":">
		<d/>
		<d/>
		<d/>
	</f>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An implementation of JSON printer in Haxe.

	This class is used by `haxe.Json` when native JSON implementation
	is not available.

	@see https://haxe.org/manual/std-Json-encoding.html</haxe_doc>
	</class>
	<typedef path="haxe.io.ArrayBufferViewData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/ArrayBufferView.hx" module="haxe.io.ArrayBufferView"><c path="haxe.io.ArrayBufferViewImpl"/></typedef>
	<class path="haxe.io.ArrayBufferViewImpl" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/ArrayBufferView.hx" module="haxe.io.ArrayBufferView">
		<bytes public="1"><c path="haxe.io.Bytes"/></bytes>
		<byteOffset public="1"><x path="Int"/></byteOffset>
		<byteLength public="1"><x path="Int"/></byteLength>
		<sub public="1" set="method" line="35"><f a="begin:?length">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.ArrayBufferViewImpl"/>
</f></sub>
		<subarray public="1" set="method" line="40"><f a="?begin:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.ArrayBufferViewImpl"/>
</f></subarray>
		<new public="1" set="method" line="30"><f a="bytes:pos:length">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="haxe.io.ArrayBufferView" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/ArrayBufferView.hx">
		<this><t path="haxe.io.ArrayBufferViewData"/></this>
		<impl><class path="haxe.io._ArrayBufferView.ArrayBufferView_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/ArrayBufferView.hx" private="1" module="haxe.io.ArrayBufferView">
	<EMULATED public="1" get="accessor" set="null" static="1">
		<x path="Bool"/>
		<haxe_doc>On some platforms configurations (for instance JS with no TypedArray support as in IE8-), Haxe will
		try to emulate the array buffers API. However in that case memory sharing will not be supported :
		each typed array or will copy its own data set. This flag allows users to detect if we are doing such emulation.
		At the moment only JavaScript is concerned.</haxe_doc>
	</EMULATED>
	<get_EMULATED get="inline" set="null" line="56" static="1"><f a=""><x path="Bool"/></f></get_EMULATED>
	<buffer public="1" get="accessor" set="null" static="1">
		<c path="haxe.io.Bytes"/>
		<meta><m n=":impl"/></meta>
	</buffer>
	<byteOffset public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</byteOffset>
	<byteLength public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</byteLength>
	<_new public="1" get="inline" set="null" line="64" static="1">
		<f a="size">
			<x path="Int"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_byteOffset get="inline" set="null" line="68" static="1">
		<f a="this">
			<t path="haxe.io.ArrayBufferViewData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_byteOffset>
	<get_byteLength get="inline" set="null" line="69" static="1">
		<f a="this">
			<t path="haxe.io.ArrayBufferViewData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_byteLength>
	<get_buffer get="inline" set="null" line="70" static="1">
		<f a="this">
			<t path="haxe.io.ArrayBufferViewData"/>
			<c path="haxe.io.Bytes"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_buffer>
	<sub public="1" get="inline" set="null" line="72" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.ArrayBufferViewData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="76" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.ArrayBufferViewData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="80" static="1">
		<f a="this">
			<t path="haxe.io.ArrayBufferViewData"/>
			<t path="haxe.io.ArrayBufferViewData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" get="inline" set="null" line="84" static="1"><f a="a">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></fromData>
	<fromBytes public="1" set="method" line="88" static="1">
		<f a="bytes:?pos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromBytes>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io._ArrayBufferView.ArrayBufferView_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/ArrayBufferView.hx" private="1" module="haxe.io.ArrayBufferView">
		<EMULATED public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<haxe_doc>On some platforms configurations (for instance JS with no TypedArray support as in IE8-), Haxe will
		try to emulate the array buffers API. However in that case memory sharing will not be supported :
		each typed array or will copy its own data set. This flag allows users to detect if we are doing such emulation.
		At the moment only JavaScript is concerned.</haxe_doc>
		</EMULATED>
		<get_EMULATED get="inline" set="null" line="56" static="1"><f a=""><x path="Bool"/></f></get_EMULATED>
		<buffer public="1" get="accessor" set="null" static="1">
			<c path="haxe.io.Bytes"/>
			<meta><m n=":impl"/></meta>
		</buffer>
		<byteOffset public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</byteOffset>
		<byteLength public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</byteLength>
		<_new public="1" get="inline" set="null" line="64" static="1">
			<f a="size">
				<x path="Int"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_byteOffset get="inline" set="null" line="68" static="1">
			<f a="this">
				<t path="haxe.io.ArrayBufferViewData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_byteOffset>
		<get_byteLength get="inline" set="null" line="69" static="1">
			<f a="this">
				<t path="haxe.io.ArrayBufferViewData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_byteLength>
		<get_buffer get="inline" set="null" line="70" static="1">
			<f a="this">
				<t path="haxe.io.ArrayBufferViewData"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_buffer>
		<sub public="1" get="inline" set="null" line="72" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.ArrayBufferViewData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="76" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.ArrayBufferViewData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="80" static="1">
			<f a="this">
				<t path="haxe.io.ArrayBufferViewData"/>
				<t path="haxe.io.ArrayBufferViewData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" get="inline" set="null" line="84" static="1"><f a="a">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></fromData>
		<fromBytes public="1" set="method" line="88" static="1">
			<f a="bytes:?pos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromBytes>
		<meta><m n=":final"/></meta>
	</class>
	<class path="haxe.io.Input" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Input.hx">
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when reading numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<helper><c path="java.nio.ByteBuffer"/></helper>
		<readByte public="1" set="method" line="49">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read and return one byte.</haxe_doc>
		</readByte>
		<readBytes public="1" set="method" line="64">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Returns the actual length of read data that can be smaller than `len`.

		See `readFullBytes` that tries to read the exact amount of specified bytes.</haxe_doc>
		</readBytes>
		<close public="1" set="method" line="92">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the input source.

		Behaviour while reading after calling this method is unspecified.</haxe_doc>
		</close>
		<set_bigEndian set="method" line="95"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<readAll public="1" set="method" line="108">
			<f a="?bufsize">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Read and return all available data.

		The `bufsize` optional argument specifies the size of chunks by
		which data is read. Its default value is target-specific.</haxe_doc>
		</readAll>
		<readFullBytes public="1" set="method" line="134">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Unlike `readBytes`, this method tries to read the exact `len` amount of bytes.</haxe_doc>
		</readFullBytes>
		<read public="1" set="method" line="147">
			<f a="nbytes">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Read and return `nbytes` bytes.</haxe_doc>
		</read>
		<readUntil public="1" set="method" line="164">
			<f a="end">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Read a string until a character code specified by `end` is occurred.

		The final character is not included in the resulting string.</haxe_doc>
		</readUntil>
		<readLine public="1" set="method" line="177">
			<f a=""><c path="String"/></f>
			<haxe_doc>Read a line of text separated by CR and/or LF bytes.

		The CR/LF characters are not included in the resulting string.</haxe_doc>
		</readLine>
		<readFloat public="1" set="method" line="199">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Read a 32-bit floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readFloat>
		<readDouble public="1" set="method" line="208">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Read a 64-bit double-precision floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readDouble>
		<readInt8 public="1" set="method" line="217">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 8-bit signed integer.</haxe_doc>
		</readInt8>
		<readInt16 public="1" set="method" line="229">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 16-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt16>
		<readUInt16 public="1" set="method" line="243">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 16-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readUInt16>
		<readInt24 public="1" set="method" line="254">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 24-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt24>
		<readUInt24 public="1" set="method" line="269">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 24-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readUInt24>
		<readInt32 public="1" set="method" line="281">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt32>
		<readString public="1" set="method" line="303">
			<f a="len">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Read and `len` bytes as a string.</haxe_doc>
		</readString>
		<haxe_doc>An Input is an abstract reader. See other classes in the `haxe.io` package
	for several possible implementations.

	All functions which read data throw `Eof` when the end of the stream
	is reached.</haxe_doc>
	</class>
	<class path="haxe.io.BufferInput" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/BufferInput.hx">
		<extends path="haxe.io.Input"/>
		<i public="1"><c path="haxe.io.Input"/></i>
		<buf public="1"><c path="haxe.io.Bytes"/></buf>
		<available public="1"><x path="Int"/></available>
		<pos public="1"><x path="Int"/></pos>
		<refill public="1" set="method" line="38"><f a=""><x path="Void"/></f></refill>
		<readByte public="1" set="method" line="46" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="54" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="31">
			<f a="i:buf:?pos:?available" v="::0:0">
				<c path="haxe.io.Input"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ available : 0, pos : 0 }</e></m></meta>
		</new>
	</class>
	<class path="haxe.io.BytesBuffer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/BytesBuffer.hx">
		<b><c path="java.io.ByteArrayOutputStream"/></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the buffer in bytes.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="64"><f a=""><x path="Int"/></f></get_length>
		<addByte public="1" get="inline" set="null" line="76"><f a="byte">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<add public="1" get="inline" set="null" line="94"><f a="src">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></add>
		<addString public="1" get="inline" set="null" line="118"><f a="v">
	<c path="String"/>
	<x path="Void"/>
</f></addString>
		<addInt32 public="1" set="method" line="128"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></addInt32>
		<addInt64 public="1" set="method" line="139"><f a="v">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></addInt64>
		<addFloat public="1" get="inline" set="null" line="144"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></addFloat>
		<addDouble public="1" get="inline" set="null" line="152"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></addDouble>
		<addBytes public="1" get="inline" set="null" line="160"><f a="src:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<getBytes public="1" set="method" line="191">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns either a copy or a reference of the current bytes.
		Once called, the buffer can no longer be used.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="45"><f a=""><x path="Void"/></f></new>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/BytesData.hx"><c path="java.NativeArray"><x path="java.Int8"/></c></typedef>
	<class path="haxe.io.BytesInput" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/BytesInput.hx">
		<extends path="haxe.io.Input"/>
		<b><t path="haxe.io.BytesData"/></b>
		<pos><x path="Int"/></pos>
		<len><x path="Int"/></len>
		<totlen><x path="Int"/></totlen>
		<position public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<haxe_doc>The current position in the stream in bytes.</haxe_doc>
		</position>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the stream in bytes.</haxe_doc>
		</length>
		<get_position get="inline" set="null" line="63"><f a=""><x path="Int"/></f></get_position>
		<get_length get="inline" set="null" line="71"><f a=""><x path="Int"/></f></get_length>
		<set_position set="method" line="79"><f a="p">
	<x path="Int"/>
	<x path="Int"/>
</f></set_position>
		<readByte public="1" set="method" line="90" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
		</readByte>
		<readBytes public="1" set="method" line="111" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="38"><f a="b:?pos:?len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.io.Output" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Output.hx">
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when writing numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<helper><c path="java.nio.ByteBuffer"/></helper>
		<writeByte public="1" set="method" line="46">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write one byte.</haxe_doc>
		</writeByte>
		<writeBytes public="1" set="method" line="57">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Returns the actual length of written data that can differ from `len`.

		See `writeFullBytes` that tries to write the exact amount of specified bytes.</haxe_doc>
		</writeBytes>
		<flush public="1" set="method" line="85">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Flush any buffered data.</haxe_doc>
		</flush>
		<close public="1" set="method" line="93">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the output.

		Behaviour while writing after calling this method is unspecified.</haxe_doc>
		</close>
		<set_bigEndian set="method" line="96"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<write public="1" set="method" line="106">
			<f a="s">
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write all bytes stored in `s`.</haxe_doc>
		</write>
		<writeFullBytes public="1" set="method" line="122">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Unlike `writeBytes`, this method tries to write the exact `len` amount of bytes.</haxe_doc>
		</writeFullBytes>
		<writeFloat public="1" set="method" line="135">
			<f a="x">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeFloat>
		<writeDouble public="1" set="method" line="144">
			<f a="x">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 64-bit double-precision floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeDouble>
		<writeInt8 public="1" set="method" line="158">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 8-bit signed integer.</haxe_doc>
		</writeInt8>
		<writeInt16 public="1" set="method" line="169">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 16-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt16>
		<writeUInt16 public="1" set="method" line="179">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 16-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeUInt16>
		<writeInt24 public="1" set="method" line="195">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 24-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt24>
		<writeUInt24 public="1" set="method" line="205">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 24-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeUInt24>
		<writeInt32 public="1" set="method" line="223">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt32>
		<prepare public="1" set="method" line="244">
			<f a="nbytes">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inform that we are about to write at least `nbytes` bytes.

		The underlying implementation can allocate proper working space depending
		on this information, or simply ignore it. This is not a mandatory call
		but a tip and is only used in some specific cases.</haxe_doc>
		</prepare>
		<writeInput public="1" set="method" line="253">
			<f a="i:?bufsize">
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Read all available data from `i` and write it.

		The `bufsize` optional argument specifies the size of chunks by
		which data is read and written. Its default value is 4096.</haxe_doc>
		</writeInput>
		<writeString public="1" set="method" line="278">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `s` string.</haxe_doc>
		</writeString>
		<haxe_doc>An Output is an abstract write. A specific output implementation will only
	have to override the `writeByte` and maybe the `write`, `flush` and `close`
	methods. See `File.write` and `String.write` for two ways of creating an
	Output.</haxe_doc>
	</class>
	<class path="haxe.io.BytesOutput" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/BytesOutput.hx">
		<extends path="haxe.io.Output"/>
		<b><c path="haxe.io.BytesBuffer"/></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the stream in bytes.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="47"><f a=""><x path="Int"/></f></get_length>
		<writeByte public="1" set="method" line="51" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="59" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<getBytes public="1" set="method" line="131">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>Returns the `Bytes` of this output.

		This function should not be called more than once on a given
		`BytesOutput` instance.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="35"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.io.Eof" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Eof.hx">
		<toString set="method" line="30">
			<f a=""><c path="String"/></f>
			<meta><m n=":keep"/></meta>
		</toString>
		<new public="1" set="method" line="28"><f a=""><x path="Void"/></f></new>
		<haxe_doc>This exception is raised when reading while data is no longer available in the `haxe.io.Input`.</haxe_doc>
	</class>
	<enum path="haxe.io.Error" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
	</enum>
	<class path="haxe.io.FPHelper" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/FPHelper.hx">
		<LN2 get="inline" set="null" expr="0.6931471805599453" line="58" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.6931471805599453</e></m></meta>
		</LN2>
		<i32ToFloat public="1" set="method" line="62" static="1"><f a="i">
	<x path="Int"/>
	<x path="Float"/>
</f></i32ToFloat>
		<floatToI32 public="1" set="method" line="109" static="1"><f a="f">
	<x path="Float"/>
	<x path="Int"/>
</f></floatToI32>
		<i64ToDouble public="1" set="method" line="153" static="1"><f a="low:high">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></i64ToDouble>
		<doubleToI64 public="1" set="method" line="219" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Returns an Int64 representing the bytes representation of the double precision IEEE float value.
		WARNING : for performance reason, the same Int64 value might be reused every time. Copy its low/high values before calling again.
		We still ensure that this is safe to use in a multithread environment</haxe_doc>
		</doubleToI64>
		<haxe_doc>Helper that converts between floating point and binary representation.
	Always works in low-endian encoding.</haxe_doc>
	</class>
	<typedef path="haxe.io.Float32ArrayData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Float32Array.hx" module="haxe.io.Float32Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.Float32Array" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Float32Array.hx">
		<this><t path="haxe.io.Float32ArrayData"/></this>
		<impl><class path="haxe.io._Float32Array.Float32Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Float32Array.hx" private="1" module="haxe.io.Float32Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_length get="inline" set="null" line="36" static="1">
		<f a="this">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="40" static="1">
		<f a="this">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="44" static="1">
		<f a="this:index">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="48" static="1">
		<f a="this:index:value">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="56" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="60" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="64" static="1">
		<f a="this">
			<t path="haxe.io.Float32ArrayData"/>
			<t path="haxe.io.Float32ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="haxe.io.Float32Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="72" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="81" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io._Float32Array.Float32Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Float32Array.hx" private="1" module="haxe.io.Float32Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_length get="inline" set="null" line="36" static="1">
			<f a="this">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="40" static="1">
			<f a="this">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="44" static="1">
			<f a="this:index">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="48" static="1">
			<f a="this:index:value">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="56" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="60" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="64" static="1">
			<f a="this">
				<t path="haxe.io.Float32ArrayData"/>
				<t path="haxe.io.Float32ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="haxe.io.Float32Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="72" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="81" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
		<meta><m n=":final"/></meta>
	</class>
	<typedef path="haxe.io.Float64ArrayData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Float64Array.hx" module="haxe.io.Float64Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.Float64Array" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Float64Array.hx">
		<this><t path="haxe.io.Float64ArrayData"/></this>
		<impl><class path="haxe.io._Float64Array.Float64Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Float64Array.hx" private="1" module="haxe.io.Float64Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="8" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>8</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_length get="inline" set="null" line="36" static="1">
		<f a="this">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="40" static="1">
		<f a="this">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="44" static="1">
		<f a="this:index">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="48" static="1">
		<f a="this:index:value">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="56" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="60" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="64" static="1">
		<f a="this">
			<t path="haxe.io.Float64ArrayData"/>
			<t path="haxe.io.Float64ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="haxe.io.Float64Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="72" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="81" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io._Float64Array.Float64Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Float64Array.hx" private="1" module="haxe.io.Float64Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="8" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_length get="inline" set="null" line="36" static="1">
			<f a="this">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="40" static="1">
			<f a="this">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="44" static="1">
			<f a="this:index">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="48" static="1">
			<f a="this:index:value">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="56" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="60" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="64" static="1">
			<f a="this">
				<t path="haxe.io.Float64ArrayData"/>
				<t path="haxe.io.Float64ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="haxe.io.Float64Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="72" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="81" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
		<meta><m n=":final"/></meta>
	</class>
	<typedef path="haxe.io.Int32ArrayData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Int32Array.hx" module="haxe.io.Int32Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.Int32Array" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Int32Array.hx">
		<this><t path="haxe.io.Int32ArrayData"/></this>
		<impl><class path="haxe.io._Int32Array.Int32Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Int32Array.hx" private="1" module="haxe.io.Int32Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_length get="inline" set="null" line="36" static="1">
		<f a="this">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="40" static="1">
		<f a="this">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="44" static="1">
		<f a="this:index">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="48" static="1">
		<f a="this:index:value">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="56" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="60" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="64" static="1">
		<f a="this">
			<t path="haxe.io.Int32ArrayData"/>
			<t path="haxe.io.Int32ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="haxe.io.Int32Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="72" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="81" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io._Int32Array.Int32Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Int32Array.hx" private="1" module="haxe.io.Int32Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_length get="inline" set="null" line="36" static="1">
			<f a="this">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="40" static="1">
			<f a="this">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="44" static="1">
			<f a="this:index">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="48" static="1">
			<f a="this:index:value">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="56" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="60" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="64" static="1">
			<f a="this">
				<t path="haxe.io.Int32ArrayData"/>
				<t path="haxe.io.Int32ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="haxe.io.Int32Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="72" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="81" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
		<meta><m n=":final"/></meta>
	</class>
	<class path="haxe.io.Path" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Path.hx">
		<withoutExtension public="1" set="method" line="123" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String representation of `path` without the file extension.

		If `path` is null, the result is unspecified.</haxe_doc>
		</withoutExtension>
		<withoutDirectory public="1" set="method" line="134" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String representation of `path` without the directory.

		If `path` is null, the result is unspecified.</haxe_doc>
		</withoutDirectory>
		<directory public="1" set="method" line="147" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the directory of `path`.

		If the directory is null, the empty String `""` is returned.

		If `path` is null, the result is unspecified.</haxe_doc>
		</directory>
		<extension public="1" set="method" line="161" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the extension of `path`.

		If the extension is null, the empty String `""` is returned.

		If `path` is null, the result is unspecified.</haxe_doc>
		</extension>
		<withExtension public="1" set="method" line="175" static="1">
			<f a="path:ext">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String representation of `path` where the extension is `ext`.

		If `path` has no extension, `ext` is added as extension.

		If `path` or `ext` are null, the result is unspecified.</haxe_doc>
		</withExtension>
		<join public="1" set="method" line="189" static="1">
			<f a="paths">
				<c path="Array"><c path="String"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all paths in `paths` together.

		If `paths` is empty, the empty String `""` is returned. Otherwise the
		paths are joined with a slash between them.

		If `paths` is null, the result is unspecified.</haxe_doc>
		</join>
		<normalize public="1" set="method" line="210" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Normalize a given `path` (e.g. make '/usr/local/../lib' to '/usr/lib').

		Also replaces backslashes \ with slashes / and afterwards turns
		multiple slashes into a single one.

		If `path` is null, the result is unspecified.</haxe_doc>
		</normalize>
		<addTrailingSlash public="1" set="method" line="262" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Adds a trailing slash to `path`, if it does not have one already.

		If the last slash in `path` is a backslash, a backslash is appended to
		`path`.

		If the last slash in `path` is a slash, or if no slash is found, a slash
		is appended to `path`. In particular, this applies to the empty String
		`""`.

		If `path` is null, the result is unspecified.</haxe_doc>
		</addTrailingSlash>
		<removeTrailingSlashes public="1" set="method" line="287" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":require"><e><![CDATA[haxe_ver >= 3.1]]></e></m></meta>
			<haxe_doc>Removes trailing slashes from `path`.

		If `path` does not end with a `/` or `\`, `path` is returned unchanged.

		Otherwise the substring of `path` excluding the trailing slashes or
		backslashes is returned.

		If `path` is null, the result is unspecified.</haxe_doc>
		</removeTrailingSlashes>
		<isAbsolute public="1" set="method" line="301" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":require"><e><![CDATA[haxe_ver >= 3.2]]></e></m></meta>
			<haxe_doc>Returns true if the path is an absolute path, and false otherwise.</haxe_doc>
		</isAbsolute>
		<unescape set="method" line="308" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></unescape>
		<escape set="method" line="313" static="1">
			<f a="path:?allowSlashes" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ allowSlashes : false }</e></m></meta>
		</escape>
		<dir public="1">
			<c path="String"/>
			<haxe_doc>The directory.

		This is the leading part of the path that is not part of the file name
		and the extension.

		Does not end with a `/` or `\` separator.

		If the path has no directory, the value is null.</haxe_doc>
		</dir>
		<file public="1">
			<c path="String"/>
			<haxe_doc>The file name.

		This is the part of the part between the directory and the extension.

		If there is no file name, e.g. for ".htaccess" or "/dir/", the value
		is the empty String "".</haxe_doc>
		</file>
		<ext public="1">
			<c path="String"/>
			<haxe_doc>The file extension.

		It is separated from the file name by a dot. This dot is not part of
		the extension.

		If the path has no extension, the value is null.</haxe_doc>
		</ext>
		<backslash public="1">
			<x path="Bool"/>
			<haxe_doc>True if the last directory separator is a backslash, false otherwise.</haxe_doc>
		</backslash>
		<toString public="1" set="method" line="114">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of `this` path.

		If `this.backslash` is true, backslash is used as directory separator,
		otherwise slash is used. This only affects the separator between
		`this.dir` and `this.file`.

		If `this.directory` or `this.extension` is null, their representation
		is the empty String "".</haxe_doc>
		</toString>
		<new public="1" set="method" line="76">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Path instance by parsing `path`.

		Path information can be retrieved by accessing the dir, file and ext
		properties.</haxe_doc>
		</new>
		<haxe_doc>This class provides a convenient way of working with paths. It supports the
	common path formats:

	- directory1/directory2/filename.extension
	- directory1\directory2\filename.extension</haxe_doc>
	</class>
	<class path="haxe.io.StringInput" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/StringInput.hx">
		<extends path="haxe.io.BytesInput"/>
		<new public="1" set="method" line="26"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="haxe.io.UInt16ArrayData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/UInt16Array.hx" module="haxe.io.UInt16Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.UInt16Array" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/UInt16Array.hx">
		<this><t path="haxe.io.UInt16ArrayData"/></this>
		<impl><class path="haxe.io._UInt16Array.UInt16Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/UInt16Array.hx" private="1" module="haxe.io.UInt16Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>2</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_length get="inline" set="null" line="36" static="1">
		<f a="this">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="40" static="1">
		<f a="this">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="44" static="1">
		<f a="this:index">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="48" static="1">
		<f a="this:index:value">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="56" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="60" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="64" static="1">
		<f a="this">
			<t path="haxe.io.UInt16ArrayData"/>
			<t path="haxe.io.UInt16ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="haxe.io.UInt16Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="72" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="81" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io._UInt16Array.UInt16Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/UInt16Array.hx" private="1" module="haxe.io.UInt16Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_length get="inline" set="null" line="36" static="1">
			<f a="this">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="40" static="1">
			<f a="this">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="44" static="1">
			<f a="this:index">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="48" static="1">
			<f a="this:index:value">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="56" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="60" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="64" static="1">
			<f a="this">
				<t path="haxe.io.UInt16ArrayData"/>
				<t path="haxe.io.UInt16ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="haxe.io.UInt16Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="72" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="81" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
		<meta><m n=":final"/></meta>
	</class>
	<typedef path="haxe.io.UInt32ArrayData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/UInt32Array.hx" module="haxe.io.UInt32Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.UInt32Array" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/UInt32Array.hx">
		<this><t path="haxe.io.UInt32ArrayData"/></this>
		<impl><class path="haxe.io._UInt32Array.UInt32Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/UInt32Array.hx" private="1" module="haxe.io.UInt32Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_length get="inline" set="null" line="36" static="1">
		<f a="this">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="40" static="1">
		<f a="this">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="44" static="1">
		<f a="this:index">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="48" static="1">
		<f a="this:index:value">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="56" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="60" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="64" static="1">
		<f a="this">
			<t path="haxe.io.UInt32ArrayData"/>
			<t path="haxe.io.UInt32ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="haxe.io.UInt32Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="72" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="UInt"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="81" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io._UInt32Array.UInt32Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/UInt32Array.hx" private="1" module="haxe.io.UInt32Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_length get="inline" set="null" line="36" static="1">
			<f a="this">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="40" static="1">
			<f a="this">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="44" static="1">
			<f a="this:index">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="48" static="1">
			<f a="this:index:value">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="56" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="60" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="64" static="1">
			<f a="this">
				<t path="haxe.io.UInt32ArrayData"/>
				<t path="haxe.io.UInt32ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="haxe.io.UInt32Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="72" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="UInt"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="81" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
		<meta><m n=":final"/></meta>
	</class>
	<typedef path="haxe.io.UInt8ArrayData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/UInt8Array.hx" module="haxe.io.UInt8Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.UInt8Array" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/UInt8Array.hx">
		<this><t path="haxe.io.UInt8ArrayData"/></this>
		<impl><class path="haxe.io._UInt8Array.UInt8Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/UInt8Array.hx" private="1" module="haxe.io.UInt8Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>1</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_length get="inline" set="null" line="36" static="1">
		<f a="this">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="40" static="1">
		<f a="this">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="44" static="1">
		<f a="this:index">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="48" static="1">
		<f a="this:index:value">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="56" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="60" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="64" static="1">
		<f a="this">
			<t path="haxe.io.UInt8ArrayData"/>
			<t path="haxe.io.UInt8ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="haxe.io.UInt8Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="72" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="81" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io._UInt8Array.UInt8Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/UInt8Array.hx" private="1" module="haxe.io.UInt8Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_length get="inline" set="null" line="36" static="1">
			<f a="this">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="40" static="1">
			<f a="this">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="44" static="1">
			<f a="this:index">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="48" static="1">
			<f a="this:index:value">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="56" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="60" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="64" static="1">
			<f a="this">
				<t path="haxe.io.UInt8ArrayData"/>
				<t path="haxe.io.UInt8ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" set="method" line="68" static="1"><f a="d">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="haxe.io.UInt8Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="72" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="81" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
		<meta><m n=":final"/></meta>
	</class>
	<abstract path="haxe.macro.ModuleCheckPolicy" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/CompilationServer.hx" module="haxe.macro.CompilationServer">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.macro._CompilationServer.ModuleCheckPolicy_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/CompilationServer.hx" private="1" module="haxe.macro.CompilationServer" extern="1">
	<NoCheckFileTimeModification public="1" get="inline" set="null" expr="cast 0" line="10" static="1">
		<x path="haxe.macro.ModuleCheckPolicy"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Disables file modification checks, avoiding some filesystem operations.</haxe_doc>
	</NoCheckFileTimeModification>
	<CheckFileContentModification public="1" get="inline" set="null" expr="cast 1" line="16" static="1">
		<x path="haxe.macro.ModuleCheckPolicy"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>If a file is modified, also checks if its content changed. This check
		is not free, but useful when .hx files are auto-generated.</haxe_doc>
	</CheckFileContentModification>
	<NoCheckDependencies public="1" get="inline" set="null" expr="cast 2" line="21" static="1">
		<x path="haxe.macro.ModuleCheckPolicy"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Disables dependency checks of the module.</haxe_doc>
	</NoCheckDependencies>
	<NoCheckShadowing public="1" get="inline" set="null" expr="cast 3" line="28" static="1">
		<x path="haxe.macro.ModuleCheckPolicy"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Disables file shadowing checks. Shadowing can occur when a new file
		is added to a class-path that has higher priority than the class-path
		of the current module file.</haxe_doc>
	</NoCheckShadowing>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.macro._CompilationServer.ModuleCheckPolicy_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/CompilationServer.hx" private="1" module="haxe.macro.CompilationServer" extern="1">
		<NoCheckFileTimeModification public="1" get="inline" set="null" expr="cast 0" line="10" static="1">
			<x path="haxe.macro.ModuleCheckPolicy"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Disables file modification checks, avoiding some filesystem operations.</haxe_doc>
		</NoCheckFileTimeModification>
		<CheckFileContentModification public="1" get="inline" set="null" expr="cast 1" line="16" static="1">
			<x path="haxe.macro.ModuleCheckPolicy"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>If a file is modified, also checks if its content changed. This check
		is not free, but useful when .hx files are auto-generated.</haxe_doc>
		</CheckFileContentModification>
		<NoCheckDependencies public="1" get="inline" set="null" expr="cast 2" line="21" static="1">
			<x path="haxe.macro.ModuleCheckPolicy"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Disables dependency checks of the module.</haxe_doc>
		</NoCheckDependencies>
		<NoCheckShadowing public="1" get="inline" set="null" expr="cast 3" line="28" static="1">
			<x path="haxe.macro.ModuleCheckPolicy"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Disables file shadowing checks. Shadowing can occur when a new file
		is added to a class-path that has higher priority than the class-path
		of the current module file.</haxe_doc>
		</NoCheckShadowing>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="haxe.macro.ContextOptions" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/CompilationServer.hx" module="haxe.macro.CompilationServer">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.macro._CompilationServer.ContextOptions_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/CompilationServer.hx" private="1" module="haxe.macro.CompilationServer" extern="1">
	<NormalContext public="1" get="inline" set="null" expr="cast 0" line="35" static="1">
		<x path="haxe.macro.ContextOptions"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Affects only the normal context.</haxe_doc>
	</NormalContext>
	<MacroContext public="1" get="inline" set="null" expr="cast 1" line="40" static="1">
		<x path="haxe.macro.ContextOptions"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Affects only the macro context.</haxe_doc>
	</MacroContext>
	<NormalAndMacroContext public="1" get="inline" set="null" expr="cast 2" line="45" static="1">
		<x path="haxe.macro.ContextOptions"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Affects the normal and macro contexts.</haxe_doc>
	</NormalAndMacroContext>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.macro._CompilationServer.ContextOptions_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/CompilationServer.hx" private="1" module="haxe.macro.CompilationServer" extern="1">
		<NormalContext public="1" get="inline" set="null" expr="cast 0" line="35" static="1">
			<x path="haxe.macro.ContextOptions"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Affects only the normal context.</haxe_doc>
		</NormalContext>
		<MacroContext public="1" get="inline" set="null" expr="cast 1" line="40" static="1">
			<x path="haxe.macro.ContextOptions"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Affects only the macro context.</haxe_doc>
		</MacroContext>
		<NormalAndMacroContext public="1" get="inline" set="null" expr="cast 2" line="45" static="1">
			<x path="haxe.macro.ContextOptions"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Affects the normal and macro contexts.</haxe_doc>
		</NormalAndMacroContext>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="haxe.macro.CompilationServer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/CompilationServer.hx"><haxe_doc>This class provides some methods which can be invoked from command line using
	`--macro server.field(args)`.</haxe_doc></class>
	<class path="haxe.macro.Compiler" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Compiler.hx">
		<getDefine public="1" set="method" static="1">
			<f a="key">
				<d/>
				<d/>
			</f>
			<haxe_doc>A conditional compiler flag can be set command line using
		`-D key=value`.

		Returns the value of a compiler flag.

		If the compiler flag is defined but no value is set,
		`Compiler.getDefine` returns `"1"` (e.g. `-D key`).

		If the compiler flag is not defined, `Compiler.getDefine` returns
		`null`.

		@see https://haxe.org/manual/lf-condition-compilation.html</haxe_doc>
		</getDefine>
		<haxe_doc>All these methods can be called for compiler configuration macros.</haxe_doc>
	</class>
	<abstract path="haxe.macro.IncludePosition" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.macro._Compiler.IncludePosition_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Compiler.hx" private="1" module="haxe.macro.Compiler" extern="1">
	<Top public="1" get="inline" set="null" expr="cast &quot;top&quot;" line="440" static="1">
		<x path="haxe.macro.IncludePosition"/>
		<meta>
			<m n=":value"><e>cast "top"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Prepend the file content to the output file.</haxe_doc>
	</Top>
	<Closure public="1" get="inline" set="null" expr="cast &quot;closure&quot;" line="446" static="1">
		<x path="haxe.macro.IncludePosition"/>
		<meta>
			<m n=":value"><e>cast "closure"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Prepend the file content to the body of the top-level closure.

		Since the closure is in strict-mode, there may be run-time error if the input is not strict-mode-compatible.</haxe_doc>
	</Closure>
	<Inline public="1" get="inline" set="null" expr="cast &quot;inline&quot;" line="450" static="1">
		<x path="haxe.macro.IncludePosition"/>
		<meta>
			<m n=":value"><e>cast "inline"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Directly inject the file content at the call site.</haxe_doc>
	</Inline>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.macro._Compiler.IncludePosition_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Compiler.hx" private="1" module="haxe.macro.Compiler" extern="1">
		<Top public="1" get="inline" set="null" expr="cast &quot;top&quot;" line="440" static="1">
			<x path="haxe.macro.IncludePosition"/>
			<meta>
				<m n=":value"><e>cast "top"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Prepend the file content to the output file.</haxe_doc>
		</Top>
		<Closure public="1" get="inline" set="null" expr="cast &quot;closure&quot;" line="446" static="1">
			<x path="haxe.macro.IncludePosition"/>
			<meta>
				<m n=":value"><e>cast "closure"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Prepend the file content to the body of the top-level closure.

		Since the closure is in strict-mode, there may be run-time error if the input is not strict-mode-compatible.</haxe_doc>
		</Closure>
		<Inline public="1" get="inline" set="null" expr="cast &quot;inline&quot;" line="450" static="1">
			<x path="haxe.macro.IncludePosition"/>
			<meta>
				<m n=":value"><e>cast "inline"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Directly inject the file content at the call site.</haxe_doc>
		</Inline>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="haxe.macro.ComplexTypeTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/ComplexTypeTools.hx">
		<toString public="1" set="method" line="40" static="1">
			<f a="c">
				<e path="haxe.macro.ComplexType"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts type `c` to a human-readable `String` representation.

		The result is guaranteed to be valid Haxe code, but there may be
		differences from the original lexical syntax.</haxe_doc>
		</toString>
		<haxe_doc>This class provides some utility methods to work with AST-level types. It is
	best used through `using haxe.macro.ComplexTypeTools` syntax and then provides
	additional methods on `haxe.macro.ComplexType` instances.</haxe_doc>
	</class>
	<typedef path="haxe.macro.Position" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<min>
				<x path="Int"/>
				<haxe_doc>Position of the first character.</haxe_doc>
			</min>
			<max>
				<x path="Int"/>
				<haxe_doc>Position of the last character.</haxe_doc>
			</max>
			<file>
				<c path="String"/>
				<haxe_doc>Reference to the filename.</haxe_doc>
			</file>
		</a>
		<haxe_doc>Represents a position in a file.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.Constant" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<CInt a="v">
			<c path="String"/>
			<haxe_doc>Represents an integer literal.</haxe_doc>
		</CInt>
		<CFloat a="f">
			<c path="String"/>
			<haxe_doc>Represents a float literal.</haxe_doc>
		</CFloat>
		<CString a="s">
			<c path="String"/>
			<haxe_doc>Represents a string literal.</haxe_doc>
		</CString>
		<CIdent a="s">
			<c path="String"/>
			<haxe_doc>Represents an identifier.</haxe_doc>
		</CIdent>
		<CRegexp a="r:opt">
			<c path="String"/>
			<c path="String"/>
			<haxe_doc>Represents a regular expression literal.

		Example: `~/haxe/i`
		 * The first argument _haxe_ is a string with regular expression pattern.
		 * The second argument _i_ is a string with regular expression flags.

		@see https://haxe.org/manual/std-regex.html</haxe_doc>
		</CRegexp>
		<haxe_doc>Represents a constant.
	@see https://haxe.org/manual/expression-constants.html</haxe_doc>
	</enum>
	<enum path="haxe.macro.Binop" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpAdd><haxe_doc>`+`</haxe_doc></OpAdd>
		<OpMult><haxe_doc>`*`</haxe_doc></OpMult>
		<OpDiv><haxe_doc>`/`</haxe_doc></OpDiv>
		<OpSub><haxe_doc>`-`</haxe_doc></OpSub>
		<OpAssign><haxe_doc>`=`</haxe_doc></OpAssign>
		<OpEq><haxe_doc>`==`</haxe_doc></OpEq>
		<OpNotEq><haxe_doc>`!=`</haxe_doc></OpNotEq>
		<OpGt><haxe_doc><![CDATA[`>`]]></haxe_doc></OpGt>
		<OpGte><haxe_doc><![CDATA[`>=`]]></haxe_doc></OpGte>
		<OpLt><haxe_doc><![CDATA[`<`]]></haxe_doc></OpLt>
		<OpLte><haxe_doc><![CDATA[`<=`]]></haxe_doc></OpLte>
		<OpAnd><haxe_doc><![CDATA[`&`]]></haxe_doc></OpAnd>
		<OpOr><haxe_doc>`|`</haxe_doc></OpOr>
		<OpXor><haxe_doc>`^`</haxe_doc></OpXor>
		<OpBoolAnd><haxe_doc><![CDATA[`&&`]]></haxe_doc></OpBoolAnd>
		<OpBoolOr><haxe_doc>`||`</haxe_doc></OpBoolOr>
		<OpShl><haxe_doc><![CDATA[`<<`]]></haxe_doc></OpShl>
		<OpShr><haxe_doc><![CDATA[`>>`]]></haxe_doc></OpShr>
		<OpUShr><haxe_doc><![CDATA[`>>>`]]></haxe_doc></OpUShr>
		<OpMod><haxe_doc>`%`</haxe_doc></OpMod>
		<OpAssignOp a="op">
			<e path="haxe.macro.Binop"/>
			<haxe_doc><![CDATA[`+=`
		`-=`
		`/=`
		`*=`
		`<<=`
		`>>=`
		`>>>=`
		`|=`
		`&=`
		`^=`
		`%=`]]></haxe_doc>
		</OpAssignOp>
		<OpInterval><haxe_doc>`...`</haxe_doc></OpInterval>
		<OpArrow><haxe_doc><![CDATA[`=>`]]></haxe_doc></OpArrow>
		<haxe_doc>A binary operator.
	@see https://haxe.org/manual/types-numeric-operators.html</haxe_doc>
	</enum>
	<enum path="haxe.macro.Unop" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpIncrement><haxe_doc>`++`</haxe_doc></OpIncrement>
		<OpDecrement><haxe_doc>`--`</haxe_doc></OpDecrement>
		<OpNot><haxe_doc>`!`</haxe_doc></OpNot>
		<OpNeg><haxe_doc>`-`</haxe_doc></OpNeg>
		<OpNegBits><haxe_doc>`~`</haxe_doc></OpNegBits>
		<haxe_doc>A unary operator.
	@see https://haxe.org/manual/types-numeric-operators.html</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="haxe.macro.Expr" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.ExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a node in the AST.
	@see https://haxe.org/manual/macro-reification-expression.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<t path="haxe.macro.Expr"/>
		<haxe_doc>Represents a AST node identical to `Expr`, but it allows constraining the
	type of accepted expressions.
	@see https://haxe.org/manual/macro-ExprOf.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Case" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<values>
				<c path="Array"><t path="haxe.macro.Expr"/></c>
				<haxe_doc>The value expressions of the case.</haxe_doc>
			</values>
			<guard>
				<t path="Null"><t path="Null"><t path="haxe.macro.Expr"/></t></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional guard expressions of the case, if available.</haxe_doc>
			</guard>
			<expr>
				<t path="Null"><t path="haxe.macro.Expr"/></t>
				<haxe_doc>The expression of the case, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a switch case.
	@see https://haxe.org/manual/expression-switch.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Var" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<t path="Null"><e path="haxe.macro.ComplexType"/></t>
				<haxe_doc>The type-hint of the variable, if available.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<expr>
				<t path="Null"><t path="haxe.macro.Expr"/></t>
				<haxe_doc>The expression of the variable, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a variable in the AST.
	@see https://haxe.org/manual/expression-var.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Catch" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<e path="haxe.macro.ComplexType"/>
				<haxe_doc>The type of the catch.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the catch variable.</haxe_doc>
			</name>
			<expr>
				<t path="haxe.macro.Expr"/>
				<haxe_doc>The expression of the catch.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a catch in the AST.
	@https://haxe.org/manual/expression-try-catch.html</haxe_doc>
	</typedef>
	<enum path="haxe.macro.ExprDef" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<EConst a="c">
			<e path="haxe.macro.Constant"/>
			<haxe_doc>A constant.</haxe_doc>
		</EConst>
		<EArray a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Array access `e1[e2]`.</haxe_doc>
		</EArray>
		<EBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Binary operator `e1 op e2`.</haxe_doc>
		</EBinop>
		<EField a="e:field">
			<t path="haxe.macro.Expr"/>
			<c path="String"/>
			<haxe_doc>Field access on `e.field`.</haxe_doc>
		</EField>
		<EParenthesis a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Parentheses `(e)`.</haxe_doc>
		</EParenthesis>
		<EObjectDecl a="fields">
			<c path="Array"><a>
	<field><c path="String"/></field>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></c>
			<haxe_doc>An object declaration.</haxe_doc>
		</EObjectDecl>
		<EArrayDecl a="values">
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>An array declaration `[el]`.</haxe_doc>
		</EArrayDecl>
		<ECall a="e:params">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>A call `e(params)`.</haxe_doc>
		</ECall>
		<ENew a="t:params">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>A constructor call `new t(params)`.</haxe_doc>
		</ENew>
		<EUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<x path="Bool"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>An unary operator `op` on `e`:

		* e++ (op = OpIncrement, postFix = true)
		* e-- (op = OpDecrement, postFix = true)
		* ++e (op = OpIncrement, postFix = false)
		* --e (op = OpDecrement, postFix = false)
		* -e (op = OpNeg, postFix = false)
		* !e (op = OpNot, postFix = false)
		* ~e (op = OpNegBits, postFix = false)</haxe_doc>
		</EUnop>
		<EVars a="vars">
			<c path="Array"><t path="haxe.macro.Var"/></c>
			<haxe_doc>Variable declarations.</haxe_doc>
		</EVars>
		<EFunction a="name:f">
			<t path="Null"><c path="String"/></t>
			<t path="haxe.macro.Function"/>
			<haxe_doc>A function declaration.</haxe_doc>
		</EFunction>
		<EBlock a="exprs">
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>A block of expressions `{exprs}`.</haxe_doc>
		</EBlock>
		<EFor a="it:expr">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `for` expression.</haxe_doc>
		</EFor>
		<EIn a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `(e1 in e2)` expression.</haxe_doc>
		</EIn>
		<EIf a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="Null"><t path="haxe.macro.Expr"/></t>
			<haxe_doc>An `if(econd) eif` or `if(econd) eif else eelse` expression.</haxe_doc>
		</EIf>
		<EWhile a="econd:e:normalWhile">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<x path="Bool"/>
			<haxe_doc>Represents a `while` expression.
		When `normalWhile` is `true` it is `while (...)`.
		When `normalWhile` is `false` it is `do {...} while (...)`.</haxe_doc>
		</EWhile>
		<ESwitch a="e:cases:edef">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Case"/></c>
			<t path="Null"><t path="haxe.macro.Expr"/></t>
			<haxe_doc>Represents a `switch` expression with related cases and an optional.
		`default` case if edef != null.</haxe_doc>
		</ESwitch>
		<ETry a="e:catches">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Catch"/></c>
			<haxe_doc>Represents a `try`-expression with related catches.</haxe_doc>
		</ETry>
		<EReturn a="?e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `return` or `return e` expression.</haxe_doc>
		</EReturn>
		<EBreak><haxe_doc>A `break` expression.</haxe_doc></EBreak>
		<EContinue><haxe_doc>A `continue` expression.</haxe_doc></EContinue>
		<EUntyped a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>An `untyped e` source code.</haxe_doc>
		</EUntyped>
		<EThrow a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `throw e` expression.</haxe_doc>
		</EThrow>
		<ECast a="e:t">
			<t path="haxe.macro.Expr"/>
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			<haxe_doc>A `cast e` or `cast (e, m)` expression.</haxe_doc>
		</ECast>
		<EDisplay a="e:isCall">
			<t path="haxe.macro.Expr"/>
			<x path="Bool"/>
			<haxe_doc>Internally used to provide completion.</haxe_doc>
		</EDisplay>
		<EDisplayNew a="t">
			<t path="haxe.macro.TypePath"/>
			<haxe_doc>Internally used to provide completion.</haxe_doc>
		</EDisplayNew>
		<ETernary a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `(econd) ? eif : eelse` expression.</haxe_doc>
		</ETernary>
		<ECheckType a="e:t">
			<t path="haxe.macro.Expr"/>
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>A `(e:t)` expression.</haxe_doc>
		</ECheckType>
		<EMeta a="s:e">
			<t path="haxe.macro.MetadataEntry"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `@m e` expression.</haxe_doc>
		</EMeta>
		<haxe_doc>Represents the kind of a node in the AST.</haxe_doc>
	</enum>
	<enum path="haxe.macro.ComplexType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPath a="p">
			<t path="haxe.macro.TypePath"/>
			<haxe_doc>Represents the type path.</haxe_doc>
		</TPath>
		<TFunction a="args:ret">
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents a function type.
		@see https://haxe.org/manual/types-function.html</haxe_doc>
		</TFunction>
		<TAnonymous a="fields">
			<c path="Array"><t path="haxe.macro.Field"/></c>
			<haxe_doc>Represents an anonymous structure type.
		@see https://haxe.org/manual/types-anonymous-structure.html</haxe_doc>
		</TAnonymous>
		<TParent a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc><![CDATA[Represents parentheses around a type, e.g. the `(Int -> Void)` part in
		`(Int -> Void) -> String`.]]></haxe_doc>
		</TParent>
		<TExtend a="p:fields">
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<c path="Array"><t path="haxe.macro.Field"/></c>
			<haxe_doc><![CDATA[Represents typedef extensions `> Iterable<T>`.
		The array `p` holds the type paths to the given types.
		@see https://haxe.org/manual/type-system-extensions.html]]></haxe_doc>
		</TExtend>
		<TOptional a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents an optional type.</haxe_doc>
		</TOptional>
		<haxe_doc>Represents a type syntax in the AST.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypePath" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<sub>
				<t path="Null"><t path="Null"><c path="String"/></t></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sub is set on module sub-type access:
		`pack.Module.Type` has name = Module, sub = Type, if available.</haxe_doc>
			</sub>
			<params>
				<t path="Null"><c path="Array"><e path="haxe.macro.TypeParam"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Optional parameters of the type path.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>Represents the package of the type path.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type path.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a type path in the AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.TypeParam" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPType a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc></haxe_doc>
		</TPType>
		<TPExpr a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc></haxe_doc>
		</TPExpr>
		<haxe_doc><![CDATA[Represents a concrete type parameter in the AST.

	Haxe allows expressions in concrete type parameters, e.g.
	`new YourType<["hello", "world"]>`. In that case the value is `TPExpr` while
	in the normal case it's `TPType`.]]></haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypeParamDecl" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<params>
				<t path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the type parameter.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
			<meta>
				<t path="Null"><t path="haxe.macro.Metadata"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the type parameter.</haxe_doc>
			</meta>
			<constraints>
				<t path="Null"><c path="Array"><e path="haxe.macro.ComplexType"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional constraints of the type parameter.</haxe_doc>
			</constraints>
		</a>
		<haxe_doc>Represents a type parameter declaration in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Function" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<ret>
				<t path="Null"><e path="haxe.macro.ComplexType"/></t>
				<haxe_doc>The return type-hint of the function, if available.</haxe_doc>
			</ret>
			<params>
				<t path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An optional list of function parameter type declarations.</haxe_doc>
			</params>
			<expr>
				<t path="Null"><t path="haxe.macro.Expr"/></t>
				<haxe_doc>The expression of the function body, if available.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><t path="haxe.macro.FunctionArg"/></c>
				<haxe_doc>A list of function arguments.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<value>
				<t path="Null"><t path="Null"><t path="haxe.macro.Expr"/></t></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional value of the function argument, if available.</haxe_doc>
			</value>
			<type>
				<t path="Null"><e path="haxe.macro.ComplexType"/></t>
				<haxe_doc>The type-hint of the function argument, if available.</haxe_doc>
			</type>
			<opt>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the function argument is optional.</haxe_doc>
			</opt>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the function argument.</haxe_doc>
			</name>
			<meta>
				<t path="Null"><t path="haxe.macro.Metadata"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the function argument.</haxe_doc>
			</meta>
		</a>
		<haxe_doc>Represents a function argument in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetadataEntry" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the metadata entry.</haxe_doc>
			</pos>
			<params>
				<t path="Null"><c path="Array"><t path="haxe.macro.Expr"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the metadata entry.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the metadata entry.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a metadata entry in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Metadata" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
		<haxe_doc>Represents metadata in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Field" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the field.</haxe_doc>
			</pos>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</name>
			<meta>
				<t path="Null"><t path="haxe.macro.Metadata"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldType"/>
				<haxe_doc>The kind of the field.</haxe_doc>
			</kind>
			<doc>
				<t path="Null"><t path="Null"><c path="String"/></t></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the field, if available. If the field has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
			<access>
				<t path="Null"><c path="Array"><e path="haxe.macro.Access"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The access modifiers of the field. By default fields have private access.
		@see https://haxe.org/manual/class-field-access-modifier.html</haxe_doc>
			</access>
		</a>
		<haxe_doc>Represents a field in the AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.Access" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<APublic><haxe_doc>Public access modifier, grants access from anywhere.
		@see https://haxe.org/manual/class-field-visibility.html</haxe_doc></APublic>
		<APrivate><haxe_doc>Private access modifier, grants access to class and its sub-classes
		only.
		@see https://haxe.org/manual/class-field-visibility.html</haxe_doc></APrivate>
		<AStatic><haxe_doc>Static access modifier.</haxe_doc></AStatic>
		<AOverride><haxe_doc>Override access modifier.
		@see https://haxe.org/manual/class-field-override.html</haxe_doc></AOverride>
		<ADynamic><haxe_doc>Dynamic (re-)bindable access modifier.
		@see https://haxe.org/manual/class-field-dynamic.html</haxe_doc></ADynamic>
		<AInline><haxe_doc>Inline access modifier. Allows expressions to be directly inserted in
		place of calls to them.
		@see https://haxe.org/manual/class-field-inline.html</haxe_doc></AInline>
		<AMacro><haxe_doc>Macros access modifier. Allows expression macro functions. These are
		normal functions which are executed as soon as they are typed.</haxe_doc></AMacro>
		<haxe_doc>Represents an access modifier.
	@see https://haxe.org/manual/class-field-access-modifier.html</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.FieldType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<FVar a="t:?e">
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Represents a variable field type.</haxe_doc>
		</FVar>
		<FFun a="f">
			<t path="haxe.macro.Function"/>
			<haxe_doc>Represents a function field type.</haxe_doc>
		</FFun>
		<FProp a="get:set:?t:?e">
			<c path="String"/>
			<c path="String"/>
			<e path="haxe.macro.ComplexType"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Represents a property with getter and setter field type.</haxe_doc>
		</FProp>
		<haxe_doc>Represents the field type in the AST.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypeDefinition" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position to the type definition.</haxe_doc>
			</pos>
			<params>
				<t path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The parameter type declarations of the type definition.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type definition.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type definition.</haxe_doc>
			</name>
			<meta>
				<t path="Null"><t path="haxe.macro.Metadata"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the type definition.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.TypeDefKind"/>
				<haxe_doc>The kind of the type definition.</haxe_doc>
			</kind>
			<isExtern>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<fields>
				<c path="Array"><t path="haxe.macro.Field"/></c>
				<haxe_doc>The fields of the type definition.</haxe_doc>
			</fields>
		</a>
		<haxe_doc>Represents a type definition.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.TypeDefKind" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TDEnum><haxe_doc>Represents an enum kind.</haxe_doc></TDEnum>
		<TDStructure><haxe_doc>Represents a structure kind.</haxe_doc></TDStructure>
		<TDClass a="?superClass:?interfaces:?isInterface">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<x path="Bool"/>
			<haxe_doc>Represents a class kind.</haxe_doc>
		</TDClass>
		<TDAlias a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents an alias/typedef kind.</haxe_doc>
		</TDAlias>
		<TDAbstract a="tthis:?from:?to">
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<haxe_doc>Represents an abstract kind.</haxe_doc>
		</TDAbstract>
		<haxe_doc>Represents a type definition kind.</haxe_doc>
	</enum>
	<class path="haxe.macro.Error" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<message public="1">
			<c path="String"/>
			<haxe_doc>The error message.</haxe_doc>
		</message>
		<pos public="1">
			<t path="haxe.macro.Position"/>
			<haxe_doc>The position of the error.</haxe_doc>
		</pos>
		<toString set="method" line="898">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the string representation of the error.</haxe_doc>
		</toString>
		<new public="1" set="method" line="890">
			<f a="m:p">
				<c path="String"/>
				<t path="haxe.macro.Position"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Instantiates an error with given message and position.</haxe_doc>
		</new>
		<haxe_doc>This error can be used to handle or produce compilation errors in macros.</haxe_doc>
	</class>
	<enum path="haxe.macro.ImportMode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<INormal><haxe_doc>Represents a default import `import c`.</haxe_doc></INormal>
		<IAsName a="alias">
			<c path="String"/>
			<haxe_doc>Represents the alias import `import c as alias`.</haxe_doc>
		</IAsName>
		<IAll><haxe_doc>Represents the wildcard import `import *`.</haxe_doc></IAll>
		<haxe_doc>Represents the import mode.
	@see https://haxe.org/manual/type-system-import.html</haxe_doc>
	</enum>
	<typedef path="haxe.macro.ImportExpr" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<path>
				<c path="Array"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
</a></c>
				<haxe_doc>The path to the import expression.</haxe_doc>
			</path>
			<mode>
				<e path="haxe.macro.ImportMode"/>
				<haxe_doc>The mode of the import expression.</haxe_doc>
			</mode>
		</a>
		<haxe_doc>Represents the import expression.</haxe_doc>
	</typedef>
	<class path="haxe.macro.ExprTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/ExprTools.hx">
		<toString public="1" set="method" line="44" static="1">
			<f a="e">
				<t path="haxe.macro.Expr"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts expression `e` to a human-readable String representation.

		The result is guaranteed to be valid Haxe code, but there may be
		differences from the original lexical syntax.</haxe_doc>
		</toString>
		<iter public="1" set="method" line="71" static="1">
			<f a="e:f">
				<t path="haxe.macro.Expr"/>
				<f a="">
					<t path="haxe.macro.Expr"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls function `f` on each sub-expression of `e`.

		If `e` has no sub-expressions, this operation has no effect.

		Otherwise `f` is called once per sub-expression of `e`, with the
		sub-expression as argument. These calls are done in order of the
		sub-expression declarations.

		This method does not call itself recursively. It should instead be used
		in a recursive function which handles the expression nodes of interest.

		Usage example:
		```haxe
		function findStrings(e:Expr) {
			switch(e.expr) {
				case EConst(CString(s)):
					// handle s
				case _:
					ExprTools.iter(e, findStrings);
			}
		}
		```</haxe_doc>
		</iter>
		<map public="1" set="method" line="158" static="1">
			<f a="e:f">
				<t path="haxe.macro.Expr"/>
				<f a="">
					<t path="haxe.macro.Expr"/>
					<t path="haxe.macro.Expr"/>
				</f>
				<t path="haxe.macro.Expr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of `e` by calling `f` on each of them.

		If `e` has no sub-expressions, this operation returns `e` unchanged.

		Otherwise `f` is called once per sub-expression of `e`, with the
		sub-expression as argument. These calls are done in order of the
		sub-expression declarations.

		This method does not call itself recursively. It should instead be used
		in a recursive function which handles the expression nodes of interest.

		Usage example:
		```haxe
		function capitalizeStrings(e:Expr) {
			return switch(e.expr) {
				case EConst(CString(s)):
					{ expr: EConst(CString(s.toUpperCase())), pos: e.pos };
				case _:
					ExprTools.map(e, capitalizeStrings);
			}
		}
		```haxe</haxe_doc>
		</map>
		<getValue public="1" set="method" line="233" static="1">
			<f a="e">
				<t path="haxe.macro.Expr"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Returns the value `e` represents.

		Supported expressions are:

		 - `Int`, `Float` and `String` literals
		 - identifiers `true`, `false` and `null`
		 - structure declarations if all their fields are values
		 - array declarations if all their elements are values
		 - unary operators `-`, `!` and `~` if the operand is a value
		 - binary operators except `=>`, `...` and assignments

		Parentheses, metadata and the `untyped` keyword are ignored.

		If any non-value is encountered, an exception of type `String` is
		thrown.

		If `e` is null, the result is unspecified.]]></haxe_doc>
		</getValue>
		<opt get="inline" set="null" line="293" static="1"><f a="e:f">
	<t path="Null"><t path="haxe.macro.Expr"/></t>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<t path="haxe.macro.Expr"/>
	</f>
	<t path="haxe.macro.Expr"/>
</f></opt>
		<opt2 get="inline" set="null" line="296" static="1"><f a="e:f">
	<t path="Null"><t path="haxe.macro.Expr"/></t>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></opt2>
		<haxe_doc>This class provides some utility methods to work with expressions. It is
	best used through 'using haxe.macro.ExprTools' syntax and then provides
	additional methods on haxe.macro.Expr instances.

	While mainly intended to be used in macros, it works in non-macro code as
	well.</haxe_doc>
	</class>
	<class path="haxe.macro.ExprArrayTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/ExprTools.hx" module="haxe.macro.ExprTools">
		<map public="1" set="method" line="305" static="1"><f a="el:f">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<t path="haxe.macro.Expr"/>
	</f>
	<c path="Array"><t path="haxe.macro.Expr"/></c>
</f></map>
		<iter public="1" set="method" line="312" static="1"><f a="el:f">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></iter>
		<haxe_doc>This class provides functions on expression arrays for convenience. For a
	detailed reference on each method, see the documentation of ExprTools.</haxe_doc>
	</class>
	<class path="haxe.macro.Format" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Format.hx"><haxe_doc>The actual macro implemented for Std.format</haxe_doc></class>
	<typedef path="haxe.macro.JSGenApi" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/JSGenApi.hx">
		<a>
			<types>
				<c path="Array"><e path="haxe.macro.Type"/></c>
				<haxe_doc>all the types that were compiled by Haxe</haxe_doc>
			</types>
			<setTypeAccessor set="method">
				<f a="callb">
					<f a="">
						<e path="haxe.macro.Type"/>
						<c path="String"/>
					</f>
					<x path="Void"/>
				</f>
				<haxe_doc>define the JS code that gets generated when a class or enum is accessed in a typed expression</haxe_doc>
			</setTypeAccessor>
			<setCurrentClass set="method">
				<f a="c">
					<t path="haxe.macro.ClassType"/>
					<x path="Void"/>
				</f>
				<haxe_doc>select the current classe</haxe_doc>
			</setCurrentClass>
			<quoteString set="method">
				<f a="s">
					<c path="String"/>
					<c path="String"/>
				</f>
				<haxe_doc>quote and escape the given string constant</haxe_doc>
			</quoteString>
			<outputFile>
				<c path="String"/>
				<haxe_doc>the file in which the JS code can be generated</haxe_doc>
			</outputFile>
			<main>
				<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
				<haxe_doc>the main call expression, if a -main class is defined</haxe_doc>
			</main>
			<isKeyword set="method">
				<f a="ident">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>tells if the given identifier is a JS keyword</haxe_doc>
			</isKeyword>
			<hasFeature set="method">
				<f a="f">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>check if a feature is used</haxe_doc>
			</hasFeature>
			<generateValue set="method">
				<f a="e">
					<t path="haxe.macro.TypedExpr"/>
					<c path="String"/>
				</f>
				<haxe_doc>generate the JS code for a given typed expression-value</haxe_doc>
			</generateValue>
			<generateStatement set="method">
				<f a="e">
					<t path="haxe.macro.TypedExpr"/>
					<c path="String"/>
				</f>
				<haxe_doc>generate the JS code for any given typed expression</haxe_doc>
			</generateStatement>
			<buildMetaData set="method">
				<f a="t">
					<t path="haxe.macro.BaseType"/>
					<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
				</f>
				<haxe_doc>create the metadata expression for the given type</haxe_doc>
			</buildMetaData>
			<addFeature set="method">
				<f a="f">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>add a feature</haxe_doc>
			</addFeature>
		</a>
		<haxe_doc>This is the api that is passed to the custom JS generator.</haxe_doc>
	</typedef>
	<class path="haxe.macro.MacroStringTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/MacroStringTools.hx">
		<toFieldExpr public="1" set="method" line="85" static="1">
			<f a="sl">
				<c path="Array"><c path="String"/></c>
				<t path="haxe.macro.Expr"/>
			</f>
			<haxe_doc>Converts an array of Strings `sl` to a field expression.

		If `sl` has no elements, the result is null.

		If `sl` has one element, the result is `EConst(CIdent(sl[0])`.

		Otherwise the result is a chain of `EField` nodes.

		If `sl` is null, the result is unspecified.</haxe_doc>
		</toFieldExpr>
		<toDotPath public="1" set="method" line="100" static="1">
			<f a="pack:name">
				<c path="Array"><c path="String"/></c>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts a path given by package `pack` and name `name` to a `String`
		separated by dots.

		If `pack` has no elements, the result is `name`.

		If `pack` is null, the result is unspecified.

		Otherwise the elements of `pack` are joined with a separating dot, with
		an appended dot separating the result from `name`.</haxe_doc>
		</toDotPath>
		<toComplex public="1" set="method" line="104" static="1"><f a="path">
	<c path="String"/>
	<e path="haxe.macro.ComplexType"/>
</f></toComplex>
		<haxe_doc>This class provides some utility methods to work with strings in macro
	context.</haxe_doc>
	</class>
	<class path="haxe.macro.MacroType" params="Const" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/MacroType.hx" extern="1"><haxe_doc><![CDATA[This type is meant to be used to generate custom types using a macro.
	For instance by doing MacroType<[my.Class.myMacro(55)]>]]></haxe_doc></class>
	<class path="haxe.macro.PositionTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/PositionTools.hx">
		<here public="1" set="method" static="1">
			<f a=""><t path="haxe.macro.Position"/></f>
			<haxe_doc>Returns the `Position` where the caller of `here` is.</haxe_doc>
		</here>
		<getInfos public="1" set="method" line="43" static="1">
			<f a="p">
				<t path="haxe.macro.Position"/>
				<a>
					<min><x path="Int"/></min>
					<max><x path="Int"/></max>
					<file><c path="String"/></file>
				</a>
			</f>
			<haxe_doc>Like `Context.getPosInfos`, except this method is available on all platforms.</haxe_doc>
		</getInfos>
		<make public="1" set="method" line="54" static="1">
			<f a="inf">
				<a>
					<min><x path="Int"/></min>
					<max><x path="Int"/></max>
					<file><c path="String"/></file>
				</a>
				<t path="haxe.macro.Position"/>
			</f>
			<haxe_doc>Like `Context.makePosition`, except this method is available on all platforms.</haxe_doc>
		</make>
	</class>
	<class path="haxe.macro.Printer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Printer.hx">
		<tabs><c path="String"/></tabs>
		<tabString><c path="String"/></tabString>
		<printUnop public="1" set="method" line="42"><f a="op">
	<e path="haxe.macro.Unop"/>
	<c path="String"/>
</f></printUnop>
		<printBinop public="1" set="method" line="50"><f a="op">
	<e path="haxe.macro.Binop"/>
	<c path="String"/>
</f></printBinop>
		<escapeString set="method" line="78"><f a="s:delim">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></escapeString>
		<printFormatString public="1" set="method" line="82"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></printFormatString>
		<printString public="1" set="method" line="86"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></printString>
		<printConstant public="1" set="method" line="90"><f a="c">
	<e path="haxe.macro.Constant"/>
	<c path="String"/>
</f></printConstant>
		<printTypeParam public="1" set="method" line="99"><f a="param">
	<e path="haxe.macro.TypeParam"/>
	<c path="String"/>
</f></printTypeParam>
		<printTypePath public="1" set="method" line="104"><f a="tp">
	<t path="haxe.macro.TypePath"/>
	<c path="String"/>
</f></printTypePath>
		<printComplexType public="1" set="method" line="111"><f a="ct">
	<e path="haxe.macro.ComplexType"/>
	<c path="String"/>
</f></printComplexType>
		<printMetadata public="1" set="method" line="125"><f a="meta">
	<t path="haxe.macro.MetadataEntry"/>
	<c path="String"/>
</f></printMetadata>
		<printAccess public="1" set="method" line="129"><f a="access">
	<e path="haxe.macro.Access"/>
	<c path="String"/>
</f></printAccess>
		<printField public="1" set="method" line="139"><f a="field">
	<t path="haxe.macro.Field"/>
	<c path="String"/>
</f></printField>
		<printTypeParamDecl public="1" set="method" line="149"><f a="tpd">
	<t path="haxe.macro.TypeParamDecl"/>
	<c path="String"/>
</f></printTypeParamDecl>
		<printFunctionArg public="1" set="method" line="154"><f a="arg">
	<t path="haxe.macro.FunctionArg"/>
	<c path="String"/>
</f></printFunctionArg>
		<printFunction public="1" set="method" line="160"><f a="func">
	<t path="haxe.macro.Function"/>
	<c path="String"/>
</f></printFunction>
		<printVar public="1" set="method" line="166"><f a="v">
	<t path="haxe.macro.Var"/>
	<c path="String"/>
</f></printVar>
		<printExpr public="1" set="method" line="172"><f a="e">
	<t path="haxe.macro.Expr"/>
	<c path="String"/>
</f></printExpr>
		<printExprs public="1" set="method" line="234"><f a="el:sep">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<c path="String"/>
	<c path="String"/>
</f></printExprs>
		<printExtension set="method" line="238"><f a="tpl:fields">
	<c path="Array"><t path="haxe.macro.TypePath"/></c>
	<c path="Array"><t path="haxe.macro.Field"/></c>
	<c path="String"/>
</f></printExtension>
		<printStructure set="method" line="243"><f a="fields">
	<c path="Array"><t path="haxe.macro.Field"/></c>
	<c path="String"/>
</f></printStructure>
		<printTypeDefinition public="1" set="method" line="248">
			<f a="t:?printPackage" v=":true">
				<t path="haxe.macro.TypeDefinition"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ printPackage : true }</e></m></meta>
		</printTypeDefinition>
		<printFieldWithDelimiter set="method" line="307"><f a="f">
	<t path="haxe.macro.Field"/>
	<c path="String"/>
</f></printFieldWithDelimiter>
		<opt params="T" set="method" line="318">
			<f a="v:f:?prefix" v="::&quot;&quot;">
				<c path="opt.T"/>
				<f a="">
					<c path="opt.T"/>
					<c path="String"/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ prefix : "" }</e></m></meta>
		</opt>
		<new public="1" set="method" line="37">
			<f a="?tabString" v="&quot;\t&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ tabString : "\t" }</e></m></meta>
		</new>
		<haxe_doc>This class provides some utility methods to convert elements from the
	macro context to a human-readable String representation.</haxe_doc>
	</class>
	<typedef path="haxe.macro.TExprTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.ExprTools"/>
		<haxe_doc><![CDATA[This class can be added via `using haxe.macro.Tools` in order to enable
	`using` functionality on these macro tool classes:

	- `haxe.macro.ExprTools`
	- `haxe.macro.ComplexTypeTools`
	- `haxe.macro.TypeTools`
	- `haxe.macro.MacroStringTools`
	- `haxe.macro.TypedExprTools`
	- `haxe.macro.PositionTools`
  
  @see <https://haxe.org/manual/lf-static-extension.html>]]></haxe_doc>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TComplexTypeTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.ComplexTypeTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TTypeTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.TypeTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TMacroStringTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.MacroStringTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TTypedExprTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.TypedExprTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TPositionTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.PositionTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.Ref" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<toString set="method"><f a=""><c path="String"/></f></toString>
			<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
		</a>
		<haxe_doc>Represents a reference to internal compiler structure. It exists to avoid
	expensive encoding if it is not required and to ensure that physical
	equality remains intact.

	A structure is only encoded when user requests it through `ref.get()`.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.Type" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx">
		<TMono a="t">
			<t path="haxe.macro.Ref"><t path="Null"><e path="haxe.macro.Type"/></t></t>
			<haxe_doc>Represents a monomorph.

		@see https://haxe.org/manual/types-monomorph.html</haxe_doc>
		</TMono>
		<TEnum a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents an enum instance.

		@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		</TEnum>
		<TInst a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents a class instance.

		@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		</TInst>
		<TType a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents a typedef.

		@see https://haxe.org/manual/type-system-typedef.html</haxe_doc>
		</TType>
		<TFun a="args:ret">
			<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<e path="haxe.macro.Type"/>
			<haxe_doc>Represents a function type.

		@see https://haxe.org/manual/types-function.html</haxe_doc>
		</TFun>
		<TAnonymous a="a">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AnonType"/></t>
			<haxe_doc>Represents an anonymous structure type.

		@see https://haxe.org/manual/types-anonymous-structure.html</haxe_doc>
		</TAnonymous>
		<TDynamic a="t">
			<t path="Null"><e path="haxe.macro.Type"/></t>
			<haxe_doc>Represents Dynamic.

		@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		</TDynamic>
		<TLazy a="f">
			<f a=""><e path="haxe.macro.Type"/></f>
			<haxe_doc>Used internally by the compiler to delay some typing.</haxe_doc>
		</TLazy>
		<TAbstract a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents an abstract type.

		@see https://haxe.org/manual/types-abstract.html</haxe_doc>
		</TAbstract>
		<haxe_doc>Represents a type.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.AnonType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<status>
				<e path="haxe.macro.AnonStatus"/>
				<haxe_doc>The status/kind of the structure.</haxe_doc>
			</status>
			<fields>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The class fields of the structure.</haxe_doc>
			</fields>
		</a>
		<haxe_doc>Represents information for anonymous structure types.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.AnonStatus" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<AClosed><haxe_doc>A closed structure is considered complete. That is, no further fields
		can be added to it.</haxe_doc></AClosed>
		<AOpened><haxe_doc>An open structure allows having additional fields added to it, which is
		used during type inference. It is closed upon unification.</haxe_doc></AOpened>
		<AConst><haxe_doc>A const structure is one that appears directly in syntax. It cannot be
		assigned to a smaller structure type (that is, it does not allow
		structural sub-typing).</haxe_doc></AConst>
		<AExtend a="tl">
			<t path="haxe.macro.Ref"><c path="Array"><e path="haxe.macro.Type"/></c></t>
			<haxe_doc>Represents a structure which extends one or multiple structures defined
		in `tl`.

		@see https://haxe.org/manual/type-system-extensions.html</haxe_doc>
		</AExtend>
		<AClassStatics a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<haxe_doc>A structure that represents the static fields of a class.</haxe_doc>
		</AClassStatics>
		<AEnumStatics a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<haxe_doc>A structure that represents the constructors of an enum.</haxe_doc>
		</AEnumStatics>
		<AAbstractStatics a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<haxe_doc>A structure that represents the static fields of an abstract.</haxe_doc>
		</AAbstractStatics>
		<haxe_doc>Represents the kind of the anonymous structure type.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypeParameter" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the type parameter. It is guaranteed to be a `TInst` with a
		`KTypeParameter` kind.</haxe_doc>
			</t>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents the declaration of type parameters.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassField" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the class field.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the class field.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the class field.</haxe_doc>
			</params>
			<overloads>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The overload fields of the class field.</haxe_doc>
			</overloads>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the class field.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the class field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldKind"/>
				<haxe_doc>The class field kind.</haxe_doc>
			</kind>
			<isPublic>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is public.</haxe_doc>
			</isPublic>
			<expr set="method">
				<f a=""><t path="Null"><t path="haxe.macro.TypedExpr"/></t></f>
				<haxe_doc>Returns the typed expression of the class field.</haxe_doc>
			</expr>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a class field.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumField" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the enum constructor.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the enum constructor.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the enum constructor.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the enum constructor.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the enum constructor.</haxe_doc>
			</meta>
			<index>
				<x path="Int"/>
				<haxe_doc>The index of the enum constructor, i.e. in which position it appears
		in the syntax.</haxe_doc>
			</index>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the enum constructor.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents an enum constructor.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.ClassKind" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<KNormal><haxe_doc>A normal class.</haxe_doc></KNormal>
		<KTypeParameter a="constraints">
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>A type parameter class with a set of constraints.</haxe_doc>
		</KTypeParameter>
		<KExtension a="cl:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>A structurally extended class.

		@deprecated</haxe_doc>
		</KExtension>
		<KExpr a="expr">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A special kind of class to encode expressions into type parameters.</haxe_doc>
		</KExpr>
		<KGeneric><haxe_doc>A `@:generic` base class.</haxe_doc></KGeneric>
		<KGenericInstance a="cl:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>A concrete `@:generic` instance, referencing the original class and the
		applied type parameters.</haxe_doc>
		</KGenericInstance>
		<KMacroType><haxe_doc>A special class for `haxe.macro.MacroType`.

		@deprecated</haxe_doc></KMacroType>
		<KAbstractImpl a="a">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<haxe_doc>An implementation class of an abstract, i.e. where all its run-time code
		is.</haxe_doc>
		</KAbstractImpl>
		<KGenericBuild><haxe_doc>A `@:genericBuild` class</haxe_doc></KGenericBuild>
		<haxe_doc>Represents the kind of a class.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.BaseType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The information that all types (`ClassType`, `EnumType`, `DefType`,
	`AbstractType`) have in common.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<superClass>
				<t path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></t>
				<haxe_doc>The parent class and its type parameters, if available.</haxe_doc>
			</superClass>
			<statics>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The static fields of the class.</haxe_doc>
			</statics>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<overrides>
				<c path="Array"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></c>
				<haxe_doc>The list of fields that have override status.</haxe_doc>
			</overrides>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.ClassKind"/>
				<haxe_doc>The kind of the class.</haxe_doc>
			</kind>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isInterface>
				<x path="Bool"/>
				<haxe_doc>If true the type is an interface, otherwise it is a class.</haxe_doc>
			</isInterface>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<interfaces>
				<c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c>
				<haxe_doc>The implemented interfaces and their type parameters.</haxe_doc>
			</interfaces>
			<init>
				<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
				<haxe_doc>The `__init__` expression of the class, if available.</haxe_doc>
			</init>
			<fields>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The member fields of the class.</haxe_doc>
			</fields>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructor>
				<t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></t>
				<haxe_doc>The constructor of the class, if available.</haxe_doc>
			</constructor>
		</a>
		<haxe_doc>Represents a class type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<names>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>An ordered list of enum constructor names.</haxe_doc>
			</names>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructs>
				<x path="Map">
					<c path="String"/>
					<t path="haxe.macro.EnumField"/>
				</x>
				<haxe_doc>The available enum constructors.</haxe_doc>
			</constructs>
		</a>
		<haxe_doc>Represents an enum type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.DefType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The target type of the typedef.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a typedef.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.AbstractType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<unops>
				<c path="Array"><a>
	<postFix><x path="Bool"/></postFix>
	<op><e path="haxe.macro.Unop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined unary operators of the abstract.</haxe_doc>
			</unops>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The underlying type of the abstract.</haxe_doc>
			</type>
			<to>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c>
				<haxe_doc>The available implicit to-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</to>
			<resolve>
				<t path="Null"><t path="haxe.macro.ClassField"/></t>
				<meta><m n=":require"><e><![CDATA[haxe_ver >= 3.3]]></e></m></meta>
				<haxe_doc>The method used for resolving unknown field access, if available.</haxe_doc>
			</resolve>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<impl>
				<t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
				<haxe_doc>The implementation class of the abstract, if available.</haxe_doc>
			</impl>
			<from>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c>
				<haxe_doc>The available implicit from-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</from>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<binops>
				<c path="Array"><a>
	<op><e path="haxe.macro.Binop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined binary operators of the abstract.</haxe_doc>
			</binops>
			<array>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The defined array-access fields of the abstract.</haxe_doc>
			</array>
		</a>
		<haxe_doc>Represents an abstract type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetaAccess" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<remove set="method">
				<f a="name">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Removes all `name` metadata entries from the origin of `this`
		MetaAccess.

		This method might clear several metadata entries of the same name.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `remove` has no effect on that array.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</remove>
			<has set="method">
				<f a="name">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>Tells if the origin of `this` MetaAccess has a `name` metadata entry.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</has>
			<get set="method">
				<f a=""><t path="haxe.macro.Metadata"/></f>
				<haxe_doc>Return the wrapped `Metadata` array.

		Modifying this array has no effect on the origin of `this` MetaAccess.
		The `add` and `remove` methods can be used for that.</haxe_doc>
			</get>
			<extract set="method">
				<f a="name">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
				</f>
				<haxe_doc>Extract metadata entries by given `name`.

		If there's no metadata with such name, empty array `[]` is returned.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</extract>
			<add set="method">
				<f a="name:params:pos">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.Expr"/></c>
					<t path="haxe.macro.Position"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Adds the metadata specified by `name`, `params` and `pos` to the origin
		of `this` MetaAccess.

		Metadata names are not unique during compilation, so this method never
		overwrites a previous metadata.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `add` has no effect on that array.

		If any argument is null, compilation fails with an error.</haxe_doc>
			</add>
		</a>
		<haxe_doc>MetaAccess is a wrapper for the `Metadata` array. It can be used to add
	metadata to and remove metadata from its origin.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.FieldKind" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<FVar a="read:write">
			<e path="haxe.macro.VarAccess"/>
			<e path="haxe.macro.VarAccess"/>
			<haxe_doc>A variable of property, depending on the `read` and `write` values.</haxe_doc>
		</FVar>
		<FMethod a="k">
			<e path="haxe.macro.MethodKind"/>
			<haxe_doc>A method</haxe_doc>
		</FMethod>
		<haxe_doc>Represents a field kind.</haxe_doc>
	</enum>
	<enum path="haxe.macro.VarAccess" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<AccNormal><haxe_doc>Normal access (`default`).</haxe_doc></AccNormal>
		<AccNo><haxe_doc>Private access (`null`).</haxe_doc></AccNo>
		<AccNever><haxe_doc>No access (`never`).</haxe_doc></AccNever>
		<AccResolve><haxe_doc>Unused.</haxe_doc></AccResolve>
		<AccCall><haxe_doc>Access through accessor function (`get`, `set`, `dynamic`).</haxe_doc></AccCall>
		<AccInline><haxe_doc>Inline access (`inline`).</haxe_doc></AccInline>
		<AccRequire a="r:?msg">
			<c path="String"/>
			<c path="String"/>
			<haxe_doc>Failed access due to a `@:require` metadata.</haxe_doc>
		</AccRequire>
		<haxe_doc>Represents the variable accessor.</haxe_doc>
	</enum>
	<enum path="haxe.macro.MethodKind" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<MethNormal><haxe_doc>A normal method.</haxe_doc></MethNormal>
		<MethInline><haxe_doc>An inline method.

		@see https://haxe.org/manual/class-field-inline.html</haxe_doc></MethInline>
		<MethDynamic><haxe_doc>A dynamic, rebindable method.

		@see https://haxe.org/manual/class-field-dynamic.html</haxe_doc></MethDynamic>
		<MethMacro><haxe_doc>A macro method.</haxe_doc></MethMacro>
		<haxe_doc>Represents the method kind.</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.TConstant" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TInt a="i">
			<x path="Int"/>
			<haxe_doc>An `Int` literal.</haxe_doc>
		</TInt>
		<TFloat a="s">
			<c path="String"/>
			<haxe_doc>A `Float` literal, represented as String to avoid precision loss.</haxe_doc>
		</TFloat>
		<TString a="s">
			<c path="String"/>
			<haxe_doc>A `String` literal.</haxe_doc>
		</TString>
		<TBool a="b">
			<x path="Bool"/>
			<haxe_doc>A `Bool` literal.</haxe_doc>
		</TBool>
		<TNull><haxe_doc>The constant `null`.</haxe_doc></TNull>
		<TThis><haxe_doc>The constant `this`.</haxe_doc></TThis>
		<TSuper><haxe_doc>The constant `super`.</haxe_doc></TSuper>
		<haxe_doc>Represents typed constant.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TVar" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t set="null">
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the variable.</haxe_doc>
			</t>
			<name set="null">
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<meta set="null">
				<t path="Null"><t path="haxe.macro.MetaAccess"/></t>
				<haxe_doc>The metadata of the variable.</haxe_doc>
			</meta>
			<id set="null">
				<x path="Int"/>
				<haxe_doc>The unique ID of the variable.</haxe_doc>
			</id>
			<extra set="null">
				<t path="Null"><a>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<expr><t path="Null"><t path="haxe.macro.TypedExpr"/></t></expr>
</a></t>
				<haxe_doc>Special information which is internally used to keep track of closure.
		information</haxe_doc>
			</extra>
			<capture set="null">
				<x path="Bool"/>
				<haxe_doc>Whether or not the variable has been captured by a closure.</haxe_doc>
			</capture>
		</a>
		<haxe_doc>Represents a variable in the typed AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.ModuleType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TClassDecl a="c">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<haxe_doc>A class.</haxe_doc>
		</TClassDecl>
		<TEnumDecl a="e">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<haxe_doc>An enum.</haxe_doc>
		</TEnumDecl>
		<TTypeDecl a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t>
			<haxe_doc>A typedef.</haxe_doc>
		</TTypeDecl>
		<TAbstract a="a">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<haxe_doc>An abstract.</haxe_doc>
		</TAbstract>
		<haxe_doc>Represents a module type. These are the types that can be declared in a Haxe
	module and which are passed to the generators (except `TTypeDecl`).</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TFunc" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The return type of the function.</haxe_doc>
			</t>
			<expr>
				<t path="haxe.macro.TypedExpr"/>
				<haxe_doc>The expression of the function body.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><a>
	<value><t path="Null"><e path="haxe.macro.TConstant"/></t></value>
	<v><t path="haxe.macro.TVar"/></v>
</a></c>
				<haxe_doc>A list of function arguments identified by an argument variable `v` and
		an optional initialization `value`.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the typed AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.FieldAccess" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<FInstance a="c:params:cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Access of field `cf` on a class instance `c` with type parameters
		`params`.</haxe_doc>
		</FInstance>
		<FStatic a="c:cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Static access of a field `cf` on a class `c`.</haxe_doc>
		</FStatic>
		<FAnon a="cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Access of field `cf` on an anonymous structure.</haxe_doc>
		</FAnon>
		<FDynamic a="s">
			<c path="String"/>
			<haxe_doc>Dynamic field access of a field named `s`.</haxe_doc>
		</FDynamic>
		<FClosure a="c:cf">
			<t path="Null"><a>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
	<c><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></c>
</a></t>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Closure field access of field `cf` on a class instance `c` with type
		parameters `params`.</haxe_doc>
		</FClosure>
		<FEnum a="e:ef">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<t path="haxe.macro.EnumField"/>
			<haxe_doc>Field access to an enum constructor `ef` of enum `e`.</haxe_doc>
		</FEnum>
		<haxe_doc>Represents the kind of field access in the typed AST.</haxe_doc>
	</enum>
	<enum path="haxe.macro.TypedExprDef" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TConst a="c">
			<e path="haxe.macro.TConstant"/>
			<haxe_doc>A constant.</haxe_doc>
		</TConst>
		<TLocal a="v">
			<t path="haxe.macro.TVar"/>
			<haxe_doc>Reference to a local variable `v`.</haxe_doc>
		</TLocal>
		<TArray a="e1:e2">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Array access `e1[e2]`.</haxe_doc>
		</TArray>
		<TBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Binary operator `e1 op e2`.</haxe_doc>
		</TBinop>
		<TField a="e:fa">
			<t path="haxe.macro.TypedExpr"/>
			<e path="haxe.macro.FieldAccess"/>
			<haxe_doc>Field access on `e` according to `fa`.</haxe_doc>
		</TField>
		<TTypeExpr a="m">
			<e path="haxe.macro.ModuleType"/>
			<haxe_doc>Reference to a module type `m`.</haxe_doc>
		</TTypeExpr>
		<TParenthesis a="e">
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Parentheses `(e)`.</haxe_doc>
		</TParenthesis>
		<TObjectDecl a="fields">
			<c path="Array"><a>
	<name><c path="String"/></name>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
			<haxe_doc>An object declaration.</haxe_doc>
		</TObjectDecl>
		<TArrayDecl a="el">
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc>An array declaration `[el]`.</haxe_doc>
		</TArrayDecl>
		<TCall a="e:el">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc>A call `e(el)`.</haxe_doc>
		</TCall>
		<TNew a="c:params:el">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc><![CDATA[A constructor call `new c<params>(el)`.]]></haxe_doc>
		</TNew>
		<TUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<x path="Bool"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>An unary operator `op` on `e`:

		* e++ (op = OpIncrement, postFix = true)
		* e-- (op = OpDecrement, postFix = true)
		* ++e (op = OpIncrement, postFix = false)
		* --e (op = OpDecrement, postFix = false)
		* -e (op = OpNeg, postFix = false)
		* !e (op = OpNot, postFix = false)
		* ~e (op = OpNegBits, postFix = false)</haxe_doc>
		</TUnop>
		<TFunction a="tfunc">
			<t path="haxe.macro.TFunc"/>
			<haxe_doc>A function declaration.</haxe_doc>
		</TFunction>
		<TVar a="v:expr">
			<t path="haxe.macro.TVar"/>
			<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
			<haxe_doc>A variable declaration `var v` or `var v = expr`.</haxe_doc>
		</TVar>
		<TBlock a="el">
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc>A block declaration `{el}`.</haxe_doc>
		</TBlock>
		<TFor a="v:e1:e2">
			<t path="haxe.macro.TVar"/>
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>A `for` expression.</haxe_doc>
		</TFor>
		<TIf a="econd:eif:eelse">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
			<haxe_doc>An `if(econd) eif` or `if(econd) eif else eelse` expression.</haxe_doc>
		</TIf>
		<TWhile a="econd:e:normalWhile">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<x path="Bool"/>
			<haxe_doc>Represents a `while` expression.
		When `normalWhile` is `true` it is `while (...)`.
		When `normalWhile` is `false` it is `do {...} while (...)`.</haxe_doc>
		</TWhile>
		<TSwitch a="e:cases:edef">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><a>
	<values><c path="Array"><t path="haxe.macro.TypedExpr"/></c></values>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
			<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
			<haxe_doc>Represents a `switch` expression with related cases and an optional
		`default` case if edef != null.</haxe_doc>
		</TSwitch>
		<TTry a="e:catches">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><a>
	<v><t path="haxe.macro.TVar"/></v>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
			<haxe_doc>Represents a `try`-expression with related catches.</haxe_doc>
		</TTry>
		<TReturn a="e">
			<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
			<haxe_doc>A `return` or `return e` expression.</haxe_doc>
		</TReturn>
		<TBreak><haxe_doc>A `break` expression.</haxe_doc></TBreak>
		<TContinue><haxe_doc>A `continue` expression.</haxe_doc></TContinue>
		<TThrow a="e">
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>A `throw e` expression.</haxe_doc>
		</TThrow>
		<TCast a="e:m">
			<t path="haxe.macro.TypedExpr"/>
			<t path="Null"><e path="haxe.macro.ModuleType"/></t>
			<haxe_doc>A `cast e` or `cast (e, m)` expression.</haxe_doc>
		</TCast>
		<TMeta a="m:e1">
			<t path="haxe.macro.MetadataEntry"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>A `@m e1` expression.</haxe_doc>
		</TMeta>
		<TEnumParameter a="e1:ef:index">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.EnumField"/>
			<x path="Int"/>
			<haxe_doc>Access to an enum parameter (generated by the pattern matcher).</haxe_doc>
		</TEnumParameter>
		<haxe_doc>Represents kind of a node in the typed AST.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypedExpr" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the expression.</haxe_doc>
			</t>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.TypedExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a typed AST node.</haxe_doc>
	</typedef>
	<class path="haxe.macro.TypeTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/TypeTools.hx">
		<nullable set="method" line="41" static="1"><f a="complexType">
	<e path="haxe.macro.ComplexType"/>
	<e path="haxe.macro.ComplexType"/>
</f></nullable>
		<toField set="method" line="43" static="1"><f a="cf">
	<t path="haxe.macro.ClassField"/>
	<t path="haxe.macro.Field"/>
</f></toField>
		<toComplexType public="1" set="method" line="98" static="1">
			<f a="type">
				<t path="Null"><e path="haxe.macro.Type"/></t>
				<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			</f>
			<haxe_doc>Returns a syntax-level type corresponding to Type `t`.

		This function is mostly inverse to `ComplexTypeTools.toType`, but may
		lose some information on types that do not have a corresponding syntax
		version, such as monomorphs. In these cases, the result is null.

		If `t` is null, an internal exception is thrown.</haxe_doc>
		</toComplexType>
		<toTypePath set="method" line="145" static="1"><f a="baseType:params">
	<t path="haxe.macro.BaseType"/>
	<c path="Array"><e path="haxe.macro.Type"/></c>
	<t path="haxe.macro.TypePath"/>
</f></toTypePath>
		<findField public="1" set="method" line="367" static="1">
			<f a="c:name:?isStatic" v="::false">
				<t path="haxe.macro.ClassType"/>
				<c path="String"/>
				<x path="Bool"/>
				<t path="Null"><t path="haxe.macro.ClassField"/></t>
			</f>
			<meta><m n=":value"><e>{ isStatic : false }</e></m></meta>
			<haxe_doc>Resolves the field named `name` on class `c`.

		If `isStatic` is true, the classes' static fields are checked. Otherwise
		the classes' member fields are checked.

		If the field is found, it is returned. Otherwise if `c` has a super
		class, `findField` recursively checks that super class. Otherwise null
		is returned.

		If any argument is null, the result is unspecified.</haxe_doc>
		</findField>
		<haxe_doc>This class provides some utility methods to work with types. It is
	best used through 'using haxe.macro.TypeTools' syntax and then provides
	additional methods on haxe.macro.Type instances.</haxe_doc>
	</class>
	<class path="haxe.macro.TypedExprTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/TypedExprTools.hx">
		<with set="method" line="33" static="1"><f a="e:?edef:?t">
	<t path="haxe.macro.TypedExpr"/>
	<e path="haxe.macro.TypedExprDef"/>
	<e path="haxe.macro.Type"/>
	<a>
		<t><e path="haxe.macro.Type"/></t>
		<pos><t path="haxe.macro.Position"/></pos>
		<expr><e path="haxe.macro.TypedExprDef"/></expr>
	</a>
</f></with>
		<map public="1" set="method" line="48" static="1">
			<f a="e:f">
				<t path="haxe.macro.TypedExpr"/>
				<f a="">
					<t path="haxe.macro.TypedExpr"/>
					<t path="haxe.macro.TypedExpr"/>
				</f>
				<t path="haxe.macro.TypedExpr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of `e` by calling `f` on each of them.

		See `haxe.macro.ExprTools.map` for details on expression mapping in
		general. This function works the same way, but with a different data
		structure.</haxe_doc>
		</map>
		<iter public="1" set="method" line="83" static="1">
			<f a="e:f">
				<t path="haxe.macro.TypedExpr"/>
				<f a="">
					<t path="haxe.macro.TypedExpr"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls function `f` on each sub-expression of `e`.

		See `haxe.macro.ExprTools.iter` for details on iterating expressions in
		general. This function works the same way, but with a different data
		structure.</haxe_doc>
		</iter>
		<mapWithType public="1" set="method" line="128" static="1">
			<f a="e:f:ft:fv">
				<t path="haxe.macro.TypedExpr"/>
				<f a="">
					<t path="haxe.macro.TypedExpr"/>
					<t path="haxe.macro.TypedExpr"/>
				</f>
				<f a="">
					<e path="haxe.macro.Type"/>
					<e path="haxe.macro.Type"/>
				</f>
				<f a="">
					<t path="haxe.macro.TVar"/>
					<t path="haxe.macro.TVar"/>
				</f>
				<t path="haxe.macro.TypedExpr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of `e` by calling `f` on each of them.
		Additionally, types are mapped using `ft` and variables are mapped using
		`fv`.

		See `haxe.macro.ExprTools.map` for details on expression mapping in
		general. This function works the same way, but with a different data
		structure.</haxe_doc>
		</mapWithType>
		<haxe_doc>This class provides some utility methods to work with typed expressions.
	It is best used through 'using haxe.macro.TypedExprTools' syntax and then
	provides additional methods on `haxe.macro.TypedExpr` instances.</haxe_doc>
	</class>
	<class path="haxe.remoting.AsyncConnection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/AsyncConnection.hx" interface="1">
		<resolve public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<call public="1" set="method"><f a="params:?result">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<setErrorHandler public="1" set="method"><f a="error">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<haxe_doc>For asynchronous connections, where the results are events that will be resolved later in the execution process.</haxe_doc>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.AMFConnection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/AMFConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<__data><a>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
	<cnx><d/></cnx>
</a></__data>
		<__path><c path="Array"><c path="String"/></c></__path>
		<resolve public="1" set="method" line="44"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="50"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<close public="1" set="method" line="54"><f a=""><x path="Void"/></f></close>
		<call public="1" set="method" line="58">
			<f a="params:?onResult">
				<c path="Array"><d/></c>
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</call>
		<new set="method" line="39"><f a="data:path">
	<a>
		<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
		<cnx><d/></cnx>
	</a>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>Allows a connection to an AMF Remoting server such as Flash Media Server or AMFPHP.</haxe_doc>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.AsyncAdapter" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/AsyncAdapter.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<create public="1" set="method" line="56" static="1"><f a="cnx">
	<c path="haxe.remoting.Connection"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></create>
		<__cnx><c path="haxe.remoting.Connection"/></__cnx>
		<__error><a><ref><f a="">
	<d/>
	<x path="Void"/>
</f></ref></a></__error>
		<resolve public="1" set="method" line="37"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="41"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<call public="1" set="method" line="45"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<new set="method" line="32"><f a="cnx:error">
	<c path="haxe.remoting.Connection"/>
	<a><ref><f a="">
	<d/>
	<x path="Void"/>
</f></ref></a>
	<x path="Void"/>
</f></new>
		<haxe_doc>Build an AsyncConnection from a synchronized Connection.</haxe_doc>
	</class>
	<class path="haxe.remoting.AsyncDebugConnection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/AsyncDebugConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<create public="1" set="method" line="76" static="1"><f a="cnx">
	<c path="haxe.remoting.AsyncConnection"/>
	<c path="haxe.remoting.AsyncDebugConnection"/>
</f></create>
		<__path><c path="Array"><c path="String"/></c></__path>
		<__cnx><c path="haxe.remoting.AsyncConnection"/></__cnx>
		<__data><a>
	<onresult><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<x path="Void"/>
</f></onresult>
	<onerror><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<x path="Void"/>
</f></onerror>
	<oncall><f a=":">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></oncall>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
</a></__data>
		<resolve public="1" set="method" line="41"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="47"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<setErrorDebug public="1" set="method" line="51"><f a="h">
	<f a="::">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorDebug>
		<setResultDebug public="1" set="method" line="55"><f a="h">
	<f a="::">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setResultDebug>
		<setCallDebug public="1" set="method" line="59"><f a="h">
	<f a=":">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setCallDebug>
		<call public="1" set="method" line="63"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<new set="method" line="35"><f a="path:cnx:data">
	<c path="Array"><c path="String"/></c>
	<c path="haxe.remoting.AsyncConnection"/>
	<a>
		<onresult><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<x path="Void"/>
</f></onresult>
		<onerror><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<x path="Void"/>
</f></onerror>
		<oncall><f a=":">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></oncall>
		<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
	</a>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncDebugConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.AsyncProxy" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/AsyncProxy.hx">
		<__cnx><c path="haxe.remoting.AsyncConnection"/></__cnx>
		<new set="method" line="33"><f a="c">
	<c path="haxe.remoting.AsyncConnection"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>This class is magic. When you extend it with a class C, it will automaticaly
	create a stub class with all public methods forwarding remoting messages over
	the connection.</haxe_doc>
	</class>
	<class path="haxe.remoting.Connection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/Connection.hx" interface="1">
		<resolve public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.Connection"/>
</f></resolve>
		<call public="1" set="method"><f a="params">
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<haxe_dynamic><c path="haxe.remoting.Connection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.Context" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/Context.hx">
		<share public="1" set="method" line="58" static="1"><f a="name:obj">
	<c path="String"/>
	<a/>
	<c path="haxe.remoting.Context"/>
</f></share>
		<objects><c path="haxe.ds.StringMap"><a>
	<rec><x path="Bool"/></rec>
	<obj><d/></obj>
</a></c></objects>
		<addObject public="1" set="method" line="35"><f a="name:obj:?recursive">
	<c path="String"/>
	<a/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addObject>
		<call public="1" set="method" line="39"><f a="path:params">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<new public="1" set="method" line="31"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Allows communication between platforms. This is a shared API that can be called on the connection at the client code.</haxe_doc>
	</class>
	<class path="haxe.remoting.ContextAll" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/ContextAll.hx">
		<extends path="haxe.remoting.Context"/>
		<call public="1" set="method" line="26" override="1"><f a="path:params">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
</f></call>
	</class>
	<class path="haxe.remoting.DelayedConnection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/DelayedConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<process set="method" line="70" static="1"><f a="d">
	<c path="haxe.remoting.DelayedConnection"/>
	<x path="Void"/>
</f></process>
		<create public="1" set="method" line="86" static="1"><f a=""><c path="haxe.remoting.DelayedConnection"/></f></create>
		<connection public="1" get="accessor" set="accessor"><c path="haxe.remoting.AsyncConnection"/></connection>
		<__path><c path="Array"><c path="String"/></c></__path>
		<__data><a>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
	<cnx><c path="haxe.remoting.AsyncConnection"/></cnx>
	<cache><c path="Array"><a>
	<path><c path="Array"><c path="String"/></c></path>
	<params><c path="Array"><d/></c></params>
	<onResult><f a="">
	<d/>
	<x path="Void"/>
</f></onResult>
	<onError><f a="">
	<d/>
	<x path="Void"/>
</f></onError>
</a></c></cache>
</a></__data>
		<setErrorHandler public="1" set="method" line="45"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<resolve public="1" set="method" line="49"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<get_connection set="method" line="55"><f a=""><c path="haxe.remoting.AsyncConnection"/></f></get_connection>
		<set_connection set="method" line="59"><f a="cnx">
	<c path="haxe.remoting.AsyncConnection"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></set_connection>
		<call public="1" set="method" line="65"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<new set="method" line="40"><f a="data:path">
	<a>
		<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
		<cnx><c path="haxe.remoting.AsyncConnection"/></cnx>
		<cache><c path="Array"><a>
	<path><c path="Array"><c path="String"/></c></path>
	<params><c path="Array"><d/></c></params>
	<onResult><f a="">
	<d/>
	<x path="Void"/>
</f></onResult>
	<onError><f a="">
	<d/>
	<x path="Void"/>
</f></onError>
</a></c></cache>
	</a>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.ExternalConnection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/ExternalConnection.hx">
		<implements path="haxe.remoting.Connection"/>
		<escapeString get="inline" set="null" line="53" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></escapeString>
		<connections expr="new haxe.ds.StringMap&lt;ExternalConnection&gt;()" line="94" static="1">
			<c path="haxe.ds.StringMap"><c path="haxe.remoting.ExternalConnection"/></c>
			<meta><m n=":value"><e><![CDATA[new haxe.ds.StringMap<ExternalConnection>()]]></e></m></meta>
		</connections>
		<doCall set="method" line="97" static="1">
			<f a="name:path:params">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":keep"/></meta>
		</doCall>
		<__data><a>
	<name><c path="String"/></name>
	<ctx><c path="haxe.remoting.Context"/></ctx>
</a></__data>
		<__path><c path="Array"><c path="String"/></c></__path>
		<resolve public="1" set="method" line="38"><f a="field">
	<c path="String"/>
	<c path="haxe.remoting.Connection"/>
</f></resolve>
		<close public="1" set="method" line="44"><f a=""><x path="Void"/></f></close>
		<call public="1" set="method" line="58"><f a="params">
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<new set="method" line="33"><f a="data:path">
	<a>
		<name><c path="String"/></name>
		<ctx><c path="haxe.remoting.Context"/></ctx>
	</a>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>Synchronous communications between Flash and Javascript.</haxe_doc>
		<meta><m n=":expose"/></meta>
		<haxe_dynamic><c path="haxe.remoting.Connection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.FlashJsConnection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/FlashJsConnection.hx"/>
	<class path="haxe.remoting.HttpAsyncConnection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/HttpAsyncConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<urlConnect public="1" set="method" line="76" static="1"><f a="url">
	<c path="String"/>
	<c path="haxe.remoting.HttpAsyncConnection"/>
</f></urlConnect>
		<__data><a>
	<url><c path="String"/></url>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
</a></__data>
		<__path><c path="Array"><c path="String"/></c></__path>
		<resolve public="1" set="method" line="37"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="43"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<call public="1" set="method" line="47"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<new set="method" line="32"><f a="data:path">
	<a>
		<url><c path="String"/></url>
		<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
	</a>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>Allows an asynchronous connection to the given URL which should link to a Haxe server application.</haxe_doc>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.HttpConnection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/HttpConnection.hx">
		<implements path="haxe.remoting.Connection"/>
		<TIMEOUT public="1" expr="10." line="29" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>10.</e></m></meta>
		</TIMEOUT>
		<urlConnect public="1" set="method" line="73" static="1"><f a="url">
	<c path="String"/>
	<c path="haxe.remoting.HttpConnection"/>
</f></urlConnect>
		<processRequest public="1" set="method" line="97" static="1"><f a="requestData:ctx">
	<c path="String"/>
	<c path="haxe.remoting.Context"/>
	<c path="String"/>
</f></processRequest>
		<__url><c path="String"/></__url>
		<__path><c path="Array"><c path="String"/></c></__path>
		<resolve public="1" set="method" line="39"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.Connection"/>
</f></resolve>
		<call public="1" set="method" line="45"><f a="params">
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<new set="method" line="34"><f a="url:path">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>Allows a synchronous connection to the given URL which should link to a Haxe server application.</haxe_doc>
		<haxe_dynamic><c path="haxe.remoting.Connection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.LocalConnection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/LocalConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<ID expr="0" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</ID>
		<remotingCall set="method" line="78" static="1"><f a="c:id:path:args">
	<c path="haxe.remoting.LocalConnection"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></remotingCall>
		<remotingResult set="method" line="93" static="1"><f a="c:id:result">
	<c path="haxe.remoting.LocalConnection"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></remotingResult>
		<__path><c path="Array"><c path="String"/></c></__path>
		<__data><a>
	<target><c path="String"/></target>
	<results><c path="haxe.ds.IntMap"><a>
	<result><f a="">
	<d/>
	<x path="Void"/>
</f></result>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
</a></c></results>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
	<ctx><c path="haxe.remoting.Context"/></ctx>
	<cnx><d/></cnx>
</a></__data>
		<resolve public="1" set="method" line="49"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="55"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<call public="1" set="method" line="59"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<close public="1" set="method" line="74"><f a=""><x path="Void"/></f></close>
		<new set="method" line="44"><f a="data:path">
	<a>
		<target><c path="String"/></target>
		<results><c path="haxe.ds.IntMap"><a>
	<result><f a="">
	<d/>
	<x path="Void"/>
</f></result>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
</a></c></results>
		<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
		<ctx><c path="haxe.remoting.Context"/></ctx>
		<cnx><d/></cnx>
	</a>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>Allows communications to a different application that runs on the same client device</haxe_doc>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.Proxy" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/Proxy.hx">
		<__cnx><c path="haxe.remoting.Connection"/></__cnx>
		<new set="method" line="33"><f a="c">
	<c path="haxe.remoting.Connection"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>When you extend it with a class C, it will automatically
	create a stub class with all public methods forwarding remoting messages over
	the connection.</haxe_doc>
	</class>
	<class path="haxe.remoting.SocketConnection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/SocketConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<create public="1" set="method" line="123" static="1"><f a="s:?ctx">
	<t path="haxe.remoting.Socket"/>
	<c path="haxe.remoting.Context"/>
	<c path="haxe.remoting.SocketConnection"/>
</f></create>
		<__path><c path="Array"><c path="String"/></c></__path>
		<__data><a>
	<results><c path="List"><a>
	<onResult><f a="">
	<d/>
	<x path="Void"/>
</f></onResult>
	<onError><f a="">
	<d/>
	<x path="Void"/>
</f></onError>
</a></c></results>
	<protocol><c path="haxe.remoting.SocketProtocol"/></protocol>
	<log><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<x path="Void"/>
</f></log>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
</a></__data>
		<resolve public="1" set="method" line="47"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<call public="1" set="method" line="53"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<setErrorHandler public="1" set="method" line="62"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<setErrorLogger public="1" set="method" line="66"><f a="h">
	<f a="::">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorLogger>
		<setProtocol public="1" set="method" line="70"><f a="p">
	<c path="haxe.remoting.SocketProtocol"/>
	<x path="Void"/>
</f></setProtocol>
		<getProtocol public="1" set="method" line="74"><f a=""><c path="haxe.remoting.SocketProtocol"/></f></getProtocol>
		<close public="1" set="method" line="78"><f a=""><x path="Void"/></f></close>
		<processMessage public="1" set="method" line="82"><f a="data">
	<c path="String"/>
	<x path="Void"/>
</f></processMessage>
		<defaultLog set="method" line="114"><f a="path:args:e">
	<a><join set="null"><f a="">
	<c path="String"/>
	<c path="String"/>
</f></join></a>
	<a><join set="null"><f a="">
	<c path="String"/>
	<c path="String"/>
</f></join></a>
	<unknown/>
	<x path="Void"/>
</f></defaultLog>
		<new set="method" line="42"><f a="data:path">
	<a>
		<results><c path="List"><a>
	<onResult><f a="">
	<d/>
	<x path="Void"/>
</f></onResult>
	<onError><f a="">
	<d/>
	<x path="Void"/>
</f></onError>
</a></c></results>
		<protocol><c path="haxe.remoting.SocketProtocol"/></protocol>
		<log><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<x path="Void"/>
</f></log>
		<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
	</a>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>Allows remoting communications over a socket connection</haxe_doc>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<typedef path="haxe.remoting.Socket" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/SocketProtocol.hx" module="haxe.remoting.SocketProtocol"><c path="sys.net.Socket"/></typedef>
	<class path="haxe.remoting.SocketProtocol" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/SocketProtocol.hx">
		<socket public="1"><t path="haxe.remoting.Socket"/></socket>
		<context public="1"><c path="haxe.remoting.Context"/></context>
		<decodeChar set="method" line="64"><f a="c">
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
</f></decodeChar>
		<encodeChar set="method" line="83"><f a="c">
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
</f></encodeChar>
		<messageLength public="1" set="method" line="104"><f a="c1:c2">
	<x path="Int"/>
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
</f></messageLength>
		<encodeMessageLength public="1" set="method" line="112"><f a="len">
	<x path="Int"/>
	<a>
		<c2><t path="Null"><x path="Int"/></t></c2>
		<c1><t path="Null"><x path="Int"/></t></c1>
	</a>
</f></encodeMessageLength>
		<sendRequest public="1" set="method" line="120"><f a="path:params">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></sendRequest>
		<sendAnswer public="1" set="method" line="128"><f a="answer:?isException">
	<d/>
	<x path="Bool"/>
	<x path="Void"/>
</f></sendAnswer>
		<sendMessage public="1" set="method" line="138"><f a="msg">
	<c path="String"/>
	<x path="Void"/>
</f></sendMessage>
		<decodeData public="1" set="dynamic" line="151"><f a="data">
	<c path="String"/>
	<c path="String"/>
</f></decodeData>
		<isRequest public="1" set="method" line="155"><f a="data">
	<c path="String"/>
	<x path="Bool"/>
</f></isRequest>
		<processRequest public="1" set="method" line="163"><f a="data:?onError">
	<c path="String"/>
	<f a="::">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></processRequest>
		<processAnswer public="1" set="method" line="185"><f a="data">
	<c path="String"/>
	<d/>
</f></processAnswer>
		<readMessage public="1" set="method" line="194"><f a=""><c path="String"/></f></readMessage>
		<new public="1" set="method" line="59"><f a="sock:ctx">
	<t path="haxe.remoting.Socket"/>
	<c path="haxe.remoting.Context"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>The Haxe Remoting Socket Protocol is composed of serialized string exchanges.
	Each string is prefixed with a 2-chars header encoding the string size (up to 4KB)
	and postfixed with the `\0` message delimiting char.

	A request string is composed of the following serialized values :

	 - the boolean true for a request
	 - an array of strings representing the object+method path
	 - an array of parameters

	A response string is composed of the following serialized values :

	 - the boolean false for a response
	 - a serialized value representing the result

	Exceptions are serialized with `serializeException` so they will be thrown immediately
	when they are unserialized.</haxe_doc>
	</class>
	<typedef path="haxe.rtti.Path" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="String"/>
		<haxe_doc>The (dot-)path of the runtime type.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Platforms" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="List"><c path="String"/></c>
		<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.FunctionArgument" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<value>
				<t path="Null"><c path="String"/></t>
				<meta><m n=":optional"/></meta>
			</value>
			<t><e path="haxe.rtti.CType"/></t>
			<opt><x path="Bool"/></opt>
			<name><c path="String"/></name>
		</a>
		<haxe_doc>The function argument runtime type information.</haxe_doc>
	</typedef>
	<enum path="haxe.rtti.CType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx">
		<CUnknown/>
		<CEnum a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CEnum>
		<CClass a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CClass>
		<CTypedef a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CTypedef>
		<CFunction a="args:ret">
			<c path="List"><t path="haxe.rtti.FunctionArgument"/></c>
			<e path="haxe.rtti.CType"/>
		</CFunction>
		<CAnonymous a="fields"><c path="List"><t path="haxe.rtti.ClassField"/></c></CAnonymous>
		<CDynamic a="?t"><e path="haxe.rtti.CType"/></CDynamic>
		<CAbstract a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CAbstract>
		<haxe_doc>The runtime member types.</haxe_doc>
	</enum>
	<typedef path="haxe.rtti.PathParams" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The path of the type.</haxe_doc>
			</path>
			<params>
				<c path="List"><e path="haxe.rtti.CType"/></c>
				<haxe_doc>The list of parameters types.</haxe_doc>
			</params>
		</a>
		<haxe_doc>The type parameters in the runtime type information.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.TypeParams" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="Array"><c path="String"/></c>
		<haxe_doc>An array of strings representing the names of the type parameters the type 
	has. As of Haxe 3.2.0, this does not include the constraints.</haxe_doc>
	</typedef>
	<enum path="haxe.rtti.Rights" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<RNormal/>
		<RNo/>
		<RCall a="m"><c path="String"/></RCall>
		<RMethod/>
		<RDynamic/>
		<RInline/>
		<haxe_doc>Represents the runtime rights of a type.</haxe_doc>
	</enum>
	<typedef path="haxe.rtti.MetaData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="Array"><a>
	<params><c path="Array"><c path="String"/></c></params>
	<name><c path="String"/></name>
</a></c>
		<haxe_doc>The list of runtime metadata.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.ClassField" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<type>
				<e path="haxe.rtti.CType"/>
				<haxe_doc>The type of the field.</haxe_doc>
			</type>
			<set>
				<e path="haxe.rtti.Rights"/>
				<haxe_doc>The [write access](https://haxe.org/manual/dictionary.html#define-write-access)
		behavior of the field.</haxe_doc>
			</set>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the field is available.</haxe_doc>
			</platforms>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters 
		the field has.</haxe_doc>
			</params>
			<overloads>
				<t path="Null"><c path="List"><t path="haxe.rtti.ClassField"/></c></t>
				<haxe_doc>The list of available overloads for the fields or `null` if no overloads 
		exists.</haxe_doc>
			</overloads>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The meta data the field was annotated with.</haxe_doc>
			</meta>
			<line>
				<t path="Null"><x path="Int"/></t>
				<haxe_doc>The line number where the field is defined. This information is only 
		available if the field has an expression. 
		Otherwise the value is `null`.</haxe_doc>
			</line>
			<isPublic>
				<x path="Bool"/>
				<haxe_doc>Whether or not the field is public.</haxe_doc>
			</isPublic>
			<isOverride>
				<x path="Bool"/>
				<haxe_doc>Whether or not the field overrides another field.</haxe_doc>
			</isOverride>
			<get>
				<e path="haxe.rtti.Rights"/>
				<haxe_doc>The [read access](https://haxe.org/manual/dictionary.html#define-read-access) 
		behavior of the field.</haxe_doc>
			</get>
			<expr>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The actual expression of the field or `null` if there is no expression.</haxe_doc>
			</expr>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The documentation of the field. This information is only available 
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or 
		if the field has no documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc><![CDATA[The runtime class field information.
	
	@see <https://haxe.org/manual/cr-rtti-structure.html#class-field-information>]]></haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.TypeInfos" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the 
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was 
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [private](https://haxe.org/manual/dictionary.html#define-private-type).</haxe_doc>
			</isPrivate>
			<file>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The full slash path of the .hx file containing the type. 
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The general runtime type information.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Classdef" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<tdynamic>
				<t path="Null"><e path="haxe.rtti.CType"/></t>
				<haxe_doc>The type which is dynamically implemented by the class or `null` if no
		such type exists.</haxe_doc>
			</tdynamic>
			<superClass>
				<t path="Null"><t path="haxe.rtti.PathParams"/></t>
				<haxe_doc>The class' parent class defined by its type path and list of type 
		parameters.</haxe_doc>
			</superClass>
			<statics>
				<c path="List"><t path="haxe.rtti.ClassField"/></c>
				<haxe_doc>The list of static class fields.</haxe_doc>
			</statics>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the 
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was 
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [private](https://haxe.org/manual/dictionary.html#define-private-type).</haxe_doc>
			</isPrivate>
			<isInterface>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class is actually an [interface](https://haxe.org/manual/types-interfaces.html).</haxe_doc>
			</isInterface>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class is [extern](https://haxe.org/manual/lf-externs.html).</haxe_doc>
			</isExtern>
			<interfaces>
				<c path="List"><t path="haxe.rtti.PathParams"/></c>
				<haxe_doc>The list of interfaces defined by their type path and list of type 
		parameters.</haxe_doc>
			</interfaces>
			<file>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The full slash path of the .hx file containing the type. 
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<fields>
				<c path="List"><t path="haxe.rtti.ClassField"/></c>
				<haxe_doc>The list of member [class fields](https://haxe.org/manual/class-field.html).</haxe_doc>
			</fields>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The runtime class definition information.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.EnumField" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the constructor is
		available.</haxe_doc>
			</platforms>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the constructor.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The meta data the constructor was annotated with.</haxe_doc>
			</meta>
			<doc>
				<c path="String"/>
				<haxe_doc>The documentation of the constructor. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
			<args>
				<t path="Null"><c path="List"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c></t>
				<haxe_doc>The list of arguments the constructor has or `null` if no arguments are 
		available.</haxe_doc>
			</args>
		</a>
		<haxe_doc><![CDATA[The runtime enum constructor information.
	
	@see <https://haxe.org/manual/cr-rtti-structure.html#enum-constructor-information>]]></haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Enumdef" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the 
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was 
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [private](https://haxe.org/manual/dictionary.html#define-private-type).</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the enum is [extern](https://haxe.org/manual/lf-externs.html).</haxe_doc>
			</isExtern>
			<file>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The full slash path of the .hx file containing the type. 
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
			<constructors>
				<c path="List"><t path="haxe.rtti.EnumField"/></c>
				<haxe_doc>The list of enum constructors.</haxe_doc>
			</constructors>
		</a>
		<haxe_doc><![CDATA[The enum runtime type information.
	
	@see <https://haxe.org/manual/cr-rtti-structure.html#enum-type-information>]]></haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Typedef" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<types>
				<x path="Map">
					<c path="String"/>
					<e path="haxe.rtti.CType"/>
				</x>
				<haxe_doc>The types of the typedef, by platform.</haxe_doc>
			</types>
			<type>
				<e path="haxe.rtti.CType"/>
				<haxe_doc>The type of the typedef.</haxe_doc>
			</type>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the 
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was 
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [private](https://haxe.org/manual/dictionary.html#define-private-type).</haxe_doc>
			</isPrivate>
			<file>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The full slash path of the .hx file containing the type. 
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The typedef runtime information.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Abstractdef" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<to><c path="Array"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<field><t path="Null"><c path="String"/></t></field>
</a></c></to>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the 
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was 
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [private](https://haxe.org/manual/dictionary.html#define-private-type).</haxe_doc>
			</isPrivate>
			<impl><t path="haxe.rtti.Classdef"/></impl>
			<from><c path="Array"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<field><t path="Null"><c path="String"/></t></field>
</a></c></from>
			<file>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The full slash path of the .hx file containing the type. 
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
			<athis><e path="haxe.rtti.CType"/></athis>
		</a>
		<haxe_doc><![CDATA[The abstract type runtime information.
	
	@see <https://haxe.org/manual/cr-rtti-structure.html#abstract-type-information>]]></haxe_doc>
	</typedef>
	<enum path="haxe.rtti.TypeTree" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<TPackage a="name:full:subs">
			<c path="String"/>
			<c path="String"/>
			<c path="Array"><e path="haxe.rtti.TypeTree"/></c>
		</TPackage>
		<TClassdecl a="c"><t path="haxe.rtti.Classdef"/></TClassdecl>
		<TEnumdecl a="e"><t path="haxe.rtti.Enumdef"/></TEnumdecl>
		<TTypedecl a="t"><t path="haxe.rtti.Typedef"/></TTypedecl>
		<TAbstractdecl a="a"><t path="haxe.rtti.Abstractdef"/></TAbstractdecl>
		<haxe_doc>The tree types of the runtime type.</haxe_doc>
	</enum>
	<typedef path="haxe.rtti.TypeRoot" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="Array"><e path="haxe.rtti.TypeTree"/></c>
		<haxe_doc>List of `TypeTree`.</haxe_doc>
	</typedef>
	<class path="haxe.rtti.TypeApi" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<typeInfos public="1" set="method" line="366" static="1"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<t path="haxe.rtti.TypeInfos"/>
</f></typeInfos>
		<isVar public="1" set="method" line="382" static="1">
			<f a="t">
				<e path="haxe.rtti.CType"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the given `CType` is a variable or `false` if it is a
		function.</haxe_doc>
		</isVar>
		<leq params="T" set="method" line="389" static="1"><f a="f:l1:l2">
	<f a=":">
		<c path="leq.T"/>
		<c path="leq.T"/>
		<x path="Bool"/>
	</f>
	<c path="List"><c path="leq.T"/></c>
	<c path="List"><c path="leq.T"/></c>
	<x path="Bool"/>
</f></leq>
		<rightsEq public="1" set="method" line="409" static="1">
			<f a="r1:r2">
				<e path="haxe.rtti.Rights"/>
				<e path="haxe.rtti.Rights"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Unlike `r1 == r2`, this function performs a deep equality check on 
		the given `Rights` instances.

		If `r1` or `r2` are `null`, the result is unspecified.</haxe_doc>
		</rightsEq>
		<typeEq public="1" set="method" line="430" static="1">
			<f a="t1:t2">
				<e path="haxe.rtti.CType"/>
				<e path="haxe.rtti.CType"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Unlike `t1 == t2`, this function performs a deep equality check on 
		the given `CType` instances.

		If `t1` or `t2` are `null`, the result is unspecified.</haxe_doc>
		</typeEq>
		<fieldEq public="1" set="method" line="489" static="1">
			<f a="f1:f2">
				<t path="haxe.rtti.ClassField"/>
				<t path="haxe.rtti.ClassField"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Unlike `f1 == f2`, this function performs a deep equality check on 
		the given `ClassField` instances.

		If `f1` or `f2` are `null`, the result is unspecified.</haxe_doc>
		</fieldEq>
		<constructorEq public="1" set="method" line="515" static="1">
			<f a="c1:c2">
				<t path="haxe.rtti.EnumField"/>
				<t path="haxe.rtti.EnumField"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Unlike `c1 == c2`, this function performs a deep equality check on 
		the arguments of the enum constructors, if exists.

		If `c1` or `c2` are `null`, the result is unspecified.</haxe_doc>
		</constructorEq>
		<haxe_doc>Contains type and equality checks functionalities for RTTI.</haxe_doc>
	</class>
	<class path="haxe.rtti.CTypeTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<toString public="1" set="method" line="537" static="1">
			<f a="t">
				<e path="haxe.rtti.CType"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the string representation of `CType`.</haxe_doc>
		</toString>
		<nameWithParams set="method" line="560" static="1"><f a="name:params">
	<c path="String"/>
	<c path="List"><e path="haxe.rtti.CType"/></c>
	<c path="String"/>
</f></nameWithParams>
		<functionArgumentName set="method" line="567" static="1"><f a="arg">
	<t path="haxe.rtti.FunctionArgument"/>
	<c path="String"/>
</f></functionArgumentName>
		<classField set="method" line="571" static="1"><f a="cf">
	<t path="haxe.rtti.ClassField"/>
	<c path="String"/>
</f></classField>
		<haxe_doc>The CTypeTools class contains some extra functionalities for handling
	`CType` instances.</haxe_doc>
	</class>
	<typedef path="haxe.rtti._Meta.MetaObject" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/Meta.hx" private="1" module="haxe.rtti.Meta"><a>
	<statics>
		<t path="Null"><d><d><t path="Null"><c path="Array"><d/></c></t></d></d></t>
		<meta><m n=":optional"/></meta>
	</statics>
	<obj>
		<t path="Null"><d><t path="Null"><c path="Array"><d/></c></t></d></t>
		<meta><m n=":optional"/></meta>
	</obj>
	<fields>
		<t path="Null"><d><d><t path="Null"><c path="Array"><d/></c></t></d></d></t>
		<meta><m n=":optional"/></meta>
	</fields>
</a></typedef>
	<class path="haxe.rtti.Meta" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/Meta.hx">
		<getType public="1" set="method" line="40" static="1">
			<f a="t">
				<d/>
				<d><c path="Array"><d/></c></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given type (class or enum)</haxe_doc>
		</getType>
		<isInterface set="method" line="46" static="1"><f a="t">
	<d/>
	<x path="Bool"/>
</f></isInterface>
		<getMeta set="method" line="60" static="1"><f a="t">
	<d/>
	<t path="haxe.rtti._Meta.MetaObject"/>
</f></getMeta>
		<getStatics public="1" set="method" line="91" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given class static fields</haxe_doc>
		</getStatics>
		<getFields public="1" set="method" line="99" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given class fields or enum constructors</haxe_doc>
		</getFields>
		<haxe_doc><![CDATA[An API to access classes and enums metadata at runtime.

	@see <https://haxe.org/manual/cr-rtti.html>]]></haxe_doc>
	</class>
	<class path="haxe.rtti.Rtti" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/Rtti.hx">
		<getRtti public="1" params="T" set="method" line="41" static="1">
			<f a="c">
				<x path="Class"><c path="getRtti.T"/></x>
				<t path="haxe.rtti.Classdef"/>
			</f>
			<haxe_doc>Returns the `haxe.rtti.CType.Classdef` corresponding to class `c`.

		If `c` has no runtime type information, e.g. because no `@:rtti@` was
		added, `null` is returned.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getRtti>
		<hasRtti public="1" params="T" set="method" line="59" static="1">
			<f a="c">
				<x path="Class"><c path="hasRtti.T"/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `c` has runtime type information.

		If `c` is null, the result is unspecified.</haxe_doc>
		</hasRtti>
		<haxe_doc><![CDATA[Rtti is a helper class which supplements the `@:rtti` metadata.
	
	@see <https://haxe.org/manual/cr-rtti.html>]]></haxe_doc>
	</class>
	<class path="haxe.rtti.XmlParser" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/XmlParser.hx">
		<root public="1"><t path="haxe.rtti.TypeRoot"/></root>
		<curplatform><c path="String"/></curplatform>
		<sort public="1" set="method" line="41"><f a="?l">
	<t path="haxe.rtti.TypeRoot"/>
	<x path="Void"/>
</f></sort>
		<sortFields set="method" line="68"><f a="fl">
	<t path="Iterable"><t path="haxe.rtti.ClassField"/></t>
	<c path="List"><t path="haxe.rtti.ClassField"/></c>
</f></sortFields>
		<process public="1" set="method" line="88"><f a="x:platform">
	<c path="Xml"/>
	<c path="String"/>
	<x path="Void"/>
</f></process>
		<mergeRights set="method" line="94"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></mergeRights>
		<mergeDoc set="method" line="103"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></mergeDoc>
		<mergeFields set="method" line="111"><f a="f:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></mergeFields>
		<newField public="1" set="dynamic" line="115"><f a="c:f">
	<t path="haxe.rtti.Classdef"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Void"/>
</f></newField>
		<mergeClasses set="method" line="118"><f a="c:c2">
	<t path="haxe.rtti.Classdef"/>
	<t path="haxe.rtti.Classdef"/>
	<x path="Bool"/>
</f></mergeClasses>
		<mergeEnums set="method" line="156"><f a="e:e2">
	<t path="haxe.rtti.Enumdef"/>
	<t path="haxe.rtti.Enumdef"/>
	<x path="Bool"/>
</f></mergeEnums>
		<mergeTypedefs set="method" line="176"><f a="t:t2">
	<t path="haxe.rtti.Typedef"/>
	<t path="haxe.rtti.Typedef"/>
	<x path="Bool"/>
</f></mergeTypedefs>
		<mergeAbstracts set="method" line="184"><f a="a:a2">
	<t path="haxe.rtti.Abstractdef"/>
	<t path="haxe.rtti.Abstractdef"/>
	<x path="Bool"/>
</f></mergeAbstracts>
		<merge set="method" line="200"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<x path="Void"/>
</f></merge>
		<mkPath set="method" line="290"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.Path"/>
</f></mkPath>
		<mkTypeParams set="method" line="294"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.TypeParams"/>
</f></mkTypeParams>
		<mkRights set="method" line="301"><f a="r">
	<c path="String"/>
	<e path="haxe.rtti.Rights"/>
</f></mkRights>
		<xerror set="method" line="311"><f a="c">
	<c path="haxe.xml.Fast"/>
	<d/>
</f></xerror>
		<xroot set="method" line="315"><f a="x">
	<c path="haxe.xml.Fast"/>
	<x path="Void"/>
</f></xroot>
		<processElement public="1" set="method" line="321"><f a="x">
	<c path="Xml"/>
	<e path="haxe.rtti.TypeTree"/>
</f></processElement>
		<xmeta set="method" line="332"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.MetaData"/>
</f></xmeta>
		<xoverloads set="method" line="343"><f a="x">
	<c path="haxe.xml.Fast"/>
	<c path="List"><t path="haxe.rtti.ClassField"/></c>
</f></xoverloads>
		<xpath set="method" line="351"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.PathParams"/>
</f></xpath>
		<xclass set="method" line="362"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Classdef"/>
</f></xclass>
		<xclassfield set="method" line="402">
			<f a="x:?defPublic" v=":false">
				<c path="haxe.xml.Fast"/>
				<x path="Bool"/>
				<t path="haxe.rtti.ClassField"/>
			</f>
			<meta><m n=":value"><e>{ defPublic : false }</e></m></meta>
		</xclassfield>
		<xenum set="method" line="432"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Enumdef"/>
</f></xenum>
		<xenumfield set="method" line="457"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.EnumField"/>
</f></xenumfield>
		<xabstract set="method" line="487"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Abstractdef"/>
</f></xabstract>
		<xtypedef set="method" line="526"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Typedef"/>
</f></xtypedef>
		<xtype set="method" line="554"><f a="x">
	<c path="haxe.xml.Fast"/>
	<e path="haxe.rtti.CType"/>
</f></xtype>
		<xtypeparams set="method" line="610"><f a="x">
	<c path="haxe.xml.Fast"/>
	<c path="List"><e path="haxe.rtti.CType"/></c>
</f></xtypeparams>
		<defplat set="method" line="617"><f a=""><c path="List"><c path="String"/></c></f></defplat>
		<new public="1" set="method" line="37"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[XmlParser processes the runtime type information (RTTI) which
	is stored as a XML string in a static field `__rtti`.
	
	@see <https://haxe.org/manual/cr-rtti.html>]]></haxe_doc>
	</class>
	<class path="haxe.unit.TestCase" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/unit/TestCase.hx">
		<currentTest public="1">
			<c path="haxe.unit.TestStatus"/>
			<haxe_doc>The current test status of the TestRunner.</haxe_doc>
		</currentTest>
		<setup public="1" set="method" line="65">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Override this method to execute code before the test runs.</haxe_doc>
		</setup>
		<tearDown public="1" set="method" line="71">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Override this method to execute code after the test ran.</haxe_doc>
		</tearDown>
		<print public="1" set="method" line="74"><f a="v">
	<d/>
	<x path="Void"/>
</f></print>
		<assertTrue public="1" set="method" line="81">
			<f a="b:?c">
				<x path="Bool"/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Succeeds if `b` is `true`.</haxe_doc>
		</assertTrue>
		<assertFalse public="1" set="method" line="94">
			<f a="b:?c">
				<x path="Bool"/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Succeeds if `b` is `false`.</haxe_doc>
		</assertFalse>
		<assertEquals public="1" params="T" set="method" line="107">
			<f a="expected:actual:?c">
				<c path="assertEquals.T"/>
				<c path="assertEquals.T"/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Succeeds if `expected` and `actual` are equal.</haxe_doc>
		</assertEquals>
		<new public="1" set="method" line="59"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[This unit test class should be extended to create test cases. Each test 
	method created in this extended class should start with the name "test".

	These test methods should call the assertion methods:

	 * `assertTrue(a)`: Succeeds if `a` is `true`.
	 * `assertFalse(a)`: Succeeds if `a` is `false`.
	 * `assertEquals(expected, actual)`: Succeeds if `expected` and `actual`
	   are equal.

	```haxe
	class MyTestCase extends haxe.unit.TestCase {
		function testBasic() {
			assertEquals("A", "A");
		}
	}
	```

	The TestCase can be tested using `TestRunner`. 

	To run code before or after the test, override the functions `setup` 
	and `tearDown`.

	@see <https://haxe.org/manual/std-unit-testing.html>]]></haxe_doc>
		<meta>
			<m n=":keepSub"/>
			<m n=":publicFields"/>
		</meta>
	</class>
	<class path="haxe.unit.TestResult" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/unit/TestResult.hx">
		<m_tests><c path="List"><c path="haxe.unit.TestStatus"/></c></m_tests>
		<success public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>`true` if the unit test succesfully executed the test cases.</haxe_doc>
		</success>
		<add public="1" set="method" line="40"><f a="t">
	<c path="haxe.unit.TestStatus"/>
	<x path="Void"/>
</f></add>
		<toString public="1" set="method" line="49">
			<f a=""><c path="String"/></f>
			<haxe_doc>String representation from the result of the unit test.</haxe_doc>
		</toString>
		<new public="1" set="method" line="35"><f a=""><x path="Void"/></f></new>
		<haxe_doc>TestResult contains the result of the executed unit tests.</haxe_doc>
	</class>
	<class path="haxe.unit.TestRunner" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/unit/TestRunner.hx">
		<print public="1" set="dynamic" line="60" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Prints the given object/value.
		
		 * Flash outputs the result in a new `TextField` on stage.
		 * JavaScript outputs the result using `console.log`.
		 * Other targets use native `print` to output the result.

		This function is `dynamic` so it can be overriden in custom setups.</haxe_doc>
		</print>
		<customTrace set="method" line="104" static="1"><f a="v:?p">
	<unknown/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></customTrace>
		<result public="1" set="null">
			<c path="haxe.unit.TestResult"/>
			<haxe_doc>The unit test results. Available after the `run()` is called.</haxe_doc>
		</result>
		<cases><c path="List"><c path="haxe.unit.TestCase"/></c></cases>
		<add public="1" set="method" line="116">
			<f a="c">
				<c path="haxe.unit.TestCase"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Add TestCase instances to the unit test.</haxe_doc>
		</add>
		<run public="1" set="method" line="125">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Runs the unit tests and prints the results.
		
		@return `true` if the unit test succesfully executed the test cases.</haxe_doc>
		</run>
		<runCase set="method" line="134"><f a="t">
	<c path="haxe.unit.TestCase"/>
	<x path="Void"/>
</f></runCase>
		<new public="1" set="method" line="108"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[This class runs unit test cases and prints the result.
	
	```haxe
	var r = new haxe.unit.TestRunner();
	r.add(new MyTestCase());
	// add other TestCases here
	
	// finally, run the tests
	r.run();
	```
	
	@see <https://haxe.org/manual/std-unit-testing.html>]]></haxe_doc>
	</class>
	<class path="haxe.unit.TestStatus" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/unit/TestStatus.hx">
		<done public="1">
			<x path="Bool"/>
			<haxe_doc>`true` when the unit test is executed.</haxe_doc>
		</done>
		<success public="1">
			<x path="Bool"/>
			<haxe_doc>`true` when succesfully unit tested.</haxe_doc>
		</success>
		<error public="1">
			<c path="String"/>
			<haxe_doc>The error message of the unit test method.</haxe_doc>
		</error>
		<method public="1">
			<c path="String"/>
			<haxe_doc>The method name of the unit test.</haxe_doc>
		</method>
		<classname public="1">
			<c path="String"/>
			<haxe_doc>The class name of the unit test.</haxe_doc>
		</classname>
		<posInfos public="1">
			<t path="haxe.PosInfos"/>
			<haxe_doc>The position information of the unit test.</haxe_doc>
		</posInfos>
		<backtrace public="1">
			<c path="String"/>
			<haxe_doc>The representation of the stack exception.</haxe_doc>
		</backtrace>
		<new public="1" set="method" line="68"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[The status information of a unit test case method.

	@see <https://haxe.org/manual/std-unit-testing.html>]]></haxe_doc>
	</class>
	<typedef path="haxe.web.DispatchConfig" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch"><a>
	<rules><d/></rules>
	<obj><d/></obj>
</a></typedef>
	<typedef path="haxe.web.Lock" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch"><c path="haxe.web.Lock.T"/></typedef>
	<enum path="haxe.web.MatchRule" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch">
		<MRInt/>
		<MRBool/>
		<MRFloat/>
		<MRString/>
		<MRDate/>
		<MREnum a="e"><c path="String"/></MREnum>
		<MRDispatch/>
		<MRSpod a="c:lock">
			<c path="String"/>
			<x path="Bool"/>
		</MRSpod>
		<MROpt a="r"><e path="haxe.web.MatchRule"/></MROpt>
	</enum>
	<enum path="haxe.web.DispatchRule" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch">
		<DRMatch a="r"><e path="haxe.web.MatchRule"/></DRMatch>
		<DRMult a="r"><c path="Array"><e path="haxe.web.MatchRule"/></c></DRMult>
		<DRArgs a="r:args:opt">
			<e path="haxe.web.DispatchRule"/>
			<c path="Array"><a>
	<rule><e path="haxe.web.MatchRule"/></rule>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<x path="Bool"/>
		</DRArgs>
		<DRMeta a="r"><e path="haxe.web.DispatchRule"/></DRMeta>
	</enum>
	<enum path="haxe.web.DispatchError" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch">
		<DENotFound a="part"><c path="String"/></DENotFound>
		<DEInvalidValue/>
		<DEMissing/>
		<DEMissingParam a="p"><c path="String"/></DEMissingParam>
		<DETooManyValues/>
	</enum>
	<class path="haxe.web.Redirect" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch"><new public="1" set="method" line="65"><f a=""><x path="Void"/></f></new></class>
	<class path="haxe.web.Dispatch" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/web/Dispatch.hx">
		<GET_RULES static="1"><c path="Array"><c path="Array"><a>
	<rule><e path="haxe.web.MatchRule"/></rule>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c></c></GET_RULES>
		<make public="1" set="method" static="1"><f a="obj">
	<a/>
	<t path="haxe.web.DispatchConfig"/>
</f></make>
		<run public="1" set="method" static="1"><f a="url:params:obj">
	<c path="String"/>
	<x path="Map">
		<c path="String"/>
		<c path="String"/>
	</x>
	<a/>
	<x path="Void"/>
</f></run>
		<extractConfig set="method" line="468" static="1"><f a="obj">
	<d/>
	<t path="haxe.web.DispatchConfig"/>
</f></extractConfig>
		<parts public="1"><c path="Array"><c path="String"/></c></parts>
		<params public="1"><x path="Map">
	<c path="String"/>
	<c path="String"/>
</x></params>
		<name public="1"><c path="String"/></name>
		<cfg public="1"><t path="haxe.web.DispatchConfig"/></cfg>
		<subDispatch><x path="Bool"/></subDispatch>
		<dispatch public="1" set="method"><f a="obj">
	<a/>
	<x path="Void"/>
</f></dispatch>
		<getParams public="1" set="method"><f a=""><d/></f></getParams>
		<onMeta public="1" set="dynamic" line="103"><f a="v:args">
	<c path="String"/>
	<t path="Null"><c path="Array"><d/></c></t>
	<x path="Void"/>
</f></onMeta>
		<resolveName set="method" line="106"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></resolveName>
		<runtimeDispatch public="1" set="method" line="110"><f a="cfg">
	<t path="haxe.web.DispatchConfig"/>
	<x path="Void"/>
</f></runtimeDispatch>
		<redirect public="1" set="method" line="138"><f a="url:?params">
	<c path="String"/>
	<x path="Map">
		<c path="String"/>
		<c path="String"/>
	</x>
	<x path="Void"/>
</f></redirect>
		<runtimeGetParams public="1" set="method" line="146"><f a="cfgIndex">
	<x path="Int"/>
	<d/>
</f></runtimeGetParams>
		<match set="method" line="152"><f a="v:r:opt">
	<c path="String"/>
	<e path="haxe.web.MatchRule"/>
	<x path="Bool"/>
	<d/>
</f></match>
		<checkParams set="method" line="217"><f a="params:opt">
	<c path="Array"><a>
	<rule><e path="haxe.web.MatchRule"/></rule>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
	<x path="Bool"/>
	<a/>
</f></checkParams>
		<loop set="method" line="231"><f a="args:r">
	<c path="Array"><d/></c>
	<e path="haxe.web.DispatchRule"/>
	<x path="Void"/>
</f></loop>
		<new public="1" set="method" line="77"><f a="url:params">
	<c path="String"/>
	<x path="Map">
		<c path="String"/>
		<c path="String"/>
	</x>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="haxe.xml.Filter" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Check.hx" module="haxe.xml.Check">
		<FInt/>
		<FBool/>
		<FEnum a="values"><c path="Array"><c path="String"/></c></FEnum>
		<FReg a="matcher"><c path="EReg"/></FReg>
	</enum>
	<enum path="haxe.xml.Attrib" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Check.hx" module="haxe.xml.Check"><Att a="name:?filter:?defvalue">
	<c path="String"/>
	<e path="haxe.xml.Filter"/>
	<c path="String"/>
</Att></enum>
	<enum path="haxe.xml.Rule" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Check.hx" module="haxe.xml.Check">
		<RNode a="name:?attribs:?childs">
			<c path="String"/>
			<c path="Array"><e path="haxe.xml.Attrib"/></c>
			<e path="haxe.xml.Rule"/>
		</RNode>
		<RData a="?filter"><e path="haxe.xml.Filter"/></RData>
		<RMulti a="rule:?atLeastOne">
			<e path="haxe.xml.Rule"/>
			<x path="Bool"/>
		</RMulti>
		<RList a="rules:?ordered">
			<c path="Array"><e path="haxe.xml.Rule"/></c>
			<x path="Bool"/>
		</RList>
		<RChoice a="choices"><c path="Array"><e path="haxe.xml.Rule"/></c></RChoice>
		<ROptional a="rule"><e path="haxe.xml.Rule"/></ROptional>
	</enum>
	<enum path="haxe.xml._Check.CheckResult" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Check.hx" private="1" module="haxe.xml.Check">
		<CMatch/>
		<CMissing a="r"><e path="haxe.xml.Rule"/></CMissing>
		<CExtra a="x"><c path="Xml"/></CExtra>
		<CElementExpected a="name:x">
			<c path="String"/>
			<c path="Xml"/>
		</CElementExpected>
		<CDataExpected a="x"><c path="Xml"/></CDataExpected>
		<CExtraAttrib a="att:x">
			<c path="String"/>
			<c path="Xml"/>
		</CExtraAttrib>
		<CMissingAttrib a="att:x">
			<c path="String"/>
			<c path="Xml"/>
		</CMissingAttrib>
		<CInvalidAttrib a="att:x:f">
			<c path="String"/>
			<c path="Xml"/>
			<e path="haxe.xml.Filter"/>
		</CInvalidAttrib>
		<CInvalidData a="x:f">
			<c path="Xml"/>
			<e path="haxe.xml.Filter"/>
		</CInvalidData>
		<CInElement a="x:r">
			<c path="Xml"/>
			<e path="haxe.xml._Check.CheckResult"/>
		</CInElement>
	</enum>
	<class path="haxe.xml.Check" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Check.hx">
		<blanks expr="~/^[ 
	]*$/" line="59" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[ 
	]*$/</e></m></meta>
		</blanks>
		<isBlank set="method" line="61" static="1"><f a="x">
	<c path="Xml"/>
	<x path="Bool"/>
</f></isBlank>
		<filterMatch set="method" line="65" static="1"><f a="s:f">
	<c path="String"/>
	<e path="haxe.xml.Filter"/>
	<x path="Bool"/>
</f></filterMatch>
		<isNullable set="method" line="79" static="1"><f a="r">
	<e path="haxe.xml.Rule"/>
	<x path="Bool"/>
</f></isNullable>
		<check set="method" line="102" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<e path="haxe.xml._Check.CheckResult"/>
</f></check>
		<checkList set="method" line="167" static="1"><f a="it:r">
	<t path="Iterator"><c path="Xml"/></t>
	<e path="haxe.xml.Rule"/>
	<e path="haxe.xml._Check.CheckResult"/>
</f></checkList>
		<makeWhere set="method" line="240" static="1"><f a="path">
	<c path="Array"><c path="Xml"/></c>
	<c path="String"/>
</f></makeWhere>
		<makeString set="method" line="255" static="1"><f a="x">
	<c path="Xml"/>
	<c path="String"/>
</f></makeString>
		<makeRule set="method" line="264" static="1"><f a="r">
	<e path="haxe.xml.Rule"/>
	<c path="String"/>
</f></makeRule>
		<makeError set="method" line="275" static="1"><f a="m:?path">
	<e path="haxe.xml._Check.CheckResult"/>
	<c path="Array"><c path="Xml"/></c>
	<c path="String"/>
</f></makeError>
		<checkNode public="1" set="method" line="305" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<x path="Void"/>
</f></checkNode>
		<checkDocument public="1" set="method" line="312" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<x path="Void"/>
</f></checkDocument>
	</class>
	<class path="haxe.xml._Fast.NodeAccess" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="32"><f a="name">
	<c path="String"/>
	<c path="haxe.xml.Fast"/>
</f></resolve>
		<new public="1" set="method" line="28"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.xml.Fast"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.AttribAccess" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="51"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></resolve>
		<new public="1" set="method" line="47"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="String"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.HasAttribAccess" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="70"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></resolve>
		<new public="1" set="method" line="66"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><x path="Bool"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.HasNodeAccess" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="86"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></resolve>
		<new public="1" set="method" line="82"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><x path="Bool"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.NodeListAccess" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="100"><f a="name">
	<c path="String"/>
	<c path="List"><c path="haxe.xml.Fast"/></c>
</f></resolve>
		<new public="1" set="method" line="96"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="List"><c path="haxe.xml.Fast"/></c></haxe_dynamic>
	</class>
	<class path="haxe.xml.Fast" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Fast.hx">
		<x public="1" set="null">
			<c path="Xml"/>
			<haxe_doc>The current corresponding `Xml` node.</haxe_doc>
		</x>
		<name public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>The name of the current element. This is the same as `Xml.nodeName`.</haxe_doc>
		</name>
		<innerData public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>The inner PCDATA or CDATA of the node.

		An exception is thrown if there is no data or if there not only data
		but also other nodes.</haxe_doc>
		</innerData>
		<innerHTML public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>The XML string built with all the sub nodes, excluding the current one.</haxe_doc>
		</innerHTML>
		<node public="1" set="null">
			<c path="haxe.xml._Fast.NodeAccess"/>
			<haxe_doc><![CDATA[Access to the first sub element with the given name.

		An exception is thrown if the element doesn't exists.
		Use `hasNode` to check the existence of a node.

		```haxe
		var fast = new haxe.xml.Fast(Xml.parse("<user><name>John</name></user>"));
		var user = fast.node.user;
		var name = user.node.name;
		trace(name.innerData); // John

		// Uncaught Error: Document is missing element password
		var password = user.node.password;
		```]]></haxe_doc>
		</node>
		<nodes public="1" set="null">
			<c path="haxe.xml._Fast.NodeListAccess"/>
			<haxe_doc><![CDATA[Access to the List of elements with the given name.
		```haxe
		var fast = new haxe.xml.Fast(Xml.parse("<users>
				<user name='John'/>
				<user name='Andy'/>
				<user name='Dan'/>
		</users>"));

		var users = fast.node.users;
		for(user in users.nodes.user) {
				trace(user.att.name);
		}
		```]]></haxe_doc>
		</nodes>
		<att public="1" set="null">
			<c path="haxe.xml._Fast.AttribAccess"/>
			<haxe_doc><![CDATA[Access to a given attribute.

		An exception is thrown if the attribute doesn't exists.
		Use `has` to check the existence of an attribute.

		```haxe
		var f = new haxe.xml.Fast(Xml.parse("<user name='Mark'></user>"));
		var user = f.node.user;
		if (user.has.name) {
			trace(user.att.name); // Mark
		}
		```]]></haxe_doc>
		</att>
		<has public="1" set="null">
			<c path="haxe.xml._Fast.HasAttribAccess"/>
			<haxe_doc>Check the existence of an attribute with the given name.</haxe_doc>
		</has>
		<hasNode public="1" set="null">
			<c path="haxe.xml._Fast.HasNodeAccess"/>
			<haxe_doc><![CDATA[Check the existence of a sub node with the given name.

		```haxe
		var f = new haxe.xml.Fast(Xml.parse("<user><age>31</age></user>"));
		var user = f.node.user;
		if (user.hasNode.age) {
			trace(user.node.age.innerData); // 31
		}
		```]]></haxe_doc>
		</hasNode>
		<elements public="1" get="accessor" set="null">
			<t path="Iterator"><c path="haxe.xml.Fast"/></t>
			<haxe_doc>The list of all sub-elements which are the nodes with type `Xml.Element`.</haxe_doc>
		</elements>
		<get_name set="method" line="222"><f a=""><c path="String"/></f></get_name>
		<get_innerData set="method" line="226"><f a=""><c path="String"/></f></get_innerData>
		<get_innerHTML set="method" line="248"><f a=""><c path="String"/></f></get_innerHTML>
		<get_elements set="method" line="255"><f a=""><a>
	<next><f a=""><c path="haxe.xml.Fast"/></f></next>
	<hasNext><f a=""><x path="Bool"/></f></hasNext>
</a></f></get_elements>
		<new public="1" set="method" line="211"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>The `haxe.xml.Fast` API helps providing a fast dot-syntax access to the
	most common `Xml` methods.</haxe_doc>
	</class>
	<class path="haxe.xml._Parser.S" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Parser.hx" private="1" module="haxe.xml.Parser" extern="1">
		<IGNORE_SPACES public="1" get="inline" set="null" expr="0" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</IGNORE_SPACES>
		<BEGIN public="1" get="inline" set="null" expr="1" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</BEGIN>
		<BEGIN_NODE public="1" get="inline" set="null" expr="2" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</BEGIN_NODE>
		<TAG_NAME public="1" get="inline" set="null" expr="3" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</TAG_NAME>
		<BODY public="1" get="inline" set="null" expr="4" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BODY>
		<ATTRIB_NAME public="1" get="inline" set="null" expr="5" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</ATTRIB_NAME>
		<EQUALS public="1" get="inline" set="null" expr="6" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</EQUALS>
		<ATTVAL_BEGIN public="1" get="inline" set="null" expr="7" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</ATTVAL_BEGIN>
		<ATTRIB_VAL public="1" get="inline" set="null" expr="8" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</ATTRIB_VAL>
		<CHILDS public="1" get="inline" set="null" expr="9" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</CHILDS>
		<CLOSE public="1" get="inline" set="null" expr="10" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</CLOSE>
		<WAIT_END public="1" get="inline" set="null" expr="11" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>11</e></m></meta>
		</WAIT_END>
		<WAIT_END_RET public="1" get="inline" set="null" expr="12" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</WAIT_END_RET>
		<PCDATA public="1" get="inline" set="null" expr="13" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>13</e></m></meta>
		</PCDATA>
		<HEADER public="1" get="inline" set="null" expr="14" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>14</e></m></meta>
		</HEADER>
		<COMMENT public="1" get="inline" set="null" expr="15" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>15</e></m></meta>
		</COMMENT>
		<DOCTYPE public="1" get="inline" set="null" expr="16" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</DOCTYPE>
		<CDATA public="1" get="inline" set="null" expr="17" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>17</e></m></meta>
		</CDATA>
		<ESCAPE public="1" get="inline" set="null" expr="18" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>18</e></m></meta>
		</ESCAPE>
	</class>
	<class path="haxe.xml.XmlParserException" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Parser.hx" module="haxe.xml.Parser">
		<message public="1">
			<c path="String"/>
			<haxe_doc>* the XML parsing error message</haxe_doc>
		</message>
		<lineNumber public="1">
			<x path="Int"/>
			<haxe_doc>* the line number at which the XML parsing error occurred</haxe_doc>
		</lineNumber>
		<positionAtLine public="1">
			<x path="Int"/>
			<haxe_doc>* the character position in the reported line at which the parsing error occurred</haxe_doc>
		</positionAtLine>
		<position public="1">
			<x path="Int"/>
			<haxe_doc>* the character position in the XML string at which the parsing error occurred</haxe_doc>
		</position>
		<xml public="1">
			<c path="String"/>
			<haxe_doc>* the invalid XML string</haxe_doc>
		</xml>
		<toString public="1" set="method" line="96"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="76"><f a="message:xml:position">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.xml.Parser" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Parser.hx">
		<escapes expr="{
	var h = new haxe.ds.StringMap();
	h.set(&quot;lt&quot;, &quot;&lt;&quot;);
	h.set(&quot;gt&quot;, &quot;&gt;&quot;);
	h.set(&quot;amp&quot;, &quot;&amp;&quot;);
	h.set(&quot;quot&quot;, &quot;\&quot;&quot;);
	h.set(&quot;apos&quot;, &quot;&apos;&quot;);
	h;
}" line="104" static="1">
			<c path="haxe.ds.StringMap"><c path="String"/></c>
			<meta><m n=":value"><e><![CDATA[{
	var h = new haxe.ds.StringMap();
	h.set("lt", "<");
	h.set("gt", ">");
	h.set("amp", "&");
	h.set("quot", "\"");
	h.set("apos", "'");
	h;
}]]></e></m></meta>
		</escapes>
		<parse public="1" set="method" line="119" static="1">
			<f a="str:?strict" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="Xml"/>
			</f>
			<meta><m n=":value"><e>{ strict : false }</e></m></meta>
			<haxe_doc>* Parses the String into an XML Document. Set strict parsing to true in order to enable a strict check of XML attributes and entities.
	 *
	 * @throws haxe.xml.XmlParserException</haxe_doc>
		</parse>
		<doParse set="method" line="126" static="1">
			<f a="str:strict:?p:?parent" v="::0:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="Xml"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ p : 0 }</e></m></meta>
		</doParse>
		<isValidChar get="inline" set="null" line="448" static="1"><f a="c">
	<x path="Int"/>
	<x path="Bool"/>
</f></isValidChar>
	</class>
	<class path="haxe.xml.Printer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Printer.hx">
		<print public="1" set="method" line="35" static="1">
			<f a="xml:?pretty" v=":false">
				<c path="Xml"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ pretty : false }</e></m></meta>
			<haxe_doc>Convert `Xml` to string representation.
		
		Set `pretty` to `true` to prettify the result.</haxe_doc>
		</print>
		<output><c path="StringBuf"/></output>
		<pretty><x path="Bool"/></pretty>
		<writeNode set="method" line="49"><f a="value:tabs">
	<c path="Xml"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeNode>
		<write get="inline" set="null" line="104"><f a="input">
	<c path="String"/>
	<x path="Void"/>
</f></write>
		<newline get="inline" set="null" line="108"><f a=""><x path="Void"/></f></newline>
		<hasChildren set="method" line="114"><f a="value">
	<c path="Xml"/>
	<x path="Bool"/>
</f></hasChildren>
		<new set="method" line="44"><f a="pretty">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>This class provides utility methods to convert Xml instances to 
	String representation.</haxe_doc>
	</class>
	<class path="haxe.xml.Proxy" params="Const:T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Proxy.hx">
		<__f><f a="">
	<c path="String"/>
	<c path="haxe.xml.Proxy.T"/>
</f></__f>
		<resolve public="1" set="method" line="49"><f a="k">
	<c path="String"/>
	<c path="haxe.xml.Proxy.T"/>
</f></resolve>
		<new public="1" set="method" line="45"><f a="f">
	<f a="">
		<c path="String"/>
		<c path="haxe.xml.Proxy.T"/>
	</f>
	<x path="Void"/>
</f></new>
		<haxe_doc><![CDATA[This proxy can be inherited with an XML file name parameter.
	It will	only allow access to fields which corresponds to an "id" attribute
	value in the XML file :

	```haxe
	class MyXml extends haxe.xml.Proxy<"my.xml", MyStructure> {
	}
	
	var h = new haxe.ds.StringMap<MyStructure>();
	// ... fill h with "my.xml" content
	var m = new MyXml(h.get);
	trace(m.myNode.structField);
	// Access to "myNode" is only possible if you have an id="myNode" attribute
	// in your XML, and completion works as well.
	```]]></haxe_doc>
	</class>
	<class path="haxe.zip.Compress" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/haxe/zip/Compress.hx">
		<run public="1" set="method" line="72" static="1"><f a="s:level">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<deflater><c path="java.util.zip.Deflater"/></deflater>
		<mode><x path="Int"/></mode>
		<finish expr="false" line="29">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</finish>
		<execute public="1" set="method" line="38"><f a="src:srcPos:dst:dstPos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></execute>
		<setFlushMode public="1" set="method" line="50"><f a="f">
	<e path="haxe.zip.FlushMode"/>
	<x path="Void"/>
</f></setFlushMode>
		<close public="1" set="method" line="67"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="31"><f a="level">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="haxe.zip.ExtraField" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/Entry.hx" module="haxe.zip.Entry">
		<FUnknown a="tag:bytes">
			<x path="Int"/>
			<c path="haxe.io.Bytes"/>
		</FUnknown>
		<FInfoZipUnicodePath a="name:crc">
			<c path="String"/>
			<x path="Int"/>
		</FInfoZipUnicodePath>
		<FUtf8/>
	</enum>
	<typedef path="haxe.zip.Entry" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/Entry.hx"><a>
	<fileTime><c path="Date"/></fileTime>
	<fileSize><x path="Int"/></fileSize>
	<fileName><c path="String"/></fileName>
	<extraFields>
		<t path="Null"><t path="Null"><c path="List"><e path="haxe.zip.ExtraField"/></c></t></t>
		<meta><m n=":optional"/></meta>
	</extraFields>
	<dataSize><x path="Int"/></dataSize>
	<data><t path="Null"><c path="haxe.io.Bytes"/></t></data>
	<crc32><t path="Null"><x path="Int"/></t></crc32>
	<compressed><x path="Bool"/></compressed>
</a></typedef>
	<enum path="haxe.zip.FlushMode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/FlushMode.hx">
		<NO/>
		<SYNC/>
		<FULL/>
		<FINISH/>
		<BLOCK/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.zip.Huffman" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/Huffman.hx">
		<Found a="i"><x path="Int"/></Found>
		<NeedBit a="left:right">
			<e path="haxe.zip.Huffman"/>
			<e path="haxe.zip.Huffman"/>
		</NeedBit>
		<NeedBits a="n:table">
			<x path="Int"/>
			<c path="Array"><e path="haxe.zip.Huffman"/></c>
		</NeedBits>
	</enum>
	<class path="haxe.zip.HuffTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/Huffman.hx" module="haxe.zip.Huffman">
		<treeDepth set="method" line="35"><f a="t">
	<e path="haxe.zip.Huffman"/>
	<x path="Int"/>
</f></treeDepth>
		<treeCompress set="method" line="46"><f a="t">
	<e path="haxe.zip.Huffman"/>
	<e path="haxe.zip.Huffman"/>
</f></treeCompress>
		<treeWalk set="method" line="63"><f a="table:p:cd:d:t">
	<c path="Array"><e path="haxe.zip.Huffman"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
	<x path="Void"/>
</f></treeWalk>
		<treeMake set="method" line="76"><f a="bits:maxbits:v:len">
	<c path="haxe.ds.IntMap"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
</f></treeMake>
		<make public="1" set="method" line="86"><f a="lengths:pos:nlengths:maxbits">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
</f></make>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.zip._InflateImpl.Window" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/InflateImpl.hx" private="1" module="haxe.zip.InflateImpl">
		<SIZE public="1" get="inline" set="null" expr="1 &lt;&lt; 15" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e><![CDATA[1 << 15]]></e></m></meta>
		</SIZE>
		<BUFSIZE public="1" get="inline" set="null" expr="1 &lt;&lt; 16" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e><![CDATA[1 << 16]]></e></m></meta>
		</BUFSIZE>
		<buffer public="1"><c path="haxe.io.Bytes"/></buffer>
		<pos public="1"><x path="Int"/></pos>
		<crc><c path="haxe.crypto.Adler32"/></crc>
		<slide public="1" set="method" line="41"><f a=""><x path="Void"/></f></slide>
		<addBytes public="1" set="method" line="49"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<addByte public="1" set="method" line="55"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<getLastChar public="1" set="method" line="61"><f a=""><x path="Int"/></f></getLastChar>
		<available public="1" set="method" line="65"><f a=""><x path="Int"/></f></available>
		<checksum public="1" set="method" line="69"><f a=""><c path="haxe.crypto.Adler32"/></f></checksum>
		<new public="1" set="method" line="35"><f a="hasCrc">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="haxe.zip._InflateImpl.State" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/InflateImpl.hx" private="1" module="haxe.zip.InflateImpl">
		<Head/>
		<Block/>
		<CData/>
		<Flat/>
		<Crc/>
		<Dist/>
		<DistOne/>
		<Done/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="haxe.zip.InflateImpl" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/InflateImpl.hx">
		<LEN_EXTRA_BITS_TBL expr="[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, -1, -1]" line="92" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, -1, -1]</e></m></meta>
		</LEN_EXTRA_BITS_TBL>
		<LEN_BASE_VAL_TBL expr="[3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258]" line="93" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258]</e></m></meta>
		</LEN_BASE_VAL_TBL>
		<DIST_EXTRA_BITS_TBL expr="[0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, -1, -1]" line="94" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, -1, -1]</e></m></meta>
		</DIST_EXTRA_BITS_TBL>
		<DIST_BASE_VAL_TBL expr="[1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]" line="95" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]</e></m></meta>
		</DIST_BASE_VAL_TBL>
		<CODE_LENGTHS_POS expr="[16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]" line="96" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]</e></m></meta>
		</CODE_LENGTHS_POS>
		<FIXED_HUFFMAN expr="null" line="114" static="1">
			<e path="haxe.zip.Huffman"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</FIXED_HUFFMAN>
		<run public="1" set="method" line="363" static="1">
			<f a="i:?bufsize" v=":65536">
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ bufsize : 65536 }</e></m></meta>
		</run>
		<nbits><x path="Int"/></nbits>
		<bits><x path="Int"/></bits>
		<state><e path="haxe.zip._InflateImpl.State"/></state>
		<final><x path="Bool"/></final>
		<huffman><e path="haxe.zip.Huffman"/></huffman>
		<huffdist><t path="Null"><e path="haxe.zip.Huffman"/></t></huffdist>
		<htools><c path="haxe.zip.HuffTools"/></htools>
		<len><x path="Int"/></len>
		<dist><x path="Int"/></dist>
		<needed><x path="Int"/></needed>
		<output><c path="haxe.io.Bytes"/></output>
		<outpos><x path="Int"/></outpos>
		<input><c path="haxe.io.Input"/></input>
		<lengths><c path="Array"><x path="Int"/></c></lengths>
		<window><c path="haxe.zip._InflateImpl.Window"/></window>
		<buildFixedHuffman set="method" line="136"><f a=""><e path="haxe.zip.Huffman"/></f></buildFixedHuffman>
		<readBytes public="1" set="method" line="146"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<getBits set="method" line="156"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getBits>
		<getBit set="method" line="167"><f a=""><x path="Bool"/></f></getBit>
		<getRevBits set="method" line="178"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getRevBits>
		<resetBits set="method" line="187"><f a=""><x path="Void"/></f></resetBits>
		<addBytes set="method" line="192"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<addByte set="method" line="199"><f a="b">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<addDistOne set="method" line="206"><f a="n">
	<x path="Int"/>
	<x path="Void"/>
</f></addDistOne>
		<addDist set="method" line="212"><f a="d:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addDist>
		<applyHuffman set="method" line="216"><f a="h">
	<e path="haxe.zip.Huffman"/>
	<x path="Int"/>
</f></applyHuffman>
		<inflateLengths set="method" line="224"><f a="a:max">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></inflateLengths>
		<inflateLoop set="method" line="253"><f a=""><x path="Bool"/></f></inflateLoop>
		<new public="1" set="method" line="116">
			<f a="i:?header:?crc" v=":true:true">
				<c path="haxe.io.Input"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ crc : true, header : true }</e></m></meta>
		</new>
		<haxe_doc>A pure Haxe implementation of the ZLIB Inflate algorithm which allows reading compressed data without any platform-specific support.</haxe_doc>
	</class>
	<class path="haxe.zip.Reader" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/Reader.hx">
		<readZip public="1" set="method" line="190" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="List"><t path="haxe.zip.Entry"/></c>
</f></readZip>
		<unzip public="1" set="method" line="195" static="1"><f a="f">
	<t path="haxe.zip.Entry"/>
	<t path="Null"><c path="haxe.io.Bytes"/></t>
</f></unzip>
		<i><c path="haxe.io.Input"/></i>
		<readZipDate set="method" line="35"><f a=""><c path="Date"/></f></readZipDate>
		<readExtraFields set="method" line="47"><f a="length">
	<x path="Int"/>
	<c path="List"><e path="haxe.zip.ExtraField"/></c>
</f></readExtraFields>
		<readEntryHeader public="1" set="method" line="75"><f a=""><t path="haxe.zip.Entry"/></f></readEntryHeader>
		<read public="1" set="method" line="118"><f a=""><c path="List"><t path="haxe.zip.Entry"/></c></f></read>
		<new public="1" set="method" line="31"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.zip.Tools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/Tools.hx"><compress public="1" set="method" line="26" static="1"><f a="f:level">
	<t path="haxe.zip.Entry"/>
	<x path="Int"/>
	<x path="Void"/>
</f></compress></class>
	<class path="haxe.zip.Uncompress" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/haxe/zip/Uncompress.hx">
		<run public="1" set="method" line="40" static="1"><f a="src:?bufsize">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<execute public="1" set="method" line="30"><f a="src:srcPos:dst:dstPos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></execute>
		<setFlushMode public="1" set="method" line="34"><f a="f">
	<e path="haxe.zip.FlushMode"/>
	<x path="Void"/>
</f></setFlushMode>
		<close public="1" set="method" line="37"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="26"><f a="?windowBits">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.zip.Writer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/Writer.hx">
		<CENTRAL_DIRECTORY_RECORD_FIELDS_SIZE get="inline" set="null" expr="46" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>46</e></m></meta>
		</CENTRAL_DIRECTORY_RECORD_FIELDS_SIZE>
		<LOCAL_FILE_HEADER_FIELDS_SIZE get="inline" set="null" expr="30" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>30</e></m></meta>
		</LOCAL_FILE_HEADER_FIELDS_SIZE>
		<o><c path="haxe.io.Output"/></o>
		<files><c path="List"><a>
	<size><x path="Int"/></size>
	<name><c path="String"/></name>
	<fields><c path="haxe.io.Bytes"/></fields>
	<date><c path="Date"/></date>
	<crc><x path="Int"/></crc>
	<compressed><x path="Bool"/></compressed>
	<clen><x path="Int"/></clen>
</a></c></files>
		<writeZipDate set="method" line="50"><f a="date">
	<c path="Date"/>
	<x path="Void"/>
</f></writeZipDate>
		<writeEntryHeader public="1" set="method" line="61"><f a="f">
	<t path="haxe.zip.Entry"/>
	<x path="Void"/>
</f></writeEntryHeader>
		<write public="1" set="method" line="121"><f a="files">
	<c path="List"><t path="haxe.zip.Entry"/></c>
	<x path="Void"/>
</f></write>
		<writeCDR public="1" set="method" line="129"><f a=""><x path="Void"/></f></writeCDR>
		<new public="1" set="method" line="45"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="java.Boot" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/Boot.hx" extern="1"><meta><m n=":dox"><e>hide</e></m></meta></class>
	<class path="java.Lib" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/Lib.hx">
		<nativeArray public="1" params="T" get="inline" set="null" line="38" static="1">
			<f a="arr:equalLengthRequired">
				<c path="Array"><c path="nativeArray.T"/></c>
				<x path="Bool"/>
				<c path="java.NativeArray"><c path="nativeArray.T"/></c>
			</f>
			<haxe_doc>Returns a native array from the supplied Array. This native array is unsafe to be written on,
		as it may or may not be linked to the actual Array implementation.

		If `equalLengthRequired` is true, the result might be a copy of an array with the correct size.</haxe_doc>
		</nativeArray>
		<nativeType public="1" params="T" get="inline" set="null" line="53" static="1">
			<f a="obj">
				<c path="nativeType.T"/>
				<c path="java.lang.Class"><c path="nativeType.T"/></c>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":deprecated"><e>"The function `nativeType` is deprecated and will be removed in later versions. Please use `getNativeType` instead"</e></m>
			</meta>
			<haxe_doc>Gets the native `java.lang.Class` from the supplied object. Will throw an exception in case of null being passed.
		[deprecated] - use `getNativeType` instead</haxe_doc>
		</nativeType>
		<getNativeType public="1" params="T" get="inline" set="null" line="61" static="1">
			<f a="obj">
				<c path="getNativeType.T"/>
				<c path="java.lang.Class"><c path="getNativeType.T"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Gets the native `java.lang.Class` from the supplied object. Will throw an exception in case of null being passed.</haxe_doc>
		</getNativeType>
		<fromNativeType public="1" params="T" get="inline" set="null" line="69" static="1">
			<f a="t">
				<c path="java.lang.Class"><c path="fromNativeType.T"/></c>
				<x path="Class"><c path="fromNativeType.T"/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Returns a Class<> equivalent to the native java.lang.Class type.]]></haxe_doc>
		</fromNativeType>
		<toNativeType public="1" params="T" get="inline" set="null" line="77" static="1">
			<f a="cl">
				<x path="Class"><c path="toNativeType.T"/></x>
				<c path="java.lang.Class"><c path="toNativeType.T"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Returns a java.lang.Class equivalent to the Haxe Class<> type.]]></haxe_doc>
		</toNativeType>
		<toNativeEnum public="1" params="T" get="inline" set="null" line="85" static="1">
			<f a="cl">
				<x path="Enum"><c path="toNativeEnum.T"/></x>
				<c path="java.lang.Class"><c path="toNativeEnum.T"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Returns a java.lang.Class equivalent to the Haxe Enum<> type.]]></haxe_doc>
		</toNativeEnum>
		<array public="1" params="T" set="method" line="95" static="1">
			<f a="native">
				<c path="java.NativeArray"><c path="array.T"/></c>
				<c path="Array"><c path="array.T"/></c>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":generic"/>
			</meta>
			<haxe_doc>Returns a Haxe Array of a native Array.
		Unless `copy` is true, it won't copy the contents of the native array,
		so unless any operation triggers an array resize, all changes made to the Haxe array will affect the native array argument.</haxe_doc>
		</array>
		<doArray params="T" get="inline" set="null" line="100" static="1">
			<f a="native">
				<c path="java.NativeArray"><c path="doArray.T"/></c>
				<c path="Array"><c path="doArray.T"/></c>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</doArray>
		<array_Int public="1" set="method" line="110" static="1"><f a="native">
	<c path="java.NativeArray"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
</f></array_Int>
		<array_Float public="1" set="method" line="115" static="1"><f a="native">
	<c path="java.NativeArray"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
</f></array_Float>
		<array_Bool public="1" set="method" line="120" static="1"><f a="native">
	<c path="java.NativeArray"><x path="Bool"/></c>
	<c path="Array"><x path="Bool"/></c>
</f></array_Bool>
		<array_java_Int8 public="1" set="method" line="125" static="1"><f a="native">
	<c path="java.NativeArray"><x path="java.Int8"/></c>
	<c path="Array"><x path="java.Int8"/></c>
</f></array_java_Int8>
		<array_java_Int16 public="1" set="method" line="130" static="1"><f a="native">
	<c path="java.NativeArray"><x path="java.Int16"/></c>
	<c path="Array"><x path="java.Int16"/></c>
</f></array_java_Int16>
		<array_java_Char16 public="1" set="method" line="135" static="1"><f a="native">
	<c path="java.NativeArray"><x path="java.Char16"/></c>
	<c path="Array"><x path="java.Char16"/></c>
</f></array_java_Char16>
		<array_Single public="1" set="method" line="140" static="1"><f a="native">
	<c path="java.NativeArray"><x path="Single"/></c>
	<c path="Array"><x path="Single"/></c>
</f></array_Single>
		<array_haxe_Int64 public="1" set="method" line="145" static="1"><f a="native">
	<c path="java.NativeArray"><x path="haxe.Int64"/></c>
	<c path="Array"><x path="haxe.Int64"/></c>
</f></array_haxe_Int64>
		<arrayAlloc public="1" params="T" set="method" line="153" static="1">
			<f a="size">
				<x path="Int"/>
				<c path="Array"><c path="arrayAlloc.T"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Allocates a new Haxe Array with a predetermined size</haxe_doc>
		</arrayAlloc>
		<lock public="1" params="T" get="inline" set="null" line="166" static="1">
			<f a="obj:block">
				<d/>
				<c path="lock.T"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Ensures that one thread does not enter a critical section of code while another thread
		is in the critical section. If another thread attempts to enter a locked code, it
		will wait, block, until the object is released.
		This is the equivalent to "synchronized" in java code.

		This method only exists at compile-time, so it can't be called via reflection.</haxe_doc>
		</lock>
		<haxe_doc>Platform-specific Java Library. Provides some platform-specific functions for the Java target,
	such as conversion from Haxe types to native types and vice-versa.</haxe_doc>
		<meta><m n=":native"><e>"haxe.java.Lib"</e></m></meta>
	</class>
	<abstract path="java.Int8" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/StdTypes.hx" module="java.StdTypes">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="java.Int8"/></this>
		<meta>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="java.Int16" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/StdTypes.hx" module="java.StdTypes">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="java.Int16"/></this>
		<meta>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="java.Char16" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/StdTypes.hx" module="java.StdTypes">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="java.Char16"/></this>
		<meta>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="java.Int64" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/StdTypes.hx" module="java.StdTypes">
		<from>
			<icast><x path="Float"/></icast>
			<icast><x path="Int"/></icast>
		</from>
		<this><x path="java.Int64"/></this>
		<meta>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
			<m n=":coreType"/>
		</meta>
		<impl><class path="java._StdTypes.Int64_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/StdTypes.hx" private="1" module="java.StdTypes" extern="1">
	<addI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="Int"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</addI>
	<add public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</add>
	<mulI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="Int"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</mulI>
	<mul public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</mul>
	<modI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="Int"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A % B</e></m>
		</meta>
	</modI>
	<mod public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A % B</e></m>
		</meta>
	</mod>
	<subI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="Int"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</subI>
	<sub public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</sub>
	<divI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="Int"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</divI>
	<div public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</div>
	<orI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="Int"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A | B</e></m>
		</meta>
	</orI>
	<or public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A | B</e></m>
		</meta>
	</or>
	<xorI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="Int"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A ^ B</e></m>
		</meta>
	</xorI>
	<xor public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A ^ B</e></m>
		</meta>
	</xor>
	<andI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="Int"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A & B]]></e></m>
		</meta>
	</andI>
	<and public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A & B]]></e></m>
		</meta>
	</and>
	<shlI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="Int"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A << B]]></e></m>
		</meta>
	</shlI>
	<shl public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A << B]]></e></m>
		</meta>
	</shl>
	<shrI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="Int"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >> B]]></e></m>
		</meta>
	</shrI>
	<shr public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >> B]]></e></m>
		</meta>
	</shr>
	<ushrI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="Int"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >>> B]]></e></m>
		</meta>
	</ushrI>
	<ushr public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >>> B]]></e></m>
		</meta>
	</ushr>
	<gt public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</gt>
	<gte public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</gte>
	<lt public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</lt>
	<lte public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</lte>
	<bneg public="1" set="method" static="1">
		<f a="t">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>~A</e></m>
		</meta>
	</bneg>
	<neg public="1" set="method" static="1">
		<f a="t">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>-A</e></m>
		</meta>
	</neg>
	<preIncrement public="1" set="method" static="1">
		<f a="t">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>++A</e></m>
		</meta>
	</preIncrement>
	<postIncrement public="1" set="method" static="1">
		<f a="t">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</postIncrement>
	<preDecrement public="1" set="method" static="1">
		<f a="t">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>--A</e></m>
		</meta>
	</preDecrement>
	<postDecrement public="1" set="method" static="1">
		<f a="t">
			<x path="java.Int64"/>
			<x path="java.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A--</e></m>
		</meta>
	</postDecrement>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="java._StdTypes.Int64_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/StdTypes.hx" private="1" module="java.StdTypes" extern="1">
		<addI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="Int"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</addI>
		<add public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</add>
		<mulI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="Int"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</mulI>
		<mul public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</mul>
		<modI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="Int"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A % B</e></m>
			</meta>
		</modI>
		<mod public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A % B</e></m>
			</meta>
		</mod>
		<subI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="Int"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</subI>
		<sub public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</sub>
		<divI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="Int"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</divI>
		<div public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</div>
		<orI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="Int"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A | B</e></m>
			</meta>
		</orI>
		<or public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A | B</e></m>
			</meta>
		</or>
		<xorI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="Int"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A ^ B</e></m>
			</meta>
		</xorI>
		<xor public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A ^ B</e></m>
			</meta>
		</xor>
		<andI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="Int"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A & B]]></e></m>
			</meta>
		</andI>
		<and public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A & B]]></e></m>
			</meta>
		</and>
		<shlI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="Int"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A << B]]></e></m>
			</meta>
		</shlI>
		<shl public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A << B]]></e></m>
			</meta>
		</shl>
		<shrI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="Int"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >> B]]></e></m>
			</meta>
		</shrI>
		<shr public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >> B]]></e></m>
			</meta>
		</shr>
		<ushrI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="Int"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >>> B]]></e></m>
			</meta>
		</ushrI>
		<ushr public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >>> B]]></e></m>
			</meta>
		</ushr>
		<gt public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</gt>
		<gte public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</gte>
		<lt public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</lt>
		<lte public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</lte>
		<bneg public="1" set="method" static="1">
			<f a="t">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>~A</e></m>
			</meta>
		</bneg>
		<neg public="1" set="method" static="1">
			<f a="t">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>-A</e></m>
			</meta>
		</neg>
		<preIncrement public="1" set="method" static="1">
			<f a="t">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>++A</e></m>
			</meta>
		</preIncrement>
		<postIncrement public="1" set="method" static="1">
			<f a="t">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</postIncrement>
		<preDecrement public="1" set="method" static="1">
			<f a="t">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>--A</e></m>
			</meta>
		</preDecrement>
		<postDecrement public="1" set="method" static="1">
			<f a="t">
				<x path="java.Int64"/>
				<x path="java.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A--</e></m>
			</meta>
		</postDecrement>
		<meta><m n=":final"/></meta>
	</class>
	<class path="java.db.Jdbc" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/db/Jdbc.hx">
		<create public="1" set="method" line="31" static="1"><f a="cnx">
	<c path="java.sql.Connection"/>
	<c path="sys.db.Connection"/>
</f></create>
		<meta><m n=":native"><e>"haxe.java.db.Jdbc"</e></m></meta>
	</class>
	<class path="sys.db.Connection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Connection.hx" interface="1">
		<request public="1" set="method"><f a="s">
	<c path="String"/>
	<c path="sys.db.ResultSet"/>
</f></request>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<escape public="1" set="method"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></escape>
		<quote public="1" set="method"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></quote>
		<addValue public="1" set="method"><f a="s:v">
	<c path="StringBuf"/>
	<d/>
	<x path="Void"/>
</f></addValue>
		<lastInsertId public="1" set="method"><f a=""><x path="Int"/></f></lastInsertId>
		<dbName public="1" set="method"><f a=""><c path="String"/></f></dbName>
		<startTransaction public="1" set="method"><f a=""><x path="Void"/></f></startTransaction>
		<commit public="1" set="method"><f a=""><x path="Void"/></f></commit>
		<rollback public="1" set="method"><f a=""><x path="Void"/></f></rollback>
	</class>
	<class path="java.lang.Number" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Number.class" extern="1">
		<implements path="java.io.Serializable"/>
		<shortValue public="1" set="method">
			<f a=""><t path="java.types.Int16"/></f>
			<meta><m n=":overload"/></meta>
		</shortValue>
		<byteValue public="1" set="method">
			<f a=""><t path="java.types.Int8"/></f>
			<meta><m n=":overload"/></meta>
		</byteValue>
		<doubleValue public="1" set="method">
			<f a=""><x path="Float"/></f>
			<meta><m n=":overload"/></meta>
		</doubleValue>
		<floatValue public="1" set="method">
			<f a=""><x path="Single"/></f>
			<meta><m n=":overload"/></meta>
		</floatValue>
		<longValue public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</longValue>
		<intValue public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</intValue>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Number"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Number"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.concurrent.atomic.AtomicInteger" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/atomic/AtomicInteger.class" extern="1">
		<extends path="java.lang.Number"/>
		<implements path="java.io.Serializable"/>
		<doubleValue public="1" set="method" override="1">
			<f a=""><x path="Float"/></f>
			<meta><m n=":overload"/></meta>
		</doubleValue>
		<floatValue public="1" set="method" override="1">
			<f a=""><x path="Single"/></f>
			<meta><m n=":overload"/></meta>
		</floatValue>
		<longValue public="1" set="method" override="1">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</longValue>
		<intValue public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</intValue>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<addAndGet public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</addAndGet>
		<decrementAndGet public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</decrementAndGet>
		<incrementAndGet public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</incrementAndGet>
		<getAndAdd public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getAndAdd>
		<getAndDecrement public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getAndDecrement>
		<getAndIncrement public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getAndIncrement>
		<weakCompareAndSet public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</weakCompareAndSet>
		<compareAndSet public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</compareAndSet>
		<getAndSet public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getAndSet>
		<lazySet public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</lazySet>
		<set public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</set>
		<get public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</get>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.concurrent.atomic.AtomicInteger"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.concurrent.atomic"</e>
				<e>"AtomicInteger"</e>
			</m>
		</meta>
	</class>
	<class path="java.db._Jdbc.JdbcConnection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/db/Jdbc.hx" private="1" module="java.db.Jdbc">
		<implements path="sys.db.Connection"/>
		<ids expr="new AtomicInteger(0)" line="41" static="1">
			<c path="java.util.concurrent.atomic.AtomicInteger"/>
			<meta><m n=":value"><e>new AtomicInteger(0)</e></m></meta>
		</ids>
		<id><x path="Int"/></id>
		<cnx><c path="java.sql.Connection"/></cnx>
		<_lastInsertId><x path="Int"/></_lastInsertId>
		<escapeRegex><c path="EReg"/></escapeRegex>
		<escapes><c path="Array"><d/></c></escapes>
		<close public="1" set="method" line="58"><f a=""><x path="Void"/></f></close>
		<escape public="1" set="method" line="65"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></escape>
		<quote public="1" set="method" line="70"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></quote>
		<addValue public="1" set="method" line="75"><f a="s:v">
	<c path="StringBuf"/>
	<d/>
	<x path="Void"/>
</f></addValue>
		<lastInsertId public="1" set="method" line="91"><f a=""><x path="Int"/></f></lastInsertId>
		<dbName public="1" set="method" line="96"><f a=""><c path="String"/></f></dbName>
		<startTransaction public="1" set="method" line="109"><f a=""><x path="Void"/></f></startTransaction>
		<commit public="1" set="method" line="118"><f a=""><x path="Void"/></f></commit>
		<rollback public="1" set="method" line="130"><f a=""><x path="Void"/></f></rollback>
		<request public="1" set="method" line="137"><f a="s">
	<c path="String"/>
	<c path="sys.db.ResultSet"/>
</f></request>
		<new public="1" set="method" line="50"><f a="cnx">
	<c path="java.sql.Connection"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"haxe.java.db.JdbcConnection"</e></m></meta>
	</class>
	<class path="sys.db.ResultSet" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/ResultSet.hx" interface="1">
		<get_nfields public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</get_nfields>
		<get_length public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</get_length>
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<nfields public="1" get="accessor" set="null"><x path="Int"/></nfields>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method"><f a=""><d/></f></next>
		<results public="1" set="method"><f a=""><c path="List"><d/></c></f></results>
		<getResult public="1" set="method"><f a="n">
	<x path="Int"/>
	<c path="String"/>
</f></getResult>
		<getIntResult public="1" set="method"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getIntResult>
		<getFloatResult public="1" set="method"><f a="n">
	<x path="Int"/>
	<x path="Float"/>
</f></getFloatResult>
		<getFieldsNames public="1" set="method"><f a=""><t path="Null"><c path="Array"><c path="String"/></c></t></f></getFieldsNames>
	</class>
	<class path="java.db._Jdbc.JdbcResultSet" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/db/Jdbc.hx" private="1" module="java.db.Jdbc">
		<implements path="sys.db.ResultSet"/>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
		</length>
		<nfields public="1" get="accessor" set="null"><x path="Int"/></nfields>
		<rs><c path="java.sql.ResultSet"/></rs>
		<names><c path="Array"><c path="String"/></c></names>
		<types><c path="java.NativeArray"><x path="Int"/></c></types>
		<dbName><c path="String"/></dbName>
		<didNext><x path="Bool"/></didNext>
		<get_length set="method" line="235"><f a=""><x path="Int"/></f></get_length>
		<get_nfields set="method" line="250"><f a=""><x path="Int"/></f></get_nfields>
		<hasNext public="1" set="method" line="255"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method" line="265">
			<f a=""><d/></f>
			<meta><m n=":has_untyped"/></meta>
		</next>
		<results public="1" set="method" line="312"><f a=""><c path="List"><d/></c></f></results>
		<getResult public="1" set="method" line="325"><f a="n">
	<x path="Int"/>
	<c path="String"/>
</f></getResult>
		<getIntResult public="1" set="method" line="333"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getIntResult>
		<getFloatResult public="1" set="method" line="342"><f a="n">
	<x path="Int"/>
	<x path="Float"/>
</f></getFloatResult>
		<getFieldsNames public="1" set="method" line="350"><f a=""><t path="Null"><c path="Array"><c path="String"/></c></t></f></getFieldsNames>
		<new public="1" set="method" line="215"><f a="rs:dbName:meta">
	<c path="java.sql.ResultSet"/>
	<c path="String"/>
	<c path="java.sql.ResultSetMetaData"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"haxe.java.db.JdbcResultSet"</e></m></meta>
	</class>
	<class path="java.lang.ThreadLocal" params="T" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ThreadLocal.class" extern="1">
		<remove public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</remove>
		<set public="1" set="method">
			<f a="param1">
				<c path="java.lang.ThreadLocal.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set>
		<get public="1" set="method">
			<f a=""><c path="java.lang.ThreadLocal.T"/></f>
			<meta><m n=":overload"/></meta>
		</get>
		<initialValue set="method">
			<f a=""><c path="java.lang.ThreadLocal.T"/></f>
			<meta><m n=":overload"/></meta>
		</initialValue>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ThreadLocal"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"ThreadLocal"</e>
			</m>
		</meta>
	</class>
	<class path="java.internal.Exceptions" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/internal/Exceptions.hx">
		<exception expr="new java.lang.ThreadLocal&lt;java.lang.Throwable&gt;()" line="29" static="1">
			<c path="java.lang.ThreadLocal"><c path="java.lang.Throwable"/></c>
			<meta><m n=":value"><e><![CDATA[new java.lang.ThreadLocal<java.lang.Throwable>()]]></e></m></meta>
		</exception>
		<setException set="method" line="31" static="1">
			<f a="exc">
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":keep"/></meta>
		</setException>
		<currentException public="1" set="method" line="36" static="1"><f a=""><c path="java.lang.Throwable"/></f></currentException>
		<meta><m n=":native"><e>"haxe.lang.Exceptions"</e></m></meta>
	</class>
	<class path="java.lang.Throwable" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Throwable.class" extern="1">
		<implements path="java.io.Serializable"/>
		<getSuppressed public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.Throwable"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getSuppressed>
		<addSuppressed public="1" set="method">
			<f a="param1">
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</addSuppressed>
		<setStackTrace public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><c path="java.lang.StackTraceElement"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setStackTrace>
		<getStackTrace public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.StackTraceElement"/></c></f>
			<meta><m n=":overload"/></meta>
		</getStackTrace>
		<fillInStackTrace public="1" set="method">
			<f a=""><c path="java.lang.Throwable"/></f>
			<meta><m n=":overload"/></meta>
		</fillInStackTrace>
		<printStackTrace public="1" set="method">
			<f a="param1">
				<c path="java.io.PrintWriter"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<printStackTrace public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</printStackTrace>
				<printStackTrace public="1" set="method">
					<f a="param1">
						<c path="java.io.PrintStream"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</printStackTrace>
			</overloads>
		</printStackTrace>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<initCause public="1" set="method">
			<f a="param1">
				<c path="java.lang.Throwable"/>
				<c path="java.lang.Throwable"/>
			</f>
			<meta><m n=":overload"/></meta>
		</initCause>
		<getCause public="1" set="method">
			<f a=""><c path="java.lang.Throwable"/></f>
			<meta><m n=":overload"/></meta>
		</getCause>
		<getLocalizedMessage public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getLocalizedMessage>
		<getMessage public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getMessage>
		<new set="method">
			<f a="param1:param2:param3:param4">
				<c path="String"/>
				<c path="java.lang.Throwable"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Throwable"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Throwable"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Exception" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Exception.class" extern="1">
		<extends path="java.lang.Throwable"/>
		<new set="method">
			<f a="param1:param2:param3:param4">
				<c path="String"/>
				<c path="java.lang.Throwable"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Exception"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Exception"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.RuntimeException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/RuntimeException.class" extern="1">
		<extends path="java.lang.Exception"/>
		<new set="method">
			<f a="param1:param2:param3:param4">
				<c path="String"/>
				<c path="java.lang.Throwable"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.RuntimeException"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"RuntimeException"</e>
			</m>
		</meta>
	</class>
	<class path="java.internal._Exceptions.HaxeException" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/internal/Exceptions.hx" private="1" module="java.internal.Exceptions">
		<extends path="java.lang.RuntimeException"/>
		<wrap public="1" set="method" line="86" static="1"><f a="obj">
	<d/>
	<c path="java.lang.RuntimeException"/>
</f></wrap>
		<obj><d/></obj>
		<getObject public="1" set="method" line="60"><f a=""><d/></f></getObject>
		<fillInStackTrace public="1" set="method" line="66" override="1">
			<f a=""><c path="java.lang.Throwable"/></f>
			<meta><m n=":overload"/></meta>
		</fillInStackTrace>
		<toString public="1" set="method" line="72" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<getMessage public="1" set="method" line="77" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getMessage>
		<new public="1" set="method" line="47"><f a="obj:msg:cause">
	<d/>
	<c path="String"/>
	<c path="java.lang.Throwable"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":classCode"><e>"public static final long serialVersionUID = 5956463319488556322L;"</e></m>
			<m n=":nativeGen"/>
			<m n=":keep"/>
			<m n=":native"><e>"haxe.lang.HaxeException"</e></m>
		</meta>
	</class>
	<class path="java.internal._FieldLookup.FieldLookup" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/internal/FieldLookup.hx" private="1" module="java.internal.FieldLookup">
		<hash public="1" set="method" line="34" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":functionCode"><e>"\n\t\treturn s.hashCode();\n\t"</e></m></meta>
		</hash>
		<findHash public="1" set="method" line="39" static="1">
			<f a="hash:hashs:length">
				<c path="String"/>
				<c path="java.NativeArray"><c path="String"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</findHash>
		<removeString set="method" line="61" static="1"><f a="a:length:pos">
	<c path="java.NativeArray"><c path="String"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></removeString>
		<removeFloat set="method" line="66" static="1"><f a="a:length:pos">
	<c path="java.NativeArray"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></removeFloat>
		<removeDynamic set="method" line="71" static="1"><f a="a:length:pos">
	<c path="java.NativeArray"><d/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></removeDynamic>
		<__insert params="T" get="inline" set="null" line="77" static="1">
			<f a="a:length:pos:x">
				<c path="java.NativeArray"><c path="__insert.T"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="__insert.T"/>
				<c path="java.NativeArray"><c path="__insert.T"/></c>
			</f>
			<meta><m n=":extern"/></meta>
		</__insert>
		<insertString set="method" line="121" static="1"><f a="a:length:pos:x">
	<c path="java.NativeArray"><c path="String"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="java.NativeArray"><c path="String"/></c>
</f></insertString>
		<insertFloat set="method" line="122" static="1"><f a="a:length:pos:x">
	<c path="java.NativeArray"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<c path="java.NativeArray"><x path="Float"/></c>
</f></insertFloat>
		<insertDynamic set="method" line="123" static="1"><f a="a:length:pos:x">
	<c path="java.NativeArray"><d/></c>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
	<c path="java.NativeArray"><d/></c>
</f></insertDynamic>
		<meta>
			<m n=":native"><e>"haxe.lang.FieldLookup"</e></m>
			<m n=":keep"/>
			<m n=":static"/>
		</meta>
	</class>
	<class path="java.internal.Function" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/internal/Function.hx">
		<new set="method" line="34"><f a="arity:type">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* These classes are automatically generated by the compiler. They are only
 * here so there is an option for e.g. defining them as externs if you are compiling
 * in modules (untested)
 *
 * @author waneck</haxe_doc>
		<meta>
			<m n=":abstract"/>
			<m n=":nativeGen"/>
			<m n=":native"><e>"haxe.lang.Function"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="java.internal._Function.VarArgsBase" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/internal/Function.hx" private="1" module="java.internal.Function">
		<extends path="java.internal.Function"/>
		<__hx_invokeDynamic public="1" set="method" line="42"><f a="dynArgs">
	<c path="Array"><d/></c>
	<d/>
</f></__hx_invokeDynamic>
		<meta>
			<m n=":nativeGen"/>
			<m n=":native"><e>"haxe.lang.VarArgsBase"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="java.internal.VarArgsFunction" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/internal/Function.hx" module="java.internal.Function">
		<extends path="java.internal._Function.VarArgsBase"/>
		<fun><f a="">
	<c path="Array"><d/></c>
	<d/>
</f></fun>
		<__hx_invokeDynamic public="1" set="method" line="58" override="1"><f a="dynArgs">
	<c path="Array"><d/></c>
	<d/>
</f></__hx_invokeDynamic>
		<new public="1" set="method" line="52"><f a="fun">
	<f a="">
		<c path="Array"><d/></c>
		<d/>
	</f>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":native"><e>"haxe.lang.VarArgsFunction"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="java.internal.Closure" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/internal/Function.hx" module="java.internal.Function">
		<extends path="java.internal._Function.VarArgsBase"/>
		<obj><d/></obj>
		<field><c path="String"/></field>
		<__hx_invokeDynamic public="1" set="method" line="76" override="1"><f a="dynArgs">
	<c path="Array"><d/></c>
	<d/>
</f></__hx_invokeDynamic>
		<equals public="1" set="method" line="81"><f a="obj">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method" line="90">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
		</hashCode>
		<new public="1" set="method" line="69"><f a="obj:field">
	<d/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":native"><e>"haxe.lang.Closure"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<typedef path="java.internal._HxObject.StdType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/internal/HxObject.hx" private="1" module="java.internal.HxObject"><c path="Type"/></typedef>
	<class path="java.internal.IHxObject" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/internal/HxObject.hx" module="java.internal.HxObject" interface="1"><meta>
	<m n=":native"><e>"haxe.lang.IHxObject"</e></m>
	<m n=":keep"/>
</meta></class>
	<class path="java.internal._HxObject.HxObject" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/internal/HxObject.hx" private="1" module="java.internal.HxObject">
		<implements path="java.internal.IHxObject"/>
		<meta>
			<m n=":native"><e>"haxe.lang.HxObject"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="java.internal.DynamicObject" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/internal/HxObject.hx" module="java.internal.HxObject">
		<extends path="java.internal._HxObject.HxObject"/>
		<toString public="1" set="method" line="44">
			<f a=""><c path="String"/></f>
			<meta><m n=":skipReflection"/></meta>
		</toString>
		<meta>
			<m n=":native"><e>"haxe.lang.DynamicObject"</e></m>
			<m n=":keep"/>
		</meta>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="java.internal.HxEnum" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/internal/HxObject.hx" module="java.internal.HxObject">
		<index set="null">
			<x path="Int"/>
			<meta><m n=":readOnly"/></meta>
		</index>
		<getTag public="1" set="method" line="78"><f a=""><c path="String"/></f></getTag>
		<getParams public="1" set="method" line="83"><f a=""><c path="Array"><a/></c></f></getParams>
		<toString public="1" set="method" line="88"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="73">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</new>
		<meta>
			<m n=":keep"/>
			<m n=":native"><e>"haxe.lang.Enum"</e></m>
			<m n=":nativeGen"/>
		</meta>
	</class>
	<class path="java.internal._HxObject.ParamEnum" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/internal/HxObject.hx" private="1" module="java.internal.HxObject">
		<extends path="java.internal.HxEnum"/>
		<params set="null">
			<x path="haxe.ds.Vector"><d/></x>
			<meta><m n=":readOnly"/></meta>
		</params>
		<getParams public="1" set="method" line="105" override="1"><f a=""><c path="Array"><a/></c></f></getParams>
		<toString public="1" set="method" line="110" override="1"><f a=""><c path="String"/></f></toString>
		<equals public="1" set="method" line="128"><f a="obj">
	<d/>
	<x path="Bool"/>
</f></equals>
		<hashCode public="1" set="method" line="149">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
		</hashCode>
		<new public="1" set="method" line="99">
			<f a="index:params">
				<x path="Int"/>
				<x path="haxe.ds.Vector"><d/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</new>
		<meta>
			<m n=":keep"/>
			<m n=":native"><e>"haxe.lang.ParamEnum"</e></m>
			<m n=":nativeGen"/>
		</meta>
	</class>
	<class path="java.internal.IEquatable" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/internal/IEquatable.hx" interface="1">
		<equals public="1" set="method"><f a="to">
	<d/>
	<x path="Bool"/>
</f></equals>
		<meta>
			<m n=":native"><e>"haxe.lang.IEquatable"</e></m>
			<m n=":keep"/>
			<m n=":nativeGen"/>
		</meta>
	</class>
	<class path="java.internal.Runtime" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/internal/Runtime.hx">
		<undefined public="1" expr="{ }" line="61" static="1">
			<d/>
			<meta><m n=":value"><e>{ }</e></m></meta>
		</undefined>
		<closure public="1" set="method" line="66" static="1">
			<f a="obj:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":functionCode"><e>"\n\treturn new haxe.lang.Closure(obj, field);\n\t"</e></m></meta>
		</closure>
		<eq public="1" set="method" line="93" static="1">
			<f a="v1:v2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":functionCode"><e>"\n\t\t\tif (v1 == v2)\n\t\t\t\treturn true;\n\t\t\tif (v1 == null || v2 == null)\n\t\t\t\treturn false;\n\n\t\t\tif (v1 instanceof java.lang.Number)\n\t\t\t{\n\t\t\t\tif (!(v2 instanceof java.lang.Number))\n\t\t\t\t\treturn false;\n\n\t\t\t\tjava.lang.Number v1c = (java.lang.Number) v1;\n\t\t\t\tjava.lang.Number v2c = (java.lang.Number) v2;\n\t\t\t\tif (v1 instanceof java.lang.Long || v2 instanceof java.lang.Long)\n\t\t\t\t\treturn v1c.longValue() == v2c.longValue();\n\t\t\t\treturn v1c.doubleValue() == v2c.doubleValue();\n\t\t\t} else if (v1 instanceof java.lang.String || v1 instanceof haxe.lang.IEquatable) { //TODO see what happens with Boolean cases\n\t\t\t\treturn v1.equals(v2);\n\t\t\t}\n\n\t\t\treturn false;\n\t"</e></m></meta>
		</eq>
		<refEq public="1" set="method" line="109" static="1">
			<f a="v1:v2">
				<a/>
				<a/>
				<x path="Bool"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\tif (v1 == v2)\n\t\t\treturn true;\n\n\t\tif (v1 instanceof java.lang.String || v1 instanceof haxe.lang.IEquatable)\n\t\t{\n\t\t\treturn v1 != null && v1.equals(v2);\n\t\t} else {\n\t\t\treturn v1 == v2;\n\t\t}\n\t"]]></e></m></meta>
		</refEq>
		<valEq public="1" set="method" line="117" static="1">
			<f a="v1:v2">
				<a/>
				<a/>
				<x path="Bool"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\treturn v1 == v2 || (v1 != null && v1.equals(v2));\n\t"]]></e></m></meta>
		</valEq>
		<toDouble public="1" set="method" line="125" static="1">
			<f a="obj">
				<d/>
				<x path="Float"/>
			</f>
			<meta><m n=":functionCode"><e>"\n\t\treturn (obj == null) ? 0.0 : ((java.lang.Number) obj).doubleValue();\n\t"</e></m></meta>
		</toDouble>
		<toBool public="1" set="method" line="133" static="1">
			<f a="obj">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":functionCode"><e>"\n\t\treturn (obj == null) ? false : ((java.lang.Boolean) obj).booleanValue();\n\t"</e></m></meta>
		</toBool>
		<toInt public="1" set="method" line="141" static="1">
			<f a="obj">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":functionCode"><e>"\n\t\treturn (obj == null) ? 0 : ((java.lang.Number) obj).intValue();\n\t"</e></m></meta>
		</toInt>
		<toLong public="1" set="method" line="146" static="1"><f a="obj">
	<d/>
	<x path="haxe.Int64"/>
</f></toLong>
		<isDouble public="1" set="method" line="159" static="1">
			<f a="obj">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\tif (obj != null && obj instanceof java.lang.Number)\n\t\t{\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t"]]></e></m></meta>
		</isDouble>
		<isInt public="1" set="method" line="164" static="1">
			<f a="obj">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isInt public="1" set="method" line="174">
	<f a="num">
		<c path="java.lang.Number"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isInt></overloads>
		</isInt>
		<slowHasField public="1" set="method" line="211" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\tjava.lang.Class cl = null;\n\t\tif (o instanceof java.lang.Class)\n\t\t{\n\t\t\tif (o == java.lang.String.class)\n\t\t\t\treturn field.equals(\"fromCharCode\");\n\n\t\t\tcl = (java.lang.Class) o;\n\t\t} else if (o instanceof java.lang.String) {\n\t\t\treturn haxe.lang.StringRefl.handleGetField( (java.lang.String) o, field, false) != null;\n\t\t} else {\n\t\t\tcl = o.getClass();\n\t\t}\n\n\t\ttry\n\t\t{\n\t\t\tjava.lang.reflect.Field f = cl.getField(field);\n\t\t\treturn true;\n\t\t}\n\t\tcatch(Throwable t)\n\t\t{\n\t\t\tjava.lang.reflect.Method[] ms = cl.getMethods();\n\t\t\tfor (int i = 0; i < ms.length; i++)\n\t\t\t{\n\t\t\t\tif (ms[i].getName().equals(field))\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t"]]></e></m></meta>
		</slowHasField>
		<compare public="1" set="method" line="242" static="1">
			<f a="v1:v2">
				<d/>
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\t\tif (v1 == v2)\n\t\t\t\treturn 0;\n\t\t\tif (v1 == null) return -1;\n\t\t\tif (v2 == null) return 1;\n\n\t\t\tif (v1 instanceof java.lang.Number || v2 instanceof java.lang.Number)\n\t\t\t{\n\t\t\t\tjava.lang.Number v1c = (java.lang.Number) v1;\n\t\t\t\tjava.lang.Number v2c = (java.lang.Number) v2;\n\n\t\t\t\tif (v1 instanceof java.lang.Long || v2 instanceof java.lang.Long)\n\t\t\t\t{\n\t\t\t\t\tlong l1 = (v1 == null) ? 0L : v1c.longValue();\n\t\t\t\t\tlong l2 = (v2 == null) ? 0L : v2c.longValue();\n          return (l1 < l2) ? -1 : (l1 > l2) ? 1 : 0;\n\t\t\t\t} else {\n\t\t\t\t\tdouble d1 = (v1 == null) ? 0.0 : v1c.doubleValue();\n\t\t\t\t\tdouble d2 = (v2 == null) ? 0.0 : v2c.doubleValue();\n\n          return (d1 < d2) ? -1 : (d1 > d2) ? 1 : 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//if it's not a number it must be a String\n\t\t\treturn ((java.lang.String) v1).compareTo((java.lang.String) v2);\n\t"]]></e></m></meta>
		</compare>
		<plus public="1" set="method" line="264" static="1">
			<f a="v1:v2">
				<d/>
				<d/>
				<d/>
			</f>
			<meta><m n=":functionCode"><e>"\n\t\t\tif (v1 instanceof java.lang.String || v2 instanceof java.lang.String)\n\t\t\t\treturn toString(v1) + toString(v2);\n\n\t\t\tif (v1 instanceof java.lang.Number || v2 instanceof java.lang.Number)\n\t\t\t{\n\t\t\t\tjava.lang.Number v1c = (java.lang.Number) v1;\n\t\t\t\tjava.lang.Number v2c = (java.lang.Number) v2;\n\n\t\t\t\tdouble d1 = (v1 == null) ? 0.0 : v1c.doubleValue();\n\t\t\t\tdouble d2 = (v2 == null) ? 0.0 : v2c.doubleValue();\n\n\t\t\t\treturn d1 + d2;\n\t\t\t}\n\n\t\t\tthrow new java.lang.IllegalArgumentException(\"Cannot dynamically add \" + v1 + \" and \" + v2);\n\t"</e></m></meta>
		</plus>
		<slowGetField public="1" set="method" line="320" static="1">
			<f a="obj:field:throwErrors">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\n\tif (obj == null)\n\t\tif (throwErrors)\n\t\t\tthrow new java.lang.NullPointerException(\"Cannot access field '\" + field + \"' of null.\");\n\t\telse\n\t\t\treturn null;\n\n\tjava.lang.Class cl = null;\n\ttry\n\t{\n\t\tif (obj instanceof java.lang.Class)\n\t\t{\n\t\t\tif (obj == java.lang.String.class && field.equals(\"fromCharCode\"))\n\t\t\t\treturn new haxe.lang.Closure(haxe.lang.StringExt.class, field);\n\n\t\t\tcl = (java.lang.Class) obj;\n\t\t\tobj = null;\n\t\t} else if (obj instanceof java.lang.String) {\n\t\t\treturn haxe.lang.StringRefl.handleGetField((java.lang.String) obj, field, throwErrors);\n\t\t} else {\n\t\t\tcl = obj.getClass();\n\t\t}\n\n\t\tjava.lang.reflect.Field f = cl.getField(field);\n\t\tf.setAccessible(true);\n\t\treturn f.get(obj);\n\t} catch (Throwable t)\n\t{\n\t\ttry\n\t\t{\n\t\t\tjava.lang.reflect.Method[] ms = cl.getMethods();\n\t\t\tfor (int i = 0; i < ms.length; i++)\n\t\t\t{\n\t\t\t\tif (ms[i].getName().equals(field))\n\t\t\t\t{\n\t\t\t\t\treturn new haxe.lang.Closure(obj != null ? obj : cl, field);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Throwable t2)\n\t\t{\n\n\t\t}\n\n\t\tif (throwErrors)\n\t\t\tthrow HaxeException.wrap(t);\n\n\t\treturn null;\n\t}\n\n\t"]]></e></m></meta>
		</slowGetField>
		<slowSetField public="1" set="method" line="355" static="1">
			<f a="obj:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<d/>
			</f>
			<meta><m n=":functionCode"><e>"\n\t\tjava.lang.Class cl = null;\n\t\tif (obj instanceof java.lang.Class)\n\t\t{\n\t\t\tcl = (java.lang.Class) obj;\n\t\t\tobj = null;\n\t\t} else {\n\t\t\tcl = obj.getClass();\n\t\t}\n\n\t\ttry {\n\t\t\tjava.lang.reflect.Field f = cl.getField(field);\n\t\t\tf.setAccessible(true);\n\n\t\t\t//FIXME we must evaluate if field to be set receives either int or double\n\t\t\tif (isInt(value))\n\t\t\t{\n\t\t\t\tf.setInt(obj, toInt(value));\n\t\t\t} else if (isDouble(value)) {\n\t\t\t\tf.setDouble(obj, toDouble(value));\n\t\t\t} else {\n\t\t\t\tf.set(obj, value);\n\t\t\t}\n\t\t\treturn value;\n\t\t}\n\t\tcatch (Throwable t)\n\t\t{\n\t\t\tthrow HaxeException.wrap(t);\n\t\t}\n\t"</e></m></meta>
		</slowSetField>
		<slowCallField public="1" set="method" line="501" static="1">
			<f a="obj:field:args">
				<d/>
				<c path="String"/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\tjava.lang.Class cl = null;\n\t\tif (obj instanceof java.lang.Class)\n\t\t{\n\t\t\tif (obj == java.lang.String.class && field.equals(\"fromCharCode\"))\n\t\t\t\treturn haxe.lang.StringExt.fromCharCode(toInt(args.__get(0)));\n\n\t\t\tcl = (java.lang.Class) obj;\n\t\t\tobj = null;\n\t\t} else if (obj instanceof java.lang.String) {\n\t\t\treturn haxe.lang.StringRefl.handleCallField((java.lang.String) obj, field, args);\n\t\t} else {\n\t\t\tcl = obj.getClass();\n\t\t}\n\n\t\tif (args == null) args = new Array();\n\n\t\tint len = args.length;\n\t\tjava.lang.Class[] cls = new java.lang.Class[len];\n\t\tjava.lang.Object[] objs = new java.lang.Object[len];\n\n\t\tjava.lang.reflect.Method[] ms = cl.getMethods();\n\t\tint msl = ms.length;\n\t\tint realMsl = 0;\n\t\tfor(int i =0; i < msl; i++)\n\t\t{\n\t\t\tif (!ms[i].getName().equals(field) || (!ms[i].isVarArgs() && ms[i].getParameterTypes().length != len))\n\t\t\t{\n\t\t\t\tms[i] = null;\n\t\t\t} else {\n\t\t\t\tms[realMsl] = ms[i];\n\t\t\t\tif (realMsl != i)\n\t\t\t\t\tms[i] = null;\n\t\t\t\trealMsl++;\n\t\t\t}\n\t\t}\n\n\t\tboolean hasNumber = false;\n\n\t\tfor (int i = 0; i < len; i++)\n\t\t{\n\t\t\tObject o = args.__get(i);\n\t\t\tif (o == null)\n\t\t\t{\n\t\t\t\tcontinue; //can be anything\n\t\t\t}\n\t\t\tobjs[i]= o;\n\t\t\tcls[i] = o.getClass();\n\t\t\tboolean isNum = false;\n\n\t\t\tif (o instanceof java.lang.Number)\n\t\t\t{\n\t\t\t\tcls[i] = java.lang.Number.class;\n\t\t\t\tisNum = hasNumber = true;\n\t\t\t} else if (o instanceof java.lang.Boolean) {\n\t\t\t\tcls[i] = java.lang.Boolean.class;\n\t\t\t\tisNum = true;\n\t\t\t}\n\n\t\t\tmsl = realMsl;\n\t\t\trealMsl = 0;\n\n\t\t\tfor (int j = 0; j < msl; j++)\n\t\t\t{\n\t\t\t\tjava.lang.Class[] allcls = ms[j].getParameterTypes();\n\t\t\t\tif (i < allcls.length)\n\t\t\t\t{\n\t\t\t\t\tif (!  ((isNum && allcls[i].isPrimitive()) || allcls[i].isAssignableFrom(cls[i])) )\n\t\t\t\t\t{\n\t\t\t\t\t\tms[j] = null;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tms[realMsl] = ms[j];\n\t\t\t\t\t\tif (realMsl != j)\n\t\t\t\t\t\t\tms[j] = null;\n\t\t\t\t\t\trealMsl++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\tjava.lang.reflect.Method found;\n\t\tif (ms.length == 0 || (found = ms[0]) == null)\n\t\t\tthrow haxe.lang.HaxeException.wrap(\"No compatible method found for: \" + field);\n\n\t\tif (hasNumber)\n\t\t{\n\t\t\tjava.lang.Class[] allcls = found.getParameterTypes();\n\n\t\t\tfor (int i = 0; i < len; i++)\n\t\t\t{\n\t\t\t\tjava.lang.Object o = objs[i];\n\t\t\t\tif (o instanceof java.lang.Number)\n\t\t\t\t{\n\t\t\t\t\tjava.lang.Class curCls = null;\n\t\t\t\t\tif (i < allcls.length)\n\t\t\t\t\t{\n\t\t\t\t\t\tcurCls = allcls[i];\n\t\t\t\t\t\tif (!curCls.isAssignableFrom(o.getClass()))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tString name = curCls.getName();\n\t\t\t\t\t\t\tif (name.equals(\"double\") || name.equals(\"java.lang.Double\"))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tobjs[i] = ((java.lang.Number)o).doubleValue();\n\t\t\t\t\t\t\t} else if (name.equals(\"int\") || name.equals(\"java.lang.Integer\"))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tobjs[i] = ((java.lang.Number)o).intValue();\n\t\t\t\t\t\t\t} else if (name.equals(\"float\") || name.equals(\"java.lang.Float\"))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tobjs[i] = ((java.lang.Number)o).floatValue();\n\t\t\t\t\t\t\t} else if (name.equals(\"byte\") || name.equals(\"java.lang.Byte\"))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tobjs[i] = ((java.lang.Number)o).byteValue();\n\t\t\t\t\t\t\t} else if (name.equals(\"short\") || name.equals(\"java.lang.Short\"))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tobjs[i] = ((java.lang.Number)o).shortValue();\n\t\t\t\t\t\t\t} else if (name.equals(\"long\") || name.equals(\"java.lang.Long\"))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tobjs[i] = ((java.lang.Number)o).longValue();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} //else varargs not handled TODO\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tfound.setAccessible(true);\n\t\t\treturn found.invoke(obj, objs);\n\t\t}\n\n\t\tcatch (java.lang.reflect.InvocationTargetException e)\n\t\t{\n\t\t\tthrow haxe.lang.HaxeException.wrap(e.getCause());\n\t\t}\n\n\t\tcatch (Throwable t)\n\t\t{\n\t\t\tthrow haxe.lang.HaxeException.wrap(t);\n\t\t}\n\t"]]></e></m></meta>
		</slowCallField>
		<callField public="1" set="method" line="514" static="1">
			<f a="obj:field:args">
				<d/>
				<c path="String"/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<meta><m n=":functionCode"><e>"\n\t\tif (obj instanceof haxe.lang.IHxObject)\n\t\t{\n\t\t\treturn ((haxe.lang.IHxObject) obj).__hx_invokeField(field, args);\n\t\t}\n\n\t\treturn slowCallField(obj, field, args);\n\t"</e></m></meta>
		</callField>
		<getField public="1" set="method" line="527" static="1">
			<f a="obj:field:throwErrors">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":functionCode"><e>"\n\n\t\tif (obj instanceof haxe.lang.IHxObject)\n\t\t\treturn ((haxe.lang.IHxObject) obj).__hx_getField(field, throwErrors, false, false);\n\n\t\treturn slowGetField(obj, field, throwErrors);\n\n\t"</e></m></meta>
		</getField>
		<getField_f public="1" set="method" line="540" static="1">
			<f a="obj:field:throwErrors">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Float"/>
			</f>
			<meta><m n=":functionCode"><e>"\n\n\t\tif (obj instanceof haxe.lang.IHxObject)\n\t\t\treturn ((haxe.lang.IHxObject) obj).__hx_getField_f(field, throwErrors, false);\n\n\t\treturn toDouble(slowGetField(obj, field, throwErrors));\n\n\t"</e></m></meta>
		</getField_f>
		<setField public="1" set="method" line="553" static="1">
			<f a="obj:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<d/>
			</f>
			<meta><m n=":functionCode"><e>"\n\n\t\tif (obj instanceof haxe.lang.IHxObject)\n\t\t\treturn ((haxe.lang.IHxObject) obj).__hx_setField(field, value, false);\n\n\t\treturn slowSetField(obj, field, value);\n\n\t"</e></m></meta>
		</setField>
		<setField_f public="1" set="method" line="566" static="1">
			<f a="obj:field:value">
				<d/>
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":functionCode"><e>"\n\n\t\tif (obj instanceof haxe.lang.IHxObject)\n\t\t\treturn ((haxe.lang.IHxObject) obj).__hx_setField_f(field, value, false);\n\n\t\treturn toDouble(slowSetField(obj, field, value));\n\n\t"</e></m></meta>
		</setField_f>
		<toString public="1" set="method" line="571" static="1">
			<f a="obj">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</toString>
		<isFinite public="1" set="method" line="581" static="1"><f a="v">
	<x path="Float"/>
	<x path="Bool"/>
</f></isFinite>
		<haxe_doc>This class is meant for internal compiler use only. It provides the Haxe runtime
 compatibility to the host language. Do not access it directly.</haxe_doc>
		<meta>
			<m n=":native"><e>"haxe.lang.Runtime"</e></m>
			<m n=":nativeGen"/>
			<m n=":classCode"><e><![CDATA["\n\tpublic static java.lang.Object getField(haxe.lang.IHxObject obj, java.lang.String field, boolean throwErrors)\n\t{\n\t\tif (obj == null && !throwErrors) return null;\n\t\treturn obj.__hx_getField(field, throwErrors, false, false);\n\t}\n\n\tpublic static double getField_f(haxe.lang.IHxObject obj, java.lang.String field, boolean throwErrors)\n\t{\n\t\tif (obj == null && !throwErrors) return 0.0;\n\t\treturn obj.__hx_getField_f(field, throwErrors, false);\n\t}\n\n\tpublic static java.lang.Object setField(haxe.lang.IHxObject obj, java.lang.String field, java.lang.Object value)\n\t{\n\t\treturn obj.__hx_setField(field, value, false);\n\t}\n\n\tpublic static double setField_f(haxe.lang.IHxObject obj, java.lang.String field, double value)\n\t{\n\t\treturn obj.__hx_setField_f(field, value, false);\n\t}\n\n\tpublic static java.lang.Object callField(haxe.lang.IHxObject obj, java.lang.String field, Array<?> args)\n\t{\n\t\treturn obj.__hx_invokeField(field, args);\n\t}\n"]]></e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<typedef path="java.internal._StringExt.NativeString" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/internal/StringExt.hx" private="1" module="java.internal.StringExt"><c path="String"/></typedef>
	<class path="java.internal._StringExt.StringExt" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/internal/StringExt.hx" private="1" module="java.internal.StringExt">
		<charAt public="1" set="method" line="36" static="1">
			<f a="me:index">
				<t path="java.internal._StringExt.NativeString"/>
				<x path="Int"/>
				<t path="java.internal._StringExt.NativeString"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\t\tif ( index >= me.length() || index < 0 )\n\t\t\t\treturn \"\";\n\t\t\telse\n\t\t\t\treturn java.lang.Character.toString(me.charAt(index));\n\t"]]></e></m></meta>
		</charAt>
		<charCodeAt public="1" set="method" line="47" static="1">
			<f a="me:index">
				<t path="java.internal._StringExt.NativeString"/>
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\t\tif ( index >= me.length() || index < 0 )\n\t\t\t\treturn null;\n\t\t\telse\n\t\t\t\treturn (int) me.charAt(index);\n\t"]]></e></m></meta>
		</charCodeAt>
		<indexOf public="1" set="method" line="58" static="1">
			<f a="me:str:?startIndex">
				<t path="java.internal._StringExt.NativeString"/>
				<t path="java.internal._StringExt.NativeString"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\t\tint sIndex = (startIndex != null ) ? (haxe.lang.Runtime.toInt(startIndex)) : 0;\n\t\t\tif (sIndex >= me.length() || sIndex < 0)\n\t\t\t\treturn -1;\n\t\t\treturn me.indexOf(str, sIndex);\n\t"]]></e></m></meta>
		</indexOf>
		<lastIndexOf public="1" set="method" line="71" static="1">
			<f a="me:str:?startIndex">
				<t path="java.internal._StringExt.NativeString"/>
				<t path="java.internal._StringExt.NativeString"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\t\tint sIndex = (startIndex != null ) ? (haxe.lang.Runtime.toInt(startIndex)) : (me.length() - 1);\n\t\t\tif (sIndex > me.length() || sIndex < 0)\n\t\t\t\tsIndex = me.length() - 1;\n\t\t\telse if (sIndex < 0)\n\t\t\t\treturn -1;\n\t\t\treturn me.lastIndexOf(str, sIndex);\n\t"]]></e></m></meta>
		</lastIndexOf>
		<split public="1" set="method" line="103" static="1">
			<f a="me:delimiter">
				<t path="java.internal._StringExt.NativeString"/>
				<t path="java.internal._StringExt.NativeString"/>
				<c path="Array"><t path="java.internal._StringExt.NativeString"/></c>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\t\tArray<java.lang.String> ret = new Array<java.lang.String>();\n\n\t\t\tint slen = delimiter.length();\n\t\t\tif (slen == 0)\n\t\t\t{\n\t\t\t\tint len = me.length();\n\t\t\t\tfor (int i = 0; i < len; i++)\n\t\t\t\t{\n\t\t\t\t\tret.push(me.substring(i, i + 1));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tint start = 0;\n\t\t\t\tint pos = me.indexOf(delimiter, start);\n\n\t\t\t\twhile (pos >= 0)\n\t\t\t\t{\n\t\t\t\t\tret.push(me.substring(start, pos));\n\n\t\t\t\t\tstart = pos + slen;\n\t\t\t\t\tpos = me.indexOf(delimiter, start);\n\t\t\t\t}\n\n\t\t\t\tret.push(me.substring(start));\n\t\t\t}\n\t\t\treturn ret;\n\t"]]></e></m></meta>
		</split>
		<substr public="1" set="method" line="136" static="1">
			<f a="me:pos:?len">
				<t path="java.internal._StringExt.NativeString"/>
				<x path="Int"/>
				<x path="Int"/>
				<t path="java.internal._StringExt.NativeString"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\t\tint meLen = me.length();\n\t\t\tint targetLen = meLen;\n\t\t\tif (len != null)\n\t\t\t{\n\t\t\t\ttargetLen = haxe.lang.Runtime.toInt(len);\n\t\t\t\tif (targetLen == 0)\n\t\t\t\t\treturn \"\";\n\t\t\t\tif( pos != 0 && targetLen < 0 ){\n\t\t\t\t\treturn \"\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif( pos < 0 ){\n\t\t\t\tpos = meLen + pos;\n\t\t\t\tif( pos < 0 ) pos = 0;\n\t\t\t} else if( targetLen < 0 ){\n\t\t\t\ttargetLen = meLen + targetLen - pos;\n\t\t\t}\n\n\t\t\tif( pos + targetLen > meLen ){\n\t\t\t\ttargetLen = meLen - pos;\n\t\t\t}\n\n\t\t\tif ( pos < 0 || targetLen <= 0 ) return \"\";\n\n\t\t\treturn me.substring(pos, pos + targetLen);\n\t"]]></e></m></meta>
		</substr>
		<substring public="1" set="method" line="167" static="1">
			<f a="me:startIndex:?endIndex">
				<t path="java.internal._StringExt.NativeString"/>
				<x path="Int"/>
				<x path="Int"/>
				<t path="java.internal._StringExt.NativeString"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\tint endIdx;\n\t\tint len = me.length();\n\t\tif ( endIndex == null) {\n\t\t\tendIdx = len;\n\t\t} else if ( (endIdx = haxe.lang.Runtime.toInt(endIndex)) < 0 ) {\n\t\t\tendIdx = 0;\n\t\t} else if ( endIdx > len ) {\n\t\t\tendIdx = len;\n\t\t}\n\n\t\tif ( startIndex < 0 ) {\n\t\t\tstartIndex = 0;\n\t\t} else if ( startIndex > len ) {\n\t\t\tstartIndex = len;\n\t\t}\n\n\t\tif ( startIndex > endIdx ) {\n\t\t\tint tmp = startIndex;\n\t\t\tstartIndex = endIdx;\n\t\t\tendIdx = tmp;\n\t\t}\n\n\t\treturn me.substring(startIndex, endIdx);\n\n\t"]]></e></m></meta>
		</substring>
		<toString public="1" set="method" line="172" static="1"><f a="me">
	<t path="java.internal._StringExt.NativeString"/>
	<t path="java.internal._StringExt.NativeString"/>
</f></toString>
		<toLowerCase public="1" set="method" line="180" static="1">
			<f a="me">
				<t path="java.internal._StringExt.NativeString"/>
				<t path="java.internal._StringExt.NativeString"/>
			</f>
			<meta><m n=":functionCode"><e>"\n\t\t\treturn me.toLowerCase();\n\t"</e></m></meta>
		</toLowerCase>
		<toUpperCase public="1" set="method" line="188" static="1">
			<f a="me">
				<t path="java.internal._StringExt.NativeString"/>
				<t path="java.internal._StringExt.NativeString"/>
			</f>
			<meta><m n=":functionCode"><e>"\n\t\t\treturn me.toUpperCase();\n\t"</e></m></meta>
		</toUpperCase>
		<toNativeString public="1" set="method" line="193" static="1"><f a="me">
	<t path="java.internal._StringExt.NativeString"/>
	<t path="java.internal._StringExt.NativeString"/>
</f></toNativeString>
		<fromCharCode public="1" set="method" line="201" static="1">
			<f a="code">
				<x path="Int"/>
				<t path="java.internal._StringExt.NativeString"/>
			</f>
			<meta><m n=":functionCode"><e>"\n\t\treturn java.lang.Character.toString( (char) code );\n\t"</e></m></meta>
		</fromCharCode>
		<meta>
			<m n=":keep"/>
			<m n=":nativeGen"/>
			<m n=":native"><e>"haxe.lang.StringExt"</e></m>
		</meta>
	</class>
	<class path="java.internal._StringExt.StringRefl" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/internal/StringExt.hx" private="1" module="java.internal.StringExt">
		<fields public="1" expr="[&quot;length&quot;, &quot;toUpperCase&quot;, &quot;toLowerCase&quot;, &quot;charAt&quot;, &quot;charCodeAt&quot;, &quot;indexOf&quot;, &quot;lastIndexOf&quot;, &quot;split&quot;, &quot;substr&quot;, &quot;substring&quot;]" line="209" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["length", "toUpperCase", "toLowerCase", "charAt", "charCodeAt", "indexOf", "lastIndexOf", "split", "substr", "substring"]</e></m></meta>
		</fields>
		<handleGetField public="1" set="method" line="211" static="1"><f a="str:f:throwErrors">
	<t path="java.internal._StringExt.NativeString"/>
	<t path="java.internal._StringExt.NativeString"/>
	<x path="Bool"/>
	<d/>
</f></handleGetField>
		<handleCallField public="1" set="method" line="226" static="1"><f a="str:f:args">
	<t path="java.internal._StringExt.NativeString"/>
	<t path="java.internal._StringExt.NativeString"/>
	<c path="Array"><d/></c>
	<d/>
</f></handleCallField>
		<meta>
			<m n=":keep"/>
			<m n=":nativeGen"/>
			<m n=":native"><e>"haxe.lang.StringRefl"</e></m>
		</meta>
	</class>
	<class path="java.internal._StringExt.JavaString" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/internal/StringExt.hx" private="1" module="java.internal.StringExt" extern="1">
		<_charAt public="1" set="method"><f a="idx">
	<x path="Int"/>
	<x path="java.Char16"/>
</f></_charAt>
		<codePointAt public="1" set="method"><f a="idx">
	<x path="Int"/>
	<x path="Int"/>
</f></codePointAt>
		<codePointBefore public="1" set="method"><f a="idx">
	<x path="Int"/>
	<x path="Int"/>
</f></codePointBefore>
		<codePointCount public="1" set="method"><f a="begin:end">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></codePointCount>
		<offsetByCodePoints public="1" set="method"><f a="index:codePointOffset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></offsetByCodePoints>
		<getChars public="1" set="method"><f a="srcBegin:srcEnd:dst:dstBegin">
	<x path="Int"/>
	<x path="Int"/>
	<c path="java.NativeArray"><x path="java.Char16"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></getChars>
		<startsWith public="1" set="method"><f a="prefix">
	<c path="String"/>
	<x path="Bool"/>
</f></startsWith>
		<endsWith public="1" set="method"><f a="suffix">
	<c path="String"/>
	<x path="Bool"/>
</f></endsWith>
		<_indexOf public="1" set="method"><f a="str:fromIndex">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></_indexOf>
		<_lastIndexOf public="1" set="method"><f a="str:fromIndex">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></_lastIndexOf>
		<_substring public="1" set="method"><f a="begin:end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></_substring>
		<replace public="1" set="method"><f a="old:nw">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></replace>
		<_split public="1" set="method"><f a="regex">
	<c path="String"/>
	<c path="java.NativeArray"><c path="String"/></c>
</f></_split>
		<trim public="1" set="method"><f a=""><c path="String"/></f></trim>
		<meta>
			<m n=":keep"/>
			<m n=":native"><e>"haxe.lang.NativeString"</e></m>
		</meta>
	</class>
	<class path="java.lang.AutoCloseable" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/AutoCloseable.class" extern="1" interface="1">
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.Exception"</e></m>
			</meta>
		</close>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.AutoCloseable"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"AutoCloseable"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.Closeable" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/io/Closeable.class" extern="1" interface="1">
		<extends path="java.lang.AutoCloseable"/>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</close>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.Closeable"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"Closeable"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.Flushable" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/io/Flushable.class" extern="1" interface="1">
		<flush public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</flush>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.Flushable"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"Flushable"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.OutputStream" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/io/OutputStream.class" extern="1">
		<implements path="java.io.Closeable"/>
		<implements path="java.io.Flushable"/>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</close>
		<flush public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</flush>
		<write public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads>
				<write public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
				<write public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Int8"/></c>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
			</overloads>
		</write>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.OutputStream"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"OutputStream"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.ByteArrayOutputStream" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ByteArrayOutputStream.class" extern="1">
		<extends path="java.io.OutputStream"/>
		<close public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</close>
		<toString public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
			<overloads>
				<toString public="1" set="method">
					<f a=""><c path="String"/></f>
					<meta><m n=":overload"/></meta>
				</toString>
				<toString public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<c path="String"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.UnsupportedEncodingException"</e></m>
					</meta>
				</toString>
			</overloads>
		</toString>
		<size public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</size>
		<toByteArray public="1" set="method">
			<f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f>
			<meta><m n=":overload"/></meta>
		</toByteArray>
		<reset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</reset>
		<writeTo public="1" set="method">
			<f a="param1">
				<c path="java.io.OutputStream"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</writeTo>
		<write public="1" set="method" override="1">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><write public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</write></overloads>
		</write>
		<buf><c path="java.NativeArray"><t path="java.types.Int8"/></c></buf>
		<count><x path="Int"/></count>
		<new public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.ByteArrayOutputStream"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"ByteArrayOutputStream"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.Console" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/io/Console.class" extern="1">
		<implements path="java.io.Flushable"/>
		<flush public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</flush>
		<readPassword public="1" set="method">
			<f a=""><c path="java.NativeArray"><t path="java.types.Char16"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><readPassword public="1" set="method">
	<f a="param1:param2">
		<c path="String"/>
		<c path="java.NativeArray"><d/></c>
		<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</readPassword></overloads>
		</readPassword>
		<readLine public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><readLine public="1" set="method">
	<f a="param1:param2">
		<c path="String"/>
		<c path="java.NativeArray"><d/></c>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</readLine></overloads>
		</readLine>
		<printf public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.NativeArray"><d/></c>
				<c path="java.io.Console"/>
			</f>
			<meta><m n=":overload"/></meta>
		</printf>
		<format public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.NativeArray"><d/></c>
				<c path="java.io.Console"/>
			</f>
			<meta><m n=":overload"/></meta>
		</format>
		<reader public="1" set="method">
			<f a=""><c path="java.io.Reader"/></f>
			<meta><m n=":overload"/></meta>
		</reader>
		<writer public="1" set="method">
			<f a=""><c path="java.io.PrintWriter"/></f>
			<meta><m n=":overload"/></meta>
		</writer>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.Console"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"Console"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Readable" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Readable.class" extern="1" interface="1">
		<read public="1" set="method">
			<f a="param1">
				<c path="java.nio.CharBuffer"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</read>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Readable"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Readable"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.Reader" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/io/Reader.class" extern="1">
		<implements path="java.lang.Readable"/>
		<implements path="java.io.Closeable"/>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</close>
		<reset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</reset>
		<mark public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</mark>
		<markSupported public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</markSupported>
		<ready public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</ready>
		<skip public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</skip>
		<read public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><t path="java.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads>
				<read public="1" set="method">
					<f a="param1">
						<c path="java.nio.CharBuffer"/>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</read>
				<read public="1" set="method">
					<f a=""><x path="Int"/></f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</read>
				<read public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</read>
			</overloads>
		</read>
		<lock><d/></lock>
		<new set="method">
			<f a="param1">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.Reader"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"Reader"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.Console_LineReader" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/io/Console$LineReader.class" module="java.io.Console" extern="1">
		<extends path="java.io.Reader"/>
		<read public="1" set="method" override="1">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><t path="java.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</read>
		<ready public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</ready>
		<close public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</close>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.Console$LineReader"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"Console.LineReader"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.DataInput" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/io/DataInput.class" extern="1" interface="1">
		<readUTF public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</readUTF>
		<readLine public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</readLine>
		<readDouble public="1" set="method">
			<f a=""><x path="Float"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</readDouble>
		<readFloat public="1" set="method">
			<f a=""><x path="Single"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</readFloat>
		<readLong public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</readLong>
		<readInt public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</readInt>
		<readChar public="1" set="method">
			<f a=""><t path="java.types.Char16"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</readChar>
		<readUnsignedShort public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</readUnsignedShort>
		<readShort public="1" set="method">
			<f a=""><t path="java.types.Int16"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</readShort>
		<readUnsignedByte public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</readUnsignedByte>
		<readByte public="1" set="method">
			<f a=""><t path="java.types.Int8"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</readByte>
		<readBoolean public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</readBoolean>
		<skipBytes public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</skipBytes>
		<readFully public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><readFully public="1" set="method">
	<f a="param1">
		<c path="java.NativeArray"><t path="java.types.Int8"/></c>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</readFully></overloads>
		</readFully>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.DataInput"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"DataInput"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.DataOutput" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/io/DataOutput.class" extern="1" interface="1">
		<writeUTF public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</writeUTF>
		<writeChars public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</writeChars>
		<writeBytes public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</writeBytes>
		<writeDouble public="1" set="method">
			<f a="param1">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</writeDouble>
		<writeFloat public="1" set="method">
			<f a="param1">
				<x path="Single"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</writeFloat>
		<writeLong public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</writeLong>
		<writeInt public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</writeInt>
		<writeChar public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</writeChar>
		<writeShort public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</writeShort>
		<writeByte public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</writeByte>
		<writeBoolean public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</writeBoolean>
		<write public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads>
				<write public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
				<write public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Int8"/></c>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
			</overloads>
		</write>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.DataOutput"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"DataOutput"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.IOException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/io/IOException.class" extern="1">
		<extends path="java.lang.Exception"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.IOException"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"IOException"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.EOFException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/io/EOFException.class" extern="1">
		<extends path="java.io.IOException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.EOFException"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"EOFException"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Comparable" params="T" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Comparable.class" extern="1" interface="1">
		<compareTo public="1" set="method">
			<f a="param1">
				<c path="java.lang.Comparable.T"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</compareTo>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Comparable"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Comparable"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.File" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/io/File.class" extern="1">
		<implements path="java.lang.Comparable"><c path="java.io.File"/></implements>
		<implements path="java.io.Serializable"/>
		<createTempFile public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<c path="java.io.File"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><createTempFile public="1" set="method">
	<f a="param1:param2:param3">
		<c path="String"/>
		<c path="String"/>
		<c path="java.io.File"/>
		<c path="java.io.File"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</createTempFile></overloads>
		</createTempFile>
		<listRoots public="1" set="method" static="1">
			<f a=""><c path="java.NativeArray"><c path="java.io.File"/></c></f>
			<meta><m n=":overload"/></meta>
		</listRoots>
		<separatorChar public="1" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</separatorChar>
		<separator public="1" static="1">
			<c path="String"/>
			<meta><m n=":final"/></meta>
		</separator>
		<pathSeparatorChar public="1" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</pathSeparatorChar>
		<pathSeparator public="1" static="1">
			<c path="String"/>
			<meta><m n=":final"/></meta>
		</pathSeparator>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<c path="java.io.File"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<toPath public="1" set="method">
			<f a=""><c path="java.nio.file.Path"/></f>
			<meta><m n=":overload"/></meta>
		</toPath>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<getUsableSpace public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</getUsableSpace>
		<getFreeSpace public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</getFreeSpace>
		<getTotalSpace public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</getTotalSpace>
		<canExecute public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</canExecute>
		<setExecutable public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><setExecutable public="1" set="method">
	<f a="param1:param2">
		<x path="Bool"/>
		<x path="Bool"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</setExecutable></overloads>
		</setExecutable>
		<setReadable public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><setReadable public="1" set="method">
	<f a="param1:param2">
		<x path="Bool"/>
		<x path="Bool"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</setReadable></overloads>
		</setReadable>
		<setWritable public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><setWritable public="1" set="method">
	<f a="param1:param2">
		<x path="Bool"/>
		<x path="Bool"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</setWritable></overloads>
		</setWritable>
		<setReadOnly public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</setReadOnly>
		<setLastModified public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setLastModified>
		<renameTo public="1" set="method">
			<f a="param1">
				<c path="java.io.File"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</renameTo>
		<mkdirs public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</mkdirs>
		<mkdir public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</mkdir>
		<listFiles public="1" set="method">
			<f a="param1">
				<c path="java.io.FileFilter"/>
				<c path="java.NativeArray"><c path="java.io.File"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<listFiles public="1" set="method">
					<f a=""><c path="java.NativeArray"><c path="java.io.File"/></c></f>
					<meta><m n=":overload"/></meta>
				</listFiles>
				<listFiles public="1" set="method">
					<f a="param1">
						<c path="java.io.FilenameFilter"/>
						<c path="java.NativeArray"><c path="java.io.File"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</listFiles>
			</overloads>
		</listFiles>
		<list public="1" set="method">
			<f a="param1">
				<c path="java.io.FilenameFilter"/>
				<c path="java.NativeArray"><c path="String"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><list public="1" set="method">
	<f a=""><c path="java.NativeArray"><c path="String"/></c></f>
	<meta><m n=":overload"/></meta>
</list></overloads>
		</list>
		<deleteOnExit public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</deleteOnExit>
		<delete public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</delete>
		<createNewFile public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</createNewFile>
		<length public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</length>
		<lastModified public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</lastModified>
		<isHidden public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isHidden>
		<isFile public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isFile>
		<isDirectory public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isDirectory>
		<exists public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</exists>
		<canWrite public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</canWrite>
		<canRead public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</canRead>
		<toURI public="1" set="method">
			<f a=""><c path="java.net.URI"/></f>
			<meta><m n=":overload"/></meta>
		</toURI>
		<toURL public="1" set="method">
			<f a=""><c path="java.net.URL"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.MalformedURLException"</e></m>
				<m n=":deprecated"/>
			</meta>
		</toURL>
		<getCanonicalFile public="1" set="method">
			<f a=""><c path="java.io.File"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getCanonicalFile>
		<getCanonicalPath public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getCanonicalPath>
		<getAbsoluteFile public="1" set="method">
			<f a=""><c path="java.io.File"/></f>
			<meta><m n=":overload"/></meta>
		</getAbsoluteFile>
		<getAbsolutePath public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getAbsolutePath>
		<isAbsolute public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isAbsolute>
		<getPath public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getPath>
		<getParentFile public="1" set="method">
			<f a=""><c path="java.io.File"/></f>
			<meta><m n=":overload"/></meta>
		</getParentFile>
		<getParent public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getParent>
		<getName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getName>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.net.URI"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="java.io.File"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.File"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"File"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.File_TempDirectory" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/io/File$TempDirectory.class" module="java.io.File" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.io.File$TempDirectory"</e></m>
	<m n=":javaCanonical">
		<e>"java.io"</e>
		<e>"File.TempDirectory"</e>
	</m>
</meta></class>
	<class path="java.io.FileDescriptor" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/io/FileDescriptor.class" extern="1">
		<_in public="1" static="1">
			<c path="java.io.FileDescriptor"/>
			<meta>
				<m n=":native"><e>"in"</e></m>
				<m n=":final"/>
			</meta>
		</_in>
		<out public="1" static="1">
			<c path="java.io.FileDescriptor"/>
			<meta><m n=":final"/></meta>
		</out>
		<err public="1" static="1">
			<c path="java.io.FileDescriptor"/>
			<meta><m n=":final"/></meta>
		</err>
		<sync public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.SyncFailedException"</e></m>
			</meta>
		</sync>
		<valid public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</valid>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.FileDescriptor"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"FileDescriptor"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.FileFilter" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/io/FileFilter.class" extern="1" interface="1">
		<accept public="1" set="method">
			<f a="param1">
				<c path="java.io.File"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</accept>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.FileFilter"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"FileFilter"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.FileNotFoundException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/io/FileNotFoundException.class" extern="1">
		<extends path="java.io.IOException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.FileNotFoundException"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"FileNotFoundException"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.FilenameFilter" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/io/FilenameFilter.class" extern="1" interface="1">
		<accept public="1" set="method">
			<f a="param1:param2">
				<c path="java.io.File"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</accept>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.FilenameFilter"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"FilenameFilter"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.FilterOutputStream" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/io/FilterOutputStream.class" extern="1">
		<extends path="java.io.OutputStream"/>
		<close public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</close>
		<flush public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</flush>
		<write public="1" set="method" override="1">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads>
				<write public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
				<write public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Int8"/></c>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
			</overloads>
		</write>
		<out><c path="java.io.OutputStream"/></out>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.io.OutputStream"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.FilterOutputStream"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"FilterOutputStream"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.InputStream" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/io/InputStream.class" extern="1">
		<implements path="java.io.Closeable"/>
		<markSupported public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</markSupported>
		<reset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</reset>
		<mark public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</mark>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</close>
		<available public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</available>
		<skip public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</skip>
		<read public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads>
				<read public="1" set="method">
					<f a=""><x path="Int"/></f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</read>
				<read public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Int8"/></c>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</read>
			</overloads>
		</read>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.InputStream"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"InputStream"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.NativeInput" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/io/NativeInput.hx">
		<extends path="haxe.io.Input"/>
		<stream><c path="java.io.InputStream"/></stream>
		<readByte public="1" set="method" line="38" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="53" override="1"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<close public="1" set="method" line="74" override="1"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="33"><f a="stream">
	<c path="java.io.InputStream"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"haxe.java.io.NativeInput"</e></m></meta>
	</class>
	<class path="java.io.NativeOutput" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/io/NativeOutput.hx">
		<extends path="haxe.io.Output"/>
		<stream><c path="java.io.OutputStream"/></stream>
		<writeByte public="1" set="method" line="38" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<close public="1" set="method" line="54" override="1"><f a=""><x path="Void"/></f></close>
		<flush public="1" set="method" line="66" override="1"><f a=""><x path="Void"/></f></flush>
		<new public="1" set="method" line="33"><f a="stream">
	<c path="java.io.OutputStream"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"haxe.java.io.NativeOutput"</e></m></meta>
	</class>
	<class path="java.io.ObjectStreamException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/io/ObjectStreamException.class" extern="1">
		<extends path="java.io.IOException"/>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><new set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.ObjectStreamException"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"ObjectStreamException"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Appendable" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Appendable.class" extern="1" interface="1">
		<append public="1" set="method">
			<f a="param1">
				<t path="java.types.Char16"/>
				<c path="java.lang.Appendable"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads>
				<append public="1" set="method">
					<f a="param1">
						<c path="java.lang.CharSequence"/>
						<c path="java.lang.Appendable"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</append>
				<append public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.lang.CharSequence"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.lang.Appendable"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</append>
			</overloads>
		</append>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Appendable"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Appendable"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.PrintStream" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/io/PrintStream.class" extern="1">
		<extends path="java.io.FilterOutputStream"/>
		<implements path="java.lang.Appendable"/>
		<implements path="java.io.Closeable"/>
		<append public="1" set="method">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.io.PrintStream"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<append public="1" set="method">
					<f a="param1">
						<t path="java.types.Char16"/>
						<c path="java.io.PrintStream"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.lang.CharSequence"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.io.PrintStream"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
			</overloads>
		</append>
		<format public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.util.Locale"/>
				<c path="String"/>
				<c path="java.NativeArray"><d/></c>
				<c path="java.io.PrintStream"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><format public="1" set="method">
	<f a="param1:param2">
		<c path="String"/>
		<c path="java.NativeArray"><d/></c>
		<c path="java.io.PrintStream"/>
	</f>
	<meta><m n=":overload"/></meta>
</format></overloads>
		</format>
		<printf public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.util.Locale"/>
				<c path="String"/>
				<c path="java.NativeArray"><d/></c>
				<c path="java.io.PrintStream"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><printf public="1" set="method">
	<f a="param1:param2">
		<c path="String"/>
		<c path="java.NativeArray"><d/></c>
		<c path="java.io.PrintStream"/>
	</f>
	<meta><m n=":overload"/></meta>
</printf></overloads>
		</printf>
		<println public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<println public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</println>
				<println public="1" set="method">
					<f a="param1">
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</println>
				<println public="1" set="method">
					<f a="param1">
						<t path="java.types.Char16"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</println>
				<println public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</println>
				<println public="1" set="method">
					<f a="param1">
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</println>
				<println public="1" set="method">
					<f a="param1">
						<x path="Single"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</println>
				<println public="1" set="method">
					<f a="param1">
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</println>
				<println public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</println>
				<println public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</println>
			</overloads>
		</println>
		<print public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<print public="1" set="method">
					<f a="param1">
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</print>
				<print public="1" set="method">
					<f a="param1">
						<t path="java.types.Char16"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</print>
				<print public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</print>
				<print public="1" set="method">
					<f a="param1">
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</print>
				<print public="1" set="method">
					<f a="param1">
						<x path="Single"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</print>
				<print public="1" set="method">
					<f a="param1">
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</print>
				<print public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</print>
				<print public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</print>
			</overloads>
		</print>
		<write public="1" set="method" override="1">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><write public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</write></overloads>
		</write>
		<clearError set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</clearError>
		<setError set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</setError>
		<checkError public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</checkError>
		<close public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</close>
		<flush public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</flush>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.io.File"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.UnsupportedEncodingException"</e></m>
				<m n=":throws"><e>"java.io.FileNotFoundException"</e></m>
			</meta>
			<overloads>
				<new public="1" set="method">
					<f a="param1">
						<c path="java.io.OutputStream"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="java.io.OutputStream"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.io.OutputStream"/>
						<x path="Bool"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.UnsupportedEncodingException"</e></m>
					</meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.FileNotFoundException"</e></m>
					</meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.UnsupportedEncodingException"</e></m>
						<m n=":throws"><e>"java.io.FileNotFoundException"</e></m>
					</meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="java.io.File"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.FileNotFoundException"</e></m>
					</meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.PrintStream"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"PrintStream"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.Writer" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/io/Writer.class" extern="1">
		<implements path="java.lang.Appendable"/>
		<implements path="java.io.Closeable"/>
		<implements path="java.io.Flushable"/>
		<append public="1" set="method">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.io.Writer"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads>
				<append public="1" set="method">
					<f a="param1">
						<t path="java.types.Char16"/>
						<c path="java.io.Writer"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</append>
				<append public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.lang.CharSequence"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.io.Writer"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</append>
			</overloads>
		</append>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</close>
		<flush public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</flush>
		<write public="1" set="method">
			<f a="param1:param2:param3">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads>
				<write public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
				<write public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
				<write public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
				<write public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
			</overloads>
		</write>
		<lock><d/></lock>
		<new set="method">
			<f a="param1">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.Writer"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"Writer"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.PrintWriter" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/io/PrintWriter.class" extern="1">
		<extends path="java.io.Writer"/>
		<append public="1" set="method" override="1">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.io.PrintWriter"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<append public="1" set="method">
					<f a="param1">
						<t path="java.types.Char16"/>
						<c path="java.io.PrintWriter"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.lang.CharSequence"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.io.PrintWriter"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
			</overloads>
		</append>
		<format public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.util.Locale"/>
				<c path="String"/>
				<c path="java.NativeArray"><d/></c>
				<c path="java.io.PrintWriter"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><format public="1" set="method">
	<f a="param1:param2">
		<c path="String"/>
		<c path="java.NativeArray"><d/></c>
		<c path="java.io.PrintWriter"/>
	</f>
	<meta><m n=":overload"/></meta>
</format></overloads>
		</format>
		<printf public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.util.Locale"/>
				<c path="String"/>
				<c path="java.NativeArray"><d/></c>
				<c path="java.io.PrintWriter"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><printf public="1" set="method">
	<f a="param1:param2">
		<c path="String"/>
		<c path="java.NativeArray"><d/></c>
		<c path="java.io.PrintWriter"/>
	</f>
	<meta><m n=":overload"/></meta>
</printf></overloads>
		</printf>
		<println public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<println public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</println>
				<println public="1" set="method">
					<f a="param1">
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</println>
				<println public="1" set="method">
					<f a="param1">
						<t path="java.types.Char16"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</println>
				<println public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</println>
				<println public="1" set="method">
					<f a="param1">
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</println>
				<println public="1" set="method">
					<f a="param1">
						<x path="Single"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</println>
				<println public="1" set="method">
					<f a="param1">
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</println>
				<println public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</println>
				<println public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</println>
			</overloads>
		</println>
		<print public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<print public="1" set="method">
					<f a="param1">
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</print>
				<print public="1" set="method">
					<f a="param1">
						<t path="java.types.Char16"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</print>
				<print public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</print>
				<print public="1" set="method">
					<f a="param1">
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</print>
				<print public="1" set="method">
					<f a="param1">
						<x path="Single"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</print>
				<print public="1" set="method">
					<f a="param1">
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</print>
				<print public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</print>
				<print public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</print>
			</overloads>
		</print>
		<write public="1" set="method" override="1">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<write public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</write>
				<write public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</write>
				<write public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</write>
				<write public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</write>
			</overloads>
		</write>
		<clearError set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</clearError>
		<setError set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</setError>
		<checkError public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</checkError>
		<close public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</close>
		<flush public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</flush>
		<out><c path="java.io.Writer"/></out>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.io.File"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.UnsupportedEncodingException"</e></m>
				<m n=":throws"><e>"java.io.FileNotFoundException"</e></m>
			</meta>
			<overloads>
				<new public="1" set="method">
					<f a="param1">
						<c path="java.io.Writer"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="java.io.Writer"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="java.io.OutputStream"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="java.io.OutputStream"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.FileNotFoundException"</e></m>
					</meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.UnsupportedEncodingException"</e></m>
						<m n=":throws"><e>"java.io.FileNotFoundException"</e></m>
					</meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="java.io.File"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.FileNotFoundException"</e></m>
					</meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.PrintWriter"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"PrintWriter"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.RandomAccessFile" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/io/RandomAccessFile.class" extern="1">
		<implements path="java.io.DataOutput"/>
		<implements path="java.io.DataInput"/>
		<implements path="java.io.Closeable"/>
		<writeUTF public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</writeUTF>
		<writeChars public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</writeChars>
		<writeBytes public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</writeBytes>
		<writeDouble public="1" set="method">
			<f a="param1">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</writeDouble>
		<writeFloat public="1" set="method">
			<f a="param1">
				<x path="Single"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</writeFloat>
		<writeLong public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</writeLong>
		<writeInt public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</writeInt>
		<writeChar public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</writeChar>
		<writeShort public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</writeShort>
		<writeByte public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</writeByte>
		<writeBoolean public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</writeBoolean>
		<readUTF public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</readUTF>
		<readLine public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</readLine>
		<readDouble public="1" set="method">
			<f a=""><x path="Float"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</readDouble>
		<readFloat public="1" set="method">
			<f a=""><x path="Single"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</readFloat>
		<readLong public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</readLong>
		<readInt public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</readInt>
		<readChar public="1" set="method">
			<f a=""><t path="java.types.Char16"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</readChar>
		<readUnsignedShort public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</readUnsignedShort>
		<readShort public="1" set="method">
			<f a=""><t path="java.types.Int16"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</readShort>
		<readUnsignedByte public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</readUnsignedByte>
		<readByte public="1" set="method">
			<f a=""><t path="java.types.Int8"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</readByte>
		<readBoolean public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</readBoolean>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</close>
		<setLength public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</setLength>
		<length public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</length>
		<seek public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</seek>
		<getFilePointer public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getFilePointer>
		<write public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads>
				<write public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
				<write public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Int8"/></c>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
			</overloads>
		</write>
		<skipBytes public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</skipBytes>
		<readFully public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
			<overloads><readFully public="1" set="method">
	<f a="param1">
		<c path="java.NativeArray"><t path="java.types.Int8"/></c>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
		<m n=":final"/>
	</meta>
</readFully></overloads>
		</readFully>
		<read public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads>
				<read public="1" set="method">
					<f a=""><x path="Int"/></f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</read>
				<read public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Int8"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</read>
			</overloads>
		</read>
		<getChannel public="1" set="method">
			<f a=""><c path="java.nio.channels.FileChannel"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getChannel>
		<getFD public="1" set="method">
			<f a=""><c path="java.io.FileDescriptor"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</getFD>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.io.File"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.FileNotFoundException"</e></m>
			</meta>
			<overloads><new public="1" set="method">
	<f a="param1:param2">
		<c path="String"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.FileNotFoundException"</e></m>
	</meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.RandomAccessFile"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"RandomAccessFile"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.SyncFailedException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/io/SyncFailedException.class" extern="1">
		<extends path="java.io.IOException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.SyncFailedException"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"SyncFailedException"</e>
			</m>
		</meta>
	</class>
	<class path="java.io.UnsupportedEncodingException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/io/UnsupportedEncodingException.class" extern="1">
		<extends path="java.io.IOException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.io.UnsupportedEncodingException"</e></m>
			<m n=":javaCanonical">
				<e>"java.io"</e>
				<e>"UnsupportedEncodingException"</e>
			</m>
		</meta>
	</class>
	<class path="java.javax.net.ServerSocketFactory" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@javax/net/ServerSocketFactory.class" extern="1">
		<getDefault public="1" set="method" static="1">
			<f a=""><c path="java.javax.net.ServerSocketFactory"/></f>
			<meta><m n=":overload"/></meta>
		</getDefault>
		<createServerSocket public="1" set="method">
			<f a="param1:param2:param3">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.net.InetAddress"/>
				<c path="java.net.ServerSocket"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads>
				<createServerSocket public="1" set="method">
					<f a=""><c path="java.net.ServerSocket"/></f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</createServerSocket>
				<createServerSocket public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<c path="java.net.ServerSocket"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</createServerSocket>
				<createServerSocket public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.net.ServerSocket"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</createServerSocket>
			</overloads>
		</createServerSocket>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"javax.net.ServerSocketFactory"</e></m>
			<m n=":javaCanonical">
				<e>"javax.net"</e>
				<e>"ServerSocketFactory"</e>
			</m>
		</meta>
	</class>
	<class path="java.javax.net.SocketFactory" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@javax/net/SocketFactory.class" extern="1">
		<getDefault public="1" set="method" static="1">
			<f a=""><c path="java.javax.net.SocketFactory"/></f>
			<meta><m n=":overload"/></meta>
		</getDefault>
		<createSocket public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="java.net.InetAddress"/>
				<x path="Int"/>
				<c path="java.net.InetAddress"/>
				<x path="Int"/>
				<c path="java.net.Socket"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads>
				<createSocket public="1" set="method">
					<f a=""><c path="java.net.Socket"/></f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</createSocket>
				<createSocket public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<x path="Int"/>
						<c path="java.net.Socket"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.net.UnknownHostException"</e></m>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</createSocket>
				<createSocket public="1" set="method">
					<f a="param1:param2:param3:param4">
						<c path="String"/>
						<x path="Int"/>
						<c path="java.net.InetAddress"/>
						<x path="Int"/>
						<c path="java.net.Socket"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.net.UnknownHostException"</e></m>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</createSocket>
				<createSocket public="1" set="method">
					<f a="param1:param2">
						<c path="java.net.InetAddress"/>
						<x path="Int"/>
						<c path="java.net.Socket"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</createSocket>
			</overloads>
		</createSocket>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"javax.net.SocketFactory"</e></m>
			<m n=":javaCanonical">
				<e>"javax.net"</e>
				<e>"SocketFactory"</e>
			</m>
		</meta>
	</class>
	<class path="java.javax.net.ssl.SSLServerSocketFactory" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@javax/net/ssl/SSLServerSocketFactory.class" extern="1">
		<extends path="java.javax.net.ServerSocketFactory"/>
		<getDefault public="1" set="method" static="1">
			<f a=""><c path="java.javax.net.ServerSocketFactory"/></f>
			<meta><m n=":overload"/></meta>
		</getDefault>
		<_getDefault public="1" set="method" static="1">
			<f a=""><c path="java.javax.net.ServerSocketFactory"/></f>
			<meta>
				<m n=":native"><e>"getDefault"</e></m>
				<m n=":deprecated"><e>"This static field `_getDefault` is deprecated and will be removed in later versions. Please use `getDefault` instead"</e></m>
				<m n=":overload"/>
			</meta>
		</_getDefault>
		<getSupportedCipherSuites public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</getSupportedCipherSuites>
		<getDefaultCipherSuites public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</getDefaultCipherSuites>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"javax.net.ssl.SSLServerSocketFactory"</e></m>
			<m n=":javaCanonical">
				<e>"javax.net.ssl"</e>
				<e>"SSLServerSocketFactory"</e>
			</m>
		</meta>
	</class>
	<class path="java.javax.net.ssl.SSLSocketFactory" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@javax/net/ssl/SSLSocketFactory.class" extern="1">
		<extends path="java.javax.net.SocketFactory"/>
		<getDefault public="1" set="method" static="1">
			<f a=""><c path="java.javax.net.SocketFactory"/></f>
			<meta><m n=":overload"/></meta>
		</getDefault>
		<_getDefault public="1" set="method" static="1">
			<f a=""><c path="java.javax.net.SocketFactory"/></f>
			<meta>
				<m n=":native"><e>"getDefault"</e></m>
				<m n=":deprecated"><e>"This static field `_getDefault` is deprecated and will be removed in later versions. Please use `getDefault` instead"</e></m>
				<m n=":overload"/>
			</meta>
		</_getDefault>
		<createSocket public="1" set="method" override="1">
			<f a="param1:param2:param3:param4">
				<c path="java.net.Socket"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="java.net.Socket"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</createSocket>
		<getSupportedCipherSuites public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</getSupportedCipherSuites>
		<getDefaultCipherSuites public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</getDefaultCipherSuites>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"javax.net.ssl.SSLSocketFactory"</e></m>
			<m n=":javaCanonical">
				<e>"javax.net.ssl"</e>
				<e>"SSLSocketFactory"</e>
			</m>
		</meta>
	</class>
	<class path="java.javax.xml.transform.Result" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@javax/xml/transform/Result.class" extern="1" interface="1">
		<getSystemId public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getSystemId>
		<setSystemId public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setSystemId>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"javax.xml.transform.Result"</e></m>
			<m n=":javaCanonical">
				<e>"javax.xml.transform"</e>
				<e>"Result"</e>
			</m>
		</meta>
	</class>
	<class path="java.javax.xml.transform.Result_Statics" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@javax/xml/transform/Result.class" module="java.javax.xml.transform.Result" extern="1">
		<PI_DISABLE_OUTPUT_ESCAPING public="1" static="1">
			<c path="String"/>
			<meta><m n=":final"/></meta>
		</PI_DISABLE_OUTPUT_ESCAPING>
		<PI_ENABLE_OUTPUT_ESCAPING public="1" static="1">
			<c path="String"/>
			<meta><m n=":final"/></meta>
		</PI_ENABLE_OUTPUT_ESCAPING>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"javax.xml.transform.Result"</e></m>
			<m n=":javaCanonical">
				<e>"javax.xml.transform"</e>
				<e>"Result"</e>
			</m>
		</meta>
	</class>
	<class path="java.javax.xml.transform.Source" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@javax/xml/transform/Source.class" extern="1" interface="1">
		<getSystemId public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getSystemId>
		<setSystemId public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setSystemId>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"javax.xml.transform.Source"</e></m>
			<m n=":javaCanonical">
				<e>"javax.xml.transform"</e>
				<e>"Source"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.AbstractStringBuilder" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/AbstractStringBuilder.class" extern="1">
		<implements path="java.lang.Appendable"/>
		<implements path="java.lang.CharSequence"/>
		<append public="1" set="method">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.lang.AbstractStringBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<append public="1" set="method">
					<f a="param1">
						<d/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<c path="java.lang.StringBuffer"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<x path="Bool"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<x path="haxe.Int64"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<x path="Single"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<x path="Float"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<t path="java.types.Char16"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.lang.CharSequence"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
			</overloads>
		</append>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<reverse public="1" set="method">
			<f a=""><c path="java.lang.AbstractStringBuilder"/></f>
			<meta><m n=":overload"/></meta>
		</reverse>
		<lastIndexOf public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><lastIndexOf public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</lastIndexOf></overloads>
		</lastIndexOf>
		<indexOf public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><indexOf public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</indexOf></overloads>
		</indexOf>
		<insert public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Float"/>
				<c path="java.lang.AbstractStringBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<insert public="1" set="method">
					<f a="param1:param2:param3:param4">
						<x path="Int"/>
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<d/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="String"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.lang.CharSequence"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2:param3:param4">
						<x path="Int"/>
						<c path="java.lang.CharSequence"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Bool"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<t path="java.types.Char16"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="haxe.Int64"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Single"/>
						<c path="java.lang.AbstractStringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
			</overloads>
		</insert>
		<substring public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><substring public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</substring></overloads>
		</substring>
		<subSequence public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.lang.CharSequence"/>
			</f>
			<meta><m n=":overload"/></meta>
		</subSequence>
		<replace public="1" set="method">
			<f a="param1:param2:param3">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="java.lang.AbstractStringBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</replace>
		<deleteCharAt public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.lang.AbstractStringBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</deleteCharAt>
		<appendCodePoint public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.lang.AbstractStringBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</appendCodePoint>
		<delete public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.lang.AbstractStringBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</delete>
		<setCharAt public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<t path="java.types.Char16"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setCharAt>
		<getChars public="1" set="method">
			<f a="param1:param2:param3:param4">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.NativeArray"><t path="java.types.Char16"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getChars>
		<offsetByCodePoints public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</offsetByCodePoints>
		<codePointCount public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</codePointCount>
		<codePointBefore public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</codePointBefore>
		<codePointAt public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</codePointAt>
		<charAt public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<t path="java.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</charAt>
		<setLength public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setLength>
		<trimToSize public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</trimToSize>
		<ensureCapacity public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ensureCapacity>
		<capacity public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</capacity>
		<length public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</length>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.AbstractStringBuilder"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"AbstractStringBuilder"</e>
			</m>
		</meta>
	</class>
	<abstract path="java.lang.Boolean" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Boolean.hx">
		<from>
			<icast><c path="java.lang.BooleanClass"/></icast>
			<icast field="fromBool"><x path="Bool"/></icast>
		</from>
		<this><c path="java.lang.BooleanClass"/></this>
		<to>
			<icast><c path="java.lang.BooleanClass"/></icast>
			<icast field="toBool"><x path="Bool"/></icast>
		</to>
		<meta>
			<m n=":native"><e>""</e></m>
			<m n=":forward"/>
			<m n=":forwardStatics"/>
		</meta>
		<impl><class path="java.lang._Boolean.Boolean_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Boolean.hx" private="1" module="java.lang.Boolean">
	<toBool public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<c path="java.lang.BooleanClass"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
			<m n=":extern"/>
		</meta>
	</toBool>
	<fromBool public="1" get="inline" set="null" line="30" static="1">
		<f a="b">
			<x path="Bool"/>
			<x path="java.lang.Boolean"/>
		</f>
		<meta>
			<m n=":from"/>
			<m n=":extern"/>
		</meta>
	</fromBool>
	<meta>
		<m n=":final"/>
		<m n=":native"><e>""</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="java.lang._Boolean.Boolean_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Boolean.hx" private="1" module="java.lang.Boolean">
		<toBool public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<c path="java.lang.BooleanClass"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
				<m n=":extern"/>
			</meta>
		</toBool>
		<fromBool public="1" get="inline" set="null" line="30" static="1">
			<f a="b">
				<x path="Bool"/>
				<x path="java.lang.Boolean"/>
			</f>
			<meta>
				<m n=":from"/>
				<m n=":extern"/>
			</meta>
		</fromBool>
		<meta>
			<m n=":final"/>
			<m n=":native"><e>""</e></m>
		</meta>
	</class>
	<class path="java.lang.BooleanClass" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Boolean.hx" module="java.lang.Boolean" extern="1">
		<extends path="java.lang.Number"/>
		<implements path="java.lang.Comparable"><x path="java.lang.Boolean"/></implements>
		<FALSE public="1" static="1">
			<x path="java.lang.Boolean"/>
			<meta><m n=":final"/></meta>
		</FALSE>
		<TRUE public="1" static="1">
			<x path="java.lang.Boolean"/>
			<meta><m n=":final"/></meta>
		</TRUE>
		<TYPE public="1" static="1">
			<c path="java.lang.Class"><x path="java.lang.Boolean"/></c>
			<meta><m n=":final"/></meta>
		</TYPE>
		<compare public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</compare>
		<getBoolean public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getBoolean>
		<parseBoolean public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</parseBoolean>
		<_toString public="1" set="method" static="1">
			<f a="param1">
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":native"><e>"toString"</e></m>
				<m n=":overload"/>
			</meta>
		</_toString>
		<valueOf public="1" set="method" static="1">
			<f a="param1">
				<x path="Bool"/>
				<x path="java.lang.Boolean"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><valueOf public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="java.lang.Boolean"/>
	</f>
	<meta><m n=":overload"/></meta>
</valueOf></overloads>
		</valueOf>
		<booleanValue public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</booleanValue>
		<compareTo public="1" set="method">
			<f a="param1">
				<x path="java.lang.Boolean"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<d/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<new public="1" set="method">
			<f a="bool">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="string">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta><m n=":native"><e>"java.lang.Boolean"</e></m></meta>
	</class>
	<abstract path="java.lang.Byte" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Byte.hx">
		<from>
			<icast><c path="java.lang.ByteClass"/></icast>
			<icast field="fromByte"><t path="java.types.Int8"/></icast>
		</from>
		<this><c path="java.lang.ByteClass"/></this>
		<to>
			<icast><c path="java.lang.ByteClass"/></icast>
			<icast field="toByte"><x path="java.Int8"/></icast>
		</to>
		<meta>
			<m n=":native"><e>""</e></m>
			<m n=":forwardStatics"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="java.lang._Byte.Byte_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Byte.hx" private="1" module="java.lang.Byte">
	<toByte public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<c path="java.lang.ByteClass"/>
			<t path="java.types.Int8"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
			<m n=":extern"/>
		</meta>
	</toByte>
	<fromByte public="1" get="inline" set="null" line="30" static="1">
		<f a="b">
			<t path="java.types.Int8"/>
			<x path="java.lang.Byte"/>
		</f>
		<meta>
			<m n=":from"/>
			<m n=":extern"/>
		</meta>
	</fromByte>
	<meta>
		<m n=":final"/>
		<m n=":native"><e>""</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="java.lang._Byte.Byte_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Byte.hx" private="1" module="java.lang.Byte">
		<toByte public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<c path="java.lang.ByteClass"/>
				<t path="java.types.Int8"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
				<m n=":extern"/>
			</meta>
		</toByte>
		<fromByte public="1" get="inline" set="null" line="30" static="1">
			<f a="b">
				<t path="java.types.Int8"/>
				<x path="java.lang.Byte"/>
			</f>
			<meta>
				<m n=":from"/>
				<m n=":extern"/>
			</meta>
		</fromByte>
		<meta>
			<m n=":final"/>
			<m n=":native"><e>""</e></m>
		</meta>
	</class>
	<class path="java.lang.ByteClass" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Byte.hx" module="java.lang.Byte" extern="1">
		<extends path="java.lang.Number"/>
		<implements path="java.lang.Comparable"><x path="java.lang.Byte"/></implements>
		<MAX_VALUE public="1" set="null" static="1">
			<t path="java.types.Int8"/>
			<meta><m n=":final"/></meta>
		</MAX_VALUE>
		<MIN_VALUE public="1" set="null" static="1">
			<t path="java.types.Int8"/>
			<meta><m n=":final"/></meta>
		</MIN_VALUE>
		<SIZE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</SIZE>
		<TYPE public="1" static="1">
			<c path="java.lang.Class"><x path="java.lang.Byte"/></c>
			<meta><m n=":final"/></meta>
		</TYPE>
		<compare public="1" set="method" static="1">
			<f a="param1:param2">
				<t path="java.types.Int8"/>
				<t path="java.types.Int8"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</compare>
		<decode public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="java.lang.Byte"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
		</decode>
		<parseByte public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<t path="java.types.Int8"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
			<overloads><parseByte public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<t path="java.types.Int8"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
	</meta>
</parseByte></overloads>
		</parseByte>
		<_toString public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Int8"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":native"><e>"toString"</e></m>
				<m n=":overload"/>
			</meta>
		</_toString>
		<valueOf public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Int8"/>
				<x path="java.lang.Byte"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<valueOf public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<x path="Int"/>
						<x path="java.lang.Byte"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
					</meta>
				</valueOf>
				<valueOf public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="java.lang.Byte"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
					</meta>
				</valueOf>
			</overloads>
		</valueOf>
		<compareTo public="1" set="method">
			<f a="param1">
				<x path="java.lang.Byte"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<d/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<new public="1" set="method">
			<f a="param1">
				<t path="java.types.Int8"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
	</meta>
</new></overloads>
		</new>
		<meta><m n=":native"><e>"java.lang.Byte"</e></m></meta>
	</class>
	<class path="java.lang.Byte_ByteCache" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Byte.hx" module="java.lang.Byte" extern="1"><meta>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.Byte$ByteCache"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"Byte.ByteCache"</e>
	</m>
</meta></class>
	<abstract path="java.lang.Character" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Character.hx">
		<from>
			<icast><c path="java.lang.CharacterClass"/></icast>
			<icast field="fromCharacter"><t path="java.types.Char16"/></icast>
		</from>
		<this><c path="java.lang.CharacterClass"/></this>
		<to>
			<icast><c path="java.lang.CharacterClass"/></icast>
			<icast field="toCharacter"><x path="java.Char16"/></icast>
		</to>
		<meta>
			<m n=":native"><e>""</e></m>
			<m n=":forwardStatics"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="java.lang._Character.Character_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Character.hx" private="1" module="java.lang.Character">
	<toCharacter public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<c path="java.lang.CharacterClass"/>
			<t path="java.types.Char16"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
			<m n=":extern"/>
		</meta>
	</toCharacter>
	<fromCharacter public="1" get="inline" set="null" line="30" static="1">
		<f a="b">
			<t path="java.types.Char16"/>
			<x path="java.lang.Character"/>
		</f>
		<meta>
			<m n=":from"/>
			<m n=":extern"/>
		</meta>
	</fromCharacter>
	<meta>
		<m n=":final"/>
		<m n=":native"><e>""</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="java.lang._Character.Character_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Character.hx" private="1" module="java.lang.Character">
		<toCharacter public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<c path="java.lang.CharacterClass"/>
				<t path="java.types.Char16"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
				<m n=":extern"/>
			</meta>
		</toCharacter>
		<fromCharacter public="1" get="inline" set="null" line="30" static="1">
			<f a="b">
				<t path="java.types.Char16"/>
				<x path="java.lang.Character"/>
			</f>
			<meta>
				<m n=":from"/>
				<m n=":extern"/>
			</meta>
		</fromCharacter>
		<meta>
			<m n=":final"/>
			<m n=":native"><e>""</e></m>
		</meta>
	</class>
	<class path="java.lang.CharacterClass" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Character.hx" module="java.lang.Character" extern="1">
		<implements path="java.lang.Comparable"><x path="java.lang.Character"/></implements>
		<COMBINING_SPACING_MARK public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</COMBINING_SPACING_MARK>
		<CONNECTOR_PUNCTUATION public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</CONNECTOR_PUNCTUATION>
		<CONTROL public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</CONTROL>
		<CURRENCY_SYMBOL public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</CURRENCY_SYMBOL>
		<DASH_PUNCTUATION public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DASH_PUNCTUATION>
		<DECIMAL_DIGIT_NUMBER public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DECIMAL_DIGIT_NUMBER>
		<DIRECTIONALITY_ARABIC_NUMBER public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_ARABIC_NUMBER>
		<DIRECTIONALITY_BOUNDARY_NEUTRAL public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_BOUNDARY_NEUTRAL>
		<DIRECTIONALITY_COMMON_NUMBER_SEPARATOR public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_COMMON_NUMBER_SEPARATOR>
		<DIRECTIONALITY_EUROPEAN_NUMBER public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_EUROPEAN_NUMBER>
		<DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR>
		<DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR>
		<DIRECTIONALITY_LEFT_TO_RIGHT public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_LEFT_TO_RIGHT>
		<DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING>
		<DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE>
		<DIRECTIONALITY_NONSPACING_MARK public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_NONSPACING_MARK>
		<DIRECTIONALITY_OTHER_NEUTRALS public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_OTHER_NEUTRALS>
		<DIRECTIONALITY_PARAGRAPH_SEPARATOR public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_PARAGRAPH_SEPARATOR>
		<DIRECTIONALITY_POP_DIRECTIONAL_FORMAT public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_POP_DIRECTIONAL_FORMAT>
		<DIRECTIONALITY_RIGHT_TO_LEFT public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_RIGHT_TO_LEFT>
		<DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC>
		<DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING>
		<DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE>
		<DIRECTIONALITY_SEGMENT_SEPARATOR public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_SEGMENT_SEPARATOR>
		<DIRECTIONALITY_UNDEFINED public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_UNDEFINED>
		<DIRECTIONALITY_WHITESPACE public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</DIRECTIONALITY_WHITESPACE>
		<ENCLOSING_MARK public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</ENCLOSING_MARK>
		<END_PUNCTUATION public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</END_PUNCTUATION>
		<FINAL_QUOTE_PUNCTUATION public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</FINAL_QUOTE_PUNCTUATION>
		<FORMAT public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</FORMAT>
		<INITIAL_QUOTE_PUNCTUATION public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</INITIAL_QUOTE_PUNCTUATION>
		<LETTER_NUMBER public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</LETTER_NUMBER>
		<LINE_SEPARATOR public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</LINE_SEPARATOR>
		<LOWERCASE_LETTER public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</LOWERCASE_LETTER>
		<MATH_SYMBOL public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</MATH_SYMBOL>
		<MAX_CODE_POINT public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MAX_CODE_POINT>
		<MAX_HIGH_SURROGATE public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</MAX_HIGH_SURROGATE>
		<MAX_LOW_SURROGATE public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</MAX_LOW_SURROGATE>
		<MAX_RADIX public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MAX_RADIX>
		<MAX_SURROGATE public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</MAX_SURROGATE>
		<MAX_VALUE public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</MAX_VALUE>
		<MIN_CODE_POINT public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MIN_CODE_POINT>
		<MIN_HIGH_SURROGATE public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</MIN_HIGH_SURROGATE>
		<MIN_LOW_SURROGATE public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</MIN_LOW_SURROGATE>
		<MIN_RADIX public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MIN_RADIX>
		<MIN_SUPPLEMENTARY_CODE_POINT public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MIN_SUPPLEMENTARY_CODE_POINT>
		<MIN_SURROGATE public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</MIN_SURROGATE>
		<MIN_VALUE public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</MIN_VALUE>
		<MODIFIER_LETTER public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</MODIFIER_LETTER>
		<MODIFIER_SYMBOL public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</MODIFIER_SYMBOL>
		<NON_SPACING_MARK public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</NON_SPACING_MARK>
		<OTHER_LETTER public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</OTHER_LETTER>
		<OTHER_NUMBER public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</OTHER_NUMBER>
		<OTHER_PUNCTUATION public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</OTHER_PUNCTUATION>
		<OTHER_SYMBOL public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</OTHER_SYMBOL>
		<PARAGRAPH_SEPARATOR public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</PARAGRAPH_SEPARATOR>
		<PRIVATE_USE public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</PRIVATE_USE>
		<SIZE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</SIZE>
		<SPACE_SEPARATOR public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</SPACE_SEPARATOR>
		<START_PUNCTUATION public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</START_PUNCTUATION>
		<SURROGATE public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</SURROGATE>
		<TITLECASE_LETTER public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</TITLECASE_LETTER>
		<TYPE public="1" static="1">
			<c path="java.lang.Class"><x path="java.lang.Character"/></c>
			<meta><m n=":final"/></meta>
		</TYPE>
		<UNASSIGNED public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</UNASSIGNED>
		<UPPERCASE_LETTER public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</UPPERCASE_LETTER>
		<charCount public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</charCount>
		<codePointAt public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="java.lang.CharSequence"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<codePointAt public="1" set="method">
					<f a="param1:param2">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</codePointAt>
				<codePointAt public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</codePointAt>
			</overloads>
		</codePointAt>
		<codePointBefore public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="java.lang.CharSequence"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<codePointBefore public="1" set="method">
					<f a="param1:param2">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</codePointBefore>
				<codePointBefore public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</codePointBefore>
			</overloads>
		</codePointBefore>
		<codePointCount public="1" set="method" static="1">
			<f a="param1:param2:param3">
				<c path="java.lang.CharSequence"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><codePointCount public="1" set="method">
	<f a="param1:param2:param3">
		<c path="java.NativeArray"><t path="java.types.Char16"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</codePointCount></overloads>
		</codePointCount>
		<compare public="1" set="method" static="1">
			<f a="param1:param2">
				<t path="java.types.Char16"/>
				<t path="java.types.Char16"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</compare>
		<digit public="1" set="method" static="1">
			<f a="param1:param2">
				<t path="java.types.Char16"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><digit public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</digit></overloads>
		</digit>
		<forDigit public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<t path="java.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</forDigit>
		<getDirectionality public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<t path="java.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getDirectionality public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<t path="java.types.Char16"/>
	</f>
	<meta><m n=":overload"/></meta>
</getDirectionality></overloads>
		</getDirectionality>
		<getName public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getName>
		<getNumericValue public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getNumericValue public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</getNumericValue></overloads>
		</getNumericValue>
		<getType public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getType public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</getType></overloads>
		</getType>
		<highSurrogate public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<t path="java.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</highSurrogate>
		<isAlphabetic public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isAlphabetic>
		<isBmpCodePoint public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isBmpCodePoint>
		<isDefined public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isDefined public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isDefined></overloads>
		</isDefined>
		<isDigit public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isDigit public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isDigit></overloads>
		</isDigit>
		<isHighSurrogate public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isHighSurrogate>
		<isISOControl public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isISOControl public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isISOControl></overloads>
		</isISOControl>
		<isIdentifierIgnorable public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isIdentifierIgnorable public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isIdentifierIgnorable></overloads>
		</isIdentifierIgnorable>
		<isIdeographic public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isIdeographic>
		<isJavaIdentifierPart public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isJavaIdentifierPart public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isJavaIdentifierPart></overloads>
		</isJavaIdentifierPart>
		<isJavaIdentifierStart public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isJavaIdentifierStart public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isJavaIdentifierStart></overloads>
		</isJavaIdentifierStart>
		<isJavaLetter public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</isJavaLetter>
		<isJavaLetterOrDigit public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</isJavaLetterOrDigit>
		<isLetter public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isLetter public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isLetter></overloads>
		</isLetter>
		<isLetterOrDigit public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isLetterOrDigit public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isLetterOrDigit></overloads>
		</isLetterOrDigit>
		<isLowSurrogate public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isLowSurrogate>
		<isLowerCase public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isLowerCase public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isLowerCase></overloads>
		</isLowerCase>
		<isMirrored public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isMirrored public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isMirrored></overloads>
		</isMirrored>
		<isSpace public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</isSpace>
		<isSpaceChar public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isSpaceChar public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isSpaceChar></overloads>
		</isSpaceChar>
		<isSupplementaryCodePoint public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isSupplementaryCodePoint>
		<isSurrogate public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isSurrogate>
		<isSurrogatePair public="1" set="method" static="1">
			<f a="param1:param2">
				<t path="java.types.Char16"/>
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isSurrogatePair>
		<isTitleCase public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isTitleCase public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isTitleCase></overloads>
		</isTitleCase>
		<isUnicodeIdentifierPart public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isUnicodeIdentifierPart public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isUnicodeIdentifierPart></overloads>
		</isUnicodeIdentifierPart>
		<isUnicodeIdentifierStart public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isUnicodeIdentifierStart public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isUnicodeIdentifierStart></overloads>
		</isUnicodeIdentifierStart>
		<isUpperCase public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isUpperCase public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isUpperCase></overloads>
		</isUpperCase>
		<isValidCodePoint public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isValidCodePoint>
		<isWhitespace public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isWhitespace public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</isWhitespace></overloads>
		</isWhitespace>
		<lowSurrogate public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<t path="java.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</lowSurrogate>
		<offsetByCodePoints public="1" set="method" static="1">
			<f a="param1:param2:param3">
				<c path="java.lang.CharSequence"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><offsetByCodePoints public="1" set="method">
	<f a="param1:param2:param3:param4:param5">
		<c path="java.NativeArray"><t path="java.types.Char16"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</offsetByCodePoints></overloads>
		</offsetByCodePoints>
		<reverseBytes public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<t path="java.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</reverseBytes>
		<toChars public="1" set="method" static="1">
			<f a="param1:param2:param3">
				<x path="Int"/>
				<c path="java.NativeArray"><t path="java.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><toChars public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.NativeArray"><t path="java.types.Char16"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</toChars></overloads>
		</toChars>
		<toCodePoint public="1" set="method" static="1">
			<f a="param1:param2">
				<t path="java.types.Char16"/>
				<t path="java.types.Char16"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toCodePoint>
		<toLowerCase public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<t path="java.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><toLowerCase public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</toLowerCase></overloads>
		</toLowerCase>
		<_toString public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":native"><e>"toString"</e></m>
				<m n=":overload"/>
			</meta>
		</_toString>
		<toTitleCase public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<t path="java.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><toTitleCase public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</toTitleCase></overloads>
		</toTitleCase>
		<toUpperCase public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<t path="java.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><toUpperCase public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</toUpperCase></overloads>
		</toUpperCase>
		<valueOf public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="java.lang.Character"/>
			</f>
			<meta><m n=":overload"/></meta>
		</valueOf>
		<charValue public="1" set="method">
			<f a=""><t path="java.types.Char16"/></f>
			<meta><m n=":overload"/></meta>
		</charValue>
		<compareTo public="1" set="method">
			<f a="param1">
				<x path="java.lang.Character"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<d/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<new public="1" set="method">
			<f a="param1">
				<t path="java.types.Char16"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta><m n=":native"><e>"java.lang.Character"</e></m></meta>
	</class>
	<class path="java.lang.Character_CharacterCache" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Character.hx" module="java.lang.Character" extern="1"><meta>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.Character$CharacterCache"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"Character.CharacterCache"</e>
	</m>
</meta></class>
	<class path="java.lang.Character_Subset" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Character.hx" module="java.lang.Character" extern="1">
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</toString>
		<meta>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Character$Subset"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Character.Subset"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Character_UnicodeBlock" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Character.hx" module="java.lang.Character" extern="1">
		<extends path="java.lang.Character_Subset"/>
		<AEGEAN_NUMBERS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</AEGEAN_NUMBERS>
		<ALCHEMICAL_SYMBOLS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ALCHEMICAL_SYMBOLS>
		<ALPHABETIC_PRESENTATION_FORMS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ALPHABETIC_PRESENTATION_FORMS>
		<ANCIENT_GREEK_MUSICAL_NOTATION public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ANCIENT_GREEK_MUSICAL_NOTATION>
		<ANCIENT_GREEK_NUMBERS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ANCIENT_GREEK_NUMBERS>
		<ANCIENT_SYMBOLS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ANCIENT_SYMBOLS>
		<ARABIC public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ARABIC>
		<ARABIC_PRESENTATION_FORMS_A public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ARABIC_PRESENTATION_FORMS_A>
		<ARABIC_PRESENTATION_FORMS_B public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ARABIC_PRESENTATION_FORMS_B>
		<ARABIC_SUPPLEMENT public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ARABIC_SUPPLEMENT>
		<ARMENIAN public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ARMENIAN>
		<ARROWS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ARROWS>
		<AVESTAN public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</AVESTAN>
		<BALINESE public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</BALINESE>
		<BAMUM public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</BAMUM>
		<BAMUM_SUPPLEMENT public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</BAMUM_SUPPLEMENT>
		<BASIC_LATIN public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</BASIC_LATIN>
		<BATAK public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</BATAK>
		<BENGALI public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</BENGALI>
		<BLOCK_ELEMENTS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</BLOCK_ELEMENTS>
		<BOPOMOFO public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</BOPOMOFO>
		<BOPOMOFO_EXTENDED public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</BOPOMOFO_EXTENDED>
		<BOX_DRAWING public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</BOX_DRAWING>
		<BRAHMI public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</BRAHMI>
		<BRAILLE_PATTERNS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</BRAILLE_PATTERNS>
		<BUGINESE public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</BUGINESE>
		<BUHID public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</BUHID>
		<BYZANTINE_MUSICAL_SYMBOLS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</BYZANTINE_MUSICAL_SYMBOLS>
		<CARIAN public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CARIAN>
		<CHAM public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CHAM>
		<CHEROKEE public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CHEROKEE>
		<CJK_COMPATIBILITY public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CJK_COMPATIBILITY>
		<CJK_COMPATIBILITY_FORMS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CJK_COMPATIBILITY_FORMS>
		<CJK_COMPATIBILITY_IDEOGRAPHS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CJK_COMPATIBILITY_IDEOGRAPHS>
		<CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT>
		<CJK_RADICALS_SUPPLEMENT public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CJK_RADICALS_SUPPLEMENT>
		<CJK_STROKES public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CJK_STROKES>
		<CJK_SYMBOLS_AND_PUNCTUATION public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CJK_SYMBOLS_AND_PUNCTUATION>
		<CJK_UNIFIED_IDEOGRAPHS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CJK_UNIFIED_IDEOGRAPHS>
		<CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A>
		<CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B>
		<CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C>
		<CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D>
		<COMBINING_DIACRITICAL_MARKS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</COMBINING_DIACRITICAL_MARKS>
		<COMBINING_DIACRITICAL_MARKS_SUPPLEMENT public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</COMBINING_DIACRITICAL_MARKS_SUPPLEMENT>
		<COMBINING_HALF_MARKS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</COMBINING_HALF_MARKS>
		<COMBINING_MARKS_FOR_SYMBOLS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</COMBINING_MARKS_FOR_SYMBOLS>
		<COMMON_INDIC_NUMBER_FORMS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</COMMON_INDIC_NUMBER_FORMS>
		<CONTROL_PICTURES public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CONTROL_PICTURES>
		<COPTIC public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</COPTIC>
		<COUNTING_ROD_NUMERALS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</COUNTING_ROD_NUMERALS>
		<CUNEIFORM public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CUNEIFORM>
		<CUNEIFORM_NUMBERS_AND_PUNCTUATION public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CUNEIFORM_NUMBERS_AND_PUNCTUATION>
		<CURRENCY_SYMBOLS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CURRENCY_SYMBOLS>
		<CYPRIOT_SYLLABARY public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CYPRIOT_SYLLABARY>
		<CYRILLIC public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CYRILLIC>
		<CYRILLIC_EXTENDED_A public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CYRILLIC_EXTENDED_A>
		<CYRILLIC_EXTENDED_B public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CYRILLIC_EXTENDED_B>
		<CYRILLIC_SUPPLEMENTARY public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</CYRILLIC_SUPPLEMENTARY>
		<DESERET public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</DESERET>
		<DEVANAGARI public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</DEVANAGARI>
		<DEVANAGARI_EXTENDED public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</DEVANAGARI_EXTENDED>
		<DINGBATS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</DINGBATS>
		<DOMINO_TILES public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</DOMINO_TILES>
		<EGYPTIAN_HIEROGLYPHS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</EGYPTIAN_HIEROGLYPHS>
		<EMOTICONS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</EMOTICONS>
		<ENCLOSED_ALPHANUMERICS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ENCLOSED_ALPHANUMERICS>
		<ENCLOSED_ALPHANUMERIC_SUPPLEMENT public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ENCLOSED_ALPHANUMERIC_SUPPLEMENT>
		<ENCLOSED_CJK_LETTERS_AND_MONTHS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ENCLOSED_CJK_LETTERS_AND_MONTHS>
		<ENCLOSED_IDEOGRAPHIC_SUPPLEMENT public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ENCLOSED_IDEOGRAPHIC_SUPPLEMENT>
		<ETHIOPIC public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ETHIOPIC>
		<ETHIOPIC_EXTENDED public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ETHIOPIC_EXTENDED>
		<ETHIOPIC_EXTENDED_A public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ETHIOPIC_EXTENDED_A>
		<ETHIOPIC_SUPPLEMENT public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ETHIOPIC_SUPPLEMENT>
		<GENERAL_PUNCTUATION public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</GENERAL_PUNCTUATION>
		<GEOMETRIC_SHAPES public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</GEOMETRIC_SHAPES>
		<GEORGIAN public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</GEORGIAN>
		<GEORGIAN_SUPPLEMENT public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</GEORGIAN_SUPPLEMENT>
		<GLAGOLITIC public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</GLAGOLITIC>
		<GOTHIC public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</GOTHIC>
		<GREEK public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</GREEK>
		<GREEK_EXTENDED public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</GREEK_EXTENDED>
		<GUJARATI public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</GUJARATI>
		<GURMUKHI public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</GURMUKHI>
		<HALFWIDTH_AND_FULLWIDTH_FORMS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</HALFWIDTH_AND_FULLWIDTH_FORMS>
		<HANGUL_COMPATIBILITY_JAMO public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</HANGUL_COMPATIBILITY_JAMO>
		<HANGUL_JAMO public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</HANGUL_JAMO>
		<HANGUL_JAMO_EXTENDED_A public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</HANGUL_JAMO_EXTENDED_A>
		<HANGUL_JAMO_EXTENDED_B public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</HANGUL_JAMO_EXTENDED_B>
		<HANGUL_SYLLABLES public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</HANGUL_SYLLABLES>
		<HANUNOO public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</HANUNOO>
		<HEBREW public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</HEBREW>
		<HIGH_PRIVATE_USE_SURROGATES public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</HIGH_PRIVATE_USE_SURROGATES>
		<HIGH_SURROGATES public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</HIGH_SURROGATES>
		<HIRAGANA public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</HIRAGANA>
		<IDEOGRAPHIC_DESCRIPTION_CHARACTERS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</IDEOGRAPHIC_DESCRIPTION_CHARACTERS>
		<IMPERIAL_ARAMAIC public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</IMPERIAL_ARAMAIC>
		<INSCRIPTIONAL_PAHLAVI public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</INSCRIPTIONAL_PAHLAVI>
		<INSCRIPTIONAL_PARTHIAN public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</INSCRIPTIONAL_PARTHIAN>
		<IPA_EXTENSIONS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</IPA_EXTENSIONS>
		<JAVANESE public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</JAVANESE>
		<KAITHI public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</KAITHI>
		<KANA_SUPPLEMENT public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</KANA_SUPPLEMENT>
		<KANBUN public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</KANBUN>
		<KANGXI_RADICALS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</KANGXI_RADICALS>
		<KANNADA public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</KANNADA>
		<KATAKANA public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</KATAKANA>
		<KATAKANA_PHONETIC_EXTENSIONS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</KATAKANA_PHONETIC_EXTENSIONS>
		<KAYAH_LI public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</KAYAH_LI>
		<KHAROSHTHI public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</KHAROSHTHI>
		<KHMER public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</KHMER>
		<KHMER_SYMBOLS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</KHMER_SYMBOLS>
		<LAO public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</LAO>
		<LATIN_1_SUPPLEMENT public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</LATIN_1_SUPPLEMENT>
		<LATIN_EXTENDED_A public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</LATIN_EXTENDED_A>
		<LATIN_EXTENDED_ADDITIONAL public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</LATIN_EXTENDED_ADDITIONAL>
		<LATIN_EXTENDED_B public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</LATIN_EXTENDED_B>
		<LATIN_EXTENDED_C public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</LATIN_EXTENDED_C>
		<LATIN_EXTENDED_D public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</LATIN_EXTENDED_D>
		<LEPCHA public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</LEPCHA>
		<LETTERLIKE_SYMBOLS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</LETTERLIKE_SYMBOLS>
		<LIMBU public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</LIMBU>
		<LINEAR_B_IDEOGRAMS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</LINEAR_B_IDEOGRAMS>
		<LINEAR_B_SYLLABARY public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</LINEAR_B_SYLLABARY>
		<LISU public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</LISU>
		<LOW_SURROGATES public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</LOW_SURROGATES>
		<LYCIAN public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</LYCIAN>
		<LYDIAN public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</LYDIAN>
		<MAHJONG_TILES public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MAHJONG_TILES>
		<MALAYALAM public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MALAYALAM>
		<MANDAIC public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MANDAIC>
		<MATHEMATICAL_ALPHANUMERIC_SYMBOLS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MATHEMATICAL_ALPHANUMERIC_SYMBOLS>
		<MATHEMATICAL_OPERATORS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MATHEMATICAL_OPERATORS>
		<MEETEI_MAYEK public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MEETEI_MAYEK>
		<MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A>
		<MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B>
		<MISCELLANEOUS_SYMBOLS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MISCELLANEOUS_SYMBOLS>
		<MISCELLANEOUS_SYMBOLS_AND_ARROWS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MISCELLANEOUS_SYMBOLS_AND_ARROWS>
		<MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS>
		<MISCELLANEOUS_TECHNICAL public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MISCELLANEOUS_TECHNICAL>
		<MODIFIER_TONE_LETTERS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MODIFIER_TONE_LETTERS>
		<MONGOLIAN public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MONGOLIAN>
		<MUSICAL_SYMBOLS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MUSICAL_SYMBOLS>
		<MYANMAR public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MYANMAR>
		<MYANMAR_EXTENDED_A public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</MYANMAR_EXTENDED_A>
		<NEW_TAI_LUE public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</NEW_TAI_LUE>
		<NKO public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</NKO>
		<NUMBER_FORMS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</NUMBER_FORMS>
		<OGHAM public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</OGHAM>
		<OLD_ITALIC public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</OLD_ITALIC>
		<OLD_PERSIAN public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</OLD_PERSIAN>
		<OLD_SOUTH_ARABIAN public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</OLD_SOUTH_ARABIAN>
		<OLD_TURKIC public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</OLD_TURKIC>
		<OL_CHIKI public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</OL_CHIKI>
		<OPTICAL_CHARACTER_RECOGNITION public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</OPTICAL_CHARACTER_RECOGNITION>
		<ORIYA public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</ORIYA>
		<OSMANYA public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</OSMANYA>
		<PHAGS_PA public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</PHAGS_PA>
		<PHAISTOS_DISC public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</PHAISTOS_DISC>
		<PHOENICIAN public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</PHOENICIAN>
		<PHONETIC_EXTENSIONS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</PHONETIC_EXTENSIONS>
		<PHONETIC_EXTENSIONS_SUPPLEMENT public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</PHONETIC_EXTENSIONS_SUPPLEMENT>
		<PLAYING_CARDS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</PLAYING_CARDS>
		<PRIVATE_USE_AREA public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</PRIVATE_USE_AREA>
		<REJANG public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</REJANG>
		<RUMI_NUMERAL_SYMBOLS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</RUMI_NUMERAL_SYMBOLS>
		<RUNIC public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</RUNIC>
		<SAMARITAN public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SAMARITAN>
		<SAURASHTRA public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SAURASHTRA>
		<SHAVIAN public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SHAVIAN>
		<SINHALA public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SINHALA>
		<SMALL_FORM_VARIANTS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SMALL_FORM_VARIANTS>
		<SPACING_MODIFIER_LETTERS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SPACING_MODIFIER_LETTERS>
		<SPECIALS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SPECIALS>
		<SUNDANESE public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SUNDANESE>
		<SUPERSCRIPTS_AND_SUBSCRIPTS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SUPERSCRIPTS_AND_SUBSCRIPTS>
		<SUPPLEMENTAL_ARROWS_A public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SUPPLEMENTAL_ARROWS_A>
		<SUPPLEMENTAL_ARROWS_B public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SUPPLEMENTAL_ARROWS_B>
		<SUPPLEMENTAL_MATHEMATICAL_OPERATORS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SUPPLEMENTAL_MATHEMATICAL_OPERATORS>
		<SUPPLEMENTAL_PUNCTUATION public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SUPPLEMENTAL_PUNCTUATION>
		<SUPPLEMENTARY_PRIVATE_USE_AREA_A public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SUPPLEMENTARY_PRIVATE_USE_AREA_A>
		<SUPPLEMENTARY_PRIVATE_USE_AREA_B public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SUPPLEMENTARY_PRIVATE_USE_AREA_B>
		<SURROGATES_AREA public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta>
				<m n=":deprecated"/>
				<m n=":final"/>
			</meta>
		</SURROGATES_AREA>
		<SYLOTI_NAGRI public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SYLOTI_NAGRI>
		<SYRIAC public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</SYRIAC>
		<TAGALOG public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</TAGALOG>
		<TAGBANWA public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</TAGBANWA>
		<TAGS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</TAGS>
		<TAI_LE public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</TAI_LE>
		<TAI_THAM public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</TAI_THAM>
		<TAI_VIET public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</TAI_VIET>
		<TAI_XUAN_JING_SYMBOLS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</TAI_XUAN_JING_SYMBOLS>
		<TAMIL public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</TAMIL>
		<TELUGU public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</TELUGU>
		<THAANA public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</THAANA>
		<THAI public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</THAI>
		<TIBETAN public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</TIBETAN>
		<TIFINAGH public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</TIFINAGH>
		<TRANSPORT_AND_MAP_SYMBOLS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</TRANSPORT_AND_MAP_SYMBOLS>
		<UGARITIC public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</UGARITIC>
		<UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS>
		<UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED>
		<VAI public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</VAI>
		<VARIATION_SELECTORS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</VARIATION_SELECTORS>
		<VARIATION_SELECTORS_SUPPLEMENT public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</VARIATION_SELECTORS_SUPPLEMENT>
		<VEDIC_EXTENSIONS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</VEDIC_EXTENSIONS>
		<VERTICAL_FORMS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</VERTICAL_FORMS>
		<YIJING_HEXAGRAM_SYMBOLS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</YIJING_HEXAGRAM_SYMBOLS>
		<YI_RADICALS public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</YI_RADICALS>
		<YI_SYLLABLES public="1" static="1">
			<c path="java.lang.Character_UnicodeBlock"/>
			<meta><m n=":final"/></meta>
		</YI_SYLLABLES>
		<forName public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.lang.Character_UnicodeBlock"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</forName>
		<of public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Char16"/>
				<c path="java.lang.Character_UnicodeBlock"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><of public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.lang.Character_UnicodeBlock"/>
	</f>
	<meta><m n=":overload"/></meta>
</of></overloads>
		</of>
		<meta>
			<m n=":final"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Character$UnicodeBlock"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Character.UnicodeBlock"</e>
			</m>
		</meta>
	</class>
	<enum path="java.lang.Character_UnicodeScript" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Character.hx" module="java.lang.Character">
		<COMMON/>
		<LATIN/>
		<GREEK/>
		<CYRILLIC/>
		<ARMENIAN/>
		<HEBREW/>
		<ARABIC/>
		<SYRIAC/>
		<THAANA/>
		<DEVANAGARI/>
		<BENGALI/>
		<GURMUKHI/>
		<GUJARATI/>
		<ORIYA/>
		<TAMIL/>
		<TELUGU/>
		<KANNADA/>
		<MALAYALAM/>
		<SINHALA/>
		<THAI/>
		<LAO/>
		<TIBETAN/>
		<MYANMAR/>
		<GEORGIAN/>
		<HANGUL/>
		<ETHIOPIC/>
		<CHEROKEE/>
		<CANADIAN_ABORIGINAL/>
		<OGHAM/>
		<RUNIC/>
		<KHMER/>
		<MONGOLIAN/>
		<HIRAGANA/>
		<KATAKANA/>
		<BOPOMOFO/>
		<HAN/>
		<YI/>
		<OLD_ITALIC/>
		<GOTHIC/>
		<DESERET/>
		<INHERITED/>
		<TAGALOG/>
		<HANUNOO/>
		<BUHID/>
		<TAGBANWA/>
		<LIMBU/>
		<TAI_LE/>
		<LINEAR_B/>
		<UGARITIC/>
		<SHAVIAN/>
		<OSMANYA/>
		<CYPRIOT/>
		<BRAILLE/>
		<BUGINESE/>
		<COPTIC/>
		<NEW_TAI_LUE/>
		<GLAGOLITIC/>
		<TIFINAGH/>
		<SYLOTI_NAGRI/>
		<OLD_PERSIAN/>
		<KHAROSHTHI/>
		<BALINESE/>
		<CUNEIFORM/>
		<PHOENICIAN/>
		<PHAGS_PA/>
		<NKO/>
		<SUNDANESE/>
		<BATAK/>
		<LEPCHA/>
		<OL_CHIKI/>
		<VAI/>
		<SAURASHTRA/>
		<KAYAH_LI/>
		<REJANG/>
		<LYCIAN/>
		<CARIAN/>
		<LYDIAN/>
		<CHAM/>
		<TAI_THAM/>
		<TAI_VIET/>
		<AVESTAN/>
		<EGYPTIAN_HIEROGLYPHS/>
		<SAMARITAN/>
		<MANDAIC/>
		<LISU/>
		<BAMUM/>
		<JAVANESE/>
		<MEETEI_MAYEK/>
		<IMPERIAL_ARAMAIC/>
		<OLD_SOUTH_ARABIAN/>
		<INSCRIPTIONAL_PARTHIAN/>
		<INSCRIPTIONAL_PAHLAVI/>
		<OLD_TURKIC/>
		<BRAHMI/>
		<KAITHI/>
		<UNKNOWN/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Character.UnicodeScript"</e>
			</m>
			<m n=":native"><e>"java.lang.Character$UnicodeScript"</e></m>
		</meta>
	</enum>
	<class path="java.lang.reflect.AnnotatedElement" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/reflect/AnnotatedElement.class" extern="1" interface="1">
		<getDeclaredAnnotations public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f>
			<meta><m n=":overload"/></meta>
		</getDeclaredAnnotations>
		<getAnnotations public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f>
			<meta><m n=":overload"/></meta>
		</getAnnotations>
		<getAnnotation public="1" params="T" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="getAnnotation.T"/></c>
				<c path="getAnnotation.T"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getAnnotation>
		<isAnnotationPresent public="1" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="java.lang.annotation.Annotation"/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isAnnotationPresent>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.reflect.AnnotatedElement"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.reflect"</e>
				<e>"AnnotatedElement"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.reflect.Type" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/reflect/Type.class" extern="1" interface="1"><meta>
	<m n=":abstract"/>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.reflect.Type"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang.reflect"</e>
		<e>"Type"</e>
	</m>
</meta></class>
	<class path="java.lang.reflect.GenericDeclaration" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/reflect/GenericDeclaration.class" extern="1" interface="1">
		<getTypeParameters public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.reflect.TypeVariable"><d/></c></c></f>
			<meta><m n=":overload"/></meta>
		</getTypeParameters>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.reflect.GenericDeclaration"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.reflect"</e>
				<e>"GenericDeclaration"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Class" params="T" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Class.class" extern="1">
		<implements path="java.lang.reflect.AnnotatedElement"/>
		<implements path="java.lang.reflect.Type"/>
		<implements path="java.lang.reflect.GenericDeclaration"/>
		<implements path="java.io.Serializable"/>
		<forName public="1" set="method" static="1">
			<f a="param1:param2:param3">
				<c path="String"/>
				<x path="Bool"/>
				<c path="java.lang.ClassLoader"/>
				<c path="java.lang.Class"><d/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.ClassNotFoundException"</e></m>
			</meta>
			<overloads><forName public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<c path="java.lang.Class"><d/></c>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.ClassNotFoundException"</e></m>
	</meta>
</forName></overloads>
		</forName>
		<getDeclaredAnnotations public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f>
			<meta><m n=":overload"/></meta>
		</getDeclaredAnnotations>
		<getAnnotations public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f>
			<meta><m n=":overload"/></meta>
		</getAnnotations>
		<isAnnotationPresent public="1" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="java.lang.annotation.Annotation"/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isAnnotationPresent>
		<getAnnotation public="1" params="A" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="getAnnotation.A"/></c>
				<c path="getAnnotation.A"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getAnnotation>
		<asSubclass public="1" params="U" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="asSubclass.U"/></c>
				<c path="java.lang.Class"><c path="asSubclass.U"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</asSubclass>
		<_cast public="1" set="method">
			<f a="param1">
				<d/>
				<c path="java.lang.Class.T"/>
			</f>
			<meta>
				<m n=":native"><e>"cast"</e></m>
				<m n=":overload"/>
			</meta>
		</_cast>
		<getEnumConstants public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.Class.T"/></c></f>
			<meta><m n=":overload"/></meta>
		</getEnumConstants>
		<isEnum public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isEnum>
		<desiredAssertionStatus public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</desiredAssertionStatus>
		<getProtectionDomain public="1" set="method">
			<f a=""><c path="java.security.ProtectionDomain"/></f>
			<meta><m n=":overload"/></meta>
		</getProtectionDomain>
		<getResource public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.net.URL"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getResource>
		<getResourceAsStream public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.io.InputStream"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getResourceAsStream>
		<getDeclaredConstructor public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
				<c path="java.lang.reflect.Constructor"><c path="java.lang.Class.T"/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
				<m n=":throws"><e>"java.lang.NoSuchMethodException"</e></m>
			</meta>
		</getDeclaredConstructor>
		<getDeclaredMethod public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
				<c path="java.lang.reflect.Method"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
				<m n=":throws"><e>"java.lang.NoSuchMethodException"</e></m>
			</meta>
		</getDeclaredMethod>
		<getDeclaredField public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.lang.reflect.Field"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
				<m n=":throws"><e>"java.lang.NoSuchFieldException"</e></m>
			</meta>
		</getDeclaredField>
		<getDeclaredConstructors public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Constructor"><d/></c></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
			</meta>
		</getDeclaredConstructors>
		<getDeclaredMethods public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Method"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
			</meta>
		</getDeclaredMethods>
		<getDeclaredFields public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Field"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
			</meta>
		</getDeclaredFields>
		<getDeclaredClasses public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
			</meta>
		</getDeclaredClasses>
		<getConstructor public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
				<c path="java.lang.reflect.Constructor"><c path="java.lang.Class.T"/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
				<m n=":throws"><e>"java.lang.NoSuchMethodException"</e></m>
			</meta>
		</getConstructor>
		<getMethod public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
				<c path="java.lang.reflect.Method"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
				<m n=":throws"><e>"java.lang.NoSuchMethodException"</e></m>
			</meta>
		</getMethod>
		<getField public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.lang.reflect.Field"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
				<m n=":throws"><e>"java.lang.NoSuchFieldException"</e></m>
			</meta>
		</getField>
		<getConstructors public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Constructor"><d/></c></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
			</meta>
		</getConstructors>
		<getMethods public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Method"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
			</meta>
		</getMethods>
		<getFields public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Field"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
			</meta>
		</getFields>
		<getClasses public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c></f>
			<meta><m n=":overload"/></meta>
		</getClasses>
		<isMemberClass public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isMemberClass>
		<isLocalClass public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isLocalClass>
		<isAnonymousClass public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isAnonymousClass>
		<getCanonicalName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getCanonicalName>
		<getSimpleName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getSimpleName>
		<getEnclosingClass public="1" set="method">
			<f a=""><c path="java.lang.Class"><d/></c></f>
			<meta><m n=":overload"/></meta>
		</getEnclosingClass>
		<getDeclaringClass public="1" set="method">
			<f a=""><c path="java.lang.Class"><d/></c></f>
			<meta><m n=":overload"/></meta>
		</getDeclaringClass>
		<getEnclosingConstructor public="1" set="method">
			<f a=""><c path="java.lang.reflect.Constructor"><d/></c></f>
			<meta><m n=":overload"/></meta>
		</getEnclosingConstructor>
		<getEnclosingMethod public="1" set="method">
			<f a=""><c path="java.lang.reflect.Method"/></f>
			<meta><m n=":overload"/></meta>
		</getEnclosingMethod>
		<getSigners public="1" set="method">
			<f a=""><c path="java.NativeArray"><d/></c></f>
			<meta><m n=":overload"/></meta>
		</getSigners>
		<getModifiers public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getModifiers>
		<getComponentType public="1" set="method">
			<f a=""><c path="java.lang.Class"><d/></c></f>
			<meta><m n=":overload"/></meta>
		</getComponentType>
		<getGenericInterfaces public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</getGenericInterfaces>
		<getInterfaces public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c></f>
			<meta><m n=":overload"/></meta>
		</getInterfaces>
		<getPackage public="1" set="method">
			<f a=""><c path="java.lang.Package"/></f>
			<meta><m n=":overload"/></meta>
		</getPackage>
		<getGenericSuperclass public="1" set="method">
			<f a=""><c path="java.lang.reflect.Type"/></f>
			<meta><m n=":overload"/></meta>
		</getGenericSuperclass>
		<getSuperclass public="1" set="method">
			<f a=""><c path="java.lang.Class"><d/></c></f>
			<meta><m n=":overload"/></meta>
		</getSuperclass>
		<getTypeParameters public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.reflect.TypeVariable"><c path="java.lang.Class"><c path="java.lang.Class.T"/></c></c></c></f>
			<meta><m n=":overload"/></meta>
		</getTypeParameters>
		<getClassLoader public="1" set="method">
			<f a=""><c path="java.lang.ClassLoader"/></f>
			<meta><m n=":overload"/></meta>
		</getClassLoader>
		<getName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getName>
		<isSynthetic public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isSynthetic>
		<isAnnotation public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isAnnotation>
		<isPrimitive public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isPrimitive>
		<isArray public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isArray>
		<isInterface public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isInterface>
		<isAssignableFrom public="1" set="method">
			<f a="param1">
				<c path="java.lang.Class"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isAssignableFrom>
		<isInstance public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isInstance>
		<newInstance public="1" set="method">
			<f a=""><c path="java.lang.Class.T"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.InstantiationException"</e></m>
			</meta>
		</newInstance>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Class"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Class"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Class_EnclosingMethodInfo" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Class$EnclosingMethodInfo.class" module="java.lang.Class" extern="1"><meta>
	<m n=":final"/>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.Class$EnclosingMethodInfo"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"Class.EnclosingMethodInfo"</e>
	</m>
</meta></class>
	<class path="java.lang.Class_MethodArray" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Class$MethodArray.class" module="java.lang.Class" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.Class$MethodArray"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"Class.MethodArray"</e>
	</m>
</meta></class>
	<class path="java.lang.Error" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Error.class" extern="1">
		<extends path="java.lang.Throwable"/>
		<new set="method">
			<f a="param1:param2:param3:param4">
				<c path="String"/>
				<c path="java.lang.Throwable"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Error"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Error"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.LinkageError" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/LinkageError.class" extern="1">
		<extends path="java.lang.Error"/>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.LinkageError"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"LinkageError"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ClassFormatError" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ClassFormatError.class" extern="1">
		<extends path="java.lang.LinkageError"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ClassFormatError"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"ClassFormatError"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ClassLoader" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ClassLoader.class" extern="1">
		<getSystemClassLoader public="1" set="method" static="1">
			<f a=""><c path="java.lang.ClassLoader"/></f>
			<meta><m n=":overload"/></meta>
		</getSystemClassLoader>
		<getSystemResourceAsStream public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.io.InputStream"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getSystemResourceAsStream>
		<getSystemResources public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.util.Enumeration"><c path="java.net.URL"/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getSystemResources>
		<getSystemResource public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.net.URL"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getSystemResource>
		<registerAsParallelCapable set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</registerAsParallelCapable>
		<clearAssertionStatus public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</clearAssertionStatus>
		<setClassAssertionStatus public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setClassAssertionStatus>
		<setPackageAssertionStatus public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setPackageAssertionStatus>
		<setDefaultAssertionStatus public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setDefaultAssertionStatus>
		<findLibrary set="method">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</findLibrary>
		<getPackages set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.Package"/></c></f>
			<meta><m n=":overload"/></meta>
		</getPackages>
		<getPackage set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.lang.Package"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getPackage>
		<definePackage set="method">
			<f a="param1:param2:param3:param4:param5:param6:param7:param8">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="java.net.URL"/>
				<c path="java.lang.Package"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</definePackage>
		<getParent public="1" set="method">
			<f a=""><c path="java.lang.ClassLoader"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getParent>
		<getResourceAsStream public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.io.InputStream"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getResourceAsStream>
		<findResources set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.util.Enumeration"><c path="java.net.URL"/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</findResources>
		<findResource set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.net.URL"/>
			</f>
			<meta><m n=":overload"/></meta>
		</findResource>
		<getResources public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.util.Enumeration"><c path="java.net.URL"/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getResources>
		<getResource public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.net.URL"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getResource>
		<setSigners set="method">
			<f a="param1:param2">
				<c path="java.lang.Class"><d/></c>
				<c path="java.NativeArray"><d/></c>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</setSigners>
		<findLoadedClass set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.lang.Class"><d/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</findLoadedClass>
		<findSystemClass set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.lang.Class"><d/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.ClassNotFoundException"</e></m>
				<m n=":final"/>
			</meta>
		</findSystemClass>
		<resolveClass set="method">
			<f a="param1">
				<c path="java.lang.Class"><d/></c>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</resolveClass>
		<defineClass set="method">
			<f a="param1:param2:param3">
				<c path="String"/>
				<c path="java.nio.ByteBuffer"/>
				<c path="java.security.ProtectionDomain"/>
				<c path="java.lang.Class"><d/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.ClassFormatError"</e></m>
				<m n=":final"/>
			</meta>
			<overloads>
				<defineClass set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Int8"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.lang.Class"><d/></c>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.ClassFormatError"</e></m>
						<m n=":deprecated"/>
						<m n=":final"/>
					</meta>
				</defineClass>
				<defineClass set="method">
					<f a="param1:param2:param3:param4">
						<c path="String"/>
						<c path="java.NativeArray"><t path="java.types.Int8"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.lang.Class"><d/></c>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.ClassFormatError"</e></m>
						<m n=":final"/>
					</meta>
				</defineClass>
				<defineClass set="method">
					<f a="param1:param2:param3:param4:param5">
						<c path="String"/>
						<c path="java.NativeArray"><t path="java.types.Int8"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.security.ProtectionDomain"/>
						<c path="java.lang.Class"><d/></c>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.ClassFormatError"</e></m>
						<m n=":final"/>
					</meta>
				</defineClass>
			</overloads>
		</defineClass>
		<findClass set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.lang.Class"><d/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.ClassNotFoundException"</e></m>
			</meta>
		</findClass>
		<getClassLoadingLock set="method">
			<f a="param1">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</getClassLoadingLock>
		<loadClass set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Bool"/>
				<c path="java.lang.Class"><d/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.ClassNotFoundException"</e></m>
			</meta>
			<overloads><loadClass public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<c path="java.lang.Class"><d/></c>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.ClassNotFoundException"</e></m>
	</meta>
</loadClass></overloads>
		</loadClass>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><new set="method">
	<f a="param1">
		<c path="java.lang.ClassLoader"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ClassLoader"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"ClassLoader"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ClassLoader_ParallelLoaders" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ClassLoader$ParallelLoaders.class" module="java.lang.ClassLoader" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.ClassLoader$ParallelLoaders"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"ClassLoader.ParallelLoaders"</e>
	</m>
</meta></class>
	<class path="java.lang.ClassLoader_NativeLibrary" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ClassLoader$NativeLibrary.class" module="java.lang.ClassLoader" extern="1">
		<finalize set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</finalize>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.lang.Class"><d/></c>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ClassLoader$NativeLibrary"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"ClassLoader.NativeLibrary"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ReflectiveOperationException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ReflectiveOperationException.class" extern="1">
		<extends path="java.lang.Exception"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ReflectiveOperationException"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"ReflectiveOperationException"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ClassNotFoundException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ClassNotFoundException.class" extern="1">
		<extends path="java.lang.ReflectiveOperationException"/>
		<getCause public="1" set="method" override="1">
			<f a=""><c path="java.lang.Throwable"/></f>
			<meta><m n=":overload"/></meta>
		</getCause>
		<getException public="1" set="method">
			<f a=""><c path="java.lang.Throwable"/></f>
			<meta><m n=":overload"/></meta>
		</getException>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ClassNotFoundException"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"ClassNotFoundException"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.CloneNotSupportedException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/CloneNotSupportedException.class" extern="1">
		<extends path="java.lang.Exception"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.CloneNotSupportedException"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"CloneNotSupportedException"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Cloneable" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Cloneable.class" extern="1" interface="1"><meta>
	<m n=":abstract"/>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.Cloneable"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"Cloneable"</e>
	</m>
</meta></class>
	<abstract path="java.lang.Double" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Double.hx">
		<from>
			<icast><c path="java.lang.DoubleClass"/></icast>
			<icast field="fromFloat"><x path="Float"/></icast>
		</from>
		<this><c path="java.lang.DoubleClass"/></this>
		<to>
			<icast><c path="java.lang.DoubleClass"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<meta>
			<m n=":native"><e>""</e></m>
			<m n=":forwardStatics"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="java.lang._Double.Double_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Double.hx" private="1" module="java.lang.Double">
	<toFloat public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<c path="java.lang.DoubleClass"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
			<m n=":extern"/>
		</meta>
	</toFloat>
	<fromFloat public="1" get="inline" set="null" line="30" static="1">
		<f a="b">
			<x path="Float"/>
			<x path="java.lang.Double"/>
		</f>
		<meta>
			<m n=":from"/>
			<m n=":extern"/>
		</meta>
	</fromFloat>
	<meta>
		<m n=":final"/>
		<m n=":native"><e>""</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="java.lang._Double.Double_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Double.hx" private="1" module="java.lang.Double">
		<toFloat public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<c path="java.lang.DoubleClass"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
				<m n=":extern"/>
			</meta>
		</toFloat>
		<fromFloat public="1" get="inline" set="null" line="30" static="1">
			<f a="b">
				<x path="Float"/>
				<x path="java.lang.Double"/>
			</f>
			<meta>
				<m n=":from"/>
				<m n=":extern"/>
			</meta>
		</fromFloat>
		<meta>
			<m n=":final"/>
			<m n=":native"><e>""</e></m>
		</meta>
	</class>
	<class path="java.lang.DoubleClass" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Double.hx" module="java.lang.Double" extern="1">
		<extends path="java.lang.Number"/>
		<implements path="java.lang.Comparable"><x path="java.lang.Double"/></implements>
		<MAX_EXPONENT public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MAX_EXPONENT>
		<MAX_VALUE public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":final"/></meta>
		</MAX_VALUE>
		<MIN_EXPONENT public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MIN_EXPONENT>
		<MIN_NORMAL public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":final"/></meta>
		</MIN_NORMAL>
		<MIN_VALUE public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":final"/></meta>
		</MIN_VALUE>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":final"/></meta>
		</NEGATIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":final"/></meta>
		</NaN>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":final"/></meta>
		</POSITIVE_INFINITY>
		<SIZE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</SIZE>
		<TYPE public="1" static="1">
			<c path="java.lang.Class"><x path="java.lang.Double"/></c>
			<meta><m n=":final"/></meta>
		</TYPE>
		<compare public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</compare>
		<doubleToLongBits public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</doubleToLongBits>
		<doubleToRawLongBits public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</doubleToRawLongBits>
		<_isInfinite public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":native"><e>"isInfinite"</e></m>
				<m n=":overload"/>
			</meta>
		</_isInfinite>
		<_isNaN public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":native"><e>"isNaN"</e></m>
				<m n=":overload"/>
			</meta>
		</_isNaN>
		<longBitsToDouble public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</longBitsToDouble>
		<parseDouble public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
		</parseDouble>
		<toHexString public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toHexString>
		<_toString public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":native"><e>"toString"</e></m>
				<m n=":overload"/>
			</meta>
		</_toString>
		<valueOf public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="java.lang.Double"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
			<overloads><valueOf public="1" set="method">
	<f a="param1">
		<x path="Float"/>
		<x path="java.lang.Double"/>
	</f>
	<meta><m n=":overload"/></meta>
</valueOf></overloads>
		</valueOf>
		<compareTo public="1" set="method">
			<f a="param1">
				<x path="java.lang.Double"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<d/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<isInfinite public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isInfinite>
		<isNaN public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isNaN>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<new public="1" set="method">
			<f a="param1">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
	</meta>
</new></overloads>
		</new>
		<meta><m n=":native"><e>"java.lang.Double"</e></m></meta>
	</class>
	<class path="java.lang.Enum" params="E" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Enum.class" extern="1">
		<implements path="java.io.Serializable"/>
		<implements path="java.lang.Comparable"><c path="java.lang.Enum.E"/></implements>
		<valueOf public="1" params="T" set="method" static="1">
			<f a="param1:param2">
				<c path="java.lang.Class"><c path="valueOf.T"/></c>
				<c path="String"/>
				<c path="valueOf.T"/>
			</f>
			<meta><m n=":overload"/></meta>
		</valueOf>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<c path="java.lang.Enum.E"/>
		<x path="Int"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":final"/>
	</meta>
</compareTo></overloads>
		</compareTo>
		<finalize set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</finalize>
		<getDeclaringClass public="1" set="method">
			<f a=""><c path="java.lang.Class"><c path="java.lang.Enum.E"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getDeclaringClass>
		<clone set="method">
			<f a=""><d/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.CloneNotSupportedException"</e></m>
				<m n=":final"/>
			</meta>
		</clone>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</equals>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<ordinal public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</ordinal>
		<name public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</name>
		<new set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Enum"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Enum"</e>
			</m>
		</meta>
	</class>
	<abstract path="java.lang.Float" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Float.hx">
		<from>
			<icast><c path="java.lang.FloatClass"/></icast>
			<icast field="fromFloat"><x path="Single"/></icast>
		</from>
		<this><c path="java.lang.FloatClass"/></this>
		<to>
			<icast><c path="java.lang.FloatClass"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<meta>
			<m n=":native"><e>""</e></m>
			<m n=":forwardStatics"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="java.lang._Float.Float_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Float.hx" private="1" module="java.lang.Float">
	<toFloat public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<c path="java.lang.FloatClass"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
			<m n=":extern"/>
		</meta>
	</toFloat>
	<fromFloat public="1" get="inline" set="null" line="30" static="1">
		<f a="b">
			<x path="Single"/>
			<x path="java.lang.Float"/>
		</f>
		<meta>
			<m n=":from"/>
			<m n=":extern"/>
		</meta>
	</fromFloat>
	<meta>
		<m n=":final"/>
		<m n=":native"><e>""</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="java.lang._Float.Float_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Float.hx" private="1" module="java.lang.Float">
		<toFloat public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<c path="java.lang.FloatClass"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
				<m n=":extern"/>
			</meta>
		</toFloat>
		<fromFloat public="1" get="inline" set="null" line="30" static="1">
			<f a="b">
				<x path="Single"/>
				<x path="java.lang.Float"/>
			</f>
			<meta>
				<m n=":from"/>
				<m n=":extern"/>
			</meta>
		</fromFloat>
		<meta>
			<m n=":final"/>
			<m n=":native"><e>""</e></m>
		</meta>
	</class>
	<class path="java.lang.FloatClass" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Float.hx" module="java.lang.Float" extern="1">
		<extends path="java.lang.Number"/>
		<implements path="java.lang.Comparable"><x path="java.lang.Float"/></implements>
		<MAX_EXPONENT public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MAX_EXPONENT>
		<MAX_VALUE public="1" set="null" static="1">
			<x path="Single"/>
			<meta><m n=":final"/></meta>
		</MAX_VALUE>
		<MIN_EXPONENT public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MIN_EXPONENT>
		<MIN_NORMAL public="1" set="null" static="1">
			<x path="Single"/>
			<meta><m n=":final"/></meta>
		</MIN_NORMAL>
		<MIN_VALUE public="1" set="null" static="1">
			<x path="Single"/>
			<meta><m n=":final"/></meta>
		</MIN_VALUE>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Single"/>
			<meta><m n=":final"/></meta>
		</NEGATIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Single"/>
			<meta><m n=":final"/></meta>
		</NaN>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Single"/>
			<meta><m n=":final"/></meta>
		</POSITIVE_INFINITY>
		<SIZE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</SIZE>
		<TYPE public="1" static="1">
			<c path="java.lang.Class"><x path="Float"/></c>
			<meta><m n=":final"/></meta>
		</TYPE>
		<compare public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Single"/>
				<x path="Single"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</compare>
		<floatToIntBits public="1" set="method" static="1">
			<f a="param1">
				<x path="Single"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</floatToIntBits>
		<floatToRawIntBits public="1" set="method" static="1">
			<f a="param1">
				<x path="Single"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</floatToRawIntBits>
		<intBitsToFloat public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Single"/>
			</f>
			<meta><m n=":overload"/></meta>
		</intBitsToFloat>
		<_isInfinite public="1" set="method" static="1">
			<f a="param1">
				<x path="Single"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":native"><e>"isInfinite"</e></m>
				<m n=":overload"/>
			</meta>
		</_isInfinite>
		<_isNaN public="1" set="method" static="1">
			<f a="param1">
				<x path="Single"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":native"><e>"isNaN"</e></m>
				<m n=":overload"/>
			</meta>
		</_isNaN>
		<parseFloat public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="Single"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
		</parseFloat>
		<toHexString public="1" set="method" static="1">
			<f a="param1">
				<x path="Single"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toHexString>
		<_toString public="1" set="method" static="1">
			<f a="param1">
				<x path="Single"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":native"><e>"toString"</e></m>
				<m n=":overload"/>
			</meta>
		</_toString>
		<valueOf public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="java.lang.Float"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
			<overloads><valueOf public="1" set="method">
	<f a="param1">
		<x path="Single"/>
		<x path="java.lang.Float"/>
	</f>
	<meta><m n=":overload"/></meta>
</valueOf></overloads>
		</valueOf>
		<compareTo public="1" set="method">
			<f a="param1">
				<x path="java.lang.Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<d/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<isInfinite public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isInfinite>
		<isNaN public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isNaN>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<new public="1" set="method">
			<f a="param1">
				<x path="Single"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a="param1">
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
					</meta>
				</new>
			</overloads>
		</new>
		<meta><m n=":native"><e>"java.lang.Float"</e></m></meta>
	</class>
	<class path="java.lang.IllegalAccessException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/IllegalAccessException.class" extern="1">
		<extends path="java.lang.ReflectiveOperationException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.IllegalAccessException"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"IllegalAccessException"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.IllegalArgumentException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/IllegalArgumentException.class" extern="1">
		<extends path="java.lang.RuntimeException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.IllegalArgumentException"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"IllegalArgumentException"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.InstantiationException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/InstantiationException.class" extern="1">
		<extends path="java.lang.ReflectiveOperationException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.InstantiationException"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"InstantiationException"</e>
			</m>
		</meta>
	</class>
	<abstract path="java.lang.Integer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Integer.hx">
		<from>
			<icast><c path="java.lang.IntegerClass"/></icast>
			<icast field="fromInt"><x path="Int"/></icast>
		</from>
		<this><c path="java.lang.IntegerClass"/></this>
		<to>
			<icast><c path="java.lang.IntegerClass"/></icast>
			<icast field="toInt"><x path="Int"/></icast>
		</to>
		<meta>
			<m n=":native"><e>""</e></m>
			<m n=":forwardStatics"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="java.lang._Integer.Integer_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Integer.hx" private="1" module="java.lang.Integer">
	<toInt public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<c path="java.lang.IntegerClass"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
			<m n=":extern"/>
		</meta>
	</toInt>
	<fromInt public="1" get="inline" set="null" line="30" static="1">
		<f a="b">
			<x path="Int"/>
			<x path="java.lang.Integer"/>
		</f>
		<meta>
			<m n=":from"/>
			<m n=":extern"/>
		</meta>
	</fromInt>
	<meta>
		<m n=":final"/>
		<m n=":native"><e>""</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="java.lang._Integer.Integer_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Integer.hx" private="1" module="java.lang.Integer">
		<toInt public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<c path="java.lang.IntegerClass"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
				<m n=":extern"/>
			</meta>
		</toInt>
		<fromInt public="1" get="inline" set="null" line="30" static="1">
			<f a="b">
				<x path="Int"/>
				<x path="java.lang.Integer"/>
			</f>
			<meta>
				<m n=":from"/>
				<m n=":extern"/>
			</meta>
		</fromInt>
		<meta>
			<m n=":final"/>
			<m n=":native"><e>""</e></m>
		</meta>
	</class>
	<class path="java.lang.IntegerClass" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Integer.hx" module="java.lang.Integer" extern="1">
		<extends path="java.lang.Number"/>
		<implements path="java.lang.Comparable"><x path="java.lang.Integer"/></implements>
		<MAX_VALUE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MAX_VALUE>
		<MIN_VALUE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MIN_VALUE>
		<SIZE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</SIZE>
		<TYPE public="1" static="1">
			<c path="java.lang.Class"><x path="java.lang.Integer"/></c>
			<meta><m n=":final"/></meta>
		</TYPE>
		<bitCount public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</bitCount>
		<compare public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</compare>
		<decode public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="java.lang.Integer"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
		</decode>
		<getInteger public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="java.lang.Integer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<getInteger public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<x path="Int"/>
						<x path="java.lang.Integer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</getInteger>
				<getInteger public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<x path="java.lang.Integer"/>
						<x path="java.lang.Integer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</getInteger>
			</overloads>
		</getInteger>
		<highestOneBit public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</highestOneBit>
		<lowestOneBit public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</lowestOneBit>
		<numberOfLeadingZeros public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</numberOfLeadingZeros>
		<numberOfTrailingZeros public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</numberOfTrailingZeros>
		<parseInt public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
			<overloads><parseInt public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Int"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
	</meta>
</parseInt></overloads>
		</parseInt>
		<reverse public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</reverse>
		<reverseBytes public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</reverseBytes>
		<rotateLeft public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</rotateLeft>
		<rotateRight public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</rotateRight>
		<signum public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</signum>
		<toBinaryString public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toBinaryString>
		<toHexString public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toHexString>
		<toOctalString public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toOctalString>
		<_toString public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":native"><e>"toString"</e></m>
				<m n=":overload"/>
			</meta>
			<overloads><toString public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="String"/>
	</f>
	<meta>
		<m n=":native"><e>"toString"</e></m>
		<m n=":overload"/>
	</meta>
</toString></overloads>
		</_toString>
		<valueOf public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<x path="java.lang.Integer"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
			<overloads>
				<valueOf public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="java.lang.Integer"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
					</meta>
				</valueOf>
				<valueOf public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="java.lang.Integer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</valueOf>
			</overloads>
		</valueOf>
		<compareTo public="1" set="method">
			<f a="param1">
				<x path="java.lang.Integer"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<d/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<new public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
	</meta>
</new></overloads>
		</new>
		<meta><m n=":native"><e>"java.lang.Integer"</e></m></meta>
	</class>
	<class path="java.lang.Integer_IntegerCache" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Integer.hx" module="java.lang.Integer" extern="1"><meta>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.Integer$IntegerCache"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"Integer.IntegerCache"</e>
	</m>
</meta></class>
	<class path="java.lang.InterruptedException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/InterruptedException.class" extern="1">
		<extends path="java.lang.Exception"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.InterruptedException"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"InterruptedException"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Iterable" params="T" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Iterable.class" extern="1" interface="1">
		<iterator public="1" set="method">
			<f a=""><c path="java.util.Iterator"><c path="java.lang.Iterable.T"/></c></f>
			<meta><m n=":overload"/></meta>
		</iterator>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Iterable"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Iterable"</e>
			</m>
		</meta>
	</class>
	<abstract path="java.lang.Long" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Long.hx">
		<from>
			<icast><c path="java.lang.LongClass"/></icast>
			<icast field="fromLong"><x path="haxe.Int64"/></icast>
		</from>
		<this><c path="java.lang.LongClass"/></this>
		<to>
			<icast><c path="java.lang.LongClass"/></icast>
			<icast field="toLong"><x path="haxe.Int64"/></icast>
		</to>
		<meta>
			<m n=":native"><e>""</e></m>
			<m n=":forwardStatics"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="java.lang._Long.Long_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Long.hx" private="1" module="java.lang.Long">
	<toLong public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<c path="java.lang.LongClass"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
			<m n=":extern"/>
		</meta>
	</toLong>
	<fromLong public="1" get="inline" set="null" line="30" static="1">
		<f a="b">
			<x path="haxe.Int64"/>
			<x path="java.lang.Long"/>
		</f>
		<meta>
			<m n=":from"/>
			<m n=":extern"/>
		</meta>
	</fromLong>
	<meta>
		<m n=":final"/>
		<m n=":native"><e>""</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="java.lang._Long.Long_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Long.hx" private="1" module="java.lang.Long">
		<toLong public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<c path="java.lang.LongClass"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
				<m n=":extern"/>
			</meta>
		</toLong>
		<fromLong public="1" get="inline" set="null" line="30" static="1">
			<f a="b">
				<x path="haxe.Int64"/>
				<x path="java.lang.Long"/>
			</f>
			<meta>
				<m n=":from"/>
				<m n=":extern"/>
			</meta>
		</fromLong>
		<meta>
			<m n=":final"/>
			<m n=":native"><e>""</e></m>
		</meta>
	</class>
	<class path="java.lang.LongClass" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Long.hx" module="java.lang.Long" extern="1">
		<extends path="java.lang.Number"/>
		<implements path="java.lang.Comparable"><x path="java.lang.Long"/></implements>
		<MAX_VALUE public="1" set="null" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":final"/></meta>
		</MAX_VALUE>
		<MIN_VALUE public="1" set="null" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":final"/></meta>
		</MIN_VALUE>
		<SIZE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</SIZE>
		<TYPE public="1" static="1">
			<c path="java.lang.Class"><x path="java.lang.Long"/></c>
			<meta><m n=":final"/></meta>
		</TYPE>
		<bitCount public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</bitCount>
		<compare public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</compare>
		<decode public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="java.lang.Long"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
		</decode>
		<getLong public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<x path="java.lang.Long"/>
				<x path="java.lang.Long"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<getLong public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<x path="haxe.Int64"/>
						<x path="java.lang.Long"/>
					</f>
					<meta><m n=":overload"/></meta>
				</getLong>
				<getLong public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="java.lang.Long"/>
					</f>
					<meta><m n=":overload"/></meta>
				</getLong>
			</overloads>
		</getLong>
		<highestOneBit public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</highestOneBit>
		<lowestOneBit public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</lowestOneBit>
		<numberOfLeadingZeros public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</numberOfLeadingZeros>
		<numberOfTrailingZeros public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</numberOfTrailingZeros>
		<parseLong public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
			<overloads><parseLong public="1" set="method">
	<f a="param1:param2">
		<c path="String"/>
		<x path="Int"/>
		<x path="haxe.Int64"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
	</meta>
</parseLong></overloads>
		</parseLong>
		<reverse public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</reverse>
		<reverseBytes public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</reverseBytes>
		<rotateLeft public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</rotateLeft>
		<rotateRight public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</rotateRight>
		<signum public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</signum>
		<toBinaryString public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toBinaryString>
		<toHexString public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toHexString>
		<toOctalString public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toOctalString>
		<_toString public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":native"><e>"toString"</e></m>
				<m n=":overload"/>
			</meta>
			<overloads><toString public="1" set="method">
	<f a="param1:param2">
		<x path="haxe.Int64"/>
		<x path="Int"/>
		<c path="String"/>
	</f>
	<meta>
		<m n=":native"><e>"toString"</e></m>
		<m n=":overload"/>
	</meta>
</toString></overloads>
		</_toString>
		<valueOf public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="java.lang.Long"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<valueOf public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="java.lang.Long"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
					</meta>
				</valueOf>
				<valueOf public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<x path="Int"/>
						<x path="java.lang.Long"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
					</meta>
				</valueOf>
			</overloads>
		</valueOf>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<x path="java.lang.Long"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
			<overloads><new public="1" set="method">
	<f a="param1">
		<x path="haxe.Int64"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta><m n=":native"><e>"java.lang.Long"</e></m></meta>
	</class>
	<class path="java.lang.Long_LongCache" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Long.hx" module="java.lang.Long" extern="1"><meta>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.Long$LongCache"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"Long.LongCache"</e>
	</m>
</meta></class>
	<class path="java.lang.Math" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Math.class" extern="1">
		<scalb public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Single"/>
				<x path="Int"/>
				<x path="Single"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><scalb public="1" set="method">
	<f a="param1:param2">
		<x path="Float"/>
		<x path="Int"/>
		<x path="Float"/>
	</f>
	<meta><m n=":overload"/></meta>
</scalb></overloads>
		</scalb>
		<nextUp public="1" set="method" static="1">
			<f a="param1">
				<x path="Single"/>
				<x path="Single"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><nextUp public="1" set="method">
	<f a="param1">
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<meta><m n=":overload"/></meta>
</nextUp></overloads>
		</nextUp>
		<nextAfter public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Single"/>
				<x path="Float"/>
				<x path="Single"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><nextAfter public="1" set="method">
	<f a="param1:param2">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<meta><m n=":overload"/></meta>
</nextAfter></overloads>
		</nextAfter>
		<getExponent public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getExponent public="1" set="method">
	<f a="param1">
		<x path="Single"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</getExponent></overloads>
		</getExponent>
		<copySign public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Single"/>
				<x path="Single"/>
				<x path="Single"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><copySign public="1" set="method">
	<f a="param1:param2">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<meta><m n=":overload"/></meta>
</copySign></overloads>
		</copySign>
		<log1p public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</log1p>
		<expm1 public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</expm1>
		<hypot public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</hypot>
		<tanh public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</tanh>
		<cosh public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</cosh>
		<sinh public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</sinh>
		<signum public="1" set="method" static="1">
			<f a="param1">
				<x path="Single"/>
				<x path="Single"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><signum public="1" set="method">
	<f a="param1">
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<meta><m n=":overload"/></meta>
</signum></overloads>
		</signum>
		<ulp public="1" set="method" static="1">
			<f a="param1">
				<x path="Single"/>
				<x path="Single"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><ulp public="1" set="method">
	<f a="param1">
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<meta><m n=":overload"/></meta>
</ulp></overloads>
		</ulp>
		<min public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<min public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</min>
				<min public="1" set="method">
					<f a="param1:param2">
						<x path="haxe.Int64"/>
						<x path="haxe.Int64"/>
						<x path="haxe.Int64"/>
					</f>
					<meta><m n=":overload"/></meta>
				</min>
				<min public="1" set="method">
					<f a="param1:param2">
						<x path="Single"/>
						<x path="Single"/>
						<x path="Single"/>
					</f>
					<meta><m n=":overload"/></meta>
				</min>
			</overloads>
		</min>
		<max public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<max public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</max>
				<max public="1" set="method">
					<f a="param1:param2">
						<x path="haxe.Int64"/>
						<x path="haxe.Int64"/>
						<x path="haxe.Int64"/>
					</f>
					<meta><m n=":overload"/></meta>
				</max>
				<max public="1" set="method">
					<f a="param1:param2">
						<x path="Single"/>
						<x path="Single"/>
						<x path="Single"/>
					</f>
					<meta><m n=":overload"/></meta>
				</max>
			</overloads>
		</max>
		<abs public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<abs public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</abs>
				<abs public="1" set="method">
					<f a="param1">
						<x path="haxe.Int64"/>
						<x path="haxe.Int64"/>
					</f>
					<meta><m n=":overload"/></meta>
				</abs>
				<abs public="1" set="method">
					<f a="param1">
						<x path="Single"/>
						<x path="Single"/>
					</f>
					<meta><m n=":overload"/></meta>
				</abs>
			</overloads>
		</abs>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<meta><m n=":overload"/></meta>
		</random>
		<round public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><round public="1" set="method">
	<f a="param1">
		<x path="Single"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</round></overloads>
		</round>
		<pow public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</pow>
		<atan2 public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</atan2>
		<rint public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</rint>
		<floor public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ceil>
		<IEEEremainder public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IEEEremainder>
		<cbrt public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</cbrt>
		<sqrt public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</sqrt>
		<log10 public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</log10>
		<log public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</log>
		<exp public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</exp>
		<toDegrees public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toDegrees>
		<toRadians public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toRadians>
		<atan public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</atan>
		<acos public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</acos>
		<asin public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</asin>
		<tan public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</tan>
		<cos public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</cos>
		<sin public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</sin>
		<E public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":final"/></meta>
		</E>
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":final"/></meta>
		</PI>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Math"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Math"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.NoSuchFieldException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/NoSuchFieldException.class" extern="1">
		<extends path="java.lang.ReflectiveOperationException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.NoSuchFieldException"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"NoSuchFieldException"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.NoSuchMethodException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/NoSuchMethodException.class" extern="1">
		<extends path="java.lang.ReflectiveOperationException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.NoSuchMethodException"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"NoSuchMethodException"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.NumberFormatException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/NumberFormatException.class" extern="1">
		<extends path="java.lang.IllegalArgumentException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.NumberFormatException"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"NumberFormatException"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Object" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Object.class" extern="1">
		<finalize set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.Throwable"</e></m>
			</meta>
		</finalize>
		<wait public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
				<m n=":final"/>
			</meta>
			<overloads>
				<wait public="1" set="method">
					<f a="param1">
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
						<m n=":final"/>
					</meta>
				</wait>
				<wait public="1" set="method">
					<f a="param1:param2">
						<x path="haxe.Int64"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
						<m n=":final"/>
					</meta>
				</wait>
			</overloads>
		</wait>
		<notifyAll public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</notifyAll>
		<notify public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</notify>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<clone set="method">
			<f a=""><d/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.CloneNotSupportedException"</e></m>
			</meta>
		</clone>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<getClass public="1" set="method">
			<f a=""><c path="java.lang.Class"><d/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getClass>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Object"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Object"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Package" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Package.class" extern="1">
		<implements path="java.lang.reflect.AnnotatedElement"/>
		<getPackages public="1" set="method" static="1">
			<f a=""><c path="java.NativeArray"><c path="java.lang.Package"/></c></f>
			<meta><m n=":overload"/></meta>
		</getPackages>
		<getPackage public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.lang.Package"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getPackage>
		<getDeclaredAnnotations public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f>
			<meta><m n=":overload"/></meta>
		</getDeclaredAnnotations>
		<getAnnotations public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f>
			<meta><m n=":overload"/></meta>
		</getAnnotations>
		<isAnnotationPresent public="1" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="java.lang.annotation.Annotation"/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isAnnotationPresent>
		<getAnnotation public="1" params="A" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="getAnnotation.A"/></c>
				<c path="getAnnotation.A"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getAnnotation>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<isCompatibleWith public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
		</isCompatibleWith>
		<isSealed public="1" set="method">
			<f a="param1">
				<c path="java.net.URL"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><isSealed public="1" set="method">
	<f a=""><x path="Bool"/></f>
	<meta><m n=":overload"/></meta>
</isSealed></overloads>
		</isSealed>
		<getImplementationVendor public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getImplementationVendor>
		<getImplementationVersion public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getImplementationVersion>
		<getImplementationTitle public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getImplementationTitle>
		<getSpecificationVendor public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getSpecificationVendor>
		<getSpecificationVersion public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getSpecificationVersion>
		<getSpecificationTitle public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getSpecificationTitle>
		<getName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getName>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Package"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Package"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Process" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Process.class" extern="1">
		<destroy public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</destroy>
		<exitValue public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</exitValue>
		<waitFor public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
			</meta>
		</waitFor>
		<getErrorStream public="1" set="method">
			<f a=""><c path="java.io.InputStream"/></f>
			<meta><m n=":overload"/></meta>
		</getErrorStream>
		<getInputStream public="1" set="method">
			<f a=""><c path="java.io.InputStream"/></f>
			<meta><m n=":overload"/></meta>
		</getInputStream>
		<getOutputStream public="1" set="method">
			<f a=""><c path="java.io.OutputStream"/></f>
			<meta><m n=":overload"/></meta>
		</getOutputStream>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Process"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Process"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ProcessBuilder" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ProcessBuilder.class" extern="1">
		<start public="1" set="method">
			<f a=""><c path="java.lang.Process"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</start>
		<redirectErrorStream public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<c path="java.lang.ProcessBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><redirectErrorStream public="1" set="method">
	<f a=""><x path="Bool"/></f>
	<meta><m n=":overload"/></meta>
</redirectErrorStream></overloads>
		</redirectErrorStream>
		<inheritIO public="1" set="method">
			<f a=""><c path="java.lang.ProcessBuilder"/></f>
			<meta><m n=":overload"/></meta>
		</inheritIO>
		<redirectError public="1" set="method">
			<f a=""><c path="java.lang.ProcessBuilder_Redirect"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<redirectError public="1" set="method">
					<f a="param1">
						<c path="java.lang.ProcessBuilder_Redirect"/>
						<c path="java.lang.ProcessBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</redirectError>
				<redirectError public="1" set="method">
					<f a="param1">
						<c path="java.io.File"/>
						<c path="java.lang.ProcessBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</redirectError>
			</overloads>
		</redirectError>
		<redirectOutput public="1" set="method">
			<f a=""><c path="java.lang.ProcessBuilder_Redirect"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<redirectOutput public="1" set="method">
					<f a="param1">
						<c path="java.lang.ProcessBuilder_Redirect"/>
						<c path="java.lang.ProcessBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</redirectOutput>
				<redirectOutput public="1" set="method">
					<f a="param1">
						<c path="java.io.File"/>
						<c path="java.lang.ProcessBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</redirectOutput>
			</overloads>
		</redirectOutput>
		<redirectInput public="1" set="method">
			<f a=""><c path="java.lang.ProcessBuilder_Redirect"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<redirectInput public="1" set="method">
					<f a="param1">
						<c path="java.lang.ProcessBuilder_Redirect"/>
						<c path="java.lang.ProcessBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</redirectInput>
				<redirectInput public="1" set="method">
					<f a="param1">
						<c path="java.io.File"/>
						<c path="java.lang.ProcessBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</redirectInput>
			</overloads>
		</redirectInput>
		<directory public="1" set="method">
			<f a="param1">
				<c path="java.io.File"/>
				<c path="java.lang.ProcessBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><directory public="1" set="method">
	<f a=""><c path="java.io.File"/></f>
	<meta><m n=":overload"/></meta>
</directory></overloads>
		</directory>
		<environment public="1" set="method">
			<f a=""><c path="java.util.Map">
	<c path="String"/>
	<c path="String"/>
</c></f>
			<meta><m n=":overload"/></meta>
		</environment>
		<command public="1" set="method">
			<f a=""><c path="java.util.List"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<command public="1" set="method">
					<f a="param1">
						<c path="java.util.List"><c path="String"/></c>
						<c path="java.lang.ProcessBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</command>
				<command public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><c path="String"/></c>
						<c path="java.lang.ProcessBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</command>
			</overloads>
		</command>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><c path="String"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1">
		<c path="java.util.List"><c path="String"/></c>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ProcessBuilder"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"ProcessBuilder"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ProcessBuilder_NullInputStream" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ProcessBuilder$NullInputStream.class" module="java.lang.ProcessBuilder" extern="1">
		<extends path="java.io.InputStream"/>
		<available public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</available>
		<read public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</read>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ProcessBuilder$NullInputStream"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"ProcessBuilder.NullInputStream"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ProcessBuilder_NullOutputStream" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ProcessBuilder$NullOutputStream.class" module="java.lang.ProcessBuilder" extern="1">
		<extends path="java.io.OutputStream"/>
		<write public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</write>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ProcessBuilder$NullOutputStream"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"ProcessBuilder.NullOutputStream"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ProcessBuilder_Redirect" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ProcessBuilder$Redirect.class" module="java.lang.ProcessBuilder" extern="1">
		<appendTo public="1" set="method" static="1">
			<f a="param1">
				<c path="java.io.File"/>
				<c path="java.lang.ProcessBuilder_Redirect"/>
			</f>
			<meta><m n=":overload"/></meta>
		</appendTo>
		<to public="1" set="method" static="1">
			<f a="param1">
				<c path="java.io.File"/>
				<c path="java.lang.ProcessBuilder_Redirect"/>
			</f>
			<meta><m n=":overload"/></meta>
		</to>
		<from public="1" set="method" static="1">
			<f a="param1">
				<c path="java.io.File"/>
				<c path="java.lang.ProcessBuilder_Redirect"/>
			</f>
			<meta><m n=":overload"/></meta>
		</from>
		<PIPE public="1" static="1">
			<c path="java.lang.ProcessBuilder_Redirect"/>
			<meta><m n=":final"/></meta>
		</PIPE>
		<INHERIT public="1" static="1">
			<c path="java.lang.ProcessBuilder_Redirect"/>
			<meta><m n=":final"/></meta>
		</INHERIT>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<file public="1" set="method">
			<f a=""><c path="java.io.File"/></f>
			<meta><m n=":overload"/></meta>
		</file>
		<type public="1" set="method">
			<f a=""><e path="java.lang.ProcessBuilder_Redirect_Type"/></f>
			<meta><m n=":overload"/></meta>
		</type>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ProcessBuilder$Redirect"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"ProcessBuilder.Redirect"</e>
			</m>
		</meta>
	</class>
	<enum path="java.lang.ProcessBuilder_Redirect_Type" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ProcessBuilder$Redirect$Type.class" module="java.lang.ProcessBuilder">
		<APPEND/>
		<WRITE/>
		<READ/>
		<INHERIT/>
		<PIPE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"ProcessBuilder.Redirect.Type"</e>
			</m>
			<m n=":native"><e>"java.lang.ProcessBuilder$Redirect$Type"</e></m>
		</meta>
	</enum>
	<class path="java.lang.ProcessBuilder_1" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ProcessBuilder$1.class" module="java.lang.ProcessBuilder" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.ProcessBuilder$1"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"ProcessBuilder.1"</e>
	</m>
</meta></class>
	<class path="java.lang.Runtime" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Runtime.class" extern="1">
		<runFinalizersOnExit public="1" set="method" static="1">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</runFinalizersOnExit>
		<getRuntime public="1" set="method" static="1">
			<f a=""><c path="java.lang.Runtime"/></f>
			<meta><m n=":overload"/></meta>
		</getRuntime>
		<getLocalizedOutputStream public="1" set="method">
			<f a="param1">
				<c path="java.io.OutputStream"/>
				<c path="java.io.OutputStream"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</getLocalizedOutputStream>
		<getLocalizedInputStream public="1" set="method">
			<f a="param1">
				<c path="java.io.InputStream"/>
				<c path="java.io.InputStream"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</getLocalizedInputStream>
		<loadLibrary public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</loadLibrary>
		<load public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</load>
		<traceMethodCalls public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</traceMethodCalls>
		<traceInstructions public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</traceInstructions>
		<runFinalization public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</runFinalization>
		<gc public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</gc>
		<maxMemory public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</maxMemory>
		<totalMemory public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</totalMemory>
		<freeMemory public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</freeMemory>
		<availableProcessors public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</availableProcessors>
		<exec public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><c path="String"/></c>
				<c path="java.NativeArray"><c path="String"/></c>
				<c path="java.io.File"/>
				<c path="java.lang.Process"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads>
				<exec public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<c path="java.lang.Process"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</exec>
				<exec public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.NativeArray"><c path="String"/></c>
						<c path="java.lang.Process"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</exec>
				<exec public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="java.NativeArray"><c path="String"/></c>
						<c path="java.io.File"/>
						<c path="java.lang.Process"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</exec>
				<exec public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><c path="String"/></c>
						<c path="java.lang.Process"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</exec>
				<exec public="1" set="method">
					<f a="param1:param2">
						<c path="java.NativeArray"><c path="String"/></c>
						<c path="java.NativeArray"><c path="String"/></c>
						<c path="java.lang.Process"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</exec>
			</overloads>
		</exec>
		<halt public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</halt>
		<removeShutdownHook public="1" set="method">
			<f a="param1">
				<c path="java.lang.Thread"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</removeShutdownHook>
		<addShutdownHook public="1" set="method">
			<f a="param1">
				<c path="java.lang.Thread"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</addShutdownHook>
		<exit public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</exit>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Runtime"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Runtime"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.SecurityException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/SecurityException.class" extern="1">
		<extends path="java.lang.RuntimeException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.SecurityException"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"SecurityException"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.SecurityManager" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/SecurityManager.class" extern="1">
		<getThreadGroup public="1" set="method">
			<f a=""><c path="java.lang.ThreadGroup"/></f>
			<meta><m n=":overload"/></meta>
		</getThreadGroup>
		<checkSecurityAccess public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</checkSecurityAccess>
		<checkMemberAccess public="1" set="method">
			<f a="param1:param2">
				<c path="java.lang.Class"><d/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</checkMemberAccess>
		<checkSetFactory public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</checkSetFactory>
		<checkPackageDefinition public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</checkPackageDefinition>
		<checkPackageAccess public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</checkPackageAccess>
		<checkAwtEventQueueAccess public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</checkAwtEventQueueAccess>
		<checkSystemClipboardAccess public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</checkSystemClipboardAccess>
		<checkPrintJobAccess public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</checkPrintJobAccess>
		<checkTopLevelWindow public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</checkTopLevelWindow>
		<checkPropertyAccess public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</checkPropertyAccess>
		<checkPropertiesAccess public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</checkPropertiesAccess>
		<checkMulticast public="1" set="method">
			<f a="param1:param2">
				<c path="java.net.InetAddress"/>
				<t path="java.types.Int8"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
			<overloads><checkMulticast public="1" set="method">
	<f a="param1">
		<c path="java.net.InetAddress"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</checkMulticast></overloads>
		</checkMulticast>
		<checkAccept public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</checkAccept>
		<checkListen public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</checkListen>
		<checkConnect public="1" set="method">
			<f a="param1:param2:param3">
				<c path="String"/>
				<x path="Int"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><checkConnect public="1" set="method">
	<f a="param1:param2">
		<c path="String"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</checkConnect></overloads>
		</checkConnect>
		<checkDelete public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</checkDelete>
		<checkWrite public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><checkWrite public="1" set="method">
	<f a="param1">
		<c path="java.io.FileDescriptor"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</checkWrite></overloads>
		</checkWrite>
		<checkRead public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<checkRead public="1" set="method">
					<f a="param1">
						<c path="java.io.FileDescriptor"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</checkRead>
				<checkRead public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</checkRead>
			</overloads>
		</checkRead>
		<checkLink public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</checkLink>
		<checkExec public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</checkExec>
		<checkExit public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</checkExit>
		<checkAccess public="1" set="method">
			<f a="param1">
				<c path="java.lang.ThreadGroup"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><checkAccess public="1" set="method">
	<f a="param1">
		<c path="java.lang.Thread"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</checkAccess></overloads>
		</checkAccess>
		<checkCreateClassLoader public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</checkCreateClassLoader>
		<checkPermission public="1" set="method">
			<f a="param1:param2">
				<c path="java.security.Permission"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><checkPermission public="1" set="method">
	<f a="param1">
		<c path="java.security.Permission"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</checkPermission></overloads>
		</checkPermission>
		<getSecurityContext public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</getSecurityContext>
		<inClassLoader set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</inClassLoader>
		<inClass set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</inClass>
		<classLoaderDepth set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</classLoaderDepth>
		<classDepth set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</classDepth>
		<currentLoadedClass set="method">
			<f a=""><c path="java.lang.Class"><d/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</currentLoadedClass>
		<currentClassLoader set="method">
			<f a=""><c path="java.lang.ClassLoader"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</currentClassLoader>
		<getClassContext set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c></f>
			<meta><m n=":overload"/></meta>
		</getClassContext>
		<getInCheck public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</getInCheck>
		<inCheck>
			<x path="Bool"/>
			<meta><m n=":deprecated"/></meta>
		</inCheck>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.SecurityManager"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"SecurityManager"</e>
			</m>
		</meta>
	</class>
	<abstract path="java.lang.Short" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Short.hx">
		<from>
			<icast><c path="java.lang.ShortClass"/></icast>
			<icast field="fromShort"><t path="java.types.Int16"/></icast>
		</from>
		<this><c path="java.lang.ShortClass"/></this>
		<to>
			<icast><c path="java.lang.ShortClass"/></icast>
			<icast field="toShort"><x path="java.Int16"/></icast>
		</to>
		<meta>
			<m n=":native"><e>""</e></m>
			<m n=":forwardStatics"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="java.lang._Short.Short_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Short.hx" private="1" module="java.lang.Short">
	<toShort public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<c path="java.lang.ShortClass"/>
			<t path="java.types.Int16"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
			<m n=":extern"/>
		</meta>
	</toShort>
	<fromShort public="1" get="inline" set="null" line="30" static="1">
		<f a="b">
			<t path="java.types.Int16"/>
			<x path="java.lang.Short"/>
		</f>
		<meta>
			<m n=":from"/>
			<m n=":extern"/>
		</meta>
	</fromShort>
	<meta>
		<m n=":final"/>
		<m n=":native"><e>""</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="java.lang._Short.Short_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Short.hx" private="1" module="java.lang.Short">
		<toShort public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<c path="java.lang.ShortClass"/>
				<t path="java.types.Int16"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
				<m n=":extern"/>
			</meta>
		</toShort>
		<fromShort public="1" get="inline" set="null" line="30" static="1">
			<f a="b">
				<t path="java.types.Int16"/>
				<x path="java.lang.Short"/>
			</f>
			<meta>
				<m n=":from"/>
				<m n=":extern"/>
			</meta>
		</fromShort>
		<meta>
			<m n=":final"/>
			<m n=":native"><e>""</e></m>
		</meta>
	</class>
	<class path="java.lang.ShortClass" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Short.hx" module="java.lang.Short" extern="1">
		<extends path="java.lang.Number"/>
		<implements path="java.lang.Comparable"><x path="java.lang.Short"/></implements>
		<MAX_VALUE public="1" set="null" static="1">
			<t path="java.types.Int16"/>
			<meta><m n=":final"/></meta>
		</MAX_VALUE>
		<MIN_VALUE public="1" set="null" static="1">
			<t path="java.types.Int16"/>
			<meta><m n=":final"/></meta>
		</MIN_VALUE>
		<SIZE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</SIZE>
		<TYPE public="1" static="1">
			<c path="java.lang.Class"><x path="java.lang.Short"/></c>
			<meta><m n=":final"/></meta>
		</TYPE>
		<compare public="1" set="method" static="1">
			<f a="param1:param2">
				<t path="java.types.Int16"/>
				<t path="java.types.Int16"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</compare>
		<decode public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="java.lang.Short"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
		</decode>
		<parseShort public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<t path="java.types.Int16"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
			<overloads><parseShort public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<t path="java.types.Int16"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
	</meta>
</parseShort></overloads>
		</parseShort>
		<reverseBytes public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Int16"/>
				<t path="java.types.Int16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</reverseBytes>
		<_toString public="1" set="method" static="1">
			<f a="param1">
				<t path="java.types.Int16"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":native"><e>"toString"</e></m>
				<m n=":overload"/>
			</meta>
		</_toString>
		<valueOf public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<x path="java.lang.Short"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
			</meta>
			<overloads>
				<valueOf public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="java.lang.Short"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
					</meta>
				</valueOf>
				<valueOf public="1" set="method">
					<f a="param1">
						<t path="java.types.Int16"/>
						<x path="java.lang.Short"/>
					</f>
					<meta><m n=":overload"/></meta>
				</valueOf>
			</overloads>
		</valueOf>
		<compareTo public="1" set="method">
			<f a="param1">
				<x path="java.lang.Short"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<d/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<new public="1" set="method">
			<f a="param1">
				<t path="java.types.Int16"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.NumberFormatException"</e></m>
	</meta>
</new></overloads>
		</new>
		<meta><m n=":native"><e>"java.lang.Short"</e></m></meta>
	</class>
	<class path="java.lang.Short_ShortCache" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/lang/Short.hx" module="java.lang.Short" extern="1"><meta>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.Short$ShortCache"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"Short.ShortCache"</e>
	</m>
</meta></class>
	<class path="java.lang.StackTraceElement" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/StackTraceElement.class" extern="1">
		<implements path="java.io.Serializable"/>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<isNativeMethod public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isNativeMethod>
		<getMethodName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getMethodName>
		<getClassName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getClassName>
		<getLineNumber public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getLineNumber>
		<getFileName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getFileName>
		<new public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.StackTraceElement"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"StackTraceElement"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.StringBuffer" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/StringBuffer.class" extern="1">
		<extends path="java.lang.AbstractStringBuilder"/>
		<implements path="java.io.Serializable"/>
		<implements path="java.lang.CharSequence"/>
		<append public="1" set="method" override="1">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.lang.StringBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<append public="1" set="method">
					<f a="param1">
						<x path="Float"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<x path="Single"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<x path="haxe.Int64"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<x path="Bool"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<c path="java.lang.StringBuffer"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<d/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<t path="java.types.Char16"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.lang.CharSequence"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
			</overloads>
		</append>
		<delete public="1" set="method" override="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.lang.StringBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
		</delete>
		<appendCodePoint public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<c path="java.lang.StringBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
		</appendCodePoint>
		<deleteCharAt public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<c path="java.lang.StringBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
		</deleteCharAt>
		<replace public="1" set="method" override="1">
			<f a="param1:param2:param3">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="java.lang.StringBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
		</replace>
		<insert public="1" set="method" override="1">
			<f a="param1:param2:param3:param4">
				<x path="Int"/>
				<c path="java.NativeArray"><t path="java.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.lang.StringBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Float"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Single"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="haxe.Int64"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<t path="java.types.Char16"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Bool"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2:param3:param4">
						<x path="Int"/>
						<c path="java.lang.CharSequence"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.lang.CharSequence"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="String"/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<d/>
						<c path="java.lang.StringBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
			</overloads>
		</insert>
		<reverse public="1" set="method" override="1">
			<f a=""><c path="java.lang.StringBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</reverse>
		<toString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<lastIndexOf public="1" set="method" override="1">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><lastIndexOf public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</lastIndexOf></overloads>
		</lastIndexOf>
		<indexOf public="1" set="method" override="1">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><indexOf public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</indexOf></overloads>
		</indexOf>
		<substring public="1" set="method" override="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><substring public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</substring></overloads>
		</substring>
		<subSequence public="1" set="method" override="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.lang.CharSequence"/>
			</f>
			<meta><m n=":overload"/></meta>
		</subSequence>
		<setCharAt public="1" set="method" override="1">
			<f a="param1:param2">
				<x path="Int"/>
				<t path="java.types.Char16"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setCharAt>
		<getChars public="1" set="method" override="1">
			<f a="param1:param2:param3:param4">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.NativeArray"><t path="java.types.Char16"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getChars>
		<offsetByCodePoints public="1" set="method" override="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</offsetByCodePoints>
		<codePointCount public="1" set="method" override="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</codePointCount>
		<codePointBefore public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</codePointBefore>
		<codePointAt public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</codePointAt>
		<charAt public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<t path="java.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</charAt>
		<setLength public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setLength>
		<trimToSize public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</trimToSize>
		<ensureCapacity public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ensureCapacity>
		<capacity public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</capacity>
		<length public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</length>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.StringBuffer"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"StringBuffer"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.StringBuilder" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/StringBuilder.class" extern="1">
		<extends path="java.lang.AbstractStringBuilder"/>
		<implements path="java.io.Serializable"/>
		<implements path="java.lang.CharSequence"/>
		<append public="1" set="method" override="1">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.lang.StringBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<append public="1" set="method">
					<f a="param1">
						<x path="Float"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<x path="Single"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<x path="haxe.Int64"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<x path="Bool"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<c path="java.lang.StringBuffer"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<d/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1">
						<t path="java.types.Char16"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.lang.CharSequence"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
			</overloads>
		</append>
		<length public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</length>
		<capacity public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</capacity>
		<ensureCapacity public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ensureCapacity>
		<trimToSize public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</trimToSize>
		<setLength public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setLength>
		<charAt public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<t path="java.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</charAt>
		<codePointAt public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</codePointAt>
		<codePointBefore public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</codePointBefore>
		<codePointCount public="1" set="method" override="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</codePointCount>
		<offsetByCodePoints public="1" set="method" override="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</offsetByCodePoints>
		<getChars public="1" set="method" override="1">
			<f a="param1:param2:param3:param4">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.NativeArray"><t path="java.types.Char16"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getChars>
		<setCharAt public="1" set="method" override="1">
			<f a="param1:param2">
				<x path="Int"/>
				<t path="java.types.Char16"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setCharAt>
		<delete public="1" set="method" override="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.lang.StringBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</delete>
		<appendCodePoint public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<c path="java.lang.StringBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</appendCodePoint>
		<deleteCharAt public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<c path="java.lang.StringBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</deleteCharAt>
		<replace public="1" set="method" override="1">
			<f a="param1:param2:param3">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="java.lang.StringBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</replace>
		<substring public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><substring public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<x path="Int"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</substring></overloads>
		</substring>
		<subSequence public="1" set="method" override="1">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.lang.CharSequence"/>
			</f>
			<meta><m n=":overload"/></meta>
		</subSequence>
		<insert public="1" set="method" override="1">
			<f a="param1:param2:param3:param4">
				<x path="Int"/>
				<c path="java.NativeArray"><t path="java.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.lang.StringBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Float"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Single"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="haxe.Int64"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<t path="java.types.Char16"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Bool"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2:param3:param4">
						<x path="Int"/>
						<c path="java.lang.CharSequence"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.lang.CharSequence"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="String"/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
				<insert public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<d/>
						<c path="java.lang.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</insert>
			</overloads>
		</insert>
		<reverse public="1" set="method" override="1">
			<f a=""><c path="java.lang.StringBuilder"/></f>
			<meta><m n=":overload"/></meta>
		</reverse>
		<toString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<lastIndexOf public="1" set="method" override="1">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><lastIndexOf public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</lastIndexOf></overloads>
		</lastIndexOf>
		<indexOf public="1" set="method" override="1">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><indexOf public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</indexOf></overloads>
		</indexOf>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.StringBuilder"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"StringBuilder"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.System" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/System.class" extern="1">
		<mapLibraryName public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</mapLibraryName>
		<loadLibrary public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</loadLibrary>
		<load public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</load>
		<runFinalizersOnExit public="1" set="method" static="1">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</runFinalizersOnExit>
		<runFinalization public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</runFinalization>
		<gc public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</gc>
		<exit public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</exit>
		<getenv public="1" set="method" static="1">
			<f a=""><c path="java.util.Map">
	<c path="String"/>
	<c path="String"/>
</c></f>
			<meta><m n=":overload"/></meta>
			<overloads><getenv public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</getenv></overloads>
		</getenv>
		<clearProperty public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</clearProperty>
		<setProperty public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setProperty>
		<getProperty public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getProperty public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</getProperty></overloads>
		</getProperty>
		<setProperties public="1" set="method" static="1">
			<f a="param1">
				<c path="java.util.Properties"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setProperties>
		<lineSeparator public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</lineSeparator>
		<getProperties public="1" set="method" static="1">
			<f a=""><c path="java.util.Properties"/></f>
			<meta><m n=":overload"/></meta>
		</getProperties>
		<identityHashCode public="1" set="method" static="1">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</identityHashCode>
		<arraycopy public="1" set="method" static="1">
			<f a="param1:param2:param3:param4:param5">
				<d/>
				<x path="Int"/>
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</arraycopy>
		<nanoTime public="1" set="method" static="1">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</nanoTime>
		<currentTimeMillis public="1" set="method" static="1">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</currentTimeMillis>
		<getSecurityManager public="1" set="method" static="1">
			<f a=""><c path="java.lang.SecurityManager"/></f>
			<meta><m n=":overload"/></meta>
		</getSecurityManager>
		<setSecurityManager public="1" set="method" static="1">
			<f a="param1">
				<c path="java.lang.SecurityManager"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setSecurityManager>
		<inheritedChannel public="1" set="method" static="1">
			<f a=""><c path="java.nio.channels.Channel"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</inheritedChannel>
		<console public="1" set="method" static="1">
			<f a=""><c path="java.io.Console"/></f>
			<meta><m n=":overload"/></meta>
		</console>
		<setErr public="1" set="method" static="1">
			<f a="param1">
				<c path="java.io.PrintStream"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setErr>
		<setOut public="1" set="method" static="1">
			<f a="param1">
				<c path="java.io.PrintStream"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setOut>
		<setIn public="1" set="method" static="1">
			<f a="param1">
				<c path="java.io.InputStream"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setIn>
		<_in public="1" static="1">
			<c path="java.io.InputStream"/>
			<meta>
				<m n=":native"><e>"in"</e></m>
				<m n=":final"/>
			</meta>
		</_in>
		<out public="1" static="1">
			<c path="java.io.PrintStream"/>
			<meta><m n=":final"/></meta>
		</out>
		<err public="1" static="1">
			<c path="java.io.PrintStream"/>
			<meta><m n=":final"/></meta>
		</err>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.System"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"System"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Thread" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Thread.class" extern="1">
		<implements path="java.lang.Runnable"/>
		<getDefaultUncaughtExceptionHandler public="1" set="method" static="1">
			<f a=""><c path="java.lang.Thread_UncaughtExceptionHandler"/></f>
			<meta><m n=":overload"/></meta>
		</getDefaultUncaughtExceptionHandler>
		<setDefaultUncaughtExceptionHandler public="1" set="method" static="1">
			<f a="param1">
				<c path="java.lang.Thread_UncaughtExceptionHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setDefaultUncaughtExceptionHandler>
		<getAllStackTraces public="1" set="method" static="1">
			<f a=""><c path="java.util.Map">
	<c path="java.lang.Thread"/>
	<c path="java.NativeArray"><c path="java.lang.StackTraceElement"/></c>
</c></f>
			<meta><m n=":overload"/></meta>
		</getAllStackTraces>
		<holdsLock public="1" set="method" static="1">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</holdsLock>
		<dumpStack public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</dumpStack>
		<enumerate public="1" set="method" static="1">
			<f a="param1">
				<c path="java.NativeArray"><c path="java.lang.Thread"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</enumerate>
		<activeCount public="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</activeCount>
		<interrupted public="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</interrupted>
		<sleep public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
			</meta>
			<overloads><sleep public="1" set="method">
	<f a="param1">
		<x path="haxe.Int64"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
	</meta>
</sleep></overloads>
		</sleep>
		<yield public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</yield>
		<currentThread public="1" set="method" static="1">
			<f a=""><c path="java.lang.Thread"/></f>
			<meta><m n=":overload"/></meta>
		</currentThread>
		<MIN_PRIORITY public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MIN_PRIORITY>
		<NORM_PRIORITY public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</NORM_PRIORITY>
		<MAX_PRIORITY public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MAX_PRIORITY>
		<setUncaughtExceptionHandler public="1" set="method">
			<f a="param1">
				<c path="java.lang.Thread_UncaughtExceptionHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setUncaughtExceptionHandler>
		<getUncaughtExceptionHandler public="1" set="method">
			<f a=""><c path="java.lang.Thread_UncaughtExceptionHandler"/></f>
			<meta><m n=":overload"/></meta>
		</getUncaughtExceptionHandler>
		<getState public="1" set="method">
			<f a=""><e path="java.lang.Thread_State"/></f>
			<meta><m n=":overload"/></meta>
		</getState>
		<getId public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</getId>
		<getStackTrace public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.StackTraceElement"/></c></f>
			<meta><m n=":overload"/></meta>
		</getStackTrace>
		<setContextClassLoader public="1" set="method">
			<f a="param1">
				<c path="java.lang.ClassLoader"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setContextClassLoader>
		<getContextClassLoader public="1" set="method">
			<f a=""><c path="java.lang.ClassLoader"/></f>
			<meta><m n=":overload"/></meta>
		</getContextClassLoader>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<checkAccess public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</checkAccess>
		<isDaemon public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</isDaemon>
		<setDaemon public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</setDaemon>
		<join public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
				<m n=":final"/>
			</meta>
			<overloads>
				<join public="1" set="method">
					<f a="param1">
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
						<m n=":final"/>
					</meta>
				</join>
				<join public="1" set="method">
					<f a="param1:param2">
						<x path="haxe.Int64"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
						<m n=":final"/>
					</meta>
				</join>
			</overloads>
		</join>
		<countStackFrames public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</countStackFrames>
		<getThreadGroup public="1" set="method">
			<f a=""><c path="java.lang.ThreadGroup"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getThreadGroup>
		<getName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getName>
		<setName public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</setName>
		<getPriority public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getPriority>
		<setPriority public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</setPriority>
		<resume public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
				<m n=":final"/>
			</meta>
		</resume>
		<suspend public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
				<m n=":final"/>
			</meta>
		</suspend>
		<isAlive public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</isAlive>
		<destroy public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</destroy>
		<isInterrupted public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isInterrupted>
		<interrupt public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</interrupt>
		<stop public="1" set="method">
			<f a="param1">
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
				<m n=":final"/>
			</meta>
			<overloads><stop public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":deprecated"/>
		<m n=":final"/>
	</meta>
</stop></overloads>
		</stop>
		<run public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</run>
		<start public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</start>
		<clone set="method">
			<f a=""><d/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.CloneNotSupportedException"</e></m>
			</meta>
		</clone>
		<new public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="java.lang.ThreadGroup"/>
				<c path="java.lang.Runnable"/>
				<c path="String"/>
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="java.lang.Runnable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="java.lang.ThreadGroup"/>
						<c path="java.lang.Runnable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="java.lang.ThreadGroup"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="java.lang.Runnable"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.lang.ThreadGroup"/>
						<c path="java.lang.Runnable"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Thread"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Thread"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Thread_Caches" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Thread$Caches.class" module="java.lang.Thread" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.Thread$Caches"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"Thread.Caches"</e>
	</m>
</meta></class>
	<enum path="java.lang.Thread_State" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Thread$State.class" module="java.lang.Thread">
		<TERMINATED/>
		<TIMED_WAITING/>
		<WAITING/>
		<BLOCKED/>
		<RUNNABLE/>
		<NEW/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Thread.State"</e>
			</m>
			<m n=":native"><e>"java.lang.Thread$State"</e></m>
		</meta>
	</enum>
	<class path="java.lang.Thread_UncaughtExceptionHandler" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Thread$UncaughtExceptionHandler.class" module="java.lang.Thread" extern="1" interface="1">
		<uncaughtException public="1" set="method">
			<f a="param1:param2">
				<c path="java.lang.Thread"/>
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</uncaughtException>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Thread$UncaughtExceptionHandler"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Thread.UncaughtExceptionHandler"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Thread_WeakClassKey" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Thread$WeakClassKey.class" module="java.lang.Thread" extern="1">
		<extends path="java.lang.ref.WeakReference"><c path="java.lang.Class"><d/></c></extends>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Thread$WeakClassKey"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Thread.WeakClassKey"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ThreadGroup" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ThreadGroup.class" extern="1">
		<implements path="java.lang.Thread_UncaughtExceptionHandler"/>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<allowThreadSuspension public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</allowThreadSuspension>
		<uncaughtException public="1" set="method">
			<f a="param1:param2">
				<c path="java.lang.Thread"/>
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</uncaughtException>
		<list public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</list>
		<destroy public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</destroy>
		<resume public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
				<m n=":final"/>
			</meta>
		</resume>
		<suspend public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
				<m n=":final"/>
			</meta>
		</suspend>
		<interrupt public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</interrupt>
		<stop public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
				<m n=":final"/>
			</meta>
		</stop>
		<enumerate public="1" set="method">
			<f a="param1:param2">
				<c path="java.NativeArray"><c path="java.lang.ThreadGroup"/></c>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<enumerate public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><c path="java.lang.Thread"/></c>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</enumerate>
				<enumerate public="1" set="method">
					<f a="param1:param2">
						<c path="java.NativeArray"><c path="java.lang.Thread"/></c>
						<x path="Bool"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</enumerate>
				<enumerate public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><c path="java.lang.ThreadGroup"/></c>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</enumerate>
			</overloads>
		</enumerate>
		<activeGroupCount public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</activeGroupCount>
		<activeCount public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</activeCount>
		<checkAccess public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</checkAccess>
		<parentOf public="1" set="method">
			<f a="param1">
				<c path="java.lang.ThreadGroup"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</parentOf>
		<setMaxPriority public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</setMaxPriority>
		<setDaemon public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</setDaemon>
		<isDestroyed public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isDestroyed>
		<isDaemon public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</isDaemon>
		<getMaxPriority public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getMaxPriority>
		<getParent public="1" set="method">
			<f a=""><c path="java.lang.ThreadGroup"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getParent>
		<getName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getName>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.lang.ThreadGroup"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ThreadGroup"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"ThreadGroup"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ThreadLocal_ThreadLocalMap" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ThreadLocal$ThreadLocalMap.class" module="java.lang.ThreadLocal" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.ThreadLocal$ThreadLocalMap"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"ThreadLocal.ThreadLocalMap"</e>
	</m>
</meta></class>
	<class path="java.lang.ThreadLocal_ThreadLocalMap_Entry" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ThreadLocal$ThreadLocalMap$Entry.class" module="java.lang.ThreadLocal" extern="1">
		<extends path="java.lang.ref.WeakReference"><c path="java.lang.ThreadLocal"><d/></c></extends>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ThreadLocal$ThreadLocalMap$Entry"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"ThreadLocal.ThreadLocalMap.Entry"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ThreadLocal_1" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ThreadLocal$1.class" module="java.lang.ThreadLocal" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.ThreadLocal$1"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"ThreadLocal.1"</e>
	</m>
</meta></class>
	<class path="java.lang.Throwable_SentinelHolder" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Throwable$SentinelHolder.class" module="java.lang.Throwable" extern="1">
		<STACK_TRACE_ELEMENT_SENTINEL public="1" static="1">
			<c path="java.lang.StackTraceElement"/>
			<meta><m n=":final"/></meta>
		</STACK_TRACE_ELEMENT_SENTINEL>
		<STACK_TRACE_SENTINEL public="1" static="1">
			<c path="java.NativeArray"><c path="java.lang.StackTraceElement"/></c>
			<meta><m n=":final"/></meta>
		</STACK_TRACE_SENTINEL>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Throwable$SentinelHolder"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Throwable.SentinelHolder"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Throwable_PrintStreamOrWriter" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Throwable$PrintStreamOrWriter.class" module="java.lang.Throwable" extern="1"><meta>
	<m n=":abstract"/>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.Throwable$PrintStreamOrWriter"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"Throwable.PrintStreamOrWriter"</e>
	</m>
</meta></class>
	<class path="java.lang.Throwable_WrappedPrintStream" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Throwable$WrappedPrintStream.class" module="java.lang.Throwable" extern="1">
		<extends path="java.lang.Throwable_PrintStreamOrWriter"/>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Throwable$WrappedPrintStream"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Throwable.WrappedPrintStream"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Throwable_WrappedPrintWriter" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Throwable$WrappedPrintWriter.class" module="java.lang.Throwable" extern="1">
		<extends path="java.lang.Throwable_PrintStreamOrWriter"/>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.Throwable$WrappedPrintWriter"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang"</e>
				<e>"Throwable.WrappedPrintWriter"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.Throwable_1" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/Throwable$1.class" module="java.lang.Throwable" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.Throwable$1"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang"</e>
		<e>"Throwable.1"</e>
	</m>
</meta></class>
	<class path="java.lang.annotation.Annotation" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/annotation/Annotation.class" extern="1" interface="1">
		<annotationType public="1" set="method">
			<f a=""><c path="java.lang.Class"><c path="java.lang.annotation.Annotation"/></c></f>
			<meta><m n=":overload"/></meta>
		</annotationType>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.annotation.Annotation"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.annotation"</e>
				<e>"Annotation"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ref.Reference_Lock" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ref/Reference$Lock.class" module="java.lang.ref.Reference" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.ref.Reference$Lock"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang.ref"</e>
		<e>"Reference.Lock"</e>
	</m>
</meta></class>
	<class path="java.lang.ref.Reference_ReferenceHandler" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ref/Reference$ReferenceHandler.class" module="java.lang.ref.Reference" extern="1">
		<extends path="java.lang.Thread"/>
		<run public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</run>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ref.Reference$ReferenceHandler"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.ref"</e>
				<e>"Reference.ReferenceHandler"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ref.Reference_1" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ref/Reference$1.class" module="java.lang.ref.Reference" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.ref.Reference$1"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang.ref"</e>
		<e>"Reference.1"</e>
	</m>
</meta></class>
	<class path="java.lang.ref.ReferenceQueue" params="T" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ref/ReferenceQueue.class" extern="1">
		<remove public="1" set="method">
			<f a=""><c path="java.lang.ref.Reference"><c path="java.lang.ref.ReferenceQueue.T"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
			</meta>
			<overloads><remove public="1" set="method">
	<f a="param1">
		<x path="haxe.Int64"/>
		<c path="java.lang.ref.Reference"><c path="java.lang.ref.ReferenceQueue.T"/></c>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
		<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
	</meta>
</remove></overloads>
		</remove>
		<poll public="1" set="method">
			<f a=""><c path="java.lang.ref.Reference"><c path="java.lang.ref.ReferenceQueue.T"/></c></f>
			<meta><m n=":overload"/></meta>
		</poll>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ref.ReferenceQueue"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.ref"</e>
				<e>"ReferenceQueue"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ref.ReferenceQueue_Null" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ref/ReferenceQueue$Null.class" module="java.lang.ref.ReferenceQueue" extern="1">
		<extends path="java.lang.ref.ReferenceQueue"><d/></extends>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ref.ReferenceQueue$Null"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.ref"</e>
				<e>"ReferenceQueue.Null"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.ref.ReferenceQueue_Lock" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ref/ReferenceQueue$Lock.class" module="java.lang.ref.ReferenceQueue" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.ref.ReferenceQueue$Lock"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang.ref"</e>
		<e>"ReferenceQueue.Lock"</e>
	</m>
</meta></class>
	<class path="java.lang.ref.ReferenceQueue_1" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ref/ReferenceQueue$1.class" module="java.lang.ref.ReferenceQueue" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.lang.ref.ReferenceQueue$1"</e></m>
	<m n=":javaCanonical">
		<e>"java.lang.ref"</e>
		<e>"ReferenceQueue.1"</e>
	</m>
</meta></class>
	<class path="java.lang.ref.SoftReference" params="T" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/ref/SoftReference.class" extern="1">
		<extends path="java.lang.ref.Reference"><c path="java.lang.ref.SoftReference.T"/></extends>
		<get public="1" set="method" override="1">
			<f a=""><c path="java.lang.ref.SoftReference.T"/></f>
			<meta><m n=":overload"/></meta>
		</get>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.lang.ref.SoftReference.T"/>
				<c path="java.lang.ref.ReferenceQueue"><d/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1">
		<c path="java.lang.ref.SoftReference.T"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.ref.SoftReference"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.ref"</e>
				<e>"SoftReference"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.reflect.AccessibleObject" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/reflect/AccessibleObject.class" extern="1">
		<implements path="java.lang.reflect.AnnotatedElement"/>
		<setAccessible public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="java.NativeArray"><c path="java.lang.reflect.AccessibleObject"/></c>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
			</meta>
		</setAccessible>
		<_setAccessible public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="java.NativeArray"><c path="java.lang.reflect.AccessibleObject"/></c>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":native"><e>"setAccessible"</e></m>
				<m n=":deprecated"><e>"This static field `_setAccessible` is deprecated and will be removed in later versions. Please use `setAccessible` instead"</e></m>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
			</meta>
		</_setAccessible>
		<getDeclaredAnnotations public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f>
			<meta><m n=":overload"/></meta>
		</getDeclaredAnnotations>
		<getAnnotations public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f>
			<meta><m n=":overload"/></meta>
		</getAnnotations>
		<isAnnotationPresent public="1" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="java.lang.annotation.Annotation"/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isAnnotationPresent>
		<getAnnotation public="1" params="T" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="getAnnotation.T"/></c>
				<c path="getAnnotation.T"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getAnnotation>
		<isAccessible public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isAccessible>
		<setAccessible public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
			</meta>
		</setAccessible>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.reflect.AccessibleObject"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.reflect"</e>
				<e>"AccessibleObject"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.reflect.Member" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/reflect/Member.class" extern="1" interface="1">
		<isSynthetic public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isSynthetic>
		<getModifiers public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getModifiers>
		<getName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getName>
		<getDeclaringClass public="1" set="method">
			<f a=""><c path="java.lang.Class"><d/></c></f>
			<meta><m n=":overload"/></meta>
		</getDeclaringClass>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.reflect.Member"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.reflect"</e>
				<e>"Member"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.reflect.Constructor" params="T" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/reflect/Constructor.class" extern="1">
		<extends path="java.lang.reflect.AccessibleObject"/>
		<implements path="java.lang.reflect.Member"/>
		<implements path="java.lang.reflect.GenericDeclaration"/>
		<getParameterAnnotations public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></c></f>
			<meta><m n=":overload"/></meta>
		</getParameterAnnotations>
		<getDeclaredAnnotations public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f>
			<meta><m n=":overload"/></meta>
		</getDeclaredAnnotations>
		<getAnnotation public="1" params="T" set="method" override="1">
			<f a="param1">
				<c path="java.lang.Class"><c path="getAnnotation.T"/></c>
				<c path="getAnnotation.T"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getAnnotation>
		<isSynthetic public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isSynthetic>
		<isVarArgs public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isVarArgs>
		<newInstance public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><d/></c>
				<c path="java.lang.reflect.Constructor.T"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.reflect.InvocationTargetException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.InstantiationException"</e></m>
			</meta>
		</newInstance>
		<toGenericString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toGenericString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<getGenericExceptionTypes public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</getGenericExceptionTypes>
		<getExceptionTypes public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c></f>
			<meta><m n=":overload"/></meta>
		</getExceptionTypes>
		<getGenericParameterTypes public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</getGenericParameterTypes>
		<getParameterTypes public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c></f>
			<meta><m n=":overload"/></meta>
		</getParameterTypes>
		<getTypeParameters public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.reflect.TypeVariable"><c path="java.lang.reflect.Constructor"><c path="java.lang.reflect.Constructor.T"/></c></c></c></f>
			<meta><m n=":overload"/></meta>
		</getTypeParameters>
		<getModifiers public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getModifiers>
		<getName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getName>
		<getDeclaringClass public="1" set="method">
			<f a=""><c path="java.lang.Class"><c path="java.lang.reflect.Constructor.T"/></c></f>
			<meta><m n=":overload"/></meta>
		</getDeclaringClass>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.reflect.Constructor"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.reflect"</e>
				<e>"Constructor"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.reflect.Field" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/reflect/Field.class" extern="1">
		<extends path="java.lang.reflect.AccessibleObject"/>
		<implements path="java.lang.reflect.Member"/>
		<getDeclaredAnnotations public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f>
			<meta><m n=":overload"/></meta>
		</getDeclaredAnnotations>
		<getAnnotation public="1" params="T" set="method" override="1">
			<f a="param1">
				<c path="java.lang.Class"><c path="getAnnotation.T"/></c>
				<c path="getAnnotation.T"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getAnnotation>
		<setDouble public="1" set="method">
			<f a="param1:param2">
				<d/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</setDouble>
		<setFloat public="1" set="method">
			<f a="param1:param2">
				<d/>
				<x path="Single"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</setFloat>
		<setLong public="1" set="method">
			<f a="param1:param2">
				<d/>
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</setLong>
		<setInt public="1" set="method">
			<f a="param1:param2">
				<d/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</setInt>
		<setShort public="1" set="method">
			<f a="param1:param2">
				<d/>
				<t path="java.types.Int16"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</setShort>
		<setChar public="1" set="method">
			<f a="param1:param2">
				<d/>
				<t path="java.types.Char16"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</setChar>
		<setByte public="1" set="method">
			<f a="param1:param2">
				<d/>
				<t path="java.types.Int8"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</setByte>
		<setBoolean public="1" set="method">
			<f a="param1:param2">
				<d/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</setBoolean>
		<set public="1" set="method">
			<f a="param1:param2">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</set>
		<getDouble public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</getDouble>
		<getFloat public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Single"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</getFloat>
		<getLong public="1" set="method">
			<f a="param1">
				<d/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</getLong>
		<getInt public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</getInt>
		<getShort public="1" set="method">
			<f a="param1">
				<d/>
				<t path="java.types.Int16"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</getShort>
		<getChar public="1" set="method">
			<f a="param1">
				<d/>
				<t path="java.types.Char16"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</getChar>
		<getByte public="1" set="method">
			<f a="param1">
				<d/>
				<t path="java.types.Int8"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</getByte>
		<getBoolean public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</getBoolean>
		<get public="1" set="method">
			<f a="param1">
				<d/>
				<d/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</get>
		<toGenericString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toGenericString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<getGenericType public="1" set="method">
			<f a=""><c path="java.lang.reflect.Type"/></f>
			<meta><m n=":overload"/></meta>
		</getGenericType>
		<getType public="1" set="method">
			<f a=""><c path="java.lang.Class"><d/></c></f>
			<meta><m n=":overload"/></meta>
		</getType>
		<isSynthetic public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isSynthetic>
		<isEnumConstant public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isEnumConstant>
		<getModifiers public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getModifiers>
		<getName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getName>
		<getDeclaringClass public="1" set="method">
			<f a=""><c path="java.lang.Class"><d/></c></f>
			<meta><m n=":overload"/></meta>
		</getDeclaringClass>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.reflect.Field"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.reflect"</e>
				<e>"Field"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.reflect.InvocationTargetException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/reflect/InvocationTargetException.class" extern="1">
		<extends path="java.lang.ReflectiveOperationException"/>
		<getCause public="1" set="method" override="1">
			<f a=""><c path="java.lang.Throwable"/></f>
			<meta><m n=":overload"/></meta>
		</getCause>
		<getTargetException public="1" set="method">
			<f a=""><c path="java.lang.Throwable"/></f>
			<meta><m n=":overload"/></meta>
		</getTargetException>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.lang.Throwable"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.reflect.InvocationTargetException"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.reflect"</e>
				<e>"InvocationTargetException"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.reflect.Member_Statics" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/reflect/Member.class" module="java.lang.reflect.Member" extern="1">
		<PUBLIC public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</PUBLIC>
		<DECLARED public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</DECLARED>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.reflect.Member"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.reflect"</e>
				<e>"Member"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.reflect.Method" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/reflect/Method.class" extern="1">
		<extends path="java.lang.reflect.AccessibleObject"/>
		<implements path="java.lang.reflect.GenericDeclaration"/>
		<implements path="java.lang.reflect.Member"/>
		<getParameterAnnotations public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></c></f>
			<meta><m n=":overload"/></meta>
		</getParameterAnnotations>
		<getDefaultValue public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</getDefaultValue>
		<getDeclaredAnnotations public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><c path="java.lang.annotation.Annotation"/></c></f>
			<meta><m n=":overload"/></meta>
		</getDeclaredAnnotations>
		<getAnnotation public="1" params="T" set="method" override="1">
			<f a="param1">
				<c path="java.lang.Class"><c path="getAnnotation.T"/></c>
				<c path="getAnnotation.T"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getAnnotation>
		<isSynthetic public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isSynthetic>
		<isVarArgs public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isVarArgs>
		<isBridge public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isBridge>
		<invoke public="1" set="method">
			<f a="param1:param2">
				<d/>
				<c path="java.NativeArray"><d/></c>
				<d/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.reflect.InvocationTargetException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
			</meta>
		</invoke>
		<toGenericString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toGenericString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<getGenericExceptionTypes public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</getGenericExceptionTypes>
		<getExceptionTypes public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c></f>
			<meta><m n=":overload"/></meta>
		</getExceptionTypes>
		<getGenericParameterTypes public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</getGenericParameterTypes>
		<getParameterTypes public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c></f>
			<meta><m n=":overload"/></meta>
		</getParameterTypes>
		<getGenericReturnType public="1" set="method">
			<f a=""><c path="java.lang.reflect.Type"/></f>
			<meta><m n=":overload"/></meta>
		</getGenericReturnType>
		<getReturnType public="1" set="method">
			<f a=""><c path="java.lang.Class"><d/></c></f>
			<meta><m n=":overload"/></meta>
		</getReturnType>
		<getTypeParameters public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.reflect.TypeVariable"><c path="java.lang.reflect.Method"/></c></c></f>
			<meta><m n=":overload"/></meta>
		</getTypeParameters>
		<getModifiers public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getModifiers>
		<getName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getName>
		<getDeclaringClass public="1" set="method">
			<f a=""><c path="java.lang.Class"><d/></c></f>
			<meta><m n=":overload"/></meta>
		</getDeclaringClass>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.reflect.Method"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.reflect"</e>
				<e>"Method"</e>
			</m>
		</meta>
	</class>
	<class path="java.lang.reflect.TypeVariable" params="D" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/lang/reflect/TypeVariable.class" extern="1" interface="1">
		<extends path="java.lang.reflect.Type"/>
		<getName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getName>
		<getGenericDeclaration public="1" set="method">
			<f a=""><c path="java.lang.reflect.TypeVariable.D"/></f>
			<meta><m n=":overload"/></meta>
		</getGenericDeclaration>
		<getBounds public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.lang.reflect.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</getBounds>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.lang.reflect.TypeVariable"</e></m>
			<m n=":javaCanonical">
				<e>"java.lang.reflect"</e>
				<e>"TypeVariable"</e>
			</m>
		</meta>
	</class>
	<class path="java.math.BigDecimal" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/math/BigDecimal.class" extern="1">
		<extends path="java.lang.Number"/>
		<implements path="java.lang.Comparable"><c path="java.math.BigDecimal"/></implements>
		<valueOf public="1" set="method" static="1">
			<f a="param1">
				<x path="Float"/>
				<c path="java.math.BigDecimal"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<valueOf public="1" set="method">
					<f a="param1:param2">
						<x path="haxe.Int64"/>
						<x path="Int"/>
						<c path="java.math.BigDecimal"/>
					</f>
					<meta><m n=":overload"/></meta>
				</valueOf>
				<valueOf public="1" set="method">
					<f a="param1">
						<x path="haxe.Int64"/>
						<c path="java.math.BigDecimal"/>
					</f>
					<meta><m n=":overload"/></meta>
				</valueOf>
			</overloads>
		</valueOf>
		<ZERO public="1" static="1">
			<c path="java.math.BigDecimal"/>
			<meta><m n=":final"/></meta>
		</ZERO>
		<ONE public="1" static="1">
			<c path="java.math.BigDecimal"/>
			<meta><m n=":final"/></meta>
		</ONE>
		<TEN public="1" static="1">
			<c path="java.math.BigDecimal"/>
			<meta><m n=":final"/></meta>
		</TEN>
		<ROUND_UP public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</ROUND_UP>
		<ROUND_DOWN public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</ROUND_DOWN>
		<ROUND_CEILING public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</ROUND_CEILING>
		<ROUND_FLOOR public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</ROUND_FLOOR>
		<ROUND_HALF_UP public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</ROUND_HALF_UP>
		<ROUND_HALF_DOWN public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</ROUND_HALF_DOWN>
		<ROUND_HALF_EVEN public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</ROUND_HALF_EVEN>
		<ROUND_UNNECESSARY public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</ROUND_UNNECESSARY>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<c path="java.math.BigDecimal"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<ulp public="1" set="method">
			<f a=""><c path="java.math.BigDecimal"/></f>
			<meta><m n=":overload"/></meta>
		</ulp>
		<doubleValue public="1" set="method" override="1">
			<f a=""><x path="Float"/></f>
			<meta><m n=":overload"/></meta>
		</doubleValue>
		<floatValue public="1" set="method" override="1">
			<f a=""><x path="Single"/></f>
			<meta><m n=":overload"/></meta>
		</floatValue>
		<byteValueExact public="1" set="method">
			<f a=""><t path="java.types.Int8"/></f>
			<meta><m n=":overload"/></meta>
		</byteValueExact>
		<shortValueExact public="1" set="method">
			<f a=""><t path="java.types.Int16"/></f>
			<meta><m n=":overload"/></meta>
		</shortValueExact>
		<intValueExact public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</intValueExact>
		<intValue public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</intValue>
		<longValueExact public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</longValueExact>
		<longValue public="1" set="method" override="1">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</longValue>
		<toBigIntegerExact public="1" set="method">
			<f a=""><c path="java.math.BigInteger"/></f>
			<meta><m n=":overload"/></meta>
		</toBigIntegerExact>
		<toBigInteger public="1" set="method">
			<f a=""><c path="java.math.BigInteger"/></f>
			<meta><m n=":overload"/></meta>
		</toBigInteger>
		<toPlainString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toPlainString>
		<toEngineeringString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toEngineeringString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<max public="1" set="method">
			<f a="param1">
				<c path="java.math.BigDecimal"/>
				<c path="java.math.BigDecimal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</max>
		<min public="1" set="method">
			<f a="param1">
				<c path="java.math.BigDecimal"/>
				<c path="java.math.BigDecimal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</min>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<stripTrailingZeros public="1" set="method">
			<f a=""><c path="java.math.BigDecimal"/></f>
			<meta><m n=":overload"/></meta>
		</stripTrailingZeros>
		<scaleByPowerOfTen public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.math.BigDecimal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</scaleByPowerOfTen>
		<movePointRight public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.math.BigDecimal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</movePointRight>
		<movePointLeft public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.math.BigDecimal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</movePointLeft>
		<setScale public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.math.BigDecimal"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<setScale public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<e path="java.math.RoundingMode"/>
						<c path="java.math.BigDecimal"/>
					</f>
					<meta><m n=":overload"/></meta>
				</setScale>
				<setScale public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.math.BigDecimal"/>
					</f>
					<meta><m n=":overload"/></meta>
				</setScale>
			</overloads>
		</setScale>
		<round public="1" set="method">
			<f a="param1">
				<c path="java.math.MathContext"/>
				<c path="java.math.BigDecimal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</round>
		<unscaledValue public="1" set="method">
			<f a=""><c path="java.math.BigInteger"/></f>
			<meta><m n=":overload"/></meta>
		</unscaledValue>
		<precision public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</precision>
		<scale public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</scale>
		<signum public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</signum>
		<plus public="1" set="method">
			<f a="param1">
				<c path="java.math.MathContext"/>
				<c path="java.math.BigDecimal"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><plus public="1" set="method">
	<f a=""><c path="java.math.BigDecimal"/></f>
	<meta><m n=":overload"/></meta>
</plus></overloads>
		</plus>
		<negate public="1" set="method">
			<f a="param1">
				<c path="java.math.MathContext"/>
				<c path="java.math.BigDecimal"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><negate public="1" set="method">
	<f a=""><c path="java.math.BigDecimal"/></f>
	<meta><m n=":overload"/></meta>
</negate></overloads>
		</negate>
		<abs public="1" set="method">
			<f a="param1">
				<c path="java.math.MathContext"/>
				<c path="java.math.BigDecimal"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><abs public="1" set="method">
	<f a=""><c path="java.math.BigDecimal"/></f>
	<meta><m n=":overload"/></meta>
</abs></overloads>
		</abs>
		<pow public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<c path="java.math.MathContext"/>
				<c path="java.math.BigDecimal"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><pow public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.math.BigDecimal"/>
	</f>
	<meta><m n=":overload"/></meta>
</pow></overloads>
		</pow>
		<divideAndRemainder public="1" set="method">
			<f a="param1:param2">
				<c path="java.math.BigDecimal"/>
				<c path="java.math.MathContext"/>
				<c path="java.NativeArray"><c path="java.math.BigDecimal"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><divideAndRemainder public="1" set="method">
	<f a="param1">
		<c path="java.math.BigDecimal"/>
		<c path="java.NativeArray"><c path="java.math.BigDecimal"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</divideAndRemainder></overloads>
		</divideAndRemainder>
		<remainder public="1" set="method">
			<f a="param1:param2">
				<c path="java.math.BigDecimal"/>
				<c path="java.math.MathContext"/>
				<c path="java.math.BigDecimal"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><remainder public="1" set="method">
	<f a="param1">
		<c path="java.math.BigDecimal"/>
		<c path="java.math.BigDecimal"/>
	</f>
	<meta><m n=":overload"/></meta>
</remainder></overloads>
		</remainder>
		<divideToIntegralValue public="1" set="method">
			<f a="param1:param2">
				<c path="java.math.BigDecimal"/>
				<c path="java.math.MathContext"/>
				<c path="java.math.BigDecimal"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><divideToIntegralValue public="1" set="method">
	<f a="param1">
		<c path="java.math.BigDecimal"/>
		<c path="java.math.BigDecimal"/>
	</f>
	<meta><m n=":overload"/></meta>
</divideToIntegralValue></overloads>
		</divideToIntegralValue>
		<divide public="1" set="method">
			<f a="param1:param2">
				<c path="java.math.BigDecimal"/>
				<c path="java.math.MathContext"/>
				<c path="java.math.BigDecimal"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<divide public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.math.BigDecimal"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.math.BigDecimal"/>
					</f>
					<meta><m n=":overload"/></meta>
				</divide>
				<divide public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.math.BigDecimal"/>
						<x path="Int"/>
						<e path="java.math.RoundingMode"/>
						<c path="java.math.BigDecimal"/>
					</f>
					<meta><m n=":overload"/></meta>
				</divide>
				<divide public="1" set="method">
					<f a="param1:param2">
						<c path="java.math.BigDecimal"/>
						<x path="Int"/>
						<c path="java.math.BigDecimal"/>
					</f>
					<meta><m n=":overload"/></meta>
				</divide>
				<divide public="1" set="method">
					<f a="param1:param2">
						<c path="java.math.BigDecimal"/>
						<e path="java.math.RoundingMode"/>
						<c path="java.math.BigDecimal"/>
					</f>
					<meta><m n=":overload"/></meta>
				</divide>
				<divide public="1" set="method">
					<f a="param1">
						<c path="java.math.BigDecimal"/>
						<c path="java.math.BigDecimal"/>
					</f>
					<meta><m n=":overload"/></meta>
				</divide>
			</overloads>
		</divide>
		<multiply public="1" set="method">
			<f a="param1:param2">
				<c path="java.math.BigDecimal"/>
				<c path="java.math.MathContext"/>
				<c path="java.math.BigDecimal"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><multiply public="1" set="method">
	<f a="param1">
		<c path="java.math.BigDecimal"/>
		<c path="java.math.BigDecimal"/>
	</f>
	<meta><m n=":overload"/></meta>
</multiply></overloads>
		</multiply>
		<subtract public="1" set="method">
			<f a="param1:param2">
				<c path="java.math.BigDecimal"/>
				<c path="java.math.MathContext"/>
				<c path="java.math.BigDecimal"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><subtract public="1" set="method">
	<f a="param1">
		<c path="java.math.BigDecimal"/>
		<c path="java.math.BigDecimal"/>
	</f>
	<meta><m n=":overload"/></meta>
</subtract></overloads>
		</subtract>
		<add public="1" set="method">
			<f a="param1:param2">
				<c path="java.math.BigDecimal"/>
				<c path="java.math.MathContext"/>
				<c path="java.math.BigDecimal"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><add public="1" set="method">
	<f a="param1">
		<c path="java.math.BigDecimal"/>
		<c path="java.math.BigDecimal"/>
	</f>
	<meta><m n=":overload"/></meta>
</add></overloads>
		</add>
		<new public="1" set="method">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<c path="java.math.MathContext"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3:param4">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.math.MathContext"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<c path="java.math.MathContext"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.math.MathContext"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<x path="Float"/>
						<c path="java.math.MathContext"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="java.math.BigInteger"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="java.math.BigInteger"/>
						<c path="java.math.MathContext"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="java.math.BigInteger"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.math.BigInteger"/>
						<x path="Int"/>
						<c path="java.math.MathContext"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.math.MathContext"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.math.BigDecimal"</e></m>
			<m n=":javaCanonical">
				<e>"java.math"</e>
				<e>"BigDecimal"</e>
			</m>
		</meta>
	</class>
	<class path="java.math.BigDecimal_LongOverflow" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/math/BigDecimal$LongOverflow.class" module="java.math.BigDecimal" extern="1">
		<check public="1" set="method" static="1">
			<f a="param1">
				<c path="java.math.BigDecimal"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</check>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.math.BigDecimal$LongOverflow"</e></m>
			<m n=":javaCanonical">
				<e>"java.math"</e>
				<e>"BigDecimal.LongOverflow"</e>
			</m>
		</meta>
	</class>
	<class path="java.math.BigDecimal_StringBuilderHelper" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/math/BigDecimal$StringBuilderHelper.class" module="java.math.BigDecimal" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.math.BigDecimal$StringBuilderHelper"</e></m>
	<m n=":javaCanonical">
		<e>"java.math"</e>
		<e>"BigDecimal.StringBuilderHelper"</e>
	</m>
</meta></class>
	<class path="java.math.BigInteger" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/math/BigInteger.class" extern="1">
		<extends path="java.lang.Number"/>
		<implements path="java.lang.Comparable"><c path="java.math.BigInteger"/></implements>
		<valueOf public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="java.math.BigInteger"/>
			</f>
			<meta><m n=":overload"/></meta>
		</valueOf>
		<probablePrime public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="Int"/>
				<c path="java.util.Random"/>
				<c path="java.math.BigInteger"/>
			</f>
			<meta><m n=":overload"/></meta>
		</probablePrime>
		<ZERO public="1" static="1">
			<c path="java.math.BigInteger"/>
			<meta><m n=":final"/></meta>
		</ZERO>
		<ONE public="1" static="1">
			<c path="java.math.BigInteger"/>
			<meta><m n=":final"/></meta>
		</ONE>
		<TEN public="1" static="1">
			<c path="java.math.BigInteger"/>
			<meta><m n=":final"/></meta>
		</TEN>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<c path="java.math.BigInteger"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<doubleValue public="1" set="method" override="1">
			<f a=""><x path="Float"/></f>
			<meta><m n=":overload"/></meta>
		</doubleValue>
		<floatValue public="1" set="method" override="1">
			<f a=""><x path="Single"/></f>
			<meta><m n=":overload"/></meta>
		</floatValue>
		<longValue public="1" set="method" override="1">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</longValue>
		<intValue public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</intValue>
		<toByteArray public="1" set="method">
			<f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f>
			<meta><m n=":overload"/></meta>
		</toByteArray>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><toString public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</toString></overloads>
		</toString>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<max public="1" set="method">
			<f a="param1">
				<c path="java.math.BigInteger"/>
				<c path="java.math.BigInteger"/>
			</f>
			<meta><m n=":overload"/></meta>
		</max>
		<min public="1" set="method">
			<f a="param1">
				<c path="java.math.BigInteger"/>
				<c path="java.math.BigInteger"/>
			</f>
			<meta><m n=":overload"/></meta>
		</min>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<isProbablePrime public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isProbablePrime>
		<bitCount public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</bitCount>
		<bitLength public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</bitLength>
		<getLowestSetBit public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getLowestSetBit>
		<flipBit public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.math.BigInteger"/>
			</f>
			<meta><m n=":overload"/></meta>
		</flipBit>
		<clearBit public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.math.BigInteger"/>
			</f>
			<meta><m n=":overload"/></meta>
		</clearBit>
		<setBit public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.math.BigInteger"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setBit>
		<testBit public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</testBit>
		<andNot public="1" set="method">
			<f a="param1">
				<c path="java.math.BigInteger"/>
				<c path="java.math.BigInteger"/>
			</f>
			<meta><m n=":overload"/></meta>
		</andNot>
		<not public="1" set="method">
			<f a=""><c path="java.math.BigInteger"/></f>
			<meta><m n=":overload"/></meta>
		</not>
		<xor public="1" set="method">
			<f a="param1">
				<c path="java.math.BigInteger"/>
				<c path="java.math.BigInteger"/>
			</f>
			<meta><m n=":overload"/></meta>
		</xor>
		<or public="1" set="method">
			<f a="param1">
				<c path="java.math.BigInteger"/>
				<c path="java.math.BigInteger"/>
			</f>
			<meta><m n=":overload"/></meta>
		</or>
		<and public="1" set="method">
			<f a="param1">
				<c path="java.math.BigInteger"/>
				<c path="java.math.BigInteger"/>
			</f>
			<meta><m n=":overload"/></meta>
		</and>
		<shiftRight public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.math.BigInteger"/>
			</f>
			<meta><m n=":overload"/></meta>
		</shiftRight>
		<shiftLeft public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.math.BigInteger"/>
			</f>
			<meta><m n=":overload"/></meta>
		</shiftLeft>
		<modInverse public="1" set="method">
			<f a="param1">
				<c path="java.math.BigInteger"/>
				<c path="java.math.BigInteger"/>
			</f>
			<meta><m n=":overload"/></meta>
		</modInverse>
		<modPow public="1" set="method">
			<f a="param1:param2">
				<c path="java.math.BigInteger"/>
				<c path="java.math.BigInteger"/>
				<c path="java.math.BigInteger"/>
			</f>
			<meta><m n=":overload"/></meta>
		</modPow>
		<mod public="1" set="method">
			<f a="param1">
				<c path="java.math.BigInteger"/>
				<c path="java.math.BigInteger"/>
			</f>
			<meta><m n=":overload"/></meta>
		</mod>
		<signum public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</signum>
		<negate public="1" set="method">
			<f a=""><c path="java.math.BigInteger"/></f>
			<meta><m n=":overload"/></meta>
		</negate>
		<abs public="1" set="method">
			<f a=""><c path="java.math.BigInteger"/></f>
			<meta><m n=":overload"/></meta>
		</abs>
		<gcd public="1" set="method">
			<f a="param1">
				<c path="java.math.BigInteger"/>
				<c path="java.math.BigInteger"/>
			</f>
			<meta><m n=":overload"/></meta>
		</gcd>
		<pow public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.math.BigInteger"/>
			</f>
			<meta><m n=":overload"/></meta>
		</pow>
		<remainder public="1" set="method">
			<f a="param1">
				<c path="java.math.BigInteger"/>
				<c path="java.math.BigInteger"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remainder>
		<divideAndRemainder public="1" set="method">
			<f a="param1">
				<c path="java.math.BigInteger"/>
				<c path="java.NativeArray"><c path="java.math.BigInteger"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</divideAndRemainder>
		<divide public="1" set="method">
			<f a="param1">
				<c path="java.math.BigInteger"/>
				<c path="java.math.BigInteger"/>
			</f>
			<meta><m n=":overload"/></meta>
		</divide>
		<multiply public="1" set="method">
			<f a="param1">
				<c path="java.math.BigInteger"/>
				<c path="java.math.BigInteger"/>
			</f>
			<meta><m n=":overload"/></meta>
		</multiply>
		<subtract public="1" set="method">
			<f a="param1">
				<c path="java.math.BigInteger"/>
				<c path="java.math.BigInteger"/>
			</f>
			<meta><m n=":overload"/></meta>
		</subtract>
		<add public="1" set="method">
			<f a="param1">
				<c path="java.math.BigInteger"/>
				<c path="java.math.BigInteger"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add>
		<nextProbablePrime public="1" set="method">
			<f a=""><c path="java.math.BigInteger"/></f>
			<meta><m n=":overload"/></meta>
		</nextProbablePrime>
		<new public="1" set="method">
			<f a="param1:param2:param3">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.util.Random"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Int8"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.NativeArray"><t path="java.types.Int8"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.util.Random"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.math.BigInteger"</e></m>
			<m n=":javaCanonical">
				<e>"java.math"</e>
				<e>"BigInteger"</e>
			</m>
		</meta>
	</class>
	<class path="java.math.MathContext" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/math/MathContext.class" extern="1">
		<implements path="java.io.Serializable"/>
		<UNLIMITED public="1" static="1">
			<c path="java.math.MathContext"/>
			<meta><m n=":final"/></meta>
		</UNLIMITED>
		<DECIMAL32 public="1" static="1">
			<c path="java.math.MathContext"/>
			<meta><m n=":final"/></meta>
		</DECIMAL32>
		<DECIMAL64 public="1" static="1">
			<c path="java.math.MathContext"/>
			<meta><m n=":final"/></meta>
		</DECIMAL64>
		<DECIMAL128 public="1" static="1">
			<c path="java.math.MathContext"/>
			<meta><m n=":final"/></meta>
		</DECIMAL128>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<getRoundingMode public="1" set="method">
			<f a=""><e path="java.math.RoundingMode"/></f>
			<meta><m n=":overload"/></meta>
		</getRoundingMode>
		<getPrecision public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getPrecision>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<e path="java.math.RoundingMode"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.math.MathContext"</e></m>
			<m n=":javaCanonical">
				<e>"java.math"</e>
				<e>"MathContext"</e>
			</m>
		</meta>
	</class>
	<enum path="java.math.RoundingMode" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/math/RoundingMode.class">
		<UNNECESSARY/>
		<HALF_EVEN/>
		<HALF_DOWN/>
		<HALF_UP/>
		<FLOOR/>
		<CEILING/>
		<DOWN/>
		<UP/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":javaCanonical">
				<e>"java.math"</e>
				<e>"RoundingMode"</e>
			</m>
			<m n=":native"><e>"java.math.RoundingMode"</e></m>
		</meta>
	</enum>
	<class path="java.net.ContentHandler" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/ContentHandler.class" extern="1">
		<getContent public="1" set="method">
			<f a="param1:param2">
				<c path="java.net.URLConnection"/>
				<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
				<d/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><getContent public="1" set="method">
	<f a="param1">
		<c path="java.net.URLConnection"/>
		<d/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</getContent></overloads>
		</getContent>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.ContentHandler"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"ContentHandler"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.ContentHandlerFactory" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/ContentHandlerFactory.class" extern="1" interface="1">
		<createContentHandler public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.net.ContentHandler"/>
			</f>
			<meta><m n=":overload"/></meta>
		</createContentHandler>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.ContentHandlerFactory"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"ContentHandlerFactory"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.DatagramPacket" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/DatagramPacket.class" extern="1">
		<setLength public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setLength>
		<setData public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><setData public="1" set="method">
	<f a="param1:param2:param3">
		<c path="java.NativeArray"><t path="java.types.Int8"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</setData></overloads>
		</setData>
		<getSocketAddress public="1" set="method">
			<f a=""><c path="java.net.SocketAddress"/></f>
			<meta><m n=":overload"/></meta>
		</getSocketAddress>
		<setSocketAddress public="1" set="method">
			<f a="param1">
				<c path="java.net.SocketAddress"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setSocketAddress>
		<setPort public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setPort>
		<setAddress public="1" set="method">
			<f a="param1">
				<c path="java.net.InetAddress"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setAddress>
		<getLength public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getLength>
		<getOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getOffset>
		<getData public="1" set="method">
			<f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f>
			<meta><m n=":overload"/></meta>
		</getData>
		<getPort public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getPort>
		<getAddress public="1" set="method">
			<f a=""><c path="java.net.InetAddress"/></f>
			<meta><m n=":overload"/></meta>
		</getAddress>
		<new public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Int"/>
				<c path="java.net.SocketAddress"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
			<overloads>
				<new public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Int8"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="java.NativeArray"><t path="java.types.Int8"/></c>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3:param4:param5">
						<c path="java.NativeArray"><t path="java.types.Int8"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.net.InetAddress"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3:param4">
						<c path="java.NativeArray"><t path="java.types.Int8"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.net.SocketAddress"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.net.SocketException"</e></m>
					</meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3:param4">
						<c path="java.NativeArray"><t path="java.types.Int8"/></c>
						<x path="Int"/>
						<c path="java.net.InetAddress"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.DatagramPacket"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"DatagramPacket"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.DatagramSocket" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/DatagramSocket.class" extern="1">
		<implements path="java.io.Closeable"/>
		<setDatagramSocketImplFactory public="1" set="method" static="1">
			<f a="param1">
				<c path="java.net.DatagramSocketImplFactory"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</setDatagramSocketImplFactory>
		<getChannel public="1" set="method">
			<f a=""><c path="java.nio.channels.DatagramChannel"/></f>
			<meta><m n=":overload"/></meta>
		</getChannel>
		<isClosed public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isClosed>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</close>
		<getTrafficClass public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</getTrafficClass>
		<setTrafficClass public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</setTrafficClass>
		<getBroadcast public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</getBroadcast>
		<setBroadcast public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</setBroadcast>
		<getReuseAddress public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</getReuseAddress>
		<setReuseAddress public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</setReuseAddress>
		<getReceiveBufferSize public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</getReceiveBufferSize>
		<setReceiveBufferSize public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</setReceiveBufferSize>
		<getSendBufferSize public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</getSendBufferSize>
		<setSendBufferSize public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</setSendBufferSize>
		<getSoTimeout public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</getSoTimeout>
		<setSoTimeout public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</setSoTimeout>
		<getLocalPort public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getLocalPort>
		<getLocalAddress public="1" set="method">
			<f a=""><c path="java.net.InetAddress"/></f>
			<meta><m n=":overload"/></meta>
		</getLocalAddress>
		<receive public="1" set="method">
			<f a="param1">
				<c path="java.net.DatagramPacket"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</receive>
		<send public="1" set="method">
			<f a="param1">
				<c path="java.net.DatagramPacket"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</send>
		<getLocalSocketAddress public="1" set="method">
			<f a=""><c path="java.net.SocketAddress"/></f>
			<meta><m n=":overload"/></meta>
		</getLocalSocketAddress>
		<getRemoteSocketAddress public="1" set="method">
			<f a=""><c path="java.net.SocketAddress"/></f>
			<meta><m n=":overload"/></meta>
		</getRemoteSocketAddress>
		<getPort public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getPort>
		<getInetAddress public="1" set="method">
			<f a=""><c path="java.net.InetAddress"/></f>
			<meta><m n=":overload"/></meta>
		</getInetAddress>
		<isConnected public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isConnected>
		<isBound public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isBound>
		<disconnect public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</disconnect>
		<connect public="1" set="method">
			<f a="param1">
				<c path="java.net.SocketAddress"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
			<overloads><connect public="1" set="method">
	<f a="param1:param2">
		<c path="java.net.InetAddress"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</connect></overloads>
		</connect>
		<bind public="1" set="method">
			<f a="param1">
				<c path="java.net.SocketAddress"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</bind>
		<new public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<c path="java.net.InetAddress"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.net.SocketException"</e></m>
					</meta>
				</new>
				<new set="method">
					<f a="param1">
						<c path="java.net.DatagramSocketImpl"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="java.net.SocketAddress"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.net.SocketException"</e></m>
					</meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.net.SocketException"</e></m>
					</meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.DatagramSocket"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"DatagramSocket"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.SocketOptions" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/SocketOptions.class" extern="1" interface="1">
		<getOption public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<d/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</getOption>
		<setOption public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</setOption>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.SocketOptions"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"SocketOptions"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.DatagramSocketImpl" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/DatagramSocketImpl.class" extern="1">
		<implements path="java.net.SocketOptions"/>
		<getFileDescriptor set="method">
			<f a=""><c path="java.io.FileDescriptor"/></f>
			<meta><m n=":overload"/></meta>
		</getFileDescriptor>
		<getLocalPort set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getLocalPort>
		<close set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</close>
		<leaveGroup set="method">
			<f a="param1:param2">
				<c path="java.net.SocketAddress"/>
				<c path="java.net.NetworkInterface"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</leaveGroup>
		<joinGroup set="method">
			<f a="param1:param2">
				<c path="java.net.SocketAddress"/>
				<c path="java.net.NetworkInterface"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</joinGroup>
		<leave set="method">
			<f a="param1">
				<c path="java.net.InetAddress"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</leave>
		<join set="method">
			<f a="param1">
				<c path="java.net.InetAddress"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</join>
		<getTimeToLive set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getTimeToLive>
		<setTimeToLive set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</setTimeToLive>
		<getTTL set="method">
			<f a=""><t path="java.types.Int8"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":deprecated"/>
			</meta>
		</getTTL>
		<setTTL set="method">
			<f a="param1">
				<t path="java.types.Int8"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":deprecated"/>
			</meta>
		</setTTL>
		<receive set="method">
			<f a="param1">
				<c path="java.net.DatagramPacket"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</receive>
		<peekData set="method">
			<f a="param1">
				<c path="java.net.DatagramPacket"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</peekData>
		<peek set="method">
			<f a="param1">
				<c path="java.net.InetAddress"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</peek>
		<disconnect set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</disconnect>
		<connect set="method">
			<f a="param1:param2">
				<c path="java.net.InetAddress"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</connect>
		<send set="method">
			<f a="param1">
				<c path="java.net.DatagramPacket"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</send>
		<bind set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<c path="java.net.InetAddress"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</bind>
		<create set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</create>
		<setOption public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</setOption>
		<getOption public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<d/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</getOption>
		<localPort><x path="Int"/></localPort>
		<fd><c path="java.io.FileDescriptor"/></fd>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.DatagramSocketImpl"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"DatagramSocketImpl"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.DatagramSocketImplFactory" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/DatagramSocketImplFactory.class" extern="1" interface="1">
		<createDatagramSocketImpl public="1" set="method">
			<f a=""><c path="java.net.DatagramSocketImpl"/></f>
			<meta><m n=":overload"/></meta>
		</createDatagramSocketImpl>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.DatagramSocketImplFactory"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"DatagramSocketImplFactory"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.FileNameMap" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/FileNameMap.class" extern="1" interface="1">
		<getContentTypeFor public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getContentTypeFor>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.FileNameMap"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"FileNameMap"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.InetAddress" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/InetAddress.class" extern="1">
		<implements path="java.io.Serializable"/>
		<getLocalHost public="1" set="method" static="1">
			<f a=""><c path="java.net.InetAddress"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.UnknownHostException"</e></m>
			</meta>
		</getLocalHost>
		<getByAddress public="1" set="method" static="1">
			<f a="param1">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<c path="java.net.InetAddress"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.UnknownHostException"</e></m>
			</meta>
			<overloads><getByAddress public="1" set="method">
	<f a="param1:param2">
		<c path="String"/>
		<c path="java.NativeArray"><t path="java.types.Int8"/></c>
		<c path="java.net.InetAddress"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.net.UnknownHostException"</e></m>
	</meta>
</getByAddress></overloads>
		</getByAddress>
		<getLoopbackAddress public="1" set="method" static="1">
			<f a=""><c path="java.net.InetAddress"/></f>
			<meta><m n=":overload"/></meta>
		</getLoopbackAddress>
		<getAllByName public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.NativeArray"><c path="java.net.InetAddress"/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.UnknownHostException"</e></m>
			</meta>
		</getAllByName>
		<getByName public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.net.InetAddress"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.UnknownHostException"</e></m>
			</meta>
		</getByName>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<getHostAddress public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getHostAddress>
		<getAddress public="1" set="method">
			<f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f>
			<meta><m n=":overload"/></meta>
		</getAddress>
		<getCanonicalHostName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getCanonicalHostName>
		<getHostName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getHostName>
		<isReachable public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.net.NetworkInterface"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><isReachable public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</isReachable></overloads>
		</isReachable>
		<isMCOrgLocal public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isMCOrgLocal>
		<isMCSiteLocal public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isMCSiteLocal>
		<isMCLinkLocal public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isMCLinkLocal>
		<isMCNodeLocal public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isMCNodeLocal>
		<isMCGlobal public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isMCGlobal>
		<isSiteLocalAddress public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isSiteLocalAddress>
		<isLinkLocalAddress public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isLinkLocalAddress>
		<isLoopbackAddress public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isLoopbackAddress>
		<isAnyLocalAddress public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isAnyLocalAddress>
		<isMulticastAddress public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isMulticastAddress>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.InetAddress"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"InetAddress"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.InetAddress_CacheEntry" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/InetAddress$CacheEntry.class" module="java.net.InetAddress" extern="1"><meta>
	<m n=":final"/>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.net.InetAddress$CacheEntry"</e></m>
	<m n=":javaCanonical">
		<e>"java.net"</e>
		<e>"InetAddress.CacheEntry"</e>
	</m>
</meta></class>
	<class path="java.net.InetAddress_Cache" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/InetAddress$Cache.class" module="java.net.InetAddress" extern="1">
		<get public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.net.InetAddress_CacheEntry"/>
			</f>
			<meta><m n=":overload"/></meta>
		</get>
		<put public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.NativeArray"><c path="java.net.InetAddress"/></c>
				<c path="java.net.InetAddress_Cache"/>
			</f>
			<meta><m n=":overload"/></meta>
		</put>
		<new public="1" set="method">
			<f a="param1">
				<e path="java.net.InetAddress_Cache_Type"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.InetAddress$Cache"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"InetAddress.Cache"</e>
			</m>
		</meta>
	</class>
	<enum path="java.net.InetAddress_Cache_Type" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/InetAddress$Cache$Type.class" module="java.net.InetAddress">
		<Negative/>
		<Positive/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"InetAddress.Cache.Type"</e>
			</m>
			<m n=":native"><e>"java.net.InetAddress$Cache$Type"</e></m>
		</meta>
	</enum>
	<class path="java.net.SocketAddress" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/SocketAddress.class" extern="1">
		<implements path="java.io.Serializable"/>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.SocketAddress"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"SocketAddress"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.InetSocketAddress" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/InetSocketAddress.class" extern="1">
		<extends path="java.net.SocketAddress"/>
		<createUnresolved public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<c path="java.net.InetSocketAddress"/>
			</f>
			<meta><m n=":overload"/></meta>
		</createUnresolved>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</equals>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<isUnresolved public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</isUnresolved>
		<getHostString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getHostString>
		<getHostName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getHostName>
		<getAddress public="1" set="method">
			<f a=""><c path="java.net.InetAddress"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getAddress>
		<getPort public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getPort>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="java.net.InetAddress"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.InetSocketAddress"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"InetSocketAddress"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.InetSocketAddress_InetSocketAddressHolder" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/InetSocketAddress$InetSocketAddressHolder.class" module="java.net.InetSocketAddress" extern="1">
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</equals>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.InetSocketAddress$InetSocketAddressHolder"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"InetSocketAddress.InetSocketAddressHolder"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.InetSocketAddress_1" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/InetSocketAddress$1.class" module="java.net.InetSocketAddress" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.net.InetSocketAddress$1"</e></m>
	<m n=":javaCanonical">
		<e>"java.net"</e>
		<e>"InetSocketAddress.1"</e>
	</m>
</meta></class>
	<class path="java.net.InterfaceAddress" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/InterfaceAddress.class" extern="1">
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<getNetworkPrefixLength public="1" set="method">
			<f a=""><t path="java.types.Int16"/></f>
			<meta><m n=":overload"/></meta>
		</getNetworkPrefixLength>
		<getBroadcast public="1" set="method">
			<f a=""><c path="java.net.InetAddress"/></f>
			<meta><m n=":overload"/></meta>
		</getBroadcast>
		<getAddress public="1" set="method">
			<f a=""><c path="java.net.InetAddress"/></f>
			<meta><m n=":overload"/></meta>
		</getAddress>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.InterfaceAddress"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"InterfaceAddress"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.MalformedURLException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/MalformedURLException.class" extern="1">
		<extends path="java.io.IOException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.MalformedURLException"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"MalformedURLException"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.NetworkInterface" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/NetworkInterface.class" extern="1">
		<getNetworkInterfaces public="1" set="method" static="1">
			<f a=""><c path="java.util.Enumeration"><c path="java.net.NetworkInterface"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</getNetworkInterfaces>
		<getByInetAddress public="1" set="method" static="1">
			<f a="param1">
				<c path="java.net.InetAddress"/>
				<c path="java.net.NetworkInterface"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</getByInetAddress>
		<getByIndex public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<c path="java.net.NetworkInterface"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</getByIndex>
		<getByName public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.net.NetworkInterface"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</getByName>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<isVirtual public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isVirtual>
		<getMTU public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</getMTU>
		<getHardwareAddress public="1" set="method">
			<f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</getHardwareAddress>
		<supportsMulticast public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</supportsMulticast>
		<isPointToPoint public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</isPointToPoint>
		<isLoopback public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</isLoopback>
		<isUp public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</isUp>
		<getDisplayName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getDisplayName>
		<getIndex public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getIndex>
		<getParent public="1" set="method">
			<f a=""><c path="java.net.NetworkInterface"/></f>
			<meta><m n=":overload"/></meta>
		</getParent>
		<getSubInterfaces public="1" set="method">
			<f a=""><c path="java.util.Enumeration"><c path="java.net.NetworkInterface"/></c></f>
			<meta><m n=":overload"/></meta>
		</getSubInterfaces>
		<getInterfaceAddresses public="1" set="method">
			<f a=""><c path="java.util.List"><c path="java.net.InterfaceAddress"/></c></f>
			<meta><m n=":overload"/></meta>
		</getInterfaceAddresses>
		<getInetAddresses public="1" set="method">
			<f a=""><c path="java.util.Enumeration"><c path="java.net.InetAddress"/></c></f>
			<meta><m n=":overload"/></meta>
		</getInetAddresses>
		<getName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getName>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.NetworkInterface"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"NetworkInterface"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.ProtocolFamily" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/ProtocolFamily.class" extern="1" interface="1">
		<name public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</name>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.ProtocolFamily"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"ProtocolFamily"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.Proxy" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/Proxy.class" extern="1">
		<NO_PROXY public="1" static="1">
			<c path="java.net.Proxy"/>
			<meta><m n=":final"/></meta>
		</NO_PROXY>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</equals>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<address public="1" set="method">
			<f a=""><c path="java.net.SocketAddress"/></f>
			<meta><m n=":overload"/></meta>
		</address>
		<type public="1" set="method">
			<f a=""><e path="java.net.Proxy_Type"/></f>
			<meta><m n=":overload"/></meta>
		</type>
		<new public="1" set="method">
			<f a="param1:param2">
				<e path="java.net.Proxy_Type"/>
				<c path="java.net.SocketAddress"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.Proxy"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"Proxy"</e>
			</m>
		</meta>
	</class>
	<enum path="java.net.Proxy_Type" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/Proxy$Type.class" module="java.net.Proxy">
		<SOCKS/>
		<HTTP/>
		<DIRECT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"Proxy.Type"</e>
			</m>
			<m n=":native"><e>"java.net.Proxy$Type"</e></m>
		</meta>
	</enum>
	<class path="java.net.ServerSocket" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/ServerSocket.class" extern="1">
		<implements path="java.io.Closeable"/>
		<setSocketFactory public="1" set="method" static="1">
			<f a="param1">
				<c path="java.net.SocketImplFactory"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</setSocketFactory>
		<setPerformancePreferences public="1" set="method">
			<f a="param1:param2:param3">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setPerformancePreferences>
		<getReceiveBufferSize public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</getReceiveBufferSize>
		<setReceiveBufferSize public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</setReceiveBufferSize>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<getReuseAddress public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</getReuseAddress>
		<setReuseAddress public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</setReuseAddress>
		<getSoTimeout public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getSoTimeout>
		<setSoTimeout public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</setSoTimeout>
		<isClosed public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isClosed>
		<isBound public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isBound>
		<getChannel public="1" set="method">
			<f a=""><c path="java.nio.channels.ServerSocketChannel"/></f>
			<meta><m n=":overload"/></meta>
		</getChannel>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</close>
		<implAccept set="method">
			<f a="param1">
				<c path="java.net.Socket"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</implAccept>
		<accept public="1" set="method">
			<f a=""><c path="java.net.Socket"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</accept>
		<getLocalSocketAddress public="1" set="method">
			<f a=""><c path="java.net.SocketAddress"/></f>
			<meta><m n=":overload"/></meta>
		</getLocalSocketAddress>
		<getLocalPort public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getLocalPort>
		<getInetAddress public="1" set="method">
			<f a=""><c path="java.net.InetAddress"/></f>
			<meta><m n=":overload"/></meta>
		</getInetAddress>
		<bind public="1" set="method">
			<f a="param1:param2">
				<c path="java.net.SocketAddress"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><bind public="1" set="method">
	<f a="param1">
		<c path="java.net.SocketAddress"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</bind></overloads>
		</bind>
		<new public="1" set="method">
			<f a="param1:param2:param3">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.net.InetAddress"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.ServerSocket"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"ServerSocket"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.Socket" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/Socket.class" extern="1">
		<implements path="java.io.Closeable"/>
		<setSocketImplFactory public="1" set="method" static="1">
			<f a="param1">
				<c path="java.net.SocketImplFactory"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</setSocketImplFactory>
		<setPerformancePreferences public="1" set="method">
			<f a="param1:param2:param3">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setPerformancePreferences>
		<isOutputShutdown public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isOutputShutdown>
		<isInputShutdown public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isInputShutdown>
		<isClosed public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isClosed>
		<isBound public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isBound>
		<isConnected public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isConnected>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<shutdownOutput public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</shutdownOutput>
		<shutdownInput public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</shutdownInput>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</close>
		<getReuseAddress public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</getReuseAddress>
		<setReuseAddress public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</setReuseAddress>
		<getTrafficClass public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</getTrafficClass>
		<setTrafficClass public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</setTrafficClass>
		<getKeepAlive public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</getKeepAlive>
		<setKeepAlive public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</setKeepAlive>
		<getReceiveBufferSize public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</getReceiveBufferSize>
		<setReceiveBufferSize public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</setReceiveBufferSize>
		<getSendBufferSize public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</getSendBufferSize>
		<setSendBufferSize public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</setSendBufferSize>
		<getSoTimeout public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</getSoTimeout>
		<setSoTimeout public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</setSoTimeout>
		<getOOBInline public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</getOOBInline>
		<setOOBInline public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</setOOBInline>
		<sendUrgentData public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</sendUrgentData>
		<getSoLinger public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</getSoLinger>
		<setSoLinger public="1" set="method">
			<f a="param1:param2">
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</setSoLinger>
		<getTcpNoDelay public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</getTcpNoDelay>
		<setTcpNoDelay public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</setTcpNoDelay>
		<getOutputStream public="1" set="method">
			<f a=""><c path="java.io.OutputStream"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getOutputStream>
		<getInputStream public="1" set="method">
			<f a=""><c path="java.io.InputStream"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getInputStream>
		<getChannel public="1" set="method">
			<f a=""><c path="java.nio.channels.SocketChannel"/></f>
			<meta><m n=":overload"/></meta>
		</getChannel>
		<getLocalSocketAddress public="1" set="method">
			<f a=""><c path="java.net.SocketAddress"/></f>
			<meta><m n=":overload"/></meta>
		</getLocalSocketAddress>
		<getRemoteSocketAddress public="1" set="method">
			<f a=""><c path="java.net.SocketAddress"/></f>
			<meta><m n=":overload"/></meta>
		</getRemoteSocketAddress>
		<getLocalPort public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getLocalPort>
		<getPort public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getPort>
		<getLocalAddress public="1" set="method">
			<f a=""><c path="java.net.InetAddress"/></f>
			<meta><m n=":overload"/></meta>
		</getLocalAddress>
		<getInetAddress public="1" set="method">
			<f a=""><c path="java.net.InetAddress"/></f>
			<meta><m n=":overload"/></meta>
		</getInetAddress>
		<bind public="1" set="method">
			<f a="param1">
				<c path="java.net.SocketAddress"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</bind>
		<connect public="1" set="method">
			<f a="param1:param2">
				<c path="java.net.SocketAddress"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><connect public="1" set="method">
	<f a="param1">
		<c path="java.net.SocketAddress"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</connect></overloads>
		</connect>
		<new public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.net.InetAddress"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":deprecated"/>
			</meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="java.net.Proxy"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new set="method">
					<f a="param1">
						<c path="java.net.SocketImpl"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.net.SocketException"</e></m>
					</meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
						<m n=":throws"><e>"java.net.UnknownHostException"</e></m>
					</meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="java.net.InetAddress"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3:param4">
						<c path="String"/>
						<x path="Int"/>
						<c path="java.net.InetAddress"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3:param4">
						<c path="java.net.InetAddress"/>
						<x path="Int"/>
						<c path="java.net.InetAddress"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<x path="Int"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
						<m n=":deprecated"/>
					</meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.Socket"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"Socket"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.SocketException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/SocketException.class" extern="1">
		<extends path="java.io.IOException"/>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.SocketException"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"SocketException"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.SocketImpl" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/SocketImpl.class" extern="1">
		<implements path="java.net.SocketOptions"/>
		<setPerformancePreferences set="method">
			<f a="param1:param2:param3">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setPerformancePreferences>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<getLocalPort set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getLocalPort>
		<sendUrgentData set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</sendUrgentData>
		<supportsUrgentData set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</supportsUrgentData>
		<getPort set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getPort>
		<getInetAddress set="method">
			<f a=""><c path="java.net.InetAddress"/></f>
			<meta><m n=":overload"/></meta>
		</getInetAddress>
		<getFileDescriptor set="method">
			<f a=""><c path="java.io.FileDescriptor"/></f>
			<meta><m n=":overload"/></meta>
		</getFileDescriptor>
		<shutdownOutput set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</shutdownOutput>
		<shutdownInput set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</shutdownInput>
		<close set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</close>
		<available set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</available>
		<getOutputStream set="method">
			<f a=""><c path="java.io.OutputStream"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getOutputStream>
		<getInputStream set="method">
			<f a=""><c path="java.io.InputStream"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getInputStream>
		<accept set="method">
			<f a="param1">
				<c path="java.net.SocketImpl"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</accept>
		<listen set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</listen>
		<bind set="method">
			<f a="param1:param2">
				<c path="java.net.InetAddress"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</bind>
		<connect set="method">
			<f a="param1:param2">
				<c path="java.net.SocketAddress"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads>
				<connect set="method">
					<f a="param1:param2">
						<c path="String"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</connect>
				<connect set="method">
					<f a="param1:param2">
						<c path="java.net.InetAddress"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</connect>
			</overloads>
		</connect>
		<create set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</create>
		<setOption public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</setOption>
		<getOption public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<d/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.SocketException"</e></m>
			</meta>
		</getOption>
		<fd><c path="java.io.FileDescriptor"/></fd>
		<address><c path="java.net.InetAddress"/></address>
		<port><x path="Int"/></port>
		<localport><x path="Int"/></localport>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.SocketImpl"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"SocketImpl"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.SocketImplFactory" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/SocketImplFactory.class" extern="1" interface="1">
		<createSocketImpl public="1" set="method">
			<f a=""><c path="java.net.SocketImpl"/></f>
			<meta><m n=":overload"/></meta>
		</createSocketImpl>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.SocketImplFactory"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"SocketImplFactory"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.SocketOption" params="T" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/SocketOption.class" extern="1" interface="1">
		<type public="1" set="method">
			<f a=""><c path="java.lang.Class"><c path="java.net.SocketOption.T"/></c></f>
			<meta><m n=":overload"/></meta>
		</type>
		<name public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</name>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.SocketOption"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"SocketOption"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.SocketOptions_Statics" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/SocketOptions.class" module="java.net.SocketOptions" extern="1">
		<TCP_NODELAY public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</TCP_NODELAY>
		<SO_BINDADDR public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</SO_BINDADDR>
		<SO_REUSEADDR public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</SO_REUSEADDR>
		<SO_BROADCAST public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</SO_BROADCAST>
		<IP_MULTICAST_IF public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</IP_MULTICAST_IF>
		<IP_MULTICAST_IF2 public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</IP_MULTICAST_IF2>
		<IP_MULTICAST_LOOP public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</IP_MULTICAST_LOOP>
		<IP_TOS public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</IP_TOS>
		<SO_LINGER public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</SO_LINGER>
		<SO_TIMEOUT public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</SO_TIMEOUT>
		<SO_SNDBUF public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</SO_SNDBUF>
		<SO_RCVBUF public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</SO_RCVBUF>
		<SO_KEEPALIVE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</SO_KEEPALIVE>
		<SO_OOBINLINE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</SO_OOBINLINE>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.SocketOptions"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"SocketOptions"</e>
			</m>
		</meta>
	</class>
	<class path="sys.net.Socket" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/sys/net/Socket.hx">
		<select public="1" set="method" line="173" static="1">
			<f a="read:write:others:?timeout">
				<c path="Array"><c path="sys.net.Socket"/></c>
				<c path="Array"><c path="sys.net.Socket"/></c>
				<c path="Array"><c path="sys.net.Socket"/></c>
				<x path="Float"/>
				<a>
					<write><c path="Array"><c path="sys.net.Socket"/></c></write>
					<read><c path="Array"><c path="sys.net.Socket"/></c></read>
					<others><c path="Array"><c path="sys.net.Socket"/></c></others>
				</a>
			</f>
			<haxe_doc>Wait until one of the sockets groups is ready for the given operation :
		 - `read`contains sockets on which we want to wait for available data to be read,
		 - `write` contains sockets on which we want to wait until we are allowed to write some data to their output buffers,
		 - `others` contains sockets on which we want to wait for exceptional conditions.
		 - `select` will block until one of the condition is met, in which case it will return the sockets for which the condition was true.
		In case a `timeout` (in seconds) is specified, select might wait at worse until the timeout expires.</haxe_doc>
		</select>
		<input public="1" set="null">
			<c path="haxe.io.Input"/>
			<haxe_doc>The stream on which you can read available data. By default the stream is blocking until the requested data is available,
		use `setBlocking(false)` or `setTimeout` to prevent infinite waiting.</haxe_doc>
		</input>
		<output public="1" set="null">
			<c path="haxe.io.Output"/>
			<haxe_doc>The stream on which you can send data. Please note that in case the output buffer you will block while writing the data, use `setBlocking(false)` or `setTimeout` to prevent that.</haxe_doc>
		</output>
		<custom public="1">
			<d/>
			<haxe_doc>A custom value that can be associated with the socket. Can be used to retrieve your custom infos after a `select`.
	*</haxe_doc>
		</custom>
		<sock><c path="java.net.Socket"/></sock>
		<server><c path="java.net.ServerSocket"/></server>
		<boundAddr><c path="java.net.SocketAddress"/></boundAddr>
		<create set="method" line="42"><f a=""><x path="Void"/></f></create>
		<close public="1" set="method" line="51">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Closes the socket : make sure to properly close all your sockets or you will crash when you run out of file descriptors.</haxe_doc>
		</close>
		<read public="1" set="method" line="63">
			<f a=""><c path="String"/></f>
			<haxe_doc>Read the whole data available on the socket.</haxe_doc>
		</read>
		<write public="1" set="method" line="68">
			<f a="content">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write the whole data to the socket output.</haxe_doc>
		</write>
		<connect public="1" set="method" line="73">
			<f a="host:port">
				<c path="sys.net.Host"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Connect to the given server host/port. Throw an exception in case we couldn't successfully connect.</haxe_doc>
		</connect>
		<listen public="1" set="method" line="84">
			<f a="connections">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allow the socket to listen for incoming questions. The parameter tells how many pending connections we can have until they get refused. Use `accept()` to accept incoming connections.</haxe_doc>
		</listen>
		<shutdown public="1" set="method" line="92">
			<f a="read:write">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Shutdown the socket, either for reading or writing.</haxe_doc>
		</shutdown>
		<bind public="1" set="method" line="104">
			<f a="host:port">
				<c path="sys.net.Host"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Bind the socket to the given host/port so it can afterwards listen for connections there.</haxe_doc>
		</bind>
		<accept public="1" set="method" line="113">
			<f a=""><c path="sys.net.Socket"/></f>
			<haxe_doc>Accept a new connected client. This will return a connected socket on which you can read/write some data.</haxe_doc>
		</accept>
		<peer public="1" set="method" line="125">
			<f a=""><a>
	<port><x path="Int"/></port>
	<host><c path="sys.net.Host"/></host>
</a></f>
			<haxe_doc>Return the information about the other side of a connected socket.</haxe_doc>
		</peer>
		<host public="1" set="method" line="135">
			<f a=""><a>
	<port><x path="Int"/></port>
	<host><c path="sys.net.Host"/></host>
</a></f>
			<haxe_doc>Return the information about our side of a connected socket.</haxe_doc>
		</host>
		<setTimeout public="1" set="method" line="149">
			<f a="timeout">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Gives a timeout after which blocking socket operations (such as reading and writing) will abort and throw an exception.</haxe_doc>
		</setTimeout>
		<waitForRead public="1" set="method" line="156">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Block until some data is available for read on the socket.</haxe_doc>
		</waitForRead>
		<setBlocking public="1" set="method" line="161">
			<f a="b">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Change the blocking mode of the socket. A blocking socket is the default behavior. A non-blocking socket will abort blocking operations immediately by throwing a haxe.io.Error.Blocking value.</haxe_doc>
		</setBlocking>
		<setFastSend public="1" set="method" line="166">
			<f a="b">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allows the socket to immediately send the data when written to its output : this will cause less ping but might increase the number of packets / data size, especially when doing a lot of small writes.</haxe_doc>
		</setFastSend>
		<new public="1" set="method" line="37">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new unconnected socket.</haxe_doc>
		</new>
		<haxe_doc>A TCP socket class : allow you to both connect to a given server and exchange messages or start your own server and wait for connections.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="java.net.SslSocket" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/net/SslSocket.hx">
		<extends path="sys.net.Socket"/>
		<create set="method" line="26" override="1"><f a=""><x path="Void"/></f></create>
		<meta><m n=":native"><e>"haxe.java.net.SslSocket"</e></m></meta>
	</class>
	<class path="java.net.URI" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/URI.class" extern="1">
		<implements path="java.io.Serializable"/>
		<implements path="java.lang.Comparable"><c path="java.net.URI"/></implements>
		<create public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.net.URI"/>
			</f>
			<meta><m n=":overload"/></meta>
		</create>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<c path="java.net.URI"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<toASCIIString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toASCIIString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<getFragment public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getFragment>
		<getRawFragment public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getRawFragment>
		<getQuery public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getQuery>
		<getRawQuery public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getRawQuery>
		<getPath public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getPath>
		<getRawPath public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getRawPath>
		<getPort public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getPort>
		<getHost public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getHost>
		<getUserInfo public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getUserInfo>
		<getRawUserInfo public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getRawUserInfo>
		<getAuthority public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getAuthority>
		<getRawAuthority public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getRawAuthority>
		<getSchemeSpecificPart public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getSchemeSpecificPart>
		<getRawSchemeSpecificPart public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getRawSchemeSpecificPart>
		<isOpaque public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isOpaque>
		<isAbsolute public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isAbsolute>
		<getScheme public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getScheme>
		<toURL public="1" set="method">
			<f a=""><c path="java.net.URL"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.MalformedURLException"</e></m>
			</meta>
		</toURL>
		<relativize public="1" set="method">
			<f a="param1">
				<c path="java.net.URI"/>
				<c path="java.net.URI"/>
			</f>
			<meta><m n=":overload"/></meta>
		</relativize>
		<resolve public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.net.URI"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><resolve public="1" set="method">
	<f a="param1">
		<c path="java.net.URI"/>
		<c path="java.net.URI"/>
	</f>
	<meta><m n=":overload"/></meta>
</resolve></overloads>
		</resolve>
		<normalize public="1" set="method">
			<f a=""><c path="java.net.URI"/></f>
			<meta><m n=":overload"/></meta>
		</normalize>
		<parseServerAuthority public="1" set="method">
			<f a=""><c path="java.net.URI"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.URISyntaxException"</e></m>
			</meta>
		</parseServerAuthority>
		<new public="1" set="method">
			<f a="param1:param2:param3">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.URISyntaxException"</e></m>
			</meta>
			<overloads>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.net.URISyntaxException"</e></m>
					</meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3:param4:param5:param6:param7">
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<x path="Int"/>
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.net.URISyntaxException"</e></m>
					</meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3:param4:param5">
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.net.URISyntaxException"</e></m>
					</meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3:param4">
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.net.URISyntaxException"</e></m>
					</meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.URI"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"URI"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.URI_Parser" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/URI$Parser.class" module="java.net.URI" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.net.URI$Parser"</e></m>
	<m n=":javaCanonical">
		<e>"java.net"</e>
		<e>"URI.Parser"</e>
	</m>
</meta></class>
	<class path="java.net.URISyntaxException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/URISyntaxException.class" extern="1">
		<extends path="java.lang.Exception"/>
		<getMessage public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getMessage>
		<getIndex public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getIndex>
		<getReason public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getReason>
		<getInput public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getInput>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1:param2:param3">
		<c path="String"/>
		<c path="String"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.URISyntaxException"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"URISyntaxException"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.URL" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/URL.class" extern="1">
		<implements path="java.io.Serializable"/>
		<setURLStreamHandlerFactory public="1" set="method" static="1">
			<f a="param1">
				<c path="java.net.URLStreamHandlerFactory"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setURLStreamHandlerFactory>
		<getContent public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
				<d/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
			<overloads><getContent public="1" set="method">
	<f a=""><d/></f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
		<m n=":final"/>
	</meta>
</getContent></overloads>
		</getContent>
		<openStream public="1" set="method">
			<f a=""><c path="java.io.InputStream"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</openStream>
		<openConnection public="1" set="method">
			<f a="param1">
				<c path="java.net.Proxy"/>
				<c path="java.net.URLConnection"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><openConnection public="1" set="method">
	<f a=""><c path="java.net.URLConnection"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</openConnection></overloads>
		</openConnection>
		<toURI public="1" set="method">
			<f a=""><c path="java.net.URI"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.URISyntaxException"</e></m>
			</meta>
		</toURI>
		<toExternalForm public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toExternalForm>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<sameFile public="1" set="method">
			<f a="param1">
				<c path="java.net.URL"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</sameFile>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<getRef public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getRef>
		<getFile public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getFile>
		<getHost public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getHost>
		<getProtocol public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getProtocol>
		<getDefaultPort public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getDefaultPort>
		<getPort public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getPort>
		<getAuthority public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getAuthority>
		<getUserInfo public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getUserInfo>
		<getPath public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getPath>
		<getQuery public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getQuery>
		<set set="method">
			<f a="param1:param2:param3:param4:param5:param6:param7:param8">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><set set="method">
	<f a="param1:param2:param3:param4:param5">
		<c path="String"/>
		<c path="String"/>
		<x path="Int"/>
		<c path="String"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</set></overloads>
		</set>
		<new public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.net.URL"/>
				<c path="String"/>
				<c path="java.net.URLStreamHandler"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.net.MalformedURLException"</e></m>
			</meta>
			<overloads>
				<new public="1" set="method">
					<f a="param1:param2:param3:param4">
						<c path="String"/>
						<c path="String"/>
						<x path="Int"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.net.MalformedURLException"</e></m>
					</meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.net.MalformedURLException"</e></m>
					</meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3:param4:param5">
						<c path="String"/>
						<c path="String"/>
						<x path="Int"/>
						<c path="String"/>
						<c path="java.net.URLStreamHandler"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.net.MalformedURLException"</e></m>
					</meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.net.MalformedURLException"</e></m>
					</meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="java.net.URL"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.net.MalformedURLException"</e></m>
					</meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.URL"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"URL"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.URLConnection" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/URLConnection.class" extern="1">
		<guessContentTypeFromStream public="1" set="method" static="1">
			<f a="param1">
				<c path="java.io.InputStream"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</guessContentTypeFromStream>
		<guessContentTypeFromName public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</guessContentTypeFromName>
		<setContentHandlerFactory public="1" set="method" static="1">
			<f a="param1">
				<c path="java.net.ContentHandlerFactory"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setContentHandlerFactory>
		<getDefaultRequestProperty public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</getDefaultRequestProperty>
		<setDefaultRequestProperty public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</setDefaultRequestProperty>
		<getDefaultAllowUserInteraction public="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</getDefaultAllowUserInteraction>
		<setDefaultAllowUserInteraction public="1" set="method" static="1">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setDefaultAllowUserInteraction>
		<setFileNameMap public="1" set="method" static="1">
			<f a="param1">
				<c path="java.net.FileNameMap"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setFileNameMap>
		<getFileNameMap public="1" set="method" static="1">
			<f a=""><c path="java.net.FileNameMap"/></f>
			<meta><m n=":overload"/></meta>
		</getFileNameMap>
		<getRequestProperties public="1" set="method">
			<f a=""><c path="java.util.Map">
	<c path="String"/>
	<c path="java.util.List"><c path="String"/></c>
</c></f>
			<meta><m n=":overload"/></meta>
		</getRequestProperties>
		<getRequestProperty public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getRequestProperty>
		<addRequestProperty public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</addRequestProperty>
		<setRequestProperty public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setRequestProperty>
		<setDefaultUseCaches public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setDefaultUseCaches>
		<getDefaultUseCaches public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</getDefaultUseCaches>
		<getIfModifiedSince public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</getIfModifiedSince>
		<setIfModifiedSince public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setIfModifiedSince>
		<getUseCaches public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</getUseCaches>
		<setUseCaches public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setUseCaches>
		<getAllowUserInteraction public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</getAllowUserInteraction>
		<setAllowUserInteraction public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setAllowUserInteraction>
		<getDoOutput public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</getDoOutput>
		<setDoOutput public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setDoOutput>
		<getDoInput public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</getDoInput>
		<setDoInput public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setDoInput>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<getOutputStream public="1" set="method">
			<f a=""><c path="java.io.OutputStream"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getOutputStream>
		<getInputStream public="1" set="method">
			<f a=""><c path="java.io.InputStream"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getInputStream>
		<getPermission public="1" set="method">
			<f a=""><c path="java.security.Permission"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getPermission>
		<getContent public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><c path="java.lang.Class"><d/></c></c>
				<d/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><getContent public="1" set="method">
	<f a=""><d/></f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</getContent></overloads>
		</getContent>
		<getHeaderField public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getHeaderField public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</getHeaderField></overloads>
		</getHeaderField>
		<getHeaderFieldKey public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getHeaderFieldKey>
		<getHeaderFieldDate public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getHeaderFieldDate>
		<getHeaderFieldLong public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getHeaderFieldLong>
		<getHeaderFieldInt public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getHeaderFieldInt>
		<getHeaderFields public="1" set="method">
			<f a=""><c path="java.util.Map">
	<c path="String"/>
	<c path="java.util.List"><c path="String"/></c>
</c></f>
			<meta><m n=":overload"/></meta>
		</getHeaderFields>
		<getLastModified public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</getLastModified>
		<getDate public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</getDate>
		<getExpiration public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</getExpiration>
		<getContentEncoding public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getContentEncoding>
		<getContentType public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getContentType>
		<getContentLengthLong public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</getContentLengthLong>
		<getContentLength public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getContentLength>
		<getURL public="1" set="method">
			<f a=""><c path="java.net.URL"/></f>
			<meta><m n=":overload"/></meta>
		</getURL>
		<getReadTimeout public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getReadTimeout>
		<setReadTimeout public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setReadTimeout>
		<getConnectTimeout public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getConnectTimeout>
		<setConnectTimeout public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setConnectTimeout>
		<connect public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</connect>
		<url><c path="java.net.URL"/></url>
		<doInput><x path="Bool"/></doInput>
		<doOutput><x path="Bool"/></doOutput>
		<allowUserInteraction><x path="Bool"/></allowUserInteraction>
		<useCaches><x path="Bool"/></useCaches>
		<ifModifiedSince><x path="haxe.Int64"/></ifModifiedSince>
		<connected><x path="Bool"/></connected>
		<new set="method">
			<f a="param1">
				<c path="java.net.URL"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.URLConnection"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"URLConnection"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.URLEncoder" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/URLEncoder.class" extern="1">
		<encode public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.UnsupportedEncodingException"</e></m>
			</meta>
			<overloads><encode public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<c path="String"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":deprecated"/>
	</meta>
</encode></overloads>
		</encode>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.URLEncoder"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"URLEncoder"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.URLStreamHandler" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/URLStreamHandler.class" extern="1">
		<setURL set="method">
			<f a="param1:param2:param3:param4:param5:param6">
				<c path="java.net.URL"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
			<overloads><setURL set="method">
	<f a="param1:param2:param3:param4:param5:param6:param7:param8:param9">
		<c path="java.net.URL"/>
		<c path="String"/>
		<c path="String"/>
		<x path="Int"/>
		<c path="String"/>
		<c path="String"/>
		<c path="String"/>
		<c path="String"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</setURL></overloads>
		</setURL>
		<toExternalForm set="method">
			<f a="param1">
				<c path="java.net.URL"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toExternalForm>
		<hostsEqual set="method">
			<f a="param1:param2">
				<c path="java.net.URL"/>
				<c path="java.net.URL"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</hostsEqual>
		<getHostAddress set="method">
			<f a="param1">
				<c path="java.net.URL"/>
				<c path="java.net.InetAddress"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getHostAddress>
		<sameFile set="method">
			<f a="param1:param2">
				<c path="java.net.URL"/>
				<c path="java.net.URL"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</sameFile>
		<hashCode set="method">
			<f a="param1">
				<c path="java.net.URL"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals set="method">
			<f a="param1:param2">
				<c path="java.net.URL"/>
				<c path="java.net.URL"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<getDefaultPort set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getDefaultPort>
		<parseURL set="method">
			<f a="param1:param2:param3:param4">
				<c path="java.net.URL"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</parseURL>
		<openConnection set="method">
			<f a="param1:param2">
				<c path="java.net.URL"/>
				<c path="java.net.Proxy"/>
				<c path="java.net.URLConnection"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><openConnection set="method">
	<f a="param1">
		<c path="java.net.URL"/>
		<c path="java.net.URLConnection"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</openConnection></overloads>
		</openConnection>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.URLStreamHandler"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"URLStreamHandler"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.URLStreamHandlerFactory" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/URLStreamHandlerFactory.class" extern="1" interface="1">
		<createURLStreamHandler public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.net.URLStreamHandler"/>
			</f>
			<meta><m n=":overload"/></meta>
		</createURLStreamHandler>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.URLStreamHandlerFactory"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"URLStreamHandlerFactory"</e>
			</m>
		</meta>
	</class>
	<class path="java.net.UnknownHostException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/net/UnknownHostException.class" extern="1">
		<extends path="java.io.IOException"/>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.net.UnknownHostException"</e></m>
			<m n=":javaCanonical">
				<e>"java.net"</e>
				<e>"UnknownHostException"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.Buffer" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/Buffer.class" extern="1">
		<isDirect public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isDirect>
		<arrayOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</arrayOffset>
		<array public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</array>
		<hasArray public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</hasArray>
		<isReadOnly public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isReadOnly>
		<hasRemaining public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</hasRemaining>
		<remaining public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</remaining>
		<rewind public="1" set="method">
			<f a=""><c path="java.nio.Buffer"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</rewind>
		<flip public="1" set="method">
			<f a=""><c path="java.nio.Buffer"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</flip>
		<clear public="1" set="method">
			<f a=""><c path="java.nio.Buffer"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</clear>
		<reset public="1" set="method">
			<f a=""><c path="java.nio.Buffer"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</reset>
		<mark public="1" set="method">
			<f a=""><c path="java.nio.Buffer"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</mark>
		<limit public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.nio.Buffer"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
			<overloads><limit public="1" set="method">
	<f a=""><x path="Int"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":final"/>
	</meta>
</limit></overloads>
		</limit>
		<position public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.nio.Buffer"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
			<overloads><position public="1" set="method">
	<f a=""><x path="Int"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":final"/>
	</meta>
</position></overloads>
		</position>
		<capacity public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</capacity>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.Buffer"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio"</e>
				<e>"Buffer"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.ByteBuffer" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/ByteBuffer.class" extern="1">
		<extends path="java.nio.Buffer"/>
		<implements path="java.lang.Comparable"><c path="java.nio.ByteBuffer"/></implements>
		<wrap public="1" set="method" static="1">
			<f a="param1">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<c path="java.nio.ByteBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><wrap public="1" set="method">
	<f a="param1:param2:param3">
		<c path="java.NativeArray"><t path="java.types.Int8"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<c path="java.nio.ByteBuffer"/>
	</f>
	<meta><m n=":overload"/></meta>
</wrap></overloads>
		</wrap>
		<allocate public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<c path="java.nio.ByteBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
		</allocate>
		<allocateDirect public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<c path="java.nio.ByteBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
		</allocateDirect>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<c path="java.nio.ByteBuffer"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<array public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</array>
		<asDoubleBuffer public="1" set="method">
			<f a=""><c path="java.nio.DoubleBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</asDoubleBuffer>
		<putDouble public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Float"/>
				<c path="java.nio.ByteBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><putDouble public="1" set="method">
	<f a="param1">
		<x path="Float"/>
		<c path="java.nio.ByteBuffer"/>
	</f>
	<meta><m n=":overload"/></meta>
</putDouble></overloads>
		</putDouble>
		<getDouble public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getDouble public="1" set="method">
	<f a=""><x path="Float"/></f>
	<meta><m n=":overload"/></meta>
</getDouble></overloads>
		</getDouble>
		<asFloatBuffer public="1" set="method">
			<f a=""><c path="java.nio.FloatBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</asFloatBuffer>
		<putFloat public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Single"/>
				<c path="java.nio.ByteBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><putFloat public="1" set="method">
	<f a="param1">
		<x path="Single"/>
		<c path="java.nio.ByteBuffer"/>
	</f>
	<meta><m n=":overload"/></meta>
</putFloat></overloads>
		</putFloat>
		<getFloat public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Single"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getFloat public="1" set="method">
	<f a=""><x path="Single"/></f>
	<meta><m n=":overload"/></meta>
</getFloat></overloads>
		</getFloat>
		<asLongBuffer public="1" set="method">
			<f a=""><c path="java.nio.LongBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</asLongBuffer>
		<putLong public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<c path="java.nio.ByteBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><putLong public="1" set="method">
	<f a="param1">
		<x path="haxe.Int64"/>
		<c path="java.nio.ByteBuffer"/>
	</f>
	<meta><m n=":overload"/></meta>
</putLong></overloads>
		</putLong>
		<getLong public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getLong public="1" set="method">
	<f a=""><x path="haxe.Int64"/></f>
	<meta><m n=":overload"/></meta>
</getLong></overloads>
		</getLong>
		<asIntBuffer public="1" set="method">
			<f a=""><c path="java.nio.IntBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</asIntBuffer>
		<putInt public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.nio.ByteBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><putInt public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.nio.ByteBuffer"/>
	</f>
	<meta><m n=":overload"/></meta>
</putInt></overloads>
		</putInt>
		<getInt public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getInt public="1" set="method">
	<f a=""><x path="Int"/></f>
	<meta><m n=":overload"/></meta>
</getInt></overloads>
		</getInt>
		<asShortBuffer public="1" set="method">
			<f a=""><c path="java.nio.ShortBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</asShortBuffer>
		<putShort public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<t path="java.types.Int16"/>
				<c path="java.nio.ByteBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><putShort public="1" set="method">
	<f a="param1">
		<t path="java.types.Int16"/>
		<c path="java.nio.ByteBuffer"/>
	</f>
	<meta><m n=":overload"/></meta>
</putShort></overloads>
		</putShort>
		<getShort public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<t path="java.types.Int16"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getShort public="1" set="method">
	<f a=""><t path="java.types.Int16"/></f>
	<meta><m n=":overload"/></meta>
</getShort></overloads>
		</getShort>
		<asCharBuffer public="1" set="method">
			<f a=""><c path="java.nio.CharBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</asCharBuffer>
		<putChar public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<t path="java.types.Char16"/>
				<c path="java.nio.ByteBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><putChar public="1" set="method">
	<f a="param1">
		<t path="java.types.Char16"/>
		<c path="java.nio.ByteBuffer"/>
	</f>
	<meta><m n=":overload"/></meta>
</putChar></overloads>
		</putChar>
		<getChar public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<t path="java.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getChar public="1" set="method">
	<f a=""><t path="java.types.Char16"/></f>
	<meta><m n=":overload"/></meta>
</getChar></overloads>
		</getChar>
		<order public="1" set="method">
			<f a="param1">
				<c path="java.nio.ByteOrder"/>
				<c path="java.nio.ByteBuffer"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
			<overloads><order public="1" set="method">
	<f a=""><c path="java.nio.ByteOrder"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":final"/>
	</meta>
</order></overloads>
		</order>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<isDirect public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isDirect>
		<compact public="1" set="method">
			<f a=""><c path="java.nio.ByteBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</compact>
		<arrayOffset public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</arrayOffset>
		<hasArray public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</hasArray>
		<put public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<c path="java.nio.ByteBuffer"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
			<overloads>
				<put public="1" set="method">
					<f a="param1">
						<t path="java.types.Int8"/>
						<c path="java.nio.ByteBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<t path="java.types.Int8"/>
						<c path="java.nio.ByteBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1">
						<c path="java.nio.ByteBuffer"/>
						<c path="java.nio.ByteBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Int8"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.ByteBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
			</overloads>
		</put>
		<get public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<c path="java.nio.ByteBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<get public="1" set="method">
					<f a=""><t path="java.types.Int8"/></f>
					<meta><m n=":overload"/></meta>
				</get>
				<get public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<t path="java.types.Int8"/>
					</f>
					<meta><m n=":overload"/></meta>
				</get>
				<get public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Int8"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.ByteBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</get>
			</overloads>
		</get>
		<asReadOnlyBuffer public="1" set="method">
			<f a=""><c path="java.nio.ByteBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</asReadOnlyBuffer>
		<duplicate public="1" set="method">
			<f a=""><c path="java.nio.ByteBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</duplicate>
		<slice public="1" set="method">
			<f a=""><c path="java.nio.ByteBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</slice>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.ByteBuffer"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio"</e>
				<e>"ByteBuffer"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.ByteOrder" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/ByteOrder.class" extern="1">
		<nativeOrder public="1" set="method" static="1">
			<f a=""><c path="java.nio.ByteOrder"/></f>
			<meta><m n=":overload"/></meta>
		</nativeOrder>
		<BIG_ENDIAN public="1" static="1">
			<c path="java.nio.ByteOrder"/>
			<meta><m n=":final"/></meta>
		</BIG_ENDIAN>
		<LITTLE_ENDIAN public="1" static="1">
			<c path="java.nio.ByteOrder"/>
			<meta><m n=":final"/></meta>
		</LITTLE_ENDIAN>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.ByteOrder"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio"</e>
				<e>"ByteOrder"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.CharBuffer" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/CharBuffer.class" extern="1">
		<extends path="java.nio.Buffer"/>
		<implements path="java.lang.Readable"/>
		<implements path="java.lang.CharSequence"/>
		<implements path="java.lang.Appendable"/>
		<implements path="java.lang.Comparable"><c path="java.nio.CharBuffer"/></implements>
		<wrap public="1" set="method" static="1">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.nio.CharBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<wrap public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.CharBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</wrap>
				<wrap public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<c path="java.nio.CharBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</wrap>
				<wrap public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.lang.CharSequence"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.CharBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</wrap>
			</overloads>
		</wrap>
		<allocate public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<c path="java.nio.CharBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
		</allocate>
		<subSequence public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.nio.CharBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
		</subSequence>
		<append public="1" set="method">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.nio.CharBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<append public="1" set="method">
					<f a="param1">
						<t path="java.types.Char16"/>
						<c path="java.nio.CharBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
				<append public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.lang.CharSequence"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.CharBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</append>
			</overloads>
		</append>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<c path="java.nio.CharBuffer"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<array public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><t path="java.types.Char16"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</array>
		<order public="1" set="method">
			<f a=""><c path="java.nio.ByteOrder"/></f>
			<meta><m n=":overload"/></meta>
		</order>
		<charAt public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<t path="java.types.Char16"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</charAt>
		<length public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</length>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<isDirect public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isDirect>
		<compact public="1" set="method">
			<f a=""><c path="java.nio.CharBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</compact>
		<arrayOffset public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</arrayOffset>
		<hasArray public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</hasArray>
		<put public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.nio.CharBuffer"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
			<overloads>
				<put public="1" set="method">
					<f a="param1">
						<t path="java.types.Char16"/>
						<c path="java.nio.CharBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<t path="java.types.Char16"/>
						<c path="java.nio.CharBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1">
						<c path="java.nio.CharBuffer"/>
						<c path="java.nio.CharBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.CharBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<c path="java.nio.CharBuffer"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":final"/>
					</meta>
				</put>
				<put public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.CharBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
			</overloads>
		</put>
		<get public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><t path="java.types.Char16"/></c>
				<c path="java.nio.CharBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<get public="1" set="method">
					<f a=""><t path="java.types.Char16"/></f>
					<meta><m n=":overload"/></meta>
				</get>
				<get public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<t path="java.types.Char16"/>
					</f>
					<meta><m n=":overload"/></meta>
				</get>
				<get public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.CharBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</get>
			</overloads>
		</get>
		<asReadOnlyBuffer public="1" set="method">
			<f a=""><c path="java.nio.CharBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</asReadOnlyBuffer>
		<duplicate public="1" set="method">
			<f a=""><c path="java.nio.CharBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</duplicate>
		<slice public="1" set="method">
			<f a=""><c path="java.nio.CharBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</slice>
		<read public="1" set="method">
			<f a="param1">
				<c path="java.nio.CharBuffer"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</read>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.CharBuffer"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio"</e>
				<e>"CharBuffer"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.DoubleBuffer" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/DoubleBuffer.class" extern="1">
		<extends path="java.nio.Buffer"/>
		<implements path="java.lang.Comparable"><c path="java.nio.DoubleBuffer"/></implements>
		<wrap public="1" set="method" static="1">
			<f a="param1">
				<c path="java.NativeArray"><x path="Float"/></c>
				<c path="java.nio.DoubleBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><wrap public="1" set="method">
	<f a="param1:param2:param3">
		<c path="java.NativeArray"><x path="Float"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<c path="java.nio.DoubleBuffer"/>
	</f>
	<meta><m n=":overload"/></meta>
</wrap></overloads>
		</wrap>
		<allocate public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<c path="java.nio.DoubleBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
		</allocate>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<c path="java.nio.DoubleBuffer"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<array public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><x path="Float"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</array>
		<order public="1" set="method">
			<f a=""><c path="java.nio.ByteOrder"/></f>
			<meta><m n=":overload"/></meta>
		</order>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<isDirect public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isDirect>
		<compact public="1" set="method">
			<f a=""><c path="java.nio.DoubleBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</compact>
		<arrayOffset public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</arrayOffset>
		<hasArray public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</hasArray>
		<put public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><x path="Float"/></c>
				<c path="java.nio.DoubleBuffer"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
			<overloads>
				<put public="1" set="method">
					<f a="param1">
						<x path="Float"/>
						<c path="java.nio.DoubleBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Float"/>
						<c path="java.nio.DoubleBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1">
						<c path="java.nio.DoubleBuffer"/>
						<c path="java.nio.DoubleBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><x path="Float"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.DoubleBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
			</overloads>
		</put>
		<get public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><x path="Float"/></c>
				<c path="java.nio.DoubleBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<get public="1" set="method">
					<f a=""><x path="Float"/></f>
					<meta><m n=":overload"/></meta>
				</get>
				<get public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Float"/>
					</f>
					<meta><m n=":overload"/></meta>
				</get>
				<get public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><x path="Float"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.DoubleBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</get>
			</overloads>
		</get>
		<asReadOnlyBuffer public="1" set="method">
			<f a=""><c path="java.nio.DoubleBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</asReadOnlyBuffer>
		<duplicate public="1" set="method">
			<f a=""><c path="java.nio.DoubleBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</duplicate>
		<slice public="1" set="method">
			<f a=""><c path="java.nio.DoubleBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</slice>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.DoubleBuffer"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio"</e>
				<e>"DoubleBuffer"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.FloatBuffer" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/FloatBuffer.class" extern="1">
		<extends path="java.nio.Buffer"/>
		<implements path="java.lang.Comparable"><c path="java.nio.FloatBuffer"/></implements>
		<wrap public="1" set="method" static="1">
			<f a="param1">
				<c path="java.NativeArray"><x path="Single"/></c>
				<c path="java.nio.FloatBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><wrap public="1" set="method">
	<f a="param1:param2:param3">
		<c path="java.NativeArray"><x path="Single"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<c path="java.nio.FloatBuffer"/>
	</f>
	<meta><m n=":overload"/></meta>
</wrap></overloads>
		</wrap>
		<allocate public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<c path="java.nio.FloatBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
		</allocate>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<c path="java.nio.FloatBuffer"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<array public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><x path="Single"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</array>
		<order public="1" set="method">
			<f a=""><c path="java.nio.ByteOrder"/></f>
			<meta><m n=":overload"/></meta>
		</order>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<isDirect public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isDirect>
		<compact public="1" set="method">
			<f a=""><c path="java.nio.FloatBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</compact>
		<arrayOffset public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</arrayOffset>
		<hasArray public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</hasArray>
		<put public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><x path="Single"/></c>
				<c path="java.nio.FloatBuffer"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
			<overloads>
				<put public="1" set="method">
					<f a="param1">
						<x path="Single"/>
						<c path="java.nio.FloatBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Single"/>
						<c path="java.nio.FloatBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1">
						<c path="java.nio.FloatBuffer"/>
						<c path="java.nio.FloatBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><x path="Single"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.FloatBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
			</overloads>
		</put>
		<get public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><x path="Single"/></c>
				<c path="java.nio.FloatBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<get public="1" set="method">
					<f a=""><x path="Single"/></f>
					<meta><m n=":overload"/></meta>
				</get>
				<get public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Single"/>
					</f>
					<meta><m n=":overload"/></meta>
				</get>
				<get public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><x path="Single"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.FloatBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</get>
			</overloads>
		</get>
		<asReadOnlyBuffer public="1" set="method">
			<f a=""><c path="java.nio.FloatBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</asReadOnlyBuffer>
		<duplicate public="1" set="method">
			<f a=""><c path="java.nio.FloatBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</duplicate>
		<slice public="1" set="method">
			<f a=""><c path="java.nio.FloatBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</slice>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.FloatBuffer"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio"</e>
				<e>"FloatBuffer"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.IntBuffer" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/IntBuffer.class" extern="1">
		<extends path="java.nio.Buffer"/>
		<implements path="java.lang.Comparable"><c path="java.nio.IntBuffer"/></implements>
		<wrap public="1" set="method" static="1">
			<f a="param1">
				<c path="java.NativeArray"><x path="Int"/></c>
				<c path="java.nio.IntBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><wrap public="1" set="method">
	<f a="param1:param2:param3">
		<c path="java.NativeArray"><x path="Int"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<c path="java.nio.IntBuffer"/>
	</f>
	<meta><m n=":overload"/></meta>
</wrap></overloads>
		</wrap>
		<allocate public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<c path="java.nio.IntBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
		</allocate>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<c path="java.nio.IntBuffer"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<array public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><x path="Int"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</array>
		<order public="1" set="method">
			<f a=""><c path="java.nio.ByteOrder"/></f>
			<meta><m n=":overload"/></meta>
		</order>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<isDirect public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isDirect>
		<compact public="1" set="method">
			<f a=""><c path="java.nio.IntBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</compact>
		<arrayOffset public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</arrayOffset>
		<hasArray public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</hasArray>
		<put public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><x path="Int"/></c>
				<c path="java.nio.IntBuffer"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
			<overloads>
				<put public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<c path="java.nio.IntBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.IntBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1">
						<c path="java.nio.IntBuffer"/>
						<c path="java.nio.IntBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><x path="Int"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.IntBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
			</overloads>
		</put>
		<get public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><x path="Int"/></c>
				<c path="java.nio.IntBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<get public="1" set="method">
					<f a=""><x path="Int"/></f>
					<meta><m n=":overload"/></meta>
				</get>
				<get public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</get>
				<get public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><x path="Int"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.IntBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</get>
			</overloads>
		</get>
		<asReadOnlyBuffer public="1" set="method">
			<f a=""><c path="java.nio.IntBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</asReadOnlyBuffer>
		<duplicate public="1" set="method">
			<f a=""><c path="java.nio.IntBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</duplicate>
		<slice public="1" set="method">
			<f a=""><c path="java.nio.IntBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</slice>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.IntBuffer"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio"</e>
				<e>"IntBuffer"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.LongBuffer" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/LongBuffer.class" extern="1">
		<extends path="java.nio.Buffer"/>
		<implements path="java.lang.Comparable"><c path="java.nio.LongBuffer"/></implements>
		<wrap public="1" set="method" static="1">
			<f a="param1">
				<c path="java.NativeArray"><x path="haxe.Int64"/></c>
				<c path="java.nio.LongBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><wrap public="1" set="method">
	<f a="param1:param2:param3">
		<c path="java.NativeArray"><x path="haxe.Int64"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<c path="java.nio.LongBuffer"/>
	</f>
	<meta><m n=":overload"/></meta>
</wrap></overloads>
		</wrap>
		<allocate public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<c path="java.nio.LongBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
		</allocate>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<c path="java.nio.LongBuffer"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<array public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><x path="haxe.Int64"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</array>
		<order public="1" set="method">
			<f a=""><c path="java.nio.ByteOrder"/></f>
			<meta><m n=":overload"/></meta>
		</order>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<isDirect public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isDirect>
		<compact public="1" set="method">
			<f a=""><c path="java.nio.LongBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</compact>
		<arrayOffset public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</arrayOffset>
		<hasArray public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</hasArray>
		<put public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><x path="haxe.Int64"/></c>
				<c path="java.nio.LongBuffer"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
			<overloads>
				<put public="1" set="method">
					<f a="param1">
						<x path="haxe.Int64"/>
						<c path="java.nio.LongBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="haxe.Int64"/>
						<c path="java.nio.LongBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1">
						<c path="java.nio.LongBuffer"/>
						<c path="java.nio.LongBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><x path="haxe.Int64"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.LongBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
			</overloads>
		</put>
		<get public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><x path="haxe.Int64"/></c>
				<c path="java.nio.LongBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<get public="1" set="method">
					<f a=""><x path="haxe.Int64"/></f>
					<meta><m n=":overload"/></meta>
				</get>
				<get public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="haxe.Int64"/>
					</f>
					<meta><m n=":overload"/></meta>
				</get>
				<get public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><x path="haxe.Int64"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.LongBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</get>
			</overloads>
		</get>
		<asReadOnlyBuffer public="1" set="method">
			<f a=""><c path="java.nio.LongBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</asReadOnlyBuffer>
		<duplicate public="1" set="method">
			<f a=""><c path="java.nio.LongBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</duplicate>
		<slice public="1" set="method">
			<f a=""><c path="java.nio.LongBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</slice>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.LongBuffer"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio"</e>
				<e>"LongBuffer"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.MappedByteBuffer" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/MappedByteBuffer.class" extern="1">
		<extends path="java.nio.ByteBuffer"/>
		<force public="1" set="method">
			<f a=""><c path="java.nio.MappedByteBuffer"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</force>
		<load public="1" set="method">
			<f a=""><c path="java.nio.MappedByteBuffer"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</load>
		<isLoaded public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</isLoaded>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.MappedByteBuffer"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio"</e>
				<e>"MappedByteBuffer"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.ShortBuffer" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/ShortBuffer.class" extern="1">
		<extends path="java.nio.Buffer"/>
		<implements path="java.lang.Comparable"><c path="java.nio.ShortBuffer"/></implements>
		<wrap public="1" set="method" static="1">
			<f a="param1">
				<c path="java.NativeArray"><t path="java.types.Int16"/></c>
				<c path="java.nio.ShortBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><wrap public="1" set="method">
	<f a="param1:param2:param3">
		<c path="java.NativeArray"><t path="java.types.Int16"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<c path="java.nio.ShortBuffer"/>
	</f>
	<meta><m n=":overload"/></meta>
</wrap></overloads>
		</wrap>
		<allocate public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<c path="java.nio.ShortBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
		</allocate>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<c path="java.nio.ShortBuffer"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<array public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><t path="java.types.Int16"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</array>
		<order public="1" set="method">
			<f a=""><c path="java.nio.ByteOrder"/></f>
			<meta><m n=":overload"/></meta>
		</order>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<isDirect public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isDirect>
		<compact public="1" set="method">
			<f a=""><c path="java.nio.ShortBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</compact>
		<arrayOffset public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</arrayOffset>
		<hasArray public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</hasArray>
		<put public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><t path="java.types.Int16"/></c>
				<c path="java.nio.ShortBuffer"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
			<overloads>
				<put public="1" set="method">
					<f a="param1">
						<t path="java.types.Int16"/>
						<c path="java.nio.ShortBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<t path="java.types.Int16"/>
						<c path="java.nio.ShortBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1">
						<c path="java.nio.ShortBuffer"/>
						<c path="java.nio.ShortBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
				<put public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Int16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.ShortBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</put>
			</overloads>
		</put>
		<get public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><t path="java.types.Int16"/></c>
				<c path="java.nio.ShortBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<get public="1" set="method">
					<f a=""><t path="java.types.Int16"/></f>
					<meta><m n=":overload"/></meta>
				</get>
				<get public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<t path="java.types.Int16"/>
					</f>
					<meta><m n=":overload"/></meta>
				</get>
				<get public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Int16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.nio.ShortBuffer"/>
					</f>
					<meta><m n=":overload"/></meta>
				</get>
			</overloads>
		</get>
		<asReadOnlyBuffer public="1" set="method">
			<f a=""><c path="java.nio.ShortBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</asReadOnlyBuffer>
		<duplicate public="1" set="method">
			<f a=""><c path="java.nio.ShortBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</duplicate>
		<slice public="1" set="method">
			<f a=""><c path="java.nio.ShortBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</slice>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.ShortBuffer"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio"</e>
				<e>"ShortBuffer"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.Channel" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/Channel.class" extern="1" interface="1">
		<extends path="java.io.Closeable"/>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</close>
		<isOpen public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isOpen>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.Channel"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"Channel"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.AsynchronousChannel" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/AsynchronousChannel.class" extern="1" interface="1">
		<extends path="java.nio.channels.Channel"/>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</close>
		<isOpen public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isOpen>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.AsynchronousChannel"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"AsynchronousChannel"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.ClosedChannelException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/ClosedChannelException.class" extern="1">
		<extends path="java.io.IOException"/>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.ClosedChannelException"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"ClosedChannelException"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.AsynchronousCloseException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/AsynchronousCloseException.class" extern="1">
		<extends path="java.nio.channels.ClosedChannelException"/>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.AsynchronousCloseException"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"AsynchronousCloseException"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.AsynchronousFileChannel" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/AsynchronousFileChannel.class" extern="1">
		<implements path="java.nio.channels.AsynchronousChannel"/>
		<open public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="java.nio.file.Path"/>
				<c path="java.NativeArray"><c path="java.nio.file.OpenOption"/></c>
				<c path="java.nio.channels.AsynchronousFileChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><open public="1" set="method">
	<f a="param1:param2:param3:param4">
		<c path="java.nio.file.Path"/>
		<c path="java.util.Set"><c path="java.nio.file.OpenOption"/></c>
		<c path="java.util.concurrent.ExecutorService"/>
		<c path="java.NativeArray"><c path="java.nio.file.attribute.FileAttribute"><d/></c></c>
		<c path="java.nio.channels.AsynchronousFileChannel"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</open></overloads>
		</open>
		<write public="1" set="method">
			<f a="param1:param2">
				<c path="java.nio.ByteBuffer"/>
				<x path="haxe.Int64"/>
				<c path="java.util.concurrent.Future"><x path="java.lang.Integer"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><write public="1" params="A" set="method">
	<f a="param1:param2:param3:param4">
		<c path="java.nio.ByteBuffer"/>
		<x path="haxe.Int64"/>
		<c path="write.A"/>
		<c path="java.nio.channels.CompletionHandler">
			<x path="java.lang.Integer"/>
			<d/>
		</c>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</write></overloads>
		</write>
		<read public="1" set="method">
			<f a="param1:param2">
				<c path="java.nio.ByteBuffer"/>
				<x path="haxe.Int64"/>
				<c path="java.util.concurrent.Future"><x path="java.lang.Integer"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><read public="1" params="A" set="method">
	<f a="param1:param2:param3:param4">
		<c path="java.nio.ByteBuffer"/>
		<x path="haxe.Int64"/>
		<c path="read.A"/>
		<c path="java.nio.channels.CompletionHandler">
			<x path="java.lang.Integer"/>
			<d/>
		</c>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</read></overloads>
		</read>
		<tryLock public="1" set="method">
			<f a=""><c path="java.nio.channels.FileLock"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
			<overloads><tryLock public="1" set="method">
	<f a="param1:param2:param3">
		<x path="haxe.Int64"/>
		<x path="haxe.Int64"/>
		<x path="Bool"/>
		<c path="java.nio.channels.FileLock"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</tryLock></overloads>
		</tryLock>
		<lock public="1" set="method">
			<f a=""><c path="java.util.concurrent.Future"><c path="java.nio.channels.FileLock"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
			<overloads>
				<lock public="1" params="A" set="method">
					<f a="param1:param2:param3:param4:param5">
						<x path="haxe.Int64"/>
						<x path="haxe.Int64"/>
						<x path="Bool"/>
						<c path="lock.A"/>
						<c path="java.nio.channels.CompletionHandler">
							<c path="java.nio.channels.FileLock"/>
							<d/>
						</c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</lock>
				<lock public="1" params="A" set="method">
					<f a="param1:param2">
						<c path="lock.A"/>
						<c path="java.nio.channels.CompletionHandler">
							<c path="java.nio.channels.FileLock"/>
							<d/>
						</c>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":final"/>
					</meta>
				</lock>
				<lock public="1" set="method">
					<f a="param1:param2:param3">
						<x path="haxe.Int64"/>
						<x path="haxe.Int64"/>
						<x path="Bool"/>
						<c path="java.util.concurrent.Future"><c path="java.nio.channels.FileLock"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</lock>
			</overloads>
		</lock>
		<force public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</force>
		<truncate public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="java.nio.channels.AsynchronousFileChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</truncate>
		<size public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</size>
		<isOpen public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isOpen>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.Exception"</e></m>
			</meta>
		</close>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.AsynchronousFileChannel"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"AsynchronousFileChannel"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.ReadableByteChannel" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/ReadableByteChannel.class" extern="1" interface="1">
		<extends path="java.nio.channels.Channel"/>
		<read public="1" set="method">
			<f a="param1">
				<c path="java.nio.ByteBuffer"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</read>
		<isOpen public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isOpen>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.Exception"</e></m>
			</meta>
		</close>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.ReadableByteChannel"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"ReadableByteChannel"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.WritableByteChannel" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/WritableByteChannel.class" extern="1" interface="1">
		<extends path="java.nio.channels.Channel"/>
		<write public="1" set="method">
			<f a="param1">
				<c path="java.nio.ByteBuffer"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</write>
		<isOpen public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isOpen>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.Exception"</e></m>
			</meta>
		</close>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.WritableByteChannel"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"WritableByteChannel"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.ByteChannel" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/ByteChannel.class" extern="1" interface="1">
		<extends path="java.nio.channels.ReadableByteChannel"/>
		<extends path="java.nio.channels.WritableByteChannel"/>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.Exception"</e></m>
			</meta>
		</close>
		<isOpen public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isOpen>
		<read public="1" set="method">
			<f a="param1">
				<c path="java.nio.ByteBuffer"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</read>
		<write public="1" set="method">
			<f a="param1">
				<c path="java.nio.ByteBuffer"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</write>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.ByteChannel"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"ByteChannel"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.CompletionHandler" params="V:A" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/CompletionHandler.class" extern="1" interface="1">
		<failed public="1" set="method">
			<f a="param1:param2">
				<c path="java.lang.Throwable"/>
				<c path="java.nio.channels.CompletionHandler.A"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</failed>
		<completed public="1" set="method">
			<f a="param1:param2">
				<c path="java.nio.channels.CompletionHandler.V"/>
				<c path="java.nio.channels.CompletionHandler.A"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</completed>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.CompletionHandler"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"CompletionHandler"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.InterruptibleChannel" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/InterruptibleChannel.class" extern="1" interface="1">
		<extends path="java.nio.channels.Channel"/>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</close>
		<isOpen public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isOpen>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.InterruptibleChannel"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"InterruptibleChannel"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.spi.AbstractInterruptibleChannel" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/spi/AbstractInterruptibleChannel.class" extern="1">
		<implements path="java.nio.channels.Channel"/>
		<implements path="java.nio.channels.InterruptibleChannel"/>
		<end set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.nio.channels.AsynchronousCloseException"</e></m>
				<m n=":final"/>
			</meta>
		</end>
		<begin set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</begin>
		<isOpen public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</isOpen>
		<implCloseChannel set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</implCloseChannel>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</close>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.spi.AbstractInterruptibleChannel"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels.spi"</e>
				<e>"AbstractInterruptibleChannel"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.SelectableChannel" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/SelectableChannel.class" extern="1">
		<extends path="java.nio.channels.spi.AbstractInterruptibleChannel"/>
		<implements path="java.nio.channels.Channel"/>
		<blockingLock public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</blockingLock>
		<isBlocking public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isBlocking>
		<configureBlocking public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<c path="java.nio.channels.SelectableChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</configureBlocking>
		<register public="1" set="method">
			<f a="param1:param2">
				<c path="java.nio.channels.Selector"/>
				<x path="Int"/>
				<c path="java.nio.channels.SelectionKey"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.nio.channels.ClosedChannelException"</e></m>
				<m n=":final"/>
			</meta>
			<overloads><register public="1" set="method">
	<f a="param1:param2:param3">
		<c path="java.nio.channels.Selector"/>
		<x path="Int"/>
		<d/>
		<c path="java.nio.channels.SelectionKey"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.nio.channels.ClosedChannelException"</e></m>
	</meta>
</register></overloads>
		</register>
		<keyFor public="1" set="method">
			<f a="param1">
				<c path="java.nio.channels.Selector"/>
				<c path="java.nio.channels.SelectionKey"/>
			</f>
			<meta><m n=":overload"/></meta>
		</keyFor>
		<isRegistered public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isRegistered>
		<validOps public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</validOps>
		<provider public="1" set="method">
			<f a=""><c path="java.nio.channels.spi.SelectorProvider"/></f>
			<meta><m n=":overload"/></meta>
		</provider>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.SelectableChannel"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"SelectableChannel"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.spi.AbstractSelectableChannel" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/spi/AbstractSelectableChannel.class" extern="1">
		<extends path="java.nio.channels.SelectableChannel"/>
		<implConfigureBlocking set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</implConfigureBlocking>
		<configureBlocking public="1" set="method" override="1">
			<f a="param1">
				<x path="Bool"/>
				<c path="java.nio.channels.SelectableChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</configureBlocking>
		<blockingLock public="1" set="method" override="1">
			<f a=""><d/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</blockingLock>
		<isBlocking public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</isBlocking>
		<implCloseSelectableChannel set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</implCloseSelectableChannel>
		<implCloseChannel set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</implCloseChannel>
		<register public="1" set="method" override="1">
			<f a="param1:param2:param3">
				<c path="java.nio.channels.Selector"/>
				<x path="Int"/>
				<d/>
				<c path="java.nio.channels.SelectionKey"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.nio.channels.ClosedChannelException"</e></m>
				<m n=":final"/>
			</meta>
		</register>
		<keyFor public="1" set="method" override="1">
			<f a="param1">
				<c path="java.nio.channels.Selector"/>
				<c path="java.nio.channels.SelectionKey"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</keyFor>
		<isRegistered public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</isRegistered>
		<provider public="1" set="method" override="1">
			<f a=""><c path="java.nio.channels.spi.SelectorProvider"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</provider>
		<new set="method">
			<f a="param1">
				<c path="java.nio.channels.spi.SelectorProvider"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.spi.AbstractSelectableChannel"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels.spi"</e>
				<e>"AbstractSelectableChannel"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.ScatteringByteChannel" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/ScatteringByteChannel.class" extern="1" interface="1">
		<extends path="java.nio.channels.ReadableByteChannel"/>
		<read public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads>
				<read public="1" set="method">
					<f a="param1">
						<c path="java.nio.ByteBuffer"/>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</read>
				<read public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="haxe.Int64"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</read>
			</overloads>
		</read>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.Exception"</e></m>
			</meta>
		</close>
		<isOpen public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isOpen>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.ScatteringByteChannel"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"ScatteringByteChannel"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.GatheringByteChannel" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/GatheringByteChannel.class" extern="1" interface="1">
		<extends path="java.nio.channels.WritableByteChannel"/>
		<write public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads>
				<write public="1" set="method">
					<f a="param1">
						<c path="java.nio.ByteBuffer"/>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
				<write public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="haxe.Int64"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
			</overloads>
		</write>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.Exception"</e></m>
			</meta>
		</close>
		<isOpen public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isOpen>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.GatheringByteChannel"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"GatheringByteChannel"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.NetworkChannel" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/NetworkChannel.class" extern="1" interface="1">
		<extends path="java.nio.channels.Channel"/>
		<supportedOptions public="1" set="method">
			<f a=""><c path="java.util.Set"><c path="java.net.SocketOption"><d/></c></c></f>
			<meta><m n=":overload"/></meta>
		</supportedOptions>
		<getOption public="1" params="T" set="method">
			<f a="param1">
				<c path="java.net.SocketOption"><c path="getOption.T"/></c>
				<c path="getOption.T"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getOption>
		<setOption public="1" params="T" set="method">
			<f a="param1:param2">
				<c path="java.net.SocketOption"><c path="setOption.T"/></c>
				<c path="setOption.T"/>
				<c path="java.nio.channels.NetworkChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</setOption>
		<getLocalAddress public="1" set="method">
			<f a=""><c path="java.net.SocketAddress"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getLocalAddress>
		<bind public="1" set="method">
			<f a="param1">
				<c path="java.net.SocketAddress"/>
				<c path="java.nio.channels.NetworkChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</bind>
		<isOpen public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isOpen>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.Exception"</e></m>
			</meta>
		</close>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.NetworkChannel"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"NetworkChannel"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.MulticastChannel" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/MulticastChannel.class" extern="1" interface="1">
		<extends path="java.nio.channels.NetworkChannel"/>
		<join public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.net.InetAddress"/>
				<c path="java.net.NetworkInterface"/>
				<c path="java.net.InetAddress"/>
				<c path="java.nio.channels.MembershipKey"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><join public="1" set="method">
	<f a="param1:param2">
		<c path="java.net.InetAddress"/>
		<c path="java.net.NetworkInterface"/>
		<c path="java.nio.channels.MembershipKey"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</join></overloads>
		</join>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</close>
		<isOpen public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isOpen>
		<bind public="1" set="method">
			<f a="param1">
				<c path="java.net.SocketAddress"/>
				<c path="java.nio.channels.NetworkChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</bind>
		<getLocalAddress public="1" set="method">
			<f a=""><c path="java.net.SocketAddress"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getLocalAddress>
		<setOption public="1" params="T" set="method">
			<f a="param1:param2">
				<c path="java.net.SocketOption"><c path="setOption.T"/></c>
				<c path="setOption.T"/>
				<c path="java.nio.channels.NetworkChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</setOption>
		<getOption public="1" params="T" set="method">
			<f a="param1">
				<c path="java.net.SocketOption"><c path="getOption.T"/></c>
				<c path="getOption.T"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getOption>
		<supportedOptions public="1" set="method">
			<f a=""><c path="java.util.Set"><c path="java.net.SocketOption"><d/></c></c></f>
			<meta><m n=":overload"/></meta>
		</supportedOptions>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.MulticastChannel"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"MulticastChannel"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.DatagramChannel" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/DatagramChannel.class" extern="1">
		<extends path="java.nio.channels.spi.AbstractSelectableChannel"/>
		<implements path="java.nio.channels.ByteChannel"/>
		<implements path="java.nio.channels.ScatteringByteChannel"/>
		<implements path="java.nio.channels.GatheringByteChannel"/>
		<implements path="java.nio.channels.MulticastChannel"/>
		<open public="1" set="method" static="1">
			<f a="param1">
				<c path="java.net.ProtocolFamily"/>
				<c path="java.nio.channels.DatagramChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><open public="1" set="method">
	<f a=""><c path="java.nio.channels.DatagramChannel"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</open></overloads>
		</open>
		<bind public="1" set="method">
			<f a="param1">
				<c path="java.net.SocketAddress"/>
				<c path="java.nio.channels.DatagramChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</bind>
		<setOption public="1" set="method">
			<f a="param1:param2">
				<c path="java.net.SocketOption"><d/></c>
				<d/>
				<c path="java.nio.channels.NetworkChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><setOption public="1" params="T" set="method">
	<f a="param1:param2">
		<c path="java.net.SocketOption"><c path="setOption.T"/></c>
		<c path="setOption.T"/>
		<c path="java.nio.channels.DatagramChannel"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</setOption></overloads>
		</setOption>
		<write public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
			<overloads>
				<write public="1" set="method">
					<f a="param1">
						<c path="java.nio.ByteBuffer"/>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
				<write public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="haxe.Int64"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
			</overloads>
		</write>
		<read public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
			<overloads>
				<read public="1" set="method">
					<f a="param1">
						<c path="java.nio.ByteBuffer"/>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</read>
				<read public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="haxe.Int64"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</read>
			</overloads>
		</read>
		<send public="1" set="method">
			<f a="param1:param2">
				<c path="java.nio.ByteBuffer"/>
				<c path="java.net.SocketAddress"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</send>
		<receive public="1" set="method">
			<f a="param1">
				<c path="java.nio.ByteBuffer"/>
				<c path="java.net.SocketAddress"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</receive>
		<getRemoteAddress public="1" set="method">
			<f a=""><c path="java.net.SocketAddress"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getRemoteAddress>
		<disconnect public="1" set="method">
			<f a=""><c path="java.nio.channels.DatagramChannel"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</disconnect>
		<connect public="1" set="method">
			<f a="param1">
				<c path="java.net.SocketAddress"/>
				<c path="java.nio.channels.DatagramChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</connect>
		<isConnected public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isConnected>
		<socket public="1" set="method">
			<f a=""><c path="java.net.DatagramSocket"/></f>
			<meta><m n=":overload"/></meta>
		</socket>
		<validOps public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</validOps>
		<supportedOptions public="1" set="method">
			<f a=""><c path="java.util.Set"><c path="java.net.SocketOption"><d/></c></c></f>
			<meta><m n=":overload"/></meta>
		</supportedOptions>
		<getOption public="1" params="T" set="method">
			<f a="param1">
				<c path="java.net.SocketOption"><c path="getOption.T"/></c>
				<c path="getOption.T"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getOption>
		<getLocalAddress public="1" set="method">
			<f a=""><c path="java.net.SocketAddress"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getLocalAddress>
		<join public="1" set="method">
			<f a="param1:param2">
				<c path="java.net.InetAddress"/>
				<c path="java.net.NetworkInterface"/>
				<c path="java.nio.channels.MembershipKey"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><join public="1" set="method">
	<f a="param1:param2:param3">
		<c path="java.net.InetAddress"/>
		<c path="java.net.NetworkInterface"/>
		<c path="java.net.InetAddress"/>
		<c path="java.nio.channels.MembershipKey"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</join></overloads>
		</join>
		<new set="method">
			<f a="param1">
				<c path="java.nio.channels.spi.SelectorProvider"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.DatagramChannel"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"DatagramChannel"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.SeekableByteChannel" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/SeekableByteChannel.class" extern="1" interface="1">
		<extends path="java.nio.channels.ByteChannel"/>
		<truncate public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="java.nio.channels.SeekableByteChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</truncate>
		<size public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</size>
		<position public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="java.nio.channels.SeekableByteChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><position public="1" set="method">
	<f a=""><x path="haxe.Int64"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</position></overloads>
		</position>
		<write public="1" set="method">
			<f a="param1">
				<c path="java.nio.ByteBuffer"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</write>
		<read public="1" set="method">
			<f a="param1">
				<c path="java.nio.ByteBuffer"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</read>
		<isOpen public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isOpen>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.Exception"</e></m>
			</meta>
		</close>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.SeekableByteChannel"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"SeekableByteChannel"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.FileChannel" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/FileChannel.class" extern="1">
		<extends path="java.nio.channels.spi.AbstractInterruptibleChannel"/>
		<implements path="java.nio.channels.SeekableByteChannel"/>
		<implements path="java.nio.channels.GatheringByteChannel"/>
		<implements path="java.nio.channels.ScatteringByteChannel"/>
		<open public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="java.nio.file.Path"/>
				<c path="java.NativeArray"><c path="java.nio.file.OpenOption"/></c>
				<c path="java.nio.channels.FileChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><open public="1" set="method">
	<f a="param1:param2:param3">
		<c path="java.nio.file.Path"/>
		<c path="java.util.Set"><c path="java.nio.file.OpenOption"/></c>
		<c path="java.NativeArray"><c path="java.nio.file.attribute.FileAttribute"><d/></c></c>
		<c path="java.nio.channels.FileChannel"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</open></overloads>
		</open>
		<position public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="java.nio.channels.FileChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><position public="1" set="method">
	<f a=""><x path="haxe.Int64"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</position></overloads>
		</position>
		<truncate public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="java.nio.channels.FileChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</truncate>
		<tryLock public="1" set="method">
			<f a=""><c path="java.nio.channels.FileLock"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
			<overloads><tryLock public="1" set="method">
	<f a="param1:param2:param3">
		<x path="haxe.Int64"/>
		<x path="haxe.Int64"/>
		<x path="Bool"/>
		<c path="java.nio.channels.FileLock"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</tryLock></overloads>
		</tryLock>
		<lock public="1" set="method">
			<f a=""><c path="java.nio.channels.FileLock"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
			<overloads><lock public="1" set="method">
	<f a="param1:param2:param3">
		<x path="haxe.Int64"/>
		<x path="haxe.Int64"/>
		<x path="Bool"/>
		<c path="java.nio.channels.FileLock"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</lock></overloads>
		</lock>
		<map public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.nio.channels.FileChannel_MapMode"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<c path="java.nio.MappedByteBuffer"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</map>
		<write public="1" set="method">
			<f a="param1:param2">
				<c path="java.nio.ByteBuffer"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads>
				<write public="1" set="method">
					<f a="param1">
						<c path="java.nio.ByteBuffer"/>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
				<write public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="haxe.Int64"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
				<write public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
						<x path="haxe.Int64"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
						<m n=":final"/>
					</meta>
				</write>
			</overloads>
		</write>
		<read public="1" set="method">
			<f a="param1:param2">
				<c path="java.nio.ByteBuffer"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads>
				<read public="1" set="method">
					<f a="param1">
						<c path="java.nio.ByteBuffer"/>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</read>
				<read public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="haxe.Int64"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</read>
				<read public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
						<x path="haxe.Int64"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
						<m n=":final"/>
					</meta>
				</read>
			</overloads>
		</read>
		<transferFrom public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.nio.channels.ReadableByteChannel"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</transferFrom>
		<transferTo public="1" set="method">
			<f a="param1:param2:param3">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<c path="java.nio.channels.WritableByteChannel"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</transferTo>
		<force public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</force>
		<size public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</size>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.FileChannel"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"FileChannel"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.FileChannel_MapMode" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/FileChannel$MapMode.class" module="java.nio.channels.FileChannel" extern="1">
		<READ_ONLY public="1" static="1">
			<c path="java.nio.channels.FileChannel_MapMode"/>
			<meta><m n=":final"/></meta>
		</READ_ONLY>
		<READ_WRITE public="1" static="1">
			<c path="java.nio.channels.FileChannel_MapMode"/>
			<meta><m n=":final"/></meta>
		</READ_WRITE>
		<PRIVATE public="1" static="1">
			<c path="java.nio.channels.FileChannel_MapMode"/>
			<meta><m n=":final"/></meta>
		</PRIVATE>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.FileChannel$MapMode"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"FileChannel.MapMode"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.FileLock" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/FileLock.class" extern="1">
		<implements path="java.lang.AutoCloseable"/>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</toString>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</close>
		<release public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</release>
		<isValid public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isValid>
		<overlaps public="1" set="method">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</overlaps>
		<isShared public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</isShared>
		<size public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</size>
		<position public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</position>
		<acquiredBy public="1" set="method">
			<f a=""><c path="java.nio.channels.Channel"/></f>
			<meta><m n=":overload"/></meta>
		</acquiredBy>
		<channel public="1" set="method">
			<f a=""><c path="java.nio.channels.FileChannel"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</channel>
		<new set="method">
			<f a="param1:param2:param3:param4">
				<c path="java.nio.channels.AsynchronousFileChannel"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new set="method">
	<f a="param1:param2:param3:param4">
		<c path="java.nio.channels.FileChannel"/>
		<x path="haxe.Int64"/>
		<x path="haxe.Int64"/>
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.FileLock"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"FileLock"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.MembershipKey" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/MembershipKey.class" extern="1">
		<sourceAddress public="1" set="method">
			<f a=""><c path="java.net.InetAddress"/></f>
			<meta><m n=":overload"/></meta>
		</sourceAddress>
		<networkInterface public="1" set="method">
			<f a=""><c path="java.net.NetworkInterface"/></f>
			<meta><m n=":overload"/></meta>
		</networkInterface>
		<group public="1" set="method">
			<f a=""><c path="java.net.InetAddress"/></f>
			<meta><m n=":overload"/></meta>
		</group>
		<channel public="1" set="method">
			<f a=""><c path="java.nio.channels.MulticastChannel"/></f>
			<meta><m n=":overload"/></meta>
		</channel>
		<unblock public="1" set="method">
			<f a="param1">
				<c path="java.net.InetAddress"/>
				<c path="java.nio.channels.MembershipKey"/>
			</f>
			<meta><m n=":overload"/></meta>
		</unblock>
		<block public="1" set="method">
			<f a="param1">
				<c path="java.net.InetAddress"/>
				<c path="java.nio.channels.MembershipKey"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</block>
		<drop public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</drop>
		<isValid public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isValid>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.MembershipKey"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"MembershipKey"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.Pipe" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/Pipe.class" extern="1">
		<open public="1" set="method" static="1">
			<f a=""><c path="java.nio.channels.Pipe"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</open>
		<sink public="1" set="method">
			<f a=""><c path="java.nio.channels.Pipe_SinkChannel"/></f>
			<meta><m n=":overload"/></meta>
		</sink>
		<source public="1" set="method">
			<f a=""><c path="java.nio.channels.Pipe_SourceChannel"/></f>
			<meta><m n=":overload"/></meta>
		</source>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.Pipe"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"Pipe"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.Pipe_SourceChannel" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/Pipe$SourceChannel.class" module="java.nio.channels.Pipe" extern="1">
		<extends path="java.nio.channels.spi.AbstractSelectableChannel"/>
		<implements path="java.nio.channels.ReadableByteChannel"/>
		<implements path="java.nio.channels.ScatteringByteChannel"/>
		<validOps public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</validOps>
		<read public="1" set="method">
			<f a="param1">
				<c path="java.nio.ByteBuffer"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads>
				<read public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
						<x path="haxe.Int64"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</read>
				<read public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="haxe.Int64"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</read>
			</overloads>
		</read>
		<new set="method">
			<f a="param1">
				<c path="java.nio.channels.spi.SelectorProvider"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.Pipe$SourceChannel"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"Pipe.SourceChannel"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.Pipe_SinkChannel" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/Pipe$SinkChannel.class" module="java.nio.channels.Pipe" extern="1">
		<extends path="java.nio.channels.spi.AbstractSelectableChannel"/>
		<implements path="java.nio.channels.WritableByteChannel"/>
		<implements path="java.nio.channels.GatheringByteChannel"/>
		<validOps public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</validOps>
		<write public="1" set="method">
			<f a="param1">
				<c path="java.nio.ByteBuffer"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads>
				<write public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
						<x path="haxe.Int64"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
				<write public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="haxe.Int64"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
			</overloads>
		</write>
		<new set="method">
			<f a="param1">
				<c path="java.nio.channels.spi.SelectorProvider"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.Pipe$SinkChannel"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"Pipe.SinkChannel"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.SelectionKey" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/SelectionKey.class" extern="1">
		<OP_READ public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</OP_READ>
		<OP_WRITE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</OP_WRITE>
		<OP_CONNECT public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</OP_CONNECT>
		<OP_ACCEPT public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</OP_ACCEPT>
		<attachment public="1" set="method">
			<f a=""><d/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</attachment>
		<attach public="1" set="method">
			<f a="param1">
				<d/>
				<d/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</attach>
		<isAcceptable public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</isAcceptable>
		<isConnectable public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</isConnectable>
		<isWritable public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</isWritable>
		<isReadable public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</isReadable>
		<readyOps public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</readyOps>
		<interestOps public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.nio.channels.SelectionKey"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><interestOps public="1" set="method">
	<f a=""><x path="Int"/></f>
	<meta><m n=":overload"/></meta>
</interestOps></overloads>
		</interestOps>
		<cancel public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</cancel>
		<isValid public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isValid>
		<selector public="1" set="method">
			<f a=""><c path="java.nio.channels.Selector"/></f>
			<meta><m n=":overload"/></meta>
		</selector>
		<channel public="1" set="method">
			<f a=""><c path="java.nio.channels.SelectableChannel"/></f>
			<meta><m n=":overload"/></meta>
		</channel>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.SelectionKey"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"SelectionKey"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.Selector" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/Selector.class" extern="1">
		<implements path="java.io.Closeable"/>
		<open public="1" set="method" static="1">
			<f a=""><c path="java.nio.channels.Selector"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</open>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</close>
		<wakeup public="1" set="method">
			<f a=""><c path="java.nio.channels.Selector"/></f>
			<meta><m n=":overload"/></meta>
		</wakeup>
		<select public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><select public="1" set="method">
	<f a="param1">
		<x path="haxe.Int64"/>
		<x path="Int"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</select></overloads>
		</select>
		<selectNow public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</selectNow>
		<selectedKeys public="1" set="method">
			<f a=""><c path="java.util.Set"><c path="java.nio.channels.SelectionKey"/></c></f>
			<meta><m n=":overload"/></meta>
		</selectedKeys>
		<keys public="1" set="method">
			<f a=""><c path="java.util.Set"><c path="java.nio.channels.SelectionKey"/></c></f>
			<meta><m n=":overload"/></meta>
		</keys>
		<provider public="1" set="method">
			<f a=""><c path="java.nio.channels.spi.SelectorProvider"/></f>
			<meta><m n=":overload"/></meta>
		</provider>
		<isOpen public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isOpen>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.Selector"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"Selector"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.ServerSocketChannel" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/ServerSocketChannel.class" extern="1">
		<extends path="java.nio.channels.spi.AbstractSelectableChannel"/>
		<implements path="java.nio.channels.NetworkChannel"/>
		<open public="1" set="method" static="1">
			<f a=""><c path="java.nio.channels.ServerSocketChannel"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</open>
		<bind public="1" set="method">
			<f a="param1">
				<c path="java.net.SocketAddress"/>
				<c path="java.nio.channels.ServerSocketChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
			<overloads><bind public="1" set="method">
	<f a="param1:param2">
		<c path="java.net.SocketAddress"/>
		<x path="Int"/>
		<c path="java.nio.channels.ServerSocketChannel"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</bind></overloads>
		</bind>
		<setOption public="1" set="method">
			<f a="param1:param2">
				<c path="java.net.SocketOption"><d/></c>
				<d/>
				<c path="java.nio.channels.NetworkChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><setOption public="1" params="T" set="method">
	<f a="param1:param2">
		<c path="java.net.SocketOption"><c path="setOption.T"/></c>
		<c path="setOption.T"/>
		<c path="java.nio.channels.ServerSocketChannel"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</setOption></overloads>
		</setOption>
		<accept public="1" set="method">
			<f a=""><c path="java.nio.channels.SocketChannel"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</accept>
		<socket public="1" set="method">
			<f a=""><c path="java.net.ServerSocket"/></f>
			<meta><m n=":overload"/></meta>
		</socket>
		<validOps public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</validOps>
		<getLocalAddress public="1" set="method">
			<f a=""><c path="java.net.SocketAddress"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getLocalAddress>
		<getOption public="1" params="T" set="method">
			<f a="param1">
				<c path="java.net.SocketOption"><c path="getOption.T"/></c>
				<c path="getOption.T"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getOption>
		<supportedOptions public="1" set="method">
			<f a=""><c path="java.util.Set"><c path="java.net.SocketOption"><d/></c></c></f>
			<meta><m n=":overload"/></meta>
		</supportedOptions>
		<new set="method">
			<f a="param1">
				<c path="java.nio.channels.spi.SelectorProvider"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.ServerSocketChannel"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"ServerSocketChannel"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.SocketChannel" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/SocketChannel.class" extern="1">
		<extends path="java.nio.channels.spi.AbstractSelectableChannel"/>
		<implements path="java.nio.channels.ByteChannel"/>
		<implements path="java.nio.channels.ScatteringByteChannel"/>
		<implements path="java.nio.channels.GatheringByteChannel"/>
		<implements path="java.nio.channels.NetworkChannel"/>
		<open public="1" set="method" static="1">
			<f a="param1">
				<c path="java.net.SocketAddress"/>
				<c path="java.nio.channels.SocketChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><open public="1" set="method">
	<f a=""><c path="java.nio.channels.SocketChannel"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</open></overloads>
		</open>
		<bind public="1" set="method">
			<f a="param1">
				<c path="java.net.SocketAddress"/>
				<c path="java.nio.channels.SocketChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</bind>
		<setOption public="1" set="method">
			<f a="param1:param2">
				<c path="java.net.SocketOption"><d/></c>
				<d/>
				<c path="java.nio.channels.NetworkChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><setOption public="1" params="T" set="method">
	<f a="param1:param2">
		<c path="java.net.SocketOption"><c path="setOption.T"/></c>
		<c path="setOption.T"/>
		<c path="java.nio.channels.SocketChannel"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</setOption></overloads>
		</setOption>
		<write public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
			<overloads>
				<write public="1" set="method">
					<f a="param1">
						<c path="java.nio.ByteBuffer"/>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
				<write public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="haxe.Int64"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</write>
			</overloads>
		</write>
		<read public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
			<overloads>
				<read public="1" set="method">
					<f a="param1">
						<c path="java.nio.ByteBuffer"/>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</read>
				<read public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><c path="java.nio.ByteBuffer"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="haxe.Int64"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.io.IOException"</e></m>
					</meta>
				</read>
			</overloads>
		</read>
		<getRemoteAddress public="1" set="method">
			<f a=""><c path="java.net.SocketAddress"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getRemoteAddress>
		<finishConnect public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</finishConnect>
		<connect public="1" set="method">
			<f a="param1">
				<c path="java.net.SocketAddress"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</connect>
		<isConnectionPending public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isConnectionPending>
		<isConnected public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isConnected>
		<socket public="1" set="method">
			<f a=""><c path="java.net.Socket"/></f>
			<meta><m n=":overload"/></meta>
		</socket>
		<shutdownOutput public="1" set="method">
			<f a=""><c path="java.nio.channels.SocketChannel"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</shutdownOutput>
		<shutdownInput public="1" set="method">
			<f a=""><c path="java.nio.channels.SocketChannel"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</shutdownInput>
		<validOps public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</validOps>
		<getLocalAddress public="1" set="method">
			<f a=""><c path="java.net.SocketAddress"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getLocalAddress>
		<getOption public="1" params="T" set="method">
			<f a="param1">
				<c path="java.net.SocketOption"><c path="getOption.T"/></c>
				<c path="getOption.T"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getOption>
		<supportedOptions public="1" set="method">
			<f a=""><c path="java.util.Set"><c path="java.net.SocketOption"><d/></c></c></f>
			<meta><m n=":overload"/></meta>
		</supportedOptions>
		<new set="method">
			<f a="param1">
				<c path="java.nio.channels.spi.SelectorProvider"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.SocketChannel"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels"</e>
				<e>"SocketChannel"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.spi.AbstractSelectionKey" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/spi/AbstractSelectionKey.class" extern="1">
		<extends path="java.nio.channels.SelectionKey"/>
		<cancel public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</cancel>
		<isValid public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</isValid>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.spi.AbstractSelectionKey"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels.spi"</e>
				<e>"AbstractSelectionKey"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.spi.AbstractSelector" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/spi/AbstractSelector.class" extern="1">
		<extends path="java.nio.channels.Selector"/>
		<end set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</end>
		<begin set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</begin>
		<deregister set="method">
			<f a="param1">
				<c path="java.nio.channels.spi.AbstractSelectionKey"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</deregister>
		<register set="method">
			<f a="param1:param2:param3">
				<c path="java.nio.channels.spi.AbstractSelectableChannel"/>
				<x path="Int"/>
				<d/>
				<c path="java.nio.channels.SelectionKey"/>
			</f>
			<meta><m n=":overload"/></meta>
		</register>
		<cancelledKeys set="method">
			<f a=""><c path="java.util.Set"><c path="java.nio.channels.SelectionKey"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</cancelledKeys>
		<provider public="1" set="method" override="1">
			<f a=""><c path="java.nio.channels.spi.SelectorProvider"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</provider>
		<isOpen public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</isOpen>
		<implCloseSelector set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</implCloseSelector>
		<close public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":final"/>
			</meta>
		</close>
		<new set="method">
			<f a="param1">
				<c path="java.nio.channels.spi.SelectorProvider"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.spi.AbstractSelector"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels.spi"</e>
				<e>"AbstractSelector"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.channels.spi.SelectorProvider" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/channels/spi/SelectorProvider.class" extern="1">
		<provider public="1" set="method" static="1">
			<f a=""><c path="java.nio.channels.spi.SelectorProvider"/></f>
			<meta><m n=":overload"/></meta>
		</provider>
		<inheritedChannel public="1" set="method">
			<f a=""><c path="java.nio.channels.Channel"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</inheritedChannel>
		<openSocketChannel public="1" set="method">
			<f a=""><c path="java.nio.channels.SocketChannel"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</openSocketChannel>
		<openServerSocketChannel public="1" set="method">
			<f a=""><c path="java.nio.channels.ServerSocketChannel"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</openServerSocketChannel>
		<openSelector public="1" set="method">
			<f a=""><c path="java.nio.channels.spi.AbstractSelector"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</openSelector>
		<openPipe public="1" set="method">
			<f a=""><c path="java.nio.channels.Pipe"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</openPipe>
		<openDatagramChannel public="1" set="method">
			<f a="param1">
				<c path="java.net.ProtocolFamily"/>
				<c path="java.nio.channels.DatagramChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><openDatagramChannel public="1" set="method">
	<f a=""><c path="java.nio.channels.DatagramChannel"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</openDatagramChannel></overloads>
		</openDatagramChannel>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.channels.spi.SelectorProvider"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.channels.spi"</e>
				<e>"SelectorProvider"</e>
			</m>
		</meta>
	</class>
	<enum path="java.nio.file.AccessMode" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/AccessMode.class">
		<EXECUTE/>
		<WRITE/>
		<READ/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":javaCanonical">
				<e>"java.nio.file"</e>
				<e>"AccessMode"</e>
			</m>
			<m n=":native"><e>"java.nio.file.AccessMode"</e></m>
		</meta>
	</enum>
	<class path="java.nio.file.CopyOption" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/CopyOption.class" extern="1" interface="1"><meta>
	<m n=":abstract"/>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.nio.file.CopyOption"</e></m>
	<m n=":javaCanonical">
		<e>"java.nio.file"</e>
		<e>"CopyOption"</e>
	</m>
</meta></class>
	<class path="java.nio.file.DirectoryStream" params="T" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/DirectoryStream.class" extern="1" interface="1">
		<extends path="java.lang.Iterable"><c path="java.nio.file.DirectoryStream.T"/></extends>
		<extends path="java.io.Closeable"/>
		<iterator public="1" set="method">
			<f a=""><c path="java.util.Iterator"><c path="java.nio.file.DirectoryStream.T"/></c></f>
			<meta><m n=":overload"/></meta>
		</iterator>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.Exception"</e></m>
			</meta>
		</close>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.DirectoryStream"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file"</e>
				<e>"DirectoryStream"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.DirectoryStream_Filter" params="T" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/DirectoryStream$Filter.class" module="java.nio.file.DirectoryStream" extern="1" interface="1">
		<accept public="1" set="method">
			<f a="param1">
				<c path="java.nio.file.DirectoryStream_Filter.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</accept>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.DirectoryStream$Filter"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file"</e>
				<e>"DirectoryStream.Filter"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.FileStore" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/FileStore.class" extern="1">
		<getAttribute public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<d/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getAttribute>
		<getFileStoreAttributeView public="1" params="V" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="getFileStoreAttributeView.V"/></c>
				<c path="getFileStoreAttributeView.V"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getFileStoreAttributeView>
		<supportsFileAttributeView public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><supportsFileAttributeView public="1" set="method">
	<f a="param1">
		<c path="java.lang.Class"><c path="java.nio.file.attribute.FileAttributeView"/></c>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</supportsFileAttributeView></overloads>
		</supportsFileAttributeView>
		<getUnallocatedSpace public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getUnallocatedSpace>
		<getUsableSpace public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getUsableSpace>
		<getTotalSpace public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getTotalSpace>
		<isReadOnly public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isReadOnly>
		<type public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</type>
		<name public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</name>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.FileStore"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file"</e>
				<e>"FileStore"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.FileSystem" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/FileSystem.class" extern="1">
		<implements path="java.io.Closeable"/>
		<newWatchService public="1" set="method">
			<f a=""><c path="java.nio.file.WatchService"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</newWatchService>
		<getUserPrincipalLookupService public="1" set="method">
			<f a=""><c path="java.nio.file.attribute.UserPrincipalLookupService"/></f>
			<meta><m n=":overload"/></meta>
		</getUserPrincipalLookupService>
		<getPathMatcher public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.nio.file.PathMatcher"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getPathMatcher>
		<getPath public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.NativeArray"><c path="String"/></c>
				<c path="java.nio.file.Path"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getPath>
		<supportedFileAttributeViews public="1" set="method">
			<f a=""><c path="java.util.Set"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</supportedFileAttributeViews>
		<getFileStores public="1" set="method">
			<f a=""><c path="java.lang.Iterable"><c path="java.nio.file.FileStore"/></c></f>
			<meta><m n=":overload"/></meta>
		</getFileStores>
		<getRootDirectories public="1" set="method">
			<f a=""><c path="java.lang.Iterable"><c path="java.nio.file.Path"/></c></f>
			<meta><m n=":overload"/></meta>
		</getRootDirectories>
		<getSeparator public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getSeparator>
		<isReadOnly public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isReadOnly>
		<isOpen public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isOpen>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</close>
		<provider public="1" set="method">
			<f a=""><c path="java.nio.file.spi.FileSystemProvider"/></f>
			<meta><m n=":overload"/></meta>
		</provider>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.FileSystem"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file"</e>
				<e>"FileSystem"</e>
			</m>
		</meta>
	</class>
	<enum path="java.nio.file.LinkOption" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/LinkOption.class">
		<NOFOLLOW_LINKS/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":javaCanonical">
				<e>"java.nio.file"</e>
				<e>"LinkOption"</e>
			</m>
			<m n=":native"><e>"java.nio.file.LinkOption"</e></m>
		</meta>
	</enum>
	<class path="java.nio.file.OpenOption" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/OpenOption.class" extern="1" interface="1"><meta>
	<m n=":abstract"/>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.nio.file.OpenOption"</e></m>
	<m n=":javaCanonical">
		<e>"java.nio.file"</e>
		<e>"OpenOption"</e>
	</m>
</meta></class>
	<class path="java.nio.file.Watchable" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/Watchable.class" extern="1" interface="1">
		<register public="1" set="method">
			<f a="param1:param2">
				<c path="java.nio.file.WatchService"/>
				<c path="java.NativeArray"><c path="java.nio.file.WatchEvent_Kind"><d/></c></c>
				<c path="java.nio.file.WatchKey"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><register public="1" set="method">
	<f a="param1:param2:param3">
		<c path="java.nio.file.WatchService"/>
		<c path="java.NativeArray"><c path="java.nio.file.WatchEvent_Kind"><d/></c></c>
		<c path="java.NativeArray"><c path="java.nio.file.WatchEvent_Modifier"/></c>
		<c path="java.nio.file.WatchKey"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</register></overloads>
		</register>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.Watchable"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file"</e>
				<e>"Watchable"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.Path" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/Path.class" extern="1" interface="1">
		<extends path="java.nio.file.Watchable"/>
		<extends path="java.lang.Iterable"><c path="java.nio.file.Path"/></extends>
		<extends path="java.lang.Comparable"><c path="java.nio.file.Path"/></extends>
		<compareTo public="1" set="method">
			<f a="param1">
				<c path="java.nio.file.Path"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</compareTo>
		<iterator public="1" set="method">
			<f a=""><c path="java.util.Iterator"><c path="java.nio.file.Path"/></c></f>
			<meta><m n=":overload"/></meta>
		</iterator>
		<register public="1" set="method">
			<f a="param1:param2">
				<c path="java.nio.file.WatchService"/>
				<c path="java.NativeArray"><c path="java.nio.file.WatchEvent_Kind"><d/></c></c>
				<c path="java.nio.file.WatchKey"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><register public="1" set="method">
	<f a="param1:param2:param3">
		<c path="java.nio.file.WatchService"/>
		<c path="java.NativeArray"><c path="java.nio.file.WatchEvent_Kind"><d/></c></c>
		<c path="java.NativeArray"><c path="java.nio.file.WatchEvent_Modifier"/></c>
		<c path="java.nio.file.WatchKey"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</register></overloads>
		</register>
		<toFile public="1" set="method">
			<f a=""><c path="java.io.File"/></f>
			<meta><m n=":overload"/></meta>
		</toFile>
		<toRealPath public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><e path="java.nio.file.LinkOption"/></c>
				<c path="java.nio.file.Path"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</toRealPath>
		<toAbsolutePath public="1" set="method">
			<f a=""><c path="java.nio.file.Path"/></f>
			<meta><m n=":overload"/></meta>
		</toAbsolutePath>
		<toUri public="1" set="method">
			<f a=""><c path="java.net.URI"/></f>
			<meta><m n=":overload"/></meta>
		</toUri>
		<relativize public="1" set="method">
			<f a="param1">
				<c path="java.nio.file.Path"/>
				<c path="java.nio.file.Path"/>
			</f>
			<meta><m n=":overload"/></meta>
		</relativize>
		<resolveSibling public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.nio.file.Path"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><resolveSibling public="1" set="method">
	<f a="param1">
		<c path="java.nio.file.Path"/>
		<c path="java.nio.file.Path"/>
	</f>
	<meta><m n=":overload"/></meta>
</resolveSibling></overloads>
		</resolveSibling>
		<resolve public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.nio.file.Path"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><resolve public="1" set="method">
	<f a="param1">
		<c path="java.nio.file.Path"/>
		<c path="java.nio.file.Path"/>
	</f>
	<meta><m n=":overload"/></meta>
</resolve></overloads>
		</resolve>
		<normalize public="1" set="method">
			<f a=""><c path="java.nio.file.Path"/></f>
			<meta><m n=":overload"/></meta>
		</normalize>
		<endsWith public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><endsWith public="1" set="method">
	<f a="param1">
		<c path="java.nio.file.Path"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</endsWith></overloads>
		</endsWith>
		<startsWith public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><startsWith public="1" set="method">
	<f a="param1">
		<c path="java.nio.file.Path"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</startsWith></overloads>
		</startsWith>
		<subpath public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.nio.file.Path"/>
			</f>
			<meta><m n=":overload"/></meta>
		</subpath>
		<getName public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.nio.file.Path"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getName>
		<getNameCount public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getNameCount>
		<getParent public="1" set="method">
			<f a=""><c path="java.nio.file.Path"/></f>
			<meta><m n=":overload"/></meta>
		</getParent>
		<getFileName public="1" set="method">
			<f a=""><c path="java.nio.file.Path"/></f>
			<meta><m n=":overload"/></meta>
		</getFileName>
		<getRoot public="1" set="method">
			<f a=""><c path="java.nio.file.Path"/></f>
			<meta><m n=":overload"/></meta>
		</getRoot>
		<isAbsolute public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isAbsolute>
		<getFileSystem public="1" set="method">
			<f a=""><c path="java.nio.file.FileSystem"/></f>
			<meta><m n=":overload"/></meta>
		</getFileSystem>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.Path"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file"</e>
				<e>"Path"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.PathMatcher" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/PathMatcher.class" extern="1" interface="1">
		<matches public="1" set="method">
			<f a="param1">
				<c path="java.nio.file.Path"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</matches>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.PathMatcher"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file"</e>
				<e>"PathMatcher"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.WatchEvent" params="T" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/WatchEvent.class" extern="1" interface="1">
		<context public="1" set="method">
			<f a=""><c path="java.nio.file.WatchEvent.T"/></f>
			<meta><m n=":overload"/></meta>
		</context>
		<count public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</count>
		<kind public="1" set="method">
			<f a=""><c path="java.nio.file.WatchEvent_Kind"><c path="java.nio.file.WatchEvent.T"/></c></f>
			<meta><m n=":overload"/></meta>
		</kind>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.WatchEvent"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file"</e>
				<e>"WatchEvent"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.WatchEvent_Kind" params="T" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/WatchEvent$Kind.class" module="java.nio.file.WatchEvent" extern="1" interface="1">
		<type public="1" set="method">
			<f a=""><c path="java.lang.Class"><c path="java.nio.file.WatchEvent_Kind.T"/></c></f>
			<meta><m n=":overload"/></meta>
		</type>
		<name public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</name>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.WatchEvent$Kind"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file"</e>
				<e>"WatchEvent.Kind"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.WatchEvent_Modifier" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/WatchEvent$Modifier.class" module="java.nio.file.WatchEvent" extern="1" interface="1">
		<name public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</name>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.WatchEvent$Modifier"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file"</e>
				<e>"WatchEvent.Modifier"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.WatchKey" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/WatchKey.class" extern="1" interface="1">
		<watchable public="1" set="method">
			<f a=""><c path="java.nio.file.Watchable"/></f>
			<meta><m n=":overload"/></meta>
		</watchable>
		<cancel public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</cancel>
		<reset public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</reset>
		<pollEvents public="1" set="method">
			<f a=""><c path="java.util.List"><c path="java.nio.file.WatchEvent"><d/></c></c></f>
			<meta><m n=":overload"/></meta>
		</pollEvents>
		<isValid public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isValid>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.WatchKey"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file"</e>
				<e>"WatchKey"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.WatchService" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/WatchService.class" extern="1" interface="1">
		<extends path="java.io.Closeable"/>
		<take public="1" set="method">
			<f a=""><c path="java.nio.file.WatchKey"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
			</meta>
		</take>
		<poll public="1" set="method">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<e path="java.util.concurrent.TimeUnit"/>
				<c path="java.nio.file.WatchKey"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
			</meta>
			<overloads><poll public="1" set="method">
	<f a=""><c path="java.nio.file.WatchKey"/></f>
	<meta><m n=":overload"/></meta>
</poll></overloads>
		</poll>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</close>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.WatchService"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file"</e>
				<e>"WatchService"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.attribute.AttributeView" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/attribute/AttributeView.class" extern="1" interface="1">
		<name public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</name>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.attribute.AttributeView"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file.attribute"</e>
				<e>"AttributeView"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.attribute.BasicFileAttributes" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/attribute/BasicFileAttributes.class" extern="1" interface="1">
		<fileKey public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</fileKey>
		<size public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</size>
		<isOther public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isOther>
		<isSymbolicLink public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isSymbolicLink>
		<isDirectory public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isDirectory>
		<isRegularFile public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isRegularFile>
		<creationTime public="1" set="method">
			<f a=""><c path="java.nio.file.attribute.FileTime"/></f>
			<meta><m n=":overload"/></meta>
		</creationTime>
		<lastAccessTime public="1" set="method">
			<f a=""><c path="java.nio.file.attribute.FileTime"/></f>
			<meta><m n=":overload"/></meta>
		</lastAccessTime>
		<lastModifiedTime public="1" set="method">
			<f a=""><c path="java.nio.file.attribute.FileTime"/></f>
			<meta><m n=":overload"/></meta>
		</lastModifiedTime>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.attribute.BasicFileAttributes"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file.attribute"</e>
				<e>"BasicFileAttributes"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.attribute.FileAttribute" params="T" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/attribute/FileAttribute.class" extern="1" interface="1">
		<value public="1" set="method">
			<f a=""><c path="java.nio.file.attribute.FileAttribute.T"/></f>
			<meta><m n=":overload"/></meta>
		</value>
		<name public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</name>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.attribute.FileAttribute"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file.attribute"</e>
				<e>"FileAttribute"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.attribute.FileAttributeView" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/attribute/FileAttributeView.class" extern="1" interface="1">
		<extends path="java.nio.file.attribute.AttributeView"/>
		<name public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</name>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.attribute.FileAttributeView"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file.attribute"</e>
				<e>"FileAttributeView"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.attribute.FileStoreAttributeView" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/attribute/FileStoreAttributeView.class" extern="1" interface="1">
		<extends path="java.nio.file.attribute.AttributeView"/>
		<name public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</name>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.attribute.FileStoreAttributeView"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file.attribute"</e>
				<e>"FileStoreAttributeView"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.attribute.FileTime" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/attribute/FileTime.class" extern="1">
		<implements path="java.lang.Comparable"><c path="java.nio.file.attribute.FileTime"/></implements>
		<fromMillis public="1" set="method" static="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="java.nio.file.attribute.FileTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</fromMillis>
		<from public="1" set="method" static="1">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<e path="java.util.concurrent.TimeUnit"/>
				<c path="java.nio.file.attribute.FileTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</from>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<c path="java.nio.file.attribute.FileTime"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<toMillis public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</toMillis>
		<to public="1" set="method">
			<f a="param1">
				<e path="java.util.concurrent.TimeUnit"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</to>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.attribute.FileTime"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file.attribute"</e>
				<e>"FileTime"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.attribute.FileTime_DaysAndNanos" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/attribute/FileTime$DaysAndNanos.class" module="java.nio.file.attribute.FileTime" extern="1">
		<implements path="java.lang.Comparable"><c path="java.nio.file.attribute.FileTime_DaysAndNanos"/></implements>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<c path="java.nio.file.attribute.FileTime_DaysAndNanos"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.attribute.FileTime$DaysAndNanos"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file.attribute"</e>
				<e>"FileTime.DaysAndNanos"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.attribute.FileTime_1" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/attribute/FileTime$1.class" module="java.nio.file.attribute.FileTime" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.nio.file.attribute.FileTime$1"</e></m>
	<m n=":javaCanonical">
		<e>"java.nio.file.attribute"</e>
		<e>"FileTime.1"</e>
	</m>
</meta></class>
	<class path="java.security.Principal" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/security/Principal.class" extern="1" interface="1">
		<getName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getName>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.Principal"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"Principal"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.attribute.UserPrincipal" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/attribute/UserPrincipal.class" extern="1" interface="1">
		<extends path="java.security.Principal"/>
		<getName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getName>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.attribute.UserPrincipal"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file.attribute"</e>
				<e>"UserPrincipal"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.attribute.GroupPrincipal" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/attribute/GroupPrincipal.class" extern="1" interface="1">
		<extends path="java.nio.file.attribute.UserPrincipal"/>
		<getName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getName>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.attribute.GroupPrincipal"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file.attribute"</e>
				<e>"GroupPrincipal"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.attribute.UserPrincipalLookupService" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/attribute/UserPrincipalLookupService.class" extern="1">
		<lookupPrincipalByGroupName public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.nio.file.attribute.GroupPrincipal"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</lookupPrincipalByGroupName>
		<lookupPrincipalByName public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.nio.file.attribute.UserPrincipal"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</lookupPrincipalByName>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.attribute.UserPrincipalLookupService"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file.attribute"</e>
				<e>"UserPrincipalLookupService"</e>
			</m>
		</meta>
	</class>
	<class path="java.nio.file.spi.FileSystemProvider" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/nio/file/spi/FileSystemProvider.class" extern="1">
		<installedProviders public="1" set="method" static="1">
			<f a=""><c path="java.util.List"><c path="java.nio.file.spi.FileSystemProvider"/></c></f>
			<meta><m n=":overload"/></meta>
		</installedProviders>
		<setAttribute public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="java.nio.file.Path"/>
				<c path="String"/>
				<d/>
				<c path="java.NativeArray"><e path="java.nio.file.LinkOption"/></c>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</setAttribute>
		<readAttributes public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.nio.file.Path"/>
				<c path="String"/>
				<c path="java.NativeArray"><e path="java.nio.file.LinkOption"/></c>
				<c path="java.util.Map">
					<c path="String"/>
					<d/>
				</c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><readAttributes public="1" params="A" set="method">
	<f a="param1:param2:param3">
		<c path="java.nio.file.Path"/>
		<c path="java.lang.Class"><c path="readAttributes.A"/></c>
		<c path="java.NativeArray"><e path="java.nio.file.LinkOption"/></c>
		<c path="readAttributes.A"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</readAttributes></overloads>
		</readAttributes>
		<getFileAttributeView public="1" params="V" set="method">
			<f a="param1:param2:param3">
				<c path="java.nio.file.Path"/>
				<c path="java.lang.Class"><c path="getFileAttributeView.V"/></c>
				<c path="java.NativeArray"><e path="java.nio.file.LinkOption"/></c>
				<c path="getFileAttributeView.V"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getFileAttributeView>
		<checkAccess public="1" set="method">
			<f a="param1:param2">
				<c path="java.nio.file.Path"/>
				<c path="java.NativeArray"><e path="java.nio.file.AccessMode"/></c>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</checkAccess>
		<getFileStore public="1" set="method">
			<f a="param1">
				<c path="java.nio.file.Path"/>
				<c path="java.nio.file.FileStore"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</getFileStore>
		<isHidden public="1" set="method">
			<f a="param1">
				<c path="java.nio.file.Path"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</isHidden>
		<isSameFile public="1" set="method">
			<f a="param1:param2">
				<c path="java.nio.file.Path"/>
				<c path="java.nio.file.Path"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</isSameFile>
		<move public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.nio.file.Path"/>
				<c path="java.nio.file.Path"/>
				<c path="java.NativeArray"><c path="java.nio.file.CopyOption"/></c>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</move>
		<copy public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.nio.file.Path"/>
				<c path="java.nio.file.Path"/>
				<c path="java.NativeArray"><c path="java.nio.file.CopyOption"/></c>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</copy>
		<readSymbolicLink public="1" set="method">
			<f a="param1">
				<c path="java.nio.file.Path"/>
				<c path="java.nio.file.Path"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</readSymbolicLink>
		<deleteIfExists public="1" set="method">
			<f a="param1">
				<c path="java.nio.file.Path"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</deleteIfExists>
		<delete public="1" set="method">
			<f a="param1">
				<c path="java.nio.file.Path"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</delete>
		<createLink public="1" set="method">
			<f a="param1:param2">
				<c path="java.nio.file.Path"/>
				<c path="java.nio.file.Path"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</createLink>
		<createSymbolicLink public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.nio.file.Path"/>
				<c path="java.nio.file.Path"/>
				<c path="java.NativeArray"><c path="java.nio.file.attribute.FileAttribute"><d/></c></c>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</createSymbolicLink>
		<createDirectory public="1" set="method">
			<f a="param1:param2">
				<c path="java.nio.file.Path"/>
				<c path="java.NativeArray"><c path="java.nio.file.attribute.FileAttribute"><d/></c></c>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</createDirectory>
		<newDirectoryStream public="1" set="method">
			<f a="param1:param2">
				<c path="java.nio.file.Path"/>
				<c path="java.nio.file.DirectoryStream_Filter"><d/></c>
				<c path="java.nio.file.DirectoryStream"><c path="java.nio.file.Path"/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</newDirectoryStream>
		<newByteChannel public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.nio.file.Path"/>
				<c path="java.util.Set"><c path="java.nio.file.OpenOption"/></c>
				<c path="java.NativeArray"><c path="java.nio.file.attribute.FileAttribute"><d/></c></c>
				<c path="java.nio.channels.SeekableByteChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</newByteChannel>
		<newAsynchronousFileChannel public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="java.nio.file.Path"/>
				<c path="java.util.Set"><c path="java.nio.file.OpenOption"/></c>
				<c path="java.util.concurrent.ExecutorService"/>
				<c path="java.NativeArray"><c path="java.nio.file.attribute.FileAttribute"><d/></c></c>
				<c path="java.nio.channels.AsynchronousFileChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</newAsynchronousFileChannel>
		<newFileChannel public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.nio.file.Path"/>
				<c path="java.util.Set"><c path="java.nio.file.OpenOption"/></c>
				<c path="java.NativeArray"><c path="java.nio.file.attribute.FileAttribute"><d/></c></c>
				<c path="java.nio.channels.FileChannel"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</newFileChannel>
		<newOutputStream public="1" set="method">
			<f a="param1:param2">
				<c path="java.nio.file.Path"/>
				<c path="java.NativeArray"><c path="java.nio.file.OpenOption"/></c>
				<c path="java.io.OutputStream"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</newOutputStream>
		<newInputStream public="1" set="method">
			<f a="param1:param2">
				<c path="java.nio.file.Path"/>
				<c path="java.NativeArray"><c path="java.nio.file.OpenOption"/></c>
				<c path="java.io.InputStream"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</newInputStream>
		<newFileSystem public="1" set="method">
			<f a="param1:param2">
				<c path="java.nio.file.Path"/>
				<c path="java.util.Map">
					<c path="String"/>
					<d/>
				</c>
				<c path="java.nio.file.FileSystem"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><newFileSystem public="1" set="method">
	<f a="param1:param2">
		<c path="java.net.URI"/>
		<c path="java.util.Map">
			<c path="String"/>
			<d/>
		</c>
		<c path="java.nio.file.FileSystem"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</newFileSystem></overloads>
		</newFileSystem>
		<getPath public="1" set="method">
			<f a="param1">
				<c path="java.net.URI"/>
				<c path="java.nio.file.Path"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getPath>
		<getFileSystem public="1" set="method">
			<f a="param1">
				<c path="java.net.URI"/>
				<c path="java.nio.file.FileSystem"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getFileSystem>
		<getScheme public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getScheme>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.nio.file.spi.FileSystemProvider"</e></m>
			<m n=":javaCanonical">
				<e>"java.nio.file.spi"</e>
				<e>"FileSystemProvider"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.CodeSigner" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/security/CodeSigner.class" extern="1">
		<implements path="java.io.Serializable"/>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<getTimestamp public="1" set="method">
			<f a=""><c path="java.security.Timestamp"/></f>
			<meta><m n=":overload"/></meta>
		</getTimestamp>
		<getSignerCertPath public="1" set="method">
			<f a=""><c path="java.security.cert.CertPath"/></f>
			<meta><m n=":overload"/></meta>
		</getSignerCertPath>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.security.cert.CertPath"/>
				<c path="java.security.Timestamp"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.CodeSigner"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"CodeSigner"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.CodeSource" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/security/CodeSource.class" extern="1">
		<implements path="java.io.Serializable"/>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<implies public="1" set="method">
			<f a="param1">
				<c path="java.security.CodeSource"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</implies>
		<getCodeSigners public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.security.CodeSigner"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getCodeSigners>
		<getCertificates public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.security.cert.Certificate"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getCertificates>
		<getLocation public="1" set="method">
			<f a=""><c path="java.net.URL"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getLocation>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.net.URL"/>
				<c path="java.NativeArray"><c path="java.security.CodeSigner"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1:param2">
		<c path="java.net.URL"/>
		<c path="java.NativeArray"><c path="java.security.cert.Certificate"/></c>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.CodeSource"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"CodeSource"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.GeneralSecurityException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/security/GeneralSecurityException.class" extern="1">
		<extends path="java.lang.Exception"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.GeneralSecurityException"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"GeneralSecurityException"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.Guard" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/security/Guard.class" extern="1" interface="1">
		<checkGuard public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
			</meta>
		</checkGuard>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.Guard"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"Guard"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.KeyException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/security/KeyException.class" extern="1">
		<extends path="java.security.GeneralSecurityException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.KeyException"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"KeyException"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.InvalidKeyException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/security/InvalidKeyException.class" extern="1">
		<extends path="java.security.KeyException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.InvalidKeyException"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"InvalidKeyException"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.Key" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/security/Key.class" extern="1" interface="1">
		<extends path="java.io.Serializable"/>
		<getEncoded public="1" set="method">
			<f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f>
			<meta><m n=":overload"/></meta>
		</getEncoded>
		<getFormat public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getFormat>
		<getAlgorithm public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getAlgorithm>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.Key"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"Key"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.Key_Statics" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/security/Key.class" module="java.security.Key" extern="1">
		<serialVersionUID public="1" set="null" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":final"/></meta>
		</serialVersionUID>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.Key"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"Key"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.NoSuchAlgorithmException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/security/NoSuchAlgorithmException.class" extern="1">
		<extends path="java.security.GeneralSecurityException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.NoSuchAlgorithmException"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"NoSuchAlgorithmException"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.NoSuchProviderException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/security/NoSuchProviderException.class" extern="1">
		<extends path="java.security.GeneralSecurityException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.NoSuchProviderException"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"NoSuchProviderException"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.Permission" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/security/Permission.class" extern="1">
		<implements path="java.security.Guard"/>
		<implements path="java.io.Serializable"/>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<newPermissionCollection public="1" set="method">
			<f a=""><c path="java.security.PermissionCollection"/></f>
			<meta><m n=":overload"/></meta>
		</newPermissionCollection>
		<getActions public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getActions>
		<getName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getName>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<implies public="1" set="method">
			<f a="param1">
				<c path="java.security.Permission"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</implies>
		<checkGuard public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
			</meta>
		</checkGuard>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.Permission"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"Permission"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.PermissionCollection" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/security/PermissionCollection.class" extern="1">
		<implements path="java.io.Serializable"/>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<isReadOnly public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isReadOnly>
		<setReadOnly public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</setReadOnly>
		<elements public="1" set="method">
			<f a=""><c path="java.util.Enumeration"><c path="java.security.Permission"/></c></f>
			<meta><m n=":overload"/></meta>
		</elements>
		<implies public="1" set="method">
			<f a="param1">
				<c path="java.security.Permission"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</implies>
		<add public="1" set="method">
			<f a="param1">
				<c path="java.security.Permission"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.PermissionCollection"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"PermissionCollection"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.ProtectionDomain" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/security/ProtectionDomain.class" extern="1">
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<implies public="1" set="method">
			<f a="param1">
				<c path="java.security.Permission"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</implies>
		<getPermissions public="1" set="method">
			<f a=""><c path="java.security.PermissionCollection"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getPermissions>
		<getPrincipals public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.security.Principal"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getPrincipals>
		<getClassLoader public="1" set="method">
			<f a=""><c path="java.lang.ClassLoader"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getClassLoader>
		<getCodeSource public="1" set="method">
			<f a=""><c path="java.security.CodeSource"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getCodeSource>
		<new public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="java.security.CodeSource"/>
				<c path="java.security.PermissionCollection"/>
				<c path="java.lang.ClassLoader"/>
				<c path="java.NativeArray"><c path="java.security.Principal"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1:param2">
		<c path="java.security.CodeSource"/>
		<c path="java.security.PermissionCollection"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.ProtectionDomain"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"ProtectionDomain"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.ProtectionDomain_Key" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/security/ProtectionDomain$Key.class" module="java.security.ProtectionDomain" extern="1"><meta>
	<m n=":final"/>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.security.ProtectionDomain$Key"</e></m>
	<m n=":javaCanonical">
		<e>"java.security"</e>
		<e>"ProtectionDomain.Key"</e>
	</m>
</meta></class>
	<class path="java.security.PublicKey" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/security/PublicKey.class" extern="1" interface="1">
		<extends path="java.security.Key"/>
		<getAlgorithm public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getAlgorithm>
		<getFormat public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getFormat>
		<getEncoded public="1" set="method">
			<f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f>
			<meta><m n=":overload"/></meta>
		</getEncoded>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.PublicKey"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"PublicKey"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.PublicKey_Statics" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/security/PublicKey.class" module="java.security.PublicKey" extern="1">
		<serialVersionUID public="1" set="null" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":final"/></meta>
		</serialVersionUID>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.PublicKey"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"PublicKey"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.SignatureException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/security/SignatureException.class" extern="1">
		<extends path="java.security.GeneralSecurityException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.SignatureException"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"SignatureException"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.Timestamp" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/security/Timestamp.class" extern="1">
		<implements path="java.io.Serializable"/>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<getSignerCertPath public="1" set="method">
			<f a=""><c path="java.security.cert.CertPath"/></f>
			<meta><m n=":overload"/></meta>
		</getSignerCertPath>
		<getTimestamp public="1" set="method">
			<f a=""><c path="java.util.Date"/></f>
			<meta><m n=":overload"/></meta>
		</getTimestamp>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.util.Date"/>
				<c path="java.security.cert.CertPath"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.Timestamp"</e></m>
			<m n=":javaCanonical">
				<e>"java.security"</e>
				<e>"Timestamp"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.cert.CertPath" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/security/cert/CertPath.class" extern="1">
		<implements path="java.io.Serializable"/>
		<writeReplace set="method">
			<f a=""><d/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.ObjectStreamException"</e></m>
			</meta>
		</writeReplace>
		<getCertificates public="1" set="method">
			<f a=""><c path="java.util.List"><c path="java.security.cert.Certificate"/></c></f>
			<meta><m n=":overload"/></meta>
		</getCertificates>
		<getEncoded public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.security.cert.CertificateEncodingException"</e></m>
			</meta>
			<overloads><getEncoded public="1" set="method">
	<f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.security.cert.CertificateEncodingException"</e></m>
	</meta>
</getEncoded></overloads>
		</getEncoded>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<getEncodings public="1" set="method">
			<f a=""><c path="java.util.Iterator"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</getEncodings>
		<getType public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getType>
		<new set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.cert.CertPath"</e></m>
			<m n=":javaCanonical">
				<e>"java.security.cert"</e>
				<e>"CertPath"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.cert.CertPath_CertPathRep" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/security/cert/CertPath$CertPathRep.class" module="java.security.cert.CertPath" extern="1">
		<implements path="java.io.Serializable"/>
		<readResolve set="method">
			<f a=""><d/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.ObjectStreamException"</e></m>
			</meta>
		</readResolve>
		<new set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.cert.CertPath$CertPathRep"</e></m>
			<m n=":javaCanonical">
				<e>"java.security.cert"</e>
				<e>"CertPath.CertPathRep"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.cert.Certificate" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/security/cert/Certificate.class" extern="1">
		<implements path="java.io.Serializable"/>
		<writeReplace set="method">
			<f a=""><d/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.ObjectStreamException"</e></m>
			</meta>
		</writeReplace>
		<getPublicKey public="1" set="method">
			<f a=""><c path="java.security.PublicKey"/></f>
			<meta><m n=":overload"/></meta>
		</getPublicKey>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<verify public="1" set="method">
			<f a="param1:param2">
				<c path="java.security.PublicKey"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.security.SignatureException"</e></m>
				<m n=":throws"><e>"java.security.NoSuchProviderException"</e></m>
				<m n=":throws"><e>"java.security.InvalidKeyException"</e></m>
				<m n=":throws"><e>"java.security.NoSuchAlgorithmException"</e></m>
				<m n=":throws"><e>"java.security.cert.CertificateException"</e></m>
			</meta>
			<overloads><verify public="1" set="method">
	<f a="param1">
		<c path="java.security.PublicKey"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.security.SignatureException"</e></m>
		<m n=":throws"><e>"java.security.NoSuchProviderException"</e></m>
		<m n=":throws"><e>"java.security.InvalidKeyException"</e></m>
		<m n=":throws"><e>"java.security.NoSuchAlgorithmException"</e></m>
		<m n=":throws"><e>"java.security.cert.CertificateException"</e></m>
	</meta>
</verify></overloads>
		</verify>
		<getEncoded public="1" set="method">
			<f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.security.cert.CertificateEncodingException"</e></m>
			</meta>
		</getEncoded>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<getType public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getType>
		<new set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.cert.Certificate"</e></m>
			<m n=":javaCanonical">
				<e>"java.security.cert"</e>
				<e>"Certificate"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.cert.Certificate_CertificateRep" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/security/cert/Certificate$CertificateRep.class" module="java.security.cert.Certificate" extern="1">
		<implements path="java.io.Serializable"/>
		<readResolve set="method">
			<f a=""><d/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.ObjectStreamException"</e></m>
			</meta>
		</readResolve>
		<new set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.cert.Certificate$CertificateRep"</e></m>
			<m n=":javaCanonical">
				<e>"java.security.cert"</e>
				<e>"Certificate.CertificateRep"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.cert.CertificateException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/security/cert/CertificateException.class" extern="1">
		<extends path="java.security.GeneralSecurityException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.cert.CertificateException"</e></m>
			<m n=":javaCanonical">
				<e>"java.security.cert"</e>
				<e>"CertificateException"</e>
			</m>
		</meta>
	</class>
	<class path="java.security.cert.CertificateEncodingException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/security/cert/CertificateEncodingException.class" extern="1">
		<extends path="java.security.cert.CertificateException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.security.cert.CertificateEncodingException"</e></m>
			<m n=":javaCanonical">
				<e>"java.security.cert"</e>
				<e>"CertificateEncodingException"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.Array" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/Array.class" extern="1" interface="1">
		<free public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</free>
		<getResultSet public="1" set="method">
			<f a="param1:param2:param3">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<c path="java.util.Map">
					<c path="String"/>
					<c path="java.lang.Class"><d/></c>
				</c>
				<c path="java.sql.ResultSet"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<getResultSet public="1" set="method">
					<f a=""><c path="java.sql.ResultSet"/></f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getResultSet>
				<getResultSet public="1" set="method">
					<f a="param1">
						<c path="java.util.Map">
							<c path="String"/>
							<c path="java.lang.Class"><d/></c>
						</c>
						<c path="java.sql.ResultSet"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getResultSet>
				<getResultSet public="1" set="method">
					<f a="param1:param2">
						<x path="haxe.Int64"/>
						<x path="Int"/>
						<c path="java.sql.ResultSet"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getResultSet>
			</overloads>
		</getResultSet>
		<getArray public="1" set="method">
			<f a="param1:param2:param3">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<c path="java.util.Map">
					<c path="String"/>
					<c path="java.lang.Class"><d/></c>
				</c>
				<d/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<getArray public="1" set="method">
					<f a=""><d/></f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getArray>
				<getArray public="1" set="method">
					<f a="param1">
						<c path="java.util.Map">
							<c path="String"/>
							<c path="java.lang.Class"><d/></c>
						</c>
						<d/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getArray>
				<getArray public="1" set="method">
					<f a="param1:param2">
						<x path="haxe.Int64"/>
						<x path="Int"/>
						<d/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getArray>
			</overloads>
		</getArray>
		<getBaseType public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getBaseType>
		<getBaseTypeName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getBaseTypeName>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.Array"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"Array"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.Blob" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/Blob.class" extern="1" interface="1">
		<getBinaryStream public="1" set="method">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<c path="java.io.InputStream"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getBinaryStream public="1" set="method">
	<f a=""><c path="java.io.InputStream"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getBinaryStream></overloads>
		</getBinaryStream>
		<free public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</free>
		<truncate public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</truncate>
		<setBinaryStream public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="java.io.OutputStream"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setBinaryStream>
		<setBytes public="1" set="method">
			<f a="param1:param2:param3:param4">
				<x path="haxe.Int64"/>
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><setBytes public="1" set="method">
	<f a="param1:param2">
		<x path="haxe.Int64"/>
		<c path="java.NativeArray"><t path="java.types.Int8"/></c>
		<x path="Int"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</setBytes></overloads>
		</setBytes>
		<position public="1" set="method">
			<f a="param1:param2">
				<c path="java.sql.Blob"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><position public="1" set="method">
	<f a="param1:param2">
		<c path="java.NativeArray"><t path="java.types.Int8"/></c>
		<x path="haxe.Int64"/>
		<x path="haxe.Int64"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</position></overloads>
		</position>
		<getBytes public="1" set="method">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getBytes>
		<length public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</length>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.Blob"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"Blob"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.Wrapper" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/Wrapper.class" extern="1" interface="1">
		<isWrapperFor public="1" set="method">
			<f a="param1">
				<c path="java.lang.Class"><d/></c>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isWrapperFor>
		<unwrap public="1" params="T" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="unwrap.T"/></c>
				<c path="unwrap.T"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</unwrap>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.Wrapper"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"Wrapper"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.Statement" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/Statement.class" extern="1" interface="1">
		<extends path="java.sql.Wrapper"/>
		<extends path="java.lang.AutoCloseable"/>
		<isCloseOnCompletion public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isCloseOnCompletion>
		<closeOnCompletion public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</closeOnCompletion>
		<isPoolable public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isPoolable>
		<setPoolable public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setPoolable>
		<isClosed public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isClosed>
		<getResultSetHoldability public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getResultSetHoldability>
		<execute public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.NativeArray"><c path="String"/></c>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<execute public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Bool"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</execute>
				<execute public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<x path="Int"/>
						<x path="Bool"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</execute>
				<execute public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.NativeArray"><x path="Int"/></c>
						<x path="Bool"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</execute>
			</overloads>
		</execute>
		<executeUpdate public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.NativeArray"><c path="String"/></c>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<executeUpdate public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</executeUpdate>
				<executeUpdate public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</executeUpdate>
				<executeUpdate public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.NativeArray"><x path="Int"/></c>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</executeUpdate>
			</overloads>
		</executeUpdate>
		<getGeneratedKeys public="1" set="method">
			<f a=""><c path="java.sql.ResultSet"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getGeneratedKeys>
		<getMoreResults public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getMoreResults public="1" set="method">
	<f a=""><x path="Bool"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getMoreResults></overloads>
		</getMoreResults>
		<getConnection public="1" set="method">
			<f a=""><c path="java.sql.Connection"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getConnection>
		<executeBatch public="1" set="method">
			<f a=""><c path="java.NativeArray"><x path="Int"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</executeBatch>
		<clearBatch public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</clearBatch>
		<addBatch public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</addBatch>
		<getResultSetType public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getResultSetType>
		<getResultSetConcurrency public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getResultSetConcurrency>
		<getFetchSize public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getFetchSize>
		<setFetchSize public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setFetchSize>
		<getFetchDirection public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getFetchDirection>
		<setFetchDirection public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setFetchDirection>
		<getUpdateCount public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getUpdateCount>
		<getResultSet public="1" set="method">
			<f a=""><c path="java.sql.ResultSet"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getResultSet>
		<setCursorName public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setCursorName>
		<clearWarnings public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</clearWarnings>
		<getWarnings public="1" set="method">
			<f a=""><c path="java.sql.SQLWarning"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getWarnings>
		<cancel public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</cancel>
		<setQueryTimeout public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setQueryTimeout>
		<getQueryTimeout public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getQueryTimeout>
		<setEscapeProcessing public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setEscapeProcessing>
		<setMaxRows public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setMaxRows>
		<getMaxRows public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getMaxRows>
		<setMaxFieldSize public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setMaxFieldSize>
		<getMaxFieldSize public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getMaxFieldSize>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</close>
		<executeQuery public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.sql.ResultSet"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</executeQuery>
		<unwrap public="1" params="T" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="unwrap.T"/></c>
				<c path="unwrap.T"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</unwrap>
		<isWrapperFor public="1" set="method">
			<f a="param1">
				<c path="java.lang.Class"><d/></c>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isWrapperFor>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.Statement"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"Statement"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.PreparedStatement" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/PreparedStatement.class" extern="1" interface="1">
		<extends path="java.sql.Statement"/>
		<setNClob public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<c path="java.io.Reader"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<setNClob public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.sql.NClob"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setNClob>
				<setNClob public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<c path="java.io.Reader"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setNClob>
			</overloads>
		</setNClob>
		<setBlob public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<c path="java.io.InputStream"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<setBlob public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.sql.Blob"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setBlob>
				<setBlob public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<c path="java.io.InputStream"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setBlob>
			</overloads>
		</setBlob>
		<setClob public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<c path="java.io.Reader"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<setClob public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.sql.Clob"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setClob>
				<setClob public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<c path="java.io.Reader"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setClob>
			</overloads>
		</setClob>
		<setNCharacterStream public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<c path="java.io.Reader"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><setNCharacterStream public="1" set="method">
	<f a="param1:param2:param3">
		<x path="Int"/>
		<c path="java.io.Reader"/>
		<x path="haxe.Int64"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</setNCharacterStream></overloads>
		</setNCharacterStream>
		<setCharacterStream public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<c path="java.io.Reader"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<setCharacterStream public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<c path="java.io.Reader"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setCharacterStream>
				<setCharacterStream public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<c path="java.io.Reader"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setCharacterStream>
			</overloads>
		</setCharacterStream>
		<setBinaryStream public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<c path="java.io.InputStream"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<setBinaryStream public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<c path="java.io.InputStream"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setBinaryStream>
				<setBinaryStream public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<c path="java.io.InputStream"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setBinaryStream>
			</overloads>
		</setBinaryStream>
		<setAsciiStream public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<c path="java.io.InputStream"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<setAsciiStream public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<c path="java.io.InputStream"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setAsciiStream>
				<setAsciiStream public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<c path="java.io.InputStream"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setAsciiStream>
			</overloads>
		</setAsciiStream>
		<setObject public="1" set="method">
			<f a="param1:param2:param3:param4">
				<x path="Int"/>
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<setObject public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<d/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setObject>
				<setObject public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<d/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setObject>
			</overloads>
		</setObject>
		<setSQLXML public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<c path="java.sql.SQLXML"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setSQLXML>
		<setNString public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setNString>
		<setRowId public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<c path="java.sql.RowId"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setRowId>
		<getParameterMetaData public="1" set="method">
			<f a=""><c path="java.sql.ParameterMetaData"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getParameterMetaData>
		<setURL public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<c path="java.net.URL"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setURL>
		<setNull public="1" set="method">
			<f a="param1:param2:param3">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><setNull public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</setNull></overloads>
		</setNull>
		<setTimestamp public="1" set="method">
			<f a="param1:param2:param3">
				<x path="Int"/>
				<c path="java.sql.Timestamp"/>
				<c path="java.util.Calendar"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><setTimestamp public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<c path="java.sql.Timestamp"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</setTimestamp></overloads>
		</setTimestamp>
		<setTime public="1" set="method">
			<f a="param1:param2:param3">
				<x path="Int"/>
				<c path="java.sql.Time"/>
				<c path="java.util.Calendar"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><setTime public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<c path="java.sql.Time"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</setTime></overloads>
		</setTime>
		<setDate public="1" set="method">
			<f a="param1:param2:param3">
				<x path="Int"/>
				<c path="java.sql.Date"/>
				<c path="java.util.Calendar"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><setDate public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<c path="java.sql.Date"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</setDate></overloads>
		</setDate>
		<getMetaData public="1" set="method">
			<f a=""><c path="java.sql.ResultSetMetaData"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getMetaData>
		<setArray public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<c path="java.sql.Array"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setArray>
		<setRef public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<c path="java.sql.Ref"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setRef>
		<addBatch public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><addBatch public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</addBatch></overloads>
		</addBatch>
		<execute public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<execute public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.NativeArray"><c path="String"/></c>
						<x path="Bool"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</execute>
				<execute public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.NativeArray"><x path="Int"/></c>
						<x path="Bool"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</execute>
				<execute public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<x path="Int"/>
						<x path="Bool"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</execute>
				<execute public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Bool"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</execute>
			</overloads>
		</execute>
		<clearParameters public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</clearParameters>
		<setUnicodeStream public="1" set="method">
			<f a="param1:param2:param3">
				<x path="Int"/>
				<c path="java.io.InputStream"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
				<m n=":deprecated"/>
			</meta>
		</setUnicodeStream>
		<setBytes public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setBytes>
		<setString public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setString>
		<setBigDecimal public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<c path="java.math.BigDecimal"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setBigDecimal>
		<setDouble public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setDouble>
		<setFloat public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Single"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setFloat>
		<setLong public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setLong>
		<setInt public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setInt>
		<setShort public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<t path="java.types.Int16"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setShort>
		<setByte public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<t path="java.types.Int8"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setByte>
		<setBoolean public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setBoolean>
		<executeUpdate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<executeUpdate public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.NativeArray"><c path="String"/></c>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</executeUpdate>
				<executeUpdate public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.NativeArray"><x path="Int"/></c>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</executeUpdate>
				<executeUpdate public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</executeUpdate>
				<executeUpdate public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</executeUpdate>
			</overloads>
		</executeUpdate>
		<executeQuery public="1" set="method">
			<f a=""><c path="java.sql.ResultSet"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><executeQuery public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<c path="java.sql.ResultSet"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</executeQuery></overloads>
		</executeQuery>
		<isWrapperFor public="1" set="method">
			<f a="param1">
				<c path="java.lang.Class"><d/></c>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isWrapperFor>
		<unwrap public="1" params="T" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="unwrap.T"/></c>
				<c path="unwrap.T"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</unwrap>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.Exception"</e></m>
			</meta>
		</close>
		<getMaxFieldSize public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getMaxFieldSize>
		<setMaxFieldSize public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setMaxFieldSize>
		<getMaxRows public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getMaxRows>
		<setMaxRows public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setMaxRows>
		<setEscapeProcessing public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setEscapeProcessing>
		<getQueryTimeout public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getQueryTimeout>
		<setQueryTimeout public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setQueryTimeout>
		<cancel public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</cancel>
		<getWarnings public="1" set="method">
			<f a=""><c path="java.sql.SQLWarning"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getWarnings>
		<clearWarnings public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</clearWarnings>
		<setCursorName public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setCursorName>
		<getResultSet public="1" set="method">
			<f a=""><c path="java.sql.ResultSet"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getResultSet>
		<getUpdateCount public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getUpdateCount>
		<getMoreResults public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getMoreResults public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getMoreResults></overloads>
		</getMoreResults>
		<setFetchDirection public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setFetchDirection>
		<getFetchDirection public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getFetchDirection>
		<setFetchSize public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setFetchSize>
		<getFetchSize public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getFetchSize>
		<getResultSetConcurrency public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getResultSetConcurrency>
		<getResultSetType public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getResultSetType>
		<clearBatch public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</clearBatch>
		<executeBatch public="1" set="method">
			<f a=""><c path="java.NativeArray"><x path="Int"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</executeBatch>
		<getConnection public="1" set="method">
			<f a=""><c path="java.sql.Connection"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getConnection>
		<getGeneratedKeys public="1" set="method">
			<f a=""><c path="java.sql.ResultSet"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getGeneratedKeys>
		<getResultSetHoldability public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getResultSetHoldability>
		<isClosed public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isClosed>
		<setPoolable public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setPoolable>
		<isPoolable public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isPoolable>
		<closeOnCompletion public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</closeOnCompletion>
		<isCloseOnCompletion public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isCloseOnCompletion>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.PreparedStatement"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"PreparedStatement"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.CallableStatement" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/CallableStatement.class" extern="1" interface="1">
		<extends path="java.sql.PreparedStatement"/>
		<getObject public="1" params="T" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.lang.Class"><c path="getObject.T"/></c>
				<c path="getObject.T"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<getObject public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<d/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getObject>
				<getObject public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.util.Map">
							<c path="String"/>
							<c path="java.lang.Class"><d/></c>
						</c>
						<d/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getObject>
				<getObject public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<d/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getObject>
				<getObject public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.util.Map">
							<c path="String"/>
							<c path="java.lang.Class"><d/></c>
						</c>
						<d/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getObject>
				<getObject public="1" params="T" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.lang.Class"><c path="getObject.T"/></c>
						<c path="getObject.T"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getObject>
			</overloads>
		</getObject>
		<setNClob public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.io.Reader"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<setNClob public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.io.Reader"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setNClob>
				<setNClob public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<c path="java.io.Reader"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setNClob>
				<setNClob public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.sql.NClob"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setNClob>
				<setNClob public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.sql.NClob"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setNClob>
				<setNClob public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="java.io.Reader"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setNClob>
			</overloads>
		</setNClob>
		<setBlob public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.io.InputStream"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<setBlob public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.io.InputStream"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setBlob>
				<setBlob public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<c path="java.io.InputStream"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setBlob>
				<setBlob public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.sql.Blob"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setBlob>
				<setBlob public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="java.io.InputStream"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setBlob>
				<setBlob public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.sql.Blob"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setBlob>
			</overloads>
		</setBlob>
		<setClob public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.io.Reader"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<setClob public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.io.Reader"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setClob>
				<setClob public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<c path="java.io.Reader"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setClob>
				<setClob public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.sql.Clob"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setClob>
				<setClob public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="java.io.Reader"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setClob>
				<setClob public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.sql.Clob"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setClob>
			</overloads>
		</setClob>
		<setNCharacterStream public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.io.Reader"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<setNCharacterStream public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.io.Reader"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setNCharacterStream>
				<setNCharacterStream public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<c path="java.io.Reader"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setNCharacterStream>
				<setNCharacterStream public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="java.io.Reader"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setNCharacterStream>
			</overloads>
		</setNCharacterStream>
		<setCharacterStream public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.io.Reader"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<setCharacterStream public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.io.Reader"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setCharacterStream>
				<setCharacterStream public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<c path="java.io.Reader"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setCharacterStream>
				<setCharacterStream public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<c path="java.io.Reader"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setCharacterStream>
				<setCharacterStream public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="java.io.Reader"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setCharacterStream>
				<setCharacterStream public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="java.io.Reader"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setCharacterStream>
			</overloads>
		</setCharacterStream>
		<setBinaryStream public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.io.InputStream"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<setBinaryStream public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.io.InputStream"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setBinaryStream>
				<setBinaryStream public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<c path="java.io.InputStream"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setBinaryStream>
				<setBinaryStream public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<c path="java.io.InputStream"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setBinaryStream>
				<setBinaryStream public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="java.io.InputStream"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setBinaryStream>
				<setBinaryStream public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="java.io.InputStream"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setBinaryStream>
			</overloads>
		</setBinaryStream>
		<setAsciiStream public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.io.InputStream"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<setAsciiStream public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.io.InputStream"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setAsciiStream>
				<setAsciiStream public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<c path="java.io.InputStream"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setAsciiStream>
				<setAsciiStream public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<c path="java.io.InputStream"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setAsciiStream>
				<setAsciiStream public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="java.io.InputStream"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setAsciiStream>
				<setAsciiStream public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="java.io.InputStream"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setAsciiStream>
			</overloads>
		</setAsciiStream>
		<getCharacterStream public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.io.Reader"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getCharacterStream public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.io.Reader"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getCharacterStream></overloads>
		</getCharacterStream>
		<getNCharacterStream public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.io.Reader"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getNCharacterStream public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.io.Reader"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getNCharacterStream></overloads>
		</getNCharacterStream>
		<getNString public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getNString public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="String"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getNString></overloads>
		</getNString>
		<getSQLXML public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.sql.SQLXML"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getSQLXML public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.sql.SQLXML"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getSQLXML></overloads>
		</getSQLXML>
		<setSQLXML public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.sql.SQLXML"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><setSQLXML public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<c path="java.sql.SQLXML"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</setSQLXML></overloads>
		</setSQLXML>
		<getNClob public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.sql.NClob"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getNClob public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.sql.NClob"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getNClob></overloads>
		</getNClob>
		<setNString public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><setNString public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</setNString></overloads>
		</setNString>
		<setRowId public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.sql.RowId"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><setRowId public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<c path="java.sql.RowId"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</setRowId></overloads>
		</setRowId>
		<getRowId public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.sql.RowId"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getRowId public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.sql.RowId"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getRowId></overloads>
		</getRowId>
		<getURL public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.net.URL"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getURL public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.net.URL"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getURL></overloads>
		</getURL>
		<getTimestamp public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.util.Calendar"/>
				<c path="java.sql.Timestamp"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<getTimestamp public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<c path="java.sql.Timestamp"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getTimestamp>
				<getTimestamp public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.util.Calendar"/>
						<c path="java.sql.Timestamp"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getTimestamp>
				<getTimestamp public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<c path="java.sql.Timestamp"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getTimestamp>
			</overloads>
		</getTimestamp>
		<getTime public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.util.Calendar"/>
				<c path="java.sql.Time"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<getTime public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<c path="java.sql.Time"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getTime>
				<getTime public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.util.Calendar"/>
						<c path="java.sql.Time"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getTime>
				<getTime public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<c path="java.sql.Time"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getTime>
			</overloads>
		</getTime>
		<getDate public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.util.Calendar"/>
				<c path="java.sql.Date"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<getDate public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<c path="java.sql.Date"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getDate>
				<getDate public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.util.Calendar"/>
						<c path="java.sql.Date"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getDate>
				<getDate public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<c path="java.sql.Date"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getDate>
			</overloads>
		</getDate>
		<getArray public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.sql.Array"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getArray public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.sql.Array"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getArray></overloads>
		</getArray>
		<getClob public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.sql.Clob"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getClob public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.sql.Clob"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getClob></overloads>
		</getClob>
		<getBlob public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.sql.Blob"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getBlob public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.sql.Blob"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getBlob></overloads>
		</getBlob>
		<getRef public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.sql.Ref"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getRef public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.sql.Ref"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getRef></overloads>
		</getRef>
		<getBigDecimal public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.math.BigDecimal"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<getBigDecimal public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.math.BigDecimal"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
						<m n=":deprecated"/>
					</meta>
				</getBigDecimal>
				<getBigDecimal public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<c path="java.math.BigDecimal"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getBigDecimal>
			</overloads>
		</getBigDecimal>
		<getBytes public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getBytes public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getBytes></overloads>
		</getBytes>
		<getDouble public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getDouble public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Float"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getDouble></overloads>
		</getDouble>
		<getFloat public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Single"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getFloat public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Single"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getFloat></overloads>
		</getFloat>
		<getLong public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getLong public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="haxe.Int64"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getLong></overloads>
		</getLong>
		<getInt public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getInt public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getInt></overloads>
		</getInt>
		<getShort public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<t path="java.types.Int16"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getShort public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<t path="java.types.Int16"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getShort></overloads>
		</getShort>
		<getByte public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<t path="java.types.Int8"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getByte public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<t path="java.types.Int8"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getByte></overloads>
		</getByte>
		<getBoolean public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getBoolean public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getBoolean></overloads>
		</getBoolean>
		<getString public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getString public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="String"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getString></overloads>
		</getString>
		<setNull public="1" set="method">
			<f a="param1:param2:param3">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<setNull public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<x path="Int"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setNull>
				<setNull public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setNull>
				<setNull public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setNull>
			</overloads>
		</setNull>
		<setTimestamp public="1" set="method">
			<f a="param1:param2:param3">
				<c path="String"/>
				<c path="java.sql.Timestamp"/>
				<c path="java.util.Calendar"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<setTimestamp public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<c path="java.sql.Timestamp"/>
						<c path="java.util.Calendar"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setTimestamp>
				<setTimestamp public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.sql.Timestamp"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setTimestamp>
				<setTimestamp public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.sql.Timestamp"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setTimestamp>
			</overloads>
		</setTimestamp>
		<setTime public="1" set="method">
			<f a="param1:param2:param3">
				<c path="String"/>
				<c path="java.sql.Time"/>
				<c path="java.util.Calendar"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<setTime public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<c path="java.sql.Time"/>
						<c path="java.util.Calendar"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setTime>
				<setTime public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.sql.Time"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setTime>
				<setTime public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.sql.Time"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setTime>
			</overloads>
		</setTime>
		<setDate public="1" set="method">
			<f a="param1:param2:param3">
				<c path="String"/>
				<c path="java.sql.Date"/>
				<c path="java.util.Calendar"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<setDate public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<c path="java.sql.Date"/>
						<c path="java.util.Calendar"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setDate>
				<setDate public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.sql.Date"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setDate>
				<setDate public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.sql.Date"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setDate>
			</overloads>
		</setDate>
		<setObject public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<setObject public="1" set="method">
					<f a="param1:param2:param3:param4">
						<x path="Int"/>
						<d/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setObject>
				<setObject public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<d/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setObject>
				<setObject public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<d/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setObject>
				<setObject public="1" set="method">
					<f a="param1:param2:param3:param4">
						<c path="String"/>
						<d/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setObject>
				<setObject public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<d/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</setObject>
			</overloads>
		</setObject>
		<setBytes public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><setBytes public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<c path="java.NativeArray"><t path="java.types.Int8"/></c>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</setBytes></overloads>
		</setBytes>
		<setString public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><setString public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</setString></overloads>
		</setString>
		<setBigDecimal public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.math.BigDecimal"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><setBigDecimal public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<c path="java.math.BigDecimal"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</setBigDecimal></overloads>
		</setBigDecimal>
		<setDouble public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><setDouble public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</setDouble></overloads>
		</setDouble>
		<setFloat public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Single"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><setFloat public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<x path="Single"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</setFloat></overloads>
		</setFloat>
		<setLong public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><setLong public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<x path="haxe.Int64"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</setLong></overloads>
		</setLong>
		<setInt public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><setInt public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</setInt></overloads>
		</setInt>
		<setShort public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<t path="java.types.Int16"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><setShort public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<t path="java.types.Int16"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</setShort></overloads>
		</setShort>
		<setByte public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<t path="java.types.Int8"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><setByte public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<t path="java.types.Int8"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</setByte></overloads>
		</setByte>
		<setBoolean public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><setBoolean public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</setBoolean></overloads>
		</setBoolean>
		<setURL public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.net.URL"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><setURL public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<c path="java.net.URL"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</setURL></overloads>
		</setURL>
		<registerOutParameter public="1" set="method">
			<f a="param1:param2:param3">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<registerOutParameter public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</registerOutParameter>
				<registerOutParameter public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</registerOutParameter>
				<registerOutParameter public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<x path="Int"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</registerOutParameter>
				<registerOutParameter public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</registerOutParameter>
				<registerOutParameter public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</registerOutParameter>
			</overloads>
		</registerOutParameter>
		<wasNull public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</wasNull>
		<isCloseOnCompletion public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isCloseOnCompletion>
		<closeOnCompletion public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</closeOnCompletion>
		<isPoolable public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isPoolable>
		<setPoolable public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setPoolable>
		<isClosed public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isClosed>
		<getResultSetHoldability public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getResultSetHoldability>
		<execute public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.NativeArray"><c path="String"/></c>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<execute public="1" set="method">
					<f a=""><x path="Bool"/></f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</execute>
				<execute public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Bool"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</execute>
				<execute public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<x path="Int"/>
						<x path="Bool"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</execute>
				<execute public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.NativeArray"><x path="Int"/></c>
						<x path="Bool"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</execute>
			</overloads>
		</execute>
		<executeUpdate public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.NativeArray"><c path="String"/></c>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<executeUpdate public="1" set="method">
					<f a=""><x path="Int"/></f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</executeUpdate>
				<executeUpdate public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</executeUpdate>
				<executeUpdate public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</executeUpdate>
				<executeUpdate public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.NativeArray"><x path="Int"/></c>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</executeUpdate>
			</overloads>
		</executeUpdate>
		<getGeneratedKeys public="1" set="method">
			<f a=""><c path="java.sql.ResultSet"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getGeneratedKeys>
		<getMoreResults public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getMoreResults public="1" set="method">
	<f a=""><x path="Bool"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getMoreResults></overloads>
		</getMoreResults>
		<getConnection public="1" set="method">
			<f a=""><c path="java.sql.Connection"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getConnection>
		<executeBatch public="1" set="method">
			<f a=""><c path="java.NativeArray"><x path="Int"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</executeBatch>
		<clearBatch public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</clearBatch>
		<addBatch public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><addBatch public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</addBatch></overloads>
		</addBatch>
		<getResultSetType public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getResultSetType>
		<getResultSetConcurrency public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getResultSetConcurrency>
		<getFetchSize public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getFetchSize>
		<setFetchSize public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setFetchSize>
		<getFetchDirection public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getFetchDirection>
		<setFetchDirection public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setFetchDirection>
		<getUpdateCount public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getUpdateCount>
		<getResultSet public="1" set="method">
			<f a=""><c path="java.sql.ResultSet"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getResultSet>
		<setCursorName public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setCursorName>
		<clearWarnings public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</clearWarnings>
		<getWarnings public="1" set="method">
			<f a=""><c path="java.sql.SQLWarning"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getWarnings>
		<cancel public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</cancel>
		<setQueryTimeout public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setQueryTimeout>
		<getQueryTimeout public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getQueryTimeout>
		<setEscapeProcessing public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setEscapeProcessing>
		<setMaxRows public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setMaxRows>
		<getMaxRows public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getMaxRows>
		<setMaxFieldSize public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setMaxFieldSize>
		<getMaxFieldSize public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getMaxFieldSize>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.Exception"</e></m>
			</meta>
		</close>
		<executeQuery public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.sql.ResultSet"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><executeQuery public="1" set="method">
	<f a=""><c path="java.sql.ResultSet"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</executeQuery></overloads>
		</executeQuery>
		<unwrap public="1" params="T" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="unwrap.T"/></c>
				<c path="unwrap.T"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</unwrap>
		<isWrapperFor public="1" set="method">
			<f a="param1">
				<c path="java.lang.Class"><d/></c>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isWrapperFor>
		<setUnicodeStream public="1" set="method">
			<f a="param1:param2:param3">
				<x path="Int"/>
				<c path="java.io.InputStream"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
				<m n=":deprecated"/>
			</meta>
		</setUnicodeStream>
		<clearParameters public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</clearParameters>
		<setRef public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<c path="java.sql.Ref"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setRef>
		<setArray public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<c path="java.sql.Array"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setArray>
		<getMetaData public="1" set="method">
			<f a=""><c path="java.sql.ResultSetMetaData"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getMetaData>
		<getParameterMetaData public="1" set="method">
			<f a=""><c path="java.sql.ParameterMetaData"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getParameterMetaData>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.CallableStatement"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"CallableStatement"</e>
			</m>
		</meta>
	</class>
	<enum path="java.sql.ClientInfoStatus" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/ClientInfoStatus.class">
		<REASON_VALUE_TRUNCATED/>
		<REASON_VALUE_INVALID/>
		<REASON_UNKNOWN_PROPERTY/>
		<REASON_UNKNOWN/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"ClientInfoStatus"</e>
			</m>
			<m n=":native"><e>"java.sql.ClientInfoStatus"</e></m>
		</meta>
	</enum>
	<class path="java.sql.Clob" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/Clob.class" extern="1" interface="1">
		<getCharacterStream public="1" set="method">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<c path="java.io.Reader"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getCharacterStream public="1" set="method">
	<f a=""><c path="java.io.Reader"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getCharacterStream></overloads>
		</getCharacterStream>
		<free public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</free>
		<truncate public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</truncate>
		<setCharacterStream public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="java.io.Writer"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setCharacterStream>
		<setAsciiStream public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="java.io.OutputStream"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setAsciiStream>
		<setString public="1" set="method">
			<f a="param1:param2:param3:param4">
				<x path="haxe.Int64"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><setString public="1" set="method">
	<f a="param1:param2">
		<x path="haxe.Int64"/>
		<c path="String"/>
		<x path="Int"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</setString></overloads>
		</setString>
		<position public="1" set="method">
			<f a="param1:param2">
				<c path="java.sql.Clob"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><position public="1" set="method">
	<f a="param1:param2">
		<c path="String"/>
		<x path="haxe.Int64"/>
		<x path="haxe.Int64"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</position></overloads>
		</position>
		<getAsciiStream public="1" set="method">
			<f a=""><c path="java.io.InputStream"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getAsciiStream>
		<getSubString public="1" set="method">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getSubString>
		<length public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</length>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.Clob"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"Clob"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.Connection" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/Connection.class" extern="1" interface="1">
		<extends path="java.sql.Wrapper"/>
		<extends path="java.lang.AutoCloseable"/>
		<getNetworkTimeout public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getNetworkTimeout>
		<setNetworkTimeout public="1" set="method">
			<f a="param1:param2">
				<c path="java.util.concurrent.Executor"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setNetworkTimeout>
		<abort public="1" set="method">
			<f a="param1">
				<c path="java.util.concurrent.Executor"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</abort>
		<getSchema public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getSchema>
		<setSchema public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setSchema>
		<createStruct public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.NativeArray"><d/></c>
				<c path="java.sql.Struct"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</createStruct>
		<createArrayOf public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.NativeArray"><d/></c>
				<c path="java.sql.Array"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</createArrayOf>
		<getClientInfo public="1" set="method">
			<f a=""><c path="java.util.Properties"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getClientInfo public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<c path="String"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getClientInfo></overloads>
		</getClientInfo>
		<setClientInfo public="1" set="method">
			<f a="param1">
				<c path="java.util.Properties"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLClientInfoException"</e></m>
			</meta>
			<overloads><setClientInfo public="1" set="method">
	<f a="param1:param2">
		<c path="String"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLClientInfoException"</e></m>
	</meta>
</setClientInfo></overloads>
		</setClientInfo>
		<isValid public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isValid>
		<createSQLXML public="1" set="method">
			<f a=""><c path="java.sql.SQLXML"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</createSQLXML>
		<createNClob public="1" set="method">
			<f a=""><c path="java.sql.NClob"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</createNClob>
		<createBlob public="1" set="method">
			<f a=""><c path="java.sql.Blob"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</createBlob>
		<createClob public="1" set="method">
			<f a=""><c path="java.sql.Clob"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</createClob>
		<prepareStatement public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.NativeArray"><c path="String"/></c>
				<c path="java.sql.PreparedStatement"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<prepareStatement public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<c path="java.sql.PreparedStatement"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</prepareStatement>
				<prepareStatement public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.sql.PreparedStatement"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</prepareStatement>
				<prepareStatement public="1" set="method">
					<f a="param1:param2:param3:param4">
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.sql.PreparedStatement"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</prepareStatement>
				<prepareStatement public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<x path="Int"/>
						<c path="java.sql.PreparedStatement"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</prepareStatement>
				<prepareStatement public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.NativeArray"><x path="Int"/></c>
						<c path="java.sql.PreparedStatement"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</prepareStatement>
			</overloads>
		</prepareStatement>
		<prepareCall public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.sql.CallableStatement"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<prepareCall public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<c path="java.sql.CallableStatement"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</prepareCall>
				<prepareCall public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.sql.CallableStatement"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</prepareCall>
			</overloads>
		</prepareCall>
		<createStatement public="1" set="method">
			<f a="param1:param2:param3">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.sql.Statement"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<createStatement public="1" set="method">
					<f a=""><c path="java.sql.Statement"/></f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</createStatement>
				<createStatement public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.sql.Statement"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</createStatement>
			</overloads>
		</createStatement>
		<releaseSavepoint public="1" set="method">
			<f a="param1">
				<c path="java.sql.Savepoint"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</releaseSavepoint>
		<rollback public="1" set="method">
			<f a="param1">
				<c path="java.sql.Savepoint"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><rollback public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</rollback></overloads>
		</rollback>
		<setSavepoint public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.sql.Savepoint"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><setSavepoint public="1" set="method">
	<f a=""><c path="java.sql.Savepoint"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</setSavepoint></overloads>
		</setSavepoint>
		<getHoldability public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getHoldability>
		<setHoldability public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setHoldability>
		<setTypeMap public="1" set="method">
			<f a="param1">
				<c path="java.util.Map">
					<c path="String"/>
					<c path="java.lang.Class"><d/></c>
				</c>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setTypeMap>
		<getTypeMap public="1" set="method">
			<f a=""><c path="java.util.Map">
	<c path="String"/>
	<c path="java.lang.Class"><d/></c>
</c></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getTypeMap>
		<clearWarnings public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</clearWarnings>
		<getWarnings public="1" set="method">
			<f a=""><c path="java.sql.SQLWarning"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getWarnings>
		<getTransactionIsolation public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getTransactionIsolation>
		<setTransactionIsolation public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setTransactionIsolation>
		<getCatalog public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getCatalog>
		<setCatalog public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setCatalog>
		<isReadOnly public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isReadOnly>
		<setReadOnly public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setReadOnly>
		<getMetaData public="1" set="method">
			<f a=""><c path="java.sql.DatabaseMetaData"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getMetaData>
		<isClosed public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isClosed>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</close>
		<commit public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</commit>
		<getAutoCommit public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getAutoCommit>
		<setAutoCommit public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setAutoCommit>
		<nativeSQL public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</nativeSQL>
		<unwrap public="1" params="T" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="unwrap.T"/></c>
				<c path="unwrap.T"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</unwrap>
		<isWrapperFor public="1" set="method">
			<f a="param1">
				<c path="java.lang.Class"><d/></c>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isWrapperFor>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.Connection"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"Connection"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.Connection_Statics" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/Connection.class" module="java.sql.Connection" extern="1">
		<TRANSACTION_NONE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</TRANSACTION_NONE>
		<TRANSACTION_READ_UNCOMMITTED public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</TRANSACTION_READ_UNCOMMITTED>
		<TRANSACTION_READ_COMMITTED public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</TRANSACTION_READ_COMMITTED>
		<TRANSACTION_REPEATABLE_READ public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</TRANSACTION_REPEATABLE_READ>
		<TRANSACTION_SERIALIZABLE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</TRANSACTION_SERIALIZABLE>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.Connection"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"Connection"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.DatabaseMetaData" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/DatabaseMetaData.class" extern="1" interface="1">
		<extends path="java.sql.Wrapper"/>
		<generatedKeyAlwaysReturned public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</generatedKeyAlwaysReturned>
		<getPseudoColumns public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="java.sql.ResultSet"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getPseudoColumns>
		<getFunctionColumns public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="java.sql.ResultSet"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getFunctionColumns>
		<getFunctions public="1" set="method">
			<f a="param1:param2:param3">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="java.sql.ResultSet"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getFunctions>
		<getClientInfoProperties public="1" set="method">
			<f a=""><c path="java.sql.ResultSet"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getClientInfoProperties>
		<autoCommitFailureClosesAllResultSets public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</autoCommitFailureClosesAllResultSets>
		<supportsStoredFunctionsUsingCallSyntax public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsStoredFunctionsUsingCallSyntax>
		<getSchemas public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<c path="java.sql.ResultSet"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getSchemas public="1" set="method">
	<f a=""><c path="java.sql.ResultSet"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getSchemas></overloads>
		</getSchemas>
		<getRowIdLifetime public="1" set="method">
			<f a=""><e path="java.sql.RowIdLifetime"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getRowIdLifetime>
		<supportsStatementPooling public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsStatementPooling>
		<locatorsUpdateCopy public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</locatorsUpdateCopy>
		<getSQLStateType public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getSQLStateType>
		<getJDBCMinorVersion public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getJDBCMinorVersion>
		<getJDBCMajorVersion public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getJDBCMajorVersion>
		<getDatabaseMinorVersion public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getDatabaseMinorVersion>
		<getDatabaseMajorVersion public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getDatabaseMajorVersion>
		<getResultSetHoldability public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getResultSetHoldability>
		<supportsResultSetHoldability public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsResultSetHoldability>
		<getAttributes public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="java.sql.ResultSet"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getAttributes>
		<getSuperTables public="1" set="method">
			<f a="param1:param2:param3">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="java.sql.ResultSet"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getSuperTables>
		<getSuperTypes public="1" set="method">
			<f a="param1:param2:param3">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="java.sql.ResultSet"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getSuperTypes>
		<supportsGetGeneratedKeys public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsGetGeneratedKeys>
		<supportsMultipleOpenResults public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsMultipleOpenResults>
		<supportsNamedParameters public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsNamedParameters>
		<supportsSavepoints public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsSavepoints>
		<getConnection public="1" set="method">
			<f a=""><c path="java.sql.Connection"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getConnection>
		<getUDTs public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="java.NativeArray"><x path="Int"/></c>
				<c path="java.sql.ResultSet"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getUDTs>
		<supportsBatchUpdates public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsBatchUpdates>
		<insertsAreDetected public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</insertsAreDetected>
		<deletesAreDetected public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</deletesAreDetected>
		<updatesAreDetected public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</updatesAreDetected>
		<othersInsertsAreVisible public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</othersInsertsAreVisible>
		<othersDeletesAreVisible public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</othersDeletesAreVisible>
		<othersUpdatesAreVisible public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</othersUpdatesAreVisible>
		<ownInsertsAreVisible public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</ownInsertsAreVisible>
		<ownDeletesAreVisible public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</ownDeletesAreVisible>
		<ownUpdatesAreVisible public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</ownUpdatesAreVisible>
		<supportsResultSetConcurrency public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsResultSetConcurrency>
		<supportsResultSetType public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsResultSetType>
		<getIndexInfo public="1" set="method">
			<f a="param1:param2:param3:param4:param5">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="java.sql.ResultSet"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getIndexInfo>
		<getTypeInfo public="1" set="method">
			<f a=""><c path="java.sql.ResultSet"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getTypeInfo>
		<getCrossReference public="1" set="method">
			<f a="param1:param2:param3:param4:param5:param6">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="java.sql.ResultSet"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getCrossReference>
		<getExportedKeys public="1" set="method">
			<f a="param1:param2:param3">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="java.sql.ResultSet"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getExportedKeys>
		<getImportedKeys public="1" set="method">
			<f a="param1:param2:param3">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="java.sql.ResultSet"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getImportedKeys>
		<getPrimaryKeys public="1" set="method">
			<f a="param1:param2:param3">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="java.sql.ResultSet"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getPrimaryKeys>
		<getVersionColumns public="1" set="method">
			<f a="param1:param2:param3">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="java.sql.ResultSet"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getVersionColumns>
		<getBestRowIdentifier public="1" set="method">
			<f a="param1:param2:param3:param4:param5">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="java.sql.ResultSet"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getBestRowIdentifier>
		<getTablePrivileges public="1" set="method">
			<f a="param1:param2:param3">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="java.sql.ResultSet"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getTablePrivileges>
		<getColumnPrivileges public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="java.sql.ResultSet"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getColumnPrivileges>
		<getColumns public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="java.sql.ResultSet"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getColumns>
		<getTableTypes public="1" set="method">
			<f a=""><c path="java.sql.ResultSet"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getTableTypes>
		<getCatalogs public="1" set="method">
			<f a=""><c path="java.sql.ResultSet"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getCatalogs>
		<getTables public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="java.NativeArray"><c path="String"/></c>
				<c path="java.sql.ResultSet"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getTables>
		<getProcedureColumns public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="java.sql.ResultSet"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getProcedureColumns>
		<getProcedures public="1" set="method">
			<f a="param1:param2:param3">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="java.sql.ResultSet"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getProcedures>
		<dataDefinitionIgnoredInTransactions public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</dataDefinitionIgnoredInTransactions>
		<dataDefinitionCausesTransactionCommit public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</dataDefinitionCausesTransactionCommit>
		<supportsDataManipulationTransactionsOnly public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsDataManipulationTransactionsOnly>
		<supportsDataDefinitionAndDataManipulationTransactions public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsDataDefinitionAndDataManipulationTransactions>
		<supportsTransactionIsolationLevel public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsTransactionIsolationLevel>
		<supportsTransactions public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsTransactions>
		<getDefaultTransactionIsolation public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getDefaultTransactionIsolation>
		<getMaxUserNameLength public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getMaxUserNameLength>
		<getMaxTablesInSelect public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getMaxTablesInSelect>
		<getMaxTableNameLength public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getMaxTableNameLength>
		<getMaxStatements public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getMaxStatements>
		<getMaxStatementLength public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getMaxStatementLength>
		<doesMaxRowSizeIncludeBlobs public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</doesMaxRowSizeIncludeBlobs>
		<getMaxRowSize public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getMaxRowSize>
		<getMaxCatalogNameLength public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getMaxCatalogNameLength>
		<getMaxProcedureNameLength public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getMaxProcedureNameLength>
		<getMaxSchemaNameLength public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getMaxSchemaNameLength>
		<getMaxIndexLength public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getMaxIndexLength>
		<getMaxCursorNameLength public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getMaxCursorNameLength>
		<getMaxConnections public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getMaxConnections>
		<getMaxColumnsInTable public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getMaxColumnsInTable>
		<getMaxColumnsInSelect public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getMaxColumnsInSelect>
		<getMaxColumnsInOrderBy public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getMaxColumnsInOrderBy>
		<getMaxColumnsInIndex public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getMaxColumnsInIndex>
		<getMaxColumnsInGroupBy public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getMaxColumnsInGroupBy>
		<getMaxColumnNameLength public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getMaxColumnNameLength>
		<getMaxCharLiteralLength public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getMaxCharLiteralLength>
		<getMaxBinaryLiteralLength public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getMaxBinaryLiteralLength>
		<supportsOpenStatementsAcrossRollback public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsOpenStatementsAcrossRollback>
		<supportsOpenStatementsAcrossCommit public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsOpenStatementsAcrossCommit>
		<supportsOpenCursorsAcrossRollback public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsOpenCursorsAcrossRollback>
		<supportsOpenCursorsAcrossCommit public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsOpenCursorsAcrossCommit>
		<supportsUnionAll public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsUnionAll>
		<supportsUnion public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsUnion>
		<supportsCorrelatedSubqueries public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsCorrelatedSubqueries>
		<supportsSubqueriesInQuantifieds public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsSubqueriesInQuantifieds>
		<supportsSubqueriesInIns public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsSubqueriesInIns>
		<supportsSubqueriesInExists public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsSubqueriesInExists>
		<supportsSubqueriesInComparisons public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsSubqueriesInComparisons>
		<supportsStoredProcedures public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsStoredProcedures>
		<supportsSelectForUpdate public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsSelectForUpdate>
		<supportsPositionedUpdate public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsPositionedUpdate>
		<supportsPositionedDelete public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsPositionedDelete>
		<supportsCatalogsInPrivilegeDefinitions public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsCatalogsInPrivilegeDefinitions>
		<supportsCatalogsInIndexDefinitions public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsCatalogsInIndexDefinitions>
		<supportsCatalogsInTableDefinitions public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsCatalogsInTableDefinitions>
		<supportsCatalogsInProcedureCalls public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsCatalogsInProcedureCalls>
		<supportsCatalogsInDataManipulation public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsCatalogsInDataManipulation>
		<supportsSchemasInPrivilegeDefinitions public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsSchemasInPrivilegeDefinitions>
		<supportsSchemasInIndexDefinitions public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsSchemasInIndexDefinitions>
		<supportsSchemasInTableDefinitions public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsSchemasInTableDefinitions>
		<supportsSchemasInProcedureCalls public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsSchemasInProcedureCalls>
		<supportsSchemasInDataManipulation public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsSchemasInDataManipulation>
		<getCatalogSeparator public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getCatalogSeparator>
		<isCatalogAtStart public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isCatalogAtStart>
		<getCatalogTerm public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getCatalogTerm>
		<getProcedureTerm public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getProcedureTerm>
		<getSchemaTerm public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getSchemaTerm>
		<supportsLimitedOuterJoins public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsLimitedOuterJoins>
		<supportsFullOuterJoins public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsFullOuterJoins>
		<supportsOuterJoins public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsOuterJoins>
		<supportsIntegrityEnhancementFacility public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsIntegrityEnhancementFacility>
		<supportsANSI92FullSQL public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsANSI92FullSQL>
		<supportsANSI92IntermediateSQL public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsANSI92IntermediateSQL>
		<supportsANSI92EntryLevelSQL public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsANSI92EntryLevelSQL>
		<supportsExtendedSQLGrammar public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsExtendedSQLGrammar>
		<supportsCoreSQLGrammar public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsCoreSQLGrammar>
		<supportsMinimumSQLGrammar public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsMinimumSQLGrammar>
		<supportsNonNullableColumns public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsNonNullableColumns>
		<supportsMultipleTransactions public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsMultipleTransactions>
		<supportsMultipleResultSets public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsMultipleResultSets>
		<supportsLikeEscapeClause public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsLikeEscapeClause>
		<supportsGroupByBeyondSelect public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsGroupByBeyondSelect>
		<supportsGroupByUnrelated public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsGroupByUnrelated>
		<supportsGroupBy public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsGroupBy>
		<supportsOrderByUnrelated public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsOrderByUnrelated>
		<supportsExpressionsInOrderBy public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsExpressionsInOrderBy>
		<supportsDifferentTableCorrelationNames public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsDifferentTableCorrelationNames>
		<supportsTableCorrelationNames public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsTableCorrelationNames>
		<supportsConvert public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><supportsConvert public="1" set="method">
	<f a=""><x path="Bool"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</supportsConvert></overloads>
		</supportsConvert>
		<nullPlusNonNullIsNull public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</nullPlusNonNullIsNull>
		<supportsColumnAliasing public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsColumnAliasing>
		<supportsAlterTableWithDropColumn public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsAlterTableWithDropColumn>
		<supportsAlterTableWithAddColumn public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsAlterTableWithAddColumn>
		<getExtraNameCharacters public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getExtraNameCharacters>
		<getSearchStringEscape public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getSearchStringEscape>
		<getTimeDateFunctions public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getTimeDateFunctions>
		<getSystemFunctions public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getSystemFunctions>
		<getStringFunctions public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getStringFunctions>
		<getNumericFunctions public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getNumericFunctions>
		<getSQLKeywords public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getSQLKeywords>
		<getIdentifierQuoteString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getIdentifierQuoteString>
		<storesMixedCaseQuotedIdentifiers public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</storesMixedCaseQuotedIdentifiers>
		<storesLowerCaseQuotedIdentifiers public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</storesLowerCaseQuotedIdentifiers>
		<storesUpperCaseQuotedIdentifiers public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</storesUpperCaseQuotedIdentifiers>
		<supportsMixedCaseQuotedIdentifiers public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsMixedCaseQuotedIdentifiers>
		<storesMixedCaseIdentifiers public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</storesMixedCaseIdentifiers>
		<storesLowerCaseIdentifiers public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</storesLowerCaseIdentifiers>
		<storesUpperCaseIdentifiers public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</storesUpperCaseIdentifiers>
		<supportsMixedCaseIdentifiers public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</supportsMixedCaseIdentifiers>
		<usesLocalFilePerTable public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</usesLocalFilePerTable>
		<usesLocalFiles public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</usesLocalFiles>
		<getDriverMinorVersion public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getDriverMinorVersion>
		<getDriverMajorVersion public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getDriverMajorVersion>
		<getDriverVersion public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getDriverVersion>
		<getDriverName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getDriverName>
		<getDatabaseProductVersion public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getDatabaseProductVersion>
		<getDatabaseProductName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getDatabaseProductName>
		<nullsAreSortedAtEnd public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</nullsAreSortedAtEnd>
		<nullsAreSortedAtStart public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</nullsAreSortedAtStart>
		<nullsAreSortedLow public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</nullsAreSortedLow>
		<nullsAreSortedHigh public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</nullsAreSortedHigh>
		<isReadOnly public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isReadOnly>
		<getUserName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getUserName>
		<getURL public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getURL>
		<allTablesAreSelectable public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</allTablesAreSelectable>
		<allProceduresAreCallable public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</allProceduresAreCallable>
		<unwrap public="1" params="T" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="unwrap.T"/></c>
				<c path="unwrap.T"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</unwrap>
		<isWrapperFor public="1" set="method">
			<f a="param1">
				<c path="java.lang.Class"><d/></c>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isWrapperFor>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.DatabaseMetaData"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"DatabaseMetaData"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.DatabaseMetaData_Statics" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/DatabaseMetaData.class" module="java.sql.DatabaseMetaData" extern="1">
		<procedureResultUnknown public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</procedureResultUnknown>
		<procedureNoResult public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</procedureNoResult>
		<procedureReturnsResult public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</procedureReturnsResult>
		<procedureColumnUnknown public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</procedureColumnUnknown>
		<procedureColumnIn public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</procedureColumnIn>
		<procedureColumnInOut public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</procedureColumnInOut>
		<procedureColumnOut public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</procedureColumnOut>
		<procedureColumnReturn public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</procedureColumnReturn>
		<procedureColumnResult public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</procedureColumnResult>
		<procedureNoNulls public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</procedureNoNulls>
		<procedureNullable public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</procedureNullable>
		<procedureNullableUnknown public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</procedureNullableUnknown>
		<columnNoNulls public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</columnNoNulls>
		<columnNullable public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</columnNullable>
		<columnNullableUnknown public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</columnNullableUnknown>
		<bestRowTemporary public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</bestRowTemporary>
		<bestRowTransaction public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</bestRowTransaction>
		<bestRowSession public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</bestRowSession>
		<bestRowUnknown public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</bestRowUnknown>
		<bestRowNotPseudo public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</bestRowNotPseudo>
		<bestRowPseudo public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</bestRowPseudo>
		<versionColumnUnknown public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</versionColumnUnknown>
		<versionColumnNotPseudo public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</versionColumnNotPseudo>
		<versionColumnPseudo public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</versionColumnPseudo>
		<importedKeyCascade public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</importedKeyCascade>
		<importedKeyRestrict public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</importedKeyRestrict>
		<importedKeySetNull public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</importedKeySetNull>
		<importedKeyNoAction public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</importedKeyNoAction>
		<importedKeySetDefault public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</importedKeySetDefault>
		<importedKeyInitiallyDeferred public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</importedKeyInitiallyDeferred>
		<importedKeyInitiallyImmediate public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</importedKeyInitiallyImmediate>
		<importedKeyNotDeferrable public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</importedKeyNotDeferrable>
		<typeNoNulls public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</typeNoNulls>
		<typeNullable public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</typeNullable>
		<typeNullableUnknown public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</typeNullableUnknown>
		<typePredNone public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</typePredNone>
		<typePredChar public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</typePredChar>
		<typePredBasic public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</typePredBasic>
		<typeSearchable public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</typeSearchable>
		<tableIndexStatistic public="1" set="null" static="1">
			<t path="java.types.Int16"/>
			<meta><m n=":final"/></meta>
		</tableIndexStatistic>
		<tableIndexClustered public="1" set="null" static="1">
			<t path="java.types.Int16"/>
			<meta><m n=":final"/></meta>
		</tableIndexClustered>
		<tableIndexHashed public="1" set="null" static="1">
			<t path="java.types.Int16"/>
			<meta><m n=":final"/></meta>
		</tableIndexHashed>
		<tableIndexOther public="1" set="null" static="1">
			<t path="java.types.Int16"/>
			<meta><m n=":final"/></meta>
		</tableIndexOther>
		<attributeNoNulls public="1" set="null" static="1">
			<t path="java.types.Int16"/>
			<meta><m n=":final"/></meta>
		</attributeNoNulls>
		<attributeNullable public="1" set="null" static="1">
			<t path="java.types.Int16"/>
			<meta><m n=":final"/></meta>
		</attributeNullable>
		<attributeNullableUnknown public="1" set="null" static="1">
			<t path="java.types.Int16"/>
			<meta><m n=":final"/></meta>
		</attributeNullableUnknown>
		<sqlStateXOpen public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</sqlStateXOpen>
		<sqlStateSQL public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</sqlStateSQL>
		<sqlStateSQL99 public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</sqlStateSQL99>
		<functionColumnUnknown public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</functionColumnUnknown>
		<functionColumnIn public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</functionColumnIn>
		<functionColumnInOut public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</functionColumnInOut>
		<functionColumnOut public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</functionColumnOut>
		<functionReturn public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</functionReturn>
		<functionColumnResult public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</functionColumnResult>
		<functionNoNulls public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</functionNoNulls>
		<functionNullable public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</functionNullable>
		<functionNullableUnknown public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</functionNullableUnknown>
		<functionResultUnknown public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</functionResultUnknown>
		<functionNoTable public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</functionNoTable>
		<functionReturnsTable public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</functionReturnsTable>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.DatabaseMetaData"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"DatabaseMetaData"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Date" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Date.class" extern="1">
		<implements path="java.lang.Comparable"><c path="java.util.Date"/></implements>
		<implements path="java.lang.Cloneable"/>
		<implements path="java.io.Serializable"/>
		<parse public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</parse>
		<UTC public="1" set="method" static="1">
			<f a="param1:param2:param3:param4:param5:param6">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</UTC>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<c path="java.util.Date"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<getTimezoneOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getTimezoneOffset>
		<toGMTString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toGMTString>
		<toLocaleString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<after public="1" set="method">
			<f a="param1">
				<c path="java.util.Date"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</after>
		<before public="1" set="method">
			<f a="param1">
				<c path="java.util.Date"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</before>
		<setTime public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setTime>
		<getTime public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</getTime>
		<setSeconds public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setSeconds>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getSeconds>
		<setMinutes public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setMinutes>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getMinutes>
		<setHours public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setHours>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getHours>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getDay>
		<setDate public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setDate>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getDate>
		<setMonth public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setMonth>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getMonth>
		<setYear public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setYear>
		<getYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getYear>
		<clone public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</clone>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3:param4:param5">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3:param4:param5:param6">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Date"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Date"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.Date" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/Date.class" extern="1">
		<extends path="java.util.Date"/>
		<valueOf public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.sql.Date"/>
			</f>
			<meta><m n=":overload"/></meta>
		</valueOf>
		<setSeconds public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</setSeconds>
		<setMinutes public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</setMinutes>
		<setHours public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</setHours>
		<getSeconds public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</getSeconds>
		<getMinutes public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</getMinutes>
		<getHours public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</getHours>
		<toString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<setTime public="1" set="method" override="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setTime>
		<new public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1:param2:param3">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":deprecated"/>
	</meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.Date"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"Date"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.Driver" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/Driver.class" extern="1" interface="1">
		<getParentLogger public="1" set="method">
			<f a=""><c path="java.util.logging.Logger"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLFeatureNotSupportedException"</e></m>
			</meta>
		</getParentLogger>
		<jdbcCompliant public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</jdbcCompliant>
		<getMinorVersion public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getMinorVersion>
		<getMajorVersion public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getMajorVersion>
		<getPropertyInfo public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.util.Properties"/>
				<c path="java.NativeArray"><c path="java.sql.DriverPropertyInfo"/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getPropertyInfo>
		<acceptsURL public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</acceptsURL>
		<connect public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.util.Properties"/>
				<c path="java.sql.Connection"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</connect>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.Driver"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"Driver"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.DriverManager" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/DriverManager.class" extern="1">
		<println public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</println>
		<getLogStream public="1" set="method" static="1">
			<f a=""><c path="java.io.PrintStream"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</getLogStream>
		<setLogStream public="1" set="method" static="1">
			<f a="param1">
				<c path="java.io.PrintStream"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</setLogStream>
		<getLoginTimeout public="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getLoginTimeout>
		<setLoginTimeout public="1" set="method" static="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setLoginTimeout>
		<getDrivers public="1" set="method" static="1">
			<f a=""><c path="java.util.Enumeration"><c path="java.sql.Driver"/></c></f>
			<meta><m n=":overload"/></meta>
		</getDrivers>
		<deregisterDriver public="1" set="method" static="1">
			<f a="param1">
				<c path="java.sql.Driver"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</deregisterDriver>
		<registerDriver public="1" set="method" static="1">
			<f a="param1">
				<c path="java.sql.Driver"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</registerDriver>
		<getDriver public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.sql.Driver"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getDriver>
		<getConnection public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.sql.Connection"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<getConnection public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.util.Properties"/>
						<c path="java.sql.Connection"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getConnection>
				<getConnection public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<c path="java.sql.Connection"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getConnection>
			</overloads>
		</getConnection>
		<setLogWriter public="1" set="method" static="1">
			<f a="param1">
				<c path="java.io.PrintWriter"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setLogWriter>
		<getLogWriter public="1" set="method" static="1">
			<f a=""><c path="java.io.PrintWriter"/></f>
			<meta><m n=":overload"/></meta>
		</getLogWriter>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.DriverManager"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"DriverManager"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.DriverPropertyInfo" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/DriverPropertyInfo.class" extern="1">
		<name public="1"><c path="String"/></name>
		<description public="1"><c path="String"/></description>
		<required public="1"><x path="Bool"/></required>
		<value public="1"><c path="String"/></value>
		<choices public="1"><c path="java.NativeArray"><c path="String"/></c></choices>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.DriverPropertyInfo"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"DriverPropertyInfo"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.NClob" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/NClob.class" extern="1" interface="1">
		<extends path="java.sql.Clob"/>
		<length public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</length>
		<getSubString public="1" set="method">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getSubString>
		<getCharacterStream public="1" set="method">
			<f a=""><c path="java.io.Reader"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getCharacterStream public="1" set="method">
	<f a="param1:param2">
		<x path="haxe.Int64"/>
		<x path="haxe.Int64"/>
		<c path="java.io.Reader"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getCharacterStream></overloads>
		</getCharacterStream>
		<getAsciiStream public="1" set="method">
			<f a=""><c path="java.io.InputStream"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getAsciiStream>
		<position public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><position public="1" set="method">
	<f a="param1:param2">
		<c path="java.sql.Clob"/>
		<x path="haxe.Int64"/>
		<x path="haxe.Int64"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</position></overloads>
		</position>
		<setString public="1" set="method">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><setString public="1" set="method">
	<f a="param1:param2:param3:param4">
		<x path="haxe.Int64"/>
		<c path="String"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</setString></overloads>
		</setString>
		<setAsciiStream public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="java.io.OutputStream"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setAsciiStream>
		<setCharacterStream public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<c path="java.io.Writer"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setCharacterStream>
		<truncate public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</truncate>
		<free public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</free>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.NClob"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"NClob"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.ParameterMetaData" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/ParameterMetaData.class" extern="1" interface="1">
		<extends path="java.sql.Wrapper"/>
		<getParameterMode public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getParameterMode>
		<getParameterClassName public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getParameterClassName>
		<getParameterTypeName public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getParameterTypeName>
		<getParameterType public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getParameterType>
		<getScale public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getScale>
		<getPrecision public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getPrecision>
		<isSigned public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isSigned>
		<isNullable public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isNullable>
		<getParameterCount public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getParameterCount>
		<unwrap public="1" params="T" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="unwrap.T"/></c>
				<c path="unwrap.T"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</unwrap>
		<isWrapperFor public="1" set="method">
			<f a="param1">
				<c path="java.lang.Class"><d/></c>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isWrapperFor>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.ParameterMetaData"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"ParameterMetaData"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.ParameterMetaData_Statics" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/ParameterMetaData.class" module="java.sql.ParameterMetaData" extern="1">
		<parameterNoNulls public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</parameterNoNulls>
		<parameterNullable public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</parameterNullable>
		<parameterNullableUnknown public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</parameterNullableUnknown>
		<parameterModeUnknown public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</parameterModeUnknown>
		<parameterModeIn public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</parameterModeIn>
		<parameterModeInOut public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</parameterModeInOut>
		<parameterModeOut public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</parameterModeOut>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.ParameterMetaData"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"ParameterMetaData"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.Ref" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/Ref.class" extern="1" interface="1">
		<setObject public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setObject>
		<getObject public="1" set="method">
			<f a=""><d/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getObject public="1" set="method">
	<f a="param1">
		<c path="java.util.Map">
			<c path="String"/>
			<c path="java.lang.Class"><d/></c>
		</c>
		<d/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getObject></overloads>
		</getObject>
		<getBaseTypeName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getBaseTypeName>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.Ref"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"Ref"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.ResultSet" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/ResultSet.class" extern="1" interface="1">
		<extends path="java.sql.Wrapper"/>
		<extends path="java.lang.AutoCloseable"/>
		<getObject public="1" params="T" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.lang.Class"><c path="getObject.T"/></c>
				<c path="getObject.T"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<getObject public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<d/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getObject>
				<getObject public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<d/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getObject>
				<getObject public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.util.Map">
							<c path="String"/>
							<c path="java.lang.Class"><d/></c>
						</c>
						<d/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getObject>
				<getObject public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.util.Map">
							<c path="String"/>
							<c path="java.lang.Class"><d/></c>
						</c>
						<d/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getObject>
				<getObject public="1" params="T" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.lang.Class"><c path="getObject.T"/></c>
						<c path="getObject.T"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getObject>
			</overloads>
		</getObject>
		<updateNClob public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.io.Reader"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<updateNClob public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.sql.NClob"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateNClob>
				<updateNClob public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.sql.NClob"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateNClob>
				<updateNClob public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<c path="java.io.Reader"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateNClob>
				<updateNClob public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="java.io.Reader"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateNClob>
				<updateNClob public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.io.Reader"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateNClob>
			</overloads>
		</updateNClob>
		<updateClob public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.io.Reader"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<updateClob public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.sql.Clob"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateClob>
				<updateClob public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.sql.Clob"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateClob>
				<updateClob public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<c path="java.io.Reader"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateClob>
				<updateClob public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="java.io.Reader"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateClob>
				<updateClob public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.io.Reader"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateClob>
			</overloads>
		</updateClob>
		<updateBlob public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.io.InputStream"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<updateBlob public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.sql.Blob"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateBlob>
				<updateBlob public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.sql.Blob"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateBlob>
				<updateBlob public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<c path="java.io.InputStream"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateBlob>
				<updateBlob public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="java.io.InputStream"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateBlob>
				<updateBlob public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.io.InputStream"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateBlob>
			</overloads>
		</updateBlob>
		<updateCharacterStream public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.io.Reader"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<updateCharacterStream public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<c path="java.io.Reader"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateCharacterStream>
				<updateCharacterStream public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="java.io.Reader"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateCharacterStream>
				<updateCharacterStream public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<c path="java.io.Reader"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateCharacterStream>
				<updateCharacterStream public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="java.io.Reader"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateCharacterStream>
				<updateCharacterStream public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.io.Reader"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateCharacterStream>
			</overloads>
		</updateCharacterStream>
		<updateBinaryStream public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.io.InputStream"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<updateBinaryStream public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<c path="java.io.InputStream"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateBinaryStream>
				<updateBinaryStream public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="java.io.InputStream"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateBinaryStream>
				<updateBinaryStream public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<c path="java.io.InputStream"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateBinaryStream>
				<updateBinaryStream public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="java.io.InputStream"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateBinaryStream>
				<updateBinaryStream public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.io.InputStream"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateBinaryStream>
			</overloads>
		</updateBinaryStream>
		<updateAsciiStream public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.io.InputStream"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<updateAsciiStream public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<c path="java.io.InputStream"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateAsciiStream>
				<updateAsciiStream public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="java.io.InputStream"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateAsciiStream>
				<updateAsciiStream public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<c path="java.io.InputStream"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateAsciiStream>
				<updateAsciiStream public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="java.io.InputStream"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateAsciiStream>
				<updateAsciiStream public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.io.InputStream"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateAsciiStream>
			</overloads>
		</updateAsciiStream>
		<updateNCharacterStream public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.io.Reader"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<updateNCharacterStream public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<c path="java.io.Reader"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateNCharacterStream>
				<updateNCharacterStream public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="java.io.Reader"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateNCharacterStream>
				<updateNCharacterStream public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.io.Reader"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateNCharacterStream>
			</overloads>
		</updateNCharacterStream>
		<getNCharacterStream public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.io.Reader"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getNCharacterStream public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.io.Reader"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getNCharacterStream></overloads>
		</getNCharacterStream>
		<getNString public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getNString public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="String"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getNString></overloads>
		</getNString>
		<updateSQLXML public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.sql.SQLXML"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><updateSQLXML public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<c path="java.sql.SQLXML"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</updateSQLXML></overloads>
		</updateSQLXML>
		<getSQLXML public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.sql.SQLXML"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getSQLXML public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.sql.SQLXML"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getSQLXML></overloads>
		</getSQLXML>
		<getNClob public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.sql.NClob"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getNClob public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.sql.NClob"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getNClob></overloads>
		</getNClob>
		<updateNString public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><updateNString public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</updateNString></overloads>
		</updateNString>
		<isClosed public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isClosed>
		<getHoldability public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getHoldability>
		<updateRowId public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.sql.RowId"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><updateRowId public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<c path="java.sql.RowId"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</updateRowId></overloads>
		</updateRowId>
		<getRowId public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.sql.RowId"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getRowId public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.sql.RowId"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getRowId></overloads>
		</getRowId>
		<updateArray public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.sql.Array"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><updateArray public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<c path="java.sql.Array"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</updateArray></overloads>
		</updateArray>
		<updateRef public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.sql.Ref"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><updateRef public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<c path="java.sql.Ref"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</updateRef></overloads>
		</updateRef>
		<getURL public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.net.URL"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getURL public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.net.URL"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getURL></overloads>
		</getURL>
		<getTimestamp public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.util.Calendar"/>
				<c path="java.sql.Timestamp"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<getTimestamp public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<c path="java.sql.Timestamp"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getTimestamp>
				<getTimestamp public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<c path="java.sql.Timestamp"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getTimestamp>
				<getTimestamp public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.util.Calendar"/>
						<c path="java.sql.Timestamp"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getTimestamp>
			</overloads>
		</getTimestamp>
		<getTime public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.util.Calendar"/>
				<c path="java.sql.Time"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<getTime public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<c path="java.sql.Time"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getTime>
				<getTime public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<c path="java.sql.Time"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getTime>
				<getTime public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.util.Calendar"/>
						<c path="java.sql.Time"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getTime>
			</overloads>
		</getTime>
		<getDate public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.util.Calendar"/>
				<c path="java.sql.Date"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<getDate public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<c path="java.sql.Date"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getDate>
				<getDate public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<c path="java.sql.Date"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getDate>
				<getDate public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<c path="java.util.Calendar"/>
						<c path="java.sql.Date"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getDate>
			</overloads>
		</getDate>
		<getArray public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.sql.Array"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getArray public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.sql.Array"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getArray></overloads>
		</getArray>
		<getClob public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.sql.Clob"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getClob public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.sql.Clob"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getClob></overloads>
		</getClob>
		<getBlob public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.sql.Blob"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getBlob public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.sql.Blob"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getBlob></overloads>
		</getBlob>
		<getRef public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.sql.Ref"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getRef public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.sql.Ref"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getRef></overloads>
		</getRef>
		<getStatement public="1" set="method">
			<f a=""><c path="java.sql.Statement"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getStatement>
		<moveToCurrentRow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</moveToCurrentRow>
		<moveToInsertRow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</moveToInsertRow>
		<cancelRowUpdates public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</cancelRowUpdates>
		<refreshRow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</refreshRow>
		<deleteRow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</deleteRow>
		<updateRow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</updateRow>
		<insertRow public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</insertRow>
		<updateObject public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<updateObject public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<d/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateObject>
				<updateObject public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<d/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateObject>
				<updateObject public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<d/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</updateObject>
			</overloads>
		</updateObject>
		<updateTimestamp public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.sql.Timestamp"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><updateTimestamp public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<c path="java.sql.Timestamp"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</updateTimestamp></overloads>
		</updateTimestamp>
		<updateTime public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.sql.Time"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><updateTime public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<c path="java.sql.Time"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</updateTime></overloads>
		</updateTime>
		<updateDate public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.sql.Date"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><updateDate public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<c path="java.sql.Date"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</updateDate></overloads>
		</updateDate>
		<updateBytes public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><updateBytes public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<c path="java.NativeArray"><t path="java.types.Int8"/></c>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</updateBytes></overloads>
		</updateBytes>
		<updateString public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><updateString public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</updateString></overloads>
		</updateString>
		<updateBigDecimal public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.math.BigDecimal"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><updateBigDecimal public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<c path="java.math.BigDecimal"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</updateBigDecimal></overloads>
		</updateBigDecimal>
		<updateDouble public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><updateDouble public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</updateDouble></overloads>
		</updateDouble>
		<updateFloat public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Single"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><updateFloat public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<x path="Single"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</updateFloat></overloads>
		</updateFloat>
		<updateLong public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><updateLong public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<x path="haxe.Int64"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</updateLong></overloads>
		</updateLong>
		<updateInt public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><updateInt public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</updateInt></overloads>
		</updateInt>
		<updateShort public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<t path="java.types.Int16"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><updateShort public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<t path="java.types.Int16"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</updateShort></overloads>
		</updateShort>
		<updateByte public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<t path="java.types.Int8"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><updateByte public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<t path="java.types.Int8"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</updateByte></overloads>
		</updateByte>
		<updateBoolean public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><updateBoolean public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</updateBoolean></overloads>
		</updateBoolean>
		<updateNull public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><updateNull public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</updateNull></overloads>
		</updateNull>
		<rowDeleted public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</rowDeleted>
		<rowInserted public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</rowInserted>
		<rowUpdated public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</rowUpdated>
		<getConcurrency public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getConcurrency>
		<getType public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getType>
		<getFetchSize public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getFetchSize>
		<setFetchSize public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setFetchSize>
		<getFetchDirection public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getFetchDirection>
		<setFetchDirection public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setFetchDirection>
		<previous public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</previous>
		<relative public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</relative>
		<absolute public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</absolute>
		<getRow public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getRow>
		<last public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</last>
		<first public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</first>
		<afterLast public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</afterLast>
		<beforeFirst public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</beforeFirst>
		<isLast public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isLast>
		<isFirst public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isFirst>
		<isAfterLast public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isAfterLast>
		<isBeforeFirst public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isBeforeFirst>
		<getBigDecimal public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.math.BigDecimal"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads>
				<getBigDecimal public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Int"/>
						<c path="java.math.BigDecimal"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
						<m n=":deprecated"/>
					</meta>
				</getBigDecimal>
				<getBigDecimal public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<x path="Int"/>
						<c path="java.math.BigDecimal"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
						<m n=":deprecated"/>
					</meta>
				</getBigDecimal>
				<getBigDecimal public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<c path="java.math.BigDecimal"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":throws"><e>"java.sql.SQLException"</e></m>
					</meta>
				</getBigDecimal>
			</overloads>
		</getBigDecimal>
		<getCharacterStream public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.io.Reader"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getCharacterStream public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.io.Reader"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getCharacterStream></overloads>
		</getCharacterStream>
		<findColumn public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</findColumn>
		<getMetaData public="1" set="method">
			<f a=""><c path="java.sql.ResultSetMetaData"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getMetaData>
		<getCursorName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getCursorName>
		<clearWarnings public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</clearWarnings>
		<getWarnings public="1" set="method">
			<f a=""><c path="java.sql.SQLWarning"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getWarnings>
		<getBinaryStream public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.io.InputStream"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getBinaryStream public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.io.InputStream"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getBinaryStream></overloads>
		</getBinaryStream>
		<getUnicodeStream public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.io.InputStream"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
				<m n=":deprecated"/>
			</meta>
			<overloads><getUnicodeStream public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.io.InputStream"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
		<m n=":deprecated"/>
	</meta>
</getUnicodeStream></overloads>
		</getUnicodeStream>
		<getAsciiStream public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.io.InputStream"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getAsciiStream public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.io.InputStream"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getAsciiStream></overloads>
		</getAsciiStream>
		<getBytes public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getBytes public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.NativeArray"><t path="java.types.Int8"/></c>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getBytes></overloads>
		</getBytes>
		<getDouble public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getDouble public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Float"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getDouble></overloads>
		</getDouble>
		<getFloat public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Single"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getFloat public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Single"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getFloat></overloads>
		</getFloat>
		<getLong public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getLong public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="haxe.Int64"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getLong></overloads>
		</getLong>
		<getInt public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getInt public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getInt></overloads>
		</getInt>
		<getShort public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<t path="java.types.Int16"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getShort public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<t path="java.types.Int16"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getShort></overloads>
		</getShort>
		<getByte public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<t path="java.types.Int8"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getByte public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<t path="java.types.Int8"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getByte></overloads>
		</getByte>
		<getBoolean public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getBoolean public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getBoolean></overloads>
		</getBoolean>
		<getString public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getString public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="String"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getString></overloads>
		</getString>
		<wasNull public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</wasNull>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</close>
		<next public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</next>
		<unwrap public="1" params="T" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="unwrap.T"/></c>
				<c path="unwrap.T"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</unwrap>
		<isWrapperFor public="1" set="method">
			<f a="param1">
				<c path="java.lang.Class"><d/></c>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isWrapperFor>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.ResultSet"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"ResultSet"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.ResultSet_Statics" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/ResultSet.class" module="java.sql.ResultSet" extern="1">
		<FETCH_FORWARD public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</FETCH_FORWARD>
		<FETCH_REVERSE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</FETCH_REVERSE>
		<FETCH_UNKNOWN public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</FETCH_UNKNOWN>
		<TYPE_FORWARD_ONLY public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</TYPE_FORWARD_ONLY>
		<TYPE_SCROLL_INSENSITIVE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</TYPE_SCROLL_INSENSITIVE>
		<TYPE_SCROLL_SENSITIVE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</TYPE_SCROLL_SENSITIVE>
		<CONCUR_READ_ONLY public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</CONCUR_READ_ONLY>
		<CONCUR_UPDATABLE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</CONCUR_UPDATABLE>
		<HOLD_CURSORS_OVER_COMMIT public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</HOLD_CURSORS_OVER_COMMIT>
		<CLOSE_CURSORS_AT_COMMIT public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</CLOSE_CURSORS_AT_COMMIT>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.ResultSet"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"ResultSet"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.ResultSetMetaData" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/ResultSetMetaData.class" extern="1" interface="1">
		<extends path="java.sql.Wrapper"/>
		<getColumnClassName public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getColumnClassName>
		<isDefinitelyWritable public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isDefinitelyWritable>
		<isWritable public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isWritable>
		<isReadOnly public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isReadOnly>
		<getColumnTypeName public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getColumnTypeName>
		<getColumnType public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getColumnType>
		<getCatalogName public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getCatalogName>
		<getTableName public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getTableName>
		<getScale public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getScale>
		<getPrecision public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getPrecision>
		<getSchemaName public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getSchemaName>
		<getColumnName public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getColumnName>
		<getColumnLabel public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getColumnLabel>
		<getColumnDisplaySize public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getColumnDisplaySize>
		<isSigned public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isSigned>
		<isNullable public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isNullable>
		<isCurrency public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isCurrency>
		<isSearchable public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isSearchable>
		<isCaseSensitive public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isCaseSensitive>
		<isAutoIncrement public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isAutoIncrement>
		<getColumnCount public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getColumnCount>
		<unwrap public="1" params="T" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="unwrap.T"/></c>
				<c path="unwrap.T"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</unwrap>
		<isWrapperFor public="1" set="method">
			<f a="param1">
				<c path="java.lang.Class"><d/></c>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</isWrapperFor>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.ResultSetMetaData"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"ResultSetMetaData"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.ResultSetMetaData_Statics" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/ResultSetMetaData.class" module="java.sql.ResultSetMetaData" extern="1">
		<columnNoNulls public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</columnNoNulls>
		<columnNullable public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</columnNullable>
		<columnNullableUnknown public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</columnNullableUnknown>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.ResultSetMetaData"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"ResultSetMetaData"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.RowId" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/RowId.class" extern="1" interface="1">
		<getBytes public="1" set="method">
			<f a=""><c path="java.NativeArray"><t path="java.types.Int8"/></c></f>
			<meta><m n=":overload"/></meta>
		</getBytes>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.RowId"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"RowId"</e>
			</m>
		</meta>
	</class>
	<enum path="java.sql.RowIdLifetime" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/RowIdLifetime.class">
		<ROWID_VALID_FOREVER/>
		<ROWID_VALID_TRANSACTION/>
		<ROWID_VALID_SESSION/>
		<ROWID_VALID_OTHER/>
		<ROWID_UNSUPPORTED/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"RowIdLifetime"</e>
			</m>
			<m n=":native"><e>"java.sql.RowIdLifetime"</e></m>
		</meta>
	</enum>
	<class path="java.sql.SQLException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/SQLException.class" extern="1">
		<extends path="java.lang.Exception"/>
		<implements path="java.lang.Iterable"><c path="java.lang.Throwable"/></implements>
		<iterator public="1" set="method">
			<f a=""><c path="java.util.Iterator"><c path="java.lang.Throwable"/></c></f>
			<meta><m n=":overload"/></meta>
		</iterator>
		<setNextException public="1" set="method">
			<f a="param1">
				<c path="java.sql.SQLException"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setNextException>
		<getNextException public="1" set="method">
			<f a=""><c path="java.sql.SQLException"/></f>
			<meta><m n=":overload"/></meta>
		</getNextException>
		<getErrorCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getErrorCode>
		<getSQLState public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getSQLState>
		<new public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="String"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.SQLException"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"SQLException"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.SQLClientInfoException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/SQLClientInfoException.class" extern="1">
		<extends path="java.sql.SQLException"/>
		<getFailedProperties public="1" set="method">
			<f a=""><c path="java.util.Map">
	<c path="String"/>
	<e path="java.sql.ClientInfoStatus"/>
</c></f>
			<meta><m n=":overload"/></meta>
		</getFailedProperties>
		<new public="1" set="method">
			<f a="param1:param2:param3:param4:param5">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="java.util.Map">
					<c path="String"/>
					<e path="java.sql.ClientInfoStatus"/>
				</c>
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="java.util.Map">
							<c path="String"/>
							<e path="java.sql.ClientInfoStatus"/>
						</c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="java.util.Map">
							<c path="String"/>
							<e path="java.sql.ClientInfoStatus"/>
						</c>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.util.Map">
							<c path="String"/>
							<e path="java.sql.ClientInfoStatus"/>
						</c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="java.util.Map">
							<c path="String"/>
							<e path="java.sql.ClientInfoStatus"/>
						</c>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="String"/>
						<c path="java.util.Map">
							<c path="String"/>
							<e path="java.sql.ClientInfoStatus"/>
						</c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3:param4">
						<c path="String"/>
						<c path="String"/>
						<c path="java.util.Map">
							<c path="String"/>
							<e path="java.sql.ClientInfoStatus"/>
						</c>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3:param4">
						<c path="String"/>
						<c path="String"/>
						<x path="Int"/>
						<c path="java.util.Map">
							<c path="String"/>
							<e path="java.sql.ClientInfoStatus"/>
						</c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.SQLClientInfoException"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"SQLClientInfoException"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.SQLNonTransientException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/SQLNonTransientException.class" extern="1">
		<extends path="java.sql.SQLException"/>
		<new public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="String"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.SQLNonTransientException"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"SQLNonTransientException"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.SQLFeatureNotSupportedException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/SQLFeatureNotSupportedException.class" extern="1">
		<extends path="java.sql.SQLNonTransientException"/>
		<new public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="String"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.SQLFeatureNotSupportedException"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"SQLFeatureNotSupportedException"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.SQLWarning" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/SQLWarning.class" extern="1">
		<extends path="java.sql.SQLException"/>
		<setNextWarning public="1" set="method">
			<f a="param1">
				<c path="java.sql.SQLWarning"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setNextWarning>
		<getNextWarning public="1" set="method">
			<f a=""><c path="java.sql.SQLWarning"/></f>
			<meta><m n=":overload"/></meta>
		</getNextWarning>
		<new public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="String"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.SQLWarning"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"SQLWarning"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.SQLXML" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/SQLXML.class" extern="1" interface="1">
		<setResult public="1" params="T" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="setResult.T"/></c>
				<c path="setResult.T"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setResult>
		<getSource public="1" params="T" set="method">
			<f a="param1">
				<c path="java.lang.Class"><c path="getSource.T"/></c>
				<c path="getSource.T"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getSource>
		<setString public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setString>
		<getString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getString>
		<setCharacterStream public="1" set="method">
			<f a=""><c path="java.io.Writer"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setCharacterStream>
		<getCharacterStream public="1" set="method">
			<f a=""><c path="java.io.Reader"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getCharacterStream>
		<setBinaryStream public="1" set="method">
			<f a=""><c path="java.io.OutputStream"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</setBinaryStream>
		<getBinaryStream public="1" set="method">
			<f a=""><c path="java.io.InputStream"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getBinaryStream>
		<free public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</free>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.SQLXML"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"SQLXML"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.Savepoint" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/Savepoint.class" extern="1" interface="1">
		<getSavepointName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getSavepointName>
		<getSavepointId public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getSavepointId>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.Savepoint"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"Savepoint"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.Statement_Statics" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/Statement.class" module="java.sql.Statement" extern="1">
		<CLOSE_CURRENT_RESULT public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</CLOSE_CURRENT_RESULT>
		<KEEP_CURRENT_RESULT public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</KEEP_CURRENT_RESULT>
		<CLOSE_ALL_RESULTS public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</CLOSE_ALL_RESULTS>
		<SUCCESS_NO_INFO public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</SUCCESS_NO_INFO>
		<EXECUTE_FAILED public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</EXECUTE_FAILED>
		<RETURN_GENERATED_KEYS public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</RETURN_GENERATED_KEYS>
		<NO_GENERATED_KEYS public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</NO_GENERATED_KEYS>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.Statement"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"Statement"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.Struct" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/Struct.class" extern="1" interface="1">
		<getAttributes public="1" set="method">
			<f a="param1">
				<c path="java.util.Map">
					<c path="String"/>
					<c path="java.lang.Class"><d/></c>
				</c>
				<c path="java.NativeArray"><d/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
			<overloads><getAttributes public="1" set="method">
	<f a=""><c path="java.NativeArray"><d/></c></f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.sql.SQLException"</e></m>
	</meta>
</getAttributes></overloads>
		</getAttributes>
		<getSQLTypeName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.sql.SQLException"</e></m>
			</meta>
		</getSQLTypeName>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.Struct"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"Struct"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.Time" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/Time.class" extern="1">
		<extends path="java.util.Date"/>
		<valueOf public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.sql.Time"/>
			</f>
			<meta><m n=":overload"/></meta>
		</valueOf>
		<setDate public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</setDate>
		<setMonth public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</setMonth>
		<setYear public="1" set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</setYear>
		<getDate public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</getDate>
		<getDay public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</getDay>
		<getMonth public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</getMonth>
		<getYear public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</getYear>
		<toString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<setTime public="1" set="method" override="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setTime>
		<new public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1:param2:param3">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":deprecated"/>
	</meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.Time"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"Time"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.Timestamp" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/Timestamp.class" extern="1">
		<extends path="java.util.Date"/>
		<valueOf public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.sql.Timestamp"/>
			</f>
			<meta><m n=":overload"/></meta>
		</valueOf>
		<compareTo public="1" set="method" override="1">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<compareTo public="1" set="method">
					<f a="param1">
						<c path="java.sql.Timestamp"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</compareTo>
				<compareTo public="1" set="method">
					<f a="param1">
						<c path="java.util.Date"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</compareTo>
			</overloads>
		</compareTo>
		<hashCode public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<after public="1" set="method" override="1">
			<f a="param1">
				<c path="java.sql.Timestamp"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</after>
		<before public="1" set="method" override="1">
			<f a="param1">
				<c path="java.sql.Timestamp"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</before>
		<equals public="1" set="method" override="1">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><equals public="1" set="method">
	<f a="param1">
		<c path="java.sql.Timestamp"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</equals></overloads>
		</equals>
		<setNanos public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setNanos>
		<getNanos public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getNanos>
		<toString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<getTime public="1" set="method" override="1">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</getTime>
		<setTime public="1" set="method" override="1">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setTime>
		<new public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1:param2:param3:param4:param5:param6:param7">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":deprecated"/>
	</meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.Timestamp"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"Timestamp"</e>
			</m>
		</meta>
	</class>
	<class path="java.sql.Types" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/sql/Types.class" extern="1">
		<BIT public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</BIT>
		<TINYINT public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</TINYINT>
		<SMALLINT public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</SMALLINT>
		<INTEGER public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</INTEGER>
		<BIGINT public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</BIGINT>
		<FLOAT public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</FLOAT>
		<REAL public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</REAL>
		<DOUBLE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</DOUBLE>
		<NUMERIC public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</NUMERIC>
		<DECIMAL public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</DECIMAL>
		<CHAR public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</CHAR>
		<VARCHAR public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</VARCHAR>
		<LONGVARCHAR public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</LONGVARCHAR>
		<DATE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</DATE>
		<TIME public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</TIME>
		<TIMESTAMP public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</TIMESTAMP>
		<BINARY public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</BINARY>
		<VARBINARY public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</VARBINARY>
		<LONGVARBINARY public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</LONGVARBINARY>
		<NULL public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</NULL>
		<OTHER public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</OTHER>
		<JAVA_OBJECT public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</JAVA_OBJECT>
		<DISTINCT public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</DISTINCT>
		<STRUCT public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</STRUCT>
		<ARRAY public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</ARRAY>
		<BLOB public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</BLOB>
		<CLOB public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</CLOB>
		<REF public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</REF>
		<DATALINK public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</DATALINK>
		<BOOLEAN public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</BOOLEAN>
		<ROWID public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</ROWID>
		<NCHAR public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</NCHAR>
		<NVARCHAR public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</NVARCHAR>
		<LONGNVARCHAR public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</LONGNVARCHAR>
		<NCLOB public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</NCLOB>
		<SQLXML public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</SQLXML>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.sql.Types"</e></m>
			<m n=":javaCanonical">
				<e>"java.sql"</e>
				<e>"Types"</e>
			</m>
		</meta>
	</class>
	<class path="java.sun.util.LocaleServiceProviderPool" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@sun/util/LocaleServiceProviderPool.class" extern="1">
		<getAllAvailableLocales public="1" set="method" static="1">
			<f a=""><c path="java.NativeArray"><c path="java.util.Locale"/></c></f>
			<meta><m n=":overload"/></meta>
		</getAllAvailableLocales>
		<getPool public="1" set="method" static="1">
			<f a="param1">
				<c path="java.lang.Class"><c path="java.util.spi.LocaleServiceProvider"/></c>
				<c path="java.sun.util.LocaleServiceProviderPool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getPool>
		<getLocalizedObject public="1" params="P:S" set="method">
			<f a="param1:param2:param3:param4:param5:param6">
				<c path="java.sun.util.LocaleServiceProviderPool_LocalizedObjectGetter">
					<c path="getLocalizedObject.P"/>
					<c path="getLocalizedObject.S"/>
				</c>
				<c path="java.util.Locale"/>
				<c path="String"/>
				<c path="java.sun.util.resources.OpenListResourceBundle"/>
				<c path="String"/>
				<c path="java.NativeArray"><d/></c>
				<c path="getLocalizedObject.S"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<getLocalizedObject public="1" params="P:S" set="method">
					<f a="param1:param2:param3">
						<c path="java.sun.util.LocaleServiceProviderPool_LocalizedObjectGetter">
							<c path="getLocalizedObject.P"/>
							<c path="getLocalizedObject.S"/>
						</c>
						<c path="java.util.Locale"/>
						<c path="java.NativeArray"><d/></c>
						<c path="getLocalizedObject.S"/>
					</f>
					<meta><m n=":overload"/></meta>
				</getLocalizedObject>
				<getLocalizedObject public="1" params="P:S" set="method">
					<f a="param1:param2:param3:param4:param5">
						<c path="java.sun.util.LocaleServiceProviderPool_LocalizedObjectGetter">
							<c path="getLocalizedObject.P"/>
							<c path="getLocalizedObject.S"/>
						</c>
						<c path="java.util.Locale"/>
						<c path="java.sun.util.resources.OpenListResourceBundle"/>
						<c path="String"/>
						<c path="java.NativeArray"><d/></c>
						<c path="getLocalizedObject.S"/>
					</f>
					<meta><m n=":overload"/></meta>
				</getLocalizedObject>
			</overloads>
		</getLocalizedObject>
		<hasProviders public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</hasProviders>
		<getAvailableLocales public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.util.Locale"/></c></f>
			<meta><m n=":overload"/></meta>
		</getAvailableLocales>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"sun.util.LocaleServiceProviderPool"</e></m>
			<m n=":javaCanonical">
				<e>"sun.util"</e>
				<e>"LocaleServiceProviderPool"</e>
			</m>
		</meta>
	</class>
	<class path="java.sun.util.LocaleServiceProviderPool_AllAvailableLocales" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@sun/util/LocaleServiceProviderPool$AllAvailableLocales.class" module="java.sun.util.LocaleServiceProviderPool" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"sun.util.LocaleServiceProviderPool$AllAvailableLocales"</e></m>
	<m n=":javaCanonical">
		<e>"sun.util"</e>
		<e>"LocaleServiceProviderPool.AllAvailableLocales"</e>
	</m>
</meta></class>
	<class path="java.util.spi.LocaleServiceProvider" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/spi/LocaleServiceProvider.class" extern="1">
		<getAvailableLocales public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.util.Locale"/></c></f>
			<meta><m n=":overload"/></meta>
		</getAvailableLocales>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.spi.LocaleServiceProvider"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.spi"</e>
				<e>"LocaleServiceProvider"</e>
			</m>
		</meta>
	</class>
	<class path="java.sun.util.LocaleServiceProviderPool_NullProvider" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@sun/util/LocaleServiceProviderPool$NullProvider.class" module="java.sun.util.LocaleServiceProviderPool" extern="1">
		<extends path="java.util.spi.LocaleServiceProvider"/>
		<getAvailableLocales public="1" set="method" override="1">
			<f a=""><c path="java.NativeArray"><c path="java.util.Locale"/></c></f>
			<meta><m n=":overload"/></meta>
		</getAvailableLocales>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"sun.util.LocaleServiceProviderPool$NullProvider"</e></m>
			<m n=":javaCanonical">
				<e>"sun.util"</e>
				<e>"LocaleServiceProviderPool.NullProvider"</e>
			</m>
		</meta>
	</class>
	<class path="java.sun.util.LocaleServiceProviderPool_LocalizedObjectGetter" params="P:S" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@sun/util/LocaleServiceProviderPool$LocalizedObjectGetter.class" module="java.sun.util.LocaleServiceProviderPool" extern="1" interface="1">
		<getObject public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="java.sun.util.LocaleServiceProviderPool_LocalizedObjectGetter.P"/>
				<c path="java.util.Locale"/>
				<c path="String"/>
				<c path="java.NativeArray"><d/></c>
				<c path="java.sun.util.LocaleServiceProviderPool_LocalizedObjectGetter.S"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getObject>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"sun.util.LocaleServiceProviderPool$LocalizedObjectGetter"</e></m>
			<m n=":javaCanonical">
				<e>"sun.util"</e>
				<e>"LocaleServiceProviderPool.LocalizedObjectGetter"</e>
			</m>
		</meta>
	</class>
	<class path="java.sun.util.locale.BaseLocale" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@sun/util/locale/BaseLocale.class" extern="1">
		<getInstance public="1" set="method" static="1">
			<f a="param1:param2:param3:param4">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="java.sun.util.locale.BaseLocale"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getInstance>
		<createInstance public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<c path="java.sun.util.locale.BaseLocale"/>
			</f>
			<meta><m n=":overload"/></meta>
		</createInstance>
		<SEP public="1" static="1">
			<c path="String"/>
			<meta><m n=":final"/></meta>
		</SEP>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<getVariant public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getVariant>
		<getRegion public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getRegion>
		<getScript public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getScript>
		<getLanguage public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getLanguage>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"sun.util.locale.BaseLocale"</e></m>
			<m n=":javaCanonical">
				<e>"sun.util.locale"</e>
				<e>"BaseLocale"</e>
			</m>
		</meta>
	</class>
	<class path="java.sun.util.locale.BaseLocale_Key" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@sun/util/locale/BaseLocale$Key.class" module="java.sun.util.locale.BaseLocale" extern="1">
		<implements path="java.lang.Comparable"><c path="java.sun.util.locale.BaseLocale_Key"/></implements>
		<normalize public="1" set="method" static="1">
			<f a="param1">
				<c path="java.sun.util.locale.BaseLocale_Key"/>
				<c path="java.sun.util.locale.BaseLocale_Key"/>
			</f>
			<meta><m n=":overload"/></meta>
		</normalize>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<c path="java.sun.util.locale.BaseLocale_Key"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<new public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"sun.util.locale.BaseLocale$Key"</e></m>
			<m n=":javaCanonical">
				<e>"sun.util.locale"</e>
				<e>"BaseLocale.Key"</e>
			</m>
		</meta>
	</class>
	<class path="java.sun.util.locale.LocaleObjectCache" params="K:V" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@sun/util/locale/LocaleObjectCache.class" extern="1">
		<normalizeKey set="method">
			<f a="param1">
				<c path="java.sun.util.locale.LocaleObjectCache.K"/>
				<c path="java.sun.util.locale.LocaleObjectCache.K"/>
			</f>
			<meta><m n=":overload"/></meta>
		</normalizeKey>
		<createObject set="method">
			<f a="param1">
				<c path="java.sun.util.locale.LocaleObjectCache.K"/>
				<c path="java.sun.util.locale.LocaleObjectCache.V"/>
			</f>
			<meta><m n=":overload"/></meta>
		</createObject>
		<put set="method">
			<f a="param1:param2">
				<c path="java.sun.util.locale.LocaleObjectCache.K"/>
				<c path="java.sun.util.locale.LocaleObjectCache.V"/>
				<c path="java.sun.util.locale.LocaleObjectCache.V"/>
			</f>
			<meta><m n=":overload"/></meta>
		</put>
		<get public="1" set="method">
			<f a="param1">
				<c path="java.sun.util.locale.LocaleObjectCache.K"/>
				<c path="java.sun.util.locale.LocaleObjectCache.V"/>
			</f>
			<meta><m n=":overload"/></meta>
		</get>
		<new public="1" set="method">
			<f a="param1:param2:param3">
				<x path="Int"/>
				<x path="Single"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"sun.util.locale.LocaleObjectCache"</e></m>
			<m n=":javaCanonical">
				<e>"sun.util.locale"</e>
				<e>"LocaleObjectCache"</e>
			</m>
		</meta>
	</class>
	<class path="java.sun.util.locale.BaseLocale_Cache" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@sun/util/locale/BaseLocale$Cache.class" module="java.sun.util.locale.BaseLocale" extern="1">
		<extends path="java.sun.util.locale.LocaleObjectCache">
			<c path="java.sun.util.locale.BaseLocale_Key"/>
			<c path="java.sun.util.locale.BaseLocale"/>
		</extends>
		<createObject set="method" override="1">
			<f a="param1">
				<d/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><createObject set="method">
	<f a="param1">
		<c path="java.sun.util.locale.BaseLocale_Key"/>
		<c path="java.sun.util.locale.BaseLocale"/>
	</f>
	<meta><m n=":overload"/></meta>
</createObject></overloads>
		</createObject>
		<normalizeKey set="method" override="1">
			<f a="param1">
				<d/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><normalizeKey set="method">
	<f a="param1">
		<c path="java.sun.util.locale.BaseLocale_Key"/>
		<c path="java.sun.util.locale.BaseLocale_Key"/>
	</f>
	<meta><m n=":overload"/></meta>
</normalizeKey></overloads>
		</normalizeKey>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"sun.util.locale.BaseLocale$Cache"</e></m>
			<m n=":javaCanonical">
				<e>"sun.util.locale"</e>
				<e>"BaseLocale.Cache"</e>
			</m>
		</meta>
	</class>
	<class path="java.sun.util.locale.BaseLocale_1" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@sun/util/locale/BaseLocale$1.class" module="java.sun.util.locale.BaseLocale" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"sun.util.locale.BaseLocale$1"</e></m>
	<m n=":javaCanonical">
		<e>"sun.util.locale"</e>
		<e>"BaseLocale.1"</e>
	</m>
</meta></class>
	<class path="java.sun.util.locale.LocaleObjectCache_CacheEntry" params="K:V" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@sun/util/locale/LocaleObjectCache$CacheEntry.class" module="java.sun.util.locale.LocaleObjectCache" extern="1">
		<extends path="java.lang.ref.SoftReference"><c path="java.sun.util.locale.LocaleObjectCache_CacheEntry.V"/></extends>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"sun.util.locale.LocaleObjectCache$CacheEntry"</e></m>
			<m n=":javaCanonical">
				<e>"sun.util.locale"</e>
				<e>"LocaleObjectCache.CacheEntry"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.ResourceBundle" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/ResourceBundle.class" extern="1">
		<clearCache public="1" set="method" static="1">
			<f a="param1">
				<c path="java.lang.ClassLoader"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
			<overloads><clearCache public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":final"/>
	</meta>
</clearCache></overloads>
		</clearCache>
		<getBundle public="1" set="method" static="1">
			<f a="param1:param2:param3:param4">
				<c path="String"/>
				<c path="java.util.Locale"/>
				<c path="java.lang.ClassLoader"/>
				<c path="java.util.ResourceBundle_Control"/>
				<c path="java.util.ResourceBundle"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<getBundle public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<c path="java.util.ResourceBundle"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":final"/>
					</meta>
				</getBundle>
				<getBundle public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.util.ResourceBundle_Control"/>
						<c path="java.util.ResourceBundle"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":final"/>
					</meta>
				</getBundle>
				<getBundle public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.util.Locale"/>
						<c path="java.util.ResourceBundle"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":final"/>
					</meta>
				</getBundle>
				<getBundle public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="java.util.Locale"/>
						<c path="java.util.ResourceBundle_Control"/>
						<c path="java.util.ResourceBundle"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":final"/>
					</meta>
				</getBundle>
				<getBundle public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="java.util.Locale"/>
						<c path="java.lang.ClassLoader"/>
						<c path="java.util.ResourceBundle"/>
					</f>
					<meta><m n=":overload"/></meta>
				</getBundle>
			</overloads>
		</getBundle>
		<handleKeySet set="method">
			<f a=""><c path="java.util.Set"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</handleKeySet>
		<keySet public="1" set="method">
			<f a=""><c path="java.util.Set"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</keySet>
		<containsKey public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</containsKey>
		<getKeys public="1" set="method">
			<f a=""><c path="java.util.Enumeration"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</getKeys>
		<handleGetObject set="method">
			<f a="param1">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</handleGetObject>
		<setParent set="method">
			<f a="param1">
				<c path="java.util.ResourceBundle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setParent>
		<getLocale public="1" set="method">
			<f a=""><c path="java.util.Locale"/></f>
			<meta><m n=":overload"/></meta>
		</getLocale>
		<getObject public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<d/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getObject>
		<getStringArray public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.NativeArray"><c path="String"/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getStringArray>
		<getString public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getString>
		<parent><c path="java.util.ResourceBundle"/></parent>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.ResourceBundle"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"ResourceBundle"</e>
			</m>
		</meta>
	</class>
	<class path="java.sun.util.resources.OpenListResourceBundle" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@sun/util/resources/OpenListResourceBundle.class" extern="1">
		<extends path="java.util.ResourceBundle"/>
		<createMap set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.util.Map">
					<d/>
					<d/>
				</c>
			</f>
			<meta><m n=":overload"/></meta>
		</createMap>
		<getContents set="method">
			<f a=""><c path="java.NativeArray"><c path="java.NativeArray"><d/></c></c></f>
			<meta><m n=":overload"/></meta>
		</getContents>
		<getParent public="1" set="method">
			<f a=""><c path="java.sun.util.resources.OpenListResourceBundle"/></f>
			<meta><m n=":overload"/></meta>
		</getParent>
		<handleGetKeys public="1" set="method">
			<f a=""><c path="java.util.Set"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</handleGetKeys>
		<getKeys public="1" set="method" override="1">
			<f a=""><c path="java.util.Enumeration"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</getKeys>
		<handleGetObject public="1" set="method" override="1">
			<f a="param1">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</handleGetObject>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"sun.util.resources.OpenListResourceBundle"</e></m>
			<m n=":javaCanonical">
				<e>"sun.util.resources"</e>
				<e>"OpenListResourceBundle"</e>
			</m>
		</meta>
	</class>
	<typedef path="java.types.Char16" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/types/Char16.hx"><x path="java.Char16"/></typedef>
	<typedef path="java.types.Int16" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/types/Int16.hx"><x path="java.Int16"/></typedef>
	<typedef path="java.types.Int8" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/types/Int8.hx"><x path="java.Int8"/></typedef>
	<class path="java.util.Collection" params="E" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Collection.class" extern="1" interface="1">
		<extends path="java.lang.Iterable"><c path="java.util.Collection.E"/></extends>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</clear>
		<retainAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</retainAll>
		<removeAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</removeAll>
		<addAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><c path="java.util.Collection.E"/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</addAll>
		<containsAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</containsAll>
		<remove public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove>
		<add public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection.E"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add>
		<toArray public="1" params="T" set="method">
			<f a="param1">
				<c path="java.NativeArray"><c path="toArray.T"/></c>
				<c path="java.NativeArray"><c path="toArray.T"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><toArray public="1" set="method">
	<f a=""><c path="java.NativeArray"><d/></c></f>
	<meta><m n=":overload"/></meta>
</toArray></overloads>
		</toArray>
		<iterator public="1" set="method">
			<f a=""><c path="java.util.Iterator"><c path="java.util.Collection.E"/></c></f>
			<meta><m n=":overload"/></meta>
		</iterator>
		<contains public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</contains>
		<isEmpty public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isEmpty>
		<size public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</size>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Collection"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Collection"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.AbstractCollection" params="E" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/AbstractCollection.class" extern="1">
		<implements path="java.util.Collection"><c path="java.util.AbstractCollection.E"/></implements>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</clear>
		<retainAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</retainAll>
		<removeAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</removeAll>
		<addAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><c path="java.util.AbstractCollection.E"/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</addAll>
		<containsAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</containsAll>
		<remove public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove>
		<add public="1" set="method">
			<f a="param1">
				<c path="java.util.AbstractCollection.E"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add>
		<toArray public="1" params="T" set="method">
			<f a="param1">
				<c path="java.NativeArray"><c path="toArray.T"/></c>
				<c path="java.NativeArray"><c path="toArray.T"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><toArray public="1" set="method">
	<f a=""><c path="java.NativeArray"><d/></c></f>
	<meta><m n=":overload"/></meta>
</toArray></overloads>
		</toArray>
		<contains public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</contains>
		<isEmpty public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isEmpty>
		<size public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</size>
		<iterator public="1" set="method">
			<f a=""><c path="java.util.Iterator"><c path="java.util.AbstractCollection.E"/></c></f>
			<meta><m n=":overload"/></meta>
		</iterator>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.AbstractCollection"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"AbstractCollection"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Set" params="E" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Set.class" extern="1" interface="1">
		<extends path="java.util.Collection"><c path="java.util.Set.E"/></extends>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</clear>
		<removeAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</removeAll>
		<retainAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</retainAll>
		<addAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><c path="java.util.Set.E"/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</addAll>
		<containsAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</containsAll>
		<remove public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove>
		<add public="1" set="method">
			<f a="param1">
				<c path="java.util.Set.E"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add>
		<toArray public="1" params="T" set="method">
			<f a="param1">
				<c path="java.NativeArray"><c path="toArray.T"/></c>
				<c path="java.NativeArray"><c path="toArray.T"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><toArray public="1" set="method">
	<f a=""><c path="java.NativeArray"><d/></c></f>
	<meta><m n=":overload"/></meta>
</toArray></overloads>
		</toArray>
		<iterator public="1" set="method">
			<f a=""><c path="java.util.Iterator"><c path="java.util.Set.E"/></c></f>
			<meta><m n=":overload"/></meta>
		</iterator>
		<contains public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</contains>
		<isEmpty public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isEmpty>
		<size public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</size>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Set"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Set"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.AbstractSet" params="E" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/AbstractSet.class" extern="1">
		<extends path="java.util.AbstractCollection"><c path="java.util.AbstractSet.E"/></extends>
		<implements path="java.util.Set"><c path="java.util.AbstractSet.E"/></implements>
		<removeAll public="1" set="method" override="1">
			<f a="param1">
				<c path="java.util.Collection"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</removeAll>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.AbstractSet"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"AbstractSet"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Calendar" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Calendar.class" extern="1">
		<implements path="java.lang.Comparable"><c path="java.util.Calendar"/></implements>
		<implements path="java.lang.Cloneable"/>
		<implements path="java.io.Serializable"/>
		<getAvailableLocales public="1" set="method" static="1">
			<f a=""><c path="java.NativeArray"><c path="java.util.Locale"/></c></f>
			<meta><m n=":overload"/></meta>
		</getAvailableLocales>
		<getInstance public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="java.util.TimeZone"/>
				<c path="java.util.Locale"/>
				<c path="java.util.Calendar"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<getInstance public="1" set="method">
					<f a=""><c path="java.util.Calendar"/></f>
					<meta><m n=":overload"/></meta>
				</getInstance>
				<getInstance public="1" set="method">
					<f a="param1">
						<c path="java.util.TimeZone"/>
						<c path="java.util.Calendar"/>
					</f>
					<meta><m n=":overload"/></meta>
				</getInstance>
				<getInstance public="1" set="method">
					<f a="param1">
						<c path="java.util.Locale"/>
						<c path="java.util.Calendar"/>
					</f>
					<meta><m n=":overload"/></meta>
				</getInstance>
			</overloads>
		</getInstance>
		<ERA public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</ERA>
		<YEAR public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</YEAR>
		<MONTH public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MONTH>
		<WEEK_OF_YEAR public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</WEEK_OF_YEAR>
		<WEEK_OF_MONTH public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</WEEK_OF_MONTH>
		<DATE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</DATE>
		<DAY_OF_MONTH public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</DAY_OF_MONTH>
		<DAY_OF_YEAR public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</DAY_OF_YEAR>
		<DAY_OF_WEEK public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</DAY_OF_WEEK>
		<DAY_OF_WEEK_IN_MONTH public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</DAY_OF_WEEK_IN_MONTH>
		<AM_PM public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</AM_PM>
		<HOUR public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</HOUR>
		<HOUR_OF_DAY public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</HOUR_OF_DAY>
		<MINUTE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MINUTE>
		<SECOND public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</SECOND>
		<MILLISECOND public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MILLISECOND>
		<ZONE_OFFSET public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</ZONE_OFFSET>
		<DST_OFFSET public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</DST_OFFSET>
		<FIELD_COUNT public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</FIELD_COUNT>
		<SUNDAY public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</SUNDAY>
		<MONDAY public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MONDAY>
		<TUESDAY public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</TUESDAY>
		<WEDNESDAY public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</WEDNESDAY>
		<THURSDAY public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</THURSDAY>
		<FRIDAY public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</FRIDAY>
		<SATURDAY public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</SATURDAY>
		<JANUARY public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</JANUARY>
		<FEBRUARY public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</FEBRUARY>
		<MARCH public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MARCH>
		<APRIL public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</APRIL>
		<MAY public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</MAY>
		<JUNE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</JUNE>
		<JULY public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</JULY>
		<AUGUST public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</AUGUST>
		<SEPTEMBER public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</SEPTEMBER>
		<OCTOBER public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</OCTOBER>
		<NOVEMBER public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</NOVEMBER>
		<DECEMBER public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</DECEMBER>
		<UNDECIMBER public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</UNDECIMBER>
		<AM public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</AM>
		<PM public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</PM>
		<ALL_STYLES public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</ALL_STYLES>
		<SHORT public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</SHORT>
		<LONG public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</LONG>
		<compareTo public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><compareTo public="1" set="method">
	<f a="param1">
		<c path="java.util.Calendar"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</compareTo></overloads>
		</compareTo>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<clone public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</clone>
		<getActualMaximum public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getActualMaximum>
		<getActualMinimum public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getActualMinimum>
		<getLeastMaximum public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getLeastMaximum>
		<getGreatestMinimum public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getGreatestMinimum>
		<getMaximum public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getMaximum>
		<getMinimum public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getMinimum>
		<getWeeksInWeekYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getWeeksInWeekYear>
		<setWeekDate public="1" set="method">
			<f a="param1:param2:param3">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setWeekDate>
		<getWeekYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getWeekYear>
		<isWeekDateSupported public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isWeekDateSupported>
		<getMinimalDaysInFirstWeek public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getMinimalDaysInFirstWeek>
		<setMinimalDaysInFirstWeek public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setMinimalDaysInFirstWeek>
		<getFirstDayOfWeek public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getFirstDayOfWeek>
		<setFirstDayOfWeek public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setFirstDayOfWeek>
		<isLenient public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isLenient>
		<setLenient public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setLenient>
		<getTimeZone public="1" set="method">
			<f a=""><c path="java.util.TimeZone"/></f>
			<meta><m n=":overload"/></meta>
		</getTimeZone>
		<setTimeZone public="1" set="method">
			<f a="param1">
				<c path="java.util.TimeZone"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setTimeZone>
		<roll public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><roll public="1" set="method">
	<f a="param1:param2">
		<x path="Int"/>
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</roll></overloads>
		</roll>
		<add public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add>
		<after public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</after>
		<before public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</before>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<complete set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</complete>
		<getDisplayNames public="1" set="method">
			<f a="param1:param2:param3">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.util.Locale"/>
				<c path="java.util.Map">
					<c path="String"/>
					<x path="java.lang.Integer"/>
				</c>
			</f>
			<meta><m n=":overload"/></meta>
		</getDisplayNames>
		<getDisplayName public="1" set="method">
			<f a="param1:param2:param3">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.util.Locale"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getDisplayName>
		<isSet public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</isSet>
		<clear public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
			<overloads><clear public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":final"/>
	</meta>
</clear></overloads>
		</clear>
		<set public="1" set="method">
			<f a="param1:param2:param3:param4:param5:param6">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
			<overloads>
				<set public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</set>
				<set public="1" set="method">
					<f a="param1:param2:param3">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":final"/>
					</meta>
				</set>
				<set public="1" set="method">
					<f a="param1:param2:param3:param4:param5">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":final"/>
					</meta>
				</set>
			</overloads>
		</set>
		<internalGet set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</internalGet>
		<get public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</get>
		<setTimeInMillis public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setTimeInMillis>
		<getTimeInMillis public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</getTimeInMillis>
		<setTime public="1" set="method">
			<f a="param1">
				<c path="java.util.Date"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</setTime>
		<getTime public="1" set="method">
			<f a=""><c path="java.util.Date"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getTime>
		<computeFields set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</computeFields>
		<computeTime set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</computeTime>
		<fields><c path="java.NativeArray"><x path="Int"/></c></fields>
		<time><x path="haxe.Int64"/></time>
		<isTimeSet><x path="Bool"/></isTimeSet>
		<areFieldsSet><x path="Bool"/></areFieldsSet>
		<new set="method">
			<f a="param1:param2">
				<c path="java.util.TimeZone"/>
				<c path="java.util.Locale"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Calendar"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Calendar"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Calendar_CalendarAccessControlContext" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Calendar$CalendarAccessControlContext.class" module="java.util.Calendar" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.util.Calendar$CalendarAccessControlContext"</e></m>
	<m n=":javaCanonical">
		<e>"java.util"</e>
		<e>"Calendar.CalendarAccessControlContext"</e>
	</m>
</meta></class>
	<class path="java.util.Dictionary" params="K:V" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Dictionary.class" extern="1">
		<remove public="1" set="method">
			<f a="param1">
				<d/>
				<c path="java.util.Dictionary.V"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove>
		<put public="1" set="method">
			<f a="param1:param2">
				<c path="java.util.Dictionary.K"/>
				<c path="java.util.Dictionary.V"/>
				<c path="java.util.Dictionary.V"/>
			</f>
			<meta><m n=":overload"/></meta>
		</put>
		<get public="1" set="method">
			<f a="param1">
				<d/>
				<c path="java.util.Dictionary.V"/>
			</f>
			<meta><m n=":overload"/></meta>
		</get>
		<elements public="1" set="method">
			<f a=""><c path="java.util.Enumeration"><c path="java.util.Dictionary.V"/></c></f>
			<meta><m n=":overload"/></meta>
		</elements>
		<keys public="1" set="method">
			<f a=""><c path="java.util.Enumeration"><c path="java.util.Dictionary.K"/></c></f>
			<meta><m n=":overload"/></meta>
		</keys>
		<isEmpty public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isEmpty>
		<size public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</size>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Dictionary"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Dictionary"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Enumeration" params="E" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Enumeration.class" extern="1" interface="1">
		<nextElement public="1" set="method">
			<f a=""><c path="java.util.Enumeration.E"/></f>
			<meta><m n=":overload"/></meta>
		</nextElement>
		<hasMoreElements public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</hasMoreElements>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Enumeration"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Enumeration"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Map" params="K:V" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Map.class" extern="1" interface="1">
		<entrySet public="1" set="method">
			<f a=""><c path="java.util.Set"><c path="java.util.Map_Entry">
	<c path="java.util.Map.K"/>
	<c path="java.util.Map.V"/>
</c></c></f>
			<meta><m n=":overload"/></meta>
		</entrySet>
		<values public="1" set="method">
			<f a=""><c path="java.util.Collection"><c path="java.util.Map.V"/></c></f>
			<meta><m n=":overload"/></meta>
		</values>
		<keySet public="1" set="method">
			<f a=""><c path="java.util.Set"><c path="java.util.Map.K"/></c></f>
			<meta><m n=":overload"/></meta>
		</keySet>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</clear>
		<putAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Map">
					<c path="java.util.Map.K"/>
					<c path="java.util.Map.V"/>
				</c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</putAll>
		<remove public="1" set="method">
			<f a="param1">
				<d/>
				<c path="java.util.Map.V"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove>
		<put public="1" set="method">
			<f a="param1:param2">
				<c path="java.util.Map.K"/>
				<c path="java.util.Map.V"/>
				<c path="java.util.Map.V"/>
			</f>
			<meta><m n=":overload"/></meta>
		</put>
		<get public="1" set="method">
			<f a="param1">
				<d/>
				<c path="java.util.Map.V"/>
			</f>
			<meta><m n=":overload"/></meta>
		</get>
		<containsValue public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</containsValue>
		<containsKey public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</containsKey>
		<isEmpty public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isEmpty>
		<size public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</size>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Map"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Map"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Hashtable" params="K:V" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Hashtable.class" extern="1">
		<extends path="java.util.Dictionary">
			<c path="java.util.Hashtable.K"/>
			<c path="java.util.Hashtable.V"/>
		</extends>
		<implements path="java.io.Serializable"/>
		<implements path="java.lang.Cloneable"/>
		<implements path="java.util.Map">
			<c path="java.util.Hashtable.K"/>
			<c path="java.util.Hashtable.V"/>
		</implements>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<values public="1" set="method">
			<f a=""><c path="java.util.Collection"><c path="java.util.Hashtable.V"/></c></f>
			<meta><m n=":overload"/></meta>
		</values>
		<entrySet public="1" set="method">
			<f a=""><c path="java.util.Set"><c path="java.util.Map_Entry">
	<c path="java.util.Hashtable.K"/>
	<c path="java.util.Hashtable.V"/>
</c></c></f>
			<meta><m n=":overload"/></meta>
		</entrySet>
		<keySet public="1" set="method">
			<f a=""><c path="java.util.Set"><c path="java.util.Hashtable.K"/></c></f>
			<meta><m n=":overload"/></meta>
		</keySet>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<clone public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</clone>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</clear>
		<putAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Map">
					<c path="java.util.Hashtable.K"/>
					<c path="java.util.Hashtable.V"/>
				</c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</putAll>
		<remove public="1" set="method" override="1">
			<f a="param1">
				<d/>
				<c path="java.util.Hashtable.V"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove>
		<put public="1" set="method" override="1">
			<f a="param1:param2">
				<c path="java.util.Hashtable.K"/>
				<c path="java.util.Hashtable.V"/>
				<c path="java.util.Hashtable.V"/>
			</f>
			<meta><m n=":overload"/></meta>
		</put>
		<rehash set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</rehash>
		<get public="1" set="method" override="1">
			<f a="param1">
				<d/>
				<c path="java.util.Hashtable.V"/>
			</f>
			<meta><m n=":overload"/></meta>
		</get>
		<containsKey public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</containsKey>
		<containsValue public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</containsValue>
		<contains public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</contains>
		<elements public="1" set="method" override="1">
			<f a=""><c path="java.util.Enumeration"><c path="java.util.Hashtable.V"/></c></f>
			<meta><m n=":overload"/></meta>
		</elements>
		<keys public="1" set="method" override="1">
			<f a=""><c path="java.util.Enumeration"><c path="java.util.Hashtable.K"/></c></f>
			<meta><m n=":overload"/></meta>
		</keys>
		<isEmpty public="1" set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isEmpty>
		<size public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</size>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.util.Map">
					<c path="java.util.Hashtable.K"/>
					<c path="java.util.Hashtable.V"/>
				</c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Single"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Hashtable"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Hashtable"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Hashtable_Holder" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Hashtable$Holder.class" module="java.util.Hashtable" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.util.Hashtable$Holder"</e></m>
	<m n=":javaCanonical">
		<e>"java.util"</e>
		<e>"Hashtable.Holder"</e>
	</m>
</meta></class>
	<class path="java.util.Hashtable_KeySet" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Hashtable$KeySet.class" module="java.util.Hashtable" extern="1">
		<extends path="java.util.AbstractSet"><d/></extends>
		<clear public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</clear>
		<remove public="1" set="method" override="1">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove>
		<contains public="1" set="method" override="1">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</contains>
		<size public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</size>
		<iterator public="1" set="method" override="1">
			<f a=""><c path="java.util.Iterator"><d/></c></f>
			<meta><m n=":overload"/></meta>
		</iterator>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Hashtable$KeySet"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Hashtable.KeySet"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Hashtable_EntrySet" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Hashtable$EntrySet.class" module="java.util.Hashtable" extern="1">
		<extends path="java.util.AbstractSet"><c path="java.util.Map_Entry">
	<d/>
	<d/>
</c></extends>
		<add public="1" set="method" override="1">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><add public="1" set="method">
	<f a="param1">
		<c path="java.util.Map_Entry">
			<d/>
			<d/>
		</c>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</add></overloads>
		</add>
		<clear public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</clear>
		<size public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</size>
		<remove public="1" set="method" override="1">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove>
		<contains public="1" set="method" override="1">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</contains>
		<iterator public="1" set="method" override="1">
			<f a=""><c path="java.util.Iterator"><c path="java.util.Map_Entry">
	<d/>
	<d/>
</c></c></f>
			<meta><m n=":overload"/></meta>
		</iterator>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Hashtable$EntrySet"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Hashtable.EntrySet"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Hashtable_ValueCollection" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Hashtable$ValueCollection.class" module="java.util.Hashtable" extern="1">
		<extends path="java.util.AbstractCollection"><d/></extends>
		<clear public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</clear>
		<contains public="1" set="method" override="1">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</contains>
		<size public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</size>
		<iterator public="1" set="method" override="1">
			<f a=""><c path="java.util.Iterator"><d/></c></f>
			<meta><m n=":overload"/></meta>
		</iterator>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Hashtable$ValueCollection"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Hashtable.ValueCollection"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Map_Entry" params="K:V" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Map$Entry.class" module="java.util.Map" extern="1" interface="1">
		<setValue public="1" set="method">
			<f a="param1">
				<c path="java.util.Map_Entry.V"/>
				<c path="java.util.Map_Entry.V"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setValue>
		<getValue public="1" set="method">
			<f a=""><c path="java.util.Map_Entry.V"/></f>
			<meta><m n=":overload"/></meta>
		</getValue>
		<getKey public="1" set="method">
			<f a=""><c path="java.util.Map_Entry.K"/></f>
			<meta><m n=":overload"/></meta>
		</getKey>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Map$Entry"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Map.Entry"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Hashtable_Entry" params="K:V" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Hashtable$Entry.class" module="java.util.Hashtable" extern="1">
		<implements path="java.util.Map_Entry">
			<c path="java.util.Hashtable_Entry.K"/>
			<c path="java.util.Hashtable_Entry.V"/>
		</implements>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<setValue public="1" set="method">
			<f a="param1">
				<c path="java.util.Hashtable_Entry.V"/>
				<c path="java.util.Hashtable_Entry.V"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setValue>
		<getValue public="1" set="method">
			<f a=""><c path="java.util.Hashtable_Entry.V"/></f>
			<meta><m n=":overload"/></meta>
		</getValue>
		<getKey public="1" set="method">
			<f a=""><c path="java.util.Hashtable_Entry.K"/></f>
			<meta><m n=":overload"/></meta>
		</getKey>
		<clone set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</clone>
		<new set="method">
			<f a="param1:param2:param3:param4">
				<x path="Int"/>
				<c path="java.util.Hashtable_Entry.K"/>
				<c path="java.util.Hashtable_Entry.V"/>
				<c path="java.util.Hashtable_Entry">
					<c path="java.util.Hashtable_Entry.K"/>
					<c path="java.util.Hashtable_Entry.V"/>
				</c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Hashtable$Entry"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Hashtable.Entry"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Iterator" params="E" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Iterator.class" extern="1" interface="1">
		<remove public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</remove>
		<next public="1" set="method">
			<f a=""><c path="java.util.Iterator.E"/></f>
			<meta><m n=":overload"/></meta>
		</next>
		<hasNext public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</hasNext>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Iterator"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Iterator"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Hashtable_Enumerator" params="T" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Hashtable$Enumerator.class" module="java.util.Hashtable" extern="1">
		<implements path="java.util.Iterator"><c path="java.util.Hashtable_Enumerator.T"/></implements>
		<implements path="java.util.Enumeration"><c path="java.util.Hashtable_Enumerator.T"/></implements>
		<remove public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</remove>
		<next public="1" set="method">
			<f a=""><c path="java.util.Hashtable_Enumerator.T"/></f>
			<meta><m n=":overload"/></meta>
		</next>
		<hasNext public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</hasNext>
		<nextElement public="1" set="method">
			<f a=""><c path="java.util.Hashtable_Enumerator.T"/></f>
			<meta><m n=":overload"/></meta>
		</nextElement>
		<hasMoreElements public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</hasMoreElements>
		<expectedModCount><x path="Int"/></expectedModCount>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Hashtable$Enumerator"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Hashtable.Enumerator"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Hashtable_1" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Hashtable$1.class" module="java.util.Hashtable" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.util.Hashtable$1"</e></m>
	<m n=":javaCanonical">
		<e>"java.util"</e>
		<e>"Hashtable.1"</e>
	</m>
</meta></class>
	<class path="java.util.InvalidPropertiesFormatException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/InvalidPropertiesFormatException.class" extern="1">
		<extends path="java.io.IOException"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1">
		<c path="java.lang.Throwable"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.InvalidPropertiesFormatException"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"InvalidPropertiesFormatException"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.List" params="E" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/List.class" extern="1" interface="1">
		<extends path="java.util.Collection"><c path="java.util.List.E"/></extends>
		<subList public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.util.List"><c path="java.util.List.E"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</subList>
		<listIterator public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.util.ListIterator"><c path="java.util.List.E"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><listIterator public="1" set="method">
	<f a=""><c path="java.util.ListIterator"><c path="java.util.List.E"/></c></f>
	<meta><m n=":overload"/></meta>
</listIterator></overloads>
		</listIterator>
		<lastIndexOf public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</lastIndexOf>
		<indexOf public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</indexOf>
		<remove public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.util.List.E"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><remove public="1" set="method">
	<f a="param1">
		<d/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</remove></overloads>
		</remove>
		<add public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<c path="java.util.List.E"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><add public="1" set="method">
	<f a="param1">
		<c path="java.util.List.E"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</add></overloads>
		</add>
		<set public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<c path="java.util.List.E"/>
				<c path="java.util.List.E"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set>
		<get public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="java.util.List.E"/>
			</f>
			<meta><m n=":overload"/></meta>
		</get>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</clear>
		<retainAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</retainAll>
		<removeAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</removeAll>
		<addAll public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<c path="java.util.Collection"><c path="java.util.List.E"/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><addAll public="1" set="method">
	<f a="param1">
		<c path="java.util.Collection"><c path="java.util.List.E"/></c>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</addAll></overloads>
		</addAll>
		<containsAll public="1" set="method">
			<f a="param1">
				<c path="java.util.Collection"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</containsAll>
		<toArray public="1" params="T" set="method">
			<f a="param1">
				<c path="java.NativeArray"><c path="toArray.T"/></c>
				<c path="java.NativeArray"><c path="toArray.T"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><toArray public="1" set="method">
	<f a=""><c path="java.NativeArray"><d/></c></f>
	<meta><m n=":overload"/></meta>
</toArray></overloads>
		</toArray>
		<iterator public="1" set="method">
			<f a=""><c path="java.util.Iterator"><c path="java.util.List.E"/></c></f>
			<meta><m n=":overload"/></meta>
		</iterator>
		<contains public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</contains>
		<isEmpty public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isEmpty>
		<size public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</size>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.List"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"List"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.ListIterator" params="E" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/ListIterator.class" extern="1" interface="1">
		<extends path="java.util.Iterator"><c path="java.util.ListIterator.E"/></extends>
		<add public="1" set="method">
			<f a="param1">
				<c path="java.util.ListIterator.E"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add>
		<set public="1" set="method">
			<f a="param1">
				<c path="java.util.ListIterator.E"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set>
		<remove public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</remove>
		<previousIndex public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</previousIndex>
		<nextIndex public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</nextIndex>
		<previous public="1" set="method">
			<f a=""><c path="java.util.ListIterator.E"/></f>
			<meta><m n=":overload"/></meta>
		</previous>
		<hasPrevious public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</hasPrevious>
		<next public="1" set="method">
			<f a=""><c path="java.util.ListIterator.E"/></f>
			<meta><m n=":overload"/></meta>
		</next>
		<hasNext public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</hasNext>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.ListIterator"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"ListIterator"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Locale" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Locale.class" extern="1">
		<implements path="java.lang.Cloneable"/>
		<implements path="java.io.Serializable"/>
		<forLanguageTag public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.util.Locale"/>
			</f>
			<meta><m n=":overload"/></meta>
		</forLanguageTag>
		<getISOLanguages public="1" set="method" static="1">
			<f a=""><c path="java.NativeArray"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</getISOLanguages>
		<getISOCountries public="1" set="method" static="1">
			<f a=""><c path="java.NativeArray"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</getISOCountries>
		<getAvailableLocales public="1" set="method" static="1">
			<f a=""><c path="java.NativeArray"><c path="java.util.Locale"/></c></f>
			<meta><m n=":overload"/></meta>
		</getAvailableLocales>
		<setDefault public="1" set="method" static="1">
			<f a="param1:param2">
				<e path="java.util.Locale_Category"/>
				<c path="java.util.Locale"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><setDefault public="1" set="method">
	<f a="param1">
		<c path="java.util.Locale"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</setDefault></overloads>
		</setDefault>
		<getDefault public="1" set="method" static="1">
			<f a="param1">
				<e path="java.util.Locale_Category"/>
				<c path="java.util.Locale"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getDefault public="1" set="method">
	<f a=""><c path="java.util.Locale"/></f>
	<meta><m n=":overload"/></meta>
</getDefault></overloads>
		</getDefault>
		<ENGLISH public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</ENGLISH>
		<FRENCH public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</FRENCH>
		<GERMAN public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</GERMAN>
		<ITALIAN public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</ITALIAN>
		<JAPANESE public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</JAPANESE>
		<KOREAN public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</KOREAN>
		<CHINESE public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</CHINESE>
		<SIMPLIFIED_CHINESE public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</SIMPLIFIED_CHINESE>
		<TRADITIONAL_CHINESE public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</TRADITIONAL_CHINESE>
		<FRANCE public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</FRANCE>
		<GERMANY public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</GERMANY>
		<ITALY public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</ITALY>
		<JAPAN public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</JAPAN>
		<KOREA public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</KOREA>
		<CHINA public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</CHINA>
		<PRC public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</PRC>
		<TAIWAN public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</TAIWAN>
		<UK public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</UK>
		<US public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</US>
		<CANADA public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</CANADA>
		<CANADA_FRENCH public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</CANADA_FRENCH>
		<ROOT public="1" static="1">
			<c path="java.util.Locale"/>
			<meta><m n=":final"/></meta>
		</ROOT>
		<PRIVATE_USE_EXTENSION public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</PRIVATE_USE_EXTENSION>
		<UNICODE_LOCALE_EXTENSION public="1" set="null" static="1">
			<t path="java.types.Char16"/>
			<meta><m n=":final"/></meta>
		</UNICODE_LOCALE_EXTENSION>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<clone public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</clone>
		<getDisplayName public="1" set="method">
			<f a="param1">
				<c path="java.util.Locale"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getDisplayName public="1" set="method">
	<f a=""><c path="String"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":final"/>
	</meta>
</getDisplayName></overloads>
		</getDisplayName>
		<getDisplayVariant public="1" set="method">
			<f a="param1">
				<c path="java.util.Locale"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getDisplayVariant public="1" set="method">
	<f a=""><c path="String"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":final"/>
	</meta>
</getDisplayVariant></overloads>
		</getDisplayVariant>
		<getDisplayCountry public="1" set="method">
			<f a="param1">
				<c path="java.util.Locale"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getDisplayCountry public="1" set="method">
	<f a=""><c path="String"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":final"/>
	</meta>
</getDisplayCountry></overloads>
		</getDisplayCountry>
		<getDisplayScript public="1" set="method">
			<f a="param1">
				<c path="java.util.Locale"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getDisplayScript public="1" set="method">
	<f a=""><c path="String"/></f>
	<meta><m n=":overload"/></meta>
</getDisplayScript></overloads>
		</getDisplayScript>
		<getDisplayLanguage public="1" set="method">
			<f a="param1">
				<c path="java.util.Locale"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getDisplayLanguage public="1" set="method">
	<f a=""><c path="String"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":final"/>
	</meta>
</getDisplayLanguage></overloads>
		</getDisplayLanguage>
		<getISO3Country public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.util.MissingResourceException"</e></m>
			</meta>
		</getISO3Country>
		<getISO3Language public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.util.MissingResourceException"</e></m>
			</meta>
		</getISO3Language>
		<toLanguageTag public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toLanguageTag>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</toString>
		<getUnicodeLocaleKeys public="1" set="method">
			<f a=""><c path="java.util.Set"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</getUnicodeLocaleKeys>
		<getUnicodeLocaleType public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getUnicodeLocaleType>
		<getUnicodeLocaleAttributes public="1" set="method">
			<f a=""><c path="java.util.Set"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</getUnicodeLocaleAttributes>
		<getExtensionKeys public="1" set="method">
			<f a=""><c path="java.util.Set"><x path="java.lang.Character"/></c></f>
			<meta><m n=":overload"/></meta>
		</getExtensionKeys>
		<getExtension public="1" set="method">
			<f a="param1">
				<t path="java.types.Char16"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getExtension>
		<getVariant public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getVariant>
		<getCountry public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getCountry>
		<getScript public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getScript>
		<getLanguage public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getLanguage>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Locale"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Locale"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Locale_Cache" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Locale$Cache.class" module="java.util.Locale" extern="1">
		<extends path="java.sun.util.locale.LocaleObjectCache">
			<c path="java.util.Locale_LocaleKey"/>
			<c path="java.util.Locale"/>
		</extends>
		<createObject set="method" override="1">
			<f a="param1">
				<d/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><createObject set="method">
	<f a="param1">
		<c path="java.util.Locale_LocaleKey"/>
		<c path="java.util.Locale"/>
	</f>
	<meta><m n=":overload"/></meta>
</createObject></overloads>
		</createObject>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Locale$Cache"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Locale.Cache"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Locale_LocaleKey" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Locale$LocaleKey.class" module="java.util.Locale" extern="1">
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Locale$LocaleKey"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Locale.LocaleKey"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Locale_LocaleNameGetter" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Locale$LocaleNameGetter.class" module="java.util.Locale" extern="1">
		<implements path="java.sun.util.LocaleServiceProviderPool_LocalizedObjectGetter">
			<c path="java.util.spi.LocaleNameProvider"/>
			<c path="String"/>
		</implements>
		<getObject public="1" set="method">
			<f a="param1:param2:param3:param4">
				<d/>
				<c path="java.util.Locale"/>
				<c path="String"/>
				<c path="java.NativeArray"><d/></c>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getObject public="1" set="method">
	<f a="param1:param2:param3:param4">
		<c path="java.util.spi.LocaleNameProvider"/>
		<c path="java.util.Locale"/>
		<c path="String"/>
		<c path="java.NativeArray"><d/></c>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</getObject></overloads>
		</getObject>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Locale$LocaleNameGetter"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Locale.LocaleNameGetter"</e>
			</m>
		</meta>
	</class>
	<enum path="java.util.Locale_Category" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Locale$Category.class" module="java.util.Locale">
		<FORMAT/>
		<DISPLAY/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Locale.Category"</e>
			</m>
			<m n=":native"><e>"java.util.Locale$Category"</e></m>
		</meta>
	</enum>
	<class path="java.util.Locale_Builder" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Locale$Builder.class" module="java.util.Locale" extern="1">
		<build public="1" set="method">
			<f a=""><c path="java.util.Locale"/></f>
			<meta><m n=":overload"/></meta>
		</build>
		<clearExtensions public="1" set="method">
			<f a=""><c path="java.util.Locale_Builder"/></f>
			<meta><m n=":overload"/></meta>
		</clearExtensions>
		<clear public="1" set="method">
			<f a=""><c path="java.util.Locale_Builder"/></f>
			<meta><m n=":overload"/></meta>
		</clear>
		<removeUnicodeLocaleAttribute public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.util.Locale_Builder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</removeUnicodeLocaleAttribute>
		<addUnicodeLocaleAttribute public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.util.Locale_Builder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</addUnicodeLocaleAttribute>
		<setUnicodeLocaleKeyword public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<c path="java.util.Locale_Builder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setUnicodeLocaleKeyword>
		<setExtension public="1" set="method">
			<f a="param1:param2">
				<t path="java.types.Char16"/>
				<c path="String"/>
				<c path="java.util.Locale_Builder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setExtension>
		<setVariant public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.util.Locale_Builder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setVariant>
		<setRegion public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.util.Locale_Builder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setRegion>
		<setScript public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.util.Locale_Builder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setScript>
		<setLanguage public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.util.Locale_Builder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setLanguage>
		<setLanguageTag public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.util.Locale_Builder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setLanguageTag>
		<setLocale public="1" set="method">
			<f a="param1">
				<c path="java.util.Locale"/>
				<c path="java.util.Locale_Builder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setLocale>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Locale$Builder"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Locale.Builder"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Locale_1" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Locale$1.class" module="java.util.Locale" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.util.Locale$1"</e></m>
	<m n=":javaCanonical">
		<e>"java.util"</e>
		<e>"Locale.1"</e>
	</m>
</meta></class>
	<class path="java.util.MissingResourceException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/MissingResourceException.class" extern="1">
		<extends path="java.lang.RuntimeException"/>
		<getKey public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getKey>
		<getClassName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getClassName>
		<new public="1" set="method">
			<f a="param1:param2:param3">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.MissingResourceException"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"MissingResourceException"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Properties" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Properties.class" extern="1">
		<extends path="java.util.Hashtable">
			<d/>
			<d/>
		</extends>
		<list public="1" set="method">
			<f a="param1">
				<c path="java.io.PrintWriter"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><list public="1" set="method">
	<f a="param1">
		<c path="java.io.PrintStream"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</list></overloads>
		</list>
		<stringPropertyNames public="1" set="method">
			<f a=""><c path="java.util.Set"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</stringPropertyNames>
		<propertyNames public="1" set="method">
			<f a=""><c path="java.util.Enumeration"><d/></c></f>
			<meta><m n=":overload"/></meta>
		</propertyNames>
		<getProperty public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getProperty public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</getProperty></overloads>
		</getProperty>
		<storeToXML public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.io.OutputStream"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><storeToXML public="1" set="method">
	<f a="param1:param2">
		<c path="java.io.OutputStream"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</storeToXML></overloads>
		</storeToXML>
		<loadFromXML public="1" set="method">
			<f a="param1">
				<c path="java.io.InputStream"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.util.InvalidPropertiesFormatException"</e></m>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
		</loadFromXML>
		<store public="1" set="method">
			<f a="param1:param2">
				<c path="java.io.OutputStream"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><store public="1" set="method">
	<f a="param1:param2">
		<c path="java.io.Writer"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</store></overloads>
		</store>
		<save public="1" set="method">
			<f a="param1:param2">
				<c path="java.io.OutputStream"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":deprecated"/>
			</meta>
		</save>
		<load public="1" set="method">
			<f a="param1">
				<c path="java.io.InputStream"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
			</meta>
			<overloads><load public="1" set="method">
	<f a="param1">
		<c path="java.io.Reader"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.io.IOException"</e></m>
	</meta>
</load></overloads>
		</load>
		<setProperty public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</setProperty>
		<defaults><c path="java.util.Properties"/></defaults>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.util.Properties"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Properties"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Properties"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Properties_LineReader" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Properties$LineReader.class" module="java.util.Properties" extern="1">
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.util.Properties"/>
				<c path="java.io.Reader"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1:param2">
		<c path="java.util.Properties"/>
		<c path="java.io.InputStream"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Properties$LineReader"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Properties.LineReader"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.Random" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Random.class" extern="1">
		<implements path="java.io.Serializable"/>
		<nextGaussian public="1" set="method">
			<f a=""><x path="Float"/></f>
			<meta><m n=":overload"/></meta>
		</nextGaussian>
		<nextDouble public="1" set="method">
			<f a=""><x path="Float"/></f>
			<meta><m n=":overload"/></meta>
		</nextDouble>
		<nextFloat public="1" set="method">
			<f a=""><x path="Single"/></f>
			<meta><m n=":overload"/></meta>
		</nextFloat>
		<nextBoolean public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</nextBoolean>
		<nextLong public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</nextLong>
		<nextInt public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><nextInt public="1" set="method">
	<f a=""><x path="Int"/></f>
	<meta><m n=":overload"/></meta>
</nextInt></overloads>
		</nextInt>
		<nextBytes public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</nextBytes>
		<next set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</next>
		<setSeed public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setSeed>
		<new public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Random"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Random"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.ResourceBundle_RBClassLoader" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/ResourceBundle$RBClassLoader.class" module="java.util.ResourceBundle" extern="1">
		<extends path="java.lang.ClassLoader"/>
		<getResourceAsStream public="1" set="method" override="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.io.InputStream"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getResourceAsStream>
		<getResource public="1" set="method" override="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.net.URL"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getResource>
		<loadClass public="1" set="method" override="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.lang.Class"><d/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.ClassNotFoundException"</e></m>
			</meta>
		</loadClass>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.ResourceBundle$RBClassLoader"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"ResourceBundle.RBClassLoader"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.ResourceBundle_CacheKey" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/ResourceBundle$CacheKey.class" module="java.util.ResourceBundle" extern="1">
		<implements path="java.lang.Cloneable"/>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<clone public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</clone>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.ResourceBundle$CacheKey"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"ResourceBundle.CacheKey"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.ResourceBundle_CacheKeyReference" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/ResourceBundle$CacheKeyReference.class" module="java.util.ResourceBundle" extern="1" interface="1">
		<getCacheKey public="1" set="method">
			<f a=""><c path="java.util.ResourceBundle_CacheKey"/></f>
			<meta><m n=":overload"/></meta>
		</getCacheKey>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.ResourceBundle$CacheKeyReference"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"ResourceBundle.CacheKeyReference"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.ResourceBundle_LoaderReference" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/ResourceBundle$LoaderReference.class" module="java.util.ResourceBundle" extern="1">
		<extends path="java.lang.ref.WeakReference"><c path="java.lang.ClassLoader"/></extends>
		<implements path="java.util.ResourceBundle_CacheKeyReference"/>
		<getCacheKey public="1" set="method">
			<f a=""><c path="java.util.ResourceBundle_CacheKey"/></f>
			<meta><m n=":overload"/></meta>
		</getCacheKey>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.ResourceBundle$LoaderReference"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"ResourceBundle.LoaderReference"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.ResourceBundle_BundleReference" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/ResourceBundle$BundleReference.class" module="java.util.ResourceBundle" extern="1">
		<extends path="java.lang.ref.SoftReference"><c path="java.util.ResourceBundle"/></extends>
		<implements path="java.util.ResourceBundle_CacheKeyReference"/>
		<getCacheKey public="1" set="method">
			<f a=""><c path="java.util.ResourceBundle_CacheKey"/></f>
			<meta><m n=":overload"/></meta>
		</getCacheKey>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.ResourceBundle$BundleReference"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"ResourceBundle.BundleReference"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.ResourceBundle_Control" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/ResourceBundle$Control.class" module="java.util.ResourceBundle" extern="1">
		<getNoFallbackControl public="1" set="method" static="1">
			<f a="param1">
				<c path="java.util.List"><c path="String"/></c>
				<c path="java.util.ResourceBundle_Control"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getNoFallbackControl>
		<getControl public="1" set="method" static="1">
			<f a="param1">
				<c path="java.util.List"><c path="String"/></c>
				<c path="java.util.ResourceBundle_Control"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getControl>
		<FORMAT_DEFAULT public="1" static="1">
			<c path="java.util.List"><c path="String"/></c>
			<meta><m n=":final"/></meta>
		</FORMAT_DEFAULT>
		<FORMAT_CLASS public="1" static="1">
			<c path="java.util.List"><c path="String"/></c>
			<meta><m n=":final"/></meta>
		</FORMAT_CLASS>
		<FORMAT_PROPERTIES public="1" static="1">
			<c path="java.util.List"><c path="String"/></c>
			<meta><m n=":final"/></meta>
		</FORMAT_PROPERTIES>
		<TTL_DONT_CACHE public="1" set="null" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":final"/></meta>
		</TTL_DONT_CACHE>
		<TTL_NO_EXPIRATION_CONTROL public="1" set="null" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":final"/></meta>
		</TTL_NO_EXPIRATION_CONTROL>
		<toResourceName public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</toResourceName>
		<toBundleName public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.util.Locale"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</toBundleName>
		<needsReload public="1" set="method">
			<f a="param1:param2:param3:param4:param5:param6">
				<c path="String"/>
				<c path="java.util.Locale"/>
				<c path="String"/>
				<c path="java.lang.ClassLoader"/>
				<c path="java.util.ResourceBundle"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</needsReload>
		<getTimeToLive public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.util.Locale"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getTimeToLive>
		<newBundle public="1" set="method">
			<f a="param1:param2:param3:param4:param5">
				<c path="String"/>
				<c path="java.util.Locale"/>
				<c path="String"/>
				<c path="java.lang.ClassLoader"/>
				<x path="Bool"/>
				<c path="java.util.ResourceBundle"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.IOException"</e></m>
				<m n=":throws"><e>"java.lang.InstantiationException"</e></m>
				<m n=":throws"><e>"java.lang.IllegalAccessException"</e></m>
			</meta>
		</newBundle>
		<getFallbackLocale public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.util.Locale"/>
				<c path="java.util.Locale"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getFallbackLocale>
		<getCandidateLocales public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.util.Locale"/>
				<c path="java.util.List"><c path="java.util.Locale"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</getCandidateLocales>
		<getFormats public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="java.util.List"><c path="String"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</getFormats>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.ResourceBundle$Control"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"ResourceBundle.Control"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.ResourceBundle_Control_CandidateListCache" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/ResourceBundle$Control$CandidateListCache.class" module="java.util.ResourceBundle" extern="1">
		<extends path="java.sun.util.locale.LocaleObjectCache">
			<c path="java.sun.util.locale.BaseLocale"/>
			<c path="java.util.List"><c path="java.util.Locale"/></c>
		</extends>
		<createObject set="method" override="1">
			<f a="param1">
				<d/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><createObject set="method">
	<f a="param1">
		<c path="java.sun.util.locale.BaseLocale"/>
		<c path="java.util.List"><c path="java.util.Locale"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</createObject></overloads>
		</createObject>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.ResourceBundle$Control$CandidateListCache"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"ResourceBundle.Control.CandidateListCache"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.ResourceBundle_SingleFormatControl" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/ResourceBundle$SingleFormatControl.class" module="java.util.ResourceBundle" extern="1">
		<extends path="java.util.ResourceBundle_Control"/>
		<getFormats public="1" set="method" override="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.util.List"><c path="String"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</getFormats>
		<new set="method">
			<f a="param1">
				<c path="java.util.List"><c path="String"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.ResourceBundle$SingleFormatControl"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"ResourceBundle.SingleFormatControl"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.ResourceBundle_NoFallbackControl" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/ResourceBundle$NoFallbackControl.class" module="java.util.ResourceBundle" extern="1">
		<extends path="java.util.ResourceBundle_SingleFormatControl"/>
		<getFallbackLocale public="1" set="method" override="1">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.util.Locale"/>
				<c path="java.util.Locale"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getFallbackLocale>
		<new set="method">
			<f a="param1">
				<c path="java.util.List"><c path="String"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.ResourceBundle$NoFallbackControl"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"ResourceBundle.NoFallbackControl"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.TimeZone" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/TimeZone.class" extern="1">
		<implements path="java.io.Serializable"/>
		<implements path="java.lang.Cloneable"/>
		<setDefault public="1" set="method" static="1">
			<f a="param1">
				<c path="java.util.TimeZone"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setDefault>
		<getDefault public="1" set="method" static="1">
			<f a=""><c path="java.util.TimeZone"/></f>
			<meta><m n=":overload"/></meta>
		</getDefault>
		<getAvailableIDs public="1" set="method" static="1">
			<f a=""><c path="java.NativeArray"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><getAvailableIDs public="1" set="method">
	<f a="param1">
		<x path="Int"/>
		<c path="java.NativeArray"><c path="String"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</getAvailableIDs></overloads>
		</getAvailableIDs>
		<getTimeZone public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.util.TimeZone"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getTimeZone>
		<SHORT public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</SHORT>
		<LONG public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</LONG>
		<clone public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</clone>
		<hasSameRules public="1" set="method">
			<f a="param1">
				<c path="java.util.TimeZone"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</hasSameRules>
		<inDaylightTime public="1" set="method">
			<f a="param1">
				<c path="java.util.Date"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</inDaylightTime>
		<observesDaylightTime public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</observesDaylightTime>
		<useDaylightTime public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</useDaylightTime>
		<getDSTSavings public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getDSTSavings>
		<getDisplayName public="1" set="method">
			<f a="param1:param2:param3">
				<x path="Bool"/>
				<x path="Int"/>
				<c path="java.util.Locale"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<getDisplayName public="1" set="method">
					<f a=""><c path="String"/></f>
					<meta>
						<m n=":overload"/>
						<m n=":final"/>
					</meta>
				</getDisplayName>
				<getDisplayName public="1" set="method">
					<f a="param1">
						<c path="java.util.Locale"/>
						<c path="String"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":final"/>
					</meta>
				</getDisplayName>
				<getDisplayName public="1" set="method">
					<f a="param1:param2">
						<x path="Bool"/>
						<x path="Int"/>
						<c path="String"/>
					</f>
					<meta>
						<m n=":overload"/>
						<m n=":final"/>
					</meta>
				</getDisplayName>
			</overloads>
		</getDisplayName>
		<setID public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setID>
		<getID public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getID>
		<getRawOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getRawOffset>
		<setRawOffset public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setRawOffset>
		<getOffset public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getOffset public="1" set="method">
	<f a="param1:param2:param3:param4:param5:param6">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</getOffset></overloads>
		</getOffset>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.TimeZone"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"TimeZone"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.TimeZone_DisplayNames" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/TimeZone$DisplayNames.class" module="java.util.TimeZone" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.util.TimeZone$DisplayNames"</e></m>
	<m n=":javaCanonical">
		<e>"java.util"</e>
		<e>"TimeZone.DisplayNames"</e>
	</m>
</meta></class>
	<class path="java.util.Timer" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/Timer.class" extern="1">
		<purge public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</purge>
		<cancel public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</cancel>
		<scheduleAtFixedRate public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.util.TimerTask"/>
				<c path="java.util.Date"/>
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><scheduleAtFixedRate public="1" set="method">
	<f a="param1:param2:param3">
		<c path="java.util.TimerTask"/>
		<x path="haxe.Int64"/>
		<x path="haxe.Int64"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</scheduleAtFixedRate></overloads>
		</scheduleAtFixedRate>
		<schedule public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.util.TimerTask"/>
				<c path="java.util.Date"/>
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<schedule public="1" set="method">
					<f a="param1:param2">
						<c path="java.util.TimerTask"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</schedule>
				<schedule public="1" set="method">
					<f a="param1:param2">
						<c path="java.util.TimerTask"/>
						<c path="java.util.Date"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</schedule>
				<schedule public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.util.TimerTask"/>
						<x path="haxe.Int64"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</schedule>
			</overloads>
		</schedule>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.Timer"</e></m>
			<m n=":javaCanonical">
				<e>"java.util"</e>
				<e>"Timer"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.concurrent.Callable" params="V" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/Callable.class" extern="1" interface="1">
		<call public="1" set="method">
			<f a=""><c path="java.util.concurrent.Callable.V"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.Exception"</e></m>
			</meta>
		</call>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.concurrent.Callable"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.concurrent"</e>
				<e>"Callable"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.concurrent.ExecutionException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/ExecutionException.class" extern="1">
		<extends path="java.lang.Exception"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new set="method">
					<f a="param1">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="java.lang.Throwable"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.concurrent.ExecutionException"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.concurrent"</e>
				<e>"ExecutionException"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.concurrent.Executor" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/Executor.class" extern="1" interface="1">
		<execute public="1" set="method">
			<f a="param1">
				<c path="java.lang.Runnable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</execute>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.concurrent.Executor"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.concurrent"</e>
				<e>"Executor"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.concurrent.ExecutorService" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/ExecutorService.class" extern="1" interface="1">
		<extends path="java.util.concurrent.Executor"/>
		<invokeAny public="1" params="T" set="method">
			<f a="param1:param2:param3">
				<c path="java.util.Collection"><c path="java.util.concurrent.Callable"><c path="invokeAny.T"/></c></c>
				<x path="haxe.Int64"/>
				<e path="java.util.concurrent.TimeUnit"/>
				<c path="invokeAny.T"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.util.concurrent.TimeoutException"</e></m>
				<m n=":throws"><e>"java.util.concurrent.ExecutionException"</e></m>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
			</meta>
			<overloads><invokeAny public="1" params="T" set="method">
	<f a="param1">
		<c path="java.util.Collection"><c path="java.util.concurrent.Callable"><c path="invokeAny.T"/></c></c>
		<c path="invokeAny.T"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.util.concurrent.ExecutionException"</e></m>
		<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
	</meta>
</invokeAny></overloads>
		</invokeAny>
		<invokeAll public="1" params="T" set="method">
			<f a="param1:param2:param3">
				<c path="java.util.Collection"><c path="java.util.concurrent.Callable"><c path="invokeAll.T"/></c></c>
				<x path="haxe.Int64"/>
				<e path="java.util.concurrent.TimeUnit"/>
				<c path="java.util.List"><c path="java.util.concurrent.Future"><c path="invokeAll.T"/></c></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
			</meta>
			<overloads><invokeAll public="1" params="T" set="method">
	<f a="param1">
		<c path="java.util.Collection"><c path="java.util.concurrent.Callable"><c path="invokeAll.T"/></c></c>
		<c path="java.util.List"><c path="java.util.concurrent.Future"><c path="invokeAll.T"/></c></c>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
	</meta>
</invokeAll></overloads>
		</invokeAll>
		<submit public="1" set="method">
			<f a="param1">
				<c path="java.lang.Runnable"/>
				<c path="java.util.concurrent.Future"><d/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<submit public="1" params="T" set="method">
					<f a="param1">
						<c path="java.util.concurrent.Callable"><c path="submit.T"/></c>
						<c path="java.util.concurrent.Future"><c path="submit.T"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</submit>
				<submit public="1" params="T" set="method">
					<f a="param1:param2">
						<c path="java.lang.Runnable"/>
						<c path="submit.T"/>
						<c path="java.util.concurrent.Future"><c path="submit.T"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</submit>
			</overloads>
		</submit>
		<awaitTermination public="1" set="method">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<e path="java.util.concurrent.TimeUnit"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
			</meta>
		</awaitTermination>
		<isTerminated public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isTerminated>
		<isShutdown public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isShutdown>
		<shutdownNow public="1" set="method">
			<f a=""><c path="java.util.List"><c path="java.lang.Runnable"/></c></f>
			<meta><m n=":overload"/></meta>
		</shutdownNow>
		<shutdown public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</shutdown>
		<execute public="1" set="method">
			<f a="param1">
				<c path="java.lang.Runnable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</execute>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.concurrent.ExecutorService"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.concurrent"</e>
				<e>"ExecutorService"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.concurrent.Future" params="V" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/Future.class" extern="1" interface="1">
		<get public="1" set="method">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<e path="java.util.concurrent.TimeUnit"/>
				<c path="java.util.concurrent.Future.V"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.util.concurrent.TimeoutException"</e></m>
				<m n=":throws"><e>"java.util.concurrent.ExecutionException"</e></m>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
			</meta>
			<overloads><get public="1" set="method">
	<f a=""><c path="java.util.concurrent.Future.V"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.util.concurrent.ExecutionException"</e></m>
		<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
	</meta>
</get></overloads>
		</get>
		<isDone public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isDone>
		<isCancelled public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isCancelled>
		<cancel public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</cancel>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.concurrent.Future"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.concurrent"</e>
				<e>"Future"</e>
			</m>
		</meta>
	</class>
	<enum path="java.util.concurrent.TimeUnit" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/TimeUnit.class">
		<DAYS/>
		<HOURS/>
		<MINUTES/>
		<SECONDS/>
		<MILLISECONDS/>
		<MICROSECONDS/>
		<NANOSECONDS/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":javaCanonical">
				<e>"java.util.concurrent"</e>
				<e>"TimeUnit"</e>
			</m>
			<m n=":native"><e>"java.util.concurrent.TimeUnit"</e></m>
		</meta>
	</enum>
	<class path="java.util.concurrent.TimeoutException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/TimeoutException.class" extern="1">
		<extends path="java.lang.Exception"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.concurrent.TimeoutException"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.concurrent"</e>
				<e>"TimeoutException"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.concurrent.atomic.AtomicReference" params="V" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/atomic/AtomicReference.class" extern="1">
		<implements path="java.io.Serializable"/>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<getAndSet public="1" set="method">
			<f a="param1">
				<c path="java.util.concurrent.atomic.AtomicReference.V"/>
				<c path="java.util.concurrent.atomic.AtomicReference.V"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getAndSet>
		<weakCompareAndSet public="1" set="method">
			<f a="param1:param2">
				<c path="java.util.concurrent.atomic.AtomicReference.V"/>
				<c path="java.util.concurrent.atomic.AtomicReference.V"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</weakCompareAndSet>
		<compareAndSet public="1" set="method">
			<f a="param1:param2">
				<c path="java.util.concurrent.atomic.AtomicReference.V"/>
				<c path="java.util.concurrent.atomic.AtomicReference.V"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</compareAndSet>
		<lazySet public="1" set="method">
			<f a="param1">
				<c path="java.util.concurrent.atomic.AtomicReference.V"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</lazySet>
		<set public="1" set="method">
			<f a="param1">
				<c path="java.util.concurrent.atomic.AtomicReference.V"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</set>
		<get public="1" set="method">
			<f a=""><c path="java.util.concurrent.atomic.AtomicReference.V"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</get>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1">
		<c path="java.util.concurrent.atomic.AtomicReference.V"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.concurrent.atomic.AtomicReference"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.concurrent.atomic"</e>
				<e>"AtomicReference"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.concurrent.locks.AbstractOwnableSynchronizer" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/locks/AbstractOwnableSynchronizer.class" extern="1">
		<implements path="java.io.Serializable"/>
		<getExclusiveOwnerThread set="method">
			<f a=""><c path="java.lang.Thread"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getExclusiveOwnerThread>
		<setExclusiveOwnerThread set="method">
			<f a="param1">
				<c path="java.lang.Thread"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</setExclusiveOwnerThread>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.concurrent.locks.AbstractOwnableSynchronizer"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.concurrent.locks"</e>
				<e>"AbstractOwnableSynchronizer"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.concurrent.locks.AbstractQueuedSynchronizer" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/locks/AbstractQueuedSynchronizer.class" extern="1">
		<extends path="java.util.concurrent.locks.AbstractOwnableSynchronizer"/>
		<implements path="java.io.Serializable"/>
		<getWaitingThreads public="1" set="method">
			<f a="param1">
				<c path="java.util.concurrent.locks.AbstractQueuedSynchronizer_ConditionObject"/>
				<c path="java.util.Collection"><c path="java.lang.Thread"/></c>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getWaitingThreads>
		<getWaitQueueLength public="1" set="method">
			<f a="param1">
				<c path="java.util.concurrent.locks.AbstractQueuedSynchronizer_ConditionObject"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getWaitQueueLength>
		<hasWaiters public="1" set="method">
			<f a="param1">
				<c path="java.util.concurrent.locks.AbstractQueuedSynchronizer_ConditionObject"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</hasWaiters>
		<owns public="1" set="method">
			<f a="param1">
				<c path="java.util.concurrent.locks.AbstractQueuedSynchronizer_ConditionObject"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</owns>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<getSharedQueuedThreads public="1" set="method">
			<f a=""><c path="java.util.Collection"><c path="java.lang.Thread"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getSharedQueuedThreads>
		<getExclusiveQueuedThreads public="1" set="method">
			<f a=""><c path="java.util.Collection"><c path="java.lang.Thread"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getExclusiveQueuedThreads>
		<getQueuedThreads public="1" set="method">
			<f a=""><c path="java.util.Collection"><c path="java.lang.Thread"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getQueuedThreads>
		<getQueueLength public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getQueueLength>
		<hasQueuedPredecessors public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</hasQueuedPredecessors>
		<isQueued public="1" set="method">
			<f a="param1">
				<c path="java.lang.Thread"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</isQueued>
		<getFirstQueuedThread public="1" set="method">
			<f a=""><c path="java.lang.Thread"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getFirstQueuedThread>
		<hasContended public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</hasContended>
		<hasQueuedThreads public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</hasQueuedThreads>
		<releaseShared public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</releaseShared>
		<tryAcquireSharedNanos public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
				<m n=":final"/>
			</meta>
		</tryAcquireSharedNanos>
		<acquireSharedInterruptibly public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
				<m n=":final"/>
			</meta>
		</acquireSharedInterruptibly>
		<acquireShared public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</acquireShared>
		<release public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</release>
		<tryAcquireNanos public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
				<m n=":final"/>
			</meta>
		</tryAcquireNanos>
		<acquireInterruptibly public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
				<m n=":final"/>
			</meta>
		</acquireInterruptibly>
		<acquire public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</acquire>
		<isHeldExclusively set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</isHeldExclusively>
		<tryReleaseShared set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</tryReleaseShared>
		<tryAcquireShared set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</tryAcquireShared>
		<tryRelease set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</tryRelease>
		<tryAcquire set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</tryAcquire>
		<compareAndSetState set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</compareAndSetState>
		<setState set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</setState>
		<getState set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getState>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.concurrent.locks.AbstractQueuedSynchronizer"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.concurrent.locks"</e>
				<e>"AbstractQueuedSynchronizer"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.concurrent.locks.AbstractQueuedSynchronizer_Node" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.class" module="java.util.concurrent.locks.AbstractQueuedSynchronizer" extern="1"><meta>
	<m n=":final"/>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.util.concurrent.locks.AbstractQueuedSynchronizer$Node"</e></m>
	<m n=":javaCanonical">
		<e>"java.util.concurrent.locks"</e>
		<e>"AbstractQueuedSynchronizer.Node"</e>
	</m>
</meta></class>
	<class path="java.util.concurrent.locks.Condition" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/locks/Condition.class" extern="1" interface="1">
		<signalAll public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</signalAll>
		<signal public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</signal>
		<awaitUntil public="1" set="method">
			<f a="param1">
				<c path="java.util.Date"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
			</meta>
		</awaitUntil>
		<await public="1" set="method">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<e path="java.util.concurrent.TimeUnit"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
			</meta>
			<overloads><await public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
	</meta>
</await></overloads>
		</await>
		<awaitNanos public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
			</meta>
		</awaitNanos>
		<awaitUninterruptibly public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</awaitUninterruptibly>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.concurrent.locks.Condition"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.concurrent.locks"</e>
				<e>"Condition"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.concurrent.locks.AbstractQueuedSynchronizer_ConditionObject" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.class" module="java.util.concurrent.locks.AbstractQueuedSynchronizer" extern="1">
		<implements path="java.util.concurrent.locks.Condition"/>
		<implements path="java.io.Serializable"/>
		<getWaitingThreads set="method">
			<f a=""><c path="java.util.Collection"><c path="java.lang.Thread"/></c></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getWaitingThreads>
		<getWaitQueueLength set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getWaitQueueLength>
		<hasWaiters set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</hasWaiters>
		<await public="1" set="method">
			<f a="param1:param2">
				<x path="haxe.Int64"/>
				<e path="java.util.concurrent.TimeUnit"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
				<m n=":final"/>
			</meta>
			<overloads><await public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
		<m n=":final"/>
	</meta>
</await></overloads>
		</await>
		<awaitUntil public="1" set="method">
			<f a="param1">
				<c path="java.util.Date"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
				<m n=":final"/>
			</meta>
		</awaitUntil>
		<awaitNanos public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.InterruptedException"</e></m>
				<m n=":final"/>
			</meta>
		</awaitNanos>
		<awaitUninterruptibly public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</awaitUninterruptibly>
		<signalAll public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</signalAll>
		<signal public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</signal>
		<new public="1" set="method">
			<f a="param1">
				<c path="java.util.concurrent.locks.AbstractQueuedSynchronizer"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.concurrent.locks"</e>
				<e>"AbstractQueuedSynchronizer.ConditionObject"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.concurrent.locks.ReentrantLock_Sync" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/locks/ReentrantLock$Sync.class" module="java.util.concurrent.locks.ReentrantLock" extern="1">
		<extends path="java.util.concurrent.locks.AbstractQueuedSynchronizer"/>
		<isHeldExclusively set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</isHeldExclusively>
		<tryRelease set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</tryRelease>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.concurrent.locks.ReentrantLock$Sync"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.concurrent.locks"</e>
				<e>"ReentrantLock.Sync"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.concurrent.locks.ReentrantLock_NonfairSync" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/locks/ReentrantLock$NonfairSync.class" module="java.util.concurrent.locks.ReentrantLock" extern="1">
		<extends path="java.util.concurrent.locks.ReentrantLock_Sync"/>
		<tryAcquire set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</tryAcquire>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.concurrent.locks.ReentrantLock$NonfairSync"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.concurrent.locks"</e>
				<e>"ReentrantLock.NonfairSync"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.concurrent.locks.ReentrantLock_FairSync" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/concurrent/locks/ReentrantLock$FairSync.class" module="java.util.concurrent.locks.ReentrantLock" extern="1">
		<extends path="java.util.concurrent.locks.ReentrantLock_Sync"/>
		<tryAcquire set="method" override="1">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</tryAcquire>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.concurrent.locks.ReentrantLock$FairSync"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.concurrent.locks"</e>
				<e>"ReentrantLock.FairSync"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.logging.ErrorManager" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/logging/ErrorManager.class" extern="1">
		<GENERIC_FAILURE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</GENERIC_FAILURE>
		<WRITE_FAILURE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</WRITE_FAILURE>
		<FLUSH_FAILURE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</FLUSH_FAILURE>
		<CLOSE_FAILURE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</CLOSE_FAILURE>
		<OPEN_FAILURE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</OPEN_FAILURE>
		<FORMAT_FAILURE public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</FORMAT_FAILURE>
		<error public="1" set="method">
			<f a="param1:param2:param3">
				<c path="String"/>
				<c path="java.lang.Exception"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</error>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.logging.ErrorManager"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.logging"</e>
				<e>"ErrorManager"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.logging.Filter" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/logging/Filter.class" extern="1" interface="1">
		<isLoggable public="1" set="method">
			<f a="param1">
				<c path="java.util.logging.LogRecord"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isLoggable>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.logging.Filter"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.logging"</e>
				<e>"Filter"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.logging.Formatter" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/logging/Formatter.class" extern="1">
		<formatMessage public="1" set="method">
			<f a="param1">
				<c path="java.util.logging.LogRecord"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</formatMessage>
		<getTail public="1" set="method">
			<f a="param1">
				<c path="java.util.logging.Handler"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getTail>
		<getHead public="1" set="method">
			<f a="param1">
				<c path="java.util.logging.Handler"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getHead>
		<format public="1" set="method">
			<f a="param1">
				<c path="java.util.logging.LogRecord"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</format>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.logging.Formatter"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.logging"</e>
				<e>"Formatter"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.logging.Handler" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/logging/Handler.class" extern="1">
		<isLoggable public="1" set="method">
			<f a="param1">
				<c path="java.util.logging.LogRecord"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isLoggable>
		<getLevel public="1" set="method">
			<f a=""><c path="java.util.logging.Level"/></f>
			<meta><m n=":overload"/></meta>
		</getLevel>
		<setLevel public="1" set="method">
			<f a="param1">
				<c path="java.util.logging.Level"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
			</meta>
		</setLevel>
		<reportError set="method">
			<f a="param1:param2:param3">
				<c path="String"/>
				<c path="java.lang.Exception"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</reportError>
		<getErrorManager public="1" set="method">
			<f a=""><c path="java.util.logging.ErrorManager"/></f>
			<meta><m n=":overload"/></meta>
		</getErrorManager>
		<setErrorManager public="1" set="method">
			<f a="param1">
				<c path="java.util.logging.ErrorManager"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setErrorManager>
		<getFilter public="1" set="method">
			<f a=""><c path="java.util.logging.Filter"/></f>
			<meta><m n=":overload"/></meta>
		</getFilter>
		<setFilter public="1" set="method">
			<f a="param1">
				<c path="java.util.logging.Filter"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
			</meta>
		</setFilter>
		<getEncoding public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getEncoding>
		<setEncoding public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.io.UnsupportedEncodingException"</e></m>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
			</meta>
		</setEncoding>
		<getFormatter public="1" set="method">
			<f a=""><c path="java.util.logging.Formatter"/></f>
			<meta><m n=":overload"/></meta>
		</getFormatter>
		<setFormatter public="1" set="method">
			<f a="param1">
				<c path="java.util.logging.Formatter"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
			</meta>
		</setFormatter>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
			</meta>
		</close>
		<flush public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</flush>
		<publish public="1" set="method">
			<f a="param1">
				<c path="java.util.logging.LogRecord"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</publish>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.logging.Handler"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.logging"</e>
				<e>"Handler"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.logging.Level" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/logging/Level.class" extern="1">
		<implements path="java.io.Serializable"/>
		<parse public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.util.logging.Level"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.IllegalArgumentException"</e></m>
			</meta>
		</parse>
		<OFF public="1" static="1">
			<c path="java.util.logging.Level"/>
			<meta><m n=":final"/></meta>
		</OFF>
		<SEVERE public="1" static="1">
			<c path="java.util.logging.Level"/>
			<meta><m n=":final"/></meta>
		</SEVERE>
		<WARNING public="1" static="1">
			<c path="java.util.logging.Level"/>
			<meta><m n=":final"/></meta>
		</WARNING>
		<INFO public="1" static="1">
			<c path="java.util.logging.Level"/>
			<meta><m n=":final"/></meta>
		</INFO>
		<CONFIG public="1" static="1">
			<c path="java.util.logging.Level"/>
			<meta><m n=":final"/></meta>
		</CONFIG>
		<FINE public="1" static="1">
			<c path="java.util.logging.Level"/>
			<meta><m n=":final"/></meta>
		</FINE>
		<FINER public="1" static="1">
			<c path="java.util.logging.Level"/>
			<meta><m n=":final"/></meta>
		</FINER>
		<FINEST public="1" static="1">
			<c path="java.util.logging.Level"/>
			<meta><m n=":final"/></meta>
		</FINEST>
		<ALL public="1" static="1">
			<c path="java.util.logging.Level"/>
			<meta><m n=":final"/></meta>
		</ALL>
		<hashCode public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</hashCode>
		<equals public="1" set="method">
			<f a="param1">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</equals>
		<intValue public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</intValue>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</toString>
		<getLocalizedName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getLocalizedName>
		<getName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getName>
		<getResourceBundleName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getResourceBundleName>
		<new set="method">
			<f a="param1:param2:param3">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new set="method">
	<f a="param1:param2">
		<c path="String"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.logging.Level"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.logging"</e>
				<e>"Level"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.logging.Level_KnownLevel" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/logging/Level$KnownLevel.class" module="java.util.logging.Level" extern="1"><meta>
	<m n=":final"/>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.util.logging.Level$KnownLevel"</e></m>
	<m n=":javaCanonical">
		<e>"java.util.logging"</e>
		<e>"Level.KnownLevel"</e>
	</m>
</meta></class>
	<class path="java.util.logging.LogRecord" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/logging/LogRecord.class" extern="1">
		<implements path="java.io.Serializable"/>
		<setThrown public="1" set="method">
			<f a="param1">
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setThrown>
		<getThrown public="1" set="method">
			<f a=""><c path="java.lang.Throwable"/></f>
			<meta><m n=":overload"/></meta>
		</getThrown>
		<setMillis public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setMillis>
		<getMillis public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</getMillis>
		<setThreadID public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setThreadID>
		<getThreadID public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getThreadID>
		<setParameters public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><d/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setParameters>
		<getParameters public="1" set="method">
			<f a=""><c path="java.NativeArray"><d/></c></f>
			<meta><m n=":overload"/></meta>
		</getParameters>
		<setMessage public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setMessage>
		<getMessage public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getMessage>
		<setSourceMethodName public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setSourceMethodName>
		<getSourceMethodName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getSourceMethodName>
		<setSourceClassName public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setSourceClassName>
		<getSourceClassName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getSourceClassName>
		<setSequenceNumber public="1" set="method">
			<f a="param1">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setSequenceNumber>
		<getSequenceNumber public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</getSequenceNumber>
		<setLevel public="1" set="method">
			<f a="param1">
				<c path="java.util.logging.Level"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setLevel>
		<getLevel public="1" set="method">
			<f a=""><c path="java.util.logging.Level"/></f>
			<meta><m n=":overload"/></meta>
		</getLevel>
		<setResourceBundleName public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setResourceBundleName>
		<getResourceBundleName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getResourceBundleName>
		<setResourceBundle public="1" set="method">
			<f a="param1">
				<c path="java.util.ResourceBundle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setResourceBundle>
		<getResourceBundle public="1" set="method">
			<f a=""><c path="java.util.ResourceBundle"/></f>
			<meta><m n=":overload"/></meta>
		</getResourceBundle>
		<setLoggerName public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setLoggerName>
		<getLoggerName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getLoggerName>
		<new public="1" set="method">
			<f a="param1:param2">
				<c path="java.util.logging.Level"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.logging.LogRecord"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.logging"</e>
				<e>"LogRecord"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.logging.Logger" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/logging/Logger.class" extern="1">
		<getAnonymousLogger public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="java.util.logging.Logger"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getAnonymousLogger public="1" set="method">
	<f a=""><c path="java.util.logging.Logger"/></f>
	<meta><m n=":overload"/></meta>
</getAnonymousLogger></overloads>
		</getAnonymousLogger>
		<getLogger public="1" set="method" static="1">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<c path="java.util.logging.Logger"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><getLogger public="1" set="method">
	<f a="param1">
		<c path="String"/>
		<c path="java.util.logging.Logger"/>
	</f>
	<meta><m n=":overload"/></meta>
</getLogger></overloads>
		</getLogger>
		<getGlobal public="1" set="method" static="1">
			<f a=""><c path="java.util.logging.Logger"/></f>
			<meta>
				<m n=":overload"/>
				<m n=":final"/>
			</meta>
		</getGlobal>
		<GLOBAL_LOGGER_NAME public="1" static="1">
			<c path="String"/>
			<meta><m n=":final"/></meta>
		</GLOBAL_LOGGER_NAME>
		<global public="1" static="1">
			<c path="java.util.logging.Logger"/>
			<meta>
				<m n=":deprecated"/>
				<m n=":final"/>
			</meta>
		</global>
		<setParent public="1" set="method">
			<f a="param1">
				<c path="java.util.logging.Logger"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setParent>
		<getParent public="1" set="method">
			<f a=""><c path="java.util.logging.Logger"/></f>
			<meta><m n=":overload"/></meta>
		</getParent>
		<getUseParentHandlers public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</getUseParentHandlers>
		<setUseParentHandlers public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setUseParentHandlers>
		<getHandlers public="1" set="method">
			<f a=""><c path="java.NativeArray"><c path="java.util.logging.Handler"/></c></f>
			<meta><m n=":overload"/></meta>
		</getHandlers>
		<removeHandler public="1" set="method">
			<f a="param1">
				<c path="java.util.logging.Handler"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
			</meta>
		</removeHandler>
		<addHandler public="1" set="method">
			<f a="param1">
				<c path="java.util.logging.Handler"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
			</meta>
		</addHandler>
		<getName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getName>
		<isLoggable public="1" set="method">
			<f a="param1">
				<c path="java.util.logging.Level"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</isLoggable>
		<getLevel public="1" set="method">
			<f a=""><c path="java.util.logging.Level"/></f>
			<meta><m n=":overload"/></meta>
		</getLevel>
		<setLevel public="1" set="method">
			<f a="param1">
				<c path="java.util.logging.Level"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
			</meta>
		</setLevel>
		<finest public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</finest>
		<finer public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</finer>
		<fine public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</fine>
		<config public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</config>
		<info public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</info>
		<warning public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</warning>
		<severe public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</severe>
		<throwing public="1" set="method">
			<f a="param1:param2:param3">
				<c path="String"/>
				<c path="String"/>
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</throwing>
		<exiting public="1" set="method">
			<f a="param1:param2:param3">
				<c path="String"/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><exiting public="1" set="method">
	<f a="param1:param2">
		<c path="String"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</exiting></overloads>
		</exiting>
		<entering public="1" set="method">
			<f a="param1:param2:param3">
				<c path="String"/>
				<c path="String"/>
				<c path="java.NativeArray"><d/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<entering public="1" set="method">
					<f a="param1:param2">
						<c path="String"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</entering>
				<entering public="1" set="method">
					<f a="param1:param2:param3">
						<c path="String"/>
						<c path="String"/>
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</entering>
			</overloads>
		</entering>
		<logrb public="1" set="method">
			<f a="param1:param2:param3:param4:param5:param6">
				<c path="java.util.logging.Level"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<logrb public="1" set="method">
					<f a="param1:param2:param3:param4:param5">
						<c path="java.util.logging.Level"/>
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</logrb>
				<logrb public="1" set="method">
					<f a="param1:param2:param3:param4:param5:param6">
						<c path="java.util.logging.Level"/>
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</logrb>
				<logrb public="1" set="method">
					<f a="param1:param2:param3:param4:param5:param6">
						<c path="java.util.logging.Level"/>
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<c path="java.NativeArray"><d/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</logrb>
			</overloads>
		</logrb>
		<logp public="1" set="method">
			<f a="param1:param2:param3:param4:param5">
				<c path="java.util.logging.Level"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<logp public="1" set="method">
					<f a="param1:param2:param3:param4">
						<c path="java.util.logging.Level"/>
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</logp>
				<logp public="1" set="method">
					<f a="param1:param2:param3:param4:param5">
						<c path="java.util.logging.Level"/>
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</logp>
				<logp public="1" set="method">
					<f a="param1:param2:param3:param4:param5">
						<c path="java.util.logging.Level"/>
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<c path="java.NativeArray"><d/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</logp>
			</overloads>
		</logp>
		<log public="1" set="method">
			<f a="param1:param2:param3">
				<c path="java.util.logging.Level"/>
				<c path="String"/>
				<c path="java.lang.Throwable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<log public="1" set="method">
					<f a="param1">
						<c path="java.util.logging.LogRecord"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</log>
				<log public="1" set="method">
					<f a="param1:param2">
						<c path="java.util.logging.Level"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</log>
				<log public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.util.logging.Level"/>
						<c path="String"/>
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</log>
				<log public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.util.logging.Level"/>
						<c path="String"/>
						<c path="java.NativeArray"><d/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</log>
			</overloads>
		</log>
		<getFilter public="1" set="method">
			<f a=""><c path="java.util.logging.Filter"/></f>
			<meta><m n=":overload"/></meta>
		</getFilter>
		<setFilter public="1" set="method">
			<f a="param1">
				<c path="java.util.logging.Filter"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.lang.SecurityException"</e></m>
			</meta>
		</setFilter>
		<getResourceBundleName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</getResourceBundleName>
		<getResourceBundle public="1" set="method">
			<f a=""><c path="java.util.ResourceBundle"/></f>
			<meta><m n=":overload"/></meta>
		</getResourceBundle>
		<new set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.logging.Logger"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.logging"</e>
				<e>"Logger"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.logging.Logger_SystemLoggerHelper" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/logging/Logger$SystemLoggerHelper.class" module="java.util.logging.Logger" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.util.logging.Logger$SystemLoggerHelper"</e></m>
	<m n=":javaCanonical">
		<e>"java.util.logging"</e>
		<e>"Logger.SystemLoggerHelper"</e>
	</m>
</meta></class>
	<class path="java.util.regex.MatchResult" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/MatchResult.class" extern="1" interface="1">
		<groupCount public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</groupCount>
		<group public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><group public="1" set="method">
	<f a=""><c path="String"/></f>
	<meta><m n=":overload"/></meta>
</group></overloads>
		</group>
		<end public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><end public="1" set="method">
	<f a=""><x path="Int"/></f>
	<meta><m n=":overload"/></meta>
</end></overloads>
		</end>
		<start public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><start public="1" set="method">
	<f a=""><x path="Int"/></f>
	<meta><m n=":overload"/></meta>
</start></overloads>
		</start>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.MatchResult"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"MatchResult"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Matcher" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Matcher.class" extern="1">
		<implements path="java.util.regex.MatchResult"/>
		<quoteReplacement public="1" set="method" static="1">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</quoteReplacement>
		<requireEnd public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</requireEnd>
		<hitEnd public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</hitEnd>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</toString>
		<useAnchoringBounds public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<c path="java.util.regex.Matcher"/>
			</f>
			<meta><m n=":overload"/></meta>
		</useAnchoringBounds>
		<hasAnchoringBounds public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</hasAnchoringBounds>
		<useTransparentBounds public="1" set="method">
			<f a="param1">
				<x path="Bool"/>
				<c path="java.util.regex.Matcher"/>
			</f>
			<meta><m n=":overload"/></meta>
		</useTransparentBounds>
		<hasTransparentBounds public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</hasTransparentBounds>
		<regionEnd public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</regionEnd>
		<regionStart public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</regionStart>
		<region public="1" set="method">
			<f a="param1:param2">
				<x path="Int"/>
				<x path="Int"/>
				<c path="java.util.regex.Matcher"/>
			</f>
			<meta><m n=":overload"/></meta>
		</region>
		<replaceFirst public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</replaceFirst>
		<replaceAll public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</replaceAll>
		<appendTail public="1" set="method">
			<f a="param1">
				<c path="java.lang.StringBuffer"/>
				<c path="java.lang.StringBuffer"/>
			</f>
			<meta><m n=":overload"/></meta>
		</appendTail>
		<appendReplacement public="1" set="method">
			<f a="param1:param2">
				<c path="java.lang.StringBuffer"/>
				<c path="String"/>
				<c path="java.util.regex.Matcher"/>
			</f>
			<meta><m n=":overload"/></meta>
		</appendReplacement>
		<lookingAt public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</lookingAt>
		<find public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><find public="1" set="method">
	<f a=""><x path="Bool"/></f>
	<meta><m n=":overload"/></meta>
</find></overloads>
		</find>
		<matches public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</matches>
		<groupCount public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</groupCount>
		<group public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<group public="1" set="method">
					<f a=""><c path="String"/></f>
					<meta><m n=":overload"/></meta>
				</group>
				<group public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</group>
			</overloads>
		</group>
		<end public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><end public="1" set="method">
	<f a=""><x path="Int"/></f>
	<meta><m n=":overload"/></meta>
</end></overloads>
		</end>
		<start public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><start public="1" set="method">
	<f a=""><x path="Int"/></f>
	<meta><m n=":overload"/></meta>
</start></overloads>
		</start>
		<reset public="1" set="method">
			<f a="param1">
				<c path="java.lang.CharSequence"/>
				<c path="java.util.regex.Matcher"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><reset public="1" set="method">
	<f a=""><c path="java.util.regex.Matcher"/></f>
	<meta><m n=":overload"/></meta>
</reset></overloads>
		</reset>
		<usePattern public="1" set="method">
			<f a="param1">
				<c path="java.util.regex.Pattern"/>
				<c path="java.util.regex.Matcher"/>
			</f>
			<meta><m n=":overload"/></meta>
		</usePattern>
		<toMatchResult public="1" set="method">
			<f a=""><c path="java.util.regex.MatchResult"/></f>
			<meta><m n=":overload"/></meta>
		</toMatchResult>
		<pattern public="1" set="method">
			<f a=""><c path="java.util.regex.Pattern"/></f>
			<meta><m n=":overload"/></meta>
		</pattern>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Matcher"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Matcher"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_TreeInfo" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$TreeInfo.class" module="java.util.regex.Pattern" extern="1"><meta>
	<m n=":final"/>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.util.regex.Pattern$TreeInfo"</e></m>
	<m n=":javaCanonical">
		<e>"java.util.regex"</e>
		<e>"Pattern.TreeInfo"</e>
	</m>
</meta></class>
	<class path="java.util.regex.Pattern_Node" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Node.class" module="java.util.regex.Pattern" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.util.regex.Pattern$Node"</e></m>
	<m n=":javaCanonical">
		<e>"java.util.regex"</e>
		<e>"Pattern.Node"</e>
	</m>
</meta></class>
	<class path="java.util.regex.Pattern_CharProperty" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CharProperty.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$CharProperty"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.CharProperty"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_BmpCharProperty" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$BmpCharProperty.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$BmpCharProperty"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.BmpCharProperty"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_BitClass" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$BitClass.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_BmpCharProperty"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$BitClass"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.BitClass"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_LastNode" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$LastNode.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$LastNode"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.LastNode"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Start" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Start.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Start"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Start"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_StartS" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$StartS.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Start"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$StartS"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.StartS"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Begin" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Begin.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Begin"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Begin"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_End" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$End.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$End"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.End"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Caret" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Caret.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Caret"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Caret"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_UnixCaret" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$UnixCaret.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$UnixCaret"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.UnixCaret"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_LastMatch" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$LastMatch.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$LastMatch"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.LastMatch"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Dollar" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Dollar.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Dollar"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Dollar"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_UnixDollar" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$UnixDollar.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$UnixDollar"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.UnixDollar"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_SingleS" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$SingleS.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$SingleS"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.SingleS"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Single" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Single.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_BmpCharProperty"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Single"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Single"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_SingleI" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$SingleI.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_BmpCharProperty"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$SingleI"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.SingleI"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_SingleU" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$SingleU.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$SingleU"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.SingleU"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Block" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Block.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Block"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Block"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Script" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Script.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Script"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Script"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Category" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Category.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Category"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Category"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Utype" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Utype.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Utype"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Utype"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Ctype" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Ctype.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_BmpCharProperty"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Ctype"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Ctype"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_SliceNode" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$SliceNode.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$SliceNode"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.SliceNode"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Slice" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Slice.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_SliceNode"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Slice"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Slice"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_SliceI" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$SliceI.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_SliceNode"/>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$SliceI"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.SliceI"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_SliceU" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$SliceU.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_SliceNode"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$SliceU"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.SliceU"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_SliceS" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$SliceS.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_SliceNode"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$SliceS"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.SliceS"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_SliceIS" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$SliceIS.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_SliceNode"/>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$SliceIS"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.SliceIS"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_SliceUS" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$SliceUS.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_SliceIS"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$SliceUS"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.SliceUS"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_All" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$All.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$All"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.All"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Dot" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Dot.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Dot"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Dot"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_UnixDot" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$UnixDot.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$UnixDot"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.UnixDot"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Ques" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Ques.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Ques"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Ques"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Curly" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Curly.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Curly"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Curly"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_GroupCurly" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$GroupCurly.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$GroupCurly"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.GroupCurly"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_BranchConn" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$BranchConn.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$BranchConn"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.BranchConn"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Branch" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Branch.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Branch"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Branch"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_GroupHead" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$GroupHead.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$GroupHead"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.GroupHead"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_GroupRef" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$GroupRef.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$GroupRef"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.GroupRef"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_GroupTail" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$GroupTail.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$GroupTail"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.GroupTail"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Prolog" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Prolog.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Prolog"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Prolog"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Loop" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Loop.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Loop"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Loop"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_LazyLoop" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$LazyLoop.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Loop"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$LazyLoop"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.LazyLoop"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_BackRef" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$BackRef.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$BackRef"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.BackRef"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_CIBackRef" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CIBackRef.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$CIBackRef"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.CIBackRef"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_First" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$First.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$First"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.First"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Conditional" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Conditional.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Conditional"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Conditional"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Pos" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Pos.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Pos"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Pos"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Neg" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Neg.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Neg"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Neg"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Behind" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Behind.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Behind"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Behind"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_BehindS" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$BehindS.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Behind"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$BehindS"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.BehindS"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_NotBehind" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$NotBehind.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$NotBehind"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.NotBehind"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_NotBehindS" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$NotBehindS.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_NotBehind"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$NotBehindS"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.NotBehindS"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_Bound" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$Bound.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$Bound"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.Bound"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_BnM" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$BnM.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_Node"/>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$BnM"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.BnM"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_BnMS" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$BnMS.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_BnM"/>
		<meta>
			<m n=":final"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$BnMS"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.BnMS"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.regex.Pattern_CharPropertyNames" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CharPropertyNames.class" module="java.util.regex.Pattern" extern="1"><meta>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.util.regex.Pattern$CharPropertyNames"</e></m>
	<m n=":javaCanonical">
		<e>"java.util.regex"</e>
		<e>"Pattern.CharPropertyNames"</e>
	</m>
</meta></class>
	<class path="java.util.regex.Pattern_CharPropertyNames_CharPropertyFactory" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CharPropertyNames$CharPropertyFactory.class" module="java.util.regex.Pattern" extern="1"><meta>
	<m n=":abstract"/>
	<m n=":libType"/>
	<m n=":javaNative"/>
	<m n=":native"><e>"java.util.regex.Pattern$CharPropertyNames$CharPropertyFactory"</e></m>
	<m n=":javaCanonical">
		<e>"java.util.regex"</e>
		<e>"Pattern.CharPropertyNames.CharPropertyFactory"</e>
	</m>
</meta></class>
	<class path="java.util.regex.Pattern_CharPropertyNames_CloneableProperty" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/regex/Pattern$CharPropertyNames$CloneableProperty.class" module="java.util.regex.Pattern" extern="1">
		<extends path="java.util.regex.Pattern_CharProperty"/>
		<implements path="java.lang.Cloneable"/>
		<clone public="1" set="method">
			<f a=""><c path="java.util.regex.Pattern_CharPropertyNames_CloneableProperty"/></f>
			<meta><m n=":overload"/></meta>
		</clone>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.regex.Pattern$CharPropertyNames$CloneableProperty"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.regex"</e>
				<e>"Pattern.CharPropertyNames.CloneableProperty"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.spi.LocaleNameProvider" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/spi/LocaleNameProvider.class" extern="1">
		<extends path="java.util.spi.LocaleServiceProvider"/>
		<getDisplayVariant public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.util.Locale"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getDisplayVariant>
		<getDisplayCountry public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.util.Locale"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getDisplayCountry>
		<getDisplayScript public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.util.Locale"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getDisplayScript>
		<getDisplayLanguage public="1" set="method">
			<f a="param1:param2">
				<c path="String"/>
				<c path="java.util.Locale"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</getDisplayLanguage>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.spi.LocaleNameProvider"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.spi"</e>
				<e>"LocaleNameProvider"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.zip.DataFormatException" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/zip/DataFormatException.class" extern="1">
		<extends path="java.lang.Exception"/>
		<new public="1" set="method">
			<f a="param1">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.zip.DataFormatException"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.zip"</e>
				<e>"DataFormatException"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.zip.Deflater" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/zip/Deflater.class" extern="1">
		<DEFLATED public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</DEFLATED>
		<NO_COMPRESSION public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</NO_COMPRESSION>
		<BEST_SPEED public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</BEST_SPEED>
		<BEST_COMPRESSION public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</BEST_COMPRESSION>
		<DEFAULT_COMPRESSION public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</DEFAULT_COMPRESSION>
		<FILTERED public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</FILTERED>
		<HUFFMAN_ONLY public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</HUFFMAN_ONLY>
		<DEFAULT_STRATEGY public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</DEFAULT_STRATEGY>
		<NO_FLUSH public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</NO_FLUSH>
		<SYNC_FLUSH public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</SYNC_FLUSH>
		<FULL_FLUSH public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":final"/></meta>
		</FULL_FLUSH>
		<finalize set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</finalize>
		<end public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</end>
		<reset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</reset>
		<getBytesWritten public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</getBytesWritten>
		<getTotalOut public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getTotalOut>
		<getBytesRead public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</getBytesRead>
		<getTotalIn public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getTotalIn>
		<getAdler public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getAdler>
		<deflate public="1" set="method">
			<f a="param1:param2:param3:param4">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<deflate public="1" set="method">
					<f a="param1:param2:param3">
						<c path="java.NativeArray"><t path="java.types.Int8"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</deflate>
				<deflate public="1" set="method">
					<f a="param1">
						<c path="java.NativeArray"><t path="java.types.Int8"/></c>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</deflate>
			</overloads>
		</deflate>
		<finished public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</finished>
		<finish public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</finish>
		<needsInput public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</needsInput>
		<setLevel public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setLevel>
		<setStrategy public="1" set="method">
			<f a="param1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</setStrategy>
		<setDictionary public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><setDictionary public="1" set="method">
	<f a="param1:param2:param3">
		<c path="java.NativeArray"><t path="java.types.Int8"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</setDictionary></overloads>
		</setDictionary>
		<setInput public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><setInput public="1" set="method">
	<f a="param1:param2:param3">
		<c path="java.NativeArray"><t path="java.types.Int8"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</setInput></overloads>
		</setInput>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a="param1:param2">
						<x path="Int"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new public="1" set="method">
					<f a="param1">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.zip.Deflater"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.zip"</e>
				<e>"Deflater"</e>
			</m>
		</meta>
	</class>
	<class path="java.util.zip.Inflater" params="" file="/home/travis/haxelib/hxjava/git/lib/hxjava-std.jar@java/util/zip/Inflater.class" extern="1">
		<finalize set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</finalize>
		<end public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</end>
		<reset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</reset>
		<getBytesWritten public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</getBytesWritten>
		<getTotalOut public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getTotalOut>
		<getBytesRead public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</getBytesRead>
		<getTotalIn public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getTotalIn>
		<getAdler public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getAdler>
		<inflate public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":overload"/>
				<m n=":throws"><e>"java.util.zip.DataFormatException"</e></m>
			</meta>
			<overloads><inflate public="1" set="method">
	<f a="param1:param2:param3">
		<c path="java.NativeArray"><t path="java.types.Int8"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta>
		<m n=":overload"/>
		<m n=":throws"><e>"java.util.zip.DataFormatException"</e></m>
	</meta>
</inflate></overloads>
		</inflate>
		<finished public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</finished>
		<needsDictionary public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</needsDictionary>
		<needsInput public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</needsInput>
		<getRemaining public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</getRemaining>
		<setDictionary public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><setDictionary public="1" set="method">
	<f a="param1:param2:param3">
		<c path="java.NativeArray"><t path="java.types.Int8"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</setDictionary></overloads>
		</setDictionary>
		<setInput public="1" set="method">
			<f a="param1">
				<c path="java.NativeArray"><t path="java.types.Int8"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><setInput public="1" set="method">
	<f a="param1:param2:param3">
		<c path="java.NativeArray"><t path="java.types.Int8"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</setInput></overloads>
		</setInput>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method">
	<f a="param1">
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":libType"/>
			<m n=":javaNative"/>
			<m n=":native"><e>"java.util.zip.Inflater"</e></m>
			<m n=":javaCanonical">
				<e>"java.util.zip"</e>
				<e>"Inflater"</e>
			</m>
		</meta>
	</class>
	<class path="java.vm.AtomicList" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/java/vm/AtomicList.hx">
		<head>
			<c path="java.vm.AtomicNode"><c path="java.vm.AtomicList.T"/></c>
			<meta>
				<m n=":volatile"/>
				<m n=":private"/>
			</meta>
		</head>
		<tail>
			<c path="java.util.concurrent.atomic.AtomicReference"><c path="java.vm.AtomicNode"><c path="java.vm.AtomicList.T"/></c></c>
			<meta>
				<m n=":volatile"/>
				<m n=":private"/>
			</meta>
		</tail>
		<add public="1" set="method" line="42"><f a="v">
	<c path="java.vm.AtomicList.T"/>
	<x path="Void"/>
</f></add>
		<pop public="1" set="method" line="53"><f a=""><t path="Null"><c path="java.vm.AtomicList.T"/></t></f></pop>
		<peek public="1" set="method" line="68"><f a=""><c path="java.vm.AtomicList.T"/></f></peek>
		<peekLast public="1" set="method" line="75"><f a=""><c path="java.vm.AtomicList.T"/></f></peekLast>
		<new public="1" set="method" line="35"><f a=""><x path="Void"/></f></new>
		<haxe_doc>A lock-free queue implementation</haxe_doc>
		<meta>
			<m n=":native"><e>"haxe.java.vm.AtomicList"</e></m>
			<m n=":nativeGen"/>
		</meta>
	</class>
	<class path="java.vm.AtomicNode" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/java/vm/AtomicList.hx" module="java.vm.AtomicList">
		<extends path="java.util.concurrent.atomic.AtomicReference"><c path="java.vm.AtomicNode"><c path="java.vm.AtomicNode.T"/></c></extends>
		<value public="1"><c path="java.vm.AtomicNode.T"/></value>
		<new public="1" set="method" line="87"><f a="value">
	<c path="java.vm.AtomicNode.T"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"haxe.java.vm.AtomicNode"</e></m>
			<m n=":nativeGen"/>
		</meta>
	</class>
	<class path="java.vm.Deque" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/java/vm/Deque.hx">
		<head>
			<c path="java.vm.Node"><c path="java.vm.Deque.T"/></c>
			<meta><m n=":private"/></meta>
		</head>
		<tail>
			<c path="java.vm.Node"><c path="java.vm.Deque.T"/></c>
			<meta><m n=":private"/></meta>
		</tail>
		<add public="1" set="method" line="39">
			<f a="i">
				<c path="java.vm.Deque.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</add>
		<push public="1" set="method" line="50">
			<f a="i">
				<c path="java.vm.Deque.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</push>
		<pop public="1" set="method" line="61">
			<f a="block">
				<x path="Bool"/>
				<t path="Null"><c path="java.vm.Deque.T"/></t>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</pop>
		<new public="1" set="method" line="34"><f a=""><x path="Void"/></f></new>
		<haxe_doc>A Lock-free Queue implementation</haxe_doc>
		<meta>
			<m n=":native"><e>"haxe.java.vm.Deque"</e></m>
			<m n=":nativeGen"/>
		</meta>
	</class>
	<class path="java.vm.Node" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/java/vm/Deque.hx" module="java.vm.Deque">
		<value public="1"><c path="java.vm.Node.T"/></value>
		<next public="1"><c path="java.vm.Node"><c path="java.vm.Node.T"/></c></next>
		<new public="1" set="method" line="90"><f a="val">
	<c path="java.vm.Node.T"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":native"><e>"haxe.java.vm.DequeNode"</e></m>
			<m n=":nativeGen"/>
		</meta>
	</class>
	<class path="java.vm.Gc" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/vm/Gc.hx">
		<run public="1" set="method" line="26" static="1"><f a="major">
	<x path="Bool"/>
	<x path="Void"/>
</f></run>
		<stats public="1" set="method" line="31" static="1"><f a=""><a>
	<heap><x path="Int"/></heap>
	<free><x path="Int"/></free>
</a></f></stats>
		<meta><m n=":native"><e>"haxe.java.vm.Gc"</e></m></meta>
	</class>
	<class path="java.vm.Thread" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/vm/Thread.hx">
		<javaThreadToHaxe expr="new haxe.ds.WeakMap&lt;java.lang.Thread,java.vm.Thread&gt;()" line="28" static="1">
			<c path="haxe.ds.WeakMap">
				<c path="java.lang.Thread"/>
				<c path="java.vm.Thread"/>
			</c>
			<meta>
				<m n=":value"><e><![CDATA[new haxe.ds.WeakMap<java.lang.Thread,java.vm.Thread>()]]></e></m>
				<m n=":private"/>
			</meta>
		</javaThreadToHaxe>
		<mainJavaThread expr="java.lang.Thread.currentThread()" line="29" static="1">
			<c path="java.lang.Thread"/>
			<meta>
				<m n=":value"><e>java.lang.Thread.currentThread()</e></m>
				<m n=":private"/>
			</meta>
		</mainJavaThread>
		<mainHaxeThread expr="{
	var ret = new Thread();
	javaThreadToHaxe.set(mainJavaThread, ret);
	ret;
}" line="30" static="1">
			<c path="java.vm.Thread"/>
			<meta>
				<m n=":value"><e>{
	var ret = new Thread();
	javaThreadToHaxe.set(mainJavaThread, ret);
	ret;
}</e></m>
				<m n=":private"/>
			</meta>
		</mainHaxeThread>
		<getThread set="method" line="37" static="1">
			<f a="jt">
				<c path="java.lang.Thread"/>
				<c path="java.vm.Thread"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getThread>
		<current public="1" set="method" line="76" static="1"><f a=""><c path="java.vm.Thread"/></f></current>
		<readMessage public="1" set="method" line="81" static="1"><f a="block">
	<x path="Bool"/>
	<d/>
</f></readMessage>
		<create public="1" set="method" line="86" static="1"><f a="fn">
	<f a=""><x path="Void"/></f>
	<c path="java.vm.Thread"/>
</f></create>
		<messages><c path="java.vm.Deque"><d/></c></messages>
		<sendMessage public="1" set="method" line="71"><f a="obj">
	<d/>
	<x path="Void"/>
</f></sendMessage>
		<new set="method" line="66"><f a=""><x path="Void"/></f></new>
		<meta><m n=":native"><e>"haxe.java.vm.Thread"</e></m></meta>
	</class>
	<class path="java.vm._Thread.HaxeThread" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/vm/Thread.hx" private="1" module="java.vm.Thread">
		<extends path="java.lang.Thread"/>
		<threadObject public="1" set="null"><c path="java.vm.Thread"/></threadObject>
		<runFunction><f a=""><x path="Void"/></f></runFunction>
		<run public="1" set="method" line="100" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</run>
		<new public="1" set="method" line="104"><f a="hxThread:run">
	<c path="java.vm.Thread"/>
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"haxe.java.vm.HaxeThread"</e></m></meta>
	</class>
	<class path="java.vm.Tls" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/java/vm/Tls.hx">
		<t><c path="java.lang.ThreadLocal"><c path="java.vm.Tls.T"/></c></t>
		<value public="1" get="accessor" set="accessor"><c path="java.vm.Tls.T"/></value>
		<get_value get="inline" set="null" line="37"><f a=""><c path="java.vm.Tls.T"/></f></get_value>
		<set_value get="inline" set="null" line="42"><f a="v">
	<c path="java.vm.Tls.T"/>
	<c path="java.vm.Tls.T"/>
</f></set_value>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Thread-local Storage implementation</haxe_doc>
		<meta><m n=":native"><e>"haxe.java.vm.Tls"</e></m></meta>
	</class>
	<typedef path="sys.FileStat" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/FileStat.hx">
		<a>
			<uid>
				<x path="Int"/>
				<haxe_doc>The user id for the file's owner.</haxe_doc>
			</uid>
			<size>
				<x path="Int"/>
				<haxe_doc>The size of the file, in bytes.</haxe_doc>
			</size>
			<rdev>
				<x path="Int"/>
				<haxe_doc>The device type on which stat resides (special files only).</haxe_doc>
			</rdev>
			<nlink>
				<x path="Int"/>
				<haxe_doc>The number of hard links to stat.</haxe_doc>
			</nlink>
			<mtime>
				<c path="Date"/>
				<haxe_doc>The last modification time for the file.</haxe_doc>
			</mtime>
			<mode>
				<x path="Int"/>
				<haxe_doc>The permission bits of stat. The meaning of the bits is platform dependent.</haxe_doc>
			</mode>
			<ino>
				<x path="Int"/>
				<haxe_doc>The inode number for stat.</haxe_doc>
			</ino>
			<gid>
				<x path="Int"/>
				<haxe_doc>The user group id for the file's owner.</haxe_doc>
			</gid>
			<dev>
				<x path="Int"/>
				<haxe_doc>The device on which stat resides.</haxe_doc>
			</dev>
			<ctime>
				<c path="Date"/>
				<haxe_doc>The creation time for the file (not all file systems support this).</haxe_doc>
			</ctime>
			<atime>
				<c path="Date"/>
				<haxe_doc>The last access time for the file (when enabled by the file system).</haxe_doc>
			</atime>
		</a>
		<haxe_doc>File information, as given by `sys.FileSystem.stat`.</haxe_doc>
	</typedef>
	<class path="sys.FileSystem" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/sys/FileSystem.hx">
		<exists public="1" set="method" line="29" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the file or directory specified by `path` exists.

		If `path` is null, the result is unspecified.</haxe_doc>
		</exists>
		<rename public="1" set="method" line="34" static="1">
			<f a="path:newPath">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renames/moves the file or directory specified by `path` to `newPath`.

		If `path` is not a valid file system entry, or if it is not accessible,
		or if `newPath` is not accessible, an exception is thrown.

		If `path` or `newPath` are null, the result is unspecified.</haxe_doc>
		</rename>
		<stat public="1" set="method" line="42" static="1">
			<f a="path">
				<c path="String"/>
				<t path="sys.FileStat"/>
			</f>
			<haxe_doc>Returns `FileStat` information on the file or directory specified by
		`path`.

		If `path` is null, the result is unspecified.</haxe_doc>
		</stat>
		<fullPath public="1" set="method" line="62" static="1">
			<f a="relPath">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the full path of the file or directory specified by `relPath`,
		which is relative to the current working directory. Symlinks will be
		followed and the path will be normalized.

		If `relPath` is null, the result is unspecified.</haxe_doc>
		</fullPath>
		<absolutePath public="1" set="method" line="71" static="1">
			<f a="relPath">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the full path of the file or directory specified by `relPath`,
		which is relative to the current working directory. The path doesn't
		have to exist.

		If `relPath` is null, the result is unspecified.</haxe_doc>
		</absolutePath>
		<isDirectory public="1" set="method" line="76" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the file or directory specified by `path` is a directory.

		If `path` is not a valid file system entry or if its destination is not
		accessible, an exception is thrown.

		If `path` is null, the result is unspecified.</haxe_doc>
		</isDirectory>
		<createDirectory public="1" set="method" line="84" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a directory specified by `path`.

		This method is recursive: The parent directories don't have to exist.

		If the directory cannot be created, an exception is thrown.

		If `path` is null, the result is unspecified.</haxe_doc>
		</createDirectory>
		<deleteFile public="1" set="method" line="90" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes the file specified by `path`.

		If `path` does not denote a valid file, or if that file cannot be
		deleted, an exception is thrown.

		If `path` is null, the result is unspecified.</haxe_doc>
		</deleteFile>
		<deleteDirectory public="1" set="method" line="96" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes the directory specified by `path`.

		If `path` does not denote a valid directory, or if that directory cannot
		be deleted, an exception is thrown.

		If `path` is null, the result is unspecified.</haxe_doc>
		</deleteDirectory>
		<readDirectory public="1" set="method" line="102" static="1">
			<f a="path">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the names of all files and directories in the directory specified
		by `path`.

		If `path` does not denote a valid directory, an exception is thrown.

		If `path` is null, the result is unspecified.</haxe_doc>
		</readDirectory>
		<haxe_doc>This class allows you to get information about the files and directories.

	See `sys.io.File` for the complementary file API.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="sys.db.Manager" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Manager.hx">
		<cnx public="1" set="accessor" static="1"><c path="sys.db.Connection"/></cnx>
		<lockMode public="1" static="1"><c path="String"/></lockMode>
		<cache_field get="inline" set="null" expr="&quot;__cache__&quot;" line="39" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"__cache__"</e></m></meta>
		</cache_field>
		<object_cache expr="new haxe.ds.StringMap()" line="41" static="1">
			<c path="haxe.ds.StringMap"><c path="sys.db.Object"/></c>
			<meta><m n=":value"><e>new haxe.ds.StringMap()</e></m></meta>
		</object_cache>
		<init_list expr="new List()" line="42" static="1">
			<c path="List"><c path="sys.db.Manager"><d/></c></c>
			<meta><m n=":value"><e>new List()</e></m></meta>
		</init_list>
		<KEYWORDS expr="{
	var h = new haxe.ds.StringMap();
	for (k in &quot;ADD|ALL|ALTER|ANALYZE|AND|AS|ASC|ASENSITIVE|BEFORE|BETWEEN|BIGINT|BINARY|BLOB|BOTH|BY|CALL|CASCADE|CASE|CHANGE|CHAR|CHARACTER|CHECK|COLLATE|COLUMN|CONDITION|CONSTRAINT|CONTINUE|CONVERT|CREATE|CROSS|CURRENT_DATE|CURRENT_TIME|CURRENT_TIMESTAMP|CURRENT_USER|CURSOR|DATABASE|DATABASES|DAY_HOUR|DAY_MICROSECOND|DAY_MINUTE|DAY_SECOND|DEC|DECIMAL|DECLARE|DEFAULT|DELAYED|DELETE|DESC|DESCRIBE|DETERMINISTIC|DISTINCT|DISTINCTROW|DIV|DOUBLE|DROP|DUAL|EACH|ELSE|ELSEIF|ENCLOSED|ESCAPED|EXISTS|EXIT|EXPLAIN|FALSE|FETCH|FLOAT|FLOAT4|FLOAT8|FOR|FORCE|FOREIGN|FROM|FULLTEXT|GRANT|GROUP|HAVING|HIGH_PRIORITY|HOUR_MICROSECOND|HOUR_MINUTE|HOUR_SECOND|IF|IGNORE|IN|INDEX|INFILE|INNER|INOUT|INSENSITIVE|INSERT|INT|INT1|INT2|INT3|INT4|INT8|INTEGER|INTERVAL|INTO|IS|ITERATE|JOIN|KEY|KEYS|KILL|LEADING|LEAVE|LEFT|LIKE|LIMIT|LINES|LOAD|LOCALTIME|LOCALTIMESTAMP|LOCK|LONG|LONGBLOB|LONGTEXT|LOOP|LOW_PRIORITY|MATCH|MEDIUMBLOB|MEDIUMINT|MEDIUMTEXT|MIDDLEINT|MINUTE_MICROSECOND|MINUTE_SECOND|MOD|MODIFIES|NATURAL|NOT|NO_WRITE_TO_BINLOG|NULL|NUMERIC|ON|OPTIMIZE|OPTION|OPTIONALLY|OR|ORDER|OUT|OUTER|OUTFILE|PRECISION|PRIMARY|PROCEDURE|PURGE|READ|READS|REAL|REFERENCES|REGEXP|RELEASE|RENAME|REPEAT|REPLACE|REQUIRE|RESTRICT|RETURN|REVOKE|RIGHT|RLIKE|SCHEMA|SCHEMAS|SECOND_MICROSECOND|SELECT|SENSITIVE|SEPARATOR|SET|SHOW|SMALLINT|SONAME|SPATIAL|SPECIFIC|SQL|SQLEXCEPTION|SQLSTATE|SQLWARNING|SQL_BIG_RESULT|SQL_CALC_FOUND_ROWS|SQL_SMALL_RESULT|SSL|STARTING|STRAIGHT_JOIN|TABLE|TERMINATED|THEN|TINYBLOB|TINYINT|TINYTEXT|TO|TRAILING|TRIGGER|TRUE|UNDO|UNION|UNIQUE|UNLOCK|UNSIGNED|UPDATE|USAGE|USE|USING|UTC_DATE|UTC_TIME|UTC_TIMESTAMP|VALUES|VARBINARY|VARCHAR|VARCHARACTER|VARYING|WHEN|WHERE|WHILE|WITH|WRITE|XOR|YEAR_MONTH|ZEROFILL|ASENSITIVE|CALL|CONDITION|CONNECTION|CONTINUE|CURSOR|DECLARE|DETERMINISTIC|EACH|ELSEIF|EXIT|FETCH|GOTO|INOUT|INSENSITIVE|ITERATE|LABEL|LEAVE|LOOP|MODIFIES|OUT|READS|RELEASE|REPEAT|RETURN|SCHEMA|SCHEMAS|SENSITIVE|SPECIFIC|SQL|SQLEXCEPTION|SQLSTATE|SQLWARNING|TRIGGER|UNDO|UPGRADE|WHILE&quot;.split(&quot;|&quot;)) h.set(k.toLowerCase(), true);
	h;
}" line="44" static="1">
			<c path="haxe.ds.StringMap"><x path="Bool"/></c>
			<meta><m n=":value"><e>{
	var h = new haxe.ds.StringMap();
	for (k in "ADD|ALL|ALTER|ANALYZE|AND|AS|ASC|ASENSITIVE|BEFORE|BETWEEN|BIGINT|BINARY|BLOB|BOTH|BY|CALL|CASCADE|CASE|CHANGE|CHAR|CHARACTER|CHECK|COLLATE|COLUMN|CONDITION|CONSTRAINT|CONTINUE|CONVERT|CREATE|CROSS|CURRENT_DATE|CURRENT_TIME|CURRENT_TIMESTAMP|CURRENT_USER|CURSOR|DATABASE|DATABASES|DAY_HOUR|DAY_MICROSECOND|DAY_MINUTE|DAY_SECOND|DEC|DECIMAL|DECLARE|DEFAULT|DELAYED|DELETE|DESC|DESCRIBE|DETERMINISTIC|DISTINCT|DISTINCTROW|DIV|DOUBLE|DROP|DUAL|EACH|ELSE|ELSEIF|ENCLOSED|ESCAPED|EXISTS|EXIT|EXPLAIN|FALSE|FETCH|FLOAT|FLOAT4|FLOAT8|FOR|FORCE|FOREIGN|FROM|FULLTEXT|GRANT|GROUP|HAVING|HIGH_PRIORITY|HOUR_MICROSECOND|HOUR_MINUTE|HOUR_SECOND|IF|IGNORE|IN|INDEX|INFILE|INNER|INOUT|INSENSITIVE|INSERT|INT|INT1|INT2|INT3|INT4|INT8|INTEGER|INTERVAL|INTO|IS|ITERATE|JOIN|KEY|KEYS|KILL|LEADING|LEAVE|LEFT|LIKE|LIMIT|LINES|LOAD|LOCALTIME|LOCALTIMESTAMP|LOCK|LONG|LONGBLOB|LONGTEXT|LOOP|LOW_PRIORITY|MATCH|MEDIUMBLOB|MEDIUMINT|MEDIUMTEXT|MIDDLEINT|MINUTE_MICROSECOND|MINUTE_SECOND|MOD|MODIFIES|NATURAL|NOT|NO_WRITE_TO_BINLOG|NULL|NUMERIC|ON|OPTIMIZE|OPTION|OPTIONALLY|OR|ORDER|OUT|OUTER|OUTFILE|PRECISION|PRIMARY|PROCEDURE|PURGE|READ|READS|REAL|REFERENCES|REGEXP|RELEASE|RENAME|REPEAT|REPLACE|REQUIRE|RESTRICT|RETURN|REVOKE|RIGHT|RLIKE|SCHEMA|SCHEMAS|SECOND_MICROSECOND|SELECT|SENSITIVE|SEPARATOR|SET|SHOW|SMALLINT|SONAME|SPATIAL|SPECIFIC|SQL|SQLEXCEPTION|SQLSTATE|SQLWARNING|SQL_BIG_RESULT|SQL_CALC_FOUND_ROWS|SQL_SMALL_RESULT|SSL|STARTING|STRAIGHT_JOIN|TABLE|TERMINATED|THEN|TINYBLOB|TINYINT|TINYTEXT|TO|TRAILING|TRIGGER|TRUE|UNDO|UNION|UNIQUE|UNLOCK|UNSIGNED|UPDATE|USAGE|USE|USING|UTC_DATE|UTC_TIME|UTC_TIMESTAMP|VALUES|VARBINARY|VARCHAR|VARCHARACTER|VARYING|WHEN|WHERE|WHILE|WITH|WRITE|XOR|YEAR_MONTH|ZEROFILL|ASENSITIVE|CALL|CONDITION|CONNECTION|CONTINUE|CURSOR|DECLARE|DETERMINISTIC|EACH|ELSEIF|EXIT|FETCH|GOTO|INOUT|INSENSITIVE|ITERATE|LABEL|LEAVE|LOOP|MODIFIES|OUT|READS|RELEASE|REPEAT|RETURN|SCHEMA|SCHEMAS|SENSITIVE|SPECIFIC|SQL|SQLEXCEPTION|SQLSTATE|SQLWARNING|TRIGGER|UNDO|UPGRADE|WHILE".split("|")) h.set(k.toLowerCase(), true);
	h;
}</e></m></meta>
		</KEYWORDS>
		<set_cnx set="method" line="51" static="1"><f a="c">
	<c path="sys.db.Connection"/>
	<c path="sys.db.Connection"/>
</f></set_cnx>
		<getFieldName set="method" line="129" static="1"><f a="field">
	<t path="sys.db.RecordField"/>
	<c path="String"/>
</f></getFieldName>
		<nullCompare public="1" set="method" line="528" static="1"><f a="a:b:eq">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<c path="String"/>
</f></nullCompare>
		<initialize public="1" set="method" line="594" static="1"><f a=""><x path="Void"/></f></initialize>
		<cleanup public="1" set="method" line="602" static="1"><f a=""><x path="Void"/></f></cleanup>
		<quoteAny public="1" set="method" line="726" static="1"><f a="v">
	<d/>
	<c path="String"/>
</f></quoteAny>
		<quoteList public="1" set="method" line="736" static="1"><f a="v:it">
	<c path="String"/>
	<t path="Iterable"><d/></t>
	<c path="String"/>
</f></quoteList>
		<__depends set="method" line="750" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":keep"/></meta>
		</__depends>
		<table_infos><t path="sys.db.RecordInfos"/></table_infos>
		<table_name><c path="String"/></table_name>
		<table_keys><c path="Array"><c path="String"/></c></table_keys>
		<class_proto><a><prototype><d/></prototype></a></class_proto>
		<all public="1" set="method" line="78"><f a="?lock">
	<x path="Bool"/>
	<c path="List"><c path="sys.db.Manager.T"/></c>
</f></all>
		<get public="1" set="method"><f a="id:?lock">
	<d/>
	<x path="Bool"/>
	<c path="sys.db.Manager.T"/>
</f></get>
		<select public="1" set="method"><f a="cond:?options:?lock">
	<d/>
	<d/>
	<x path="Bool"/>
	<c path="sys.db.Manager.T"/>
</f></select>
		<search public="1" set="method"><f a="cond:?options:?lock">
	<d/>
	<d/>
	<x path="Bool"/>
	<c path="List"><c path="sys.db.Manager.T"/></c>
</f></search>
		<count public="1" set="method"><f a="cond">
	<d/>
	<x path="Int"/>
</f></count>
		<delete public="1" set="method"><f a="cond:?options">
	<d/>
	<d/>
	<x path="Void"/>
</f></delete>
		<dynamicSearch public="1" set="method" line="102"><f a="x:?lock">
	<a/>
	<x path="Bool"/>
	<c path="List"><c path="sys.db.Manager.T"/></c>
</f></dynamicSearch>
		<quote set="method" line="111"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></quote>
		<doUpdateCache set="method" line="117"><f a="x:name:v">
	<c path="sys.db.Manager.T"/>
	<c path="String"/>
	<d/>
	<c path="haxe.io.Bytes"/>
</f></doUpdateCache>
		<doInsert set="method" line="139">
			<f a="x">
				<c path="sys.db.Manager.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</doInsert>
		<isBinary get="inline" set="null" line="208"><f a="t">
	<e path="sys.db.RecordType"/>
	<x path="Bool"/>
</f></isBinary>
		<hasBinaryChanged get="inline" set="null" line="216"><f a="a:b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
	<x path="Bool"/>
</f></hasBinaryChanged>
		<doUpdate set="method" line="220">
			<f a="x">
				<c path="sys.db.Manager.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</doUpdate>
		<getUpdateStatement set="method" line="228"><f a="x">
	<c path="sys.db.Manager.T"/>
	<t path="Null"><c path="String"/></t>
</f></getUpdateStatement>
		<doDelete set="method" line="273"><f a="x">
	<c path="sys.db.Manager.T"/>
	<x path="Void"/>
</f></doDelete>
		<doLock set="method" line="283">
			<f a="i">
				<c path="sys.db.Manager.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</doLock>
		<objectToString set="method" line="296"><f a="it">
	<c path="sys.db.Manager.T"/>
	<c path="String"/>
</f></objectToString>
		<doSerialize set="method" line="319"><f a="field:v">
	<c path="String"/>
	<d/>
	<c path="haxe.io.Bytes"/>
</f></doSerialize>
		<doUnserialize set="method" line="331"><f a="field:b">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
	<d/>
</f></doUnserialize>
		<normalizeCache set="method" line="347"><f a="x">
	<t path="sys.db._Manager.CacheType"><c path="sys.db.Manager.T"/></t>
	<x path="Void"/>
</f></normalizeCache>
		<cacheObject set="method" line="391">
			<f a="x:lock">
				<c path="sys.db.Manager.T"/>
				<x path="Bool"/>
				<c path="sys.db.Manager.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</cacheObject>
		<make set="method" line="415"><f a="x">
	<c path="sys.db.Manager.T"/>
	<x path="Void"/>
</f></make>
		<unmake set="method" line="418"><f a="x">
	<c path="sys.db.Manager.T"/>
	<x path="Void"/>
</f></unmake>
		<quoteField set="method" line="421"><f a="f">
	<c path="String"/>
	<c path="String"/>
</f></quoteField>
		<addKeys set="method" line="425"><f a="s:x">
	<c path="StringBuf"/>
	<a/>
	<x path="Void"/>
</f></addKeys>
		<unsafeExecute set="method" line="441"><f a="sql">
	<c path="String"/>
	<c path="sys.db.ResultSet"/>
</f></unsafeExecute>
		<unsafeObject public="1" set="method" line="445"><f a="sql:lock">
	<c path="String"/>
	<x path="Bool"/>
	<c path="sys.db.Manager.T"/>
</f></unsafeObject>
		<unsafeObjects public="1" set="method" line="463"><f a="sql:lock">
	<c path="String"/>
	<x path="Bool"/>
	<c path="List"><c path="sys.db.Manager.T"/></c>
</f></unsafeObjects>
		<unsafeCount public="1" set="method" line="484"><f a="sql">
	<c path="String"/>
	<x path="Int"/>
</f></unsafeCount>
		<unsafeDelete public="1" set="method" line="488"><f a="sql">
	<c path="String"/>
	<x path="Void"/>
</f></unsafeDelete>
		<unsafeGet public="1" set="method" line="492"><f a="id:?lock">
	<d/>
	<x path="Bool"/>
	<c path="sys.db.Manager.T"/>
</f></unsafeGet>
		<unsafeGetWithKeys public="1" set="method" line="511"><f a="keys:?lock">
	<a/>
	<x path="Bool"/>
	<c path="sys.db.Manager.T"/>
</f></unsafeGetWithKeys>
		<unsafeGetId public="1" set="method" line="524"><f a="o">
	<c path="sys.db.Manager.T"/>
	<d/>
</f></unsafeGetId>
		<addCondition set="method" line="542"><f a="s:x">
	<c path="StringBuf"/>
	<a/>
	<x path="Void"/>
</f></addCondition>
		<dbClass public="1" set="method" line="565"><f a=""><x path="Class"><d/></x></f></dbClass>
		<dbInfos public="1" set="method" line="569"><f a=""><t path="sys.db.RecordInfos"/></f></dbInfos>
		<getCnx set="method" line="573"><f a=""><c path="sys.db.Connection"/></f></getCnx>
		<getLockMode set="method" line="577"><f a=""><c path="String"/></f></getLockMode>
		<forceUpdate public="1" set="method" line="587">
			<f a="o:field">
				<c path="sys.db.Manager.T"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Remove the cached value for the given Object field : this will ensure
		that the value is updated when calling .update(). This is necessary if
		you are modifying binary data in-place since the cache will be modified
		as well.</haxe_doc>
		</forceUpdate>
		<initRelation set="method" line="606"><f a="r">
	<t path="sys.db.RecordRelation"/>
	<x path="Void"/>
</f></initRelation>
		<__get set="method" line="645"><f a="x:prop:key:lock">
	<d/>
	<c path="String"/>
	<c path="String"/>
	<t path="Null"><x path="Bool"/></t>
	<c path="sys.db.Manager.T"/>
</f></__get>
		<__set set="method" line="654"><f a="x:prop:key:v">
	<d/>
	<c path="String"/>
	<c path="String"/>
	<c path="sys.db.Manager.T"/>
	<c path="sys.db.Manager.T"/>
</f></__set>
		<makeCacheKey set="method" line="667"><f a="x">
	<c path="sys.db.Manager.T"/>
	<c path="String"/>
</f></makeCacheKey>
		<addToCache set="method" line="686"><f a="x">
	<t path="sys.db._Manager.CacheType"><c path="sys.db.Manager.T"/></t>
	<x path="Void"/>
</f></addToCache>
		<removeFromCache set="method" line="690"><f a="x">
	<t path="sys.db._Manager.CacheType"><c path="sys.db.Manager.T"/></t>
	<x path="Void"/>
</f></removeFromCache>
		<getFromCacheKey set="method" line="694"><f a="key">
	<c path="String"/>
	<c path="sys.db.Manager.T"/>
</f></getFromCacheKey>
		<getFromCache set="method" line="698">
			<f a="x:lock">
				<t path="sys.db._Manager.CacheType"><c path="sys.db.Manager.T"/></t>
				<x path="Bool"/>
				<c path="sys.db.Manager.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getFromCache>
		<new public="1" set="method" line="64"><f a="classval">
	<x path="Class"><c path="sys.db.Manager.T"/></x>
	<x path="Void"/>
</f></new>
		<haxe_doc>Record Manager : the persistent object database manager. See the tutorial on
	Haxe website to learn how to use Record.</haxe_doc>
		<meta>
			<m n=":build"><e>sys.db.RecordMacros.addRtti()</e></m>
			<m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m>
		</meta>
	</class>
	<typedef path="sys.db._Manager.CacheType" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Manager.hx" private="1" module="sys.db.Manager"><d/></typedef>
	<class path="sys.db.Mysql" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/sys/db/Mysql.hx">
		<init expr="false" line="26" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</init>
		<connect public="1" set="method" line="28" static="1"><f a="params">
	<a>
		<user><c path="String"/></user>
		<socket>
			<t path="Null"><c path="String"/></t>
			<meta><m n=":optional"/></meta>
		</socket>
		<port>
			<t path="Null"><x path="Int"/></t>
			<meta><m n=":optional"/></meta>
		</port>
		<pass><c path="String"/></pass>
		<host><c path="String"/></host>
		<database><c path="String"/></database>
	</a>
	<c path="sys.db.Connection"/>
</f></connect>
	</class>
	<class path="sys.db.Object" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Object.hx">
		<_lock set="null"><x path="Bool"/></_lock>
		<_manager set="null"><c path="sys.db.Manager"><d/></c></_manager>
		<__cache__>
			<d/>
			<meta><m n=":keep"/></meta>
		</__cache__>
		<__getManager set="method" line="46"><f a=""><c path="sys.db.Manager"><d/></c></f></__getManager>
		<insert public="1" set="method" line="53">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</insert>
		<update public="1" set="method" line="57">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</update>
		<lock public="1" set="method" line="61">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</lock>
		<delete public="1" set="method" line="65">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</delete>
		<isLocked public="1" set="method" line="69"><f a=""><x path="Bool"/></f></isLocked>
		<toString public="1" set="method" line="73">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
		</toString>
		<new public="1" set="method" line="39">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</new>
		<haxe_doc>Record Object : the persistent object base type. See the tutorial on Haxe
	website to learn how to use Record.</haxe_doc>
		<meta>
			<m n=":keepSub"/>
			<m n=":autoBuild"><e>sys.db.RecordMacros.macroBuild()</e></m>
			<m n=":skipFields"/>
			<m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m>
		</meta>
	</class>
	<enum path="sys.db.RecordType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/RecordInfos.hx" module="sys.db.RecordInfos">
		<DId/>
		<DInt/>
		<DUId/>
		<DUInt/>
		<DBigId/>
		<DBigInt/>
		<DSingle/>
		<DFloat/>
		<DBool/>
		<DString a="n"><x path="Int"/></DString>
		<DDate/>
		<DDateTime/>
		<DTimeStamp/>
		<DTinyText/>
		<DSmallText/>
		<DText/>
		<DSmallBinary/>
		<DLongBinary/>
		<DBinary/>
		<DBytes a="n"><x path="Int"/></DBytes>
		<DEncoded/>
		<DSerialized/>
		<DNekoSerialized/>
		<DFlags a="flags:autoSize">
			<c path="Array"><c path="String"/></c>
			<x path="Bool"/>
		</DFlags>
		<DTinyInt/>
		<DTinyUInt/>
		<DSmallInt/>
		<DSmallUInt/>
		<DMediumInt/>
		<DMediumUInt/>
		<DData/>
		<DEnum a="name"><c path="String"/></DEnum>
		<DInterval/>
		<DNull/>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</enum>
	<typedef path="sys.db.RecordField" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/RecordInfos.hx" module="sys.db.RecordInfos">
		<a>
			<t><e path="sys.db.RecordType"/></t>
			<name><c path="String"/></name>
			<isNull><x path="Bool"/></isNull>
		</a>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.RecordRelation" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/RecordInfos.hx" module="sys.db.RecordInfos">
		<a>
			<type><c path="String"/></type>
			<prop><c path="String"/></prop>
			<module><c path="String"/></module>
			<lock><x path="Bool"/></lock>
			<key><c path="String"/></key>
			<isNull><x path="Bool"/></isNull>
			<cascade><x path="Bool"/></cascade>
		</a>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.RecordInfos" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/RecordInfos.hx">
		<a>
			<relations><c path="Array"><t path="sys.db.RecordRelation"/></c></relations>
			<name><c path="String"/></name>
			<key><c path="Array"><c path="String"/></c></key>
			<indexes><c path="Array"><a>
	<unique><x path="Bool"/></unique>
	<keys><c path="Array"><c path="String"/></c></keys>
</a></c></indexes>
			<hfields><x path="Map">
	<c path="String"/>
	<t path="sys.db.RecordField"/>
</x></hfields>
			<fields><c path="Array"><t path="sys.db.RecordField"/></c></fields>
		</a>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db._RecordMacros.SqlFunction" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/RecordMacros.hx" private="1" module="sys.db.RecordMacros"><a>
	<sql><c path="String"/></sql>
	<ret><e path="sys.db.RecordType"/></ret>
	<params><c path="Array"><e path="sys.db.RecordType"/></c></params>
	<name><c path="String"/></name>
</a></typedef>
	<class path="sys.db.RecordMacros" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/RecordMacros.hx">
		<GLOBAL expr="null" line="42" static="1">
			<a>
				<types><c path="haxe.ds.StringMap"><e path="sys.db.RecordType"/></c></types>
				<functions><c path="haxe.ds.StringMap"><t path="sys.db._RecordMacros.SqlFunction"/></c></functions>
				<cache><c path="haxe.ds.StringMap"><t path="sys.db.RecordInfos"/></c></cache>
			</a>
			<meta><m n=":value"><e>null</e></m></meta>
		</GLOBAL>
		<simpleString expr="~/^[A-Za-z0-9 ]*$/" line="43" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[A-Za-z0-9 ]*$/</e></m></meta>
		</simpleString>
		<getInfos public="1" set="method" line="1075" static="1"><f a="t">
	<e path="haxe.macro.Type"/>
	<c path="sys.db.RecordMacros"/>
</f></getInfos>
		<isNull><x path="Bool"/></isNull>
		<manager><t path="haxe.macro.Expr"/></manager>
		<inf><t path="sys.db.RecordInfos"/></inf>
		<g><a>
	<types><c path="haxe.ds.StringMap"><e path="sys.db.RecordType"/></c></types>
	<functions><c path="haxe.ds.StringMap"><t path="sys.db._RecordMacros.SqlFunction"/></c></functions>
	<cache><c path="haxe.ds.StringMap"><t path="sys.db.RecordInfos"/></c></cache>
</a></g>
		<initGlobals set="method" line="64"><f a=""><a>
	<types><c path="haxe.ds.StringMap"><e path="sys.db.RecordType"/></c></types>
	<functions><c path="haxe.ds.StringMap"><a>
	<sql><c path="String"/></sql>
	<ret><e path="sys.db.RecordType"/></ret>
	<params><c path="Array"><e path="sys.db.RecordType"/></c></params>
	<name><c path="String"/></name>
</a></c></functions>
	<cache><c path="haxe.ds.StringMap"><t path="sys.db.RecordInfos"/></c></cache>
</a></f></initGlobals>
		<error public="1" set="dynamic" line="90"><f a="msg:pos">
	<c path="String"/>
	<t path="haxe.macro.Position"/>
	<d/>
</f></error>
		<typeof public="1" set="dynamic" line="99"><f a="e">
	<t path="haxe.macro.Expr"/>
	<e path="haxe.macro.Type"/>
</f></typeof>
		<follow public="1" set="dynamic" line="108"><f a="t:?once">
	<e path="haxe.macro.Type"/>
	<x path="Bool"/>
	<e path="haxe.macro.Type"/>
</f></follow>
		<getManager public="1" set="dynamic" line="117"><f a="t:p">
	<e path="haxe.macro.Type"/>
	<t path="haxe.macro.Position"/>
	<c path="sys.db.RecordMacros"/>
</f></getManager>
		<resolveType public="1" set="dynamic" line="126"><f a="name:?module">
	<c path="String"/>
	<c path="String"/>
	<e path="haxe.macro.Type"/>
</f></resolveType>
		<makeInt set="method" line="145"><f a="t">
	<e path="haxe.macro.Type"/>
	<t path="Null"><x path="Int"/></t>
</f></makeInt>
		<makeRecord set="method" line="156"><f a="t">
	<e path="haxe.macro.Type"/>
	<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
</f></makeRecord>
		<getFlags set="method" line="178"><f a="t">
	<e path="haxe.macro.Type"/>
	<c path="Array"><c path="String"/></c>
</f></getFlags>
		<makeType set="method" line="197"><f a="t">
	<e path="haxe.macro.Type"/>
	<e path="sys.db.RecordType"/>
</f></makeType>
		<makeIdent set="method" line="274"><f a="e">
	<t path="haxe.macro.Expr"/>
	<c path="String"/>
</f></makeIdent>
		<getRecordInfos set="method" line="285"><f a="c">
	<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
	<t path="sys.db.RecordInfos"/>
</f></getRecordInfos>
		<quoteField set="method" line="467"><f a="f">
	<c path="String"/>
	<c path="String"/>
</f></quoteField>
		<initManager set="method" line="472"><f a="pos">
	<t path="haxe.macro.Position"/>
	<x path="Void"/>
</f></initManager>
		<makeString get="inline" set="null" line="476"><f a="s:pos">
	<c path="String"/>
	<t path="haxe.macro.Position"/>
	<a>
		<pos><t path="haxe.macro.Position"/></pos>
		<expr><e path="haxe.macro.ExprDef"/></expr>
	</a>
</f></makeString>
		<makeOp get="inline" set="null" line="480"><f a="op:e1:e2:pos">
	<c path="String"/>
	<t path="haxe.macro.Expr"/>
	<t path="haxe.macro.Expr"/>
	<t path="haxe.macro.Position"/>
	<a>
		<pos><t path="haxe.macro.Position"/></pos>
		<expr><e path="haxe.macro.ExprDef"/></expr>
	</a>
</f></makeOp>
		<sqlAdd get="inline" set="null" line="484"><f a="e1:e2:pos">
	<t path="haxe.macro.Expr"/>
	<t path="haxe.macro.Expr"/>
	<t path="haxe.macro.Position"/>
	<a>
		<pos><t path="haxe.macro.Position"/></pos>
		<expr><e path="haxe.macro.ExprDef"/></expr>
	</a>
</f></sqlAdd>
		<sqlAddString get="inline" set="null" line="488"><f a="sql:s">
	<t path="haxe.macro.Expr"/>
	<c path="String"/>
	<a>
		<pos><t path="haxe.macro.Position"/></pos>
		<expr><e path="haxe.macro.ExprDef"/></expr>
	</a>
</f></sqlAddString>
		<sqlQuoteValue set="method" line="492"><f a="v:t:isNull">
	<t path="haxe.macro.Expr"/>
	<e path="sys.db.RecordType"/>
	<x path="Bool"/>
	<t path="haxe.macro.Expr"/>
</f></sqlQuoteValue>
		<sqlAddValue get="inline" set="null" line="512"><f a="sql:v:t:isNull">
	<t path="haxe.macro.Expr"/>
	<t path="haxe.macro.Expr"/>
	<e path="sys.db.RecordType"/>
	<x path="Bool"/>
	<a>
		<pos><t path="haxe.macro.Position"/></pos>
		<expr><e path="haxe.macro.ExprDef"/></expr>
	</a>
</f></sqlAddValue>
		<unifyClass set="method" line="516"><f a="t">
	<e path="sys.db.RecordType"/>
	<x path="Int"/>
</f></unifyClass>
		<tryUnify set="method" line="530"><f a="t:rt">
	<e path="sys.db.RecordType"/>
	<e path="sys.db.RecordType"/>
	<x path="Bool"/>
</f></tryUnify>
		<typeStr set="method" line="538"><f a="t">
	<e path="sys.db.RecordType"/>
	<c path="String"/>
</f></typeStr>
		<canStringify set="method" line="542"><f a="t">
	<e path="sys.db.RecordType"/>
	<x path="Bool"/>
</f></canStringify>
		<convertType set="method" line="549"><f a="t">
	<e path="sys.db.RecordType"/>
	<e path="haxe.macro.ComplexType"/>
</f></convertType>
		<unify set="method" line="567"><f a="t:rt:pos">
	<e path="sys.db.RecordType"/>
	<e path="sys.db.RecordType"/>
	<t path="haxe.macro.Position"/>
	<x path="Void"/>
</f></unify>
		<buildCmp set="method" line="572"><f a="op:e1:e2:pos">
	<c path="String"/>
	<t path="haxe.macro.Expr"/>
	<t path="haxe.macro.Expr"/>
	<t path="haxe.macro.Position"/>
	<a>
		<t><e path="sys.db.RecordType"/></t>
		<sql><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.ExprDef"/></expr>
</a></sql>
		<n><x path="Bool"/></n>
	</a>
</f></buildCmp>
		<buildNum set="method" line="581"><f a="op:e1:e2:pos">
	<c path="String"/>
	<t path="haxe.macro.Expr"/>
	<t path="haxe.macro.Expr"/>
	<t path="haxe.macro.Position"/>
	<a>
		<t><e path="sys.db.RecordType"/></t>
		<sql><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.ExprDef"/></expr>
</a></sql>
		<n><x path="Bool"/></n>
	</a>
</f></buildNum>
		<buildInt set="method" line="595"><f a="op:e1:e2:pos">
	<c path="String"/>
	<t path="haxe.macro.Expr"/>
	<t path="haxe.macro.Expr"/>
	<t path="haxe.macro.Position"/>
	<a>
		<t><e path="sys.db.RecordType"/></t>
		<sql><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.ExprDef"/></expr>
</a></sql>
		<n><x path="Bool"/></n>
	</a>
</f></buildInt>
		<buildEq set="method" line="603"><f a="eq:e1:e2:pos">
	<x path="Bool"/>
	<t path="haxe.macro.Expr"/>
	<t path="haxe.macro.Expr"/>
	<t path="haxe.macro.Position"/>
	<a>
		<t><e path="sys.db.RecordType"/></t>
		<sql><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.ExprDef"/></expr>
</a></sql>
		<n><x path="Bool"/></n>
	</a>
</f></buildEq>
		<buildDefault set="method" line="677"><f a="cond">
	<t path="haxe.macro.Expr"/>
	<a>
		<t><e path="sys.db.RecordType"/></t>
		<sql><t path="haxe.macro.Expr"/></sql>
		<n><x path="Bool"/></n>
	</a>
</f></buildDefault>
		<getField set="method" line="684"><f a="f">
	<a>
		<field><c path="String"/></field>
		<expr><t path="haxe.macro.Expr"/></expr>
	</a>
	<t path="Null"><t path="sys.db.RecordField"/></t>
</f></getField>
		<buildCond set="method" line="707"><f a="cond">
	<t path="haxe.macro.Expr"/>
	<a>
		<t><e path="sys.db.RecordType"/></t>
		<sql><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.ExprDef"/></expr>
</a></sql>
		<n><x path="Bool"/></n>
	</a>
</f></buildCond>
		<ensureType set="method" line="919"><f a="e:rt:isNull">
	<t path="haxe.macro.Expr"/>
	<e path="sys.db.RecordType"/>
	<x path="Bool"/>
	<a>
		<pos><t path="haxe.macro.Position"/></pos>
		<expr><e path="haxe.macro.ExprDef"/></expr>
	</a>
</f></ensureType>
		<checkKeys set="method" line="927"><f a="econd">
	<t path="haxe.macro.Expr"/>
	<t path="haxe.macro.Expr"/>
</f></checkKeys>
		<orderField set="method" line="951"><f a="e">
	<a>
		<pos set="null"><t path="haxe.macro.Position"/></pos>
		<expr set="null"><e path="haxe.macro.ExprDef"/></expr>
	</a>
	<c path="String"/>
</f></orderField>
		<concatStrings set="method" line="970"><f a="e">
	<t path="haxe.macro.Expr"/>
	<t path="haxe.macro.Expr"/>
</f></concatStrings>
		<browseStrings set="method" line="983"><f a="inf:e">
	<a>
		<str><c path="String"/></str>
		<e><t path="haxe.macro.Expr"/></e>
	</a>
	<t path="haxe.macro.Expr"/>
	<x path="Void"/>
</f></browseStrings>
		<buildOptions set="method" line="1020"><f a="eopt">
	<t path="haxe.macro.Expr"/>
	<a>
		<orderBy><c path="String"/></orderBy>
		<limit><a>
	<pos><t path="haxe.macro.Expr"/></pos>
	<len><t path="Null"><a>
	<pos>
		<t path="haxe.macro.Position"/>
		<haxe_doc>The position of the expression.</haxe_doc>
	</pos>
	<expr>
		<e path="haxe.macro.ExprDef"/>
		<haxe_doc>The expression kind.</haxe_doc>
	</expr>
</a></t></len>
</a></limit>
		<forceIndex><c path="String"/></forceIndex>
	</a>
</f></buildOptions>
		<new set="method" line="54"><f a="c">
	<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
	<x path="Void"/>
</f></new>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</class>
	<class path="sys.db.Sqlite" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/sys/db/Sqlite.hx">
		<init expr="false" line="26" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</init>
		<open public="1" set="method" line="31" static="1">
			<f a="file">
				<c path="String"/>
				<c path="sys.db.Connection"/>
			</f>
			<haxe_doc>Opens a new SQLite connection on the specified path.
		Note that you will need a SQLite JDBC driver (like https://bitbucket.org/xerial/sqlite-jdbc).</haxe_doc>
		</open>
	</class>
	<class path="sys.db.TableCreate" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/TableCreate.hx">
		<autoInc set="method" line="28" static="1"><f a="dbName">
	<c path="String"/>
	<c path="String"/>
</f></autoInc>
		<getTypeSQL public="1" set="method" line="33" static="1"><f a="t:dbName">
	<e path="sys.db.RecordType"/>
	<c path="String"/>
	<c path="String"/>
</f></getTypeSQL>
		<create public="1" set="method" line="66" static="1">
			<f a="manager:?engine">
				<c path="sys.db.Manager"><d/></c>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</create>
		<exists public="1" set="method" line="99" static="1">
			<f a="manager">
				<c path="sys.db.Manager"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</exists>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</class>
	<class path="sys.db.Transaction" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Transaction.hx">
		<isDeadlock public="1" set="method" line="26" static="1"><f a="e">
	<d/>
	<x path="Bool"/>
</f></isDeadlock>
		<runMainLoop set="method" line="30" static="1"><f a="mainFun:logError:count">
	<f a=""><x path="Void"/></f>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Int"/>
	<x path="Void"/>
</f></runMainLoop>
		<main public="1" set="method" line="53" static="1"><f a="cnx:mainFun:?logError">
	<c path="sys.db.Connection"/>
	<f a=""><x path="Void"/></f>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></main>
	</class>
	<typedef path="sys.db.SId" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><x path="Int"/></t>
		<haxe_doc>int with auto increment</haxe_doc>
		<meta>
			<m n=":noPackageRestrict"/>
			<m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m>
		</meta>
	</typedef>
	<typedef path="sys.db.SUId" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><x path="Int"/></t>
		<haxe_doc>int unsigned with auto increment</haxe_doc>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.SBigId" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><x path="Float"/></t>
		<haxe_doc>big int with auto increment</haxe_doc>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.SInt" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.SUInt" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.SBigInt" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.SSingle" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><x path="Float"/></t>
		<haxe_doc>single precision float</haxe_doc>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.SFloat" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><x path="Float"/></t>
		<haxe_doc>double precision float</haxe_doc>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.SBool" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><x path="Bool"/></t>
		<haxe_doc>use `tinyint(1)` to distinguish with int</haxe_doc>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.SString" params="Const" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<c path="String"/>
		<haxe_doc>same as `varchar(n)`</haxe_doc>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.SDate" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<c path="Date"/>
		<haxe_doc>date only, use `SDateTime` for date+time</haxe_doc>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.SDateTime" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<c path="Date"/>
		<haxe_doc>mysql DateTime</haxe_doc>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.STimeStamp" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<c path="Date"/>
		<haxe_doc>mysql Timestamp</haxe_doc>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.STinyText" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<c path="String"/>
		<haxe_doc>TinyText (up to 255 bytes)</haxe_doc>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.SSmallText" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<c path="String"/>
		<haxe_doc>Text (up to 64KB)</haxe_doc>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.SText" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<c path="String"/>
		<haxe_doc>MediumText (up to 24MB)</haxe_doc>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.SSmallBinary" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<c path="haxe.io.Bytes"/>
		<haxe_doc>Blob type (up to 64KB)</haxe_doc>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.SLongBinary" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<c path="haxe.io.Bytes"/>
		<haxe_doc>LongBlob type (up to 4GB)</haxe_doc>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.SBinary" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<c path="haxe.io.Bytes"/>
		<haxe_doc>MediumBlob type (up to 24MB)</haxe_doc>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.SBytes" params="Const" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<c path="haxe.io.Bytes"/>
		<haxe_doc>same as binary(n)</haxe_doc>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.STinyInt" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><x path="Int"/></t>
		<haxe_doc>one byte signed `-128...127`</haxe_doc>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.SSmallInt" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><x path="Int"/></t>
		<haxe_doc>two bytes signed `-32768...32767`</haxe_doc>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.SMediumInt" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><x path="Int"/></t>
		<haxe_doc>three bytes signed `-8388608...8388607`</haxe_doc>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.STinyUInt" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><x path="Int"/></t>
		<haxe_doc>one byte `0...255`</haxe_doc>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.SSmallUInt" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><x path="Int"/></t>
		<haxe_doc>two bytes `0...65535`</haxe_doc>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.SMediumUInt" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><x path="Int"/></t>
		<haxe_doc>three bytes `0...16777215`</haxe_doc>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.SNull" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><c path="sys.db.SNull.T"/></t>
		<haxe_doc>specify that this field is nullable</haxe_doc>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.SEncoded" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><x path="Int"/></t>
		<haxe_doc>specify that the integer use custom encoding</haxe_doc>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.SSerialized" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<c path="String"/>
		<haxe_doc>Haxe Serialized string</haxe_doc>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.SNekoSerialized" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<c path="haxe.io.Bytes"/>
		<haxe_doc>native neko serialized bytes</haxe_doc>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.SFlags" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><x path="haxe.EnumFlags"><c path="sys.db.SFlags.T"/></x></t>
		<haxe_doc>a set of bitflags of different enum values</haxe_doc>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.SSmallFlags" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<t path="sys.db.SFlags"><c path="sys.db.SSmallFlags.T"/></t>
		<haxe_doc>same as `SFlags` but will adapt the storage size to the number of flags</haxe_doc>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.SData" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><c path="sys.db.SData.T"/></t>
		<haxe_doc>allow to store any value in serialized form</haxe_doc>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<typedef path="sys.db.SEnum" params="E" file="/home/travis/build/HaxeFoundation/haxe/std/sys/db/Types.hx" module="sys.db.Types">
		<t path="Null"><c path="sys.db.SEnum.E"/></t>
		<haxe_doc>allow to store an enum value that does not have parameters as a simple int</haxe_doc>
		<meta><m n=":deprecated"><e>"This class will be removed soon, please install the record-macros library"</e></m></meta>
	</typedef>
	<class path="sys.io.File" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/sys/io/File.hx">
		<getContent public="1" set="method" line="27" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the content of the file specified by `path` as a String.

		If the file does not exist or can not be read, an exception is thrown.

		`sys.FileSystem.exists` can be used to check for existence.

		If `path` is null, the result is unspecified.</haxe_doc>
		</getContent>
		<saveContent public="1" set="method" line="35" static="1">
			<f a="path:content">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores `content` in the file specified by `path`.

		If the file cannot be written to, an exception is thrown.

		If `path` or `content` are null, the result is unspecified.</haxe_doc>
		</saveContent>
		<getBytes public="1" set="method" line="42" static="1">
			<f a="path">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Retrieves the binary content of the file specified by `path`.

		If the file does not exist or can not be read, an exception is thrown.

		`sys.FileSystem.exists` can be used to check for existence.

		If `path` is null, the result is unspecified.</haxe_doc>
		</getBytes>
		<saveBytes public="1" set="method" line="50" static="1">
			<f a="path:bytes">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores `bytes` in the file specified by `path` in binary mode.

		If the file cannot be written to, an exception is thrown.

		If `path` or `bytes` are null, the result is unspecified.</haxe_doc>
		</saveBytes>
		<read public="1" set="method" line="57" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileInput"/>
			</f>
			<meta><m n=":value"><e>{ binary : true }</e></m></meta>
			<haxe_doc>Returns an `FileInput` handle to the file specified by `path`.

		If `binary` is true, the file is opened in binary mode. Otherwise it is
		opened in non-binary mode.

		If the file does not exist or can not be read, an exception is thrown.

		Operations on the returned `FileInput` handle read on the opened file.

		File handles should be closed via `FileInput.close` once the operation
		is complete.

		If `path` is null, the result is unspecified.</haxe_doc>
		</read>
		<write public="1" set="method" line="69" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileOutput"/>
			</f>
			<meta><m n=":value"><e>{ binary : true }</e></m></meta>
			<haxe_doc>Returns an `FileOutput` handle to the file specified by `path`.

		If `binary` is true, the file is opened in binary mode. Otherwise it is
		opened in non-binary mode.

		If the file cannot be written to, an exception is thrown.

		Operations on the returned `FileOutput` handle write to the opened file.
		If the file existed, its previous content is overwritten.

		File handles should be closed via `FileOutput.close` once the operation
		is complete.

		If `path` is null, the result is unspecified.</haxe_doc>
		</write>
		<append public="1" set="method" line="87" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileOutput"/>
			</f>
			<meta><m n=":value"><e>{ binary : true }</e></m></meta>
			<haxe_doc>Similar to `sys.io.File.write`, but appends to the file if it exists
		instead of overwriting its contents.</haxe_doc>
		</append>
		<copy public="1" set="method" line="106" static="1">
			<f a="srcPath:dstPath">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies the contents of the file specified by `srcPath` to the file
		specified by `dstPath`.

		If the `srcPath` does not exist or cannot be read, or if the `dstPath`
		file cannot be written to, an exception is thrown.

		If the file at `dstPath` exists, its contents are overwritten.

		If `srcPath` or `dstPath` are null, the result is unspecified.</haxe_doc>
		</copy>
		<haxe_doc>API for reading and writing to files.

	See `sys.FileSystem` for the complementary file system API.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="sys.io.FileInput" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/sys/io/FileInput.hx">
		<extends path="haxe.io.Input"/>
		<f><c path="java.io.RandomAccessFile"/></f>
		<_eof><x path="Bool"/></_eof>
		<close public="1" set="method" line="39" override="1"><f a=""><x path="Void"/></f></close>
		<readByte public="1" set="method" line="44" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="61" override="1"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<seek public="1" set="method" line="86"><f a="p:pos">
	<x path="Int"/>
	<e path="sys.io.FileSeek"/>
	<x path="Void"/>
</f></seek>
		<tell public="1" set="method" line="109"><f a=""><x path="Int"/></f></tell>
		<eof public="1" get="inline" set="null" line="121"><f a=""><x path="Bool"/></f></eof>
		<new public="1" set="method" line="33"><f a="f">
	<c path="java.io.RandomAccessFile"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.io.FileOutput" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/sys/io/FileOutput.hx">
		<extends path="haxe.io.Output"/>
		<f><c path="java.io.RandomAccessFile"/></f>
		<close public="1" set="method" line="36" override="1"><f a=""><x path="Void"/></f></close>
		<writeByte public="1" set="method" line="41" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<write public="1" set="method" line="53" override="1"><f a="s">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></write>
		<writeBytes public="1" set="method" line="65" override="1"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<seek public="1" set="method" line="78"><f a="p:pos">
	<x path="Int"/>
	<e path="sys.io.FileSeek"/>
	<x path="Void"/>
</f></seek>
		<tell public="1" set="method" line="98"><f a=""><x path="Int"/></f></tell>
		<new public="1" set="method" line="31"><f a="f">
	<c path="java.io.RandomAccessFile"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="sys.io.FileSeek" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/io/FileSeek.hx">
		<SeekBegin/>
		<SeekCur/>
		<SeekEnd/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="sys.io.Process" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/sys/io/Process.hx">
		<createProcessBuilder set="method" line="39" static="1">
			<f a="cmd:?args">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<c path="java.lang.ProcessBuilder"/>
			</f>
			<meta><m n=":allow"><e>Sys</e></m></meta>
		</createProcessBuilder>
		<stdout public="1" set="null">
			<c path="haxe.io.Input"/>
			<haxe_doc>Standard output. The output stream where a process writes its output data.</haxe_doc>
		</stdout>
		<stderr public="1" set="null">
			<c path="haxe.io.Input"/>
			<haxe_doc>Standard error. The output stream to output error messages or diagnostics.</haxe_doc>
		</stderr>
		<stdin public="1" set="null">
			<c path="haxe.io.Output"/>
			<haxe_doc>Standard input. The stream data going into a process.</haxe_doc>
		</stdin>
		<proc><c path="java.lang.Process"/></proc>
		<getPid public="1" set="method" line="88">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Return the process ID.</haxe_doc>
		</getPid>
		<exitCode public="1" set="method" line="95">
			<f a="?block" v="true">
				<x path="Bool"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<meta><m n=":value"><e>{ block : true }</e></m></meta>
			<haxe_doc>Query the exit code of the process.
		If `block` is true or not specified, it will block until the process terminates.
		If `block` is false, it will return either the process exit code if it's already terminated or null if it's still running.
		If the process has already exited, return the exit code immediately.</haxe_doc>
		</exitCode>
		<close public="1" set="method" line="115">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the process handle and release the associated resources.
		All `Process` fields should not be used after `close()` is called.</haxe_doc>
		</close>
		<kill public="1" set="method" line="120">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Kill the process.</haxe_doc>
		</kill>
		<new public="1" set="method" line="80">
			<f a="cmd:?args">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Construct a `Process` object, which run the given command immediately.

		Command arguments can be passed in two ways: 1. using `args`, 2. appending to `cmd` and leaving `args` as `null`.

		 1. When using `args` to pass command arguments, each argument will be automatically quoted, and shell meta-characters will be escaped if needed.
		`cmd` should be an executable name that can be located in the `PATH` environment variable, or a path to an executable.

		 2. When `args` is not given or is `null`, command arguments can be appended to `cmd`. No automatic quoting/escaping will be performed. `cmd` should be formatted exactly as it would be when typed at the command line.
		It can run executables, as well as shell commands that are not executables (e.g. on Windows: `dir`, `cd`, `echo` etc).

		`close()` should be called when the `Process` is no longer used.</haxe_doc>
		</new>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="sys.io._Process.ProcessInput" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/sys/io/Process.hx" private="1" module="sys.io.Process">
		<extends path="java.io.NativeInput"/>
		<chained><c path="haxe.io.BytesInput"/></chained>
		<bufferContents public="1" set="method" line="132"><f a=""><x path="Void"/></f></bufferContents>
		<readByte public="1" set="method" line="139" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="156" override="1"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<close public="1" set="method" line="180" override="1"><f a=""><x path="Void"/></f></close>
	</class>
	<class path="sys.net.Address" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/net/Address.hx">
		<host public="1"><x path="Int"/></host>
		<port public="1"><x path="Int"/></port>
		<getHost public="1" set="method" line="36">
			<f a=""><c path="sys.net.Host"/></f>
			<meta><m n=":has_untyped"/></meta>
		</getHost>
		<compare public="1" set="method" line="42"><f a="a">
	<c path="sys.net.Address"/>
	<x path="Int"/>
</f></compare>
		<clone public="1" set="method" line="50"><f a=""><c path="sys.net.Address"/></f></clone>
		<new public="1" set="method" line="31"><f a=""><x path="Void"/></f></new>
		<haxe_doc>An address is used to represent a port on a given host ip. 
	It is used by `sys.net.UdpSocket`.</haxe_doc>
	</class>
	<class path="sys.net.Host" params="" file="/home/travis/build/HaxeFoundation/haxe/std/java/_std/sys/net/Host.hx">
		<localhost public="1" set="method" line="52" static="1"><f a=""><c path="String"/></f></localhost>
		<host public="1" set="null"><c path="String"/></host>
		<ip public="1" set="null"><x path="Int"/></ip>
		<wrapped>
			<c path="java.net.InetAddress"/>
			<meta><m n=":allow"><e>sys.net</e></m></meta>
		</wrapped>
		<toString public="1" set="method" line="42"><f a=""><c path="String"/></f></toString>
		<reverse public="1" set="method" line="47"><f a=""><c path="String"/></f></reverse>
		<new public="1" set="method" line="31"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="sys.net.UdpSocket" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/net/UdpSocket.hx">
		<extends path="sys.net.Socket"/>
		<sendTo public="1" set="method" line="37">
			<f a="buf:pos:len:addr">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="sys.net.Address"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Sends data to the specified target host/port address.</haxe_doc>
		</sendTo>
		<readFrom public="1" set="method" line="44">
			<f a="buf:pos:len:addr">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="sys.net.Address"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads data from any incoming address and store the receiver address into the address parameter.</haxe_doc>
		</readFrom>
		<new public="1" set="method" line="29"><f a=""><x path="Void"/></f></new>
		<haxe_doc>A UDP socket class</haxe_doc>
	</class>
	<class path="sys.ssl.Certificate" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/ssl/Certificate.hx" extern="1">
		<loadFile public="1" set="method" static="1"><f a="file">
	<c path="String"/>
	<c path="sys.ssl.Certificate"/>
</f></loadFile>
		<loadPath public="1" set="method" static="1"><f a="path">
	<c path="String"/>
	<c path="sys.ssl.Certificate"/>
</f></loadPath>
		<fromString public="1" set="method" static="1"><f a="str">
	<c path="String"/>
	<c path="sys.ssl.Certificate"/>
</f></fromString>
		<loadDefaults public="1" set="method" static="1"><f a=""><c path="sys.ssl.Certificate"/></f></loadDefaults>
		<commonName public="1" get="accessor" set="null"><t path="Null"><c path="String"/></t></commonName>
		<altNames public="1" get="accessor" set="null"><c path="Array"><c path="String"/></c></altNames>
		<notBefore public="1" get="accessor" set="null"><c path="Date"/></notBefore>
		<notAfter public="1" get="accessor" set="null"><c path="Date"/></notAfter>
		<subject public="1" set="method"><f a="field">
	<c path="String"/>
	<t path="Null"><c path="String"/></t>
</f></subject>
		<issuer public="1" set="method"><f a="field">
	<c path="String"/>
	<t path="Null"><c path="String"/></t>
</f></issuer>
		<next public="1" set="method"><f a=""><t path="Null"><c path="sys.ssl.Certificate"/></t></f></next>
		<add public="1" set="method"><f a="pem">
	<c path="String"/>
	<x path="Void"/>
</f></add>
		<addDER public="1" set="method"><f a="der">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></addDER>
		<get_commonName set="method"><f a=""><t path="Null"><c path="String"/></t></f></get_commonName>
		<get_altNames set="method"><f a=""><c path="Array"><c path="String"/></c></f></get_altNames>
		<get_notBefore set="method"><f a=""><c path="Date"/></f></get_notBefore>
		<get_notAfter set="method"><f a=""><c path="Date"/></f></get_notAfter>
	</class>
	<class path="sys.ssl.Digest" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/ssl/Digest.hx" extern="1">
		<make public="1" set="method" static="1"><f a="data:alg">
	<c path="haxe.io.Bytes"/>
	<x path="sys.ssl.DigestAlgorithm"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<sign public="1" set="method" static="1"><f a="data:privKey:alg">
	<c path="haxe.io.Bytes"/>
	<c path="sys.ssl.Key"/>
	<x path="sys.ssl.DigestAlgorithm"/>
	<c path="haxe.io.Bytes"/>
</f></sign>
		<verify public="1" set="method" static="1"><f a="data:signature:pubKey:alg">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
	<c path="sys.ssl.Key"/>
	<x path="sys.ssl.DigestAlgorithm"/>
	<x path="Bool"/>
</f></verify>
	</class>
	<abstract path="sys.ssl.DigestAlgorithm" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/ssl/DigestAlgorithm.hx">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="sys.ssl._DigestAlgorithm.DigestAlgorithm_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/ssl/DigestAlgorithm.hx" private="1" module="sys.ssl.DigestAlgorithm" extern="1">
	<MD5 public="1" get="inline" set="null" expr="cast &quot;MD5&quot;" line="5" static="1">
		<x path="sys.ssl.DigestAlgorithm"/>
		<meta>
			<m n=":value"><e>cast "MD5"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MD5>
	<SHA1 public="1" get="inline" set="null" expr="cast &quot;SHA1&quot;" line="6" static="1">
		<x path="sys.ssl.DigestAlgorithm"/>
		<meta>
			<m n=":value"><e>cast "SHA1"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SHA1>
	<SHA224 public="1" get="inline" set="null" expr="cast &quot;SHA224&quot;" line="7" static="1">
		<x path="sys.ssl.DigestAlgorithm"/>
		<meta>
			<m n=":value"><e>cast "SHA224"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SHA224>
	<SHA256 public="1" get="inline" set="null" expr="cast &quot;SHA256&quot;" line="8" static="1">
		<x path="sys.ssl.DigestAlgorithm"/>
		<meta>
			<m n=":value"><e>cast "SHA256"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SHA256>
	<SHA384 public="1" get="inline" set="null" expr="cast &quot;SHA384&quot;" line="9" static="1">
		<x path="sys.ssl.DigestAlgorithm"/>
		<meta>
			<m n=":value"><e>cast "SHA384"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SHA384>
	<SHA512 public="1" get="inline" set="null" expr="cast &quot;SHA512&quot;" line="10" static="1">
		<x path="sys.ssl.DigestAlgorithm"/>
		<meta>
			<m n=":value"><e>cast "SHA512"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SHA512>
	<RIPEMD160 public="1" get="inline" set="null" expr="cast &quot;RIPEMD160&quot;" line="11" static="1">
		<x path="sys.ssl.DigestAlgorithm"/>
		<meta>
			<m n=":value"><e>cast "RIPEMD160"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RIPEMD160>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="sys.ssl._DigestAlgorithm.DigestAlgorithm_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/ssl/DigestAlgorithm.hx" private="1" module="sys.ssl.DigestAlgorithm" extern="1">
		<MD5 public="1" get="inline" set="null" expr="cast &quot;MD5&quot;" line="5" static="1">
			<x path="sys.ssl.DigestAlgorithm"/>
			<meta>
				<m n=":value"><e>cast "MD5"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MD5>
		<SHA1 public="1" get="inline" set="null" expr="cast &quot;SHA1&quot;" line="6" static="1">
			<x path="sys.ssl.DigestAlgorithm"/>
			<meta>
				<m n=":value"><e>cast "SHA1"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SHA1>
		<SHA224 public="1" get="inline" set="null" expr="cast &quot;SHA224&quot;" line="7" static="1">
			<x path="sys.ssl.DigestAlgorithm"/>
			<meta>
				<m n=":value"><e>cast "SHA224"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SHA224>
		<SHA256 public="1" get="inline" set="null" expr="cast &quot;SHA256&quot;" line="8" static="1">
			<x path="sys.ssl.DigestAlgorithm"/>
			<meta>
				<m n=":value"><e>cast "SHA256"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SHA256>
		<SHA384 public="1" get="inline" set="null" expr="cast &quot;SHA384&quot;" line="9" static="1">
			<x path="sys.ssl.DigestAlgorithm"/>
			<meta>
				<m n=":value"><e>cast "SHA384"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SHA384>
		<SHA512 public="1" get="inline" set="null" expr="cast &quot;SHA512&quot;" line="10" static="1">
			<x path="sys.ssl.DigestAlgorithm"/>
			<meta>
				<m n=":value"><e>cast "SHA512"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SHA512>
		<RIPEMD160 public="1" get="inline" set="null" expr="cast &quot;RIPEMD160&quot;" line="11" static="1">
			<x path="sys.ssl.DigestAlgorithm"/>
			<meta>
				<m n=":value"><e>cast "RIPEMD160"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RIPEMD160>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="sys.ssl.Key" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/ssl/Key.hx" extern="1">
		<loadFile public="1" set="method" static="1"><f a="file:?isPublic:?pass">
	<c path="String"/>
	<x path="Bool"/>
	<c path="String"/>
	<c path="sys.ssl.Key"/>
</f></loadFile>
		<readPEM public="1" set="method" static="1"><f a="data:isPublic:?pass">
	<c path="String"/>
	<x path="Bool"/>
	<c path="String"/>
	<c path="sys.ssl.Key"/>
</f></readPEM>
		<readDER public="1" set="method" static="1"><f a="data:isPublic">
	<c path="haxe.io.Bytes"/>
	<x path="Bool"/>
	<c path="sys.ssl.Key"/>
</f></readDER>
	</class>
	<class path="sys.ssl.Socket" params="" file="/home/travis/build/HaxeFoundation/haxe/std/sys/ssl/Socket.hx" extern="1">
		<extends path="sys.net.Socket"/>
		<DEFAULT_VERIFY_CERT public="1" static="1"><t path="Null"><x path="Bool"/></t></DEFAULT_VERIFY_CERT>
		<DEFAULT_CA public="1" static="1"><t path="Null"><c path="sys.ssl.Certificate"/></t></DEFAULT_CA>
		<verifyCert public="1">
			<t path="Null"><x path="Bool"/></t>
			<haxe_doc>Define if peer certificate is verified during SSL handshake.</haxe_doc>
		</verifyCert>
		<handshake public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Perform the SSL handshake.</haxe_doc>
		</handshake>
		<setCA public="1" set="method">
			<f a="cert">
				<c path="sys.ssl.Certificate"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Configure the certificate chain for peer certificate verification.</haxe_doc>
		</setCA>
		<setHostname public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Configure the hostname for Server Name Indication TLS extension.</haxe_doc>
		</setHostname>
		<setCertificate public="1" set="method">
			<f a="cert:key">
				<c path="sys.ssl.Certificate"/>
				<c path="sys.ssl.Key"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Configure own certificate and private key.</haxe_doc>
		</setCertificate>
		<addSNICertificate public="1" set="method">
			<f a="cbServernameMatch:cert:key">
				<f a="">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<c path="sys.ssl.Certificate"/>
				<c path="sys.ssl.Key"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Configure additionals certificates and private keys for Server Name Indication extension.
		The callback may be called during handshake to determine the certificate to use.</haxe_doc>
		</addSNICertificate>
		<peerCertificate public="1" set="method">
			<f a=""><c path="sys.ssl.Certificate"/></f>
			<haxe_doc>Return the certificate received from the other side of a connection.</haxe_doc>
		</peerCertificate>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>A TLS socket class : allow you to both connect to a given server and exchange messages or start your own server and wait for connections.</haxe_doc>
	</class>
</haxe>