<!-- This file can be parsed by haxe.rtti.XmlParser -->
<haxe>
	<abstract path="Any" params="" file="/home/vsts/work/1/s/std/Any.hx">
		<from><icast field="__cast"><c path="__cast.T"/></icast></from>
		<this><d/></this>
		<to><icast field="__promote"><c path="__promote.T"/></icast></to>
		<haxe_doc>`Any` is a type that is compatible with any other in both ways.

	This means that a value of any type can be assigned to `Any`, and
	vice-versa, a value of `Any` type can be assigned to any other type.

	It's a more type-safe alternative to `Dynamic`, because it doesn't
	support field access or operators and it's bound to monomorphs. So,
	to work with the actual value, it needs to be explicitly promoted
	to another type.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
		<impl><class path="_Any.Any_Impl_" params="" file="/home/vsts/work/1/s/std/Any.hx" private="1" module="Any">
	<__promote params="T" get="inline" set="null" line="35" static="1">
		<f a="this">
			<d/>
			<c path="__promote.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":to"/>
		</meta>
	</__promote>
	<__cast params="T" get="inline" set="null" line="38" static="1">
		<f a="value">
			<c path="__cast.T"/>
			<x path="Any"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":from"/>
		</meta>
	</__cast>
	<toString get="inline" set="null" line="41" static="1">
		<f a="this">
			<d/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</toString>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="_Any.Any_Impl_" params="" file="/home/vsts/work/1/s/std/Any.hx" private="1" module="Any">
		<__promote params="T" get="inline" set="null" line="35" static="1">
			<f a="this">
				<d/>
				<c path="__promote.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":to"/>
			</meta>
		</__promote>
		<__cast params="T" get="inline" set="null" line="38" static="1">
			<f a="value">
				<c path="__cast.T"/>
				<x path="Any"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":from"/>
			</meta>
		</__cast>
		<toString get="inline" set="null" line="41" static="1">
			<f a="this">
				<d/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</toString>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="Array" params="T" file="/home/vsts/work/1/s/std/cs/_std/Array.hx">
		<__hx_toString_depth expr="0" line="33" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":skipReflection"/>
			</meta>
		</__hx_toString_depth>
		<__hx_defaultCapacity final="1" get="inline" set="null" expr="4" line="34" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>4</e></m>
				<m n=":skipReflection"/>
			</meta>
		</__hx_defaultCapacity>
		<ofNative params="X" get="inline" set="null" line="41" static="1"><f a="native">
	<c path="cs.NativeArray"><c path="ofNative.X"/></c>
	<c path="Array"><c path="ofNative.X"/></c>
</f></ofNative>
		<alloc params="Y" get="inline" set="null" line="46" static="1"><f a="size">
	<x path="Int"/>
	<c path="Array"><c path="alloc.Y"/></c>
</f></alloc>
		<length public="1" set="null"><x path="Int"/></length>
		<__a><c path="cs.NativeArray"><c path="Array.T"/></c></__a>
		<concat public="1" set="method" line="67"><f a="a">
	<c path="Array"><c path="Array.T"/></c>
	<c path="Array"><c path="Array.T"/></c>
</f></concat>
		<concatNative set="method" line="76"><f a="a">
	<c path="cs.NativeArray"><c path="Array.T"/></c>
	<x path="Void"/>
</f></concatNative>
		<indexOf public="1" set="method" line="92"><f a="x:?fromIndex">
	<c path="Array.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></indexOf>
		<lastIndexOf public="1" set="method" line="104"><f a="x:?fromIndex">
	<c path="Array.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lastIndexOf>
		<join public="1" set="method" line="116"><f a="sep">
	<c path="String"/>
	<c path="String"/>
</f></join>
		<pop public="1" set="method" line="133"><f a=""><x path="Null"><c path="Array.T"/></x></f></pop>
		<push public="1" set="method" line="147"><f a="x">
	<c path="Array.T"/>
	<x path="Int"/>
</f></push>
		<reverse public="1" set="method" line="160"><f a=""><x path="Void"/></f></reverse>
		<shift public="1" set="method" line="174"><f a=""><x path="Null"><c path="Array.T"/></x></f></shift>
		<slice public="1" set="method" line="189"><f a="pos:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><c path="Array.T"/></c>
</f></slice>
		<sort public="1" set="method" line="211"><f a="f">
	<f a=":">
		<c path="Array.T"/>
		<c path="Array.T"/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></sort>
		<quicksort set="method" line="217"><f a="lo:hi:f">
	<x path="Int"/>
	<x path="Int"/>
	<f a=":">
		<c path="Array.T"/>
		<c path="Array.T"/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></quicksort>
		<splice public="1" set="method" line="239"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><c path="Array.T"/></c>
</f></splice>
		<spliceVoid set="method" line="269"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></spliceVoid>
		<toString public="1" set="method" line="294"><f a=""><c path="String"/></f></toString>
		<__hx_toString set="method" line="310">
			<f a=""><c path="String"/></f>
			<meta><m n=":skipReflection"/></meta>
		</__hx_toString>
		<unshift public="1" set="method" line="327"><f a="x">
	<c path="Array.T"/>
	<x path="Void"/>
</f></unshift>
		<insert public="1" set="method" line="344"><f a="pos:x">
	<x path="Int"/>
	<c path="Array.T"/>
	<x path="Void"/>
</f></insert>
		<remove public="1" set="method" line="377"><f a="x">
	<c path="Array.T"/>
	<x path="Bool"/>
</f></remove>
		<map public="1" params="S" get="inline" set="null" line="393"><f a="f">
	<f a="">
		<c path="Array.T"/>
		<c path="map.S"/>
	</f>
	<c path="Array"><c path="map.S"/></c>
</f></map>
		<filter public="1" get="inline" set="null" line="400"><f a="f">
	<f a="">
		<c path="Array.T"/>
		<x path="Bool"/>
	</f>
	<c path="Array"><c path="Array.T"/></c>
</f></filter>
		<copy public="1" set="method" line="410"><f a=""><c path="Array"><c path="Array.T"/></c></f></copy>
		<iterator public="1" get="inline" set="null" line="418"><f a=""><t path="Iterator"><c path="Array.T"/></t></f></iterator>
		<resize public="1" set="method" line="422"><f a="len">
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
		<__get set="method" line="433"><f a="idx">
	<x path="Int"/>
	<c path="Array.T"/>
</f></__get>
		<__set set="method" line="437"><f a="idx:v">
	<x path="Int"/>
	<c path="Array.T"/>
	<c path="Array.T"/>
</f></__set>
		<__unsafe_get get="inline" set="null" line="455"><f a="idx">
	<x path="Int"/>
	<c path="Array.T"/>
</f></__unsafe_get>
		<__unsafe_set get="inline" set="null" line="459"><f a="idx:val">
	<x path="Int"/>
	<c path="Array.T"/>
	<c path="Array.T"/>
</f></__unsafe_set>
		<new public="1" set="method" line="50">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><new set="method" line="61">
	<f a="native">
		<c path="cs.NativeArray"><c path="Array.T"/></c>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
		</meta>
	</class>
	<class path="_Array.ArrayIterator" params="T" file="/home/vsts/work/1/s/std/cs/_std/Array.hx" private="1" module="Array">
		<arr><c path="Array"><c path="_Array.ArrayIterator.T"/></c></arr>
		<len><x path="Int"/></len>
		<i><x path="Int"/></i>
		<hasNext public="1" get="inline" set="null" line="475"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="478"><f a=""><c path="_Array.ArrayIterator.T"/></f></next>
		<new public="1" get="inline" set="null" line="469"><f a="a">
	<c path="Array"><c path="_Array.ArrayIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
		</meta>
	</class>
	<abstract path="Class" params="T" file="/home/vsts/work/1/s/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="cs.system.ValueType" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.ValueType" extern="1">
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ValueType"</e></m>
		</meta>
	</class>
	<class path="cs.system.IComparable_1" params="T0" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.IComparable_1" extern="1" interface="1">
		<CompareTo public="1" set="method">
			<f a="other">
				<c path="cs.system.IComparable_1.T0"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CompareTo>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IComparable`1"</e></m>
		</meta>
	</class>
	<class path="cs.system.IEquatable_1" params="T0" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.IEquatable_1" extern="1" interface="1"><meta>
	<m n=":nativeGen"/>
	<m n=":abstract"/>
	<m n=":libType"/>
	<m n=":csNative"/>
	<m n=":native"><e>"System.IEquatable`1"</e></m>
</meta></class>
	<class path="cs.system.IComparable" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.IComparable" extern="1" interface="1">
		<CompareTo public="1" set="method">
			<f a="obj">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CompareTo>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IComparable"</e></m>
		</meta>
	</class>
	<class path="cs.system.IConvertible" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.IConvertible" extern="1" interface="1">
		<GetTypeCode public="1" set="method">
			<f a=""><e path="cs.system.TypeCode"/></f>
			<meta><m n=":overload"/></meta>
		</GetTypeCode>
		<ToBoolean public="1" set="method">
			<f a="provider">
				<c path="cs.system.IFormatProvider"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToBoolean>
		<ToByte public="1" set="method">
			<f a="provider">
				<c path="cs.system.IFormatProvider"/>
				<t path="cs.types.UInt8"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToByte>
		<ToChar public="1" set="method">
			<f a="provider">
				<c path="cs.system.IFormatProvider"/>
				<t path="cs.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToChar>
		<ToDateTime public="1" set="method">
			<f a="provider">
				<c path="cs.system.IFormatProvider"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToDateTime>
		<ToDecimal public="1" set="method">
			<f a="provider">
				<c path="cs.system.IFormatProvider"/>
				<c path="cs.system.Decimal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToDecimal>
		<ToDouble public="1" set="method">
			<f a="provider">
				<c path="cs.system.IFormatProvider"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToDouble>
		<ToInt16 public="1" set="method">
			<f a="provider">
				<c path="cs.system.IFormatProvider"/>
				<t path="cs.types.Int16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToInt16>
		<ToInt32 public="1" set="method">
			<f a="provider">
				<c path="cs.system.IFormatProvider"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToInt32>
		<ToInt64 public="1" set="method">
			<f a="provider">
				<c path="cs.system.IFormatProvider"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToInt64>
		<ToSByte public="1" set="method">
			<f a="provider">
				<c path="cs.system.IFormatProvider"/>
				<t path="cs.types.Int8"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToSByte>
		<ToSingle public="1" set="method">
			<f a="provider">
				<c path="cs.system.IFormatProvider"/>
				<x path="Single"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToSingle>
		<ToString public="1" set="method">
			<f a="provider">
				<c path="cs.system.IFormatProvider"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<ToType public="1" set="method">
			<f a="conversionType:provider">
				<c path="cs.system.Type"/>
				<c path="cs.system.IFormatProvider"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToType>
		<ToUInt16 public="1" set="method">
			<f a="provider">
				<c path="cs.system.IFormatProvider"/>
				<t path="cs.types.UInt16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToUInt16>
		<ToUInt32 public="1" set="method">
			<f a="provider">
				<c path="cs.system.IFormatProvider"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToUInt32>
		<ToUInt64 public="1" set="method">
			<f a="provider">
				<c path="cs.system.IFormatProvider"/>
				<t path="cs.types.UInt64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToUInt64>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IConvertible"</e></m>
		</meta>
	</class>
	<class path="cs.system.IFormattable" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.IFormattable" extern="1" interface="1">
		<ToString public="1" set="method">
			<f a="format:formatProvider">
				<c path="String"/>
				<c path="cs.system.IFormatProvider"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IFormattable"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.serialization.ISerializable" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.serialization.ISerializable" extern="1" interface="1">
		<GetObjectData public="1" set="method">
			<f a="info:context">
				<c path="cs.system.runtime.serialization.SerializationInfo"/>
				<c path="cs.system.runtime.serialization.StreamingContext"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetObjectData>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Serialization.ISerializable"</e></m>
		</meta>
	</class>
	<class path="cs.system.DateTime" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.DateTime" extern="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.IComparable_1"><c path="cs.system.DateTime"/></implements>
		<implements path="cs.system.IEquatable_1"><c path="cs.system.DateTime"/></implements>
		<implements path="cs.system.IComparable"/>
		<implements path="cs.system.IConvertible"/>
		<implements path="cs.system.IFormattable"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<UtcNow public="1" get="accessor" set="null" static="1"><c path="cs.system.DateTime"/></UtcNow>
		<Today public="1" get="accessor" set="null" static="1"><c path="cs.system.DateTime"/></Today>
		<Now public="1" get="accessor" set="null" static="1"><c path="cs.system.DateTime"/></Now>
		<MinValue public="1" set="null" static="1">
			<c path="cs.system.DateTime"/>
			<meta><m n=":readOnly"/></meta>
		</MinValue>
		<MaxValue public="1" set="null" static="1">
			<c path="cs.system.DateTime"/>
			<meta><m n=":readOnly"/></meta>
		</MaxValue>
		<get_Now final="1" set="method" static="1">
			<f a=""><c path="cs.system.DateTime"/></f>
			<meta><m n=":overload"/></meta>
		</get_Now>
		<get_Today final="1" set="method" static="1">
			<f a=""><c path="cs.system.DateTime"/></f>
			<meta><m n=":overload"/></meta>
		</get_Today>
		<get_UtcNow final="1" set="method" static="1">
			<f a=""><c path="cs.system.DateTime"/></f>
			<meta><m n=":overload"/></meta>
		</get_UtcNow>
		<Compare final="1" public="1" set="method" static="1">
			<f a="t1:t2">
				<c path="cs.system.DateTime"/>
				<c path="cs.system.DateTime"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Compare>
		<FromBinary final="1" public="1" set="method" static="1">
			<f a="dateData">
				<x path="haxe.Int64"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</FromBinary>
		<SpecifyKind final="1" public="1" set="method" static="1">
			<f a="value:kind">
				<c path="cs.system.DateTime"/>
				<e path="cs.system.DateTimeKind"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SpecifyKind>
		<DaysInMonth final="1" public="1" set="method" static="1">
			<f a="year:month">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DaysInMonth>
		<_Equals final="1" public="1" set="method" static="1">
			<f a="t1:t2">
				<c path="cs.system.DateTime"/>
				<c path="cs.system.DateTime"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":native"><e>"Equals"</e></m>
				<m n=":overload"/>
			</meta>
		</_Equals>
		<FromFileTime final="1" public="1" set="method" static="1">
			<f a="fileTime">
				<x path="haxe.Int64"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</FromFileTime>
		<FromFileTimeUtc final="1" public="1" set="method" static="1">
			<f a="fileTime">
				<x path="haxe.Int64"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</FromFileTimeUtc>
		<FromOADate final="1" public="1" set="method" static="1">
			<f a="d">
				<x path="Float"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</FromOADate>
		<IsLeapYear final="1" public="1" set="method" static="1">
			<f a="year">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsLeapYear>
		<Parse final="1" public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Parse final="1" public="1" set="method">
					<f a="s:provider:styles">
						<c path="String"/>
						<c path="cs.system.IFormatProvider"/>
						<e path="cs.system.globalization.DateTimeStyles"/>
						<c path="cs.system.DateTime"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Parse>
				<Parse final="1" public="1" set="method">
					<f a="s:provider">
						<c path="String"/>
						<c path="cs.system.IFormatProvider"/>
						<c path="cs.system.DateTime"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Parse>
			</overloads>
		</Parse>
		<ParseExact final="1" public="1" set="method" static="1">
			<f a="s:format:provider">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.system.IFormatProvider"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<ParseExact final="1" public="1" set="method">
					<f a="s:formats:provider:style">
						<c path="String"/>
						<c path="cs.NativeArray"><c path="String"/></c>
						<c path="cs.system.IFormatProvider"/>
						<e path="cs.system.globalization.DateTimeStyles"/>
						<c path="cs.system.DateTime"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ParseExact>
				<ParseExact final="1" public="1" set="method">
					<f a="s:format:provider:style">
						<c path="String"/>
						<c path="String"/>
						<c path="cs.system.IFormatProvider"/>
						<e path="cs.system.globalization.DateTimeStyles"/>
						<c path="cs.system.DateTime"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ParseExact>
			</overloads>
		</ParseExact>
		<TryParse final="1" public="1" set="method" static="1">
			<f a="s:result">
				<c path="String"/>
				<t path="cs.Out"><c path="cs.system.DateTime"/></t>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><TryParse final="1" public="1" set="method">
	<f a="s:provider:styles:result">
		<c path="String"/>
		<c path="cs.system.IFormatProvider"/>
		<e path="cs.system.globalization.DateTimeStyles"/>
		<t path="cs.Out"><c path="cs.system.DateTime"/></t>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</TryParse></overloads>
		</TryParse>
		<TryParseExact final="1" public="1" set="method" static="1">
			<f a="s:format:provider:style:result">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.system.IFormatProvider"/>
				<e path="cs.system.globalization.DateTimeStyles"/>
				<t path="cs.Out"><c path="cs.system.DateTime"/></t>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><TryParseExact final="1" public="1" set="method">
	<f a="s:formats:provider:style:result">
		<c path="String"/>
		<c path="cs.NativeArray"><c path="String"/></c>
		<c path="cs.system.IFormatProvider"/>
		<e path="cs.system.globalization.DateTimeStyles"/>
		<t path="cs.Out"><c path="cs.system.DateTime"/></t>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</TryParseExact></overloads>
		</TryParseExact>
		<op_Addition final="1" public="1" set="method" static="1">
			<f a="d:t">
				<c path="cs.system.DateTime"/>
				<c path="cs.system.TimeSpan"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Addition>
		<op_Equality final="1" public="1" set="method" static="1">
			<f a="d1:d2">
				<c path="cs.system.DateTime"/>
				<c path="cs.system.DateTime"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Equality>
		<op_GreaterThan final="1" public="1" set="method" static="1">
			<f a="t1:t2">
				<c path="cs.system.DateTime"/>
				<c path="cs.system.DateTime"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_GreaterThan>
		<op_GreaterThanOrEqual final="1" public="1" set="method" static="1">
			<f a="t1:t2">
				<c path="cs.system.DateTime"/>
				<c path="cs.system.DateTime"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_GreaterThanOrEqual>
		<op_Inequality final="1" public="1" set="method" static="1">
			<f a="d1:d2">
				<c path="cs.system.DateTime"/>
				<c path="cs.system.DateTime"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Inequality>
		<op_LessThan final="1" public="1" set="method" static="1">
			<f a="t1:t2">
				<c path="cs.system.DateTime"/>
				<c path="cs.system.DateTime"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_LessThan>
		<op_LessThanOrEqual final="1" public="1" set="method" static="1">
			<f a="t1:t2">
				<c path="cs.system.DateTime"/>
				<c path="cs.system.DateTime"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_LessThanOrEqual>
		<op_Subtraction final="1" public="1" set="method" static="1">
			<f a="d1:d2">
				<c path="cs.system.DateTime"/>
				<c path="cs.system.DateTime"/>
				<c path="cs.system.TimeSpan"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><op_Subtraction final="1" public="1" set="method">
	<f a="d:t">
		<c path="cs.system.DateTime"/>
		<c path="cs.system.TimeSpan"/>
		<c path="cs.system.DateTime"/>
	</f>
	<meta><m n=":overload"/></meta>
</op_Subtraction></overloads>
		</op_Subtraction>
		<Kind public="1" get="accessor" set="null"><e path="cs.system.DateTimeKind"/></Kind>
		<Year public="1" get="accessor" set="null"><x path="Int"/></Year>
		<Ticks public="1" get="accessor" set="null"><x path="haxe.Int64"/></Ticks>
		<Millisecond public="1" get="accessor" set="null"><x path="Int"/></Millisecond>
		<Second public="1" get="accessor" set="null"><x path="Int"/></Second>
		<Minute public="1" get="accessor" set="null"><x path="Int"/></Minute>
		<Hour public="1" get="accessor" set="null"><x path="Int"/></Hour>
		<TimeOfDay public="1" get="accessor" set="null"><c path="cs.system.TimeSpan"/></TimeOfDay>
		<DayOfYear public="1" get="accessor" set="null"><x path="Int"/></DayOfYear>
		<DayOfWeek public="1" get="accessor" set="null"><e path="cs.system.DayOfWeek"/></DayOfWeek>
		<Day public="1" get="accessor" set="null"><x path="Int"/></Day>
		<Month public="1" get="accessor" set="null"><x path="Int"/></Month>
		<Date public="1" get="accessor" set="null"><c path="cs.system.DateTime"/></Date>
		<get_Date final="1" set="method">
			<f a=""><c path="cs.system.DateTime"/></f>
			<meta><m n=":overload"/></meta>
		</get_Date>
		<get_Month final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Month>
		<get_Day final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Day>
		<get_DayOfWeek final="1" set="method">
			<f a=""><e path="cs.system.DayOfWeek"/></f>
			<meta><m n=":overload"/></meta>
		</get_DayOfWeek>
		<get_DayOfYear final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_DayOfYear>
		<get_TimeOfDay final="1" set="method">
			<f a=""><c path="cs.system.TimeSpan"/></f>
			<meta><m n=":overload"/></meta>
		</get_TimeOfDay>
		<get_Hour final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Hour>
		<get_Minute final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Minute>
		<get_Second final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Second>
		<get_Millisecond final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Millisecond>
		<get_Ticks final="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</get_Ticks>
		<get_Year final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Year>
		<get_Kind final="1" set="method">
			<f a=""><e path="cs.system.DateTimeKind"/></f>
			<meta><m n=":overload"/></meta>
		</get_Kind>
		<Add final="1" public="1" set="method">
			<f a="value">
				<c path="cs.system.TimeSpan"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Add>
		<AddDays final="1" public="1" set="method">
			<f a="value">
				<x path="Float"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddDays>
		<AddTicks final="1" public="1" set="method">
			<f a="value">
				<x path="haxe.Int64"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddTicks>
		<AddHours final="1" public="1" set="method">
			<f a="value">
				<x path="Float"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddHours>
		<AddMilliseconds final="1" public="1" set="method">
			<f a="value">
				<x path="Float"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddMilliseconds>
		<AddMinutes final="1" public="1" set="method">
			<f a="value">
				<x path="Float"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddMinutes>
		<AddMonths final="1" public="1" set="method">
			<f a="months">
				<x path="Int"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddMonths>
		<AddSeconds final="1" public="1" set="method">
			<f a="value">
				<x path="Float"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddSeconds>
		<AddYears final="1" public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddYears>
		<CompareTo final="1" public="1" set="method">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><CompareTo final="1" public="1" set="method">
	<f a="value">
		<c path="cs.system.DateTime"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</CompareTo></overloads>
		</CompareTo>
		<IsDaylightSavingTime final="1" public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</IsDaylightSavingTime>
		<ToBinary final="1" public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</ToBinary>
		<GetDateTimeFormats final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetDateTimeFormats final="1" public="1" set="method">
					<f a="format:provider">
						<t path="cs.types.Char16"/>
						<c path="cs.system.IFormatProvider"/>
						<c path="cs.NativeArray"><c path="String"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetDateTimeFormats>
				<GetDateTimeFormats final="1" public="1" set="method">
					<f a="provider">
						<c path="cs.system.IFormatProvider"/>
						<c path="cs.NativeArray"><c path="String"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetDateTimeFormats>
				<GetDateTimeFormats final="1" public="1" set="method">
					<f a="format">
						<t path="cs.types.Char16"/>
						<c path="cs.NativeArray"><c path="String"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetDateTimeFormats>
			</overloads>
		</GetDateTimeFormats>
		<GetTypeCode final="1" public="1" set="method">
			<f a=""><e path="cs.system.TypeCode"/></f>
			<meta><m n=":overload"/></meta>
		</GetTypeCode>
		<Subtract final="1" public="1" set="method">
			<f a="value">
				<c path="cs.system.DateTime"/>
				<c path="cs.system.TimeSpan"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><Subtract final="1" public="1" set="method">
	<f a="value">
		<c path="cs.system.TimeSpan"/>
		<c path="cs.system.DateTime"/>
	</f>
	<meta><m n=":overload"/></meta>
</Subtract></overloads>
		</Subtract>
		<ToFileTime final="1" public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</ToFileTime>
		<ToFileTimeUtc final="1" public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</ToFileTimeUtc>
		<ToLongDateString final="1" public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToLongDateString>
		<ToLongTimeString final="1" public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToLongTimeString>
		<ToOADate final="1" public="1" set="method">
			<f a=""><x path="Float"/></f>
			<meta><m n=":overload"/></meta>
		</ToOADate>
		<ToShortDateString final="1" public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToShortDateString>
		<ToShortTimeString final="1" public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToShortTimeString>
		<ToString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<ToString final="1" public="1" set="method">
					<f a="format:provider">
						<c path="String"/>
						<c path="cs.system.IFormatProvider"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ToString>
				<ToString final="1" public="1" set="method">
					<f a="format">
						<c path="String"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ToString>
				<ToString final="1" public="1" set="method">
					<f a="provider">
						<c path="cs.system.IFormatProvider"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ToString>
			</overloads>
		</ToString>
		<ToLocalTime final="1" public="1" set="method">
			<f a=""><c path="cs.system.DateTime"/></f>
			<meta><m n=":overload"/></meta>
		</ToLocalTime>
		<ToUniversalTime final="1" public="1" set="method">
			<f a=""><c path="cs.system.DateTime"/></f>
			<meta><m n=":overload"/></meta>
		</ToUniversalTime>
		<new final="1" public="1" set="method">
			<f a="ticks">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="year:month:day:hour:minute:second:millisecond:calendar:kind">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="cs.system.globalization.Calendar"/>
						<e path="cs.system.DateTimeKind"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="year:month:day:hour:minute:second:millisecond:kind">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<e path="cs.system.DateTimeKind"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="year:month:day:hour:minute:second:kind">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<e path="cs.system.DateTimeKind"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="ticks:kind">
						<x path="haxe.Int64"/>
						<e path="cs.system.DateTimeKind"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="year:month:day:hour:minute:second:millisecond:calendar">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="cs.system.globalization.Calendar"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="year:month:day:hour:minute:second:calendar">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="cs.system.globalization.Calendar"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="year:month:day:calendar">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="cs.system.globalization.Calendar"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="year:month:day:hour:minute:second:millisecond">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="year:month:day:hour:minute:second">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="year:month:day">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.DateTime"</e></m>
		</meta>
	</class>
	<class path="Date" params="" file="/home/vsts/work/1/s/std/cs/_std/Date.hx">
		<epochTicks expr="new DateTime(1970, 1, 1).Ticks" line="32" static="1">
			<x path="haxe.Int64"/>
			<meta>
				<m n=":value"><e>new DateTime(1970, 1, 1).Ticks</e></m>
				<m n=":readOnly"/>
			</meta>
		</epochTicks>
		<now public="1" get="inline" set="null" line="128" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" get="inline" set="null" line="132" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the timestamp (in milliseconds) `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" line="141" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the formatted string `s`. The following formats are
		accepted by the function:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats expressed a date in local time. The third is a time
		relative to the UTC epoch.</haxe_doc>
		</fromString>
		<fromNative get="inline" set="null" line="159" static="1"><f a="d">
	<c path="cs.system.DateTime"/>
	<c path="Date"/>
</f></fromNative>
		<date><c path="cs.system.DateTime"/></date>
		<dateUTC><c path="cs.system.DateTime"/></dateUTC>
		<getTime public="1" get="inline" set="null" line="56">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp (in milliseconds) of `this` date.
		On cpp and neko, this function only has a second resolution, so the
		result will always be a multiple of `1000.0`, e.g. `1454698271000.0`.
		To obtain the current timestamp with better precision on cpp and neko,
		see the `Sys.time` API.

		For measuring time differences with millisecond accuracy on
		all platforms, see `haxe.Timer.stamp`.</haxe_doc>
		</getTime>
		<getHours public="1" get="inline" set="null" line="64">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in the local timezone.</haxe_doc>
		</getHours>
		<getMinutes public="1" get="inline" set="null" line="68">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getMinutes>
		<getSeconds public="1" get="inline" set="null" line="72">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getSeconds>
		<getFullYear public="1" get="inline" set="null" line="76">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in the local timezone.</haxe_doc>
		</getFullYear>
		<getMonth public="1" get="inline" set="null" line="80">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in the local timezone.
		Note that the month number is zero-based.</haxe_doc>
		</getMonth>
		<getDate public="1" get="inline" set="null" line="84">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in the local timezone.</haxe_doc>
		</getDate>
		<getDay public="1" get="inline" set="null" line="88">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in the local timezone.</haxe_doc>
		</getDay>
		<getUTCHours public="1" get="inline" set="null" line="92">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in UTC.</haxe_doc>
		</getUTCHours>
		<getUTCMinutes public="1" get="inline" set="null" line="96">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCMinutes>
		<getUTCSeconds public="1" get="inline" set="null" line="100">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCSeconds>
		<getUTCFullYear public="1" get="inline" set="null" line="104">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in UTC.</haxe_doc>
		</getUTCFullYear>
		<getUTCMonth public="1" get="inline" set="null" line="108">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in UTC.
		Note that the month number is zero-based.</haxe_doc>
		</getUTCMonth>
		<getUTCDate public="1" get="inline" set="null" line="112">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in UTC.</haxe_doc>
		</getUTCDate>
		<getUTCDay public="1" get="inline" set="null" line="116">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in UTC.</haxe_doc>
		</getUTCDay>
		<getTimezoneOffset public="1" get="inline" set="null" line="120">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the time zone difference of `this` Date in the current locale
		to UTC, in minutes.

		Assuming the function is executed on a machine in a UTC+2 timezone,
		`Date.now().getTimezoneOffset()` will return `-120`.</haxe_doc>
		</getTimezoneOffset>
		<toString public="1" set="method" line="124">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date in the local timezone
		using the standard format `YYYY-MM-DD HH:MM:SS`. See `DateTools.format` for
		other formatting rules.</haxe_doc>
		</toString>
		<new public="1" set="method" line="37">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11 (note that this is zero-based)
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
			<overloads><new set="method" line="46">
	<f a="native">
		<c path="cs.system.DateTime"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There are some extra functions available in the `DateTools` class.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970 UTC.

	## Supported range

	Due to platform limitations, only dates in the range 1970 through 2038 are
	supported consistently. Some targets may support dates outside this range,
	depending on the OS at runtime. The `Date.fromTime` method will not work with
	timestamps outside the range on any target.</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="DateTools" params="" file="/home/vsts/work/1/s/std/DateTools.hx">
		<DAY_SHORT_NAMES expr="[&quot;Sun&quot;, &quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;]" line="35" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]</e></m></meta>
		</DAY_SHORT_NAMES>
		<DAY_NAMES expr="[&quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;]" line="36" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]</e></m></meta>
		</DAY_NAMES>
		<MONTH_SHORT_NAMES expr="[&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;]" line="37" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]</e></m></meta>
		</MONTH_SHORT_NAMES>
		<MONTH_NAMES expr="[&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;]" line="40" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]</e></m></meta>
		</MONTH_NAMES>
		<__format_get set="method" line="44" static="1">
			<f a="d:e">
				<c path="Date"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__format_get>
		<__format set="method" line="110" static="1"><f a="d:f">
	<c path="Date"/>
	<c path="String"/>
	<c path="String"/>
</f></__format>
		<format public="1" set="method" line="149" static="1">
			<f a="d:f">
				<c path="Date"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Format the date `d` according to the format `f`. The format is
		compatible with the `strftime` standard format, except that there is no
		support in Flash and JS for day and months names (due to lack of proper
		internationalization API). On Haxe/Neko/Windows, some formats are not
		supported.

		```haxe
		var t = DateTools.format(Date.now(), "%Y-%m-%d_%H:%M:%S");
		// 2016-07-08_14:44:05

		var t = DateTools.format(Date.now(), "%r");
		// 02:44:05 PM

		var t = DateTools.format(Date.now(), "%T");
		// 14:44:05

		var t = DateTools.format(Date.now(), "%F");
		// 2016-07-08
		```</haxe_doc>
		</format>
		<delta public="1" get="inline" set="null" line="165" static="1">
			<f a="d:t">
				<c path="Date"/>
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns the result of adding timestamp `t` to Date `d`.

		This is a convenience function for calling
		`Date.fromTime(d.getTime() + t)`.</haxe_doc>
		</delta>
		<DAYS_OF_MONTH expr="[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]" line="169" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]</e></m></meta>
		</DAYS_OF_MONTH>
		<getMonthDays public="1" set="method" line="176" static="1">
			<f a="d">
				<c path="Date"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of days in the month of Date `d`.

		This method handles leap years.</haxe_doc>
		</getMonthDays>
		<seconds public="1" get="inline" set="null" line="190" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of seconds to a timestamp.</haxe_doc>
		</seconds>
		<minutes public="1" get="inline" set="null" line="197" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of minutes to a timestamp.</haxe_doc>
		</minutes>
		<hours public="1" get="inline" set="null" line="204" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of hours to a timestamp.</haxe_doc>
		</hours>
		<days public="1" get="inline" set="null" line="211" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of days to a timestamp.</haxe_doc>
		</days>
		<parse public="1" set="method" line="218" static="1">
			<f a="t">
				<x path="Float"/>
				<a>
					<seconds><x path="Int"/></seconds>
					<ms><x path="Float"/></ms>
					<minutes><x path="Int"/></minutes>
					<hours><x path="Int"/></hours>
					<days><x path="Int"/></days>
				</a>
			</f>
			<haxe_doc>Separate a date-time into several components</haxe_doc>
		</parse>
		<make public="1" set="method" line="234" static="1">
			<f a="o">
				<a>
					<seconds><x path="Int"/></seconds>
					<ms><x path="Float"/></ms>
					<minutes><x path="Int"/></minutes>
					<hours><x path="Int"/></hours>
					<days><x path="Int"/></days>
				</a>
				<x path="Float"/>
			</f>
			<haxe_doc>Build a date-time from several components</haxe_doc>
		</make>
		<haxe_doc>The DateTools class contains some extra functionalities for handling `Date`
	instances and timestamps.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="EReg" params="" file="/home/vsts/work/1/s/std/cs/_std/EReg.hx">
		<escape public="1" get="inline" set="null" line="132" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Escape the string `s` for use as a part of regular expression.

		If `s` is null, the result is unspecified.</haxe_doc>
		</escape>
		<regex><c path="cs.system.text.regularexpressions.Regex"/></regex>
		<m><c path="cs.system.text.regularexpressions.Match"/></m>
		<isGlobal><x path="Bool"/></isGlobal>
		<cur><c path="String"/></cur>
		<match public="1" set="method" line="55">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `this` regular expression matches String `s`.

		This method modifies the internal state.

		If `s` is `null`, the result is unspecified.</haxe_doc>
		</match>
		<matched public="1" set="method" line="61">
			<f a="n">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the matched sub-group `n` of `this` EReg.

		This method should only be called after `this.match` or
		`this.matchSub`, and then operates on the String of that operation.

		The index `n` corresponds to the n-th set of parentheses in the pattern
		of `this` EReg. If no such sub-group exists, the result is unspecified.

		If `n` equals 0, the whole matched substring is returned.</haxe_doc>
		</matched>
		<matchedLeft public="1" set="method" line="69">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the part to the left of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the left of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedLeft>
		<matchedRight public="1" set="method" line="73">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the part to the right of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the right of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedRight>
		<matchedPos public="1" set="method" line="77">
			<f a=""><a>
	<pos><x path="Int"/></pos>
	<len><x path="Int"/></len>
</a></f>
			<haxe_doc>Returns the position and length of the last matched substring, within
		the String which was last used as argument to `this.match` or
		`this.matchSub`.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, the position and
		length of the leftmost substring is returned.</haxe_doc>
		</matchedPos>
		<matchSub public="1" set="method" line="81">
			<f a="s:pos:?len" v="::-1">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
			<haxe_doc>Tells if `this` regular expression matches a substring of String `s`.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.match(s.substr(pos,len))` can be used instead.

		This method modifies the internal state.

		If `s` is null, the result is unspecified.</haxe_doc>
		</matchSub>
		<split public="1" set="method" line="87">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Splits String `s` at all substrings `this` EReg matches.

		If a match is found at the start of `s`, the result contains a leading
		empty String "" entry.

		If a match is found at the end of `s`, the result contains a trailing
		empty String "" entry.

		If two matching substrings appear next to each other, the result
		contains the empty String `""` between them.

		By default, this method splits `s` into two parts at the first matched
		substring. If the global g modifier is in place, `s` is split at each
		matched substring.

		If `s` is null, the result is unspecified.</haxe_doc>
		</split>
		<start get="inline" set="null" line="96"><f a="group">
	<x path="Int"/>
	<x path="Int"/>
</f></start>
		<len get="inline" set="null" line="100"><f a="group">
	<x path="Int"/>
	<x path="Int"/>
</f></len>
		<replace public="1" set="method" line="104">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replaces the first substring of `s` which `this` EReg matches with `by`.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `by` contains `$1` to `$9`, the digit corresponds to number of a
		matched sub-group and its value is used instead. If no such sub-group
		exists, the replacement is unspecified. The string `$$` becomes `$`.

		If `s` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<map public="1" set="method" line="108">
			<f a="s:f">
				<c path="String"/>
				<f a="">
					<c path="EReg"/>
					<c path="String"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>Calls the function `f` for the substring of `s` which `this` EReg matches
		and replaces that substring with the result of `f` call.

		The `f` function takes `this` EReg object as its first argument and should
		return a replacement string for the substring matched.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `s` or `f` are null, the result is unspecified.</haxe_doc>
		</map>
		<new public="1" set="method" line="34">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates a new regular expression with pattern `r` and modifiers `opt`.

		This is equivalent to the shorthand syntax `~/r/opt`

		If `r` or `opt` are null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The EReg class represents regular expressions.

	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.

	EReg instances can be created by calling the constructor, or with the
	special syntax `~/pattern/modifier`

	EReg instances maintain an internal state, which is affected by several of
	its methods.

	A detailed explanation of the supported operations is available at
	<https://haxe.org/manual/std-regex.html>]]></haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Enum" params="T" file="/home/vsts/work/1/s/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/home/vsts/work/1/s/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":coreType"/>
		</meta>
		<impl><class path="_EnumValue.EnumValue_Impl_" params="" file="/home/vsts/work/1/s/std/EnumValue.hx" private="1" module="EnumValue">
	<match public="1" set="method" line="58" static="1">
		<f a="this:pattern">
			<x path="EnumValue"/>
			<d/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Matches enum instance `e` against pattern `pattern`, returning `true` if
		matching succeeded and `false` otherwise.

		Example usage:

		```haxe
		if (e.match(pattern)) {
			// codeIfTrue
		} else {
			// codeIfFalse
		}
		```

		This is equivalent to the following code:

		```haxe
		switch (e) {
			case pattern:
				// codeIfTrue
			case _:
				// codeIfFalse
		}
		```

		This method is implemented in the compiler. This definition exists only
		for documentation.</haxe_doc>
	</match>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="_EnumValue.EnumValue_Impl_" params="" file="/home/vsts/work/1/s/std/EnumValue.hx" private="1" module="EnumValue">
		<match public="1" set="method" line="58" static="1">
			<f a="this:pattern">
				<x path="EnumValue"/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Matches enum instance `e` against pattern `pattern`, returning `true` if
		matching succeeded and `false` otherwise.

		Example usage:

		```haxe
		if (e.match(pattern)) {
			// codeIfTrue
		} else {
			// codeIfFalse
		}
		```

		This is equivalent to the following code:

		```haxe
		switch (e) {
			case pattern:
				// codeIfTrue
			case _:
				// codeIfFalse
		}
		```

		This method is implemented in the compiler. This definition exists only
		for documentation.</haxe_doc>
		</match>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="IntIterator" params="" file="/home/vsts/work/1/s/std/IntIterator.hx">
		<min><x path="Int"/></min>
		<max><x path="Int"/></max>
		<hasNext public="1" get="inline" set="null" line="53">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns true if the iterator has other items, false otherwise.</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="62">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Moves to the next item of the iterator.

		If this is called while hasNext() is false, the result is unspecified.</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="45">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Iterates from `min` (inclusive) to `max` (exclusive).

		If `max <= min`, the iterator will not act as a countdown.]]></haxe_doc>
		</new>
		<haxe_doc>IntIterator is used for implementing interval iterations.

	It is usually not used explicitly, but through its special syntax:
	`min...max`

	While it is possible to assign an instance of IntIterator to a variable or
	field, it is worth noting that IntIterator does not reset after being used
	in a for-loop. Subsequent uses of the same instance will then have no
	effect.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="Lambda" params="" file="/home/vsts/work/1/s/std/Lambda.hx">
		<array public="1" params="A" set="method" line="45" static="1">
			<f a="it">
				<t path="Iterable"><c path="array.A"/></t>
				<c path="Array"><c path="array.A"/></c>
			</f>
			<haxe_doc>Creates an Array from Iterable `it`.

		If `it` is an Array, this function returns a copy of it.</haxe_doc>
		</array>
		<list public="1" params="A" set="method" line="57" static="1">
			<f a="it">
				<t path="Iterable"><c path="list.A"/></t>
				<c path="haxe.ds.List"><c path="list.A"/></c>
			</f>
			<haxe_doc>Creates a List form Iterable `it`.

		If `it` is a List, this function returns a copy of it.</haxe_doc>
		</list>
		<map public="1" params="A:B" get="inline" set="null" line="69" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="map.A"/></t>
				<f a="item">
					<c path="map.A"/>
					<c path="map.B"/>
				</f>
				<c path="Array"><c path="map.B"/></c>
			</f>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `it`.
		The order of elements is preserved.
		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<mapi public="1" params="A:B" get="inline" set="null" line="78" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="mapi.A"/></t>
				<f a="index:item">
					<x path="Int"/>
					<c path="mapi.A"/>
					<c path="mapi.B"/>
				</f>
				<c path="Array"><c path="mapi.B"/></c>
			</f>
			<haxe_doc>Similar to map, but also passes the index of each element to `f`.
		The order of elements is preserved.
		If `f` is null, the result is unspecified.</haxe_doc>
		</mapi>
		<flatten public="1" params="A" get="inline" set="null" line="87" static="1">
			<f a="it">
				<t path="Iterable"><t path="Iterable"><c path="flatten.A"/></t></t>
				<c path="Array"><c path="flatten.A"/></c>
			</f>
			<haxe_doc>Concatenate a list of iterables.
		The order of elements is preserved.</haxe_doc>
		</flatten>
		<flatMap public="1" params="A:B" get="inline" set="null" line="96" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="flatMap.A"/></t>
				<f a="item">
					<c path="flatMap.A"/>
					<t path="Iterable"><c path="flatMap.B"/></t>
				</f>
				<c path="Array"><c path="flatMap.B"/></c>
			</f>
			<haxe_doc>A composition of map and flatten.
		The order of elements is preserved.
		If `f` is null, the result is unspecified.</haxe_doc>
		</flatMap>
		<has public="1" params="A" set="method" line="108" static="1">
			<f a="it:elt">
				<t path="Iterable"><c path="has.A"/></t>
				<c path="has.A"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains `elt`.

		This function returns true as soon as an element is found which is equal
		to `elt` according to the `==` operator.

		If no such element is found, the result is false.</haxe_doc>
		</has>
		<exists public="1" params="A" set="method" line="125" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="exists.A"/></t>
				<f a="item">
					<c path="exists.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains an element for which `f` is true.

		This function returns true as soon as an element is found for which a
		call to `f` returns true.

		If no such element is found, the result is false.

		If `f` is null, the result is unspecified.</haxe_doc>
		</exists>
		<foreach public="1" params="A" set="method" line="144" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="foreach.A"/></t>
				<f a="item">
					<c path="foreach.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is true for all elements of `it`.

		This function returns false as soon as an element is found for which a
		call to `f` returns false.

		If no such element is found, the result is true.

		In particular, this function always returns true if `it` is empty.

		If `f` is null, the result is unspecified.</haxe_doc>
		</foreach>
		<iter public="1" params="A" set="method" line="156" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="iter.A"/></t>
				<f a="item">
					<c path="iter.A"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls `f` on all elements of `it`, in order.

		If `f` is null, the result is unspecified.</haxe_doc>
		</iter>
		<filter public="1" params="A" set="method" line="167" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="filter.A"/></t>
				<f a="item">
					<c path="filter.A"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="filter.A"/></c>
			</f>
			<haxe_doc>Returns a Array containing those elements of `it` for which `f` returned
		true.
		If `it` is empty, the result is the empty Array even if `f` is null.
		Otherwise if `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<fold public="1" params="A:B" set="method" line="183" static="1">
			<f a="it:f:first">
				<t path="Iterable"><c path="fold.A"/></t>
				<f a="item:result">
					<c path="fold.A"/>
					<c path="fold.B"/>
					<c path="fold.B"/>
				</f>
				<c path="fold.B"/>
				<c path="fold.B"/>
			</f>
			<haxe_doc>Functional fold on Iterable `it`, using function `f` with start argument
		`first`.

		If `it` has no elements, the result is `first`.

		Otherwise the first element of `it` is passed to `f` alongside `first`.
		The result of that call is then passed to `f` with the next element of
		`it`, and so on until `it` has no more elements.

		If `it` or `f` are null, the result is unspecified.</haxe_doc>
		</fold>
		<count public="1" params="A" set="method" line="195" static="1">
			<f a="it:?pred">
				<t path="Iterable"><c path="count.A"/></t>
				<f a="item">
					<c path="count.A"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of elements in `it` for which `pred` is true, or the
		total number of elements in `it` if `pred` is null.

		This function traverses all elements.</haxe_doc>
		</count>
		<empty public="1" params="T" set="method" line="210" static="1">
			<f a="it">
				<t path="Iterable"><c path="empty.T"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if Iterable `it` does not contain any element.</haxe_doc>
		</empty>
		<indexOf public="1" params="T" set="method" line="221" static="1">
			<f a="it:v">
				<t path="Iterable"><c path="indexOf.T"/></t>
				<c path="indexOf.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of the first element `v` within Iterable `it`.

		This function uses operator `==` to check for equality.

		If `v` does not exist in `it`, the result is -1.</haxe_doc>
		</indexOf>
		<find public="1" params="T" set="method" line="241" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="find.T"/></t>
				<f a="item">
					<c path="find.T"/>
					<x path="Bool"/>
				</f>
				<x path="Null"><c path="find.T"/></x>
			</f>
			<haxe_doc>Returns the first element of `it` for which `f` is true.

		This function returns as soon as an element is found for which a call to
		`f` returns true.

		If no such element is found, the result is null.

		If `f` is null, the result is unspecified.</haxe_doc>
		</find>
		<concat public="1" params="T" set="method" line="255" static="1">
			<f a="a:b">
				<t path="Iterable"><c path="concat.T"/></t>
				<t path="Iterable"><c path="concat.T"/></t>
				<c path="Array"><c path="concat.T"/></c>
			</f>
			<haxe_doc>Returns a new Array containing all elements of Iterable `a` followed by
		all elements of Iterable `b`.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</concat>
		<haxe_doc>The `Lambda` class is a collection of methods to support functional
	programming. It is ideally used with `using Lambda` and then acts as an
	extension to Iterable types.

	On static platforms, working with the Iterable structure might be slower
	than performing the operations directly on known types, such as Array and
	List.

	If the first argument to any of the methods is null, the result is
	unspecified.

	@see https://haxe.org/manual/std-Lambda.html</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<typedef path="List" params="T" file="/home/vsts/work/1/s/std/List.hx">
		<c path="haxe.ds.List"><c path="List.T"/></c>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="Map" params="K:V" file="/home/vsts/work/1/s/std/Map.hx">
		<x path="haxe.ds.Map">
			<c path="Map.K"/>
			<c path="Map.V"/>
		</x>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="IMap" params="K:V" file="/home/vsts/work/1/s/std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta>
			<m n=":nativeGen"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":deprecated"/>
		</meta>
	</typedef>
	<class path="cs.system.Double" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Double" extern="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.IComparable_1"><x path="Float"/></implements>
		<implements path="cs.system.IEquatable_1"><x path="Float"/></implements>
		<implements path="cs.system.IComparable"/>
		<implements path="cs.system.IConvertible"/>
		<implements path="cs.system.IFormattable"/>
		<PositiveInfinity public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":readOnly"/></meta>
		</PositiveInfinity>
		<NegativeInfinity public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":readOnly"/></meta>
		</NegativeInfinity>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":readOnly"/></meta>
		</NaN>
		<MinValue public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":readOnly"/></meta>
		</MinValue>
		<MaxValue public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":readOnly"/></meta>
		</MaxValue>
		<Epsilon public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":readOnly"/></meta>
		</Epsilon>
		<IsInfinity final="1" public="1" set="method" static="1">
			<f a="d">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsInfinity>
		<IsNaN final="1" public="1" set="method" static="1">
			<f a="d">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsNaN>
		<IsNegativeInfinity final="1" public="1" set="method" static="1">
			<f a="d">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsNegativeInfinity>
		<IsPositiveInfinity final="1" public="1" set="method" static="1">
			<f a="d">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsPositiveInfinity>
		<Parse final="1" public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Parse final="1" public="1" set="method">
					<f a="s:style:provider">
						<c path="String"/>
						<e path="cs.system.globalization.NumberStyles"/>
						<c path="cs.system.IFormatProvider"/>
						<x path="Float"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Parse>
				<Parse final="1" public="1" set="method">
					<f a="s:style">
						<c path="String"/>
						<e path="cs.system.globalization.NumberStyles"/>
						<x path="Float"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Parse>
				<Parse final="1" public="1" set="method">
					<f a="s:provider">
						<c path="String"/>
						<c path="cs.system.IFormatProvider"/>
						<x path="Float"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Parse>
			</overloads>
		</Parse>
		<TryParse final="1" public="1" set="method" static="1">
			<f a="s:style:provider:result">
				<c path="String"/>
				<e path="cs.system.globalization.NumberStyles"/>
				<c path="cs.system.IFormatProvider"/>
				<t path="cs.Out"><x path="Float"/></t>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><TryParse final="1" public="1" set="method">
	<f a="s:result">
		<c path="String"/>
		<t path="cs.Out"><x path="Float"/></t>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</TryParse></overloads>
		</TryParse>
		<CompareTo final="1" public="1" set="method">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><CompareTo final="1" public="1" set="method">
	<f a="value">
		<x path="Float"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</CompareTo></overloads>
		</CompareTo>
		<ToString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<ToString final="1" public="1" set="method">
					<f a="format:provider">
						<c path="String"/>
						<c path="cs.system.IFormatProvider"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ToString>
				<ToString final="1" public="1" set="method">
					<f a="format">
						<c path="String"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ToString>
				<ToString final="1" public="1" set="method">
					<f a="provider">
						<c path="cs.system.IFormatProvider"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ToString>
			</overloads>
		</ToString>
		<GetTypeCode final="1" public="1" set="method">
			<f a=""><e path="cs.system.TypeCode"/></f>
			<meta><m n=":overload"/></meta>
		</GetTypeCode>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Double"</e></m>
		</meta>
	</class>
	<class path="cs.system.Math" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Math" extern="1">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":readOnly"/></meta>
		</PI>
		<E public="1" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":readOnly"/></meta>
		</E>
		<Abs final="1" public="1" set="method" static="1">
			<f a="value">
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Abs final="1" public="1" set="method">
					<f a="value">
						<t path="cs.types.Int16"/>
						<t path="cs.types.Int16"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Abs>
				<Abs final="1" public="1" set="method">
					<f a="value">
						<t path="cs.types.Int8"/>
						<t path="cs.types.Int8"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Abs>
				<Abs final="1" public="1" set="method">
					<f a="value">
						<x path="haxe.Int64"/>
						<x path="haxe.Int64"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Abs>
				<Abs final="1" public="1" set="method">
					<f a="value">
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Abs>
				<Abs final="1" public="1" set="method">
					<f a="value">
						<x path="Single"/>
						<x path="Single"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Abs>
				<Abs final="1" public="1" set="method">
					<f a="value">
						<x path="Float"/>
						<x path="Float"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Abs>
			</overloads>
		</Abs>
		<Ceiling final="1" public="1" set="method" static="1">
			<f a="d">
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><Ceiling final="1" public="1" set="method">
	<f a="a">
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<meta><m n=":overload"/></meta>
</Ceiling></overloads>
		</Ceiling>
		<BigMul final="1" public="1" set="method" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BigMul>
		<DivRem final="1" public="1" set="method" static="1">
			<f a="a:b:result">
				<x path="Int"/>
				<x path="Int"/>
				<t path="cs.Out"><x path="Int"/></t>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><DivRem final="1" public="1" set="method">
	<f a="a:b:result">
		<x path="haxe.Int64"/>
		<x path="haxe.Int64"/>
		<t path="cs.Out"><x path="haxe.Int64"/></t>
		<x path="haxe.Int64"/>
	</f>
	<meta><m n=":overload"/></meta>
</DivRem></overloads>
		</DivRem>
		<Floor final="1" public="1" set="method" static="1">
			<f a="d">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><Floor final="1" public="1" set="method">
	<f a="d">
		<c path="cs.system.Decimal"/>
		<c path="cs.system.Decimal"/>
	</f>
	<meta><m n=":overload"/></meta>
</Floor></overloads>
		</Floor>
		<IEEERemainder final="1" public="1" set="method" static="1">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IEEERemainder>
		<Log final="1" public="1" set="method" static="1">
			<f a="a:newBase">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><Log final="1" public="1" set="method">
	<f a="d">
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<meta><m n=":overload"/></meta>
</Log></overloads>
		</Log>
		<Max final="1" public="1" set="method" static="1">
			<f a="val1:val2">
				<t path="cs.types.UInt8"/>
				<t path="cs.types.UInt8"/>
				<t path="cs.types.UInt8"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Max final="1" public="1" set="method">
					<f a="val1:val2">
						<t path="cs.types.UInt16"/>
						<t path="cs.types.UInt16"/>
						<t path="cs.types.UInt16"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Max>
				<Max final="1" public="1" set="method">
					<f a="val1:val2">
						<t path="cs.types.UInt64"/>
						<t path="cs.types.UInt64"/>
						<t path="cs.types.UInt64"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Max>
				<Max final="1" public="1" set="method">
					<f a="val1:val2">
						<x path="UInt"/>
						<x path="UInt"/>
						<x path="UInt"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Max>
				<Max final="1" public="1" set="method">
					<f a="val1:val2">
						<t path="cs.types.Int16"/>
						<t path="cs.types.Int16"/>
						<t path="cs.types.Int16"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Max>
				<Max final="1" public="1" set="method">
					<f a="val1:val2">
						<t path="cs.types.Int8"/>
						<t path="cs.types.Int8"/>
						<t path="cs.types.Int8"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Max>
				<Max final="1" public="1" set="method">
					<f a="val1:val2">
						<x path="haxe.Int64"/>
						<x path="haxe.Int64"/>
						<x path="haxe.Int64"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Max>
				<Max final="1" public="1" set="method">
					<f a="val1:val2">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Max>
				<Max final="1" public="1" set="method">
					<f a="val1:val2">
						<x path="Single"/>
						<x path="Single"/>
						<x path="Single"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Max>
				<Max final="1" public="1" set="method">
					<f a="val1:val2">
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Max>
				<Max final="1" public="1" set="method">
					<f a="val1:val2">
						<c path="cs.system.Decimal"/>
						<c path="cs.system.Decimal"/>
						<c path="cs.system.Decimal"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Max>
			</overloads>
		</Max>
		<Min final="1" public="1" set="method" static="1">
			<f a="val1:val2">
				<t path="cs.types.UInt8"/>
				<t path="cs.types.UInt8"/>
				<t path="cs.types.UInt8"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Min final="1" public="1" set="method">
					<f a="val1:val2">
						<t path="cs.types.UInt16"/>
						<t path="cs.types.UInt16"/>
						<t path="cs.types.UInt16"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Min>
				<Min final="1" public="1" set="method">
					<f a="val1:val2">
						<t path="cs.types.UInt64"/>
						<t path="cs.types.UInt64"/>
						<t path="cs.types.UInt64"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Min>
				<Min final="1" public="1" set="method">
					<f a="val1:val2">
						<x path="UInt"/>
						<x path="UInt"/>
						<x path="UInt"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Min>
				<Min final="1" public="1" set="method">
					<f a="val1:val2">
						<t path="cs.types.Int16"/>
						<t path="cs.types.Int16"/>
						<t path="cs.types.Int16"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Min>
				<Min final="1" public="1" set="method">
					<f a="val1:val2">
						<t path="cs.types.Int8"/>
						<t path="cs.types.Int8"/>
						<t path="cs.types.Int8"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Min>
				<Min final="1" public="1" set="method">
					<f a="val1:val2">
						<x path="haxe.Int64"/>
						<x path="haxe.Int64"/>
						<x path="haxe.Int64"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Min>
				<Min final="1" public="1" set="method">
					<f a="val1:val2">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Min>
				<Min final="1" public="1" set="method">
					<f a="val1:val2">
						<x path="Single"/>
						<x path="Single"/>
						<x path="Single"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Min>
				<Min final="1" public="1" set="method">
					<f a="val1:val2">
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Min>
				<Min final="1" public="1" set="method">
					<f a="val1:val2">
						<c path="cs.system.Decimal"/>
						<c path="cs.system.Decimal"/>
						<c path="cs.system.Decimal"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Min>
			</overloads>
		</Min>
		<Round final="1" public="1" set="method" static="1">
			<f a="d">
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Round final="1" public="1" set="method">
					<f a="value:digits:mode">
						<x path="Float"/>
						<x path="Int"/>
						<e path="cs.system.MidpointRounding"/>
						<x path="Float"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Round>
				<Round final="1" public="1" set="method">
					<f a="value:mode">
						<x path="Float"/>
						<e path="cs.system.MidpointRounding"/>
						<x path="Float"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Round>
				<Round final="1" public="1" set="method">
					<f a="value:digits">
						<x path="Float"/>
						<x path="Int"/>
						<x path="Float"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Round>
				<Round final="1" public="1" set="method">
					<f a="a">
						<x path="Float"/>
						<x path="Float"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Round>
				<Round final="1" public="1" set="method">
					<f a="d:decimals:mode">
						<c path="cs.system.Decimal"/>
						<x path="Int"/>
						<e path="cs.system.MidpointRounding"/>
						<c path="cs.system.Decimal"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Round>
				<Round final="1" public="1" set="method">
					<f a="d:mode">
						<c path="cs.system.Decimal"/>
						<e path="cs.system.MidpointRounding"/>
						<c path="cs.system.Decimal"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Round>
				<Round final="1" public="1" set="method">
					<f a="d:decimals">
						<c path="cs.system.Decimal"/>
						<x path="Int"/>
						<c path="cs.system.Decimal"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Round>
			</overloads>
		</Round>
		<Truncate final="1" public="1" set="method" static="1">
			<f a="d">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><Truncate final="1" public="1" set="method">
	<f a="d">
		<c path="cs.system.Decimal"/>
		<c path="cs.system.Decimal"/>
	</f>
	<meta><m n=":overload"/></meta>
</Truncate></overloads>
		</Truncate>
		<Sign final="1" public="1" set="method" static="1">
			<f a="value">
				<c path="cs.system.Decimal"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Sign final="1" public="1" set="method">
					<f a="value">
						<t path="cs.types.Int16"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sign>
				<Sign final="1" public="1" set="method">
					<f a="value">
						<t path="cs.types.Int8"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sign>
				<Sign final="1" public="1" set="method">
					<f a="value">
						<x path="haxe.Int64"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sign>
				<Sign final="1" public="1" set="method">
					<f a="value">
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sign>
				<Sign final="1" public="1" set="method">
					<f a="value">
						<x path="Single"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sign>
				<Sign final="1" public="1" set="method">
					<f a="value">
						<x path="Float"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sign>
			</overloads>
		</Sign>
		<Sin final="1" public="1" set="method" static="1">
			<f a="a">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Sin>
		<Cos final="1" public="1" set="method" static="1">
			<f a="d">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Cos>
		<Tan final="1" public="1" set="method" static="1">
			<f a="a">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Tan>
		<Sinh final="1" public="1" set="method" static="1">
			<f a="value">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Sinh>
		<Cosh final="1" public="1" set="method" static="1">
			<f a="value">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Cosh>
		<Tanh final="1" public="1" set="method" static="1">
			<f a="value">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Tanh>
		<Acos final="1" public="1" set="method" static="1">
			<f a="d">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Acos>
		<Asin final="1" public="1" set="method" static="1">
			<f a="d">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Asin>
		<Atan final="1" public="1" set="method" static="1">
			<f a="d">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Atan>
		<Atan2 final="1" public="1" set="method" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Atan2>
		<Exp final="1" public="1" set="method" static="1">
			<f a="d">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Exp>
		<Log10 final="1" public="1" set="method" static="1">
			<f a="d">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Log10>
		<Pow final="1" public="1" set="method" static="1">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Pow>
		<Sqrt final="1" public="1" set="method" static="1">
			<f a="d">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Sqrt>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Math"</e></m>
		</meta>
	</class>
	<class path="cs.system.Random" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Random" extern="1">
		<Sample set="method">
			<f a=""><x path="Float"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</Sample>
		<Next public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Next public="1" set="method">
					<f a="minValue:maxValue">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Next>
				<Next public="1" set="method">
					<f a="maxValue">
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Next>
			</overloads>
		</Next>
		<NextBytes public="1" set="method">
			<f a="buffer">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</NextBytes>
		<NextDouble public="1" set="method">
			<f a=""><x path="Float"/></f>
			<meta><m n=":overload"/></meta>
		</NextDouble>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><new final="1" public="1" set="method">
	<f a="Seed">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Random"</e></m>
		</meta>
	</class>
	<class path="Math" params="" file="/home/vsts/work/1/s/std/cs/_std/Math.hx">
		<rand expr="new cs.system.Random()" line="24" static="1">
			<c path="cs.system.Random"/>
			<meta>
				<m n=":value"><e>new cs.system.Random()</e></m>
				<m n=":readOnly"/>
			</meta>
		</rand>
		<PI public="1" set="null" expr="cs.system.Math.PI" line="27" static="1">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>cs.system.Math.PI</e></m>
				<m n=":readOnly"/>
			</meta>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter,
		specified by the constant, π. `PI` is approximately 3.141592653589793.</haxe_doc>
		</PI>
		<NaN public="1" set="null" expr="cs.system.Double.NaN" line="29" static="1">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>cs.system.Double.NaN</e></m>
				<m n=":readOnly"/>
			</meta>
			<haxe_doc>A special `Float` constant which denotes an invalid number.

		NaN stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: Math.sqrt(-1).

		All further operations with `NaN` as an operand will result in `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.

		In order to test if a value is `NaN`, you should use `Math.isNaN()` function.</haxe_doc>
		</NaN>
		<NEGATIVE_INFINITY public="1" set="null" expr="cs.system.Double.NegativeInfinity" line="31" static="1">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>cs.system.Double.NegativeInfinity</e></m>
				<m n=":readOnly"/>
			</meta>
			<haxe_doc>A special `Float` constant which denotes negative infinity.

		For example, this is the result of -1.0 / 0.0.

		Operations with `NEGATIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" expr="cs.system.Double.PositiveInfinity" line="33" static="1">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>cs.system.Double.PositiveInfinity</e></m>
				<m n=":readOnly"/>
			</meta>
			<haxe_doc>A special `Float` constant which denotes positive infinity.

		For example, this is the result of 1.0 / 0.0.

		Operations with `POSITIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<abs public="1" get="inline" set="null" line="35" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.

		If `v` is positive or 0, the result is unchanged. Otherwise the result
		is -`v`.

		If `v` is `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is
		`POSITIVE_INFINITY`.

		If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</abs>
		<min public="1" get="inline" set="null" line="39" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		If `a` or `b` are `NaN`, the result is `NaN`.
		If `a` or `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.
		If `a` and `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.</haxe_doc>
		</min>
		<max public="1" get="inline" set="null" line="43" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		If `a` or `b` are `NaN`, the result is `NaN`.
		If `a` or `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `a` and `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</max>
		<sin public="1" get="inline" set="null" line="47" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</sin>
		<cos public="1" get="inline" set="null" line="51" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</cos>
		<atan2 public="1" get="inline" set="null" line="55" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent whose tangent is the quotient of
		two specified numbers, in radians.

		If parameter `x` or `y`  is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is `NaN`.</haxe_doc>
		</atan2>
		<tan public="1" get="inline" set="null" line="59" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric tangent of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</tan>
		<exp public="1" get="inline" set="null" line="63" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.

		exp(1.0) is approximately 2.718281828459.

		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `NEGATIVE_INFINITY`, the result is `0.0`.
		If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</exp>
		<log public="1" get="inline" set="null" line="67" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.

		This is the mathematical inverse operation of exp,
		i.e. `log(exp(v)) == v` always holds.

		If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result
		is `NaN`.
		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `0.0`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</log>
		<sqrt public="1" get="inline" set="null" line="71" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.

		If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result
		is `NaN`.
		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `0.0`, the result is `0.0`.</haxe_doc>
		</sqrt>
		<fround public="1" get="inline" set="null" line="75" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fround>
		<ffloor public="1" get="inline" set="null" line="79" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></ffloor>
		<fceil public="1" get="inline" set="null" line="83" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fceil>
		<round public="1" set="method" line="87" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value.

		Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</round>
		<floor public="1" get="inline" set="null" line="99" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" get="inline" set="null" line="103" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</ceil>
		<atan public="1" get="inline" set="null" line="107" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</atan>
		<asin public="1" get="inline" set="null" line="111" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</asin>
		<acos public="1" get="inline" set="null" line="115" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc cosine of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</acos>
		<pow public="1" get="inline" set="null" line="119" static="1">
			<f a="v:exp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a specified base `v` raised to the specified power `exp`.</haxe_doc>
		</pow>
		<random public="1" get="inline" set="null" line="123" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to 0.0,
		and less than 1.0.</haxe_doc>
		</random>
		<isFinite public="1" get="inline" set="null" line="127" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is `POSITIVE_INFINITY`, `NEGATIVE_INFINITY` or `NaN`, the result
		is `false`, otherwise the result is `true`.</haxe_doc>
		</isFinite>
		<isNaN public="1" get="inline" set="null" line="131" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is not a valid number.

		If `f` is `NaN`, the result is `true`, otherwise the result is `false`.
		In particular, both `POSITIVE_INFINITY` and `NEGATIVE_INFINITY` are
		not considered `NaN`.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.

	@see https://haxe.org/manual/std-math.html</haxe_doc>
		<meta>
			<m n=":nativeGen"/>
			<m n=":coreApi"/>
			<m n=":nativeGen"/>
		</meta>
	</class>
	<class path="Reflect" params="" file="/home/vsts/work/1/s/std/cs/_std/Reflect.hx">
		<hasField public="1" set="method" line="34" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if structure `o` has a field named `field`.

		This is only guaranteed to work for anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</hasField>
		<field public="1" set="method" line="43" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Returns the value of the field named `field` on object `o`.

		If `o` is not an object or has no field named `field`, the result is
		null.

		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.

		If `field` is null, the result is unspecified.

		(As3) If used on a property field, the getter will be invoked. It is
		not possible to obtain the value directly.</haxe_doc>
		</field>
		<setField public="1" set="method" line="52" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`.

		If `o` has no field named `field`, this function is only guaranteed to
		work for anonymous structures.

		If `o` or `field` are null, the result is unspecified.

		(As3) If used on a property field, the setter will be invoked. It is
		not possible to set the value directly.</haxe_doc>
		</setField>
		<getProperty public="1" set="method" line="60" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the value of the field named `field` on object `o`, taking
		property getter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.field`, but might be slower.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</getProperty>
		<setProperty public="1" set="method" line="71" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`, taking
		property setter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.setField`, but might be slower.

		If `field` is null, the result is unspecified.</haxe_doc>
		</setProperty>
		<callMethod public="1" set="method" line="81" static="1">
			<f a="o:func:args">
				<d/>
				<x path="haxe.Function"/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Call a method `func` with the given arguments `args`.

		The object `o` is ignored in most cases. It serves as the `this`-context in the following
		situations:

		* (neko) Allows switching the context to `o` in all cases.
		* (macro) Same as neko for Haxe 3. No context switching in Haxe 4.
		* (js, lua) Require the `o` argument if `func` does not, but should have a context.
			This can occur by accessing a function field natively, e.g. through `Reflect.field`
			or by using `(object : Dynamic).field`. However, if `func` has a context, `o` is
			ignored like on other targets.</haxe_doc>
		</callMethod>
		<fields public="1" set="method" line="87" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Returns the fields of structure `o`.

		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<instanceFields set="method" line="100" static="1"><f a="c">
	<x path="Class"><d/></x>
	<c path="Array"><c path="String"/></c>
</f></instanceFields>
		<isFunction public="1" get="inline" set="null" line="111" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `f` is a function, false otherwise.

		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" line="115" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares `a` and `b`.

		If `a` is less than `b`, the result is negative. If `b` is less than
		`a`, the result is positive. If `a` and `b` are equal, the result is 0.

		This function is only defined if `a` and `b` are of the same type.

		If that type is a function, the result is unspecified and
		`Reflect.compareMethods` should be used instead.

		For all other types, the result is 0 if `a` and `b` are equal. If they
		are not equal, the result depends on the type and is negative if:

		- Numeric types: a is less than b
		- String: a is lexicographically less than b
		- Other: unspecified

		If `a` and `b` are null, the result is 0. If only one of them is null,
		the result is unspecified.</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" line="120" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":access"><e>cs.internal.Closure</e></m></meta>
			<haxe_doc>Compares the functions `f1` and `f2`.

		If `f1` or `f2` are null, the result is false.
		If `f1` or `f2` are not functions, the result is unspecified.

		Otherwise the result is true if `f1` and the `f2` are physically equal,
		false otherwise.

		If `f1` or `f2` are member method closures, the result is true if they
		are closures of the same method on the same object value, false otherwise.</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" line="134" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Tells if `v` is an object.

		The result is true if `v` is one of the following:

		- class instance
		- structure
		- `Class<T>`
		- `Enum<T>`

		Otherwise, including if `v` is null, the result is false.]]></haxe_doc>
		</isObject>
		<isEnumValue public="1" set="method" line="138" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `v` is an enum value.

		The result is true if `v` is of type EnumValue, i.e. an enum
		constructor.

		Otherwise, including if `v` is null, the result is false.</haxe_doc>
		</isEnumValue>
		<deleteField public="1" set="method" line="142" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Removes the field named `field` from structure `o`.

		This method is only guaranteed to work on anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" line="149" static="1">
			<f a="o">
				<x path="Null"><c path="copy.T"/></x>
				<x path="Null"><c path="copy.T"/></x>
			</f>
			<haxe_doc>Copies the fields of structure `o`.

		This is only guaranteed to work on anonymous structures.

		If `o` is null, the result is `null`.</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" line="159" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
			<overloads><makeVarArgs public="1" set="method"><f a="f">
	<f a="">
		<c path="Array"><d/></c>
		<x path="Void"/>
	</f>
	<d/>
</f></makeVarArgs></overloads>
		</makeVarArgs>
		<haxe_doc>The Reflect API is a way to manipulate values dynamically through an
	abstract interface in an untyped manner. Use with care.

	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="Std" params="" file="/home/vsts/work/1/s/std/cs/_std/Std.hx">
		<is public="1" set="method" line="28" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.

		If `t` is a class or interface with `@:generic` meta, the result is `false`.</haxe_doc>
		</is>
		<string public="1" set="method" line="65" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" set="method" line="74" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="78" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If `x` is null, the result is unspecified.
		If `x` cannot be parsed as integer, the result is `null`.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="143" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a `NaN` value instead of null.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<downcast public="1" params="T:S" get="inline" set="null" line="189" static="1">
			<f a="value:c">
				<c path="downcast.T"/>
				<x path="Class"><c path="downcast.S"/></x>
				<c path="downcast.S"/>
			</f>
			<haxe_doc>Checks if object `value` is an instance of class or interface `c`.

		Compiles only if the type specified by `c` can be assigned to the type
		of `value`.

		This method checks if a downcast is possible. That is, if the runtime
		type of `value` is assignable to the type specified by `c`, `value` is
		returned. Otherwise null is returned.

		This method is not guaranteed to work with core types such as `String`,
		`Array` and `Date`.

		If `value` is null, the result is null. If `c` is null, the result is
		unspecified.</haxe_doc>
		</downcast>
		<instance public="1" params="T:S" get="inline" set="null" line="194" static="1">
			<f a="value:c">
				<c path="instance.T"/>
				<x path="Class"><c path="instance.S"/></x>
				<c path="instance.S"/>
			</f>
			<meta><m n=":deprecated"><e>"Std.instance() is deprecated. Use Std.downcast() instead."</e></m></meta>
		</instance>
		<random public="1" set="method" line="198" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":coreApi"/>
			<m n=":nativeGen"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="/home/vsts/work/1/s/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Float" params="" file="/home/vsts/work/1/s/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":hxGen"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/home/vsts/work/1/s/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":hxGen"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Single" params="" file="/home/vsts/work/1/s/std/StdTypes.hx" module="StdTypes">
		<from><icast><x path="Float"/></icast></from>
		<this><x path="Single"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc>Single-precision IEEE 32bit float (4-byte).</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Null" params="T" file="/home/vsts/work/1/s/std/StdTypes.hx" module="StdTypes">
		<from><icast><c path="Null.T"/></icast></from>
		<this><x path="Null"><c path="Null.T"/></x></this>
		<to><icast><c path="Null.T"/></icast></to>
		<haxe_doc><![CDATA[`Null<T>` is a wrapper that can be used to make the basic types `Int`,
	`Float` and `Bool` nullable on static targets.

	If null safety is enabled, only types wrapped in `Null<T>` are nullable.

	Otherwise, it has no effect on non-basic-types, but it can be useful as a way to document
	that `null` is an acceptable value for a method argument, return value or variable.

	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":forward"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="/home/vsts/work/1/s/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":hxGen"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/home/vsts/work/1/s/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":hxGen"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/home/vsts/work/1/s/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="Iterable" params="T" file="/home/vsts/work/1/s/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="KeyValueIterator" params="K:V" file="/home/vsts/work/1/s/std/StdTypes.hx" module="StdTypes">
		<t path="Iterator"><a>
	<value><c path="KeyValueIterator.V"/></value>
	<key><c path="KeyValueIterator.K"/></key>
</a></t>
		<haxe_doc>A `KeyValueIterator` is an `Iterator` that has a key and a value.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="KeyValueIterable" params="K:V" file="/home/vsts/work/1/s/std/StdTypes.hx" module="StdTypes">
		<a><keyValueIterator set="method"><f a=""><t path="KeyValueIterator">
	<c path="KeyValueIterable.K"/>
	<c path="KeyValueIterable.V"/>
</t></f></keyValueIterator></a>
		<haxe_doc>A `KeyValueIterable` is a data structure which has a `keyValueIterator()`
	method to iterate over key-value-pairs.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<class path="ArrayAccess" params="T" file="/home/vsts/work/1/s/std/StdTypes.hx" module="StdTypes" extern="1" interface="1">
		<haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="String" params="" file="/home/vsts/work/1/s/std/cs/_std/String.hx" extern="1">
		<Compare set="method" static="1">
			<f a="s1:s2">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><Compare set="method">
	<f a="s1:s2:kind">
		<c path="String"/>
		<c path="String"/>
		<e path="cs.system.StringComparison"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</Compare></overloads>
		</Compare>
		<CompareOrdinal set="method" static="1"><f a="s1:s2">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
</f></CompareOrdinal>
		<fromCharCode public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex` (if `startIndex` is posivite
		or 0) or `max(this.length + startIndex, 0)` (if `startIndex` is negative).

		If `startIndex` exceeds `this.length`, -1 is returned.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<IndexOf set="method"><f a="value:startIndex:comparisonType">
	<c path="String"/>
	<x path="Int"/>
	<e path="cs.system.StringComparison"/>
	<x path="Int"/>
</f></IndexOf>
		<Replace set="method"><f a="oldValue:newValue">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></Replace>
		<StartsWith set="method"><f a="value">
	<c path="String"/>
	<x path="Bool"/>
</f></StartsWith>
		<EndsWith set="method"><f a="value">
	<c path="String"/>
	<x path="Bool"/>
</f></EndsWith>
		<TrimStart set="method"><f a=""><c path="String"/></f></TrimStart>
		<TrimEnd set="method"><f a=""><c path="String"/></f></TrimEnd>
		<Trim set="method"><f a=""><c path="String"/></f></Trim>
		<CompareTo set="method"><f a="obj">
	<d/>
	<x path="Int"/>
</f></CompareTo>
		<Substring set="method">
			<f a="startIndex:length">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<overloads><Substring set="method"><f a="startIndex">
	<x path="Int"/>
	<c path="String"/>
</f></Substring></overloads>
		</Substring>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.

	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="StringBuf" params="" file="/home/vsts/work/1/s/std/cs/_std/StringBuf.hx">
		<b><c path="cs.system.text.StringBuilder"/></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` StringBuf in characters.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="35"><f a=""><x path="Int"/></f></get_length>
		<add public="1" params="T" get="inline" set="null" line="39">
			<f a="x">
				<c path="add.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the representation of `x` to `this` StringBuf.

		The exact representation of `x` may vary per platform. To get more
		consistent behavior, this function should be called with
		Std.string(x).

		If `x` is null, the String "null" is appended.</haxe_doc>
		</add>
		<addSub public="1" get="inline" set="null" line="43">
			<f a="s:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a substring of `s` to `this` StringBuf.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.add(s.substr(pos,len))` can be used instead.

		If `s` or `pos` are null, the result is unspecified.

		If `len` is omitted or null, the substring ranges from `pos` to the end
		of `s`.</haxe_doc>
		</addSub>
		<addChar public="1" set="method" line="47">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Appends the character identified by `c` to `this` StringBuf.

		If `c` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</addChar>
		<toString public="1" get="inline" set="null" line="57">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the content of `this` StringBuf as String.

		The buffer is not emptied by this operation.</haxe_doc>
		</toString>
		<new public="1" get="inline" set="null" line="31">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Its cross-platform implementation uses String concatenation internally, but
	StringBuf may be optimized for different targets.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values. However, the internal buffer cannot be modified.</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.SysTools" params="" file="/home/vsts/work/1/s/std/haxe/SysTools.hx">
		<winMetaCharacters final="1" public="1" set="null" expr="[&quot; &quot;.code, &quot;(&quot;.code, &quot;)&quot;.code, &quot;%&quot;.code, &quot;!&quot;.code, &quot;^&quot;.code, &quot;\&quot;&quot;.code, &quot;&lt;&quot;.code, &quot;&gt;&quot;.code, &quot;&amp;&quot;.code, &quot;|&quot;.code, &quot;\n&quot;.code, &quot;\r&quot;.code, &quot;,&quot;.code, &quot;;&quot;.code]" line="9" static="1">
			<x path="haxe.ds.ReadOnlyArray"><x path="Int"/></x>
			<meta><m n=":value"><e><![CDATA[[" ".code, "(".code, ")".code, "%".code, "!".code, "^".code, "\"".code, "<".code, ">".code, "&".code, "|".code, "\n".code, "\r".code, ",".code, ";".code]]]></e></m></meta>
			<haxe_doc>Character codes of the characters that will be escaped by `quoteWinArg(_, true)`.</haxe_doc>
		</winMetaCharacters>
		<quoteUnixArg public="1" set="method" line="18" static="1">
			<f a="argument">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Unix.
		The input will be quoted, or escaped if necessary.</haxe_doc>
		</quoteUnixArg>
		<quoteWinArg public="1" set="method" line="46" static="1">
			<f a="argument:escapeMetaCharacters">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Windows.
		The input will be quoted, or escaped if necessary, such that the output
		will be parsed as a single argument using the rule specified in
		http://msdn.microsoft.com/en-us/library/ms880421

		Examples:
		```haxe
		quoteWinArg("abc") == "abc";
		quoteWinArg("ab c") == '"ab c"';
		```</haxe_doc>
		</quoteWinArg>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="StringTools" params="" file="/home/vsts/work/1/s/std/StringTools.hx">
		<urlEncode public="1" get="inline" set="null" line="42" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Encode an URL by using the standard format.</haxe_doc>
		</urlEncode>
		<urlDecode public="1" get="inline" set="null" line="110" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Decode an URL using the standard format.</haxe_doc>
		</urlDecode>
		<htmlEscape public="1" set="method" line="158" static="1">
			<f a="s:?quotes">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Escapes HTML special characters of the string `s`.

		The following replacements are made:

		- `&` becomes `&amp`;
		- `<` becomes `&lt`;
		- `>` becomes `&gt`;

		If `quotes` is true, the following characters are also replaced:

		- `"` becomes `&quot`;
		- `'` becomes `&#039`;]]></haxe_doc>
		</htmlEscape>
		<htmlUnescape public="1" set="method" line="193" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Unescapes HTML special characters of the string `s`.

		This is the inverse operation to htmlEscape, i.e. the following always
		holds: `htmlUnescape(htmlEscape(s)) == s`

		The replacements follow:

		- `&amp;` becomes `&`
		- `&lt;` becomes `<`
		- `&gt;` becomes `>`
		- `&quot;` becomes `"`
		- `&#039;` becomes `'`]]></haxe_doc>
		</htmlUnescape>
		<contains public="1" get="inline" set="null" line="211" static="1">
			<f a="s:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `s` contains `value` and  `false` otherwise.

		When `value` is `null`, the result is unspecified.</haxe_doc>
		</contains>
		<startsWith public="1" get="inline" set="null" line="222" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if the string `s` starts with the string `start`.

		If `start` is `null`, the result is unspecified.

		If `start` is the empty String `""`, the result is true.</haxe_doc>
		</startsWith>
		<endsWith public="1" get="inline" set="null" line="252" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if the string `s` ends with the string `end`.

		If `end` is `null`, the result is unspecified.

		If `end` is the empty String `""`, the result is true.</haxe_doc>
		</endsWith>
		<isSpace public="1" set="method" line="288" static="1">
			<f a="s:pos">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the character in the string `s` at position `pos` is a space.

		A character is considered to be a space character if its character code
		is 9,10,11,12,13 or 32.

		If `s` is the empty String `""`, or if pos is not a valid position within
		`s`, the result is false.</haxe_doc>
		</isSpace>
		<ltrim public="1" get="inline" set="null" line="306" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Removes leading space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</ltrim>
		<rtrim public="1" get="inline" set="null" line="331" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Removes trailing space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</rtrim>
		<trim public="1" get="inline" set="null" line="353" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Removes leading and trailing space characters of `s`.

		This is a convenience function for `ltrim(rtrim(s))`.</haxe_doc>
		</trim>
		<lpad public="1" set="method" line="375" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Concatenates `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String `""` or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</lpad>
		<rpad public="1" set="method" line="400" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Appends `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String `""` or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</rpad>
		<replace public="1" set="method" line="422" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Replace all occurrences of the String `sub` in the String `s` by the
		String `by`.

		If `sub` is the empty String `""`, `by` is inserted after each character
		of `s` except the last one. If `by` is also the empty String `""`, `s`
		remains unchanged.

		If `sub` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<hex public="1" set="method" line="444" static="1">
			<f a="n:?digits">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `n` into a hexadecimal representation.

		If `digits` is specified, the resulting String is padded with "0" until
		its `length` equals `digits`.</haxe_doc>
		</hex>
		<fastCodeAt public="1" get="inline" set="null" line="486" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the character code at position `index` of String `s`, or an
		end-of-file indicator at if `position` equals `s.length`.

		This method is faster than `String.charCodeAt()` on some platforms, but
		the result is unspecified if `index` is negative or greater than
		`s.length`.

		End of file status can be checked by calling `StringTools.isEof()` with
		the returned value as argument.

		This operation is not guaranteed to work if `s` contains the `\0`
		character.</haxe_doc>
		</fastCodeAt>
		<iterator public="1" get="inline" set="null" line="521" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.iterators.StringIterator"/>
			</f>
			<haxe_doc>Returns an iterator of the char codes.

		Note that char codes may differ across platforms because of different
		internal encoding of strings in different runtimes.
		For the consistent cross-platform UTF8 char codes see `haxe.iterators.StringIteratorUnicode`.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="532" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.iterators.StringKeyValueIterator"/>
			</f>
			<haxe_doc>Returns an iterator of the char indexes and codes.

		Note that char codes may differ across platforms because of different
		internal encoding of strings in different of runtimes.
		For the consistent cross-platform UTF8 char codes see `haxe.iterators.StringKeyValueIteratorUnicode`.</haxe_doc>
		</keyValueIterator>
		<isEof public="1" get="inline" set="null" line="539" static="1">
			<f a="c">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>Tells if `c` represents the end-of-file (EOF) character.</haxe_doc>
		</isEof>
		<quoteUnixArg public="1" set="method" line="560" static="1">
			<f a="argument">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":deprecated"><e>"StringTools.quoteUnixArg() is deprecated. Use haxe.SysTools.quoteUnixArg() instead."</e></m>
			</meta>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Unix.
		The input will be quoted, or escaped if necessary.</haxe_doc>
		</quoteUnixArg>
		<winMetaCharacters public="1" expr="cast haxe.SysTools.winMetaCharacters" line="569" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta>
				<m n=":value"><e>cast haxe.SysTools.winMetaCharacters</e></m>
				<m n=":noCompletion"/>
				<m n=":deprecated"><e>"StringTools.winMetaCharacters is deprecated. Use haxe.SysTools.winMetaCharacters instead."</e></m>
			</meta>
			<haxe_doc>Character codes of the characters that will be escaped by `quoteWinArg(_, true)`.</haxe_doc>
		</winMetaCharacters>
		<quoteWinArg public="1" set="method" line="586" static="1">
			<f a="argument:escapeMetaCharacters">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":deprecated"><e>"StringTools.quoteWinArg() is deprecated. Use haxe.SysTools.quoteWinArg() instead."</e></m>
			</meta>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Windows.
		The input will be quoted, or escaped if necessary, such that the output
		will be parsed as a single argument using the rule specified in
		http://msdn.microsoft.com/en-us/library/ms880421

		Examples:
		```haxe
		quoteWinArg("abc") == "abc";
		quoteWinArg("ab c") == '"ab c"';
		```</haxe_doc>
		</quoteWinArg>
		<MIN_SURROGATE_CODE_POINT get="inline" set="null" expr="65536" line="601" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>65536</e></m></meta>
		</MIN_SURROGATE_CODE_POINT>
		<utf16CodePointAt get="inline" set="null" line="603" static="1"><f a="s:index">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></utf16CodePointAt>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	`using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
	to the `String` class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="Sys" params="" file="/home/vsts/work/1/s/std/cs/_std/Sys.hx">
		<_env static="1"><c path="haxe.ds.StringMap"><c path="String"/></c></_env>
		<_args static="1"><c path="Array"><c path="String"/></c></_args>
		<print public="1" get="inline" set="null" line="32" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Prints any value to the standard output.</haxe_doc>
		</print>
		<println public="1" get="inline" set="null" line="36" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Prints any value to the standard output, followed by a newline.
		On Windows, this function outputs a CRLF newline.
		LF newlines are printed on all other platforms.</haxe_doc>
		</println>
		<args public="1" set="method" line="40" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Returns all the arguments that were passed in the command line.
		This does not include the interpreter or the name of the program file.

		(java)(eval) On Windows, non-ASCII Unicode arguments will not work correctly.

		(cs) Non-ASCII Unicode arguments will not work correctly.</haxe_doc>
		</args>
		<getEnv public="1" get="inline" set="null" line="49" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the value of the given environment variable, or `null` if it
		doesn't exist.</haxe_doc>
		</getEnv>
		<putEnv public="1" set="method" line="53" static="1">
			<f a="s:v">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the value of the given environment variable.

		(java) This functionality is not available on Java; calling this function will throw.</haxe_doc>
		</putEnv>
		<environment public="1" set="method" line="59" static="1">
			<f a=""><t path="Map">
	<c path="String"/>
	<c path="String"/>
</t></f>
			<haxe_doc>Returns all environment variables.</haxe_doc>
		</environment>
		<sleep public="1" get="inline" set="null" line="71" static="1">
			<f a="seconds">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Suspends execution for the given length of time (in seconds).</haxe_doc>
		</sleep>
		<setTimeLocale public="1" set="method" line="75" static="1">
			<f a="loc">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Changes the current time locale, which will affect `DateTools.format` date formating.
		Returns `true` if the locale was successfully changed.</haxe_doc>
		</setTimeLocale>
		<getCwd public="1" get="inline" set="null" line="80" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Gets the current working directory (usually the one in which the program was started).</haxe_doc>
		</getCwd>
		<setCwd public="1" get="inline" set="null" line="84" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Changes the current working directory.

		(java) This functionality is not available on Java; calling this function will throw.</haxe_doc>
		</setCwd>
		<systemName public="1" set="method" line="88" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the type of the current system. Possible values are:
		 - `"Windows"`
		 - `"Linux"`
		 - `"BSD"`
		 - `"Mac"`</haxe_doc>
		</systemName>
		<command public="1" set="method" line="105" static="1">
			<f a="cmd:?args">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="Int"/>
			</f>
			<haxe_doc>Runs the given command. The command output will be printed to the same output as the current process.
		The current process will block until the command terminates.
		The return value is the exit code of the command (usually `0` indicates no error).

		Command arguments can be passed in two ways:

		 1. Using `args` to pass command arguments. Each argument will be automatically quoted and shell meta-characters will be escaped if needed.
		`cmd` should be an executable name that can be located in the `PATH` environment variable, or a full path to an executable.

		 2. When `args` is not given or is `null`, command arguments can be appended to `cmd`. No automatic quoting/escaping will be performed. `cmd` should be formatted exactly as it would be when typed at the command line.
		It can run executables, as well as shell commands that are not executables (e.g. on Windows: `dir`, `cd`, `echo` etc).

		Use the `sys.io.Process` API for more complex tasks, such as background processes, or providing input to the command.</haxe_doc>
		</command>
		<exit public="1" get="inline" set="null" line="127" static="1">
			<f a="code">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Exits the current process with the given exit code.

		(macro)(eval) Being invoked in a macro or eval context (e.g. with `-x` or `--run`) immediately terminates
		the compilation process, which also prevents the execution of any `--next` sections of compilation arguments.</haxe_doc>
		</exit>
		<epochTicks expr="new cs.system.DateTime(1970, 1, 1).Ticks" line="131" static="1">
			<x path="haxe.Int64"/>
			<meta>
				<m n=":value"><e>new cs.system.DateTime(1970, 1, 1).Ticks</e></m>
				<m n=":readOnly"/>
			</meta>
		</epochTicks>
		<time public="1" set="method" line="133" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Gives the most precise timestamp value available (in seconds).</haxe_doc>
		</time>
		<cpuTime public="1" get="inline" set="null" line="137" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Gives the most precise timestamp value available (in seconds),
		but only accounts for the actual time spent running on the CPU for the current thread/process.</haxe_doc>
		</cpuTime>
		<executablePath public="1" get="inline" set="null" line="141" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":deprecated"><e>"Use programPath instead"</e></m></meta>
			<haxe_doc>Returns the path to the current executable that we are running.</haxe_doc>
		</executablePath>
		<programPath public="1" set="method" line="145" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the absolute path to the current program file that we are running.
		Concretely, for an executable binary, it returns the path to the binary.
		For a script (e.g. a PHP file), it returns the path to the script.</haxe_doc>
		</programPath>
		<getChar public="1" set="method" line="149" static="1">
			<f a="echo">
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads a single input character from the standard input and returns it.
		Setting `echo` to `true` will also display the character on the output.</haxe_doc>
		</getChar>
		<stdin public="1" get="inline" set="null" line="157" static="1">
			<f a=""><c path="haxe.io.Input"/></f>
			<haxe_doc>Returns the standard input of the process, from which user input can be read.
		Usually it will block until the user sends a full input line.
		See `getChar` for an alternative.</haxe_doc>
		</stdin>
		<stdout public="1" get="inline" set="null" line="165" static="1">
			<f a=""><c path="haxe.io.Output"/></f>
			<haxe_doc>Returns the standard output of the process, to which program output can be written.</haxe_doc>
		</stdout>
		<stderr public="1" get="inline" set="null" line="173" static="1">
			<f a=""><c path="haxe.io.Output"/></f>
			<haxe_doc>Returns the standard error of the process, to which program errors can be written.</haxe_doc>
		</stderr>
		<haxe_doc>This class provides access to various base functions of system platforms.
	Look in the `sys` package for more system APIs.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<enum path="ValueType" params="" file="/home/vsts/work/1/s/std/cs/_std/Type.hx" module="Type">
		<TNull/>
		<TInt/>
		<TFloat/>
		<TBool/>
		<TObject/>
		<TFunction/>
		<TClass a="c"><x path="Class"><d/></x></TClass>
		<TEnum a="e"><x path="Enum"><d/></x></TEnum>
		<TUnknown/>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<class path="cs.system.ICloneable" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.ICloneable" extern="1" interface="1">
		<Clone public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</Clone>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ICloneable"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.IEnumerable" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.IEnumerable" extern="1" interface="1">
		<GetEnumerator public="1" set="method">
			<f a=""><c path="cs.system.collections.IEnumerator"/></f>
			<meta><m n=":overload"/></meta>
		</GetEnumerator>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.IEnumerable"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.ICollection" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.ICollection" extern="1" interface="1">
		<extends path="cs.system.collections.IEnumerable"/>
		<SyncRoot public="1" get="accessor" set="null"><d/></SyncRoot>
		<IsSynchronized public="1" get="accessor" set="null"><x path="Bool"/></IsSynchronized>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<GetEnumerator public="1" set="method">
			<f a=""><c path="cs.system.collections.IEnumerator"/></f>
			<meta><m n=":overload"/></meta>
		</GetEnumerator>
		<get_Count set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Count>
		<get_IsSynchronized set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSynchronized>
		<get_SyncRoot set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_SyncRoot>
		<CopyTo public="1" set="method">
			<f a="array:index">
				<c path="cs.system.Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CopyTo>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ICollection"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.IList" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.IList" extern="1" interface="1">
		<extends path="cs.system.collections.ICollection"/>
		<extends path="cs.system.collections.IEnumerable"/>
		<extends path="ArrayAccess"><d/></extends>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<IsSynchronized public="1" get="accessor" set="null"><x path="Bool"/></IsSynchronized>
		<SyncRoot public="1" get="accessor" set="null"><d/></SyncRoot>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<IsFixedSize public="1" get="accessor" set="null"><x path="Bool"/></IsFixedSize>
		<CopyTo public="1" set="method">
			<f a="array:index">
				<c path="cs.system.Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CopyTo>
		<get_SyncRoot set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_SyncRoot>
		<get_IsSynchronized set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSynchronized>
		<get_Count set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Count>
		<GetEnumerator public="1" set="method">
			<f a=""><c path="cs.system.collections.IEnumerator"/></f>
			<meta><m n=":overload"/></meta>
		</GetEnumerator>
		<get_IsFixedSize set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFixedSize>
		<get_IsReadOnly set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsReadOnly>
		<get_Item set="method">
			<f a="index">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</get_Item>
		<set_Item set="method">
			<f a="index:value">
				<x path="Int"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Item>
		<Add public="1" set="method">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Add>
		<Clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Clear>
		<Contains public="1" set="method">
			<f a="value">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Contains>
		<IndexOf public="1" set="method">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IndexOf>
		<Insert public="1" set="method">
			<f a="index:value">
				<x path="Int"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Insert>
		<Remove public="1" set="method">
			<f a="value">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Remove>
		<RemoveAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveAt>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.IList"</e></m>
		</meta>
	</class>
	<class path="cs.system.Array" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Array" extern="1">
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.collections.ICollection"/>
		<implements path="cs.system.collections.IEnumerable"/>
		<implements path="cs.system.collections.IList"/>
		<CreateInstance final="1" public="1" set="method" static="1">
			<f a="elementType:length">
				<c path="cs.system.Type"/>
				<x path="Int"/>
				<c path="cs.system.Array"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<CreateInstance final="1" public="1" set="method">
					<f a="elementType:lengths">
						<c path="cs.system.Type"/>
						<c path="cs.NativeArray"><x path="haxe.Int64"/></c>
						<c path="cs.system.Array"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstance>
				<CreateInstance final="1" public="1" set="method">
					<f a="elementType:lengths:lowerBounds">
						<c path="cs.system.Type"/>
						<c path="cs.NativeArray"><x path="Int"/></c>
						<c path="cs.NativeArray"><x path="Int"/></c>
						<c path="cs.system.Array"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstance>
				<CreateInstance final="1" public="1" set="method">
					<f a="elementType:lengths">
						<c path="cs.system.Type"/>
						<c path="cs.NativeArray"><x path="Int"/></c>
						<c path="cs.system.Array"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstance>
				<CreateInstance final="1" public="1" set="method">
					<f a="elementType:length1:length2:length3">
						<c path="cs.system.Type"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="cs.system.Array"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstance>
				<CreateInstance final="1" public="1" set="method">
					<f a="elementType:length1:length2">
						<c path="cs.system.Type"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="cs.system.Array"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstance>
			</overloads>
		</CreateInstance>
		<BinarySearch final="1" public="1" set="method" static="1">
			<f a="array:value">
				<c path="cs.system.Array"/>
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<BinarySearch final="1" public="1" params="M0" set="method">
					<f a="array:index:length:value:comparer">
						<c path="cs.NativeArray"><c path="BinarySearch.M0"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="BinarySearch.M0"/>
						<c path="cs.system.collections.generic.IComparer_1"><c path="BinarySearch.M0"/></c>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</BinarySearch>
				<BinarySearch final="1" public="1" params="M0" set="method">
					<f a="array:index:length:value">
						<c path="cs.NativeArray"><c path="BinarySearch.M0"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="BinarySearch.M0"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</BinarySearch>
				<BinarySearch final="1" public="1" params="M0" set="method">
					<f a="array:value:comparer">
						<c path="cs.NativeArray"><c path="BinarySearch.M0"/></c>
						<c path="BinarySearch.M0"/>
						<c path="cs.system.collections.generic.IComparer_1"><c path="BinarySearch.M0"/></c>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</BinarySearch>
				<BinarySearch final="1" public="1" params="M0" set="method">
					<f a="array:value">
						<c path="cs.NativeArray"><c path="BinarySearch.M0"/></c>
						<c path="BinarySearch.M0"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</BinarySearch>
				<BinarySearch final="1" public="1" set="method">
					<f a="array:index:length:value:comparer">
						<c path="cs.system.Array"/>
						<x path="Int"/>
						<x path="Int"/>
						<d/>
						<c path="cs.system.collections.IComparer"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</BinarySearch>
				<BinarySearch final="1" public="1" set="method">
					<f a="array:index:length:value">
						<c path="cs.system.Array"/>
						<x path="Int"/>
						<x path="Int"/>
						<d/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</BinarySearch>
				<BinarySearch final="1" public="1" set="method">
					<f a="array:value:comparer">
						<c path="cs.system.Array"/>
						<d/>
						<c path="cs.system.collections.IComparer"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</BinarySearch>
			</overloads>
		</BinarySearch>
		<Clear final="1" public="1" set="method" static="1">
			<f a="array:index:length">
				<c path="cs.system.Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":overload"/>
			</meta>
		</Clear>
		<Copy final="1" public="1" set="method" static="1">
			<f a="sourceArray:destinationArray:length">
				<c path="cs.system.Array"/>
				<c path="cs.system.Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Copy final="1" public="1" set="method">
					<f a="sourceArray:destinationArray:length">
						<c path="cs.system.Array"/>
						<c path="cs.system.Array"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Copy>
				<Copy final="1" public="1" set="method">
					<f a="sourceArray:sourceIndex:destinationArray:destinationIndex:length">
						<c path="cs.system.Array"/>
						<x path="haxe.Int64"/>
						<c path="cs.system.Array"/>
						<x path="haxe.Int64"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Copy>
				<Copy final="1" public="1" set="method">
					<f a="sourceArray:sourceIndex:destinationArray:destinationIndex:length">
						<c path="cs.system.Array"/>
						<x path="Int"/>
						<c path="cs.system.Array"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Copy>
			</overloads>
		</Copy>
		<IndexOf final="1" public="1" set="method" static="1">
			<f a="array:value">
				<c path="cs.system.Array"/>
				<d/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":overload"/>
			</meta>
			<overloads>
				<IndexOf final="1" public="1" params="M0" set="method">
					<f a="array:value:startIndex:count">
						<c path="cs.NativeArray"><c path="IndexOf.M0"/></c>
						<c path="IndexOf.M0"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":noCompletion"/>
						<m n=":skipReflection"/>
						<m n=":overload"/>
					</meta>
				</IndexOf>
				<IndexOf final="1" public="1" params="M0" set="method">
					<f a="array:value:startIndex">
						<c path="cs.NativeArray"><c path="IndexOf.M0"/></c>
						<c path="IndexOf.M0"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":noCompletion"/>
						<m n=":skipReflection"/>
						<m n=":overload"/>
					</meta>
				</IndexOf>
				<IndexOf final="1" public="1" params="M0" set="method">
					<f a="array:value">
						<c path="cs.NativeArray"><c path="IndexOf.M0"/></c>
						<c path="IndexOf.M0"/>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":noCompletion"/>
						<m n=":skipReflection"/>
						<m n=":overload"/>
					</meta>
				</IndexOf>
				<IndexOf final="1" public="1" set="method">
					<f a="array:value:startIndex:count">
						<c path="cs.system.Array"/>
						<d/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":noCompletion"/>
						<m n=":skipReflection"/>
						<m n=":overload"/>
					</meta>
				</IndexOf>
				<IndexOf final="1" public="1" set="method">
					<f a="array:value:startIndex">
						<c path="cs.system.Array"/>
						<d/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta>
						<m n=":noCompletion"/>
						<m n=":skipReflection"/>
						<m n=":overload"/>
					</meta>
				</IndexOf>
			</overloads>
		</IndexOf>
		<LastIndexOf final="1" public="1" set="method" static="1">
			<f a="array:value">
				<c path="cs.system.Array"/>
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<LastIndexOf final="1" public="1" params="M0" set="method">
					<f a="array:value:startIndex:count">
						<c path="cs.NativeArray"><c path="LastIndexOf.M0"/></c>
						<c path="LastIndexOf.M0"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
				<LastIndexOf final="1" public="1" params="M0" set="method">
					<f a="array:value:startIndex">
						<c path="cs.NativeArray"><c path="LastIndexOf.M0"/></c>
						<c path="LastIndexOf.M0"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
				<LastIndexOf final="1" public="1" params="M0" set="method">
					<f a="array:value">
						<c path="cs.NativeArray"><c path="LastIndexOf.M0"/></c>
						<c path="LastIndexOf.M0"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
				<LastIndexOf final="1" public="1" set="method">
					<f a="array:value:startIndex:count">
						<c path="cs.system.Array"/>
						<d/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
				<LastIndexOf final="1" public="1" set="method">
					<f a="array:value:startIndex">
						<c path="cs.system.Array"/>
						<d/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
			</overloads>
		</LastIndexOf>
		<Reverse final="1" public="1" set="method" static="1">
			<f a="array">
				<c path="cs.system.Array"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><Reverse final="1" public="1" set="method">
	<f a="array:index:length">
		<c path="cs.system.Array"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</Reverse></overloads>
		</Reverse>
		<Sort final="1" public="1" set="method" static="1">
			<f a="array">
				<c path="cs.system.Array"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Sort final="1" public="1" params="M0" set="method">
					<f a="array:comparison">
						<c path="cs.NativeArray"><c path="Sort.M0"/></c>
						<x path="cs.system.Comparison_1"><c path="Sort.M0"/></x>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sort>
				<Sort final="1" public="1" params="M0:M1" set="method">
					<f a="keys:items:index:length:comparer">
						<c path="cs.NativeArray"><c path="Sort.M0"/></c>
						<c path="cs.NativeArray"><c path="Sort.M1"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="cs.system.collections.generic.IComparer_1"><c path="Sort.M0"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sort>
				<Sort final="1" public="1" params="M0" set="method">
					<f a="array:index:length:comparer">
						<c path="cs.NativeArray"><c path="Sort.M0"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="cs.system.collections.generic.IComparer_1"><c path="Sort.M0"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sort>
				<Sort final="1" public="1" params="M0:M1" set="method">
					<f a="keys:items:index:length">
						<c path="cs.NativeArray"><c path="Sort.M0"/></c>
						<c path="cs.NativeArray"><c path="Sort.M1"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sort>
				<Sort final="1" public="1" params="M0" set="method">
					<f a="array:index:length">
						<c path="cs.NativeArray"><c path="Sort.M0"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sort>
				<Sort final="1" public="1" params="M0:M1" set="method">
					<f a="keys:items:comparer">
						<c path="cs.NativeArray"><c path="Sort.M0"/></c>
						<c path="cs.NativeArray"><c path="Sort.M1"/></c>
						<c path="cs.system.collections.generic.IComparer_1"><c path="Sort.M0"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sort>
				<Sort final="1" public="1" params="M0" set="method">
					<f a="array:comparer">
						<c path="cs.NativeArray"><c path="Sort.M0"/></c>
						<c path="cs.system.collections.generic.IComparer_1"><c path="Sort.M0"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sort>
				<Sort final="1" public="1" params="M0:M1" set="method">
					<f a="keys:items">
						<c path="cs.NativeArray"><c path="Sort.M0"/></c>
						<c path="cs.NativeArray"><c path="Sort.M1"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sort>
				<Sort final="1" public="1" params="M0" set="method">
					<f a="array">
						<c path="cs.NativeArray"><c path="Sort.M0"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sort>
				<Sort final="1" public="1" set="method">
					<f a="keys:items:index:length:comparer">
						<c path="cs.system.Array"/>
						<c path="cs.system.Array"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="cs.system.collections.IComparer"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sort>
				<Sort final="1" public="1" set="method">
					<f a="array:index:length:comparer">
						<c path="cs.system.Array"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="cs.system.collections.IComparer"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sort>
				<Sort final="1" public="1" set="method">
					<f a="keys:items:index:length">
						<c path="cs.system.Array"/>
						<c path="cs.system.Array"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sort>
				<Sort final="1" public="1" set="method">
					<f a="keys:items:comparer">
						<c path="cs.system.Array"/>
						<c path="cs.system.Array"/>
						<c path="cs.system.collections.IComparer"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sort>
				<Sort final="1" public="1" set="method">
					<f a="array:index:length">
						<c path="cs.system.Array"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sort>
				<Sort final="1" public="1" set="method">
					<f a="array:comparer">
						<c path="cs.system.Array"/>
						<c path="cs.system.collections.IComparer"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sort>
				<Sort final="1" public="1" set="method">
					<f a="keys:items">
						<c path="cs.system.Array"/>
						<c path="cs.system.Array"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sort>
			</overloads>
		</Sort>
		<Resize final="1" public="1" params="M0" set="method" static="1">
			<f a="array:newSize">
				<t path="cs.Ref"><c path="cs.NativeArray"><c path="Resize.M0"/></c></t>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Resize>
		<TrueForAll final="1" public="1" params="M0" set="method" static="1">
			<f a="array:match">
				<c path="cs.NativeArray"><c path="TrueForAll.M0"/></c>
				<x path="cs.system.Predicate_1"><c path="TrueForAll.M0"/></x>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</TrueForAll>
		<ForEach final="1" public="1" params="M0" set="method" static="1">
			<f a="array:action">
				<c path="cs.NativeArray"><c path="ForEach.M0"/></c>
				<x path="cs.system.Action_1"><c path="ForEach.M0"/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ForEach>
		<ConvertAll final="1" public="1" params="M0:M1" set="method" static="1">
			<f a="array:converter">
				<c path="cs.NativeArray"><c path="ConvertAll.M0"/></c>
				<x path="cs.system.Converter_2">
					<c path="ConvertAll.M0"/>
					<c path="ConvertAll.M1"/>
				</x>
				<c path="cs.NativeArray"><c path="ConvertAll.M1"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</ConvertAll>
		<FindLastIndex final="1" public="1" params="M0" set="method" static="1">
			<f a="array:match">
				<c path="cs.NativeArray"><c path="FindLastIndex.M0"/></c>
				<x path="cs.system.Predicate_1"><c path="FindLastIndex.M0"/></x>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<FindLastIndex final="1" public="1" params="M0" set="method">
					<f a="array:startIndex:count:match">
						<c path="cs.NativeArray"><c path="FindLastIndex.M0"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="cs.system.Predicate_1"><c path="FindLastIndex.M0"/></x>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</FindLastIndex>
				<FindLastIndex final="1" public="1" params="M0" set="method">
					<f a="array:startIndex:match">
						<c path="cs.NativeArray"><c path="FindLastIndex.M0"/></c>
						<x path="Int"/>
						<x path="cs.system.Predicate_1"><c path="FindLastIndex.M0"/></x>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</FindLastIndex>
			</overloads>
		</FindLastIndex>
		<FindIndex final="1" public="1" params="M0" set="method" static="1">
			<f a="array:match">
				<c path="cs.NativeArray"><c path="FindIndex.M0"/></c>
				<x path="cs.system.Predicate_1"><c path="FindIndex.M0"/></x>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<FindIndex final="1" public="1" params="M0" set="method">
					<f a="array:startIndex:count:match">
						<c path="cs.NativeArray"><c path="FindIndex.M0"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="cs.system.Predicate_1"><c path="FindIndex.M0"/></x>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</FindIndex>
				<FindIndex final="1" public="1" params="M0" set="method">
					<f a="array:startIndex:match">
						<c path="cs.NativeArray"><c path="FindIndex.M0"/></c>
						<x path="Int"/>
						<x path="cs.system.Predicate_1"><c path="FindIndex.M0"/></x>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</FindIndex>
			</overloads>
		</FindIndex>
		<FindAll final="1" public="1" params="M0" set="method" static="1">
			<f a="array:match">
				<c path="cs.NativeArray"><c path="FindAll.M0"/></c>
				<x path="cs.system.Predicate_1"><c path="FindAll.M0"/></x>
				<c path="cs.NativeArray"><c path="FindAll.M0"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</FindAll>
		<Exists final="1" public="1" params="M0" set="method" static="1">
			<f a="array:match">
				<c path="cs.NativeArray"><c path="Exists.M0"/></c>
				<x path="cs.system.Predicate_1"><c path="Exists.M0"/></x>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Exists>
		<AsReadOnly final="1" public="1" params="M0" set="method" static="1">
			<f a="array">
				<c path="cs.NativeArray"><c path="AsReadOnly.M0"/></c>
				<c path="cs.system.collections.objectmodel.ReadOnlyCollection_1"><c path="AsReadOnly.M0"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</AsReadOnly>
		<Find final="1" public="1" params="M0" set="method" static="1">
			<f a="array:match">
				<c path="cs.NativeArray"><c path="Find.M0"/></c>
				<x path="cs.system.Predicate_1"><c path="Find.M0"/></x>
				<c path="Find.M0"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Find>
		<FindLast final="1" public="1" params="M0" set="method" static="1">
			<f a="array:match">
				<c path="cs.NativeArray"><c path="FindLast.M0"/></c>
				<x path="cs.system.Predicate_1"><c path="FindLast.M0"/></x>
				<c path="FindLast.M0"/>
			</f>
			<meta><m n=":overload"/></meta>
		</FindLast>
		<ConstrainedCopy final="1" public="1" set="method" static="1">
			<f a="sourceArray:sourceIndex:destinationArray:destinationIndex:length">
				<c path="cs.system.Array"/>
				<x path="Int"/>
				<c path="cs.system.Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ConstrainedCopy>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<IsFixedSize public="1" get="accessor" set="null"><x path="Bool"/></IsFixedSize>
		<SyncRoot public="1" get="accessor" set="null"><d/></SyncRoot>
		<IsSynchronized public="1" get="accessor" set="null"><x path="Bool"/></IsSynchronized>
		<Rank public="1" get="accessor" set="null"><x path="Int"/></Rank>
		<LongLength public="1" get="accessor" set="null"><x path="haxe.Int64"/></LongLength>
		<Length public="1" get="accessor" set="null"><x path="Int"/></Length>
		<get_Length final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Length>
		<get_LongLength final="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</get_LongLength>
		<get_Rank final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Rank>
		<GetLength final="1" public="1" set="method">
			<f a="dimension">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetLength>
		<GetLongLength final="1" public="1" set="method">
			<f a="dimension">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetLongLength>
		<GetLowerBound final="1" public="1" set="method">
			<f a="dimension">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetLowerBound>
		<GetValue final="1" public="1" set="method">
			<f a="indices">
				<c path="cs.NativeArray"><x path="Int"/></c>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetValue final="1" public="1" set="method">
					<f a="indices">
						<c path="cs.NativeArray"><x path="haxe.Int64"/></c>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetValue>
				<GetValue final="1" public="1" set="method">
					<f a="index1:index2:index3">
						<x path="haxe.Int64"/>
						<x path="haxe.Int64"/>
						<x path="haxe.Int64"/>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetValue>
				<GetValue final="1" public="1" set="method">
					<f a="index1:index2">
						<x path="haxe.Int64"/>
						<x path="haxe.Int64"/>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetValue>
				<GetValue final="1" public="1" set="method">
					<f a="index">
						<x path="haxe.Int64"/>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetValue>
				<GetValue final="1" public="1" set="method">
					<f a="index1:index2:index3">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetValue>
				<GetValue final="1" public="1" set="method">
					<f a="index1:index2">
						<x path="Int"/>
						<x path="Int"/>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetValue>
				<GetValue final="1" public="1" set="method">
					<f a="index">
						<x path="Int"/>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetValue>
			</overloads>
		</GetValue>
		<SetValue final="1" public="1" set="method">
			<f a="value:indices">
				<d/>
				<c path="cs.NativeArray"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<SetValue final="1" public="1" set="method">
					<f a="value:indices">
						<d/>
						<c path="cs.NativeArray"><x path="haxe.Int64"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</SetValue>
				<SetValue final="1" public="1" set="method">
					<f a="value:index1:index2:index3">
						<d/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</SetValue>
				<SetValue final="1" public="1" set="method">
					<f a="value:index1:index2">
						<d/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</SetValue>
				<SetValue final="1" public="1" set="method">
					<f a="value:index">
						<d/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</SetValue>
				<SetValue final="1" public="1" set="method">
					<f a="value:index1:index2:index3">
						<d/>
						<x path="haxe.Int64"/>
						<x path="haxe.Int64"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</SetValue>
				<SetValue final="1" public="1" set="method">
					<f a="value:index1:index2">
						<d/>
						<x path="haxe.Int64"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</SetValue>
				<SetValue final="1" public="1" set="method">
					<f a="value:index">
						<d/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</SetValue>
			</overloads>
		</SetValue>
		<get_IsSynchronized final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSynchronized>
		<get_SyncRoot final="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_SyncRoot>
		<get_IsFixedSize final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFixedSize>
		<get_IsReadOnly final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsReadOnly>
		<GetEnumerator final="1" public="1" set="method">
			<f a=""><c path="cs.system.collections.IEnumerator"/></f>
			<meta><m n=":overload"/></meta>
		</GetEnumerator>
		<GetUpperBound final="1" public="1" set="method">
			<f a="dimension">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetUpperBound>
		<Clone final="1" public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</Clone>
		<Initialize final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Initialize>
		<CopyTo final="1" public="1" set="method">
			<f a="array:index">
				<c path="cs.system.Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><CopyTo final="1" public="1" set="method">
	<f a="array:index">
		<c path="cs.system.Array"/>
		<x path="haxe.Int64"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</CopyTo></overloads>
		</CopyTo>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Array"</e></m>
		</meta>
	</class>
	<class path="cs.NativeArray" params="T" file="/home/vsts/work/1/s/std/cs/NativeArray.hx" extern="1">
		<extends path="cs.system.Array"/>
		<make public="1" params="T" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><c path="make.T"/></x>
				<c path="cs.NativeArray"><c path="make.T"/></c>
			</f>
			<haxe_doc>Creates a new array with the specified elements.

		Usage:
		```haxe
		var elements = NativeArray.make(1,2,3,4,5,6);
		```</haxe_doc>
		</make>
		<Reverse public="1" set="method" static="1"><f a="arr">
	<c path="cs.system.Array"/>
	<x path="Void"/>
</f></Reverse>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>Alias to array's `Length` property. Returns the size of the array</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="51"><f a=""><x path="Int"/></f></get_length>
		<iterator public="1" get="inline" set="null" line="59">
			<f a=""><c path="cs._NativeArray.NativeArrayIterator"><c path="cs.NativeArray.T"/></c></f>
			<haxe_doc>Returns an iterator so it's possible to use `for` with C#'s `NativeArray`</haxe_doc>
		</iterator>
		<new public="1" set="method">
			<f a="len">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allocates a new array with size `len`</haxe_doc>
		</new>
		<haxe_doc>Represents a C# fixed-size Array (`T[]`)</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
		</meta>
	</class>
	<enum path="cs.internal.EmptyObject" params="" file="/home/vsts/work/1/s/std/cs/internal/Runtime.hx" module="cs.internal.Runtime">
		<EMPTY/>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":nativeGen"/>
			<m n=":keep"/>
			<m n=":native"><e>"haxe.lang.EmptyObject"</e></m>
		</meta>
	</enum>
	<class path="Type" params="" file="/home/vsts/work/1/s/std/cs/_std/Type.hx">
		<getClass public="1" params="T" set="method" line="46" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.

		If `o` is null or of a different type, null is returned.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" line="53" static="1">
			<f a="o">
				<x path="EnumValue"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc><![CDATA[Returns the enum of enum instance `o`.

		An enum instance is the result of using an enum constructor. Given an
		`enum Color { Red; }`, `getEnum(Red)` returns `Enum<Color>`.

		If `o` is null, null is returned.

		In general, type parameter information cannot be obtained at runtime.]]></haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" line="61" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Returns the super-class of class `c`.

		If `c` has no super class, null is returned.

		If `c` is null, the result is unspecified.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" line="68" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of class `c`, including its path.

		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `c` has no package, the class name is returned.

		If `c` is null, the result is unspecified.

		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" line="87" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		`pack1.pack2.(...).packN.EnumName`
		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" line="96" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Resolves a class by name.

		If `name` is the path of an existing class, that class is returned.

		Otherwise null is returned.

		If `name` is null or the path to a different type, the result is
		unspecified.

		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="146" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Resolves an enum by name.

		If `name` is the path of an existing enum, that enum is returned.

		Otherwise null is returned.

		If `name` is null the result is unspecified.

		If `name` is the path to a different type, null is returned.

		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" line="154" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`, using `args` as arguments to the
		class constructor.

		This function guarantees that the class constructor is called.

		Default values of constructors arguments are not guaranteed to be
		taken into account.

		If `cl` or `args` are null, or if the number of elements in `args` does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if `cl` has no own constructor, the
		result is unspecified.

		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<__createEmptyInstance_EMPTY_ARGS expr="cs.NativeArray.make(((cs.internal.Runtime.EmptyObject.EMPTY : Any)))" line="167" static="1">
			<c path="cs.NativeArray"><x path="Any"/></c>
			<meta>
				<m n=":value"><e>cs.NativeArray.make(((cs.internal.Runtime.EmptyObject.EMPTY : Any)))</e></m>
				<m n=":protected"/>
				<m n=":readOnly"/>
			</meta>
		</__createEmptyInstance_EMPTY_ARGS>
		<createEmptyInstance public="1" params="T" set="method" line="169" static="1">
			<f a="cl">
				<x path="Class"><c path="createEmptyInstance.T"/></x>
				<c path="createEmptyInstance.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates an instance of class `cl`.

		This function guarantees that the class constructor is not called.

		If `cl` is null, the result is unspecified.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" line="189" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" line="200" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createEnumIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" set="method" line="205" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the instance fields of class `c`, including
		inherited fields.

		This only includes fields which are known at compile-time. In
		particular, using `getInstanceFields(getClass(obj))` will not include
		any fields which were added to `obj` at runtime.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.

		(As3) This method only returns instance fields that are public.</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" line="228" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of static fields of class `c`.

		This does not include static fields of parent classes.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.

		(As3) This method only returns class fields that are public.</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" line="244" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" line="256" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>Returns the runtime type of value `v`.

		The result corresponds to the type `v` has at runtime, which may vary
		per platform. Assumptions regarding this should be minimized to avoid
		surprises.</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" line="305" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":ifFeature"><e>"has_enum"</e></m>
			</meta>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</enumEq>
		<enumConstructor public="1" set="method" line="314" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" set="method" line="318" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumParameters>
		<enumIndex public="1" set="method" line="324" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<meta><m n=":ifFeature"><e>"has_enum"</e></m></meta>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumIndex>
		<allEnums public="1" params="T" set="method" line="333" static="1">
			<f a="e">
				<x path="Enum"><c path="allEnums.T"/></x>
				<c path="Array"><c path="allEnums.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</allEnums>
		<haxe_doc>The Haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.

	@see https://haxe.org/manual/types.html
	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="UInt" params="" file="/home/vsts/work/1/s/std/UInt.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>The unsigned `Int` type is only defined for Flash and C#.
	Simulate it for other platforms.

	@see https://haxe.org/manual/types-basic-types.html</haxe_doc>
		<meta><m n=":hxGen"/></meta>
		<impl><class path="_UInt.UInt_Impl_" params="" file="/home/vsts/work/1/s/std/UInt.hx" private="1" module="UInt">
	<add get="inline" set="null" line="134" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</add>
	<div get="inline" set="null" line="138" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</div>
	<mul get="inline" set="null" line="142" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</mul>
	<sub get="inline" set="null" line="146" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</sub>
	<gt get="inline" set="null" line="151" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gt>
	<gte get="inline" set="null" line="158" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gte>
	<lt get="inline" set="null" line="164" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</lt>
	<lte get="inline" set="null" line="168" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lte>
	<and get="inline" set="null" line="172" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
	</and>
	<or get="inline" set="null" line="176" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A | B</e></m></meta>
	</or>
	<xor get="inline" set="null" line="180" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A ^ B</e></m></meta>
	</xor>
	<shl get="inline" set="null" line="184" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
	</shl>
	<shr get="inline" set="null" line="188" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
	</shr>
	<ushr get="inline" set="null" line="192" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
	</ushr>
	<mod get="inline" set="null" line="196" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</mod>
	<addWithFloat get="inline" set="null" line="200" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</addWithFloat>
	<mulWithFloat get="inline" set="null" line="204" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</mulWithFloat>
	<divFloat get="inline" set="null" line="208" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divFloat>
	<floatDiv get="inline" set="null" line="212" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</floatDiv>
	<subFloat get="inline" set="null" line="216" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subFloat>
	<floatSub get="inline" set="null" line="220" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</floatSub>
	<gtFloat get="inline" set="null" line="224" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gtFloat>
	<equalsInt params="T" get="inline" set="null" line="228" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="equalsInt.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A == B</e></m>
		</meta>
	</equalsInt>
	<notEqualsInt params="T" get="inline" set="null" line="232" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="notEqualsInt.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A != B</e></m>
		</meta>
	</notEqualsInt>
	<equalsFloat params="T" get="inline" set="null" line="236" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="equalsFloat.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A == B</e></m>
		</meta>
	</equalsFloat>
	<notEqualsFloat params="T" get="inline" set="null" line="240" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="notEqualsFloat.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A != B</e></m>
		</meta>
	</notEqualsFloat>
	<gteFloat get="inline" set="null" line="244" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gteFloat>
	<floatGt get="inline" set="null" line="248" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</floatGt>
	<floatGte get="inline" set="null" line="252" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</floatGte>
	<ltFloat get="inline" set="null" line="256" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</ltFloat>
	<lteFloat get="inline" set="null" line="260" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lteFloat>
	<floatLt get="inline" set="null" line="264" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</floatLt>
	<floatLte get="inline" set="null" line="268" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</floatLte>
	<modFloat get="inline" set="null" line="272" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</modFloat>
	<floatMod get="inline" set="null" line="276" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</floatMod>
	<negBits get="inline" set="null" line="280" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>~A</e></m>
		</meta>
	</negBits>
	<prefixIncrement get="inline" set="null" line="284" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>++A</e></m>
		</meta>
	</prefixIncrement>
	<postfixIncrement get="inline" set="null" line="288" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</postfixIncrement>
	<prefixDecrement get="inline" set="null" line="292" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>--A</e></m>
		</meta>
	</prefixDecrement>
	<postfixDecrement get="inline" set="null" line="296" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A--</e></m>
		</meta>
	</postfixDecrement>
	<toString get="inline" set="null" line="301" static="1">
		<f a="this:?radix">
			<x path="Int"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
	<toInt get="inline" set="null" line="309" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toInt>
	<toFloat get="inline" set="null" line="313" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toFloat>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="_UInt.UInt_Impl_" params="" file="/home/vsts/work/1/s/std/UInt.hx" private="1" module="UInt">
		<add get="inline" set="null" line="134" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</add>
		<div get="inline" set="null" line="138" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</div>
		<mul get="inline" set="null" line="142" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</mul>
		<sub get="inline" set="null" line="146" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</sub>
		<gt get="inline" set="null" line="151" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gt>
		<gte get="inline" set="null" line="158" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gte>
		<lt get="inline" set="null" line="164" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</lt>
		<lte get="inline" set="null" line="168" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lte>
		<and get="inline" set="null" line="172" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
		</and>
		<or get="inline" set="null" line="176" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A | B</e></m></meta>
		</or>
		<xor get="inline" set="null" line="180" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A ^ B</e></m></meta>
		</xor>
		<shl get="inline" set="null" line="184" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
		</shl>
		<shr get="inline" set="null" line="188" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
		</shr>
		<ushr get="inline" set="null" line="192" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
		</ushr>
		<mod get="inline" set="null" line="196" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</mod>
		<addWithFloat get="inline" set="null" line="200" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</addWithFloat>
		<mulWithFloat get="inline" set="null" line="204" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</mulWithFloat>
		<divFloat get="inline" set="null" line="208" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divFloat>
		<floatDiv get="inline" set="null" line="212" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</floatDiv>
		<subFloat get="inline" set="null" line="216" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subFloat>
		<floatSub get="inline" set="null" line="220" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</floatSub>
		<gtFloat get="inline" set="null" line="224" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gtFloat>
		<equalsInt params="T" get="inline" set="null" line="228" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="equalsInt.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A == B</e></m>
			</meta>
		</equalsInt>
		<notEqualsInt params="T" get="inline" set="null" line="232" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="notEqualsInt.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A != B</e></m>
			</meta>
		</notEqualsInt>
		<equalsFloat params="T" get="inline" set="null" line="236" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="equalsFloat.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A == B</e></m>
			</meta>
		</equalsFloat>
		<notEqualsFloat params="T" get="inline" set="null" line="240" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="notEqualsFloat.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A != B</e></m>
			</meta>
		</notEqualsFloat>
		<gteFloat get="inline" set="null" line="244" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gteFloat>
		<floatGt get="inline" set="null" line="248" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</floatGt>
		<floatGte get="inline" set="null" line="252" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</floatGte>
		<ltFloat get="inline" set="null" line="256" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</ltFloat>
		<lteFloat get="inline" set="null" line="260" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lteFloat>
		<floatLt get="inline" set="null" line="264" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</floatLt>
		<floatLte get="inline" set="null" line="268" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</floatLte>
		<modFloat get="inline" set="null" line="272" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</modFloat>
		<floatMod get="inline" set="null" line="276" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</floatMod>
		<negBits get="inline" set="null" line="280" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>~A</e></m>
			</meta>
		</negBits>
		<prefixIncrement get="inline" set="null" line="284" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>++A</e></m>
			</meta>
		</prefixIncrement>
		<postfixIncrement get="inline" set="null" line="288" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</postfixIncrement>
		<prefixDecrement get="inline" set="null" line="292" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>--A</e></m>
			</meta>
		</prefixDecrement>
		<postfixDecrement get="inline" set="null" line="296" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A--</e></m>
			</meta>
		</postfixDecrement>
		<toString get="inline" set="null" line="301" static="1">
			<f a="this:?radix">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
		<toInt get="inline" set="null" line="309" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toInt>
		<toFloat get="inline" set="null" line="313" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toFloat>
		<meta><m n=":hxGen"/></meta>
	</class>
	<abstract path="UnicodeString" params="" file="/home/vsts/work/1/s/std/UnicodeString.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>This abstract provides consistent cross-target unicode support.

	@see https://haxe.org/manual/std-UnicodeString.html</haxe_doc>
		<meta>
			<m n=":nativeGen"/>
			<m n=":forward"/>
			<m n=":access"><e>StringTools</e></m>
		</meta>
		<impl><class path="_UnicodeString.UnicodeString_Impl_" params="" file="/home/vsts/work/1/s/std/UnicodeString.hx" private="1" module="UnicodeString">
	<validate public="1" set="method" line="39" static="1">
		<f a="b:encoding">
			<c path="haxe.io.Bytes"/>
			<e path="haxe.io.Encoding"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Tells if `b` is a correctly encoded UTF8 byte sequence.</haxe_doc>
	</validate>
	<_new public="1" get="inline" set="null" line="114" static="1">
		<f a="string">
			<c path="String"/>
			<x path="UnicodeString"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Creates an instance of UnicodeString.</haxe_doc>
	</_new>
	<iterator public="1" get="inline" set="null" line="121" static="1">
		<f a="this">
			<c path="String"/>
			<c path="haxe.iterators.StringIteratorUnicode"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an iterator of the unicode code points.</haxe_doc>
	</iterator>
	<keyValueIterator public="1" get="inline" set="null" line="128" static="1">
		<f a="this">
			<c path="String"/>
			<c path="haxe.iterators.StringKeyValueIteratorUnicode"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an iterator of the code point indices and unicode code points.</haxe_doc>
	</keyValueIterator>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>The number of characters in `this` String.</haxe_doc>
	</length>
	<charAt public="1" set="method" line="144" static="1">
		<f a="this:index">
			<c path="String"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
	</charAt>
	<charCodeAt public="1" set="method" line="167" static="1">
		<f a="this:index">
			<c path="String"/>
			<x path="Int"/>
			<x path="Null"><x path="Int"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.</haxe_doc>
	</charCodeAt>
	<indexOf public="1" set="method" line="200" static="1">
		<f a="this:str:?startIndex">
			<c path="String"/>
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex` (if `startIndex` is posivite
		or 0) or `max(this.length + startIndex, 0)` (if `startIndex` is negative).

		If `startIndex` exceeds `this.length`, -1 is returned.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
	</indexOf>
	<lastIndexOf public="1" set="method" line="256" static="1">
		<f a="this:str:?startIndex">
			<c path="String"/>
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
	</lastIndexOf>
	<substr public="1" set="method" line="315" static="1">
		<f a="this:pos:?len">
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
	</substr>
	<substring public="1" set="method" line="370" static="1">
		<f a="this:startIndex:?endIndex">
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
	</substring>
	<get_length set="method" line="415" static="1">
		<f a="this">
			<c path="String"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<meta>
		<m n=":nativeGen"/>
		<m n=":access"><e>StringTools</e></m>
	</meta>
</class></impl>
	</abstract>
	<class path="_UnicodeString.UnicodeString_Impl_" params="" file="/home/vsts/work/1/s/std/UnicodeString.hx" private="1" module="UnicodeString">
		<validate public="1" set="method" line="39" static="1">
			<f a="b:encoding">
				<c path="haxe.io.Bytes"/>
				<e path="haxe.io.Encoding"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `b` is a correctly encoded UTF8 byte sequence.</haxe_doc>
		</validate>
		<_new public="1" get="inline" set="null" line="114" static="1">
			<f a="string">
				<c path="String"/>
				<x path="UnicodeString"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Creates an instance of UnicodeString.</haxe_doc>
		</_new>
		<iterator public="1" get="inline" set="null" line="121" static="1">
			<f a="this">
				<c path="String"/>
				<c path="haxe.iterators.StringIteratorUnicode"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an iterator of the unicode code points.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="128" static="1">
			<f a="this">
				<c path="String"/>
				<c path="haxe.iterators.StringKeyValueIteratorUnicode"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an iterator of the code point indices and unicode code points.</haxe_doc>
		</keyValueIterator>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<charAt public="1" set="method" line="144" static="1">
			<f a="this:index">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method" line="167" static="1">
			<f a="this:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method" line="200" static="1">
			<f a="this:str:?startIndex">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex` (if `startIndex` is posivite
		or 0) or `max(this.length + startIndex, 0)` (if `startIndex` is negative).

		If `startIndex` exceeds `this.length`, -1 is returned.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method" line="256" static="1">
			<f a="this:str:?startIndex">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<substr public="1" set="method" line="315" static="1">
			<f a="this:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method" line="370" static="1">
			<f a="this:startIndex:?endIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<get_length set="method" line="415" static="1">
			<f a="this">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<meta>
			<m n=":nativeGen"/>
			<m n=":access"><e>StringTools</e></m>
		</meta>
	</class>
	<abstract path="XmlType" params="" file="/home/vsts/work/1/s/std/Xml.hx" module="Xml">
		<this><x path="Int"/></this>
		<haxe_doc>Xml node types.

	@see https://haxe.org/manual/std-Xml.html</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="_Xml.XmlType_Impl_" params="" file="/home/vsts/work/1/s/std/Xml.hx" private="1" module="Xml">
	<Element public="1" get="inline" set="null" expr="cast 0" line="32" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents an XML element type.</haxe_doc>
	</Element>
	<PCData public="1" get="inline" set="null" expr="cast 1" line="37" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents XML parsed character data type.</haxe_doc>
	</PCData>
	<CData public="1" get="inline" set="null" expr="cast 2" line="42" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents XML character data type.</haxe_doc>
	</CData>
	<Comment public="1" get="inline" set="null" expr="cast 3" line="47" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents an XML comment type.</haxe_doc>
	</Comment>
	<DocType public="1" get="inline" set="null" expr="cast 4" line="52" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents an XML doctype element type.</haxe_doc>
	</DocType>
	<ProcessingInstruction public="1" get="inline" set="null" expr="cast 5" line="57" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents an XML processing instruction type.</haxe_doc>
	</ProcessingInstruction>
	<Document public="1" get="inline" set="null" expr="cast 6" line="62" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents an XML document type.</haxe_doc>
	</Document>
	<toString public="1" set="method" line="64" static="1">
		<f a="this">
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
	<meta>
		<m n=":hxGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="_Xml.XmlType_Impl_" params="" file="/home/vsts/work/1/s/std/Xml.hx" private="1" module="Xml">
		<Element public="1" get="inline" set="null" expr="cast 0" line="32" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents an XML element type.</haxe_doc>
		</Element>
		<PCData public="1" get="inline" set="null" expr="cast 1" line="37" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents XML parsed character data type.</haxe_doc>
		</PCData>
		<CData public="1" get="inline" set="null" expr="cast 2" line="42" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents XML character data type.</haxe_doc>
		</CData>
		<Comment public="1" get="inline" set="null" expr="cast 3" line="47" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents an XML comment type.</haxe_doc>
		</Comment>
		<DocType public="1" get="inline" set="null" expr="cast 4" line="52" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents an XML doctype element type.</haxe_doc>
		</DocType>
		<ProcessingInstruction public="1" get="inline" set="null" expr="cast 5" line="57" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents an XML processing instruction type.</haxe_doc>
		</ProcessingInstruction>
		<Document public="1" get="inline" set="null" expr="cast 6" line="62" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents an XML document type.</haxe_doc>
		</Document>
		<toString public="1" set="method" line="64" static="1">
			<f a="this">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
		<meta>
			<m n=":hxGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="Xml" params="" file="/home/vsts/work/1/s/std/Xml.hx">
		<Element public="1" set="null" expr="XmlType.Element" line="86" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Element</e></m></meta>
			<haxe_doc>XML element type.</haxe_doc>
		</Element>
		<PCData public="1" set="null" expr="XmlType.PCData" line="91" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.PCData</e></m></meta>
			<haxe_doc>XML parsed character data type.</haxe_doc>
		</PCData>
		<CData public="1" set="null" expr="XmlType.CData" line="96" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.CData</e></m></meta>
			<haxe_doc>XML character data type.</haxe_doc>
		</CData>
		<Comment public="1" set="null" expr="XmlType.Comment" line="101" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Comment</e></m></meta>
			<haxe_doc>XML comment type.</haxe_doc>
		</Comment>
		<DocType public="1" set="null" expr="XmlType.DocType" line="106" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.DocType</e></m></meta>
			<haxe_doc>XML doctype element type.</haxe_doc>
		</DocType>
		<ProcessingInstruction public="1" set="null" expr="XmlType.ProcessingInstruction" line="111" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.ProcessingInstruction</e></m></meta>
			<haxe_doc>XML processing instruction type.</haxe_doc>
		</ProcessingInstruction>
		<Document public="1" set="null" expr="XmlType.Document" line="116" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Document</e></m></meta>
			<haxe_doc>XML document type.</haxe_doc>
		</Document>
		<parse public="1" set="method" line="121" static="1">
			<f a="str">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Parses the String into an Xml document.</haxe_doc>
		</parse>
		<createElement public="1" set="method" line="182" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createElement>
		<createPCData public="1" set="method" line="191" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createPCData>
		<createCData public="1" set="method" line="200" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createCData>
		<createComment public="1" set="method" line="209" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createComment>
		<createDocType public="1" set="method" line="218" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocType>
		<createProcessingInstruction public="1" set="method" line="227" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createProcessingInstruction>
		<createDocument public="1" set="method" line="236" static="1">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocument>
		<nodeType public="1" set="null">
			<x path="XmlType"/>
			<haxe_doc>Returns the type of the Xml Node. This should be used before
		accessing other functions since some might raise an exception
		if the node type is not correct.</haxe_doc>
		</nodeType>
		<nodeName public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>Returns the node name of an Element.</haxe_doc>
		</nodeName>
		<nodeValue public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>Returns the node value. Only works if the Xml node is not an Element or a Document.</haxe_doc>
		</nodeValue>
		<parent public="1" set="null">
			<c path="Xml"/>
			<haxe_doc>Returns the parent object in the Xml hierarchy.
		The parent can be `null`, an Element or a Document.</haxe_doc>
		</parent>
		<children><c path="Array"><c path="Xml"/></c></children>
		<attributeMap><t path="Map">
	<c path="String"/>
	<c path="String"/>
</t></attributeMap>
		<get_nodeName get="inline" set="null" line="151"><f a=""><c path="String"/></f></get_nodeName>
		<set_nodeName get="inline" set="null" line="158"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></set_nodeName>
		<get_nodeValue get="inline" set="null" line="165"><f a=""><c path="String"/></f></get_nodeValue>
		<set_nodeValue get="inline" set="null" line="172"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></set_nodeValue>
		<get public="1" set="method" line="244">
			<f a="att">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the given attribute of an Element node. Returns `null` if not found.
		Attributes are case-sensitive.</haxe_doc>
		</get>
		<set public="1" set="method" line="255">
			<f a="att:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the given attribute value for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</set>
		<remove public="1" set="method" line="266">
			<f a="att">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an attribute for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="277">
			<f a="att">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the Element node has a given attribute.
		Attributes are case-sensitive.</haxe_doc>
		</exists>
		<attributes public="1" set="method" line="287">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>Returns an `Iterator` on all the attribute names.</haxe_doc>
		</attributes>
		<iterator public="1" get="inline" set="null" line="298">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</iterator>
		<elements public="1" set="method" line="307">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elements>
		<elementsNamed public="1" set="method" line="317">
			<f a="name">
				<c path="String"/>
				<t path="Iterator"><c path="Xml"/></t>
			</f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements with the given nodeName.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elementsNamed>
		<firstChild public="1" get="inline" set="null" line="329">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node.</haxe_doc>
		</firstChild>
		<firstElement public="1" set="method" line="337">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node which is an Element.</haxe_doc>
		</firstElement>
		<addChild public="1" set="method" line="353">
			<f a="x">
				<c path="Xml"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a child node to the Document or Element.
		A child node can only be inside one given parent node, which is indicated by the `parent` property.
		If the child is already inside this Document or Element, it will be moved to the last position among the Document or Element's children.
		If the child node was previously inside a different node, it will be moved to this Document or Element.</haxe_doc>
		</addChild>
		<removeChild public="1" set="method" line="366">
			<f a="x">
				<c path="Xml"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes a child from the Document or Element.
		Returns true if the child was successfuly removed.</haxe_doc>
		</removeChild>
		<insertChild public="1" set="method" line="381">
			<f a="x:pos">
				<c path="Xml"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts a child at the given position among the other childs.
		A child node can only be inside one given parent node, which is indicated by the [parent] property.
		If the child is already inside this Document or Element, it will be moved to the new position among the Document or Element's children.
		If the child node was previously inside a different node, it will be moved to this Document or Element.</haxe_doc>
		</insertChild>
		<toString public="1" get="inline" set="null" line="393">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of the Xml node.</haxe_doc>
		</toString>
		<ensureElementType get="inline" set="null" line="403"><f a=""><x path="Void"/></f></ensureElementType>
		<new set="method" line="397"><f a="nodeType">
	<x path="XmlType"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Cross-platform Xml API.

	@see https://haxe.org/manual/std-Xml.html</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="cs.Boot" params="" file="/home/vsts/work/1/s/std/cs/Boot.hx">
		<init public="1" set="method" line="43" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
		</init>
		<meta>
			<m n=":hxGen"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</class>
	<abstract path="cs.CsStruct" params="" file="/home/vsts/work/1/s/std/cs/Constraints.hx" module="cs.Constraints">
		<from><icast><d/></icast></from>
		<this><x path="cs.CsStruct"/></this>
		<haxe_doc><![CDATA[The type argument must be a value type. Any value type except Nullable_1<T>
	can be specified.

	It is intended to be used as a native cs type parameter constraint, when
	using `@:nativeGen`. This constraint won't have any effect on Haxe code.
	If used as a real type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="cs.CsClass" params="" file="/home/vsts/work/1/s/std/cs/Constraints.hx" module="cs.Constraints">
		<from><icast><d/></icast></from>
		<this><x path="cs.CsClass"/></this>
		<haxe_doc>The type argument must be a reference type. This constraint applies also to
	any class, interface, delegate, or array type.

	It is intended to be used as a native cs type parameter constraint, when
	using `@:nativeGen`. This constraint won't have any effect on Haxe code.
	If used as a real type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="cs.Flags" params="T" file="/home/vsts/work/1/s/std/cs/Flags.hx">
		<from><icast><c path="cs.Flags.T"/></icast></from>
		<this><c path="cs.Flags.T"/></this>
		<to><icast><c path="cs.Flags.T"/></icast></to>
		<haxe_doc>Use this type to have access to the bitwise operators of C# enums that have a `cs.system.FlagsAttribute` attribute.

	Usage example:

	```haxe
	import cs.system.reflection.BindingFlags;
	var binding = new Flags(BindingFlags.Public) | BindingFlags.Static | BindingFlags.NonPublic;
	```</haxe_doc>
		<meta><m n=":hxGen"/></meta>
		<impl><class path="cs._Flags.Flags_Impl_" params="" file="/home/vsts/work/1/s/std/cs/Flags.hx" private="1" module="cs.Flags">
	<_new public="1" get="inline" set="null" line="40" static="1">
		<f a="?initial">
			<x path="Null"><c path="cs.Flags.T"/></x>
			<x path="cs.Flags"><c path="cs.Flags.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Creates a new `Flags` type with an optional initial value. If no initial value was specified,
		the default enum value for an empty flags attribute is specified</haxe_doc>
	</_new>
	<add public="1" get="inline" set="null" line="47" static="1">
		<f a="this:flags">
			<c path="cs.Flags.T"/>
			<x path="cs.Flags"><c path="cs.Flags.T"/></x>
			<x path="cs.Flags"><c path="cs.Flags.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A | B</e></m>
		</meta>
		<haxe_doc>Accessible through the bitwise OR operator (`|`). Returns a new `Flags` type with the flags
		passed at `flags` added to it.</haxe_doc>
	</add>
	<bitAnd public="1" get="inline" set="null" line="55" static="1">
		<f a="this:flags">
			<c path="cs.Flags.T"/>
			<x path="cs.Flags"><c path="cs.Flags.T"/></x>
			<x path="cs.Flags"><c path="cs.Flags.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e><![CDATA[A & B]]></e></m>
		</meta>
		<haxe_doc><![CDATA[Accessible through the bitwise AND operator (`&`). Returns a new `Flags` type with
		the flags that are set on both `this` and `flags`]]></haxe_doc>
	</bitAnd>
	<bitXor public="1" get="inline" set="null" line="62" static="1">
		<f a="this:flags">
			<c path="cs.Flags.T"/>
			<x path="cs.Flags"><c path="cs.Flags.T"/></x>
			<x path="cs.Flags"><c path="cs.Flags.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A ^ B</e></m>
		</meta>
		<haxe_doc>Accessible through the bitwise XOR operator (`^`).</haxe_doc>
	</bitXor>
	<bitNeg public="1" get="inline" set="null" line="70" static="1">
		<f a="this">
			<c path="cs.Flags.T"/>
			<x path="cs.Flags"><c path="cs.Flags.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>~A</e></m>
		</meta>
		<haxe_doc>Accesible through the bitwise negation operator (`~`). Returns a new `Flags` type
		with all unset flags as set - but the ones that are set already.</haxe_doc>
	</bitNeg>
	<remove public="1" get="inline" set="null" line="77" static="1">
		<f a="this:flags">
			<c path="cs.Flags.T"/>
			<x path="cs.Flags"><c path="cs.Flags.T"/></x>
			<x path="cs.Flags"><c path="cs.Flags.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a new `Flags` type with all flags set by `flags` unset</haxe_doc>
	</remove>
	<has public="1" get="inline" set="null" line="84" static="1">
		<f a="this:flag">
			<c path="cs.Flags.T"/>
			<c path="cs.Flags.T"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns whether `flag` is present on `this` type</haxe_doc>
	</has>
	<hasAny public="1" get="inline" set="null" line="91" static="1">
		<f a="this:flags">
			<c path="cs.Flags.T"/>
			<x path="cs.Flags"><c path="cs.Flags.T"/></x>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns whether `this` type has any flag set by `flags` also set</haxe_doc>
	</hasAny>
	<hasAll public="1" get="inline" set="null" line="98" static="1">
		<f a="this:flags">
			<c path="cs.Flags.T"/>
			<x path="cs.Flags"><c path="cs.Flags.T"/></x>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns whether `this` type has all flags set by `flags` also set</haxe_doc>
	</hasAll>
	<underlying get="inline" set="null" line="102" static="1">
		<f a="this">
			<c path="cs.Flags.T"/>
			<x path="cs._Flags.EnumUnderlying"><c path="cs.Flags.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</underlying>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs._Flags.Flags_Impl_" params="" file="/home/vsts/work/1/s/std/cs/Flags.hx" private="1" module="cs.Flags">
		<_new public="1" get="inline" set="null" line="40" static="1">
			<f a="?initial">
				<x path="Null"><c path="cs.Flags.T"/></x>
				<x path="cs.Flags"><c path="cs.Flags.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Creates a new `Flags` type with an optional initial value. If no initial value was specified,
		the default enum value for an empty flags attribute is specified</haxe_doc>
		</_new>
		<add public="1" get="inline" set="null" line="47" static="1">
			<f a="this:flags">
				<c path="cs.Flags.T"/>
				<x path="cs.Flags"><c path="cs.Flags.T"/></x>
				<x path="cs.Flags"><c path="cs.Flags.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A | B</e></m>
			</meta>
			<haxe_doc>Accessible through the bitwise OR operator (`|`). Returns a new `Flags` type with the flags
		passed at `flags` added to it.</haxe_doc>
		</add>
		<bitAnd public="1" get="inline" set="null" line="55" static="1">
			<f a="this:flags">
				<c path="cs.Flags.T"/>
				<x path="cs.Flags"><c path="cs.Flags.T"/></x>
				<x path="cs.Flags"><c path="cs.Flags.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e><![CDATA[A & B]]></e></m>
			</meta>
			<haxe_doc><![CDATA[Accessible through the bitwise AND operator (`&`). Returns a new `Flags` type with
		the flags that are set on both `this` and `flags`]]></haxe_doc>
		</bitAnd>
		<bitXor public="1" get="inline" set="null" line="62" static="1">
			<f a="this:flags">
				<c path="cs.Flags.T"/>
				<x path="cs.Flags"><c path="cs.Flags.T"/></x>
				<x path="cs.Flags"><c path="cs.Flags.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A ^ B</e></m>
			</meta>
			<haxe_doc>Accessible through the bitwise XOR operator (`^`).</haxe_doc>
		</bitXor>
		<bitNeg public="1" get="inline" set="null" line="70" static="1">
			<f a="this">
				<c path="cs.Flags.T"/>
				<x path="cs.Flags"><c path="cs.Flags.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>~A</e></m>
			</meta>
			<haxe_doc>Accesible through the bitwise negation operator (`~`). Returns a new `Flags` type
		with all unset flags as set - but the ones that are set already.</haxe_doc>
		</bitNeg>
		<remove public="1" get="inline" set="null" line="77" static="1">
			<f a="this:flags">
				<c path="cs.Flags.T"/>
				<x path="cs.Flags"><c path="cs.Flags.T"/></x>
				<x path="cs.Flags"><c path="cs.Flags.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a new `Flags` type with all flags set by `flags` unset</haxe_doc>
		</remove>
		<has public="1" get="inline" set="null" line="84" static="1">
			<f a="this:flag">
				<c path="cs.Flags.T"/>
				<c path="cs.Flags.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns whether `flag` is present on `this` type</haxe_doc>
		</has>
		<hasAny public="1" get="inline" set="null" line="91" static="1">
			<f a="this:flags">
				<c path="cs.Flags.T"/>
				<x path="cs.Flags"><c path="cs.Flags.T"/></x>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns whether `this` type has any flag set by `flags` also set</haxe_doc>
		</hasAny>
		<hasAll public="1" get="inline" set="null" line="98" static="1">
			<f a="this:flags">
				<c path="cs.Flags.T"/>
				<x path="cs.Flags"><c path="cs.Flags.T"/></x>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns whether `this` type has all flags set by `flags` also set</haxe_doc>
		</hasAll>
		<underlying get="inline" set="null" line="102" static="1">
			<f a="this">
				<c path="cs.Flags.T"/>
				<x path="cs._Flags.EnumUnderlying"><c path="cs.Flags.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</underlying>
		<meta><m n=":hxGen"/></meta>
	</class>
	<abstract path="cs._Flags.EnumUnderlying" params="T" file="/home/vsts/work/1/s/std/cs/Flags.hx" private="1" module="cs.Flags">
		<from><icast><c path="cs._Flags.EnumUnderlying.T"/></icast></from>
		<this><x path="cs._Flags.EnumUnderlying"><c path="cs._Flags.EnumUnderlying.T"/></x></this>
		<to><icast><c path="cs._Flags.EnumUnderlying.T"/></icast></to>
		<meta>
			<m n=":hxGen"/>
			<m n=":coreType"/>
		</meta>
		<impl><class path="cs._Flags.EnumUnderlying_Impl_" params="" file="/home/vsts/work/1/s/std/cs/Flags.hx" private="1" module="cs.Flags">
	<or public="1" params="T" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs._Flags.EnumUnderlying"><c path="or.T"/></x>
			<x path="cs._Flags.EnumUnderlying"><c path="or.T"/></x>
			<c path="or.T"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A | B</e></m>
		</meta>
	</or>
	<xor public="1" params="T" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs._Flags.EnumUnderlying"><c path="xor.T"/></x>
			<x path="cs._Flags.EnumUnderlying"><c path="xor.T"/></x>
			<c path="xor.T"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A ^ B</e></m>
		</meta>
	</xor>
	<and public="1" params="T" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs._Flags.EnumUnderlying"><c path="and.T"/></x>
			<x path="cs._Flags.EnumUnderlying"><c path="and.T"/></x>
			<c path="and.T"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A & B]]></e></m>
		</meta>
	</and>
	<bneg public="1" params="T" set="method" static="1">
		<f a="t">
			<x path="cs._Flags.EnumUnderlying"><c path="bneg.T"/></x>
			<c path="bneg.T"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>~A</e></m>
		</meta>
	</bneg>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs._Flags.EnumUnderlying_Impl_" params="" file="/home/vsts/work/1/s/std/cs/Flags.hx" private="1" module="cs.Flags">
		<or public="1" params="T" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs._Flags.EnumUnderlying"><c path="or.T"/></x>
				<x path="cs._Flags.EnumUnderlying"><c path="or.T"/></x>
				<c path="or.T"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A | B</e></m>
			</meta>
		</or>
		<xor public="1" params="T" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs._Flags.EnumUnderlying"><c path="xor.T"/></x>
				<x path="cs._Flags.EnumUnderlying"><c path="xor.T"/></x>
				<c path="xor.T"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A ^ B</e></m>
			</meta>
		</xor>
		<and public="1" params="T" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs._Flags.EnumUnderlying"><c path="and.T"/></x>
				<x path="cs._Flags.EnumUnderlying"><c path="and.T"/></x>
				<c path="and.T"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A & B]]></e></m>
			</meta>
		</and>
		<bneg public="1" params="T" set="method" static="1">
			<f a="t">
				<x path="cs._Flags.EnumUnderlying"><c path="bneg.T"/></x>
				<c path="bneg.T"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>~A</e></m>
			</meta>
		</bneg>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="cs.Lib" params="" file="/home/vsts/work/1/s/std/cs/Lib.hx">
		<decimalSeparator static="1"><c path="String"/></decimalSeparator>
		<applyCultureChanges public="1" set="method" line="38" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Changes the current culture settings to allow a consistent cross-target behavior.
		Currently the only change made is in regard to the decimal separator, which is always set to "."</haxe_doc>
		</applyCultureChanges>
		<revertDefaultCulture public="1" set="method" line="48" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Reverts the culture changes to the default settings.</haxe_doc>
		</revertDefaultCulture>
		<nativeArray public="1" params="T" get="inline" set="null" line="59" static="1">
			<f a="arr:equalLengthRequired">
				<c path="Array"><c path="nativeArray.T"/></c>
				<x path="Bool"/>
				<c path="cs.NativeArray"><c path="nativeArray.T"/></c>
			</f>
			<haxe_doc>Returns a native array from the supplied Array. This native array is unsafe to be written on,
		as it may or may not be linked to the actual Array implementation.

		If equalLengthRequired is true, the result might be a copy of an array with the correct size.</haxe_doc>
		</nativeArray>
		<p_nativeArray params="T" set="method" line="71" static="1">
			<f a="arr:ret">
				<c path="Array"><c path="p_nativeArray.T"/></c>
				<c path="cs.system.Array"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</p_nativeArray>
		<as public="1" params="T" get="inline" set="null" line="85" static="1">
			<f a="obj:cl">
				<d/>
				<x path="Class"><c path="as.T"/></x>
				<c path="as.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Provides support for the "as" keyword in C#.
		If the object is not of the supplied type "T", it will return null instead of rasing an exception.

		This function will not work with Value Types (such as Int, Float, Bool...)</haxe_doc>
		</as>
		<fromNativeType public="1" get="inline" set="null" line="95" static="1">
			<f a="t">
				<c path="cs.system.Type"/>
				<x path="Class"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Returns a Class<> equivalent to the native System.Type type.

		Currently Haxe's Class<> is equivalent to System.Type, but this is an implementation detail.
		This may change in the future, so use this function whenever you need to perform such conversion.]]></haxe_doc>
		</fromNativeType>
		<toNativeType public="1" get="inline" set="null" line="105" static="1">
			<f a="cl">
				<x path="Class"><d/></x>
				<c path="cs.system.Type"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Returns a System.Type equivalent to the Haxe Class<> type.

		Currently Haxe's Class<> is equivalent to System.Type, but this is an implementation detail.
		This may change in the future, so use this function whenever you need to perform such conversion.]]></haxe_doc>
		</toNativeType>
		<toNativeEnum public="1" get="inline" set="null" line="112" static="1">
			<f a="cl">
				<x path="Enum"><d/></x>
				<c path="cs.system.Type"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Returns a System.Type equivalent to the Haxe Enum<> type.]]></haxe_doc>
		</toNativeEnum>
		<nativeType public="1" get="inline" set="null" line="121" static="1">
			<f a="obj">
				<d/>
				<c path="cs.system.Type"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":deprecated"><e>"The function `nativeType` is deprecated and will be removed in later versions. Please use `getNativeType` instead"</e></m>
			</meta>
			<haxe_doc>Gets the native System.Type from the supplied object. Will throw an exception in case of null being passed.
		[deprecated] - use `getNativeType` instead</haxe_doc>
		</nativeType>
		<getNativeType public="1" get="inline" set="null" line="128" static="1">
			<f a="obj">
				<d/>
				<c path="cs.system.Type"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Gets the native System.Type from the supplied object. Will throw an exception in case of null being passed.</haxe_doc>
		</getNativeType>
		<array public="1" params="T" get="inline" set="null" line="147" static="1">
			<f a="native">
				<c path="cs.NativeArray"><c path="array.T"/></c>
				<c path="Array"><c path="array.T"/></c>
			</f>
			<haxe_doc>Returns a Haxe Array of a native Array.
		Unless `erase_generics` is defined, it won't copy the contents of the native array,
		so unless any operation triggers an array resize, all changes made to the Haxe array
		will affect the native array argument.</haxe_doc>
		</array>
		<arrayAlloc public="1" params="T" get="inline" set="null" line="159" static="1">
			<f a="size">
				<x path="Int"/>
				<c path="Array"><c path="arrayAlloc.T"/></c>
			</f>
			<haxe_doc>Allocates a new Haxe Array with a predetermined size</haxe_doc>
		</arrayAlloc>
		<rethrow public="1" get="inline" set="null" line="167" static="1">
			<f a="e">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Rethrow an exception. This is useful when manually filtering an exception in order
		to keep the previous exception stack.</haxe_doc>
		</rethrow>
		<checked public="1" params="V" get="inline" set="null" line="184" static="1">
			<f a="block">
				<c path="checked.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates a "checked" block, which throws exceptions for overflows.

		Usage:
			cs.Lib.checked({
				var x = 1000;
				while(true)
				{
					x *= x;
				}
			});
		This method only exists at compile-time, so it can't be called via reflection.</haxe_doc>
		</checked>
		<lock public="1" params="O:V" get="inline" set="null" line="195" static="1">
			<f a="obj:block">
				<c path="lock.O"/>
				<c path="lock.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Ensures that one thread does not enter a critical section of code while another thread
		is in the critical section. If another thread attempts to enter a locked code, it
		will wait, block, until the object is released.

		This method only exists at compile-time, so it can't be called via reflection.</haxe_doc>
		</lock>
		<fixed public="1" params="V" get="inline" set="null" line="217" static="1">
			<f a="block">
				<c path="fixed.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Marks its parameters as fixed objects inside the defined block.
		The first variable declarations that use cs.Lib.pointerOfArray() will be the fixed definitions.
		Usage:
			cs.Lib.fixed({
				var obj1 = cs.Lib.pointerOfArray(someArray);
				var obj2 = cs.Lib.pointerOfArray(someArray2);
				var obj3 = cs.Lib.pointerOfArray(someArray3);
				//from now on, obj1, obj2 and obj3 are fixed
				//we cannot change obj1, obj2 or obj3 variables like this:
				//obj1++;
			});

		This method only exists at compile-time, so it can't be called via reflection.</haxe_doc>
		</fixed>
		<unsafe public="1" params="V" get="inline" set="null" line="230" static="1">
			<f a="block">
				<c path="unsafe.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Marks the contained block as an unsafe block, meaning that it can contain unsafe code.
		Usage:
			cs.Lib.unsafe({
				//unsafe code is allowed inside here
			});

		This method only exists at compile-time, so it can't be called via reflection.</haxe_doc>
		</unsafe>
		<addressOf public="1" params="T" get="inline" set="null" line="247" static="1">
			<f a="variable">
				<c path="addressOf.T"/>
				<x path="cs.Pointer"><c path="addressOf.T"/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Gets the pointer to the address of current local. Equivalent to the "&" operator in C#
		Usage:
			var x:Int = 0;
			cs.Lib.unsafe({
				var addr = cs.Lib.addressOf(x);
				x[0] = 42;
			});
			trace(x); //42

		This method only exists at compile-time, so it can't be called via reflection.
		Warning: This method will only work if a local variable is passed as an argument.]]></haxe_doc>
		</addressOf>
		<valueOf public="1" params="T" get="inline" set="null" line="265" static="1">
			<f a="pointer">
				<x path="cs.Pointer"><c path="valueOf.T"/></x>
				<c path="valueOf.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Gets the value of the pointer address.
		Usage:
			var x:Int = 0;
			cs.Lib.unsafe({
				var addr = cs.Lib.addressOf(x);
				trace(cs.Lib.valueOf(addr)); //0
				addr[0] = 42;
				trace(cs.Lib.valueOf(addr)); //42
			});
			trace(x); //42

		This method only exists at compile-time, so it can't be called via reflection.</haxe_doc>
		</valueOf>
		<pointerOfArray public="1" params="T" get="inline" set="null" line="285" static="1">
			<f a="array">
				<c path="cs.NativeArray"><c path="pointerOfArray.T"/></c>
				<x path="cs.Pointer"><c path="pointerOfArray.T"/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Transforms a managed native array into a Pointer. Must be inside a fixed statement
		Usage:
			var x:cs.NativeArray<Int> = new cs.NativeArray(1);
			cs.Lib.unsafe({
				cs.Lib.fixed({
					var addr = cs.Lib.pointerOfArray(x);
					trace(cs.Lib.valueOf(addr)); //0
					addr[0] = 42;
					trace(cs.Lib.valueOf(addr)); //42
				});
			});
			trace(x[0]); //42

		This method only exists at compile-time, so it can't be called via reflection.]]></haxe_doc>
		</pointerOfArray>
		<sizeof public="1" get="inline" set="null" line="292" static="1">
			<f a="struct">
				<x path="Class"><d/></x>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the byte size of the given struct. Only works with structs and basic types.</haxe_doc>
		</sizeof>
		<haxe_doc>Platform-specific C# Library. Provides some platform-specific functions for the C# target,
	such as conversion from haxe types to native types and vice-versa.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
		</meta>
	</class>
	<class path="cs._NativeArray.NativeArrayIterator" params="T" file="/home/vsts/work/1/s/std/cs/NativeArray.hx" private="1" module="cs.NativeArray">
		<arr public="1" set="null"><c path="cs.NativeArray"><c path="cs._NativeArray.NativeArrayIterator.T"/></c></arr>
		<idx public="1" set="null"><x path="UInt"/></idx>
		<hasNext public="1" get="inline" set="null" line="72"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="75"><f a=""><c path="cs._NativeArray.NativeArrayIterator.T"/></f></next>
		<new public="1" get="inline" set="null" line="67"><f a="arr">
	<c path="cs.NativeArray"><c path="cs._NativeArray.NativeArrayIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":hxGen"/>
			<m n=":dce"/>
		</meta>
	</class>
	<typedef path="cs.Out" params="T" file="/home/vsts/work/1/s/std/cs/Out.hx">
		<c path="cs.Out.T"/>
		<haxe_doc>This type represents "out" types for C# function parameters.
	It only has effect on function parameters, and conversion to/from the referenced type is automatic.

	Note: Using this type should be considered a bad practice unless overriding a native function is needed.</haxe_doc>
		<meta>
			<m n=":nativeGen"/>
			<m n=":analyzer"><e>no_local_dce</e></m>
			<m n=":semantics"><e>reference</e></m>
		</meta>
	</typedef>
	<abstract path="cs.Pointer" params="T" file="/home/vsts/work/1/s/std/cs/Pointer.hx">
		<from>
			<icast><x path="cs.PointerAccess"><c path="cs.Pointer.T"/></x></icast>
			<icast><x path="cs.Int64"/></icast>
		</from>
		<this><x path="cs.Pointer"><c path="cs.Pointer.T"/></x></this>
		<to><icast><x path="cs.PointerAccess"><c path="cs.Pointer.T"/></x></icast></to>
		<haxe_doc><![CDATA[This type represents pointer types for C# function parameters. It should only
	be used inside an unsafe context (not checked by the Haxe compiler)

	C# code:
		int[] src;
		fixed (int* pSrc = src)
		{
			...
		}
	Haxe code:
		var src:NativeArray<Int>;
		cs.Lib.fixed({
			var pSrc:cs.Pointer<Int> = cs.Lib.pointerOfArray(src);
			...
		});]]></haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":runtimeValue"/>
			<m n=":coreType"/>
		</meta>
		<impl><class path="cs._Pointer.Pointer_Impl_" params="" file="/home/vsts/work/1/s/std/cs/Pointer.hx" private="1" module="cs.Pointer">
	<addIp public="1" params="T" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Pointer"><c path="addIp.T"/></x>
			<x path="Int"/>
			<x path="cs.Pointer"><c path="addIp.T"/></x>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</addIp>
	<addp public="1" params="T" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Pointer"><c path="addp.T"/></x>
			<x path="cs.Int64"/>
			<x path="cs.Pointer"><c path="addp.T"/></x>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</addp>
	<mulIp public="1" params="T" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Pointer"><c path="mulIp.T"/></x>
			<x path="Int"/>
			<x path="cs.Pointer"><c path="mulIp.T"/></x>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</mulIp>
	<mulp public="1" params="T" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Pointer"><c path="mulp.T"/></x>
			<x path="cs.Int64"/>
			<x path="cs.Pointer"><c path="mulp.T"/></x>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</mulp>
	<modIp public="1" params="T" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Pointer"><c path="modIp.T"/></x>
			<x path="Int"/>
			<x path="cs.Pointer"><c path="modIp.T"/></x>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A % B</e></m>
		</meta>
	</modIp>
	<modp public="1" params="T" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Pointer"><c path="modp.T"/></x>
			<x path="cs.Int64"/>
			<x path="cs.Pointer"><c path="modp.T"/></x>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A % B</e></m>
		</meta>
	</modp>
	<subIp public="1" params="T" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Pointer"><c path="subIp.T"/></x>
			<x path="Int"/>
			<x path="cs.Pointer"><c path="subIp.T"/></x>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</subIp>
	<subp public="1" params="T" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Pointer"><c path="subp.T"/></x>
			<x path="cs.Int64"/>
			<x path="cs.Pointer"><c path="subp.T"/></x>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</subp>
	<divIp public="1" params="T" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Pointer"><c path="divIp.T"/></x>
			<x path="Int"/>
			<x path="cs.Pointer"><c path="divIp.T"/></x>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</divIp>
	<divp public="1" params="T" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Pointer"><c path="divp.T"/></x>
			<x path="cs.Int64"/>
			<x path="cs.Pointer"><c path="divp.T"/></x>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</divp>
	<orIp public="1" params="T" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Pointer"><c path="orIp.T"/></x>
			<x path="Int"/>
			<x path="cs.Pointer"><c path="orIp.T"/></x>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A | B</e></m>
		</meta>
	</orIp>
	<orp public="1" params="T" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Pointer"><c path="orp.T"/></x>
			<x path="cs.Int64"/>
			<x path="cs.Pointer"><c path="orp.T"/></x>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A | B</e></m>
		</meta>
	</orp>
	<xorIp public="1" params="T" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Pointer"><c path="xorIp.T"/></x>
			<x path="Int"/>
			<x path="cs.Pointer"><c path="xorIp.T"/></x>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A ^ B</e></m>
		</meta>
	</xorIp>
	<xorp public="1" params="T" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Pointer"><c path="xorp.T"/></x>
			<x path="cs.Int64"/>
			<x path="cs.Pointer"><c path="xorp.T"/></x>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A ^ B</e></m>
		</meta>
	</xorp>
	<andIp public="1" params="T" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Pointer"><c path="andIp.T"/></x>
			<x path="Int"/>
			<x path="cs.Pointer"><c path="andIp.T"/></x>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A & B]]></e></m>
		</meta>
	</andIp>
	<andp public="1" params="T" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Pointer"><c path="andp.T"/></x>
			<x path="cs.Int64"/>
			<x path="cs.Pointer"><c path="andp.T"/></x>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A & B]]></e></m>
		</meta>
	</andp>
	<shlIp public="1" params="T" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Pointer"><c path="shlIp.T"/></x>
			<x path="Int"/>
			<x path="cs.Pointer"><c path="shlIp.T"/></x>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A << B]]></e></m>
		</meta>
	</shlIp>
	<shlp public="1" params="T" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Pointer"><c path="shlp.T"/></x>
			<x path="cs.Int64"/>
			<x path="cs.Pointer"><c path="shlp.T"/></x>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A << B]]></e></m>
		</meta>
	</shlp>
	<shrIp public="1" params="T" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Pointer"><c path="shrIp.T"/></x>
			<x path="Int"/>
			<x path="cs.Pointer"><c path="shrIp.T"/></x>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >> B]]></e></m>
		</meta>
	</shrIp>
	<shrp public="1" params="T" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Pointer"><c path="shrp.T"/></x>
			<x path="cs.Int64"/>
			<x path="cs.Pointer"><c path="shrp.T"/></x>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >> B]]></e></m>
		</meta>
	</shrp>
	<gtp public="1" params="T" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Pointer"><c path="gtp.T"/></x>
			<x path="cs.Pointer"><c path="gtp.T"/></x>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</gtp>
	<gtep public="1" params="T" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Pointer"><c path="gtep.T"/></x>
			<x path="cs.Pointer"><c path="gtep.T"/></x>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</gtep>
	<ltp public="1" params="T" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Pointer"><c path="ltp.T"/></x>
			<x path="cs.Pointer"><c path="ltp.T"/></x>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</ltp>
	<ltep public="1" params="T" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Pointer"><c path="ltep.T"/></x>
			<x path="cs.Pointer"><c path="ltep.T"/></x>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</ltep>
	<bnegp public="1" params="T" set="method" static="1">
		<f a="t">
			<x path="cs.Pointer"><c path="bnegp.T"/></x>
			<x path="cs.Pointer"><c path="bnegp.T"/></x>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>~A</e></m>
		</meta>
	</bnegp>
	<prepp public="1" params="T" set="method" static="1">
		<f a="t">
			<x path="cs.Pointer"><c path="prepp.T"/></x>
			<x path="cs.Pointer"><c path="prepp.T"/></x>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</prepp>
	<prenn public="1" params="T" set="method" static="1">
		<f a="t">
			<x path="cs.Pointer"><c path="prenn.T"/></x>
			<x path="cs.Pointer"><c path="prenn.T"/></x>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A--</e></m>
		</meta>
	</prenn>
	<postpp public="1" params="T" set="method" static="1">
		<f a="t">
			<x path="cs.Pointer"><c path="postpp.T"/></x>
			<x path="cs.Pointer"><c path="postpp.T"/></x>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>++A</e></m>
		</meta>
	</postpp>
	<postnn public="1" params="T" set="method" static="1">
		<f a="t">
			<x path="cs.Pointer"><c path="postnn.T"/></x>
			<x path="cs.Pointer"><c path="postnn.T"/></x>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>--A</e></m>
		</meta>
	</postnn>
	<acc public="1" get="accessor" set="null" static="1">
		<x path="cs.PointerAccess"><c path="cs.Pointer.T"/></x>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a `cs.PointerAccess` type, which in turn allows the underlying Pointer's
		fields to be accessed.</haxe_doc>
	</acc>
	<get_acc get="inline" set="null" line="115" static="1">
		<f a="this">
			<x path="cs.Pointer"><c path="cs.Pointer.T"/></x>
			<x path="cs.PointerAccess"><c path="cs.Pointer.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</get_acc>
	<add public="1" get="inline" set="null" line="119" static="1">
		<f a="this:i">
			<x path="cs.Pointer"><c path="cs.Pointer.T"/></x>
			<x path="Int"/>
			<x path="cs.Pointer"><c path="cs.Pointer.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</add>
	<getIp public="1" params="T" set="method" static="1">
		<f a="p:at">
			<x path="cs.Pointer"><c path="getIp.T"/></x>
			<x path="Int"/>
			<c path="getIp.T"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":arrayAccess"/>
		</meta>
	</getIp>
	<setIp public="1" params="T" set="method" static="1">
		<f a="p:at:val">
			<x path="cs.Pointer"><c path="setIp.T"/></x>
			<x path="Int"/>
			<c path="setIp.T"/>
			<c path="setIp.T"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":arrayAccess"/>
		</meta>
	</setIp>
	<getp public="1" params="T" set="method" static="1">
		<f a="p:at">
			<x path="cs.Pointer"><c path="getp.T"/></x>
			<x path="cs.Int64"/>
			<c path="getp.T"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":arrayAccess"/>
		</meta>
	</getp>
	<setp public="1" params="T" set="method" static="1">
		<f a="p:at:val">
			<x path="cs.Pointer"><c path="setp.T"/></x>
			<x path="cs.Int64"/>
			<c path="setp.T"/>
			<c path="setp.T"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":arrayAccess"/>
		</meta>
	</setp>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs._Pointer.Pointer_Impl_" params="" file="/home/vsts/work/1/s/std/cs/Pointer.hx" private="1" module="cs.Pointer">
		<addIp public="1" params="T" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Pointer"><c path="addIp.T"/></x>
				<x path="Int"/>
				<x path="cs.Pointer"><c path="addIp.T"/></x>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</addIp>
		<addp public="1" params="T" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Pointer"><c path="addp.T"/></x>
				<x path="cs.Int64"/>
				<x path="cs.Pointer"><c path="addp.T"/></x>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</addp>
		<mulIp public="1" params="T" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Pointer"><c path="mulIp.T"/></x>
				<x path="Int"/>
				<x path="cs.Pointer"><c path="mulIp.T"/></x>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</mulIp>
		<mulp public="1" params="T" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Pointer"><c path="mulp.T"/></x>
				<x path="cs.Int64"/>
				<x path="cs.Pointer"><c path="mulp.T"/></x>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</mulp>
		<modIp public="1" params="T" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Pointer"><c path="modIp.T"/></x>
				<x path="Int"/>
				<x path="cs.Pointer"><c path="modIp.T"/></x>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A % B</e></m>
			</meta>
		</modIp>
		<modp public="1" params="T" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Pointer"><c path="modp.T"/></x>
				<x path="cs.Int64"/>
				<x path="cs.Pointer"><c path="modp.T"/></x>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A % B</e></m>
			</meta>
		</modp>
		<subIp public="1" params="T" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Pointer"><c path="subIp.T"/></x>
				<x path="Int"/>
				<x path="cs.Pointer"><c path="subIp.T"/></x>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</subIp>
		<subp public="1" params="T" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Pointer"><c path="subp.T"/></x>
				<x path="cs.Int64"/>
				<x path="cs.Pointer"><c path="subp.T"/></x>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</subp>
		<divIp public="1" params="T" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Pointer"><c path="divIp.T"/></x>
				<x path="Int"/>
				<x path="cs.Pointer"><c path="divIp.T"/></x>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</divIp>
		<divp public="1" params="T" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Pointer"><c path="divp.T"/></x>
				<x path="cs.Int64"/>
				<x path="cs.Pointer"><c path="divp.T"/></x>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</divp>
		<orIp public="1" params="T" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Pointer"><c path="orIp.T"/></x>
				<x path="Int"/>
				<x path="cs.Pointer"><c path="orIp.T"/></x>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A | B</e></m>
			</meta>
		</orIp>
		<orp public="1" params="T" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Pointer"><c path="orp.T"/></x>
				<x path="cs.Int64"/>
				<x path="cs.Pointer"><c path="orp.T"/></x>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A | B</e></m>
			</meta>
		</orp>
		<xorIp public="1" params="T" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Pointer"><c path="xorIp.T"/></x>
				<x path="Int"/>
				<x path="cs.Pointer"><c path="xorIp.T"/></x>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A ^ B</e></m>
			</meta>
		</xorIp>
		<xorp public="1" params="T" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Pointer"><c path="xorp.T"/></x>
				<x path="cs.Int64"/>
				<x path="cs.Pointer"><c path="xorp.T"/></x>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A ^ B</e></m>
			</meta>
		</xorp>
		<andIp public="1" params="T" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Pointer"><c path="andIp.T"/></x>
				<x path="Int"/>
				<x path="cs.Pointer"><c path="andIp.T"/></x>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A & B]]></e></m>
			</meta>
		</andIp>
		<andp public="1" params="T" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Pointer"><c path="andp.T"/></x>
				<x path="cs.Int64"/>
				<x path="cs.Pointer"><c path="andp.T"/></x>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A & B]]></e></m>
			</meta>
		</andp>
		<shlIp public="1" params="T" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Pointer"><c path="shlIp.T"/></x>
				<x path="Int"/>
				<x path="cs.Pointer"><c path="shlIp.T"/></x>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A << B]]></e></m>
			</meta>
		</shlIp>
		<shlp public="1" params="T" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Pointer"><c path="shlp.T"/></x>
				<x path="cs.Int64"/>
				<x path="cs.Pointer"><c path="shlp.T"/></x>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A << B]]></e></m>
			</meta>
		</shlp>
		<shrIp public="1" params="T" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Pointer"><c path="shrIp.T"/></x>
				<x path="Int"/>
				<x path="cs.Pointer"><c path="shrIp.T"/></x>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >> B]]></e></m>
			</meta>
		</shrIp>
		<shrp public="1" params="T" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Pointer"><c path="shrp.T"/></x>
				<x path="cs.Int64"/>
				<x path="cs.Pointer"><c path="shrp.T"/></x>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >> B]]></e></m>
			</meta>
		</shrp>
		<gtp public="1" params="T" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Pointer"><c path="gtp.T"/></x>
				<x path="cs.Pointer"><c path="gtp.T"/></x>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</gtp>
		<gtep public="1" params="T" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Pointer"><c path="gtep.T"/></x>
				<x path="cs.Pointer"><c path="gtep.T"/></x>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</gtep>
		<ltp public="1" params="T" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Pointer"><c path="ltp.T"/></x>
				<x path="cs.Pointer"><c path="ltp.T"/></x>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</ltp>
		<ltep public="1" params="T" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Pointer"><c path="ltep.T"/></x>
				<x path="cs.Pointer"><c path="ltep.T"/></x>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</ltep>
		<bnegp public="1" params="T" set="method" static="1">
			<f a="t">
				<x path="cs.Pointer"><c path="bnegp.T"/></x>
				<x path="cs.Pointer"><c path="bnegp.T"/></x>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>~A</e></m>
			</meta>
		</bnegp>
		<prepp public="1" params="T" set="method" static="1">
			<f a="t">
				<x path="cs.Pointer"><c path="prepp.T"/></x>
				<x path="cs.Pointer"><c path="prepp.T"/></x>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</prepp>
		<prenn public="1" params="T" set="method" static="1">
			<f a="t">
				<x path="cs.Pointer"><c path="prenn.T"/></x>
				<x path="cs.Pointer"><c path="prenn.T"/></x>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A--</e></m>
			</meta>
		</prenn>
		<postpp public="1" params="T" set="method" static="1">
			<f a="t">
				<x path="cs.Pointer"><c path="postpp.T"/></x>
				<x path="cs.Pointer"><c path="postpp.T"/></x>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>++A</e></m>
			</meta>
		</postpp>
		<postnn public="1" params="T" set="method" static="1">
			<f a="t">
				<x path="cs.Pointer"><c path="postnn.T"/></x>
				<x path="cs.Pointer"><c path="postnn.T"/></x>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>--A</e></m>
			</meta>
		</postnn>
		<acc public="1" get="accessor" set="null" static="1">
			<x path="cs.PointerAccess"><c path="cs.Pointer.T"/></x>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a `cs.PointerAccess` type, which in turn allows the underlying Pointer's
		fields to be accessed.</haxe_doc>
		</acc>
		<get_acc get="inline" set="null" line="115" static="1">
			<f a="this">
				<x path="cs.Pointer"><c path="cs.Pointer.T"/></x>
				<x path="cs.PointerAccess"><c path="cs.Pointer.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</get_acc>
		<add public="1" get="inline" set="null" line="119" static="1">
			<f a="this:i">
				<x path="cs.Pointer"><c path="cs.Pointer.T"/></x>
				<x path="Int"/>
				<x path="cs.Pointer"><c path="cs.Pointer.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</add>
		<getIp public="1" params="T" set="method" static="1">
			<f a="p:at">
				<x path="cs.Pointer"><c path="getIp.T"/></x>
				<x path="Int"/>
				<c path="getIp.T"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":arrayAccess"/>
			</meta>
		</getIp>
		<setIp public="1" params="T" set="method" static="1">
			<f a="p:at:val">
				<x path="cs.Pointer"><c path="setIp.T"/></x>
				<x path="Int"/>
				<c path="setIp.T"/>
				<c path="setIp.T"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":arrayAccess"/>
			</meta>
		</setIp>
		<getp public="1" params="T" set="method" static="1">
			<f a="p:at">
				<x path="cs.Pointer"><c path="getp.T"/></x>
				<x path="cs.Int64"/>
				<c path="getp.T"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":arrayAccess"/>
			</meta>
		</getp>
		<setp public="1" params="T" set="method" static="1">
			<f a="p:at:val">
				<x path="cs.Pointer"><c path="setp.T"/></x>
				<x path="cs.Int64"/>
				<c path="setp.T"/>
				<c path="setp.T"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":arrayAccess"/>
			</meta>
		</setp>
		<meta><m n=":hxGen"/></meta>
	</class>
	<abstract path="cs.PointerAccess" params="T" file="/home/vsts/work/1/s/std/cs/Pointer.hx" module="cs.Pointer">
		<this><c path="cs.PointerAccess.T"/></this>
		<meta>
			<m n=":hxGen"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs._Pointer.PointerAccess_Impl_" params="" file="/home/vsts/work/1/s/std/cs/Pointer.hx" private="1" module="cs.Pointer" extern="1"><meta><m n=":hxGen"/></meta></class></impl>
	</abstract>
	<class path="cs._Pointer.PointerAccess_Impl_" params="" file="/home/vsts/work/1/s/std/cs/Pointer.hx" private="1" module="cs.Pointer" extern="1"><meta><m n=":hxGen"/></meta></class>
	<typedef path="cs.Ref" params="T" file="/home/vsts/work/1/s/std/cs/Ref.hx">
		<c path="cs.Ref.T"/>
		<haxe_doc>This type represents "ref" types for C# function parameters.
	It only has effect on function parameters, and conversion to/from the referenced type is automatic.

	Note: Using this type should be considered a bad practice unless overriding a native function is needed.</haxe_doc>
		<meta>
			<m n=":nativeGen"/>
			<m n=":semantics"><e>reference</e></m>
		</meta>
	</typedef>
	<abstract path="cs.Int8" params="" file="/home/vsts/work/1/s/std/cs/StdTypes.hx" module="cs.StdTypes">
		<this><x path="cs.Int8"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":hxGen"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="cs.Int16" params="" file="/home/vsts/work/1/s/std/cs/StdTypes.hx" module="cs.StdTypes">
		<this><x path="cs.Int16"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":hxGen"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="cs.Char16" params="" file="/home/vsts/work/1/s/std/cs/StdTypes.hx" module="cs.StdTypes">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="cs.Char16"/></this>
		<meta>
			<m n=":hxGen"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="cs.UInt8" params="" file="/home/vsts/work/1/s/std/cs/StdTypes.hx" module="cs.StdTypes">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="cs.UInt8"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":hxGen"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="cs.UInt16" params="" file="/home/vsts/work/1/s/std/cs/StdTypes.hx" module="cs.StdTypes">
		<this><x path="cs.UInt16"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":hxGen"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="cs.Int64" params="" file="/home/vsts/work/1/s/std/cs/StdTypes.hx" module="cs.StdTypes">
		<from>
			<icast><x path="Float"/></icast>
			<icast><x path="Int"/></icast>
		</from>
		<this><x path="cs.Int64"/></this>
		<meta>
			<m n=":hxGen"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
			<m n=":coreType"/>
		</meta>
		<impl><class path="cs._StdTypes.Int64_Impl_" params="" file="/home/vsts/work/1/s/std/cs/StdTypes.hx" private="1" module="cs.StdTypes" extern="1">
	<addI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="Int"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</addI>
	<add public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</add>
	<mulI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="Int"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</mulI>
	<mul public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</mul>
	<modI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="Int"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A % B</e></m>
		</meta>
	</modI>
	<mod public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A % B</e></m>
		</meta>
	</mod>
	<subI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="Int"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</subI>
	<sub public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</sub>
	<divI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="Int"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</divI>
	<div public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</div>
	<orI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="Int"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A | B</e></m>
		</meta>
	</orI>
	<or public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A | B</e></m>
		</meta>
	</or>
	<xorI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="Int"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A ^ B</e></m>
		</meta>
	</xorI>
	<xor public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A ^ B</e></m>
		</meta>
	</xor>
	<andI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="Int"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A & B]]></e></m>
		</meta>
	</andI>
	<and public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A & B]]></e></m>
		</meta>
	</and>
	<shlI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="Int"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A << B]]></e></m>
		</meta>
	</shlI>
	<shl public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A << B]]></e></m>
		</meta>
	</shl>
	<shrI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="Int"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >> B]]></e></m>
		</meta>
	</shrI>
	<shr public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >> B]]></e></m>
		</meta>
	</shr>
	<gt public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</gt>
	<gte public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</gte>
	<lt public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</lt>
	<lte public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</lte>
	<bneg public="1" set="method" static="1">
		<f a="t">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>~A</e></m>
		</meta>
	</bneg>
	<neg public="1" set="method" static="1">
		<f a="t">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>-A</e></m>
		</meta>
	</neg>
	<preIncrement public="1" set="method" static="1">
		<f a="t">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>++A</e></m>
		</meta>
	</preIncrement>
	<postIncrement public="1" set="method" static="1">
		<f a="t">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</postIncrement>
	<preDecrement public="1" set="method" static="1">
		<f a="t">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>--A</e></m>
		</meta>
	</preDecrement>
	<postDecrement public="1" set="method" static="1">
		<f a="t">
			<x path="cs.Int64"/>
			<x path="cs.Int64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A--</e></m>
		</meta>
	</postDecrement>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs._StdTypes.Int64_Impl_" params="" file="/home/vsts/work/1/s/std/cs/StdTypes.hx" private="1" module="cs.StdTypes" extern="1">
		<addI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="Int"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</addI>
		<add public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</add>
		<mulI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="Int"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</mulI>
		<mul public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</mul>
		<modI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="Int"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A % B</e></m>
			</meta>
		</modI>
		<mod public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A % B</e></m>
			</meta>
		</mod>
		<subI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="Int"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</subI>
		<sub public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</sub>
		<divI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="Int"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</divI>
		<div public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</div>
		<orI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="Int"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A | B</e></m>
			</meta>
		</orI>
		<or public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A | B</e></m>
			</meta>
		</or>
		<xorI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="Int"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A ^ B</e></m>
			</meta>
		</xorI>
		<xor public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A ^ B</e></m>
			</meta>
		</xor>
		<andI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="Int"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A & B]]></e></m>
			</meta>
		</andI>
		<and public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A & B]]></e></m>
			</meta>
		</and>
		<shlI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="Int"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A << B]]></e></m>
			</meta>
		</shlI>
		<shl public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A << B]]></e></m>
			</meta>
		</shl>
		<shrI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="Int"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >> B]]></e></m>
			</meta>
		</shrI>
		<shr public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >> B]]></e></m>
			</meta>
		</shr>
		<gt public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</gt>
		<gte public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</gte>
		<lt public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</lt>
		<lte public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</lte>
		<bneg public="1" set="method" static="1">
			<f a="t">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>~A</e></m>
			</meta>
		</bneg>
		<neg public="1" set="method" static="1">
			<f a="t">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>-A</e></m>
			</meta>
		</neg>
		<preIncrement public="1" set="method" static="1">
			<f a="t">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>++A</e></m>
			</meta>
		</preIncrement>
		<postIncrement public="1" set="method" static="1">
			<f a="t">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</postIncrement>
		<preDecrement public="1" set="method" static="1">
			<f a="t">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>--A</e></m>
			</meta>
		</preDecrement>
		<postDecrement public="1" set="method" static="1">
			<f a="t">
				<x path="cs.Int64"/>
				<x path="cs.Int64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A--</e></m>
			</meta>
		</postDecrement>
		<meta><m n=":hxGen"/></meta>
	</class>
	<abstract path="cs.UInt64" params="" file="/home/vsts/work/1/s/std/cs/StdTypes.hx" module="cs.StdTypes">
		<from>
			<icast><x path="haxe.Int64"/></icast>
			<icast><x path="Float"/></icast>
			<icast><x path="cs.Int64"/></icast>
			<icast><x path="Int"/></icast>
		</from>
		<this><x path="cs.UInt64"/></this>
		<meta>
			<m n=":hxGen"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
			<m n=":coreType"/>
		</meta>
		<impl><class path="cs._StdTypes.UInt64_Impl_" params="" file="/home/vsts/work/1/s/std/cs/StdTypes.hx" private="1" module="cs.StdTypes" extern="1">
	<addI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="Int"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</addI>
	<add public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</add>
	<mulI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="Int"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</mulI>
	<mul public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</mul>
	<modI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="Int"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A % B</e></m>
		</meta>
	</modI>
	<mod public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A % B</e></m>
		</meta>
	</mod>
	<subI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="Int"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</subI>
	<sub public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A - B</e></m>
		</meta>
	</sub>
	<divI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="Int"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</divI>
	<div public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A / B</e></m>
		</meta>
	</div>
	<orI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="Int"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A | B</e></m>
		</meta>
	</orI>
	<or public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A | B</e></m>
		</meta>
	</or>
	<xorI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="Int"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A ^ B</e></m>
		</meta>
	</xorI>
	<xor public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A ^ B</e></m>
		</meta>
	</xor>
	<andI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="Int"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A & B]]></e></m>
		</meta>
	</andI>
	<and public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A & B]]></e></m>
		</meta>
	</and>
	<shlI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="Int"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A << B]]></e></m>
		</meta>
	</shlI>
	<shl public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A << B]]></e></m>
		</meta>
	</shl>
	<shrI public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="Int"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >> B]]></e></m>
		</meta>
	</shrI>
	<shr public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >> B]]></e></m>
		</meta>
	</shr>
	<gt public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A > B]]></e></m>
		</meta>
	</gt>
	<gte public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A >= B]]></e></m>
		</meta>
	</gte>
	<lt public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A < B]]></e></m>
		</meta>
	</lt>
	<lte public="1" set="method" static="1">
		<f a="lhs:rhs">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e><![CDATA[A <= B]]></e></m>
		</meta>
	</lte>
	<bneg public="1" set="method" static="1">
		<f a="t">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>~A</e></m>
		</meta>
	</bneg>
	<neg public="1" set="method" static="1">
		<f a="t">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>-A</e></m>
		</meta>
	</neg>
	<preIncrement public="1" set="method" static="1">
		<f a="t">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>++A</e></m>
		</meta>
	</preIncrement>
	<postIncrement public="1" set="method" static="1">
		<f a="t">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</postIncrement>
	<preDecrement public="1" set="method" static="1">
		<f a="t">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>--A</e></m>
		</meta>
	</preDecrement>
	<postDecrement public="1" set="method" static="1">
		<f a="t">
			<x path="cs.UInt64"/>
			<x path="cs.UInt64"/>
		</f>
		<meta>
			<m n=":noExpr"/>
			<m n=":op"><e>A--</e></m>
		</meta>
	</postDecrement>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs._StdTypes.UInt64_Impl_" params="" file="/home/vsts/work/1/s/std/cs/StdTypes.hx" private="1" module="cs.StdTypes" extern="1">
		<addI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="Int"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</addI>
		<add public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</add>
		<mulI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="Int"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</mulI>
		<mul public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</mul>
		<modI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="Int"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A % B</e></m>
			</meta>
		</modI>
		<mod public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A % B</e></m>
			</meta>
		</mod>
		<subI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="Int"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</subI>
		<sub public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A - B</e></m>
			</meta>
		</sub>
		<divI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="Int"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</divI>
		<div public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A / B</e></m>
			</meta>
		</div>
		<orI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="Int"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A | B</e></m>
			</meta>
		</orI>
		<or public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A | B</e></m>
			</meta>
		</or>
		<xorI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="Int"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A ^ B</e></m>
			</meta>
		</xorI>
		<xor public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A ^ B</e></m>
			</meta>
		</xor>
		<andI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="Int"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A & B]]></e></m>
			</meta>
		</andI>
		<and public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A & B]]></e></m>
			</meta>
		</and>
		<shlI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="Int"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A << B]]></e></m>
			</meta>
		</shlI>
		<shl public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A << B]]></e></m>
			</meta>
		</shl>
		<shrI public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="Int"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >> B]]></e></m>
			</meta>
		</shrI>
		<shr public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >> B]]></e></m>
			</meta>
		</shr>
		<gt public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A > B]]></e></m>
			</meta>
		</gt>
		<gte public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A >= B]]></e></m>
			</meta>
		</gte>
		<lt public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A < B]]></e></m>
			</meta>
		</lt>
		<lte public="1" set="method" static="1">
			<f a="lhs:rhs">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e><![CDATA[A <= B]]></e></m>
			</meta>
		</lte>
		<bneg public="1" set="method" static="1">
			<f a="t">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>~A</e></m>
			</meta>
		</bneg>
		<neg public="1" set="method" static="1">
			<f a="t">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>-A</e></m>
			</meta>
		</neg>
		<preIncrement public="1" set="method" static="1">
			<f a="t">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>++A</e></m>
			</meta>
		</preIncrement>
		<postIncrement public="1" set="method" static="1">
			<f a="t">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</postIncrement>
		<preDecrement public="1" set="method" static="1">
			<f a="t">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>--A</e></m>
			</meta>
		</preDecrement>
		<postDecrement public="1" set="method" static="1">
			<f a="t">
				<x path="cs.UInt64"/>
				<x path="cs.UInt64"/>
			</f>
			<meta>
				<m n=":noExpr"/>
				<m n=":op"><e>A--</e></m>
			</meta>
		</postDecrement>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="cs.internal.BoxedPointer" params="" file="/home/vsts/work/1/s/std/cs/internal/BoxedPointer.hx">
		<value public="1" set="null">
			<x path="cs.Pointer"><d/></x>
			<meta><m n=":readonly"/></meta>
		</value>
		<new public="1" set="method" line="28"><f a="val">
	<x path="cs.Pointer"><d/></x>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":unsafe"/>
			<m n=":keep"/>
			<m n=":native"><e>"haxe.lang.BoxedPointer"</e></m>
			<m n=":nativeGen"/>
		</meta>
	</class>
	<class path="cs.internal.Exceptions" params="" file="/home/vsts/work/1/s/std/cs/internal/Exceptions.hx">
		<exception static="1">
			<c path="cs.system.Exception"/>
			<meta>
				<m n=":allow"><e>haxe.CallStack</e></m>
				<m n=":meta"><e>System.ThreadStaticAttribute</e></m>
			</meta>
		</exception>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":nativeGen"/>
			<m n=":keep"/>
			<m n=":native"><e>"haxe.lang.Exceptions"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._Exception" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._Exception" extern="1" interface="1">
		<TargetSite public="1" get="accessor" set="null"><c path="cs.system.reflection.MethodBase"/></TargetSite>
		<StackTrace public="1" get="accessor" set="null"><c path="String"/></StackTrace>
		<Source public="1" get="accessor" set="accessor"><c path="String"/></Source>
		<Message public="1" get="accessor" set="null"><c path="String"/></Message>
		<InnerException public="1" get="accessor" set="null"><c path="cs.system.Exception"/></InnerException>
		<HelpLink public="1" get="accessor" set="accessor"><c path="String"/></HelpLink>
		<get_HelpLink set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_HelpLink>
		<set_HelpLink set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_HelpLink>
		<get_InnerException set="method">
			<f a=""><c path="cs.system.Exception"/></f>
			<meta><m n=":overload"/></meta>
		</get_InnerException>
		<get_Message set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Message>
		<get_Source set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Source>
		<set_Source set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Source>
		<get_StackTrace set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_StackTrace>
		<get_TargetSite set="method">
			<f a=""><c path="cs.system.reflection.MethodBase"/></f>
			<meta><m n=":overload"/></meta>
		</get_TargetSite>
		<GetBaseException public="1" set="method">
			<f a=""><c path="cs.system.Exception"/></f>
			<meta><m n=":overload"/></meta>
		</GetBaseException>
		<GetObjectData public="1" set="method">
			<f a="info:context">
				<c path="cs.system.runtime.serialization.SerializationInfo"/>
				<c path="cs.system.runtime.serialization.StreamingContext"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetObjectData>
		<GetType public="1" set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</GetType>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._Exception"</e></m>
		</meta>
	</class>
	<class path="cs.system.Exception" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Exception" extern="1">
		<implements path="cs.system.runtime.interopservices._Exception"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<Data public="1" get="accessor" set="null"><c path="cs.system.collections.IDictionary"/></Data>
		<TargetSite public="1" get="accessor" set="null"><c path="cs.system.reflection.MethodBase"/></TargetSite>
		<StackTrace public="1" get="accessor" set="null"><c path="String"/></StackTrace>
		<Source public="1" get="accessor" set="accessor"><c path="String"/></Source>
		<Message public="1" get="accessor" set="null"><c path="String"/></Message>
		<HResult get="null" set="null"><x path="Int"/></HResult>
		<HelpLink public="1" get="accessor" set="accessor"><c path="String"/></HelpLink>
		<InnerException public="1" get="accessor" set="null"><c path="cs.system.Exception"/></InnerException>
		<get_InnerException final="1" set="method">
			<f a=""><c path="cs.system.Exception"/></f>
			<meta><m n=":overload"/></meta>
		</get_InnerException>
		<get_HelpLink set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_HelpLink>
		<set_HelpLink set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_HelpLink>
		<get_HResult final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</get_HResult>
		<set_HResult final="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</set_HResult>
		<get_Message set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Message>
		<get_Source set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Source>
		<set_Source set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Source>
		<get_StackTrace set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_StackTrace>
		<get_TargetSite final="1" set="method">
			<f a=""><c path="cs.system.reflection.MethodBase"/></f>
			<meta><m n=":overload"/></meta>
		</get_TargetSite>
		<get_Data set="method">
			<f a=""><c path="cs.system.collections.IDictionary"/></f>
			<meta><m n=":overload"/></meta>
		</get_Data>
		<GetBaseException public="1" set="method">
			<f a=""><c path="cs.system.Exception"/></f>
			<meta><m n=":overload"/></meta>
		</GetBaseException>
		<GetObjectData public="1" set="method">
			<f a="info:context">
				<c path="cs.system.runtime.serialization.SerializationInfo"/>
				<c path="cs.system.runtime.serialization.StreamingContext"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetObjectData>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<GetType final="1" public="1" set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</GetType>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="message:innerException">
						<c path="String"/>
						<c path="cs.system.Exception"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" set="method">
					<f a="info:context">
						<c path="cs.system.runtime.serialization.SerializationInfo"/>
						<c path="cs.system.runtime.serialization.StreamingContext"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":protected"/>
						<m n=":overload"/>
					</meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="message">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Exception"</e></m>
		</meta>
	</class>
	<class path="cs.internal._Exceptions.HaxeException" params="" file="/home/vsts/work/1/s/std/cs/internal/Exceptions.hx" private="1" module="cs.internal.Exceptions">
		<extends path="cs.system.Exception"/>
		<wrap public="1" set="method" line="57" static="1"><f a="obj">
	<d/>
	<c path="cs.system.Exception"/>
</f></wrap>
		<obj><d/></obj>
		<getObject public="1" set="method" line="49"><f a=""><d/></f></getObject>
		<toString public="1" set="method" line="53"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="39"><f a="obj">
	<d/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":classCode"><e>"override public string Message { get { return this.toString(); } }\n\n"</e></m>
			<m n=":nativeGen"/>
			<m n=":keep"/>
			<m n=":native"><e>"haxe.lang.HaxeException"</e></m>
		</meta>
	</class>
	<class path="cs.internal.FieldHashConflict" params="" file="/home/vsts/work/1/s/std/cs/internal/FieldLookup.hx" module="cs.internal.FieldLookup">
		<hash public="1" set="null">
			<x path="Int"/>
			<meta><m n=":readOnly"/></meta>
		</hash>
		<name public="1" set="null">
			<c path="String"/>
			<meta><m n=":readOnly"/></meta>
		</name>
		<value public="1"><d/></value>
		<next public="1"><c path="cs.internal.FieldHashConflict"/></next>
		<new public="1" set="method" line="33">
			<f a="hash:name:value:next">
				<x path="Int"/>
				<c path="String"/>
				<d/>
				<c path="cs.internal.FieldHashConflict"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":native"><e>"haxe.lang.FieldHashConflict"</e></m>
			<m n=":nativeGen"/>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="cs.internal.FieldLookup" params="" file="/home/vsts/work/1/s/std/cs/internal/FieldLookup.hx">
		<fieldIds static="1">
			<c path="cs.NativeArray"><x path="Int"/></c>
			<meta><m n=":protected"/></meta>
		</fieldIds>
		<fields static="1">
			<c path="cs.NativeArray"><c path="String"/></c>
			<meta><m n=":protected"/></meta>
		</fields>
		<length static="1">
			<x path="Int"/>
			<meta><m n=":protected"/></meta>
		</length>
		<addFields set="method" line="53" static="1"><f a="nids:nfields">
	<c path="cs.NativeArray"><x path="Int"/></c>
	<c path="cs.NativeArray"><c path="String"/></c>
	<x path="Void"/>
</f></addFields>
		<doHash get="inline" set="null" line="111" static="1"><f a="s">
	<c path="String"/>
	<x path="Int"/>
</f></doHash>
		<lookupHash public="1" set="method" line="120" static="1"><f a="key">
	<x path="Int"/>
	<c path="String"/>
</f></lookupHash>
		<hash public="1" set="method" line="140" static="1"><f a="s">
	<c path="String"/>
	<x path="Int"/>
</f></hash>
		<findHash public="1" set="method" line="180" static="1"><f a="hash:hashs:length">
	<x path="Int"/>
	<c path="cs.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
</f></findHash>
		<removeInt public="1" set="method" line="199" static="1"><f a="a:length:pos">
	<c path="cs.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></removeInt>
		<removeFloat public="1" set="method" line="204" static="1"><f a="a:length:pos">
	<c path="cs.NativeArray"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></removeFloat>
		<removeDynamic public="1" set="method" line="209" static="1"><f a="a:length:pos">
	<c path="cs.NativeArray"><d/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></removeDynamic>
		<__insert params="T" get="inline" set="null" line="214" static="1"><f a="a:length:pos:x">
	<c path="cs.NativeArray"><c path="__insert.T"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="__insert.T"/>
	<c path="cs.NativeArray"><c path="__insert.T"/></c>
</f></__insert>
		<insertInt public="1" set="method" line="245" static="1"><f a="a:length:pos:x">
	<c path="cs.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="cs.NativeArray"><x path="Int"/></c>
</f></insertInt>
		<insertFloat public="1" set="method" line="248" static="1"><f a="a:length:pos:x">
	<c path="cs.NativeArray"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<c path="cs.NativeArray"><x path="Float"/></c>
</f></insertFloat>
		<insertDynamic public="1" set="method" line="251" static="1"><f a="a:length:pos:x">
	<c path="cs.NativeArray"><d/></c>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
	<c path="cs.NativeArray"><d/></c>
</f></insertDynamic>
		<insertString public="1" set="method" line="254" static="1"><f a="a:length:pos:x">
	<c path="cs.NativeArray"><c path="String"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="cs.NativeArray"><c path="String"/></c>
</f></insertString>
		<getHashConflict public="1" set="method" line="257" static="1"><f a="head:hash:name">
	<c path="cs.internal.FieldHashConflict"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="cs.internal.FieldHashConflict"/>
</f></getHashConflict>
		<setHashConflict public="1" set="method" line="267" static="1"><f a="head:hash:name:value">
	<t path="cs.Ref"><c path="cs.internal.FieldHashConflict"/></t>
	<x path="Int"/>
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></setHashConflict>
		<deleteHashConflict public="1" set="method" line="279" static="1"><f a="head:hash:name">
	<t path="cs.Ref"><c path="cs.internal.FieldHashConflict"/></t>
	<x path="Int"/>
	<c path="String"/>
	<x path="Bool"/>
</f></deleteHashConflict>
		<addHashConflictNames public="1" set="method" line="305" static="1"><f a="head:arr">
	<c path="cs.internal.FieldHashConflict"/>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></addHashConflictNames>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":native"><e>"haxe.lang.FieldLookup"</e></m>
			<m n=":classCode"><e>"#pragma warning disable 628\n"</e></m>
			<m n=":nativeGen"/>
			<m n=":keep"/>
			<m n=":static"/>
		</meta>
	</class>
	<class path="cs.internal.Function" params="" file="/home/vsts/work/1/s/std/cs/internal/Function.hx">
		<new set="method" line="31"><f a="arity:type">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>These classes are automatically generated by the compiler. They are only
	here so there is an option for e.g. defining them as externs if you are compiling
	in modules (untested).</haxe_doc>
		<meta>
			<m n=":nativeGen"/>
			<m n=":keep"/>
			<m n=":abstract"/>
			<m n=":nativeGen"/>
			<m n=":native"><e>"haxe.lang.Function"</e></m>
		</meta>
	</class>
	<class path="cs.internal._Function.VarArgsBase" params="" file="/home/vsts/work/1/s/std/cs/internal/Function.hx" private="1" module="cs.internal.Function">
		<extends path="cs.internal.Function"/>
		<__hx_invokeDynamic public="1" set="method" line="35"><f a="dynArgs">
	<c path="cs.NativeArray"><d/></c>
	<d/>
</f></__hx_invokeDynamic>
		<meta>
			<m n=":nativeGen"/>
			<m n=":keep"/>
			<m n=":nativeGen"/>
			<m n=":native"><e>"haxe.lang.VarArgsBase"</e></m>
		</meta>
	</class>
	<class path="cs.internal.VarArgsFunction" params="" file="/home/vsts/work/1/s/std/cs/internal/Function.hx" module="cs.internal.Function">
		<extends path="cs.internal._Function.VarArgsBase"/>
		<fun><f a="">
	<c path="Array"><d/></c>
	<d/>
</f></fun>
		<__hx_invokeDynamic public="1" set="method" line="48" override="1"><f a="dynArgs">
	<c path="cs.NativeArray"><d/></c>
	<d/>
</f></__hx_invokeDynamic>
		<new public="1" set="method" line="43"><f a="fun">
	<f a="">
		<c path="Array"><d/></c>
		<d/>
	</f>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":keep"/>
			<m n=":nativeGen"/>
			<m n=":native"><e>"haxe.lang.VarArgsFunction"</e></m>
		</meta>
	</class>
	<class path="cs.internal.Closure" params="" file="/home/vsts/work/1/s/std/cs/internal/Function.hx" module="cs.internal.Function">
		<extends path="cs.internal._Function.VarArgsBase"/>
		<obj><d/></obj>
		<field><c path="String"/></field>
		<hash><x path="Int"/></hash>
		<__hx_invokeDynamic public="1" set="method" line="65" override="1"><f a="dynArgs">
	<c path="cs.NativeArray"><d/></c>
	<d/>
</f></__hx_invokeDynamic>
		<Equals public="1" set="method" line="69"><f a="obj">
	<d/>
	<x path="Bool"/>
</f></Equals>
		<GetHashCode public="1" set="method" line="76">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
		</GetHashCode>
		<new public="1" set="method" line="58"><f a="obj:field:hash">
	<d/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":keep"/>
			<m n=":nativeGen"/>
			<m n=":native"><e>"haxe.lang.Closure"</e></m>
		</meta>
	</class>
	<typedef path="cs.internal._HxObject.StdType" params="" file="/home/vsts/work/1/s/std/cs/internal/HxObject.hx" private="1" module="cs.internal.HxObject">
		<c path="Type"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<class path="cs.internal.IHxObject" params="" file="/home/vsts/work/1/s/std/cs/internal/HxObject.hx" module="cs.internal.HxObject" interface="1"><meta>
	<m n=":hxGen"/>
	<m n=":keep"/>
	<m n=":native"><e>"haxe.lang.IHxObject"</e></m>
</meta></class>
	<class path="cs.internal.HxObject" params="" file="/home/vsts/work/1/s/std/cs/internal/HxObject.hx">
		<implements path="cs.internal.IHxObject"/>
		<__hx_deleteField public="1" set="method" line="33"><f a="field:hash">
	<c path="String"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></__hx_deleteField>
		<meta>
			<m n=":hxGen"/>
			<m n=":keep"/>
			<m n=":native"><e>"haxe.lang.HxObject"</e></m>
		</meta>
	</class>
	<class path="cs.internal.DynamicObject" params="" file="/home/vsts/work/1/s/std/cs/internal/HxObject.hx" module="cs.internal.HxObject">
		<extends path="cs.internal.HxObject"/>
		<__hx_toString_depth expr="0" line="56" static="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":skipReflection"/>
			</meta>
		</__hx_toString_depth>
		<__hx_hashes>
			<c path="cs.NativeArray"><x path="Int"/></c>
			<meta><m n=":skipReflection"/></meta>
		</__hx_hashes>
		<__hx_dynamics>
			<c path="cs.NativeArray"><d/></c>
			<meta><m n=":skipReflection"/></meta>
		</__hx_dynamics>
		<__hx_hashes_f>
			<c path="cs.NativeArray"><x path="Int"/></c>
			<meta><m n=":skipReflection"/></meta>
		</__hx_hashes_f>
		<__hx_dynamics_f>
			<c path="cs.NativeArray"><x path="Float"/></c>
			<meta><m n=":skipReflection"/></meta>
		</__hx_dynamics_f>
		<__hx_length>
			<x path="Int"/>
			<meta><m n=":skipReflection"/></meta>
		</__hx_length>
		<__hx_length_f>
			<x path="Int"/>
			<meta><m n=":skipReflection"/></meta>
		</__hx_length_f>
		<__hx_conflicts>
			<c path="cs.internal.FieldHashConflict"/>
			<meta><m n=":skipReflection"/></meta>
		</__hx_conflicts>
		<__hx_deleteField public="1" set="method" line="76" override="1"><f a="field:hash">
	<c path="String"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></__hx_deleteField>
		<__hx_getField public="1" set="method" line="98"><f a="field:hash:throwErrors:isCheck:handleProperties">
	<c path="String"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<d/>
</f></__hx_getField>
		<__hx_setField public="1" set="method" line="118"><f a="field:hash:value:handleProperties">
	<c path="String"/>
	<x path="Int"/>
	<d/>
	<x path="Bool"/>
	<d/>
</f></__hx_setField>
		<__hx_getField_f public="1" set="method" line="146"><f a="field:hash:throwErrors:handleProperties">
	<c path="String"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></__hx_getField_f>
		<__hx_setField_f public="1" set="method" line="166"><f a="field:hash:value:handleProperties">
	<c path="String"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></__hx_setField_f>
		<__hx_getFields public="1" set="method" line="191"><f a="baseArr">
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></__hx_getFields>
		<__hx_invokeField public="1" set="method" line="201">
			<f a="field:hash:dynargs">
				<c path="String"/>
				<x path="Int"/>
				<c path="cs.NativeArray"><d/></c>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__hx_invokeField>
		<toString public="1" set="method" line="213">
			<f a=""><c path="String"/></f>
			<meta><m n=":skipReflection"/></meta>
		</toString>
		<__hx_toString public="1" set="method" line="228">
			<f a=""><c path="String"/></f>
			<meta><m n=":skipReflection"/></meta>
		</__hx_toString>
		<new public="1" set="method" line="58">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><new public="1" set="method" line="66">
	<f a="hashes:dynamics:hashes_f:dynamics_f">
		<c path="cs.NativeArray"><x path="Int"/></c>
		<c path="cs.NativeArray"><d/></c>
		<c path="cs.NativeArray"><x path="Int"/></c>
		<c path="cs.NativeArray"><x path="Float"/></c>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":hxGen"/>
			<m n=":keep"/>
			<m n=":native"><e>"haxe.lang.DynamicObject"</e></m>
		</meta>
	</class>
	<class path="cs.internal.IGenericObject" params="" file="/home/vsts/work/1/s/std/cs/internal/HxObject.hx" module="cs.internal.HxObject" interface="1"><meta>
	<m n=":hxGen"/>
	<m n=":keep"/>
	<m n=":native"><e>"haxe.lang.IGenericObject"</e></m>
</meta></class>
	<class path="cs.system.runtime.interopservices._Attribute" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._Attribute" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method">
			<f a="riid:rgszNames:cNames:lcid:rgDispId">
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<c path="cs.system.IntPtr"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetIDsOfNames>
		<GetTypeInfo public="1" set="method">
			<f a="iTInfo:lcid:ppTInfo">
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfo>
		<GetTypeInfoCount public="1" set="method">
			<f a="pcTInfo">
				<t path="cs.Out"><x path="UInt"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfoCount>
		<Invoke public="1" set="method">
			<f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
				<x path="UInt"/>
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<x path="UInt"/>
				<t path="cs.types.Int16"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._Attribute"</e></m>
		</meta>
	</class>
	<class path="cs.system.Attribute" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Attribute" extern="1">
		<implements path="cs.system.runtime.interopservices._Attribute"/>
		<GetCustomAttribute final="1" public="1" set="method" static="1">
			<f a="element:attributeType">
				<c path="cs.system.reflection.ParameterInfo"/>
				<c path="cs.system.Type"/>
				<c path="cs.system.Attribute"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetCustomAttribute final="1" public="1" set="method">
					<f a="element:attributeType:inherit">
						<c path="cs.system.reflection.MemberInfo"/>
						<c path="cs.system.Type"/>
						<x path="Bool"/>
						<c path="cs.system.Attribute"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetCustomAttribute>
				<GetCustomAttribute final="1" public="1" set="method">
					<f a="element:attributeType:inherit">
						<c path="cs.system.reflection.ParameterInfo"/>
						<c path="cs.system.Type"/>
						<x path="Bool"/>
						<c path="cs.system.Attribute"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetCustomAttribute>
				<GetCustomAttribute final="1" public="1" set="method">
					<f a="element:attributeType:inherit">
						<c path="cs.system.reflection.Assembly"/>
						<c path="cs.system.Type"/>
						<x path="Bool"/>
						<c path="cs.system.Attribute"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetCustomAttribute>
				<GetCustomAttribute final="1" public="1" set="method">
					<f a="element:attributeType:inherit">
						<c path="cs.system.reflection.Module"/>
						<c path="cs.system.Type"/>
						<x path="Bool"/>
						<c path="cs.system.Attribute"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetCustomAttribute>
				<GetCustomAttribute final="1" public="1" set="method">
					<f a="element:attributeType">
						<c path="cs.system.reflection.Module"/>
						<c path="cs.system.Type"/>
						<c path="cs.system.Attribute"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetCustomAttribute>
				<GetCustomAttribute final="1" public="1" set="method">
					<f a="element:attributeType">
						<c path="cs.system.reflection.Assembly"/>
						<c path="cs.system.Type"/>
						<c path="cs.system.Attribute"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetCustomAttribute>
				<GetCustomAttribute final="1" public="1" set="method">
					<f a="element:attributeType">
						<c path="cs.system.reflection.MemberInfo"/>
						<c path="cs.system.Type"/>
						<c path="cs.system.Attribute"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetCustomAttribute>
			</overloads>
		</GetCustomAttribute>
		<GetCustomAttributes final="1" public="1" set="method" static="1">
			<f a="element">
				<c path="cs.system.reflection.Assembly"/>
				<c path="cs.NativeArray"><c path="cs.system.Attribute"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetCustomAttributes final="1" public="1" set="method">
					<f a="element:inherit">
						<c path="cs.system.reflection.ParameterInfo"/>
						<x path="Bool"/>
						<c path="cs.NativeArray"><c path="cs.system.Attribute"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetCustomAttributes>
				<GetCustomAttributes final="1" public="1" set="method">
					<f a="element:inherit">
						<c path="cs.system.reflection.MemberInfo"/>
						<x path="Bool"/>
						<c path="cs.NativeArray"><c path="cs.system.Attribute"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetCustomAttributes>
				<GetCustomAttributes final="1" public="1" set="method">
					<f a="element:inherit">
						<c path="cs.system.reflection.Assembly"/>
						<x path="Bool"/>
						<c path="cs.NativeArray"><c path="cs.system.Attribute"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetCustomAttributes>
				<GetCustomAttributes final="1" public="1" set="method">
					<f a="element:inherit">
						<c path="cs.system.reflection.Module"/>
						<x path="Bool"/>
						<c path="cs.NativeArray"><c path="cs.system.Attribute"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetCustomAttributes>
				<GetCustomAttributes final="1" public="1" set="method">
					<f a="element:type:inherit">
						<c path="cs.system.reflection.MemberInfo"/>
						<c path="cs.system.Type"/>
						<x path="Bool"/>
						<c path="cs.NativeArray"><c path="cs.system.Attribute"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetCustomAttributes>
				<GetCustomAttributes final="1" public="1" set="method">
					<f a="element:attributeType:inherit">
						<c path="cs.system.reflection.Module"/>
						<c path="cs.system.Type"/>
						<x path="Bool"/>
						<c path="cs.NativeArray"><c path="cs.system.Attribute"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetCustomAttributes>
				<GetCustomAttributes final="1" public="1" set="method">
					<f a="element:attributeType:inherit">
						<c path="cs.system.reflection.ParameterInfo"/>
						<c path="cs.system.Type"/>
						<x path="Bool"/>
						<c path="cs.NativeArray"><c path="cs.system.Attribute"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetCustomAttributes>
				<GetCustomAttributes final="1" public="1" set="method">
					<f a="element:attributeType:inherit">
						<c path="cs.system.reflection.Assembly"/>
						<c path="cs.system.Type"/>
						<x path="Bool"/>
						<c path="cs.NativeArray"><c path="cs.system.Attribute"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetCustomAttributes>
				<GetCustomAttributes final="1" public="1" set="method">
					<f a="element:type">
						<c path="cs.system.reflection.MemberInfo"/>
						<c path="cs.system.Type"/>
						<c path="cs.NativeArray"><c path="cs.system.Attribute"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetCustomAttributes>
				<GetCustomAttributes final="1" public="1" set="method">
					<f a="element:attributeType">
						<c path="cs.system.reflection.ParameterInfo"/>
						<c path="cs.system.Type"/>
						<c path="cs.NativeArray"><c path="cs.system.Attribute"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetCustomAttributes>
				<GetCustomAttributes final="1" public="1" set="method">
					<f a="element:attributeType">
						<c path="cs.system.reflection.Module"/>
						<c path="cs.system.Type"/>
						<c path="cs.NativeArray"><c path="cs.system.Attribute"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetCustomAttributes>
				<GetCustomAttributes final="1" public="1" set="method">
					<f a="element:attributeType">
						<c path="cs.system.reflection.Assembly"/>
						<c path="cs.system.Type"/>
						<c path="cs.NativeArray"><c path="cs.system.Attribute"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetCustomAttributes>
				<GetCustomAttributes final="1" public="1" set="method">
					<f a="element">
						<c path="cs.system.reflection.Module"/>
						<c path="cs.NativeArray"><c path="cs.system.Attribute"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetCustomAttributes>
				<GetCustomAttributes final="1" public="1" set="method">
					<f a="element">
						<c path="cs.system.reflection.MemberInfo"/>
						<c path="cs.NativeArray"><c path="cs.system.Attribute"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetCustomAttributes>
				<GetCustomAttributes final="1" public="1" set="method">
					<f a="element">
						<c path="cs.system.reflection.ParameterInfo"/>
						<c path="cs.NativeArray"><c path="cs.system.Attribute"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetCustomAttributes>
			</overloads>
		</GetCustomAttributes>
		<IsDefined final="1" public="1" set="method" static="1">
			<f a="element:attributeType">
				<c path="cs.system.reflection.Module"/>
				<c path="cs.system.Type"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<IsDefined final="1" public="1" set="method">
					<f a="element:attributeType:inherit">
						<c path="cs.system.reflection.ParameterInfo"/>
						<c path="cs.system.Type"/>
						<x path="Bool"/>
						<x path="Bool"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IsDefined>
				<IsDefined final="1" public="1" set="method">
					<f a="element:attributeType:inherit">
						<c path="cs.system.reflection.Module"/>
						<c path="cs.system.Type"/>
						<x path="Bool"/>
						<x path="Bool"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IsDefined>
				<IsDefined final="1" public="1" set="method">
					<f a="element:attributeType:inherit">
						<c path="cs.system.reflection.Assembly"/>
						<c path="cs.system.Type"/>
						<x path="Bool"/>
						<x path="Bool"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IsDefined>
				<IsDefined final="1" public="1" set="method">
					<f a="element:attributeType:inherit">
						<c path="cs.system.reflection.MemberInfo"/>
						<c path="cs.system.Type"/>
						<x path="Bool"/>
						<x path="Bool"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IsDefined>
				<IsDefined final="1" public="1" set="method">
					<f a="element:attributeType">
						<c path="cs.system.reflection.Assembly"/>
						<c path="cs.system.Type"/>
						<x path="Bool"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IsDefined>
				<IsDefined final="1" public="1" set="method">
					<f a="element:attributeType">
						<c path="cs.system.reflection.MemberInfo"/>
						<c path="cs.system.Type"/>
						<x path="Bool"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IsDefined>
				<IsDefined final="1" public="1" set="method">
					<f a="element:attributeType">
						<c path="cs.system.reflection.ParameterInfo"/>
						<c path="cs.system.Type"/>
						<x path="Bool"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IsDefined>
			</overloads>
		</IsDefined>
		<TypeId public="1" get="accessor" set="null"><d/></TypeId>
		<get_TypeId set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_TypeId>
		<IsDefaultAttribute public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</IsDefaultAttribute>
		<Match public="1" set="method">
			<f a="obj">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Match>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Attribute"</e></m>
		</meta>
	</class>
	<class path="cs.internal.GenericInterface" params="" file="/home/vsts/work/1/s/std/cs/internal/HxObject.hx" module="cs.internal.HxObject">
		<extends path="cs.system.Attribute"/>
		<generic public="1" set="null">
			<c path="cs.system.Type"/>
			<meta><m n=":readOnly"/></meta>
		</generic>
		<new public="1" set="method" line="258">
			<f a="generic">
				<c path="cs.system.Type"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":nativeGen"/>
			<m n=":keep"/>
			<m n=":native"><e>"haxe.lang.GenericInterface"</e></m>
		</meta>
	</class>
	<class path="cs.internal.HxEnum" params="" file="/home/vsts/work/1/s/std/cs/internal/HxObject.hx" module="cs.internal.HxObject">
		<paramsToString set="method" line="290" static="1">
			<f a="tag:params">
				<c path="String"/>
				<x path="haxe.ds.Vector"><d/></x>
				<c path="String"/>
			</f>
			<meta><m n=":protected"/></meta>
		</paramsToString>
		<paramsGetHashCode set="method" line="306" static="1">
			<f a="index:params">
				<x path="Int"/>
				<x path="haxe.ds.Vector"><d/></x>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":protected"/>
			</meta>
		</paramsGetHashCode>
		<_hx_index set="null">
			<x path="Int"/>
			<meta><m n=":readOnly"/></meta>
		</_hx_index>
		<getTag public="1" set="method" line="278"><f a=""><c path="String"/></f></getTag>
		<getParams public="1" set="method" line="282"><f a=""><c path="Array"><a/></c></f></getParams>
		<toString public="1" set="method" line="286"><f a=""><c path="String"/></f></toString>
		<new set="method" line="274">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":protected"/>
			</meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":keep"/>
			<m n=":native"><e>"haxe.lang.Enum"</e></m>
			<m n=":nativeGen"/>
		</meta>
	</class>
	<class path="cs.internal._Null.Nullable" params="T" file="/home/vsts/work/1/s/std/cs/internal/Null.hx" private="1" module="cs.internal.Null">
		<ofDynamic public="1" params="D" set="method" line="79" static="1">
			<f a="obj">
				<d/>
				<c path="cs.internal._Null.Nullable"><c path="ofDynamic.D"/></c>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["if (obj == null) {\n\t\t\t\treturn new haxe.lang.Null<D>(default(D), false);\n\t\t\t} else if (typeof(D).Equals(typeof(double))) {\n\t\t\t\treturn new haxe.lang.Null<D>((D) (object) haxe.lang.Runtime.toDouble(obj), true);\n\t\t\t} else if (typeof(D).Equals(typeof(int))) {\n\t\t\t\treturn new haxe.lang.Null<D>((D) (object) haxe.lang.Runtime.toInt(obj), true);\n\t\t\t} else {\n\t\t\t\treturn new haxe.lang.Null<D>((D) obj, true);\n\t\t\t}"]]></e></m></meta>
		</ofDynamic>
		<value public="1" set="null">
			<c path="cs.internal._Null.Nullable.T"/>
			<meta><m n=":readOnly"/></meta>
		</value>
		<hasValue public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":readOnly"/></meta>
		</hasValue>
		<toDynamic public="1" set="method" line="83"><f a=""><d/></f></toDynamic>
		<new public="1" set="method" line="62">
			<f a="v:hasValue">
				<c path="cs.internal._Null.Nullable.T"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":classCode"><e><![CDATA["//This function is here to be used with Reflection, when the haxe.lang.Null type is known\n\t\tpublic static haxe.lang.Null<T> _ofDynamic(object obj) {\n\t\t\tif (obj == null) {\n\t\t\t\treturn new haxe.lang.Null<T>(default(T), false);\n\t\t\t} else if (typeof(T).Equals(typeof(double))) {\n\t\t\t\treturn new haxe.lang.Null<T>((T) (object) haxe.lang.Runtime.toDouble(obj), true);\n\t\t\t} else if (typeof(T).Equals(typeof(int))) {\n\t\t\t\treturn new haxe.lang.Null<T>((T) (object) haxe.lang.Runtime.toInt(obj), true);\n\t\t\t} else {\n\t\t\t\treturn new haxe.lang.Null<T>((T) obj, true);\n\t\t\t}\n\t\t}\n\n\t\tpublic static implicit operator haxe.lang.Null<T>(T val) {\n\t\t\treturn new haxe.lang.Null<T>(val, true);\n\t\t}\n\n\t\tpublic static implicit operator Null<T>(__NoValue__ noValue) {\n\t\t\treturn new haxe.lang.Null<T>(default(T), false);\n\t\t}\n\n\t\tpublic sealed class __NoValue__ {\n\t\t\tprivate __NoValue__() {}\n\t\t}\n\n\t\toverride public string ToString() {\n\t\t\tif (!hasValue) return \"null\";\n\t\t\telse return value.ToString();\n\t\t}\n"]]></e></m>
			<m n=":keep"/>
			<m n=":struct"/>
			<m n=":nativeGen"/>
			<m n=":native"><e>"haxe.lang.Null"</e></m>
		</meta>
	</class>
	<class path="cs.system.Object" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Object" extern="1">
		<_Equals final="1" public="1" set="method" static="1">
			<f a="objA:objB">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":native"><e>"Equals"</e></m>
				<m n=":overload"/>
			</meta>
		</_Equals>
		<ReferenceEquals final="1" public="1" set="method" static="1">
			<f a="objA:objB">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ReferenceEquals>
		<GetType final="1" public="1" set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</GetType>
		<MemberwiseClone final="1" set="method">
			<f a=""><d/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</MemberwiseClone>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Object"</e></m>
		</meta>
	</class>
	<class path="cs.internal.Runtime" params="" file="/home/vsts/work/1/s/std/cs/internal/Runtime.hx">
		<undefined public="1" set="null" expr="new cs.system.Object()" line="74" static="1">
			<d/>
			<meta>
				<m n=":value"><e>new cs.system.Object()</e></m>
				<m n=":readOnly"/>
			</meta>
		</undefined>
		<closure public="1" set="method" line="76" static="1"><f a="obj:hash:field">
	<d/>
	<x path="Int"/>
	<c path="String"/>
	<d/>
</f></closure>
		<eq public="1" set="method" line="80" static="1"><f a="v1:v2">
	<d/>
	<d/>
	<x path="Bool"/>
</f></eq>
		<refEq public="1" set="method" line="133" static="1"><f a="v1:v2">
	<a/>
	<a/>
	<x path="Bool"/>
</f></refEq>
		<toDouble public="1" set="method" line="141" static="1"><f a="obj">
	<d/>
	<x path="Float"/>
</f></toDouble>
		<toInt public="1" set="method" line="145" static="1"><f a="obj">
	<d/>
	<x path="Int"/>
</f></toInt>
		<isInt public="1" set="method" line="155" static="1"><f a="obj">
	<d/>
	<x path="Bool"/>
</f></isInt>
		<isUInt public="1" set="method" line="171" static="1"><f a="obj">
	<d/>
	<x path="Bool"/>
</f></isUInt>
		<compare public="1" set="method" line="187" static="1"><f a="v1:v2">
	<d/>
	<d/>
	<x path="Int"/>
</f></compare>
		<plus public="1" set="method" line="230" static="1"><f a="v1:v2">
	<d/>
	<d/>
	<d/>
</f></plus>
		<slowGetField public="1" set="method" line="254" static="1"><f a="obj:field:throwErrors">
	<d/>
	<c path="String"/>
	<x path="Bool"/>
	<d/>
</f></slowGetField>
		<slowHasField public="1" set="method" line="308" static="1"><f a="obj:field">
	<d/>
	<c path="String"/>
	<x path="Bool"/>
</f></slowHasField>
		<slowSetField public="1" set="method" line="328" static="1"><f a="obj:field:value">
	<d/>
	<c path="String"/>
	<d/>
	<d/>
</f></slowSetField>
		<callMethod public="1" set="method" line="383" static="1">
			<f a="obj:methods:methodLength:args">
				<d/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.MethodBase"/></c>
				<x path="Int"/>
				<c path="cs.NativeArray"><d/></c>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</callMethod>
		<unbox public="1" set="method" line="492" static="1">
			<f a="dyn">
				<d/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</unbox>
		<mkNullable public="1" set="method" line="506" static="1">
			<f a="obj:nullableType">
				<d/>
				<c path="cs.system.Type"/>
				<d/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\tif (nullableType.ContainsGenericParameters)\n\t\t\treturn haxe.lang.Null<object>.ofDynamic<object>(obj);\n\t\treturn nullableType.GetMethod(\"_ofDynamic\").Invoke(null, new object[] { obj });\n\t"]]></e></m></meta>
		</mkNullable>
		<slowCallField public="1" set="method" line="515" static="1">
			<f a="obj:field:args">
				<d/>
				<c path="String"/>
				<c path="cs.NativeArray"><d/></c>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</slowCallField>
		<callField public="1" set="method" line="565" static="1">
			<f a="obj:field:fieldHash:args">
				<d/>
				<c path="String"/>
				<x path="Int"/>
				<c path="cs.NativeArray"><d/></c>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</callField>
		<getField public="1" set="method" line="572" static="1">
			<f a="obj:field:fieldHash:throwErrors">
				<d/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getField>
		<getField_f public="1" set="method" line="580" static="1">
			<f a="obj:field:fieldHash:throwErrors">
				<d/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getField_f>
		<setField public="1" set="method" line="588" static="1">
			<f a="obj:field:fieldHash:value">
				<d/>
				<c path="String"/>
				<x path="Int"/>
				<d/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setField>
		<setField_f public="1" set="method" line="596" static="1">
			<f a="obj:field:fieldHash:value">
				<d/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setField_f>
		<toString public="1" set="method" line="604" static="1">
			<f a="obj">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</toString>
		<typeEq public="1" set="method" line="619" static="1"><f a="t1:t2">
	<c path="cs.system.Type"/>
	<c path="cs.system.Type"/>
	<x path="Bool"/>
</f></typeEq>
		<getGenericAttr public="1" set="method" line="644" static="1"><f a="t">
	<c path="cs.system.Type"/>
	<c path="cs.internal.GenericInterface"/>
</f></getGenericAttr>
		<genericCast public="1" params="To" set="method" line="669" static="1">
			<f a="obj">
				<d/>
				<c path="genericCast.To"/>
			</f>
			<meta><m n=":functionCode"><e>"\n\t\tif (obj is To)\n\t\t\treturn (To) obj;\n\t\telse if (obj == null)\n\t\t\treturn default(To);\n\t\tif (typeof(To) == typeof(double))\n\t\t\treturn (To)(object) toDouble(obj);\n\t\telse if (typeof(To) == typeof(int))\n\t\t\treturn (To)(object) toInt(obj);\n\t\telse if (typeof(To) == typeof(float))\n\t\t\treturn (To)(object)(float)toDouble(obj);\n\t\telse if (typeof(To) == typeof(long))\n\t\t\treturn (To)(object)(long)toDouble(obj);\n\t\telse\n\t\t\treturn (To) obj;\n\t"</e></m></meta>
		</genericCast>
		<concat public="1" set="method" line="677" static="1">
			<f a="s1:s2">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":functionCode"><e>"\n\t\treturn (s1 == null ? \"null\" : s1) + (s2 == null ? \"null\" : s2);\n\t"</e></m></meta>
		</concat>
		<toBool public="1" set="method" line="681" static="1">
			<f a="dyn">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</toBool>
		<haxe_doc>This class is meant for internal compiler use only. It provides the Haxe runtime
	compatibility to the host language.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":nativeGen"/>
			<m n=":native"><e>"haxe.lang.Runtime"</e></m>
			<m n=":access"><e>String</e></m>
			<m n=":classCode"><e><![CDATA["\n\tpublic static object getField(haxe.lang.HxObject obj, string field, int fieldHash, bool throwErrors)\n\t{\n\t\tif (obj == null && !throwErrors) return null;\n\t\treturn obj.__hx_getField(field, (fieldHash == 0) ? haxe.lang.FieldLookup.hash(field) : fieldHash, throwErrors, false, false);\n\t}\n\n\tpublic static double getField_f(haxe.lang.HxObject obj, string field, int fieldHash, bool throwErrors)\n\t{\n\t\tif (obj == null && !throwErrors) return 0.0;\n\t\treturn obj.__hx_getField_f(field, (fieldHash == 0) ? haxe.lang.FieldLookup.hash(field) : fieldHash, throwErrors, false);\n\t}\n\n\tpublic static object setField(haxe.lang.HxObject obj, string field, int fieldHash, object value)\n\t{\n\t\treturn obj.__hx_setField(field, (fieldHash == 0) ? haxe.lang.FieldLookup.hash(field) : fieldHash, value, false);\n\t}\n\n\tpublic static double setField_f(haxe.lang.HxObject obj, string field, int fieldHash, double value)\n\t{\n\t\treturn obj.__hx_setField_f(field, (fieldHash == 0) ? haxe.lang.FieldLookup.hash(field) : fieldHash, value, false);\n\t}\n\n\tpublic static object callField(haxe.lang.HxObject obj, string field, int fieldHash, object[] args)\n\t{\n\t\treturn obj.__hx_invokeField(field, (fieldHash == 0) ? haxe.lang.FieldLookup.hash(field) : fieldHash, args);\n\t}\n"]]></e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<typedef path="cs.internal._StringExt.NativeString" params="" file="/home/vsts/work/1/s/std/cs/internal/StringExt.hx" private="1" module="cs.internal.StringExt">
		<c path="cs.system.String"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<class path="cs.system.collections.generic.IEnumerable_1" params="T0" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.generic.IEnumerable_1" extern="1" interface="1">
		<extends path="cs.system.collections.IEnumerable"/>
		<GetEnumerator public="1" set="method">
			<f a=""><c path="cs.system.collections.generic.IEnumerator_1"><c path="cs.system.collections.generic.IEnumerable_1.T0"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetEnumerator>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.Generic.IEnumerable`1"</e></m>
		</meta>
	</class>
	<class path="cs.system.String" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.String" extern="1">
		<implements path="cs.system.collections.generic.IEnumerable_1"><t path="cs.types.Char16"/></implements>
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.IComparable"/>
		<implements path="cs.system.IConvertible"/>
		<implements path="cs.system.IComparable_1"><c path="String"/></implements>
		<implements path="cs.system.IEquatable_1"><c path="String"/></implements>
		<implements path="cs.system.collections.IEnumerable"/>
		<Empty public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":readOnly"/></meta>
		</Empty>
		<_Equals final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":native"><e>"Equals"</e></m>
				<m n=":overload"/>
			</meta>
			<overloads><Equals final="1" public="1" set="method">
	<f a="a:b:comparisonType">
		<c path="String"/>
		<c path="String"/>
		<e path="cs.system.StringComparison"/>
		<x path="Bool"/>
	</f>
	<meta>
		<m n=":native"><e>"Equals"</e></m>
		<m n=":overload"/>
	</meta>
</Equals></overloads>
		</_Equals>
		<Compare final="1" public="1" set="method" static="1">
			<f a="strA:strB">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Compare final="1" public="1" set="method">
					<f a="strA:indexA:strB:indexB:length:culture:options">
						<c path="String"/>
						<x path="Int"/>
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="cs.system.globalization.CultureInfo"/>
						<e path="cs.system.globalization.CompareOptions"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Compare>
				<Compare final="1" public="1" set="method">
					<f a="strA:strB:culture:options">
						<c path="String"/>
						<c path="String"/>
						<c path="cs.system.globalization.CultureInfo"/>
						<e path="cs.system.globalization.CompareOptions"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Compare>
				<Compare final="1" public="1" set="method">
					<f a="strA:indexA:strB:indexB:length:comparisonType">
						<c path="String"/>
						<x path="Int"/>
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<e path="cs.system.StringComparison"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Compare>
				<Compare final="1" public="1" set="method">
					<f a="strA:strB:comparisonType">
						<c path="String"/>
						<c path="String"/>
						<e path="cs.system.StringComparison"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Compare>
				<Compare final="1" public="1" set="method">
					<f a="strA:indexA:strB:indexB:length:ignoreCase:culture">
						<c path="String"/>
						<x path="Int"/>
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Bool"/>
						<c path="cs.system.globalization.CultureInfo"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Compare>
				<Compare final="1" public="1" set="method">
					<f a="strA:indexA:strB:indexB:length:ignoreCase">
						<c path="String"/>
						<x path="Int"/>
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Bool"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Compare>
				<Compare final="1" public="1" set="method">
					<f a="strA:indexA:strB:indexB:length">
						<c path="String"/>
						<x path="Int"/>
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Compare>
				<Compare final="1" public="1" set="method">
					<f a="strA:strB:ignoreCase:culture">
						<c path="String"/>
						<c path="String"/>
						<x path="Bool"/>
						<c path="cs.system.globalization.CultureInfo"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Compare>
				<Compare final="1" public="1" set="method">
					<f a="strA:strB:ignoreCase">
						<c path="String"/>
						<c path="String"/>
						<x path="Bool"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Compare>
			</overloads>
		</Compare>
		<CompareOrdinal final="1" public="1" set="method" static="1">
			<f a="strA:strB">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><CompareOrdinal final="1" public="1" set="method">
	<f a="strA:indexA:strB:indexB:length">
		<c path="String"/>
		<x path="Int"/>
		<c path="String"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</CompareOrdinal></overloads>
		</CompareOrdinal>
		<IsNullOrEmpty final="1" public="1" set="method" static="1">
			<f a="value">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsNullOrEmpty>
		<Format final="1" public="1" set="method" static="1">
			<f a="format:arg0">
				<c path="String"/>
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Format final="1" public="1" set="method">
					<f a="provider:format:args">
						<c path="cs.system.IFormatProvider"/>
						<c path="String"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Format>
				<Format final="1" public="1" set="method">
					<f a="format:args">
						<c path="String"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Format>
				<Format final="1" public="1" set="method">
					<f a="format:arg0:arg1:arg2">
						<c path="String"/>
						<d/>
						<d/>
						<d/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Format>
				<Format final="1" public="1" set="method">
					<f a="format:arg0:arg1">
						<c path="String"/>
						<d/>
						<d/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Format>
			</overloads>
		</Format>
		<Copy final="1" public="1" set="method" static="1">
			<f a="str">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Copy>
		<Concat final="1" public="1" set="method" static="1">
			<f a="arg0">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Concat final="1" public="1" set="method">
					<f a="values">
						<c path="cs.NativeArray"><c path="String"/></c>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Concat>
				<Concat final="1" public="1" set="method">
					<f a="args">
						<c path="cs.NativeArray"><d/></c>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Concat>
				<Concat final="1" public="1" set="method">
					<f a="str0:str1:str2:str3">
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Concat>
				<Concat final="1" public="1" set="method">
					<f a="str0:str1:str2">
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Concat>
				<Concat final="1" public="1" set="method">
					<f a="str0:str1">
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Concat>
				<Concat final="1" public="1" set="method">
					<f a="arg0:arg1:arg2:arg3">
						<d/>
						<d/>
						<d/>
						<d/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Concat>
				<Concat final="1" public="1" set="method">
					<f a="arg0:arg1:arg2">
						<d/>
						<d/>
						<d/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Concat>
				<Concat final="1" public="1" set="method">
					<f a="arg0:arg1">
						<d/>
						<d/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Concat>
			</overloads>
		</Concat>
		<Intern final="1" public="1" set="method" static="1">
			<f a="str">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Intern>
		<IsInterned final="1" public="1" set="method" static="1">
			<f a="str">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsInterned>
		<Join final="1" public="1" set="method" static="1">
			<f a="separator:value">
				<c path="String"/>
				<c path="cs.NativeArray"><c path="String"/></c>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><Join final="1" public="1" set="method">
	<f a="separator:value:startIndex:count">
		<c path="String"/>
		<c path="cs.NativeArray"><c path="String"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</Join></overloads>
		</Join>
		<op_Equality final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Equality>
		<op_Inequality final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Inequality>
		<Length public="1" get="accessor" set="null"><x path="Int"/></Length>
		<get_Chars final="1" set="method">
			<f a="index">
				<x path="Int"/>
				<t path="cs.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</get_Chars>
		<Clone final="1" public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</Clone>
		<GetTypeCode final="1" public="1" set="method">
			<f a=""><e path="cs.system.TypeCode"/></f>
			<meta><m n=":overload"/></meta>
		</GetTypeCode>
		<CopyTo final="1" public="1" set="method">
			<f a="sourceIndex:destination:destinationIndex:count">
				<x path="Int"/>
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CopyTo>
		<ToCharArray final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><t path="cs.types.Char16"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><ToCharArray final="1" public="1" set="method">
	<f a="startIndex:length">
		<x path="Int"/>
		<x path="Int"/>
		<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</ToCharArray></overloads>
		</ToCharArray>
		<Split final="1" public="1" set="method">
			<f a="separator">
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<c path="cs.NativeArray"><c path="String"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Split final="1" public="1" set="method">
					<f a="separator:options">
						<c path="cs.NativeArray"><c path="String"/></c>
						<e path="cs.system.StringSplitOptions"/>
						<c path="cs.NativeArray"><c path="String"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</Split>
				<Split final="1" public="1" set="method">
					<f a="separator:options">
						<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
						<e path="cs.system.StringSplitOptions"/>
						<c path="cs.NativeArray"><c path="String"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</Split>
				<Split final="1" public="1" set="method">
					<f a="separator:count:options">
						<c path="cs.NativeArray"><c path="String"/></c>
						<x path="Int"/>
						<e path="cs.system.StringSplitOptions"/>
						<c path="cs.NativeArray"><c path="String"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</Split>
				<Split final="1" public="1" set="method">
					<f a="separator:count:options">
						<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
						<x path="Int"/>
						<e path="cs.system.StringSplitOptions"/>
						<c path="cs.NativeArray"><c path="String"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</Split>
				<Split final="1" public="1" set="method">
					<f a="separator:count">
						<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
						<x path="Int"/>
						<c path="cs.NativeArray"><c path="String"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</Split>
			</overloads>
		</Split>
		<Substring final="1" public="1" set="method">
			<f a="startIndex">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><Substring final="1" public="1" set="method">
	<f a="startIndex:length">
		<x path="Int"/>
		<x path="Int"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</Substring></overloads>
		</Substring>
		<Trim final="1" public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><Trim final="1" public="1" set="method">
	<f a="trimChars">
		<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</Trim></overloads>
		</Trim>
		<TrimStart final="1" public="1" set="method">
			<f a="trimChars">
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</TrimStart>
		<TrimEnd final="1" public="1" set="method">
			<f a="trimChars">
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</TrimEnd>
		<CompareTo final="1" public="1" set="method">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><CompareTo final="1" public="1" set="method">
	<f a="strB">
		<c path="String"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</CompareTo></overloads>
		</CompareTo>
		<EndsWith final="1" public="1" set="method">
			<f a="value">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<EndsWith final="1" public="1" set="method">
					<f a="value:comparisonType">
						<c path="String"/>
						<e path="cs.system.StringComparison"/>
						<x path="Bool"/>
					</f>
					<meta><m n=":overload"/></meta>
				</EndsWith>
				<EndsWith final="1" public="1" set="method">
					<f a="value:ignoreCase:culture">
						<c path="String"/>
						<x path="Bool"/>
						<c path="cs.system.globalization.CultureInfo"/>
						<x path="Bool"/>
					</f>
					<meta><m n=":overload"/></meta>
				</EndsWith>
			</overloads>
		</EndsWith>
		<IndexOfAny final="1" public="1" set="method">
			<f a="anyOf">
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<IndexOfAny final="1" public="1" set="method">
					<f a="anyOf:startIndex:count">
						<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IndexOfAny>
				<IndexOfAny final="1" public="1" set="method">
					<f a="anyOf:startIndex">
						<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IndexOfAny>
			</overloads>
		</IndexOfAny>
		<IndexOf final="1" public="1" set="method">
			<f a="value:comparisonType">
				<c path="String"/>
				<e path="cs.system.StringComparison"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<IndexOf final="1" public="1" set="method">
					<f a="value:startIndex:count">
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IndexOf>
				<IndexOf final="1" public="1" set="method">
					<f a="value:startIndex">
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IndexOf>
				<IndexOf final="1" public="1" set="method">
					<f a="value">
						<c path="String"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IndexOf>
				<IndexOf final="1" public="1" set="method">
					<f a="value:startIndex:count">
						<t path="cs.types.Char16"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IndexOf>
				<IndexOf final="1" public="1" set="method">
					<f a="value:startIndex">
						<t path="cs.types.Char16"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IndexOf>
				<IndexOf final="1" public="1" set="method">
					<f a="value">
						<t path="cs.types.Char16"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IndexOf>
				<IndexOf final="1" public="1" set="method">
					<f a="value:startIndex:count:comparisonType">
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<e path="cs.system.StringComparison"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IndexOf>
				<IndexOf final="1" public="1" set="method">
					<f a="value:startIndex:comparisonType">
						<c path="String"/>
						<x path="Int"/>
						<e path="cs.system.StringComparison"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IndexOf>
			</overloads>
		</IndexOf>
		<LastIndexOf final="1" public="1" set="method">
			<f a="value:comparisonType">
				<c path="String"/>
				<e path="cs.system.StringComparison"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<LastIndexOf final="1" public="1" set="method">
					<f a="value:startIndex:count">
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
				<LastIndexOf final="1" public="1" set="method">
					<f a="value:startIndex">
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
				<LastIndexOf final="1" public="1" set="method">
					<f a="value">
						<c path="String"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
				<LastIndexOf final="1" public="1" set="method">
					<f a="value:startIndex:count">
						<t path="cs.types.Char16"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
				<LastIndexOf final="1" public="1" set="method">
					<f a="value:startIndex">
						<t path="cs.types.Char16"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
				<LastIndexOf final="1" public="1" set="method">
					<f a="value">
						<t path="cs.types.Char16"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
				<LastIndexOf final="1" public="1" set="method">
					<f a="value:startIndex:count:comparisonType">
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<e path="cs.system.StringComparison"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
				<LastIndexOf final="1" public="1" set="method">
					<f a="value:startIndex:comparisonType">
						<c path="String"/>
						<x path="Int"/>
						<e path="cs.system.StringComparison"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
			</overloads>
		</LastIndexOf>
		<LastIndexOfAny final="1" public="1" set="method">
			<f a="anyOf">
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<LastIndexOfAny final="1" public="1" set="method">
					<f a="anyOf:startIndex:count">
						<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOfAny>
				<LastIndexOfAny final="1" public="1" set="method">
					<f a="anyOf:startIndex">
						<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOfAny>
			</overloads>
		</LastIndexOfAny>
		<Contains final="1" public="1" set="method">
			<f a="value">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Contains>
		<Normalize final="1" public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><Normalize final="1" public="1" set="method">
	<f a="normalizationForm">
		<e path="cs.system.text.NormalizationForm"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</Normalize></overloads>
		</Normalize>
		<IsNormalized final="1" public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><IsNormalized final="1" public="1" set="method">
	<f a="normalizationForm">
		<e path="cs.system.text.NormalizationForm"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</IsNormalized></overloads>
		</IsNormalized>
		<Remove final="1" public="1" set="method">
			<f a="startIndex">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><Remove final="1" public="1" set="method">
	<f a="startIndex:count">
		<x path="Int"/>
		<x path="Int"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</Remove></overloads>
		</Remove>
		<PadLeft final="1" public="1" set="method">
			<f a="totalWidth">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><PadLeft final="1" public="1" set="method">
	<f a="totalWidth:paddingChar">
		<x path="Int"/>
		<t path="cs.types.Char16"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</PadLeft></overloads>
		</PadLeft>
		<PadRight final="1" public="1" set="method">
			<f a="totalWidth">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><PadRight final="1" public="1" set="method">
	<f a="totalWidth:paddingChar">
		<x path="Int"/>
		<t path="cs.types.Char16"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</PadRight></overloads>
		</PadRight>
		<StartsWith final="1" public="1" set="method">
			<f a="value">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<StartsWith final="1" public="1" set="method">
					<f a="value:ignoreCase:culture">
						<c path="String"/>
						<x path="Bool"/>
						<c path="cs.system.globalization.CultureInfo"/>
						<x path="Bool"/>
					</f>
					<meta><m n=":overload"/></meta>
				</StartsWith>
				<StartsWith final="1" public="1" set="method">
					<f a="value:comparisonType">
						<c path="String"/>
						<e path="cs.system.StringComparison"/>
						<x path="Bool"/>
					</f>
					<meta><m n=":overload"/></meta>
				</StartsWith>
			</overloads>
		</StartsWith>
		<Replace final="1" public="1" set="method">
			<f a="oldChar:newChar">
				<t path="cs.types.Char16"/>
				<t path="cs.types.Char16"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><Replace final="1" public="1" set="method">
	<f a="oldValue:newValue">
		<c path="String"/>
		<c path="String"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</Replace></overloads>
		</Replace>
		<ToLower final="1" public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><ToLower final="1" public="1" set="method">
	<f a="culture">
		<c path="cs.system.globalization.CultureInfo"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</ToLower></overloads>
		</ToLower>
		<ToLowerInvariant final="1" public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToLowerInvariant>
		<ToUpper final="1" public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><ToUpper final="1" public="1" set="method">
	<f a="culture">
		<c path="cs.system.globalization.CultureInfo"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</ToUpper></overloads>
		</ToUpper>
		<ToUpperInvariant final="1" public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToUpperInvariant>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><ToString final="1" public="1" set="method">
	<f a="provider">
		<c path="cs.system.IFormatProvider"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</ToString></overloads>
		</ToString>
		<Insert final="1" public="1" set="method">
			<f a="startIndex:value">
				<x path="Int"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Insert>
		<get_Length final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Length>
		<GetEnumerator final="1" public="1" set="method">
			<f a=""><c path="cs.system.CharEnumerator"/></f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":overload"/>
			</meta>
		</GetEnumerator>
		<new final="1" public="1" set="method">
			<f a="value">
				<x path="cs.Pointer"><t path="cs.types.Char16"/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="c:count">
						<t path="cs.types.Char16"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="value">
						<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="value:startIndex:length">
						<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="value:startIndex:length:enc">
						<x path="cs.Pointer"><t path="cs.types.Int8"/></x>
						<x path="Int"/>
						<x path="Int"/>
						<c path="cs.system.text.Encoding"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="value:startIndex:length">
						<x path="cs.Pointer"><t path="cs.types.Int8"/></x>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="value">
						<x path="cs.Pointer"><t path="cs.types.Int8"/></x>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="value:startIndex:length">
						<x path="cs.Pointer"><t path="cs.types.Char16"/></x>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.String"</e></m>
		</meta>
	</class>
	<class path="cs.internal.StringExt" params="" file="/home/vsts/work/1/s/std/cs/internal/StringExt.hx">
		<empty set="null" expr="new NativeString(cast 0, 0)" line="30" static="1">
			<c path="cs.system.String"/>
			<meta>
				<m n=":value"><e>new NativeString(cast 0, 0)</e></m>
				<m n=":readOnly"/>
			</meta>
		</empty>
		<charAt public="1" set="method" line="32" static="1"><f a="me:index">
	<t path="cs.internal._StringExt.NativeString"/>
	<x path="Int"/>
	<t path="cs.internal._StringExt.NativeString"/>
</f></charAt>
		<charCodeAt public="1" set="method" line="39" static="1"><f a="me:index">
	<t path="cs.internal._StringExt.NativeString"/>
	<x path="Int"/>
	<x path="Null"><x path="Int"/></x>
</f></charCodeAt>
		<indexOf public="1" set="method" line="46" static="1"><f a="me:str:?startIndex">
	<t path="cs.internal._StringExt.NativeString"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></indexOf>
		<lastIndexOf public="1" set="method" line="53" static="1">
			<f a="me:str:?startIndex">
				<t path="cs.internal._StringExt.NativeString"/>
				<t path="cs.internal._StringExt.NativeString"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</lastIndexOf>
		<split public="1" set="method" line="91" static="1">
			<f a="me:delimiter">
				<t path="cs.internal._StringExt.NativeString"/>
				<t path="cs.internal._StringExt.NativeString"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</split>
		<substr public="1" set="method" line="108" static="1"><f a="me:pos:?len">
	<t path="cs.internal._StringExt.NativeString"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></substr>
		<substring public="1" set="method" line="135" static="1"><f a="me:startIndex:?endIndex">
	<t path="cs.internal._StringExt.NativeString"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></substring>
		<toString public="1" set="method" line="159" static="1"><f a="me">
	<t path="cs.internal._StringExt.NativeString"/>
	<t path="cs.internal._StringExt.NativeString"/>
</f></toString>
		<toLowerCase public="1" set="method" line="163" static="1"><f a="me">
	<t path="cs.internal._StringExt.NativeString"/>
	<c path="String"/>
</f></toLowerCase>
		<toUpperCase public="1" set="method" line="167" static="1"><f a="me">
	<t path="cs.internal._StringExt.NativeString"/>
	<c path="String"/>
</f></toUpperCase>
		<toNativeString public="1" set="method" line="171" static="1"><f a="me">
	<t path="cs.internal._StringExt.NativeString"/>
	<t path="cs.internal._StringExt.NativeString"/>
</f></toNativeString>
		<fromCharCode public="1" set="method" line="175" static="1"><f a="code">
	<x path="Int"/>
	<c path="String"/>
</f></fromCharCode>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":keep"/>
			<m n=":nativeGen"/>
			<m n=":native"><e>"haxe.lang.StringExt"</e></m>
		</meta>
	</class>
	<class path="cs.internal.StringRefl" params="" file="/home/vsts/work/1/s/std/cs/internal/StringExt.hx" module="cs.internal.StringExt">
		<fields public="1" expr="[&quot;length&quot;, &quot;toUpperCase&quot;, &quot;toLowerCase&quot;, &quot;charAt&quot;, &quot;charCodeAt&quot;, &quot;indexOf&quot;, &quot;lastIndexOf&quot;, &quot;split&quot;, &quot;substr&quot;, &quot;substring&quot;]" line="182" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["length", "toUpperCase", "toLowerCase", "charAt", "charCodeAt", "indexOf", "lastIndexOf", "split", "substr", "substring"]</e></m></meta>
		</fields>
		<handleGetField public="1" set="method" line="186" static="1"><f a="str:f:throwErrors">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<d/>
</f></handleGetField>
		<handleCallField public="1" set="method" line="200" static="1"><f a="str:f:args">
	<t path="cs.internal._StringExt.NativeString"/>
	<c path="String"/>
	<c path="cs.NativeArray"><d/></c>
	<d/>
</f></handleCallField>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":keep"/>
			<m n=":nativeGen"/>
			<m n=":native"><e>"haxe.lang.StringRefl"</e></m>
		</meta>
	</class>
	<class path="haxe.io.Input" params="" file="/home/vsts/work/1/s/std/haxe/io/Input.hx">
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when reading numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<helper><t path="haxe.io.BytesData"/></helper>
		<readByte public="1" set="method" line="49">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read and return one byte.</haxe_doc>
		</readByte>
		<readBytes public="1" set="method" line="64">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Returns the actual length of read data that can be smaller than `len`.

		See `readFullBytes` that tries to read the exact amount of specified bytes.</haxe_doc>
		</readBytes>
		<close public="1" set="method" line="92">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the input source.

		Behaviour while reading after calling this method is unspecified.</haxe_doc>
		</close>
		<set_bigEndian set="method" line="94"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<readAll public="1" set="method" line="106">
			<f a="?bufsize">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Read and return all available data.

		The `bufsize` optional argument specifies the size of chunks by
		which data is read. Its default value is target-specific.</haxe_doc>
		</readAll>
		<readFullBytes public="1" set="method" line="132">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Unlike `readBytes`, this method tries to read the exact `len` amount of bytes.</haxe_doc>
		</readFullBytes>
		<read public="1" set="method" line="145">
			<f a="nbytes">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Read and return `nbytes` bytes.</haxe_doc>
		</read>
		<readUntil public="1" set="method" line="163">
			<f a="end">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Read a string until a character code specified by `end` is occurred.

		The final character is not included in the resulting string.</haxe_doc>
		</readUntil>
		<readLine public="1" set="method" line="176">
			<f a=""><c path="String"/></f>
			<haxe_doc>Read a line of text separated by CR and/or LF bytes.

		The CR/LF characters are not included in the resulting string.</haxe_doc>
		</readLine>
		<readFloat public="1" set="method" line="199">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Read a 32-bit floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readFloat>
		<readDouble public="1" set="method" line="208">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Read a 64-bit double-precision floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readDouble>
		<readInt8 public="1" set="method" line="217">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 8-bit signed integer.</haxe_doc>
		</readInt8>
		<readInt16 public="1" set="method" line="229">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 16-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt16>
		<readUInt16 public="1" set="method" line="243">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 16-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readUInt16>
		<readInt24 public="1" set="method" line="254">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 24-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt24>
		<readUInt24 public="1" set="method" line="269">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 24-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readUInt24>
		<readInt32 public="1" set="method" line="281">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt32>
		<readString public="1" set="method" line="304">
			<f a="len:?encoding">
				<x path="Int"/>
				<e path="haxe.io.Encoding"/>
				<c path="String"/>
			</f>
			<haxe_doc>Read and `len` bytes as a string.</haxe_doc>
		</readString>
		<haxe_doc>An Input is an abstract reader. See other classes in the `haxe.io` package
	for several possible implementations.

	All functions which read data throw `Eof` when the end of the stream
	is reached.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="cs.io.NativeInput" params="" file="/home/vsts/work/1/s/std/cs/io/NativeInput.hx">
		<extends path="haxe.io.Input"/>
		<canSeek public="1" get="accessor" set="null"><x path="Bool"/></canSeek>
		<stream><c path="cs.system.io.Stream"/></stream>
		<_eof><x path="Bool"/></_eof>
		<readByte public="1" set="method" line="44" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="53" override="1"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<close public="1" set="method" line="64" override="1"><f a=""><x path="Void"/></f></close>
		<get_canSeek get="inline" set="null" line="68"><f a=""><x path="Bool"/></f></get_canSeek>
		<seek public="1" set="method" line="72"><f a="p:pos">
	<x path="Int"/>
	<e path="sys.io.FileSeek"/>
	<x path="Void"/>
</f></seek>
		<tell public="1" set="method" line="83"><f a=""><x path="Int"/></f></tell>
		<eof public="1" get="inline" set="null" line="87"><f a=""><x path="Bool"/></f></eof>
		<new public="1" set="method" line="37"><f a="stream">
	<c path="cs.system.io.Stream"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.io.Output" params="" file="/home/vsts/work/1/s/std/haxe/io/Output.hx">
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when writing numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<writeByte public="1" set="method" line="46">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write one byte.</haxe_doc>
		</writeByte>
		<writeBytes public="1" set="method" line="57">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Returns the actual length of written data that can differ from `len`.

		See `writeFullBytes` that tries to write the exact amount of specified bytes.</haxe_doc>
		</writeBytes>
		<flush public="1" set="method" line="85">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Flush any buffered data.</haxe_doc>
		</flush>
		<close public="1" set="method" line="92">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the output.

		Behaviour while writing after calling this method is unspecified.</haxe_doc>
		</close>
		<set_bigEndian set="method" line="94"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<write public="1" set="method" line="103">
			<f a="s">
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write all bytes stored in `s`.</haxe_doc>
		</write>
		<writeFullBytes public="1" set="method" line="120">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Unlike `writeBytes`, this method tries to write the exact `len` amount of bytes.</haxe_doc>
		</writeFullBytes>
		<writeFloat public="1" set="method" line="133">
			<f a="x">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeFloat>
		<writeDouble public="1" set="method" line="142">
			<f a="x">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 64-bit double-precision floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeDouble>
		<writeInt8 public="1" set="method" line="156">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 8-bit signed integer.</haxe_doc>
		</writeInt8>
		<writeInt16 public="1" set="method" line="167">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 16-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt16>
		<writeUInt16 public="1" set="method" line="178">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 16-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeUInt16>
		<writeInt24 public="1" set="method" line="195">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 24-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt24>
		<writeUInt24 public="1" set="method" line="206">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 24-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeUInt24>
		<writeInt32 public="1" set="method" line="225">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt32>
		<prepare public="1" set="method" line="246">
			<f a="nbytes">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inform that we are about to write at least `nbytes` bytes.

		The underlying implementation can allocate proper working space depending
		on this information, or simply ignore it. This is not a mandatory call
		but a tip and is only used in some specific cases.</haxe_doc>
		</prepare>
		<writeInput public="1" set="method" line="254">
			<f a="i:?bufsize">
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Read all available data from `i` and write it.

		The `bufsize` optional argument specifies the size of chunks by
		which data is read and written. Its default value is 4096.</haxe_doc>
		</writeInput>
		<writeString public="1" set="method" line="278">
			<f a="s:?encoding">
				<c path="String"/>
				<e path="haxe.io.Encoding"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `s` string.</haxe_doc>
		</writeString>
		<haxe_doc>An Output is an abstract write. A specific output implementation will only
	have to override the `writeByte` and maybe the `write`, `flush` and `close`
	methods. See `File.write` and `String.write` for two ways of creating an
	Output.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="cs.io.NativeOutput" params="" file="/home/vsts/work/1/s/std/cs/io/NativeOutput.hx">
		<extends path="haxe.io.Output"/>
		<canSeek get="accessor" set="null"><x path="Bool"/></canSeek>
		<stream><c path="cs.system.io.Stream"/></stream>
		<writeByte public="1" set="method" line="40" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<close public="1" set="method" line="44" override="1"><f a=""><x path="Void"/></f></close>
		<flush public="1" set="method" line="48" override="1"><f a=""><x path="Void"/></f></flush>
		<prepare public="1" set="method" line="52" override="1"><f a="nbytes">
	<x path="Int"/>
	<x path="Void"/>
</f></prepare>
		<get_canSeek get="inline" set="null" line="57"><f a=""><x path="Bool"/></f></get_canSeek>
		<seek public="1" set="method" line="61"><f a="p:pos">
	<x path="Int"/>
	<e path="sys.io.FileSeek"/>
	<x path="Void"/>
</f></seek>
		<tell public="1" set="method" line="71"><f a=""><x path="Int"/></f></tell>
		<new public="1" set="method" line="34"><f a="stream">
	<c path="cs.system.io.Stream"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="cs.system.Delegate" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Delegate" extern="1">
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<CreateDelegate final="1" public="1" set="method" static="1">
			<f a="type:firstArgument:method:throwOnBindFailure">
				<c path="cs.system.Type"/>
				<d/>
				<c path="cs.system.reflection.MethodInfo"/>
				<x path="Bool"/>
				<c path="cs.system.Delegate"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<CreateDelegate final="1" public="1" set="method">
					<f a="type:target:method:ignoreCase">
						<c path="cs.system.Type"/>
						<d/>
						<c path="String"/>
						<x path="Bool"/>
						<c path="cs.system.Delegate"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateDelegate>
				<CreateDelegate final="1" public="1" set="method">
					<f a="type:target:method:ignoreCase:throwOnBindFailure">
						<c path="cs.system.Type"/>
						<d/>
						<c path="String"/>
						<x path="Bool"/>
						<x path="Bool"/>
						<c path="cs.system.Delegate"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateDelegate>
				<CreateDelegate final="1" public="1" set="method">
					<f a="type:target:method:ignoreCase">
						<c path="cs.system.Type"/>
						<c path="cs.system.Type"/>
						<c path="String"/>
						<x path="Bool"/>
						<c path="cs.system.Delegate"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateDelegate>
				<CreateDelegate final="1" public="1" set="method">
					<f a="type:target:method">
						<c path="cs.system.Type"/>
						<c path="cs.system.Type"/>
						<c path="String"/>
						<c path="cs.system.Delegate"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateDelegate>
				<CreateDelegate final="1" public="1" set="method">
					<f a="type:target:method:ignoreCase:throwOnBindFailure">
						<c path="cs.system.Type"/>
						<c path="cs.system.Type"/>
						<c path="String"/>
						<x path="Bool"/>
						<x path="Bool"/>
						<c path="cs.system.Delegate"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateDelegate>
				<CreateDelegate final="1" public="1" set="method">
					<f a="type:target:method">
						<c path="cs.system.Type"/>
						<d/>
						<c path="String"/>
						<c path="cs.system.Delegate"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateDelegate>
				<CreateDelegate final="1" public="1" set="method">
					<f a="type:method">
						<c path="cs.system.Type"/>
						<c path="cs.system.reflection.MethodInfo"/>
						<c path="cs.system.Delegate"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateDelegate>
				<CreateDelegate final="1" public="1" set="method">
					<f a="type:method:throwOnBindFailure">
						<c path="cs.system.Type"/>
						<c path="cs.system.reflection.MethodInfo"/>
						<x path="Bool"/>
						<c path="cs.system.Delegate"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateDelegate>
				<CreateDelegate final="1" public="1" set="method">
					<f a="type:firstArgument:method">
						<c path="cs.system.Type"/>
						<d/>
						<c path="cs.system.reflection.MethodInfo"/>
						<c path="cs.system.Delegate"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateDelegate>
			</overloads>
		</CreateDelegate>
		<Combine final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="cs.system.Delegate"/>
				<c path="cs.system.Delegate"/>
				<c path="cs.system.Delegate"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><Combine final="1" public="1" set="method">
	<f a="delegates">
		<c path="cs.NativeArray"><c path="cs.system.Delegate"/></c>
		<c path="cs.system.Delegate"/>
	</f>
	<meta><m n=":overload"/></meta>
</Combine></overloads>
		</Combine>
		<Remove final="1" public="1" set="method" static="1">
			<f a="source:value">
				<c path="cs.system.Delegate"/>
				<c path="cs.system.Delegate"/>
				<c path="cs.system.Delegate"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Remove>
		<RemoveAll final="1" public="1" set="method" static="1">
			<f a="source:value">
				<c path="cs.system.Delegate"/>
				<c path="cs.system.Delegate"/>
				<c path="cs.system.Delegate"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveAll>
		<op_Equality final="1" public="1" set="method" static="1">
			<f a="d1:d2">
				<c path="cs.system.Delegate"/>
				<c path="cs.system.Delegate"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Equality>
		<op_Inequality final="1" public="1" set="method" static="1">
			<f a="d1:d2">
				<c path="cs.system.Delegate"/>
				<c path="cs.system.Delegate"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Inequality>
		<Target public="1" get="accessor" set="null"><d/></Target>
		<Method public="1" get="accessor" set="null"><c path="cs.system.reflection.MethodInfo"/></Method>
		<get_Method final="1" set="method">
			<f a=""><c path="cs.system.reflection.MethodInfo"/></f>
			<meta><m n=":overload"/></meta>
		</get_Method>
		<get_Target final="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_Target>
		<DynamicInvoke final="1" public="1" set="method">
			<f a="args">
				<c path="cs.NativeArray"><d/></c>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</DynamicInvoke>
		<DynamicInvokeImpl set="method">
			<f a="args">
				<c path="cs.NativeArray"><d/></c>
				<d/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</DynamicInvokeImpl>
		<Clone public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</Clone>
		<GetMethodImpl set="method">
			<f a=""><c path="cs.system.reflection.MethodInfo"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</GetMethodImpl>
		<GetObjectData public="1" set="method">
			<f a="info:context">
				<c path="cs.system.runtime.serialization.SerializationInfo"/>
				<c path="cs.system.runtime.serialization.StreamingContext"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetObjectData>
		<GetInvocationList public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.Delegate"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetInvocationList>
		<CombineImpl set="method">
			<f a="d">
				<c path="cs.system.Delegate"/>
				<c path="cs.system.Delegate"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</CombineImpl>
		<RemoveImpl set="method">
			<f a="d">
				<c path="cs.system.Delegate"/>
				<c path="cs.system.Delegate"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</RemoveImpl>
		<new final="1" set="method">
			<f a="target:method">
				<d/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
			<overloads><new final="1" set="method">
	<f a="target:method">
		<c path="cs.system.Type"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":protected"/>
		<m n=":overload"/>
	</meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Delegate"</e></m>
		</meta>
	</class>
	<class path="cs.system.MulticastDelegate" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.MulticastDelegate" extern="1">
		<extends path="cs.system.Delegate"/>
		<op_Equality final="1" public="1" set="method" static="1">
			<f a="d1:d2">
				<c path="cs.system.MulticastDelegate"/>
				<c path="cs.system.MulticastDelegate"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Equality>
		<op_Inequality final="1" public="1" set="method" static="1">
			<f a="d1:d2">
				<c path="cs.system.MulticastDelegate"/>
				<c path="cs.system.MulticastDelegate"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Inequality>
		<GetObjectData public="1" set="method" override="1">
			<f a="info:context">
				<c path="cs.system.runtime.serialization.SerializationInfo"/>
				<c path="cs.system.runtime.serialization.StreamingContext"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetObjectData>
		<DynamicInvokeImpl final="1" set="method" override="1">
			<f a="args">
				<c path="cs.NativeArray"><d/></c>
				<d/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</DynamicInvokeImpl>
		<GetInvocationList final="1" public="1" set="method" override="1">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.Delegate"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetInvocationList>
		<CombineImpl final="1" set="method" override="1">
			<f a="follow">
				<c path="cs.system.Delegate"/>
				<c path="cs.system.Delegate"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</CombineImpl>
		<RemoveImpl final="1" set="method" override="1">
			<f a="value">
				<c path="cs.system.Delegate"/>
				<c path="cs.system.Delegate"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</RemoveImpl>
		<new final="1" set="method">
			<f a="target:method">
				<d/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
			<overloads><new final="1" set="method">
	<f a="target:method">
		<c path="cs.system.Type"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":protected"/>
		<m n=":overload"/>
	</meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.MulticastDelegate"</e></m>
		</meta>
	</class>
	<class path="cs.system.Delegate_Action_1" params="T0" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Action_1" module="cs.system.Action_1" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" params="T0" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.Action_1"><c path="op_Addition.T0"/></x>
	<x path="cs.system.Action_1"><c path="op_Addition.T0"/></x>
	<x path="cs.system.Action_1"><c path="op_Addition.T0"/></x>
</f></op_Addition>
		<op_Subtraction public="1" params="T0" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.Action_1"><c path="op_Subtraction.T0"/></x>
	<x path="cs.system.Action_1"><c path="op_Subtraction.T0"/></x>
	<x path="cs.system.Action_1"><c path="op_Subtraction.T0"/></x>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="obj">
				<c path="cs.system.Delegate_Action_1.T0"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="obj:callback:object">
				<c path="cs.system.Delegate_Action_1.T0"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Action`1"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.Action_1" params="T0" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Action_1">
		<from><icast field="FromHaxeFunction"><f a="">
	<c path="FromHaxeFunction.T0"/>
	<x path="Void"/>
</f></icast></from>
		<this><c path="cs.system.Delegate_Action_1"><c path="cs.system.Action_1.T0"/></c></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system._Action_1.Action_1_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Action_1" private="1" module="cs.system.Action_1">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="">
				<c path="cs.system.Action_1.T0"/>
				<x path="Void"/>
			</f>
			<x path="cs.system.Action_1"><c path="cs.system.Action_1.T0"/></x>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" params="T0" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="">
				<c path="FromHaxeFunction.T0"/>
				<x path="Void"/>
			</f>
			<x path="cs.system.Action_1"><c path="FromHaxeFunction.T0"/></x>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.Delegate_Action_1"><c path="cs.system.Action_1.T0"/></c>
			<c path="cs.system.Delegate_Action_1"><c path="cs.system.Action_1.T0"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" params="T0" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.Action_1"><c path="Add.T0"/></x>
			<x path="cs.system.Action_1"><c path="Add.T0"/></x>
			<x path="cs.system.Action_1"><c path="Add.T0"/></x>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" params="T0" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.Action_1"><c path="Remove.T0"/></x>
			<x path="cs.system.Action_1"><c path="Remove.T0"/></x>
			<x path="cs.system.Action_1"><c path="Remove.T0"/></x>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system._Action_1.Action_1_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Action_1" private="1" module="cs.system.Action_1">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="">
					<c path="cs.system.Action_1.T0"/>
					<x path="Void"/>
				</f>
				<x path="cs.system.Action_1"><c path="cs.system.Action_1.T0"/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" params="T0" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="">
					<c path="FromHaxeFunction.T0"/>
					<x path="Void"/>
				</f>
				<x path="cs.system.Action_1"><c path="FromHaxeFunction.T0"/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.Delegate_Action_1"><c path="cs.system.Action_1.T0"/></c>
				<c path="cs.system.Delegate_Action_1"><c path="cs.system.Action_1.T0"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" params="T0" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.Action_1"><c path="Add.T0"/></x>
				<x path="cs.system.Action_1"><c path="Add.T0"/></x>
				<x path="cs.system.Action_1"><c path="Add.T0"/></x>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" params="T0" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.Action_1"><c path="Remove.T0"/></x>
				<x path="cs.system.Action_1"><c path="Remove.T0"/></x>
				<x path="cs.system.Action_1"><c path="Remove.T0"/></x>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<enum path="cs.system.ActivationContext_ContextForm" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.ActivationContext" module="cs.system.ActivationContext">
		<Loose><meta><m n=":csNative"><e>0</e></m></meta></Loose>
		<StoreBounded><meta><m n=":csNative"><e>1</e></m></meta></StoreBounded>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.ActivationContext.ContextForm"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.IDisposable" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.IDisposable" extern="1" interface="1">
		<Dispose public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Dispose>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IDisposable"</e></m>
		</meta>
	</class>
	<class path="cs.system.ActivationContext" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.ActivationContext" extern="1">
		<implements path="cs.system.IDisposable"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<CreatePartialActivationContext final="1" public="1" set="method" static="1">
			<f a="identity">
				<c path="cs.system.ApplicationIdentity"/>
				<c path="cs.system.ActivationContext"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><CreatePartialActivationContext final="1" public="1" set="method">
	<f a="identity:manifestPaths">
		<c path="cs.system.ApplicationIdentity"/>
		<c path="cs.NativeArray"><c path="String"/></c>
		<c path="cs.system.ActivationContext"/>
	</f>
	<meta><m n=":overload"/></meta>
</CreatePartialActivationContext></overloads>
		</CreatePartialActivationContext>
		<Identity public="1" get="accessor" set="null"><c path="cs.system.ApplicationIdentity"/></Identity>
		<Form public="1" get="accessor" set="null"><e path="cs.system.ActivationContext_ContextForm"/></Form>
		<get_Form final="1" set="method">
			<f a=""><e path="cs.system.ActivationContext_ContextForm"/></f>
			<meta><m n=":overload"/></meta>
		</get_Form>
		<get_Identity final="1" set="method">
			<f a=""><c path="cs.system.ApplicationIdentity"/></f>
			<meta><m n=":overload"/></meta>
		</get_Identity>
		<Dispose final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Dispose>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ActivationContext"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._Activator" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._Activator" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method">
			<f a="riid:rgszNames:cNames:lcid:rgDispId">
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<c path="cs.system.IntPtr"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetIDsOfNames>
		<GetTypeInfo public="1" set="method">
			<f a="iTInfo:lcid:ppTInfo">
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfo>
		<GetTypeInfoCount public="1" set="method">
			<f a="pcTInfo">
				<t path="cs.Out"><x path="UInt"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfoCount>
		<Invoke public="1" set="method">
			<f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
				<x path="UInt"/>
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<x path="UInt"/>
				<t path="cs.types.Int16"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._Activator"</e></m>
		</meta>
	</class>
	<class path="cs.system.Activator" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Activator" extern="1">
		<implements path="cs.system.runtime.interopservices._Activator"/>
		<CreateComInstanceFrom final="1" public="1" set="method" static="1">
			<f a="assemblyName:typeName">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.system.runtime.remoting.ObjectHandle"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><CreateComInstanceFrom final="1" public="1" set="method">
	<f a="assemblyName:typeName:hashValue:hashAlgorithm">
		<c path="String"/>
		<c path="String"/>
		<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
		<e path="cs.system.configuration.assemblies.AssemblyHashAlgorithm"/>
		<c path="cs.system.runtime.remoting.ObjectHandle"/>
	</f>
	<meta><m n=":overload"/></meta>
</CreateComInstanceFrom></overloads>
		</CreateComInstanceFrom>
		<CreateInstanceFrom final="1" public="1" set="method" static="1">
			<f a="assemblyFile:typeName">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.system.runtime.remoting.ObjectHandle"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<CreateInstanceFrom final="1" public="1" set="method">
					<f a="domain:assemblyFile:typeName:ignoreCase:bindingAttr:binder:args:culture:activationAttributes:securityAttributes">
						<c path="cs.system.AppDomain"/>
						<c path="String"/>
						<c path="String"/>
						<x path="Bool"/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.Binder"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.globalization.CultureInfo"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.system.runtime.remoting.ObjectHandle"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstanceFrom>
				<CreateInstanceFrom final="1" public="1" set="method">
					<f a="domain:assemblyFile:typeName">
						<c path="cs.system.AppDomain"/>
						<c path="String"/>
						<c path="String"/>
						<c path="cs.system.runtime.remoting.ObjectHandle"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstanceFrom>
				<CreateInstanceFrom final="1" public="1" set="method">
					<f a="assemblyFile:typeName:ignoreCase:bindingAttr:binder:args:culture:activationAttributes:securityInfo">
						<c path="String"/>
						<c path="String"/>
						<x path="Bool"/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.Binder"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.globalization.CultureInfo"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.system.runtime.remoting.ObjectHandle"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstanceFrom>
				<CreateInstanceFrom final="1" public="1" set="method">
					<f a="assemblyFile:typeName:activationAttributes">
						<c path="String"/>
						<c path="String"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.runtime.remoting.ObjectHandle"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstanceFrom>
			</overloads>
		</CreateInstanceFrom>
		<CreateInstance final="1" public="1" set="method" static="1">
			<f a="assemblyName:typeName">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.system.runtime.remoting.ObjectHandle"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<CreateInstance final="1" public="1" set="method">
					<f a="type:nonPublic">
						<c path="cs.system.Type"/>
						<x path="Bool"/>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstance>
				<CreateInstance final="1" public="1" set="method">
					<f a="type:bindingAttr:binder:args:culture:activationAttributes">
						<c path="cs.system.Type"/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.Binder"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.globalization.CultureInfo"/>
						<c path="cs.NativeArray"><d/></c>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstance>
				<CreateInstance final="1" public="1" set="method">
					<f a="type:bindingAttr:binder:args:culture">
						<c path="cs.system.Type"/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.Binder"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.globalization.CultureInfo"/>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstance>
				<CreateInstance final="1" public="1" set="method">
					<f a="type:args:activationAttributes">
						<c path="cs.system.Type"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.NativeArray"><d/></c>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstance>
				<CreateInstance final="1" public="1" set="method">
					<f a="type:args">
						<c path="cs.system.Type"/>
						<c path="cs.NativeArray"><d/></c>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstance>
				<CreateInstance final="1" public="1" set="method">
					<f a="type">
						<c path="cs.system.Type"/>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstance>
				<CreateInstance final="1" public="1" params="M0" set="method">
					<f a=""><c path="CreateInstance.M0"/></f>
					<meta><m n=":overload"/></meta>
				</CreateInstance>
				<CreateInstance final="1" public="1" set="method">
					<f a="domain:assemblyName:typeName:ignoreCase:bindingAttr:binder:args:culture:activationAttributes:securityAttributes">
						<c path="cs.system.AppDomain"/>
						<c path="String"/>
						<c path="String"/>
						<x path="Bool"/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.Binder"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.globalization.CultureInfo"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.system.runtime.remoting.ObjectHandle"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstance>
				<CreateInstance final="1" public="1" set="method">
					<f a="domain:assemblyName:typeName">
						<c path="cs.system.AppDomain"/>
						<c path="String"/>
						<c path="String"/>
						<c path="cs.system.runtime.remoting.ObjectHandle"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstance>
				<CreateInstance final="1" public="1" set="method">
					<f a="activationContext:activationCustomData">
						<c path="cs.system.ActivationContext"/>
						<c path="cs.NativeArray"><c path="String"/></c>
						<c path="cs.system.runtime.remoting.ObjectHandle"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstance>
				<CreateInstance final="1" public="1" set="method">
					<f a="activationContext">
						<c path="cs.system.ActivationContext"/>
						<c path="cs.system.runtime.remoting.ObjectHandle"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstance>
				<CreateInstance final="1" public="1" set="method">
					<f a="assemblyName:typeName:ignoreCase:bindingAttr:binder:args:culture:activationAttributes:securityInfo">
						<c path="String"/>
						<c path="String"/>
						<x path="Bool"/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.Binder"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.globalization.CultureInfo"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.system.runtime.remoting.ObjectHandle"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstance>
				<CreateInstance final="1" public="1" set="method">
					<f a="assemblyName:typeName:activationAttributes">
						<c path="String"/>
						<c path="String"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.runtime.remoting.ObjectHandle"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstance>
			</overloads>
		</CreateInstance>
		<GetObject final="1" public="1" set="method" static="1">
			<f a="type:url">
				<c path="cs.system.Type"/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetObject final="1" public="1" set="method">
	<f a="type:url:state">
		<c path="cs.system.Type"/>
		<c path="String"/>
		<d/>
		<d/>
	</f>
	<meta><m n=":overload"/></meta>
</GetObject></overloads>
		</GetObject>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Activator"</e></m>
		</meta>
	</class>
	<class path="cs.system.AppDomain_Initializer" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.AppDomain" module="cs.system.AppDomain" extern="1">
		<Initialize final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Initialize>
		<new final="1" public="1" set="method">
			<f a="initializer:arguments">
				<x path="cs.system.AppDomainInitializer"/>
				<c path="cs.NativeArray"><c path="String"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.AppDomain.Initializer"</e></m>
		</meta>
	</class>
	<class path="cs.system.AppDomain_Loader" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.AppDomain" module="cs.system.AppDomain" extern="1">
		<Load final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Load>
		<new final="1" public="1" set="method">
			<f a="assembly">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.AppDomain.Loader"</e></m>
		</meta>
	</class>
	<class path="cs.system.MarshalByRefObject" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.MarshalByRefObject" extern="1">
		<CreateObjRef public="1" set="method">
			<f a="requestedType">
				<c path="cs.system.Type"/>
				<c path="cs.system.runtime.remoting.ObjRef"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CreateObjRef>
		<GetLifetimeService final="1" public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</GetLifetimeService>
		<InitializeLifetimeService public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</InitializeLifetimeService>
		<MemberwiseClone final="1" set="method">
			<f a="cloneIdentity">
				<x path="Bool"/>
				<c path="cs.system.MarshalByRefObject"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</MemberwiseClone>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.MarshalByRefObject"</e></m>
		</meta>
	</class>
	<class path="cs.system._AppDomain" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system._AppDomain" extern="1" interface="1">
		<UnhandledException>
			<x path="cs.system.UnhandledExceptionEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</UnhandledException>
		<TypeResolve>
			<x path="cs.system.ResolveEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</TypeResolve>
		<ResourceResolve>
			<x path="cs.system.ResolveEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</ResourceResolve>
		<ProcessExit>
			<x path="cs.system.EventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</ProcessExit>
		<DomainUnload>
			<x path="cs.system.EventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</DomainUnload>
		<AssemblyResolve>
			<x path="cs.system.ResolveEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</AssemblyResolve>
		<AssemblyLoad>
			<x path="cs.system.AssemblyLoadEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</AssemblyLoad>
		<ShadowCopyFiles public="1" get="accessor" set="null"><x path="Bool"/></ShadowCopyFiles>
		<RelativeSearchPath public="1" get="accessor" set="null"><c path="String"/></RelativeSearchPath>
		<FriendlyName public="1" get="accessor" set="null"><c path="String"/></FriendlyName>
		<Evidence public="1" get="accessor" set="null"><c path="cs.system.security.policy.Evidence"/></Evidence>
		<DynamicDirectory public="1" get="accessor" set="null"><c path="String"/></DynamicDirectory>
		<BaseDirectory public="1" get="accessor" set="null"><c path="String"/></BaseDirectory>
		<add_AssemblyLoad public="1" set="method">
			<f a="value">
				<x path="cs.system.AssemblyLoadEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add_AssemblyLoad>
		<remove_AssemblyLoad public="1" set="method">
			<f a="value">
				<x path="cs.system.AssemblyLoadEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove_AssemblyLoad>
		<add_AssemblyResolve public="1" set="method">
			<f a="value">
				<x path="cs.system.ResolveEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add_AssemblyResolve>
		<remove_AssemblyResolve public="1" set="method">
			<f a="value">
				<x path="cs.system.ResolveEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove_AssemblyResolve>
		<add_DomainUnload public="1" set="method">
			<f a="value">
				<x path="cs.system.EventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add_DomainUnload>
		<remove_DomainUnload public="1" set="method">
			<f a="value">
				<x path="cs.system.EventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove_DomainUnload>
		<add_ProcessExit public="1" set="method">
			<f a="value">
				<x path="cs.system.EventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add_ProcessExit>
		<remove_ProcessExit public="1" set="method">
			<f a="value">
				<x path="cs.system.EventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove_ProcessExit>
		<add_ResourceResolve public="1" set="method">
			<f a="value">
				<x path="cs.system.ResolveEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add_ResourceResolve>
		<remove_ResourceResolve public="1" set="method">
			<f a="value">
				<x path="cs.system.ResolveEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove_ResourceResolve>
		<add_TypeResolve public="1" set="method">
			<f a="value">
				<x path="cs.system.ResolveEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add_TypeResolve>
		<remove_TypeResolve public="1" set="method">
			<f a="value">
				<x path="cs.system.ResolveEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove_TypeResolve>
		<add_UnhandledException public="1" set="method">
			<f a="value">
				<x path="cs.system.UnhandledExceptionEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add_UnhandledException>
		<remove_UnhandledException public="1" set="method">
			<f a="value">
				<x path="cs.system.UnhandledExceptionEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove_UnhandledException>
		<get_BaseDirectory set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_BaseDirectory>
		<get_DynamicDirectory set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_DynamicDirectory>
		<get_Evidence set="method">
			<f a=""><c path="cs.system.security.policy.Evidence"/></f>
			<meta><m n=":overload"/></meta>
		</get_Evidence>
		<get_FriendlyName set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_FriendlyName>
		<get_RelativeSearchPath set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_RelativeSearchPath>
		<get_ShadowCopyFiles set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_ShadowCopyFiles>
		<AppendPrivatePath public="1" set="method">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AppendPrivatePath>
		<ClearPrivatePath public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</ClearPrivatePath>
		<ClearShadowCopyPath public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</ClearShadowCopyPath>
		<CreateInstance public="1" set="method">
			<f a="assemblyName:typeName">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.system.runtime.remoting.ObjectHandle"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<CreateInstance public="1" set="method">
					<f a="assemblyName:typeName:ignoreCase:bindingAttr:binder:args:culture:activationAttributes:securityAttributes">
						<c path="String"/>
						<c path="String"/>
						<x path="Bool"/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.Binder"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.globalization.CultureInfo"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.system.runtime.remoting.ObjectHandle"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstance>
				<CreateInstance public="1" set="method">
					<f a="assemblyName:typeName:activationAttributes">
						<c path="String"/>
						<c path="String"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.runtime.remoting.ObjectHandle"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstance>
			</overloads>
		</CreateInstance>
		<CreateInstanceFrom public="1" set="method">
			<f a="assemblyFile:typeName">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.system.runtime.remoting.ObjectHandle"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<CreateInstanceFrom public="1" set="method">
					<f a="assemblyFile:typeName:ignoreCase:bindingAttr:binder:args:culture:activationAttributes:securityAttributes">
						<c path="String"/>
						<c path="String"/>
						<x path="Bool"/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.Binder"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.globalization.CultureInfo"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.system.runtime.remoting.ObjectHandle"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstanceFrom>
				<CreateInstanceFrom public="1" set="method">
					<f a="assemblyFile:typeName:activationAttributes">
						<c path="String"/>
						<c path="String"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.runtime.remoting.ObjectHandle"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstanceFrom>
			</overloads>
		</CreateInstanceFrom>
		<DefineDynamicAssembly public="1" set="method">
			<f a="name:access">
				<c path="cs.system.reflection.AssemblyName"/>
				<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
				<c path="cs.system.reflection.emit.AssemblyBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<DefineDynamicAssembly public="1" set="method">
					<f a="name:access:dir:evidence:requiredPermissions:optionalPermissions:refusedPermissions:isSynchronized">
						<c path="cs.system.reflection.AssemblyName"/>
						<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
						<c path="String"/>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.system.security.PermissionSet"/>
						<c path="cs.system.security.PermissionSet"/>
						<c path="cs.system.security.PermissionSet"/>
						<x path="Bool"/>
						<c path="cs.system.reflection.emit.AssemblyBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineDynamicAssembly>
				<DefineDynamicAssembly public="1" set="method">
					<f a="name:access:dir:evidence:requiredPermissions:optionalPermissions:refusedPermissions">
						<c path="cs.system.reflection.AssemblyName"/>
						<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
						<c path="String"/>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.system.security.PermissionSet"/>
						<c path="cs.system.security.PermissionSet"/>
						<c path="cs.system.security.PermissionSet"/>
						<c path="cs.system.reflection.emit.AssemblyBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineDynamicAssembly>
				<DefineDynamicAssembly public="1" set="method">
					<f a="name:access:dir:requiredPermissions:optionalPermissions:refusedPermissions">
						<c path="cs.system.reflection.AssemblyName"/>
						<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
						<c path="String"/>
						<c path="cs.system.security.PermissionSet"/>
						<c path="cs.system.security.PermissionSet"/>
						<c path="cs.system.security.PermissionSet"/>
						<c path="cs.system.reflection.emit.AssemblyBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineDynamicAssembly>
				<DefineDynamicAssembly public="1" set="method">
					<f a="name:access:evidence:requiredPermissions:optionalPermissions:refusedPermissions">
						<c path="cs.system.reflection.AssemblyName"/>
						<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.system.security.PermissionSet"/>
						<c path="cs.system.security.PermissionSet"/>
						<c path="cs.system.security.PermissionSet"/>
						<c path="cs.system.reflection.emit.AssemblyBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineDynamicAssembly>
				<DefineDynamicAssembly public="1" set="method">
					<f a="name:access:requiredPermissions:optionalPermissions:refusedPermissions">
						<c path="cs.system.reflection.AssemblyName"/>
						<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
						<c path="cs.system.security.PermissionSet"/>
						<c path="cs.system.security.PermissionSet"/>
						<c path="cs.system.security.PermissionSet"/>
						<c path="cs.system.reflection.emit.AssemblyBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineDynamicAssembly>
				<DefineDynamicAssembly public="1" set="method">
					<f a="name:access:dir:evidence">
						<c path="cs.system.reflection.AssemblyName"/>
						<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
						<c path="String"/>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.system.reflection.emit.AssemblyBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineDynamicAssembly>
				<DefineDynamicAssembly public="1" set="method">
					<f a="name:access:dir">
						<c path="cs.system.reflection.AssemblyName"/>
						<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
						<c path="String"/>
						<c path="cs.system.reflection.emit.AssemblyBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineDynamicAssembly>
				<DefineDynamicAssembly public="1" set="method">
					<f a="name:access:evidence">
						<c path="cs.system.reflection.AssemblyName"/>
						<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.system.reflection.emit.AssemblyBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineDynamicAssembly>
			</overloads>
		</DefineDynamicAssembly>
		<DoCallBack public="1" set="method">
			<f a="theDelegate">
				<x path="cs.system.CrossAppDomainDelegate"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DoCallBack>
		<ExecuteAssembly public="1" set="method">
			<f a="assemblyFile">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<ExecuteAssembly public="1" set="method">
					<f a="assemblyFile:assemblySecurity:args">
						<c path="String"/>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.NativeArray"><c path="String"/></c>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ExecuteAssembly>
				<ExecuteAssembly public="1" set="method">
					<f a="assemblyFile:assemblySecurity">
						<c path="String"/>
						<c path="cs.system.security.policy.Evidence"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ExecuteAssembly>
			</overloads>
		</ExecuteAssembly>
		<GetAssemblies public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.Assembly"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetAssemblies>
		<GetData public="1" set="method">
			<f a="name">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetData>
		<GetLifetimeService public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</GetLifetimeService>
		<GetType public="1" set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</GetType>
		<InitializeLifetimeService public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</InitializeLifetimeService>
		<Load public="1" set="method">
			<f a="assemblyRef">
				<c path="cs.system.reflection.AssemblyName"/>
				<c path="cs.system.reflection.Assembly"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Load public="1" set="method">
					<f a="rawAssembly:rawSymbolStore:securityEvidence">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.system.reflection.Assembly"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Load>
				<Load public="1" set="method">
					<f a="assemblyString:assemblySecurity">
						<c path="String"/>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.system.reflection.Assembly"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Load>
				<Load public="1" set="method">
					<f a="rawAssembly:rawSymbolStore">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<c path="cs.system.reflection.Assembly"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Load>
				<Load public="1" set="method">
					<f a="assemblyRef:assemblySecurity">
						<c path="cs.system.reflection.AssemblyName"/>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.system.reflection.Assembly"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Load>
				<Load public="1" set="method">
					<f a="assemblyString">
						<c path="String"/>
						<c path="cs.system.reflection.Assembly"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Load>
				<Load public="1" set="method">
					<f a="rawAssembly">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<c path="cs.system.reflection.Assembly"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Load>
			</overloads>
		</Load>
		<SetAppDomainPolicy public="1" set="method">
			<f a="domainPolicy">
				<c path="cs.system.security.policy.PolicyLevel"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetAppDomainPolicy>
		<SetCachePath public="1" set="method">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetCachePath>
		<SetData public="1" set="method">
			<f a="name:data">
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetData>
		<SetPrincipalPolicy public="1" set="method">
			<f a="policy">
				<e path="cs.system.security.principal.PrincipalPolicy"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetPrincipalPolicy>
		<SetShadowCopyPath public="1" set="method">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetShadowCopyPath>
		<SetThreadPrincipal public="1" set="method">
			<f a="principal">
				<c path="cs.system.security.principal.IPrincipal"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetThreadPrincipal>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<GetIDsOfNames public="1" set="method">
			<f a="riid:rgszNames:cNames:lcid:rgDispId">
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<c path="cs.system.IntPtr"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetIDsOfNames>
		<GetTypeInfo public="1" set="method">
			<f a="iTInfo:lcid:ppTInfo">
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfo>
		<GetTypeInfoCount public="1" set="method">
			<f a="pcTInfo">
				<t path="cs.Out"><x path="UInt"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfoCount>
		<Invoke public="1" set="method">
			<f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
				<x path="UInt"/>
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<x path="UInt"/>
				<t path="cs.types.Int16"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System._AppDomain"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.IEvidenceFactory" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.IEvidenceFactory" extern="1" interface="1">
		<Evidence public="1" get="accessor" set="null"><c path="cs.system.security.policy.Evidence"/></Evidence>
		<get_Evidence set="method">
			<f a=""><c path="cs.system.security.policy.Evidence"/></f>
			<meta><m n=":overload"/></meta>
		</get_Evidence>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.IEvidenceFactory"</e></m>
		</meta>
	</class>
	<class path="cs.system.AppDomain" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.AppDomain" extern="1">
		<extends path="cs.system.MarshalByRefObject"/>
		<implements path="cs.system._AppDomain"/>
		<implements path="cs.system.security.IEvidenceFactory"/>
		<CurrentDomain public="1" get="accessor" set="null" static="1"><c path="cs.system.AppDomain"/></CurrentDomain>
		<get_CurrentDomain final="1" set="method" static="1">
			<f a=""><c path="cs.system.AppDomain"/></f>
			<meta><m n=":overload"/></meta>
		</get_CurrentDomain>
		<CreateDomain final="1" public="1" set="method" static="1">
			<f a="friendlyName">
				<c path="String"/>
				<c path="cs.system.AppDomain"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<CreateDomain final="1" public="1" set="method">
					<f a="friendlyName:securityInfo:appBasePath:appRelativeSearchPath:shadowCopyFiles:adInit:adInitArgs">
						<c path="String"/>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="String"/>
						<c path="String"/>
						<x path="Bool"/>
						<x path="cs.system.AppDomainInitializer"/>
						<c path="cs.NativeArray"><c path="String"/></c>
						<c path="cs.system.AppDomain"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateDomain>
				<CreateDomain final="1" public="1" set="method">
					<f a="friendlyName:securityInfo:info:grantSet:fullTrustAssemblies">
						<c path="String"/>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.system.AppDomainSetup"/>
						<c path="cs.system.security.PermissionSet"/>
						<c path="cs.NativeArray"><c path="cs.system.security.policy.StrongName"/></c>
						<c path="cs.system.AppDomain"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateDomain>
				<CreateDomain final="1" public="1" set="method">
					<f a="friendlyName:securityInfo:appBasePath:appRelativeSearchPath:shadowCopyFiles">
						<c path="String"/>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="String"/>
						<c path="String"/>
						<x path="Bool"/>
						<c path="cs.system.AppDomain"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateDomain>
				<CreateDomain final="1" public="1" set="method">
					<f a="friendlyName:securityInfo:info">
						<c path="String"/>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.system.AppDomainSetup"/>
						<c path="cs.system.AppDomain"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateDomain>
				<CreateDomain final="1" public="1" set="method">
					<f a="friendlyName:securityInfo">
						<c path="String"/>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.system.AppDomain"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateDomain>
			</overloads>
		</CreateDomain>
		<Unload final="1" public="1" set="method" static="1">
			<f a="domain">
				<c path="cs.system.AppDomain"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Unload>
		<GetCurrentThreadId final="1" public="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</GetCurrentThreadId>
		<ReflectionOnlyAssemblyResolve>
			<x path="cs.system.ResolveEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</ReflectionOnlyAssemblyResolve>
		<UnhandledException>
			<x path="cs.system.UnhandledExceptionEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</UnhandledException>
		<TypeResolve>
			<x path="cs.system.ResolveEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</TypeResolve>
		<ResourceResolve>
			<x path="cs.system.ResolveEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</ResourceResolve>
		<ProcessExit>
			<x path="cs.system.EventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</ProcessExit>
		<DomainUnload>
			<x path="cs.system.EventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</DomainUnload>
		<AssemblyResolve>
			<x path="cs.system.ResolveEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</AssemblyResolve>
		<AssemblyLoad>
			<x path="cs.system.AssemblyLoadEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</AssemblyLoad>
		<Id public="1" get="accessor" set="null"><x path="Int"/></Id>
		<ApplicationIdentity public="1" get="accessor" set="null"><c path="cs.system.ApplicationIdentity"/></ApplicationIdentity>
		<ActivationContext public="1" get="accessor" set="null"><c path="cs.system.ActivationContext"/></ActivationContext>
		<DomainManager public="1" get="accessor" set="null"><c path="cs.system.AppDomainManager"/></DomainManager>
		<Evidence public="1" get="accessor" set="null"><c path="cs.system.security.policy.Evidence"/></Evidence>
		<FriendlyName public="1" get="accessor" set="null"><c path="String"/></FriendlyName>
		<ShadowCopyFiles public="1" get="accessor" set="null"><x path="Bool"/></ShadowCopyFiles>
		<DynamicDirectory public="1" get="accessor" set="null"><c path="String"/></DynamicDirectory>
		<RelativeSearchPath public="1" get="accessor" set="null"><c path="String"/></RelativeSearchPath>
		<BaseDirectory public="1" get="accessor" set="null"><c path="String"/></BaseDirectory>
		<ApplicationTrust public="1" get="accessor" set="null"><c path="cs.system.security.policy.ApplicationTrust"/></ApplicationTrust>
		<SetupInformation public="1" get="accessor" set="null"><c path="cs.system.AppDomainSetup"/></SetupInformation>
		<add_AssemblyLoad final="1" public="1" set="method">
			<f a="value">
				<x path="cs.system.AssemblyLoadEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add_AssemblyLoad>
		<remove_AssemblyLoad final="1" public="1" set="method">
			<f a="value">
				<x path="cs.system.AssemblyLoadEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove_AssemblyLoad>
		<add_AssemblyResolve final="1" public="1" set="method">
			<f a="value">
				<x path="cs.system.ResolveEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add_AssemblyResolve>
		<remove_AssemblyResolve final="1" public="1" set="method">
			<f a="value">
				<x path="cs.system.ResolveEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove_AssemblyResolve>
		<add_DomainUnload final="1" public="1" set="method">
			<f a="value">
				<x path="cs.system.EventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add_DomainUnload>
		<remove_DomainUnload final="1" public="1" set="method">
			<f a="value">
				<x path="cs.system.EventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove_DomainUnload>
		<add_ProcessExit final="1" public="1" set="method">
			<f a="value">
				<x path="cs.system.EventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add_ProcessExit>
		<remove_ProcessExit final="1" public="1" set="method">
			<f a="value">
				<x path="cs.system.EventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove_ProcessExit>
		<add_ResourceResolve final="1" public="1" set="method">
			<f a="value">
				<x path="cs.system.ResolveEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add_ResourceResolve>
		<remove_ResourceResolve final="1" public="1" set="method">
			<f a="value">
				<x path="cs.system.ResolveEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove_ResourceResolve>
		<add_TypeResolve final="1" public="1" set="method">
			<f a="value">
				<x path="cs.system.ResolveEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add_TypeResolve>
		<remove_TypeResolve final="1" public="1" set="method">
			<f a="value">
				<x path="cs.system.ResolveEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove_TypeResolve>
		<add_UnhandledException final="1" public="1" set="method">
			<f a="value">
				<x path="cs.system.UnhandledExceptionEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add_UnhandledException>
		<remove_UnhandledException final="1" public="1" set="method">
			<f a="value">
				<x path="cs.system.UnhandledExceptionEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove_UnhandledException>
		<add_ReflectionOnlyAssemblyResolve final="1" public="1" set="method">
			<f a="value">
				<x path="cs.system.ResolveEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add_ReflectionOnlyAssemblyResolve>
		<remove_ReflectionOnlyAssemblyResolve final="1" public="1" set="method">
			<f a="value">
				<x path="cs.system.ResolveEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove_ReflectionOnlyAssemblyResolve>
		<get_SetupInformation final="1" set="method">
			<f a=""><c path="cs.system.AppDomainSetup"/></f>
			<meta><m n=":overload"/></meta>
		</get_SetupInformation>
		<get_ApplicationTrust final="1" set="method">
			<f a=""><c path="cs.system.security.policy.ApplicationTrust"/></f>
			<meta><m n=":overload"/></meta>
		</get_ApplicationTrust>
		<get_BaseDirectory final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_BaseDirectory>
		<get_RelativeSearchPath final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_RelativeSearchPath>
		<get_DynamicDirectory final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_DynamicDirectory>
		<get_ShadowCopyFiles final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_ShadowCopyFiles>
		<get_FriendlyName final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_FriendlyName>
		<get_Evidence final="1" set="method">
			<f a=""><c path="cs.system.security.policy.Evidence"/></f>
			<meta><m n=":overload"/></meta>
		</get_Evidence>
		<AppendPrivatePath final="1" public="1" set="method">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AppendPrivatePath>
		<ClearPrivatePath final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</ClearPrivatePath>
		<ClearShadowCopyPath final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</ClearShadowCopyPath>
		<CreateComInstanceFrom final="1" public="1" set="method">
			<f a="assemblyName:typeName">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.system.runtime.remoting.ObjectHandle"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><CreateComInstanceFrom final="1" public="1" set="method">
	<f a="assemblyFile:typeName:hashValue:hashAlgorithm">
		<c path="String"/>
		<c path="String"/>
		<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
		<e path="cs.system.configuration.assemblies.AssemblyHashAlgorithm"/>
		<c path="cs.system.runtime.remoting.ObjectHandle"/>
	</f>
	<meta><m n=":overload"/></meta>
</CreateComInstanceFrom></overloads>
		</CreateComInstanceFrom>
		<CreateInstance final="1" public="1" set="method">
			<f a="assemblyName:typeName">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.system.runtime.remoting.ObjectHandle"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<CreateInstance final="1" public="1" set="method">
					<f a="assemblyName:typeName:ignoreCase:bindingAttr:binder:args:culture:activationAttributes:securityAttributes">
						<c path="String"/>
						<c path="String"/>
						<x path="Bool"/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.Binder"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.globalization.CultureInfo"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.system.runtime.remoting.ObjectHandle"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstance>
				<CreateInstance final="1" public="1" set="method">
					<f a="assemblyName:typeName:activationAttributes">
						<c path="String"/>
						<c path="String"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.runtime.remoting.ObjectHandle"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstance>
			</overloads>
		</CreateInstance>
		<CreateInstanceAndUnwrap final="1" public="1" set="method">
			<f a="assemblyName:typeName">
				<c path="String"/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<CreateInstanceAndUnwrap final="1" public="1" set="method">
					<f a="assemblyName:typeName:ignoreCase:bindingAttr:binder:args:culture:activationAttributes:securityAttributes">
						<c path="String"/>
						<c path="String"/>
						<x path="Bool"/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.Binder"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.globalization.CultureInfo"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.security.policy.Evidence"/>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstanceAndUnwrap>
				<CreateInstanceAndUnwrap final="1" public="1" set="method">
					<f a="assemblyName:typeName:activationAttributes">
						<c path="String"/>
						<c path="String"/>
						<c path="cs.NativeArray"><d/></c>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstanceAndUnwrap>
			</overloads>
		</CreateInstanceAndUnwrap>
		<CreateInstanceFrom final="1" public="1" set="method">
			<f a="assemblyFile:typeName">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.system.runtime.remoting.ObjectHandle"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<CreateInstanceFrom final="1" public="1" set="method">
					<f a="assemblyFile:typeName:ignoreCase:bindingAttr:binder:args:culture:activationAttributes:securityAttributes">
						<c path="String"/>
						<c path="String"/>
						<x path="Bool"/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.Binder"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.globalization.CultureInfo"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.system.runtime.remoting.ObjectHandle"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstanceFrom>
				<CreateInstanceFrom final="1" public="1" set="method">
					<f a="assemblyFile:typeName:activationAttributes">
						<c path="String"/>
						<c path="String"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.runtime.remoting.ObjectHandle"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstanceFrom>
			</overloads>
		</CreateInstanceFrom>
		<CreateInstanceFromAndUnwrap final="1" public="1" set="method">
			<f a="assemblyName:typeName">
				<c path="String"/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<CreateInstanceFromAndUnwrap final="1" public="1" set="method">
					<f a="assemblyName:typeName:ignoreCase:bindingAttr:binder:args:culture:activationAttributes:securityAttributes">
						<c path="String"/>
						<c path="String"/>
						<x path="Bool"/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.Binder"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.globalization.CultureInfo"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.security.policy.Evidence"/>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstanceFromAndUnwrap>
				<CreateInstanceFromAndUnwrap final="1" public="1" set="method">
					<f a="assemblyName:typeName:activationAttributes">
						<c path="String"/>
						<c path="String"/>
						<c path="cs.NativeArray"><d/></c>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstanceFromAndUnwrap>
			</overloads>
		</CreateInstanceFromAndUnwrap>
		<DefineDynamicAssembly final="1" public="1" set="method">
			<f a="name:access">
				<c path="cs.system.reflection.AssemblyName"/>
				<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
				<c path="cs.system.reflection.emit.AssemblyBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<DefineDynamicAssembly final="1" public="1" set="method">
					<f a="name:access:assemblyAttributes">
						<c path="cs.system.reflection.AssemblyName"/>
						<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
						<c path="cs.system.collections.generic.IEnumerable_1"><c path="cs.system.reflection.emit.CustomAttributeBuilder"/></c>
						<c path="cs.system.reflection.emit.AssemblyBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineDynamicAssembly>
				<DefineDynamicAssembly final="1" public="1" set="method">
					<f a="name:access:dir:evidence:requiredPermissions:optionalPermissions:refusedPermissions:isSynchronized:assemblyAttributes">
						<c path="cs.system.reflection.AssemblyName"/>
						<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
						<c path="String"/>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.system.security.PermissionSet"/>
						<c path="cs.system.security.PermissionSet"/>
						<c path="cs.system.security.PermissionSet"/>
						<x path="Bool"/>
						<c path="cs.system.collections.generic.IEnumerable_1"><c path="cs.system.reflection.emit.CustomAttributeBuilder"/></c>
						<c path="cs.system.reflection.emit.AssemblyBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineDynamicAssembly>
				<DefineDynamicAssembly final="1" public="1" set="method">
					<f a="name:access:dir:evidence:requiredPermissions:optionalPermissions:refusedPermissions:isSynchronized">
						<c path="cs.system.reflection.AssemblyName"/>
						<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
						<c path="String"/>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.system.security.PermissionSet"/>
						<c path="cs.system.security.PermissionSet"/>
						<c path="cs.system.security.PermissionSet"/>
						<x path="Bool"/>
						<c path="cs.system.reflection.emit.AssemblyBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineDynamicAssembly>
				<DefineDynamicAssembly final="1" public="1" set="method">
					<f a="name:access:dir:evidence:requiredPermissions:optionalPermissions:refusedPermissions">
						<c path="cs.system.reflection.AssemblyName"/>
						<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
						<c path="String"/>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.system.security.PermissionSet"/>
						<c path="cs.system.security.PermissionSet"/>
						<c path="cs.system.security.PermissionSet"/>
						<c path="cs.system.reflection.emit.AssemblyBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineDynamicAssembly>
				<DefineDynamicAssembly final="1" public="1" set="method">
					<f a="name:access:dir:requiredPermissions:optionalPermissions:refusedPermissions">
						<c path="cs.system.reflection.AssemblyName"/>
						<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
						<c path="String"/>
						<c path="cs.system.security.PermissionSet"/>
						<c path="cs.system.security.PermissionSet"/>
						<c path="cs.system.security.PermissionSet"/>
						<c path="cs.system.reflection.emit.AssemblyBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineDynamicAssembly>
				<DefineDynamicAssembly final="1" public="1" set="method">
					<f a="name:access:evidence:requiredPermissions:optionalPermissions:refusedPermissions">
						<c path="cs.system.reflection.AssemblyName"/>
						<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.system.security.PermissionSet"/>
						<c path="cs.system.security.PermissionSet"/>
						<c path="cs.system.security.PermissionSet"/>
						<c path="cs.system.reflection.emit.AssemblyBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineDynamicAssembly>
				<DefineDynamicAssembly final="1" public="1" set="method">
					<f a="name:access:requiredPermissions:optionalPermissions:refusedPermissions">
						<c path="cs.system.reflection.AssemblyName"/>
						<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
						<c path="cs.system.security.PermissionSet"/>
						<c path="cs.system.security.PermissionSet"/>
						<c path="cs.system.security.PermissionSet"/>
						<c path="cs.system.reflection.emit.AssemblyBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineDynamicAssembly>
				<DefineDynamicAssembly final="1" public="1" set="method">
					<f a="name:access:dir:evidence">
						<c path="cs.system.reflection.AssemblyName"/>
						<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
						<c path="String"/>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.system.reflection.emit.AssemblyBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineDynamicAssembly>
				<DefineDynamicAssembly final="1" public="1" set="method">
					<f a="name:access:dir">
						<c path="cs.system.reflection.AssemblyName"/>
						<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
						<c path="String"/>
						<c path="cs.system.reflection.emit.AssemblyBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineDynamicAssembly>
				<DefineDynamicAssembly final="1" public="1" set="method">
					<f a="name:access:evidence">
						<c path="cs.system.reflection.AssemblyName"/>
						<e path="cs.system.reflection.emit.AssemblyBuilderAccess"/>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.system.reflection.emit.AssemblyBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineDynamicAssembly>
			</overloads>
		</DefineDynamicAssembly>
		<DoCallBack final="1" public="1" set="method">
			<f a="callBackDelegate">
				<x path="cs.system.CrossAppDomainDelegate"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DoCallBack>
		<ExecuteAssembly final="1" public="1" set="method">
			<f a="assemblyFile">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<ExecuteAssembly final="1" public="1" set="method">
					<f a="assemblyFile:assemblySecurity:args:hashValue:hashAlgorithm">
						<c path="String"/>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.NativeArray"><c path="String"/></c>
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<e path="cs.system.configuration.assemblies.AssemblyHashAlgorithm"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ExecuteAssembly>
				<ExecuteAssembly final="1" public="1" set="method">
					<f a="assemblyFile:assemblySecurity:args">
						<c path="String"/>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.NativeArray"><c path="String"/></c>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ExecuteAssembly>
				<ExecuteAssembly final="1" public="1" set="method">
					<f a="assemblyFile:assemblySecurity">
						<c path="String"/>
						<c path="cs.system.security.policy.Evidence"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ExecuteAssembly>
			</overloads>
		</ExecuteAssembly>
		<GetAssemblies final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.Assembly"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetAssemblies>
		<GetData final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetData>
		<GetType final="1" public="1" set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</GetType>
		<InitializeLifetimeService public="1" set="method" override="1">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</InitializeLifetimeService>
		<Load final="1" public="1" set="method">
			<f a="assemblyRef">
				<c path="cs.system.reflection.AssemblyName"/>
				<c path="cs.system.reflection.Assembly"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Load final="1" public="1" set="method">
					<f a="rawAssembly:rawSymbolStore:securityEvidence">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.system.reflection.Assembly"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Load>
				<Load final="1" public="1" set="method">
					<f a="rawAssembly:rawSymbolStore">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<c path="cs.system.reflection.Assembly"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Load>
				<Load final="1" public="1" set="method">
					<f a="rawAssembly">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<c path="cs.system.reflection.Assembly"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Load>
				<Load final="1" public="1" set="method">
					<f a="assemblyString:assemblySecurity">
						<c path="String"/>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.system.reflection.Assembly"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Load>
				<Load final="1" public="1" set="method">
					<f a="assemblyString">
						<c path="String"/>
						<c path="cs.system.reflection.Assembly"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Load>
				<Load final="1" public="1" set="method">
					<f a="assemblyRef:assemblySecurity">
						<c path="cs.system.reflection.AssemblyName"/>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.system.reflection.Assembly"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Load>
			</overloads>
		</Load>
		<SetAppDomainPolicy final="1" public="1" set="method">
			<f a="domainPolicy">
				<c path="cs.system.security.policy.PolicyLevel"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetAppDomainPolicy>
		<SetCachePath final="1" public="1" set="method">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetCachePath>
		<SetPrincipalPolicy final="1" public="1" set="method">
			<f a="policy">
				<e path="cs.system.security.principal.PrincipalPolicy"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetPrincipalPolicy>
		<SetShadowCopyFiles final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</SetShadowCopyFiles>
		<SetShadowCopyPath final="1" public="1" set="method">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetShadowCopyPath>
		<SetThreadPrincipal final="1" public="1" set="method">
			<f a="principal">
				<c path="cs.system.security.principal.IPrincipal"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetThreadPrincipal>
		<IsFinalizingForUnload final="1" public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</IsFinalizingForUnload>
		<SetData final="1" public="1" set="method">
			<f a="name:data">
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><SetData final="1" public="1" set="method">
	<f a="name:data:permission">
		<c path="String"/>
		<d/>
		<c path="cs.system.security.IPermission"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</SetData></overloads>
		</SetData>
		<SetDynamicBase final="1" public="1" set="method">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetDynamicBase>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<get_DomainManager final="1" set="method">
			<f a=""><c path="cs.system.AppDomainManager"/></f>
			<meta><m n=":overload"/></meta>
		</get_DomainManager>
		<get_ActivationContext final="1" set="method">
			<f a=""><c path="cs.system.ActivationContext"/></f>
			<meta><m n=":overload"/></meta>
		</get_ActivationContext>
		<get_ApplicationIdentity final="1" set="method">
			<f a=""><c path="cs.system.ApplicationIdentity"/></f>
			<meta><m n=":overload"/></meta>
		</get_ApplicationIdentity>
		<get_Id final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Id>
		<ApplyPolicy final="1" public="1" set="method">
			<f a="assemblyName">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ApplyPolicy>
		<ExecuteAssemblyByName final="1" public="1" set="method">
			<f a="assemblyName">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<ExecuteAssemblyByName final="1" public="1" set="method">
					<f a="assemblyName:assemblySecurity:args">
						<c path="cs.system.reflection.AssemblyName"/>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.NativeArray"><c path="String"/></c>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ExecuteAssemblyByName>
				<ExecuteAssemblyByName final="1" public="1" set="method">
					<f a="assemblyName:assemblySecurity:args">
						<c path="String"/>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.NativeArray"><c path="String"/></c>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ExecuteAssemblyByName>
				<ExecuteAssemblyByName final="1" public="1" set="method">
					<f a="assemblyName:assemblySecurity">
						<c path="String"/>
						<c path="cs.system.security.policy.Evidence"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ExecuteAssemblyByName>
			</overloads>
		</ExecuteAssemblyByName>
		<IsDefaultAppDomain final="1" public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</IsDefaultAppDomain>
		<ReflectionOnlyGetAssemblies final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.Assembly"/></c></f>
			<meta><m n=":overload"/></meta>
		</ReflectionOnlyGetAssemblies>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.AppDomain"</e></m>
		</meta>
	</class>
	<class path="cs.system.Delegate_AppDomainInitializer" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.AppDomainInitializer" module="cs.system.AppDomainInitializer" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.AppDomainInitializer"/>
	<x path="cs.system.AppDomainInitializer"/>
	<x path="cs.system.AppDomainInitializer"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.AppDomainInitializer"/>
	<x path="cs.system.AppDomainInitializer"/>
	<x path="cs.system.AppDomainInitializer"/>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="args">
				<c path="cs.NativeArray"><c path="String"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="args:callback:object">
				<c path="cs.NativeArray"><c path="String"/></c>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.AppDomainInitializer"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.AppDomainInitializer" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.AppDomainInitializer">
		<from><icast field="FromHaxeFunction"><f a="">
	<c path="cs.NativeArray"><c path="String"/></c>
	<x path="Void"/>
</f></icast></from>
		<this><c path="cs.system.Delegate_AppDomainInitializer"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system._AppDomainInitializer.AppDomainInitializer_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.AppDomainInitializer" private="1" module="cs.system.AppDomainInitializer">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="">
				<c path="cs.NativeArray"><c path="String"/></c>
				<x path="Void"/>
			</f>
			<x path="cs.system.AppDomainInitializer"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="">
				<c path="cs.NativeArray"><c path="String"/></c>
				<x path="Void"/>
			</f>
			<x path="cs.system.AppDomainInitializer"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.Delegate_AppDomainInitializer"/>
			<c path="cs.system.Delegate_AppDomainInitializer"/>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.AppDomainInitializer"/>
			<x path="cs.system.AppDomainInitializer"/>
			<x path="cs.system.AppDomainInitializer"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.AppDomainInitializer"/>
			<x path="cs.system.AppDomainInitializer"/>
			<x path="cs.system.AppDomainInitializer"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system._AppDomainInitializer.AppDomainInitializer_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.AppDomainInitializer" private="1" module="cs.system.AppDomainInitializer">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="">
					<c path="cs.NativeArray"><c path="String"/></c>
					<x path="Void"/>
				</f>
				<x path="cs.system.AppDomainInitializer"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="">
					<c path="cs.NativeArray"><c path="String"/></c>
					<x path="Void"/>
				</f>
				<x path="cs.system.AppDomainInitializer"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.Delegate_AppDomainInitializer"/>
				<c path="cs.system.Delegate_AppDomainInitializer"/>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.AppDomainInitializer"/>
				<x path="cs.system.AppDomainInitializer"/>
				<x path="cs.system.AppDomainInitializer"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.AppDomainInitializer"/>
				<x path="cs.system.AppDomainInitializer"/>
				<x path="cs.system.AppDomainInitializer"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="cs.system.AppDomainManager" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.AppDomainManager" extern="1">
		<extends path="cs.system.MarshalByRefObject"/>
		<CreateDomainHelper final="1" set="method" static="1">
			<f a="friendlyName:securityInfo:appDomainInfo">
				<c path="String"/>
				<c path="cs.system.security.policy.Evidence"/>
				<c path="cs.system.AppDomainSetup"/>
				<c path="cs.system.AppDomain"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</CreateDomainHelper>
		<InitializationFlags public="1" get="accessor" set="accessor"><e path="cs.system.AppDomainManagerInitializationOptions"/></InitializationFlags>
		<HostSecurityManager public="1" get="accessor" set="null"><c path="cs.system.security.HostSecurityManager"/></HostSecurityManager>
		<HostExecutionContextManager public="1" get="accessor" set="null"><c path="cs.system.threading.HostExecutionContextManager"/></HostExecutionContextManager>
		<EntryAssembly public="1" get="accessor" set="null"><c path="cs.system.reflection.Assembly"/></EntryAssembly>
		<ApplicationActivator public="1" get="accessor" set="null"><c path="cs.system.runtime.hosting.ApplicationActivator"/></ApplicationActivator>
		<get_ApplicationActivator set="method">
			<f a=""><c path="cs.system.runtime.hosting.ApplicationActivator"/></f>
			<meta><m n=":overload"/></meta>
		</get_ApplicationActivator>
		<get_EntryAssembly set="method">
			<f a=""><c path="cs.system.reflection.Assembly"/></f>
			<meta><m n=":overload"/></meta>
		</get_EntryAssembly>
		<get_HostExecutionContextManager set="method">
			<f a=""><c path="cs.system.threading.HostExecutionContextManager"/></f>
			<meta><m n=":overload"/></meta>
		</get_HostExecutionContextManager>
		<get_HostSecurityManager set="method">
			<f a=""><c path="cs.system.security.HostSecurityManager"/></f>
			<meta><m n=":overload"/></meta>
		</get_HostSecurityManager>
		<get_InitializationFlags final="1" set="method">
			<f a=""><e path="cs.system.AppDomainManagerInitializationOptions"/></f>
			<meta><m n=":overload"/></meta>
		</get_InitializationFlags>
		<set_InitializationFlags final="1" set="method">
			<f a="value">
				<e path="cs.system.AppDomainManagerInitializationOptions"/>
				<e path="cs.system.AppDomainManagerInitializationOptions"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_InitializationFlags>
		<CreateDomain public="1" set="method">
			<f a="friendlyName:securityInfo:appDomainInfo">
				<c path="String"/>
				<c path="cs.system.security.policy.Evidence"/>
				<c path="cs.system.AppDomainSetup"/>
				<c path="cs.system.AppDomain"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CreateDomain>
		<InitializeNewDomain public="1" set="method">
			<f a="appDomainInfo">
				<c path="cs.system.AppDomainSetup"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</InitializeNewDomain>
		<CheckSecuritySettings public="1" set="method">
			<f a="state">
				<c path="cs.system.security.SecurityState"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CheckSecuritySettings>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.AppDomainManager"</e></m>
		</meta>
	</class>
	<enum path="cs.system.AppDomainManagerInitializationOptions" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.AppDomainManagerInitializationOptions">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<RegisterWithHost><meta><m n=":csNative"><e>1</e></m></meta></RegisterWithHost>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.AppDomainManagerInitializationOptions"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.IAppDomainSetup" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.IAppDomainSetup" extern="1" interface="1">
		<ShadowCopyFiles public="1" get="accessor" set="accessor"><c path="String"/></ShadowCopyFiles>
		<ShadowCopyDirectories public="1" get="accessor" set="accessor"><c path="String"/></ShadowCopyDirectories>
		<PrivateBinPathProbe public="1" get="accessor" set="accessor"><c path="String"/></PrivateBinPathProbe>
		<PrivateBinPath public="1" get="accessor" set="accessor"><c path="String"/></PrivateBinPath>
		<LicenseFile public="1" get="accessor" set="accessor"><c path="String"/></LicenseFile>
		<DynamicBase public="1" get="accessor" set="accessor"><c path="String"/></DynamicBase>
		<ConfigurationFile public="1" get="accessor" set="accessor"><c path="String"/></ConfigurationFile>
		<CachePath public="1" get="accessor" set="accessor"><c path="String"/></CachePath>
		<ApplicationName public="1" get="accessor" set="accessor"><c path="String"/></ApplicationName>
		<ApplicationBase public="1" get="accessor" set="accessor"><c path="String"/></ApplicationBase>
		<get_ApplicationBase set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_ApplicationBase>
		<set_ApplicationBase set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ApplicationBase>
		<get_ApplicationName set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_ApplicationName>
		<set_ApplicationName set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ApplicationName>
		<get_CachePath set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_CachePath>
		<set_CachePath set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_CachePath>
		<get_ConfigurationFile set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_ConfigurationFile>
		<set_ConfigurationFile set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ConfigurationFile>
		<get_DynamicBase set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_DynamicBase>
		<set_DynamicBase set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_DynamicBase>
		<get_LicenseFile set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_LicenseFile>
		<set_LicenseFile set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_LicenseFile>
		<get_PrivateBinPath set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_PrivateBinPath>
		<set_PrivateBinPath set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_PrivateBinPath>
		<get_PrivateBinPathProbe set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_PrivateBinPathProbe>
		<set_PrivateBinPathProbe set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_PrivateBinPathProbe>
		<get_ShadowCopyDirectories set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_ShadowCopyDirectories>
		<set_ShadowCopyDirectories set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ShadowCopyDirectories>
		<get_ShadowCopyFiles set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_ShadowCopyFiles>
		<set_ShadowCopyFiles set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ShadowCopyFiles>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IAppDomainSetup"</e></m>
		</meta>
	</class>
	<class path="cs.system.AppDomainSetup" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.AppDomainSetup" extern="1">
		<implements path="cs.system.IAppDomainSetup"/>
		<DisallowApplicationBaseProbing public="1" get="accessor" set="accessor"><x path="Bool"/></DisallowApplicationBaseProbing>
		<ApplicationTrust public="1" get="accessor" set="accessor"><c path="cs.system.security.policy.ApplicationTrust"/></ApplicationTrust>
		<AppDomainInitializerArguments public="1" get="accessor" set="accessor"><c path="cs.NativeArray"><c path="String"/></c></AppDomainInitializerArguments>
		<AppDomainInitializer public="1" get="accessor" set="accessor"><x path="cs.system.AppDomainInitializer"/></AppDomainInitializer>
		<ActivationArguments public="1" get="accessor" set="accessor"><c path="cs.system.runtime.hosting.ActivationArguments"/></ActivationArguments>
		<DisallowCodeDownload public="1" get="accessor" set="accessor"><x path="Bool"/></DisallowCodeDownload>
		<DisallowBindingRedirects public="1" get="accessor" set="accessor"><x path="Bool"/></DisallowBindingRedirects>
		<ShadowCopyFiles public="1" get="accessor" set="accessor"><c path="String"/></ShadowCopyFiles>
		<ShadowCopyDirectories public="1" get="accessor" set="accessor"><c path="String"/></ShadowCopyDirectories>
		<PrivateBinPathProbe public="1" get="accessor" set="accessor"><c path="String"/></PrivateBinPathProbe>
		<PrivateBinPath public="1" get="accessor" set="accessor"><c path="String"/></PrivateBinPath>
		<LoaderOptimization public="1" get="accessor" set="accessor"><e path="cs.system.LoaderOptimization"/></LoaderOptimization>
		<LicenseFile public="1" get="accessor" set="accessor"><c path="String"/></LicenseFile>
		<DynamicBase public="1" get="accessor" set="accessor"><c path="String"/></DynamicBase>
		<DisallowPublisherPolicy public="1" get="accessor" set="accessor"><x path="Bool"/></DisallowPublisherPolicy>
		<ConfigurationFile public="1" get="accessor" set="accessor"><c path="String"/></ConfigurationFile>
		<CachePath public="1" get="accessor" set="accessor"><c path="String"/></CachePath>
		<ApplicationName public="1" get="accessor" set="accessor"><c path="String"/></ApplicationName>
		<ApplicationBase public="1" get="accessor" set="accessor"><c path="String"/></ApplicationBase>
		<get_ApplicationBase final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_ApplicationBase>
		<set_ApplicationBase final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ApplicationBase>
		<get_ApplicationName final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_ApplicationName>
		<set_ApplicationName final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ApplicationName>
		<get_CachePath final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_CachePath>
		<set_CachePath final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_CachePath>
		<get_ConfigurationFile final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_ConfigurationFile>
		<set_ConfigurationFile final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ConfigurationFile>
		<get_DisallowPublisherPolicy final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_DisallowPublisherPolicy>
		<set_DisallowPublisherPolicy final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_DisallowPublisherPolicy>
		<get_DynamicBase final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_DynamicBase>
		<set_DynamicBase final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_DynamicBase>
		<get_LicenseFile final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_LicenseFile>
		<set_LicenseFile final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_LicenseFile>
		<get_LoaderOptimization final="1" set="method">
			<f a=""><e path="cs.system.LoaderOptimization"/></f>
			<meta><m n=":overload"/></meta>
		</get_LoaderOptimization>
		<set_LoaderOptimization final="1" set="method">
			<f a="value">
				<e path="cs.system.LoaderOptimization"/>
				<e path="cs.system.LoaderOptimization"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_LoaderOptimization>
		<get_PrivateBinPath final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_PrivateBinPath>
		<set_PrivateBinPath final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_PrivateBinPath>
		<get_PrivateBinPathProbe final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_PrivateBinPathProbe>
		<set_PrivateBinPathProbe final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_PrivateBinPathProbe>
		<get_ShadowCopyDirectories final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_ShadowCopyDirectories>
		<set_ShadowCopyDirectories final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ShadowCopyDirectories>
		<get_ShadowCopyFiles final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_ShadowCopyFiles>
		<set_ShadowCopyFiles final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ShadowCopyFiles>
		<get_DisallowBindingRedirects final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_DisallowBindingRedirects>
		<set_DisallowBindingRedirects final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_DisallowBindingRedirects>
		<get_DisallowCodeDownload final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_DisallowCodeDownload>
		<set_DisallowCodeDownload final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_DisallowCodeDownload>
		<get_ActivationArguments final="1" set="method">
			<f a=""><c path="cs.system.runtime.hosting.ActivationArguments"/></f>
			<meta><m n=":overload"/></meta>
		</get_ActivationArguments>
		<set_ActivationArguments final="1" set="method">
			<f a="value">
				<c path="cs.system.runtime.hosting.ActivationArguments"/>
				<c path="cs.system.runtime.hosting.ActivationArguments"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ActivationArguments>
		<get_AppDomainInitializer final="1" set="method">
			<f a=""><x path="cs.system.AppDomainInitializer"/></f>
			<meta><m n=":overload"/></meta>
		</get_AppDomainInitializer>
		<set_AppDomainInitializer final="1" set="method">
			<f a="value">
				<x path="cs.system.AppDomainInitializer"/>
				<x path="cs.system.AppDomainInitializer"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_AppDomainInitializer>
		<get_AppDomainInitializerArguments final="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</get_AppDomainInitializerArguments>
		<set_AppDomainInitializerArguments final="1" set="method">
			<f a="value">
				<c path="cs.NativeArray"><c path="String"/></c>
				<c path="cs.NativeArray"><c path="String"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</set_AppDomainInitializerArguments>
		<get_ApplicationTrust final="1" set="method">
			<f a=""><c path="cs.system.security.policy.ApplicationTrust"/></f>
			<meta><m n=":overload"/></meta>
		</get_ApplicationTrust>
		<set_ApplicationTrust final="1" set="method">
			<f a="value">
				<c path="cs.system.security.policy.ApplicationTrust"/>
				<c path="cs.system.security.policy.ApplicationTrust"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ApplicationTrust>
		<get_DisallowApplicationBaseProbing final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_DisallowApplicationBaseProbing>
		<set_DisallowApplicationBaseProbing final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_DisallowApplicationBaseProbing>
		<GetConfigurationBytes final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetConfigurationBytes>
		<SetConfigurationBytes final="1" public="1" set="method">
			<f a="value">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetConfigurationBytes>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="activationContext">
						<c path="cs.system.ActivationContext"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="activationArguments">
						<c path="cs.system.runtime.hosting.ActivationArguments"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.AppDomainSetup"</e></m>
		</meta>
	</class>
	<class path="cs.system.ApplicationIdentity" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.ApplicationIdentity" extern="1">
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<FullName public="1" get="accessor" set="null"><c path="String"/></FullName>
		<CodeBase public="1" get="accessor" set="null"><c path="String"/></CodeBase>
		<get_CodeBase final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_CodeBase>
		<get_FullName final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_FullName>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<new final="1" public="1" set="method">
			<f a="applicationIdentityFullName">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ApplicationIdentity"</e></m>
		</meta>
	</class>
	<class path="cs.system.SystemException" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.SystemException" extern="1">
		<extends path="cs.system.Exception"/>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="message:innerException">
						<c path="String"/>
						<c path="cs.system.Exception"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" set="method">
					<f a="info:context">
						<c path="cs.system.runtime.serialization.SerializationInfo"/>
						<c path="cs.system.runtime.serialization.StreamingContext"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":protected"/>
						<m n=":overload"/>
					</meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="message">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.SystemException"</e></m>
		</meta>
	</class>
	<class path="cs.system.ArgumentException" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.ArgumentException" extern="1">
		<extends path="cs.system.SystemException"/>
		<Message public="1" get="accessor" set="null" override="1"><c path="String"/></Message>
		<ParamName public="1" get="accessor" set="null"><c path="String"/></ParamName>
		<get_ParamName set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_ParamName>
		<get_Message set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Message>
		<GetObjectData public="1" set="method" override="1">
			<f a="info:context">
				<c path="cs.system.runtime.serialization.SerializationInfo"/>
				<c path="cs.system.runtime.serialization.StreamingContext"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetObjectData>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" set="method">
					<f a="info:context">
						<c path="cs.system.runtime.serialization.SerializationInfo"/>
						<c path="cs.system.runtime.serialization.StreamingContext"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":protected"/>
						<m n=":overload"/>
					</meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="message:paramName:innerException">
						<c path="String"/>
						<c path="String"/>
						<c path="cs.system.Exception"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="message:paramName">
						<c path="String"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="message:innerException">
						<c path="String"/>
						<c path="cs.system.Exception"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="message">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ArgumentException"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.IEnumerator" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.IEnumerator" extern="1" interface="1">
		<Current public="1" get="accessor" set="null"><d/></Current>
		<get_Current set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_Current>
		<MoveNext public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</MoveNext>
		<Reset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Reset>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.IEnumerator"</e></m>
		</meta>
	</class>
	<class path="cs.system.Array_SimpleEnumerator" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Array" module="cs.system.Array" extern="1">
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.collections.IEnumerator"/>
		<Current public="1" get="accessor" set="null"><d/></Current>
		<get_Current final="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_Current>
		<MoveNext final="1" public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</MoveNext>
		<Reset final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Reset>
		<Clone final="1" public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</Clone>
		<new final="1" public="1" set="method">
			<f a="arrayToEnumerate">
				<c path="cs.system.Array"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Array.SimpleEnumerator"</e></m>
		</meta>
	</class>
	<class path="cs.system.Array_Delegate_Swapper" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Array" module="cs.system.Array" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.Array_Swapper"/>
	<x path="cs.system.Array_Swapper"/>
	<x path="cs.system.Array_Swapper"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.Array_Swapper"/>
	<x path="cs.system.Array_Swapper"/>
	<x path="cs.system.Array_Swapper"/>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="i:j">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="i:j:callback:object">
				<x path="Int"/>
				<x path="Int"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Array.Swapper"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.Array_Swapper" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Array" module="cs.system.Array">
		<from><icast field="FromHaxeFunction"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></icast></from>
		<this><c path="cs.system.Array_Delegate_Swapper"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system._Array.Array_Swapper_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Array" private="1" module="cs.system.Array">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<x path="cs.system.Array_Swapper"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<x path="cs.system.Array_Swapper"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.Array_Delegate_Swapper"/>
			<c path="cs.system.Array_Delegate_Swapper"/>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.Array_Swapper"/>
			<x path="cs.system.Array_Swapper"/>
			<x path="cs.system.Array_Swapper"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.Array_Swapper"/>
			<x path="cs.system.Array_Swapper"/>
			<x path="cs.system.Array_Swapper"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system._Array.Array_Swapper_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Array" private="1" module="cs.system.Array">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=":">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<x path="cs.system.Array_Swapper"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=":">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<x path="cs.system.Array_Swapper"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.Array_Delegate_Swapper"/>
				<c path="cs.system.Array_Delegate_Swapper"/>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.Array_Swapper"/>
				<x path="cs.system.Array_Swapper"/>
				<x path="cs.system.Array_Swapper"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.Array_Swapper"/>
				<x path="cs.system.Array_Swapper"/>
				<x path="cs.system.Array_Swapper"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="cs.system.collections.generic.IEnumerator_1" params="T0" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.generic.IEnumerator_1" extern="1" interface="1">
		<extends path="cs.system.IDisposable"/>
		<extends path="cs.system.collections.IEnumerator"/>
		<Current public="1" get="accessor" set="null"><c path="cs.system.collections.generic.IEnumerator_1.T0"/></Current>
		<Dispose public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Dispose>
		<Reset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Reset>
		<MoveNext public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</MoveNext>
		<get_Current set="method">
			<f a=""><c path="cs.system.collections.generic.IEnumerator_1.T0"/></f>
			<meta><m n=":overload"/></meta>
		</get_Current>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.Generic.IEnumerator`1"</e></m>
		</meta>
	</class>
	<class path="cs.system.Array_InternalEnumerator_1" params="T0" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Array" module="cs.system.Array" extern="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.collections.generic.IEnumerator_1"><c path="cs.system.Array_InternalEnumerator_1.T0"/></implements>
		<implements path="cs.system.IDisposable"/>
		<implements path="cs.system.collections.IEnumerator"/>
		<Current public="1" get="accessor" set="null">
			<c path="cs.system.Array_InternalEnumerator_1.T0"/>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</Current>
		<Dispose final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Dispose>
		<MoveNext final="1" public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</MoveNext>
		<get_Current final="1" set="method">
			<f a=""><c path="cs.system.Array_InternalEnumerator_1.T0"/></f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":overload"/>
			</meta>
		</get_Current>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Array.InternalEnumerator`1"</e></m>
		</meta>
	</class>
	<class path="cs.system.ArraySegment_1" params="T0" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.ArraySegment_1" extern="1">
		<extends path="cs.system.ValueType"/>
		<op_Equality final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="cs.system.ArraySegment_1"><d/></c>
				<c path="cs.system.ArraySegment_1"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Equality>
		<op_Inequality final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="cs.system.ArraySegment_1"><d/></c>
				<c path="cs.system.ArraySegment_1"><d/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Inequality>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<Offset public="1" get="accessor" set="null"><x path="Int"/></Offset>
		<Array public="1" get="accessor" set="null"><c path="cs.NativeArray"><c path="cs.system.ArraySegment_1.T0"/></c></Array>
		<get_Array final="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.ArraySegment_1.T0"/></c></f>
			<meta><m n=":overload"/></meta>
		</get_Array>
		<get_Offset final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Offset>
		<get_Count final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Count>
		<new final="1" public="1" set="method">
			<f a="array:offset:count">
				<c path="cs.NativeArray"><c path="cs.system.ArraySegment_1.T0"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new final="1" public="1" set="method">
	<f a="array">
		<c path="cs.NativeArray"><c path="cs.system.ArraySegment_1.T0"/></c>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ArraySegment`1"</e></m>
		</meta>
	</class>
	<class path="cs.system.EventArgs" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.EventArgs" extern="1">
		<Empty public="1" set="null" static="1">
			<c path="cs.system.EventArgs"/>
			<meta><m n=":readOnly"/></meta>
		</Empty>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.EventArgs"</e></m>
		</meta>
	</class>
	<class path="cs.system.AssemblyLoadEventArgs" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.AssemblyLoadEventArgs" extern="1">
		<extends path="cs.system.EventArgs"/>
		<LoadedAssembly public="1" get="accessor" set="null"><c path="cs.system.reflection.Assembly"/></LoadedAssembly>
		<get_LoadedAssembly final="1" set="method">
			<f a=""><c path="cs.system.reflection.Assembly"/></f>
			<meta><m n=":overload"/></meta>
		</get_LoadedAssembly>
		<new final="1" public="1" set="method">
			<f a="loadedAssembly">
				<c path="cs.system.reflection.Assembly"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.AssemblyLoadEventArgs"</e></m>
		</meta>
	</class>
	<class path="cs.system.Delegate_AssemblyLoadEventHandler" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.AssemblyLoadEventHandler" module="cs.system.AssemblyLoadEventHandler" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.AssemblyLoadEventHandler"/>
	<x path="cs.system.AssemblyLoadEventHandler"/>
	<x path="cs.system.AssemblyLoadEventHandler"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.AssemblyLoadEventHandler"/>
	<x path="cs.system.AssemblyLoadEventHandler"/>
	<x path="cs.system.AssemblyLoadEventHandler"/>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="sender:args">
				<d/>
				<c path="cs.system.AssemblyLoadEventArgs"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="sender:args:callback:object">
				<d/>
				<c path="cs.system.AssemblyLoadEventArgs"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.AssemblyLoadEventHandler"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.AssemblyLoadEventHandler" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.AssemblyLoadEventHandler">
		<from><icast field="FromHaxeFunction"><f a=":">
	<d/>
	<c path="cs.system.AssemblyLoadEventArgs"/>
	<x path="Void"/>
</f></icast></from>
		<this><c path="cs.system.Delegate_AssemblyLoadEventHandler"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system._AssemblyLoadEventHandler.AssemblyLoadEventHandler_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.AssemblyLoadEventHandler" private="1" module="cs.system.AssemblyLoadEventHandler">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=":">
				<d/>
				<c path="cs.system.AssemblyLoadEventArgs"/>
				<x path="Void"/>
			</f>
			<x path="cs.system.AssemblyLoadEventHandler"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=":">
				<d/>
				<c path="cs.system.AssemblyLoadEventArgs"/>
				<x path="Void"/>
			</f>
			<x path="cs.system.AssemblyLoadEventHandler"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.Delegate_AssemblyLoadEventHandler"/>
			<c path="cs.system.Delegate_AssemblyLoadEventHandler"/>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.AssemblyLoadEventHandler"/>
			<x path="cs.system.AssemblyLoadEventHandler"/>
			<x path="cs.system.AssemblyLoadEventHandler"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.AssemblyLoadEventHandler"/>
			<x path="cs.system.AssemblyLoadEventHandler"/>
			<x path="cs.system.AssemblyLoadEventHandler"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system._AssemblyLoadEventHandler.AssemblyLoadEventHandler_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.AssemblyLoadEventHandler" private="1" module="cs.system.AssemblyLoadEventHandler">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=":">
					<d/>
					<c path="cs.system.AssemblyLoadEventArgs"/>
					<x path="Void"/>
				</f>
				<x path="cs.system.AssemblyLoadEventHandler"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=":">
					<d/>
					<c path="cs.system.AssemblyLoadEventArgs"/>
					<x path="Void"/>
				</f>
				<x path="cs.system.AssemblyLoadEventHandler"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.Delegate_AssemblyLoadEventHandler"/>
				<c path="cs.system.Delegate_AssemblyLoadEventHandler"/>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.AssemblyLoadEventHandler"/>
				<x path="cs.system.AssemblyLoadEventHandler"/>
				<x path="cs.system.AssemblyLoadEventHandler"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.AssemblyLoadEventHandler"/>
				<x path="cs.system.AssemblyLoadEventHandler"/>
				<x path="cs.system.AssemblyLoadEventHandler"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="cs.system.Delegate_AsyncCallback" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.AsyncCallback" module="cs.system.AsyncCallback" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.AsyncCallback"/>
	<x path="cs.system.AsyncCallback"/>
	<x path="cs.system.AsyncCallback"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.AsyncCallback"/>
	<x path="cs.system.AsyncCallback"/>
	<x path="cs.system.AsyncCallback"/>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="ar">
				<c path="cs.system.IAsyncResult"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="ar:callback:object">
				<c path="cs.system.IAsyncResult"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.AsyncCallback"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.AsyncCallback" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.AsyncCallback">
		<from><icast field="FromHaxeFunction"><f a="">
	<c path="cs.system.IAsyncResult"/>
	<x path="Void"/>
</f></icast></from>
		<this><c path="cs.system.Delegate_AsyncCallback"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system._AsyncCallback.AsyncCallback_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.AsyncCallback" private="1" module="cs.system.AsyncCallback">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="">
				<c path="cs.system.IAsyncResult"/>
				<x path="Void"/>
			</f>
			<x path="cs.system.AsyncCallback"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="">
				<c path="cs.system.IAsyncResult"/>
				<x path="Void"/>
			</f>
			<x path="cs.system.AsyncCallback"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.Delegate_AsyncCallback"/>
			<c path="cs.system.Delegate_AsyncCallback"/>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.AsyncCallback"/>
			<x path="cs.system.AsyncCallback"/>
			<x path="cs.system.AsyncCallback"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.AsyncCallback"/>
			<x path="cs.system.AsyncCallback"/>
			<x path="cs.system.AsyncCallback"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system._AsyncCallback.AsyncCallback_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.AsyncCallback" private="1" module="cs.system.AsyncCallback">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="">
					<c path="cs.system.IAsyncResult"/>
					<x path="Void"/>
				</f>
				<x path="cs.system.AsyncCallback"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="">
					<c path="cs.system.IAsyncResult"/>
					<x path="Void"/>
				</f>
				<x path="cs.system.AsyncCallback"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.Delegate_AsyncCallback"/>
				<c path="cs.system.Delegate_AsyncCallback"/>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.AsyncCallback"/>
				<x path="cs.system.AsyncCallback"/>
				<x path="cs.system.AsyncCallback"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.AsyncCallback"/>
				<x path="cs.system.AsyncCallback"/>
				<x path="cs.system.AsyncCallback"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="cs.system.BitConverter" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.BitConverter" extern="1">
		<IsLittleEndian public="1" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":readOnly"/></meta>
		</IsLittleEndian>
		<DoubleToInt64Bits final="1" public="1" set="method" static="1">
			<f a="value">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DoubleToInt64Bits>
		<Int64BitsToDouble final="1" public="1" set="method" static="1">
			<f a="value">
				<x path="haxe.Int64"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Int64BitsToDouble>
		<GetBytes final="1" public="1" set="method" static="1">
			<f a="value">
				<x path="Bool"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetBytes final="1" public="1" set="method">
					<f a="value">
						<x path="Float"/>
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetBytes>
				<GetBytes final="1" public="1" set="method">
					<f a="value">
						<x path="Single"/>
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetBytes>
				<GetBytes final="1" public="1" set="method">
					<f a="value">
						<t path="cs.types.UInt64"/>
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetBytes>
				<GetBytes final="1" public="1" set="method">
					<f a="value">
						<x path="UInt"/>
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetBytes>
				<GetBytes final="1" public="1" set="method">
					<f a="value">
						<t path="cs.types.UInt16"/>
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetBytes>
				<GetBytes final="1" public="1" set="method">
					<f a="value">
						<x path="haxe.Int64"/>
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetBytes>
				<GetBytes final="1" public="1" set="method">
					<f a="value">
						<x path="Int"/>
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetBytes>
				<GetBytes final="1" public="1" set="method">
					<f a="value">
						<t path="cs.types.Int16"/>
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetBytes>
				<GetBytes final="1" public="1" set="method">
					<f a="value">
						<t path="cs.types.Char16"/>
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetBytes>
			</overloads>
		</GetBytes>
		<ToBoolean final="1" public="1" set="method" static="1">
			<f a="value:startIndex">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToBoolean>
		<ToChar final="1" public="1" set="method" static="1">
			<f a="value:startIndex">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<t path="cs.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToChar>
		<ToInt16 final="1" public="1" set="method" static="1">
			<f a="value:startIndex">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<t path="cs.types.Int16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToInt16>
		<ToInt32 final="1" public="1" set="method" static="1">
			<f a="value:startIndex">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToInt32>
		<ToInt64 final="1" public="1" set="method" static="1">
			<f a="value:startIndex">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToInt64>
		<ToUInt16 final="1" public="1" set="method" static="1">
			<f a="value:startIndex">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<t path="cs.types.UInt16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToUInt16>
		<ToUInt32 final="1" public="1" set="method" static="1">
			<f a="value:startIndex">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToUInt32>
		<ToUInt64 final="1" public="1" set="method" static="1">
			<f a="value:startIndex">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<t path="cs.types.UInt64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToUInt64>
		<ToSingle final="1" public="1" set="method" static="1">
			<f a="value:startIndex">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Single"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToSingle>
		<ToDouble final="1" public="1" set="method" static="1">
			<f a="value:startIndex">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToDouble>
		<ToString final="1" public="1" set="method" static="1">
			<f a="value">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<ToString final="1" public="1" set="method">
					<f a="value:startIndex:length">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ToString>
				<ToString final="1" public="1" set="method">
					<f a="value:startIndex">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<x path="Int"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ToString>
			</overloads>
		</ToString>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.BitConverter"</e></m>
		</meta>
	</class>
	<class path="cs.system.Char" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Char" extern="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.IComparable_1"><t path="cs.types.Char16"/></implements>
		<implements path="cs.system.IEquatable_1"><t path="cs.types.Char16"/></implements>
		<implements path="cs.system.IComparable"/>
		<implements path="cs.system.IConvertible"/>
		<MinValue public="1" set="null" static="1">
			<t path="cs.types.Char16"/>
			<meta><m n=":readOnly"/></meta>
		</MinValue>
		<MaxValue public="1" set="null" static="1">
			<t path="cs.types.Char16"/>
			<meta><m n=":readOnly"/></meta>
		</MaxValue>
		<ConvertFromUtf32 final="1" public="1" set="method" static="1">
			<f a="utf32">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ConvertFromUtf32>
		<ConvertToUtf32 final="1" public="1" set="method" static="1">
			<f a="highSurrogate:lowSurrogate">
				<t path="cs.types.Char16"/>
				<t path="cs.types.Char16"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><ConvertToUtf32 final="1" public="1" set="method">
	<f a="s:index">
		<c path="String"/>
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</ConvertToUtf32></overloads>
		</ConvertToUtf32>
		<IsSurrogatePair final="1" public="1" set="method" static="1">
			<f a="highSurrogate:lowSurrogate">
				<t path="cs.types.Char16"/>
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><IsSurrogatePair final="1" public="1" set="method">
	<f a="s:index">
		<c path="String"/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</IsSurrogatePair></overloads>
		</IsSurrogatePair>
		<GetNumericValue final="1" public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetNumericValue final="1" public="1" set="method">
	<f a="s:index">
		<c path="String"/>
		<x path="Int"/>
		<x path="Float"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetNumericValue></overloads>
		</GetNumericValue>
		<GetUnicodeCategory final="1" public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<e path="cs.system.globalization.UnicodeCategory"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetUnicodeCategory final="1" public="1" set="method">
	<f a="s:index">
		<c path="String"/>
		<x path="Int"/>
		<e path="cs.system.globalization.UnicodeCategory"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetUnicodeCategory></overloads>
		</GetUnicodeCategory>
		<IsControl final="1" public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><IsControl final="1" public="1" set="method">
	<f a="s:index">
		<c path="String"/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</IsControl></overloads>
		</IsControl>
		<IsDigit final="1" public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><IsDigit final="1" public="1" set="method">
	<f a="s:index">
		<c path="String"/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</IsDigit></overloads>
		</IsDigit>
		<IsHighSurrogate final="1" public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><IsHighSurrogate final="1" public="1" set="method">
	<f a="s:index">
		<c path="String"/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</IsHighSurrogate></overloads>
		</IsHighSurrogate>
		<IsLetter final="1" public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><IsLetter final="1" public="1" set="method">
	<f a="s:index">
		<c path="String"/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</IsLetter></overloads>
		</IsLetter>
		<IsLetterOrDigit final="1" public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><IsLetterOrDigit final="1" public="1" set="method">
	<f a="s:index">
		<c path="String"/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</IsLetterOrDigit></overloads>
		</IsLetterOrDigit>
		<IsLower final="1" public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><IsLower final="1" public="1" set="method">
	<f a="s:index">
		<c path="String"/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</IsLower></overloads>
		</IsLower>
		<IsLowSurrogate final="1" public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><IsLowSurrogate final="1" public="1" set="method">
	<f a="s:index">
		<c path="String"/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</IsLowSurrogate></overloads>
		</IsLowSurrogate>
		<IsNumber final="1" public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><IsNumber final="1" public="1" set="method">
	<f a="s:index">
		<c path="String"/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</IsNumber></overloads>
		</IsNumber>
		<IsPunctuation final="1" public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><IsPunctuation final="1" public="1" set="method">
	<f a="s:index">
		<c path="String"/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</IsPunctuation></overloads>
		</IsPunctuation>
		<IsSeparator final="1" public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><IsSeparator final="1" public="1" set="method">
	<f a="s:index">
		<c path="String"/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</IsSeparator></overloads>
		</IsSeparator>
		<IsSurrogate final="1" public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><IsSurrogate final="1" public="1" set="method">
	<f a="s:index">
		<c path="String"/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</IsSurrogate></overloads>
		</IsSurrogate>
		<IsSymbol final="1" public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><IsSymbol final="1" public="1" set="method">
	<f a="s:index">
		<c path="String"/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</IsSymbol></overloads>
		</IsSymbol>
		<IsUpper final="1" public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><IsUpper final="1" public="1" set="method">
	<f a="s:index">
		<c path="String"/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</IsUpper></overloads>
		</IsUpper>
		<IsWhiteSpace final="1" public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><IsWhiteSpace final="1" public="1" set="method">
	<f a="s:index">
		<c path="String"/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</IsWhiteSpace></overloads>
		</IsWhiteSpace>
		<TryParse final="1" public="1" set="method" static="1">
			<f a="s:result">
				<c path="String"/>
				<t path="cs.Out"><t path="cs.types.Char16"/></t>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</TryParse>
		<Parse final="1" public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<t path="cs.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Parse>
		<ToLower final="1" public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<t path="cs.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><ToLower final="1" public="1" set="method">
	<f a="c:culture">
		<t path="cs.types.Char16"/>
		<c path="cs.system.globalization.CultureInfo"/>
		<t path="cs.types.Char16"/>
	</f>
	<meta><m n=":overload"/></meta>
</ToLower></overloads>
		</ToLower>
		<ToLowerInvariant final="1" public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<t path="cs.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToLowerInvariant>
		<ToUpper final="1" public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<t path="cs.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><ToUpper final="1" public="1" set="method">
	<f a="c:culture">
		<t path="cs.types.Char16"/>
		<c path="cs.system.globalization.CultureInfo"/>
		<t path="cs.types.Char16"/>
	</f>
	<meta><m n=":overload"/></meta>
</ToUpper></overloads>
		</ToUpper>
		<ToUpperInvariant final="1" public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<t path="cs.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToUpperInvariant>
		<ToString final="1" public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<_ToString final="1" public="1" set="method" static="1">
			<f a="c">
				<t path="cs.types.Char16"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":native"><e>"ToString"</e></m>
				<m n=":overload"/>
			</meta>
		</_ToString>
		<CompareTo final="1" public="1" set="method">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><CompareTo final="1" public="1" set="method">
	<f a="value">
		<t path="cs.types.Char16"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</CompareTo></overloads>
		</CompareTo>
		<ToString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><ToString final="1" public="1" set="method">
	<f a="provider">
		<c path="cs.system.IFormatProvider"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</ToString></overloads>
		</ToString>
		<GetTypeCode final="1" public="1" set="method">
			<f a=""><e path="cs.system.TypeCode"/></f>
			<meta><m n=":overload"/></meta>
		</GetTypeCode>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Char"</e></m>
		</meta>
	</class>
	<class path="cs.system.CharEnumerator" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.CharEnumerator" extern="1">
		<implements path="cs.system.collections.generic.IEnumerator_1"><t path="cs.types.Char16"/></implements>
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.IDisposable"/>
		<implements path="cs.system.collections.IEnumerator"/>
		<Current public="1" get="accessor" set="null">
			<t path="cs.types.Char16"/>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</Current>
		<get_Current final="1" set="method">
			<f a=""><t path="cs.types.Char16"/></f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":overload"/>
			</meta>
		</get_Current>
		<Clone final="1" public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</Clone>
		<MoveNext final="1" public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</MoveNext>
		<Reset final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Reset>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.CharEnumerator"</e></m>
		</meta>
	</class>
	<class path="cs.system.Delegate_Comparison_1" params="T0" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Comparison_1" module="cs.system.Comparison_1" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" params="T0" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.Comparison_1"><c path="op_Addition.T0"/></x>
	<x path="cs.system.Comparison_1"><c path="op_Addition.T0"/></x>
	<x path="cs.system.Comparison_1"><c path="op_Addition.T0"/></x>
</f></op_Addition>
		<op_Subtraction public="1" params="T0" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.Comparison_1"><c path="op_Subtraction.T0"/></x>
	<x path="cs.system.Comparison_1"><c path="op_Subtraction.T0"/></x>
	<x path="cs.system.Comparison_1"><c path="op_Subtraction.T0"/></x>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="x:y">
				<c path="cs.system.Delegate_Comparison_1.T0"/>
				<c path="cs.system.Delegate_Comparison_1.T0"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="x:y:callback:object">
				<c path="cs.system.Delegate_Comparison_1.T0"/>
				<c path="cs.system.Delegate_Comparison_1.T0"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Comparison`1"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.Comparison_1" params="T0" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Comparison_1">
		<from><icast field="FromHaxeFunction"><f a=":">
	<c path="FromHaxeFunction.T0"/>
	<c path="FromHaxeFunction.T0"/>
	<x path="Int"/>
</f></icast></from>
		<this><c path="cs.system.Delegate_Comparison_1"><c path="cs.system.Comparison_1.T0"/></c></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system._Comparison_1.Comparison_1_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Comparison_1" private="1" module="cs.system.Comparison_1">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=":">
				<c path="cs.system.Comparison_1.T0"/>
				<c path="cs.system.Comparison_1.T0"/>
				<x path="Int"/>
			</f>
			<x path="cs.system.Comparison_1"><c path="cs.system.Comparison_1.T0"/></x>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" params="T0" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=":">
				<c path="FromHaxeFunction.T0"/>
				<c path="FromHaxeFunction.T0"/>
				<x path="Int"/>
			</f>
			<x path="cs.system.Comparison_1"><c path="FromHaxeFunction.T0"/></x>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.Delegate_Comparison_1"><c path="cs.system.Comparison_1.T0"/></c>
			<c path="cs.system.Delegate_Comparison_1"><c path="cs.system.Comparison_1.T0"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" params="T0" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.Comparison_1"><c path="Add.T0"/></x>
			<x path="cs.system.Comparison_1"><c path="Add.T0"/></x>
			<x path="cs.system.Comparison_1"><c path="Add.T0"/></x>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" params="T0" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.Comparison_1"><c path="Remove.T0"/></x>
			<x path="cs.system.Comparison_1"><c path="Remove.T0"/></x>
			<x path="cs.system.Comparison_1"><c path="Remove.T0"/></x>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system._Comparison_1.Comparison_1_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Comparison_1" private="1" module="cs.system.Comparison_1">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=":">
					<c path="cs.system.Comparison_1.T0"/>
					<c path="cs.system.Comparison_1.T0"/>
					<x path="Int"/>
				</f>
				<x path="cs.system.Comparison_1"><c path="cs.system.Comparison_1.T0"/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" params="T0" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=":">
					<c path="FromHaxeFunction.T0"/>
					<c path="FromHaxeFunction.T0"/>
					<x path="Int"/>
				</f>
				<x path="cs.system.Comparison_1"><c path="FromHaxeFunction.T0"/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.Delegate_Comparison_1"><c path="cs.system.Comparison_1.T0"/></c>
				<c path="cs.system.Delegate_Comparison_1"><c path="cs.system.Comparison_1.T0"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" params="T0" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.Comparison_1"><c path="Add.T0"/></x>
				<x path="cs.system.Comparison_1"><c path="Add.T0"/></x>
				<x path="cs.system.Comparison_1"><c path="Add.T0"/></x>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" params="T0" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.Comparison_1"><c path="Remove.T0"/></x>
				<x path="cs.system.Comparison_1"><c path="Remove.T0"/></x>
				<x path="cs.system.Comparison_1"><c path="Remove.T0"/></x>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="cs.system.Console_Delegate_InternalCancelHandler" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Console" module="cs.system.Console" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.Console_InternalCancelHandler"/>
	<x path="cs.system.Console_InternalCancelHandler"/>
	<x path="cs.system.Console_InternalCancelHandler"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.Console_InternalCancelHandler"/>
	<x path="cs.system.Console_InternalCancelHandler"/>
	<x path="cs.system.Console_InternalCancelHandler"/>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="callback:object">
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Console.InternalCancelHandler"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.Console_InternalCancelHandler" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Console" module="cs.system.Console">
		<from><icast field="FromHaxeFunction"><f a=""><x path="Void"/></f></icast></from>
		<this><c path="cs.system.Console_Delegate_InternalCancelHandler"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system._Console.Console_InternalCancelHandler_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Console" private="1" module="cs.system.Console">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=""><x path="Void"/></f>
			<x path="cs.system.Console_InternalCancelHandler"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=""><x path="Void"/></f>
			<x path="cs.system.Console_InternalCancelHandler"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.Console_Delegate_InternalCancelHandler"/>
			<c path="cs.system.Console_Delegate_InternalCancelHandler"/>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.Console_InternalCancelHandler"/>
			<x path="cs.system.Console_InternalCancelHandler"/>
			<x path="cs.system.Console_InternalCancelHandler"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.Console_InternalCancelHandler"/>
			<x path="cs.system.Console_InternalCancelHandler"/>
			<x path="cs.system.Console_InternalCancelHandler"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system._Console.Console_InternalCancelHandler_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Console" private="1" module="cs.system.Console">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=""><x path="Void"/></f>
				<x path="cs.system.Console_InternalCancelHandler"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=""><x path="Void"/></f>
				<x path="cs.system.Console_InternalCancelHandler"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.Console_Delegate_InternalCancelHandler"/>
				<c path="cs.system.Console_Delegate_InternalCancelHandler"/>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.Console_InternalCancelHandler"/>
				<x path="cs.system.Console_InternalCancelHandler"/>
				<x path="cs.system.Console_InternalCancelHandler"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.Console_InternalCancelHandler"/>
				<x path="cs.system.Console_InternalCancelHandler"/>
				<x path="cs.system.Console_InternalCancelHandler"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="cs.system.Console_WindowsConsole_Delegate_WindowsCancelHandler" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Console" module="cs.system.Console" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.Console_WindowsConsole_WindowsCancelHandler"/>
	<x path="cs.system.Console_WindowsConsole_WindowsCancelHandler"/>
	<x path="cs.system.Console_WindowsConsole_WindowsCancelHandler"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.Console_WindowsConsole_WindowsCancelHandler"/>
	<x path="cs.system.Console_WindowsConsole_WindowsCancelHandler"/>
	<x path="cs.system.Console_WindowsConsole_WindowsCancelHandler"/>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="keyCode">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="keyCode:callback:object">
				<x path="Int"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Console.WindowsConsole.WindowsCancelHandler"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.Console_WindowsConsole_WindowsCancelHandler" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Console" module="cs.system.Console">
		<from><icast field="FromHaxeFunction"><f a="">
	<x path="Int"/>
	<x path="Bool"/>
</f></icast></from>
		<this><c path="cs.system.Console_WindowsConsole_Delegate_WindowsCancelHandler"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system._Console.Console_WindowsConsole_WindowsCancelHandler_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Console" private="1" module="cs.system.Console">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<x path="cs.system.Console_WindowsConsole_WindowsCancelHandler"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<x path="cs.system.Console_WindowsConsole_WindowsCancelHandler"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.Console_WindowsConsole_Delegate_WindowsCancelHandler"/>
			<c path="cs.system.Console_WindowsConsole_Delegate_WindowsCancelHandler"/>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.Console_WindowsConsole_WindowsCancelHandler"/>
			<x path="cs.system.Console_WindowsConsole_WindowsCancelHandler"/>
			<x path="cs.system.Console_WindowsConsole_WindowsCancelHandler"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.Console_WindowsConsole_WindowsCancelHandler"/>
			<x path="cs.system.Console_WindowsConsole_WindowsCancelHandler"/>
			<x path="cs.system.Console_WindowsConsole_WindowsCancelHandler"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system._Console.Console_WindowsConsole_WindowsCancelHandler_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Console" private="1" module="cs.system.Console">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="">
					<x path="Int"/>
					<x path="Bool"/>
				</f>
				<x path="cs.system.Console_WindowsConsole_WindowsCancelHandler"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="">
					<x path="Int"/>
					<x path="Bool"/>
				</f>
				<x path="cs.system.Console_WindowsConsole_WindowsCancelHandler"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.Console_WindowsConsole_Delegate_WindowsCancelHandler"/>
				<c path="cs.system.Console_WindowsConsole_Delegate_WindowsCancelHandler"/>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.Console_WindowsConsole_WindowsCancelHandler"/>
				<x path="cs.system.Console_WindowsConsole_WindowsCancelHandler"/>
				<x path="cs.system.Console_WindowsConsole_WindowsCancelHandler"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.Console_WindowsConsole_WindowsCancelHandler"/>
				<x path="cs.system.Console_WindowsConsole_WindowsCancelHandler"/>
				<x path="cs.system.Console_WindowsConsole_WindowsCancelHandler"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="cs.system.Console_WindowsConsole" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Console" module="cs.system.Console" extern="1">
		<ctrlHandlerAdded public="1" static="1"><x path="Bool"/></ctrlHandlerAdded>
		<GetInputCodePage final="1" public="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</GetInputCodePage>
		<GetOutputCodePage final="1" public="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</GetOutputCodePage>
		<AddCtrlHandler final="1" public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</AddCtrlHandler>
		<RemoveCtrlHandler final="1" public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</RemoveCtrlHandler>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Console.WindowsConsole"</e></m>
		</meta>
	</class>
	<class path="cs.system.Console" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Console" extern="1">
		<CancelKeyPress static="1">
			<x path="cs.system.ConsoleCancelEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</CancelKeyPress>
		<WindowWidth public="1" get="accessor" set="accessor" static="1"><x path="Int"/></WindowWidth>
		<WindowTop public="1" get="accessor" set="accessor" static="1"><x path="Int"/></WindowTop>
		<WindowLeft public="1" get="accessor" set="accessor" static="1"><x path="Int"/></WindowLeft>
		<WindowHeight public="1" get="accessor" set="accessor" static="1"><x path="Int"/></WindowHeight>
		<TreatControlCAsInput public="1" get="accessor" set="accessor" static="1"><x path="Bool"/></TreatControlCAsInput>
		<Title public="1" get="accessor" set="accessor" static="1"><c path="String"/></Title>
		<NumberLock public="1" get="accessor" set="null" static="1"><x path="Bool"/></NumberLock>
		<LargestWindowWidth public="1" get="accessor" set="null" static="1"><x path="Int"/></LargestWindowWidth>
		<LargestWindowHeight public="1" get="accessor" set="null" static="1"><x path="Int"/></LargestWindowHeight>
		<KeyAvailable public="1" get="accessor" set="null" static="1"><x path="Bool"/></KeyAvailable>
		<ForegroundColor public="1" get="accessor" set="accessor" static="1"><e path="cs.system.ConsoleColor"/></ForegroundColor>
		<CursorVisible public="1" get="accessor" set="accessor" static="1"><x path="Bool"/></CursorVisible>
		<CursorSize public="1" get="accessor" set="accessor" static="1"><x path="Int"/></CursorSize>
		<CursorTop public="1" get="accessor" set="accessor" static="1"><x path="Int"/></CursorTop>
		<CursorLeft public="1" get="accessor" set="accessor" static="1"><x path="Int"/></CursorLeft>
		<CapsLock public="1" get="accessor" set="null" static="1"><x path="Bool"/></CapsLock>
		<BufferWidth public="1" get="accessor" set="accessor" static="1"><x path="Int"/></BufferWidth>
		<BufferHeight public="1" get="accessor" set="accessor" static="1"><x path="Int"/></BufferHeight>
		<BackgroundColor public="1" get="accessor" set="accessor" static="1"><e path="cs.system.ConsoleColor"/></BackgroundColor>
		<OutputEncoding public="1" get="accessor" set="accessor" static="1"><c path="cs.system.text.Encoding"/></OutputEncoding>
		<InputEncoding public="1" get="accessor" set="accessor" static="1"><c path="cs.system.text.Encoding"/></InputEncoding>
		<In public="1" get="accessor" set="null" static="1"><c path="cs.system.io.TextReader"/></In>
		<Out public="1" get="accessor" set="null" static="1"><c path="cs.system.io.TextWriter"/></Out>
		<Error public="1" get="accessor" set="null" static="1"><c path="cs.system.io.TextWriter"/></Error>
		<add_CancelKeyPress final="1" public="1" set="method" static="1">
			<f a="value">
				<x path="cs.system.ConsoleCancelEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add_CancelKeyPress>
		<remove_CancelKeyPress final="1" public="1" set="method" static="1">
			<f a="value">
				<x path="cs.system.ConsoleCancelEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove_CancelKeyPress>
		<get_Error final="1" set="method" static="1">
			<f a=""><c path="cs.system.io.TextWriter"/></f>
			<meta><m n=":overload"/></meta>
		</get_Error>
		<get_Out final="1" set="method" static="1">
			<f a=""><c path="cs.system.io.TextWriter"/></f>
			<meta><m n=":overload"/></meta>
		</get_Out>
		<get_In final="1" set="method" static="1">
			<f a=""><c path="cs.system.io.TextReader"/></f>
			<meta><m n=":overload"/></meta>
		</get_In>
		<OpenStandardError final="1" public="1" set="method" static="1">
			<f a=""><c path="cs.system.io.Stream"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><OpenStandardError final="1" public="1" set="method">
	<f a="bufferSize">
		<x path="Int"/>
		<c path="cs.system.io.Stream"/>
	</f>
	<meta><m n=":overload"/></meta>
</OpenStandardError></overloads>
		</OpenStandardError>
		<OpenStandardInput final="1" public="1" set="method" static="1">
			<f a=""><c path="cs.system.io.Stream"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><OpenStandardInput final="1" public="1" set="method">
	<f a="bufferSize">
		<x path="Int"/>
		<c path="cs.system.io.Stream"/>
	</f>
	<meta><m n=":overload"/></meta>
</OpenStandardInput></overloads>
		</OpenStandardInput>
		<OpenStandardOutput final="1" public="1" set="method" static="1">
			<f a=""><c path="cs.system.io.Stream"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><OpenStandardOutput final="1" public="1" set="method">
	<f a="bufferSize">
		<x path="Int"/>
		<c path="cs.system.io.Stream"/>
	</f>
	<meta><m n=":overload"/></meta>
</OpenStandardOutput></overloads>
		</OpenStandardOutput>
		<SetError final="1" public="1" set="method" static="1">
			<f a="newError">
				<c path="cs.system.io.TextWriter"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetError>
		<SetIn final="1" public="1" set="method" static="1">
			<f a="newIn">
				<c path="cs.system.io.TextReader"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetIn>
		<SetOut final="1" public="1" set="method" static="1">
			<f a="newOut">
				<c path="cs.system.io.TextWriter"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetOut>
		<Write final="1" public="1" set="method" static="1">
			<f a="value">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Write final="1" public="1" set="method">
					<f a="format:arg0:arg1:arg2:arg3">
						<c path="String"/>
						<d/>
						<d/>
						<d/>
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write final="1" public="1" set="method">
					<f a="format:arg0:arg1:arg2">
						<c path="String"/>
						<d/>
						<d/>
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write final="1" public="1" set="method">
					<f a="format:arg0:arg1">
						<c path="String"/>
						<d/>
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write final="1" public="1" set="method">
					<f a="buffer:index:count">
						<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write final="1" public="1" set="method">
					<f a="format:arg">
						<c path="String"/>
						<c path="cs.NativeArray"><d/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write final="1" public="1" set="method">
					<f a="format:arg0">
						<c path="String"/>
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write final="1" public="1" set="method">
					<f a="value">
						<t path="cs.types.UInt64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write final="1" public="1" set="method">
					<f a="value">
						<x path="UInt"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write final="1" public="1" set="method">
					<f a="value">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write final="1" public="1" set="method">
					<f a="value">
						<x path="Single"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write final="1" public="1" set="method">
					<f a="value">
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write final="1" public="1" set="method">
					<f a="value">
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write final="1" public="1" set="method">
					<f a="value">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write final="1" public="1" set="method">
					<f a="value">
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write final="1" public="1" set="method">
					<f a="value">
						<c path="cs.system.Decimal"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write final="1" public="1" set="method">
					<f a="buffer">
						<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write final="1" public="1" set="method">
					<f a="value">
						<t path="cs.types.Char16"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
			</overloads>
		</Write>
		<WriteLine final="1" public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<WriteLine final="1" public="1" set="method">
					<f a="format:arg0:arg1:arg2:arg3">
						<c path="String"/>
						<d/>
						<d/>
						<d/>
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
				<WriteLine final="1" public="1" set="method">
					<f a="format:arg0:arg1:arg2">
						<c path="String"/>
						<d/>
						<d/>
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
				<WriteLine final="1" public="1" set="method">
					<f a="format:arg0:arg1">
						<c path="String"/>
						<d/>
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
				<WriteLine final="1" public="1" set="method">
					<f a="buffer:index:count">
						<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
				<WriteLine final="1" public="1" set="method">
					<f a="format:arg">
						<c path="String"/>
						<c path="cs.NativeArray"><d/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
				<WriteLine final="1" public="1" set="method">
					<f a="format:arg0">
						<c path="String"/>
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
				<WriteLine final="1" public="1" set="method">
					<f a="value">
						<t path="cs.types.UInt64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
				<WriteLine final="1" public="1" set="method">
					<f a="value">
						<x path="UInt"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
				<WriteLine final="1" public="1" set="method">
					<f a="value">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
				<WriteLine final="1" public="1" set="method">
					<f a="value">
						<x path="Single"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
				<WriteLine final="1" public="1" set="method">
					<f a="value">
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
				<WriteLine final="1" public="1" set="method">
					<f a="value">
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
				<WriteLine final="1" public="1" set="method">
					<f a="value">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
				<WriteLine final="1" public="1" set="method">
					<f a="value">
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
				<WriteLine final="1" public="1" set="method">
					<f a="value">
						<c path="cs.system.Decimal"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
				<WriteLine final="1" public="1" set="method">
					<f a="buffer">
						<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
				<WriteLine final="1" public="1" set="method">
					<f a="value">
						<t path="cs.types.Char16"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
				<WriteLine final="1" public="1" set="method">
					<f a="value">
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
			</overloads>
		</WriteLine>
		<Read final="1" public="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</Read>
		<ReadLine final="1" public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ReadLine>
		<get_InputEncoding final="1" set="method" static="1">
			<f a=""><c path="cs.system.text.Encoding"/></f>
			<meta><m n=":overload"/></meta>
		</get_InputEncoding>
		<set_InputEncoding final="1" set="method" static="1">
			<f a="value">
				<c path="cs.system.text.Encoding"/>
				<c path="cs.system.text.Encoding"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_InputEncoding>
		<get_OutputEncoding final="1" set="method" static="1">
			<f a=""><c path="cs.system.text.Encoding"/></f>
			<meta><m n=":overload"/></meta>
		</get_OutputEncoding>
		<set_OutputEncoding final="1" set="method" static="1">
			<f a="value">
				<c path="cs.system.text.Encoding"/>
				<c path="cs.system.text.Encoding"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_OutputEncoding>
		<get_BackgroundColor final="1" set="method" static="1">
			<f a=""><e path="cs.system.ConsoleColor"/></f>
			<meta><m n=":overload"/></meta>
		</get_BackgroundColor>
		<set_BackgroundColor final="1" set="method" static="1">
			<f a="value">
				<e path="cs.system.ConsoleColor"/>
				<e path="cs.system.ConsoleColor"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_BackgroundColor>
		<get_BufferHeight final="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_BufferHeight>
		<set_BufferHeight final="1" set="method" static="1">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_BufferHeight>
		<get_BufferWidth final="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_BufferWidth>
		<set_BufferWidth final="1" set="method" static="1">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_BufferWidth>
		<get_CapsLock final="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_CapsLock>
		<get_CursorLeft final="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_CursorLeft>
		<set_CursorLeft final="1" set="method" static="1">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_CursorLeft>
		<get_CursorTop final="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_CursorTop>
		<set_CursorTop final="1" set="method" static="1">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_CursorTop>
		<get_CursorSize final="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_CursorSize>
		<set_CursorSize final="1" set="method" static="1">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_CursorSize>
		<get_CursorVisible final="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_CursorVisible>
		<set_CursorVisible final="1" set="method" static="1">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_CursorVisible>
		<get_ForegroundColor final="1" set="method" static="1">
			<f a=""><e path="cs.system.ConsoleColor"/></f>
			<meta><m n=":overload"/></meta>
		</get_ForegroundColor>
		<set_ForegroundColor final="1" set="method" static="1">
			<f a="value">
				<e path="cs.system.ConsoleColor"/>
				<e path="cs.system.ConsoleColor"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ForegroundColor>
		<get_KeyAvailable final="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_KeyAvailable>
		<get_LargestWindowHeight final="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_LargestWindowHeight>
		<get_LargestWindowWidth final="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_LargestWindowWidth>
		<get_NumberLock final="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_NumberLock>
		<get_Title final="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Title>
		<set_Title final="1" set="method" static="1">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Title>
		<get_TreatControlCAsInput final="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_TreatControlCAsInput>
		<set_TreatControlCAsInput final="1" set="method" static="1">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_TreatControlCAsInput>
		<get_WindowHeight final="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_WindowHeight>
		<set_WindowHeight final="1" set="method" static="1">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_WindowHeight>
		<get_WindowLeft final="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_WindowLeft>
		<set_WindowLeft final="1" set="method" static="1">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_WindowLeft>
		<get_WindowTop final="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_WindowTop>
		<set_WindowTop final="1" set="method" static="1">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_WindowTop>
		<get_WindowWidth final="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_WindowWidth>
		<set_WindowWidth final="1" set="method" static="1">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_WindowWidth>
		<Beep final="1" public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><Beep final="1" public="1" set="method">
	<f a="frequency:duration">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</Beep></overloads>
		</Beep>
		<Clear final="1" public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Clear>
		<MoveBufferArea final="1" public="1" set="method" static="1">
			<f a="sourceLeft:sourceTop:sourceWidth:sourceHeight:targetLeft:targetTop">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><MoveBufferArea final="1" public="1" set="method">
	<f a="sourceLeft:sourceTop:sourceWidth:sourceHeight:targetLeft:targetTop:sourceChar:sourceForeColor:sourceBackColor">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<t path="cs.types.Char16"/>
		<e path="cs.system.ConsoleColor"/>
		<e path="cs.system.ConsoleColor"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</MoveBufferArea></overloads>
		</MoveBufferArea>
		<ReadKey final="1" public="1" set="method" static="1">
			<f a=""><c path="cs.system.ConsoleKeyInfo"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><ReadKey final="1" public="1" set="method">
	<f a="intercept">
		<x path="Bool"/>
		<c path="cs.system.ConsoleKeyInfo"/>
	</f>
	<meta><m n=":overload"/></meta>
</ReadKey></overloads>
		</ReadKey>
		<ResetColor final="1" public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</ResetColor>
		<SetBufferSize final="1" public="1" set="method" static="1">
			<f a="width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetBufferSize>
		<SetCursorPosition final="1" public="1" set="method" static="1">
			<f a="left:top">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetCursorPosition>
		<SetWindowPosition final="1" public="1" set="method" static="1">
			<f a="left:top">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetWindowPosition>
		<SetWindowSize final="1" public="1" set="method" static="1">
			<f a="width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetWindowSize>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Console"</e></m>
		</meta>
	</class>
	<class path="cs.system.ConsoleCancelEventArgs" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.ConsoleCancelEventArgs" extern="1">
		<extends path="cs.system.EventArgs"/>
		<SpecialKey public="1" get="accessor" set="null"><e path="cs.system.ConsoleSpecialKey"/></SpecialKey>
		<Cancel public="1" get="accessor" set="accessor"><x path="Bool"/></Cancel>
		<get_Cancel final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_Cancel>
		<set_Cancel final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Cancel>
		<get_SpecialKey final="1" set="method">
			<f a=""><e path="cs.system.ConsoleSpecialKey"/></f>
			<meta><m n=":overload"/></meta>
		</get_SpecialKey>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ConsoleCancelEventArgs"</e></m>
		</meta>
	</class>
	<class path="cs.system.Delegate_ConsoleCancelEventHandler" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.ConsoleCancelEventHandler" module="cs.system.ConsoleCancelEventHandler" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.ConsoleCancelEventHandler"/>
	<x path="cs.system.ConsoleCancelEventHandler"/>
	<x path="cs.system.ConsoleCancelEventHandler"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.ConsoleCancelEventHandler"/>
	<x path="cs.system.ConsoleCancelEventHandler"/>
	<x path="cs.system.ConsoleCancelEventHandler"/>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="sender:e">
				<d/>
				<c path="cs.system.ConsoleCancelEventArgs"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="sender:e:callback:object">
				<d/>
				<c path="cs.system.ConsoleCancelEventArgs"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ConsoleCancelEventHandler"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.ConsoleCancelEventHandler" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.ConsoleCancelEventHandler">
		<from><icast field="FromHaxeFunction"><f a=":">
	<d/>
	<c path="cs.system.ConsoleCancelEventArgs"/>
	<x path="Void"/>
</f></icast></from>
		<this><c path="cs.system.Delegate_ConsoleCancelEventHandler"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system._ConsoleCancelEventHandler.ConsoleCancelEventHandler_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.ConsoleCancelEventHandler" private="1" module="cs.system.ConsoleCancelEventHandler">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=":">
				<d/>
				<c path="cs.system.ConsoleCancelEventArgs"/>
				<x path="Void"/>
			</f>
			<x path="cs.system.ConsoleCancelEventHandler"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=":">
				<d/>
				<c path="cs.system.ConsoleCancelEventArgs"/>
				<x path="Void"/>
			</f>
			<x path="cs.system.ConsoleCancelEventHandler"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.Delegate_ConsoleCancelEventHandler"/>
			<c path="cs.system.Delegate_ConsoleCancelEventHandler"/>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.ConsoleCancelEventHandler"/>
			<x path="cs.system.ConsoleCancelEventHandler"/>
			<x path="cs.system.ConsoleCancelEventHandler"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.ConsoleCancelEventHandler"/>
			<x path="cs.system.ConsoleCancelEventHandler"/>
			<x path="cs.system.ConsoleCancelEventHandler"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system._ConsoleCancelEventHandler.ConsoleCancelEventHandler_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.ConsoleCancelEventHandler" private="1" module="cs.system.ConsoleCancelEventHandler">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=":">
					<d/>
					<c path="cs.system.ConsoleCancelEventArgs"/>
					<x path="Void"/>
				</f>
				<x path="cs.system.ConsoleCancelEventHandler"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=":">
					<d/>
					<c path="cs.system.ConsoleCancelEventArgs"/>
					<x path="Void"/>
				</f>
				<x path="cs.system.ConsoleCancelEventHandler"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.Delegate_ConsoleCancelEventHandler"/>
				<c path="cs.system.Delegate_ConsoleCancelEventHandler"/>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.ConsoleCancelEventHandler"/>
				<x path="cs.system.ConsoleCancelEventHandler"/>
				<x path="cs.system.ConsoleCancelEventHandler"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.ConsoleCancelEventHandler"/>
				<x path="cs.system.ConsoleCancelEventHandler"/>
				<x path="cs.system.ConsoleCancelEventHandler"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<enum path="cs.system.ConsoleColor" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.ConsoleColor">
		<Black><meta><m n=":csNative"><e>0</e></m></meta></Black>
		<DarkBlue><meta><m n=":csNative"><e>1</e></m></meta></DarkBlue>
		<DarkGreen><meta><m n=":csNative"><e>2</e></m></meta></DarkGreen>
		<DarkCyan><meta><m n=":csNative"><e>3</e></m></meta></DarkCyan>
		<DarkRed><meta><m n=":csNative"><e>4</e></m></meta></DarkRed>
		<DarkMagenta><meta><m n=":csNative"><e>5</e></m></meta></DarkMagenta>
		<DarkYellow><meta><m n=":csNative"><e>6</e></m></meta></DarkYellow>
		<Gray><meta><m n=":csNative"><e>7</e></m></meta></Gray>
		<DarkGray><meta><m n=":csNative"><e>8</e></m></meta></DarkGray>
		<Blue><meta><m n=":csNative"><e>9</e></m></meta></Blue>
		<Green><meta><m n=":csNative"><e>10</e></m></meta></Green>
		<Cyan><meta><m n=":csNative"><e>11</e></m></meta></Cyan>
		<Red><meta><m n=":csNative"><e>12</e></m></meta></Red>
		<Magenta><meta><m n=":csNative"><e>13</e></m></meta></Magenta>
		<Yellow><meta><m n=":csNative"><e>14</e></m></meta></Yellow>
		<White><meta><m n=":csNative"><e>15</e></m></meta></White>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.ConsoleColor"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.ConsoleKey" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.ConsoleKey">
		<Backspace><meta><m n=":csNative"><e>8</e></m></meta></Backspace>
		<Tab><meta><m n=":csNative"><e>9</e></m></meta></Tab>
		<Clear><meta><m n=":csNative"><e>12</e></m></meta></Clear>
		<Enter><meta><m n=":csNative"><e>13</e></m></meta></Enter>
		<Pause><meta><m n=":csNative"><e>19</e></m></meta></Pause>
		<Escape><meta><m n=":csNative"><e>27</e></m></meta></Escape>
		<Spacebar><meta><m n=":csNative"><e>32</e></m></meta></Spacebar>
		<PageUp><meta><m n=":csNative"><e>33</e></m></meta></PageUp>
		<PageDown><meta><m n=":csNative"><e>34</e></m></meta></PageDown>
		<End><meta><m n=":csNative"><e>35</e></m></meta></End>
		<Home><meta><m n=":csNative"><e>36</e></m></meta></Home>
		<LeftArrow><meta><m n=":csNative"><e>37</e></m></meta></LeftArrow>
		<UpArrow><meta><m n=":csNative"><e>38</e></m></meta></UpArrow>
		<RightArrow><meta><m n=":csNative"><e>39</e></m></meta></RightArrow>
		<DownArrow><meta><m n=":csNative"><e>40</e></m></meta></DownArrow>
		<Select><meta><m n=":csNative"><e>41</e></m></meta></Select>
		<Print><meta><m n=":csNative"><e>42</e></m></meta></Print>
		<Execute><meta><m n=":csNative"><e>43</e></m></meta></Execute>
		<PrintScreen><meta><m n=":csNative"><e>44</e></m></meta></PrintScreen>
		<Insert><meta><m n=":csNative"><e>45</e></m></meta></Insert>
		<Delete><meta><m n=":csNative"><e>46</e></m></meta></Delete>
		<Help><meta><m n=":csNative"><e>47</e></m></meta></Help>
		<D0><meta><m n=":csNative"><e>48</e></m></meta></D0>
		<D1><meta><m n=":csNative"><e>49</e></m></meta></D1>
		<D2><meta><m n=":csNative"><e>50</e></m></meta></D2>
		<D3><meta><m n=":csNative"><e>51</e></m></meta></D3>
		<D4><meta><m n=":csNative"><e>52</e></m></meta></D4>
		<D5><meta><m n=":csNative"><e>53</e></m></meta></D5>
		<D6><meta><m n=":csNative"><e>54</e></m></meta></D6>
		<D7><meta><m n=":csNative"><e>55</e></m></meta></D7>
		<D8><meta><m n=":csNative"><e>56</e></m></meta></D8>
		<D9><meta><m n=":csNative"><e>57</e></m></meta></D9>
		<A><meta><m n=":csNative"><e>65</e></m></meta></A>
		<B><meta><m n=":csNative"><e>66</e></m></meta></B>
		<C><meta><m n=":csNative"><e>67</e></m></meta></C>
		<D><meta><m n=":csNative"><e>68</e></m></meta></D>
		<E><meta><m n=":csNative"><e>69</e></m></meta></E>
		<F><meta><m n=":csNative"><e>70</e></m></meta></F>
		<G><meta><m n=":csNative"><e>71</e></m></meta></G>
		<H><meta><m n=":csNative"><e>72</e></m></meta></H>
		<I><meta><m n=":csNative"><e>73</e></m></meta></I>
		<J><meta><m n=":csNative"><e>74</e></m></meta></J>
		<K><meta><m n=":csNative"><e>75</e></m></meta></K>
		<L><meta><m n=":csNative"><e>76</e></m></meta></L>
		<M><meta><m n=":csNative"><e>77</e></m></meta></M>
		<N><meta><m n=":csNative"><e>78</e></m></meta></N>
		<O><meta><m n=":csNative"><e>79</e></m></meta></O>
		<P><meta><m n=":csNative"><e>80</e></m></meta></P>
		<Q><meta><m n=":csNative"><e>81</e></m></meta></Q>
		<R><meta><m n=":csNative"><e>82</e></m></meta></R>
		<S><meta><m n=":csNative"><e>83</e></m></meta></S>
		<T><meta><m n=":csNative"><e>84</e></m></meta></T>
		<U><meta><m n=":csNative"><e>85</e></m></meta></U>
		<V><meta><m n=":csNative"><e>86</e></m></meta></V>
		<W><meta><m n=":csNative"><e>87</e></m></meta></W>
		<X><meta><m n=":csNative"><e>88</e></m></meta></X>
		<Y><meta><m n=":csNative"><e>89</e></m></meta></Y>
		<Z><meta><m n=":csNative"><e>90</e></m></meta></Z>
		<LeftWindows><meta><m n=":csNative"><e>91</e></m></meta></LeftWindows>
		<RightWindows><meta><m n=":csNative"><e>92</e></m></meta></RightWindows>
		<Applications><meta><m n=":csNative"><e>93</e></m></meta></Applications>
		<Sleep><meta><m n=":csNative"><e>95</e></m></meta></Sleep>
		<NumPad0><meta><m n=":csNative"><e>96</e></m></meta></NumPad0>
		<NumPad1><meta><m n=":csNative"><e>97</e></m></meta></NumPad1>
		<NumPad2><meta><m n=":csNative"><e>98</e></m></meta></NumPad2>
		<NumPad3><meta><m n=":csNative"><e>99</e></m></meta></NumPad3>
		<NumPad4><meta><m n=":csNative"><e>100</e></m></meta></NumPad4>
		<NumPad5><meta><m n=":csNative"><e>101</e></m></meta></NumPad5>
		<NumPad6><meta><m n=":csNative"><e>102</e></m></meta></NumPad6>
		<NumPad7><meta><m n=":csNative"><e>103</e></m></meta></NumPad7>
		<NumPad8><meta><m n=":csNative"><e>104</e></m></meta></NumPad8>
		<NumPad9><meta><m n=":csNative"><e>105</e></m></meta></NumPad9>
		<Multiply><meta><m n=":csNative"><e>106</e></m></meta></Multiply>
		<Add><meta><m n=":csNative"><e>107</e></m></meta></Add>
		<Separator><meta><m n=":csNative"><e>108</e></m></meta></Separator>
		<Subtract><meta><m n=":csNative"><e>109</e></m></meta></Subtract>
		<Decimal><meta><m n=":csNative"><e>110</e></m></meta></Decimal>
		<Divide><meta><m n=":csNative"><e>111</e></m></meta></Divide>
		<F1><meta><m n=":csNative"><e>112</e></m></meta></F1>
		<F2><meta><m n=":csNative"><e>113</e></m></meta></F2>
		<F3><meta><m n=":csNative"><e>114</e></m></meta></F3>
		<F4><meta><m n=":csNative"><e>115</e></m></meta></F4>
		<F5><meta><m n=":csNative"><e>116</e></m></meta></F5>
		<F6><meta><m n=":csNative"><e>117</e></m></meta></F6>
		<F7><meta><m n=":csNative"><e>118</e></m></meta></F7>
		<F8><meta><m n=":csNative"><e>119</e></m></meta></F8>
		<F9><meta><m n=":csNative"><e>120</e></m></meta></F9>
		<F10><meta><m n=":csNative"><e>121</e></m></meta></F10>
		<F11><meta><m n=":csNative"><e>122</e></m></meta></F11>
		<F12><meta><m n=":csNative"><e>123</e></m></meta></F12>
		<F13><meta><m n=":csNative"><e>124</e></m></meta></F13>
		<F14><meta><m n=":csNative"><e>125</e></m></meta></F14>
		<F15><meta><m n=":csNative"><e>126</e></m></meta></F15>
		<F16><meta><m n=":csNative"><e>127</e></m></meta></F16>
		<F17><meta><m n=":csNative"><e>128</e></m></meta></F17>
		<F18><meta><m n=":csNative"><e>129</e></m></meta></F18>
		<F19><meta><m n=":csNative"><e>130</e></m></meta></F19>
		<F20><meta><m n=":csNative"><e>131</e></m></meta></F20>
		<F21><meta><m n=":csNative"><e>132</e></m></meta></F21>
		<F22><meta><m n=":csNative"><e>133</e></m></meta></F22>
		<F23><meta><m n=":csNative"><e>134</e></m></meta></F23>
		<F24><meta><m n=":csNative"><e>135</e></m></meta></F24>
		<BrowserBack><meta><m n=":csNative"><e>166</e></m></meta></BrowserBack>
		<BrowserForward><meta><m n=":csNative"><e>167</e></m></meta></BrowserForward>
		<BrowserRefresh><meta><m n=":csNative"><e>168</e></m></meta></BrowserRefresh>
		<BrowserStop><meta><m n=":csNative"><e>169</e></m></meta></BrowserStop>
		<BrowserSearch><meta><m n=":csNative"><e>170</e></m></meta></BrowserSearch>
		<BrowserFavorites><meta><m n=":csNative"><e>171</e></m></meta></BrowserFavorites>
		<BrowserHome><meta><m n=":csNative"><e>172</e></m></meta></BrowserHome>
		<VolumeMute><meta><m n=":csNative"><e>173</e></m></meta></VolumeMute>
		<VolumeDown><meta><m n=":csNative"><e>174</e></m></meta></VolumeDown>
		<VolumeUp><meta><m n=":csNative"><e>175</e></m></meta></VolumeUp>
		<MediaNext><meta><m n=":csNative"><e>176</e></m></meta></MediaNext>
		<MediaPrevious><meta><m n=":csNative"><e>177</e></m></meta></MediaPrevious>
		<MediaStop><meta><m n=":csNative"><e>178</e></m></meta></MediaStop>
		<MediaPlay><meta><m n=":csNative"><e>179</e></m></meta></MediaPlay>
		<LaunchMail><meta><m n=":csNative"><e>180</e></m></meta></LaunchMail>
		<LaunchMediaSelect><meta><m n=":csNative"><e>181</e></m></meta></LaunchMediaSelect>
		<LaunchApp1><meta><m n=":csNative"><e>182</e></m></meta></LaunchApp1>
		<LaunchApp2><meta><m n=":csNative"><e>183</e></m></meta></LaunchApp2>
		<Oem1><meta><m n=":csNative"><e>186</e></m></meta></Oem1>
		<OemPlus><meta><m n=":csNative"><e>187</e></m></meta></OemPlus>
		<OemComma><meta><m n=":csNative"><e>188</e></m></meta></OemComma>
		<OemMinus><meta><m n=":csNative"><e>189</e></m></meta></OemMinus>
		<OemPeriod><meta><m n=":csNative"><e>190</e></m></meta></OemPeriod>
		<Oem2><meta><m n=":csNative"><e>191</e></m></meta></Oem2>
		<Oem3><meta><m n=":csNative"><e>192</e></m></meta></Oem3>
		<Oem4><meta><m n=":csNative"><e>219</e></m></meta></Oem4>
		<Oem5><meta><m n=":csNative"><e>220</e></m></meta></Oem5>
		<Oem6><meta><m n=":csNative"><e>221</e></m></meta></Oem6>
		<Oem7><meta><m n=":csNative"><e>222</e></m></meta></Oem7>
		<Oem8><meta><m n=":csNative"><e>223</e></m></meta></Oem8>
		<Oem102><meta><m n=":csNative"><e>226</e></m></meta></Oem102>
		<Process><meta><m n=":csNative"><e>229</e></m></meta></Process>
		<Packet><meta><m n=":csNative"><e>231</e></m></meta></Packet>
		<Attention><meta><m n=":csNative"><e>246</e></m></meta></Attention>
		<CrSel><meta><m n=":csNative"><e>247</e></m></meta></CrSel>
		<ExSel><meta><m n=":csNative"><e>248</e></m></meta></ExSel>
		<EraseEndOfFile><meta><m n=":csNative"><e>249</e></m></meta></EraseEndOfFile>
		<Play><meta><m n=":csNative"><e>250</e></m></meta></Play>
		<Zoom><meta><m n=":csNative"><e>251</e></m></meta></Zoom>
		<NoName><meta><m n=":csNative"><e>252</e></m></meta></NoName>
		<Pa1><meta><m n=":csNative"><e>253</e></m></meta></Pa1>
		<OemClear><meta><m n=":csNative"><e>254</e></m></meta></OemClear>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.ConsoleKey"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.ConsoleKeyInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.ConsoleKeyInfo" extern="1">
		<extends path="cs.system.ValueType"/>
		<op_Equality final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="cs.system.ConsoleKeyInfo"/>
				<c path="cs.system.ConsoleKeyInfo"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Equality>
		<op_Inequality final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="cs.system.ConsoleKeyInfo"/>
				<c path="cs.system.ConsoleKeyInfo"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Inequality>
		<Modifiers public="1" get="accessor" set="null"><e path="cs.system.ConsoleModifiers"/></Modifiers>
		<KeyChar public="1" get="accessor" set="null"><t path="cs.types.Char16"/></KeyChar>
		<Key public="1" get="accessor" set="null"><e path="cs.system.ConsoleKey"/></Key>
		<get_Key final="1" set="method">
			<f a=""><e path="cs.system.ConsoleKey"/></f>
			<meta><m n=":overload"/></meta>
		</get_Key>
		<get_KeyChar final="1" set="method">
			<f a=""><t path="cs.types.Char16"/></f>
			<meta><m n=":overload"/></meta>
		</get_KeyChar>
		<get_Modifiers final="1" set="method">
			<f a=""><e path="cs.system.ConsoleModifiers"/></f>
			<meta><m n=":overload"/></meta>
		</get_Modifiers>
		<new final="1" public="1" set="method">
			<f a="keyChar:key:shift:alt:control">
				<t path="cs.types.Char16"/>
				<e path="cs.system.ConsoleKey"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ConsoleKeyInfo"</e></m>
		</meta>
	</class>
	<enum path="cs.system.ConsoleModifiers" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.ConsoleModifiers">
		<Alt><meta><m n=":csNative"><e>1</e></m></meta></Alt>
		<Shift><meta><m n=":csNative"><e>2</e></m></meta></Shift>
		<Control><meta><m n=":csNative"><e>4</e></m></meta></Control>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.ConsoleModifiers"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.ConsoleSpecialKey" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.ConsoleSpecialKey">
		<ControlC><meta><m n=":csNative"><e>0</e></m></meta></ControlC>
		<ControlBreak><meta><m n=":csNative"><e>1</e></m></meta></ControlBreak>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.ConsoleSpecialKey"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.ContextBoundObject" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.ContextBoundObject" extern="1">
		<extends path="cs.system.MarshalByRefObject"/>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ContextBoundObject"</e></m>
		</meta>
	</class>
	<class path="cs.system.Delegate_Converter_2" params="T0:T1" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Converter_2" module="cs.system.Converter_2" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" params="T0:T1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.Converter_2">
		<c path="op_Addition.T0"/>
		<c path="op_Addition.T1"/>
	</x>
	<x path="cs.system.Converter_2">
		<c path="op_Addition.T0"/>
		<c path="op_Addition.T1"/>
	</x>
	<x path="cs.system.Converter_2">
		<c path="op_Addition.T0"/>
		<c path="op_Addition.T1"/>
	</x>
</f></op_Addition>
		<op_Subtraction public="1" params="T0:T1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.Converter_2">
		<c path="op_Subtraction.T0"/>
		<c path="op_Subtraction.T1"/>
	</x>
	<x path="cs.system.Converter_2">
		<c path="op_Subtraction.T0"/>
		<c path="op_Subtraction.T1"/>
	</x>
	<x path="cs.system.Converter_2">
		<c path="op_Subtraction.T0"/>
		<c path="op_Subtraction.T1"/>
	</x>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="input">
				<c path="cs.system.Delegate_Converter_2.T0"/>
				<c path="cs.system.Delegate_Converter_2.T1"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="input:callback:object">
				<c path="cs.system.Delegate_Converter_2.T0"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<c path="cs.system.Delegate_Converter_2.T1"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Converter`2"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.Converter_2" params="T0:T1" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Converter_2">
		<from><icast field="FromHaxeFunction"><f a="">
	<c path="FromHaxeFunction.T0"/>
	<c path="FromHaxeFunction.T1"/>
</f></icast></from>
		<this><c path="cs.system.Delegate_Converter_2">
	<c path="cs.system.Converter_2.T0"/>
	<c path="cs.system.Converter_2.T1"/>
</c></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system._Converter_2.Converter_2_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Converter_2" private="1" module="cs.system.Converter_2">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="">
				<c path="cs.system.Converter_2.T0"/>
				<c path="cs.system.Converter_2.T1"/>
			</f>
			<x path="cs.system.Converter_2">
				<c path="cs.system.Converter_2.T0"/>
				<c path="cs.system.Converter_2.T1"/>
			</x>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" params="T0:T1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="">
				<c path="FromHaxeFunction.T0"/>
				<c path="FromHaxeFunction.T1"/>
			</f>
			<x path="cs.system.Converter_2">
				<c path="FromHaxeFunction.T0"/>
				<c path="FromHaxeFunction.T1"/>
			</x>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.Delegate_Converter_2">
				<c path="cs.system.Converter_2.T0"/>
				<c path="cs.system.Converter_2.T1"/>
			</c>
			<c path="cs.system.Delegate_Converter_2">
				<c path="cs.system.Converter_2.T0"/>
				<c path="cs.system.Converter_2.T1"/>
			</c>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" params="T0:T1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.Converter_2">
				<c path="Add.T0"/>
				<c path="Add.T1"/>
			</x>
			<x path="cs.system.Converter_2">
				<c path="Add.T0"/>
				<c path="Add.T1"/>
			</x>
			<x path="cs.system.Converter_2">
				<c path="Add.T0"/>
				<c path="Add.T1"/>
			</x>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" params="T0:T1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.Converter_2">
				<c path="Remove.T0"/>
				<c path="Remove.T1"/>
			</x>
			<x path="cs.system.Converter_2">
				<c path="Remove.T0"/>
				<c path="Remove.T1"/>
			</x>
			<x path="cs.system.Converter_2">
				<c path="Remove.T0"/>
				<c path="Remove.T1"/>
			</x>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system._Converter_2.Converter_2_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Converter_2" private="1" module="cs.system.Converter_2">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="">
					<c path="cs.system.Converter_2.T0"/>
					<c path="cs.system.Converter_2.T1"/>
				</f>
				<x path="cs.system.Converter_2">
					<c path="cs.system.Converter_2.T0"/>
					<c path="cs.system.Converter_2.T1"/>
				</x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" params="T0:T1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="">
					<c path="FromHaxeFunction.T0"/>
					<c path="FromHaxeFunction.T1"/>
				</f>
				<x path="cs.system.Converter_2">
					<c path="FromHaxeFunction.T0"/>
					<c path="FromHaxeFunction.T1"/>
				</x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.Delegate_Converter_2">
					<c path="cs.system.Converter_2.T0"/>
					<c path="cs.system.Converter_2.T1"/>
				</c>
				<c path="cs.system.Delegate_Converter_2">
					<c path="cs.system.Converter_2.T0"/>
					<c path="cs.system.Converter_2.T1"/>
				</c>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" params="T0:T1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.Converter_2">
					<c path="Add.T0"/>
					<c path="Add.T1"/>
				</x>
				<x path="cs.system.Converter_2">
					<c path="Add.T0"/>
					<c path="Add.T1"/>
				</x>
				<x path="cs.system.Converter_2">
					<c path="Add.T0"/>
					<c path="Add.T1"/>
				</x>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" params="T0:T1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.Converter_2">
					<c path="Remove.T0"/>
					<c path="Remove.T1"/>
				</x>
				<x path="cs.system.Converter_2">
					<c path="Remove.T0"/>
					<c path="Remove.T1"/>
				</x>
				<x path="cs.system.Converter_2">
					<c path="Remove.T0"/>
					<c path="Remove.T1"/>
				</x>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="cs.system.Delegate_CrossAppDomainDelegate" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.CrossAppDomainDelegate" module="cs.system.CrossAppDomainDelegate" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.CrossAppDomainDelegate"/>
	<x path="cs.system.CrossAppDomainDelegate"/>
	<x path="cs.system.CrossAppDomainDelegate"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.CrossAppDomainDelegate"/>
	<x path="cs.system.CrossAppDomainDelegate"/>
	<x path="cs.system.CrossAppDomainDelegate"/>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="callback:object">
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.CrossAppDomainDelegate"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.CrossAppDomainDelegate" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.CrossAppDomainDelegate">
		<from><icast field="FromHaxeFunction"><f a=""><x path="Void"/></f></icast></from>
		<this><c path="cs.system.Delegate_CrossAppDomainDelegate"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system._CrossAppDomainDelegate.CrossAppDomainDelegate_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.CrossAppDomainDelegate" private="1" module="cs.system.CrossAppDomainDelegate">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=""><x path="Void"/></f>
			<x path="cs.system.CrossAppDomainDelegate"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=""><x path="Void"/></f>
			<x path="cs.system.CrossAppDomainDelegate"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.Delegate_CrossAppDomainDelegate"/>
			<c path="cs.system.Delegate_CrossAppDomainDelegate"/>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.CrossAppDomainDelegate"/>
			<x path="cs.system.CrossAppDomainDelegate"/>
			<x path="cs.system.CrossAppDomainDelegate"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.CrossAppDomainDelegate"/>
			<x path="cs.system.CrossAppDomainDelegate"/>
			<x path="cs.system.CrossAppDomainDelegate"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system._CrossAppDomainDelegate.CrossAppDomainDelegate_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.CrossAppDomainDelegate" private="1" module="cs.system.CrossAppDomainDelegate">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=""><x path="Void"/></f>
				<x path="cs.system.CrossAppDomainDelegate"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=""><x path="Void"/></f>
				<x path="cs.system.CrossAppDomainDelegate"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.Delegate_CrossAppDomainDelegate"/>
				<c path="cs.system.Delegate_CrossAppDomainDelegate"/>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.CrossAppDomainDelegate"/>
				<x path="cs.system.CrossAppDomainDelegate"/>
				<x path="cs.system.CrossAppDomainDelegate"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.CrossAppDomainDelegate"/>
				<x path="cs.system.CrossAppDomainDelegate"/>
				<x path="cs.system.CrossAppDomainDelegate"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<enum path="cs.system.DateTime_Which" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.DateTime" module="cs.system.DateTime">
		<Day><meta><m n=":csNative"><e>0</e></m></meta></Day>
		<DayYear><meta><m n=":csNative"><e>1</e></m></meta></DayYear>
		<Month><meta><m n=":csNative"><e>2</e></m></meta></Month>
		<Year><meta><m n=":csNative"><e>3</e></m></meta></Year>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.DateTime.Which"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.DateTimeKind" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.DateTimeKind">
		<Unspecified><meta><m n=":csNative"><e>0</e></m></meta></Unspecified>
		<Utc><meta><m n=":csNative"><e>1</e></m></meta></Utc>
		<Local><meta><m n=":csNative"><e>2</e></m></meta></Local>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.DateTimeKind"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.DayOfWeek" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.DayOfWeek">
		<Sunday><meta><m n=":csNative"><e>0</e></m></meta></Sunday>
		<Monday><meta><m n=":csNative"><e>1</e></m></meta></Monday>
		<Tuesday><meta><m n=":csNative"><e>2</e></m></meta></Tuesday>
		<Wednesday><meta><m n=":csNative"><e>3</e></m></meta></Wednesday>
		<Thursday><meta><m n=":csNative"><e>4</e></m></meta></Thursday>
		<Friday><meta><m n=":csNative"><e>5</e></m></meta></Friday>
		<Saturday><meta><m n=":csNative"><e>6</e></m></meta></Saturday>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.DayOfWeek"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.Decimal" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Decimal" extern="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.IComparable_1"><c path="cs.system.Decimal"/></implements>
		<implements path="cs.system.IEquatable_1"><c path="cs.system.Decimal"/></implements>
		<implements path="cs.system.IComparable"/>
		<implements path="cs.system.IConvertible"/>
		<implements path="cs.system.IFormattable"/>
		<Zero public="1" set="null" static="1">
			<c path="cs.system.Decimal"/>
			<meta><m n=":readOnly"/></meta>
		</Zero>
		<One public="1" set="null" static="1">
			<c path="cs.system.Decimal"/>
			<meta><m n=":readOnly"/></meta>
		</One>
		<MinusOne public="1" set="null" static="1">
			<c path="cs.system.Decimal"/>
			<meta><m n=":readOnly"/></meta>
		</MinusOne>
		<MaxValue public="1" set="null" static="1">
			<c path="cs.system.Decimal"/>
			<meta><m n=":readOnly"/></meta>
		</MaxValue>
		<MinValue public="1" set="null" static="1">
			<c path="cs.system.Decimal"/>
			<meta><m n=":readOnly"/></meta>
		</MinValue>
		<FromOACurrency final="1" public="1" set="method" static="1">
			<f a="cy">
				<x path="haxe.Int64"/>
				<c path="cs.system.Decimal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</FromOACurrency>
		<GetBits final="1" public="1" set="method" static="1">
			<f a="d">
				<c path="cs.system.Decimal"/>
				<c path="cs.NativeArray"><x path="Int"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</GetBits>
		<Negate final="1" public="1" set="method" static="1">
			<f a="d">
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Negate>
		<Add final="1" public="1" set="method" static="1">
			<f a="d1:d2">
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Add>
		<Subtract final="1" public="1" set="method" static="1">
			<f a="d1:d2">
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Subtract>
		<_Equals final="1" public="1" set="method" static="1">
			<f a="d1:d2">
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":native"><e>"Equals"</e></m>
				<m n=":overload"/>
			</meta>
		</_Equals>
		<Floor final="1" public="1" set="method" static="1">
			<f a="d">
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Floor>
		<Truncate final="1" public="1" set="method" static="1">
			<f a="d">
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Truncate>
		<Round final="1" public="1" set="method" static="1">
			<f a="d:decimals">
				<c path="cs.system.Decimal"/>
				<x path="Int"/>
				<c path="cs.system.Decimal"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Round final="1" public="1" set="method">
					<f a="d:mode">
						<c path="cs.system.Decimal"/>
						<e path="cs.system.MidpointRounding"/>
						<c path="cs.system.Decimal"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Round>
				<Round final="1" public="1" set="method">
					<f a="d">
						<c path="cs.system.Decimal"/>
						<c path="cs.system.Decimal"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Round>
				<Round final="1" public="1" set="method">
					<f a="d:decimals:mode">
						<c path="cs.system.Decimal"/>
						<x path="Int"/>
						<e path="cs.system.MidpointRounding"/>
						<c path="cs.system.Decimal"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Round>
			</overloads>
		</Round>
		<Multiply final="1" public="1" set="method" static="1">
			<f a="d1:d2">
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Multiply>
		<Divide final="1" public="1" set="method" static="1">
			<f a="d1:d2">
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Divide>
		<Remainder final="1" public="1" set="method" static="1">
			<f a="d1:d2">
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Remainder>
		<Compare final="1" public="1" set="method" static="1">
			<f a="d1:d2">
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Compare>
		<Ceiling final="1" public="1" set="method" static="1">
			<f a="d">
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Ceiling>
		<Parse final="1" public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="cs.system.Decimal"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Parse final="1" public="1" set="method">
					<f a="s:style:provider">
						<c path="String"/>
						<e path="cs.system.globalization.NumberStyles"/>
						<c path="cs.system.IFormatProvider"/>
						<c path="cs.system.Decimal"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Parse>
				<Parse final="1" public="1" set="method">
					<f a="s:provider">
						<c path="String"/>
						<c path="cs.system.IFormatProvider"/>
						<c path="cs.system.Decimal"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Parse>
				<Parse final="1" public="1" set="method">
					<f a="s:style">
						<c path="String"/>
						<e path="cs.system.globalization.NumberStyles"/>
						<c path="cs.system.Decimal"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Parse>
			</overloads>
		</Parse>
		<TryParse final="1" public="1" set="method" static="1">
			<f a="s:result">
				<c path="String"/>
				<t path="cs.Out"><c path="cs.system.Decimal"/></t>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><TryParse final="1" public="1" set="method">
	<f a="s:style:provider:result">
		<c path="String"/>
		<e path="cs.system.globalization.NumberStyles"/>
		<c path="cs.system.IFormatProvider"/>
		<t path="cs.Out"><c path="cs.system.Decimal"/></t>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</TryParse></overloads>
		</TryParse>
		<ToByte final="1" public="1" set="method" static="1">
			<f a="value">
				<c path="cs.system.Decimal"/>
				<t path="cs.types.UInt8"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":overload"/>
			</meta>
		</ToByte>
		<ToDouble final="1" public="1" set="method" static="1">
			<f a="d">
				<c path="cs.system.Decimal"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":overload"/>
			</meta>
		</ToDouble>
		<ToInt16 final="1" public="1" set="method" static="1">
			<f a="value">
				<c path="cs.system.Decimal"/>
				<t path="cs.types.Int16"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":overload"/>
			</meta>
		</ToInt16>
		<ToInt32 final="1" public="1" set="method" static="1">
			<f a="d">
				<c path="cs.system.Decimal"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":overload"/>
			</meta>
		</ToInt32>
		<ToInt64 final="1" public="1" set="method" static="1">
			<f a="d">
				<c path="cs.system.Decimal"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":overload"/>
			</meta>
		</ToInt64>
		<ToOACurrency final="1" public="1" set="method" static="1">
			<f a="value">
				<c path="cs.system.Decimal"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToOACurrency>
		<ToSByte final="1" public="1" set="method" static="1">
			<f a="value">
				<c path="cs.system.Decimal"/>
				<t path="cs.types.Int8"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":overload"/>
			</meta>
		</ToSByte>
		<ToSingle final="1" public="1" set="method" static="1">
			<f a="d">
				<c path="cs.system.Decimal"/>
				<x path="Single"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":overload"/>
			</meta>
		</ToSingle>
		<ToUInt16 final="1" public="1" set="method" static="1">
			<f a="value">
				<c path="cs.system.Decimal"/>
				<t path="cs.types.UInt16"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":overload"/>
			</meta>
		</ToUInt16>
		<ToUInt32 final="1" public="1" set="method" static="1">
			<f a="d">
				<c path="cs.system.Decimal"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":overload"/>
			</meta>
		</ToUInt32>
		<ToUInt64 final="1" public="1" set="method" static="1">
			<f a="d">
				<c path="cs.system.Decimal"/>
				<t path="cs.types.UInt64"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":overload"/>
			</meta>
		</ToUInt64>
		<op_Addition final="1" public="1" set="method" static="1">
			<f a="d1:d2">
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Addition>
		<op_Decrement final="1" public="1" set="method" static="1">
			<f a="d">
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Decrement>
		<op_Increment final="1" public="1" set="method" static="1">
			<f a="d">
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Increment>
		<op_Subtraction final="1" public="1" set="method" static="1">
			<f a="d1:d2">
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Subtraction>
		<op_UnaryNegation final="1" public="1" set="method" static="1">
			<f a="d">
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_UnaryNegation>
		<op_UnaryPlus final="1" public="1" set="method" static="1">
			<f a="d">
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_UnaryPlus>
		<op_Multiply final="1" public="1" set="method" static="1">
			<f a="d1:d2">
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Multiply>
		<op_Division final="1" public="1" set="method" static="1">
			<f a="d1:d2">
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Division>
		<op_Modulus final="1" public="1" set="method" static="1">
			<f a="d1:d2">
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Modulus>
		<op_Implicit final="1" public="1" set="method" static="1">
			<f a="value">
				<t path="cs.types.UInt8"/>
				<c path="cs.system.Decimal"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<op_Implicit final="1" public="1" set="method">
					<f a="value">
						<t path="cs.types.UInt64"/>
						<c path="cs.system.Decimal"/>
					</f>
					<meta><m n=":overload"/></meta>
				</op_Implicit>
				<op_Implicit final="1" public="1" set="method">
					<f a="value">
						<x path="haxe.Int64"/>
						<c path="cs.system.Decimal"/>
					</f>
					<meta><m n=":overload"/></meta>
				</op_Implicit>
				<op_Implicit final="1" public="1" set="method">
					<f a="value">
						<x path="UInt"/>
						<c path="cs.system.Decimal"/>
					</f>
					<meta><m n=":overload"/></meta>
				</op_Implicit>
				<op_Implicit final="1" public="1" set="method">
					<f a="value">
						<x path="Int"/>
						<c path="cs.system.Decimal"/>
					</f>
					<meta><m n=":overload"/></meta>
				</op_Implicit>
				<op_Implicit final="1" public="1" set="method">
					<f a="value">
						<t path="cs.types.Char16"/>
						<c path="cs.system.Decimal"/>
					</f>
					<meta><m n=":overload"/></meta>
				</op_Implicit>
				<op_Implicit final="1" public="1" set="method">
					<f a="value">
						<t path="cs.types.UInt16"/>
						<c path="cs.system.Decimal"/>
					</f>
					<meta><m n=":overload"/></meta>
				</op_Implicit>
				<op_Implicit final="1" public="1" set="method">
					<f a="value">
						<t path="cs.types.Int16"/>
						<c path="cs.system.Decimal"/>
					</f>
					<meta><m n=":overload"/></meta>
				</op_Implicit>
				<op_Implicit final="1" public="1" set="method">
					<f a="value">
						<t path="cs.types.Int8"/>
						<c path="cs.system.Decimal"/>
					</f>
					<meta><m n=":overload"/></meta>
				</op_Implicit>
			</overloads>
		</op_Implicit>
		<op_Explicit final="1" public="1" set="method" static="1">
			<f a="value">
				<x path="Single"/>
				<c path="cs.system.Decimal"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<op_Explicit final="1" public="1" set="method">
					<f a="value">
						<c path="cs.system.Decimal"/>
						<x path="Float"/>
					</f>
					<meta><m n=":overload"/></meta>
				</op_Explicit>
				<op_Explicit final="1" public="1" set="method">
					<f a="value">
						<x path="Float"/>
						<c path="cs.system.Decimal"/>
					</f>
					<meta><m n=":overload"/></meta>
				</op_Explicit>
			</overloads>
		</op_Explicit>
		<op_Inequality final="1" public="1" set="method" static="1">
			<f a="d1:d2">
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Inequality>
		<op_Equality final="1" public="1" set="method" static="1">
			<f a="d1:d2">
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Equality>
		<op_GreaterThan final="1" public="1" set="method" static="1">
			<f a="d1:d2">
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_GreaterThan>
		<op_GreaterThanOrEqual final="1" public="1" set="method" static="1">
			<f a="d1:d2">
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_GreaterThanOrEqual>
		<op_LessThan final="1" public="1" set="method" static="1">
			<f a="d1:d2">
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_LessThan>
		<op_LessThanOrEqual final="1" public="1" set="method" static="1">
			<f a="d1:d2">
				<c path="cs.system.Decimal"/>
				<c path="cs.system.Decimal"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_LessThanOrEqual>
		<CompareTo final="1" public="1" set="method">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><CompareTo final="1" public="1" set="method">
	<f a="value">
		<c path="cs.system.Decimal"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</CompareTo></overloads>
		</CompareTo>
		<GetTypeCode final="1" public="1" set="method">
			<f a=""><e path="cs.system.TypeCode"/></f>
			<meta><m n=":overload"/></meta>
		</GetTypeCode>
		<ToString final="1" public="1" set="method" override="1">
			<f a="format:provider">
				<c path="String"/>
				<c path="cs.system.IFormatProvider"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<ToString final="1" public="1" set="method">
					<f a="provider">
						<c path="cs.system.IFormatProvider"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ToString>
				<ToString final="1" public="1" set="method">
					<f a="format">
						<c path="String"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ToString>
				<ToString public="1" set="method">
					<f a=""><c path="String"/></f>
					<meta><m n=":overload"/></meta>
				</ToString>
			</overloads>
		</ToString>
		<new final="1" public="1" set="method">
			<f a="lo:mid:hi:isNegative:scale">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<t path="cs.types.UInt8"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="bits">
						<c path="cs.NativeArray"><x path="Int"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="value">
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="value">
						<x path="Single"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="value">
						<t path="cs.types.UInt64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="value">
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="value">
						<x path="UInt"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="value">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Decimal"</e></m>
		</meta>
	</class>
	<class path="cs.system.Enum" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Enum" extern="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.IComparable"/>
		<implements path="cs.system.IConvertible"/>
		<implements path="cs.system.IFormattable"/>
		<GetValues final="1" public="1" set="method" static="1">
			<f a="enumType">
				<c path="cs.system.Type"/>
				<c path="cs.system.Array"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetValues>
		<GetNames final="1" public="1" set="method" static="1">
			<f a="enumType">
				<c path="cs.system.Type"/>
				<c path="cs.NativeArray"><c path="String"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</GetNames>
		<GetName final="1" public="1" set="method" static="1">
			<f a="enumType:value">
				<c path="cs.system.Type"/>
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetName>
		<IsDefined final="1" public="1" set="method" static="1">
			<f a="enumType:value">
				<c path="cs.system.Type"/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsDefined>
		<GetUnderlyingType final="1" public="1" set="method" static="1">
			<f a="enumType">
				<c path="cs.system.Type"/>
				<c path="cs.system.Type"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetUnderlyingType>
		<Parse final="1" public="1" set="method" static="1">
			<f a="enumType:value">
				<c path="cs.system.Type"/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><Parse final="1" public="1" set="method">
	<f a="enumType:value:ignoreCase">
		<c path="cs.system.Type"/>
		<c path="String"/>
		<x path="Bool"/>
		<d/>
	</f>
	<meta><m n=":overload"/></meta>
</Parse></overloads>
		</Parse>
		<ToObject final="1" public="1" set="method" static="1">
			<f a="enumType:value">
				<c path="cs.system.Type"/>
				<t path="cs.types.UInt8"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<ToObject final="1" public="1" set="method">
					<f a="enumType:value">
						<c path="cs.system.Type"/>
						<t path="cs.types.UInt64"/>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</ToObject>
				<ToObject final="1" public="1" set="method">
					<f a="enumType:value">
						<c path="cs.system.Type"/>
						<x path="UInt"/>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</ToObject>
				<ToObject final="1" public="1" set="method">
					<f a="enumType:value">
						<c path="cs.system.Type"/>
						<t path="cs.types.UInt16"/>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</ToObject>
				<ToObject final="1" public="1" set="method">
					<f a="enumType:value">
						<c path="cs.system.Type"/>
						<t path="cs.types.Int8"/>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</ToObject>
				<ToObject final="1" public="1" set="method">
					<f a="enumType:value">
						<c path="cs.system.Type"/>
						<d/>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</ToObject>
				<ToObject final="1" public="1" set="method">
					<f a="enumType:value">
						<c path="cs.system.Type"/>
						<x path="haxe.Int64"/>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</ToObject>
				<ToObject final="1" public="1" set="method">
					<f a="enumType:value">
						<c path="cs.system.Type"/>
						<x path="Int"/>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</ToObject>
				<ToObject final="1" public="1" set="method">
					<f a="enumType:value">
						<c path="cs.system.Type"/>
						<t path="cs.types.Int16"/>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</ToObject>
			</overloads>
		</ToObject>
		<Format final="1" public="1" set="method" static="1">
			<f a="enumType:value:format">
				<c path="cs.system.Type"/>
				<d/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Format>
		<GetTypeCode final="1" public="1" set="method">
			<f a=""><e path="cs.system.TypeCode"/></f>
			<meta><m n=":overload"/></meta>
		</GetTypeCode>
		<CompareTo final="1" public="1" set="method">
			<f a="target">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CompareTo>
		<ToString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<ToString final="1" public="1" set="method">
					<f a="format:provider">
						<c path="String"/>
						<c path="cs.system.IFormatProvider"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ToString>
				<ToString final="1" public="1" set="method">
					<f a="format">
						<c path="String"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ToString>
				<ToString final="1" public="1" set="method">
					<f a="provider">
						<c path="cs.system.IFormatProvider"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ToString>
			</overloads>
		</ToString>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Enum"</e></m>
		</meta>
	</class>
	<enum path="cs.system.Environment_SpecialFolderOption" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Environment" module="cs.system.Environment">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<DoNotVerify><meta><m n=":csNative"><e>16384</e></m></meta></DoNotVerify>
		<Create><meta><m n=":csNative"><e>32768</e></m></meta></Create>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Environment.SpecialFolderOption"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.Environment_SpecialFolder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Environment" module="cs.system.Environment">
		<Desktop><meta><m n=":csNative"><e>0</e></m></meta></Desktop>
		<Programs><meta><m n=":csNative"><e>2</e></m></meta></Programs>
		<MyDocuments><meta><m n=":csNative"><e>5</e></m></meta></MyDocuments>
		<Personal><meta><m n=":csNative"><e>5</e></m></meta></Personal>
		<Favorites><meta><m n=":csNative"><e>6</e></m></meta></Favorites>
		<Startup><meta><m n=":csNative"><e>7</e></m></meta></Startup>
		<Recent><meta><m n=":csNative"><e>8</e></m></meta></Recent>
		<SendTo><meta><m n=":csNative"><e>9</e></m></meta></SendTo>
		<StartMenu><meta><m n=":csNative"><e>11</e></m></meta></StartMenu>
		<MyMusic><meta><m n=":csNative"><e>13</e></m></meta></MyMusic>
		<DesktopDirectory><meta><m n=":csNative"><e>16</e></m></meta></DesktopDirectory>
		<MyComputer><meta><m n=":csNative"><e>17</e></m></meta></MyComputer>
		<Templates><meta><m n=":csNative"><e>21</e></m></meta></Templates>
		<ApplicationData><meta><m n=":csNative"><e>26</e></m></meta></ApplicationData>
		<LocalApplicationData><meta><m n=":csNative"><e>28</e></m></meta></LocalApplicationData>
		<InternetCache><meta><m n=":csNative"><e>32</e></m></meta></InternetCache>
		<Cookies><meta><m n=":csNative"><e>33</e></m></meta></Cookies>
		<History><meta><m n=":csNative"><e>34</e></m></meta></History>
		<CommonApplicationData><meta><m n=":csNative"><e>35</e></m></meta></CommonApplicationData>
		<System><meta><m n=":csNative"><e>37</e></m></meta></System>
		<ProgramFiles><meta><m n=":csNative"><e>38</e></m></meta></ProgramFiles>
		<MyPictures><meta><m n=":csNative"><e>39</e></m></meta></MyPictures>
		<CommonProgramFiles><meta><m n=":csNative"><e>43</e></m></meta></CommonProgramFiles>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Environment.SpecialFolder"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.Environment" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Environment" extern="1">
		<ProcessorCount public="1" get="accessor" set="null" static="1"><x path="Int"/></ProcessorCount>
		<WorkingSet public="1" get="accessor" set="null" static="1"><x path="haxe.Int64"/></WorkingSet>
		<Version public="1" get="accessor" set="null" static="1"><c path="cs.system.Version"/></Version>
		<UserName public="1" get="accessor" set="null" static="1"><c path="String"/></UserName>
		<UserInteractive public="1" get="accessor" set="null" static="1"><x path="Bool"/></UserInteractive>
		<UserDomainName public="1" get="accessor" set="null" static="1"><c path="String"/></UserDomainName>
		<TickCount public="1" get="accessor" set="null" static="1"><x path="Int"/></TickCount>
		<SystemDirectory public="1" get="accessor" set="null" static="1"><c path="String"/></SystemDirectory>
		<StackTrace public="1" get="accessor" set="null" static="1"><c path="String"/></StackTrace>
		<OSVersion public="1" get="accessor" set="null" static="1"><c path="cs.system.OperatingSystem"/></OSVersion>
		<NewLine public="1" get="accessor" set="null" static="1"><c path="String"/></NewLine>
		<MachineName public="1" get="accessor" set="null" static="1"><c path="String"/></MachineName>
		<HasShutdownStarted public="1" get="accessor" set="null" static="1"><x path="Bool"/></HasShutdownStarted>
		<ExitCode public="1" get="accessor" set="accessor" static="1"><x path="Int"/></ExitCode>
		<CurrentDirectory public="1" get="accessor" set="accessor" static="1"><c path="String"/></CurrentDirectory>
		<CommandLine public="1" get="accessor" set="null" static="1"><c path="String"/></CommandLine>
		<get_CommandLine final="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_CommandLine>
		<get_CurrentDirectory final="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_CurrentDirectory>
		<set_CurrentDirectory final="1" set="method" static="1">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_CurrentDirectory>
		<get_ExitCode final="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_ExitCode>
		<set_ExitCode final="1" set="method" static="1">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ExitCode>
		<get_HasShutdownStarted final="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_HasShutdownStarted>
		<get_MachineName final="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_MachineName>
		<get_NewLine final="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_NewLine>
		<get_OSVersion final="1" set="method" static="1">
			<f a=""><c path="cs.system.OperatingSystem"/></f>
			<meta><m n=":overload"/></meta>
		</get_OSVersion>
		<get_StackTrace final="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_StackTrace>
		<get_SystemDirectory final="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_SystemDirectory>
		<get_TickCount final="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_TickCount>
		<get_UserDomainName final="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_UserDomainName>
		<get_UserInteractive final="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_UserInteractive>
		<get_UserName final="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_UserName>
		<get_Version final="1" set="method" static="1">
			<f a=""><c path="cs.system.Version"/></f>
			<meta><m n=":overload"/></meta>
		</get_Version>
		<get_WorkingSet final="1" set="method" static="1">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</get_WorkingSet>
		<Exit final="1" public="1" set="method" static="1">
			<f a="exitCode">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Exit>
		<ExpandEnvironmentVariables final="1" public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ExpandEnvironmentVariables>
		<GetCommandLineArgs final="1" public="1" set="method" static="1">
			<f a=""><c path="cs.NativeArray"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetCommandLineArgs>
		<GetEnvironmentVariable final="1" public="1" set="method" static="1">
			<f a="variable">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetEnvironmentVariable final="1" public="1" set="method">
	<f a="variable:target">
		<c path="String"/>
		<e path="cs.system.EnvironmentVariableTarget"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetEnvironmentVariable></overloads>
		</GetEnvironmentVariable>
		<GetEnvironmentVariables final="1" public="1" set="method" static="1">
			<f a=""><c path="cs.system.collections.IDictionary"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetEnvironmentVariables final="1" public="1" set="method">
	<f a="target">
		<e path="cs.system.EnvironmentVariableTarget"/>
		<c path="cs.system.collections.IDictionary"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetEnvironmentVariables></overloads>
		</GetEnvironmentVariables>
		<GetFolderPath final="1" public="1" set="method" static="1">
			<f a="folder">
				<e path="cs.system.Environment_SpecialFolder"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetFolderPath>
		<GetLogicalDrives final="1" public="1" set="method" static="1">
			<f a=""><c path="cs.NativeArray"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetLogicalDrives>
		<SetEnvironmentVariable final="1" public="1" set="method" static="1">
			<f a="variable:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><SetEnvironmentVariable final="1" public="1" set="method">
	<f a="variable:value:target">
		<c path="String"/>
		<c path="String"/>
		<e path="cs.system.EnvironmentVariableTarget"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</SetEnvironmentVariable></overloads>
		</SetEnvironmentVariable>
		<FailFast final="1" public="1" set="method" static="1">
			<f a="message">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</FailFast>
		<get_ProcessorCount final="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_ProcessorCount>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Environment"</e></m>
		</meta>
	</class>
	<enum path="cs.system.EnvironmentVariableTarget" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.EnvironmentVariableTarget">
		<Process><meta><m n=":csNative"><e>0</e></m></meta></Process>
		<User><meta><m n=":csNative"><e>1</e></m></meta></User>
		<Machine><meta><m n=":csNative"><e>2</e></m></meta></Machine>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.EnvironmentVariableTarget"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.Delegate_EventHandler" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.EventHandler" module="cs.system.EventHandler" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.EventHandler"/>
	<x path="cs.system.EventHandler"/>
	<x path="cs.system.EventHandler"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.EventHandler"/>
	<x path="cs.system.EventHandler"/>
	<x path="cs.system.EventHandler"/>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="sender:e">
				<d/>
				<c path="cs.system.EventArgs"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="sender:e:callback:object">
				<d/>
				<c path="cs.system.EventArgs"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.EventHandler"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.EventHandler" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.EventHandler">
		<from><icast field="FromHaxeFunction"><f a=":">
	<d/>
	<c path="cs.system.EventArgs"/>
	<x path="Void"/>
</f></icast></from>
		<this><c path="cs.system.Delegate_EventHandler"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system._EventHandler.EventHandler_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.EventHandler" private="1" module="cs.system.EventHandler">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=":">
				<d/>
				<c path="cs.system.EventArgs"/>
				<x path="Void"/>
			</f>
			<x path="cs.system.EventHandler"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=":">
				<d/>
				<c path="cs.system.EventArgs"/>
				<x path="Void"/>
			</f>
			<x path="cs.system.EventHandler"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.Delegate_EventHandler"/>
			<c path="cs.system.Delegate_EventHandler"/>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.EventHandler"/>
			<x path="cs.system.EventHandler"/>
			<x path="cs.system.EventHandler"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.EventHandler"/>
			<x path="cs.system.EventHandler"/>
			<x path="cs.system.EventHandler"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system._EventHandler.EventHandler_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.EventHandler" private="1" module="cs.system.EventHandler">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=":">
					<d/>
					<c path="cs.system.EventArgs"/>
					<x path="Void"/>
				</f>
				<x path="cs.system.EventHandler"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=":">
					<d/>
					<c path="cs.system.EventArgs"/>
					<x path="Void"/>
				</f>
				<x path="cs.system.EventHandler"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.Delegate_EventHandler"/>
				<c path="cs.system.Delegate_EventHandler"/>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.EventHandler"/>
				<x path="cs.system.EventHandler"/>
				<x path="cs.system.EventHandler"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.EventHandler"/>
				<x path="cs.system.EventHandler"/>
				<x path="cs.system.EventHandler"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="cs.system.Delegate_EventHandler_1" params="T0" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.EventHandler_1" module="cs.system.EventHandler_1" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" params="T0" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.EventHandler_1"><c path="op_Addition.T0"/></x>
	<x path="cs.system.EventHandler_1"><c path="op_Addition.T0"/></x>
	<x path="cs.system.EventHandler_1"><c path="op_Addition.T0"/></x>
</f></op_Addition>
		<op_Subtraction public="1" params="T0" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.EventHandler_1"><c path="op_Subtraction.T0"/></x>
	<x path="cs.system.EventHandler_1"><c path="op_Subtraction.T0"/></x>
	<x path="cs.system.EventHandler_1"><c path="op_Subtraction.T0"/></x>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="sender:e">
				<d/>
				<c path="cs.system.Delegate_EventHandler_1.T0"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="sender:e:callback:object">
				<d/>
				<c path="cs.system.Delegate_EventHandler_1.T0"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.EventHandler`1"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.EventHandler_1" params="T0" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.EventHandler_1">
		<from><icast field="FromHaxeFunction"><f a=":">
	<d/>
	<c path="FromHaxeFunction.T0"/>
	<x path="Void"/>
</f></icast></from>
		<this><c path="cs.system.Delegate_EventHandler_1"><c path="cs.system.EventHandler_1.T0"/></c></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system._EventHandler_1.EventHandler_1_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.EventHandler_1" private="1" module="cs.system.EventHandler_1">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=":">
				<d/>
				<c path="cs.system.EventHandler_1.T0"/>
				<x path="Void"/>
			</f>
			<x path="cs.system.EventHandler_1"><c path="cs.system.EventHandler_1.T0"/></x>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" params="T0" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=":">
				<d/>
				<c path="FromHaxeFunction.T0"/>
				<x path="Void"/>
			</f>
			<x path="cs.system.EventHandler_1"><c path="FromHaxeFunction.T0"/></x>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.Delegate_EventHandler_1"><c path="cs.system.EventHandler_1.T0"/></c>
			<c path="cs.system.Delegate_EventHandler_1"><c path="cs.system.EventHandler_1.T0"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" params="T0" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.EventHandler_1"><c path="Add.T0"/></x>
			<x path="cs.system.EventHandler_1"><c path="Add.T0"/></x>
			<x path="cs.system.EventHandler_1"><c path="Add.T0"/></x>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" params="T0" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.EventHandler_1"><c path="Remove.T0"/></x>
			<x path="cs.system.EventHandler_1"><c path="Remove.T0"/></x>
			<x path="cs.system.EventHandler_1"><c path="Remove.T0"/></x>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system._EventHandler_1.EventHandler_1_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.EventHandler_1" private="1" module="cs.system.EventHandler_1">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=":">
					<d/>
					<c path="cs.system.EventHandler_1.T0"/>
					<x path="Void"/>
				</f>
				<x path="cs.system.EventHandler_1"><c path="cs.system.EventHandler_1.T0"/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" params="T0" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=":">
					<d/>
					<c path="FromHaxeFunction.T0"/>
					<x path="Void"/>
				</f>
				<x path="cs.system.EventHandler_1"><c path="FromHaxeFunction.T0"/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.Delegate_EventHandler_1"><c path="cs.system.EventHandler_1.T0"/></c>
				<c path="cs.system.Delegate_EventHandler_1"><c path="cs.system.EventHandler_1.T0"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" params="T0" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.EventHandler_1"><c path="Add.T0"/></x>
				<x path="cs.system.EventHandler_1"><c path="Add.T0"/></x>
				<x path="cs.system.EventHandler_1"><c path="Add.T0"/></x>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" params="T0" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.EventHandler_1"><c path="Remove.T0"/></x>
				<x path="cs.system.EventHandler_1"><c path="Remove.T0"/></x>
				<x path="cs.system.EventHandler_1"><c path="Remove.T0"/></x>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="cs.system.Guid_GuidParser" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Guid" module="cs.system.Guid" extern="1">
		<Parse final="1" public="1" set="method">
			<f a="format:guid">
				<e path="cs.system.Guid_Format"/>
				<t path="cs.Out"><c path="cs.system.Guid"/></t>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><Parse final="1" public="1" set="method">
	<f a="guid">
		<t path="cs.Out"><c path="cs.system.Guid"/></t>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</Parse></overloads>
		</Parse>
		<new final="1" public="1" set="method">
			<f a="src">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Guid.GuidParser"</e></m>
		</meta>
	</class>
	<enum path="cs.system.Guid_Format" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Guid" module="cs.system.Guid">
		<N><meta><m n=":csNative"><e>0</e></m></meta></N>
		<D><meta><m n=":csNative"><e>1</e></m></meta></D>
		<B><meta><m n=":csNative"><e>2</e></m></meta></B>
		<P><meta><m n=":csNative"><e>3</e></m></meta></P>
		<X><meta><m n=":csNative"><e>4</e></m></meta></X>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Guid.Format"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.Guid" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Guid" extern="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.IComparable_1"><c path="cs.system.Guid"/></implements>
		<implements path="cs.system.IEquatable_1"><c path="cs.system.Guid"/></implements>
		<implements path="cs.system.IComparable"/>
		<implements path="cs.system.IFormattable"/>
		<Empty public="1" set="null" static="1">
			<c path="cs.system.Guid"/>
			<meta><m n=":readOnly"/></meta>
		</Empty>
		<NewGuid final="1" public="1" set="method" static="1">
			<f a=""><c path="cs.system.Guid"/></f>
			<meta><m n=":overload"/></meta>
		</NewGuid>
		<op_Equality final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="cs.system.Guid"/>
				<c path="cs.system.Guid"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Equality>
		<op_Inequality final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="cs.system.Guid"/>
				<c path="cs.system.Guid"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Inequality>
		<CompareTo final="1" public="1" set="method">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><CompareTo final="1" public="1" set="method">
	<f a="value">
		<c path="cs.system.Guid"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</CompareTo></overloads>
		</CompareTo>
		<ToByteArray final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f>
			<meta><m n=":overload"/></meta>
		</ToByteArray>
		<ToString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<ToString final="1" public="1" set="method">
					<f a="format:provider">
						<c path="String"/>
						<c path="cs.system.IFormatProvider"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ToString>
				<ToString final="1" public="1" set="method">
					<f a="format">
						<c path="String"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ToString>
			</overloads>
		</ToString>
		<new final="1" public="1" set="method">
			<f a="b">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="a:b:c:d:e:f:g:h:i:j:k">
						<x path="UInt"/>
						<t path="cs.types.UInt16"/>
						<t path="cs.types.UInt16"/>
						<t path="cs.types.UInt8"/>
						<t path="cs.types.UInt8"/>
						<t path="cs.types.UInt8"/>
						<t path="cs.types.UInt8"/>
						<t path="cs.types.UInt8"/>
						<t path="cs.types.UInt8"/>
						<t path="cs.types.UInt8"/>
						<t path="cs.types.UInt8"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="a:b:c:d:e:f:g:h:i:j:k">
						<x path="Int"/>
						<t path="cs.types.Int16"/>
						<t path="cs.types.Int16"/>
						<t path="cs.types.UInt8"/>
						<t path="cs.types.UInt8"/>
						<t path="cs.types.UInt8"/>
						<t path="cs.types.UInt8"/>
						<t path="cs.types.UInt8"/>
						<t path="cs.types.UInt8"/>
						<t path="cs.types.UInt8"/>
						<t path="cs.types.UInt8"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="a:b:c:d">
						<x path="Int"/>
						<t path="cs.types.Int16"/>
						<t path="cs.types.Int16"/>
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="g">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Guid"</e></m>
		</meta>
	</class>
	<class path="cs.system.IAsyncResult" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.IAsyncResult" extern="1" interface="1">
		<IsCompleted public="1" get="accessor" set="null"><x path="Bool"/></IsCompleted>
		<CompletedSynchronously public="1" get="accessor" set="null"><x path="Bool"/></CompletedSynchronously>
		<AsyncWaitHandle public="1" get="accessor" set="null"><c path="cs.system.threading.WaitHandle"/></AsyncWaitHandle>
		<AsyncState public="1" get="accessor" set="null"><d/></AsyncState>
		<get_AsyncState set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_AsyncState>
		<get_AsyncWaitHandle set="method">
			<f a=""><c path="cs.system.threading.WaitHandle"/></f>
			<meta><m n=":overload"/></meta>
		</get_AsyncWaitHandle>
		<get_CompletedSynchronously set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_CompletedSynchronously>
		<get_IsCompleted set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsCompleted>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IAsyncResult"</e></m>
		</meta>
	</class>
	<class path="cs.system.IFormatProvider" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.IFormatProvider" extern="1" interface="1">
		<GetFormat public="1" set="method">
			<f a="formatType">
				<c path="cs.system.Type"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetFormat>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IFormatProvider"</e></m>
		</meta>
	</class>
	<class path="cs.system.IServiceProvider" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.IServiceProvider" extern="1" interface="1">
		<GetService public="1" set="method">
			<f a="serviceType">
				<c path="cs.system.Type"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetService>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IServiceProvider"</e></m>
		</meta>
	</class>
	<class path="cs.system.Int32" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Int32" extern="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.IComparable"/>
		<implements path="cs.system.IComparable_1"><x path="Int"/></implements>
		<implements path="cs.system.IEquatable_1"><x path="Int"/></implements>
		<implements path="cs.system.IConvertible"/>
		<implements path="cs.system.IFormattable"/>
		<MinValue public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":readOnly"/></meta>
		</MinValue>
		<MaxValue public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":readOnly"/></meta>
		</MaxValue>
		<Parse final="1" public="1" set="method" static="1">
			<f a="s:provider">
				<c path="String"/>
				<c path="cs.system.IFormatProvider"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Parse final="1" public="1" set="method">
					<f a="s:style:provider">
						<c path="String"/>
						<e path="cs.system.globalization.NumberStyles"/>
						<c path="cs.system.IFormatProvider"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Parse>
				<Parse final="1" public="1" set="method">
					<f a="s">
						<c path="String"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Parse>
				<Parse final="1" public="1" set="method">
					<f a="s:style">
						<c path="String"/>
						<e path="cs.system.globalization.NumberStyles"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Parse>
			</overloads>
		</Parse>
		<TryParse final="1" public="1" set="method" static="1">
			<f a="s:result">
				<c path="String"/>
				<t path="cs.Out"><x path="Int"/></t>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><TryParse final="1" public="1" set="method">
	<f a="s:style:provider:result">
		<c path="String"/>
		<e path="cs.system.globalization.NumberStyles"/>
		<c path="cs.system.IFormatProvider"/>
		<t path="cs.Out"><x path="Int"/></t>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</TryParse></overloads>
		</TryParse>
		<CompareTo final="1" public="1" set="method">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><CompareTo final="1" public="1" set="method">
	<f a="value">
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</CompareTo></overloads>
		</CompareTo>
		<ToString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<ToString final="1" public="1" set="method">
					<f a="format:provider">
						<c path="String"/>
						<c path="cs.system.IFormatProvider"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ToString>
				<ToString final="1" public="1" set="method">
					<f a="format">
						<c path="String"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ToString>
				<ToString final="1" public="1" set="method">
					<f a="provider">
						<c path="cs.system.IFormatProvider"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ToString>
			</overloads>
		</ToString>
		<GetTypeCode final="1" public="1" set="method">
			<f a=""><e path="cs.system.TypeCode"/></f>
			<meta><m n=":overload"/></meta>
		</GetTypeCode>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Int32"</e></m>
		</meta>
	</class>
	<class path="cs.system.Int64" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Int64" extern="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.IComparable"/>
		<implements path="cs.system.IConvertible"/>
		<implements path="cs.system.IComparable_1"><x path="haxe.Int64"/></implements>
		<implements path="cs.system.IEquatable_1"><x path="haxe.Int64"/></implements>
		<implements path="cs.system.IFormattable"/>
		<MinValue public="1" set="null" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":readOnly"/></meta>
		</MinValue>
		<MaxValue public="1" set="null" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":readOnly"/></meta>
		</MaxValue>
		<Parse final="1" public="1" set="method" static="1">
			<f a="s:provider">
				<c path="String"/>
				<c path="cs.system.IFormatProvider"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Parse final="1" public="1" set="method">
					<f a="s:style:provider">
						<c path="String"/>
						<e path="cs.system.globalization.NumberStyles"/>
						<c path="cs.system.IFormatProvider"/>
						<x path="haxe.Int64"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Parse>
				<Parse final="1" public="1" set="method">
					<f a="s">
						<c path="String"/>
						<x path="haxe.Int64"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Parse>
				<Parse final="1" public="1" set="method">
					<f a="s:style">
						<c path="String"/>
						<e path="cs.system.globalization.NumberStyles"/>
						<x path="haxe.Int64"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Parse>
			</overloads>
		</Parse>
		<TryParse final="1" public="1" set="method" static="1">
			<f a="s:result">
				<c path="String"/>
				<t path="cs.Out"><x path="haxe.Int64"/></t>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><TryParse final="1" public="1" set="method">
	<f a="s:style:provider:result">
		<c path="String"/>
		<e path="cs.system.globalization.NumberStyles"/>
		<c path="cs.system.IFormatProvider"/>
		<t path="cs.Out"><x path="haxe.Int64"/></t>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</TryParse></overloads>
		</TryParse>
		<CompareTo final="1" public="1" set="method">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><CompareTo final="1" public="1" set="method">
	<f a="value">
		<x path="haxe.Int64"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</CompareTo></overloads>
		</CompareTo>
		<ToString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<ToString final="1" public="1" set="method">
					<f a="format:provider">
						<c path="String"/>
						<c path="cs.system.IFormatProvider"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ToString>
				<ToString final="1" public="1" set="method">
					<f a="format">
						<c path="String"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ToString>
				<ToString final="1" public="1" set="method">
					<f a="provider">
						<c path="cs.system.IFormatProvider"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ToString>
			</overloads>
		</ToString>
		<GetTypeCode final="1" public="1" set="method">
			<f a=""><e path="cs.system.TypeCode"/></f>
			<meta><m n=":overload"/></meta>
		</GetTypeCode>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Int64"</e></m>
		</meta>
	</class>
	<class path="cs.system.IntPtr" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.IntPtr" extern="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<Size public="1" get="accessor" set="null" static="1"><x path="Int"/></Size>
		<Zero public="1" set="null" static="1">
			<c path="cs.system.IntPtr"/>
			<meta><m n=":readOnly"/></meta>
		</Zero>
		<get_Size final="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Size>
		<op_Equality final="1" public="1" set="method" static="1">
			<f a="value1:value2">
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Equality>
		<op_Inequality final="1" public="1" set="method" static="1">
			<f a="value1:value2">
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Inequality>
		<op_Explicit final="1" public="1" set="method" static="1">
			<f a="value">
				<x path="Int"/>
				<c path="cs.system.IntPtr"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<op_Explicit final="1" public="1" set="method">
					<f a="value">
						<c path="cs.system.IntPtr"/>
						<x path="cs.Pointer"><x path="Void"/></x>
					</f>
					<meta><m n=":overload"/></meta>
				</op_Explicit>
				<op_Explicit final="1" public="1" set="method">
					<f a="value">
						<x path="cs.Pointer"><x path="Void"/></x>
						<c path="cs.system.IntPtr"/>
					</f>
					<meta><m n=":overload"/></meta>
				</op_Explicit>
				<op_Explicit final="1" public="1" set="method">
					<f a="value">
						<x path="haxe.Int64"/>
						<c path="cs.system.IntPtr"/>
					</f>
					<meta><m n=":overload"/></meta>
				</op_Explicit>
			</overloads>
		</op_Explicit>
		<ToInt32 final="1" public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</ToInt32>
		<ToInt64 final="1" public="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</ToInt64>
		<ToPointer final="1" public="1" set="method">
			<f a=""><x path="cs.Pointer"><x path="Void"/></x></f>
			<meta><m n=":overload"/></meta>
		</ToPointer>
		<ToString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><ToString final="1" public="1" set="method">
	<f a="format">
		<c path="String"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</ToString></overloads>
		</ToString>
		<new final="1" public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="value">
						<x path="cs.Pointer"><x path="Void"/></x>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="value">
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IntPtr"</e></m>
		</meta>
	</class>
	<enum path="cs.system.LoaderOptimization" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.LoaderOptimization">
		<NotSpecified><meta><m n=":csNative"><e>0</e></m></meta></NotSpecified>
		<SingleDomain><meta><m n=":csNative"><e>1</e></m></meta></SingleDomain>
		<MultiDomain><meta><m n=":csNative"><e>2</e></m></meta></MultiDomain>
		<MultiDomainHost><meta><m n=":csNative"><e>3</e></m></meta></MultiDomainHost>
		<DomainMask><meta><m n=":csNative"><e>3</e></m></meta></DomainMask>
		<DisallowBindings><meta><m n=":csNative"><e>4</e></m></meta></DisallowBindings>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.LoaderOptimization"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.LocalDataStoreSlot" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.LocalDataStoreSlot" extern="1"><meta>
	<m n=":nativeGen"/>
	<m n=":libType"/>
	<m n=":csNative"/>
	<m n=":native"><e>"System.LocalDataStoreSlot"</e></m>
</meta></class>
	<class path="cs.system.MemberAccessException" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.MemberAccessException" extern="1">
		<extends path="cs.system.SystemException"/>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="message:inner">
						<c path="String"/>
						<c path="cs.system.Exception"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" set="method">
					<f a="info:context">
						<c path="cs.system.runtime.serialization.SerializationInfo"/>
						<c path="cs.system.runtime.serialization.StreamingContext"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":protected"/>
						<m n=":overload"/>
					</meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="message">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.MemberAccessException"</e></m>
		</meta>
	</class>
	<enum path="cs.system.MidpointRounding" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.MidpointRounding">
		<ToEven><meta><m n=":csNative"><e>0</e></m></meta></ToEven>
		<AwayFromZero><meta><m n=":csNative"><e>1</e></m></meta></AwayFromZero>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.MidpointRounding"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.MissingMemberException" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.MissingMemberException" extern="1">
		<extends path="cs.system.MemberAccessException"/>
		<Message public="1" get="accessor" set="null" override="1"><c path="String"/></Message>
		<Signature><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></Signature>
		<MemberName><c path="String"/></MemberName>
		<ClassName><c path="String"/></ClassName>
		<GetObjectData public="1" set="method" override="1">
			<f a="info:context">
				<c path="cs.system.runtime.serialization.SerializationInfo"/>
				<c path="cs.system.runtime.serialization.StreamingContext"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetObjectData>
		<get_Message set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Message>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="className:memberName">
						<c path="String"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" set="method">
					<f a="info:context">
						<c path="cs.system.runtime.serialization.SerializationInfo"/>
						<c path="cs.system.runtime.serialization.StreamingContext"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":protected"/>
						<m n=":overload"/>
					</meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="message:inner">
						<c path="String"/>
						<c path="cs.system.Exception"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="message">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.MissingMemberException"</e></m>
		</meta>
	</class>
	<class path="cs.system.ModuleHandle" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.ModuleHandle" extern="1">
		<extends path="cs.system.ValueType"/>
		<EmptyHandle public="1" set="null" static="1">
			<c path="cs.system.ModuleHandle"/>
			<meta><m n=":readOnly"/></meta>
		</EmptyHandle>
		<op_Equality final="1" public="1" set="method" static="1">
			<f a="left:right">
				<c path="cs.system.ModuleHandle"/>
				<c path="cs.system.ModuleHandle"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Equality>
		<op_Inequality final="1" public="1" set="method" static="1">
			<f a="left:right">
				<c path="cs.system.ModuleHandle"/>
				<c path="cs.system.ModuleHandle"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Inequality>
		<MDStreamVersion public="1" get="accessor" set="null"><x path="Int"/></MDStreamVersion>
		<get_MDStreamVersion final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_MDStreamVersion>
		<ResolveFieldHandle final="1" public="1" set="method">
			<f a="fieldToken">
				<x path="Int"/>
				<c path="cs.system.RuntimeFieldHandle"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><ResolveFieldHandle final="1" public="1" set="method">
	<f a="fieldToken:typeInstantiationContext:methodInstantiationContext">
		<x path="Int"/>
		<c path="cs.NativeArray"><c path="cs.system.RuntimeTypeHandle"/></c>
		<c path="cs.NativeArray"><c path="cs.system.RuntimeTypeHandle"/></c>
		<c path="cs.system.RuntimeFieldHandle"/>
	</f>
	<meta><m n=":overload"/></meta>
</ResolveFieldHandle></overloads>
		</ResolveFieldHandle>
		<ResolveMethodHandle final="1" public="1" set="method">
			<f a="methodToken">
				<x path="Int"/>
				<c path="cs.system.RuntimeMethodHandle"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><ResolveMethodHandle final="1" public="1" set="method">
	<f a="methodToken:typeInstantiationContext:methodInstantiationContext">
		<x path="Int"/>
		<c path="cs.NativeArray"><c path="cs.system.RuntimeTypeHandle"/></c>
		<c path="cs.NativeArray"><c path="cs.system.RuntimeTypeHandle"/></c>
		<c path="cs.system.RuntimeMethodHandle"/>
	</f>
	<meta><m n=":overload"/></meta>
</ResolveMethodHandle></overloads>
		</ResolveMethodHandle>
		<ResolveTypeHandle final="1" public="1" set="method">
			<f a="typeToken">
				<x path="Int"/>
				<c path="cs.system.RuntimeTypeHandle"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><ResolveTypeHandle final="1" public="1" set="method">
	<f a="typeToken:typeInstantiationContext:methodInstantiationContext">
		<x path="Int"/>
		<c path="cs.NativeArray"><c path="cs.system.RuntimeTypeHandle"/></c>
		<c path="cs.NativeArray"><c path="cs.system.RuntimeTypeHandle"/></c>
		<c path="cs.system.RuntimeTypeHandle"/>
	</f>
	<meta><m n=":overload"/></meta>
</ResolveTypeHandle></overloads>
		</ResolveTypeHandle>
		<GetRuntimeFieldHandleFromMetadataToken final="1" public="1" set="method">
			<f a="fieldToken">
				<x path="Int"/>
				<c path="cs.system.RuntimeFieldHandle"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetRuntimeFieldHandleFromMetadataToken>
		<GetRuntimeMethodHandleFromMetadataToken final="1" public="1" set="method">
			<f a="methodToken">
				<x path="Int"/>
				<c path="cs.system.RuntimeMethodHandle"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetRuntimeMethodHandleFromMetadataToken>
		<GetRuntimeTypeHandleFromMetadataToken final="1" public="1" set="method">
			<f a="typeToken">
				<x path="Int"/>
				<c path="cs.system.RuntimeTypeHandle"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetRuntimeTypeHandleFromMetadataToken>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ModuleHandle"</e></m>
		</meta>
	</class>
	<class path="cs.system.NullReferenceException" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.NullReferenceException" extern="1">
		<extends path="cs.system.SystemException"/>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" set="method">
					<f a="info:context">
						<c path="cs.system.runtime.serialization.SerializationInfo"/>
						<c path="cs.system.runtime.serialization.StreamingContext"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":protected"/>
						<m n=":overload"/>
					</meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="message:innerException">
						<c path="String"/>
						<c path="cs.system.Exception"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="message">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.NullReferenceException"</e></m>
		</meta>
	</class>
	<class path="cs.system.OperatingSystem" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.OperatingSystem" extern="1">
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<VersionString public="1" get="accessor" set="null"><c path="String"/></VersionString>
		<ServicePack public="1" get="accessor" set="null"><c path="String"/></ServicePack>
		<Version public="1" get="accessor" set="null"><c path="cs.system.Version"/></Version>
		<Platform public="1" get="accessor" set="null"><e path="cs.system.PlatformID"/></Platform>
		<get_Platform final="1" set="method">
			<f a=""><e path="cs.system.PlatformID"/></f>
			<meta><m n=":overload"/></meta>
		</get_Platform>
		<get_Version final="1" set="method">
			<f a=""><c path="cs.system.Version"/></f>
			<meta><m n=":overload"/></meta>
		</get_Version>
		<get_ServicePack final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_ServicePack>
		<get_VersionString final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_VersionString>
		<Clone final="1" public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</Clone>
		<GetObjectData final="1" public="1" set="method">
			<f a="info:context">
				<c path="cs.system.runtime.serialization.SerializationInfo"/>
				<c path="cs.system.runtime.serialization.StreamingContext"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetObjectData>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<new final="1" public="1" set="method">
			<f a="platform:version">
				<e path="cs.system.PlatformID"/>
				<c path="cs.system.Version"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.OperatingSystem"</e></m>
		</meta>
	</class>
	<enum path="cs.system.PlatformID" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.PlatformID">
		<Win32S><meta><m n=":csNative"><e>0</e></m></meta></Win32S>
		<Win32Windows><meta><m n=":csNative"><e>1</e></m></meta></Win32Windows>
		<Win32NT><meta><m n=":csNative"><e>2</e></m></meta></Win32NT>
		<WinCE><meta><m n=":csNative"><e>3</e></m></meta></WinCE>
		<Unix><meta><m n=":csNative"><e>4</e></m></meta></Unix>
		<Xbox><meta><m n=":csNative"><e>5</e></m></meta></Xbox>
		<MacOSX><meta><m n=":csNative"><e>6</e></m></meta></MacOSX>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.PlatformID"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.Delegate_Predicate_1" params="T0" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Predicate_1" module="cs.system.Predicate_1" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" params="T0" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.Predicate_1"><c path="op_Addition.T0"/></x>
	<x path="cs.system.Predicate_1"><c path="op_Addition.T0"/></x>
	<x path="cs.system.Predicate_1"><c path="op_Addition.T0"/></x>
</f></op_Addition>
		<op_Subtraction public="1" params="T0" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.Predicate_1"><c path="op_Subtraction.T0"/></x>
	<x path="cs.system.Predicate_1"><c path="op_Subtraction.T0"/></x>
	<x path="cs.system.Predicate_1"><c path="op_Subtraction.T0"/></x>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="obj">
				<c path="cs.system.Delegate_Predicate_1.T0"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="obj:callback:object">
				<c path="cs.system.Delegate_Predicate_1.T0"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Predicate`1"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.Predicate_1" params="T0" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Predicate_1">
		<from><icast field="FromHaxeFunction"><f a="">
	<c path="FromHaxeFunction.T0"/>
	<x path="Bool"/>
</f></icast></from>
		<this><c path="cs.system.Delegate_Predicate_1"><c path="cs.system.Predicate_1.T0"/></c></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system._Predicate_1.Predicate_1_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Predicate_1" private="1" module="cs.system.Predicate_1">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="">
				<c path="cs.system.Predicate_1.T0"/>
				<x path="Bool"/>
			</f>
			<x path="cs.system.Predicate_1"><c path="cs.system.Predicate_1.T0"/></x>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" params="T0" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="">
				<c path="FromHaxeFunction.T0"/>
				<x path="Bool"/>
			</f>
			<x path="cs.system.Predicate_1"><c path="FromHaxeFunction.T0"/></x>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.Delegate_Predicate_1"><c path="cs.system.Predicate_1.T0"/></c>
			<c path="cs.system.Delegate_Predicate_1"><c path="cs.system.Predicate_1.T0"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" params="T0" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.Predicate_1"><c path="Add.T0"/></x>
			<x path="cs.system.Predicate_1"><c path="Add.T0"/></x>
			<x path="cs.system.Predicate_1"><c path="Add.T0"/></x>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" params="T0" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.Predicate_1"><c path="Remove.T0"/></x>
			<x path="cs.system.Predicate_1"><c path="Remove.T0"/></x>
			<x path="cs.system.Predicate_1"><c path="Remove.T0"/></x>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system._Predicate_1.Predicate_1_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Predicate_1" private="1" module="cs.system.Predicate_1">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="">
					<c path="cs.system.Predicate_1.T0"/>
					<x path="Bool"/>
				</f>
				<x path="cs.system.Predicate_1"><c path="cs.system.Predicate_1.T0"/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" params="T0" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="">
					<c path="FromHaxeFunction.T0"/>
					<x path="Bool"/>
				</f>
				<x path="cs.system.Predicate_1"><c path="FromHaxeFunction.T0"/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.Delegate_Predicate_1"><c path="cs.system.Predicate_1.T0"/></c>
				<c path="cs.system.Delegate_Predicate_1"><c path="cs.system.Predicate_1.T0"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" params="T0" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.Predicate_1"><c path="Add.T0"/></x>
				<x path="cs.system.Predicate_1"><c path="Add.T0"/></x>
				<x path="cs.system.Predicate_1"><c path="Add.T0"/></x>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" params="T0" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.Predicate_1"><c path="Remove.T0"/></x>
				<x path="cs.system.Predicate_1"><c path="Remove.T0"/></x>
				<x path="cs.system.Predicate_1"><c path="Remove.T0"/></x>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="cs.system.ResolveEventArgs" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.ResolveEventArgs" extern="1">
		<extends path="cs.system.EventArgs"/>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<get_Name final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<new final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ResolveEventArgs"</e></m>
		</meta>
	</class>
	<class path="cs.system.Delegate_ResolveEventHandler" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.ResolveEventHandler" module="cs.system.ResolveEventHandler" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.ResolveEventHandler"/>
	<x path="cs.system.ResolveEventHandler"/>
	<x path="cs.system.ResolveEventHandler"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.ResolveEventHandler"/>
	<x path="cs.system.ResolveEventHandler"/>
	<x path="cs.system.ResolveEventHandler"/>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="sender:args">
				<d/>
				<c path="cs.system.ResolveEventArgs"/>
				<c path="cs.system.reflection.Assembly"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="sender:args:callback:object">
				<d/>
				<c path="cs.system.ResolveEventArgs"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<c path="cs.system.reflection.Assembly"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ResolveEventHandler"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.ResolveEventHandler" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.ResolveEventHandler">
		<from><icast field="FromHaxeFunction"><f a=":">
	<d/>
	<c path="cs.system.ResolveEventArgs"/>
	<c path="cs.system.reflection.Assembly"/>
</f></icast></from>
		<this><c path="cs.system.Delegate_ResolveEventHandler"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system._ResolveEventHandler.ResolveEventHandler_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.ResolveEventHandler" private="1" module="cs.system.ResolveEventHandler">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=":">
				<d/>
				<c path="cs.system.ResolveEventArgs"/>
				<c path="cs.system.reflection.Assembly"/>
			</f>
			<x path="cs.system.ResolveEventHandler"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=":">
				<d/>
				<c path="cs.system.ResolveEventArgs"/>
				<c path="cs.system.reflection.Assembly"/>
			</f>
			<x path="cs.system.ResolveEventHandler"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.Delegate_ResolveEventHandler"/>
			<c path="cs.system.Delegate_ResolveEventHandler"/>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.ResolveEventHandler"/>
			<x path="cs.system.ResolveEventHandler"/>
			<x path="cs.system.ResolveEventHandler"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.ResolveEventHandler"/>
			<x path="cs.system.ResolveEventHandler"/>
			<x path="cs.system.ResolveEventHandler"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system._ResolveEventHandler.ResolveEventHandler_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.ResolveEventHandler" private="1" module="cs.system.ResolveEventHandler">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=":">
					<d/>
					<c path="cs.system.ResolveEventArgs"/>
					<c path="cs.system.reflection.Assembly"/>
				</f>
				<x path="cs.system.ResolveEventHandler"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=":">
					<d/>
					<c path="cs.system.ResolveEventArgs"/>
					<c path="cs.system.reflection.Assembly"/>
				</f>
				<x path="cs.system.ResolveEventHandler"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.Delegate_ResolveEventHandler"/>
				<c path="cs.system.Delegate_ResolveEventHandler"/>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.ResolveEventHandler"/>
				<x path="cs.system.ResolveEventHandler"/>
				<x path="cs.system.ResolveEventHandler"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.ResolveEventHandler"/>
				<x path="cs.system.ResolveEventHandler"/>
				<x path="cs.system.ResolveEventHandler"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="cs.system.RuntimeFieldHandle" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.RuntimeFieldHandle" extern="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<op_Equality final="1" public="1" set="method" static="1">
			<f a="left:right">
				<c path="cs.system.RuntimeFieldHandle"/>
				<c path="cs.system.RuntimeFieldHandle"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Equality>
		<op_Inequality final="1" public="1" set="method" static="1">
			<f a="left:right">
				<c path="cs.system.RuntimeFieldHandle"/>
				<c path="cs.system.RuntimeFieldHandle"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Inequality>
		<Value public="1" get="accessor" set="null"><c path="cs.system.IntPtr"/></Value>
		<get_Value final="1" set="method">
			<f a=""><c path="cs.system.IntPtr"/></f>
			<meta><m n=":overload"/></meta>
		</get_Value>
		<GetObjectData final="1" public="1" set="method">
			<f a="info:context">
				<c path="cs.system.runtime.serialization.SerializationInfo"/>
				<c path="cs.system.runtime.serialization.StreamingContext"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetObjectData>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.RuntimeFieldHandle"</e></m>
		</meta>
	</class>
	<class path="cs.system.RuntimeMethodHandle" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.RuntimeMethodHandle" extern="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<op_Equality final="1" public="1" set="method" static="1">
			<f a="left:right">
				<c path="cs.system.RuntimeMethodHandle"/>
				<c path="cs.system.RuntimeMethodHandle"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Equality>
		<op_Inequality final="1" public="1" set="method" static="1">
			<f a="left:right">
				<c path="cs.system.RuntimeMethodHandle"/>
				<c path="cs.system.RuntimeMethodHandle"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Inequality>
		<Value public="1" get="accessor" set="null"><c path="cs.system.IntPtr"/></Value>
		<get_Value final="1" set="method">
			<f a=""><c path="cs.system.IntPtr"/></f>
			<meta><m n=":overload"/></meta>
		</get_Value>
		<GetObjectData final="1" public="1" set="method">
			<f a="info:context">
				<c path="cs.system.runtime.serialization.SerializationInfo"/>
				<c path="cs.system.runtime.serialization.StreamingContext"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetObjectData>
		<GetFunctionPointer final="1" public="1" set="method">
			<f a=""><c path="cs.system.IntPtr"/></f>
			<meta><m n=":overload"/></meta>
		</GetFunctionPointer>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.RuntimeMethodHandle"</e></m>
		</meta>
	</class>
	<class path="cs.system.RuntimeTypeHandle" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.RuntimeTypeHandle" extern="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<op_Equality final="1" public="1" set="method" static="1">
			<f a="left:right">
				<c path="cs.system.RuntimeTypeHandle"/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><op_Equality final="1" public="1" set="method">
	<f a="left:right">
		<d/>
		<c path="cs.system.RuntimeTypeHandle"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</op_Equality></overloads>
		</op_Equality>
		<op_Inequality final="1" public="1" set="method" static="1">
			<f a="left:right">
				<c path="cs.system.RuntimeTypeHandle"/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><op_Inequality final="1" public="1" set="method">
	<f a="left:right">
		<d/>
		<c path="cs.system.RuntimeTypeHandle"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</op_Inequality></overloads>
		</op_Inequality>
		<Value public="1" get="accessor" set="null"><c path="cs.system.IntPtr"/></Value>
		<get_Value final="1" set="method">
			<f a=""><c path="cs.system.IntPtr"/></f>
			<meta><m n=":overload"/></meta>
		</get_Value>
		<GetObjectData final="1" public="1" set="method">
			<f a="info:context">
				<c path="cs.system.runtime.serialization.SerializationInfo"/>
				<c path="cs.system.runtime.serialization.StreamingContext"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetObjectData>
		<GetModuleHandle final="1" public="1" set="method">
			<f a=""><c path="cs.system.ModuleHandle"/></f>
			<meta><m n=":overload"/></meta>
		</GetModuleHandle>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.RuntimeTypeHandle"</e></m>
		</meta>
	</class>
	<enum path="cs.system.StringComparison" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.StringComparison">
		<CurrentCulture><meta><m n=":csNative"><e>0</e></m></meta></CurrentCulture>
		<CurrentCultureIgnoreCase><meta><m n=":csNative"><e>1</e></m></meta></CurrentCultureIgnoreCase>
		<InvariantCulture><meta><m n=":csNative"><e>2</e></m></meta></InvariantCulture>
		<InvariantCultureIgnoreCase><meta><m n=":csNative"><e>3</e></m></meta></InvariantCultureIgnoreCase>
		<Ordinal><meta><m n=":csNative"><e>4</e></m></meta></Ordinal>
		<OrdinalIgnoreCase><meta><m n=":csNative"><e>5</e></m></meta></OrdinalIgnoreCase>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.StringComparison"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.StringSplitOptions" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.StringSplitOptions">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<RemoveEmptyEntries><meta><m n=":csNative"><e>1</e></m></meta></RemoveEmptyEntries>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.StringSplitOptions"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.TimeSpan_Parser" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.TimeSpan" module="cs.system.TimeSpan" extern="1">
		<AtEnd public="1" get="accessor" set="null"><x path="Bool"/></AtEnd>
		<get_AtEnd final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_AtEnd>
		<Execute final="1" public="1" set="method">
			<f a="tryParse:result">
				<x path="Bool"/>
				<t path="cs.Out"><c path="cs.system.TimeSpan"/></t>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Execute>
		<new final="1" public="1" set="method">
			<f a="src">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.TimeSpan.Parser"</e></m>
		</meta>
	</class>
	<enum path="cs.system.TimeSpan_ParseError" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.TimeSpan" module="cs.system.TimeSpan">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<Format><meta><m n=":csNative"><e>1</e></m></meta></Format>
		<Overflow><meta><m n=":csNative"><e>2</e></m></meta></Overflow>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.TimeSpan.ParseError"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.TimeSpan" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.TimeSpan" extern="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.IComparable"/>
		<implements path="cs.system.IComparable_1"><c path="cs.system.TimeSpan"/></implements>
		<implements path="cs.system.IEquatable_1"><c path="cs.system.TimeSpan"/></implements>
		<Zero public="1" set="null" static="1">
			<c path="cs.system.TimeSpan"/>
			<meta><m n=":readOnly"/></meta>
		</Zero>
		<MinValue public="1" set="null" static="1">
			<c path="cs.system.TimeSpan"/>
			<meta><m n=":readOnly"/></meta>
		</MinValue>
		<MaxValue public="1" set="null" static="1">
			<c path="cs.system.TimeSpan"/>
			<meta><m n=":readOnly"/></meta>
		</MaxValue>
		<TicksPerSecond public="1" set="null" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":readOnly"/></meta>
		</TicksPerSecond>
		<TicksPerMinute public="1" set="null" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":readOnly"/></meta>
		</TicksPerMinute>
		<TicksPerMillisecond public="1" set="null" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":readOnly"/></meta>
		</TicksPerMillisecond>
		<TicksPerHour public="1" set="null" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":readOnly"/></meta>
		</TicksPerHour>
		<TicksPerDay public="1" set="null" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":readOnly"/></meta>
		</TicksPerDay>
		<Compare final="1" public="1" set="method" static="1">
			<f a="t1:t2">
				<c path="cs.system.TimeSpan"/>
				<c path="cs.system.TimeSpan"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Compare>
		<_Equals final="1" public="1" set="method" static="1">
			<f a="t1:t2">
				<c path="cs.system.TimeSpan"/>
				<c path="cs.system.TimeSpan"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":native"><e>"Equals"</e></m>
				<m n=":overload"/>
			</meta>
		</_Equals>
		<FromDays final="1" public="1" set="method" static="1">
			<f a="value">
				<x path="Float"/>
				<c path="cs.system.TimeSpan"/>
			</f>
			<meta><m n=":overload"/></meta>
		</FromDays>
		<FromHours final="1" public="1" set="method" static="1">
			<f a="value">
				<x path="Float"/>
				<c path="cs.system.TimeSpan"/>
			</f>
			<meta><m n=":overload"/></meta>
		</FromHours>
		<FromMinutes final="1" public="1" set="method" static="1">
			<f a="value">
				<x path="Float"/>
				<c path="cs.system.TimeSpan"/>
			</f>
			<meta><m n=":overload"/></meta>
		</FromMinutes>
		<FromSeconds final="1" public="1" set="method" static="1">
			<f a="value">
				<x path="Float"/>
				<c path="cs.system.TimeSpan"/>
			</f>
			<meta><m n=":overload"/></meta>
		</FromSeconds>
		<FromMilliseconds final="1" public="1" set="method" static="1">
			<f a="value">
				<x path="Float"/>
				<c path="cs.system.TimeSpan"/>
			</f>
			<meta><m n=":overload"/></meta>
		</FromMilliseconds>
		<FromTicks final="1" public="1" set="method" static="1">
			<f a="value">
				<x path="haxe.Int64"/>
				<c path="cs.system.TimeSpan"/>
			</f>
			<meta><m n=":overload"/></meta>
		</FromTicks>
		<Parse final="1" public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="cs.system.TimeSpan"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Parse>
		<TryParse final="1" public="1" set="method" static="1">
			<f a="s:result">
				<c path="String"/>
				<t path="cs.Out"><c path="cs.system.TimeSpan"/></t>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</TryParse>
		<op_Addition final="1" public="1" set="method" static="1">
			<f a="t1:t2">
				<c path="cs.system.TimeSpan"/>
				<c path="cs.system.TimeSpan"/>
				<c path="cs.system.TimeSpan"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Addition>
		<op_Equality final="1" public="1" set="method" static="1">
			<f a="t1:t2">
				<c path="cs.system.TimeSpan"/>
				<c path="cs.system.TimeSpan"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Equality>
		<op_GreaterThan final="1" public="1" set="method" static="1">
			<f a="t1:t2">
				<c path="cs.system.TimeSpan"/>
				<c path="cs.system.TimeSpan"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_GreaterThan>
		<op_GreaterThanOrEqual final="1" public="1" set="method" static="1">
			<f a="t1:t2">
				<c path="cs.system.TimeSpan"/>
				<c path="cs.system.TimeSpan"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_GreaterThanOrEqual>
		<op_Inequality final="1" public="1" set="method" static="1">
			<f a="t1:t2">
				<c path="cs.system.TimeSpan"/>
				<c path="cs.system.TimeSpan"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Inequality>
		<op_LessThan final="1" public="1" set="method" static="1">
			<f a="t1:t2">
				<c path="cs.system.TimeSpan"/>
				<c path="cs.system.TimeSpan"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_LessThan>
		<op_LessThanOrEqual final="1" public="1" set="method" static="1">
			<f a="t1:t2">
				<c path="cs.system.TimeSpan"/>
				<c path="cs.system.TimeSpan"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_LessThanOrEqual>
		<op_Subtraction final="1" public="1" set="method" static="1">
			<f a="t1:t2">
				<c path="cs.system.TimeSpan"/>
				<c path="cs.system.TimeSpan"/>
				<c path="cs.system.TimeSpan"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Subtraction>
		<op_UnaryNegation final="1" public="1" set="method" static="1">
			<f a="t">
				<c path="cs.system.TimeSpan"/>
				<c path="cs.system.TimeSpan"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_UnaryNegation>
		<op_UnaryPlus final="1" public="1" set="method" static="1">
			<f a="t">
				<c path="cs.system.TimeSpan"/>
				<c path="cs.system.TimeSpan"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_UnaryPlus>
		<TotalSeconds public="1" get="accessor" set="null"><x path="Float"/></TotalSeconds>
		<TotalMinutes public="1" get="accessor" set="null"><x path="Float"/></TotalMinutes>
		<TotalMilliseconds public="1" get="accessor" set="null"><x path="Float"/></TotalMilliseconds>
		<TotalHours public="1" get="accessor" set="null"><x path="Float"/></TotalHours>
		<TotalDays public="1" get="accessor" set="null"><x path="Float"/></TotalDays>
		<Ticks public="1" get="accessor" set="null"><x path="haxe.Int64"/></Ticks>
		<Seconds public="1" get="accessor" set="null"><x path="Int"/></Seconds>
		<Minutes public="1" get="accessor" set="null"><x path="Int"/></Minutes>
		<Milliseconds public="1" get="accessor" set="null"><x path="Int"/></Milliseconds>
		<Hours public="1" get="accessor" set="null"><x path="Int"/></Hours>
		<Days public="1" get="accessor" set="null"><x path="Int"/></Days>
		<get_Days final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Days>
		<get_Hours final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Hours>
		<get_Milliseconds final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Milliseconds>
		<get_Minutes final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Minutes>
		<get_Seconds final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Seconds>
		<get_Ticks final="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</get_Ticks>
		<get_TotalDays final="1" set="method">
			<f a=""><x path="Float"/></f>
			<meta><m n=":overload"/></meta>
		</get_TotalDays>
		<get_TotalHours final="1" set="method">
			<f a=""><x path="Float"/></f>
			<meta><m n=":overload"/></meta>
		</get_TotalHours>
		<get_TotalMilliseconds final="1" set="method">
			<f a=""><x path="Float"/></f>
			<meta><m n=":overload"/></meta>
		</get_TotalMilliseconds>
		<get_TotalMinutes final="1" set="method">
			<f a=""><x path="Float"/></f>
			<meta><m n=":overload"/></meta>
		</get_TotalMinutes>
		<get_TotalSeconds final="1" set="method">
			<f a=""><x path="Float"/></f>
			<meta><m n=":overload"/></meta>
		</get_TotalSeconds>
		<Add final="1" public="1" set="method">
			<f a="ts">
				<c path="cs.system.TimeSpan"/>
				<c path="cs.system.TimeSpan"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Add>
		<CompareTo final="1" public="1" set="method">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><CompareTo final="1" public="1" set="method">
	<f a="value">
		<c path="cs.system.TimeSpan"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</CompareTo></overloads>
		</CompareTo>
		<Duration final="1" public="1" set="method">
			<f a=""><c path="cs.system.TimeSpan"/></f>
			<meta><m n=":overload"/></meta>
		</Duration>
		<Negate final="1" public="1" set="method">
			<f a=""><c path="cs.system.TimeSpan"/></f>
			<meta><m n=":overload"/></meta>
		</Negate>
		<Subtract final="1" public="1" set="method">
			<f a="ts">
				<c path="cs.system.TimeSpan"/>
				<c path="cs.system.TimeSpan"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Subtract>
		<ToString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<new final="1" public="1" set="method">
			<f a="ticks">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="days:hours:minutes:seconds:milliseconds">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="days:hours:minutes:seconds">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="hours:minutes:seconds">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.TimeSpan"</e></m>
		</meta>
	</class>
	<class path="cs.system.TimeZone" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.TimeZone" extern="1">
		<CurrentTimeZone public="1" get="accessor" set="null" static="1"><c path="cs.system.TimeZone"/></CurrentTimeZone>
		<get_CurrentTimeZone final="1" set="method" static="1">
			<f a=""><c path="cs.system.TimeZone"/></f>
			<meta><m n=":overload"/></meta>
		</get_CurrentTimeZone>
		<IsDaylightSavingTime final="1" public="1" set="method" static="1">
			<f a="time:daylightTimes">
				<c path="cs.system.DateTime"/>
				<c path="cs.system.globalization.DaylightTime"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsDaylightSavingTime>
		<_IsDaylightSavingTime final="1" public="1" set="method" static="1">
			<f a="time:daylightTimes">
				<c path="cs.system.DateTime"/>
				<c path="cs.system.globalization.DaylightTime"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":native"><e>"IsDaylightSavingTime"</e></m>
				<m n=":overload"/>
			</meta>
		</_IsDaylightSavingTime>
		<StandardName public="1" get="accessor" set="null"><c path="String"/></StandardName>
		<DaylightName public="1" get="accessor" set="null"><c path="String"/></DaylightName>
		<get_DaylightName set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_DaylightName>
		<get_StandardName set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_StandardName>
		<GetDaylightChanges public="1" set="method">
			<f a="year">
				<x path="Int"/>
				<c path="cs.system.globalization.DaylightTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetDaylightChanges>
		<GetUtcOffset public="1" set="method">
			<f a="time">
				<c path="cs.system.DateTime"/>
				<c path="cs.system.TimeSpan"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetUtcOffset>
		<IsDaylightSavingTime public="1" set="method">
			<f a="time">
				<c path="cs.system.DateTime"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsDaylightSavingTime>
		<ToLocalTime public="1" set="method">
			<f a="time">
				<c path="cs.system.DateTime"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToLocalTime>
		<ToUniversalTime public="1" set="method">
			<f a="time">
				<c path="cs.system.DateTime"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToUniversalTime>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.TimeZone"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.ICustomAttributeProvider" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.ICustomAttributeProvider" extern="1" interface="1">
		<GetCustomAttributes public="1" set="method">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetCustomAttributes public="1" set="method">
	<f a="attributeType:inherit">
		<c path="cs.system.Type"/>
		<x path="Bool"/>
		<c path="cs.NativeArray"><d/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<IsDefined public="1" set="method">
			<f a="attributeType:inherit">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsDefined>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.ICustomAttributeProvider"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._MemberInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._MemberInfo" extern="1" interface="1">
		<ReflectedType public="1" get="accessor" set="null"><c path="cs.system.Type"/></ReflectedType>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<MemberType public="1" get="accessor" set="null"><e path="cs.system.reflection.MemberTypes"/></MemberType>
		<DeclaringType public="1" get="accessor" set="null"><c path="cs.system.Type"/></DeclaringType>
		<GetCustomAttributes public="1" set="method">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetCustomAttributes public="1" set="method">
	<f a="attributeType:inherit">
		<c path="cs.system.Type"/>
		<x path="Bool"/>
		<c path="cs.NativeArray"><d/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<GetType public="1" set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</GetType>
		<IsDefined public="1" set="method">
			<f a="attributeType:inherit">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsDefined>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<get_DeclaringType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_DeclaringType>
		<get_MemberType set="method">
			<f a=""><e path="cs.system.reflection.MemberTypes"/></f>
			<meta><m n=":overload"/></meta>
		</get_MemberType>
		<get_Name set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<get_ReflectedType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReflectedType>
		<GetIDsOfNames public="1" set="method">
			<f a="riid:rgszNames:cNames:lcid:rgDispId">
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<c path="cs.system.IntPtr"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetIDsOfNames>
		<GetTypeInfo public="1" set="method">
			<f a="iTInfo:lcid:ppTInfo">
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfo>
		<GetTypeInfoCount public="1" set="method">
			<f a="pcTInfo">
				<t path="cs.Out"><x path="UInt"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfoCount>
		<Invoke public="1" set="method">
			<f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
				<x path="UInt"/>
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<x path="UInt"/>
				<t path="cs.types.Int16"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._MemberInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.MemberInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.MemberInfo" extern="1">
		<implements path="cs.system.reflection.ICustomAttributeProvider"/>
		<implements path="cs.system.runtime.interopservices._MemberInfo"/>
		<MetadataToken public="1" get="accessor" set="null"><x path="Int"/></MetadataToken>
		<Module public="1" get="accessor" set="null"><c path="cs.system.reflection.Module"/></Module>
		<ReflectedType public="1" get="accessor" set="null"><c path="cs.system.Type"/></ReflectedType>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<MemberType public="1" get="accessor" set="null"><e path="cs.system.reflection.MemberTypes"/></MemberType>
		<DeclaringType public="1" get="accessor" set="null"><c path="cs.system.Type"/></DeclaringType>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<get_DeclaringType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_DeclaringType>
		<get_MemberType set="method">
			<f a=""><e path="cs.system.reflection.MemberTypes"/></f>
			<meta><m n=":overload"/></meta>
		</get_MemberType>
		<get_Name set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<get_ReflectedType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReflectedType>
		<get_Module set="method">
			<f a=""><c path="cs.system.reflection.Module"/></f>
			<meta><m n=":overload"/></meta>
		</get_Module>
		<IsDefined public="1" set="method">
			<f a="attributeType:inherit">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsDefined>
		<GetCustomAttributes public="1" set="method">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetCustomAttributes public="1" set="method">
	<f a="attributeType:inherit">
		<c path="cs.system.Type"/>
		<x path="Bool"/>
		<c path="cs.NativeArray"><d/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<get_MetadataToken set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_MetadataToken>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.MemberInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.IReflect" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.IReflect" extern="1" interface="1">
		<UnderlyingSystemType public="1" get="accessor" set="null"><c path="cs.system.Type"/></UnderlyingSystemType>
		<get_UnderlyingSystemType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_UnderlyingSystemType>
		<GetField public="1" set="method">
			<f a="name:bindingAttr">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.FieldInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetField>
		<GetFields public="1" set="method">
			<f a="bindingAttr">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.FieldInfo"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</GetFields>
		<GetMember public="1" set="method">
			<f a="name:bindingAttr">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</GetMember>
		<GetMembers public="1" set="method">
			<f a="bindingAttr">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</GetMembers>
		<GetMethod public="1" set="method">
			<f a="name:bindingAttr">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.MethodInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetMethod public="1" set="method">
	<f a="name:bindingAttr:binder:types:modifiers">
		<c path="String"/>
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.system.reflection.Binder"/>
		<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
		<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
		<c path="cs.system.reflection.MethodInfo"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetMethod></overloads>
		</GetMethod>
		<GetMethods public="1" set="method">
			<f a="bindingAttr">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</GetMethods>
		<GetProperties public="1" set="method">
			<f a="bindingAttr">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.PropertyInfo"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</GetProperties>
		<GetProperty public="1" set="method">
			<f a="name:bindingAttr">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.PropertyInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetProperty public="1" set="method">
	<f a="name:bindingAttr:binder:returnType:types:modifiers">
		<c path="String"/>
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.system.reflection.Binder"/>
		<c path="cs.system.Type"/>
		<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
		<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
		<c path="cs.system.reflection.PropertyInfo"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetProperty></overloads>
		</GetProperty>
		<InvokeMember public="1" set="method">
			<f a="name:invokeAttr:binder:target:args:modifiers:culture:namedParameters">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<d/>
				<c path="cs.NativeArray"><d/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.globalization.CultureInfo"/>
				<c path="cs.NativeArray"><c path="String"/></c>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</InvokeMember>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.IReflect"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._Type" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._Type" extern="1" interface="1">
		<UnderlyingSystemType public="1" get="accessor" set="null"><c path="cs.system.Type"/></UnderlyingSystemType>
		<TypeInitializer public="1" get="accessor" set="null"><c path="cs.system.reflection.ConstructorInfo"/></TypeInitializer>
		<TypeHandle public="1" get="accessor" set="null"><c path="cs.system.RuntimeTypeHandle"/></TypeHandle>
		<ReflectedType public="1" get="accessor" set="null"><c path="cs.system.Type"/></ReflectedType>
		<Namespace public="1" get="accessor" set="null"><c path="String"/></Namespace>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<Module public="1" get="accessor" set="null"><c path="cs.system.reflection.Module"/></Module>
		<MemberType public="1" get="accessor" set="null"><e path="cs.system.reflection.MemberTypes"/></MemberType>
		<IsValueType public="1" get="accessor" set="null"><x path="Bool"/></IsValueType>
		<IsUnicodeClass public="1" get="accessor" set="null"><x path="Bool"/></IsUnicodeClass>
		<IsSpecialName public="1" get="accessor" set="null"><x path="Bool"/></IsSpecialName>
		<IsSerializable public="1" get="accessor" set="null"><x path="Bool"/></IsSerializable>
		<IsSealed public="1" get="accessor" set="null"><x path="Bool"/></IsSealed>
		<IsPublic public="1" get="accessor" set="null"><x path="Bool"/></IsPublic>
		<IsPrimitive public="1" get="accessor" set="null"><x path="Bool"/></IsPrimitive>
		<IsPointer public="1" get="accessor" set="null"><x path="Bool"/></IsPointer>
		<IsNotPublic public="1" get="accessor" set="null"><x path="Bool"/></IsNotPublic>
		<IsNestedPublic public="1" get="accessor" set="null"><x path="Bool"/></IsNestedPublic>
		<IsNestedPrivate public="1" get="accessor" set="null"><x path="Bool"/></IsNestedPrivate>
		<IsNestedFamORAssem public="1" get="accessor" set="null"><x path="Bool"/></IsNestedFamORAssem>
		<IsNestedFamily public="1" get="accessor" set="null"><x path="Bool"/></IsNestedFamily>
		<IsNestedFamANDAssem public="1" get="accessor" set="null"><x path="Bool"/></IsNestedFamANDAssem>
		<IsNestedAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsNestedAssembly>
		<IsMarshalByRef public="1" get="accessor" set="null"><x path="Bool"/></IsMarshalByRef>
		<IsLayoutSequential public="1" get="accessor" set="null"><x path="Bool"/></IsLayoutSequential>
		<IsInterface public="1" get="accessor" set="null"><x path="Bool"/></IsInterface>
		<IsImport public="1" get="accessor" set="null"><x path="Bool"/></IsImport>
		<IsExplicitLayout public="1" get="accessor" set="null"><x path="Bool"/></IsExplicitLayout>
		<IsEnum public="1" get="accessor" set="null"><x path="Bool"/></IsEnum>
		<IsContextful public="1" get="accessor" set="null"><x path="Bool"/></IsContextful>
		<IsCOMObject public="1" get="accessor" set="null"><x path="Bool"/></IsCOMObject>
		<IsClass public="1" get="accessor" set="null"><x path="Bool"/></IsClass>
		<IsByRef public="1" get="accessor" set="null"><x path="Bool"/></IsByRef>
		<IsAutoLayout public="1" get="accessor" set="null"><x path="Bool"/></IsAutoLayout>
		<IsAutoClass public="1" get="accessor" set="null"><x path="Bool"/></IsAutoClass>
		<IsArray public="1" get="accessor" set="null"><x path="Bool"/></IsArray>
		<IsAnsiClass public="1" get="accessor" set="null"><x path="Bool"/></IsAnsiClass>
		<IsAbstract public="1" get="accessor" set="null"><x path="Bool"/></IsAbstract>
		<HasElementType public="1" get="accessor" set="null"><x path="Bool"/></HasElementType>
		<GUID public="1" get="accessor" set="null"><c path="cs.system.Guid"/></GUID>
		<FullName public="1" get="accessor" set="null"><c path="String"/></FullName>
		<DeclaringType public="1" get="accessor" set="null"><c path="cs.system.Type"/></DeclaringType>
		<BaseType public="1" get="accessor" set="null"><c path="cs.system.Type"/></BaseType>
		<Attributes public="1" get="accessor" set="null"><e path="cs.system.reflection.TypeAttributes"/></Attributes>
		<AssemblyQualifiedName public="1" get="accessor" set="null"><c path="String"/></AssemblyQualifiedName>
		<Assembly public="1" get="accessor" set="null"><c path="cs.system.reflection.Assembly"/></Assembly>
		<FindInterfaces public="1" set="method">
			<f a="filter:filterCriteria">
				<x path="cs.system.reflection.TypeFilter"/>
				<d/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</FindInterfaces>
		<FindMembers public="1" set="method">
			<f a="memberType:bindingAttr:filter:filterCriteria">
				<e path="cs.system.reflection.MemberTypes"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<x path="cs.system.reflection.MemberFilter"/>
				<d/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</FindMembers>
		<GetArrayRank public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</GetArrayRank>
		<GetConstructor public="1" set="method">
			<f a="types">
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.system.reflection.ConstructorInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetConstructor public="1" set="method">
					<f a="bindingAttr:binder:callConvention:types:modifiers">
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.Binder"/>
						<e path="cs.system.reflection.CallingConventions"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
						<c path="cs.system.reflection.ConstructorInfo"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetConstructor>
				<GetConstructor public="1" set="method">
					<f a="bindingAttr:binder:types:modifiers">
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.Binder"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
						<c path="cs.system.reflection.ConstructorInfo"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetConstructor>
			</overloads>
		</GetConstructor>
		<GetConstructors public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.ConstructorInfo"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetConstructors public="1" set="method">
	<f a="bindingAttr">
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.NativeArray"><c path="cs.system.reflection.ConstructorInfo"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetConstructors></overloads>
		</GetConstructors>
		<GetCustomAttributes public="1" set="method">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetCustomAttributes public="1" set="method">
	<f a="attributeType:inherit">
		<c path="cs.system.Type"/>
		<x path="Bool"/>
		<c path="cs.NativeArray"><d/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<GetDefaultMembers public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetDefaultMembers>
		<GetElementType public="1" set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</GetElementType>
		<GetEvent public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.reflection.EventInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetEvent public="1" set="method">
	<f a="name:bindingAttr">
		<c path="String"/>
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.system.reflection.EventInfo"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetEvent></overloads>
		</GetEvent>
		<GetEvents public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.EventInfo"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetEvents public="1" set="method">
	<f a="bindingAttr">
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.NativeArray"><c path="cs.system.reflection.EventInfo"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetEvents></overloads>
		</GetEvents>
		<GetField public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.reflection.FieldInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetField public="1" set="method">
	<f a="name:bindingAttr">
		<c path="String"/>
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.system.reflection.FieldInfo"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetField></overloads>
		</GetField>
		<GetFields public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.FieldInfo"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetFields public="1" set="method">
	<f a="bindingAttr">
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.NativeArray"><c path="cs.system.reflection.FieldInfo"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetFields></overloads>
		</GetFields>
		<GetIDsOfNames public="1" set="method">
			<f a="riid:rgszNames:cNames:lcid:rgDispId">
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<c path="cs.system.IntPtr"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetIDsOfNames>
		<GetTypeInfo public="1" set="method">
			<f a="iTInfo:lcid:ppTInfo">
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfo>
		<GetTypeInfoCount public="1" set="method">
			<f a="pcTInfo">
				<t path="cs.Out"><x path="UInt"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfoCount>
		<Invoke public="1" set="method">
			<f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
				<x path="UInt"/>
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<x path="UInt"/>
				<t path="cs.types.Int16"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<GetInterface public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.Type"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetInterface public="1" set="method">
	<f a="name:ignoreCase">
		<c path="String"/>
		<x path="Bool"/>
		<c path="cs.system.Type"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetInterface></overloads>
		</GetInterface>
		<GetInterfaceMap public="1" set="method">
			<f a="interfaceType">
				<c path="cs.system.Type"/>
				<c path="cs.system.reflection.InterfaceMapping"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetInterfaceMap>
		<GetInterfaces public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetInterfaces>
		<GetMember public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetMember public="1" set="method">
					<f a="name:bindingAttr">
						<c path="String"/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetMember>
				<GetMember public="1" set="method">
					<f a="name:type:bindingAttr">
						<c path="String"/>
						<e path="cs.system.reflection.MemberTypes"/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetMember>
			</overloads>
		</GetMember>
		<GetMembers public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetMembers public="1" set="method">
	<f a="bindingAttr">
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetMembers></overloads>
		</GetMembers>
		<GetMethod public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.reflection.MethodInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetMethod public="1" set="method">
					<f a="name:bindingAttr:binder:callConvention:types:modifiers">
						<c path="String"/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.Binder"/>
						<e path="cs.system.reflection.CallingConventions"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
						<c path="cs.system.reflection.MethodInfo"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetMethod>
				<GetMethod public="1" set="method">
					<f a="name:bindingAttr:binder:types:modifiers">
						<c path="String"/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.Binder"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
						<c path="cs.system.reflection.MethodInfo"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetMethod>
				<GetMethod public="1" set="method">
					<f a="name:types:modifiers">
						<c path="String"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
						<c path="cs.system.reflection.MethodInfo"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetMethod>
				<GetMethod public="1" set="method">
					<f a="name:types">
						<c path="String"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.system.reflection.MethodInfo"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetMethod>
				<GetMethod public="1" set="method">
					<f a="name:bindingAttr">
						<c path="String"/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.MethodInfo"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetMethod>
			</overloads>
		</GetMethod>
		<GetMethods public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetMethods public="1" set="method">
	<f a="bindingAttr">
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetMethods></overloads>
		</GetMethods>
		<GetNestedType public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.Type"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetNestedType public="1" set="method">
	<f a="name:bindingAttr">
		<c path="String"/>
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.system.Type"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetNestedType></overloads>
		</GetNestedType>
		<GetNestedTypes public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetNestedTypes public="1" set="method">
	<f a="bindingAttr">
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetNestedTypes></overloads>
		</GetNestedTypes>
		<GetProperties public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.PropertyInfo"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetProperties public="1" set="method">
	<f a="bindingAttr">
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.NativeArray"><c path="cs.system.reflection.PropertyInfo"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetProperties></overloads>
		</GetProperties>
		<GetProperty public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.reflection.PropertyInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetProperty public="1" set="method">
					<f a="name:bindingAttr:binder:returnType:types:modifiers">
						<c path="String"/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.Binder"/>
						<c path="cs.system.Type"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
						<c path="cs.system.reflection.PropertyInfo"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetProperty>
				<GetProperty public="1" set="method">
					<f a="name:returnType:types:modifiers">
						<c path="String"/>
						<c path="cs.system.Type"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
						<c path="cs.system.reflection.PropertyInfo"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetProperty>
				<GetProperty public="1" set="method">
					<f a="name:returnType:types">
						<c path="String"/>
						<c path="cs.system.Type"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.system.reflection.PropertyInfo"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetProperty>
				<GetProperty public="1" set="method">
					<f a="name:types">
						<c path="String"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.system.reflection.PropertyInfo"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetProperty>
				<GetProperty public="1" set="method">
					<f a="name:returnType">
						<c path="String"/>
						<c path="cs.system.Type"/>
						<c path="cs.system.reflection.PropertyInfo"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetProperty>
				<GetProperty public="1" set="method">
					<f a="name:bindingAttr">
						<c path="String"/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.PropertyInfo"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetProperty>
			</overloads>
		</GetProperty>
		<GetType public="1" set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</GetType>
		<InvokeMember public="1" set="method">
			<f a="name:invokeAttr:binder:target:args">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<d/>
				<c path="cs.NativeArray"><d/></c>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<InvokeMember public="1" set="method">
					<f a="name:invokeAttr:binder:target:args:modifiers:culture:namedParameters">
						<c path="String"/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.Binder"/>
						<d/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
						<c path="cs.system.globalization.CultureInfo"/>
						<c path="cs.NativeArray"><c path="String"/></c>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</InvokeMember>
				<InvokeMember public="1" set="method">
					<f a="name:invokeAttr:binder:target:args:culture">
						<c path="String"/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.Binder"/>
						<d/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.globalization.CultureInfo"/>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</InvokeMember>
			</overloads>
		</InvokeMember>
		<IsAssignableFrom public="1" set="method">
			<f a="c">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsAssignableFrom>
		<IsDefined public="1" set="method">
			<f a="attributeType:inherit">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsDefined>
		<IsInstanceOfType public="1" set="method">
			<f a="o">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsInstanceOfType>
		<IsSubclassOf public="1" set="method">
			<f a="c">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsSubclassOf>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<get_Assembly set="method">
			<f a=""><c path="cs.system.reflection.Assembly"/></f>
			<meta><m n=":overload"/></meta>
		</get_Assembly>
		<get_AssemblyQualifiedName set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_AssemblyQualifiedName>
		<get_Attributes set="method">
			<f a=""><e path="cs.system.reflection.TypeAttributes"/></f>
			<meta><m n=":overload"/></meta>
		</get_Attributes>
		<get_BaseType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_BaseType>
		<get_DeclaringType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_DeclaringType>
		<get_FullName set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_FullName>
		<get_GUID set="method">
			<f a=""><c path="cs.system.Guid"/></f>
			<meta><m n=":overload"/></meta>
		</get_GUID>
		<get_HasElementType set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_HasElementType>
		<get_IsAbstract set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsAbstract>
		<get_IsAnsiClass set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsAnsiClass>
		<get_IsArray set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsArray>
		<get_IsAutoClass set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsAutoClass>
		<get_IsAutoLayout set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsAutoLayout>
		<get_IsByRef set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsByRef>
		<get_IsClass set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsClass>
		<get_IsCOMObject set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsCOMObject>
		<get_IsContextful set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsContextful>
		<get_IsEnum set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsEnum>
		<get_IsExplicitLayout set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsExplicitLayout>
		<get_IsImport set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsImport>
		<get_IsInterface set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsInterface>
		<get_IsLayoutSequential set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsLayoutSequential>
		<get_IsMarshalByRef set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsMarshalByRef>
		<get_IsNestedAssembly set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsNestedAssembly>
		<get_IsNestedFamANDAssem set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsNestedFamANDAssem>
		<get_IsNestedFamily set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsNestedFamily>
		<get_IsNestedFamORAssem set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsNestedFamORAssem>
		<get_IsNestedPrivate set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsNestedPrivate>
		<get_IsNestedPublic set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsNestedPublic>
		<get_IsNotPublic set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsNotPublic>
		<get_IsPointer set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsPointer>
		<get_IsPrimitive set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsPrimitive>
		<get_IsPublic set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsPublic>
		<get_IsSealed set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSealed>
		<get_IsSerializable set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSerializable>
		<get_IsSpecialName set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSpecialName>
		<get_IsUnicodeClass set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsUnicodeClass>
		<get_IsValueType set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsValueType>
		<get_MemberType set="method">
			<f a=""><e path="cs.system.reflection.MemberTypes"/></f>
			<meta><m n=":overload"/></meta>
		</get_MemberType>
		<get_Module set="method">
			<f a=""><c path="cs.system.reflection.Module"/></f>
			<meta><m n=":overload"/></meta>
		</get_Module>
		<get_Name set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<get_Namespace set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Namespace>
		<get_ReflectedType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReflectedType>
		<get_TypeHandle set="method">
			<f a=""><c path="cs.system.RuntimeTypeHandle"/></f>
			<meta><m n=":overload"/></meta>
		</get_TypeHandle>
		<get_TypeInitializer set="method">
			<f a=""><c path="cs.system.reflection.ConstructorInfo"/></f>
			<meta><m n=":overload"/></meta>
		</get_TypeInitializer>
		<get_UnderlyingSystemType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_UnderlyingSystemType>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._Type"</e></m>
		</meta>
	</class>
	<class path="cs.system.Type" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Type" extern="1">
		<extends path="cs.system.reflection.MemberInfo"/>
		<implements path="cs.system.reflection.IReflect"/>
		<implements path="cs.system.runtime.interopservices._Type"/>
		<DefaultBinder public="1" get="accessor" set="null" static="1"><c path="cs.system.reflection.Binder"/></DefaultBinder>
		<Missing public="1" set="null" static="1">
			<d/>
			<meta><m n=":readOnly"/></meta>
		</Missing>
		<FilterNameIgnoreCase public="1" set="null" static="1">
			<x path="cs.system.reflection.MemberFilter"/>
			<meta><m n=":readOnly"/></meta>
		</FilterNameIgnoreCase>
		<FilterName public="1" set="null" static="1">
			<x path="cs.system.reflection.MemberFilter"/>
			<meta><m n=":readOnly"/></meta>
		</FilterName>
		<FilterAttribute public="1" set="null" static="1">
			<x path="cs.system.reflection.MemberFilter"/>
			<meta><m n=":readOnly"/></meta>
		</FilterAttribute>
		<EmptyTypes public="1" set="null" static="1">
			<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
			<meta><m n=":readOnly"/></meta>
		</EmptyTypes>
		<Delimiter public="1" set="null" static="1">
			<t path="cs.types.Char16"/>
			<meta><m n=":readOnly"/></meta>
		</Delimiter>
		<get_DefaultBinder final="1" set="method" static="1">
			<f a=""><c path="cs.system.reflection.Binder"/></f>
			<meta><m n=":overload"/></meta>
		</get_DefaultBinder>
		<GetType final="1" public="1" set="method" static="1">
			<f a="typeName">
				<c path="String"/>
				<c path="cs.system.Type"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetType final="1" public="1" set="method">
					<f a="typeName:throwOnError:ignoreCase">
						<c path="String"/>
						<x path="Bool"/>
						<x path="Bool"/>
						<c path="cs.system.Type"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetType>
				<GetType final="1" public="1" set="method">
					<f a="typeName:throwOnError">
						<c path="String"/>
						<x path="Bool"/>
						<c path="cs.system.Type"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetType>
			</overloads>
		</GetType>
		<_GetType final="1" public="1" set="method" static="1">
			<f a="typeName">
				<c path="String"/>
				<c path="cs.system.Type"/>
			</f>
			<meta>
				<m n=":native"><e>"GetType"</e></m>
				<m n=":overload"/>
			</meta>
			<overloads>
				<GetType final="1" public="1" set="method">
					<f a="typeName:throwOnError:ignoreCase">
						<c path="String"/>
						<x path="Bool"/>
						<x path="Bool"/>
						<c path="cs.system.Type"/>
					</f>
					<meta>
						<m n=":native"><e>"GetType"</e></m>
						<m n=":overload"/>
					</meta>
				</GetType>
				<GetType final="1" public="1" set="method">
					<f a="typeName:throwOnError">
						<c path="String"/>
						<x path="Bool"/>
						<c path="cs.system.Type"/>
					</f>
					<meta>
						<m n=":native"><e>"GetType"</e></m>
						<m n=":overload"/>
					</meta>
				</GetType>
			</overloads>
		</_GetType>
		<GetTypeArray final="1" public="1" set="method" static="1">
			<f a="args">
				<c path="cs.NativeArray"><d/></c>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeArray>
		<GetTypeCode final="1" public="1" set="method" static="1">
			<f a="type">
				<c path="cs.system.Type"/>
				<e path="cs.system.TypeCode"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeCode>
		<GetTypeFromCLSID final="1" public="1" set="method" static="1">
			<f a="clsid">
				<c path="cs.system.Guid"/>
				<c path="cs.system.Type"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetTypeFromCLSID final="1" public="1" set="method">
					<f a="clsid:server:throwOnError">
						<c path="cs.system.Guid"/>
						<c path="String"/>
						<x path="Bool"/>
						<c path="cs.system.Type"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetTypeFromCLSID>
				<GetTypeFromCLSID final="1" public="1" set="method">
					<f a="clsid:server">
						<c path="cs.system.Guid"/>
						<c path="String"/>
						<c path="cs.system.Type"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetTypeFromCLSID>
				<GetTypeFromCLSID final="1" public="1" set="method">
					<f a="clsid:throwOnError">
						<c path="cs.system.Guid"/>
						<x path="Bool"/>
						<c path="cs.system.Type"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetTypeFromCLSID>
			</overloads>
		</GetTypeFromCLSID>
		<GetTypeFromHandle final="1" public="1" set="method" static="1">
			<f a="handle">
				<c path="cs.system.RuntimeTypeHandle"/>
				<c path="cs.system.Type"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeFromHandle>
		<GetTypeFromProgID final="1" public="1" set="method" static="1">
			<f a="progID">
				<c path="String"/>
				<c path="cs.system.Type"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetTypeFromProgID final="1" public="1" set="method">
					<f a="progID:server:throwOnError">
						<c path="String"/>
						<c path="String"/>
						<x path="Bool"/>
						<c path="cs.system.Type"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetTypeFromProgID>
				<GetTypeFromProgID final="1" public="1" set="method">
					<f a="progID:server">
						<c path="String"/>
						<c path="String"/>
						<c path="cs.system.Type"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetTypeFromProgID>
				<GetTypeFromProgID final="1" public="1" set="method">
					<f a="progID:throwOnError">
						<c path="String"/>
						<x path="Bool"/>
						<c path="cs.system.Type"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetTypeFromProgID>
			</overloads>
		</GetTypeFromProgID>
		<GetTypeHandle final="1" public="1" set="method" static="1">
			<f a="o">
				<d/>
				<c path="cs.system.RuntimeTypeHandle"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeHandle>
		<ReflectionOnlyGetType final="1" public="1" set="method" static="1">
			<f a="typeName:throwIfNotFound:ignoreCase">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="cs.system.Type"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ReflectionOnlyGetType>
		<StructLayoutAttribute public="1" get="accessor" set="null"><c path="cs.system.runtime.interopservices.StructLayoutAttribute"/></StructLayoutAttribute>
		<DeclaringMethod public="1" get="accessor" set="null"><c path="cs.system.reflection.MethodBase"/></DeclaringMethod>
		<GenericParameterAttributes public="1" get="accessor" set="null"><e path="cs.system.reflection.GenericParameterAttributes"/></GenericParameterAttributes>
		<GenericParameterPosition public="1" get="accessor" set="null"><x path="Int"/></GenericParameterPosition>
		<IsVisible public="1" get="accessor" set="null"><x path="Bool"/></IsVisible>
		<IsNested public="1" get="accessor" set="null"><x path="Bool"/></IsNested>
		<IsGenericParameter public="1" get="accessor" set="null"><x path="Bool"/></IsGenericParameter>
		<IsGenericType public="1" get="accessor" set="null"><x path="Bool"/></IsGenericType>
		<IsGenericTypeDefinition public="1" get="accessor" set="null"><x path="Bool"/></IsGenericTypeDefinition>
		<ContainsGenericParameters public="1" get="accessor" set="null"><x path="Bool"/></ContainsGenericParameters>
		<UnderlyingSystemType public="1" get="accessor" set="null"><c path="cs.system.Type"/></UnderlyingSystemType>
		<TypeInitializer public="1" get="accessor" set="null"><c path="cs.system.reflection.ConstructorInfo"/></TypeInitializer>
		<TypeHandle public="1" get="accessor" set="null"><c path="cs.system.RuntimeTypeHandle"/></TypeHandle>
		<ReflectedType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></ReflectedType>
		<Namespace public="1" get="accessor" set="null"><c path="String"/></Namespace>
		<Module public="1" get="accessor" set="null" override="1"><c path="cs.system.reflection.Module"/></Module>
		<MemberType public="1" get="accessor" set="null" override="1"><e path="cs.system.reflection.MemberTypes"/></MemberType>
		<IsValueType public="1" get="accessor" set="null"><x path="Bool"/></IsValueType>
		<IsUnicodeClass public="1" get="accessor" set="null"><x path="Bool"/></IsUnicodeClass>
		<IsSpecialName public="1" get="accessor" set="null"><x path="Bool"/></IsSpecialName>
		<IsSerializable public="1" get="accessor" set="null"><x path="Bool"/></IsSerializable>
		<IsSealed public="1" get="accessor" set="null"><x path="Bool"/></IsSealed>
		<IsPublic public="1" get="accessor" set="null"><x path="Bool"/></IsPublic>
		<IsPrimitive public="1" get="accessor" set="null"><x path="Bool"/></IsPrimitive>
		<IsPointer public="1" get="accessor" set="null"><x path="Bool"/></IsPointer>
		<IsNotPublic public="1" get="accessor" set="null"><x path="Bool"/></IsNotPublic>
		<IsNestedPublic public="1" get="accessor" set="null"><x path="Bool"/></IsNestedPublic>
		<IsNestedPrivate public="1" get="accessor" set="null"><x path="Bool"/></IsNestedPrivate>
		<IsNestedFamORAssem public="1" get="accessor" set="null"><x path="Bool"/></IsNestedFamORAssem>
		<IsNestedFamily public="1" get="accessor" set="null"><x path="Bool"/></IsNestedFamily>
		<IsNestedFamANDAssem public="1" get="accessor" set="null"><x path="Bool"/></IsNestedFamANDAssem>
		<IsNestedAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsNestedAssembly>
		<IsMarshalByRef public="1" get="accessor" set="null"><x path="Bool"/></IsMarshalByRef>
		<IsLayoutSequential public="1" get="accessor" set="null"><x path="Bool"/></IsLayoutSequential>
		<IsInterface public="1" get="accessor" set="null"><x path="Bool"/></IsInterface>
		<IsImport public="1" get="accessor" set="null"><x path="Bool"/></IsImport>
		<IsExplicitLayout public="1" get="accessor" set="null"><x path="Bool"/></IsExplicitLayout>
		<IsEnum public="1" get="accessor" set="null"><x path="Bool"/></IsEnum>
		<IsContextful public="1" get="accessor" set="null"><x path="Bool"/></IsContextful>
		<IsCOMObject public="1" get="accessor" set="null"><x path="Bool"/></IsCOMObject>
		<IsClass public="1" get="accessor" set="null"><x path="Bool"/></IsClass>
		<IsByRef public="1" get="accessor" set="null"><x path="Bool"/></IsByRef>
		<IsAutoLayout public="1" get="accessor" set="null"><x path="Bool"/></IsAutoLayout>
		<IsAutoClass public="1" get="accessor" set="null"><x path="Bool"/></IsAutoClass>
		<IsArray public="1" get="accessor" set="null"><x path="Bool"/></IsArray>
		<IsAnsiClass public="1" get="accessor" set="null"><x path="Bool"/></IsAnsiClass>
		<IsAbstract public="1" get="accessor" set="null"><x path="Bool"/></IsAbstract>
		<HasElementType public="1" get="accessor" set="null"><x path="Bool"/></HasElementType>
		<GUID public="1" get="accessor" set="null"><c path="cs.system.Guid"/></GUID>
		<FullName public="1" get="accessor" set="null"><c path="String"/></FullName>
		<DeclaringType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></DeclaringType>
		<BaseType public="1" get="accessor" set="null"><c path="cs.system.Type"/></BaseType>
		<Attributes public="1" get="accessor" set="null"><e path="cs.system.reflection.TypeAttributes"/></Attributes>
		<AssemblyQualifiedName public="1" get="accessor" set="null"><c path="String"/></AssemblyQualifiedName>
		<Assembly public="1" get="accessor" set="null"><c path="cs.system.reflection.Assembly"/></Assembly>
		<get_Assembly set="method">
			<f a=""><c path="cs.system.reflection.Assembly"/></f>
			<meta><m n=":overload"/></meta>
		</get_Assembly>
		<get_AssemblyQualifiedName set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_AssemblyQualifiedName>
		<get_Attributes final="1" set="method">
			<f a=""><e path="cs.system.reflection.TypeAttributes"/></f>
			<meta><m n=":overload"/></meta>
		</get_Attributes>
		<get_BaseType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_BaseType>
		<get_DeclaringType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_DeclaringType>
		<get_FullName set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_FullName>
		<get_GUID set="method">
			<f a=""><c path="cs.system.Guid"/></f>
			<meta><m n=":overload"/></meta>
		</get_GUID>
		<get_HasElementType final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_HasElementType>
		<get_IsAbstract final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsAbstract>
		<get_IsAnsiClass final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsAnsiClass>
		<get_IsArray final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsArray>
		<get_IsAutoClass final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsAutoClass>
		<get_IsAutoLayout final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsAutoLayout>
		<get_IsByRef final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsByRef>
		<get_IsClass final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsClass>
		<get_IsCOMObject final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsCOMObject>
		<get_IsContextful final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsContextful>
		<get_IsEnum final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsEnum>
		<get_IsExplicitLayout final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsExplicitLayout>
		<get_IsImport final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsImport>
		<get_IsInterface final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsInterface>
		<get_IsLayoutSequential final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsLayoutSequential>
		<get_IsMarshalByRef final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsMarshalByRef>
		<get_IsNestedAssembly final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsNestedAssembly>
		<get_IsNestedFamANDAssem final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsNestedFamANDAssem>
		<get_IsNestedFamily final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsNestedFamily>
		<get_IsNestedFamORAssem final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsNestedFamORAssem>
		<get_IsNestedPrivate final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsNestedPrivate>
		<get_IsNestedPublic final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsNestedPublic>
		<get_IsNotPublic final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsNotPublic>
		<get_IsPointer final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsPointer>
		<get_IsPrimitive final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsPrimitive>
		<get_IsPublic final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsPublic>
		<get_IsSealed final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSealed>
		<get_IsSerializable final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSerializable>
		<get_IsSpecialName final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSpecialName>
		<get_IsUnicodeClass final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsUnicodeClass>
		<get_IsValueType final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsValueType>
		<get_MemberType set="method" override="1">
			<f a=""><e path="cs.system.reflection.MemberTypes"/></f>
			<meta><m n=":overload"/></meta>
		</get_MemberType>
		<get_Module set="method" override="1">
			<f a=""><c path="cs.system.reflection.Module"/></f>
			<meta><m n=":overload"/></meta>
		</get_Module>
		<get_Namespace set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Namespace>
		<get_ReflectedType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReflectedType>
		<get_TypeHandle set="method">
			<f a=""><c path="cs.system.RuntimeTypeHandle"/></f>
			<meta><m n=":overload"/></meta>
		</get_TypeHandle>
		<get_TypeInitializer final="1" set="method">
			<f a=""><c path="cs.system.reflection.ConstructorInfo"/></f>
			<meta><m n=":overload"/></meta>
		</get_TypeInitializer>
		<get_UnderlyingSystemType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_UnderlyingSystemType>
		<GetType final="1" public="1" set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</GetType>
		<IsSubclassOf public="1" set="method">
			<f a="c">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsSubclassOf>
		<FindInterfaces public="1" set="method">
			<f a="filter:filterCriteria">
				<x path="cs.system.reflection.TypeFilter"/>
				<d/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</FindInterfaces>
		<GetInterface final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.Type"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetInterface public="1" set="method">
	<f a="name:ignoreCase">
		<c path="String"/>
		<x path="Bool"/>
		<c path="cs.system.Type"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetInterface></overloads>
		</GetInterface>
		<GetInterfaceMap public="1" set="method">
			<f a="interfaceType">
				<c path="cs.system.Type"/>
				<c path="cs.system.reflection.InterfaceMapping"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetInterfaceMap>
		<GetInterfaces public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetInterfaces>
		<IsAssignableFrom public="1" set="method">
			<f a="c">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsAssignableFrom>
		<IsInstanceOfType public="1" set="method">
			<f a="o">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsInstanceOfType>
		<GetArrayRank public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</GetArrayRank>
		<GetElementType public="1" set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</GetElementType>
		<GetEvent final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.reflection.EventInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetEvent public="1" set="method">
	<f a="name:bindingAttr">
		<c path="String"/>
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.system.reflection.EventInfo"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetEvent></overloads>
		</GetEvent>
		<GetEvents public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.EventInfo"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetEvents public="1" set="method">
	<f a="bindingAttr">
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.NativeArray"><c path="cs.system.reflection.EventInfo"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetEvents></overloads>
		</GetEvents>
		<GetField final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.reflection.FieldInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetField public="1" set="method">
	<f a="name:bindingAttr">
		<c path="String"/>
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.system.reflection.FieldInfo"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetField></overloads>
		</GetField>
		<GetFields final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.FieldInfo"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetFields public="1" set="method">
	<f a="bindingAttr">
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.NativeArray"><c path="cs.system.reflection.FieldInfo"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetFields></overloads>
		</GetFields>
		<GetMember final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetMember public="1" set="method">
					<f a="name:type:bindingAttr">
						<c path="String"/>
						<e path="cs.system.reflection.MemberTypes"/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetMember>
				<GetMember public="1" set="method">
					<f a="name:bindingAttr">
						<c path="String"/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetMember>
			</overloads>
		</GetMember>
		<GetMembers final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetMembers public="1" set="method">
	<f a="bindingAttr">
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetMembers></overloads>
		</GetMembers>
		<GetMethod final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.reflection.MethodInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetMethod final="1" public="1" set="method">
					<f a="name:bindingAttr:binder:callConvention:types:modifiers">
						<c path="String"/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.Binder"/>
						<e path="cs.system.reflection.CallingConventions"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
						<c path="cs.system.reflection.MethodInfo"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetMethod>
				<GetMethod final="1" public="1" set="method">
					<f a="name:bindingAttr:binder:types:modifiers">
						<c path="String"/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.Binder"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
						<c path="cs.system.reflection.MethodInfo"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetMethod>
				<GetMethod final="1" public="1" set="method">
					<f a="name:types:modifiers">
						<c path="String"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
						<c path="cs.system.reflection.MethodInfo"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetMethod>
				<GetMethod final="1" public="1" set="method">
					<f a="name:types">
						<c path="String"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.system.reflection.MethodInfo"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetMethod>
				<GetMethod final="1" public="1" set="method">
					<f a="name:bindingAttr">
						<c path="String"/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.MethodInfo"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetMethod>
			</overloads>
		</GetMethod>
		<GetMethodImpl set="method">
			<f a="name:bindingAttr:binder:callConvention:types:modifiers">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<e path="cs.system.reflection.CallingConventions"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.reflection.MethodInfo"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</GetMethodImpl>
		<GetMethods final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetMethods public="1" set="method">
	<f a="bindingAttr">
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetMethods></overloads>
		</GetMethods>
		<GetNestedType final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.Type"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetNestedType public="1" set="method">
	<f a="name:bindingAttr">
		<c path="String"/>
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.system.Type"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetNestedType></overloads>
		</GetNestedType>
		<GetNestedTypes final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetNestedTypes public="1" set="method">
	<f a="bindingAttr">
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetNestedTypes></overloads>
		</GetNestedTypes>
		<GetProperties final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.PropertyInfo"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetProperties public="1" set="method">
	<f a="bindingAttr">
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.NativeArray"><c path="cs.system.reflection.PropertyInfo"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetProperties></overloads>
		</GetProperties>
		<GetProperty final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.reflection.PropertyInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetProperty final="1" public="1" set="method">
					<f a="name:bindingAttr:binder:returnType:types:modifiers">
						<c path="String"/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.Binder"/>
						<c path="cs.system.Type"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
						<c path="cs.system.reflection.PropertyInfo"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetProperty>
				<GetProperty final="1" public="1" set="method">
					<f a="name:returnType:types:modifiers">
						<c path="String"/>
						<c path="cs.system.Type"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
						<c path="cs.system.reflection.PropertyInfo"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetProperty>
				<GetProperty final="1" public="1" set="method">
					<f a="name:returnType:types">
						<c path="String"/>
						<c path="cs.system.Type"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.system.reflection.PropertyInfo"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetProperty>
				<GetProperty final="1" public="1" set="method">
					<f a="name:types">
						<c path="String"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.system.reflection.PropertyInfo"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetProperty>
				<GetProperty final="1" public="1" set="method">
					<f a="name:returnType">
						<c path="String"/>
						<c path="cs.system.Type"/>
						<c path="cs.system.reflection.PropertyInfo"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetProperty>
				<GetProperty final="1" public="1" set="method">
					<f a="name:bindingAttr">
						<c path="String"/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.PropertyInfo"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetProperty>
			</overloads>
		</GetProperty>
		<GetPropertyImpl set="method">
			<f a="name:bindingAttr:binder:returnType:types:modifiers">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<c path="cs.system.Type"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.reflection.PropertyInfo"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</GetPropertyImpl>
		<GetConstructorImpl set="method">
			<f a="bindingAttr:binder:callConvention:types:modifiers">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<e path="cs.system.reflection.CallingConventions"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.reflection.ConstructorInfo"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</GetConstructorImpl>
		<GetAttributeFlagsImpl set="method">
			<f a=""><e path="cs.system.reflection.TypeAttributes"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</GetAttributeFlagsImpl>
		<HasElementTypeImpl set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</HasElementTypeImpl>
		<IsArrayImpl set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</IsArrayImpl>
		<IsByRefImpl set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</IsByRefImpl>
		<IsCOMObjectImpl set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</IsCOMObjectImpl>
		<IsPointerImpl set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</IsPointerImpl>
		<IsPrimitiveImpl set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</IsPrimitiveImpl>
		<IsValueTypeImpl set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</IsValueTypeImpl>
		<IsContextfulImpl set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</IsContextfulImpl>
		<IsMarshalByRefImpl set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</IsMarshalByRefImpl>
		<GetConstructor final="1" public="1" set="method">
			<f a="types">
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.system.reflection.ConstructorInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetConstructor final="1" public="1" set="method">
					<f a="bindingAttr:binder:callConvention:types:modifiers">
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.Binder"/>
						<e path="cs.system.reflection.CallingConventions"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
						<c path="cs.system.reflection.ConstructorInfo"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetConstructor>
				<GetConstructor final="1" public="1" set="method">
					<f a="bindingAttr:binder:types:modifiers">
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.Binder"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
						<c path="cs.system.reflection.ConstructorInfo"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetConstructor>
			</overloads>
		</GetConstructor>
		<GetConstructors final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.ConstructorInfo"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetConstructors public="1" set="method">
	<f a="bindingAttr">
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.NativeArray"><c path="cs.system.reflection.ConstructorInfo"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetConstructors></overloads>
		</GetConstructors>
		<GetDefaultMembers public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetDefaultMembers>
		<FindMembers public="1" set="method">
			<f a="memberType:bindingAttr:filter:filterCriteria">
				<e path="cs.system.reflection.MemberTypes"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<x path="cs.system.reflection.MemberFilter"/>
				<d/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</FindMembers>
		<InvokeMember final="1" public="1" set="method">
			<f a="name:invokeAttr:binder:target:args">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<d/>
				<c path="cs.NativeArray"><d/></c>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<InvokeMember public="1" set="method">
					<f a="name:invokeAttr:binder:target:args:modifiers:culture:namedParameters">
						<c path="String"/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.Binder"/>
						<d/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
						<c path="cs.system.globalization.CultureInfo"/>
						<c path="cs.NativeArray"><c path="String"/></c>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</InvokeMember>
				<InvokeMember final="1" public="1" set="method">
					<f a="name:invokeAttr:binder:target:args:culture">
						<c path="String"/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.Binder"/>
						<d/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.globalization.CultureInfo"/>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</InvokeMember>
			</overloads>
		</InvokeMember>
		<ToString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<GetGenericArguments public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetGenericArguments>
		<get_ContainsGenericParameters set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_ContainsGenericParameters>
		<get_IsGenericTypeDefinition set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsGenericTypeDefinition>
		<GetGenericTypeDefinition public="1" set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</GetGenericTypeDefinition>
		<get_IsGenericType set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsGenericType>
		<MakeGenericType public="1" set="method">
			<f a="typeArguments">
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.system.Type"/>
			</f>
			<meta><m n=":overload"/></meta>
		</MakeGenericType>
		<get_IsGenericParameter set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsGenericParameter>
		<get_IsNested final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsNested>
		<get_IsVisible final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsVisible>
		<get_GenericParameterPosition set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_GenericParameterPosition>
		<get_GenericParameterAttributes set="method">
			<f a=""><e path="cs.system.reflection.GenericParameterAttributes"/></f>
			<meta><m n=":overload"/></meta>
		</get_GenericParameterAttributes>
		<GetGenericParameterConstraints public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetGenericParameterConstraints>
		<get_DeclaringMethod set="method">
			<f a=""><c path="cs.system.reflection.MethodBase"/></f>
			<meta><m n=":overload"/></meta>
		</get_DeclaringMethod>
		<MakeArrayType public="1" set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><MakeArrayType public="1" set="method">
	<f a="rank">
		<x path="Int"/>
		<c path="cs.system.Type"/>
	</f>
	<meta><m n=":overload"/></meta>
</MakeArrayType></overloads>
		</MakeArrayType>
		<MakeByRefType public="1" set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</MakeByRefType>
		<MakePointerType public="1" set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</MakePointerType>
		<get_StructLayoutAttribute set="method">
			<f a=""><c path="cs.system.runtime.interopservices.StructLayoutAttribute"/></f>
			<meta><m n=":overload"/></meta>
		</get_StructLayoutAttribute>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Type"</e></m>
		</meta>
	</class>
	<enum path="cs.system.TypeCode" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.TypeCode">
		<Empty><meta><m n=":csNative"><e>0</e></m></meta></Empty>
		<Object><meta><m n=":csNative"><e>1</e></m></meta></Object>
		<DBNull><meta><m n=":csNative"><e>2</e></m></meta></DBNull>
		<Boolean><meta><m n=":csNative"><e>3</e></m></meta></Boolean>
		<Char><meta><m n=":csNative"><e>4</e></m></meta></Char>
		<SByte><meta><m n=":csNative"><e>5</e></m></meta></SByte>
		<Byte><meta><m n=":csNative"><e>6</e></m></meta></Byte>
		<Int16><meta><m n=":csNative"><e>7</e></m></meta></Int16>
		<UInt16><meta><m n=":csNative"><e>8</e></m></meta></UInt16>
		<Int32><meta><m n=":csNative"><e>9</e></m></meta></Int32>
		<UInt32><meta><m n=":csNative"><e>10</e></m></meta></UInt32>
		<Int64><meta><m n=":csNative"><e>11</e></m></meta></Int64>
		<UInt64><meta><m n=":csNative"><e>12</e></m></meta></UInt64>
		<Single><meta><m n=":csNative"><e>13</e></m></meta></Single>
		<Double><meta><m n=":csNative"><e>14</e></m></meta></Double>
		<Decimal><meta><m n=":csNative"><e>15</e></m></meta></Decimal>
		<DateTime><meta><m n=":csNative"><e>16</e></m></meta></DateTime>
		<String><meta><m n=":csNative"><e>18</e></m></meta></String>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.TypeCode"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.TypedReference" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.TypedReference" extern="1">
		<extends path="cs.system.ValueType"/>
		<GetTargetType final="1" public="1" set="method" static="1">
			<f a="value">
				<c path="cs.system.TypedReference"/>
				<c path="cs.system.Type"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTargetType>
		<MakeTypedReference final="1" public="1" set="method" static="1">
			<f a="target:flds">
				<d/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.FieldInfo"/></c>
				<c path="cs.system.TypedReference"/>
			</f>
			<meta><m n=":overload"/></meta>
		</MakeTypedReference>
		<SetTypedReference final="1" public="1" set="method" static="1">
			<f a="target:value">
				<c path="cs.system.TypedReference"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetTypedReference>
		<TargetTypeToken final="1" public="1" set="method" static="1">
			<f a="value">
				<c path="cs.system.TypedReference"/>
				<c path="cs.system.RuntimeTypeHandle"/>
			</f>
			<meta><m n=":overload"/></meta>
		</TargetTypeToken>
		<ToObject final="1" public="1" set="method" static="1">
			<f a="value">
				<c path="cs.system.TypedReference"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToObject>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.TypedReference"</e></m>
		</meta>
	</class>
	<class path="cs.system.UInt32" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.UInt32" extern="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.IComparable"/>
		<implements path="cs.system.IConvertible"/>
		<implements path="cs.system.IFormattable"/>
		<implements path="cs.system.IComparable_1"><x path="UInt"/></implements>
		<implements path="cs.system.IEquatable_1"><x path="UInt"/></implements>
		<MinValue public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":readOnly"/></meta>
		</MinValue>
		<MaxValue public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":readOnly"/></meta>
		</MaxValue>
		<Parse final="1" public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Parse final="1" public="1" set="method">
					<f a="s:style">
						<c path="String"/>
						<e path="cs.system.globalization.NumberStyles"/>
						<x path="UInt"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Parse>
				<Parse final="1" public="1" set="method">
					<f a="s:provider">
						<c path="String"/>
						<c path="cs.system.IFormatProvider"/>
						<x path="UInt"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Parse>
				<Parse final="1" public="1" set="method">
					<f a="s:style:provider">
						<c path="String"/>
						<e path="cs.system.globalization.NumberStyles"/>
						<c path="cs.system.IFormatProvider"/>
						<x path="UInt"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Parse>
			</overloads>
		</Parse>
		<TryParse final="1" public="1" set="method" static="1">
			<f a="s:result">
				<c path="String"/>
				<t path="cs.Out"><x path="UInt"/></t>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><TryParse final="1" public="1" set="method">
	<f a="s:style:provider:result">
		<c path="String"/>
		<e path="cs.system.globalization.NumberStyles"/>
		<c path="cs.system.IFormatProvider"/>
		<t path="cs.Out"><x path="UInt"/></t>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</TryParse></overloads>
		</TryParse>
		<CompareTo final="1" public="1" set="method">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><CompareTo final="1" public="1" set="method">
	<f a="value">
		<x path="UInt"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</CompareTo></overloads>
		</CompareTo>
		<ToString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<ToString final="1" public="1" set="method">
					<f a="format:provider">
						<c path="String"/>
						<c path="cs.system.IFormatProvider"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ToString>
				<ToString final="1" public="1" set="method">
					<f a="format">
						<c path="String"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ToString>
				<ToString final="1" public="1" set="method">
					<f a="provider">
						<c path="cs.system.IFormatProvider"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ToString>
			</overloads>
		</ToString>
		<GetTypeCode final="1" public="1" set="method">
			<f a=""><e path="cs.system.TypeCode"/></f>
			<meta><m n=":overload"/></meta>
		</GetTypeCode>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.UInt32"</e></m>
		</meta>
	</class>
	<class path="cs.system.UIntPtr" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.UIntPtr" extern="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<Size public="1" get="accessor" set="null" static="1"><x path="Int"/></Size>
		<Zero public="1" set="null" static="1">
			<c path="cs.system.UIntPtr"/>
			<meta><m n=":readOnly"/></meta>
		</Zero>
		<get_Size final="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Size>
		<op_Equality final="1" public="1" set="method" static="1">
			<f a="value1:value2">
				<c path="cs.system.UIntPtr"/>
				<c path="cs.system.UIntPtr"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Equality>
		<op_Inequality final="1" public="1" set="method" static="1">
			<f a="value1:value2">
				<c path="cs.system.UIntPtr"/>
				<c path="cs.system.UIntPtr"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Inequality>
		<op_Explicit final="1" public="1" set="method" static="1">
			<f a="value">
				<t path="cs.types.UInt64"/>
				<c path="cs.system.UIntPtr"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<op_Explicit final="1" public="1" set="method">
					<f a="value">
						<x path="UInt"/>
						<c path="cs.system.UIntPtr"/>
					</f>
					<meta><m n=":overload"/></meta>
				</op_Explicit>
				<op_Explicit final="1" public="1" set="method">
					<f a="value">
						<c path="cs.system.UIntPtr"/>
						<x path="cs.Pointer"><x path="Void"/></x>
					</f>
					<meta><m n=":overload"/></meta>
				</op_Explicit>
				<op_Explicit final="1" public="1" set="method">
					<f a="value">
						<x path="cs.Pointer"><x path="Void"/></x>
						<c path="cs.system.UIntPtr"/>
					</f>
					<meta><m n=":overload"/></meta>
				</op_Explicit>
			</overloads>
		</op_Explicit>
		<ToUInt32 final="1" public="1" set="method">
			<f a=""><x path="UInt"/></f>
			<meta><m n=":overload"/></meta>
		</ToUInt32>
		<ToUInt64 final="1" public="1" set="method">
			<f a=""><t path="cs.types.UInt64"/></f>
			<meta><m n=":overload"/></meta>
		</ToUInt64>
		<ToPointer final="1" public="1" set="method">
			<f a=""><x path="cs.Pointer"><x path="Void"/></x></f>
			<meta><m n=":overload"/></meta>
		</ToPointer>
		<ToString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<new final="1" public="1" set="method">
			<f a="value">
				<t path="cs.types.UInt64"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="value">
						<x path="cs.Pointer"><x path="Void"/></x>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="value">
						<x path="UInt"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.UIntPtr"</e></m>
		</meta>
	</class>
	<class path="cs.system.UnhandledExceptionEventArgs" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.UnhandledExceptionEventArgs" extern="1">
		<extends path="cs.system.EventArgs"/>
		<IsTerminating public="1" get="accessor" set="null"><x path="Bool"/></IsTerminating>
		<ExceptionObject public="1" get="accessor" set="null"><d/></ExceptionObject>
		<get_ExceptionObject final="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_ExceptionObject>
		<get_IsTerminating final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsTerminating>
		<new final="1" public="1" set="method">
			<f a="exception:isTerminating">
				<d/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.UnhandledExceptionEventArgs"</e></m>
		</meta>
	</class>
	<class path="cs.system.Delegate_UnhandledExceptionEventHandler" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.UnhandledExceptionEventHandler" module="cs.system.UnhandledExceptionEventHandler" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.UnhandledExceptionEventHandler"/>
	<x path="cs.system.UnhandledExceptionEventHandler"/>
	<x path="cs.system.UnhandledExceptionEventHandler"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.UnhandledExceptionEventHandler"/>
	<x path="cs.system.UnhandledExceptionEventHandler"/>
	<x path="cs.system.UnhandledExceptionEventHandler"/>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="sender:e">
				<d/>
				<c path="cs.system.UnhandledExceptionEventArgs"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="sender:e:callback:object">
				<d/>
				<c path="cs.system.UnhandledExceptionEventArgs"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.UnhandledExceptionEventHandler"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.UnhandledExceptionEventHandler" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.UnhandledExceptionEventHandler">
		<from><icast field="FromHaxeFunction"><f a=":">
	<d/>
	<c path="cs.system.UnhandledExceptionEventArgs"/>
	<x path="Void"/>
</f></icast></from>
		<this><c path="cs.system.Delegate_UnhandledExceptionEventHandler"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system._UnhandledExceptionEventHandler.UnhandledExceptionEventHandler_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.UnhandledExceptionEventHandler" private="1" module="cs.system.UnhandledExceptionEventHandler">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=":">
				<d/>
				<c path="cs.system.UnhandledExceptionEventArgs"/>
				<x path="Void"/>
			</f>
			<x path="cs.system.UnhandledExceptionEventHandler"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=":">
				<d/>
				<c path="cs.system.UnhandledExceptionEventArgs"/>
				<x path="Void"/>
			</f>
			<x path="cs.system.UnhandledExceptionEventHandler"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.Delegate_UnhandledExceptionEventHandler"/>
			<c path="cs.system.Delegate_UnhandledExceptionEventHandler"/>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.UnhandledExceptionEventHandler"/>
			<x path="cs.system.UnhandledExceptionEventHandler"/>
			<x path="cs.system.UnhandledExceptionEventHandler"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.UnhandledExceptionEventHandler"/>
			<x path="cs.system.UnhandledExceptionEventHandler"/>
			<x path="cs.system.UnhandledExceptionEventHandler"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system._UnhandledExceptionEventHandler.UnhandledExceptionEventHandler_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.UnhandledExceptionEventHandler" private="1" module="cs.system.UnhandledExceptionEventHandler">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=":">
					<d/>
					<c path="cs.system.UnhandledExceptionEventArgs"/>
					<x path="Void"/>
				</f>
				<x path="cs.system.UnhandledExceptionEventHandler"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=":">
					<d/>
					<c path="cs.system.UnhandledExceptionEventArgs"/>
					<x path="Void"/>
				</f>
				<x path="cs.system.UnhandledExceptionEventHandler"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.Delegate_UnhandledExceptionEventHandler"/>
				<c path="cs.system.Delegate_UnhandledExceptionEventHandler"/>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.UnhandledExceptionEventHandler"/>
				<x path="cs.system.UnhandledExceptionEventHandler"/>
				<x path="cs.system.UnhandledExceptionEventHandler"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.UnhandledExceptionEventHandler"/>
				<x path="cs.system.UnhandledExceptionEventHandler"/>
				<x path="cs.system.UnhandledExceptionEventHandler"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="cs.system.Uri_UriScheme" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.Uri" module="cs.system.Uri" extern="1">
		<extends path="cs.system.ValueType"/>
		<defaultPort public="1"><x path="Int"/></defaultPort>
		<delimiter public="1"><c path="String"/></delimiter>
		<scheme public="1"><c path="String"/></scheme>
		<new final="1" public="1" set="method">
			<f a="s:d:p">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Uri.UriScheme"</e></m>
		</meta>
	</class>
	<class path="cs.system.Uri" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.Uri" extern="1">
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<UriSchemeNetTcp public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":readOnly"/></meta>
		</UriSchemeNetTcp>
		<UriSchemeNetPipe public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":readOnly"/></meta>
		</UriSchemeNetPipe>
		<UriSchemeNntp public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":readOnly"/></meta>
		</UriSchemeNntp>
		<UriSchemeNews public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":readOnly"/></meta>
		</UriSchemeNews>
		<UriSchemeMailto public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":readOnly"/></meta>
		</UriSchemeMailto>
		<UriSchemeHttps public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":readOnly"/></meta>
		</UriSchemeHttps>
		<UriSchemeHttp public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":readOnly"/></meta>
		</UriSchemeHttp>
		<UriSchemeGopher public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":readOnly"/></meta>
		</UriSchemeGopher>
		<UriSchemeFtp public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":readOnly"/></meta>
		</UriSchemeFtp>
		<UriSchemeFile public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":readOnly"/></meta>
		</UriSchemeFile>
		<SchemeDelimiter public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":readOnly"/></meta>
		</SchemeDelimiter>
		<CheckHostName final="1" public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<e path="cs.system.UriHostNameType"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CheckHostName>
		<CheckSchemeName final="1" public="1" set="method" static="1">
			<f a="schemeName">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CheckSchemeName>
		<FromHex final="1" public="1" set="method" static="1">
			<f a="digit">
				<t path="cs.types.Char16"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</FromHex>
		<HexEscape final="1" public="1" set="method" static="1">
			<f a="character">
				<t path="cs.types.Char16"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</HexEscape>
		<HexUnescape final="1" public="1" set="method" static="1">
			<f a="pattern:index">
				<c path="String"/>
				<t path="cs.Ref"><x path="Int"/></t>
				<t path="cs.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</HexUnescape>
		<IsHexDigit final="1" public="1" set="method" static="1">
			<f a="digit">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsHexDigit>
		<IsHexEncoding final="1" public="1" set="method" static="1">
			<f a="pattern:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsHexEncoding>
		<EscapeString final="1" set="method" static="1">
			<f a="str">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</EscapeString>
		<IsExcludedCharacter final="1" set="method" static="1">
			<f a="ch">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</IsExcludedCharacter>
		<Compare final="1" public="1" set="method" static="1">
			<f a="uri1:uri2:partsToCompare:compareFormat:comparisonType">
				<c path="cs.system.Uri"/>
				<c path="cs.system.Uri"/>
				<e path="cs.system.UriComponents"/>
				<e path="cs.system.UriFormat"/>
				<e path="cs.system.StringComparison"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Compare>
		<EscapeDataString final="1" public="1" set="method" static="1">
			<f a="stringToEscape">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EscapeDataString>
		<EscapeUriString final="1" public="1" set="method" static="1">
			<f a="stringToEscape">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EscapeUriString>
		<IsWellFormedUriString final="1" public="1" set="method" static="1">
			<f a="uriString:uriKind">
				<c path="String"/>
				<e path="cs.system.UriKind"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsWellFormedUriString>
		<TryCreate final="1" public="1" set="method" static="1">
			<f a="uriString:uriKind:result">
				<c path="String"/>
				<e path="cs.system.UriKind"/>
				<t path="cs.Out"><c path="cs.system.Uri"/></t>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<TryCreate final="1" public="1" set="method">
					<f a="baseUri:relativeUri:result">
						<c path="cs.system.Uri"/>
						<c path="cs.system.Uri"/>
						<t path="cs.Out"><c path="cs.system.Uri"/></t>
						<x path="Bool"/>
					</f>
					<meta><m n=":overload"/></meta>
				</TryCreate>
				<TryCreate final="1" public="1" set="method">
					<f a="baseUri:relativeUri:result">
						<c path="cs.system.Uri"/>
						<c path="String"/>
						<t path="cs.Out"><c path="cs.system.Uri"/></t>
						<x path="Bool"/>
					</f>
					<meta><m n=":overload"/></meta>
				</TryCreate>
			</overloads>
		</TryCreate>
		<UnescapeDataString final="1" public="1" set="method" static="1">
			<f a="stringToUnescape">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</UnescapeDataString>
		<op_Equality final="1" public="1" set="method" static="1">
			<f a="u1:u2">
				<c path="cs.system.Uri"/>
				<c path="cs.system.Uri"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Equality>
		<op_Inequality final="1" public="1" set="method" static="1">
			<f a="u1:u2">
				<c path="cs.system.Uri"/>
				<c path="cs.system.Uri"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Inequality>
		<OriginalString public="1" get="accessor" set="null"><c path="String"/></OriginalString>
		<IsAbsoluteUri public="1" get="accessor" set="null"><x path="Bool"/></IsAbsoluteUri>
		<DnsSafeHost public="1" get="accessor" set="null"><c path="String"/></DnsSafeHost>
		<UserInfo public="1" get="accessor" set="null"><c path="String"/></UserInfo>
		<UserEscaped public="1" get="accessor" set="null"><x path="Bool"/></UserEscaped>
		<Segments public="1" get="accessor" set="null"><c path="cs.NativeArray"><c path="String"/></c></Segments>
		<Scheme public="1" get="accessor" set="null"><c path="String"/></Scheme>
		<Query public="1" get="accessor" set="null"><c path="String"/></Query>
		<Port public="1" get="accessor" set="null"><x path="Int"/></Port>
		<PathAndQuery public="1" get="accessor" set="null"><c path="String"/></PathAndQuery>
		<LocalPath public="1" get="accessor" set="null"><c path="String"/></LocalPath>
		<IsUnc public="1" get="accessor" set="null"><x path="Bool"/></IsUnc>
		<IsLoopback public="1" get="accessor" set="null"><x path="Bool"/></IsLoopback>
		<IsFile public="1" get="accessor" set="null"><x path="Bool"/></IsFile>
		<IsDefaultPort public="1" get="accessor" set="null"><x path="Bool"/></IsDefaultPort>
		<HostNameType public="1" get="accessor" set="null"><e path="cs.system.UriHostNameType"/></HostNameType>
		<Host public="1" get="accessor" set="null"><c path="String"/></Host>
		<Fragment public="1" get="accessor" set="null"><c path="String"/></Fragment>
		<Authority public="1" get="accessor" set="null"><c path="String"/></Authority>
		<AbsoluteUri public="1" get="accessor" set="null"><c path="String"/></AbsoluteUri>
		<AbsolutePath public="1" get="accessor" set="null"><c path="String"/></AbsolutePath>
		<get_AbsolutePath final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_AbsolutePath>
		<get_AbsoluteUri final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_AbsoluteUri>
		<get_Authority final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Authority>
		<get_Fragment final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Fragment>
		<get_Host final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Host>
		<get_HostNameType final="1" set="method">
			<f a=""><e path="cs.system.UriHostNameType"/></f>
			<meta><m n=":overload"/></meta>
		</get_HostNameType>
		<get_IsDefaultPort final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsDefaultPort>
		<get_IsFile final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFile>
		<get_IsLoopback final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsLoopback>
		<get_IsUnc final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsUnc>
		<get_LocalPath final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_LocalPath>
		<get_PathAndQuery final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_PathAndQuery>
		<get_Port final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Port>
		<get_Query final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Query>
		<get_Scheme final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Scheme>
		<get_Segments final="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</get_Segments>
		<get_UserEscaped final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_UserEscaped>
		<get_UserInfo final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_UserInfo>
		<get_DnsSafeHost final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_DnsSafeHost>
		<get_IsAbsoluteUri final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsAbsoluteUri>
		<get_OriginalString final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_OriginalString>
		<Canonicalize set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</Canonicalize>
		<CheckSecurity set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</CheckSecurity>
		<GetLeftPart final="1" public="1" set="method">
			<f a="part">
				<e path="cs.system.UriPartial"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetLeftPart>
		<MakeRelativeUri final="1" public="1" set="method">
			<f a="uri">
				<c path="cs.system.Uri"/>
				<c path="cs.system.Uri"/>
			</f>
			<meta><m n=":overload"/></meta>
		</MakeRelativeUri>
		<MakeRelative final="1" public="1" set="method">
			<f a="toUri">
				<c path="cs.system.Uri"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</MakeRelative>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<GetObjectData final="1" public="1" set="method">
			<f a="info:context">
				<c path="cs.system.runtime.serialization.SerializationInfo"/>
				<c path="cs.system.runtime.serialization.StreamingContext"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":overload"/>
			</meta>
		</GetObjectData>
		<Escape set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</Escape>
		<Parse set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</Parse>
		<Unescape set="method">
			<f a="str">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</Unescape>
		<IsBadFileSystemCharacter set="method">
			<f a="ch">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</IsBadFileSystemCharacter>
		<IsReservedCharacter set="method">
			<f a="ch">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</IsReservedCharacter>
		<GetComponents final="1" public="1" set="method">
			<f a="components:format">
				<e path="cs.system.UriComponents"/>
				<e path="cs.system.UriFormat"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetComponents>
		<IsBaseOf final="1" public="1" set="method">
			<f a="uri">
				<c path="cs.system.Uri"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsBaseOf>
		<IsWellFormedOriginalString final="1" public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</IsWellFormedOriginalString>
		<new final="1" public="1" set="method">
			<f a="uriString">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="baseUri:relativeUri:dontEscape">
						<c path="cs.system.Uri"/>
						<c path="String"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="baseUri:relativeUri">
						<c path="cs.system.Uri"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="uriString:dontEscape">
						<c path="String"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="baseUri:relativeUri">
						<c path="cs.system.Uri"/>
						<c path="cs.system.Uri"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="uriString:uriKind">
						<c path="String"/>
						<e path="cs.system.UriKind"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" set="method">
					<f a="serializationInfo:streamingContext">
						<c path="cs.system.runtime.serialization.SerializationInfo"/>
						<c path="cs.system.runtime.serialization.StreamingContext"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":protected"/>
						<m n=":overload"/>
					</meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Uri"</e></m>
		</meta>
	</class>
	<enum path="cs.system.UriComponents" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.UriComponents">
		<SerializationInfoString><meta><m n=":csNative"><e>-2147483648</e></m></meta></SerializationInfoString>
		<Scheme><meta><m n=":csNative"><e>1</e></m></meta></Scheme>
		<UserInfo><meta><m n=":csNative"><e>2</e></m></meta></UserInfo>
		<Host><meta><m n=":csNative"><e>4</e></m></meta></Host>
		<Port><meta><m n=":csNative"><e>8</e></m></meta></Port>
		<SchemeAndServer><meta><m n=":csNative"><e>13</e></m></meta></SchemeAndServer>
		<Path><meta><m n=":csNative"><e>16</e></m></meta></Path>
		<Query><meta><m n=":csNative"><e>32</e></m></meta></Query>
		<PathAndQuery><meta><m n=":csNative"><e>48</e></m></meta></PathAndQuery>
		<HttpRequestUrl><meta><m n=":csNative"><e>61</e></m></meta></HttpRequestUrl>
		<Fragment><meta><m n=":csNative"><e>64</e></m></meta></Fragment>
		<AbsoluteUri><meta><m n=":csNative"><e>127</e></m></meta></AbsoluteUri>
		<StrongPort><meta><m n=":csNative"><e>128</e></m></meta></StrongPort>
		<HostAndPort><meta><m n=":csNative"><e>132</e></m></meta></HostAndPort>
		<StrongAuthority><meta><m n=":csNative"><e>134</e></m></meta></StrongAuthority>
		<KeepDelimiter><meta><m n=":csNative"><e>1073741824</e></m></meta></KeepDelimiter>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.UriComponents"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.UriFormat" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.UriFormat">
		<UriEscaped><meta><m n=":csNative"><e>1</e></m></meta></UriEscaped>
		<Unescaped><meta><m n=":csNative"><e>2</e></m></meta></Unescaped>
		<SafeUnescaped><meta><m n=":csNative"><e>3</e></m></meta></SafeUnescaped>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.UriFormat"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.UriHostNameType" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.UriHostNameType">
		<Unknown><meta><m n=":csNative"><e>0</e></m></meta></Unknown>
		<Basic><meta><m n=":csNative"><e>1</e></m></meta></Basic>
		<Dns><meta><m n=":csNative"><e>2</e></m></meta></Dns>
		<IPv4><meta><m n=":csNative"><e>3</e></m></meta></IPv4>
		<IPv6><meta><m n=":csNative"><e>4</e></m></meta></IPv6>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.UriHostNameType"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.UriKind" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.UriKind">
		<RelativeOrAbsolute><meta><m n=":csNative"><e>0</e></m></meta></RelativeOrAbsolute>
		<Absolute><meta><m n=":csNative"><e>1</e></m></meta></Absolute>
		<Relative><meta><m n=":csNative"><e>2</e></m></meta></Relative>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.UriKind"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.UriPartial" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.UriPartial">
		<Scheme><meta><m n=":csNative"><e>0</e></m></meta></Scheme>
		<Authority><meta><m n=":csNative"><e>1</e></m></meta></Authority>
		<Path><meta><m n=":csNative"><e>2</e></m></meta></Path>
		<Query><meta><m n=":csNative"><e>3</e></m></meta></Query>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.UriPartial"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.Version" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.Version" extern="1">
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.IComparable"/>
		<implements path="cs.system.IComparable_1"><c path="cs.system.Version"/></implements>
		<implements path="cs.system.IEquatable_1"><c path="cs.system.Version"/></implements>
		<op_Equality final="1" public="1" set="method" static="1">
			<f a="v1:v2">
				<c path="cs.system.Version"/>
				<c path="cs.system.Version"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Equality>
		<op_Inequality final="1" public="1" set="method" static="1">
			<f a="v1:v2">
				<c path="cs.system.Version"/>
				<c path="cs.system.Version"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Inequality>
		<op_GreaterThan final="1" public="1" set="method" static="1">
			<f a="v1:v2">
				<c path="cs.system.Version"/>
				<c path="cs.system.Version"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_GreaterThan>
		<op_GreaterThanOrEqual final="1" public="1" set="method" static="1">
			<f a="v1:v2">
				<c path="cs.system.Version"/>
				<c path="cs.system.Version"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_GreaterThanOrEqual>
		<op_LessThan final="1" public="1" set="method" static="1">
			<f a="v1:v2">
				<c path="cs.system.Version"/>
				<c path="cs.system.Version"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_LessThan>
		<op_LessThanOrEqual final="1" public="1" set="method" static="1">
			<f a="v1:v2">
				<c path="cs.system.Version"/>
				<c path="cs.system.Version"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_LessThanOrEqual>
		<MinorRevision public="1" get="accessor" set="null"><t path="cs.types.Int16"/></MinorRevision>
		<MajorRevision public="1" get="accessor" set="null"><t path="cs.types.Int16"/></MajorRevision>
		<Revision public="1" get="accessor" set="null"><x path="Int"/></Revision>
		<Minor public="1" get="accessor" set="null"><x path="Int"/></Minor>
		<Major public="1" get="accessor" set="null"><x path="Int"/></Major>
		<Build public="1" get="accessor" set="null"><x path="Int"/></Build>
		<get_Build final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Build>
		<get_Major final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Major>
		<get_Minor final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Minor>
		<get_Revision final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Revision>
		<get_MajorRevision final="1" set="method">
			<f a=""><t path="cs.types.Int16"/></f>
			<meta><m n=":overload"/></meta>
		</get_MajorRevision>
		<get_MinorRevision final="1" set="method">
			<f a=""><t path="cs.types.Int16"/></f>
			<meta><m n=":overload"/></meta>
		</get_MinorRevision>
		<Clone final="1" public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</Clone>
		<CompareTo final="1" public="1" set="method">
			<f a="version">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><CompareTo final="1" public="1" set="method">
	<f a="value">
		<c path="cs.system.Version"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</CompareTo></overloads>
		</CompareTo>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><ToString final="1" public="1" set="method">
	<f a="fieldCount">
		<x path="Int"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</ToString></overloads>
		</ToString>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="major:minor:build:revision">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="major:minor:build">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="major:minor">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="version">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Version"</e></m>
		</meta>
	</class>
	<class path="cs.system.WeakReference" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.WeakReference" extern="1">
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<TrackResurrection public="1" get="accessor" set="null"><x path="Bool"/></TrackResurrection>
		<Target public="1" get="accessor" set="accessor"><d/></Target>
		<IsAlive public="1" get="accessor" set="null"><x path="Bool"/></IsAlive>
		<get_IsAlive set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsAlive>
		<get_Target set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_Target>
		<set_Target set="method">
			<f a="value">
				<d/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Target>
		<get_TrackResurrection set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_TrackResurrection>
		<GetObjectData public="1" set="method">
			<f a="info:context">
				<c path="cs.system.runtime.serialization.SerializationInfo"/>
				<c path="cs.system.runtime.serialization.StreamingContext"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetObjectData>
		<new final="1" public="1" set="method">
			<f a="target">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" set="method">
					<f a="info:context">
						<c path="cs.system.runtime.serialization.SerializationInfo"/>
						<c path="cs.system.runtime.serialization.StreamingContext"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":protected"/>
						<m n=":overload"/>
					</meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="target:trackResurrection">
						<d/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.WeakReference"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.ArrayList_ListWrapper" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.ArrayList" module="cs.system.collections.ArrayList" extern="1">
		<implements path="cs.system.collections.ICollection"/>
		<implements path="cs.system.collections.IEnumerable"/>
		<implements path="cs.system.collections.IList"/>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<IsFixedSize public="1" get="accessor" set="null"><x path="Bool"/></IsFixedSize>
		<SyncRoot public="1" get="accessor" set="null"><d/></SyncRoot>
		<IsSynchronized public="1" get="accessor" set="null"><x path="Bool"/></IsSynchronized>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<m_InnerList><c path="cs.system.collections.IList"/></m_InnerList>
		<get_Item set="method">
			<f a="index">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</get_Item>
		<set_Item set="method">
			<f a="index:value">
				<x path="Int"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Item>
		<get_Count set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Count>
		<get_IsSynchronized set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSynchronized>
		<get_SyncRoot set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_SyncRoot>
		<get_IsFixedSize set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFixedSize>
		<get_IsReadOnly set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsReadOnly>
		<Add public="1" set="method">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Add>
		<Clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Clear>
		<Contains public="1" set="method">
			<f a="value">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Contains>
		<IndexOf public="1" set="method">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IndexOf>
		<Insert public="1" set="method">
			<f a="index:value">
				<x path="Int"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Insert>
		<Remove public="1" set="method">
			<f a="value">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Remove>
		<RemoveAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveAt>
		<CopyTo public="1" set="method">
			<f a="array:index">
				<c path="cs.system.Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CopyTo>
		<GetEnumerator public="1" set="method">
			<f a=""><c path="cs.system.collections.IEnumerator"/></f>
			<meta><m n=":overload"/></meta>
		</GetEnumerator>
		<new final="1" public="1" set="method">
			<f a="innerList">
				<c path="cs.system.collections.IList"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ArrayList.ListWrapper"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.ArrayList_FixedSizeListWrapper" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.ArrayList" module="cs.system.collections.ArrayList" extern="1">
		<extends path="cs.system.collections.ArrayList_ListWrapper"/>
		<IsFixedSize public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsFixedSize>
		<ErrorMessage get="null" set="null"><c path="String"/></ErrorMessage>
		<get_ErrorMessage set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</get_ErrorMessage>
		<get_IsFixedSize set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFixedSize>
		<Add public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Add>
		<Clear public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Clear>
		<Insert public="1" set="method" override="1">
			<f a="index:value">
				<x path="Int"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Insert>
		<Remove public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Remove>
		<RemoveAt public="1" set="method" override="1">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveAt>
		<new final="1" public="1" set="method">
			<f a="innerList">
				<c path="cs.system.collections.IList"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ArrayList.FixedSizeListWrapper"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.ArrayList_ReadOnlyListWrapper" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.ArrayList" module="cs.system.collections.ArrayList" extern="1">
		<extends path="cs.system.collections.ArrayList_FixedSizeListWrapper"/>
		<IsReadOnly public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsReadOnly>
		<ErrorMessage get="null" set="null" override="1"><c path="String"/></ErrorMessage>
		<get_ErrorMessage set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</get_ErrorMessage>
		<get_IsReadOnly set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsReadOnly>
		<get_Item set="method" override="1">
			<f a="index">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</get_Item>
		<set_Item set="method" override="1">
			<f a="index:value">
				<x path="Int"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Item>
		<new final="1" public="1" set="method">
			<f a="innerList">
				<c path="cs.system.collections.IList"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ArrayList.ReadOnlyListWrapper"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.ArrayList_SynchronizedListWrapper" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.ArrayList" module="cs.system.collections.ArrayList" extern="1">
		<extends path="cs.system.collections.ArrayList_ListWrapper"/>
		<IsReadOnly public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsReadOnly>
		<IsFixedSize public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsFixedSize>
		<SyncRoot public="1" get="accessor" set="null" override="1"><d/></SyncRoot>
		<IsSynchronized public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsSynchronized>
		<Count public="1" get="accessor" set="null" override="1"><x path="Int"/></Count>
		<get_Count set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Count>
		<get_IsSynchronized set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSynchronized>
		<get_SyncRoot set="method" override="1">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_SyncRoot>
		<get_IsFixedSize set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFixedSize>
		<get_IsReadOnly set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsReadOnly>
		<get_Item set="method" override="1">
			<f a="index">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</get_Item>
		<set_Item set="method" override="1">
			<f a="index:value">
				<x path="Int"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Item>
		<Add public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Add>
		<Clear public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Clear>
		<Contains public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Contains>
		<IndexOf public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IndexOf>
		<Insert public="1" set="method" override="1">
			<f a="index:value">
				<x path="Int"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Insert>
		<Remove public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Remove>
		<RemoveAt public="1" set="method" override="1">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveAt>
		<CopyTo public="1" set="method" override="1">
			<f a="array:index">
				<c path="cs.system.Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CopyTo>
		<GetEnumerator public="1" set="method" override="1">
			<f a=""><c path="cs.system.collections.IEnumerator"/></f>
			<meta><m n=":overload"/></meta>
		</GetEnumerator>
		<new final="1" public="1" set="method">
			<f a="innerList">
				<c path="cs.system.collections.IList"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ArrayList.SynchronizedListWrapper"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.ArrayList" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.ArrayList" extern="1">
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.collections.ICollection"/>
		<implements path="cs.system.collections.IEnumerable"/>
		<implements path="cs.system.collections.IList"/>
		<Adapter final="1" public="1" set="method" static="1">
			<f a="list">
				<c path="cs.system.collections.IList"/>
				<c path="cs.system.collections.ArrayList"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Adapter>
		<Synchronized final="1" public="1" set="method" static="1">
			<f a="list">
				<c path="cs.system.collections.ArrayList"/>
				<c path="cs.system.collections.ArrayList"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><Synchronized final="1" public="1" set="method">
	<f a="list">
		<c path="cs.system.collections.IList"/>
		<c path="cs.system.collections.IList"/>
	</f>
	<meta><m n=":overload"/></meta>
</Synchronized></overloads>
		</Synchronized>
		<ReadOnly final="1" public="1" set="method" static="1">
			<f a="list">
				<c path="cs.system.collections.ArrayList"/>
				<c path="cs.system.collections.ArrayList"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><ReadOnly final="1" public="1" set="method">
	<f a="list">
		<c path="cs.system.collections.IList"/>
		<c path="cs.system.collections.IList"/>
	</f>
	<meta><m n=":overload"/></meta>
</ReadOnly></overloads>
		</ReadOnly>
		<FixedSize final="1" public="1" set="method" static="1">
			<f a="list">
				<c path="cs.system.collections.ArrayList"/>
				<c path="cs.system.collections.ArrayList"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><FixedSize final="1" public="1" set="method">
	<f a="list">
		<c path="cs.system.collections.IList"/>
		<c path="cs.system.collections.IList"/>
	</f>
	<meta><m n=":overload"/></meta>
</FixedSize></overloads>
		</FixedSize>
		<Repeat final="1" public="1" set="method" static="1">
			<f a="value:count">
				<d/>
				<x path="Int"/>
				<c path="cs.system.collections.ArrayList"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Repeat>
		<SyncRoot public="1" get="accessor" set="null"><d/></SyncRoot>
		<IsSynchronized public="1" get="accessor" set="null"><x path="Bool"/></IsSynchronized>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<IsFixedSize public="1" get="accessor" set="null"><x path="Bool"/></IsFixedSize>
		<Capacity public="1" get="accessor" set="accessor"><x path="Int"/></Capacity>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<get_Item set="method">
			<f a="index">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</get_Item>
		<set_Item set="method">
			<f a="index:value">
				<x path="Int"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Item>
		<get_Count set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Count>
		<get_Capacity set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Capacity>
		<set_Capacity set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Capacity>
		<get_IsFixedSize set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFixedSize>
		<get_IsReadOnly set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsReadOnly>
		<get_IsSynchronized set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSynchronized>
		<get_SyncRoot set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_SyncRoot>
		<Add public="1" set="method">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Add>
		<Clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Clear>
		<Contains public="1" set="method">
			<f a="item">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Contains>
		<IndexOf public="1" set="method">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<IndexOf public="1" set="method">
					<f a="value:startIndex:count">
						<d/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IndexOf>
				<IndexOf public="1" set="method">
					<f a="value:startIndex">
						<d/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IndexOf>
			</overloads>
		</IndexOf>
		<LastIndexOf public="1" set="method">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<LastIndexOf public="1" set="method">
					<f a="value:startIndex:count">
						<d/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
				<LastIndexOf public="1" set="method">
					<f a="value:startIndex">
						<d/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
			</overloads>
		</LastIndexOf>
		<Insert public="1" set="method">
			<f a="index:value">
				<x path="Int"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Insert>
		<InsertRange public="1" set="method">
			<f a="index:c">
				<x path="Int"/>
				<c path="cs.system.collections.ICollection"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</InsertRange>
		<Remove public="1" set="method">
			<f a="obj">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Remove>
		<RemoveAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveAt>
		<RemoveRange public="1" set="method">
			<f a="index:count">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveRange>
		<Reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><Reverse public="1" set="method">
	<f a="index:count">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</Reverse></overloads>
		</Reverse>
		<CopyTo public="1" set="method">
			<f a="array">
				<c path="cs.system.Array"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<CopyTo public="1" set="method">
					<f a="index:array:arrayIndex:count">
						<x path="Int"/>
						<c path="cs.system.Array"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CopyTo>
				<CopyTo public="1" set="method">
					<f a="array:arrayIndex">
						<c path="cs.system.Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CopyTo>
			</overloads>
		</CopyTo>
		<GetEnumerator public="1" set="method">
			<f a=""><c path="cs.system.collections.IEnumerator"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetEnumerator public="1" set="method">
	<f a="index:count">
		<x path="Int"/>
		<x path="Int"/>
		<c path="cs.system.collections.IEnumerator"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetEnumerator></overloads>
		</GetEnumerator>
		<AddRange public="1" set="method">
			<f a="c">
				<c path="cs.system.collections.ICollection"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddRange>
		<BinarySearch public="1" set="method">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<BinarySearch public="1" set="method">
					<f a="index:count:value:comparer">
						<x path="Int"/>
						<x path="Int"/>
						<d/>
						<c path="cs.system.collections.IComparer"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</BinarySearch>
				<BinarySearch public="1" set="method">
					<f a="value:comparer">
						<d/>
						<c path="cs.system.collections.IComparer"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</BinarySearch>
			</overloads>
		</BinarySearch>
		<GetRange public="1" set="method">
			<f a="index:count">
				<x path="Int"/>
				<x path="Int"/>
				<c path="cs.system.collections.ArrayList"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetRange>
		<SetRange public="1" set="method">
			<f a="index:c">
				<x path="Int"/>
				<c path="cs.system.collections.ICollection"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetRange>
		<TrimToSize public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</TrimToSize>
		<Sort public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Sort public="1" set="method">
					<f a="index:count:comparer">
						<x path="Int"/>
						<x path="Int"/>
						<c path="cs.system.collections.IComparer"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sort>
				<Sort public="1" set="method">
					<f a="comparer">
						<c path="cs.system.collections.IComparer"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sort>
			</overloads>
		</Sort>
		<ToArray public="1" set="method">
			<f a=""><c path="cs.NativeArray"><d/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><ToArray public="1" set="method">
	<f a="type">
		<c path="cs.system.Type"/>
		<c path="cs.system.Array"/>
	</f>
	<meta><m n=":overload"/></meta>
</ToArray></overloads>
		</ToArray>
		<Clone public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</Clone>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="capacity">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="c">
						<c path="cs.system.collections.ICollection"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ArrayList"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.ArrayList_ArrayListWrapper" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.ArrayList" module="cs.system.collections.ArrayList" extern="1">
		<extends path="cs.system.collections.ArrayList"/>
		<SyncRoot public="1" get="accessor" set="null" override="1"><d/></SyncRoot>
		<IsSynchronized public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsSynchronized>
		<IsReadOnly public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsReadOnly>
		<IsFixedSize public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsFixedSize>
		<Capacity public="1" get="accessor" set="accessor" override="1"><x path="Int"/></Capacity>
		<Count public="1" get="accessor" set="null" override="1"><x path="Int"/></Count>
		<m_InnerArrayList><c path="cs.system.collections.ArrayList"/></m_InnerArrayList>
		<get_Item set="method" override="1">
			<f a="index">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</get_Item>
		<set_Item set="method" override="1">
			<f a="index:value">
				<x path="Int"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Item>
		<get_Count set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Count>
		<get_Capacity set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Capacity>
		<set_Capacity set="method" override="1">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Capacity>
		<get_IsFixedSize set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFixedSize>
		<get_IsReadOnly set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsReadOnly>
		<get_IsSynchronized set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSynchronized>
		<get_SyncRoot set="method" override="1">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_SyncRoot>
		<Add public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Add>
		<Clear public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Clear>
		<Contains public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Contains>
		<IndexOf public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<IndexOf public="1" set="method">
					<f a="value:startIndex:count">
						<d/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IndexOf>
				<IndexOf public="1" set="method">
					<f a="value:startIndex">
						<d/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IndexOf>
			</overloads>
		</IndexOf>
		<LastIndexOf public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<LastIndexOf public="1" set="method">
					<f a="value:startIndex:count">
						<d/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
				<LastIndexOf public="1" set="method">
					<f a="value:startIndex">
						<d/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
			</overloads>
		</LastIndexOf>
		<Insert public="1" set="method" override="1">
			<f a="index:value">
				<x path="Int"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Insert>
		<InsertRange public="1" set="method" override="1">
			<f a="index:c">
				<x path="Int"/>
				<c path="cs.system.collections.ICollection"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</InsertRange>
		<Remove public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Remove>
		<RemoveAt public="1" set="method" override="1">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveAt>
		<RemoveRange public="1" set="method" override="1">
			<f a="index:count">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveRange>
		<Reverse public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><Reverse public="1" set="method">
	<f a="index:count">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</Reverse></overloads>
		</Reverse>
		<SetRange public="1" set="method" override="1">
			<f a="index:c">
				<x path="Int"/>
				<c path="cs.system.collections.ICollection"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetRange>
		<CopyTo public="1" set="method" override="1">
			<f a="array">
				<c path="cs.system.Array"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<CopyTo public="1" set="method">
					<f a="index:array:arrayIndex:count">
						<x path="Int"/>
						<c path="cs.system.Array"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CopyTo>
				<CopyTo public="1" set="method">
					<f a="array:index">
						<c path="cs.system.Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CopyTo>
			</overloads>
		</CopyTo>
		<GetEnumerator public="1" set="method" override="1">
			<f a=""><c path="cs.system.collections.IEnumerator"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetEnumerator public="1" set="method">
	<f a="index:count">
		<x path="Int"/>
		<x path="Int"/>
		<c path="cs.system.collections.IEnumerator"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetEnumerator></overloads>
		</GetEnumerator>
		<AddRange public="1" set="method" override="1">
			<f a="c">
				<c path="cs.system.collections.ICollection"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddRange>
		<BinarySearch public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<BinarySearch public="1" set="method">
					<f a="index:count:value:comparer">
						<x path="Int"/>
						<x path="Int"/>
						<d/>
						<c path="cs.system.collections.IComparer"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</BinarySearch>
				<BinarySearch public="1" set="method">
					<f a="value:comparer">
						<d/>
						<c path="cs.system.collections.IComparer"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</BinarySearch>
			</overloads>
		</BinarySearch>
		<Clone public="1" set="method" override="1">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</Clone>
		<GetRange public="1" set="method" override="1">
			<f a="index:count">
				<x path="Int"/>
				<x path="Int"/>
				<c path="cs.system.collections.ArrayList"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetRange>
		<TrimToSize public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</TrimToSize>
		<Sort public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Sort public="1" set="method">
					<f a="index:count:comparer">
						<x path="Int"/>
						<x path="Int"/>
						<c path="cs.system.collections.IComparer"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sort>
				<Sort public="1" set="method">
					<f a="comparer">
						<c path="cs.system.collections.IComparer"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sort>
			</overloads>
		</Sort>
		<ToArray public="1" set="method" override="1">
			<f a=""><c path="cs.NativeArray"><d/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><ToArray public="1" set="method">
	<f a="elementType">
		<c path="cs.system.Type"/>
		<c path="cs.system.Array"/>
	</f>
	<meta><m n=":overload"/></meta>
</ToArray></overloads>
		</ToArray>
		<new final="1" public="1" set="method">
			<f a="innerArrayList">
				<c path="cs.system.collections.ArrayList"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ArrayList.ArrayListWrapper"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.ArrayList_RangedArrayList" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.ArrayList" module="cs.system.collections.ArrayList" extern="1">
		<extends path="cs.system.collections.ArrayList_ArrayListWrapper"/>
		<Capacity public="1" get="accessor" set="accessor" override="1"><x path="Int"/></Capacity>
		<Count public="1" get="accessor" set="null" override="1"><x path="Int"/></Count>
		<IsSynchronized public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsSynchronized>
		<get_IsSynchronized set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSynchronized>
		<get_Item set="method" override="1">
			<f a="index">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</get_Item>
		<set_Item set="method" override="1">
			<f a="index:value">
				<x path="Int"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Item>
		<get_Count set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Count>
		<get_Capacity set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Capacity>
		<set_Capacity set="method" override="1">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Capacity>
		<Add public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Add>
		<Clear public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Clear>
		<Contains public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Contains>
		<IndexOf public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<IndexOf public="1" set="method">
					<f a="value:startIndex:count">
						<d/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IndexOf>
				<IndexOf public="1" set="method">
					<f a="value:startIndex">
						<d/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IndexOf>
			</overloads>
		</IndexOf>
		<LastIndexOf public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<LastIndexOf public="1" set="method">
					<f a="value:startIndex:count">
						<d/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
				<LastIndexOf public="1" set="method">
					<f a="value:startIndex">
						<d/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
			</overloads>
		</LastIndexOf>
		<Insert public="1" set="method" override="1">
			<f a="index:value">
				<x path="Int"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Insert>
		<InsertRange public="1" set="method" override="1">
			<f a="index:c">
				<x path="Int"/>
				<c path="cs.system.collections.ICollection"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</InsertRange>
		<Remove public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Remove>
		<RemoveAt public="1" set="method" override="1">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveAt>
		<RemoveRange public="1" set="method" override="1">
			<f a="index:count">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveRange>
		<Reverse public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><Reverse public="1" set="method">
	<f a="index:count">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</Reverse></overloads>
		</Reverse>
		<SetRange public="1" set="method" override="1">
			<f a="index:c">
				<x path="Int"/>
				<c path="cs.system.collections.ICollection"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetRange>
		<CopyTo public="1" set="method" override="1">
			<f a="array">
				<c path="cs.system.Array"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<CopyTo public="1" set="method">
					<f a="index:array:arrayIndex:count">
						<x path="Int"/>
						<c path="cs.system.Array"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CopyTo>
				<CopyTo public="1" set="method">
					<f a="array:index">
						<c path="cs.system.Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CopyTo>
			</overloads>
		</CopyTo>
		<GetEnumerator public="1" set="method" override="1">
			<f a=""><c path="cs.system.collections.IEnumerator"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetEnumerator public="1" set="method">
	<f a="index:count">
		<x path="Int"/>
		<x path="Int"/>
		<c path="cs.system.collections.IEnumerator"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetEnumerator></overloads>
		</GetEnumerator>
		<AddRange public="1" set="method" override="1">
			<f a="c">
				<c path="cs.system.collections.ICollection"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddRange>
		<BinarySearch public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<BinarySearch public="1" set="method">
					<f a="index:count:value:comparer">
						<x path="Int"/>
						<x path="Int"/>
						<d/>
						<c path="cs.system.collections.IComparer"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</BinarySearch>
				<BinarySearch public="1" set="method">
					<f a="value:comparer">
						<d/>
						<c path="cs.system.collections.IComparer"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</BinarySearch>
			</overloads>
		</BinarySearch>
		<Clone public="1" set="method" override="1">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</Clone>
		<GetRange public="1" set="method" override="1">
			<f a="index:count">
				<x path="Int"/>
				<x path="Int"/>
				<c path="cs.system.collections.ArrayList"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetRange>
		<TrimToSize public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</TrimToSize>
		<Sort public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Sort public="1" set="method">
					<f a="index:count:comparer">
						<x path="Int"/>
						<x path="Int"/>
						<c path="cs.system.collections.IComparer"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sort>
				<Sort public="1" set="method">
					<f a="comparer">
						<c path="cs.system.collections.IComparer"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sort>
			</overloads>
		</Sort>
		<ToArray public="1" set="method" override="1">
			<f a=""><c path="cs.NativeArray"><d/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><ToArray public="1" set="method">
	<f a="elementType">
		<c path="cs.system.Type"/>
		<c path="cs.system.Array"/>
	</f>
	<meta><m n=":overload"/></meta>
</ToArray></overloads>
		</ToArray>
		<new final="1" public="1" set="method">
			<f a="innerList:index:count">
				<c path="cs.system.collections.ArrayList"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ArrayList.RangedArrayList"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.ArrayList_FixedSizeArrayListWrapper" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.ArrayList" module="cs.system.collections.ArrayList" extern="1">
		<extends path="cs.system.collections.ArrayList_ArrayListWrapper"/>
		<IsFixedSize public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsFixedSize>
		<Capacity public="1" get="accessor" set="accessor" override="1"><x path="Int"/></Capacity>
		<ErrorMessage get="null" set="null"><c path="String"/></ErrorMessage>
		<get_ErrorMessage set="method">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</get_ErrorMessage>
		<get_Capacity set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Capacity>
		<set_Capacity set="method" override="1">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Capacity>
		<get_IsFixedSize set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFixedSize>
		<Add public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Add>
		<AddRange public="1" set="method" override="1">
			<f a="c">
				<c path="cs.system.collections.ICollection"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddRange>
		<Clear public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Clear>
		<Insert public="1" set="method" override="1">
			<f a="index:value">
				<x path="Int"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Insert>
		<InsertRange public="1" set="method" override="1">
			<f a="index:c">
				<x path="Int"/>
				<c path="cs.system.collections.ICollection"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</InsertRange>
		<Remove public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Remove>
		<RemoveAt public="1" set="method" override="1">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveAt>
		<RemoveRange public="1" set="method" override="1">
			<f a="index:count">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveRange>
		<TrimToSize public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</TrimToSize>
		<new final="1" public="1" set="method">
			<f a="innerList">
				<c path="cs.system.collections.ArrayList"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ArrayList.FixedSizeArrayListWrapper"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.ArrayList_ReadOnlyArrayListWrapper" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.ArrayList" module="cs.system.collections.ArrayList" extern="1">
		<extends path="cs.system.collections.ArrayList_FixedSizeArrayListWrapper"/>
		<IsReadOnly public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsReadOnly>
		<ErrorMessage get="null" set="null" override="1"><c path="String"/></ErrorMessage>
		<get_ErrorMessage set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</get_ErrorMessage>
		<get_IsReadOnly set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsReadOnly>
		<get_Item set="method" override="1">
			<f a="index">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</get_Item>
		<set_Item set="method" override="1">
			<f a="index:value">
				<x path="Int"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Item>
		<Reverse public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><Reverse public="1" set="method">
	<f a="index:count">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</Reverse></overloads>
		</Reverse>
		<SetRange public="1" set="method" override="1">
			<f a="index:c">
				<x path="Int"/>
				<c path="cs.system.collections.ICollection"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetRange>
		<Sort public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Sort public="1" set="method">
					<f a="index:count:comparer">
						<x path="Int"/>
						<x path="Int"/>
						<c path="cs.system.collections.IComparer"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sort>
				<Sort public="1" set="method">
					<f a="comparer">
						<c path="cs.system.collections.IComparer"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sort>
			</overloads>
		</Sort>
		<new final="1" public="1" set="method">
			<f a="innerArrayList">
				<c path="cs.system.collections.ArrayList"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ArrayList.ReadOnlyArrayListWrapper"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.ArrayList_SynchronizedArrayListWrapper" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.ArrayList" module="cs.system.collections.ArrayList" extern="1">
		<extends path="cs.system.collections.ArrayList_ArrayListWrapper"/>
		<SyncRoot public="1" get="accessor" set="null" override="1"><d/></SyncRoot>
		<IsSynchronized public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsSynchronized>
		<IsReadOnly public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsReadOnly>
		<IsFixedSize public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsFixedSize>
		<Capacity public="1" get="accessor" set="accessor" override="1"><x path="Int"/></Capacity>
		<Count public="1" get="accessor" set="null" override="1"><x path="Int"/></Count>
		<get_Item set="method" override="1">
			<f a="index">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</get_Item>
		<set_Item set="method" override="1">
			<f a="index:value">
				<x path="Int"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Item>
		<get_Count set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Count>
		<get_Capacity set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Capacity>
		<set_Capacity set="method" override="1">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Capacity>
		<get_IsFixedSize set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFixedSize>
		<get_IsReadOnly set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsReadOnly>
		<get_IsSynchronized set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSynchronized>
		<get_SyncRoot set="method" override="1">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_SyncRoot>
		<Add public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Add>
		<Clear public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Clear>
		<Contains public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Contains>
		<IndexOf public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<IndexOf public="1" set="method">
					<f a="value:startIndex:count">
						<d/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IndexOf>
				<IndexOf public="1" set="method">
					<f a="value:startIndex">
						<d/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IndexOf>
			</overloads>
		</IndexOf>
		<LastIndexOf public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<LastIndexOf public="1" set="method">
					<f a="value:startIndex:count">
						<d/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
				<LastIndexOf public="1" set="method">
					<f a="value:startIndex">
						<d/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
			</overloads>
		</LastIndexOf>
		<Insert public="1" set="method" override="1">
			<f a="index:value">
				<x path="Int"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Insert>
		<InsertRange public="1" set="method" override="1">
			<f a="index:c">
				<x path="Int"/>
				<c path="cs.system.collections.ICollection"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</InsertRange>
		<Remove public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Remove>
		<RemoveAt public="1" set="method" override="1">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveAt>
		<RemoveRange public="1" set="method" override="1">
			<f a="index:count">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveRange>
		<Reverse public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><Reverse public="1" set="method">
	<f a="index:count">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</Reverse></overloads>
		</Reverse>
		<CopyTo public="1" set="method" override="1">
			<f a="array">
				<c path="cs.system.Array"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<CopyTo public="1" set="method">
					<f a="index:array:arrayIndex:count">
						<x path="Int"/>
						<c path="cs.system.Array"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CopyTo>
				<CopyTo public="1" set="method">
					<f a="array:index">
						<c path="cs.system.Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CopyTo>
			</overloads>
		</CopyTo>
		<GetEnumerator public="1" set="method" override="1">
			<f a=""><c path="cs.system.collections.IEnumerator"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetEnumerator public="1" set="method">
	<f a="index:count">
		<x path="Int"/>
		<x path="Int"/>
		<c path="cs.system.collections.IEnumerator"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetEnumerator></overloads>
		</GetEnumerator>
		<AddRange public="1" set="method" override="1">
			<f a="c">
				<c path="cs.system.collections.ICollection"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddRange>
		<BinarySearch public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<BinarySearch public="1" set="method">
					<f a="index:count:value:comparer">
						<x path="Int"/>
						<x path="Int"/>
						<d/>
						<c path="cs.system.collections.IComparer"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</BinarySearch>
				<BinarySearch public="1" set="method">
					<f a="value:comparer">
						<d/>
						<c path="cs.system.collections.IComparer"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</BinarySearch>
			</overloads>
		</BinarySearch>
		<Clone public="1" set="method" override="1">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</Clone>
		<GetRange public="1" set="method" override="1">
			<f a="index:count">
				<x path="Int"/>
				<x path="Int"/>
				<c path="cs.system.collections.ArrayList"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetRange>
		<TrimToSize public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</TrimToSize>
		<Sort public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Sort public="1" set="method">
					<f a="index:count:comparer">
						<x path="Int"/>
						<x path="Int"/>
						<c path="cs.system.collections.IComparer"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sort>
				<Sort public="1" set="method">
					<f a="comparer">
						<c path="cs.system.collections.IComparer"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sort>
			</overloads>
		</Sort>
		<ToArray public="1" set="method" override="1">
			<f a=""><c path="cs.NativeArray"><d/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><ToArray public="1" set="method">
	<f a="elementType">
		<c path="cs.system.Type"/>
		<c path="cs.system.Array"/>
	</f>
	<meta><m n=":overload"/></meta>
</ToArray></overloads>
		</ToArray>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ArrayList.SynchronizedArrayListWrapper"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.ArrayList_ArrayListAdapter_EnumeratorWithRange" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.ArrayList" module="cs.system.collections.ArrayList" extern="1">
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.collections.IEnumerator"/>
		<Current public="1" get="accessor" set="null"><d/></Current>
		<Clone final="1" public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</Clone>
		<get_Current final="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_Current>
		<MoveNext final="1" public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</MoveNext>
		<Reset final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Reset>
		<new final="1" public="1" set="method">
			<f a="enumerator:index:count">
				<c path="cs.system.collections.IEnumerator"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ArrayList.ArrayListAdapter.EnumeratorWithRange"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.ArrayList_ArrayListAdapter" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.ArrayList" module="cs.system.collections.ArrayList" extern="1">
		<extends path="cs.system.collections.ArrayList"/>
		<IsSynchronized public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsSynchronized>
		<SyncRoot public="1" get="accessor" set="null" override="1"><d/></SyncRoot>
		<IsReadOnly public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsReadOnly>
		<IsFixedSize public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsFixedSize>
		<Capacity public="1" get="accessor" set="accessor" override="1"><x path="Int"/></Capacity>
		<Count public="1" get="accessor" set="null" override="1"><x path="Int"/></Count>
		<get_Item set="method" override="1">
			<f a="index">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</get_Item>
		<set_Item set="method" override="1">
			<f a="index:value">
				<x path="Int"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Item>
		<get_Count set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Count>
		<get_Capacity set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Capacity>
		<set_Capacity set="method" override="1">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Capacity>
		<get_IsFixedSize set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFixedSize>
		<get_IsReadOnly set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsReadOnly>
		<get_SyncRoot set="method" override="1">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_SyncRoot>
		<Add public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Add>
		<Clear public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Clear>
		<Contains public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Contains>
		<IndexOf public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<IndexOf public="1" set="method">
					<f a="value:startIndex:count">
						<d/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IndexOf>
				<IndexOf public="1" set="method">
					<f a="value:startIndex">
						<d/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IndexOf>
			</overloads>
		</IndexOf>
		<LastIndexOf public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<LastIndexOf public="1" set="method">
					<f a="value:startIndex:count">
						<d/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
				<LastIndexOf public="1" set="method">
					<f a="value:startIndex">
						<d/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
			</overloads>
		</LastIndexOf>
		<Insert public="1" set="method" override="1">
			<f a="index:value">
				<x path="Int"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Insert>
		<InsertRange public="1" set="method" override="1">
			<f a="index:c">
				<x path="Int"/>
				<c path="cs.system.collections.ICollection"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</InsertRange>
		<Remove public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Remove>
		<RemoveAt public="1" set="method" override="1">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveAt>
		<RemoveRange public="1" set="method" override="1">
			<f a="index:count">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveRange>
		<Reverse public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><Reverse public="1" set="method">
	<f a="index:count">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</Reverse></overloads>
		</Reverse>
		<SetRange public="1" set="method" override="1">
			<f a="index:c">
				<x path="Int"/>
				<c path="cs.system.collections.ICollection"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetRange>
		<CopyTo public="1" set="method" override="1">
			<f a="array">
				<c path="cs.system.Array"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<CopyTo public="1" set="method">
					<f a="index:array:arrayIndex:count">
						<x path="Int"/>
						<c path="cs.system.Array"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CopyTo>
				<CopyTo public="1" set="method">
					<f a="array:index">
						<c path="cs.system.Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CopyTo>
			</overloads>
		</CopyTo>
		<get_IsSynchronized set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSynchronized>
		<GetEnumerator public="1" set="method" override="1">
			<f a=""><c path="cs.system.collections.IEnumerator"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetEnumerator public="1" set="method">
	<f a="index:count">
		<x path="Int"/>
		<x path="Int"/>
		<c path="cs.system.collections.IEnumerator"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetEnumerator></overloads>
		</GetEnumerator>
		<AddRange public="1" set="method" override="1">
			<f a="c">
				<c path="cs.system.collections.ICollection"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddRange>
		<BinarySearch public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<BinarySearch public="1" set="method">
					<f a="index:count:value:comparer">
						<x path="Int"/>
						<x path="Int"/>
						<d/>
						<c path="cs.system.collections.IComparer"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</BinarySearch>
				<BinarySearch public="1" set="method">
					<f a="value:comparer">
						<d/>
						<c path="cs.system.collections.IComparer"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</BinarySearch>
			</overloads>
		</BinarySearch>
		<Clone public="1" set="method" override="1">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</Clone>
		<GetRange public="1" set="method" override="1">
			<f a="index:count">
				<x path="Int"/>
				<x path="Int"/>
				<c path="cs.system.collections.ArrayList"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetRange>
		<TrimToSize public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</TrimToSize>
		<Sort public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Sort public="1" set="method">
					<f a="index:count:comparer">
						<x path="Int"/>
						<x path="Int"/>
						<c path="cs.system.collections.IComparer"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sort>
				<Sort public="1" set="method">
					<f a="comparer">
						<c path="cs.system.collections.IComparer"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Sort>
			</overloads>
		</Sort>
		<ToArray public="1" set="method" override="1">
			<f a=""><c path="cs.NativeArray"><d/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><ToArray public="1" set="method">
	<f a="elementType">
		<c path="cs.system.Type"/>
		<c path="cs.system.Array"/>
	</f>
	<meta><m n=":overload"/></meta>
</ToArray></overloads>
		</ToArray>
		<new final="1" public="1" set="method">
			<f a="adaptee">
				<c path="cs.system.collections.IList"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ArrayList.ArrayListAdapter"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.ArrayList_SimpleEnumerator" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.ArrayList" module="cs.system.collections.ArrayList" extern="1">
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.collections.IEnumerator"/>
		<Current public="1" get="accessor" set="null"><d/></Current>
		<Clone final="1" public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</Clone>
		<MoveNext final="1" public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</MoveNext>
		<get_Current final="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_Current>
		<Reset final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Reset>
		<new final="1" public="1" set="method">
			<f a="list">
				<c path="cs.system.collections.ArrayList"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ArrayList.SimpleEnumerator"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.ArrayList_ArrayListEnumerator" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.ArrayList" module="cs.system.collections.ArrayList" extern="1">
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.collections.IEnumerator"/>
		<Current public="1" get="accessor" set="null"><d/></Current>
		<Clone final="1" public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</Clone>
		<get_Current final="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_Current>
		<MoveNext final="1" public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</MoveNext>
		<Reset final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Reset>
		<new final="1" public="1" set="method">
			<f a="list">
				<c path="cs.system.collections.ArrayList"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new final="1" public="1" set="method">
	<f a="list:index:count">
		<c path="cs.system.collections.ArrayList"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ArrayList.ArrayListEnumerator"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.DictionaryEntry" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.DictionaryEntry" extern="1">
		<extends path="cs.system.ValueType"/>
		<Value public="1" get="accessor" set="accessor"><d/></Value>
		<Key public="1" get="accessor" set="accessor"><d/></Key>
		<get_Key final="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_Key>
		<set_Key final="1" set="method">
			<f a="value">
				<d/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Key>
		<get_Value final="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_Value>
		<set_Value final="1" set="method">
			<f a="value">
				<d/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Value>
		<new final="1" public="1" set="method">
			<f a="key:value">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.DictionaryEntry"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.IDictionary" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.IDictionary" extern="1" interface="1">
		<extends path="cs.system.collections.ICollection"/>
		<extends path="cs.system.collections.IEnumerable"/>
		<extends path="ArrayAccess"><d/></extends>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<IsSynchronized public="1" get="accessor" set="null"><x path="Bool"/></IsSynchronized>
		<SyncRoot public="1" get="accessor" set="null"><d/></SyncRoot>
		<Values public="1" get="accessor" set="null"><c path="cs.system.collections.ICollection"/></Values>
		<Keys public="1" get="accessor" set="null"><c path="cs.system.collections.ICollection"/></Keys>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<IsFixedSize public="1" get="accessor" set="null"><x path="Bool"/></IsFixedSize>
		<CopyTo public="1" set="method">
			<f a="array:index">
				<c path="cs.system.Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CopyTo>
		<get_SyncRoot set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_SyncRoot>
		<get_IsSynchronized set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSynchronized>
		<get_Count set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Count>
		<get_IsFixedSize set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFixedSize>
		<get_IsReadOnly set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsReadOnly>
		<get_Item set="method">
			<f a="key">
				<d/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</get_Item>
		<set_Item set="method">
			<f a="key:value">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Item>
		<get_Keys set="method">
			<f a=""><c path="cs.system.collections.ICollection"/></f>
			<meta><m n=":overload"/></meta>
		</get_Keys>
		<get_Values set="method">
			<f a=""><c path="cs.system.collections.ICollection"/></f>
			<meta><m n=":overload"/></meta>
		</get_Values>
		<Add public="1" set="method">
			<f a="key:value">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Add>
		<Clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Clear>
		<Contains public="1" set="method">
			<f a="key">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Contains>
		<GetEnumerator public="1" set="method">
			<f a=""><c path="cs.system.collections.IDictionaryEnumerator"/></f>
			<meta><m n=":overload"/></meta>
		</GetEnumerator>
		<Remove public="1" set="method">
			<f a="key">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Remove>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.IDictionary"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.serialization.IDeserializationCallback" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.serialization.IDeserializationCallback" extern="1" interface="1">
		<OnDeserialization public="1" set="method">
			<f a="sender">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</OnDeserialization>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Serialization.IDeserializationCallback"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.Hashtable" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.Hashtable" extern="1">
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.collections.ICollection"/>
		<implements path="cs.system.collections.IDictionary"/>
		<implements path="cs.system.collections.IEnumerable"/>
		<implements path="cs.system.runtime.serialization.IDeserializationCallback"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<Synchronized final="1" public="1" set="method" static="1">
			<f a="table">
				<c path="cs.system.collections.Hashtable"/>
				<c path="cs.system.collections.Hashtable"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Synchronized>
		<Values public="1" get="accessor" set="null"><c path="cs.system.collections.ICollection"/></Values>
		<Keys public="1" get="accessor" set="null"><c path="cs.system.collections.ICollection"/></Keys>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<IsFixedSize public="1" get="accessor" set="null"><x path="Bool"/></IsFixedSize>
		<SyncRoot public="1" get="accessor" set="null"><d/></SyncRoot>
		<IsSynchronized public="1" get="accessor" set="null"><x path="Bool"/></IsSynchronized>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<EqualityComparer get="null" set="null"><c path="cs.system.collections.IEqualityComparer"/></EqualityComparer>
		<hcp get="null" set="null"><c path="cs.system.collections.IHashCodeProvider"/></hcp>
		<comparer get="null" set="null"><c path="cs.system.collections.IComparer"/></comparer>
		<set_comparer final="1" set="method">
			<f a="value">
				<c path="cs.system.collections.IComparer"/>
				<c path="cs.system.collections.IComparer"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</set_comparer>
		<get_comparer final="1" set="method">
			<f a=""><c path="cs.system.collections.IComparer"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</get_comparer>
		<set_hcp final="1" set="method">
			<f a="value">
				<c path="cs.system.collections.IHashCodeProvider"/>
				<c path="cs.system.collections.IHashCodeProvider"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</set_hcp>
		<get_hcp final="1" set="method">
			<f a=""><c path="cs.system.collections.IHashCodeProvider"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</get_hcp>
		<get_EqualityComparer final="1" set="method">
			<f a=""><c path="cs.system.collections.IEqualityComparer"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</get_EqualityComparer>
		<get_Count set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Count>
		<get_IsSynchronized set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSynchronized>
		<get_SyncRoot set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_SyncRoot>
		<get_IsFixedSize set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFixedSize>
		<get_IsReadOnly set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsReadOnly>
		<get_Keys set="method">
			<f a=""><c path="cs.system.collections.ICollection"/></f>
			<meta><m n=":overload"/></meta>
		</get_Keys>
		<get_Values set="method">
			<f a=""><c path="cs.system.collections.ICollection"/></f>
			<meta><m n=":overload"/></meta>
		</get_Values>
		<get_Item set="method">
			<f a="key">
				<d/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</get_Item>
		<set_Item set="method">
			<f a="key:value">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Item>
		<CopyTo public="1" set="method">
			<f a="array:arrayIndex">
				<c path="cs.system.Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CopyTo>
		<Add public="1" set="method">
			<f a="key:value">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Add>
		<Clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Clear>
		<Contains public="1" set="method">
			<f a="key">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Contains>
		<GetEnumerator public="1" set="method">
			<f a=""><c path="cs.system.collections.IDictionaryEnumerator"/></f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":overload"/>
			</meta>
		</GetEnumerator>
		<Remove public="1" set="method">
			<f a="key">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Remove>
		<ContainsKey public="1" set="method">
			<f a="key">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ContainsKey>
		<ContainsValue public="1" set="method">
			<f a="value">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ContainsValue>
		<Clone public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</Clone>
		<GetObjectData public="1" set="method">
			<f a="info:context">
				<c path="cs.system.runtime.serialization.SerializationInfo"/>
				<c path="cs.system.runtime.serialization.StreamingContext"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetObjectData>
		<OnDeserialization public="1" set="method">
			<f a="sender">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</OnDeserialization>
		<GetHash set="method">
			<f a="key">
				<d/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</GetHash>
		<KeyEquals set="method">
			<f a="item:key">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</KeyEquals>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="capacity:loadFactor:equalityComparer">
						<x path="Int"/>
						<x path="Single"/>
						<c path="cs.system.collections.IEqualityComparer"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="capacity:equalityComparer">
						<x path="Int"/>
						<c path="cs.system.collections.IEqualityComparer"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="equalityComparer">
						<c path="cs.system.collections.IEqualityComparer"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="d:loadFactor:equalityComparer">
						<c path="cs.system.collections.IDictionary"/>
						<x path="Single"/>
						<c path="cs.system.collections.IEqualityComparer"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="d:equalityComparer">
						<c path="cs.system.collections.IDictionary"/>
						<c path="cs.system.collections.IEqualityComparer"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" set="method">
					<f a="info:context">
						<c path="cs.system.runtime.serialization.SerializationInfo"/>
						<c path="cs.system.runtime.serialization.StreamingContext"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":protected"/>
						<m n=":overload"/>
					</meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="hcp:comparer">
						<c path="cs.system.collections.IHashCodeProvider"/>
						<c path="cs.system.collections.IComparer"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="d:hcp:comparer">
						<c path="cs.system.collections.IDictionary"/>
						<c path="cs.system.collections.IHashCodeProvider"/>
						<c path="cs.system.collections.IComparer"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="d">
						<c path="cs.system.collections.IDictionary"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="d:loadFactor">
						<c path="cs.system.collections.IDictionary"/>
						<x path="Single"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="d:loadFactor:hcp:comparer">
						<c path="cs.system.collections.IDictionary"/>
						<x path="Single"/>
						<c path="cs.system.collections.IHashCodeProvider"/>
						<c path="cs.system.collections.IComparer"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="capacity:hcp:comparer">
						<x path="Int"/>
						<c path="cs.system.collections.IHashCodeProvider"/>
						<c path="cs.system.collections.IComparer"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="capacity">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="capacity:loadFactor">
						<x path="Int"/>
						<x path="Single"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="capacity:loadFactor:hcp:comparer">
						<x path="Int"/>
						<x path="Single"/>
						<c path="cs.system.collections.IHashCodeProvider"/>
						<c path="cs.system.collections.IComparer"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.Hashtable"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.Hashtable_SyncHashtable" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.Hashtable" module="cs.system.collections.Hashtable" extern="1">
		<extends path="cs.system.collections.Hashtable"/>
		<implements path="cs.system.collections.IEnumerable"/>
		<Values public="1" get="accessor" set="null" override="1"><c path="cs.system.collections.ICollection"/></Values>
		<Keys public="1" get="accessor" set="null" override="1"><c path="cs.system.collections.ICollection"/></Keys>
		<IsReadOnly public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsReadOnly>
		<IsFixedSize public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsFixedSize>
		<SyncRoot public="1" get="accessor" set="null" override="1"><d/></SyncRoot>
		<IsSynchronized public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsSynchronized>
		<Count public="1" get="accessor" set="null" override="1"><x path="Int"/></Count>
		<GetObjectData public="1" set="method" override="1">
			<f a="info:context">
				<c path="cs.system.runtime.serialization.SerializationInfo"/>
				<c path="cs.system.runtime.serialization.StreamingContext"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetObjectData>
		<get_Count set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Count>
		<get_IsSynchronized set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSynchronized>
		<get_SyncRoot set="method" override="1">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_SyncRoot>
		<get_IsFixedSize set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFixedSize>
		<get_IsReadOnly set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsReadOnly>
		<get_Keys set="method" override="1">
			<f a=""><c path="cs.system.collections.ICollection"/></f>
			<meta><m n=":overload"/></meta>
		</get_Keys>
		<get_Values set="method" override="1">
			<f a=""><c path="cs.system.collections.ICollection"/></f>
			<meta><m n=":overload"/></meta>
		</get_Values>
		<get_Item set="method" override="1">
			<f a="key">
				<d/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</get_Item>
		<set_Item set="method" override="1">
			<f a="key:value">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Item>
		<CopyTo public="1" set="method" override="1">
			<f a="array:arrayIndex">
				<c path="cs.system.Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CopyTo>
		<Add public="1" set="method" override="1">
			<f a="key:value">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Add>
		<Clear public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Clear>
		<Contains public="1" set="method" override="1">
			<f a="key">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Contains>
		<GetEnumerator public="1" set="method" override="1">
			<f a=""><c path="cs.system.collections.IDictionaryEnumerator"/></f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":overload"/>
			</meta>
		</GetEnumerator>
		<Remove public="1" set="method" override="1">
			<f a="key">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Remove>
		<ContainsKey public="1" set="method" override="1">
			<f a="key">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ContainsKey>
		<ContainsValue public="1" set="method" override="1">
			<f a="value">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ContainsValue>
		<Clone public="1" set="method" override="1">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</Clone>
		<new final="1" public="1" set="method">
			<f a="host">
				<c path="cs.system.collections.Hashtable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.Hashtable.SyncHashtable"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.Hashtable_HashValues" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.Hashtable" module="cs.system.collections.Hashtable" extern="1">
		<implements path="cs.system.collections.ICollection"/>
		<implements path="cs.system.collections.IEnumerable"/>
		<SyncRoot public="1" get="accessor" set="null"><d/></SyncRoot>
		<IsSynchronized public="1" get="accessor" set="null"><x path="Bool"/></IsSynchronized>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<get_Count set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Count>
		<get_IsSynchronized set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSynchronized>
		<get_SyncRoot set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_SyncRoot>
		<CopyTo public="1" set="method">
			<f a="array:arrayIndex">
				<c path="cs.system.Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CopyTo>
		<GetEnumerator public="1" set="method">
			<f a=""><c path="cs.system.collections.IEnumerator"/></f>
			<meta><m n=":overload"/></meta>
		</GetEnumerator>
		<new final="1" public="1" set="method">
			<f a="host">
				<c path="cs.system.collections.Hashtable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.Hashtable.HashValues"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.Hashtable_HashKeys" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.Hashtable" module="cs.system.collections.Hashtable" extern="1">
		<implements path="cs.system.collections.ICollection"/>
		<implements path="cs.system.collections.IEnumerable"/>
		<SyncRoot public="1" get="accessor" set="null"><d/></SyncRoot>
		<IsSynchronized public="1" get="accessor" set="null"><x path="Bool"/></IsSynchronized>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<get_Count set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Count>
		<get_IsSynchronized set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSynchronized>
		<get_SyncRoot set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_SyncRoot>
		<CopyTo public="1" set="method">
			<f a="array:arrayIndex">
				<c path="cs.system.Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CopyTo>
		<GetEnumerator public="1" set="method">
			<f a=""><c path="cs.system.collections.IEnumerator"/></f>
			<meta><m n=":overload"/></meta>
		</GetEnumerator>
		<new final="1" public="1" set="method">
			<f a="host">
				<c path="cs.system.collections.Hashtable"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.Hashtable.HashKeys"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.IDictionaryEnumerator" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.IDictionaryEnumerator" extern="1" interface="1">
		<extends path="cs.system.collections.IEnumerator"/>
		<Current public="1" get="accessor" set="null"><d/></Current>
		<Value public="1" get="accessor" set="null"><d/></Value>
		<Key public="1" get="accessor" set="null"><d/></Key>
		<Entry public="1" get="accessor" set="null"><c path="cs.system.collections.DictionaryEntry"/></Entry>
		<Reset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Reset>
		<MoveNext public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</MoveNext>
		<get_Current set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_Current>
		<get_Entry set="method">
			<f a=""><c path="cs.system.collections.DictionaryEntry"/></f>
			<meta><m n=":overload"/></meta>
		</get_Entry>
		<get_Key set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_Key>
		<get_Value set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_Value>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.IDictionaryEnumerator"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.Hashtable_Enumerator" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.Hashtable" module="cs.system.collections.Hashtable" extern="1">
		<implements path="cs.system.collections.IDictionaryEnumerator"/>
		<implements path="cs.system.collections.IEnumerator"/>
		<Current public="1" get="accessor" set="null"><d/></Current>
		<Value public="1" get="accessor" set="null"><d/></Value>
		<Key public="1" get="accessor" set="null"><d/></Key>
		<Entry public="1" get="accessor" set="null"><c path="cs.system.collections.DictionaryEntry"/></Entry>
		<Reset final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Reset>
		<MoveNext final="1" public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</MoveNext>
		<get_Entry final="1" set="method">
			<f a=""><c path="cs.system.collections.DictionaryEntry"/></f>
			<meta><m n=":overload"/></meta>
		</get_Entry>
		<get_Key final="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_Key>
		<get_Value final="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_Value>
		<get_Current final="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_Current>
		<new final="1" public="1" set="method">
			<f a="host:mode">
				<c path="cs.system.collections.Hashtable"/>
				<e path="cs.system.collections.Hashtable_EnumeratorMode"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new final="1" public="1" set="method">
	<f a="host">
		<c path="cs.system.collections.Hashtable"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.Hashtable.Enumerator"</e></m>
		</meta>
	</class>
	<enum path="cs.system.collections.Hashtable_EnumeratorMode" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.Hashtable" module="cs.system.collections.Hashtable">
		<KEY_MODE><meta><m n=":csNative"><e>0</e></m></meta></KEY_MODE>
		<VALUE_MODE><meta><m n=":csNative"><e>1</e></m></meta></VALUE_MODE>
		<ENTRY_MODE><meta><m n=":csNative"><e>2</e></m></meta></ENTRY_MODE>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Collections.Hashtable.EnumeratorMode"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.runtime.serialization.IObjectReference" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.serialization.IObjectReference" extern="1" interface="1">
		<GetRealObject public="1" set="method">
			<f a="context">
				<c path="cs.system.runtime.serialization.StreamingContext"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetRealObject>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Serialization.IObjectReference"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.Hashtable_KeyMarker" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.Hashtable" module="cs.system.collections.Hashtable" extern="1">
		<implements path="cs.system.runtime.serialization.IObjectReference"/>
		<Removed public="1" set="null" static="1">
			<c path="cs.system.collections.Hashtable_KeyMarker"/>
			<meta><m n=":readOnly"/></meta>
		</Removed>
		<GetRealObject final="1" public="1" set="method">
			<f a="context">
				<c path="cs.system.runtime.serialization.StreamingContext"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetRealObject>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.Hashtable.KeyMarker"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.Hashtable_Slot" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.Hashtable" module="cs.system.collections.Hashtable" extern="1">
		<extends path="cs.system.ValueType"/>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.Hashtable.Slot"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.IComparer" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.IComparer" extern="1" interface="1">
		<Compare public="1" set="method">
			<f a="x:y">
				<d/>
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Compare>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.IComparer"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.IEqualityComparer" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.IEqualityComparer" extern="1" interface="1"><meta>
	<m n=":nativeGen"/>
	<m n=":abstract"/>
	<m n=":libType"/>
	<m n=":csNative"/>
	<m n=":native"><e>"System.Collections.IEqualityComparer"</e></m>
</meta></class>
	<class path="cs.system.collections.IHashCodeProvider" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.IHashCodeProvider" extern="1" interface="1"><meta>
	<m n=":nativeGen"/>
	<m n=":abstract"/>
	<m n=":libType"/>
	<m n=":csNative"/>
	<m n=":native"><e>"System.Collections.IHashCodeProvider"</e></m>
</meta></class>
	<class path="cs.system.collections.ReadOnlyCollectionBase" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.ReadOnlyCollectionBase" extern="1">
		<implements path="cs.system.collections.ICollection"/>
		<implements path="cs.system.collections.IEnumerable"/>
		<InnerList get="null" set="null"><c path="cs.system.collections.ArrayList"/></InnerList>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<get_Count set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Count>
		<GetEnumerator public="1" set="method">
			<f a=""><c path="cs.system.collections.IEnumerator"/></f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":overload"/>
			</meta>
		</GetEnumerator>
		<get_InnerList final="1" set="method">
			<f a=""><c path="cs.system.collections.ArrayList"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</get_InnerList>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ReadOnlyCollectionBase"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.generic.ICollection_1" params="T0" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.generic.ICollection_1" extern="1" interface="1">
		<extends path="cs.system.collections.generic.IEnumerable_1"><c path="cs.system.collections.generic.ICollection_1.T0"/></extends>
		<extends path="cs.system.collections.IEnumerable"/>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<GetEnumerator public="1" set="method">
			<f a=""><c path="cs.system.collections.generic.IEnumerator_1"><c path="cs.system.collections.generic.ICollection_1.T0"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetEnumerator>
		<get_Count set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Count>
		<get_IsReadOnly set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsReadOnly>
		<Add public="1" set="method">
			<f a="item">
				<c path="cs.system.collections.generic.ICollection_1.T0"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Add>
		<Clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Clear>
		<Contains public="1" set="method">
			<f a="item">
				<c path="cs.system.collections.generic.ICollection_1.T0"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Contains>
		<CopyTo public="1" set="method">
			<f a="array:arrayIndex">
				<c path="cs.NativeArray"><c path="cs.system.collections.generic.ICollection_1.T0"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CopyTo>
		<Remove public="1" set="method">
			<f a="item">
				<c path="cs.system.collections.generic.ICollection_1.T0"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Remove>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.Generic.ICollection`1"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.generic.IComparer_1" params="T0" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.generic.IComparer_1" extern="1" interface="1">
		<Compare public="1" set="method">
			<f a="x:y">
				<c path="cs.system.collections.generic.IComparer_1.T0"/>
				<c path="cs.system.collections.generic.IComparer_1.T0"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Compare>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.Generic.IComparer`1"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.generic.IList_1" params="T0" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.generic.IList_1" extern="1" interface="1">
		<extends path="cs.system.collections.generic.ICollection_1"><c path="cs.system.collections.generic.IList_1.T0"/></extends>
		<extends path="cs.system.collections.generic.IEnumerable_1"><c path="cs.system.collections.generic.IList_1.T0"/></extends>
		<extends path="cs.system.collections.IEnumerable"/>
		<extends path="ArrayAccess"><c path="cs.system.collections.generic.IList_1.T0"/></extends>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<Remove public="1" set="method">
			<f a="item">
				<c path="cs.system.collections.generic.IList_1.T0"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Remove>
		<CopyTo public="1" set="method">
			<f a="array:arrayIndex">
				<c path="cs.NativeArray"><c path="cs.system.collections.generic.IList_1.T0"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CopyTo>
		<Contains public="1" set="method">
			<f a="item">
				<c path="cs.system.collections.generic.IList_1.T0"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Contains>
		<Clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Clear>
		<Add public="1" set="method">
			<f a="item">
				<c path="cs.system.collections.generic.IList_1.T0"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Add>
		<get_IsReadOnly set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsReadOnly>
		<get_Count set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Count>
		<GetEnumerator public="1" set="method">
			<f a=""><c path="cs.system.collections.generic.IEnumerator_1"><c path="cs.system.collections.generic.IList_1.T0"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetEnumerator>
		<IndexOf public="1" set="method">
			<f a="item">
				<c path="cs.system.collections.generic.IList_1.T0"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IndexOf>
		<Insert public="1" set="method">
			<f a="index:item">
				<x path="Int"/>
				<c path="cs.system.collections.generic.IList_1.T0"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Insert>
		<RemoveAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveAt>
		<get_Item set="method">
			<f a="index">
				<x path="Int"/>
				<c path="cs.system.collections.generic.IList_1.T0"/>
			</f>
			<meta><m n=":overload"/></meta>
		</get_Item>
		<set_Item set="method">
			<f a="index:value">
				<x path="Int"/>
				<c path="cs.system.collections.generic.IList_1.T0"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Item>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.Generic.IList`1"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.objectmodel.ReadOnlyCollection_1" params="T0" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.collections.objectmodel.ReadOnlyCollection_1" extern="1">
		<implements path="cs.system.collections.generic.ICollection_1"><c path="cs.system.collections.objectmodel.ReadOnlyCollection_1.T0"/></implements>
		<implements path="cs.system.collections.generic.IList_1"><c path="cs.system.collections.objectmodel.ReadOnlyCollection_1.T0"/></implements>
		<implements path="cs.system.collections.generic.IEnumerable_1"><c path="cs.system.collections.objectmodel.ReadOnlyCollection_1.T0"/></implements>
		<implements path="cs.system.collections.ICollection"/>
		<implements path="cs.system.collections.IEnumerable"/>
		<implements path="cs.system.collections.IList"/>
		<Items get="null" set="null"><c path="cs.system.collections.generic.IList_1"><c path="cs.system.collections.objectmodel.ReadOnlyCollection_1.T0"/></c></Items>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<Contains final="1" public="1" set="method">
			<f a="value">
				<c path="cs.system.collections.objectmodel.ReadOnlyCollection_1.T0"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":overload"/>
			</meta>
		</Contains>
		<CopyTo final="1" public="1" set="method">
			<f a="array:index">
				<c path="cs.NativeArray"><c path="cs.system.collections.objectmodel.ReadOnlyCollection_1.T0"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":overload"/>
			</meta>
		</CopyTo>
		<GetEnumerator final="1" public="1" set="method">
			<f a=""><c path="cs.system.collections.generic.IEnumerator_1"><c path="cs.system.collections.objectmodel.ReadOnlyCollection_1.T0"/></c></f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":overload"/>
			</meta>
		</GetEnumerator>
		<IndexOf final="1" public="1" set="method">
			<f a="value">
				<c path="cs.system.collections.objectmodel.ReadOnlyCollection_1.T0"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":overload"/>
			</meta>
		</IndexOf>
		<get_Count final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Count>
		<get_Items final="1" set="method">
			<f a=""><c path="cs.system.collections.generic.IList_1"><c path="cs.system.collections.objectmodel.ReadOnlyCollection_1.T0"/></c></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</get_Items>
		<get_Item final="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="cs.system.collections.objectmodel.ReadOnlyCollection_1.T0"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":overload"/>
			</meta>
		</get_Item>
		<new final="1" public="1" set="method">
			<f a="list">
				<c path="cs.system.collections.generic.IList_1"><c path="cs.system.collections.objectmodel.ReadOnlyCollection_1.T0"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.ObjectModel.ReadOnlyCollection`1"</e></m>
		</meta>
	</class>
	<class path="cs.system.collections.specialized.StringDictionary" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.collections.specialized.StringDictionary" extern="1">
		<implements path="cs.system.collections.IEnumerable"/>
		<SyncRoot public="1" get="accessor" set="null"><d/></SyncRoot>
		<Values public="1" get="accessor" set="null"><c path="cs.system.collections.ICollection"/></Values>
		<Keys public="1" get="accessor" set="null"><c path="cs.system.collections.ICollection"/></Keys>
		<IsSynchronized public="1" get="accessor" set="null"><x path="Bool"/></IsSynchronized>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<get_Count set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Count>
		<get_IsSynchronized set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSynchronized>
		<get_Item set="method">
			<f a="key">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</get_Item>
		<set_Item set="method">
			<f a="key:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Item>
		<get_Keys set="method">
			<f a=""><c path="cs.system.collections.ICollection"/></f>
			<meta><m n=":overload"/></meta>
		</get_Keys>
		<get_Values set="method">
			<f a=""><c path="cs.system.collections.ICollection"/></f>
			<meta><m n=":overload"/></meta>
		</get_Values>
		<get_SyncRoot set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_SyncRoot>
		<Add public="1" set="method">
			<f a="key:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Add>
		<Clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Clear>
		<ContainsKey public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ContainsKey>
		<ContainsValue public="1" set="method">
			<f a="value">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ContainsValue>
		<CopyTo public="1" set="method">
			<f a="array:index">
				<c path="cs.system.Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CopyTo>
		<GetEnumerator public="1" set="method">
			<f a=""><c path="cs.system.collections.IEnumerator"/></f>
			<meta><m n=":overload"/></meta>
		</GetEnumerator>
		<Remove public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Remove>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Collections.Specialized.StringDictionary"</e></m>
		</meta>
	</class>
	<class path="cs.system.componentmodel.IComponent" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.componentmodel.IComponent" extern="1" interface="1">
		<extends path="cs.system.IDisposable"/>
		<Disposed>
			<x path="cs.system.EventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</Disposed>
		<Site public="1" get="accessor" set="accessor"><c path="cs.system.componentmodel.ISite"/></Site>
		<Dispose public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Dispose>
		<add_Disposed public="1" set="method">
			<f a="value">
				<x path="cs.system.EventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add_Disposed>
		<remove_Disposed public="1" set="method">
			<f a="value">
				<x path="cs.system.EventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove_Disposed>
		<get_Site set="method">
			<f a=""><c path="cs.system.componentmodel.ISite"/></f>
			<meta><m n=":overload"/></meta>
		</get_Site>
		<set_Site set="method">
			<f a="value">
				<c path="cs.system.componentmodel.ISite"/>
				<c path="cs.system.componentmodel.ISite"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Site>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ComponentModel.IComponent"</e></m>
		</meta>
	</class>
	<class path="cs.system.componentmodel.Component" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.componentmodel.Component" extern="1">
		<extends path="cs.system.MarshalByRefObject"/>
		<implements path="cs.system.IDisposable"/>
		<implements path="cs.system.componentmodel.IComponent"/>
		<Disposed>
			<x path="cs.system.EventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</Disposed>
		<Events get="null" set="null"><c path="cs.system.componentmodel.EventHandlerList"/></Events>
		<DesignMode get="null" set="null"><x path="Bool"/></DesignMode>
		<Container public="1" get="accessor" set="null"><c path="cs.system.componentmodel.IContainer"/></Container>
		<Site public="1" get="accessor" set="accessor"><c path="cs.system.componentmodel.ISite"/></Site>
		<CanRaiseEvents get="null" set="null"><x path="Bool"/></CanRaiseEvents>
		<add_Disposed final="1" public="1" set="method">
			<f a="value">
				<x path="cs.system.EventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add_Disposed>
		<remove_Disposed final="1" public="1" set="method">
			<f a="value">
				<x path="cs.system.EventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove_Disposed>
		<get_CanRaiseEvents set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</get_CanRaiseEvents>
		<get_Site set="method">
			<f a=""><c path="cs.system.componentmodel.ISite"/></f>
			<meta><m n=":overload"/></meta>
		</get_Site>
		<set_Site set="method">
			<f a="value">
				<c path="cs.system.componentmodel.ISite"/>
				<c path="cs.system.componentmodel.ISite"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Site>
		<get_Container final="1" set="method">
			<f a=""><c path="cs.system.componentmodel.IContainer"/></f>
			<meta><m n=":overload"/></meta>
		</get_Container>
		<get_DesignMode final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</get_DesignMode>
		<get_Events final="1" set="method">
			<f a=""><c path="cs.system.componentmodel.EventHandlerList"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</get_Events>
		<Dispose final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><Dispose set="method">
	<f a="release_all">
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":protected"/>
		<m n=":overload"/>
	</meta>
</Dispose></overloads>
		</Dispose>
		<GetService set="method">
			<f a="service">
				<c path="cs.system.Type"/>
				<d/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</GetService>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ComponentModel.Component"</e></m>
		</meta>
	</class>
	<class path="cs.system.componentmodel.ComponentCollection" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.componentmodel.ComponentCollection" extern="1">
		<extends path="cs.system.collections.ReadOnlyCollectionBase"/>
		<get_Item set="method">
			<f a="index">
				<x path="Int"/>
				<c path="cs.system.componentmodel.IComponent"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><get_Item set="method">
	<f a="name">
		<c path="String"/>
		<c path="cs.system.componentmodel.IComponent"/>
	</f>
	<meta><m n=":overload"/></meta>
</get_Item></overloads>
		</get_Item>
		<CopyTo final="1" public="1" set="method">
			<f a="array:index">
				<c path="cs.NativeArray"><c path="cs.system.componentmodel.IComponent"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CopyTo>
		<new final="1" public="1" set="method">
			<f a="components">
				<c path="cs.NativeArray"><c path="cs.system.componentmodel.IComponent"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ComponentModel.ComponentCollection"</e></m>
		</meta>
	</class>
	<class path="cs.system.componentmodel.EventHandlerList" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.componentmodel.EventHandlerList" extern="1">
		<implements path="cs.system.IDisposable"/>
		<get_Item final="1" set="method">
			<f a="key">
				<d/>
				<c path="cs.system.Delegate"/>
			</f>
			<meta><m n=":overload"/></meta>
		</get_Item>
		<set_Item final="1" set="method">
			<f a="key:value">
				<d/>
				<c path="cs.system.Delegate"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Item>
		<AddHandler final="1" public="1" set="method">
			<f a="key:value">
				<d/>
				<c path="cs.system.Delegate"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddHandler>
		<AddHandlers final="1" public="1" set="method">
			<f a="listToAddFrom">
				<c path="cs.system.componentmodel.EventHandlerList"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddHandlers>
		<RemoveHandler final="1" public="1" set="method">
			<f a="key:value">
				<d/>
				<c path="cs.system.Delegate"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveHandler>
		<Dispose final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Dispose>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ComponentModel.EventHandlerList"</e></m>
		</meta>
	</class>
	<class path="cs.system.componentmodel.IContainer" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.componentmodel.IContainer" extern="1" interface="1">
		<extends path="cs.system.IDisposable"/>
		<Components public="1" get="accessor" set="null"><c path="cs.system.componentmodel.ComponentCollection"/></Components>
		<Dispose public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Dispose>
		<get_Components set="method">
			<f a=""><c path="cs.system.componentmodel.ComponentCollection"/></f>
			<meta><m n=":overload"/></meta>
		</get_Components>
		<Add public="1" set="method">
			<f a="component">
				<c path="cs.system.componentmodel.IComponent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><Add public="1" set="method">
	<f a="component:name">
		<c path="cs.system.componentmodel.IComponent"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</Add></overloads>
		</Add>
		<Remove public="1" set="method">
			<f a="component">
				<c path="cs.system.componentmodel.IComponent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Remove>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ComponentModel.IContainer"</e></m>
		</meta>
	</class>
	<class path="cs.system.componentmodel.ISite" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.componentmodel.ISite" extern="1" interface="1">
		<extends path="cs.system.IServiceProvider"/>
		<Name public="1" get="accessor" set="accessor"><c path="String"/></Name>
		<DesignMode public="1" get="accessor" set="null"><x path="Bool"/></DesignMode>
		<Container public="1" get="accessor" set="null"><c path="cs.system.componentmodel.IContainer"/></Container>
		<Component public="1" get="accessor" set="null"><c path="cs.system.componentmodel.IComponent"/></Component>
		<GetService public="1" set="method">
			<f a="serviceType">
				<c path="cs.system.Type"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetService>
		<get_Component set="method">
			<f a=""><c path="cs.system.componentmodel.IComponent"/></f>
			<meta><m n=":overload"/></meta>
		</get_Component>
		<get_Container set="method">
			<f a=""><c path="cs.system.componentmodel.IContainer"/></f>
			<meta><m n=":overload"/></meta>
		</get_Container>
		<get_DesignMode set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_DesignMode>
		<get_Name set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<set_Name set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Name>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ComponentModel.ISite"</e></m>
		</meta>
	</class>
	<class path="cs.system.componentmodel.ISynchronizeInvoke" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.componentmodel.ISynchronizeInvoke" extern="1" interface="1">
		<InvokeRequired public="1" get="accessor" set="null"><x path="Bool"/></InvokeRequired>
		<get_InvokeRequired set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_InvokeRequired>
		<BeginInvoke public="1" set="method">
			<f a="method:args">
				<c path="cs.system.Delegate"/>
				<c path="cs.NativeArray"><d/></c>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<Invoke public="1" set="method">
			<f a="method:args">
				<c path="cs.system.Delegate"/>
				<c path="cs.NativeArray"><d/></c>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.ComponentModel.ISynchronizeInvoke"</e></m>
		</meta>
	</class>
	<enum path="cs.system.configuration.assemblies.AssemblyHashAlgorithm" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.configuration.assemblies.AssemblyHashAlgorithm">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<MD5><meta><m n=":csNative"><e>32771</e></m></meta></MD5>
		<SHA1><meta><m n=":csNative"><e>32772</e></m></meta></SHA1>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Configuration.Assemblies.AssemblyHashAlgorithm"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.configuration.assemblies.AssemblyVersionCompatibility" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.configuration.assemblies.AssemblyVersionCompatibility">
		<SameMachine><meta><m n=":csNative"><e>1</e></m></meta></SameMachine>
		<SameProcess><meta><m n=":csNative"><e>2</e></m></meta></SameProcess>
		<SameDomain><meta><m n=":csNative"><e>3</e></m></meta></SameDomain>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Configuration.Assemblies.AssemblyVersionCompatibility"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.diagnostics.DataReceivedEventArgs" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.diagnostics.DataReceivedEventArgs" extern="1">
		<extends path="cs.system.EventArgs"/>
		<Data public="1" get="accessor" set="null"><c path="String"/></Data>
		<get_Data final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Data>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.DataReceivedEventArgs"</e></m>
		</meta>
	</class>
	<class path="cs.system.diagnostics.Delegate_DataReceivedEventHandler" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.diagnostics.DataReceivedEventHandler" module="cs.system.diagnostics.DataReceivedEventHandler" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
	<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
	<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
	<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
	<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="sender:e">
				<d/>
				<c path="cs.system.diagnostics.DataReceivedEventArgs"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="sender:e:callback:object">
				<d/>
				<c path="cs.system.diagnostics.DataReceivedEventArgs"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.DataReceivedEventHandler"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.diagnostics.DataReceivedEventHandler" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.diagnostics.DataReceivedEventHandler">
		<from><icast field="FromHaxeFunction"><f a=":">
	<d/>
	<c path="cs.system.diagnostics.DataReceivedEventArgs"/>
	<x path="Void"/>
</f></icast></from>
		<this><c path="cs.system.diagnostics.Delegate_DataReceivedEventHandler"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.diagnostics._DataReceivedEventHandler.DataReceivedEventHandler_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.diagnostics.DataReceivedEventHandler" private="1" module="cs.system.diagnostics.DataReceivedEventHandler">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=":">
				<d/>
				<c path="cs.system.diagnostics.DataReceivedEventArgs"/>
				<x path="Void"/>
			</f>
			<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=":">
				<d/>
				<c path="cs.system.diagnostics.DataReceivedEventArgs"/>
				<x path="Void"/>
			</f>
			<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.diagnostics.Delegate_DataReceivedEventHandler"/>
			<c path="cs.system.diagnostics.Delegate_DataReceivedEventHandler"/>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
			<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
			<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
			<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
			<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system.diagnostics._DataReceivedEventHandler.DataReceivedEventHandler_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.diagnostics.DataReceivedEventHandler" private="1" module="cs.system.diagnostics.DataReceivedEventHandler">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=":">
					<d/>
					<c path="cs.system.diagnostics.DataReceivedEventArgs"/>
					<x path="Void"/>
				</f>
				<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=":">
					<d/>
					<c path="cs.system.diagnostics.DataReceivedEventArgs"/>
					<x path="Void"/>
				</f>
				<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.diagnostics.Delegate_DataReceivedEventHandler"/>
				<c path="cs.system.diagnostics.Delegate_DataReceivedEventHandler"/>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
				<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
				<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
				<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
				<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="cs.system.diagnostics.FileVersionInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.diagnostics.FileVersionInfo" extern="1">
		<GetVersionInfo final="1" public="1" set="method" static="1">
			<f a="fileName">
				<c path="String"/>
				<c path="cs.system.diagnostics.FileVersionInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetVersionInfo>
		<SpecialBuild public="1" get="accessor" set="null"><c path="String"/></SpecialBuild>
		<ProductVersion public="1" get="accessor" set="null"><c path="String"/></ProductVersion>
		<ProductPrivatePart public="1" get="accessor" set="null"><x path="Int"/></ProductPrivatePart>
		<ProductName public="1" get="accessor" set="null"><c path="String"/></ProductName>
		<ProductMinorPart public="1" get="accessor" set="null"><x path="Int"/></ProductMinorPart>
		<ProductMajorPart public="1" get="accessor" set="null"><x path="Int"/></ProductMajorPart>
		<ProductBuildPart public="1" get="accessor" set="null"><x path="Int"/></ProductBuildPart>
		<PrivateBuild public="1" get="accessor" set="null"><c path="String"/></PrivateBuild>
		<OriginalFilename public="1" get="accessor" set="null"><c path="String"/></OriginalFilename>
		<LegalTrademarks public="1" get="accessor" set="null"><c path="String"/></LegalTrademarks>
		<LegalCopyright public="1" get="accessor" set="null"><c path="String"/></LegalCopyright>
		<Language public="1" get="accessor" set="null"><c path="String"/></Language>
		<IsSpecialBuild public="1" get="accessor" set="null"><x path="Bool"/></IsSpecialBuild>
		<IsPrivateBuild public="1" get="accessor" set="null"><x path="Bool"/></IsPrivateBuild>
		<IsPreRelease public="1" get="accessor" set="null"><x path="Bool"/></IsPreRelease>
		<IsPatched public="1" get="accessor" set="null"><x path="Bool"/></IsPatched>
		<IsDebug public="1" get="accessor" set="null"><x path="Bool"/></IsDebug>
		<InternalName public="1" get="accessor" set="null"><c path="String"/></InternalName>
		<FileVersion public="1" get="accessor" set="null"><c path="String"/></FileVersion>
		<FilePrivatePart public="1" get="accessor" set="null"><x path="Int"/></FilePrivatePart>
		<FileName public="1" get="accessor" set="null"><c path="String"/></FileName>
		<FileMinorPart public="1" get="accessor" set="null"><x path="Int"/></FileMinorPart>
		<FileMajorPart public="1" get="accessor" set="null"><x path="Int"/></FileMajorPart>
		<FileDescription public="1" get="accessor" set="null"><c path="String"/></FileDescription>
		<FileBuildPart public="1" get="accessor" set="null"><x path="Int"/></FileBuildPart>
		<CompanyName public="1" get="accessor" set="null"><c path="String"/></CompanyName>
		<Comments public="1" get="accessor" set="null"><c path="String"/></Comments>
		<get_Comments final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Comments>
		<get_CompanyName final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_CompanyName>
		<get_FileBuildPart final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_FileBuildPart>
		<get_FileDescription final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_FileDescription>
		<get_FileMajorPart final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_FileMajorPart>
		<get_FileMinorPart final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_FileMinorPart>
		<get_FileName final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_FileName>
		<get_FilePrivatePart final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_FilePrivatePart>
		<get_FileVersion final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_FileVersion>
		<get_InternalName final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_InternalName>
		<get_IsDebug final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsDebug>
		<get_IsPatched final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsPatched>
		<get_IsPreRelease final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsPreRelease>
		<get_IsPrivateBuild final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsPrivateBuild>
		<get_IsSpecialBuild final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSpecialBuild>
		<get_Language final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Language>
		<get_LegalCopyright final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_LegalCopyright>
		<get_LegalTrademarks final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_LegalTrademarks>
		<get_OriginalFilename final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_OriginalFilename>
		<get_PrivateBuild final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_PrivateBuild>
		<get_ProductBuildPart final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_ProductBuildPart>
		<get_ProductMajorPart final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_ProductMajorPart>
		<get_ProductMinorPart final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_ProductMinorPart>
		<get_ProductName final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_ProductName>
		<get_ProductPrivatePart final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_ProductPrivatePart>
		<get_ProductVersion final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_ProductVersion>
		<get_SpecialBuild final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_SpecialBuild>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.FileVersionInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.threading.WaitHandle" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.threading.WaitHandle" extern="1">
		<extends path="cs.system.MarshalByRefObject"/>
		<implements path="cs.system.IDisposable"/>
		<InvalidHandle set="null" static="1">
			<c path="cs.system.IntPtr"/>
			<meta><m n=":readOnly"/></meta>
		</InvalidHandle>
		<WaitTimeout public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":readOnly"/></meta>
		</WaitTimeout>
		<WaitAll final="1" public="1" set="method" static="1">
			<f a="waitHandles">
				<c path="cs.NativeArray"><c path="cs.system.threading.WaitHandle"/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<WaitAll final="1" public="1" set="method">
					<f a="waitHandles:timeout">
						<c path="cs.NativeArray"><c path="cs.system.threading.WaitHandle"/></c>
						<c path="cs.system.TimeSpan"/>
						<x path="Bool"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WaitAll>
				<WaitAll final="1" public="1" set="method">
					<f a="waitHandles:millisecondsTimeout">
						<c path="cs.NativeArray"><c path="cs.system.threading.WaitHandle"/></c>
						<x path="Int"/>
						<x path="Bool"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WaitAll>
				<WaitAll final="1" public="1" set="method">
					<f a="waitHandles:timeout:exitContext">
						<c path="cs.NativeArray"><c path="cs.system.threading.WaitHandle"/></c>
						<c path="cs.system.TimeSpan"/>
						<x path="Bool"/>
						<x path="Bool"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WaitAll>
				<WaitAll final="1" public="1" set="method">
					<f a="waitHandles:millisecondsTimeout:exitContext">
						<c path="cs.NativeArray"><c path="cs.system.threading.WaitHandle"/></c>
						<x path="Int"/>
						<x path="Bool"/>
						<x path="Bool"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WaitAll>
			</overloads>
		</WaitAll>
		<WaitAny final="1" public="1" set="method" static="1">
			<f a="waitHandles">
				<c path="cs.NativeArray"><c path="cs.system.threading.WaitHandle"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<WaitAny final="1" public="1" set="method">
					<f a="waitHandles:timeout:exitContext">
						<c path="cs.NativeArray"><c path="cs.system.threading.WaitHandle"/></c>
						<c path="cs.system.TimeSpan"/>
						<x path="Bool"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WaitAny>
				<WaitAny final="1" public="1" set="method">
					<f a="waitHandles:millisecondsTimeout">
						<c path="cs.NativeArray"><c path="cs.system.threading.WaitHandle"/></c>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WaitAny>
				<WaitAny final="1" public="1" set="method">
					<f a="waitHandles:timeout">
						<c path="cs.NativeArray"><c path="cs.system.threading.WaitHandle"/></c>
						<c path="cs.system.TimeSpan"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WaitAny>
				<WaitAny final="1" public="1" set="method">
					<f a="waitHandles:millisecondsTimeout:exitContext">
						<c path="cs.NativeArray"><c path="cs.system.threading.WaitHandle"/></c>
						<x path="Int"/>
						<x path="Bool"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WaitAny>
			</overloads>
		</WaitAny>
		<SignalAndWait final="1" public="1" set="method" static="1">
			<f a="toSignal:toWaitOn">
				<c path="cs.system.threading.WaitHandle"/>
				<c path="cs.system.threading.WaitHandle"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<SignalAndWait final="1" public="1" set="method">
					<f a="toSignal:toWaitOn:timeout:exitContext">
						<c path="cs.system.threading.WaitHandle"/>
						<c path="cs.system.threading.WaitHandle"/>
						<c path="cs.system.TimeSpan"/>
						<x path="Bool"/>
						<x path="Bool"/>
					</f>
					<meta><m n=":overload"/></meta>
				</SignalAndWait>
				<SignalAndWait final="1" public="1" set="method">
					<f a="toSignal:toWaitOn:millisecondsTimeout:exitContext">
						<c path="cs.system.threading.WaitHandle"/>
						<c path="cs.system.threading.WaitHandle"/>
						<x path="Int"/>
						<x path="Bool"/>
						<x path="Bool"/>
					</f>
					<meta><m n=":overload"/></meta>
				</SignalAndWait>
			</overloads>
		</SignalAndWait>
		<SafeWaitHandle public="1" get="accessor" set="accessor"><c path="microsoft.win32.safehandles.SafeWaitHandle"/></SafeWaitHandle>
		<Handle public="1" get="accessor" set="accessor"><c path="cs.system.IntPtr"/></Handle>
		<Close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Close>
		<get_Handle set="method">
			<f a=""><c path="cs.system.IntPtr"/></f>
			<meta><m n=":overload"/></meta>
		</get_Handle>
		<set_Handle set="method">
			<f a="value">
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Handle>
		<Dispose set="method">
			<f a="explicitDisposing">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</Dispose>
		<get_SafeWaitHandle final="1" set="method">
			<f a=""><c path="microsoft.win32.safehandles.SafeWaitHandle"/></f>
			<meta><m n=":overload"/></meta>
		</get_SafeWaitHandle>
		<set_SafeWaitHandle final="1" set="method">
			<f a="value">
				<c path="microsoft.win32.safehandles.SafeWaitHandle"/>
				<c path="microsoft.win32.safehandles.SafeWaitHandle"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_SafeWaitHandle>
		<WaitOne public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<WaitOne public="1" set="method">
					<f a="timeout:exitContext">
						<c path="cs.system.TimeSpan"/>
						<x path="Bool"/>
						<x path="Bool"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WaitOne>
				<WaitOne public="1" set="method">
					<f a="timeout">
						<c path="cs.system.TimeSpan"/>
						<x path="Bool"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WaitOne>
				<WaitOne public="1" set="method">
					<f a="millisecondsTimeout">
						<x path="Int"/>
						<x path="Bool"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WaitOne>
				<WaitOne public="1" set="method">
					<f a="millisecondsTimeout:exitContext">
						<x path="Int"/>
						<x path="Bool"/>
						<x path="Bool"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WaitOne>
			</overloads>
		</WaitOne>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Threading.WaitHandle"</e></m>
		</meta>
	</class>
	<class path="cs.system.diagnostics.Process_ProcessWaitHandle" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.diagnostics.Process" module="cs.system.diagnostics.Process" extern="1">
		<extends path="cs.system.threading.WaitHandle"/>
		<new final="1" public="1" set="method">
			<f a="handle">
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.Process.ProcessWaitHandle"</e></m>
		</meta>
	</class>
	<class path="cs.system.diagnostics.Process_Delegate_AsyncReadHandler" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.diagnostics.Process" module="cs.system.diagnostics.Process" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.diagnostics.Process_AsyncReadHandler"/>
	<x path="cs.system.diagnostics.Process_AsyncReadHandler"/>
	<x path="cs.system.diagnostics.Process_AsyncReadHandler"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.diagnostics.Process_AsyncReadHandler"/>
	<x path="cs.system.diagnostics.Process_AsyncReadHandler"/>
	<x path="cs.system.diagnostics.Process_AsyncReadHandler"/>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="callback:object">
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.Process.AsyncReadHandler"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.diagnostics.Process_AsyncReadHandler" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.diagnostics.Process" module="cs.system.diagnostics.Process">
		<from><icast field="FromHaxeFunction"><f a=""><x path="Void"/></f></icast></from>
		<this><c path="cs.system.diagnostics.Process_Delegate_AsyncReadHandler"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.diagnostics._Process.Process_AsyncReadHandler_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.diagnostics.Process" private="1" module="cs.system.diagnostics.Process">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=""><x path="Void"/></f>
			<x path="cs.system.diagnostics.Process_AsyncReadHandler"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=""><x path="Void"/></f>
			<x path="cs.system.diagnostics.Process_AsyncReadHandler"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.diagnostics.Process_Delegate_AsyncReadHandler"/>
			<c path="cs.system.diagnostics.Process_Delegate_AsyncReadHandler"/>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.diagnostics.Process_AsyncReadHandler"/>
			<x path="cs.system.diagnostics.Process_AsyncReadHandler"/>
			<x path="cs.system.diagnostics.Process_AsyncReadHandler"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.diagnostics.Process_AsyncReadHandler"/>
			<x path="cs.system.diagnostics.Process_AsyncReadHandler"/>
			<x path="cs.system.diagnostics.Process_AsyncReadHandler"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system.diagnostics._Process.Process_AsyncReadHandler_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.diagnostics.Process" private="1" module="cs.system.diagnostics.Process">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=""><x path="Void"/></f>
				<x path="cs.system.diagnostics.Process_AsyncReadHandler"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=""><x path="Void"/></f>
				<x path="cs.system.diagnostics.Process_AsyncReadHandler"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.diagnostics.Process_Delegate_AsyncReadHandler"/>
				<c path="cs.system.diagnostics.Process_Delegate_AsyncReadHandler"/>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.diagnostics.Process_AsyncReadHandler"/>
				<x path="cs.system.diagnostics.Process_AsyncReadHandler"/>
				<x path="cs.system.diagnostics.Process_AsyncReadHandler"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.diagnostics.Process_AsyncReadHandler"/>
				<x path="cs.system.diagnostics.Process_AsyncReadHandler"/>
				<x path="cs.system.diagnostics.Process_AsyncReadHandler"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="cs.system.diagnostics.Process_ProcessAsyncReader" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.diagnostics.Process" module="cs.system.diagnostics.Process" extern="1">
		<WaitHandle public="1" get="accessor" set="null"><c path="cs.system.threading.WaitHandle"/></WaitHandle>
		<IsCompleted public="1" get="accessor" set="null"><x path="Bool"/></IsCompleted>
		<ReadHandler public="1"><x path="cs.system.diagnostics.Process_AsyncReadHandler"/></ReadHandler>
		<EndCalled public="1"><x path="Int"/></EndCalled>
		<ares public="1"><d/></ares>
		<operation public="1"><x path="Int"/></operation>
		<completed_sync public="1"><x path="Bool"/></completed_sync>
		<total public="1"><x path="Int"/></total>
		<acc_socket public="1"><d/></acc_socket>
		<ReuseSocket public="1"><x path="Bool"/></ReuseSocket>
		<Buffers public="1"><d/></Buffers>
		<port public="1"><x path="Int"/></port>
		<Addresses public="1"><c path="cs.NativeArray"><d/></c></Addresses>
		<AcceptSocket public="1"><d/></AcceptSocket>
		<SockFlags public="1"><x path="Int"/></SockFlags>
		<Size public="1"><x path="Int"/></Size>
		<Offset public="1"><x path="Int"/></Offset>
		<EndPoint public="1"><d/></EndPoint>
		<delayedException public="1"><c path="cs.system.Exception"/></delayedException>
		<wait_handle public="1"><c path="cs.system.threading.ManualResetEvent"/></wait_handle>
		<callback public="1"><x path="cs.system.AsyncCallback"/></callback>
		<state public="1"><d/></state>
		<handle public="1"><c path="cs.system.IntPtr"/></handle>
		<Sock public="1"><d/></Sock>
		<AddInput final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</AddInput>
		<get_IsCompleted final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsCompleted>
		<get_WaitHandle final="1" set="method">
			<f a=""><c path="cs.system.threading.WaitHandle"/></f>
			<meta><m n=":overload"/></meta>
		</get_WaitHandle>
		<Close final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Close>
		<new final="1" public="1" set="method">
			<f a="process:handle:err_out">
				<c path="cs.system.diagnostics.Process"/>
				<c path="cs.system.IntPtr"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.Process.ProcessAsyncReader"</e></m>
		</meta>
	</class>
	<enum path="cs.system.diagnostics.Process_AsyncModes" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.diagnostics.Process" module="cs.system.diagnostics.Process">
		<NoneYet><meta><m n=":csNative"><e>0</e></m></meta></NoneYet>
		<SyncOutput><meta><m n=":csNative"><e>1</e></m></meta></SyncOutput>
		<SyncError><meta><m n=":csNative"><e>2</e></m></meta></SyncError>
		<AsyncOutput><meta><m n=":csNative"><e>4</e></m></meta></AsyncOutput>
		<AsyncError><meta><m n=":csNative"><e>8</e></m></meta></AsyncError>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Diagnostics.Process.AsyncModes"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.diagnostics.Process_ProcInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.diagnostics.Process" module="cs.system.diagnostics.Process" extern="1">
		<extends path="cs.system.ValueType"/>
		<LoadUserProfile public="1"><x path="Bool"/></LoadUserProfile>
		<Password public="1"><c path="cs.system.IntPtr"/></Password>
		<Domain public="1"><c path="String"/></Domain>
		<UserName public="1"><c path="String"/></UserName>
		<envValues public="1"><c path="cs.NativeArray"><c path="String"/></c></envValues>
		<envKeys public="1"><c path="cs.NativeArray"><c path="String"/></c></envKeys>
		<tid public="1"><x path="Int"/></tid>
		<pid public="1"><x path="Int"/></pid>
		<thread_handle public="1"><c path="cs.system.IntPtr"/></thread_handle>
		<process_handle public="1"><c path="cs.system.IntPtr"/></process_handle>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.Process.ProcInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.diagnostics.Process" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.diagnostics.Process" extern="1">
		<extends path="cs.system.componentmodel.Component"/>
		<EnterDebugMode final="1" public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</EnterDebugMode>
		<GetCurrentProcess final="1" public="1" set="method" static="1">
			<f a=""><c path="cs.system.diagnostics.Process"/></f>
			<meta><m n=":overload"/></meta>
		</GetCurrentProcess>
		<GetProcessById final="1" public="1" set="method" static="1">
			<f a="processId">
				<x path="Int"/>
				<c path="cs.system.diagnostics.Process"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetProcessById final="1" public="1" set="method">
	<f a="processId:machineName">
		<x path="Int"/>
		<c path="String"/>
		<c path="cs.system.diagnostics.Process"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetProcessById></overloads>
		</GetProcessById>
		<GetProcesses final="1" public="1" set="method" static="1">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.diagnostics.Process"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetProcesses final="1" public="1" set="method">
	<f a="machineName">
		<c path="String"/>
		<c path="cs.NativeArray"><c path="cs.system.diagnostics.Process"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetProcesses></overloads>
		</GetProcesses>
		<GetProcessesByName final="1" public="1" set="method" static="1">
			<f a="processName">
				<c path="String"/>
				<c path="cs.NativeArray"><c path="cs.system.diagnostics.Process"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetProcessesByName final="1" public="1" set="method">
	<f a="processName:machineName">
		<c path="String"/>
		<c path="String"/>
		<c path="cs.NativeArray"><c path="cs.system.diagnostics.Process"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetProcessesByName></overloads>
		</GetProcessesByName>
		<LeaveDebugMode final="1" public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</LeaveDebugMode>
		<Start final="1" public="1" set="method" static="1">
			<f a="startInfo">
				<c path="cs.system.diagnostics.ProcessStartInfo"/>
				<c path="cs.system.diagnostics.Process"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Start final="1" public="1" set="method">
					<f a="fileName:arguments:username:password:domain">
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<c path="cs.system.security.SecureString"/>
						<c path="String"/>
						<c path="cs.system.diagnostics.Process"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Start>
				<Start final="1" public="1" set="method">
					<f a="fileName:username:password:domain">
						<c path="String"/>
						<c path="String"/>
						<c path="cs.system.security.SecureString"/>
						<c path="String"/>
						<c path="cs.system.diagnostics.Process"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Start>
				<Start final="1" public="1" set="method">
					<f a="fileName:arguments">
						<c path="String"/>
						<c path="String"/>
						<c path="cs.system.diagnostics.Process"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Start>
				<Start final="1" public="1" set="method">
					<f a="fileName">
						<c path="String"/>
						<c path="cs.system.diagnostics.Process"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Start>
			</overloads>
		</Start>
		<_Start final="1" public="1" set="method" static="1">
			<f a="startInfo">
				<c path="cs.system.diagnostics.ProcessStartInfo"/>
				<c path="cs.system.diagnostics.Process"/>
			</f>
			<meta>
				<m n=":native"><e>"Start"</e></m>
				<m n=":overload"/>
			</meta>
			<overloads>
				<Start final="1" public="1" set="method">
					<f a="fileName:arguments:username:password:domain">
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<c path="cs.system.security.SecureString"/>
						<c path="String"/>
						<c path="cs.system.diagnostics.Process"/>
					</f>
					<meta>
						<m n=":native"><e>"Start"</e></m>
						<m n=":overload"/>
					</meta>
				</Start>
				<Start final="1" public="1" set="method">
					<f a="fileName:username:password:domain">
						<c path="String"/>
						<c path="String"/>
						<c path="cs.system.security.SecureString"/>
						<c path="String"/>
						<c path="cs.system.diagnostics.Process"/>
					</f>
					<meta>
						<m n=":native"><e>"Start"</e></m>
						<m n=":overload"/>
					</meta>
				</Start>
				<Start final="1" public="1" set="method">
					<f a="fileName:arguments">
						<c path="String"/>
						<c path="String"/>
						<c path="cs.system.diagnostics.Process"/>
					</f>
					<meta>
						<m n=":native"><e>"Start"</e></m>
						<m n=":overload"/>
					</meta>
				</Start>
				<Start final="1" public="1" set="method">
					<f a="fileName">
						<c path="String"/>
						<c path="cs.system.diagnostics.Process"/>
					</f>
					<meta>
						<m n=":native"><e>"Start"</e></m>
						<m n=":overload"/>
					</meta>
				</Start>
			</overloads>
		</_Start>
		<Exited>
			<x path="cs.system.EventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</Exited>
		<ErrorDataReceived>
			<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</ErrorDataReceived>
		<OutputDataReceived>
			<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</OutputDataReceived>
		<WorkingSet64 public="1" get="accessor" set="null"><x path="haxe.Int64"/></WorkingSet64>
		<VirtualMemorySize64 public="1" get="accessor" set="null"><x path="haxe.Int64"/></VirtualMemorySize64>
		<PrivateMemorySize64 public="1" get="accessor" set="null"><x path="haxe.Int64"/></PrivateMemorySize64>
		<WorkingSet public="1" get="accessor" set="null"><x path="Int"/></WorkingSet>
		<VirtualMemorySize public="1" get="accessor" set="null"><x path="Int"/></VirtualMemorySize>
		<UserProcessorTime public="1" get="accessor" set="null"><c path="cs.system.TimeSpan"/></UserProcessorTime>
		<TotalProcessorTime public="1" get="accessor" set="null"><c path="cs.system.TimeSpan"/></TotalProcessorTime>
		<Threads public="1" get="accessor" set="null"><c path="cs.system.diagnostics.ProcessThreadCollection"/></Threads>
		<SynchronizingObject public="1" get="accessor" set="accessor"><c path="cs.system.componentmodel.ISynchronizeInvoke"/></SynchronizingObject>
		<StartTime public="1" get="accessor" set="null"><c path="cs.system.DateTime"/></StartTime>
		<StartInfo public="1" get="accessor" set="accessor"><c path="cs.system.diagnostics.ProcessStartInfo"/></StartInfo>
		<StandardOutput public="1" get="accessor" set="null"><c path="cs.system.io.StreamReader"/></StandardOutput>
		<StandardInput public="1" get="accessor" set="null"><c path="cs.system.io.StreamWriter"/></StandardInput>
		<StandardError public="1" get="accessor" set="null"><c path="cs.system.io.StreamReader"/></StandardError>
		<Responding public="1" get="accessor" set="null"><x path="Bool"/></Responding>
		<ProcessorAffinity public="1" get="accessor" set="accessor"><c path="cs.system.IntPtr"/></ProcessorAffinity>
		<ProcessName public="1" get="accessor" set="null"><c path="String"/></ProcessName>
		<PrivilegedProcessorTime public="1" get="accessor" set="null"><c path="cs.system.TimeSpan"/></PrivilegedProcessorTime>
		<SessionId public="1" get="accessor" set="null"><x path="Int"/></SessionId>
		<PrivateMemorySize public="1" get="accessor" set="null"><x path="Int"/></PrivateMemorySize>
		<PriorityClass public="1" get="accessor" set="accessor"><e path="cs.system.diagnostics.ProcessPriorityClass"/></PriorityClass>
		<PriorityBoostEnabled public="1" get="accessor" set="accessor"><x path="Bool"/></PriorityBoostEnabled>
		<PeakWorkingSet64 public="1" get="accessor" set="null"><x path="haxe.Int64"/></PeakWorkingSet64>
		<PeakVirtualMemorySize64 public="1" get="accessor" set="null"><x path="haxe.Int64"/></PeakVirtualMemorySize64>
		<PeakPagedMemorySize64 public="1" get="accessor" set="null"><x path="haxe.Int64"/></PeakPagedMemorySize64>
		<PagedSystemMemorySize64 public="1" get="accessor" set="null"><x path="haxe.Int64"/></PagedSystemMemorySize64>
		<PagedMemorySize64 public="1" get="accessor" set="null"><x path="haxe.Int64"/></PagedMemorySize64>
		<NonpagedSystemMemorySize64 public="1" get="accessor" set="null"><x path="haxe.Int64"/></NonpagedSystemMemorySize64>
		<PeakWorkingSet public="1" get="accessor" set="null"><x path="Int"/></PeakWorkingSet>
		<PeakVirtualMemorySize public="1" get="accessor" set="null"><x path="Int"/></PeakVirtualMemorySize>
		<PeakPagedMemorySize public="1" get="accessor" set="null"><x path="Int"/></PeakPagedMemorySize>
		<PagedSystemMemorySize public="1" get="accessor" set="null"><x path="Int"/></PagedSystemMemorySize>
		<PagedMemorySize public="1" get="accessor" set="null"><x path="Int"/></PagedMemorySize>
		<NonpagedSystemMemorySize public="1" get="accessor" set="null"><x path="Int"/></NonpagedSystemMemorySize>
		<Modules public="1" get="accessor" set="null"><c path="cs.system.diagnostics.ProcessModuleCollection"/></Modules>
		<MinWorkingSet public="1" get="accessor" set="accessor"><c path="cs.system.IntPtr"/></MinWorkingSet>
		<MaxWorkingSet public="1" get="accessor" set="accessor"><c path="cs.system.IntPtr"/></MaxWorkingSet>
		<MainWindowTitle public="1" get="accessor" set="null"><c path="String"/></MainWindowTitle>
		<MainWindowHandle public="1" get="accessor" set="null"><c path="cs.system.IntPtr"/></MainWindowHandle>
		<MainModule public="1" get="accessor" set="null"><c path="cs.system.diagnostics.ProcessModule"/></MainModule>
		<MachineName public="1" get="accessor" set="null"><c path="String"/></MachineName>
		<Id public="1" get="accessor" set="null"><x path="Int"/></Id>
		<HasExited public="1" get="accessor" set="null"><x path="Bool"/></HasExited>
		<HandleCount public="1" get="accessor" set="null"><x path="Int"/></HandleCount>
		<Handle public="1" get="accessor" set="null"><c path="cs.system.IntPtr"/></Handle>
		<ExitTime public="1" get="accessor" set="null"><c path="cs.system.DateTime"/></ExitTime>
		<ExitCode public="1" get="accessor" set="null"><x path="Int"/></ExitCode>
		<EnableRaisingEvents public="1" get="accessor" set="accessor"><x path="Bool"/></EnableRaisingEvents>
		<BasePriority public="1" get="accessor" set="null"><x path="Int"/></BasePriority>
		<add_OutputDataReceived final="1" public="1" set="method">
			<f a="value">
				<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add_OutputDataReceived>
		<remove_OutputDataReceived final="1" public="1" set="method">
			<f a="value">
				<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove_OutputDataReceived>
		<add_ErrorDataReceived final="1" public="1" set="method">
			<f a="value">
				<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add_ErrorDataReceived>
		<remove_ErrorDataReceived final="1" public="1" set="method">
			<f a="value">
				<x path="cs.system.diagnostics.DataReceivedEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove_ErrorDataReceived>
		<add_Exited final="1" public="1" set="method">
			<f a="value">
				<x path="cs.system.EventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add_Exited>
		<remove_Exited final="1" public="1" set="method">
			<f a="value">
				<x path="cs.system.EventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove_Exited>
		<get_BasePriority final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_BasePriority>
		<get_EnableRaisingEvents final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_EnableRaisingEvents>
		<set_EnableRaisingEvents final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_EnableRaisingEvents>
		<get_ExitCode final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_ExitCode>
		<get_ExitTime final="1" set="method">
			<f a=""><c path="cs.system.DateTime"/></f>
			<meta><m n=":overload"/></meta>
		</get_ExitTime>
		<get_Handle final="1" set="method">
			<f a=""><c path="cs.system.IntPtr"/></f>
			<meta><m n=":overload"/></meta>
		</get_Handle>
		<get_HandleCount final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_HandleCount>
		<get_HasExited final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_HasExited>
		<get_Id final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Id>
		<get_MachineName final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_MachineName>
		<get_MainModule final="1" set="method">
			<f a=""><c path="cs.system.diagnostics.ProcessModule"/></f>
			<meta><m n=":overload"/></meta>
		</get_MainModule>
		<get_MainWindowHandle final="1" set="method">
			<f a=""><c path="cs.system.IntPtr"/></f>
			<meta><m n=":overload"/></meta>
		</get_MainWindowHandle>
		<get_MainWindowTitle final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_MainWindowTitle>
		<get_MaxWorkingSet final="1" set="method">
			<f a=""><c path="cs.system.IntPtr"/></f>
			<meta><m n=":overload"/></meta>
		</get_MaxWorkingSet>
		<set_MaxWorkingSet final="1" set="method">
			<f a="value">
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_MaxWorkingSet>
		<get_MinWorkingSet final="1" set="method">
			<f a=""><c path="cs.system.IntPtr"/></f>
			<meta><m n=":overload"/></meta>
		</get_MinWorkingSet>
		<set_MinWorkingSet final="1" set="method">
			<f a="value">
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_MinWorkingSet>
		<get_Modules final="1" set="method">
			<f a=""><c path="cs.system.diagnostics.ProcessModuleCollection"/></f>
			<meta><m n=":overload"/></meta>
		</get_Modules>
		<get_NonpagedSystemMemorySize final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_NonpagedSystemMemorySize>
		<get_PagedMemorySize final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_PagedMemorySize>
		<get_PagedSystemMemorySize final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_PagedSystemMemorySize>
		<get_PeakPagedMemorySize final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_PeakPagedMemorySize>
		<get_PeakVirtualMemorySize final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_PeakVirtualMemorySize>
		<get_PeakWorkingSet final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_PeakWorkingSet>
		<get_NonpagedSystemMemorySize64 final="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</get_NonpagedSystemMemorySize64>
		<get_PagedMemorySize64 final="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</get_PagedMemorySize64>
		<get_PagedSystemMemorySize64 final="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</get_PagedSystemMemorySize64>
		<get_PeakPagedMemorySize64 final="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</get_PeakPagedMemorySize64>
		<get_PeakVirtualMemorySize64 final="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</get_PeakVirtualMemorySize64>
		<get_PeakWorkingSet64 final="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</get_PeakWorkingSet64>
		<get_PriorityBoostEnabled final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_PriorityBoostEnabled>
		<set_PriorityBoostEnabled final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_PriorityBoostEnabled>
		<get_PriorityClass final="1" set="method">
			<f a=""><e path="cs.system.diagnostics.ProcessPriorityClass"/></f>
			<meta><m n=":overload"/></meta>
		</get_PriorityClass>
		<set_PriorityClass final="1" set="method">
			<f a="value">
				<e path="cs.system.diagnostics.ProcessPriorityClass"/>
				<e path="cs.system.diagnostics.ProcessPriorityClass"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_PriorityClass>
		<get_PrivateMemorySize final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_PrivateMemorySize>
		<get_SessionId final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_SessionId>
		<get_PrivilegedProcessorTime final="1" set="method">
			<f a=""><c path="cs.system.TimeSpan"/></f>
			<meta><m n=":overload"/></meta>
		</get_PrivilegedProcessorTime>
		<get_ProcessName final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_ProcessName>
		<get_ProcessorAffinity final="1" set="method">
			<f a=""><c path="cs.system.IntPtr"/></f>
			<meta><m n=":overload"/></meta>
		</get_ProcessorAffinity>
		<set_ProcessorAffinity final="1" set="method">
			<f a="value">
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ProcessorAffinity>
		<get_Responding final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_Responding>
		<get_StandardError final="1" set="method">
			<f a=""><c path="cs.system.io.StreamReader"/></f>
			<meta><m n=":overload"/></meta>
		</get_StandardError>
		<get_StandardInput final="1" set="method">
			<f a=""><c path="cs.system.io.StreamWriter"/></f>
			<meta><m n=":overload"/></meta>
		</get_StandardInput>
		<get_StandardOutput final="1" set="method">
			<f a=""><c path="cs.system.io.StreamReader"/></f>
			<meta><m n=":overload"/></meta>
		</get_StandardOutput>
		<get_StartInfo final="1" set="method">
			<f a=""><c path="cs.system.diagnostics.ProcessStartInfo"/></f>
			<meta><m n=":overload"/></meta>
		</get_StartInfo>
		<set_StartInfo final="1" set="method">
			<f a="value">
				<c path="cs.system.diagnostics.ProcessStartInfo"/>
				<c path="cs.system.diagnostics.ProcessStartInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_StartInfo>
		<get_StartTime final="1" set="method">
			<f a=""><c path="cs.system.DateTime"/></f>
			<meta><m n=":overload"/></meta>
		</get_StartTime>
		<get_SynchronizingObject final="1" set="method">
			<f a=""><c path="cs.system.componentmodel.ISynchronizeInvoke"/></f>
			<meta><m n=":overload"/></meta>
		</get_SynchronizingObject>
		<set_SynchronizingObject final="1" set="method">
			<f a="value">
				<c path="cs.system.componentmodel.ISynchronizeInvoke"/>
				<c path="cs.system.componentmodel.ISynchronizeInvoke"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_SynchronizingObject>
		<get_Threads final="1" set="method">
			<f a=""><c path="cs.system.diagnostics.ProcessThreadCollection"/></f>
			<meta><m n=":overload"/></meta>
		</get_Threads>
		<get_TotalProcessorTime final="1" set="method">
			<f a=""><c path="cs.system.TimeSpan"/></f>
			<meta><m n=":overload"/></meta>
		</get_TotalProcessorTime>
		<get_UserProcessorTime final="1" set="method">
			<f a=""><c path="cs.system.TimeSpan"/></f>
			<meta><m n=":overload"/></meta>
		</get_UserProcessorTime>
		<get_VirtualMemorySize final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_VirtualMemorySize>
		<get_WorkingSet final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_WorkingSet>
		<get_PrivateMemorySize64 final="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</get_PrivateMemorySize64>
		<get_VirtualMemorySize64 final="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</get_VirtualMemorySize64>
		<get_WorkingSet64 final="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</get_WorkingSet64>
		<Close final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Close>
		<CloseMainWindow final="1" public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</CloseMainWindow>
		<Kill final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Kill>
		<Refresh final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Refresh>
		<Start final="1" public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</Start>
		<ToString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<WaitForExit final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><WaitForExit final="1" public="1" set="method">
	<f a="milliseconds">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</WaitForExit></overloads>
		</WaitForExit>
		<WaitForInputIdle final="1" public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><WaitForInputIdle final="1" public="1" set="method">
	<f a="milliseconds">
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</WaitForInputIdle></overloads>
		</WaitForInputIdle>
		<BeginOutputReadLine final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</BeginOutputReadLine>
		<CancelOutputRead final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</CancelOutputRead>
		<BeginErrorReadLine final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</BeginErrorReadLine>
		<CancelErrorRead final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</CancelErrorRead>
		<Dispose set="method" override="1">
			<f a="disposing">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</Dispose>
		<OnExited final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</OnExited>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.Process"</e></m>
		</meta>
	</class>
	<class path="cs.system.diagnostics.ProcessModule" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.diagnostics.ProcessModule" extern="1">
		<extends path="cs.system.componentmodel.Component"/>
		<ModuleName public="1" get="accessor" set="null"><c path="String"/></ModuleName>
		<ModuleMemorySize public="1" get="accessor" set="null"><x path="Int"/></ModuleMemorySize>
		<FileVersionInfo public="1" get="accessor" set="null"><c path="cs.system.diagnostics.FileVersionInfo"/></FileVersionInfo>
		<FileName public="1" get="accessor" set="null"><c path="String"/></FileName>
		<EntryPointAddress public="1" get="accessor" set="null"><c path="cs.system.IntPtr"/></EntryPointAddress>
		<BaseAddress public="1" get="accessor" set="null"><c path="cs.system.IntPtr"/></BaseAddress>
		<get_BaseAddress final="1" set="method">
			<f a=""><c path="cs.system.IntPtr"/></f>
			<meta><m n=":overload"/></meta>
		</get_BaseAddress>
		<get_EntryPointAddress final="1" set="method">
			<f a=""><c path="cs.system.IntPtr"/></f>
			<meta><m n=":overload"/></meta>
		</get_EntryPointAddress>
		<get_FileName final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_FileName>
		<get_FileVersionInfo final="1" set="method">
			<f a=""><c path="cs.system.diagnostics.FileVersionInfo"/></f>
			<meta><m n=":overload"/></meta>
		</get_FileVersionInfo>
		<get_ModuleMemorySize final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_ModuleMemorySize>
		<get_ModuleName final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_ModuleName>
		<ToString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.ProcessModule"</e></m>
		</meta>
	</class>
	<class path="cs.system.diagnostics.ProcessModuleCollection" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.diagnostics.ProcessModuleCollection" extern="1">
		<extends path="cs.system.collections.ReadOnlyCollectionBase"/>
		<get_Item final="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="cs.system.diagnostics.ProcessModule"/>
			</f>
			<meta><m n=":overload"/></meta>
		</get_Item>
		<Contains final="1" public="1" set="method">
			<f a="module">
				<c path="cs.system.diagnostics.ProcessModule"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Contains>
		<CopyTo final="1" public="1" set="method">
			<f a="array:index">
				<c path="cs.NativeArray"><c path="cs.system.diagnostics.ProcessModule"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CopyTo>
		<IndexOf final="1" public="1" set="method">
			<f a="module">
				<c path="cs.system.diagnostics.ProcessModule"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IndexOf>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
			<overloads><new final="1" public="1" set="method">
	<f a="processModules">
		<c path="cs.NativeArray"><c path="cs.system.diagnostics.ProcessModule"/></c>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.ProcessModuleCollection"</e></m>
		</meta>
	</class>
	<enum path="cs.system.diagnostics.ProcessPriorityClass" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.diagnostics.ProcessPriorityClass">
		<Normal><meta><m n=":csNative"><e>32</e></m></meta></Normal>
		<Idle><meta><m n=":csNative"><e>64</e></m></meta></Idle>
		<High><meta><m n=":csNative"><e>128</e></m></meta></High>
		<RealTime><meta><m n=":csNative"><e>256</e></m></meta></RealTime>
		<BelowNormal><meta><m n=":csNative"><e>16384</e></m></meta></BelowNormal>
		<AboveNormal><meta><m n=":csNative"><e>32768</e></m></meta></AboveNormal>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Diagnostics.ProcessPriorityClass"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.diagnostics.ProcessStartInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.diagnostics.ProcessStartInfo" extern="1">
		<Password public="1" get="accessor" set="accessor"><c path="cs.system.security.SecureString"/></Password>
		<Domain public="1" get="accessor" set="accessor"><c path="String"/></Domain>
		<UserName public="1" get="accessor" set="accessor"><c path="String"/></UserName>
		<LoadUserProfile public="1" get="accessor" set="accessor"><x path="Bool"/></LoadUserProfile>
		<WorkingDirectory public="1" get="accessor" set="accessor"><c path="String"/></WorkingDirectory>
		<WindowStyle public="1" get="accessor" set="accessor"><e path="cs.system.diagnostics.ProcessWindowStyle"/></WindowStyle>
		<Verbs public="1" get="accessor" set="null"><c path="cs.NativeArray"><c path="String"/></c></Verbs>
		<Verb public="1" get="accessor" set="accessor"><c path="String"/></Verb>
		<UseShellExecute public="1" get="accessor" set="accessor"><x path="Bool"/></UseShellExecute>
		<StandardOutputEncoding public="1" get="accessor" set="accessor"><c path="cs.system.text.Encoding"/></StandardOutputEncoding>
		<StandardErrorEncoding public="1" get="accessor" set="accessor"><c path="cs.system.text.Encoding"/></StandardErrorEncoding>
		<RedirectStandardOutput public="1" get="accessor" set="accessor"><x path="Bool"/></RedirectStandardOutput>
		<RedirectStandardInput public="1" get="accessor" set="accessor"><x path="Bool"/></RedirectStandardInput>
		<RedirectStandardError public="1" get="accessor" set="accessor"><x path="Bool"/></RedirectStandardError>
		<FileName public="1" get="accessor" set="accessor"><c path="String"/></FileName>
		<ErrorDialogParentHandle public="1" get="accessor" set="accessor"><c path="cs.system.IntPtr"/></ErrorDialogParentHandle>
		<ErrorDialog public="1" get="accessor" set="accessor"><x path="Bool"/></ErrorDialog>
		<EnvironmentVariables public="1" get="accessor" set="null"><c path="cs.system.collections.specialized.StringDictionary"/></EnvironmentVariables>
		<CreateNoWindow public="1" get="accessor" set="accessor"><x path="Bool"/></CreateNoWindow>
		<Arguments public="1" get="accessor" set="accessor"><c path="String"/></Arguments>
		<get_Arguments final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Arguments>
		<set_Arguments final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Arguments>
		<get_CreateNoWindow final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_CreateNoWindow>
		<set_CreateNoWindow final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_CreateNoWindow>
		<get_EnvironmentVariables final="1" set="method">
			<f a=""><c path="cs.system.collections.specialized.StringDictionary"/></f>
			<meta><m n=":overload"/></meta>
		</get_EnvironmentVariables>
		<get_ErrorDialog final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_ErrorDialog>
		<set_ErrorDialog final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ErrorDialog>
		<get_ErrorDialogParentHandle final="1" set="method">
			<f a=""><c path="cs.system.IntPtr"/></f>
			<meta><m n=":overload"/></meta>
		</get_ErrorDialogParentHandle>
		<set_ErrorDialogParentHandle final="1" set="method">
			<f a="value">
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ErrorDialogParentHandle>
		<get_FileName final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_FileName>
		<set_FileName final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_FileName>
		<get_RedirectStandardError final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_RedirectStandardError>
		<set_RedirectStandardError final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_RedirectStandardError>
		<get_RedirectStandardInput final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_RedirectStandardInput>
		<set_RedirectStandardInput final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_RedirectStandardInput>
		<get_RedirectStandardOutput final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_RedirectStandardOutput>
		<set_RedirectStandardOutput final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_RedirectStandardOutput>
		<get_StandardErrorEncoding final="1" set="method">
			<f a=""><c path="cs.system.text.Encoding"/></f>
			<meta><m n=":overload"/></meta>
		</get_StandardErrorEncoding>
		<set_StandardErrorEncoding final="1" set="method">
			<f a="value">
				<c path="cs.system.text.Encoding"/>
				<c path="cs.system.text.Encoding"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_StandardErrorEncoding>
		<get_StandardOutputEncoding final="1" set="method">
			<f a=""><c path="cs.system.text.Encoding"/></f>
			<meta><m n=":overload"/></meta>
		</get_StandardOutputEncoding>
		<set_StandardOutputEncoding final="1" set="method">
			<f a="value">
				<c path="cs.system.text.Encoding"/>
				<c path="cs.system.text.Encoding"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_StandardOutputEncoding>
		<get_UseShellExecute final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_UseShellExecute>
		<set_UseShellExecute final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_UseShellExecute>
		<get_Verb final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Verb>
		<set_Verb final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Verb>
		<get_Verbs final="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</get_Verbs>
		<get_WindowStyle final="1" set="method">
			<f a=""><e path="cs.system.diagnostics.ProcessWindowStyle"/></f>
			<meta><m n=":overload"/></meta>
		</get_WindowStyle>
		<set_WindowStyle final="1" set="method">
			<f a="value">
				<e path="cs.system.diagnostics.ProcessWindowStyle"/>
				<e path="cs.system.diagnostics.ProcessWindowStyle"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_WindowStyle>
		<get_WorkingDirectory final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_WorkingDirectory>
		<set_WorkingDirectory final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_WorkingDirectory>
		<get_LoadUserProfile final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_LoadUserProfile>
		<set_LoadUserProfile final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_LoadUserProfile>
		<get_UserName final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_UserName>
		<set_UserName final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_UserName>
		<get_Domain final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Domain>
		<set_Domain final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Domain>
		<get_Password final="1" set="method">
			<f a=""><c path="cs.system.security.SecureString"/></f>
			<meta><m n=":overload"/></meta>
		</get_Password>
		<set_Password final="1" set="method">
			<f a="value">
				<c path="cs.system.security.SecureString"/>
				<c path="cs.system.security.SecureString"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Password>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="filename:arguments">
						<c path="String"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="filename">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.ProcessStartInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.diagnostics.ProcessThread" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.diagnostics.ProcessThread" extern="1">
		<extends path="cs.system.componentmodel.Component"/>
		<WaitReason public="1" get="accessor" set="null"><e path="cs.system.diagnostics.ThreadWaitReason"/></WaitReason>
		<UserProcessorTime public="1" get="accessor" set="null"><c path="cs.system.TimeSpan"/></UserProcessorTime>
		<TotalProcessorTime public="1" get="accessor" set="null"><c path="cs.system.TimeSpan"/></TotalProcessorTime>
		<ThreadState public="1" get="accessor" set="null"><e path="cs.system.diagnostics.ThreadState"/></ThreadState>
		<StartTime public="1" get="accessor" set="null"><c path="cs.system.DateTime"/></StartTime>
		<StartAddress public="1" get="accessor" set="null"><c path="cs.system.IntPtr"/></StartAddress>
		<ProcessorAffinity public="1" get="null" set="accessor"><c path="cs.system.IntPtr"/></ProcessorAffinity>
		<PrivilegedProcessorTime public="1" get="accessor" set="null"><c path="cs.system.TimeSpan"/></PrivilegedProcessorTime>
		<PriorityLevel public="1" get="accessor" set="accessor"><e path="cs.system.diagnostics.ThreadPriorityLevel"/></PriorityLevel>
		<PriorityBoostEnabled public="1" get="accessor" set="accessor"><x path="Bool"/></PriorityBoostEnabled>
		<IdealProcessor public="1" get="null" set="accessor"><x path="Int"/></IdealProcessor>
		<Id public="1" get="accessor" set="null"><x path="Int"/></Id>
		<CurrentPriority public="1" get="accessor" set="null"><x path="Int"/></CurrentPriority>
		<BasePriority public="1" get="accessor" set="null"><x path="Int"/></BasePriority>
		<get_BasePriority final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_BasePriority>
		<get_CurrentPriority final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_CurrentPriority>
		<get_Id final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Id>
		<set_IdealProcessor final="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_IdealProcessor>
		<get_PriorityBoostEnabled final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_PriorityBoostEnabled>
		<set_PriorityBoostEnabled final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_PriorityBoostEnabled>
		<get_PriorityLevel final="1" set="method">
			<f a=""><e path="cs.system.diagnostics.ThreadPriorityLevel"/></f>
			<meta><m n=":overload"/></meta>
		</get_PriorityLevel>
		<set_PriorityLevel final="1" set="method">
			<f a="value">
				<e path="cs.system.diagnostics.ThreadPriorityLevel"/>
				<e path="cs.system.diagnostics.ThreadPriorityLevel"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_PriorityLevel>
		<get_PrivilegedProcessorTime final="1" set="method">
			<f a=""><c path="cs.system.TimeSpan"/></f>
			<meta><m n=":overload"/></meta>
		</get_PrivilegedProcessorTime>
		<set_ProcessorAffinity final="1" set="method">
			<f a="value">
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ProcessorAffinity>
		<get_StartAddress final="1" set="method">
			<f a=""><c path="cs.system.IntPtr"/></f>
			<meta><m n=":overload"/></meta>
		</get_StartAddress>
		<get_StartTime final="1" set="method">
			<f a=""><c path="cs.system.DateTime"/></f>
			<meta><m n=":overload"/></meta>
		</get_StartTime>
		<get_ThreadState final="1" set="method">
			<f a=""><e path="cs.system.diagnostics.ThreadState"/></f>
			<meta><m n=":overload"/></meta>
		</get_ThreadState>
		<get_TotalProcessorTime final="1" set="method">
			<f a=""><c path="cs.system.TimeSpan"/></f>
			<meta><m n=":overload"/></meta>
		</get_TotalProcessorTime>
		<get_UserProcessorTime final="1" set="method">
			<f a=""><c path="cs.system.TimeSpan"/></f>
			<meta><m n=":overload"/></meta>
		</get_UserProcessorTime>
		<get_WaitReason final="1" set="method">
			<f a=""><e path="cs.system.diagnostics.ThreadWaitReason"/></f>
			<meta><m n=":overload"/></meta>
		</get_WaitReason>
		<ResetIdealProcessor final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</ResetIdealProcessor>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.ProcessThread"</e></m>
		</meta>
	</class>
	<class path="cs.system.diagnostics.ProcessThreadCollection" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.diagnostics.ProcessThreadCollection" extern="1">
		<extends path="cs.system.collections.ReadOnlyCollectionBase"/>
		<get_Item final="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="cs.system.diagnostics.ProcessThread"/>
			</f>
			<meta><m n=":overload"/></meta>
		</get_Item>
		<Add final="1" public="1" set="method">
			<f a="thread">
				<c path="cs.system.diagnostics.ProcessThread"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Add>
		<Contains final="1" public="1" set="method">
			<f a="thread">
				<c path="cs.system.diagnostics.ProcessThread"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Contains>
		<CopyTo final="1" public="1" set="method">
			<f a="array:index">
				<c path="cs.NativeArray"><c path="cs.system.diagnostics.ProcessThread"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CopyTo>
		<IndexOf final="1" public="1" set="method">
			<f a="thread">
				<c path="cs.system.diagnostics.ProcessThread"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IndexOf>
		<Insert final="1" public="1" set="method">
			<f a="index:thread">
				<x path="Int"/>
				<c path="cs.system.diagnostics.ProcessThread"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Insert>
		<Remove final="1" public="1" set="method">
			<f a="thread">
				<c path="cs.system.diagnostics.ProcessThread"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Remove>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
			<overloads><new final="1" public="1" set="method">
	<f a="processThreads">
		<c path="cs.NativeArray"><c path="cs.system.diagnostics.ProcessThread"/></c>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.ProcessThreadCollection"</e></m>
		</meta>
	</class>
	<enum path="cs.system.diagnostics.ProcessWindowStyle" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.diagnostics.ProcessWindowStyle">
		<Normal><meta><m n=":csNative"><e>0</e></m></meta></Normal>
		<Hidden><meta><m n=":csNative"><e>1</e></m></meta></Hidden>
		<Minimized><meta><m n=":csNative"><e>2</e></m></meta></Minimized>
		<Maximized><meta><m n=":csNative"><e>3</e></m></meta></Maximized>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Diagnostics.ProcessWindowStyle"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.diagnostics.StackFrame" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.diagnostics.StackFrame" extern="1">
		<OFFSET_UNKNOWN public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":readOnly"/></meta>
		</OFFSET_UNKNOWN>
		<GetFileLineNumber public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</GetFileLineNumber>
		<GetFileColumnNumber public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</GetFileColumnNumber>
		<GetFileName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</GetFileName>
		<GetILOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</GetILOffset>
		<GetMethod public="1" set="method">
			<f a=""><c path="cs.system.reflection.MethodBase"/></f>
			<meta><m n=":overload"/></meta>
		</GetMethod>
		<GetNativeOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</GetNativeOffset>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="fileName:lineNumber:colNumber">
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="fileName:lineNumber">
						<c path="String"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="skipFrames:fNeedFileInfo">
						<x path="Int"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="skipFrames">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="fNeedFileInfo">
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.StackFrame"</e></m>
		</meta>
	</class>
	<class path="cs.system.diagnostics.StackTrace" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.diagnostics.StackTrace" extern="1">
		<METHODS_TO_SKIP public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":readOnly"/></meta>
		</METHODS_TO_SKIP>
		<FrameCount public="1" get="accessor" set="null"><x path="Int"/></FrameCount>
		<get_FrameCount set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_FrameCount>
		<GetFrame public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="cs.system.diagnostics.StackFrame"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetFrame>
		<GetFrames public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.diagnostics.StackFrame"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetFrames>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="targetThread:needFileInfo">
						<c path="cs.system.threading.Thread"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="frame">
						<c path="cs.system.diagnostics.StackFrame"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="e:skipFrames:fNeedFileInfo">
						<c path="cs.system.Exception"/>
						<x path="Int"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="e:skipFrames">
						<c path="cs.system.Exception"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="e:fNeedFileInfo">
						<c path="cs.system.Exception"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="e">
						<c path="cs.system.Exception"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="skipFrames:fNeedFileInfo">
						<x path="Int"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="skipFrames">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="fNeedFileInfo">
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.StackTrace"</e></m>
		</meta>
	</class>
	<enum path="cs.system.diagnostics.ThreadPriorityLevel" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.diagnostics.ThreadPriorityLevel">
		<Idle><meta><m n=":csNative"><e>-15</e></m></meta></Idle>
		<Lowest><meta><m n=":csNative"><e>-2</e></m></meta></Lowest>
		<BelowNormal><meta><m n=":csNative"><e>-1</e></m></meta></BelowNormal>
		<Normal><meta><m n=":csNative"><e>0</e></m></meta></Normal>
		<AboveNormal><meta><m n=":csNative"><e>1</e></m></meta></AboveNormal>
		<Highest><meta><m n=":csNative"><e>2</e></m></meta></Highest>
		<TimeCritical><meta><m n=":csNative"><e>15</e></m></meta></TimeCritical>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Diagnostics.ThreadPriorityLevel"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.diagnostics.ThreadState" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.diagnostics.ThreadState">
		<Initialized><meta><m n=":csNative"><e>0</e></m></meta></Initialized>
		<Ready><meta><m n=":csNative"><e>1</e></m></meta></Ready>
		<Running><meta><m n=":csNative"><e>2</e></m></meta></Running>
		<Standby><meta><m n=":csNative"><e>3</e></m></meta></Standby>
		<Terminated><meta><m n=":csNative"><e>4</e></m></meta></Terminated>
		<Wait><meta><m n=":csNative"><e>5</e></m></meta></Wait>
		<Transition><meta><m n=":csNative"><e>6</e></m></meta></Transition>
		<Unknown><meta><m n=":csNative"><e>7</e></m></meta></Unknown>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Diagnostics.ThreadState"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.diagnostics.ThreadWaitReason" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.diagnostics.ThreadWaitReason">
		<Executive><meta><m n=":csNative"><e>0</e></m></meta></Executive>
		<FreePage><meta><m n=":csNative"><e>1</e></m></meta></FreePage>
		<PageIn><meta><m n=":csNative"><e>2</e></m></meta></PageIn>
		<SystemAllocation><meta><m n=":csNative"><e>3</e></m></meta></SystemAllocation>
		<ExecutionDelay><meta><m n=":csNative"><e>4</e></m></meta></ExecutionDelay>
		<Suspended><meta><m n=":csNative"><e>5</e></m></meta></Suspended>
		<UserRequest><meta><m n=":csNative"><e>6</e></m></meta></UserRequest>
		<EventPairHigh><meta><m n=":csNative"><e>7</e></m></meta></EventPairHigh>
		<EventPairLow><meta><m n=":csNative"><e>8</e></m></meta></EventPairLow>
		<LpcReceive><meta><m n=":csNative"><e>9</e></m></meta></LpcReceive>
		<LpcReply><meta><m n=":csNative"><e>10</e></m></meta></LpcReply>
		<VirtualMemory><meta><m n=":csNative"><e>11</e></m></meta></VirtualMemory>
		<PageOut><meta><m n=":csNative"><e>12</e></m></meta></PageOut>
		<Unknown><meta><m n=":csNative"><e>13</e></m></meta></Unknown>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Diagnostics.ThreadWaitReason"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.diagnostics.symbolstore.ISymbolDocumentWriter" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.diagnostics.symbolstore.ISymbolDocumentWriter" extern="1" interface="1">
		<SetCheckSum public="1" set="method">
			<f a="algorithmId:checkSum">
				<c path="cs.system.Guid"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetCheckSum>
		<SetSource public="1" set="method">
			<f a="source">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetSource>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.SymbolStore.ISymbolDocumentWriter"</e></m>
		</meta>
	</class>
	<class path="cs.system.diagnostics.symbolstore.ISymbolWriter" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.diagnostics.symbolstore.ISymbolWriter" extern="1" interface="1">
		<Close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Close>
		<CloseMethod public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</CloseMethod>
		<CloseNamespace public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</CloseNamespace>
		<CloseScope public="1" set="method">
			<f a="endOffset">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CloseScope>
		<DefineDocument public="1" set="method">
			<f a="url:language:languageVendor:documentType">
				<c path="String"/>
				<c path="cs.system.Guid"/>
				<c path="cs.system.Guid"/>
				<c path="cs.system.Guid"/>
				<c path="cs.system.diagnostics.symbolstore.ISymbolDocumentWriter"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DefineDocument>
		<DefineField public="1" set="method">
			<f a="parent:name:attributes:signature:addrKind:addr1:addr2:addr3">
				<c path="cs.system.diagnostics.symbolstore.SymbolToken"/>
				<c path="String"/>
				<e path="cs.system.reflection.FieldAttributes"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<e path="cs.system.diagnostics.symbolstore.SymAddressKind"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DefineField>
		<DefineGlobalVariable public="1" set="method">
			<f a="name:attributes:signature:addrKind:addr1:addr2:addr3">
				<c path="String"/>
				<e path="cs.system.reflection.FieldAttributes"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<e path="cs.system.diagnostics.symbolstore.SymAddressKind"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DefineGlobalVariable>
		<DefineLocalVariable public="1" set="method">
			<f a="name:attributes:signature:addrKind:addr1:addr2:addr3:startOffset:endOffset">
				<c path="String"/>
				<e path="cs.system.reflection.FieldAttributes"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<e path="cs.system.diagnostics.symbolstore.SymAddressKind"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DefineLocalVariable>
		<DefineParameter public="1" set="method">
			<f a="name:attributes:sequence:addrKind:addr1:addr2:addr3">
				<c path="String"/>
				<e path="cs.system.reflection.ParameterAttributes"/>
				<x path="Int"/>
				<e path="cs.system.diagnostics.symbolstore.SymAddressKind"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DefineParameter>
		<DefineSequencePoints public="1" set="method">
			<f a="document:offsets:lines:columns:endLines:endColumns">
				<c path="cs.system.diagnostics.symbolstore.ISymbolDocumentWriter"/>
				<c path="cs.NativeArray"><x path="Int"/></c>
				<c path="cs.NativeArray"><x path="Int"/></c>
				<c path="cs.NativeArray"><x path="Int"/></c>
				<c path="cs.NativeArray"><x path="Int"/></c>
				<c path="cs.NativeArray"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DefineSequencePoints>
		<Initialize public="1" set="method">
			<f a="emitter:filename:fFullBuild">
				<c path="cs.system.IntPtr"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Initialize>
		<OpenMethod public="1" set="method">
			<f a="method">
				<c path="cs.system.diagnostics.symbolstore.SymbolToken"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</OpenMethod>
		<OpenNamespace public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</OpenNamespace>
		<OpenScope public="1" set="method">
			<f a="startOffset">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</OpenScope>
		<SetMethodSourceRange public="1" set="method">
			<f a="startDoc:startLine:startColumn:endDoc:endLine:endColumn">
				<c path="cs.system.diagnostics.symbolstore.ISymbolDocumentWriter"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="cs.system.diagnostics.symbolstore.ISymbolDocumentWriter"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetMethodSourceRange>
		<SetScopeRange public="1" set="method">
			<f a="scopeID:startOffset:endOffset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetScopeRange>
		<SetSymAttribute public="1" set="method">
			<f a="parent:name:data">
				<c path="cs.system.diagnostics.symbolstore.SymbolToken"/>
				<c path="String"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetSymAttribute>
		<SetUnderlyingWriter public="1" set="method">
			<f a="underlyingWriter">
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetUnderlyingWriter>
		<SetUserEntryPoint public="1" set="method">
			<f a="entryMethod">
				<c path="cs.system.diagnostics.symbolstore.SymbolToken"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetUserEntryPoint>
		<UsingNamespace public="1" set="method">
			<f a="fullName">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</UsingNamespace>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.SymbolStore.ISymbolWriter"</e></m>
		</meta>
	</class>
	<enum path="cs.system.diagnostics.symbolstore.SymAddressKind" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.diagnostics.symbolstore.SymAddressKind">
		<ILOffset><meta><m n=":csNative"><e>1</e></m></meta></ILOffset>
		<NativeRVA><meta><m n=":csNative"><e>2</e></m></meta></NativeRVA>
		<NativeRegister><meta><m n=":csNative"><e>3</e></m></meta></NativeRegister>
		<NativeRegisterRelative><meta><m n=":csNative"><e>4</e></m></meta></NativeRegisterRelative>
		<NativeOffset><meta><m n=":csNative"><e>5</e></m></meta></NativeOffset>
		<NativeRegisterRegister><meta><m n=":csNative"><e>6</e></m></meta></NativeRegisterRegister>
		<NativeRegisterStack><meta><m n=":csNative"><e>7</e></m></meta></NativeRegisterStack>
		<NativeStackRegister><meta><m n=":csNative"><e>8</e></m></meta></NativeStackRegister>
		<BitField><meta><m n=":csNative"><e>9</e></m></meta></BitField>
		<NativeSectionOffset><meta><m n=":csNative"><e>10</e></m></meta></NativeSectionOffset>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Diagnostics.SymbolStore.SymAddressKind"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.diagnostics.symbolstore.SymbolToken" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.diagnostics.symbolstore.SymbolToken" extern="1">
		<extends path="cs.system.ValueType"/>
		<op_Equality final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="cs.system.diagnostics.symbolstore.SymbolToken"/>
				<c path="cs.system.diagnostics.symbolstore.SymbolToken"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Equality>
		<op_Inequality final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="cs.system.diagnostics.symbolstore.SymbolToken"/>
				<c path="cs.system.diagnostics.symbolstore.SymbolToken"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Inequality>
		<GetToken final="1" public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</GetToken>
		<new final="1" public="1" set="method">
			<f a="val">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Diagnostics.SymbolStore.SymbolToken"</e></m>
		</meta>
	</class>
	<class path="cs.system.globalization.Calendar" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.globalization.Calendar" extern="1">
		<implements path="cs.system.ICloneable"/>
		<CurrentEra public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":readOnly"/></meta>
		</CurrentEra>
		<ReadOnly final="1" public="1" set="method" static="1">
			<f a="calendar">
				<c path="cs.system.globalization.Calendar"/>
				<c path="cs.system.globalization.Calendar"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ReadOnly>
		<TwoDigitYearMax public="1" get="accessor" set="accessor"><x path="Int"/></TwoDigitYearMax>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<MinSupportedDateTime public="1" get="accessor" set="null"><c path="cs.system.DateTime"/></MinSupportedDateTime>
		<MaxSupportedDateTime public="1" get="accessor" set="null"><c path="cs.system.DateTime"/></MaxSupportedDateTime>
		<AlgorithmType public="1" get="accessor" set="null"><e path="cs.system.globalization.CalendarAlgorithmType"/></AlgorithmType>
		<Eras public="1" get="accessor" set="null"><c path="cs.NativeArray"><x path="Int"/></c></Eras>
		<get_Eras set="method">
			<f a=""><c path="cs.NativeArray"><x path="Int"/></c></f>
			<meta><m n=":overload"/></meta>
		</get_Eras>
		<get_AlgorithmType set="method">
			<f a=""><e path="cs.system.globalization.CalendarAlgorithmType"/></f>
			<meta><m n=":overload"/></meta>
		</get_AlgorithmType>
		<get_MaxSupportedDateTime set="method">
			<f a=""><c path="cs.system.DateTime"/></f>
			<meta><m n=":overload"/></meta>
		</get_MaxSupportedDateTime>
		<get_MinSupportedDateTime set="method">
			<f a=""><c path="cs.system.DateTime"/></f>
			<meta><m n=":overload"/></meta>
		</get_MinSupportedDateTime>
		<Clone public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</Clone>
		<GetLeapMonth public="1" set="method">
			<f a="year">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetLeapMonth public="1" set="method">
	<f a="year:era">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetLeapMonth></overloads>
		</GetLeapMonth>
		<get_IsReadOnly final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsReadOnly>
		<get_TwoDigitYearMax set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_TwoDigitYearMax>
		<set_TwoDigitYearMax set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_TwoDigitYearMax>
		<AddDays public="1" set="method">
			<f a="time:days">
				<c path="cs.system.DateTime"/>
				<x path="Int"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddDays>
		<AddHours public="1" set="method">
			<f a="time:hours">
				<c path="cs.system.DateTime"/>
				<x path="Int"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddHours>
		<AddMilliseconds public="1" set="method">
			<f a="time:milliseconds">
				<c path="cs.system.DateTime"/>
				<x path="Float"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddMilliseconds>
		<AddMinutes public="1" set="method">
			<f a="time:minutes">
				<c path="cs.system.DateTime"/>
				<x path="Int"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddMinutes>
		<AddMonths public="1" set="method">
			<f a="time:months">
				<c path="cs.system.DateTime"/>
				<x path="Int"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddMonths>
		<AddSeconds public="1" set="method">
			<f a="time:seconds">
				<c path="cs.system.DateTime"/>
				<x path="Int"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddSeconds>
		<AddWeeks public="1" set="method">
			<f a="time:weeks">
				<c path="cs.system.DateTime"/>
				<x path="Int"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddWeeks>
		<AddYears public="1" set="method">
			<f a="time:years">
				<c path="cs.system.DateTime"/>
				<x path="Int"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddYears>
		<GetDayOfMonth public="1" set="method">
			<f a="time">
				<c path="cs.system.DateTime"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetDayOfMonth>
		<GetDayOfWeek public="1" set="method">
			<f a="time">
				<c path="cs.system.DateTime"/>
				<e path="cs.system.DayOfWeek"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetDayOfWeek>
		<GetDayOfYear public="1" set="method">
			<f a="time">
				<c path="cs.system.DateTime"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetDayOfYear>
		<GetDaysInMonth public="1" set="method">
			<f a="year:month">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetDaysInMonth public="1" set="method">
	<f a="year:month:era">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetDaysInMonth></overloads>
		</GetDaysInMonth>
		<GetDaysInYear public="1" set="method">
			<f a="year">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetDaysInYear public="1" set="method">
	<f a="year:era">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetDaysInYear></overloads>
		</GetDaysInYear>
		<GetEra public="1" set="method">
			<f a="time">
				<c path="cs.system.DateTime"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetEra>
		<GetHour public="1" set="method">
			<f a="time">
				<c path="cs.system.DateTime"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetHour>
		<GetMilliseconds public="1" set="method">
			<f a="time">
				<c path="cs.system.DateTime"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetMilliseconds>
		<GetMinute public="1" set="method">
			<f a="time">
				<c path="cs.system.DateTime"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetMinute>
		<GetMonth public="1" set="method">
			<f a="time">
				<c path="cs.system.DateTime"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetMonth>
		<GetMonthsInYear public="1" set="method">
			<f a="year">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetMonthsInYear public="1" set="method">
	<f a="year:era">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetMonthsInYear></overloads>
		</GetMonthsInYear>
		<GetSecond public="1" set="method">
			<f a="time">
				<c path="cs.system.DateTime"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetSecond>
		<GetWeekOfYear public="1" set="method">
			<f a="time:rule:firstDayOfWeek">
				<c path="cs.system.DateTime"/>
				<e path="cs.system.globalization.CalendarWeekRule"/>
				<e path="cs.system.DayOfWeek"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetWeekOfYear>
		<GetYear public="1" set="method">
			<f a="time">
				<c path="cs.system.DateTime"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetYear>
		<IsLeapDay public="1" set="method">
			<f a="year:month:day">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><IsLeapDay public="1" set="method">
	<f a="year:month:day:era">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</IsLeapDay></overloads>
		</IsLeapDay>
		<IsLeapMonth public="1" set="method">
			<f a="year:month">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><IsLeapMonth public="1" set="method">
	<f a="year:month:era">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</IsLeapMonth></overloads>
		</IsLeapMonth>
		<IsLeapYear public="1" set="method">
			<f a="year">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><IsLeapYear public="1" set="method">
	<f a="year:era">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</IsLeapYear></overloads>
		</IsLeapYear>
		<ToDateTime public="1" set="method">
			<f a="year:month:day:hour:minute:second:millisecond">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><ToDateTime public="1" set="method">
	<f a="year:month:day:hour:minute:second:millisecond:era">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<c path="cs.system.DateTime"/>
	</f>
	<meta><m n=":overload"/></meta>
</ToDateTime></overloads>
		</ToDateTime>
		<ToFourDigitYear public="1" set="method">
			<f a="year">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToFourDigitYear>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Globalization.Calendar"</e></m>
		</meta>
	</class>
	<enum path="cs.system.globalization.CalendarAlgorithmType" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.globalization.CalendarAlgorithmType">
		<Unknown><meta><m n=":csNative"><e>0</e></m></meta></Unknown>
		<SolarCalendar><meta><m n=":csNative"><e>1</e></m></meta></SolarCalendar>
		<LunarCalendar><meta><m n=":csNative"><e>2</e></m></meta></LunarCalendar>
		<LunisolarCalendar><meta><m n=":csNative"><e>3</e></m></meta></LunisolarCalendar>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Globalization.CalendarAlgorithmType"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.globalization.CalendarWeekRule" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.globalization.CalendarWeekRule">
		<FirstDay><meta><m n=":csNative"><e>0</e></m></meta></FirstDay>
		<FirstFullWeek><meta><m n=":csNative"><e>1</e></m></meta></FirstFullWeek>
		<FirstFourDayWeek><meta><m n=":csNative"><e>2</e></m></meta></FirstFourDayWeek>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Globalization.CalendarWeekRule"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.globalization.CompareInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.globalization.CompareInfo" extern="1">
		<implements path="cs.system.runtime.serialization.IDeserializationCallback"/>
		<GetCompareInfo final="1" public="1" set="method" static="1">
			<f a="culture">
				<x path="Int"/>
				<c path="cs.system.globalization.CompareInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetCompareInfo final="1" public="1" set="method">
					<f a="name:assembly">
						<c path="String"/>
						<c path="cs.system.reflection.Assembly"/>
						<c path="cs.system.globalization.CompareInfo"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetCompareInfo>
				<GetCompareInfo final="1" public="1" set="method">
					<f a="culture:assembly">
						<x path="Int"/>
						<c path="cs.system.reflection.Assembly"/>
						<c path="cs.system.globalization.CompareInfo"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetCompareInfo>
				<GetCompareInfo final="1" public="1" set="method">
					<f a="name">
						<c path="String"/>
						<c path="cs.system.globalization.CompareInfo"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetCompareInfo>
			</overloads>
		</GetCompareInfo>
		<IsSortable final="1" public="1" set="method" static="1">
			<f a="ch">
				<t path="cs.types.Char16"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><IsSortable final="1" public="1" set="method">
	<f a="text">
		<c path="String"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</IsSortable></overloads>
		</IsSortable>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<LCID public="1" get="accessor" set="null"><x path="Int"/></LCID>
		<Compare public="1" set="method">
			<f a="string1:string2">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Compare public="1" set="method">
					<f a="string1:offset1:length1:string2:offset2:length2:options">
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<e path="cs.system.globalization.CompareOptions"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Compare>
				<Compare public="1" set="method">
					<f a="string1:offset1:length1:string2:offset2:length2">
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Compare>
				<Compare public="1" set="method">
					<f a="string1:offset1:string2:offset2:options">
						<c path="String"/>
						<x path="Int"/>
						<c path="String"/>
						<x path="Int"/>
						<e path="cs.system.globalization.CompareOptions"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Compare>
				<Compare public="1" set="method">
					<f a="string1:offset1:string2:offset2">
						<c path="String"/>
						<x path="Int"/>
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Compare>
				<Compare public="1" set="method">
					<f a="string1:string2:options">
						<c path="String"/>
						<c path="String"/>
						<e path="cs.system.globalization.CompareOptions"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Compare>
			</overloads>
		</Compare>
		<GetSortKey public="1" set="method">
			<f a="source">
				<c path="String"/>
				<c path="cs.system.globalization.SortKey"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetSortKey public="1" set="method">
	<f a="source:options">
		<c path="String"/>
		<e path="cs.system.globalization.CompareOptions"/>
		<c path="cs.system.globalization.SortKey"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetSortKey></overloads>
		</GetSortKey>
		<IndexOf public="1" set="method">
			<f a="source:value">
				<c path="String"/>
				<t path="cs.types.Char16"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<IndexOf public="1" set="method">
					<f a="source:value:startIndex:count:options">
						<c path="String"/>
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<e path="cs.system.globalization.CompareOptions"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IndexOf>
				<IndexOf public="1" set="method">
					<f a="source:value:startIndex:count:options">
						<c path="String"/>
						<t path="cs.types.Char16"/>
						<x path="Int"/>
						<x path="Int"/>
						<e path="cs.system.globalization.CompareOptions"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IndexOf>
				<IndexOf public="1" set="method">
					<f a="source:value:startIndex:count">
						<c path="String"/>
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IndexOf>
				<IndexOf public="1" set="method">
					<f a="source:value:startIndex:options">
						<c path="String"/>
						<c path="String"/>
						<x path="Int"/>
						<e path="cs.system.globalization.CompareOptions"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IndexOf>
				<IndexOf public="1" set="method">
					<f a="source:value:startIndex:count">
						<c path="String"/>
						<t path="cs.types.Char16"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IndexOf>
				<IndexOf public="1" set="method">
					<f a="source:value:startIndex:options">
						<c path="String"/>
						<t path="cs.types.Char16"/>
						<x path="Int"/>
						<e path="cs.system.globalization.CompareOptions"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IndexOf>
				<IndexOf public="1" set="method">
					<f a="source:value:startIndex">
						<c path="String"/>
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IndexOf>
				<IndexOf public="1" set="method">
					<f a="source:value:options">
						<c path="String"/>
						<c path="String"/>
						<e path="cs.system.globalization.CompareOptions"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IndexOf>
				<IndexOf public="1" set="method">
					<f a="source:value:startIndex">
						<c path="String"/>
						<t path="cs.types.Char16"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IndexOf>
				<IndexOf public="1" set="method">
					<f a="source:value:options">
						<c path="String"/>
						<t path="cs.types.Char16"/>
						<e path="cs.system.globalization.CompareOptions"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IndexOf>
				<IndexOf public="1" set="method">
					<f a="source:value">
						<c path="String"/>
						<c path="String"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</IndexOf>
			</overloads>
		</IndexOf>
		<IsPrefix public="1" set="method">
			<f a="source:prefix">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><IsPrefix public="1" set="method">
	<f a="source:prefix:options">
		<c path="String"/>
		<c path="String"/>
		<e path="cs.system.globalization.CompareOptions"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</IsPrefix></overloads>
		</IsPrefix>
		<IsSuffix public="1" set="method">
			<f a="source:suffix">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><IsSuffix public="1" set="method">
	<f a="source:suffix:options">
		<c path="String"/>
		<c path="String"/>
		<e path="cs.system.globalization.CompareOptions"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</IsSuffix></overloads>
		</IsSuffix>
		<LastIndexOf public="1" set="method">
			<f a="source:value">
				<c path="String"/>
				<t path="cs.types.Char16"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<LastIndexOf public="1" set="method">
					<f a="source:value:startIndex:count:options">
						<c path="String"/>
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<e path="cs.system.globalization.CompareOptions"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
				<LastIndexOf public="1" set="method">
					<f a="source:value:startIndex:count:options">
						<c path="String"/>
						<t path="cs.types.Char16"/>
						<x path="Int"/>
						<x path="Int"/>
						<e path="cs.system.globalization.CompareOptions"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
				<LastIndexOf public="1" set="method">
					<f a="source:value:startIndex:count">
						<c path="String"/>
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
				<LastIndexOf public="1" set="method">
					<f a="source:value:startIndex:options">
						<c path="String"/>
						<c path="String"/>
						<x path="Int"/>
						<e path="cs.system.globalization.CompareOptions"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
				<LastIndexOf public="1" set="method">
					<f a="source:value:startIndex:count">
						<c path="String"/>
						<t path="cs.types.Char16"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
				<LastIndexOf public="1" set="method">
					<f a="source:value:startIndex:options">
						<c path="String"/>
						<t path="cs.types.Char16"/>
						<x path="Int"/>
						<e path="cs.system.globalization.CompareOptions"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
				<LastIndexOf public="1" set="method">
					<f a="source:value:startIndex">
						<c path="String"/>
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
				<LastIndexOf public="1" set="method">
					<f a="source:value:options">
						<c path="String"/>
						<c path="String"/>
						<e path="cs.system.globalization.CompareOptions"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
				<LastIndexOf public="1" set="method">
					<f a="source:value:startIndex">
						<c path="String"/>
						<t path="cs.types.Char16"/>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
				<LastIndexOf public="1" set="method">
					<f a="source:value:options">
						<c path="String"/>
						<t path="cs.types.Char16"/>
						<e path="cs.system.globalization.CompareOptions"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
				<LastIndexOf public="1" set="method">
					<f a="source:value">
						<c path="String"/>
						<c path="String"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LastIndexOf>
			</overloads>
		</LastIndexOf>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<get_LCID final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_LCID>
		<get_Name set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Globalization.CompareInfo"</e></m>
		</meta>
	</class>
	<enum path="cs.system.globalization.CompareOptions" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.globalization.CompareOptions">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<IgnoreCase><meta><m n=":csNative"><e>1</e></m></meta></IgnoreCase>
		<IgnoreNonSpace><meta><m n=":csNative"><e>2</e></m></meta></IgnoreNonSpace>
		<IgnoreSymbols><meta><m n=":csNative"><e>4</e></m></meta></IgnoreSymbols>
		<IgnoreKanaType><meta><m n=":csNative"><e>8</e></m></meta></IgnoreKanaType>
		<IgnoreWidth><meta><m n=":csNative"><e>16</e></m></meta></IgnoreWidth>
		<OrdinalIgnoreCase><meta><m n=":csNative"><e>268435456</e></m></meta></OrdinalIgnoreCase>
		<StringSort><meta><m n=":csNative"><e>536870912</e></m></meta></StringSort>
		<Ordinal><meta><m n=":csNative"><e>1073741824</e></m></meta></Ordinal>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Globalization.CompareOptions"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.globalization.CultureInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.globalization.CultureInfo" extern="1">
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.IFormatProvider"/>
		<InstalledUICulture public="1" get="accessor" set="null" static="1"><c path="cs.system.globalization.CultureInfo"/></InstalledUICulture>
		<CurrentUICulture public="1" get="accessor" set="null" static="1"><c path="cs.system.globalization.CultureInfo"/></CurrentUICulture>
		<CurrentCulture public="1" get="accessor" set="null" static="1"><c path="cs.system.globalization.CultureInfo"/></CurrentCulture>
		<InvariantCulture public="1" get="accessor" set="null" static="1"><c path="cs.system.globalization.CultureInfo"/></InvariantCulture>
		<get_InvariantCulture final="1" set="method" static="1">
			<f a=""><c path="cs.system.globalization.CultureInfo"/></f>
			<meta><m n=":overload"/></meta>
		</get_InvariantCulture>
		<CreateSpecificCulture final="1" public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.globalization.CultureInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CreateSpecificCulture>
		<get_CurrentCulture final="1" set="method" static="1">
			<f a=""><c path="cs.system.globalization.CultureInfo"/></f>
			<meta><m n=":overload"/></meta>
		</get_CurrentCulture>
		<get_CurrentUICulture final="1" set="method" static="1">
			<f a=""><c path="cs.system.globalization.CultureInfo"/></f>
			<meta><m n=":overload"/></meta>
		</get_CurrentUICulture>
		<GetCultures final="1" public="1" set="method" static="1">
			<f a="types">
				<e path="cs.system.globalization.CultureTypes"/>
				<c path="cs.NativeArray"><c path="cs.system.globalization.CultureInfo"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</GetCultures>
		<ReadOnly final="1" public="1" set="method" static="1">
			<f a="ci">
				<c path="cs.system.globalization.CultureInfo"/>
				<c path="cs.system.globalization.CultureInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ReadOnly>
		<get_InstalledUICulture final="1" set="method" static="1">
			<f a=""><c path="cs.system.globalization.CultureInfo"/></f>
			<meta><m n=":overload"/></meta>
		</get_InstalledUICulture>
		<GetCultureInfo final="1" public="1" set="method" static="1">
			<f a="culture">
				<x path="Int"/>
				<c path="cs.system.globalization.CultureInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetCultureInfo final="1" public="1" set="method">
					<f a="name:altName">
						<c path="String"/>
						<c path="String"/>
						<c path="cs.system.globalization.CultureInfo"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetCultureInfo>
				<GetCultureInfo final="1" public="1" set="method">
					<f a="name">
						<c path="String"/>
						<c path="cs.system.globalization.CultureInfo"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetCultureInfo>
			</overloads>
		</GetCultureInfo>
		<GetCultureInfoByIetfLanguageTag final="1" public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.globalization.CultureInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetCultureInfoByIetfLanguageTag>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<EnglishName public="1" get="accessor" set="null"><c path="String"/></EnglishName>
		<DisplayName public="1" get="accessor" set="null"><c path="String"/></DisplayName>
		<DateTimeFormat public="1" get="accessor" set="accessor"><c path="cs.system.globalization.DateTimeFormatInfo"/></DateTimeFormat>
		<NumberFormat public="1" get="accessor" set="accessor"><c path="cs.system.globalization.NumberFormatInfo"/></NumberFormat>
		<IsNeutralCulture public="1" get="accessor" set="null"><x path="Bool"/></IsNeutralCulture>
		<CompareInfo public="1" get="accessor" set="null"><c path="cs.system.globalization.CompareInfo"/></CompareInfo>
		<UseUserOverride public="1" get="accessor" set="null"><x path="Bool"/></UseUserOverride>
		<TwoLetterISOLanguageName public="1" get="accessor" set="null"><c path="String"/></TwoLetterISOLanguageName>
		<ThreeLetterWindowsLanguageName public="1" get="accessor" set="null"><c path="String"/></ThreeLetterWindowsLanguageName>
		<ThreeLetterISOLanguageName public="1" get="accessor" set="null"><c path="String"/></ThreeLetterISOLanguageName>
		<TextInfo public="1" get="accessor" set="null"><c path="cs.system.globalization.TextInfo"/></TextInfo>
		<Parent public="1" get="accessor" set="null"><c path="cs.system.globalization.CultureInfo"/></Parent>
		<OptionalCalendars public="1" get="accessor" set="null"><c path="cs.NativeArray"><c path="cs.system.globalization.Calendar"/></c></OptionalCalendars>
		<Calendar public="1" get="accessor" set="null"><c path="cs.system.globalization.Calendar"/></Calendar>
		<NativeName public="1" get="accessor" set="null"><c path="String"/></NativeName>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<LCID public="1" get="accessor" set="null"><x path="Int"/></LCID>
		<KeyboardLayoutId public="1" get="accessor" set="null"><x path="Int"/></KeyboardLayoutId>
		<IetfLanguageTag public="1" get="accessor" set="null"><c path="String"/></IetfLanguageTag>
		<CultureTypes public="1" get="accessor" set="null"><e path="cs.system.globalization.CultureTypes"/></CultureTypes>
		<get_CultureTypes final="1" set="method">
			<f a=""><e path="cs.system.globalization.CultureTypes"/></f>
			<meta><m n=":overload"/></meta>
		</get_CultureTypes>
		<GetConsoleFallbackUICulture final="1" public="1" set="method">
			<f a=""><c path="cs.system.globalization.CultureInfo"/></f>
			<meta><m n=":overload"/></meta>
		</GetConsoleFallbackUICulture>
		<get_IetfLanguageTag final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_IetfLanguageTag>
		<get_KeyboardLayoutId set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_KeyboardLayoutId>
		<get_LCID set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_LCID>
		<get_Name set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<get_NativeName set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_NativeName>
		<get_Calendar set="method">
			<f a=""><c path="cs.system.globalization.Calendar"/></f>
			<meta><m n=":overload"/></meta>
		</get_Calendar>
		<get_OptionalCalendars set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.globalization.Calendar"/></c></f>
			<meta><m n=":overload"/></meta>
		</get_OptionalCalendars>
		<get_Parent set="method">
			<f a=""><c path="cs.system.globalization.CultureInfo"/></f>
			<meta><m n=":overload"/></meta>
		</get_Parent>
		<get_TextInfo set="method">
			<f a=""><c path="cs.system.globalization.TextInfo"/></f>
			<meta><m n=":overload"/></meta>
		</get_TextInfo>
		<get_ThreeLetterISOLanguageName set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_ThreeLetterISOLanguageName>
		<get_ThreeLetterWindowsLanguageName set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_ThreeLetterWindowsLanguageName>
		<get_TwoLetterISOLanguageName set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_TwoLetterISOLanguageName>
		<get_UseUserOverride final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_UseUserOverride>
		<ClearCachedData final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</ClearCachedData>
		<Clone public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</Clone>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<get_CompareInfo set="method">
			<f a=""><c path="cs.system.globalization.CompareInfo"/></f>
			<meta><m n=":overload"/></meta>
		</get_CompareInfo>
		<get_IsNeutralCulture set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsNeutralCulture>
		<get_NumberFormat set="method">
			<f a=""><c path="cs.system.globalization.NumberFormatInfo"/></f>
			<meta><m n=":overload"/></meta>
		</get_NumberFormat>
		<set_NumberFormat set="method">
			<f a="value">
				<c path="cs.system.globalization.NumberFormatInfo"/>
				<c path="cs.system.globalization.NumberFormatInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_NumberFormat>
		<get_DateTimeFormat set="method">
			<f a=""><c path="cs.system.globalization.DateTimeFormatInfo"/></f>
			<meta><m n=":overload"/></meta>
		</get_DateTimeFormat>
		<set_DateTimeFormat set="method">
			<f a="value">
				<c path="cs.system.globalization.DateTimeFormatInfo"/>
				<c path="cs.system.globalization.DateTimeFormatInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_DateTimeFormat>
		<get_DisplayName set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_DisplayName>
		<get_EnglishName set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_EnglishName>
		<get_IsReadOnly final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsReadOnly>
		<GetFormat public="1" set="method">
			<f a="formatType">
				<c path="cs.system.Type"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetFormat>
		<new final="1" public="1" set="method">
			<f a="culture">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="name:useUserOverride">
						<c path="String"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="name">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="culture:useUserOverride">
						<x path="Int"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Globalization.CultureInfo"</e></m>
		</meta>
	</class>
	<enum path="cs.system.globalization.CultureTypes" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.globalization.CultureTypes">
		<NeutralCultures><meta><m n=":csNative"><e>1</e></m></meta></NeutralCultures>
		<SpecificCultures><meta><m n=":csNative"><e>2</e></m></meta></SpecificCultures>
		<InstalledWin32Cultures><meta><m n=":csNative"><e>4</e></m></meta></InstalledWin32Cultures>
		<AllCultures><meta><m n=":csNative"><e>7</e></m></meta></AllCultures>
		<UserCustomCulture><meta><m n=":csNative"><e>8</e></m></meta></UserCustomCulture>
		<ReplacementCultures><meta><m n=":csNative"><e>16</e></m></meta></ReplacementCultures>
		<WindowsOnlyCultures><meta><m n=":csNative"><e>32</e></m></meta></WindowsOnlyCultures>
		<FrameworkCultures><meta><m n=":csNative"><e>64</e></m></meta></FrameworkCultures>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Globalization.CultureTypes"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.globalization.DateTimeFormatInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.globalization.DateTimeFormatInfo" extern="1">
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.IFormatProvider"/>
		<InvariantInfo public="1" get="accessor" set="null" static="1"><c path="cs.system.globalization.DateTimeFormatInfo"/></InvariantInfo>
		<CurrentInfo public="1" get="accessor" set="null" static="1"><c path="cs.system.globalization.DateTimeFormatInfo"/></CurrentInfo>
		<GetInstance final="1" public="1" set="method" static="1">
			<f a="provider">
				<c path="cs.system.IFormatProvider"/>
				<c path="cs.system.globalization.DateTimeFormatInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetInstance>
		<ReadOnly final="1" public="1" set="method" static="1">
			<f a="dtfi">
				<c path="cs.system.globalization.DateTimeFormatInfo"/>
				<c path="cs.system.globalization.DateTimeFormatInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ReadOnly>
		<get_CurrentInfo final="1" set="method" static="1">
			<f a=""><c path="cs.system.globalization.DateTimeFormatInfo"/></f>
			<meta><m n=":overload"/></meta>
		</get_CurrentInfo>
		<get_InvariantInfo final="1" set="method" static="1">
			<f a=""><c path="cs.system.globalization.DateTimeFormatInfo"/></f>
			<meta><m n=":overload"/></meta>
		</get_InvariantInfo>
		<ShortestDayNames public="1" get="accessor" set="accessor"><c path="cs.NativeArray"><c path="String"/></c></ShortestDayNames>
		<NativeCalendarName public="1" get="accessor" set="null"><c path="String"/></NativeCalendarName>
		<MonthGenitiveNames public="1" get="accessor" set="accessor"><c path="cs.NativeArray"><c path="String"/></c></MonthGenitiveNames>
		<AbbreviatedMonthGenitiveNames public="1" get="accessor" set="accessor"><c path="cs.NativeArray"><c path="String"/></c></AbbreviatedMonthGenitiveNames>
		<UniversalSortableDateTimePattern public="1" get="accessor" set="null"><c path="String"/></UniversalSortableDateTimePattern>
		<SortableDateTimePattern public="1" get="accessor" set="null"><c path="String"/></SortableDateTimePattern>
		<RFC1123Pattern public="1" get="accessor" set="null"><c path="String"/></RFC1123Pattern>
		<CalendarWeekRule public="1" get="accessor" set="accessor"><e path="cs.system.globalization.CalendarWeekRule"/></CalendarWeekRule>
		<Calendar public="1" get="accessor" set="accessor"><c path="cs.system.globalization.Calendar"/></Calendar>
		<FirstDayOfWeek public="1" get="accessor" set="accessor"><e path="cs.system.DayOfWeek"/></FirstDayOfWeek>
		<FullDateTimePattern public="1" get="accessor" set="accessor"><c path="String"/></FullDateTimePattern>
		<YearMonthPattern public="1" get="accessor" set="accessor"><c path="String"/></YearMonthPattern>
		<MonthDayPattern public="1" get="accessor" set="accessor"><c path="String"/></MonthDayPattern>
		<LongTimePattern public="1" get="accessor" set="accessor"><c path="String"/></LongTimePattern>
		<ShortTimePattern public="1" get="accessor" set="accessor"><c path="String"/></ShortTimePattern>
		<ShortDatePattern public="1" get="accessor" set="accessor"><c path="String"/></ShortDatePattern>
		<LongDatePattern public="1" get="accessor" set="accessor"><c path="String"/></LongDatePattern>
		<TimeSeparator public="1" get="accessor" set="accessor"><c path="String"/></TimeSeparator>
		<DateSeparator public="1" get="accessor" set="accessor"><c path="String"/></DateSeparator>
		<PMDesignator public="1" get="accessor" set="accessor"><c path="String"/></PMDesignator>
		<AMDesignator public="1" get="accessor" set="accessor"><c path="String"/></AMDesignator>
		<MonthNames public="1" get="accessor" set="accessor"><c path="cs.NativeArray"><c path="String"/></c></MonthNames>
		<DayNames public="1" get="accessor" set="accessor"><c path="cs.NativeArray"><c path="String"/></c></DayNames>
		<AbbreviatedMonthNames public="1" get="accessor" set="accessor"><c path="cs.NativeArray"><c path="String"/></c></AbbreviatedMonthNames>
		<AbbreviatedDayNames public="1" get="accessor" set="accessor"><c path="cs.NativeArray"><c path="String"/></c></AbbreviatedDayNames>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<get_IsReadOnly final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsReadOnly>
		<Clone final="1" public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</Clone>
		<GetFormat final="1" public="1" set="method">
			<f a="formatType">
				<c path="cs.system.Type"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetFormat>
		<GetAbbreviatedEraName final="1" public="1" set="method">
			<f a="era">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetAbbreviatedEraName>
		<GetAbbreviatedMonthName final="1" public="1" set="method">
			<f a="month">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetAbbreviatedMonthName>
		<GetEra final="1" public="1" set="method">
			<f a="eraName">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetEra>
		<GetEraName final="1" public="1" set="method">
			<f a="era">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetEraName>
		<GetMonthName final="1" public="1" set="method">
			<f a="month">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetMonthName>
		<get_AbbreviatedDayNames final="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</get_AbbreviatedDayNames>
		<set_AbbreviatedDayNames final="1" set="method">
			<f a="value">
				<c path="cs.NativeArray"><c path="String"/></c>
				<c path="cs.NativeArray"><c path="String"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</set_AbbreviatedDayNames>
		<get_AbbreviatedMonthNames final="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</get_AbbreviatedMonthNames>
		<set_AbbreviatedMonthNames final="1" set="method">
			<f a="value">
				<c path="cs.NativeArray"><c path="String"/></c>
				<c path="cs.NativeArray"><c path="String"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</set_AbbreviatedMonthNames>
		<get_DayNames final="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</get_DayNames>
		<set_DayNames final="1" set="method">
			<f a="value">
				<c path="cs.NativeArray"><c path="String"/></c>
				<c path="cs.NativeArray"><c path="String"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</set_DayNames>
		<get_MonthNames final="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</get_MonthNames>
		<set_MonthNames final="1" set="method">
			<f a="value">
				<c path="cs.NativeArray"><c path="String"/></c>
				<c path="cs.NativeArray"><c path="String"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</set_MonthNames>
		<get_AMDesignator final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_AMDesignator>
		<set_AMDesignator final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_AMDesignator>
		<get_PMDesignator final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_PMDesignator>
		<set_PMDesignator final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_PMDesignator>
		<get_DateSeparator final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_DateSeparator>
		<set_DateSeparator final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_DateSeparator>
		<get_TimeSeparator final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_TimeSeparator>
		<set_TimeSeparator final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_TimeSeparator>
		<get_LongDatePattern final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_LongDatePattern>
		<set_LongDatePattern final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_LongDatePattern>
		<get_ShortDatePattern final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_ShortDatePattern>
		<set_ShortDatePattern final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ShortDatePattern>
		<get_ShortTimePattern final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_ShortTimePattern>
		<set_ShortTimePattern final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ShortTimePattern>
		<get_LongTimePattern final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_LongTimePattern>
		<set_LongTimePattern final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_LongTimePattern>
		<get_MonthDayPattern final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_MonthDayPattern>
		<set_MonthDayPattern final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_MonthDayPattern>
		<get_YearMonthPattern final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_YearMonthPattern>
		<set_YearMonthPattern final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_YearMonthPattern>
		<get_FullDateTimePattern final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_FullDateTimePattern>
		<set_FullDateTimePattern final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_FullDateTimePattern>
		<get_FirstDayOfWeek final="1" set="method">
			<f a=""><e path="cs.system.DayOfWeek"/></f>
			<meta><m n=":overload"/></meta>
		</get_FirstDayOfWeek>
		<set_FirstDayOfWeek final="1" set="method">
			<f a="value">
				<e path="cs.system.DayOfWeek"/>
				<e path="cs.system.DayOfWeek"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_FirstDayOfWeek>
		<get_Calendar final="1" set="method">
			<f a=""><c path="cs.system.globalization.Calendar"/></f>
			<meta><m n=":overload"/></meta>
		</get_Calendar>
		<set_Calendar final="1" set="method">
			<f a="value">
				<c path="cs.system.globalization.Calendar"/>
				<c path="cs.system.globalization.Calendar"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Calendar>
		<get_CalendarWeekRule final="1" set="method">
			<f a=""><e path="cs.system.globalization.CalendarWeekRule"/></f>
			<meta><m n=":overload"/></meta>
		</get_CalendarWeekRule>
		<set_CalendarWeekRule final="1" set="method">
			<f a="value">
				<e path="cs.system.globalization.CalendarWeekRule"/>
				<e path="cs.system.globalization.CalendarWeekRule"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_CalendarWeekRule>
		<get_RFC1123Pattern final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_RFC1123Pattern>
		<get_SortableDateTimePattern final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_SortableDateTimePattern>
		<get_UniversalSortableDateTimePattern final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_UniversalSortableDateTimePattern>
		<GetAllDateTimePatterns final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetAllDateTimePatterns final="1" public="1" set="method">
	<f a="format">
		<t path="cs.types.Char16"/>
		<c path="cs.NativeArray"><c path="String"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetAllDateTimePatterns></overloads>
		</GetAllDateTimePatterns>
		<GetDayName final="1" public="1" set="method">
			<f a="dayofweek">
				<e path="cs.system.DayOfWeek"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetDayName>
		<GetAbbreviatedDayName final="1" public="1" set="method">
			<f a="dayofweek">
				<e path="cs.system.DayOfWeek"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetAbbreviatedDayName>
		<get_AbbreviatedMonthGenitiveNames final="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</get_AbbreviatedMonthGenitiveNames>
		<set_AbbreviatedMonthGenitiveNames final="1" set="method">
			<f a="value">
				<c path="cs.NativeArray"><c path="String"/></c>
				<c path="cs.NativeArray"><c path="String"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</set_AbbreviatedMonthGenitiveNames>
		<get_MonthGenitiveNames final="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</get_MonthGenitiveNames>
		<set_MonthGenitiveNames final="1" set="method">
			<f a="value">
				<c path="cs.NativeArray"><c path="String"/></c>
				<c path="cs.NativeArray"><c path="String"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</set_MonthGenitiveNames>
		<get_NativeCalendarName final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_NativeCalendarName>
		<get_ShortestDayNames final="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</get_ShortestDayNames>
		<set_ShortestDayNames final="1" set="method">
			<f a="value">
				<c path="cs.NativeArray"><c path="String"/></c>
				<c path="cs.NativeArray"><c path="String"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ShortestDayNames>
		<GetShortestDayName final="1" public="1" set="method">
			<f a="dayOfWeek">
				<e path="cs.system.DayOfWeek"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetShortestDayName>
		<SetAllDateTimePatterns final="1" public="1" set="method">
			<f a="patterns:format">
				<c path="cs.NativeArray"><c path="String"/></c>
				<t path="cs.types.Char16"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetAllDateTimePatterns>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Globalization.DateTimeFormatInfo"</e></m>
		</meta>
	</class>
	<enum path="cs.system.globalization.DateTimeStyles" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.globalization.DateTimeStyles">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<AllowLeadingWhite><meta><m n=":csNative"><e>1</e></m></meta></AllowLeadingWhite>
		<AllowTrailingWhite><meta><m n=":csNative"><e>2</e></m></meta></AllowTrailingWhite>
		<AllowInnerWhite><meta><m n=":csNative"><e>4</e></m></meta></AllowInnerWhite>
		<AllowWhiteSpaces><meta><m n=":csNative"><e>7</e></m></meta></AllowWhiteSpaces>
		<NoCurrentDateDefault><meta><m n=":csNative"><e>8</e></m></meta></NoCurrentDateDefault>
		<AdjustToUniversal><meta><m n=":csNative"><e>16</e></m></meta></AdjustToUniversal>
		<AssumeLocal><meta><m n=":csNative"><e>32</e></m></meta></AssumeLocal>
		<AssumeUniversal><meta><m n=":csNative"><e>64</e></m></meta></AssumeUniversal>
		<RoundtripKind><meta><m n=":csNative"><e>128</e></m></meta></RoundtripKind>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Globalization.DateTimeStyles"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.globalization.DaylightTime" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.globalization.DaylightTime" extern="1">
		<Delta public="1" get="accessor" set="null"><c path="cs.system.TimeSpan"/></Delta>
		<End public="1" get="accessor" set="null"><c path="cs.system.DateTime"/></End>
		<Start public="1" get="accessor" set="null"><c path="cs.system.DateTime"/></Start>
		<get_Start final="1" set="method">
			<f a=""><c path="cs.system.DateTime"/></f>
			<meta><m n=":overload"/></meta>
		</get_Start>
		<get_End final="1" set="method">
			<f a=""><c path="cs.system.DateTime"/></f>
			<meta><m n=":overload"/></meta>
		</get_End>
		<get_Delta final="1" set="method">
			<f a=""><c path="cs.system.TimeSpan"/></f>
			<meta><m n=":overload"/></meta>
		</get_Delta>
		<new final="1" public="1" set="method">
			<f a="start:end:delta">
				<c path="cs.system.DateTime"/>
				<c path="cs.system.DateTime"/>
				<c path="cs.system.TimeSpan"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Globalization.DaylightTime"</e></m>
		</meta>
	</class>
	<enum path="cs.system.globalization.DigitShapes" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.globalization.DigitShapes">
		<Context><meta><m n=":csNative"><e>0</e></m></meta></Context>
		<None><meta><m n=":csNative"><e>1</e></m></meta></None>
		<NativeNational><meta><m n=":csNative"><e>2</e></m></meta></NativeNational>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Globalization.DigitShapes"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.globalization.NumberFormatInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.globalization.NumberFormatInfo" extern="1">
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.IFormatProvider"/>
		<InvariantInfo public="1" get="accessor" set="null" static="1"><c path="cs.system.globalization.NumberFormatInfo"/></InvariantInfo>
		<CurrentInfo public="1" get="accessor" set="null" static="1"><c path="cs.system.globalization.NumberFormatInfo"/></CurrentInfo>
		<get_CurrentInfo final="1" set="method" static="1">
			<f a=""><c path="cs.system.globalization.NumberFormatInfo"/></f>
			<meta><m n=":overload"/></meta>
		</get_CurrentInfo>
		<get_InvariantInfo final="1" set="method" static="1">
			<f a=""><c path="cs.system.globalization.NumberFormatInfo"/></f>
			<meta><m n=":overload"/></meta>
		</get_InvariantInfo>
		<ReadOnly final="1" public="1" set="method" static="1">
			<f a="nfi">
				<c path="cs.system.globalization.NumberFormatInfo"/>
				<c path="cs.system.globalization.NumberFormatInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ReadOnly>
		<GetInstance final="1" public="1" set="method" static="1">
			<f a="formatProvider">
				<c path="cs.system.IFormatProvider"/>
				<c path="cs.system.globalization.NumberFormatInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetInstance>
		<PositiveSign public="1" get="accessor" set="accessor"><c path="String"/></PositiveSign>
		<PositiveInfinitySymbol public="1" get="accessor" set="accessor"><c path="String"/></PositiveInfinitySymbol>
		<PerMilleSymbol public="1" get="accessor" set="accessor"><c path="String"/></PerMilleSymbol>
		<PercentSymbol public="1" get="accessor" set="accessor"><c path="String"/></PercentSymbol>
		<PercentPositivePattern public="1" get="accessor" set="accessor"><x path="Int"/></PercentPositivePattern>
		<PercentNegativePattern public="1" get="accessor" set="accessor"><x path="Int"/></PercentNegativePattern>
		<PercentGroupSizes public="1" get="accessor" set="accessor"><c path="cs.NativeArray"><x path="Int"/></c></PercentGroupSizes>
		<PercentGroupSeparator public="1" get="accessor" set="accessor"><c path="String"/></PercentGroupSeparator>
		<PercentDecimalSeparator public="1" get="accessor" set="accessor"><c path="String"/></PercentDecimalSeparator>
		<PercentDecimalDigits public="1" get="accessor" set="accessor"><x path="Int"/></PercentDecimalDigits>
		<NumberNegativePattern public="1" get="accessor" set="accessor"><x path="Int"/></NumberNegativePattern>
		<NumberGroupSizes public="1" get="accessor" set="accessor"><c path="cs.NativeArray"><x path="Int"/></c></NumberGroupSizes>
		<NumberGroupSeparator public="1" get="accessor" set="accessor"><c path="String"/></NumberGroupSeparator>
		<NumberDecimalSeparator public="1" get="accessor" set="accessor"><c path="String"/></NumberDecimalSeparator>
		<NumberDecimalDigits public="1" get="accessor" set="accessor"><x path="Int"/></NumberDecimalDigits>
		<NegativeSign public="1" get="accessor" set="accessor"><c path="String"/></NegativeSign>
		<NegativeInfinitySymbol public="1" get="accessor" set="accessor"><c path="String"/></NegativeInfinitySymbol>
		<DigitSubstitution public="1" get="accessor" set="accessor"><e path="cs.system.globalization.DigitShapes"/></DigitSubstitution>
		<NativeDigits public="1" get="accessor" set="accessor"><c path="cs.NativeArray"><c path="String"/></c></NativeDigits>
		<NaNSymbol public="1" get="accessor" set="accessor"><c path="String"/></NaNSymbol>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<CurrencySymbol public="1" get="accessor" set="accessor"><c path="String"/></CurrencySymbol>
		<CurrencyPositivePattern public="1" get="accessor" set="accessor"><x path="Int"/></CurrencyPositivePattern>
		<CurrencyNegativePattern public="1" get="accessor" set="accessor"><x path="Int"/></CurrencyNegativePattern>
		<CurrencyGroupSizes public="1" get="accessor" set="accessor"><c path="cs.NativeArray"><x path="Int"/></c></CurrencyGroupSizes>
		<CurrencyGroupSeparator public="1" get="accessor" set="accessor"><c path="String"/></CurrencyGroupSeparator>
		<CurrencyDecimalSeparator public="1" get="accessor" set="accessor"><c path="String"/></CurrencyDecimalSeparator>
		<CurrencyDecimalDigits public="1" get="accessor" set="accessor"><x path="Int"/></CurrencyDecimalDigits>
		<get_CurrencyDecimalDigits final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_CurrencyDecimalDigits>
		<set_CurrencyDecimalDigits final="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_CurrencyDecimalDigits>
		<get_CurrencyDecimalSeparator final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_CurrencyDecimalSeparator>
		<set_CurrencyDecimalSeparator final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_CurrencyDecimalSeparator>
		<get_CurrencyGroupSeparator final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_CurrencyGroupSeparator>
		<set_CurrencyGroupSeparator final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_CurrencyGroupSeparator>
		<get_CurrencyGroupSizes final="1" set="method">
			<f a=""><c path="cs.NativeArray"><x path="Int"/></c></f>
			<meta><m n=":overload"/></meta>
		</get_CurrencyGroupSizes>
		<set_CurrencyGroupSizes final="1" set="method">
			<f a="value">
				<c path="cs.NativeArray"><x path="Int"/></c>
				<c path="cs.NativeArray"><x path="Int"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</set_CurrencyGroupSizes>
		<get_CurrencyNegativePattern final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_CurrencyNegativePattern>
		<set_CurrencyNegativePattern final="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_CurrencyNegativePattern>
		<get_CurrencyPositivePattern final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_CurrencyPositivePattern>
		<set_CurrencyPositivePattern final="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_CurrencyPositivePattern>
		<get_CurrencySymbol final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_CurrencySymbol>
		<set_CurrencySymbol final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_CurrencySymbol>
		<get_IsReadOnly final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsReadOnly>
		<get_NaNSymbol final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_NaNSymbol>
		<set_NaNSymbol final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_NaNSymbol>
		<get_NativeDigits final="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</get_NativeDigits>
		<set_NativeDigits final="1" set="method">
			<f a="value">
				<c path="cs.NativeArray"><c path="String"/></c>
				<c path="cs.NativeArray"><c path="String"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</set_NativeDigits>
		<get_DigitSubstitution final="1" set="method">
			<f a=""><e path="cs.system.globalization.DigitShapes"/></f>
			<meta><m n=":overload"/></meta>
		</get_DigitSubstitution>
		<set_DigitSubstitution final="1" set="method">
			<f a="value">
				<e path="cs.system.globalization.DigitShapes"/>
				<e path="cs.system.globalization.DigitShapes"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_DigitSubstitution>
		<get_NegativeInfinitySymbol final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_NegativeInfinitySymbol>
		<set_NegativeInfinitySymbol final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_NegativeInfinitySymbol>
		<get_NegativeSign final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_NegativeSign>
		<set_NegativeSign final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_NegativeSign>
		<get_NumberDecimalDigits final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_NumberDecimalDigits>
		<set_NumberDecimalDigits final="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_NumberDecimalDigits>
		<get_NumberDecimalSeparator final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_NumberDecimalSeparator>
		<set_NumberDecimalSeparator final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_NumberDecimalSeparator>
		<get_NumberGroupSeparator final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_NumberGroupSeparator>
		<set_NumberGroupSeparator final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_NumberGroupSeparator>
		<get_NumberGroupSizes final="1" set="method">
			<f a=""><c path="cs.NativeArray"><x path="Int"/></c></f>
			<meta><m n=":overload"/></meta>
		</get_NumberGroupSizes>
		<set_NumberGroupSizes final="1" set="method">
			<f a="value">
				<c path="cs.NativeArray"><x path="Int"/></c>
				<c path="cs.NativeArray"><x path="Int"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</set_NumberGroupSizes>
		<get_NumberNegativePattern final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_NumberNegativePattern>
		<set_NumberNegativePattern final="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_NumberNegativePattern>
		<get_PercentDecimalDigits final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_PercentDecimalDigits>
		<set_PercentDecimalDigits final="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_PercentDecimalDigits>
		<get_PercentDecimalSeparator final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_PercentDecimalSeparator>
		<set_PercentDecimalSeparator final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_PercentDecimalSeparator>
		<get_PercentGroupSeparator final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_PercentGroupSeparator>
		<set_PercentGroupSeparator final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_PercentGroupSeparator>
		<get_PercentGroupSizes final="1" set="method">
			<f a=""><c path="cs.NativeArray"><x path="Int"/></c></f>
			<meta><m n=":overload"/></meta>
		</get_PercentGroupSizes>
		<set_PercentGroupSizes final="1" set="method">
			<f a="value">
				<c path="cs.NativeArray"><x path="Int"/></c>
				<c path="cs.NativeArray"><x path="Int"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</set_PercentGroupSizes>
		<get_PercentNegativePattern final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_PercentNegativePattern>
		<set_PercentNegativePattern final="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_PercentNegativePattern>
		<get_PercentPositivePattern final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_PercentPositivePattern>
		<set_PercentPositivePattern final="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_PercentPositivePattern>
		<get_PercentSymbol final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_PercentSymbol>
		<set_PercentSymbol final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_PercentSymbol>
		<get_PerMilleSymbol final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_PerMilleSymbol>
		<set_PerMilleSymbol final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_PerMilleSymbol>
		<get_PositiveInfinitySymbol final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_PositiveInfinitySymbol>
		<set_PositiveInfinitySymbol final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_PositiveInfinitySymbol>
		<get_PositiveSign final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_PositiveSign>
		<set_PositiveSign final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_PositiveSign>
		<GetFormat final="1" public="1" set="method">
			<f a="formatType">
				<c path="cs.system.Type"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetFormat>
		<Clone final="1" public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</Clone>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Globalization.NumberFormatInfo"</e></m>
		</meta>
	</class>
	<enum path="cs.system.globalization.NumberStyles" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.globalization.NumberStyles">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<AllowLeadingWhite><meta><m n=":csNative"><e>1</e></m></meta></AllowLeadingWhite>
		<AllowTrailingWhite><meta><m n=":csNative"><e>2</e></m></meta></AllowTrailingWhite>
		<AllowLeadingSign><meta><m n=":csNative"><e>4</e></m></meta></AllowLeadingSign>
		<Integer><meta><m n=":csNative"><e>7</e></m></meta></Integer>
		<AllowTrailingSign><meta><m n=":csNative"><e>8</e></m></meta></AllowTrailingSign>
		<AllowParentheses><meta><m n=":csNative"><e>16</e></m></meta></AllowParentheses>
		<AllowDecimalPoint><meta><m n=":csNative"><e>32</e></m></meta></AllowDecimalPoint>
		<AllowThousands><meta><m n=":csNative"><e>64</e></m></meta></AllowThousands>
		<Number><meta><m n=":csNative"><e>111</e></m></meta></Number>
		<AllowExponent><meta><m n=":csNative"><e>128</e></m></meta></AllowExponent>
		<Float><meta><m n=":csNative"><e>167</e></m></meta></Float>
		<AllowCurrencySymbol><meta><m n=":csNative"><e>256</e></m></meta></AllowCurrencySymbol>
		<Currency><meta><m n=":csNative"><e>383</e></m></meta></Currency>
		<Any><meta><m n=":csNative"><e>511</e></m></meta></Any>
		<AllowHexSpecifier><meta><m n=":csNative"><e>512</e></m></meta></AllowHexSpecifier>
		<HexNumber><meta><m n=":csNative"><e>515</e></m></meta></HexNumber>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Globalization.NumberStyles"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.globalization.SortKey" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.globalization.SortKey" extern="1">
		<Compare final="1" public="1" set="method" static="1">
			<f a="sortkey1:sortkey2">
				<c path="cs.system.globalization.SortKey"/>
				<c path="cs.system.globalization.SortKey"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Compare>
		<KeyData public="1" get="accessor" set="null"><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></KeyData>
		<OriginalString public="1" get="accessor" set="null"><c path="String"/></OriginalString>
		<get_OriginalString set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_OriginalString>
		<get_KeyData set="method">
			<f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f>
			<meta><m n=":overload"/></meta>
		</get_KeyData>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Globalization.SortKey"</e></m>
		</meta>
	</class>
	<class path="cs.system.globalization.TextInfo_Data" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.globalization.TextInfo" module="cs.system.globalization.TextInfo" extern="1">
		<extends path="cs.system.ValueType"/>
		<list_sep public="1"><t path="cs.types.UInt8"/></list_sep>
		<oem public="1"><x path="Int"/></oem>
		<mac public="1"><x path="Int"/></mac>
		<ebcdic public="1"><x path="Int"/></ebcdic>
		<ansi public="1"><x path="Int"/></ansi>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Globalization.TextInfo.Data"</e></m>
		</meta>
	</class>
	<class path="cs.system.globalization.TextInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.globalization.TextInfo" extern="1">
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.runtime.serialization.IDeserializationCallback"/>
		<ReadOnly final="1" public="1" set="method" static="1">
			<f a="textInfo">
				<c path="cs.system.globalization.TextInfo"/>
				<c path="cs.system.globalization.TextInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ReadOnly>
		<IsRightToLeft public="1" get="accessor" set="null"><x path="Bool"/></IsRightToLeft>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<CultureName public="1" get="accessor" set="null"><c path="String"/></CultureName>
		<OEMCodePage public="1" get="accessor" set="null"><x path="Int"/></OEMCodePage>
		<MacCodePage public="1" get="accessor" set="null"><x path="Int"/></MacCodePage>
		<ListSeparator public="1" get="accessor" set="accessor"><c path="String"/></ListSeparator>
		<LCID public="1" get="accessor" set="null"><x path="Int"/></LCID>
		<EBCDICCodePage public="1" get="accessor" set="null"><x path="Int"/></EBCDICCodePage>
		<ANSICodePage public="1" get="accessor" set="null"><x path="Int"/></ANSICodePage>
		<get_ANSICodePage set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_ANSICodePage>
		<get_EBCDICCodePage set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_EBCDICCodePage>
		<get_LCID final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_LCID>
		<get_ListSeparator set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_ListSeparator>
		<set_ListSeparator set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ListSeparator>
		<get_MacCodePage set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_MacCodePage>
		<get_OEMCodePage set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_OEMCodePage>
		<get_CultureName final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_CultureName>
		<get_IsReadOnly final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsReadOnly>
		<get_IsRightToLeft final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsRightToLeft>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<ToTitleCase final="1" public="1" set="method">
			<f a="str">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToTitleCase>
		<ToLower public="1" set="method">
			<f a="c">
				<t path="cs.types.Char16"/>
				<t path="cs.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><ToLower public="1" set="method">
	<f a="str">
		<c path="String"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</ToLower></overloads>
		</ToLower>
		<ToUpper public="1" set="method">
			<f a="c">
				<t path="cs.types.Char16"/>
				<t path="cs.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><ToUpper public="1" set="method">
	<f a="str">
		<c path="String"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</ToUpper></overloads>
		</ToUpper>
		<Clone public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</Clone>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Globalization.TextInfo"</e></m>
		</meta>
	</class>
	<enum path="cs.system.globalization.UnicodeCategory" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.globalization.UnicodeCategory">
		<UppercaseLetter><meta><m n=":csNative"><e>0</e></m></meta></UppercaseLetter>
		<LowercaseLetter><meta><m n=":csNative"><e>1</e></m></meta></LowercaseLetter>
		<TitlecaseLetter><meta><m n=":csNative"><e>2</e></m></meta></TitlecaseLetter>
		<ModifierLetter><meta><m n=":csNative"><e>3</e></m></meta></ModifierLetter>
		<OtherLetter><meta><m n=":csNative"><e>4</e></m></meta></OtherLetter>
		<NonSpacingMark><meta><m n=":csNative"><e>5</e></m></meta></NonSpacingMark>
		<SpacingCombiningMark><meta><m n=":csNative"><e>6</e></m></meta></SpacingCombiningMark>
		<EnclosingMark><meta><m n=":csNative"><e>7</e></m></meta></EnclosingMark>
		<DecimalDigitNumber><meta><m n=":csNative"><e>8</e></m></meta></DecimalDigitNumber>
		<LetterNumber><meta><m n=":csNative"><e>9</e></m></meta></LetterNumber>
		<OtherNumber><meta><m n=":csNative"><e>10</e></m></meta></OtherNumber>
		<SpaceSeparator><meta><m n=":csNative"><e>11</e></m></meta></SpaceSeparator>
		<LineSeparator><meta><m n=":csNative"><e>12</e></m></meta></LineSeparator>
		<ParagraphSeparator><meta><m n=":csNative"><e>13</e></m></meta></ParagraphSeparator>
		<Control><meta><m n=":csNative"><e>14</e></m></meta></Control>
		<Format><meta><m n=":csNative"><e>15</e></m></meta></Format>
		<Surrogate><meta><m n=":csNative"><e>16</e></m></meta></Surrogate>
		<PrivateUse><meta><m n=":csNative"><e>17</e></m></meta></PrivateUse>
		<ConnectorPunctuation><meta><m n=":csNative"><e>18</e></m></meta></ConnectorPunctuation>
		<DashPunctuation><meta><m n=":csNative"><e>19</e></m></meta></DashPunctuation>
		<OpenPunctuation><meta><m n=":csNative"><e>20</e></m></meta></OpenPunctuation>
		<ClosePunctuation><meta><m n=":csNative"><e>21</e></m></meta></ClosePunctuation>
		<InitialQuotePunctuation><meta><m n=":csNative"><e>22</e></m></meta></InitialQuotePunctuation>
		<FinalQuotePunctuation><meta><m n=":csNative"><e>23</e></m></meta></FinalQuotePunctuation>
		<OtherPunctuation><meta><m n=":csNative"><e>24</e></m></meta></OtherPunctuation>
		<MathSymbol><meta><m n=":csNative"><e>25</e></m></meta></MathSymbol>
		<CurrencySymbol><meta><m n=":csNative"><e>26</e></m></meta></CurrencySymbol>
		<ModifierSymbol><meta><m n=":csNative"><e>27</e></m></meta></ModifierSymbol>
		<OtherSymbol><meta><m n=":csNative"><e>28</e></m></meta></OtherSymbol>
		<OtherNotAssigned><meta><m n=":csNative"><e>29</e></m></meta></OtherNotAssigned>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Globalization.UnicodeCategory"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.io.Directory" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.io.Directory" extern="1">
		<CreateDirectory final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="cs.system.io.DirectoryInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><CreateDirectory final="1" public="1" set="method">
	<f a="path:directorySecurity">
		<c path="String"/>
		<c path="cs.system.security.accesscontrol.DirectorySecurity"/>
		<c path="cs.system.io.DirectoryInfo"/>
	</f>
	<meta><m n=":overload"/></meta>
</CreateDirectory></overloads>
		</CreateDirectory>
		<Delete final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><Delete final="1" public="1" set="method">
	<f a="path:recursive">
		<c path="String"/>
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</Delete></overloads>
		</Delete>
		<Exists final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Exists>
		<GetLastAccessTime final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetLastAccessTime>
		<GetLastAccessTimeUtc final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetLastAccessTimeUtc>
		<GetLastWriteTime final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetLastWriteTime>
		<GetLastWriteTimeUtc final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetLastWriteTimeUtc>
		<GetCreationTime final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetCreationTime>
		<GetCreationTimeUtc final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetCreationTimeUtc>
		<GetCurrentDirectory final="1" public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</GetCurrentDirectory>
		<GetDirectories final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="cs.NativeArray"><c path="String"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetDirectories final="1" public="1" set="method">
					<f a="path:searchPattern:searchOption">
						<c path="String"/>
						<c path="String"/>
						<e path="cs.system.io.SearchOption"/>
						<c path="cs.NativeArray"><c path="String"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetDirectories>
				<GetDirectories final="1" public="1" set="method">
					<f a="path:searchPattern">
						<c path="String"/>
						<c path="String"/>
						<c path="cs.NativeArray"><c path="String"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetDirectories>
			</overloads>
		</GetDirectories>
		<GetDirectoryRoot final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetDirectoryRoot>
		<GetFiles final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="cs.NativeArray"><c path="String"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetFiles final="1" public="1" set="method">
					<f a="path:searchPattern:searchOption">
						<c path="String"/>
						<c path="String"/>
						<e path="cs.system.io.SearchOption"/>
						<c path="cs.NativeArray"><c path="String"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetFiles>
				<GetFiles final="1" public="1" set="method">
					<f a="path:searchPattern">
						<c path="String"/>
						<c path="String"/>
						<c path="cs.NativeArray"><c path="String"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetFiles>
			</overloads>
		</GetFiles>
		<GetFileSystemEntries final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="cs.NativeArray"><c path="String"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetFileSystemEntries final="1" public="1" set="method">
	<f a="path:searchPattern">
		<c path="String"/>
		<c path="String"/>
		<c path="cs.NativeArray"><c path="String"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetFileSystemEntries></overloads>
		</GetFileSystemEntries>
		<GetLogicalDrives final="1" public="1" set="method" static="1">
			<f a=""><c path="cs.NativeArray"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetLogicalDrives>
		<GetParent final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="cs.system.io.DirectoryInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetParent>
		<Move final="1" public="1" set="method" static="1">
			<f a="sourceDirName:destDirName">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Move>
		<SetAccessControl final="1" public="1" set="method" static="1">
			<f a="path:directorySecurity">
				<c path="String"/>
				<c path="cs.system.security.accesscontrol.DirectorySecurity"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetAccessControl>
		<SetCreationTime final="1" public="1" set="method" static="1">
			<f a="path:creationTime">
				<c path="String"/>
				<c path="cs.system.DateTime"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetCreationTime>
		<SetCreationTimeUtc final="1" public="1" set="method" static="1">
			<f a="path:creationTimeUtc">
				<c path="String"/>
				<c path="cs.system.DateTime"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetCreationTimeUtc>
		<SetCurrentDirectory final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetCurrentDirectory>
		<SetLastAccessTime final="1" public="1" set="method" static="1">
			<f a="path:lastAccessTime">
				<c path="String"/>
				<c path="cs.system.DateTime"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetLastAccessTime>
		<SetLastAccessTimeUtc final="1" public="1" set="method" static="1">
			<f a="path:lastAccessTimeUtc">
				<c path="String"/>
				<c path="cs.system.DateTime"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetLastAccessTimeUtc>
		<SetLastWriteTime final="1" public="1" set="method" static="1">
			<f a="path:lastWriteTime">
				<c path="String"/>
				<c path="cs.system.DateTime"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetLastWriteTime>
		<SetLastWriteTimeUtc final="1" public="1" set="method" static="1">
			<f a="path:lastWriteTimeUtc">
				<c path="String"/>
				<c path="cs.system.DateTime"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetLastWriteTimeUtc>
		<GetAccessControl final="1" public="1" set="method" static="1">
			<f a="path:includeSections">
				<c path="String"/>
				<e path="cs.system.security.accesscontrol.AccessControlSections"/>
				<c path="cs.system.security.accesscontrol.DirectorySecurity"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetAccessControl final="1" public="1" set="method">
	<f a="path">
		<c path="String"/>
		<c path="cs.system.security.accesscontrol.DirectorySecurity"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetAccessControl></overloads>
		</GetAccessControl>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.Directory"</e></m>
		</meta>
	</class>
	<class path="cs.system.io.DirectoryInfo__x60_InternalGetFileSystemInfos_x62_c__AnonStorey0" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.io.DirectoryInfo" module="cs.system.io.DirectoryInfo" extern="1">
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e><![CDATA["System.IO.DirectoryInfo.<InternalGetFileSystemInfos>c__AnonStorey0"]]></e></m>
		</meta>
	</class>
	<class path="cs.system.io.FileSystemInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.io.FileSystemInfo" extern="1">
		<extends path="cs.system.MarshalByRefObject"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<LastWriteTimeUtc public="1" get="accessor" set="accessor"><c path="cs.system.DateTime"/></LastWriteTimeUtc>
		<LastWriteTime public="1" get="accessor" set="accessor"><c path="cs.system.DateTime"/></LastWriteTime>
		<LastAccessTimeUtc public="1" get="accessor" set="accessor"><c path="cs.system.DateTime"/></LastAccessTimeUtc>
		<LastAccessTime public="1" get="accessor" set="accessor"><c path="cs.system.DateTime"/></LastAccessTime>
		<CreationTimeUtc public="1" get="accessor" set="accessor"><c path="cs.system.DateTime"/></CreationTimeUtc>
		<CreationTime public="1" get="accessor" set="accessor"><c path="cs.system.DateTime"/></CreationTime>
		<Attributes public="1" get="accessor" set="accessor"><e path="cs.system.io.FileAttributes"/></Attributes>
		<Extension public="1" get="accessor" set="null"><c path="String"/></Extension>
		<FullName public="1" get="accessor" set="null"><c path="String"/></FullName>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<Exists public="1" get="accessor" set="null"><x path="Bool"/></Exists>
		<OriginalPath><c path="String"/></OriginalPath>
		<FullPath><c path="String"/></FullPath>
		<GetObjectData public="1" set="method">
			<f a="info:context">
				<c path="cs.system.runtime.serialization.SerializationInfo"/>
				<c path="cs.system.runtime.serialization.StreamingContext"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetObjectData>
		<get_Exists set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_Exists>
		<get_Name set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<get_FullName set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_FullName>
		<get_Extension final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Extension>
		<get_Attributes final="1" set="method">
			<f a=""><e path="cs.system.io.FileAttributes"/></f>
			<meta><m n=":overload"/></meta>
		</get_Attributes>
		<set_Attributes final="1" set="method">
			<f a="value">
				<e path="cs.system.io.FileAttributes"/>
				<e path="cs.system.io.FileAttributes"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Attributes>
		<get_CreationTime final="1" set="method">
			<f a=""><c path="cs.system.DateTime"/></f>
			<meta><m n=":overload"/></meta>
		</get_CreationTime>
		<set_CreationTime final="1" set="method">
			<f a="value">
				<c path="cs.system.DateTime"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_CreationTime>
		<get_CreationTimeUtc final="1" set="method">
			<f a=""><c path="cs.system.DateTime"/></f>
			<meta><m n=":overload"/></meta>
		</get_CreationTimeUtc>
		<set_CreationTimeUtc final="1" set="method">
			<f a="value">
				<c path="cs.system.DateTime"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_CreationTimeUtc>
		<get_LastAccessTime final="1" set="method">
			<f a=""><c path="cs.system.DateTime"/></f>
			<meta><m n=":overload"/></meta>
		</get_LastAccessTime>
		<set_LastAccessTime final="1" set="method">
			<f a="value">
				<c path="cs.system.DateTime"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_LastAccessTime>
		<get_LastAccessTimeUtc final="1" set="method">
			<f a=""><c path="cs.system.DateTime"/></f>
			<meta><m n=":overload"/></meta>
		</get_LastAccessTimeUtc>
		<set_LastAccessTimeUtc final="1" set="method">
			<f a="value">
				<c path="cs.system.DateTime"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_LastAccessTimeUtc>
		<get_LastWriteTime final="1" set="method">
			<f a=""><c path="cs.system.DateTime"/></f>
			<meta><m n=":overload"/></meta>
		</get_LastWriteTime>
		<set_LastWriteTime final="1" set="method">
			<f a="value">
				<c path="cs.system.DateTime"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_LastWriteTime>
		<get_LastWriteTimeUtc final="1" set="method">
			<f a=""><c path="cs.system.DateTime"/></f>
			<meta><m n=":overload"/></meta>
		</get_LastWriteTimeUtc>
		<set_LastWriteTimeUtc final="1" set="method">
			<f a="value">
				<c path="cs.system.DateTime"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_LastWriteTimeUtc>
		<Delete public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Delete>
		<Refresh final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Refresh>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
			<overloads><new final="1" set="method">
	<f a="info:context">
		<c path="cs.system.runtime.serialization.SerializationInfo"/>
		<c path="cs.system.runtime.serialization.StreamingContext"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":protected"/>
		<m n=":overload"/>
	</meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.FileSystemInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.io.DirectoryInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.io.DirectoryInfo" extern="1">
		<extends path="cs.system.io.FileSystemInfo"/>
		<Root public="1" get="accessor" set="null"><c path="cs.system.io.DirectoryInfo"/></Root>
		<Parent public="1" get="accessor" set="null"><c path="cs.system.io.DirectoryInfo"/></Parent>
		<Name public="1" get="accessor" set="null" override="1"><c path="String"/></Name>
		<Exists public="1" get="accessor" set="null" override="1"><x path="Bool"/></Exists>
		<get_Exists set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_Exists>
		<get_Name set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<get_Parent final="1" set="method">
			<f a=""><c path="cs.system.io.DirectoryInfo"/></f>
			<meta><m n=":overload"/></meta>
		</get_Parent>
		<get_Root final="1" set="method">
			<f a=""><c path="cs.system.io.DirectoryInfo"/></f>
			<meta><m n=":overload"/></meta>
		</get_Root>
		<Create final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><Create final="1" public="1" set="method">
	<f a="directorySecurity">
		<c path="cs.system.security.accesscontrol.DirectorySecurity"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</Create></overloads>
		</Create>
		<CreateSubdirectory final="1" public="1" set="method">
			<f a="path">
				<c path="String"/>
				<c path="cs.system.io.DirectoryInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><CreateSubdirectory final="1" public="1" set="method">
	<f a="path:directorySecurity">
		<c path="String"/>
		<c path="cs.system.security.accesscontrol.DirectorySecurity"/>
		<c path="cs.system.io.DirectoryInfo"/>
	</f>
	<meta><m n=":overload"/></meta>
</CreateSubdirectory></overloads>
		</CreateSubdirectory>
		<GetFiles final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.io.FileInfo"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetFiles final="1" public="1" set="method">
					<f a="searchPattern:searchOption">
						<c path="String"/>
						<e path="cs.system.io.SearchOption"/>
						<c path="cs.NativeArray"><c path="cs.system.io.FileInfo"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetFiles>
				<GetFiles final="1" public="1" set="method">
					<f a="searchPattern">
						<c path="String"/>
						<c path="cs.NativeArray"><c path="cs.system.io.FileInfo"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetFiles>
			</overloads>
		</GetFiles>
		<GetDirectories final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.io.DirectoryInfo"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetDirectories final="1" public="1" set="method">
					<f a="searchPattern:searchOption">
						<c path="String"/>
						<e path="cs.system.io.SearchOption"/>
						<c path="cs.NativeArray"><c path="cs.system.io.DirectoryInfo"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetDirectories>
				<GetDirectories final="1" public="1" set="method">
					<f a="searchPattern">
						<c path="String"/>
						<c path="cs.NativeArray"><c path="cs.system.io.DirectoryInfo"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetDirectories>
			</overloads>
		</GetDirectories>
		<GetFileSystemInfos final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.io.FileSystemInfo"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetFileSystemInfos final="1" public="1" set="method">
	<f a="searchPattern">
		<c path="String"/>
		<c path="cs.NativeArray"><c path="cs.system.io.FileSystemInfo"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetFileSystemInfos></overloads>
		</GetFileSystemInfos>
		<Delete public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><Delete final="1" public="1" set="method">
	<f a="recursive">
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</Delete></overloads>
		</Delete>
		<MoveTo final="1" public="1" set="method">
			<f a="destDirName">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</MoveTo>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<GetAccessControl final="1" public="1" set="method">
			<f a=""><c path="cs.system.security.accesscontrol.DirectorySecurity"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetAccessControl final="1" public="1" set="method">
	<f a="includeSections">
		<e path="cs.system.security.accesscontrol.AccessControlSections"/>
		<c path="cs.system.security.accesscontrol.DirectorySecurity"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetAccessControl></overloads>
		</GetAccessControl>
		<SetAccessControl final="1" public="1" set="method">
			<f a="directorySecurity">
				<c path="cs.system.security.accesscontrol.DirectorySecurity"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetAccessControl>
		<new final="1" public="1" set="method">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.DirectoryInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.io.File" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.io.File" extern="1">
		<AppendAllText final="1" public="1" set="method" static="1">
			<f a="path:contents">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><AppendAllText final="1" public="1" set="method">
	<f a="path:contents:encoding">
		<c path="String"/>
		<c path="String"/>
		<c path="cs.system.text.Encoding"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</AppendAllText></overloads>
		</AppendAllText>
		<AppendText final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="cs.system.io.StreamWriter"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AppendText>
		<Copy final="1" public="1" set="method" static="1">
			<f a="sourceFileName:destFileName">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><Copy final="1" public="1" set="method">
	<f a="sourceFileName:destFileName:overwrite">
		<c path="String"/>
		<c path="String"/>
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</Copy></overloads>
		</Copy>
		<Create final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="cs.system.io.FileStream"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Create final="1" public="1" set="method">
					<f a="path:bufferSize:options:fileSecurity">
						<c path="String"/>
						<x path="Int"/>
						<e path="cs.system.io.FileOptions"/>
						<c path="cs.system.security.accesscontrol.FileSecurity"/>
						<c path="cs.system.io.FileStream"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Create>
				<Create final="1" public="1" set="method">
					<f a="path:bufferSize:options">
						<c path="String"/>
						<x path="Int"/>
						<e path="cs.system.io.FileOptions"/>
						<c path="cs.system.io.FileStream"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Create>
				<Create final="1" public="1" set="method">
					<f a="path:bufferSize">
						<c path="String"/>
						<x path="Int"/>
						<c path="cs.system.io.FileStream"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Create>
			</overloads>
		</Create>
		<CreateText final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="cs.system.io.StreamWriter"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CreateText>
		<Delete final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Delete>
		<Exists final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Exists>
		<GetAccessControl final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="cs.system.security.accesscontrol.FileSecurity"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetAccessControl final="1" public="1" set="method">
	<f a="path:includeSections">
		<c path="String"/>
		<e path="cs.system.security.accesscontrol.AccessControlSections"/>
		<c path="cs.system.security.accesscontrol.FileSecurity"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetAccessControl></overloads>
		</GetAccessControl>
		<GetAttributes final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<e path="cs.system.io.FileAttributes"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetAttributes>
		<GetCreationTime final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetCreationTime>
		<GetCreationTimeUtc final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetCreationTimeUtc>
		<GetLastAccessTime final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetLastAccessTime>
		<GetLastAccessTimeUtc final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetLastAccessTimeUtc>
		<GetLastWriteTime final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetLastWriteTime>
		<GetLastWriteTimeUtc final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetLastWriteTimeUtc>
		<Move final="1" public="1" set="method" static="1">
			<f a="sourceFileName:destFileName">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Move>
		<Open final="1" public="1" set="method" static="1">
			<f a="path:mode">
				<c path="String"/>
				<e path="cs.system.io.FileMode"/>
				<c path="cs.system.io.FileStream"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Open final="1" public="1" set="method">
					<f a="path:mode:access:share">
						<c path="String"/>
						<e path="cs.system.io.FileMode"/>
						<e path="cs.system.io.FileAccess"/>
						<e path="cs.system.io.FileShare"/>
						<c path="cs.system.io.FileStream"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Open>
				<Open final="1" public="1" set="method">
					<f a="path:mode:access">
						<c path="String"/>
						<e path="cs.system.io.FileMode"/>
						<e path="cs.system.io.FileAccess"/>
						<c path="cs.system.io.FileStream"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Open>
			</overloads>
		</Open>
		<OpenRead final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="cs.system.io.FileStream"/>
			</f>
			<meta><m n=":overload"/></meta>
		</OpenRead>
		<OpenText final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="cs.system.io.StreamReader"/>
			</f>
			<meta><m n=":overload"/></meta>
		</OpenText>
		<OpenWrite final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="cs.system.io.FileStream"/>
			</f>
			<meta><m n=":overload"/></meta>
		</OpenWrite>
		<Replace final="1" public="1" set="method" static="1">
			<f a="sourceFileName:destinationFileName:destinationBackupFileName">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><Replace final="1" public="1" set="method">
	<f a="sourceFileName:destinationFileName:destinationBackupFileName:ignoreMetadataErrors">
		<c path="String"/>
		<c path="String"/>
		<c path="String"/>
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</Replace></overloads>
		</Replace>
		<SetAccessControl final="1" public="1" set="method" static="1">
			<f a="path:fileSecurity">
				<c path="String"/>
				<c path="cs.system.security.accesscontrol.FileSecurity"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetAccessControl>
		<SetAttributes final="1" public="1" set="method" static="1">
			<f a="path:fileAttributes">
				<c path="String"/>
				<e path="cs.system.io.FileAttributes"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetAttributes>
		<SetCreationTime final="1" public="1" set="method" static="1">
			<f a="path:creationTime">
				<c path="String"/>
				<c path="cs.system.DateTime"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetCreationTime>
		<SetCreationTimeUtc final="1" public="1" set="method" static="1">
			<f a="path:creationTimeUtc">
				<c path="String"/>
				<c path="cs.system.DateTime"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetCreationTimeUtc>
		<SetLastAccessTime final="1" public="1" set="method" static="1">
			<f a="path:lastAccessTime">
				<c path="String"/>
				<c path="cs.system.DateTime"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetLastAccessTime>
		<SetLastAccessTimeUtc final="1" public="1" set="method" static="1">
			<f a="path:lastAccessTimeUtc">
				<c path="String"/>
				<c path="cs.system.DateTime"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetLastAccessTimeUtc>
		<SetLastWriteTime final="1" public="1" set="method" static="1">
			<f a="path:lastWriteTime">
				<c path="String"/>
				<c path="cs.system.DateTime"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetLastWriteTime>
		<SetLastWriteTimeUtc final="1" public="1" set="method" static="1">
			<f a="path:lastWriteTimeUtc">
				<c path="String"/>
				<c path="cs.system.DateTime"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetLastWriteTimeUtc>
		<ReadAllBytes final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</ReadAllBytes>
		<ReadAllLines final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="cs.NativeArray"><c path="String"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><ReadAllLines final="1" public="1" set="method">
	<f a="path:encoding">
		<c path="String"/>
		<c path="cs.system.text.Encoding"/>
		<c path="cs.NativeArray"><c path="String"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</ReadAllLines></overloads>
		</ReadAllLines>
		<ReadAllText final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><ReadAllText final="1" public="1" set="method">
	<f a="path:encoding">
		<c path="String"/>
		<c path="cs.system.text.Encoding"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</ReadAllText></overloads>
		</ReadAllText>
		<WriteAllBytes final="1" public="1" set="method" static="1">
			<f a="path:bytes">
				<c path="String"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</WriteAllBytes>
		<WriteAllLines final="1" public="1" set="method" static="1">
			<f a="path:contents">
				<c path="String"/>
				<c path="cs.NativeArray"><c path="String"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><WriteAllLines final="1" public="1" set="method">
	<f a="path:contents:encoding">
		<c path="String"/>
		<c path="cs.NativeArray"><c path="String"/></c>
		<c path="cs.system.text.Encoding"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</WriteAllLines></overloads>
		</WriteAllLines>
		<WriteAllText final="1" public="1" set="method" static="1">
			<f a="path:contents">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><WriteAllText final="1" public="1" set="method">
	<f a="path:contents:encoding">
		<c path="String"/>
		<c path="String"/>
		<c path="cs.system.text.Encoding"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</WriteAllText></overloads>
		</WriteAllText>
		<Encrypt final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Encrypt>
		<Decrypt final="1" public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Decrypt>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.File"</e></m>
		</meta>
	</class>
	<enum path="cs.system.io.FileAccess" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.io.FileAccess">
		<Read><meta><m n=":csNative"><e>1</e></m></meta></Read>
		<Write><meta><m n=":csNative"><e>2</e></m></meta></Write>
		<ReadWrite><meta><m n=":csNative"><e>3</e></m></meta></ReadWrite>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.IO.FileAccess"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.io.FileAttributes" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.io.FileAttributes">
		<ReadOnly><meta><m n=":csNative"><e>1</e></m></meta></ReadOnly>
		<Hidden><meta><m n=":csNative"><e>2</e></m></meta></Hidden>
		<System><meta><m n=":csNative"><e>4</e></m></meta></System>
		<Directory><meta><m n=":csNative"><e>16</e></m></meta></Directory>
		<Archive><meta><m n=":csNative"><e>32</e></m></meta></Archive>
		<Device><meta><m n=":csNative"><e>64</e></m></meta></Device>
		<Normal><meta><m n=":csNative"><e>128</e></m></meta></Normal>
		<Temporary><meta><m n=":csNative"><e>256</e></m></meta></Temporary>
		<SparseFile><meta><m n=":csNative"><e>512</e></m></meta></SparseFile>
		<ReparsePoint><meta><m n=":csNative"><e>1024</e></m></meta></ReparsePoint>
		<Compressed><meta><m n=":csNative"><e>2048</e></m></meta></Compressed>
		<Offline><meta><m n=":csNative"><e>4096</e></m></meta></Offline>
		<NotContentIndexed><meta><m n=":csNative"><e>8192</e></m></meta></NotContentIndexed>
		<Encrypted><meta><m n=":csNative"><e>16384</e></m></meta></Encrypted>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.IO.FileAttributes"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.io.FileInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.io.FileInfo" extern="1">
		<extends path="cs.system.io.FileSystemInfo"/>
		<Directory public="1" get="accessor" set="null"><c path="cs.system.io.DirectoryInfo"/></Directory>
		<DirectoryName public="1" get="accessor" set="null"><c path="String"/></DirectoryName>
		<Length public="1" get="accessor" set="null"><x path="haxe.Int64"/></Length>
		<IsReadOnly public="1" get="accessor" set="accessor"><x path="Bool"/></IsReadOnly>
		<Name public="1" get="accessor" set="null" override="1"><c path="String"/></Name>
		<Exists public="1" get="accessor" set="null" override="1"><x path="Bool"/></Exists>
		<get_Exists set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_Exists>
		<get_Name set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<get_IsReadOnly final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsReadOnly>
		<set_IsReadOnly final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_IsReadOnly>
		<Encrypt final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Encrypt>
		<Decrypt final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Decrypt>
		<get_Length final="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</get_Length>
		<get_DirectoryName final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_DirectoryName>
		<get_Directory final="1" set="method">
			<f a=""><c path="cs.system.io.DirectoryInfo"/></f>
			<meta><m n=":overload"/></meta>
		</get_Directory>
		<OpenText final="1" public="1" set="method">
			<f a=""><c path="cs.system.io.StreamReader"/></f>
			<meta><m n=":overload"/></meta>
		</OpenText>
		<CreateText final="1" public="1" set="method">
			<f a=""><c path="cs.system.io.StreamWriter"/></f>
			<meta><m n=":overload"/></meta>
		</CreateText>
		<AppendText final="1" public="1" set="method">
			<f a=""><c path="cs.system.io.StreamWriter"/></f>
			<meta><m n=":overload"/></meta>
		</AppendText>
		<Create final="1" public="1" set="method">
			<f a=""><c path="cs.system.io.FileStream"/></f>
			<meta><m n=":overload"/></meta>
		</Create>
		<OpenRead final="1" public="1" set="method">
			<f a=""><c path="cs.system.io.FileStream"/></f>
			<meta><m n=":overload"/></meta>
		</OpenRead>
		<OpenWrite final="1" public="1" set="method">
			<f a=""><c path="cs.system.io.FileStream"/></f>
			<meta><m n=":overload"/></meta>
		</OpenWrite>
		<Open final="1" public="1" set="method">
			<f a="mode">
				<e path="cs.system.io.FileMode"/>
				<c path="cs.system.io.FileStream"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Open final="1" public="1" set="method">
					<f a="mode:access:share">
						<e path="cs.system.io.FileMode"/>
						<e path="cs.system.io.FileAccess"/>
						<e path="cs.system.io.FileShare"/>
						<c path="cs.system.io.FileStream"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Open>
				<Open final="1" public="1" set="method">
					<f a="mode:access">
						<e path="cs.system.io.FileMode"/>
						<e path="cs.system.io.FileAccess"/>
						<c path="cs.system.io.FileStream"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Open>
			</overloads>
		</Open>
		<Delete public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Delete>
		<MoveTo final="1" public="1" set="method">
			<f a="destFileName">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</MoveTo>
		<CopyTo final="1" public="1" set="method">
			<f a="destFileName">
				<c path="String"/>
				<c path="cs.system.io.FileInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><CopyTo final="1" public="1" set="method">
	<f a="destFileName:overwrite">
		<c path="String"/>
		<x path="Bool"/>
		<c path="cs.system.io.FileInfo"/>
	</f>
	<meta><m n=":overload"/></meta>
</CopyTo></overloads>
		</CopyTo>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<GetAccessControl final="1" public="1" set="method">
			<f a=""><c path="cs.system.security.accesscontrol.FileSecurity"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetAccessControl final="1" public="1" set="method">
	<f a="includeSections">
		<e path="cs.system.security.accesscontrol.AccessControlSections"/>
		<c path="cs.system.security.accesscontrol.FileSecurity"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetAccessControl></overloads>
		</GetAccessControl>
		<Replace final="1" public="1" set="method">
			<f a="destinationFileName:destinationBackupFileName">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.system.io.FileInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><Replace final="1" public="1" set="method">
	<f a="destinationFileName:destinationBackupFileName:ignoreMetadataErrors">
		<c path="String"/>
		<c path="String"/>
		<x path="Bool"/>
		<c path="cs.system.io.FileInfo"/>
	</f>
	<meta><m n=":overload"/></meta>
</Replace></overloads>
		</Replace>
		<SetAccessControl final="1" public="1" set="method">
			<f a="fileSecurity">
				<c path="cs.system.security.accesscontrol.FileSecurity"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetAccessControl>
		<new final="1" public="1" set="method">
			<f a="fileName">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.FileInfo"</e></m>
		</meta>
	</class>
	<enum path="cs.system.io.FileMode" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.io.FileMode">
		<CreateNew><meta><m n=":csNative"><e>1</e></m></meta></CreateNew>
		<Create><meta><m n=":csNative"><e>2</e></m></meta></Create>
		<Open><meta><m n=":csNative"><e>3</e></m></meta></Open>
		<OpenOrCreate><meta><m n=":csNative"><e>4</e></m></meta></OpenOrCreate>
		<Truncate><meta><m n=":csNative"><e>5</e></m></meta></Truncate>
		<Append><meta><m n=":csNative"><e>6</e></m></meta></Append>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.IO.FileMode"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.io.FileOptions" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.io.FileOptions">
		<WriteThrough><meta><m n=":csNative"><e>-2147483648</e></m></meta></WriteThrough>
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<Encrypted><meta><m n=":csNative"><e>16384</e></m></meta></Encrypted>
		<DeleteOnClose><meta><m n=":csNative"><e>67108864</e></m></meta></DeleteOnClose>
		<SequentialScan><meta><m n=":csNative"><e>134217728</e></m></meta></SequentialScan>
		<RandomAccess><meta><m n=":csNative"><e>268435456</e></m></meta></RandomAccess>
		<Asynchronous><meta><m n=":csNative"><e>1073741824</e></m></meta></Asynchronous>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.IO.FileOptions"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.io.FileShare" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.io.FileShare">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<Read><meta><m n=":csNative"><e>1</e></m></meta></Read>
		<Write><meta><m n=":csNative"><e>2</e></m></meta></Write>
		<ReadWrite><meta><m n=":csNative"><e>3</e></m></meta></ReadWrite>
		<Delete><meta><m n=":csNative"><e>4</e></m></meta></Delete>
		<Inheritable><meta><m n=":csNative"><e>16</e></m></meta></Inheritable>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.IO.FileShare"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.io.FileStream_Delegate_WriteDelegate" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.io.FileStream" module="cs.system.io.FileStream" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.io.FileStream_WriteDelegate"/>
	<x path="cs.system.io.FileStream_WriteDelegate"/>
	<x path="cs.system.io.FileStream_WriteDelegate"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.io.FileStream_WriteDelegate"/>
	<x path="cs.system.io.FileStream_WriteDelegate"/>
	<x path="cs.system.io.FileStream_WriteDelegate"/>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="buffer:offset:count">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="buffer:offset:count:callback:object">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.FileStream.WriteDelegate"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.io.FileStream_WriteDelegate" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.io.FileStream" module="cs.system.io.FileStream">
		<from><icast field="FromHaxeFunction"><f a="::">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></icast></from>
		<this><c path="cs.system.io.FileStream_Delegate_WriteDelegate"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.io._FileStream.FileStream_WriteDelegate_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.io.FileStream" private="1" module="cs.system.io.FileStream">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="::">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<x path="cs.system.io.FileStream_WriteDelegate"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="::">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<x path="cs.system.io.FileStream_WriteDelegate"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.io.FileStream_Delegate_WriteDelegate"/>
			<c path="cs.system.io.FileStream_Delegate_WriteDelegate"/>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.io.FileStream_WriteDelegate"/>
			<x path="cs.system.io.FileStream_WriteDelegate"/>
			<x path="cs.system.io.FileStream_WriteDelegate"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.io.FileStream_WriteDelegate"/>
			<x path="cs.system.io.FileStream_WriteDelegate"/>
			<x path="cs.system.io.FileStream_WriteDelegate"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system.io._FileStream.FileStream_WriteDelegate_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.io.FileStream" private="1" module="cs.system.io.FileStream">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="::">
					<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
					<x path="Int"/>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<x path="cs.system.io.FileStream_WriteDelegate"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="::">
					<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
					<x path="Int"/>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<x path="cs.system.io.FileStream_WriteDelegate"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.io.FileStream_Delegate_WriteDelegate"/>
				<c path="cs.system.io.FileStream_Delegate_WriteDelegate"/>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.io.FileStream_WriteDelegate"/>
				<x path="cs.system.io.FileStream_WriteDelegate"/>
				<x path="cs.system.io.FileStream_WriteDelegate"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.io.FileStream_WriteDelegate"/>
				<x path="cs.system.io.FileStream_WriteDelegate"/>
				<x path="cs.system.io.FileStream_WriteDelegate"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="cs.system.io.FileStream_Delegate_ReadDelegate" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.io.FileStream" module="cs.system.io.FileStream" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.io.FileStream_ReadDelegate"/>
	<x path="cs.system.io.FileStream_ReadDelegate"/>
	<x path="cs.system.io.FileStream_ReadDelegate"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.io.FileStream_ReadDelegate"/>
	<x path="cs.system.io.FileStream_ReadDelegate"/>
	<x path="cs.system.io.FileStream_ReadDelegate"/>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="buffer:offset:count">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="buffer:offset:count:callback:object">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.FileStream.ReadDelegate"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.io.FileStream_ReadDelegate" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.io.FileStream" module="cs.system.io.FileStream">
		<from><icast field="FromHaxeFunction"><f a="::">
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></icast></from>
		<this><c path="cs.system.io.FileStream_Delegate_ReadDelegate"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.io._FileStream.FileStream_ReadDelegate_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.io.FileStream" private="1" module="cs.system.io.FileStream">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="::">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<x path="cs.system.io.FileStream_ReadDelegate"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="::">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<x path="cs.system.io.FileStream_ReadDelegate"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.io.FileStream_Delegate_ReadDelegate"/>
			<c path="cs.system.io.FileStream_Delegate_ReadDelegate"/>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.io.FileStream_ReadDelegate"/>
			<x path="cs.system.io.FileStream_ReadDelegate"/>
			<x path="cs.system.io.FileStream_ReadDelegate"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.io.FileStream_ReadDelegate"/>
			<x path="cs.system.io.FileStream_ReadDelegate"/>
			<x path="cs.system.io.FileStream_ReadDelegate"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system.io._FileStream.FileStream_ReadDelegate_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.io.FileStream" private="1" module="cs.system.io.FileStream">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="::">
					<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="cs.system.io.FileStream_ReadDelegate"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="::">
					<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="cs.system.io.FileStream_ReadDelegate"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.io.FileStream_Delegate_ReadDelegate"/>
				<c path="cs.system.io.FileStream_Delegate_ReadDelegate"/>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.io.FileStream_ReadDelegate"/>
				<x path="cs.system.io.FileStream_ReadDelegate"/>
				<x path="cs.system.io.FileStream_ReadDelegate"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.io.FileStream_ReadDelegate"/>
				<x path="cs.system.io.FileStream_ReadDelegate"/>
				<x path="cs.system.io.FileStream_ReadDelegate"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="cs.system.io.Stream" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.io.Stream" extern="1">
		<extends path="cs.system.MarshalByRefObject"/>
		<implements path="cs.system.IDisposable"/>
		<Null public="1" set="null" static="1">
			<c path="cs.system.io.Stream"/>
			<meta><m n=":readOnly"/></meta>
		</Null>
		<Synchronized final="1" public="1" set="method" static="1">
			<f a="stream">
				<c path="cs.system.io.Stream"/>
				<c path="cs.system.io.Stream"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Synchronized>
		<WriteTimeout public="1" get="accessor" set="accessor"><x path="Int"/></WriteTimeout>
		<ReadTimeout public="1" get="accessor" set="accessor"><x path="Int"/></ReadTimeout>
		<Position public="1" get="accessor" set="accessor"><x path="haxe.Int64"/></Position>
		<Length public="1" get="accessor" set="null"><x path="haxe.Int64"/></Length>
		<CanTimeout public="1" get="accessor" set="null"><x path="Bool"/></CanTimeout>
		<CanWrite public="1" get="accessor" set="null"><x path="Bool"/></CanWrite>
		<CanSeek public="1" get="accessor" set="null"><x path="Bool"/></CanSeek>
		<CanRead public="1" get="accessor" set="null"><x path="Bool"/></CanRead>
		<get_CanRead set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_CanRead>
		<get_CanSeek set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_CanSeek>
		<get_CanWrite set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_CanWrite>
		<get_CanTimeout set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_CanTimeout>
		<get_Length set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</get_Length>
		<get_Position set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</get_Position>
		<set_Position set="method">
			<f a="value">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Position>
		<Dispose final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><Dispose set="method">
	<f a="disposing">
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":protected"/>
		<m n=":overload"/>
	</meta>
</Dispose></overloads>
		</Dispose>
		<Close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Close>
		<get_ReadTimeout set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReadTimeout>
		<set_ReadTimeout set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ReadTimeout>
		<get_WriteTimeout set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_WriteTimeout>
		<set_WriteTimeout set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_WriteTimeout>
		<CreateWaitHandle set="method">
			<f a=""><c path="cs.system.threading.WaitHandle"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</CreateWaitHandle>
		<Flush public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Flush>
		<Read public="1" set="method">
			<f a="buffer:offset:count">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Read>
		<ReadByte public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</ReadByte>
		<Seek public="1" set="method">
			<f a="offset:origin">
				<x path="haxe.Int64"/>
				<e path="cs.system.io.SeekOrigin"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Seek>
		<SetLength public="1" set="method">
			<f a="value">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetLength>
		<Write public="1" set="method">
			<f a="buffer:offset:count">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Write>
		<WriteByte public="1" set="method">
			<f a="value">
				<t path="cs.types.UInt8"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</WriteByte>
		<BeginRead public="1" set="method">
			<f a="buffer:offset:count:callback:state">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginRead>
		<BeginWrite public="1" set="method">
			<f a="buffer:offset:count:callback:state">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginWrite>
		<EndRead public="1" set="method">
			<f a="asyncResult">
				<c path="cs.system.IAsyncResult"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndRead>
		<EndWrite public="1" set="method">
			<f a="asyncResult">
				<c path="cs.system.IAsyncResult"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndWrite>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.Stream"</e></m>
		</meta>
	</class>
	<class path="cs.system.io.FileStream" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.io.FileStream" extern="1">
		<extends path="cs.system.io.Stream"/>
		<SafeFileHandle public="1" get="accessor" set="null"><c path="microsoft.win32.safehandles.SafeFileHandle"/></SafeFileHandle>
		<Handle public="1" get="accessor" set="null"><c path="cs.system.IntPtr"/></Handle>
		<Position public="1" get="accessor" set="accessor" override="1"><x path="haxe.Int64"/></Position>
		<Length public="1" get="accessor" set="null" override="1"><x path="haxe.Int64"/></Length>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<IsAsync public="1" get="accessor" set="null"><x path="Bool"/></IsAsync>
		<CanSeek public="1" get="accessor" set="null" override="1"><x path="Bool"/></CanSeek>
		<CanWrite public="1" get="accessor" set="null" override="1"><x path="Bool"/></CanWrite>
		<CanRead public="1" get="accessor" set="null" override="1"><x path="Bool"/></CanRead>
		<get_CanRead set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_CanRead>
		<get_CanWrite set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_CanWrite>
		<get_CanSeek set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_CanSeek>
		<get_IsAsync set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsAsync>
		<get_Name final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<get_Length set="method" override="1">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</get_Length>
		<get_Position set="method" override="1">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</get_Position>
		<set_Position set="method" override="1">
			<f a="value">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Position>
		<get_Handle set="method">
			<f a=""><c path="cs.system.IntPtr"/></f>
			<meta><m n=":overload"/></meta>
		</get_Handle>
		<get_SafeFileHandle set="method">
			<f a=""><c path="microsoft.win32.safehandles.SafeFileHandle"/></f>
			<meta><m n=":overload"/></meta>
		</get_SafeFileHandle>
		<ReadByte public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</ReadByte>
		<WriteByte public="1" set="method" override="1">
			<f a="value">
				<t path="cs.types.UInt8"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</WriteByte>
		<Read public="1" set="method" override="1">
			<f a="array:offset:count">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Read>
		<BeginRead public="1" set="method" override="1">
			<f a="array:offset:numBytes:userCallback:stateObject">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginRead>
		<EndRead public="1" set="method" override="1">
			<f a="asyncResult">
				<c path="cs.system.IAsyncResult"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndRead>
		<Write public="1" set="method" override="1">
			<f a="array:offset:count">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Write>
		<BeginWrite public="1" set="method" override="1">
			<f a="array:offset:numBytes:userCallback:stateObject">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginWrite>
		<EndWrite public="1" set="method" override="1">
			<f a="asyncResult">
				<c path="cs.system.IAsyncResult"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndWrite>
		<Seek public="1" set="method" override="1">
			<f a="offset:origin">
				<x path="haxe.Int64"/>
				<e path="cs.system.io.SeekOrigin"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Seek>
		<SetLength public="1" set="method" override="1">
			<f a="value">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetLength>
		<Flush public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Flush>
		<Lock public="1" set="method">
			<f a="position:length">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Lock>
		<Unlock public="1" set="method">
			<f a="position:length">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Unlock>
		<Dispose set="method" override="1">
			<f a="disposing">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</Dispose>
		<GetAccessControl final="1" public="1" set="method">
			<f a=""><c path="cs.system.security.accesscontrol.FileSecurity"/></f>
			<meta><m n=":overload"/></meta>
		</GetAccessControl>
		<SetAccessControl final="1" public="1" set="method">
			<f a="fileSecurity">
				<c path="cs.system.security.accesscontrol.FileSecurity"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetAccessControl>
		<new final="1" public="1" set="method">
			<f a="handle:access">
				<c path="cs.system.IntPtr"/>
				<e path="cs.system.io.FileAccess"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="path:mode:rights:share:bufferSize:options:fileSecurity">
						<c path="String"/>
						<e path="cs.system.io.FileMode"/>
						<e path="cs.system.security.accesscontrol.FileSystemRights"/>
						<e path="cs.system.io.FileShare"/>
						<x path="Int"/>
						<e path="cs.system.io.FileOptions"/>
						<c path="cs.system.security.accesscontrol.FileSecurity"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="path:mode:rights:share:bufferSize:options">
						<c path="String"/>
						<e path="cs.system.io.FileMode"/>
						<e path="cs.system.security.accesscontrol.FileSystemRights"/>
						<e path="cs.system.io.FileShare"/>
						<x path="Int"/>
						<e path="cs.system.io.FileOptions"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="handle:access:bufferSize:isAsync">
						<c path="microsoft.win32.safehandles.SafeFileHandle"/>
						<e path="cs.system.io.FileAccess"/>
						<x path="Int"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="handle:access:bufferSize">
						<c path="microsoft.win32.safehandles.SafeFileHandle"/>
						<e path="cs.system.io.FileAccess"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="handle:access">
						<c path="microsoft.win32.safehandles.SafeFileHandle"/>
						<e path="cs.system.io.FileAccess"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="path:mode:access:share:bufferSize:options">
						<c path="String"/>
						<e path="cs.system.io.FileMode"/>
						<e path="cs.system.io.FileAccess"/>
						<e path="cs.system.io.FileShare"/>
						<x path="Int"/>
						<e path="cs.system.io.FileOptions"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="path:mode:access:share:bufferSize:useAsync">
						<c path="String"/>
						<e path="cs.system.io.FileMode"/>
						<e path="cs.system.io.FileAccess"/>
						<e path="cs.system.io.FileShare"/>
						<x path="Int"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="path:mode:access:share:bufferSize">
						<c path="String"/>
						<e path="cs.system.io.FileMode"/>
						<e path="cs.system.io.FileAccess"/>
						<e path="cs.system.io.FileShare"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="path:mode:access:share">
						<c path="String"/>
						<e path="cs.system.io.FileMode"/>
						<e path="cs.system.io.FileAccess"/>
						<e path="cs.system.io.FileShare"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="path:mode:access">
						<c path="String"/>
						<e path="cs.system.io.FileMode"/>
						<e path="cs.system.io.FileAccess"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="path:mode">
						<c path="String"/>
						<e path="cs.system.io.FileMode"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="handle:access:ownsHandle:bufferSize:isAsync">
						<c path="cs.system.IntPtr"/>
						<e path="cs.system.io.FileAccess"/>
						<x path="Bool"/>
						<x path="Int"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="handle:access:ownsHandle:bufferSize">
						<c path="cs.system.IntPtr"/>
						<e path="cs.system.io.FileAccess"/>
						<x path="Bool"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="handle:access:ownsHandle">
						<c path="cs.system.IntPtr"/>
						<e path="cs.system.io.FileAccess"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.FileStream"</e></m>
		</meta>
	</class>
	<class path="cs.system.io.MemoryStream" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.io.MemoryStream" extern="1">
		<extends path="cs.system.io.Stream"/>
		<Position public="1" get="accessor" set="accessor" override="1"><x path="haxe.Int64"/></Position>
		<Length public="1" get="accessor" set="null" override="1"><x path="haxe.Int64"/></Length>
		<Capacity public="1" get="accessor" set="accessor"><x path="Int"/></Capacity>
		<CanWrite public="1" get="accessor" set="null" override="1"><x path="Bool"/></CanWrite>
		<CanSeek public="1" get="accessor" set="null" override="1"><x path="Bool"/></CanSeek>
		<CanRead public="1" get="accessor" set="null" override="1"><x path="Bool"/></CanRead>
		<get_CanRead set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_CanRead>
		<get_CanSeek set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_CanSeek>
		<get_CanWrite set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_CanWrite>
		<get_Capacity set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Capacity>
		<set_Capacity set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Capacity>
		<get_Length set="method" override="1">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</get_Length>
		<get_Position set="method" override="1">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</get_Position>
		<set_Position set="method" override="1">
			<f a="value">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Position>
		<Dispose set="method" override="1">
			<f a="disposing">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</Dispose>
		<Flush public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Flush>
		<GetBuffer public="1" set="method">
			<f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetBuffer>
		<Read public="1" set="method" override="1">
			<f a="buffer:offset:count">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Read>
		<ReadByte public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</ReadByte>
		<Seek public="1" set="method" override="1">
			<f a="offset:loc">
				<x path="haxe.Int64"/>
				<e path="cs.system.io.SeekOrigin"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Seek>
		<SetLength public="1" set="method" override="1">
			<f a="value">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetLength>
		<ToArray public="1" set="method">
			<f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f>
			<meta><m n=":overload"/></meta>
		</ToArray>
		<Write public="1" set="method" override="1">
			<f a="buffer:offset:count">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Write>
		<WriteByte public="1" set="method" override="1">
			<f a="value">
				<t path="cs.types.UInt8"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</WriteByte>
		<WriteTo public="1" set="method">
			<f a="stream">
				<c path="cs.system.io.Stream"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</WriteTo>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="buffer:index:count:writable:publiclyVisible">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Bool"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="buffer:index:count:writable">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="buffer:index:count">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="buffer:writable">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="buffer">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="capacity">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.MemoryStream"</e></m>
		</meta>
	</class>
	<enum path="cs.system.io.SearchOption" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.io.SearchOption">
		<TopDirectoryOnly><meta><m n=":csNative"><e>0</e></m></meta></TopDirectoryOnly>
		<AllDirectories><meta><m n=":csNative"><e>1</e></m></meta></AllDirectories>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.IO.SearchOption"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.io.SeekOrigin" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.io.SeekOrigin">
		<Begin><meta><m n=":csNative"><e>0</e></m></meta></Begin>
		<Current><meta><m n=":csNative"><e>1</e></m></meta></Current>
		<End><meta><m n=":csNative"><e>2</e></m></meta></End>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.IO.SeekOrigin"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.io.TextReader" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.io.TextReader" extern="1">
		<extends path="cs.system.MarshalByRefObject"/>
		<implements path="cs.system.IDisposable"/>
		<Null public="1" set="null" static="1">
			<c path="cs.system.io.TextReader"/>
			<meta><m n=":readOnly"/></meta>
		</Null>
		<Synchronized final="1" public="1" set="method" static="1">
			<f a="reader">
				<c path="cs.system.io.TextReader"/>
				<c path="cs.system.io.TextReader"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Synchronized>
		<Close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Close>
		<Dispose final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><Dispose set="method">
	<f a="disposing">
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":protected"/>
		<m n=":overload"/>
	</meta>
</Dispose></overloads>
		</Dispose>
		<Peek public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</Peek>
		<Read public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><Read public="1" set="method">
	<f a="buffer:index:count">
		<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</Read></overloads>
		</Read>
		<ReadBlock public="1" set="method">
			<f a="buffer:index:count">
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ReadBlock>
		<ReadLine public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ReadLine>
		<ReadToEnd public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ReadToEnd>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.TextReader"</e></m>
		</meta>
	</class>
	<class path="cs.system.io.StreamReader" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.io.StreamReader" extern="1">
		<extends path="cs.system.io.TextReader"/>
		<Null public="1" set="null" static="1">
			<c path="cs.system.io.StreamReader"/>
			<meta><m n=":readOnly"/></meta>
		</Null>
		<EndOfStream public="1" get="accessor" set="null"><x path="Bool"/></EndOfStream>
		<CurrentEncoding public="1" get="accessor" set="null"><c path="cs.system.text.Encoding"/></CurrentEncoding>
		<BaseStream public="1" get="accessor" set="null"><c path="cs.system.io.Stream"/></BaseStream>
		<get_BaseStream set="method">
			<f a=""><c path="cs.system.io.Stream"/></f>
			<meta><m n=":overload"/></meta>
		</get_BaseStream>
		<get_CurrentEncoding set="method">
			<f a=""><c path="cs.system.text.Encoding"/></f>
			<meta><m n=":overload"/></meta>
		</get_CurrentEncoding>
		<get_EndOfStream final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_EndOfStream>
		<Close public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Close>
		<Dispose set="method" override="1">
			<f a="disposing">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</Dispose>
		<DiscardBufferedData final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</DiscardBufferedData>
		<Peek public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</Peek>
		<Read public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><Read public="1" set="method">
	<f a="buffer:index:count">
		<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</Read></overloads>
		</Read>
		<ReadLine public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ReadLine>
		<ReadToEnd public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ReadToEnd>
		<new final="1" public="1" set="method">
			<f a="stream">
				<c path="cs.system.io.Stream"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="path:encoding:detectEncodingFromByteOrderMarks:bufferSize">
						<c path="String"/>
						<c path="cs.system.text.Encoding"/>
						<x path="Bool"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="path:encoding:detectEncodingFromByteOrderMarks">
						<c path="String"/>
						<c path="cs.system.text.Encoding"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="path:encoding">
						<c path="String"/>
						<c path="cs.system.text.Encoding"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="path:detectEncodingFromByteOrderMarks">
						<c path="String"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="path">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="stream:encoding:detectEncodingFromByteOrderMarks:bufferSize">
						<c path="cs.system.io.Stream"/>
						<c path="cs.system.text.Encoding"/>
						<x path="Bool"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="stream:encoding:detectEncodingFromByteOrderMarks">
						<c path="cs.system.io.Stream"/>
						<c path="cs.system.text.Encoding"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="stream:encoding">
						<c path="cs.system.io.Stream"/>
						<c path="cs.system.text.Encoding"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="stream:detectEncodingFromByteOrderMarks">
						<c path="cs.system.io.Stream"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.StreamReader"</e></m>
		</meta>
	</class>
	<class path="cs.system.io.StreamReader_NullStreamReader" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.io.StreamReader" module="cs.system.io.StreamReader" extern="1">
		<extends path="cs.system.io.StreamReader"/>
		<CurrentEncoding public="1" get="accessor" set="null" override="1"><c path="cs.system.text.Encoding"/></CurrentEncoding>
		<BaseStream public="1" get="accessor" set="null" override="1"><c path="cs.system.io.Stream"/></BaseStream>
		<Peek public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</Peek>
		<Read public="1" set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><Read public="1" set="method">
	<f a="buffer:index:count">
		<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</Read></overloads>
		</Read>
		<ReadLine public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ReadLine>
		<ReadToEnd public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ReadToEnd>
		<get_BaseStream set="method" override="1">
			<f a=""><c path="cs.system.io.Stream"/></f>
			<meta><m n=":overload"/></meta>
		</get_BaseStream>
		<get_CurrentEncoding set="method" override="1">
			<f a=""><c path="cs.system.text.Encoding"/></f>
			<meta><m n=":overload"/></meta>
		</get_CurrentEncoding>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.StreamReader.NullStreamReader"</e></m>
		</meta>
	</class>
	<class path="cs.system.io.TextWriter" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.io.TextWriter" extern="1">
		<extends path="cs.system.MarshalByRefObject"/>
		<implements path="cs.system.IDisposable"/>
		<Null public="1" set="null" static="1">
			<c path="cs.system.io.TextWriter"/>
			<meta><m n=":readOnly"/></meta>
		</Null>
		<Synchronized final="1" public="1" set="method" static="1">
			<f a="writer">
				<c path="cs.system.io.TextWriter"/>
				<c path="cs.system.io.TextWriter"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Synchronized>
		<NewLine public="1" get="accessor" set="accessor"><c path="String"/></NewLine>
		<FormatProvider public="1" get="accessor" set="null"><c path="cs.system.IFormatProvider"/></FormatProvider>
		<Encoding public="1" get="accessor" set="null"><c path="cs.system.text.Encoding"/></Encoding>
		<CoreNewLine><c path="cs.NativeArray"><t path="cs.types.Char16"/></c></CoreNewLine>
		<get_Encoding set="method">
			<f a=""><c path="cs.system.text.Encoding"/></f>
			<meta><m n=":overload"/></meta>
		</get_Encoding>
		<get_FormatProvider set="method">
			<f a=""><c path="cs.system.IFormatProvider"/></f>
			<meta><m n=":overload"/></meta>
		</get_FormatProvider>
		<get_NewLine set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_NewLine>
		<set_NewLine set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_NewLine>
		<Close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Close>
		<Dispose set="method">
			<f a="disposing">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
			<overloads><Dispose final="1" public="1" set="method">
	<f a=""><x path="Void"/></f>
	<meta><m n=":overload"/></meta>
</Dispose></overloads>
		</Dispose>
		<Flush public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Flush>
		<Write public="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Write public="1" set="method">
					<f a="format:arg0:arg1:arg2">
						<c path="String"/>
						<d/>
						<d/>
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write public="1" set="method">
					<f a="format:arg0:arg1">
						<c path="String"/>
						<d/>
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write public="1" set="method">
					<f a="buffer:index:count">
						<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write public="1" set="method">
					<f a="format:arg">
						<c path="String"/>
						<c path="cs.NativeArray"><d/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write public="1" set="method">
					<f a="format:arg0">
						<c path="String"/>
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write public="1" set="method">
					<f a="value">
						<t path="cs.types.UInt64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write public="1" set="method">
					<f a="value">
						<x path="UInt"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write public="1" set="method">
					<f a="value">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write public="1" set="method">
					<f a="value">
						<x path="Single"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write public="1" set="method">
					<f a="value">
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write public="1" set="method">
					<f a="value">
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write public="1" set="method">
					<f a="value">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write public="1" set="method">
					<f a="value">
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write public="1" set="method">
					<f a="value">
						<c path="cs.system.Decimal"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write public="1" set="method">
					<f a="buffer">
						<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write public="1" set="method">
					<f a="value">
						<t path="cs.types.Char16"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
			</overloads>
		</Write>
		<WriteLine public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<WriteLine public="1" set="method">
					<f a="format:arg0:arg1:arg2">
						<c path="String"/>
						<d/>
						<d/>
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
				<WriteLine public="1" set="method">
					<f a="format:arg0:arg1">
						<c path="String"/>
						<d/>
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
				<WriteLine public="1" set="method">
					<f a="buffer:index:count">
						<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
				<WriteLine public="1" set="method">
					<f a="format:arg">
						<c path="String"/>
						<c path="cs.NativeArray"><d/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
				<WriteLine public="1" set="method">
					<f a="format:arg0">
						<c path="String"/>
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
				<WriteLine public="1" set="method">
					<f a="value">
						<t path="cs.types.UInt64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
				<WriteLine public="1" set="method">
					<f a="value">
						<x path="UInt"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
				<WriteLine public="1" set="method">
					<f a="value">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
				<WriteLine public="1" set="method">
					<f a="value">
						<x path="Single"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
				<WriteLine public="1" set="method">
					<f a="value">
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
				<WriteLine public="1" set="method">
					<f a="value">
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
				<WriteLine public="1" set="method">
					<f a="value">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
				<WriteLine public="1" set="method">
					<f a="value">
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
				<WriteLine public="1" set="method">
					<f a="value">
						<c path="cs.system.Decimal"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
				<WriteLine public="1" set="method">
					<f a="buffer">
						<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
				<WriteLine public="1" set="method">
					<f a="value">
						<t path="cs.types.Char16"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
				<WriteLine public="1" set="method">
					<f a="value">
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</WriteLine>
			</overloads>
		</WriteLine>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
			<overloads><new final="1" set="method">
	<f a="formatProvider">
		<c path="cs.system.IFormatProvider"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":protected"/>
		<m n=":overload"/>
	</meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.TextWriter"</e></m>
		</meta>
	</class>
	<class path="cs.system.io.StreamWriter" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.io.StreamWriter" extern="1">
		<extends path="cs.system.io.TextWriter"/>
		<Null public="1" set="null" static="1">
			<c path="cs.system.io.StreamWriter"/>
			<meta><m n=":readOnly"/></meta>
		</Null>
		<Encoding public="1" get="accessor" set="null" override="1"><c path="cs.system.text.Encoding"/></Encoding>
		<BaseStream public="1" get="accessor" set="null"><c path="cs.system.io.Stream"/></BaseStream>
		<AutoFlush public="1" get="accessor" set="accessor"><x path="Bool"/></AutoFlush>
		<get_AutoFlush set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_AutoFlush>
		<set_AutoFlush set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_AutoFlush>
		<get_BaseStream set="method">
			<f a=""><c path="cs.system.io.Stream"/></f>
			<meta><m n=":overload"/></meta>
		</get_BaseStream>
		<get_Encoding set="method" override="1">
			<f a=""><c path="cs.system.text.Encoding"/></f>
			<meta><m n=":overload"/></meta>
		</get_Encoding>
		<Dispose set="method" override="1">
			<f a="disposing">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</Dispose>
		<Flush public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Flush>
		<Write public="1" set="method" override="1">
			<f a="buffer:index:count">
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Write public="1" set="method">
					<f a="value">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write public="1" set="method">
					<f a="buffer">
						<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write public="1" set="method">
					<f a="value">
						<t path="cs.types.Char16"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
			</overloads>
		</Write>
		<Close public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Close>
		<new final="1" public="1" set="method">
			<f a="stream">
				<c path="cs.system.io.Stream"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="path:append:encoding:bufferSize">
						<c path="String"/>
						<x path="Bool"/>
						<c path="cs.system.text.Encoding"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="path:append:encoding">
						<c path="String"/>
						<x path="Bool"/>
						<c path="cs.system.text.Encoding"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="path:append">
						<c path="String"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="path">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="stream:encoding:bufferSize">
						<c path="cs.system.io.Stream"/>
						<c path="cs.system.text.Encoding"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="stream:encoding">
						<c path="cs.system.io.Stream"/>
						<c path="cs.system.text.Encoding"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.StreamWriter"</e></m>
		</meta>
	</class>
	<class path="cs.system.io.TextReader_NullTextReader" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.io.TextReader" module="cs.system.io.TextReader" extern="1">
		<extends path="cs.system.io.TextReader"/>
		<ReadLine public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ReadLine>
		<ReadToEnd public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ReadToEnd>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.TextReader.NullTextReader"</e></m>
		</meta>
	</class>
	<class path="cs.system.io.TextWriter_NullTextWriter" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.io.TextWriter" module="cs.system.io.TextWriter" extern="1">
		<extends path="cs.system.io.TextWriter"/>
		<Encoding public="1" get="accessor" set="null" override="1"><c path="cs.system.text.Encoding"/></Encoding>
		<get_Encoding set="method" override="1">
			<f a=""><c path="cs.system.text.Encoding"/></f>
			<meta><m n=":overload"/></meta>
		</get_Encoding>
		<Write public="1" set="method" override="1">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Write public="1" set="method">
					<f a="value:index:count">
						<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
				<Write public="1" set="method">
					<f a="value">
						<t path="cs.types.Char16"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Write>
			</overloads>
		</Write>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.IO.TextWriter.NullTextWriter"</e></m>
		</meta>
	</class>
	<class path="cs.system.net.Dns_Delegate_GetHostAddressesCallback" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.Dns" module="cs.system.net.Dns" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.net.Dns_GetHostAddressesCallback"/>
	<x path="cs.system.net.Dns_GetHostAddressesCallback"/>
	<x path="cs.system.net.Dns_GetHostAddressesCallback"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.net.Dns_GetHostAddressesCallback"/>
	<x path="cs.system.net.Dns_GetHostAddressesCallback"/>
	<x path="cs.system.net.Dns_GetHostAddressesCallback"/>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="hostName">
				<c path="String"/>
				<c path="cs.NativeArray"><c path="cs.system.net.IPAddress"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="hostName:callback:object">
				<c path="String"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<c path="cs.NativeArray"><c path="cs.system.net.IPAddress"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Net.Dns.GetHostAddressesCallback"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.net.Dns_GetHostAddressesCallback" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.Dns" module="cs.system.net.Dns">
		<from><icast field="FromHaxeFunction"><f a="">
	<c path="String"/>
	<c path="cs.NativeArray"><c path="cs.system.net.IPAddress"/></c>
</f></icast></from>
		<this><c path="cs.system.net.Dns_Delegate_GetHostAddressesCallback"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.net._Dns.Dns_GetHostAddressesCallback_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.Dns" private="1" module="cs.system.net.Dns">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="">
				<c path="String"/>
				<c path="cs.NativeArray"><c path="cs.system.net.IPAddress"/></c>
			</f>
			<x path="cs.system.net.Dns_GetHostAddressesCallback"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="">
				<c path="String"/>
				<c path="cs.NativeArray"><c path="cs.system.net.IPAddress"/></c>
			</f>
			<x path="cs.system.net.Dns_GetHostAddressesCallback"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.net.Dns_Delegate_GetHostAddressesCallback"/>
			<c path="cs.system.net.Dns_Delegate_GetHostAddressesCallback"/>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.net.Dns_GetHostAddressesCallback"/>
			<x path="cs.system.net.Dns_GetHostAddressesCallback"/>
			<x path="cs.system.net.Dns_GetHostAddressesCallback"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.net.Dns_GetHostAddressesCallback"/>
			<x path="cs.system.net.Dns_GetHostAddressesCallback"/>
			<x path="cs.system.net.Dns_GetHostAddressesCallback"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system.net._Dns.Dns_GetHostAddressesCallback_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.Dns" private="1" module="cs.system.net.Dns">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="">
					<c path="String"/>
					<c path="cs.NativeArray"><c path="cs.system.net.IPAddress"/></c>
				</f>
				<x path="cs.system.net.Dns_GetHostAddressesCallback"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="">
					<c path="String"/>
					<c path="cs.NativeArray"><c path="cs.system.net.IPAddress"/></c>
				</f>
				<x path="cs.system.net.Dns_GetHostAddressesCallback"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.net.Dns_Delegate_GetHostAddressesCallback"/>
				<c path="cs.system.net.Dns_Delegate_GetHostAddressesCallback"/>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.net.Dns_GetHostAddressesCallback"/>
				<x path="cs.system.net.Dns_GetHostAddressesCallback"/>
				<x path="cs.system.net.Dns_GetHostAddressesCallback"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.net.Dns_GetHostAddressesCallback"/>
				<x path="cs.system.net.Dns_GetHostAddressesCallback"/>
				<x path="cs.system.net.Dns_GetHostAddressesCallback"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="cs.system.net.Dns_Delegate_GetHostEntryIPCallback" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.Dns" module="cs.system.net.Dns" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.net.Dns_GetHostEntryIPCallback"/>
	<x path="cs.system.net.Dns_GetHostEntryIPCallback"/>
	<x path="cs.system.net.Dns_GetHostEntryIPCallback"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.net.Dns_GetHostEntryIPCallback"/>
	<x path="cs.system.net.Dns_GetHostEntryIPCallback"/>
	<x path="cs.system.net.Dns_GetHostEntryIPCallback"/>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="hostAddress">
				<c path="cs.system.net.IPAddress"/>
				<c path="cs.system.net.IPHostEntry"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="hostAddress:callback:object">
				<c path="cs.system.net.IPAddress"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<c path="cs.system.net.IPHostEntry"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Net.Dns.GetHostEntryIPCallback"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.net.Dns_GetHostEntryIPCallback" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.Dns" module="cs.system.net.Dns">
		<from><icast field="FromHaxeFunction"><f a="">
	<c path="cs.system.net.IPAddress"/>
	<c path="cs.system.net.IPHostEntry"/>
</f></icast></from>
		<this><c path="cs.system.net.Dns_Delegate_GetHostEntryIPCallback"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.net._Dns.Dns_GetHostEntryIPCallback_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.Dns" private="1" module="cs.system.net.Dns">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="">
				<c path="cs.system.net.IPAddress"/>
				<c path="cs.system.net.IPHostEntry"/>
			</f>
			<x path="cs.system.net.Dns_GetHostEntryIPCallback"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="">
				<c path="cs.system.net.IPAddress"/>
				<c path="cs.system.net.IPHostEntry"/>
			</f>
			<x path="cs.system.net.Dns_GetHostEntryIPCallback"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.net.Dns_Delegate_GetHostEntryIPCallback"/>
			<c path="cs.system.net.Dns_Delegate_GetHostEntryIPCallback"/>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.net.Dns_GetHostEntryIPCallback"/>
			<x path="cs.system.net.Dns_GetHostEntryIPCallback"/>
			<x path="cs.system.net.Dns_GetHostEntryIPCallback"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.net.Dns_GetHostEntryIPCallback"/>
			<x path="cs.system.net.Dns_GetHostEntryIPCallback"/>
			<x path="cs.system.net.Dns_GetHostEntryIPCallback"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system.net._Dns.Dns_GetHostEntryIPCallback_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.Dns" private="1" module="cs.system.net.Dns">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="">
					<c path="cs.system.net.IPAddress"/>
					<c path="cs.system.net.IPHostEntry"/>
				</f>
				<x path="cs.system.net.Dns_GetHostEntryIPCallback"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="">
					<c path="cs.system.net.IPAddress"/>
					<c path="cs.system.net.IPHostEntry"/>
				</f>
				<x path="cs.system.net.Dns_GetHostEntryIPCallback"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.net.Dns_Delegate_GetHostEntryIPCallback"/>
				<c path="cs.system.net.Dns_Delegate_GetHostEntryIPCallback"/>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.net.Dns_GetHostEntryIPCallback"/>
				<x path="cs.system.net.Dns_GetHostEntryIPCallback"/>
				<x path="cs.system.net.Dns_GetHostEntryIPCallback"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.net.Dns_GetHostEntryIPCallback"/>
				<x path="cs.system.net.Dns_GetHostEntryIPCallback"/>
				<x path="cs.system.net.Dns_GetHostEntryIPCallback"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="cs.system.net.Dns_Delegate_GetHostEntryNameCallback" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.Dns" module="cs.system.net.Dns" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.net.Dns_GetHostEntryNameCallback"/>
	<x path="cs.system.net.Dns_GetHostEntryNameCallback"/>
	<x path="cs.system.net.Dns_GetHostEntryNameCallback"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.net.Dns_GetHostEntryNameCallback"/>
	<x path="cs.system.net.Dns_GetHostEntryNameCallback"/>
	<x path="cs.system.net.Dns_GetHostEntryNameCallback"/>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="hostName">
				<c path="String"/>
				<c path="cs.system.net.IPHostEntry"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="hostName:callback:object">
				<c path="String"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<c path="cs.system.net.IPHostEntry"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Net.Dns.GetHostEntryNameCallback"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.net.Dns_GetHostEntryNameCallback" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.Dns" module="cs.system.net.Dns">
		<from><icast field="FromHaxeFunction"><f a="">
	<c path="String"/>
	<c path="cs.system.net.IPHostEntry"/>
</f></icast></from>
		<this><c path="cs.system.net.Dns_Delegate_GetHostEntryNameCallback"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.net._Dns.Dns_GetHostEntryNameCallback_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.Dns" private="1" module="cs.system.net.Dns">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="">
				<c path="String"/>
				<c path="cs.system.net.IPHostEntry"/>
			</f>
			<x path="cs.system.net.Dns_GetHostEntryNameCallback"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="">
				<c path="String"/>
				<c path="cs.system.net.IPHostEntry"/>
			</f>
			<x path="cs.system.net.Dns_GetHostEntryNameCallback"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.net.Dns_Delegate_GetHostEntryNameCallback"/>
			<c path="cs.system.net.Dns_Delegate_GetHostEntryNameCallback"/>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.net.Dns_GetHostEntryNameCallback"/>
			<x path="cs.system.net.Dns_GetHostEntryNameCallback"/>
			<x path="cs.system.net.Dns_GetHostEntryNameCallback"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.net.Dns_GetHostEntryNameCallback"/>
			<x path="cs.system.net.Dns_GetHostEntryNameCallback"/>
			<x path="cs.system.net.Dns_GetHostEntryNameCallback"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system.net._Dns.Dns_GetHostEntryNameCallback_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.Dns" private="1" module="cs.system.net.Dns">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="">
					<c path="String"/>
					<c path="cs.system.net.IPHostEntry"/>
				</f>
				<x path="cs.system.net.Dns_GetHostEntryNameCallback"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="">
					<c path="String"/>
					<c path="cs.system.net.IPHostEntry"/>
				</f>
				<x path="cs.system.net.Dns_GetHostEntryNameCallback"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.net.Dns_Delegate_GetHostEntryNameCallback"/>
				<c path="cs.system.net.Dns_Delegate_GetHostEntryNameCallback"/>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.net.Dns_GetHostEntryNameCallback"/>
				<x path="cs.system.net.Dns_GetHostEntryNameCallback"/>
				<x path="cs.system.net.Dns_GetHostEntryNameCallback"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.net.Dns_GetHostEntryNameCallback"/>
				<x path="cs.system.net.Dns_GetHostEntryNameCallback"/>
				<x path="cs.system.net.Dns_GetHostEntryNameCallback"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="cs.system.net.Dns_Delegate_ResolveCallback" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.Dns" module="cs.system.net.Dns" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.net.Dns_ResolveCallback"/>
	<x path="cs.system.net.Dns_ResolveCallback"/>
	<x path="cs.system.net.Dns_ResolveCallback"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.net.Dns_ResolveCallback"/>
	<x path="cs.system.net.Dns_ResolveCallback"/>
	<x path="cs.system.net.Dns_ResolveCallback"/>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="hostName">
				<c path="String"/>
				<c path="cs.system.net.IPHostEntry"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="hostName:callback:object">
				<c path="String"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<c path="cs.system.net.IPHostEntry"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Net.Dns.ResolveCallback"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.net.Dns_ResolveCallback" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.Dns" module="cs.system.net.Dns">
		<from><icast field="FromHaxeFunction"><f a="">
	<c path="String"/>
	<c path="cs.system.net.IPHostEntry"/>
</f></icast></from>
		<this><c path="cs.system.net.Dns_Delegate_ResolveCallback"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.net._Dns.Dns_ResolveCallback_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.Dns" private="1" module="cs.system.net.Dns">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="">
				<c path="String"/>
				<c path="cs.system.net.IPHostEntry"/>
			</f>
			<x path="cs.system.net.Dns_ResolveCallback"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="">
				<c path="String"/>
				<c path="cs.system.net.IPHostEntry"/>
			</f>
			<x path="cs.system.net.Dns_ResolveCallback"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.net.Dns_Delegate_ResolveCallback"/>
			<c path="cs.system.net.Dns_Delegate_ResolveCallback"/>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.net.Dns_ResolveCallback"/>
			<x path="cs.system.net.Dns_ResolveCallback"/>
			<x path="cs.system.net.Dns_ResolveCallback"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.net.Dns_ResolveCallback"/>
			<x path="cs.system.net.Dns_ResolveCallback"/>
			<x path="cs.system.net.Dns_ResolveCallback"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system.net._Dns.Dns_ResolveCallback_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.Dns" private="1" module="cs.system.net.Dns">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="">
					<c path="String"/>
					<c path="cs.system.net.IPHostEntry"/>
				</f>
				<x path="cs.system.net.Dns_ResolveCallback"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="">
					<c path="String"/>
					<c path="cs.system.net.IPHostEntry"/>
				</f>
				<x path="cs.system.net.Dns_ResolveCallback"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.net.Dns_Delegate_ResolveCallback"/>
				<c path="cs.system.net.Dns_Delegate_ResolveCallback"/>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.net.Dns_ResolveCallback"/>
				<x path="cs.system.net.Dns_ResolveCallback"/>
				<x path="cs.system.net.Dns_ResolveCallback"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.net.Dns_ResolveCallback"/>
				<x path="cs.system.net.Dns_ResolveCallback"/>
				<x path="cs.system.net.Dns_ResolveCallback"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="cs.system.net.Dns_Delegate_GetHostByNameCallback" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.Dns" module="cs.system.net.Dns" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.net.Dns_GetHostByNameCallback"/>
	<x path="cs.system.net.Dns_GetHostByNameCallback"/>
	<x path="cs.system.net.Dns_GetHostByNameCallback"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.net.Dns_GetHostByNameCallback"/>
	<x path="cs.system.net.Dns_GetHostByNameCallback"/>
	<x path="cs.system.net.Dns_GetHostByNameCallback"/>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="hostName">
				<c path="String"/>
				<c path="cs.system.net.IPHostEntry"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="hostName:callback:object">
				<c path="String"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<c path="cs.system.net.IPHostEntry"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Net.Dns.GetHostByNameCallback"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.net.Dns_GetHostByNameCallback" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.Dns" module="cs.system.net.Dns">
		<from><icast field="FromHaxeFunction"><f a="">
	<c path="String"/>
	<c path="cs.system.net.IPHostEntry"/>
</f></icast></from>
		<this><c path="cs.system.net.Dns_Delegate_GetHostByNameCallback"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.net._Dns.Dns_GetHostByNameCallback_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.Dns" private="1" module="cs.system.net.Dns">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="">
				<c path="String"/>
				<c path="cs.system.net.IPHostEntry"/>
			</f>
			<x path="cs.system.net.Dns_GetHostByNameCallback"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="">
				<c path="String"/>
				<c path="cs.system.net.IPHostEntry"/>
			</f>
			<x path="cs.system.net.Dns_GetHostByNameCallback"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.net.Dns_Delegate_GetHostByNameCallback"/>
			<c path="cs.system.net.Dns_Delegate_GetHostByNameCallback"/>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.net.Dns_GetHostByNameCallback"/>
			<x path="cs.system.net.Dns_GetHostByNameCallback"/>
			<x path="cs.system.net.Dns_GetHostByNameCallback"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.net.Dns_GetHostByNameCallback"/>
			<x path="cs.system.net.Dns_GetHostByNameCallback"/>
			<x path="cs.system.net.Dns_GetHostByNameCallback"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system.net._Dns.Dns_GetHostByNameCallback_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.Dns" private="1" module="cs.system.net.Dns">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="">
					<c path="String"/>
					<c path="cs.system.net.IPHostEntry"/>
				</f>
				<x path="cs.system.net.Dns_GetHostByNameCallback"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="">
					<c path="String"/>
					<c path="cs.system.net.IPHostEntry"/>
				</f>
				<x path="cs.system.net.Dns_GetHostByNameCallback"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.net.Dns_Delegate_GetHostByNameCallback"/>
				<c path="cs.system.net.Dns_Delegate_GetHostByNameCallback"/>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.net.Dns_GetHostByNameCallback"/>
				<x path="cs.system.net.Dns_GetHostByNameCallback"/>
				<x path="cs.system.net.Dns_GetHostByNameCallback"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.net.Dns_GetHostByNameCallback"/>
				<x path="cs.system.net.Dns_GetHostByNameCallback"/>
				<x path="cs.system.net.Dns_GetHostByNameCallback"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="cs.system.net.Dns" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.Dns" extern="1">
		<BeginGetHostByName final="1" public="1" set="method" static="1">
			<f a="hostName:requestCallback:stateObject">
				<c path="String"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginGetHostByName>
		<BeginResolve final="1" public="1" set="method" static="1">
			<f a="hostName:requestCallback:stateObject">
				<c path="String"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginResolve>
		<BeginGetHostAddresses final="1" public="1" set="method" static="1">
			<f a="hostNameOrAddress:requestCallback:stateObject">
				<c path="String"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginGetHostAddresses>
		<BeginGetHostEntry final="1" public="1" set="method" static="1">
			<f a="hostNameOrAddress:requestCallback:stateObject">
				<c path="String"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><BeginGetHostEntry final="1" public="1" set="method">
	<f a="address:requestCallback:stateObject">
		<c path="cs.system.net.IPAddress"/>
		<x path="cs.system.AsyncCallback"/>
		<d/>
		<c path="cs.system.IAsyncResult"/>
	</f>
	<meta><m n=":overload"/></meta>
</BeginGetHostEntry></overloads>
		</BeginGetHostEntry>
		<EndGetHostByName final="1" public="1" set="method" static="1">
			<f a="asyncResult">
				<c path="cs.system.IAsyncResult"/>
				<c path="cs.system.net.IPHostEntry"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndGetHostByName>
		<EndResolve final="1" public="1" set="method" static="1">
			<f a="asyncResult">
				<c path="cs.system.IAsyncResult"/>
				<c path="cs.system.net.IPHostEntry"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndResolve>
		<EndGetHostAddresses final="1" public="1" set="method" static="1">
			<f a="asyncResult">
				<c path="cs.system.IAsyncResult"/>
				<c path="cs.NativeArray"><c path="cs.system.net.IPAddress"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</EndGetHostAddresses>
		<EndGetHostEntry final="1" public="1" set="method" static="1">
			<f a="asyncResult">
				<c path="cs.system.IAsyncResult"/>
				<c path="cs.system.net.IPHostEntry"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndGetHostEntry>
		<GetHostByAddress final="1" public="1" set="method" static="1">
			<f a="address">
				<c path="cs.system.net.IPAddress"/>
				<c path="cs.system.net.IPHostEntry"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetHostByAddress final="1" public="1" set="method">
	<f a="address">
		<c path="String"/>
		<c path="cs.system.net.IPHostEntry"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetHostByAddress></overloads>
		</GetHostByAddress>
		<GetHostEntry final="1" public="1" set="method" static="1">
			<f a="hostNameOrAddress">
				<c path="String"/>
				<c path="cs.system.net.IPHostEntry"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetHostEntry final="1" public="1" set="method">
	<f a="address">
		<c path="cs.system.net.IPAddress"/>
		<c path="cs.system.net.IPHostEntry"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetHostEntry></overloads>
		</GetHostEntry>
		<GetHostAddresses final="1" public="1" set="method" static="1">
			<f a="hostNameOrAddress">
				<c path="String"/>
				<c path="cs.NativeArray"><c path="cs.system.net.IPAddress"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</GetHostAddresses>
		<GetHostByName final="1" public="1" set="method" static="1">
			<f a="hostName">
				<c path="String"/>
				<c path="cs.system.net.IPHostEntry"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetHostByName>
		<GetHostName final="1" public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</GetHostName>
		<Resolve final="1" public="1" set="method" static="1">
			<f a="hostName">
				<c path="String"/>
				<c path="cs.system.net.IPHostEntry"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Resolve>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Net.Dns"</e></m>
		</meta>
	</class>
	<class path="cs.system.net.EndPoint" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.EndPoint" extern="1">
		<AddressFamily public="1" get="accessor" set="null"><e path="cs.system.net.sockets.AddressFamily"/></AddressFamily>
		<get_AddressFamily set="method">
			<f a=""><e path="cs.system.net.sockets.AddressFamily"/></f>
			<meta><m n=":overload"/></meta>
		</get_AddressFamily>
		<Create public="1" set="method">
			<f a="address">
				<c path="cs.system.net.SocketAddress"/>
				<c path="cs.system.net.EndPoint"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Create>
		<Serialize public="1" set="method">
			<f a=""><c path="cs.system.net.SocketAddress"/></f>
			<meta><m n=":overload"/></meta>
		</Serialize>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Net.EndPoint"</e></m>
		</meta>
	</class>
	<class path="cs.system.net.IPAddress" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.IPAddress" extern="1">
		<IPv6None public="1" set="null" static="1">
			<c path="cs.system.net.IPAddress"/>
			<meta><m n=":readOnly"/></meta>
		</IPv6None>
		<IPv6Loopback public="1" set="null" static="1">
			<c path="cs.system.net.IPAddress"/>
			<meta><m n=":readOnly"/></meta>
		</IPv6Loopback>
		<IPv6Any public="1" set="null" static="1">
			<c path="cs.system.net.IPAddress"/>
			<meta><m n=":readOnly"/></meta>
		</IPv6Any>
		<None public="1" set="null" static="1">
			<c path="cs.system.net.IPAddress"/>
			<meta><m n=":readOnly"/></meta>
		</None>
		<Loopback public="1" set="null" static="1">
			<c path="cs.system.net.IPAddress"/>
			<meta><m n=":readOnly"/></meta>
		</Loopback>
		<Broadcast public="1" set="null" static="1">
			<c path="cs.system.net.IPAddress"/>
			<meta><m n=":readOnly"/></meta>
		</Broadcast>
		<Any public="1" set="null" static="1">
			<c path="cs.system.net.IPAddress"/>
			<meta><m n=":readOnly"/></meta>
		</Any>
		<HostToNetworkOrder final="1" public="1" set="method" static="1">
			<f a="host">
				<t path="cs.types.Int16"/>
				<t path="cs.types.Int16"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<HostToNetworkOrder final="1" public="1" set="method">
					<f a="host">
						<x path="haxe.Int64"/>
						<x path="haxe.Int64"/>
					</f>
					<meta><m n=":overload"/></meta>
				</HostToNetworkOrder>
				<HostToNetworkOrder final="1" public="1" set="method">
					<f a="host">
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</HostToNetworkOrder>
			</overloads>
		</HostToNetworkOrder>
		<NetworkToHostOrder final="1" public="1" set="method" static="1">
			<f a="network">
				<t path="cs.types.Int16"/>
				<t path="cs.types.Int16"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<NetworkToHostOrder final="1" public="1" set="method">
					<f a="network">
						<x path="haxe.Int64"/>
						<x path="haxe.Int64"/>
					</f>
					<meta><m n=":overload"/></meta>
				</NetworkToHostOrder>
				<NetworkToHostOrder final="1" public="1" set="method">
					<f a="network">
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</NetworkToHostOrder>
			</overloads>
		</NetworkToHostOrder>
		<Parse final="1" public="1" set="method" static="1">
			<f a="ipString">
				<c path="String"/>
				<c path="cs.system.net.IPAddress"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Parse>
		<TryParse final="1" public="1" set="method" static="1">
			<f a="ipString:address">
				<c path="String"/>
				<t path="cs.Out"><c path="cs.system.net.IPAddress"/></t>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</TryParse>
		<IsLoopback final="1" public="1" set="method" static="1">
			<f a="addr">
				<c path="cs.system.net.IPAddress"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsLoopback>
		<AddressFamily public="1" get="accessor" set="null"><e path="cs.system.net.sockets.AddressFamily"/></AddressFamily>
		<ScopeId public="1" get="accessor" set="accessor"><x path="haxe.Int64"/></ScopeId>
		<IsIPv6Multicast public="1" get="accessor" set="null"><x path="Bool"/></IsIPv6Multicast>
		<IsIPv6SiteLocal public="1" get="accessor" set="null"><x path="Bool"/></IsIPv6SiteLocal>
		<IsIPv6LinkLocal public="1" get="accessor" set="null"><x path="Bool"/></IsIPv6LinkLocal>
		<Address public="1" get="accessor" set="accessor"><x path="haxe.Int64"/></Address>
		<get_Address final="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</get_Address>
		<set_Address final="1" set="method">
			<f a="value">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Address>
		<get_IsIPv6LinkLocal final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsIPv6LinkLocal>
		<get_IsIPv6SiteLocal final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsIPv6SiteLocal>
		<get_IsIPv6Multicast final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsIPv6Multicast>
		<get_ScopeId final="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</get_ScopeId>
		<set_ScopeId final="1" set="method">
			<f a="value">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ScopeId>
		<GetAddressBytes final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetAddressBytes>
		<get_AddressFamily final="1" set="method">
			<f a=""><e path="cs.system.net.sockets.AddressFamily"/></f>
			<meta><m n=":overload"/></meta>
		</get_AddressFamily>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<new final="1" public="1" set="method">
			<f a="addr">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="address:scopeId">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="address">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Net.IPAddress"</e></m>
		</meta>
	</class>
	<class path="cs.system.net.IPEndPoint" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.IPEndPoint" extern="1">
		<extends path="cs.system.net.EndPoint"/>
		<MinPort public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":readOnly"/></meta>
		</MinPort>
		<MaxPort public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":readOnly"/></meta>
		</MaxPort>
		<Port public="1" get="accessor" set="accessor"><x path="Int"/></Port>
		<AddressFamily public="1" get="accessor" set="null" override="1"><e path="cs.system.net.sockets.AddressFamily"/></AddressFamily>
		<Address public="1" get="accessor" set="accessor"><c path="cs.system.net.IPAddress"/></Address>
		<get_Address final="1" set="method">
			<f a=""><c path="cs.system.net.IPAddress"/></f>
			<meta><m n=":overload"/></meta>
		</get_Address>
		<set_Address final="1" set="method">
			<f a="value">
				<c path="cs.system.net.IPAddress"/>
				<c path="cs.system.net.IPAddress"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Address>
		<get_AddressFamily set="method" override="1">
			<f a=""><e path="cs.system.net.sockets.AddressFamily"/></f>
			<meta><m n=":overload"/></meta>
		</get_AddressFamily>
		<get_Port final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Port>
		<set_Port final="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Port>
		<Create public="1" set="method" override="1">
			<f a="socketAddress">
				<c path="cs.system.net.SocketAddress"/>
				<c path="cs.system.net.EndPoint"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Create>
		<Serialize public="1" set="method" override="1">
			<f a=""><c path="cs.system.net.SocketAddress"/></f>
			<meta><m n=":overload"/></meta>
		</Serialize>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<new final="1" public="1" set="method">
			<f a="address:port">
				<c path="cs.system.net.IPAddress"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new final="1" public="1" set="method">
	<f a="iaddr:port">
		<x path="haxe.Int64"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Net.IPEndPoint"</e></m>
		</meta>
	</class>
	<class path="cs.system.net.IPHostEntry" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.IPHostEntry" extern="1">
		<HostName public="1" get="accessor" set="accessor"><c path="String"/></HostName>
		<Aliases public="1" get="accessor" set="accessor"><c path="cs.NativeArray"><c path="String"/></c></Aliases>
		<AddressList public="1" get="accessor" set="accessor"><c path="cs.NativeArray"><c path="cs.system.net.IPAddress"/></c></AddressList>
		<get_AddressList final="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.net.IPAddress"/></c></f>
			<meta><m n=":overload"/></meta>
		</get_AddressList>
		<set_AddressList final="1" set="method">
			<f a="value">
				<c path="cs.NativeArray"><c path="cs.system.net.IPAddress"/></c>
				<c path="cs.NativeArray"><c path="cs.system.net.IPAddress"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</set_AddressList>
		<get_Aliases final="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</get_Aliases>
		<set_Aliases final="1" set="method">
			<f a="value">
				<c path="cs.NativeArray"><c path="String"/></c>
				<c path="cs.NativeArray"><c path="String"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Aliases>
		<get_HostName final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_HostName>
		<set_HostName final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_HostName>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Net.IPHostEntry"</e></m>
		</meta>
	</class>
	<class path="cs.system.net.SocketAddress" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.SocketAddress" extern="1">
		<Size public="1" get="accessor" set="null"><x path="Int"/></Size>
		<Family public="1" get="accessor" set="null"><e path="cs.system.net.sockets.AddressFamily"/></Family>
		<get_Family final="1" set="method">
			<f a=""><e path="cs.system.net.sockets.AddressFamily"/></f>
			<meta><m n=":overload"/></meta>
		</get_Family>
		<get_Size final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Size>
		<get_Item final="1" set="method">
			<f a="offset">
				<x path="Int"/>
				<t path="cs.types.UInt8"/>
			</f>
			<meta><m n=":overload"/></meta>
		</get_Item>
		<set_Item final="1" set="method">
			<f a="offset:value">
				<x path="Int"/>
				<t path="cs.types.UInt8"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Item>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<new final="1" public="1" set="method">
			<f a="family:size">
				<e path="cs.system.net.sockets.AddressFamily"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new final="1" public="1" set="method">
	<f a="family">
		<e path="cs.system.net.sockets.AddressFamily"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Net.SocketAddress"</e></m>
		</meta>
	</class>
	<enum path="cs.system.net.sockets.AddressFamily" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.sockets.AddressFamily">
		<Unknown><meta><m n=":csNative"><e>-1</e></m></meta></Unknown>
		<Unspecified><meta><m n=":csNative"><e>0</e></m></meta></Unspecified>
		<Unix><meta><m n=":csNative"><e>1</e></m></meta></Unix>
		<InterNetwork><meta><m n=":csNative"><e>2</e></m></meta></InterNetwork>
		<ImpLink><meta><m n=":csNative"><e>3</e></m></meta></ImpLink>
		<Pup><meta><m n=":csNative"><e>4</e></m></meta></Pup>
		<Chaos><meta><m n=":csNative"><e>5</e></m></meta></Chaos>
		<NS><meta><m n=":csNative"><e>6</e></m></meta></NS>
		<Ipx><meta><m n=":csNative"><e>6</e></m></meta></Ipx>
		<Iso><meta><m n=":csNative"><e>7</e></m></meta></Iso>
		<Osi><meta><m n=":csNative"><e>7</e></m></meta></Osi>
		<Ecma><meta><m n=":csNative"><e>8</e></m></meta></Ecma>
		<DataKit><meta><m n=":csNative"><e>9</e></m></meta></DataKit>
		<Ccitt><meta><m n=":csNative"><e>10</e></m></meta></Ccitt>
		<Sna><meta><m n=":csNative"><e>11</e></m></meta></Sna>
		<DecNet><meta><m n=":csNative"><e>12</e></m></meta></DecNet>
		<DataLink><meta><m n=":csNative"><e>13</e></m></meta></DataLink>
		<Lat><meta><m n=":csNative"><e>14</e></m></meta></Lat>
		<HyperChannel><meta><m n=":csNative"><e>15</e></m></meta></HyperChannel>
		<AppleTalk><meta><m n=":csNative"><e>16</e></m></meta></AppleTalk>
		<NetBios><meta><m n=":csNative"><e>17</e></m></meta></NetBios>
		<VoiceView><meta><m n=":csNative"><e>18</e></m></meta></VoiceView>
		<FireFox><meta><m n=":csNative"><e>19</e></m></meta></FireFox>
		<Banyan><meta><m n=":csNative"><e>21</e></m></meta></Banyan>
		<Atm><meta><m n=":csNative"><e>22</e></m></meta></Atm>
		<InterNetworkV6><meta><m n=":csNative"><e>23</e></m></meta></InterNetworkV6>
		<Cluster><meta><m n=":csNative"><e>24</e></m></meta></Cluster>
		<Ieee12844><meta><m n=":csNative"><e>25</e></m></meta></Ieee12844>
		<Irda><meta><m n=":csNative"><e>26</e></m></meta></Irda>
		<NetworkDesigners><meta><m n=":csNative"><e>28</e></m></meta></NetworkDesigners>
		<Max><meta><m n=":csNative"><e>29</e></m></meta></Max>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Net.Sockets.AddressFamily"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.net.sockets.IOControlCode" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.sockets.IOControlCode">
		<UnicastInterface/>
		<AddressListChange/>
		<EnableCircularQueuing/>
		<Flush/>
		<DataToRead/>
		<OobDataRead/>
		<AddressListQuery/>
		<GetBroadcastAddress/>
		<QueryTargetPnpHandle/>
		<AsyncIO/>
		<NonBlockingIO/>
		<AssociateHandle/>
		<MulticastScope/>
		<MultipointLoopback/>
		<NamespaceChange/>
		<RoutingInterfaceChange/>
		<SetGroupQos/>
		<SetQos/>
		<AbsorbRouterAlert/>
		<AddMulticastGroupOnInterface/>
		<BindToInterface/>
		<DeleteMulticastGroupFromInterface/>
		<KeepAliveValues/>
		<LimitBroadcasts/>
		<MulticastInterface/>
		<ReceiveAll/>
		<ReceiveAllIgmpMulticast/>
		<ReceiveAllMulticast/>
		<AddressListSort/>
		<GetExtensionFunctionPointer/>
		<GetGroupQos/>
		<GetQos/>
		<RoutingInterfaceQuery/>
		<TranslateHandle/>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Net.Sockets.IOControlCode"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.net.sockets.IPPacketInformation" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.sockets.IPPacketInformation" extern="1">
		<extends path="cs.system.ValueType"/>
		<op_Equality final="1" public="1" set="method" static="1">
			<f a="p1:p2">
				<c path="cs.system.net.sockets.IPPacketInformation"/>
				<c path="cs.system.net.sockets.IPPacketInformation"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Equality>
		<op_Inequality final="1" public="1" set="method" static="1">
			<f a="p1:p2">
				<c path="cs.system.net.sockets.IPPacketInformation"/>
				<c path="cs.system.net.sockets.IPPacketInformation"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Inequality>
		<Interface public="1" get="accessor" set="null"><x path="Int"/></Interface>
		<Address public="1" get="accessor" set="null"><c path="cs.system.net.IPAddress"/></Address>
		<get_Address final="1" set="method">
			<f a=""><c path="cs.system.net.IPAddress"/></f>
			<meta><m n=":overload"/></meta>
		</get_Address>
		<get_Interface final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Interface>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Net.Sockets.IPPacketInformation"</e></m>
		</meta>
	</class>
	<class path="cs.system.net.sockets.LingerOption" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.sockets.LingerOption" extern="1">
		<LingerTime public="1" get="accessor" set="accessor"><x path="Int"/></LingerTime>
		<Enabled public="1" get="accessor" set="accessor"><x path="Bool"/></Enabled>
		<get_Enabled final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_Enabled>
		<set_Enabled final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Enabled>
		<get_LingerTime final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_LingerTime>
		<set_LingerTime final="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_LingerTime>
		<new final="1" public="1" set="method">
			<f a="enable:secs">
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Net.Sockets.LingerOption"</e></m>
		</meta>
	</class>
	<class path="cs.system.net.sockets.NetworkStream" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.sockets.NetworkStream" extern="1">
		<extends path="cs.system.io.Stream"/>
		<implements path="cs.system.IDisposable"/>
		<WriteTimeout public="1" get="accessor" set="accessor" override="1"><x path="Int"/></WriteTimeout>
		<Writeable get="null" set="null"><x path="Bool"/></Writeable>
		<Socket get="null" set="null"><c path="cs.system.net.sockets.Socket"/></Socket>
		<ReadTimeout public="1" get="accessor" set="accessor" override="1"><x path="Int"/></ReadTimeout>
		<Readable get="null" set="null"><x path="Bool"/></Readable>
		<Position public="1" get="accessor" set="accessor" override="1"><x path="haxe.Int64"/></Position>
		<Length public="1" get="accessor" set="null" override="1"><x path="haxe.Int64"/></Length>
		<DataAvailable public="1" get="accessor" set="null"><x path="Bool"/></DataAvailable>
		<CanWrite public="1" get="accessor" set="null" override="1"><x path="Bool"/></CanWrite>
		<CanTimeout public="1" get="accessor" set="null" override="1"><x path="Bool"/></CanTimeout>
		<CanSeek public="1" get="accessor" set="null" override="1"><x path="Bool"/></CanSeek>
		<CanRead public="1" get="accessor" set="null" override="1"><x path="Bool"/></CanRead>
		<get_CanRead set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_CanRead>
		<get_CanSeek set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_CanSeek>
		<get_CanTimeout set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_CanTimeout>
		<get_CanWrite set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_CanWrite>
		<get_DataAvailable set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_DataAvailable>
		<get_Length set="method" override="1">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</get_Length>
		<get_Position set="method" override="1">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</get_Position>
		<set_Position set="method" override="1">
			<f a="value">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Position>
		<get_Readable final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</get_Readable>
		<set_Readable final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</set_Readable>
		<get_ReadTimeout set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReadTimeout>
		<set_ReadTimeout set="method" override="1">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ReadTimeout>
		<get_Socket final="1" set="method">
			<f a=""><c path="cs.system.net.sockets.Socket"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</get_Socket>
		<get_Writeable final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</get_Writeable>
		<set_Writeable final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</set_Writeable>
		<get_WriteTimeout set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_WriteTimeout>
		<set_WriteTimeout set="method" override="1">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_WriteTimeout>
		<BeginRead public="1" set="method" override="1">
			<f a="buffer:offset:size:callback:state">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginRead>
		<BeginWrite public="1" set="method" override="1">
			<f a="buffer:offset:size:callback:state">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginWrite>
		<Close final="1" public="1" set="method" override="1">
			<f a="timeout">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Close>
		<Dispose set="method" override="1">
			<f a="disposing">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</Dispose>
		<EndRead public="1" set="method" override="1">
			<f a="ar">
				<c path="cs.system.IAsyncResult"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndRead>
		<EndWrite public="1" set="method" override="1">
			<f a="ar">
				<c path="cs.system.IAsyncResult"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndWrite>
		<Flush public="1" set="method" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Flush>
		<Read public="1" set="method" override="1">
			<f a="buffer:offset:size">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Read>
		<Seek public="1" set="method" override="1">
			<f a="offset:origin">
				<x path="haxe.Int64"/>
				<e path="cs.system.io.SeekOrigin"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Seek>
		<SetLength public="1" set="method" override="1">
			<f a="value">
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetLength>
		<Write public="1" set="method" override="1">
			<f a="buffer:offset:size">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Write>
		<new final="1" public="1" set="method">
			<f a="socket">
				<c path="cs.system.net.sockets.Socket"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="socket:access:owns_socket">
						<c path="cs.system.net.sockets.Socket"/>
						<e path="cs.system.io.FileAccess"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="socket:access">
						<c path="cs.system.net.sockets.Socket"/>
						<e path="cs.system.io.FileAccess"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="socket:owns_socket">
						<c path="cs.system.net.sockets.Socket"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Net.Sockets.NetworkStream"</e></m>
		</meta>
	</class>
	<enum path="cs.system.net.sockets.ProtocolType" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.sockets.ProtocolType">
		<Unknown><meta><m n=":csNative"><e>-1</e></m></meta></Unknown>
		<IP><meta><m n=":csNative"><e>0</e></m></meta></IP>
		<Unspecified><meta><m n=":csNative"><e>0</e></m></meta></Unspecified>
		<IPv6HopByHopOptions><meta><m n=":csNative"><e>0</e></m></meta></IPv6HopByHopOptions>
		<Icmp><meta><m n=":csNative"><e>1</e></m></meta></Icmp>
		<Igmp><meta><m n=":csNative"><e>2</e></m></meta></Igmp>
		<Ggp><meta><m n=":csNative"><e>3</e></m></meta></Ggp>
		<IPv4><meta><m n=":csNative"><e>4</e></m></meta></IPv4>
		<Tcp><meta><m n=":csNative"><e>6</e></m></meta></Tcp>
		<Pup><meta><m n=":csNative"><e>12</e></m></meta></Pup>
		<Udp><meta><m n=":csNative"><e>17</e></m></meta></Udp>
		<Idp><meta><m n=":csNative"><e>22</e></m></meta></Idp>
		<IPv6><meta><m n=":csNative"><e>41</e></m></meta></IPv6>
		<IPv6RoutingHeader><meta><m n=":csNative"><e>43</e></m></meta></IPv6RoutingHeader>
		<IPv6FragmentHeader><meta><m n=":csNative"><e>44</e></m></meta></IPv6FragmentHeader>
		<IPSecEncapsulatingSecurityPayload><meta><m n=":csNative"><e>50</e></m></meta></IPSecEncapsulatingSecurityPayload>
		<IPSecAuthenticationHeader><meta><m n=":csNative"><e>51</e></m></meta></IPSecAuthenticationHeader>
		<IcmpV6><meta><m n=":csNative"><e>58</e></m></meta></IcmpV6>
		<IPv6NoNextHeader><meta><m n=":csNative"><e>59</e></m></meta></IPv6NoNextHeader>
		<IPv6DestinationOptions><meta><m n=":csNative"><e>60</e></m></meta></IPv6DestinationOptions>
		<ND><meta><m n=":csNative"><e>77</e></m></meta></ND>
		<Raw><meta><m n=":csNative"><e>255</e></m></meta></Raw>
		<Ipx><meta><m n=":csNative"><e>1000</e></m></meta></Ipx>
		<Spx><meta><m n=":csNative"><e>1256</e></m></meta></Spx>
		<SpxII><meta><m n=":csNative"><e>1257</e></m></meta></SpxII>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Net.Sockets.ProtocolType"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.net.sockets.SelectMode" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.sockets.SelectMode">
		<SelectRead><meta><m n=":csNative"><e>0</e></m></meta></SelectRead>
		<SelectWrite><meta><m n=":csNative"><e>1</e></m></meta></SelectWrite>
		<SelectError><meta><m n=":csNative"><e>2</e></m></meta></SelectError>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Net.Sockets.SelectMode"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.net.sockets.SendPacketsElement" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.sockets.SendPacketsElement" extern="1">
		<Offset public="1" get="accessor" set="null"><x path="Int"/></Offset>
		<FilePath public="1" get="accessor" set="null"><c path="String"/></FilePath>
		<EndOfPacket public="1" get="accessor" set="null"><x path="Bool"/></EndOfPacket>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<Buffer public="1" get="accessor" set="null"><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></Buffer>
		<get_Buffer final="1" set="method">
			<f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f>
			<meta><m n=":overload"/></meta>
		</get_Buffer>
		<get_Count final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Count>
		<get_EndOfPacket final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_EndOfPacket>
		<get_FilePath final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_FilePath>
		<get_Offset final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Offset>
		<new final="1" public="1" set="method">
			<f a="buffer">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="filepath:offset:count:endOfPacket">
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="filepath:offset:count">
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="filepath">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="buffer:offset:count:endOfPacket">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="buffer:offset:count">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Net.Sockets.SendPacketsElement"</e></m>
		</meta>
	</class>
	<class path="cs.system.net.sockets.Socket_Delegate_SocketAsyncCall" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.sockets.Socket" module="cs.system.net.sockets.Socket" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.net.sockets.Socket_SocketAsyncCall"/>
	<x path="cs.system.net.sockets.Socket_SocketAsyncCall"/>
	<x path="cs.system.net.sockets.Socket_SocketAsyncCall"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.net.sockets.Socket_SocketAsyncCall"/>
	<x path="cs.system.net.sockets.Socket_SocketAsyncCall"/>
	<x path="cs.system.net.sockets.Socket_SocketAsyncCall"/>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="sar">
				<c path="cs.system.net.sockets.Socket_SocketAsyncResult"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="sar:callback:object">
				<c path="cs.system.net.sockets.Socket_SocketAsyncResult"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Net.Sockets.Socket.SocketAsyncCall"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.net.sockets.Socket_SocketAsyncCall" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.sockets.Socket" module="cs.system.net.sockets.Socket">
		<from><icast field="FromHaxeFunction"><f a="">
	<c path="cs.system.net.sockets.Socket_SocketAsyncResult"/>
	<x path="Void"/>
</f></icast></from>
		<this><c path="cs.system.net.sockets.Socket_Delegate_SocketAsyncCall"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.net.sockets._Socket.Socket_SocketAsyncCall_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.sockets.Socket" private="1" module="cs.system.net.sockets.Socket">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="">
				<c path="cs.system.net.sockets.Socket_SocketAsyncResult"/>
				<x path="Void"/>
			</f>
			<x path="cs.system.net.sockets.Socket_SocketAsyncCall"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="">
				<c path="cs.system.net.sockets.Socket_SocketAsyncResult"/>
				<x path="Void"/>
			</f>
			<x path="cs.system.net.sockets.Socket_SocketAsyncCall"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.net.sockets.Socket_Delegate_SocketAsyncCall"/>
			<c path="cs.system.net.sockets.Socket_Delegate_SocketAsyncCall"/>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.net.sockets.Socket_SocketAsyncCall"/>
			<x path="cs.system.net.sockets.Socket_SocketAsyncCall"/>
			<x path="cs.system.net.sockets.Socket_SocketAsyncCall"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.net.sockets.Socket_SocketAsyncCall"/>
			<x path="cs.system.net.sockets.Socket_SocketAsyncCall"/>
			<x path="cs.system.net.sockets.Socket_SocketAsyncCall"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system.net.sockets._Socket.Socket_SocketAsyncCall_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.sockets.Socket" private="1" module="cs.system.net.sockets.Socket">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="">
					<c path="cs.system.net.sockets.Socket_SocketAsyncResult"/>
					<x path="Void"/>
				</f>
				<x path="cs.system.net.sockets.Socket_SocketAsyncCall"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="">
					<c path="cs.system.net.sockets.Socket_SocketAsyncResult"/>
					<x path="Void"/>
				</f>
				<x path="cs.system.net.sockets.Socket_SocketAsyncCall"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.net.sockets.Socket_Delegate_SocketAsyncCall"/>
				<c path="cs.system.net.sockets.Socket_Delegate_SocketAsyncCall"/>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.net.sockets.Socket_SocketAsyncCall"/>
				<x path="cs.system.net.sockets.Socket_SocketAsyncCall"/>
				<x path="cs.system.net.sockets.Socket_SocketAsyncCall"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.net.sockets.Socket_SocketAsyncCall"/>
				<x path="cs.system.net.sockets.Socket_SocketAsyncCall"/>
				<x path="cs.system.net.sockets.Socket_SocketAsyncCall"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="cs.system.net.sockets.Socket_Worker" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.sockets.Socket" module="cs.system.net.sockets.Socket" extern="1">
		<Dispatcher public="1" static="1"><x path="cs.system.net.sockets.Socket_SocketAsyncCall"/></Dispatcher>
		<result public="1"><c path="cs.system.net.sockets.Socket_SocketAsyncResult"/></result>
		<Dispose final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Dispose>
		<Init final="1" public="1" set="method">
			<f a="sock:args:op">
				<c path="cs.system.net.sockets.Socket"/>
				<c path="cs.system.net.sockets.SocketAsyncEventArgs"/>
				<e path="cs.system.net.sockets.Socket_SocketOperation"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Init>
		<Accept final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Accept>
		<AcceptReceive final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</AcceptReceive>
		<Connect final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Connect>
		<Disconnect final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Disconnect>
		<Receive final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Receive>
		<ReceiveFrom final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</ReceiveFrom>
		<ReceiveGeneric final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</ReceiveGeneric>
		<Send final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Send>
		<SendTo final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</SendTo>
		<SendGeneric final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</SendGeneric>
		<new final="1" public="1" set="method">
			<f a="args">
				<c path="cs.system.net.sockets.SocketAsyncEventArgs"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new final="1" public="1" set="method">
	<f a="ares">
		<c path="cs.system.net.sockets.Socket_SocketAsyncResult"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Net.Sockets.Socket.Worker"</e></m>
		</meta>
	</class>
	<class path="cs.system.net.sockets.Socket_SocketAsyncResult" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.sockets.Socket" module="cs.system.net.sockets.Socket" extern="1">
		<implements path="cs.system.IAsyncResult"/>
		<ErrorCode public="1" get="accessor" set="null"><e path="cs.system.net.sockets.SocketError"/></ErrorCode>
		<Total public="1" get="accessor" set="accessor"><x path="Int"/></Total>
		<Socket public="1" get="accessor" set="null"><c path="cs.system.net.sockets.Socket"/></Socket>
		<IsCompleted public="1" get="accessor" set="accessor"><x path="Bool"/></IsCompleted>
		<CompletedSynchronously public="1" get="accessor" set="null"><x path="Bool"/></CompletedSynchronously>
		<AsyncWaitHandle public="1" get="accessor" set="accessor"><c path="cs.system.threading.WaitHandle"/></AsyncWaitHandle>
		<AsyncState public="1" get="accessor" set="null"><d/></AsyncState>
		<CurrentAddress public="1"><x path="Int"/></CurrentAddress>
		<Worker public="1"><c path="cs.system.net.sockets.Socket_Worker"/></Worker>
		<EndCalled public="1"><x path="Int"/></EndCalled>
		<ares public="1"><d/></ares>
		<operation public="1"><e path="cs.system.net.sockets.Socket_SocketOperation"/></operation>
		<blocking public="1"><x path="Bool"/></blocking>
		<ReuseSocket public="1"><x path="Bool"/></ReuseSocket>
		<Buffers public="1"><c path="cs.system.collections.generic.IList_1"><c path="cs.system.ArraySegment_1"><t path="cs.types.UInt8"/></c></c></Buffers>
		<Port public="1"><x path="Int"/></Port>
		<Addresses public="1"><c path="cs.NativeArray"><c path="cs.system.net.IPAddress"/></c></Addresses>
		<AcceptSocket public="1"><c path="cs.system.net.sockets.Socket"/></AcceptSocket>
		<SockFlags public="1"><e path="cs.system.net.sockets.SocketFlags"/></SockFlags>
		<Size public="1"><x path="Int"/></Size>
		<Offset public="1"><x path="Int"/></Offset>
		<Buffer public="1"><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></Buffer>
		<EndPoint public="1"><c path="cs.system.net.EndPoint"/></EndPoint>
		<handle public="1"><c path="cs.system.IntPtr"/></handle>
		<Sock public="1"><c path="cs.system.net.sockets.Socket"/></Sock>
		<Init final="1" public="1" set="method">
			<f a="sock:state:callback:operation">
				<c path="cs.system.net.sockets.Socket"/>
				<d/>
				<x path="cs.system.AsyncCallback"/>
				<e path="cs.system.net.sockets.Socket_SocketOperation"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Init>
		<DoMConnectCallback final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</DoMConnectCallback>
		<Dispose final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Dispose>
		<CheckIfThrowDelayedException final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</CheckIfThrowDelayedException>
		<Complete final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Complete final="1" public="1" set="method">
					<f a="s:total">
						<c path="cs.system.net.sockets.Socket"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Complete>
				<Complete final="1" public="1" set="method">
					<f a="s">
						<c path="cs.system.net.sockets.Socket"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Complete>
				<Complete final="1" public="1" set="method">
					<f a="e">
						<c path="cs.system.Exception"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Complete>
				<Complete final="1" public="1" set="method">
					<f a="e:synch">
						<c path="cs.system.Exception"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Complete>
				<Complete final="1" public="1" set="method">
					<f a="total">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Complete>
				<Complete final="1" public="1" set="method">
					<f a="synch">
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Complete>
			</overloads>
		</Complete>
		<get_AsyncState final="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_AsyncState>
		<get_AsyncWaitHandle final="1" set="method">
			<f a=""><c path="cs.system.threading.WaitHandle"/></f>
			<meta><m n=":overload"/></meta>
		</get_AsyncWaitHandle>
		<set_AsyncWaitHandle final="1" set="method">
			<f a="value">
				<c path="cs.system.threading.WaitHandle"/>
				<c path="cs.system.threading.WaitHandle"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_AsyncWaitHandle>
		<get_CompletedSynchronously final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_CompletedSynchronously>
		<get_IsCompleted final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsCompleted>
		<set_IsCompleted final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_IsCompleted>
		<get_Socket final="1" set="method">
			<f a=""><c path="cs.system.net.sockets.Socket"/></f>
			<meta><m n=":overload"/></meta>
		</get_Socket>
		<get_Total final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Total>
		<set_Total final="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Total>
		<get_ErrorCode final="1" set="method">
			<f a=""><e path="cs.system.net.sockets.SocketError"/></f>
			<meta><m n=":overload"/></meta>
		</get_ErrorCode>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><new final="1" public="1" set="method">
	<f a="sock:state:callback:operation">
		<c path="cs.system.net.sockets.Socket"/>
		<d/>
		<x path="cs.system.AsyncCallback"/>
		<e path="cs.system.net.sockets.Socket_SocketOperation"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Net.Sockets.Socket.SocketAsyncResult"</e></m>
		</meta>
	</class>
	<enum path="cs.system.net.sockets.Socket_SocketOperation" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.sockets.Socket" module="cs.system.net.sockets.Socket">
		<Accept><meta><m n=":csNative"><e>0</e></m></meta></Accept>
		<Connect><meta><m n=":csNative"><e>1</e></m></meta></Connect>
		<Receive><meta><m n=":csNative"><e>2</e></m></meta></Receive>
		<ReceiveFrom><meta><m n=":csNative"><e>3</e></m></meta></ReceiveFrom>
		<Send><meta><m n=":csNative"><e>4</e></m></meta></Send>
		<SendTo><meta><m n=":csNative"><e>5</e></m></meta></SendTo>
		<RecvJustCallback><meta><m n=":csNative"><e>6</e></m></meta></RecvJustCallback>
		<SendJustCallback><meta><m n=":csNative"><e>7</e></m></meta></SendJustCallback>
		<UsedInProcess><meta><m n=":csNative"><e>8</e></m></meta></UsedInProcess>
		<UsedInConsole2><meta><m n=":csNative"><e>9</e></m></meta></UsedInConsole2>
		<Disconnect><meta><m n=":csNative"><e>10</e></m></meta></Disconnect>
		<AcceptReceive><meta><m n=":csNative"><e>11</e></m></meta></AcceptReceive>
		<ReceiveGeneric><meta><m n=":csNative"><e>12</e></m></meta></ReceiveGeneric>
		<SendGeneric><meta><m n=":csNative"><e>13</e></m></meta></SendGeneric>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Net.Sockets.Socket.SocketOperation"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.net.sockets.Socket_WSABUF" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.sockets.Socket" module="cs.system.net.sockets.Socket" extern="1">
		<extends path="cs.system.ValueType"/>
		<buf public="1"><c path="cs.system.IntPtr"/></buf>
		<len public="1"><x path="Int"/></len>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Net.Sockets.Socket.WSABUF"</e></m>
		</meta>
	</class>
	<class path="cs.system.net.sockets.Socket_SendFileAsyncResult" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.sockets.Socket" module="cs.system.net.sockets.Socket" extern="1">
		<implements path="cs.system.IAsyncResult"/>
		<Original public="1" get="accessor" set="null"><c path="cs.system.IAsyncResult"/></Original>
		<Delegate public="1" get="accessor" set="null"><x path="cs.system.net.sockets.Socket_SendFileHandler"/></Delegate>
		<IsCompleted public="1" get="accessor" set="null"><x path="Bool"/></IsCompleted>
		<CompletedSynchronously public="1" get="accessor" set="null"><x path="Bool"/></CompletedSynchronously>
		<AsyncWaitHandle public="1" get="accessor" set="null"><c path="cs.system.threading.WaitHandle"/></AsyncWaitHandle>
		<AsyncState public="1" get="accessor" set="null"><d/></AsyncState>
		<get_AsyncState final="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_AsyncState>
		<get_AsyncWaitHandle final="1" set="method">
			<f a=""><c path="cs.system.threading.WaitHandle"/></f>
			<meta><m n=":overload"/></meta>
		</get_AsyncWaitHandle>
		<get_CompletedSynchronously final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_CompletedSynchronously>
		<get_IsCompleted final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsCompleted>
		<get_Delegate final="1" set="method">
			<f a=""><x path="cs.system.net.sockets.Socket_SendFileHandler"/></f>
			<meta><m n=":overload"/></meta>
		</get_Delegate>
		<get_Original final="1" set="method">
			<f a=""><c path="cs.system.IAsyncResult"/></f>
			<meta><m n=":overload"/></meta>
		</get_Original>
		<new final="1" public="1" set="method">
			<f a="d:ares">
				<x path="cs.system.net.sockets.Socket_SendFileHandler"/>
				<c path="cs.system.IAsyncResult"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Net.Sockets.Socket.SendFileAsyncResult"</e></m>
		</meta>
	</class>
	<class path="cs.system.net.sockets.Socket_Delegate_SendFileHandler" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.sockets.Socket" module="cs.system.net.sockets.Socket" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.net.sockets.Socket_SendFileHandler"/>
	<x path="cs.system.net.sockets.Socket_SendFileHandler"/>
	<x path="cs.system.net.sockets.Socket_SendFileHandler"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.net.sockets.Socket_SendFileHandler"/>
	<x path="cs.system.net.sockets.Socket_SendFileHandler"/>
	<x path="cs.system.net.sockets.Socket_SendFileHandler"/>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="fileName:preBuffer:postBuffer:flags">
				<c path="String"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<e path="cs.system.net.sockets.TransmitFileOptions"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="fileName:preBuffer:postBuffer:flags:callback:object">
				<c path="String"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<e path="cs.system.net.sockets.TransmitFileOptions"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Net.Sockets.Socket.SendFileHandler"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.net.sockets.Socket_SendFileHandler" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.sockets.Socket" module="cs.system.net.sockets.Socket">
		<from><icast field="FromHaxeFunction"><f a=":::">
	<c path="String"/>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	<e path="cs.system.net.sockets.TransmitFileOptions"/>
	<x path="Void"/>
</f></icast></from>
		<this><c path="cs.system.net.sockets.Socket_Delegate_SendFileHandler"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.net.sockets._Socket.Socket_SendFileHandler_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.sockets.Socket" private="1" module="cs.system.net.sockets.Socket">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=":::">
				<c path="String"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<e path="cs.system.net.sockets.TransmitFileOptions"/>
				<x path="Void"/>
			</f>
			<x path="cs.system.net.sockets.Socket_SendFileHandler"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=":::">
				<c path="String"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<e path="cs.system.net.sockets.TransmitFileOptions"/>
				<x path="Void"/>
			</f>
			<x path="cs.system.net.sockets.Socket_SendFileHandler"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.net.sockets.Socket_Delegate_SendFileHandler"/>
			<c path="cs.system.net.sockets.Socket_Delegate_SendFileHandler"/>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.net.sockets.Socket_SendFileHandler"/>
			<x path="cs.system.net.sockets.Socket_SendFileHandler"/>
			<x path="cs.system.net.sockets.Socket_SendFileHandler"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.net.sockets.Socket_SendFileHandler"/>
			<x path="cs.system.net.sockets.Socket_SendFileHandler"/>
			<x path="cs.system.net.sockets.Socket_SendFileHandler"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system.net.sockets._Socket.Socket_SendFileHandler_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.sockets.Socket" private="1" module="cs.system.net.sockets.Socket">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=":::">
					<c path="String"/>
					<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
					<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
					<e path="cs.system.net.sockets.TransmitFileOptions"/>
					<x path="Void"/>
				</f>
				<x path="cs.system.net.sockets.Socket_SendFileHandler"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=":::">
					<c path="String"/>
					<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
					<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
					<e path="cs.system.net.sockets.TransmitFileOptions"/>
					<x path="Void"/>
				</f>
				<x path="cs.system.net.sockets.Socket_SendFileHandler"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.net.sockets.Socket_Delegate_SendFileHandler"/>
				<c path="cs.system.net.sockets.Socket_Delegate_SendFileHandler"/>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.net.sockets.Socket_SendFileHandler"/>
				<x path="cs.system.net.sockets.Socket_SendFileHandler"/>
				<x path="cs.system.net.sockets.Socket_SendFileHandler"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.net.sockets.Socket_SendFileHandler"/>
				<x path="cs.system.net.sockets.Socket_SendFileHandler"/>
				<x path="cs.system.net.sockets.Socket_SendFileHandler"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="cs.system.net.sockets.Socket" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.sockets.Socket" extern="1">
		<implements path="cs.system.IDisposable"/>
		<OSSupportsIPv6 public="1" get="accessor" set="null" static="1"><x path="Bool"/></OSSupportsIPv6>
		<SupportsIPv6 public="1" get="accessor" set="null" static="1"><x path="Bool"/></SupportsIPv6>
		<SupportsIPv4 public="1" get="accessor" set="null" static="1"><x path="Bool"/></SupportsIPv4>
		<Select final="1" public="1" set="method" static="1">
			<f a="checkRead:checkWrite:checkError:microSeconds">
				<c path="cs.system.collections.IList"/>
				<c path="cs.system.collections.IList"/>
				<c path="cs.system.collections.IList"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Select>
		<get_SupportsIPv4 final="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_SupportsIPv4>
		<get_SupportsIPv6 final="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_SupportsIPv6>
		<get_OSSupportsIPv6 final="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_OSSupportsIPv6>
		<RemoteEndPoint public="1" get="accessor" set="null"><c path="cs.system.net.EndPoint"/></RemoteEndPoint>
		<Ttl public="1" get="accessor" set="accessor"><t path="cs.types.Int16"/></Ttl>
		<SendBufferSize public="1" get="accessor" set="accessor"><x path="Int"/></SendBufferSize>
		<ReceiveBufferSize public="1" get="accessor" set="accessor"><x path="Int"/></ReceiveBufferSize>
		<NoDelay public="1" get="accessor" set="accessor"><x path="Bool"/></NoDelay>
		<ProtocolType public="1" get="accessor" set="null"><e path="cs.system.net.sockets.ProtocolType"/></ProtocolType>
		<Connected public="1" get="accessor" set="null"><x path="Bool"/></Connected>
		<Blocking public="1" get="accessor" set="accessor"><x path="Bool"/></Blocking>
		<AddressFamily public="1" get="accessor" set="null"><e path="cs.system.net.sockets.AddressFamily"/></AddressFamily>
		<ReceiveTimeout public="1" get="accessor" set="accessor"><x path="Int"/></ReceiveTimeout>
		<SendTimeout public="1" get="accessor" set="accessor"><x path="Int"/></SendTimeout>
		<SocketType public="1" get="accessor" set="null"><e path="cs.system.net.sockets.SocketType"/></SocketType>
		<LocalEndPoint public="1" get="accessor" set="null"><c path="cs.system.net.EndPoint"/></LocalEndPoint>
		<Handle public="1" get="accessor" set="null"><c path="cs.system.IntPtr"/></Handle>
		<UseOnlyOverlappedIO public="1" get="accessor" set="accessor"><x path="Bool"/></UseOnlyOverlappedIO>
		<MulticastLoopback public="1" get="accessor" set="accessor"><x path="Bool"/></MulticastLoopback>
		<LingerState public="1" get="accessor" set="accessor"><c path="cs.system.net.sockets.LingerOption"/></LingerState>
		<IsBound public="1" get="accessor" set="null"><x path="Bool"/></IsBound>
		<ExclusiveAddressUse public="1" get="accessor" set="accessor"><x path="Bool"/></ExclusiveAddressUse>
		<EnableBroadcast public="1" get="accessor" set="accessor"><x path="Bool"/></EnableBroadcast>
		<DontFragment public="1" get="accessor" set="accessor"><x path="Bool"/></DontFragment>
		<Available public="1" get="accessor" set="null"><x path="Int"/></Available>
		<get_Available final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Available>
		<get_DontFragment final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_DontFragment>
		<set_DontFragment final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_DontFragment>
		<get_EnableBroadcast final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_EnableBroadcast>
		<set_EnableBroadcast final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_EnableBroadcast>
		<get_ExclusiveAddressUse final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_ExclusiveAddressUse>
		<set_ExclusiveAddressUse final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ExclusiveAddressUse>
		<get_IsBound final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsBound>
		<get_LingerState final="1" set="method">
			<f a=""><c path="cs.system.net.sockets.LingerOption"/></f>
			<meta><m n=":overload"/></meta>
		</get_LingerState>
		<set_LingerState final="1" set="method">
			<f a="value">
				<c path="cs.system.net.sockets.LingerOption"/>
				<c path="cs.system.net.sockets.LingerOption"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_LingerState>
		<get_MulticastLoopback final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_MulticastLoopback>
		<set_MulticastLoopback final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_MulticastLoopback>
		<get_UseOnlyOverlappedIO final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_UseOnlyOverlappedIO>
		<set_UseOnlyOverlappedIO final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_UseOnlyOverlappedIO>
		<get_Handle final="1" set="method">
			<f a=""><c path="cs.system.IntPtr"/></f>
			<meta><m n=":overload"/></meta>
		</get_Handle>
		<get_LocalEndPoint final="1" set="method">
			<f a=""><c path="cs.system.net.EndPoint"/></f>
			<meta><m n=":overload"/></meta>
		</get_LocalEndPoint>
		<get_SocketType final="1" set="method">
			<f a=""><e path="cs.system.net.sockets.SocketType"/></f>
			<meta><m n=":overload"/></meta>
		</get_SocketType>
		<get_SendTimeout final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_SendTimeout>
		<set_SendTimeout final="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_SendTimeout>
		<get_ReceiveTimeout final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReceiveTimeout>
		<set_ReceiveTimeout final="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ReceiveTimeout>
		<AcceptAsync final="1" public="1" set="method">
			<f a="e">
				<c path="cs.system.net.sockets.SocketAsyncEventArgs"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AcceptAsync>
		<Accept final="1" public="1" set="method">
			<f a=""><c path="cs.system.net.sockets.Socket"/></f>
			<meta><m n=":overload"/></meta>
		</Accept>
		<BeginAccept final="1" public="1" set="method">
			<f a="callback:state">
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<BeginAccept final="1" public="1" set="method">
					<f a="acceptSocket:receiveSize:callback:state">
						<c path="cs.system.net.sockets.Socket"/>
						<x path="Int"/>
						<x path="cs.system.AsyncCallback"/>
						<d/>
						<c path="cs.system.IAsyncResult"/>
					</f>
					<meta><m n=":overload"/></meta>
				</BeginAccept>
				<BeginAccept final="1" public="1" set="method">
					<f a="receiveSize:callback:state">
						<x path="Int"/>
						<x path="cs.system.AsyncCallback"/>
						<d/>
						<c path="cs.system.IAsyncResult"/>
					</f>
					<meta><m n=":overload"/></meta>
				</BeginAccept>
			</overloads>
		</BeginAccept>
		<BeginConnect final="1" public="1" set="method">
			<f a="address:port:callback:state">
				<c path="cs.system.net.IPAddress"/>
				<x path="Int"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<BeginConnect final="1" public="1" set="method">
					<f a="addresses:port:callback:state">
						<c path="cs.NativeArray"><c path="cs.system.net.IPAddress"/></c>
						<x path="Int"/>
						<x path="cs.system.AsyncCallback"/>
						<d/>
						<c path="cs.system.IAsyncResult"/>
					</f>
					<meta><m n=":overload"/></meta>
				</BeginConnect>
				<BeginConnect final="1" public="1" set="method">
					<f a="end_point:callback:state">
						<c path="cs.system.net.EndPoint"/>
						<x path="cs.system.AsyncCallback"/>
						<d/>
						<c path="cs.system.IAsyncResult"/>
					</f>
					<meta><m n=":overload"/></meta>
				</BeginConnect>
				<BeginConnect final="1" public="1" set="method">
					<f a="host:port:callback:state">
						<c path="String"/>
						<x path="Int"/>
						<x path="cs.system.AsyncCallback"/>
						<d/>
						<c path="cs.system.IAsyncResult"/>
					</f>
					<meta><m n=":overload"/></meta>
				</BeginConnect>
			</overloads>
		</BeginConnect>
		<BeginDisconnect final="1" public="1" set="method">
			<f a="reuseSocket:callback:state">
				<x path="Bool"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginDisconnect>
		<BeginReceive final="1" public="1" set="method">
			<f a="buffer:offset:size:socket_flags:callback:state">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<e path="cs.system.net.sockets.SocketFlags"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<BeginReceive final="1" public="1" set="method">
					<f a="buffers:socketFlags:errorCode:callback:state">
						<c path="cs.system.collections.generic.IList_1"><c path="cs.system.ArraySegment_1"><t path="cs.types.UInt8"/></c></c>
						<e path="cs.system.net.sockets.SocketFlags"/>
						<t path="cs.Out"><e path="cs.system.net.sockets.SocketError"/></t>
						<x path="cs.system.AsyncCallback"/>
						<d/>
						<c path="cs.system.IAsyncResult"/>
					</f>
					<meta><m n=":overload"/></meta>
				</BeginReceive>
				<BeginReceive final="1" public="1" set="method">
					<f a="buffers:socketFlags:callback:state">
						<c path="cs.system.collections.generic.IList_1"><c path="cs.system.ArraySegment_1"><t path="cs.types.UInt8"/></c></c>
						<e path="cs.system.net.sockets.SocketFlags"/>
						<x path="cs.system.AsyncCallback"/>
						<d/>
						<c path="cs.system.IAsyncResult"/>
					</f>
					<meta><m n=":overload"/></meta>
				</BeginReceive>
				<BeginReceive final="1" public="1" set="method">
					<f a="buffer:offset:size:flags:error:callback:state">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<e path="cs.system.net.sockets.SocketFlags"/>
						<t path="cs.Out"><e path="cs.system.net.sockets.SocketError"/></t>
						<x path="cs.system.AsyncCallback"/>
						<d/>
						<c path="cs.system.IAsyncResult"/>
					</f>
					<meta><m n=":overload"/></meta>
				</BeginReceive>
			</overloads>
		</BeginReceive>
		<BeginReceiveFrom final="1" public="1" set="method">
			<f a="buffer:offset:size:socket_flags:remote_end:callback:state">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<e path="cs.system.net.sockets.SocketFlags"/>
				<t path="cs.Ref"><c path="cs.system.net.EndPoint"/></t>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginReceiveFrom>
		<BeginReceiveMessageFrom final="1" public="1" set="method">
			<f a="buffer:offset:size:socketFlags:remoteEP:callback:state">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<e path="cs.system.net.sockets.SocketFlags"/>
				<t path="cs.Ref"><c path="cs.system.net.EndPoint"/></t>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginReceiveMessageFrom>
		<BeginSend final="1" public="1" set="method">
			<f a="buffer:offset:size:socket_flags:callback:state">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<e path="cs.system.net.sockets.SocketFlags"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<BeginSend final="1" public="1" set="method">
					<f a="buffers:socketFlags:errorCode:callback:state">
						<c path="cs.system.collections.generic.IList_1"><c path="cs.system.ArraySegment_1"><t path="cs.types.UInt8"/></c></c>
						<e path="cs.system.net.sockets.SocketFlags"/>
						<t path="cs.Out"><e path="cs.system.net.sockets.SocketError"/></t>
						<x path="cs.system.AsyncCallback"/>
						<d/>
						<c path="cs.system.IAsyncResult"/>
					</f>
					<meta><m n=":overload"/></meta>
				</BeginSend>
				<BeginSend final="1" public="1" set="method">
					<f a="buffers:socketFlags:callback:state">
						<c path="cs.system.collections.generic.IList_1"><c path="cs.system.ArraySegment_1"><t path="cs.types.UInt8"/></c></c>
						<e path="cs.system.net.sockets.SocketFlags"/>
						<x path="cs.system.AsyncCallback"/>
						<d/>
						<c path="cs.system.IAsyncResult"/>
					</f>
					<meta><m n=":overload"/></meta>
				</BeginSend>
				<BeginSend final="1" public="1" set="method">
					<f a="buffer:offset:size:socketFlags:errorCode:callback:state">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<e path="cs.system.net.sockets.SocketFlags"/>
						<t path="cs.Out"><e path="cs.system.net.sockets.SocketError"/></t>
						<x path="cs.system.AsyncCallback"/>
						<d/>
						<c path="cs.system.IAsyncResult"/>
					</f>
					<meta><m n=":overload"/></meta>
				</BeginSend>
			</overloads>
		</BeginSend>
		<BeginSendFile final="1" public="1" set="method">
			<f a="fileName:callback:state">
				<c path="String"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><BeginSendFile final="1" public="1" set="method">
	<f a="fileName:preBuffer:postBuffer:flags:callback:state">
		<c path="String"/>
		<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
		<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
		<e path="cs.system.net.sockets.TransmitFileOptions"/>
		<x path="cs.system.AsyncCallback"/>
		<d/>
		<c path="cs.system.IAsyncResult"/>
	</f>
	<meta><m n=":overload"/></meta>
</BeginSendFile></overloads>
		</BeginSendFile>
		<BeginSendTo final="1" public="1" set="method">
			<f a="buffer:offset:size:socket_flags:remote_end:callback:state">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<e path="cs.system.net.sockets.SocketFlags"/>
				<c path="cs.system.net.EndPoint"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginSendTo>
		<Bind final="1" public="1" set="method">
			<f a="local_end">
				<c path="cs.system.net.EndPoint"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Bind>
		<Connect final="1" public="1" set="method">
			<f a="address:port">
				<c path="cs.system.net.IPAddress"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Connect final="1" public="1" set="method">
					<f a="remoteEP">
						<c path="cs.system.net.EndPoint"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Connect>
				<Connect final="1" public="1" set="method">
					<f a="host:port">
						<c path="String"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Connect>
				<Connect final="1" public="1" set="method">
					<f a="addresses:port">
						<c path="cs.NativeArray"><c path="cs.system.net.IPAddress"/></c>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Connect>
			</overloads>
		</Connect>
		<DisconnectAsync final="1" public="1" set="method">
			<f a="e">
				<c path="cs.system.net.sockets.SocketAsyncEventArgs"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DisconnectAsync>
		<Disconnect final="1" public="1" set="method">
			<f a="reuseSocket">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Disconnect>
		<DuplicateAndClose final="1" public="1" set="method">
			<f a="targetProcessId">
				<x path="Int"/>
				<c path="cs.system.net.sockets.SocketInformation"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DuplicateAndClose>
		<EndAccept final="1" public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<c path="cs.system.net.sockets.Socket"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<EndAccept final="1" public="1" set="method">
					<f a="buffer:bytesTransferred:asyncResult">
						<t path="cs.Out"><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></t>
						<t path="cs.Out"><x path="Int"/></t>
						<c path="cs.system.IAsyncResult"/>
						<c path="cs.system.net.sockets.Socket"/>
					</f>
					<meta><m n=":overload"/></meta>
				</EndAccept>
				<EndAccept final="1" public="1" set="method">
					<f a="buffer:asyncResult">
						<t path="cs.Out"><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></t>
						<c path="cs.system.IAsyncResult"/>
						<c path="cs.system.net.sockets.Socket"/>
					</f>
					<meta><m n=":overload"/></meta>
				</EndAccept>
			</overloads>
		</EndAccept>
		<EndConnect final="1" public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndConnect>
		<EndDisconnect final="1" public="1" set="method">
			<f a="asyncResult">
				<c path="cs.system.IAsyncResult"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndDisconnect>
		<EndReceiveMessageFrom final="1" public="1" set="method">
			<f a="asyncResult:socketFlags:endPoint:ipPacketInformation">
				<c path="cs.system.IAsyncResult"/>
				<t path="cs.Ref"><e path="cs.system.net.sockets.SocketFlags"/></t>
				<t path="cs.Ref"><c path="cs.system.net.EndPoint"/></t>
				<t path="cs.Out"><c path="cs.system.net.sockets.IPPacketInformation"/></t>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndReceiveMessageFrom>
		<EndSendFile final="1" public="1" set="method">
			<f a="asyncResult">
				<c path="cs.system.IAsyncResult"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndSendFile>
		<EndSendTo final="1" public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndSendTo>
		<GetSocketOption final="1" public="1" set="method">
			<f a="optionLevel:optionName:optionValue">
				<e path="cs.system.net.sockets.SocketOptionLevel"/>
				<e path="cs.system.net.sockets.SocketOptionName"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetSocketOption final="1" public="1" set="method">
					<f a="optionLevel:optionName">
						<e path="cs.system.net.sockets.SocketOptionLevel"/>
						<e path="cs.system.net.sockets.SocketOptionName"/>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetSocketOption>
				<GetSocketOption final="1" public="1" set="method">
					<f a="optionLevel:optionName:length">
						<e path="cs.system.net.sockets.SocketOptionLevel"/>
						<e path="cs.system.net.sockets.SocketOptionName"/>
						<x path="Int"/>
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetSocketOption>
			</overloads>
		</GetSocketOption>
		<IOControl final="1" public="1" set="method">
			<f a="ioctl_code:in_value:out_value">
				<x path="Int"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><IOControl final="1" public="1" set="method">
	<f a="ioControlCode:optionInValue:optionOutValue">
		<e path="cs.system.net.sockets.IOControlCode"/>
		<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
		<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</IOControl></overloads>
		</IOControl>
		<Listen final="1" public="1" set="method">
			<f a="backlog">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Listen>
		<Poll final="1" public="1" set="method">
			<f a="time_us:mode">
				<x path="Int"/>
				<e path="cs.system.net.sockets.SelectMode"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Poll>
		<Receive final="1" public="1" set="method">
			<f a="buffer">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Receive final="1" public="1" set="method">
					<f a="buffers:socketFlags:errorCode">
						<c path="cs.system.collections.generic.IList_1"><c path="cs.system.ArraySegment_1"><t path="cs.types.UInt8"/></c></c>
						<e path="cs.system.net.sockets.SocketFlags"/>
						<t path="cs.Out"><e path="cs.system.net.sockets.SocketError"/></t>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Receive>
				<Receive final="1" public="1" set="method">
					<f a="buffers:socketFlags">
						<c path="cs.system.collections.generic.IList_1"><c path="cs.system.ArraySegment_1"><t path="cs.types.UInt8"/></c></c>
						<e path="cs.system.net.sockets.SocketFlags"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Receive>
				<Receive final="1" public="1" set="method">
					<f a="buffers">
						<c path="cs.system.collections.generic.IList_1"><c path="cs.system.ArraySegment_1"><t path="cs.types.UInt8"/></c></c>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Receive>
				<Receive final="1" public="1" set="method">
					<f a="buffer:offset:size:flags:error">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<e path="cs.system.net.sockets.SocketFlags"/>
						<t path="cs.Out"><e path="cs.system.net.sockets.SocketError"/></t>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Receive>
				<Receive final="1" public="1" set="method">
					<f a="buffer:offset:size:flags">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<e path="cs.system.net.sockets.SocketFlags"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Receive>
				<Receive final="1" public="1" set="method">
					<f a="buffer:size:flags">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<x path="Int"/>
						<e path="cs.system.net.sockets.SocketFlags"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Receive>
				<Receive final="1" public="1" set="method">
					<f a="buffer:flags">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<e path="cs.system.net.sockets.SocketFlags"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Receive>
			</overloads>
		</Receive>
		<ReceiveFromAsync final="1" public="1" set="method">
			<f a="e">
				<c path="cs.system.net.sockets.SocketAsyncEventArgs"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ReceiveFromAsync>
		<ReceiveFrom final="1" public="1" set="method">
			<f a="buffer:remoteEP">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<t path="cs.Ref"><c path="cs.system.net.EndPoint"/></t>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<ReceiveFrom final="1" public="1" set="method">
					<f a="buffer:offset:size:flags:remoteEP">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<e path="cs.system.net.sockets.SocketFlags"/>
						<t path="cs.Ref"><c path="cs.system.net.EndPoint"/></t>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ReceiveFrom>
				<ReceiveFrom final="1" public="1" set="method">
					<f a="buffer:size:flags:remoteEP">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<x path="Int"/>
						<e path="cs.system.net.sockets.SocketFlags"/>
						<t path="cs.Ref"><c path="cs.system.net.EndPoint"/></t>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ReceiveFrom>
				<ReceiveFrom final="1" public="1" set="method">
					<f a="buffer:flags:remoteEP">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<e path="cs.system.net.sockets.SocketFlags"/>
						<t path="cs.Ref"><c path="cs.system.net.EndPoint"/></t>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</ReceiveFrom>
			</overloads>
		</ReceiveFrom>
		<ReceiveMessageFromAsync final="1" public="1" set="method">
			<f a="e">
				<c path="cs.system.net.sockets.SocketAsyncEventArgs"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ReceiveMessageFromAsync>
		<ReceiveMessageFrom final="1" public="1" set="method">
			<f a="buffer:offset:size:socketFlags:remoteEP:ipPacketInformation">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<t path="cs.Ref"><e path="cs.system.net.sockets.SocketFlags"/></t>
				<t path="cs.Ref"><c path="cs.system.net.EndPoint"/></t>
				<t path="cs.Out"><c path="cs.system.net.sockets.IPPacketInformation"/></t>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ReceiveMessageFrom>
		<SendPacketsAsync final="1" public="1" set="method">
			<f a="e">
				<c path="cs.system.net.sockets.SocketAsyncEventArgs"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SendPacketsAsync>
		<Send final="1" public="1" set="method">
			<f a="buf">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Send final="1" public="1" set="method">
					<f a="buffers:socketFlags:errorCode">
						<c path="cs.system.collections.generic.IList_1"><c path="cs.system.ArraySegment_1"><t path="cs.types.UInt8"/></c></c>
						<e path="cs.system.net.sockets.SocketFlags"/>
						<t path="cs.Out"><e path="cs.system.net.sockets.SocketError"/></t>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Send>
				<Send final="1" public="1" set="method">
					<f a="buffers:socketFlags">
						<c path="cs.system.collections.generic.IList_1"><c path="cs.system.ArraySegment_1"><t path="cs.types.UInt8"/></c></c>
						<e path="cs.system.net.sockets.SocketFlags"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Send>
				<Send final="1" public="1" set="method">
					<f a="buffers">
						<c path="cs.system.collections.generic.IList_1"><c path="cs.system.ArraySegment_1"><t path="cs.types.UInt8"/></c></c>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Send>
				<Send final="1" public="1" set="method">
					<f a="buf:offset:size:flags:error">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<e path="cs.system.net.sockets.SocketFlags"/>
						<t path="cs.Out"><e path="cs.system.net.sockets.SocketError"/></t>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Send>
				<Send final="1" public="1" set="method">
					<f a="buf:offset:size:flags">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<e path="cs.system.net.sockets.SocketFlags"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Send>
				<Send final="1" public="1" set="method">
					<f a="buf:size:flags">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<x path="Int"/>
						<e path="cs.system.net.sockets.SocketFlags"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Send>
				<Send final="1" public="1" set="method">
					<f a="buf:flags">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<e path="cs.system.net.sockets.SocketFlags"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Send>
			</overloads>
		</Send>
		<SendFile final="1" public="1" set="method">
			<f a="fileName">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><SendFile final="1" public="1" set="method">
	<f a="fileName:preBuffer:postBuffer:flags">
		<c path="String"/>
		<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
		<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
		<e path="cs.system.net.sockets.TransmitFileOptions"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</SendFile></overloads>
		</SendFile>
		<SendToAsync final="1" public="1" set="method">
			<f a="e">
				<c path="cs.system.net.sockets.SocketAsyncEventArgs"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SendToAsync>
		<SendTo final="1" public="1" set="method">
			<f a="buffer:remote_end">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<c path="cs.system.net.EndPoint"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<SendTo final="1" public="1" set="method">
					<f a="buffer:offset:size:flags:remote_end">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<e path="cs.system.net.sockets.SocketFlags"/>
						<c path="cs.system.net.EndPoint"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</SendTo>
				<SendTo final="1" public="1" set="method">
					<f a="buffer:size:flags:remote_end">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<x path="Int"/>
						<e path="cs.system.net.sockets.SocketFlags"/>
						<c path="cs.system.net.EndPoint"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</SendTo>
				<SendTo final="1" public="1" set="method">
					<f a="buffer:flags:remote_end">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<e path="cs.system.net.sockets.SocketFlags"/>
						<c path="cs.system.net.EndPoint"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</SendTo>
			</overloads>
		</SendTo>
		<SetSocketOption final="1" public="1" set="method">
			<f a="optionLevel:optionName:optionValue">
				<e path="cs.system.net.sockets.SocketOptionLevel"/>
				<e path="cs.system.net.sockets.SocketOptionName"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<SetSocketOption final="1" public="1" set="method">
					<f a="optionLevel:optionName:optionValue">
						<e path="cs.system.net.sockets.SocketOptionLevel"/>
						<e path="cs.system.net.sockets.SocketOptionName"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</SetSocketOption>
				<SetSocketOption final="1" public="1" set="method">
					<f a="optionLevel:optionName:optionValue">
						<e path="cs.system.net.sockets.SocketOptionLevel"/>
						<e path="cs.system.net.sockets.SocketOptionName"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</SetSocketOption>
				<SetSocketOption final="1" public="1" set="method">
					<f a="optionLevel:optionName:optionValue">
						<e path="cs.system.net.sockets.SocketOptionLevel"/>
						<e path="cs.system.net.sockets.SocketOptionName"/>
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</SetSocketOption>
			</overloads>
		</SetSocketOption>
		<get_AddressFamily final="1" set="method">
			<f a=""><e path="cs.system.net.sockets.AddressFamily"/></f>
			<meta><m n=":overload"/></meta>
		</get_AddressFamily>
		<get_Blocking final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_Blocking>
		<set_Blocking final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Blocking>
		<get_Connected final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_Connected>
		<get_ProtocolType final="1" set="method">
			<f a=""><e path="cs.system.net.sockets.ProtocolType"/></f>
			<meta><m n=":overload"/></meta>
		</get_ProtocolType>
		<get_NoDelay final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_NoDelay>
		<set_NoDelay final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_NoDelay>
		<get_ReceiveBufferSize final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReceiveBufferSize>
		<set_ReceiveBufferSize final="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ReceiveBufferSize>
		<get_SendBufferSize final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_SendBufferSize>
		<set_SendBufferSize final="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_SendBufferSize>
		<get_Ttl final="1" set="method">
			<f a=""><t path="cs.types.Int16"/></f>
			<meta><m n=":overload"/></meta>
		</get_Ttl>
		<set_Ttl final="1" set="method">
			<f a="value">
				<t path="cs.types.Int16"/>
				<t path="cs.types.Int16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Ttl>
		<get_RemoteEndPoint final="1" set="method">
			<f a=""><c path="cs.system.net.EndPoint"/></f>
			<meta><m n=":overload"/></meta>
		</get_RemoteEndPoint>
		<Dispose set="method">
			<f a="explicitDisposing">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</Dispose>
		<Close final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><Close final="1" public="1" set="method">
	<f a="timeout">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</Close></overloads>
		</Close>
		<ReceiveAsync final="1" public="1" set="method">
			<f a="e">
				<c path="cs.system.net.sockets.SocketAsyncEventArgs"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ReceiveAsync>
		<SendAsync final="1" public="1" set="method">
			<f a="e">
				<c path="cs.system.net.sockets.SocketAsyncEventArgs"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SendAsync>
		<Shutdown final="1" public="1" set="method">
			<f a="how">
				<e path="cs.system.net.sockets.SocketShutdown"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Shutdown>
		<ConnectAsync final="1" public="1" set="method">
			<f a="e">
				<c path="cs.system.net.sockets.SocketAsyncEventArgs"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ConnectAsync>
		<EndReceive final="1" public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><EndReceive final="1" public="1" set="method">
	<f a="asyncResult:errorCode">
		<c path="cs.system.IAsyncResult"/>
		<t path="cs.Out"><e path="cs.system.net.sockets.SocketError"/></t>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</EndReceive></overloads>
		</EndReceive>
		<EndSend final="1" public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><EndSend final="1" public="1" set="method">
	<f a="asyncResult:errorCode">
		<c path="cs.system.IAsyncResult"/>
		<t path="cs.Out"><e path="cs.system.net.sockets.SocketError"/></t>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</EndSend></overloads>
		</EndSend>
		<EndReceiveFrom final="1" public="1" set="method">
			<f a="result:end_point">
				<c path="cs.system.IAsyncResult"/>
				<t path="cs.Ref"><c path="cs.system.net.EndPoint"/></t>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndReceiveFrom>
		<new final="1" public="1" set="method">
			<f a="socketInformation">
				<c path="cs.system.net.sockets.SocketInformation"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new final="1" public="1" set="method">
	<f a="family:type:proto">
		<e path="cs.system.net.sockets.AddressFamily"/>
		<e path="cs.system.net.sockets.SocketType"/>
		<e path="cs.system.net.sockets.ProtocolType"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Net.Sockets.Socket"</e></m>
		</meta>
	</class>
	<class path="cs.system.net.sockets.SocketAsyncEventArgs" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.sockets.SocketAsyncEventArgs" extern="1">
		<extends path="cs.system.EventArgs"/>
		<implements path="cs.system.IDisposable"/>
		<Completed>
			<x path="cs.system.EventHandler_1"><c path="cs.system.net.sockets.SocketAsyncEventArgs"/></x>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</Completed>
		<UserToken public="1" get="accessor" set="accessor"><d/></UserToken>
		<SocketFlags public="1" get="accessor" set="accessor"><e path="cs.system.net.sockets.SocketFlags"/></SocketFlags>
		<SocketError public="1" get="accessor" set="accessor"><e path="cs.system.net.sockets.SocketError"/></SocketError>
		<SendPacketsSendSize public="1" get="accessor" set="accessor"><x path="Int"/></SendPacketsSendSize>
		<SendPacketsFlags public="1" get="accessor" set="accessor"><e path="cs.system.net.sockets.TransmitFileOptions"/></SendPacketsFlags>
		<SendPacketsElements public="1" get="accessor" set="accessor"><c path="cs.NativeArray"><c path="cs.system.net.sockets.SendPacketsElement"/></c></SendPacketsElements>
		<ReceiveMessageFromPacketInfo public="1" get="accessor" set="null"><c path="cs.system.net.sockets.IPPacketInformation"/></ReceiveMessageFromPacketInfo>
		<RemoteEndPoint public="1" get="accessor" set="accessor"><c path="cs.system.net.EndPoint"/></RemoteEndPoint>
		<Offset public="1" get="accessor" set="null"><x path="Int"/></Offset>
		<LastOperation public="1" get="accessor" set="null"><e path="cs.system.net.sockets.SocketAsyncOperation"/></LastOperation>
		<DisconnectReuseSocket public="1" get="accessor" set="accessor"><x path="Bool"/></DisconnectReuseSocket>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<BytesTransferred public="1" get="accessor" set="null"><x path="Int"/></BytesTransferred>
		<BufferList public="1" get="accessor" set="accessor"><c path="cs.system.collections.generic.IList_1"><c path="cs.system.ArraySegment_1"><t path="cs.types.UInt8"/></c></c></BufferList>
		<Buffer public="1" get="accessor" set="null"><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></Buffer>
		<AcceptSocket public="1" get="accessor" set="accessor"><c path="cs.system.net.sockets.Socket"/></AcceptSocket>
		<add_Completed final="1" public="1" set="method">
			<f a="value">
				<x path="cs.system.EventHandler_1"><c path="cs.system.net.sockets.SocketAsyncEventArgs"/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add_Completed>
		<remove_Completed final="1" public="1" set="method">
			<f a="value">
				<x path="cs.system.EventHandler_1"><c path="cs.system.net.sockets.SocketAsyncEventArgs"/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove_Completed>
		<get_AcceptSocket final="1" set="method">
			<f a=""><c path="cs.system.net.sockets.Socket"/></f>
			<meta><m n=":overload"/></meta>
		</get_AcceptSocket>
		<set_AcceptSocket final="1" set="method">
			<f a="value">
				<c path="cs.system.net.sockets.Socket"/>
				<c path="cs.system.net.sockets.Socket"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_AcceptSocket>
		<get_Buffer final="1" set="method">
			<f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f>
			<meta><m n=":overload"/></meta>
		</get_Buffer>
		<get_BufferList final="1" set="method">
			<f a=""><c path="cs.system.collections.generic.IList_1"><c path="cs.system.ArraySegment_1"><t path="cs.types.UInt8"/></c></c></f>
			<meta><m n=":overload"/></meta>
		</get_BufferList>
		<set_BufferList final="1" set="method">
			<f a="value">
				<c path="cs.system.collections.generic.IList_1"><c path="cs.system.ArraySegment_1"><t path="cs.types.UInt8"/></c></c>
				<c path="cs.system.collections.generic.IList_1"><c path="cs.system.ArraySegment_1"><t path="cs.types.UInt8"/></c></c>
			</f>
			<meta><m n=":overload"/></meta>
		</set_BufferList>
		<get_BytesTransferred final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_BytesTransferred>
		<get_Count final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Count>
		<get_DisconnectReuseSocket final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_DisconnectReuseSocket>
		<set_DisconnectReuseSocket final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_DisconnectReuseSocket>
		<get_LastOperation final="1" set="method">
			<f a=""><e path="cs.system.net.sockets.SocketAsyncOperation"/></f>
			<meta><m n=":overload"/></meta>
		</get_LastOperation>
		<get_Offset final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Offset>
		<get_RemoteEndPoint final="1" set="method">
			<f a=""><c path="cs.system.net.EndPoint"/></f>
			<meta><m n=":overload"/></meta>
		</get_RemoteEndPoint>
		<set_RemoteEndPoint final="1" set="method">
			<f a="value">
				<c path="cs.system.net.EndPoint"/>
				<c path="cs.system.net.EndPoint"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_RemoteEndPoint>
		<get_ReceiveMessageFromPacketInfo final="1" set="method">
			<f a=""><c path="cs.system.net.sockets.IPPacketInformation"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReceiveMessageFromPacketInfo>
		<get_SendPacketsElements final="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.net.sockets.SendPacketsElement"/></c></f>
			<meta><m n=":overload"/></meta>
		</get_SendPacketsElements>
		<set_SendPacketsElements final="1" set="method">
			<f a="value">
				<c path="cs.NativeArray"><c path="cs.system.net.sockets.SendPacketsElement"/></c>
				<c path="cs.NativeArray"><c path="cs.system.net.sockets.SendPacketsElement"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</set_SendPacketsElements>
		<get_SendPacketsFlags final="1" set="method">
			<f a=""><e path="cs.system.net.sockets.TransmitFileOptions"/></f>
			<meta><m n=":overload"/></meta>
		</get_SendPacketsFlags>
		<set_SendPacketsFlags final="1" set="method">
			<f a="value">
				<e path="cs.system.net.sockets.TransmitFileOptions"/>
				<e path="cs.system.net.sockets.TransmitFileOptions"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_SendPacketsFlags>
		<get_SendPacketsSendSize final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_SendPacketsSendSize>
		<set_SendPacketsSendSize final="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_SendPacketsSendSize>
		<get_SocketError final="1" set="method">
			<f a=""><e path="cs.system.net.sockets.SocketError"/></f>
			<meta><m n=":overload"/></meta>
		</get_SocketError>
		<set_SocketError final="1" set="method">
			<f a="value">
				<e path="cs.system.net.sockets.SocketError"/>
				<e path="cs.system.net.sockets.SocketError"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_SocketError>
		<get_SocketFlags final="1" set="method">
			<f a=""><e path="cs.system.net.sockets.SocketFlags"/></f>
			<meta><m n=":overload"/></meta>
		</get_SocketFlags>
		<set_SocketFlags final="1" set="method">
			<f a="value">
				<e path="cs.system.net.sockets.SocketFlags"/>
				<e path="cs.system.net.sockets.SocketFlags"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_SocketFlags>
		<get_UserToken final="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_UserToken>
		<set_UserToken final="1" set="method">
			<f a="value">
				<d/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_UserToken>
		<Dispose final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Dispose>
		<OnCompleted set="method">
			<f a="e">
				<c path="cs.system.net.sockets.SocketAsyncEventArgs"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</OnCompleted>
		<SetBuffer final="1" public="1" set="method">
			<f a="offset:count">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><SetBuffer final="1" public="1" set="method">
	<f a="buffer:offset:count">
		<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</SetBuffer></overloads>
		</SetBuffer>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Net.Sockets.SocketAsyncEventArgs"</e></m>
		</meta>
	</class>
	<enum path="cs.system.net.sockets.SocketAsyncOperation" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.sockets.SocketAsyncOperation">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<Accept><meta><m n=":csNative"><e>1</e></m></meta></Accept>
		<Connect><meta><m n=":csNative"><e>2</e></m></meta></Connect>
		<Disconnect><meta><m n=":csNative"><e>3</e></m></meta></Disconnect>
		<Receive><meta><m n=":csNative"><e>4</e></m></meta></Receive>
		<ReceiveFrom><meta><m n=":csNative"><e>5</e></m></meta></ReceiveFrom>
		<ReceiveMessageFrom><meta><m n=":csNative"><e>6</e></m></meta></ReceiveMessageFrom>
		<Send><meta><m n=":csNative"><e>7</e></m></meta></Send>
		<SendPackets><meta><m n=":csNative"><e>8</e></m></meta></SendPackets>
		<SendTo><meta><m n=":csNative"><e>9</e></m></meta></SendTo>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Net.Sockets.SocketAsyncOperation"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.net.sockets.SocketError" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.sockets.SocketError">
		<SocketError><meta><m n=":csNative"><e>-1</e></m></meta></SocketError>
		<Success><meta><m n=":csNative"><e>0</e></m></meta></Success>
		<OperationAborted><meta><m n=":csNative"><e>995</e></m></meta></OperationAborted>
		<IOPending><meta><m n=":csNative"><e>997</e></m></meta></IOPending>
		<Interrupted><meta><m n=":csNative"><e>10004</e></m></meta></Interrupted>
		<AccessDenied><meta><m n=":csNative"><e>10013</e></m></meta></AccessDenied>
		<Fault><meta><m n=":csNative"><e>10014</e></m></meta></Fault>
		<InvalidArgument><meta><m n=":csNative"><e>10022</e></m></meta></InvalidArgument>
		<TooManyOpenSockets><meta><m n=":csNative"><e>10024</e></m></meta></TooManyOpenSockets>
		<WouldBlock><meta><m n=":csNative"><e>10035</e></m></meta></WouldBlock>
		<InProgress><meta><m n=":csNative"><e>10036</e></m></meta></InProgress>
		<AlreadyInProgress><meta><m n=":csNative"><e>10037</e></m></meta></AlreadyInProgress>
		<NotSocket><meta><m n=":csNative"><e>10038</e></m></meta></NotSocket>
		<DestinationAddressRequired><meta><m n=":csNative"><e>10039</e></m></meta></DestinationAddressRequired>
		<MessageSize><meta><m n=":csNative"><e>10040</e></m></meta></MessageSize>
		<ProtocolType><meta><m n=":csNative"><e>10041</e></m></meta></ProtocolType>
		<ProtocolOption><meta><m n=":csNative"><e>10042</e></m></meta></ProtocolOption>
		<ProtocolNotSupported><meta><m n=":csNative"><e>10043</e></m></meta></ProtocolNotSupported>
		<SocketNotSupported><meta><m n=":csNative"><e>10044</e></m></meta></SocketNotSupported>
		<OperationNotSupported><meta><m n=":csNative"><e>10045</e></m></meta></OperationNotSupported>
		<ProtocolFamilyNotSupported><meta><m n=":csNative"><e>10046</e></m></meta></ProtocolFamilyNotSupported>
		<AddressFamilyNotSupported><meta><m n=":csNative"><e>10047</e></m></meta></AddressFamilyNotSupported>
		<AddressAlreadyInUse><meta><m n=":csNative"><e>10048</e></m></meta></AddressAlreadyInUse>
		<AddressNotAvailable><meta><m n=":csNative"><e>10049</e></m></meta></AddressNotAvailable>
		<NetworkDown><meta><m n=":csNative"><e>10050</e></m></meta></NetworkDown>
		<NetworkUnreachable><meta><m n=":csNative"><e>10051</e></m></meta></NetworkUnreachable>
		<NetworkReset><meta><m n=":csNative"><e>10052</e></m></meta></NetworkReset>
		<ConnectionAborted><meta><m n=":csNative"><e>10053</e></m></meta></ConnectionAborted>
		<ConnectionReset><meta><m n=":csNative"><e>10054</e></m></meta></ConnectionReset>
		<NoBufferSpaceAvailable><meta><m n=":csNative"><e>10055</e></m></meta></NoBufferSpaceAvailable>
		<IsConnected><meta><m n=":csNative"><e>10056</e></m></meta></IsConnected>
		<NotConnected><meta><m n=":csNative"><e>10057</e></m></meta></NotConnected>
		<Shutdown><meta><m n=":csNative"><e>10058</e></m></meta></Shutdown>
		<TimedOut><meta><m n=":csNative"><e>10060</e></m></meta></TimedOut>
		<ConnectionRefused><meta><m n=":csNative"><e>10061</e></m></meta></ConnectionRefused>
		<HostDown><meta><m n=":csNative"><e>10064</e></m></meta></HostDown>
		<HostUnreachable><meta><m n=":csNative"><e>10065</e></m></meta></HostUnreachable>
		<ProcessLimit><meta><m n=":csNative"><e>10067</e></m></meta></ProcessLimit>
		<SystemNotReady><meta><m n=":csNative"><e>10091</e></m></meta></SystemNotReady>
		<VersionNotSupported><meta><m n=":csNative"><e>10092</e></m></meta></VersionNotSupported>
		<NotInitialized><meta><m n=":csNative"><e>10093</e></m></meta></NotInitialized>
		<Disconnecting><meta><m n=":csNative"><e>10101</e></m></meta></Disconnecting>
		<TypeNotFound><meta><m n=":csNative"><e>10109</e></m></meta></TypeNotFound>
		<HostNotFound><meta><m n=":csNative"><e>11001</e></m></meta></HostNotFound>
		<TryAgain><meta><m n=":csNative"><e>11002</e></m></meta></TryAgain>
		<NoRecovery><meta><m n=":csNative"><e>11003</e></m></meta></NoRecovery>
		<NoData><meta><m n=":csNative"><e>11004</e></m></meta></NoData>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Net.Sockets.SocketError"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.net.sockets.SocketFlags" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.sockets.SocketFlags">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<OutOfBand><meta><m n=":csNative"><e>1</e></m></meta></OutOfBand>
		<Peek><meta><m n=":csNative"><e>2</e></m></meta></Peek>
		<DontRoute><meta><m n=":csNative"><e>4</e></m></meta></DontRoute>
		<MaxIOVectorLength><meta><m n=":csNative"><e>16</e></m></meta></MaxIOVectorLength>
		<Truncated><meta><m n=":csNative"><e>256</e></m></meta></Truncated>
		<ControlDataTruncated><meta><m n=":csNative"><e>512</e></m></meta></ControlDataTruncated>
		<Broadcast><meta><m n=":csNative"><e>1024</e></m></meta></Broadcast>
		<Multicast><meta><m n=":csNative"><e>2048</e></m></meta></Multicast>
		<Partial><meta><m n=":csNative"><e>32768</e></m></meta></Partial>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Net.Sockets.SocketFlags"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.net.sockets.SocketInformation" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.sockets.SocketInformation" extern="1">
		<extends path="cs.system.ValueType"/>
		<ProtocolInformation public="1" get="accessor" set="accessor"><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></ProtocolInformation>
		<Options public="1" get="accessor" set="accessor"><e path="cs.system.net.sockets.SocketInformationOptions"/></Options>
		<get_Options final="1" set="method">
			<f a=""><e path="cs.system.net.sockets.SocketInformationOptions"/></f>
			<meta><m n=":overload"/></meta>
		</get_Options>
		<set_Options final="1" set="method">
			<f a="value">
				<e path="cs.system.net.sockets.SocketInformationOptions"/>
				<e path="cs.system.net.sockets.SocketInformationOptions"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Options>
		<get_ProtocolInformation final="1" set="method">
			<f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f>
			<meta><m n=":overload"/></meta>
		</get_ProtocolInformation>
		<set_ProtocolInformation final="1" set="method">
			<f a="value">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ProtocolInformation>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Net.Sockets.SocketInformation"</e></m>
		</meta>
	</class>
	<enum path="cs.system.net.sockets.SocketInformationOptions" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.sockets.SocketInformationOptions">
		<NonBlocking><meta><m n=":csNative"><e>1</e></m></meta></NonBlocking>
		<Connected><meta><m n=":csNative"><e>2</e></m></meta></Connected>
		<Listening><meta><m n=":csNative"><e>4</e></m></meta></Listening>
		<UseOnlyOverlappedIO><meta><m n=":csNative"><e>8</e></m></meta></UseOnlyOverlappedIO>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Net.Sockets.SocketInformationOptions"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.net.sockets.SocketOptionLevel" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.sockets.SocketOptionLevel">
		<IP><meta><m n=":csNative"><e>0</e></m></meta></IP>
		<Tcp><meta><m n=":csNative"><e>6</e></m></meta></Tcp>
		<Udp><meta><m n=":csNative"><e>17</e></m></meta></Udp>
		<IPv6><meta><m n=":csNative"><e>41</e></m></meta></IPv6>
		<Socket><meta><m n=":csNative"><e>65535</e></m></meta></Socket>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Net.Sockets.SocketOptionLevel"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.net.sockets.SocketOptionName" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.sockets.SocketOptionName">
		<DontLinger><meta><m n=":csNative"><e>-129</e></m></meta></DontLinger>
		<ExclusiveAddressUse><meta><m n=":csNative"><e>-5</e></m></meta></ExclusiveAddressUse>
		<Debug><meta><m n=":csNative"><e>1</e></m></meta></Debug>
		<IPOptions><meta><m n=":csNative"><e>1</e></m></meta></IPOptions>
		<NoDelay><meta><m n=":csNative"><e>1</e></m></meta></NoDelay>
		<NoChecksum><meta><m n=":csNative"><e>1</e></m></meta></NoChecksum>
		<AcceptConnection><meta><m n=":csNative"><e>2</e></m></meta></AcceptConnection>
		<HeaderIncluded><meta><m n=":csNative"><e>2</e></m></meta></HeaderIncluded>
		<BsdUrgent><meta><m n=":csNative"><e>2</e></m></meta></BsdUrgent>
		<Expedited><meta><m n=":csNative"><e>2</e></m></meta></Expedited>
		<TypeOfService><meta><m n=":csNative"><e>3</e></m></meta></TypeOfService>
		<ReuseAddress><meta><m n=":csNative"><e>4</e></m></meta></ReuseAddress>
		<IpTimeToLive><meta><m n=":csNative"><e>4</e></m></meta></IpTimeToLive>
		<KeepAlive><meta><m n=":csNative"><e>8</e></m></meta></KeepAlive>
		<MulticastInterface><meta><m n=":csNative"><e>9</e></m></meta></MulticastInterface>
		<MulticastTimeToLive><meta><m n=":csNative"><e>10</e></m></meta></MulticastTimeToLive>
		<MulticastLoopback><meta><m n=":csNative"><e>11</e></m></meta></MulticastLoopback>
		<AddMembership><meta><m n=":csNative"><e>12</e></m></meta></AddMembership>
		<DropMembership><meta><m n=":csNative"><e>13</e></m></meta></DropMembership>
		<DontFragment><meta><m n=":csNative"><e>14</e></m></meta></DontFragment>
		<AddSourceMembership><meta><m n=":csNative"><e>15</e></m></meta></AddSourceMembership>
		<DontRoute><meta><m n=":csNative"><e>16</e></m></meta></DontRoute>
		<DropSourceMembership><meta><m n=":csNative"><e>16</e></m></meta></DropSourceMembership>
		<BlockSource><meta><m n=":csNative"><e>17</e></m></meta></BlockSource>
		<UnblockSource><meta><m n=":csNative"><e>18</e></m></meta></UnblockSource>
		<PacketInformation><meta><m n=":csNative"><e>19</e></m></meta></PacketInformation>
		<ChecksumCoverage><meta><m n=":csNative"><e>20</e></m></meta></ChecksumCoverage>
		<HopLimit><meta><m n=":csNative"><e>21</e></m></meta></HopLimit>
		<Broadcast><meta><m n=":csNative"><e>32</e></m></meta></Broadcast>
		<UseLoopback><meta><m n=":csNative"><e>64</e></m></meta></UseLoopback>
		<Linger><meta><m n=":csNative"><e>128</e></m></meta></Linger>
		<OutOfBandInline><meta><m n=":csNative"><e>256</e></m></meta></OutOfBandInline>
		<SendBuffer><meta><m n=":csNative"><e>4097</e></m></meta></SendBuffer>
		<ReceiveBuffer><meta><m n=":csNative"><e>4098</e></m></meta></ReceiveBuffer>
		<SendLowWater><meta><m n=":csNative"><e>4099</e></m></meta></SendLowWater>
		<ReceiveLowWater><meta><m n=":csNative"><e>4100</e></m></meta></ReceiveLowWater>
		<SendTimeout><meta><m n=":csNative"><e>4101</e></m></meta></SendTimeout>
		<ReceiveTimeout><meta><m n=":csNative"><e>4102</e></m></meta></ReceiveTimeout>
		<Error><meta><m n=":csNative"><e>4103</e></m></meta></Error>
		<Type><meta><m n=":csNative"><e>4104</e></m></meta></Type>
		<UpdateAcceptContext><meta><m n=":csNative"><e>28683</e></m></meta></UpdateAcceptContext>
		<UpdateConnectContext><meta><m n=":csNative"><e>28688</e></m></meta></UpdateConnectContext>
		<MaxConnections><meta><m n=":csNative"><e>2147483647</e></m></meta></MaxConnections>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Net.Sockets.SocketOptionName"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.net.sockets.SocketShutdown" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.sockets.SocketShutdown">
		<Receive><meta><m n=":csNative"><e>0</e></m></meta></Receive>
		<Send><meta><m n=":csNative"><e>1</e></m></meta></Send>
		<Both><meta><m n=":csNative"><e>2</e></m></meta></Both>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Net.Sockets.SocketShutdown"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.net.sockets.SocketType" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.sockets.SocketType">
		<Unknown><meta><m n=":csNative"><e>-1</e></m></meta></Unknown>
		<Stream><meta><m n=":csNative"><e>1</e></m></meta></Stream>
		<Dgram><meta><m n=":csNative"><e>2</e></m></meta></Dgram>
		<Raw><meta><m n=":csNative"><e>3</e></m></meta></Raw>
		<Rdm><meta><m n=":csNative"><e>4</e></m></meta></Rdm>
		<Seqpacket><meta><m n=":csNative"><e>5</e></m></meta></Seqpacket>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Net.Sockets.SocketType"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.net.sockets.TransmitFileOptions" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.net.sockets.TransmitFileOptions">
		<UseDefaultWorkerThread><meta><m n=":csNative"><e>0</e></m></meta></UseDefaultWorkerThread>
		<Disconnect><meta><m n=":csNative"><e>1</e></m></meta></Disconnect>
		<ReuseSocket><meta><m n=":csNative"><e>2</e></m></meta></ReuseSocket>
		<WriteBehind><meta><m n=":csNative"><e>4</e></m></meta></WriteBehind>
		<UseSystemThread><meta><m n=":csNative"><e>16</e></m></meta></UseSystemThread>
		<UseKernelApc><meta><m n=":csNative"><e>32</e></m></meta></UseKernelApc>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Net.Sockets.TransmitFileOptions"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.reflection.Assembly_ResourceCloseHandler" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.Assembly" module="cs.system.reflection.Assembly" extern="1">
		<OnClose final="1" public="1" set="method">
			<f a="sender:e">
				<d/>
				<c path="cs.system.EventArgs"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</OnClose>
		<new final="1" public="1" set="method">
			<f a="module">
				<c path="cs.system.reflection.Module"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Assembly.ResourceCloseHandler"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.Assembly_ResolveEventHolder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.Assembly" module="cs.system.reflection.Assembly" extern="1">
		<ModuleResolve>
			<x path="cs.system.reflection.ModuleResolveEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</ModuleResolve>
		<add_ModuleResolve final="1" public="1" set="method">
			<f a="value">
				<x path="cs.system.reflection.ModuleResolveEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add_ModuleResolve>
		<remove_ModuleResolve final="1" public="1" set="method">
			<f a="value">
				<x path="cs.system.reflection.ModuleResolveEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove_ModuleResolve>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Assembly.ResolveEventHolder"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._Assembly" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._Assembly" extern="1" interface="1">
		<ModuleResolve>
			<x path="cs.system.reflection.ModuleResolveEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</ModuleResolve>
		<GlobalAssemblyCache public="1" get="accessor" set="null"><x path="Bool"/></GlobalAssemblyCache>
		<Evidence public="1" get="accessor" set="null"><c path="cs.system.security.policy.Evidence"/></Evidence>
		<Location public="1" get="accessor" set="null"><c path="String"/></Location>
		<EntryPoint public="1" get="accessor" set="null"><c path="cs.system.reflection.MethodInfo"/></EntryPoint>
		<FullName public="1" get="accessor" set="null"><c path="String"/></FullName>
		<EscapedCodeBase public="1" get="accessor" set="null"><c path="String"/></EscapedCodeBase>
		<CodeBase public="1" get="accessor" set="null"><c path="String"/></CodeBase>
		<add_ModuleResolve public="1" set="method">
			<f a="value">
				<x path="cs.system.reflection.ModuleResolveEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add_ModuleResolve>
		<remove_ModuleResolve public="1" set="method">
			<f a="value">
				<x path="cs.system.reflection.ModuleResolveEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove_ModuleResolve>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<GetType public="1" set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetType public="1" set="method">
					<f a="name:throwOnError:ignoreCase">
						<c path="String"/>
						<x path="Bool"/>
						<x path="Bool"/>
						<c path="cs.system.Type"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetType>
				<GetType public="1" set="method">
					<f a="name:throwOnError">
						<c path="String"/>
						<x path="Bool"/>
						<c path="cs.system.Type"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetType>
				<GetType public="1" set="method">
					<f a="name">
						<c path="String"/>
						<c path="cs.system.Type"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetType>
			</overloads>
		</GetType>
		<get_CodeBase set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_CodeBase>
		<get_EscapedCodeBase set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_EscapedCodeBase>
		<GetName public="1" set="method">
			<f a=""><c path="cs.system.reflection.AssemblyName"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetName public="1" set="method">
	<f a="copiedName">
		<x path="Bool"/>
		<c path="cs.system.reflection.AssemblyName"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetName></overloads>
		</GetName>
		<get_FullName set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_FullName>
		<get_EntryPoint set="method">
			<f a=""><c path="cs.system.reflection.MethodInfo"/></f>
			<meta><m n=":overload"/></meta>
		</get_EntryPoint>
		<GetExportedTypes public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetExportedTypes>
		<GetTypes public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetTypes>
		<GetManifestResourceStream public="1" set="method">
			<f a="type:name">
				<c path="cs.system.Type"/>
				<c path="String"/>
				<c path="cs.system.io.Stream"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetManifestResourceStream public="1" set="method">
	<f a="name">
		<c path="String"/>
		<c path="cs.system.io.Stream"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetManifestResourceStream></overloads>
		</GetManifestResourceStream>
		<GetFile public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.io.FileStream"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetFile>
		<GetFiles public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.io.FileStream"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetFiles public="1" set="method">
	<f a="getResourceModules">
		<x path="Bool"/>
		<c path="cs.NativeArray"><c path="cs.system.io.FileStream"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetFiles></overloads>
		</GetFiles>
		<GetManifestResourceNames public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetManifestResourceNames>
		<GetManifestResourceInfo public="1" set="method">
			<f a="resourceName">
				<c path="String"/>
				<c path="cs.system.reflection.ManifestResourceInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetManifestResourceInfo>
		<get_Location set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Location>
		<get_Evidence set="method">
			<f a=""><c path="cs.system.security.policy.Evidence"/></f>
			<meta><m n=":overload"/></meta>
		</get_Evidence>
		<GetCustomAttributes public="1" set="method">
			<f a="attributeType:inherit">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetCustomAttributes public="1" set="method">
	<f a="inherit">
		<x path="Bool"/>
		<c path="cs.NativeArray"><d/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<IsDefined public="1" set="method">
			<f a="attributeType:inherit">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsDefined>
		<GetObjectData public="1" set="method">
			<f a="info:context">
				<c path="cs.system.runtime.serialization.SerializationInfo"/>
				<c path="cs.system.runtime.serialization.StreamingContext"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetObjectData>
		<GetSatelliteAssembly public="1" set="method">
			<f a="culture">
				<c path="cs.system.globalization.CultureInfo"/>
				<c path="cs.system.reflection.Assembly"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetSatelliteAssembly public="1" set="method">
	<f a="culture:version">
		<c path="cs.system.globalization.CultureInfo"/>
		<c path="cs.system.Version"/>
		<c path="cs.system.reflection.Assembly"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetSatelliteAssembly></overloads>
		</GetSatelliteAssembly>
		<LoadModule public="1" set="method">
			<f a="moduleName:rawModule">
				<c path="String"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<c path="cs.system.reflection.Module"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><LoadModule public="1" set="method">
	<f a="moduleName:rawModule:rawSymbolStore">
		<c path="String"/>
		<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
		<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
		<c path="cs.system.reflection.Module"/>
	</f>
	<meta><m n=":overload"/></meta>
</LoadModule></overloads>
		</LoadModule>
		<CreateInstance public="1" set="method">
			<f a="typeName">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<CreateInstance public="1" set="method">
					<f a="typeName:ignoreCase:bindingAttr:binder:args:culture:activationAttributes">
						<c path="String"/>
						<x path="Bool"/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.Binder"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.globalization.CultureInfo"/>
						<c path="cs.NativeArray"><d/></c>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstance>
				<CreateInstance public="1" set="method">
					<f a="typeName:ignoreCase">
						<c path="String"/>
						<x path="Bool"/>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstance>
			</overloads>
		</CreateInstance>
		<GetLoadedModules public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.Module"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetLoadedModules public="1" set="method">
	<f a="getResourceModules">
		<x path="Bool"/>
		<c path="cs.NativeArray"><c path="cs.system.reflection.Module"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetLoadedModules></overloads>
		</GetLoadedModules>
		<GetModules public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.Module"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetModules public="1" set="method">
	<f a="getResourceModules">
		<x path="Bool"/>
		<c path="cs.NativeArray"><c path="cs.system.reflection.Module"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetModules></overloads>
		</GetModules>
		<GetModule public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.reflection.Module"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetModule>
		<GetReferencedAssemblies public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.AssemblyName"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetReferencedAssemblies>
		<get_GlobalAssemblyCache set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_GlobalAssemblyCache>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._Assembly"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.Assembly" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.Assembly" extern="1">
		<implements path="cs.system.reflection.ICustomAttributeProvider"/>
		<implements path="cs.system.runtime.interopservices._Assembly"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<implements path="cs.system.security.IEvidenceFactory"/>
		<CreateQualifiedName final="1" public="1" set="method" static="1">
			<f a="assemblyName:typeName">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CreateQualifiedName>
		<GetAssembly final="1" public="1" set="method" static="1">
			<f a="type">
				<c path="cs.system.Type"/>
				<c path="cs.system.reflection.Assembly"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetAssembly>
		<GetEntryAssembly final="1" public="1" set="method" static="1">
			<f a=""><c path="cs.system.reflection.Assembly"/></f>
			<meta><m n=":overload"/></meta>
		</GetEntryAssembly>
		<LoadFrom final="1" public="1" set="method" static="1">
			<f a="assemblyFile">
				<c path="String"/>
				<c path="cs.system.reflection.Assembly"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<LoadFrom final="1" public="1" set="method">
					<f a="assemblyFile:securityEvidence:hashValue:hashAlgorithm">
						<c path="String"/>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<e path="cs.system.configuration.assemblies.AssemblyHashAlgorithm"/>
						<c path="cs.system.reflection.Assembly"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LoadFrom>
				<LoadFrom final="1" public="1" set="method">
					<f a="assemblyFile:securityEvidence">
						<c path="String"/>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.system.reflection.Assembly"/>
					</f>
					<meta><m n=":overload"/></meta>
				</LoadFrom>
			</overloads>
		</LoadFrom>
		<LoadFile final="1" public="1" set="method" static="1">
			<f a="path:securityEvidence">
				<c path="String"/>
				<c path="cs.system.security.policy.Evidence"/>
				<c path="cs.system.reflection.Assembly"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><LoadFile final="1" public="1" set="method">
	<f a="path">
		<c path="String"/>
		<c path="cs.system.reflection.Assembly"/>
	</f>
	<meta><m n=":overload"/></meta>
</LoadFile></overloads>
		</LoadFile>
		<Load final="1" public="1" set="method" static="1">
			<f a="assemblyString">
				<c path="String"/>
				<c path="cs.system.reflection.Assembly"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Load final="1" public="1" set="method">
					<f a="rawAssembly:rawSymbolStore:securityEvidence">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.system.reflection.Assembly"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Load>
				<Load final="1" public="1" set="method">
					<f a="rawAssembly:rawSymbolStore">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<c path="cs.system.reflection.Assembly"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Load>
				<Load final="1" public="1" set="method">
					<f a="rawAssembly">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<c path="cs.system.reflection.Assembly"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Load>
				<Load final="1" public="1" set="method">
					<f a="assemblyRef:assemblySecurity">
						<c path="cs.system.reflection.AssemblyName"/>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.system.reflection.Assembly"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Load>
				<Load final="1" public="1" set="method">
					<f a="assemblyRef">
						<c path="cs.system.reflection.AssemblyName"/>
						<c path="cs.system.reflection.Assembly"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Load>
				<Load final="1" public="1" set="method">
					<f a="assemblyString:assemblySecurity">
						<c path="String"/>
						<c path="cs.system.security.policy.Evidence"/>
						<c path="cs.system.reflection.Assembly"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Load>
			</overloads>
		</Load>
		<ReflectionOnlyLoad final="1" public="1" set="method" static="1">
			<f a="rawAssembly">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<c path="cs.system.reflection.Assembly"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><ReflectionOnlyLoad final="1" public="1" set="method">
	<f a="assemblyString">
		<c path="String"/>
		<c path="cs.system.reflection.Assembly"/>
	</f>
	<meta><m n=":overload"/></meta>
</ReflectionOnlyLoad></overloads>
		</ReflectionOnlyLoad>
		<ReflectionOnlyLoadFrom final="1" public="1" set="method" static="1">
			<f a="assemblyFile">
				<c path="String"/>
				<c path="cs.system.reflection.Assembly"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ReflectionOnlyLoadFrom>
		<LoadWithPartialName final="1" public="1" set="method" static="1">
			<f a="partialName">
				<c path="String"/>
				<c path="cs.system.reflection.Assembly"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><LoadWithPartialName final="1" public="1" set="method">
	<f a="partialName:securityEvidence">
		<c path="String"/>
		<c path="cs.system.security.policy.Evidence"/>
		<c path="cs.system.reflection.Assembly"/>
	</f>
	<meta><m n=":overload"/></meta>
</LoadWithPartialName></overloads>
		</LoadWithPartialName>
		<GetExecutingAssembly final="1" public="1" set="method" static="1">
			<f a=""><c path="cs.system.reflection.Assembly"/></f>
			<meta><m n=":overload"/></meta>
		</GetExecutingAssembly>
		<GetCallingAssembly final="1" public="1" set="method" static="1">
			<f a=""><c path="cs.system.reflection.Assembly"/></f>
			<meta><m n=":overload"/></meta>
		</GetCallingAssembly>
		<ModuleResolve>
			<x path="cs.system.reflection.ModuleResolveEventHandler"/>
			<meta>
				<m n=":event"/>
				<m n=":keep"/>
				<m n=":skipReflection"/>
			</meta>
		</ModuleResolve>
		<GlobalAssemblyCache public="1" get="accessor" set="null"><x path="Bool"/></GlobalAssemblyCache>
		<ManifestModule public="1" get="accessor" set="null"><c path="cs.system.reflection.Module"/></ManifestModule>
		<ReflectionOnly public="1" get="accessor" set="null"><x path="Bool"/></ReflectionOnly>
		<HostContext public="1" get="accessor" set="null"><x path="haxe.Int64"/></HostContext>
		<ImageRuntimeVersion public="1" get="accessor" set="null"><c path="String"/></ImageRuntimeVersion>
		<Location public="1" get="accessor" set="null"><c path="String"/></Location>
		<Evidence public="1" get="accessor" set="null"><c path="cs.system.security.policy.Evidence"/></Evidence>
		<EntryPoint public="1" get="accessor" set="null"><c path="cs.system.reflection.MethodInfo"/></EntryPoint>
		<FullName public="1" get="accessor" set="null"><c path="String"/></FullName>
		<EscapedCodeBase public="1" get="accessor" set="null"><c path="String"/></EscapedCodeBase>
		<CodeBase public="1" get="accessor" set="null"><c path="String"/></CodeBase>
		<add_ModuleResolve final="1" public="1" set="method">
			<f a="value">
				<x path="cs.system.reflection.ModuleResolveEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</add_ModuleResolve>
		<remove_ModuleResolve final="1" public="1" set="method">
			<f a="value">
				<x path="cs.system.reflection.ModuleResolveEventHandler"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</remove_ModuleResolve>
		<get_CodeBase set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_CodeBase>
		<get_EscapedCodeBase set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_EscapedCodeBase>
		<get_FullName set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_FullName>
		<get_EntryPoint set="method">
			<f a=""><c path="cs.system.reflection.MethodInfo"/></f>
			<meta><m n=":overload"/></meta>
		</get_EntryPoint>
		<get_Evidence set="method">
			<f a=""><c path="cs.system.security.policy.Evidence"/></f>
			<meta><m n=":overload"/></meta>
		</get_Evidence>
		<get_Location set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Location>
		<get_ImageRuntimeVersion set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_ImageRuntimeVersion>
		<GetObjectData public="1" set="method">
			<f a="info:context">
				<c path="cs.system.runtime.serialization.SerializationInfo"/>
				<c path="cs.system.runtime.serialization.StreamingContext"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetObjectData>
		<IsDefined public="1" set="method">
			<f a="attributeType:inherit">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsDefined>
		<GetCustomAttributes public="1" set="method">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetCustomAttributes public="1" set="method">
	<f a="attributeType:inherit">
		<c path="cs.system.Type"/>
		<x path="Bool"/>
		<c path="cs.NativeArray"><d/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<GetFiles public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.io.FileStream"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetFiles public="1" set="method">
	<f a="getResourceModules">
		<x path="Bool"/>
		<c path="cs.NativeArray"><c path="cs.system.io.FileStream"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetFiles></overloads>
		</GetFiles>
		<GetFile public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.io.FileStream"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetFile>
		<GetManifestResourceStream public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.io.Stream"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetManifestResourceStream public="1" set="method">
	<f a="type:name">
		<c path="cs.system.Type"/>
		<c path="String"/>
		<c path="cs.system.io.Stream"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetManifestResourceStream></overloads>
		</GetManifestResourceStream>
		<GetTypes public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetTypes>
		<GetExportedTypes public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetExportedTypes>
		<GetType public="1" set="method">
			<f a="name:throwOnError">
				<c path="String"/>
				<x path="Bool"/>
				<c path="cs.system.Type"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":overload"/>
			</meta>
			<overloads>
				<GetType final="1" public="1" set="method">
					<f a="name:throwOnError:ignoreCase">
						<c path="String"/>
						<x path="Bool"/>
						<x path="Bool"/>
						<c path="cs.system.Type"/>
					</f>
					<meta>
						<m n=":noCompletion"/>
						<m n=":skipReflection"/>
						<m n=":overload"/>
					</meta>
				</GetType>
				<GetType public="1" set="method">
					<f a="name">
						<c path="String"/>
						<c path="cs.system.Type"/>
					</f>
					<meta>
						<m n=":noCompletion"/>
						<m n=":skipReflection"/>
						<m n=":overload"/>
					</meta>
				</GetType>
			</overloads>
		</GetType>
		<GetName public="1" set="method">
			<f a="copiedName">
				<x path="Bool"/>
				<c path="cs.system.reflection.AssemblyName"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetName public="1" set="method">
	<f a=""><c path="cs.system.reflection.AssemblyName"/></f>
	<meta><m n=":overload"/></meta>
</GetName></overloads>
		</GetName>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<LoadModule final="1" public="1" set="method">
			<f a="moduleName:rawModule">
				<c path="String"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<c path="cs.system.reflection.Module"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><LoadModule final="1" public="1" set="method">
	<f a="moduleName:rawModule:rawSymbolStore">
		<c path="String"/>
		<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
		<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
		<c path="cs.system.reflection.Module"/>
	</f>
	<meta><m n=":overload"/></meta>
</LoadModule></overloads>
		</LoadModule>
		<CreateInstance final="1" public="1" set="method">
			<f a="typeName">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<CreateInstance final="1" public="1" set="method">
					<f a="typeName:ignoreCase:bindingAttr:binder:args:culture:activationAttributes">
						<c path="String"/>
						<x path="Bool"/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.Binder"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.globalization.CultureInfo"/>
						<c path="cs.NativeArray"><d/></c>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstance>
				<CreateInstance final="1" public="1" set="method">
					<f a="typeName:ignoreCase">
						<c path="String"/>
						<x path="Bool"/>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</CreateInstance>
			</overloads>
		</CreateInstance>
		<GetLoadedModules final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.Module"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetLoadedModules final="1" public="1" set="method">
	<f a="getResourceModules">
		<x path="Bool"/>
		<c path="cs.NativeArray"><c path="cs.system.reflection.Module"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetLoadedModules></overloads>
		</GetLoadedModules>
		<GetModules final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.Module"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetModules final="1" public="1" set="method">
	<f a="getResourceModules">
		<x path="Bool"/>
		<c path="cs.NativeArray"><c path="cs.system.reflection.Module"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetModules></overloads>
		</GetModules>
		<GetManifestResourceNames public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetManifestResourceNames>
		<GetManifestResourceInfo public="1" set="method">
			<f a="resourceName">
				<c path="String"/>
				<c path="cs.system.reflection.ManifestResourceInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetManifestResourceInfo>
		<get_HostContext final="1" set="method">
			<f a=""><x path="haxe.Int64"/></f>
			<meta><m n=":overload"/></meta>
		</get_HostContext>
		<get_ReflectionOnly set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReflectionOnly>
		<GetModule final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.reflection.Module"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetModule>
		<GetReferencedAssemblies final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.AssemblyName"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetReferencedAssemblies>
		<GetSatelliteAssembly final="1" public="1" set="method">
			<f a="culture">
				<c path="cs.system.globalization.CultureInfo"/>
				<c path="cs.system.reflection.Assembly"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetSatelliteAssembly final="1" public="1" set="method">
	<f a="culture:version">
		<c path="cs.system.globalization.CultureInfo"/>
		<c path="cs.system.Version"/>
		<c path="cs.system.reflection.Assembly"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetSatelliteAssembly></overloads>
		</GetSatelliteAssembly>
		<get_ManifestModule final="1" set="method">
			<f a=""><c path="cs.system.reflection.Module"/></f>
			<meta><m n=":overload"/></meta>
		</get_ManifestModule>
		<get_GlobalAssemblyCache final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_GlobalAssemblyCache>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Assembly"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._AssemblyName" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._AssemblyName" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method">
			<f a="riid:rgszNames:cNames:lcid:rgDispId">
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<c path="cs.system.IntPtr"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetIDsOfNames>
		<GetTypeInfo public="1" set="method">
			<f a="iTInfo:lcid:ppTInfo">
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfo>
		<GetTypeInfoCount public="1" set="method">
			<f a="pcTInfo">
				<t path="cs.Out"><x path="UInt"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfoCount>
		<Invoke public="1" set="method">
			<f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
				<x path="UInt"/>
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<x path="UInt"/>
				<t path="cs.types.Int16"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._AssemblyName"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.AssemblyName" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.AssemblyName" extern="1">
		<implements path="cs.system.ICloneable"/>
		<implements path="cs.system.runtime.interopservices._AssemblyName"/>
		<implements path="cs.system.runtime.serialization.IDeserializationCallback"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<ReferenceMatchesDefinition final="1" public="1" set="method" static="1">
			<f a="reference:definition">
				<c path="cs.system.reflection.AssemblyName"/>
				<c path="cs.system.reflection.AssemblyName"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ReferenceMatchesDefinition>
		<GetAssemblyName final="1" public="1" set="method" static="1">
			<f a="assemblyFile">
				<c path="String"/>
				<c path="cs.system.reflection.AssemblyName"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetAssemblyName>
		<VersionCompatibility public="1" get="accessor" set="accessor"><e path="cs.system.configuration.assemblies.AssemblyVersionCompatibility"/></VersionCompatibility>
		<Version public="1" get="accessor" set="accessor"><c path="cs.system.Version"/></Version>
		<KeyPair public="1" get="accessor" set="accessor"><c path="cs.system.reflection.StrongNameKeyPair"/></KeyPair>
		<HashAlgorithm public="1" get="accessor" set="accessor"><e path="cs.system.configuration.assemblies.AssemblyHashAlgorithm"/></HashAlgorithm>
		<FullName public="1" get="accessor" set="null"><c path="String"/></FullName>
		<Flags public="1" get="accessor" set="accessor"><e path="cs.system.reflection.AssemblyNameFlags"/></Flags>
		<CultureInfo public="1" get="accessor" set="accessor"><c path="cs.system.globalization.CultureInfo"/></CultureInfo>
		<EscapedCodeBase public="1" get="accessor" set="null"><c path="String"/></EscapedCodeBase>
		<CodeBase public="1" get="accessor" set="accessor"><c path="String"/></CodeBase>
		<Name public="1" get="accessor" set="accessor"><c path="String"/></Name>
		<ProcessorArchitecture public="1" get="accessor" set="accessor"><e path="cs.system.reflection.ProcessorArchitecture"/></ProcessorArchitecture>
		<get_ProcessorArchitecture final="1" set="method">
			<f a=""><e path="cs.system.reflection.ProcessorArchitecture"/></f>
			<meta><m n=":overload"/></meta>
		</get_ProcessorArchitecture>
		<set_ProcessorArchitecture final="1" set="method">
			<f a="value">
				<e path="cs.system.reflection.ProcessorArchitecture"/>
				<e path="cs.system.reflection.ProcessorArchitecture"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ProcessorArchitecture>
		<get_Name final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<set_Name final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Name>
		<get_CodeBase final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_CodeBase>
		<set_CodeBase final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_CodeBase>
		<get_EscapedCodeBase final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_EscapedCodeBase>
		<get_CultureInfo final="1" set="method">
			<f a=""><c path="cs.system.globalization.CultureInfo"/></f>
			<meta><m n=":overload"/></meta>
		</get_CultureInfo>
		<set_CultureInfo final="1" set="method">
			<f a="value">
				<c path="cs.system.globalization.CultureInfo"/>
				<c path="cs.system.globalization.CultureInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_CultureInfo>
		<get_Flags final="1" set="method">
			<f a=""><e path="cs.system.reflection.AssemblyNameFlags"/></f>
			<meta><m n=":overload"/></meta>
		</get_Flags>
		<set_Flags final="1" set="method">
			<f a="value">
				<e path="cs.system.reflection.AssemblyNameFlags"/>
				<e path="cs.system.reflection.AssemblyNameFlags"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Flags>
		<get_FullName final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_FullName>
		<get_HashAlgorithm final="1" set="method">
			<f a=""><e path="cs.system.configuration.assemblies.AssemblyHashAlgorithm"/></f>
			<meta><m n=":overload"/></meta>
		</get_HashAlgorithm>
		<set_HashAlgorithm final="1" set="method">
			<f a="value">
				<e path="cs.system.configuration.assemblies.AssemblyHashAlgorithm"/>
				<e path="cs.system.configuration.assemblies.AssemblyHashAlgorithm"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_HashAlgorithm>
		<get_KeyPair final="1" set="method">
			<f a=""><c path="cs.system.reflection.StrongNameKeyPair"/></f>
			<meta><m n=":overload"/></meta>
		</get_KeyPair>
		<set_KeyPair final="1" set="method">
			<f a="value">
				<c path="cs.system.reflection.StrongNameKeyPair"/>
				<c path="cs.system.reflection.StrongNameKeyPair"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_KeyPair>
		<get_Version final="1" set="method">
			<f a=""><c path="cs.system.Version"/></f>
			<meta><m n=":overload"/></meta>
		</get_Version>
		<set_Version final="1" set="method">
			<f a="value">
				<c path="cs.system.Version"/>
				<c path="cs.system.Version"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Version>
		<get_VersionCompatibility final="1" set="method">
			<f a=""><e path="cs.system.configuration.assemblies.AssemblyVersionCompatibility"/></f>
			<meta><m n=":overload"/></meta>
		</get_VersionCompatibility>
		<set_VersionCompatibility final="1" set="method">
			<f a="value">
				<e path="cs.system.configuration.assemblies.AssemblyVersionCompatibility"/>
				<e path="cs.system.configuration.assemblies.AssemblyVersionCompatibility"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_VersionCompatibility>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<GetPublicKey final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetPublicKey>
		<GetPublicKeyToken final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetPublicKeyToken>
		<SetPublicKey final="1" public="1" set="method">
			<f a="publicKey">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetPublicKey>
		<SetPublicKeyToken final="1" public="1" set="method">
			<f a="publicKeyToken">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetPublicKeyToken>
		<GetObjectData final="1" public="1" set="method">
			<f a="info:context">
				<c path="cs.system.runtime.serialization.SerializationInfo"/>
				<c path="cs.system.runtime.serialization.StreamingContext"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetObjectData>
		<Clone final="1" public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</Clone>
		<OnDeserialization final="1" public="1" set="method">
			<f a="sender">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</OnDeserialization>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><new final="1" public="1" set="method">
	<f a="assemblyName">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.AssemblyName"</e></m>
		</meta>
	</class>
	<enum path="cs.system.reflection.AssemblyNameFlags" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.AssemblyNameFlags">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<PublicKey><meta><m n=":csNative"><e>1</e></m></meta></PublicKey>
		<Retargetable><meta><m n=":csNative"><e>256</e></m></meta></Retargetable>
		<EnableJITcompileOptimizer><meta><m n=":csNative"><e>16384</e></m></meta></EnableJITcompileOptimizer>
		<EnableJITcompileTracking><meta><m n=":csNative"><e>32768</e></m></meta></EnableJITcompileTracking>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.AssemblyNameFlags"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.reflection.Binder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.Binder" extern="1">
		<BindToField public="1" set="method">
			<f a="bindingAttr:match:value:culture">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.FieldInfo"/></c>
				<d/>
				<c path="cs.system.globalization.CultureInfo"/>
				<c path="cs.system.reflection.FieldInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BindToField>
		<BindToMethod public="1" set="method">
			<f a="bindingAttr:match:args:modifiers:culture:names:state">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.MethodBase"/></c>
				<t path="cs.Ref"><c path="cs.NativeArray"><d/></c></t>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.globalization.CultureInfo"/>
				<c path="cs.NativeArray"><c path="String"/></c>
				<t path="cs.Out"><d/></t>
				<c path="cs.system.reflection.MethodBase"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BindToMethod>
		<ChangeType public="1" set="method">
			<f a="value:type:culture">
				<d/>
				<c path="cs.system.Type"/>
				<c path="cs.system.globalization.CultureInfo"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</ChangeType>
		<ReorderArgumentArray public="1" set="method">
			<f a="args:state">
				<t path="cs.Ref"><c path="cs.NativeArray"><d/></c></t>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ReorderArgumentArray>
		<SelectMethod public="1" set="method">
			<f a="bindingAttr:match:types:modifiers">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.MethodBase"/></c>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.reflection.MethodBase"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SelectMethod>
		<SelectProperty public="1" set="method">
			<f a="bindingAttr:match:returnType:indexes:modifiers">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.PropertyInfo"/></c>
				<c path="cs.system.Type"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.reflection.PropertyInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SelectProperty>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Binder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.Binder_Default" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.Binder" module="cs.system.reflection.Binder" extern="1">
		<extends path="cs.system.reflection.Binder"/>
		<BindToField public="1" set="method" override="1">
			<f a="bindingAttr:match:value:culture">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.FieldInfo"/></c>
				<d/>
				<c path="cs.system.globalization.CultureInfo"/>
				<c path="cs.system.reflection.FieldInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BindToField>
		<BindToMethod public="1" set="method" override="1">
			<f a="bindingAttr:match:args:modifiers:culture:names:state">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.MethodBase"/></c>
				<t path="cs.Ref"><c path="cs.NativeArray"><d/></c></t>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.globalization.CultureInfo"/>
				<c path="cs.NativeArray"><c path="String"/></c>
				<t path="cs.Out"><d/></t>
				<c path="cs.system.reflection.MethodBase"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BindToMethod>
		<ChangeType public="1" set="method" override="1">
			<f a="value:type:culture">
				<d/>
				<c path="cs.system.Type"/>
				<c path="cs.system.globalization.CultureInfo"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</ChangeType>
		<ReorderArgumentArray public="1" set="method" override="1">
			<f a="args:state">
				<t path="cs.Ref"><c path="cs.NativeArray"><d/></c></t>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ReorderArgumentArray>
		<SelectMethod public="1" set="method" override="1">
			<f a="bindingAttr:match:types:modifiers">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.MethodBase"/></c>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.reflection.MethodBase"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SelectMethod>
		<SelectProperty public="1" set="method" override="1">
			<f a="bindingAttr:match:returnType:indexes:modifiers">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.PropertyInfo"/></c>
				<c path="cs.system.Type"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.reflection.PropertyInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SelectProperty>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Binder.Default"</e></m>
		</meta>
	</class>
	<enum path="cs.system.reflection.BindingFlags" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.BindingFlags">
		<Default><meta><m n=":csNative"><e>0</e></m></meta></Default>
		<IgnoreCase><meta><m n=":csNative"><e>1</e></m></meta></IgnoreCase>
		<DeclaredOnly><meta><m n=":csNative"><e>2</e></m></meta></DeclaredOnly>
		<Instance><meta><m n=":csNative"><e>4</e></m></meta></Instance>
		<Static><meta><m n=":csNative"><e>8</e></m></meta></Static>
		<Public><meta><m n=":csNative"><e>16</e></m></meta></Public>
		<NonPublic><meta><m n=":csNative"><e>32</e></m></meta></NonPublic>
		<FlattenHierarchy><meta><m n=":csNative"><e>64</e></m></meta></FlattenHierarchy>
		<InvokeMethod><meta><m n=":csNative"><e>256</e></m></meta></InvokeMethod>
		<CreateInstance><meta><m n=":csNative"><e>512</e></m></meta></CreateInstance>
		<GetField><meta><m n=":csNative"><e>1024</e></m></meta></GetField>
		<SetField><meta><m n=":csNative"><e>2048</e></m></meta></SetField>
		<GetProperty><meta><m n=":csNative"><e>4096</e></m></meta></GetProperty>
		<SetProperty><meta><m n=":csNative"><e>8192</e></m></meta></SetProperty>
		<PutDispProperty><meta><m n=":csNative"><e>16384</e></m></meta></PutDispProperty>
		<PutRefDispProperty><meta><m n=":csNative"><e>32768</e></m></meta></PutRefDispProperty>
		<ExactBinding><meta><m n=":csNative"><e>65536</e></m></meta></ExactBinding>
		<SuppressChangeType><meta><m n=":csNative"><e>131072</e></m></meta></SuppressChangeType>
		<OptionalParamBinding><meta><m n=":csNative"><e>262144</e></m></meta></OptionalParamBinding>
		<IgnoreReturn><meta><m n=":csNative"><e>16777216</e></m></meta></IgnoreReturn>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.BindingFlags"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.reflection.CallingConventions" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.CallingConventions">
		<Standard><meta><m n=":csNative"><e>1</e></m></meta></Standard>
		<VarArgs><meta><m n=":csNative"><e>2</e></m></meta></VarArgs>
		<Any><meta><m n=":csNative"><e>3</e></m></meta></Any>
		<HasThis><meta><m n=":csNative"><e>32</e></m></meta></HasThis>
		<ExplicitThis><meta><m n=":csNative"><e>64</e></m></meta></ExplicitThis>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.CallingConventions"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.runtime.interopservices._MethodBase" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._MethodBase" extern="1" interface="1">
		<ReflectedType public="1" get="accessor" set="null"><c path="cs.system.Type"/></ReflectedType>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<MethodHandle public="1" get="accessor" set="null"><c path="cs.system.RuntimeMethodHandle"/></MethodHandle>
		<MemberType public="1" get="accessor" set="null"><e path="cs.system.reflection.MemberTypes"/></MemberType>
		<IsVirtual public="1" get="accessor" set="null"><x path="Bool"/></IsVirtual>
		<IsStatic public="1" get="accessor" set="null"><x path="Bool"/></IsStatic>
		<IsSpecialName public="1" get="accessor" set="null"><x path="Bool"/></IsSpecialName>
		<IsPublic public="1" get="accessor" set="null"><x path="Bool"/></IsPublic>
		<IsPrivate public="1" get="accessor" set="null"><x path="Bool"/></IsPrivate>
		<IsHideBySig public="1" get="accessor" set="null"><x path="Bool"/></IsHideBySig>
		<IsFinal public="1" get="accessor" set="null"><x path="Bool"/></IsFinal>
		<IsFamilyOrAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsFamilyOrAssembly>
		<IsFamilyAndAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsFamilyAndAssembly>
		<IsFamily public="1" get="accessor" set="null"><x path="Bool"/></IsFamily>
		<IsConstructor public="1" get="accessor" set="null"><x path="Bool"/></IsConstructor>
		<IsAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsAssembly>
		<IsAbstract public="1" get="accessor" set="null"><x path="Bool"/></IsAbstract>
		<DeclaringType public="1" get="accessor" set="null"><c path="cs.system.Type"/></DeclaringType>
		<CallingConvention public="1" get="accessor" set="null"><e path="cs.system.reflection.CallingConventions"/></CallingConvention>
		<Attributes public="1" get="accessor" set="null"><e path="cs.system.reflection.MethodAttributes"/></Attributes>
		<GetCustomAttributes public="1" set="method">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetCustomAttributes public="1" set="method">
	<f a="attributeType:inherit">
		<c path="cs.system.Type"/>
		<x path="Bool"/>
		<c path="cs.NativeArray"><d/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<GetMethodImplementationFlags public="1" set="method">
			<f a=""><e path="cs.system.reflection.MethodImplAttributes"/></f>
			<meta><m n=":overload"/></meta>
		</GetMethodImplementationFlags>
		<GetParameters public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.ParameterInfo"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetParameters>
		<GetIDsOfNames public="1" set="method">
			<f a="riid:rgszNames:cNames:lcid:rgDispId">
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<c path="cs.system.IntPtr"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetIDsOfNames>
		<GetTypeInfo public="1" set="method">
			<f a="iTInfo:lcid:ppTInfo">
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfo>
		<GetTypeInfoCount public="1" set="method">
			<f a="pcTInfo">
				<t path="cs.Out"><x path="UInt"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfoCount>
		<Invoke public="1" set="method">
			<f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
				<x path="UInt"/>
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<x path="UInt"/>
				<t path="cs.types.Int16"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Invoke public="1" set="method">
					<f a="obj:invokeAttr:binder:parameters:culture">
						<d/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.Binder"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.globalization.CultureInfo"/>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</Invoke>
				<Invoke public="1" set="method">
					<f a="obj:parameters">
						<d/>
						<c path="cs.NativeArray"><d/></c>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</Invoke>
			</overloads>
		</Invoke>
		<GetType public="1" set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</GetType>
		<IsDefined public="1" set="method">
			<f a="attributeType:inherit">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsDefined>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<get_Attributes set="method">
			<f a=""><e path="cs.system.reflection.MethodAttributes"/></f>
			<meta><m n=":overload"/></meta>
		</get_Attributes>
		<get_CallingConvention set="method">
			<f a=""><e path="cs.system.reflection.CallingConventions"/></f>
			<meta><m n=":overload"/></meta>
		</get_CallingConvention>
		<get_DeclaringType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_DeclaringType>
		<get_IsAbstract set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsAbstract>
		<get_IsAssembly set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsAssembly>
		<get_IsConstructor set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsConstructor>
		<get_IsFamily set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFamily>
		<get_IsFamilyAndAssembly set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFamilyAndAssembly>
		<get_IsFamilyOrAssembly set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFamilyOrAssembly>
		<get_IsFinal set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFinal>
		<get_IsHideBySig set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsHideBySig>
		<get_IsPrivate set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsPrivate>
		<get_IsPublic set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsPublic>
		<get_IsSpecialName set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSpecialName>
		<get_IsStatic set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsStatic>
		<get_IsVirtual set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsVirtual>
		<get_MemberType set="method">
			<f a=""><e path="cs.system.reflection.MemberTypes"/></f>
			<meta><m n=":overload"/></meta>
		</get_MemberType>
		<get_MethodHandle set="method">
			<f a=""><c path="cs.system.RuntimeMethodHandle"/></f>
			<meta><m n=":overload"/></meta>
		</get_MethodHandle>
		<get_Name set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<get_ReflectedType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReflectedType>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._MethodBase"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.MethodBase" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.MethodBase" extern="1">
		<extends path="cs.system.reflection.MemberInfo"/>
		<implements path="cs.system.runtime.interopservices._MethodBase"/>
		<GetCurrentMethod final="1" public="1" set="method" static="1">
			<f a=""><c path="cs.system.reflection.MethodBase"/></f>
			<meta><m n=":overload"/></meta>
		</GetCurrentMethod>
		<GetMethodFromHandle final="1" public="1" set="method" static="1">
			<f a="handle">
				<c path="cs.system.RuntimeMethodHandle"/>
				<c path="cs.system.reflection.MethodBase"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetMethodFromHandle final="1" public="1" set="method">
	<f a="handle:declaringType">
		<c path="cs.system.RuntimeMethodHandle"/>
		<c path="cs.system.RuntimeTypeHandle"/>
		<c path="cs.system.reflection.MethodBase"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetMethodFromHandle></overloads>
		</GetMethodFromHandle>
		<IsGenericMethod public="1" get="accessor" set="null"><x path="Bool"/></IsGenericMethod>
		<IsGenericMethodDefinition public="1" get="accessor" set="null"><x path="Bool"/></IsGenericMethodDefinition>
		<ContainsGenericParameters public="1" get="accessor" set="null"><x path="Bool"/></ContainsGenericParameters>
		<IsConstructor public="1" get="accessor" set="null"><x path="Bool"/></IsConstructor>
		<IsSpecialName public="1" get="accessor" set="null"><x path="Bool"/></IsSpecialName>
		<IsAbstract public="1" get="accessor" set="null"><x path="Bool"/></IsAbstract>
		<IsHideBySig public="1" get="accessor" set="null"><x path="Bool"/></IsHideBySig>
		<IsVirtual public="1" get="accessor" set="null"><x path="Bool"/></IsVirtual>
		<IsFinal public="1" get="accessor" set="null"><x path="Bool"/></IsFinal>
		<IsStatic public="1" get="accessor" set="null"><x path="Bool"/></IsStatic>
		<IsFamilyOrAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsFamilyOrAssembly>
		<IsFamilyAndAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsFamilyAndAssembly>
		<IsAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsAssembly>
		<IsFamily public="1" get="accessor" set="null"><x path="Bool"/></IsFamily>
		<IsPrivate public="1" get="accessor" set="null"><x path="Bool"/></IsPrivate>
		<IsPublic public="1" get="accessor" set="null"><x path="Bool"/></IsPublic>
		<CallingConvention public="1" get="accessor" set="null"><e path="cs.system.reflection.CallingConventions"/></CallingConvention>
		<Attributes public="1" get="accessor" set="null"><e path="cs.system.reflection.MethodAttributes"/></Attributes>
		<MethodHandle public="1" get="accessor" set="null"><c path="cs.system.RuntimeMethodHandle"/></MethodHandle>
		<GetMethodImplementationFlags public="1" set="method">
			<f a=""><e path="cs.system.reflection.MethodImplAttributes"/></f>
			<meta><m n=":overload"/></meta>
		</GetMethodImplementationFlags>
		<GetParameters public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.ParameterInfo"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetParameters>
		<Invoke final="1" public="1" set="method">
			<f a="obj:parameters">
				<d/>
				<c path="cs.NativeArray"><d/></c>
				<d/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":overload"/>
			</meta>
			<overloads><Invoke public="1" set="method">
	<f a="obj:invokeAttr:binder:parameters:culture">
		<d/>
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.system.reflection.Binder"/>
		<c path="cs.NativeArray"><d/></c>
		<c path="cs.system.globalization.CultureInfo"/>
		<d/>
	</f>
	<meta>
		<m n=":noCompletion"/>
		<m n=":skipReflection"/>
		<m n=":overload"/>
	</meta>
</Invoke></overloads>
		</Invoke>
		<get_MethodHandle set="method">
			<f a=""><c path="cs.system.RuntimeMethodHandle"/></f>
			<meta><m n=":overload"/></meta>
		</get_MethodHandle>
		<get_Attributes set="method">
			<f a=""><e path="cs.system.reflection.MethodAttributes"/></f>
			<meta><m n=":overload"/></meta>
		</get_Attributes>
		<get_CallingConvention set="method">
			<f a=""><e path="cs.system.reflection.CallingConventions"/></f>
			<meta><m n=":overload"/></meta>
		</get_CallingConvention>
		<get_IsPublic final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsPublic>
		<get_IsPrivate final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsPrivate>
		<get_IsFamily final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFamily>
		<get_IsAssembly final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsAssembly>
		<get_IsFamilyAndAssembly final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFamilyAndAssembly>
		<get_IsFamilyOrAssembly final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFamilyOrAssembly>
		<get_IsStatic final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsStatic>
		<get_IsFinal final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFinal>
		<get_IsVirtual final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsVirtual>
		<get_IsHideBySig final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsHideBySig>
		<get_IsAbstract final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsAbstract>
		<get_IsSpecialName final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSpecialName>
		<get_IsConstructor final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsConstructor>
		<GetGenericArguments public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetGenericArguments>
		<get_ContainsGenericParameters set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_ContainsGenericParameters>
		<get_IsGenericMethodDefinition set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsGenericMethodDefinition>
		<get_IsGenericMethod set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsGenericMethod>
		<GetMethodBody public="1" set="method">
			<f a=""><c path="cs.system.reflection.MethodBody"/></f>
			<meta><m n=":overload"/></meta>
		</GetMethodBody>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.MethodBase"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._ConstructorInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._ConstructorInfo" extern="1" interface="1">
		<ReflectedType public="1" get="accessor" set="null"><c path="cs.system.Type"/></ReflectedType>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<MethodHandle public="1" get="accessor" set="null"><c path="cs.system.RuntimeMethodHandle"/></MethodHandle>
		<MemberType public="1" get="accessor" set="null"><e path="cs.system.reflection.MemberTypes"/></MemberType>
		<IsVirtual public="1" get="accessor" set="null"><x path="Bool"/></IsVirtual>
		<IsStatic public="1" get="accessor" set="null"><x path="Bool"/></IsStatic>
		<IsSpecialName public="1" get="accessor" set="null"><x path="Bool"/></IsSpecialName>
		<IsPublic public="1" get="accessor" set="null"><x path="Bool"/></IsPublic>
		<IsPrivate public="1" get="accessor" set="null"><x path="Bool"/></IsPrivate>
		<IsHideBySig public="1" get="accessor" set="null"><x path="Bool"/></IsHideBySig>
		<IsFinal public="1" get="accessor" set="null"><x path="Bool"/></IsFinal>
		<IsFamilyOrAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsFamilyOrAssembly>
		<IsFamilyAndAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsFamilyAndAssembly>
		<IsFamily public="1" get="accessor" set="null"><x path="Bool"/></IsFamily>
		<IsConstructor public="1" get="accessor" set="null"><x path="Bool"/></IsConstructor>
		<IsAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsAssembly>
		<IsAbstract public="1" get="accessor" set="null"><x path="Bool"/></IsAbstract>
		<DeclaringType public="1" get="accessor" set="null"><c path="cs.system.Type"/></DeclaringType>
		<CallingConvention public="1" get="accessor" set="null"><e path="cs.system.reflection.CallingConventions"/></CallingConvention>
		<Attributes public="1" get="accessor" set="null"><e path="cs.system.reflection.MethodAttributes"/></Attributes>
		<GetCustomAttributes public="1" set="method">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetCustomAttributes public="1" set="method">
	<f a="attributeType:inherit">
		<c path="cs.system.Type"/>
		<x path="Bool"/>
		<c path="cs.NativeArray"><d/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<GetMethodImplementationFlags public="1" set="method">
			<f a=""><e path="cs.system.reflection.MethodImplAttributes"/></f>
			<meta><m n=":overload"/></meta>
		</GetMethodImplementationFlags>
		<GetParameters public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.ParameterInfo"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetParameters>
		<GetIDsOfNames public="1" set="method">
			<f a="riid:rgszNames:cNames:lcid:rgDispId">
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<c path="cs.system.IntPtr"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetIDsOfNames>
		<GetTypeInfo public="1" set="method">
			<f a="iTInfo:lcid:ppTInfo">
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfo>
		<GetTypeInfoCount public="1" set="method">
			<f a="pcTInfo">
				<t path="cs.Out"><x path="UInt"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfoCount>
		<Invoke public="1" set="method">
			<f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
				<x path="UInt"/>
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<x path="UInt"/>
				<t path="cs.types.Int16"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<GetType public="1" set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</GetType>
		<Invoke_5 public="1" set="method">
			<f a="parameters">
				<c path="cs.NativeArray"><d/></c>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke_5>
		<Invoke_3 public="1" set="method">
			<f a="obj:parameters">
				<d/>
				<c path="cs.NativeArray"><d/></c>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke_3>
		<Invoke_4 public="1" set="method">
			<f a="invokeAttr:binder:parameters:culture">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<c path="cs.NativeArray"><d/></c>
				<c path="cs.system.globalization.CultureInfo"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke_4>
		<Invoke_2 public="1" set="method">
			<f a="obj:invokeAttr:binder:parameters:culture">
				<d/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<c path="cs.NativeArray"><d/></c>
				<c path="cs.system.globalization.CultureInfo"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke_2>
		<IsDefined public="1" set="method">
			<f a="attributeType:inherit">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsDefined>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<get_Attributes set="method">
			<f a=""><e path="cs.system.reflection.MethodAttributes"/></f>
			<meta><m n=":overload"/></meta>
		</get_Attributes>
		<get_CallingConvention set="method">
			<f a=""><e path="cs.system.reflection.CallingConventions"/></f>
			<meta><m n=":overload"/></meta>
		</get_CallingConvention>
		<get_DeclaringType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_DeclaringType>
		<get_IsAbstract set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsAbstract>
		<get_IsAssembly set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsAssembly>
		<get_IsConstructor set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsConstructor>
		<get_IsFamily set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFamily>
		<get_IsFamilyAndAssembly set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFamilyAndAssembly>
		<get_IsFamilyOrAssembly set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFamilyOrAssembly>
		<get_IsFinal set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFinal>
		<get_IsHideBySig set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsHideBySig>
		<get_IsPrivate set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsPrivate>
		<get_IsPublic set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsPublic>
		<get_IsSpecialName set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSpecialName>
		<get_IsStatic set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsStatic>
		<get_IsVirtual set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsVirtual>
		<get_MemberType set="method">
			<f a=""><e path="cs.system.reflection.MemberTypes"/></f>
			<meta><m n=":overload"/></meta>
		</get_MemberType>
		<get_MethodHandle set="method">
			<f a=""><c path="cs.system.RuntimeMethodHandle"/></f>
			<meta><m n=":overload"/></meta>
		</get_MethodHandle>
		<get_Name set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<get_ReflectedType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReflectedType>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._ConstructorInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.ConstructorInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.ConstructorInfo" extern="1">
		<extends path="cs.system.reflection.MethodBase"/>
		<implements path="cs.system.runtime.interopservices._ConstructorInfo"/>
		<TypeConstructorName public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":readOnly"/></meta>
		</TypeConstructorName>
		<ConstructorName public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":readOnly"/></meta>
		</ConstructorName>
		<MemberType public="1" get="accessor" set="null" override="1"><e path="cs.system.reflection.MemberTypes"/></MemberType>
		<get_MemberType set="method" override="1">
			<f a=""><e path="cs.system.reflection.MemberTypes"/></f>
			<meta><m n=":overload"/></meta>
		</get_MemberType>
		<Invoke final="1" public="1" set="method" override="1">
			<f a="parameters">
				<c path="cs.NativeArray"><d/></c>
				<d/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":overload"/>
			</meta>
			<overloads><Invoke public="1" set="method">
	<f a="invokeAttr:binder:parameters:culture">
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.system.reflection.Binder"/>
		<c path="cs.NativeArray"><d/></c>
		<c path="cs.system.globalization.CultureInfo"/>
		<d/>
	</f>
	<meta>
		<m n=":noCompletion"/>
		<m n=":skipReflection"/>
		<m n=":overload"/>
	</meta>
</Invoke></overloads>
		</Invoke>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.ConstructorInfo"</e></m>
		</meta>
	</class>
	<enum path="cs.system.reflection.EventAttributes" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.EventAttributes">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<SpecialName><meta><m n=":csNative"><e>512</e></m></meta></SpecialName>
		<ReservedMask><meta><m n=":csNative"><e>1024</e></m></meta></ReservedMask>
		<RTSpecialName><meta><m n=":csNative"><e>1024</e></m></meta></RTSpecialName>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.EventAttributes"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.reflection.EventInfo_Delegate_StaticAddEvent_1" params="T0" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.EventInfo" module="cs.system.reflection.EventInfo" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" params="T0" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.reflection.EventInfo_StaticAddEvent_1"><c path="op_Addition.T0"/></x>
	<x path="cs.system.reflection.EventInfo_StaticAddEvent_1"><c path="op_Addition.T0"/></x>
	<x path="cs.system.reflection.EventInfo_StaticAddEvent_1"><c path="op_Addition.T0"/></x>
</f></op_Addition>
		<op_Subtraction public="1" params="T0" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.reflection.EventInfo_StaticAddEvent_1"><c path="op_Subtraction.T0"/></x>
	<x path="cs.system.reflection.EventInfo_StaticAddEvent_1"><c path="op_Subtraction.T0"/></x>
	<x path="cs.system.reflection.EventInfo_StaticAddEvent_1"><c path="op_Subtraction.T0"/></x>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="dele">
				<c path="cs.system.reflection.EventInfo_Delegate_StaticAddEvent_1.T0"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="dele:callback:object">
				<c path="cs.system.reflection.EventInfo_Delegate_StaticAddEvent_1.T0"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.EventInfo.StaticAddEvent`1"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.reflection.EventInfo_StaticAddEvent_1" params="T0" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.EventInfo" module="cs.system.reflection.EventInfo">
		<from><icast field="FromHaxeFunction"><f a="">
	<c path="FromHaxeFunction.T0"/>
	<x path="Void"/>
</f></icast></from>
		<this><c path="cs.system.reflection.EventInfo_Delegate_StaticAddEvent_1"><c path="cs.system.reflection.EventInfo_StaticAddEvent_1.T0"/></c></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.reflection._EventInfo.EventInfo_StaticAddEvent_1_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.EventInfo" private="1" module="cs.system.reflection.EventInfo">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="">
				<c path="cs.system.reflection.EventInfo_StaticAddEvent_1.T0"/>
				<x path="Void"/>
			</f>
			<x path="cs.system.reflection.EventInfo_StaticAddEvent_1"><c path="cs.system.reflection.EventInfo_StaticAddEvent_1.T0"/></x>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" params="T0" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="">
				<c path="FromHaxeFunction.T0"/>
				<x path="Void"/>
			</f>
			<x path="cs.system.reflection.EventInfo_StaticAddEvent_1"><c path="FromHaxeFunction.T0"/></x>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.reflection.EventInfo_Delegate_StaticAddEvent_1"><c path="cs.system.reflection.EventInfo_StaticAddEvent_1.T0"/></c>
			<c path="cs.system.reflection.EventInfo_Delegate_StaticAddEvent_1"><c path="cs.system.reflection.EventInfo_StaticAddEvent_1.T0"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" params="T0" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.reflection.EventInfo_StaticAddEvent_1"><c path="Add.T0"/></x>
			<x path="cs.system.reflection.EventInfo_StaticAddEvent_1"><c path="Add.T0"/></x>
			<x path="cs.system.reflection.EventInfo_StaticAddEvent_1"><c path="Add.T0"/></x>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" params="T0" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.reflection.EventInfo_StaticAddEvent_1"><c path="Remove.T0"/></x>
			<x path="cs.system.reflection.EventInfo_StaticAddEvent_1"><c path="Remove.T0"/></x>
			<x path="cs.system.reflection.EventInfo_StaticAddEvent_1"><c path="Remove.T0"/></x>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system.reflection._EventInfo.EventInfo_StaticAddEvent_1_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.EventInfo" private="1" module="cs.system.reflection.EventInfo">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="">
					<c path="cs.system.reflection.EventInfo_StaticAddEvent_1.T0"/>
					<x path="Void"/>
				</f>
				<x path="cs.system.reflection.EventInfo_StaticAddEvent_1"><c path="cs.system.reflection.EventInfo_StaticAddEvent_1.T0"/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" params="T0" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="">
					<c path="FromHaxeFunction.T0"/>
					<x path="Void"/>
				</f>
				<x path="cs.system.reflection.EventInfo_StaticAddEvent_1"><c path="FromHaxeFunction.T0"/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.reflection.EventInfo_Delegate_StaticAddEvent_1"><c path="cs.system.reflection.EventInfo_StaticAddEvent_1.T0"/></c>
				<c path="cs.system.reflection.EventInfo_Delegate_StaticAddEvent_1"><c path="cs.system.reflection.EventInfo_StaticAddEvent_1.T0"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" params="T0" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.reflection.EventInfo_StaticAddEvent_1"><c path="Add.T0"/></x>
				<x path="cs.system.reflection.EventInfo_StaticAddEvent_1"><c path="Add.T0"/></x>
				<x path="cs.system.reflection.EventInfo_StaticAddEvent_1"><c path="Add.T0"/></x>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" params="T0" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.reflection.EventInfo_StaticAddEvent_1"><c path="Remove.T0"/></x>
				<x path="cs.system.reflection.EventInfo_StaticAddEvent_1"><c path="Remove.T0"/></x>
				<x path="cs.system.reflection.EventInfo_StaticAddEvent_1"><c path="Remove.T0"/></x>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="cs.system.reflection.EventInfo_Delegate_AddEvent_2" params="T0:T1" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.EventInfo" module="cs.system.reflection.EventInfo" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" params="T0:T1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.reflection.EventInfo_AddEvent_2">
		<c path="op_Addition.T0"/>
		<c path="op_Addition.T1"/>
	</x>
	<x path="cs.system.reflection.EventInfo_AddEvent_2">
		<c path="op_Addition.T0"/>
		<c path="op_Addition.T1"/>
	</x>
	<x path="cs.system.reflection.EventInfo_AddEvent_2">
		<c path="op_Addition.T0"/>
		<c path="op_Addition.T1"/>
	</x>
</f></op_Addition>
		<op_Subtraction public="1" params="T0:T1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.reflection.EventInfo_AddEvent_2">
		<c path="op_Subtraction.T0"/>
		<c path="op_Subtraction.T1"/>
	</x>
	<x path="cs.system.reflection.EventInfo_AddEvent_2">
		<c path="op_Subtraction.T0"/>
		<c path="op_Subtraction.T1"/>
	</x>
	<x path="cs.system.reflection.EventInfo_AddEvent_2">
		<c path="op_Subtraction.T0"/>
		<c path="op_Subtraction.T1"/>
	</x>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="_this:dele">
				<c path="cs.system.reflection.EventInfo_Delegate_AddEvent_2.T0"/>
				<c path="cs.system.reflection.EventInfo_Delegate_AddEvent_2.T1"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="_this:dele:callback:object">
				<c path="cs.system.reflection.EventInfo_Delegate_AddEvent_2.T0"/>
				<c path="cs.system.reflection.EventInfo_Delegate_AddEvent_2.T1"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.EventInfo.AddEvent`2"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.reflection.EventInfo_AddEvent_2" params="T0:T1" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.EventInfo" module="cs.system.reflection.EventInfo">
		<from><icast field="FromHaxeFunction"><f a=":">
	<c path="FromHaxeFunction.T0"/>
	<c path="FromHaxeFunction.T1"/>
	<x path="Void"/>
</f></icast></from>
		<this><c path="cs.system.reflection.EventInfo_Delegate_AddEvent_2">
	<c path="cs.system.reflection.EventInfo_AddEvent_2.T0"/>
	<c path="cs.system.reflection.EventInfo_AddEvent_2.T1"/>
</c></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.reflection._EventInfo.EventInfo_AddEvent_2_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.EventInfo" private="1" module="cs.system.reflection.EventInfo">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=":">
				<c path="cs.system.reflection.EventInfo_AddEvent_2.T0"/>
				<c path="cs.system.reflection.EventInfo_AddEvent_2.T1"/>
				<x path="Void"/>
			</f>
			<x path="cs.system.reflection.EventInfo_AddEvent_2">
				<c path="cs.system.reflection.EventInfo_AddEvent_2.T0"/>
				<c path="cs.system.reflection.EventInfo_AddEvent_2.T1"/>
			</x>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" params="T0:T1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=":">
				<c path="FromHaxeFunction.T0"/>
				<c path="FromHaxeFunction.T1"/>
				<x path="Void"/>
			</f>
			<x path="cs.system.reflection.EventInfo_AddEvent_2">
				<c path="FromHaxeFunction.T0"/>
				<c path="FromHaxeFunction.T1"/>
			</x>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.reflection.EventInfo_Delegate_AddEvent_2">
				<c path="cs.system.reflection.EventInfo_AddEvent_2.T0"/>
				<c path="cs.system.reflection.EventInfo_AddEvent_2.T1"/>
			</c>
			<c path="cs.system.reflection.EventInfo_Delegate_AddEvent_2">
				<c path="cs.system.reflection.EventInfo_AddEvent_2.T0"/>
				<c path="cs.system.reflection.EventInfo_AddEvent_2.T1"/>
			</c>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" params="T0:T1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.reflection.EventInfo_AddEvent_2">
				<c path="Add.T0"/>
				<c path="Add.T1"/>
			</x>
			<x path="cs.system.reflection.EventInfo_AddEvent_2">
				<c path="Add.T0"/>
				<c path="Add.T1"/>
			</x>
			<x path="cs.system.reflection.EventInfo_AddEvent_2">
				<c path="Add.T0"/>
				<c path="Add.T1"/>
			</x>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" params="T0:T1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.reflection.EventInfo_AddEvent_2">
				<c path="Remove.T0"/>
				<c path="Remove.T1"/>
			</x>
			<x path="cs.system.reflection.EventInfo_AddEvent_2">
				<c path="Remove.T0"/>
				<c path="Remove.T1"/>
			</x>
			<x path="cs.system.reflection.EventInfo_AddEvent_2">
				<c path="Remove.T0"/>
				<c path="Remove.T1"/>
			</x>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system.reflection._EventInfo.EventInfo_AddEvent_2_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.EventInfo" private="1" module="cs.system.reflection.EventInfo">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=":">
					<c path="cs.system.reflection.EventInfo_AddEvent_2.T0"/>
					<c path="cs.system.reflection.EventInfo_AddEvent_2.T1"/>
					<x path="Void"/>
				</f>
				<x path="cs.system.reflection.EventInfo_AddEvent_2">
					<c path="cs.system.reflection.EventInfo_AddEvent_2.T0"/>
					<c path="cs.system.reflection.EventInfo_AddEvent_2.T1"/>
				</x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" params="T0:T1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=":">
					<c path="FromHaxeFunction.T0"/>
					<c path="FromHaxeFunction.T1"/>
					<x path="Void"/>
				</f>
				<x path="cs.system.reflection.EventInfo_AddEvent_2">
					<c path="FromHaxeFunction.T0"/>
					<c path="FromHaxeFunction.T1"/>
				</x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.reflection.EventInfo_Delegate_AddEvent_2">
					<c path="cs.system.reflection.EventInfo_AddEvent_2.T0"/>
					<c path="cs.system.reflection.EventInfo_AddEvent_2.T1"/>
				</c>
				<c path="cs.system.reflection.EventInfo_Delegate_AddEvent_2">
					<c path="cs.system.reflection.EventInfo_AddEvent_2.T0"/>
					<c path="cs.system.reflection.EventInfo_AddEvent_2.T1"/>
				</c>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" params="T0:T1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.reflection.EventInfo_AddEvent_2">
					<c path="Add.T0"/>
					<c path="Add.T1"/>
				</x>
				<x path="cs.system.reflection.EventInfo_AddEvent_2">
					<c path="Add.T0"/>
					<c path="Add.T1"/>
				</x>
				<x path="cs.system.reflection.EventInfo_AddEvent_2">
					<c path="Add.T0"/>
					<c path="Add.T1"/>
				</x>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" params="T0:T1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.reflection.EventInfo_AddEvent_2">
					<c path="Remove.T0"/>
					<c path="Remove.T1"/>
				</x>
				<x path="cs.system.reflection.EventInfo_AddEvent_2">
					<c path="Remove.T0"/>
					<c path="Remove.T1"/>
				</x>
				<x path="cs.system.reflection.EventInfo_AddEvent_2">
					<c path="Remove.T0"/>
					<c path="Remove.T1"/>
				</x>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="cs.system.reflection.EventInfo_Delegate_AddEventAdapter" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.EventInfo" module="cs.system.reflection.EventInfo" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.reflection.EventInfo_AddEventAdapter"/>
	<x path="cs.system.reflection.EventInfo_AddEventAdapter"/>
	<x path="cs.system.reflection.EventInfo_AddEventAdapter"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.reflection.EventInfo_AddEventAdapter"/>
	<x path="cs.system.reflection.EventInfo_AddEventAdapter"/>
	<x path="cs.system.reflection.EventInfo_AddEventAdapter"/>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="_this:dele">
				<d/>
				<c path="cs.system.Delegate"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="_this:dele:callback:object">
				<d/>
				<c path="cs.system.Delegate"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.EventInfo.AddEventAdapter"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.reflection.EventInfo_AddEventAdapter" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.EventInfo" module="cs.system.reflection.EventInfo">
		<from><icast field="FromHaxeFunction"><f a=":">
	<d/>
	<c path="cs.system.Delegate"/>
	<x path="Void"/>
</f></icast></from>
		<this><c path="cs.system.reflection.EventInfo_Delegate_AddEventAdapter"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.reflection._EventInfo.EventInfo_AddEventAdapter_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.EventInfo" private="1" module="cs.system.reflection.EventInfo">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=":">
				<d/>
				<c path="cs.system.Delegate"/>
				<x path="Void"/>
			</f>
			<x path="cs.system.reflection.EventInfo_AddEventAdapter"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=":">
				<d/>
				<c path="cs.system.Delegate"/>
				<x path="Void"/>
			</f>
			<x path="cs.system.reflection.EventInfo_AddEventAdapter"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.reflection.EventInfo_Delegate_AddEventAdapter"/>
			<c path="cs.system.reflection.EventInfo_Delegate_AddEventAdapter"/>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.reflection.EventInfo_AddEventAdapter"/>
			<x path="cs.system.reflection.EventInfo_AddEventAdapter"/>
			<x path="cs.system.reflection.EventInfo_AddEventAdapter"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.reflection.EventInfo_AddEventAdapter"/>
			<x path="cs.system.reflection.EventInfo_AddEventAdapter"/>
			<x path="cs.system.reflection.EventInfo_AddEventAdapter"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system.reflection._EventInfo.EventInfo_AddEventAdapter_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.EventInfo" private="1" module="cs.system.reflection.EventInfo">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=":">
					<d/>
					<c path="cs.system.Delegate"/>
					<x path="Void"/>
				</f>
				<x path="cs.system.reflection.EventInfo_AddEventAdapter"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=":">
					<d/>
					<c path="cs.system.Delegate"/>
					<x path="Void"/>
				</f>
				<x path="cs.system.reflection.EventInfo_AddEventAdapter"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.reflection.EventInfo_Delegate_AddEventAdapter"/>
				<c path="cs.system.reflection.EventInfo_Delegate_AddEventAdapter"/>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.reflection.EventInfo_AddEventAdapter"/>
				<x path="cs.system.reflection.EventInfo_AddEventAdapter"/>
				<x path="cs.system.reflection.EventInfo_AddEventAdapter"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.reflection.EventInfo_AddEventAdapter"/>
				<x path="cs.system.reflection.EventInfo_AddEventAdapter"/>
				<x path="cs.system.reflection.EventInfo_AddEventAdapter"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="cs.system.runtime.interopservices._EventInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._EventInfo" extern="1" interface="1">
		<ReflectedType public="1" get="accessor" set="null"><c path="cs.system.Type"/></ReflectedType>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<MemberType public="1" get="accessor" set="null"><e path="cs.system.reflection.MemberTypes"/></MemberType>
		<IsSpecialName public="1" get="accessor" set="null"><x path="Bool"/></IsSpecialName>
		<IsMulticast public="1" get="accessor" set="null"><x path="Bool"/></IsMulticast>
		<EventHandlerType public="1" get="accessor" set="null"><c path="cs.system.Type"/></EventHandlerType>
		<DeclaringType public="1" get="accessor" set="null"><c path="cs.system.Type"/></DeclaringType>
		<Attributes public="1" get="accessor" set="null"><e path="cs.system.reflection.EventAttributes"/></Attributes>
		<AddEventHandler public="1" set="method">
			<f a="target:handler">
				<d/>
				<c path="cs.system.Delegate"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddEventHandler>
		<GetAddMethod public="1" set="method">
			<f a=""><c path="cs.system.reflection.MethodInfo"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetAddMethod public="1" set="method">
	<f a="nonPublic">
		<x path="Bool"/>
		<c path="cs.system.reflection.MethodInfo"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetAddMethod></overloads>
		</GetAddMethod>
		<GetCustomAttributes public="1" set="method">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetCustomAttributes public="1" set="method">
	<f a="attributeType:inherit">
		<c path="cs.system.Type"/>
		<x path="Bool"/>
		<c path="cs.NativeArray"><d/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<GetIDsOfNames public="1" set="method">
			<f a="riid:rgszNames:cNames:lcid:rgDispId">
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<c path="cs.system.IntPtr"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetIDsOfNames>
		<GetTypeInfo public="1" set="method">
			<f a="iTInfo:lcid:ppTInfo">
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfo>
		<GetTypeInfoCount public="1" set="method">
			<f a="pcTInfo">
				<t path="cs.Out"><x path="UInt"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfoCount>
		<Invoke public="1" set="method">
			<f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
				<x path="UInt"/>
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<x path="UInt"/>
				<t path="cs.types.Int16"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<GetRaiseMethod public="1" set="method">
			<f a=""><c path="cs.system.reflection.MethodInfo"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetRaiseMethod public="1" set="method">
	<f a="nonPublic">
		<x path="Bool"/>
		<c path="cs.system.reflection.MethodInfo"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetRaiseMethod></overloads>
		</GetRaiseMethod>
		<GetRemoveMethod public="1" set="method">
			<f a=""><c path="cs.system.reflection.MethodInfo"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetRemoveMethod public="1" set="method">
	<f a="nonPublic">
		<x path="Bool"/>
		<c path="cs.system.reflection.MethodInfo"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetRemoveMethod></overloads>
		</GetRemoveMethod>
		<GetType public="1" set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</GetType>
		<IsDefined public="1" set="method">
			<f a="attributeType:inherit">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsDefined>
		<RemoveEventHandler public="1" set="method">
			<f a="target:handler">
				<d/>
				<c path="cs.system.Delegate"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveEventHandler>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<get_Attributes set="method">
			<f a=""><e path="cs.system.reflection.EventAttributes"/></f>
			<meta><m n=":overload"/></meta>
		</get_Attributes>
		<get_DeclaringType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_DeclaringType>
		<get_EventHandlerType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_EventHandlerType>
		<get_IsMulticast set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsMulticast>
		<get_IsSpecialName set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSpecialName>
		<get_MemberType set="method">
			<f a=""><e path="cs.system.reflection.MemberTypes"/></f>
			<meta><m n=":overload"/></meta>
		</get_MemberType>
		<get_Name set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<get_ReflectedType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReflectedType>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._EventInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.EventInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.EventInfo" extern="1">
		<extends path="cs.system.reflection.MemberInfo"/>
		<implements path="cs.system.runtime.interopservices._EventInfo"/>
		<MemberType public="1" get="accessor" set="null" override="1"><e path="cs.system.reflection.MemberTypes"/></MemberType>
		<IsSpecialName public="1" get="accessor" set="null"><x path="Bool"/></IsSpecialName>
		<IsMulticast public="1" get="accessor" set="null"><x path="Bool"/></IsMulticast>
		<EventHandlerType public="1" get="accessor" set="null"><c path="cs.system.Type"/></EventHandlerType>
		<Attributes public="1" get="accessor" set="null"><e path="cs.system.reflection.EventAttributes"/></Attributes>
		<get_Attributes set="method">
			<f a=""><e path="cs.system.reflection.EventAttributes"/></f>
			<meta><m n=":overload"/></meta>
		</get_Attributes>
		<get_EventHandlerType final="1" set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_EventHandlerType>
		<get_IsMulticast final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsMulticast>
		<get_IsSpecialName final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSpecialName>
		<get_MemberType set="method" override="1">
			<f a=""><e path="cs.system.reflection.MemberTypes"/></f>
			<meta><m n=":overload"/></meta>
		</get_MemberType>
		<AddEventHandler final="1" public="1" set="method">
			<f a="target:handler">
				<d/>
				<c path="cs.system.Delegate"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddEventHandler>
		<GetAddMethod final="1" public="1" set="method">
			<f a=""><c path="cs.system.reflection.MethodInfo"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetAddMethod public="1" set="method">
	<f a="nonPublic">
		<x path="Bool"/>
		<c path="cs.system.reflection.MethodInfo"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetAddMethod></overloads>
		</GetAddMethod>
		<GetRaiseMethod final="1" public="1" set="method">
			<f a=""><c path="cs.system.reflection.MethodInfo"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetRaiseMethod public="1" set="method">
	<f a="nonPublic">
		<x path="Bool"/>
		<c path="cs.system.reflection.MethodInfo"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetRaiseMethod></overloads>
		</GetRaiseMethod>
		<GetRemoveMethod final="1" public="1" set="method">
			<f a=""><c path="cs.system.reflection.MethodInfo"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetRemoveMethod public="1" set="method">
	<f a="nonPublic">
		<x path="Bool"/>
		<c path="cs.system.reflection.MethodInfo"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetRemoveMethod></overloads>
		</GetRemoveMethod>
		<GetOtherMethods public="1" set="method">
			<f a="nonPublic">
				<x path="Bool"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetOtherMethods final="1" public="1" set="method">
	<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c></f>
	<meta><m n=":overload"/></meta>
</GetOtherMethods></overloads>
		</GetOtherMethods>
		<RemoveEventHandler final="1" public="1" set="method">
			<f a="target:handler">
				<d/>
				<c path="cs.system.Delegate"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveEventHandler>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.EventInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.ExceptionHandlingClause" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.ExceptionHandlingClause" extern="1">
		<TryOffset public="1" get="accessor" set="null"><x path="Int"/></TryOffset>
		<TryLength public="1" get="accessor" set="null"><x path="Int"/></TryLength>
		<HandlerOffset public="1" get="accessor" set="null"><x path="Int"/></HandlerOffset>
		<HandlerLength public="1" get="accessor" set="null"><x path="Int"/></HandlerLength>
		<Flags public="1" get="accessor" set="null"><e path="cs.system.reflection.ExceptionHandlingClauseOptions"/></Flags>
		<FilterOffset public="1" get="accessor" set="null"><x path="Int"/></FilterOffset>
		<CatchType public="1" get="accessor" set="null"><c path="cs.system.Type"/></CatchType>
		<get_CatchType final="1" set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_CatchType>
		<get_FilterOffset final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_FilterOffset>
		<get_Flags final="1" set="method">
			<f a=""><e path="cs.system.reflection.ExceptionHandlingClauseOptions"/></f>
			<meta><m n=":overload"/></meta>
		</get_Flags>
		<get_HandlerLength final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_HandlerLength>
		<get_HandlerOffset final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_HandlerOffset>
		<get_TryLength final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_TryLength>
		<get_TryOffset final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_TryOffset>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.ExceptionHandlingClause"</e></m>
		</meta>
	</class>
	<enum path="cs.system.reflection.ExceptionHandlingClauseOptions" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.ExceptionHandlingClauseOptions">
		<Clause><meta><m n=":csNative"><e>0</e></m></meta></Clause>
		<Filter><meta><m n=":csNative"><e>1</e></m></meta></Filter>
		<Finally><meta><m n=":csNative"><e>2</e></m></meta></Finally>
		<Fault><meta><m n=":csNative"><e>4</e></m></meta></Fault>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.ExceptionHandlingClauseOptions"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.reflection.FieldAttributes" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.FieldAttributes">
		<PrivateScope><meta><m n=":csNative"><e>0</e></m></meta></PrivateScope>
		<Private><meta><m n=":csNative"><e>1</e></m></meta></Private>
		<FamANDAssem><meta><m n=":csNative"><e>2</e></m></meta></FamANDAssem>
		<Assembly><meta><m n=":csNative"><e>3</e></m></meta></Assembly>
		<Family><meta><m n=":csNative"><e>4</e></m></meta></Family>
		<FamORAssem><meta><m n=":csNative"><e>5</e></m></meta></FamORAssem>
		<Public><meta><m n=":csNative"><e>6</e></m></meta></Public>
		<FieldAccessMask><meta><m n=":csNative"><e>7</e></m></meta></FieldAccessMask>
		<Static><meta><m n=":csNative"><e>16</e></m></meta></Static>
		<InitOnly><meta><m n=":csNative"><e>32</e></m></meta></InitOnly>
		<Literal><meta><m n=":csNative"><e>64</e></m></meta></Literal>
		<NotSerialized><meta><m n=":csNative"><e>128</e></m></meta></NotSerialized>
		<HasFieldRVA><meta><m n=":csNative"><e>256</e></m></meta></HasFieldRVA>
		<SpecialName><meta><m n=":csNative"><e>512</e></m></meta></SpecialName>
		<RTSpecialName><meta><m n=":csNative"><e>1024</e></m></meta></RTSpecialName>
		<HasFieldMarshal><meta><m n=":csNative"><e>4096</e></m></meta></HasFieldMarshal>
		<PinvokeImpl><meta><m n=":csNative"><e>8192</e></m></meta></PinvokeImpl>
		<HasDefault><meta><m n=":csNative"><e>32768</e></m></meta></HasDefault>
		<ReservedMask><meta><m n=":csNative"><e>38144</e></m></meta></ReservedMask>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.FieldAttributes"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.runtime.interopservices._FieldInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._FieldInfo" extern="1" interface="1">
		<ReflectedType public="1" get="accessor" set="null"><c path="cs.system.Type"/></ReflectedType>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<MemberType public="1" get="accessor" set="null"><e path="cs.system.reflection.MemberTypes"/></MemberType>
		<IsStatic public="1" get="accessor" set="null"><x path="Bool"/></IsStatic>
		<IsSpecialName public="1" get="accessor" set="null"><x path="Bool"/></IsSpecialName>
		<IsPublic public="1" get="accessor" set="null"><x path="Bool"/></IsPublic>
		<IsPrivate public="1" get="accessor" set="null"><x path="Bool"/></IsPrivate>
		<IsPinvokeImpl public="1" get="accessor" set="null"><x path="Bool"/></IsPinvokeImpl>
		<IsNotSerialized public="1" get="accessor" set="null"><x path="Bool"/></IsNotSerialized>
		<IsLiteral public="1" get="accessor" set="null"><x path="Bool"/></IsLiteral>
		<IsInitOnly public="1" get="accessor" set="null"><x path="Bool"/></IsInitOnly>
		<IsFamilyOrAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsFamilyOrAssembly>
		<IsFamilyAndAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsFamilyAndAssembly>
		<IsFamily public="1" get="accessor" set="null"><x path="Bool"/></IsFamily>
		<IsAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsAssembly>
		<FieldType public="1" get="accessor" set="null"><c path="cs.system.Type"/></FieldType>
		<FieldHandle public="1" get="accessor" set="null"><c path="cs.system.RuntimeFieldHandle"/></FieldHandle>
		<DeclaringType public="1" get="accessor" set="null"><c path="cs.system.Type"/></DeclaringType>
		<Attributes public="1" get="accessor" set="null"><e path="cs.system.reflection.FieldAttributes"/></Attributes>
		<GetCustomAttributes public="1" set="method">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetCustomAttributes public="1" set="method">
	<f a="attributeType:inherit">
		<c path="cs.system.Type"/>
		<x path="Bool"/>
		<c path="cs.NativeArray"><d/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<GetType public="1" set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</GetType>
		<GetIDsOfNames public="1" set="method">
			<f a="riid:rgszNames:cNames:lcid:rgDispId">
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<c path="cs.system.IntPtr"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetIDsOfNames>
		<GetTypeInfo public="1" set="method">
			<f a="iTInfo:lcid:ppTInfo">
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfo>
		<GetTypeInfoCount public="1" set="method">
			<f a="pcTInfo">
				<t path="cs.Out"><x path="UInt"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfoCount>
		<Invoke public="1" set="method">
			<f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
				<x path="UInt"/>
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<x path="UInt"/>
				<t path="cs.types.Int16"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<GetValue public="1" set="method">
			<f a="obj">
				<d/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetValue>
		<GetValueDirect public="1" set="method">
			<f a="obj">
				<c path="cs.system.TypedReference"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetValueDirect>
		<IsDefined public="1" set="method">
			<f a="attributeType:inherit">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsDefined>
		<SetValue public="1" set="method">
			<f a="obj:value">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><SetValue public="1" set="method">
	<f a="obj:value:invokeAttr:binder:culture">
		<d/>
		<d/>
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.system.reflection.Binder"/>
		<c path="cs.system.globalization.CultureInfo"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</SetValue></overloads>
		</SetValue>
		<SetValueDirect public="1" set="method">
			<f a="obj:value">
				<c path="cs.system.TypedReference"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetValueDirect>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<get_Attributes set="method">
			<f a=""><e path="cs.system.reflection.FieldAttributes"/></f>
			<meta><m n=":overload"/></meta>
		</get_Attributes>
		<get_DeclaringType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_DeclaringType>
		<get_FieldHandle set="method">
			<f a=""><c path="cs.system.RuntimeFieldHandle"/></f>
			<meta><m n=":overload"/></meta>
		</get_FieldHandle>
		<get_FieldType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_FieldType>
		<get_IsAssembly set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsAssembly>
		<get_IsFamily set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFamily>
		<get_IsFamilyAndAssembly set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFamilyAndAssembly>
		<get_IsFamilyOrAssembly set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFamilyOrAssembly>
		<get_IsInitOnly set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsInitOnly>
		<get_IsLiteral set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsLiteral>
		<get_IsNotSerialized set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsNotSerialized>
		<get_IsPinvokeImpl set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsPinvokeImpl>
		<get_IsPrivate set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsPrivate>
		<get_IsPublic set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsPublic>
		<get_IsSpecialName set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSpecialName>
		<get_IsStatic set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsStatic>
		<get_MemberType set="method">
			<f a=""><e path="cs.system.reflection.MemberTypes"/></f>
			<meta><m n=":overload"/></meta>
		</get_MemberType>
		<get_Name set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<get_ReflectedType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReflectedType>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._FieldInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.FieldInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.FieldInfo" extern="1">
		<extends path="cs.system.reflection.MemberInfo"/>
		<implements path="cs.system.runtime.interopservices._FieldInfo"/>
		<GetFieldFromHandle final="1" public="1" set="method" static="1">
			<f a="handle">
				<c path="cs.system.RuntimeFieldHandle"/>
				<c path="cs.system.reflection.FieldInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetFieldFromHandle final="1" public="1" set="method">
	<f a="handle:declaringType">
		<c path="cs.system.RuntimeFieldHandle"/>
		<c path="cs.system.RuntimeTypeHandle"/>
		<c path="cs.system.reflection.FieldInfo"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetFieldFromHandle></overloads>
		</GetFieldFromHandle>
		<IsNotSerialized public="1" get="accessor" set="null"><x path="Bool"/></IsNotSerialized>
		<IsSpecialName public="1" get="accessor" set="null"><x path="Bool"/></IsSpecialName>
		<IsPinvokeImpl public="1" get="accessor" set="null"><x path="Bool"/></IsPinvokeImpl>
		<IsFamilyOrAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsFamilyOrAssembly>
		<IsFamilyAndAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsFamilyAndAssembly>
		<IsAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsAssembly>
		<IsFamily public="1" get="accessor" set="null"><x path="Bool"/></IsFamily>
		<IsPrivate public="1" get="accessor" set="null"><x path="Bool"/></IsPrivate>
		<IsPublic public="1" get="accessor" set="null"><x path="Bool"/></IsPublic>
		<IsInitOnly public="1" get="accessor" set="null"><x path="Bool"/></IsInitOnly>
		<IsStatic public="1" get="accessor" set="null"><x path="Bool"/></IsStatic>
		<IsLiteral public="1" get="accessor" set="null"><x path="Bool"/></IsLiteral>
		<MemberType public="1" get="accessor" set="null" override="1"><e path="cs.system.reflection.MemberTypes"/></MemberType>
		<FieldType public="1" get="accessor" set="null"><c path="cs.system.Type"/></FieldType>
		<FieldHandle public="1" get="accessor" set="null"><c path="cs.system.RuntimeFieldHandle"/></FieldHandle>
		<Attributes public="1" get="accessor" set="null"><e path="cs.system.reflection.FieldAttributes"/></Attributes>
		<get_Attributes set="method">
			<f a=""><e path="cs.system.reflection.FieldAttributes"/></f>
			<meta><m n=":overload"/></meta>
		</get_Attributes>
		<get_FieldHandle set="method">
			<f a=""><c path="cs.system.RuntimeFieldHandle"/></f>
			<meta><m n=":overload"/></meta>
		</get_FieldHandle>
		<get_FieldType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_FieldType>
		<GetValue public="1" set="method">
			<f a="obj">
				<d/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetValue>
		<get_MemberType set="method" override="1">
			<f a=""><e path="cs.system.reflection.MemberTypes"/></f>
			<meta><m n=":overload"/></meta>
		</get_MemberType>
		<get_IsLiteral final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsLiteral>
		<get_IsStatic final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsStatic>
		<get_IsInitOnly final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsInitOnly>
		<get_IsPublic final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsPublic>
		<get_IsPrivate final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsPrivate>
		<get_IsFamily final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFamily>
		<get_IsAssembly final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsAssembly>
		<get_IsFamilyAndAssembly final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFamilyAndAssembly>
		<get_IsFamilyOrAssembly final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFamilyOrAssembly>
		<get_IsPinvokeImpl final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsPinvokeImpl>
		<get_IsSpecialName final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSpecialName>
		<get_IsNotSerialized final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsNotSerialized>
		<SetValue public="1" set="method">
			<f a="obj:value:invokeAttr:binder:culture">
				<d/>
				<d/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<c path="cs.system.globalization.CultureInfo"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><SetValue final="1" public="1" set="method">
	<f a="obj:value">
		<d/>
		<d/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</SetValue></overloads>
		</SetValue>
		<GetValueDirect public="1" set="method">
			<f a="obj">
				<c path="cs.system.TypedReference"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetValueDirect>
		<SetValueDirect public="1" set="method">
			<f a="obj:value">
				<c path="cs.system.TypedReference"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetValueDirect>
		<GetOptionalCustomModifiers public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetOptionalCustomModifiers>
		<GetRequiredCustomModifiers public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetRequiredCustomModifiers>
		<GetRawConstantValue public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</GetRawConstantValue>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.FieldInfo"</e></m>
		</meta>
	</class>
	<enum path="cs.system.reflection.GenericParameterAttributes" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.GenericParameterAttributes">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<Covariant><meta><m n=":csNative"><e>1</e></m></meta></Covariant>
		<Contravariant><meta><m n=":csNative"><e>2</e></m></meta></Contravariant>
		<VarianceMask><meta><m n=":csNative"><e>3</e></m></meta></VarianceMask>
		<ReferenceTypeConstraint><meta><m n=":csNative"><e>4</e></m></meta></ReferenceTypeConstraint>
		<NotNullableValueTypeConstraint><meta><m n=":csNative"><e>8</e></m></meta></NotNullableValueTypeConstraint>
		<DefaultConstructorConstraint><meta><m n=":csNative"><e>16</e></m></meta></DefaultConstructorConstraint>
		<SpecialConstraintMask><meta><m n=":csNative"><e>28</e></m></meta></SpecialConstraintMask>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.GenericParameterAttributes"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.reflection.ImageFileMachine" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.ImageFileMachine">
		<I386><meta><m n=":csNative"><e>332</e></m></meta></I386>
		<IA64><meta><m n=":csNative"><e>512</e></m></meta></IA64>
		<AMD64><meta><m n=":csNative"><e>34404</e></m></meta></AMD64>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.ImageFileMachine"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.reflection.InterfaceMapping" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.InterfaceMapping" extern="1">
		<extends path="cs.system.ValueType"/>
		<TargetType public="1"><c path="cs.system.Type"/></TargetType>
		<TargetMethods public="1"><c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c></TargetMethods>
		<InterfaceType public="1"><c path="cs.system.Type"/></InterfaceType>
		<InterfaceMethods public="1"><c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c></InterfaceMethods>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.InterfaceMapping"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.LocalVariableInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.LocalVariableInfo" extern="1">
		<LocalType public="1" get="accessor" set="null"><c path="cs.system.Type"/></LocalType>
		<LocalIndex public="1" get="accessor" set="null"><x path="Int"/></LocalIndex>
		<IsPinned public="1" get="accessor" set="null"><x path="Bool"/></IsPinned>
		<get_IsPinned set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsPinned>
		<get_LocalIndex set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_LocalIndex>
		<get_LocalType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_LocalType>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.LocalVariableInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.ManifestResourceInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.ManifestResourceInfo" extern="1">
		<ResourceLocation public="1" get="accessor" set="null"><e path="cs.system.reflection.ResourceLocation"/></ResourceLocation>
		<ReferencedAssembly public="1" get="accessor" set="null"><c path="cs.system.reflection.Assembly"/></ReferencedAssembly>
		<FileName public="1" get="accessor" set="null"><c path="String"/></FileName>
		<get_FileName set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_FileName>
		<get_ReferencedAssembly set="method">
			<f a=""><c path="cs.system.reflection.Assembly"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReferencedAssembly>
		<get_ResourceLocation set="method">
			<f a=""><e path="cs.system.reflection.ResourceLocation"/></f>
			<meta><m n=":overload"/></meta>
		</get_ResourceLocation>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.ManifestResourceInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.Delegate_MemberFilter" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.MemberFilter" module="cs.system.reflection.MemberFilter" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.reflection.MemberFilter"/>
	<x path="cs.system.reflection.MemberFilter"/>
	<x path="cs.system.reflection.MemberFilter"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.reflection.MemberFilter"/>
	<x path="cs.system.reflection.MemberFilter"/>
	<x path="cs.system.reflection.MemberFilter"/>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="m:filterCriteria">
				<c path="cs.system.reflection.MemberInfo"/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="m:filterCriteria:callback:object">
				<c path="cs.system.reflection.MemberInfo"/>
				<d/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.MemberFilter"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.reflection.MemberFilter" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.MemberFilter">
		<from><icast field="FromHaxeFunction"><f a=":">
	<c path="cs.system.reflection.MemberInfo"/>
	<d/>
	<x path="Bool"/>
</f></icast></from>
		<this><c path="cs.system.reflection.Delegate_MemberFilter"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.reflection._MemberFilter.MemberFilter_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.MemberFilter" private="1" module="cs.system.reflection.MemberFilter">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=":">
				<c path="cs.system.reflection.MemberInfo"/>
				<d/>
				<x path="Bool"/>
			</f>
			<x path="cs.system.reflection.MemberFilter"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=":">
				<c path="cs.system.reflection.MemberInfo"/>
				<d/>
				<x path="Bool"/>
			</f>
			<x path="cs.system.reflection.MemberFilter"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.reflection.Delegate_MemberFilter"/>
			<c path="cs.system.reflection.Delegate_MemberFilter"/>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.reflection.MemberFilter"/>
			<x path="cs.system.reflection.MemberFilter"/>
			<x path="cs.system.reflection.MemberFilter"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.reflection.MemberFilter"/>
			<x path="cs.system.reflection.MemberFilter"/>
			<x path="cs.system.reflection.MemberFilter"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system.reflection._MemberFilter.MemberFilter_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.MemberFilter" private="1" module="cs.system.reflection.MemberFilter">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=":">
					<c path="cs.system.reflection.MemberInfo"/>
					<d/>
					<x path="Bool"/>
				</f>
				<x path="cs.system.reflection.MemberFilter"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=":">
					<c path="cs.system.reflection.MemberInfo"/>
					<d/>
					<x path="Bool"/>
				</f>
				<x path="cs.system.reflection.MemberFilter"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.reflection.Delegate_MemberFilter"/>
				<c path="cs.system.reflection.Delegate_MemberFilter"/>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.reflection.MemberFilter"/>
				<x path="cs.system.reflection.MemberFilter"/>
				<x path="cs.system.reflection.MemberFilter"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.reflection.MemberFilter"/>
				<x path="cs.system.reflection.MemberFilter"/>
				<x path="cs.system.reflection.MemberFilter"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<enum path="cs.system.reflection.MemberTypes" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.MemberTypes">
		<Constructor><meta><m n=":csNative"><e>1</e></m></meta></Constructor>
		<Event><meta><m n=":csNative"><e>2</e></m></meta></Event>
		<Field><meta><m n=":csNative"><e>4</e></m></meta></Field>
		<Method><meta><m n=":csNative"><e>8</e></m></meta></Method>
		<Property><meta><m n=":csNative"><e>16</e></m></meta></Property>
		<TypeInfo><meta><m n=":csNative"><e>32</e></m></meta></TypeInfo>
		<Custom><meta><m n=":csNative"><e>64</e></m></meta></Custom>
		<NestedType><meta><m n=":csNative"><e>128</e></m></meta></NestedType>
		<All><meta><m n=":csNative"><e>191</e></m></meta></All>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.MemberTypes"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.reflection.MethodAttributes" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.MethodAttributes">
		<PrivateScope><meta><m n=":csNative"><e>0</e></m></meta></PrivateScope>
		<ReuseSlot><meta><m n=":csNative"><e>0</e></m></meta></ReuseSlot>
		<Private><meta><m n=":csNative"><e>1</e></m></meta></Private>
		<FamANDAssem><meta><m n=":csNative"><e>2</e></m></meta></FamANDAssem>
		<Assembly><meta><m n=":csNative"><e>3</e></m></meta></Assembly>
		<Family><meta><m n=":csNative"><e>4</e></m></meta></Family>
		<FamORAssem><meta><m n=":csNative"><e>5</e></m></meta></FamORAssem>
		<Public><meta><m n=":csNative"><e>6</e></m></meta></Public>
		<MemberAccessMask><meta><m n=":csNative"><e>7</e></m></meta></MemberAccessMask>
		<UnmanagedExport><meta><m n=":csNative"><e>8</e></m></meta></UnmanagedExport>
		<Static><meta><m n=":csNative"><e>16</e></m></meta></Static>
		<Final><meta><m n=":csNative"><e>32</e></m></meta></Final>
		<Virtual><meta><m n=":csNative"><e>64</e></m></meta></Virtual>
		<HideBySig><meta><m n=":csNative"><e>128</e></m></meta></HideBySig>
		<VtableLayoutMask><meta><m n=":csNative"><e>256</e></m></meta></VtableLayoutMask>
		<NewSlot><meta><m n=":csNative"><e>256</e></m></meta></NewSlot>
		<CheckAccessOnOverride><meta><m n=":csNative"><e>512</e></m></meta></CheckAccessOnOverride>
		<Abstract><meta><m n=":csNative"><e>1024</e></m></meta></Abstract>
		<SpecialName><meta><m n=":csNative"><e>2048</e></m></meta></SpecialName>
		<RTSpecialName><meta><m n=":csNative"><e>4096</e></m></meta></RTSpecialName>
		<PinvokeImpl><meta><m n=":csNative"><e>8192</e></m></meta></PinvokeImpl>
		<HasSecurity><meta><m n=":csNative"><e>16384</e></m></meta></HasSecurity>
		<RequireSecObject><meta><m n=":csNative"><e>32768</e></m></meta></RequireSecObject>
		<ReservedMask><meta><m n=":csNative"><e>53248</e></m></meta></ReservedMask>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.MethodAttributes"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.reflection.MethodBody" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.MethodBody" extern="1">
		<MaxStackSize public="1" get="accessor" set="null"><x path="Int"/></MaxStackSize>
		<LocalSignatureMetadataToken public="1" get="accessor" set="null"><x path="Int"/></LocalSignatureMetadataToken>
		<InitLocals public="1" get="accessor" set="null"><x path="Bool"/></InitLocals>
		<LocalVariables public="1" get="accessor" set="null"><c path="cs.system.collections.generic.IList_1"><c path="cs.system.reflection.LocalVariableInfo"/></c></LocalVariables>
		<ExceptionHandlingClauses public="1" get="accessor" set="null"><c path="cs.system.collections.generic.IList_1"><c path="cs.system.reflection.ExceptionHandlingClause"/></c></ExceptionHandlingClauses>
		<get_ExceptionHandlingClauses final="1" set="method">
			<f a=""><c path="cs.system.collections.generic.IList_1"><c path="cs.system.reflection.ExceptionHandlingClause"/></c></f>
			<meta><m n=":overload"/></meta>
		</get_ExceptionHandlingClauses>
		<get_LocalVariables final="1" set="method">
			<f a=""><c path="cs.system.collections.generic.IList_1"><c path="cs.system.reflection.LocalVariableInfo"/></c></f>
			<meta><m n=":overload"/></meta>
		</get_LocalVariables>
		<get_InitLocals final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_InitLocals>
		<get_LocalSignatureMetadataToken final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_LocalSignatureMetadataToken>
		<get_MaxStackSize final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_MaxStackSize>
		<GetILAsByteArray final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetILAsByteArray>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.MethodBody"</e></m>
		</meta>
	</class>
	<enum path="cs.system.reflection.MethodImplAttributes" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.MethodImplAttributes">
		<IL><meta><m n=":csNative"><e>0</e></m></meta></IL>
		<Managed><meta><m n=":csNative"><e>0</e></m></meta></Managed>
		<Native><meta><m n=":csNative"><e>1</e></m></meta></Native>
		<OPTIL><meta><m n=":csNative"><e>2</e></m></meta></OPTIL>
		<CodeTypeMask><meta><m n=":csNative"><e>3</e></m></meta></CodeTypeMask>
		<Runtime><meta><m n=":csNative"><e>3</e></m></meta></Runtime>
		<ManagedMask><meta><m n=":csNative"><e>4</e></m></meta></ManagedMask>
		<Unmanaged><meta><m n=":csNative"><e>4</e></m></meta></Unmanaged>
		<NoInlining><meta><m n=":csNative"><e>8</e></m></meta></NoInlining>
		<ForwardRef><meta><m n=":csNative"><e>16</e></m></meta></ForwardRef>
		<Synchronized><meta><m n=":csNative"><e>32</e></m></meta></Synchronized>
		<NoOptimization><meta><m n=":csNative"><e>64</e></m></meta></NoOptimization>
		<PreserveSig><meta><m n=":csNative"><e>128</e></m></meta></PreserveSig>
		<InternalCall><meta><m n=":csNative"><e>4096</e></m></meta></InternalCall>
		<MaxMethodImplVal><meta><m n=":csNative"><e>65535</e></m></meta></MaxMethodImplVal>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.MethodImplAttributes"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.runtime.interopservices._MethodInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._MethodInfo" extern="1" interface="1">
		<ReturnTypeCustomAttributes public="1" get="accessor" set="null"><c path="cs.system.reflection.ICustomAttributeProvider"/></ReturnTypeCustomAttributes>
		<ReturnType public="1" get="accessor" set="null"><c path="cs.system.Type"/></ReturnType>
		<ReflectedType public="1" get="accessor" set="null"><c path="cs.system.Type"/></ReflectedType>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<MethodHandle public="1" get="accessor" set="null"><c path="cs.system.RuntimeMethodHandle"/></MethodHandle>
		<MemberType public="1" get="accessor" set="null"><e path="cs.system.reflection.MemberTypes"/></MemberType>
		<IsVirtual public="1" get="accessor" set="null"><x path="Bool"/></IsVirtual>
		<IsStatic public="1" get="accessor" set="null"><x path="Bool"/></IsStatic>
		<IsSpecialName public="1" get="accessor" set="null"><x path="Bool"/></IsSpecialName>
		<IsPublic public="1" get="accessor" set="null"><x path="Bool"/></IsPublic>
		<IsPrivate public="1" get="accessor" set="null"><x path="Bool"/></IsPrivate>
		<IsHideBySig public="1" get="accessor" set="null"><x path="Bool"/></IsHideBySig>
		<IsFinal public="1" get="accessor" set="null"><x path="Bool"/></IsFinal>
		<IsFamilyOrAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsFamilyOrAssembly>
		<IsFamilyAndAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsFamilyAndAssembly>
		<IsFamily public="1" get="accessor" set="null"><x path="Bool"/></IsFamily>
		<IsConstructor public="1" get="accessor" set="null"><x path="Bool"/></IsConstructor>
		<IsAssembly public="1" get="accessor" set="null"><x path="Bool"/></IsAssembly>
		<IsAbstract public="1" get="accessor" set="null"><x path="Bool"/></IsAbstract>
		<DeclaringType public="1" get="accessor" set="null"><c path="cs.system.Type"/></DeclaringType>
		<CallingConvention public="1" get="accessor" set="null"><e path="cs.system.reflection.CallingConventions"/></CallingConvention>
		<Attributes public="1" get="accessor" set="null"><e path="cs.system.reflection.MethodAttributes"/></Attributes>
		<GetBaseDefinition public="1" set="method">
			<f a=""><c path="cs.system.reflection.MethodInfo"/></f>
			<meta><m n=":overload"/></meta>
		</GetBaseDefinition>
		<GetCustomAttributes public="1" set="method">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetCustomAttributes public="1" set="method">
	<f a="attributeType:inherit">
		<c path="cs.system.Type"/>
		<x path="Bool"/>
		<c path="cs.NativeArray"><d/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<GetMethodImplementationFlags public="1" set="method">
			<f a=""><e path="cs.system.reflection.MethodImplAttributes"/></f>
			<meta><m n=":overload"/></meta>
		</GetMethodImplementationFlags>
		<GetParameters public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.ParameterInfo"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetParameters>
		<GetIDsOfNames public="1" set="method">
			<f a="riid:rgszNames:cNames:lcid:rgDispId">
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<c path="cs.system.IntPtr"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetIDsOfNames>
		<GetTypeInfo public="1" set="method">
			<f a="iTInfo:lcid:ppTInfo">
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfo>
		<GetTypeInfoCount public="1" set="method">
			<f a="pcTInfo">
				<t path="cs.Out"><x path="UInt"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfoCount>
		<Invoke public="1" set="method">
			<f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
				<x path="UInt"/>
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<x path="UInt"/>
				<t path="cs.types.Int16"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Invoke public="1" set="method">
					<f a="obj:invokeAttr:binder:parameters:culture">
						<d/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.Binder"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.globalization.CultureInfo"/>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</Invoke>
				<Invoke public="1" set="method">
					<f a="obj:parameters">
						<d/>
						<c path="cs.NativeArray"><d/></c>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</Invoke>
			</overloads>
		</Invoke>
		<GetType public="1" set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</GetType>
		<IsDefined public="1" set="method">
			<f a="attributeType:inherit">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsDefined>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<get_Attributes set="method">
			<f a=""><e path="cs.system.reflection.MethodAttributes"/></f>
			<meta><m n=":overload"/></meta>
		</get_Attributes>
		<get_CallingConvention set="method">
			<f a=""><e path="cs.system.reflection.CallingConventions"/></f>
			<meta><m n=":overload"/></meta>
		</get_CallingConvention>
		<get_DeclaringType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_DeclaringType>
		<get_IsAbstract set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsAbstract>
		<get_IsAssembly set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsAssembly>
		<get_IsConstructor set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsConstructor>
		<get_IsFamily set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFamily>
		<get_IsFamilyAndAssembly set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFamilyAndAssembly>
		<get_IsFamilyOrAssembly set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFamilyOrAssembly>
		<get_IsFinal set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsFinal>
		<get_IsHideBySig set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsHideBySig>
		<get_IsPrivate set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsPrivate>
		<get_IsPublic set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsPublic>
		<get_IsSpecialName set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSpecialName>
		<get_IsStatic set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsStatic>
		<get_IsVirtual set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsVirtual>
		<get_MemberType set="method">
			<f a=""><e path="cs.system.reflection.MemberTypes"/></f>
			<meta><m n=":overload"/></meta>
		</get_MemberType>
		<get_MethodHandle set="method">
			<f a=""><c path="cs.system.RuntimeMethodHandle"/></f>
			<meta><m n=":overload"/></meta>
		</get_MethodHandle>
		<get_Name set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<get_ReflectedType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReflectedType>
		<get_ReturnType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReturnType>
		<get_ReturnTypeCustomAttributes set="method">
			<f a=""><c path="cs.system.reflection.ICustomAttributeProvider"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReturnTypeCustomAttributes>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._MethodInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.MethodInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.MethodInfo" extern="1">
		<extends path="cs.system.reflection.MethodBase"/>
		<implements path="cs.system.runtime.interopservices._MethodInfo"/>
		<ReturnParameter public="1" get="accessor" set="null"><c path="cs.system.reflection.ParameterInfo"/></ReturnParameter>
		<ContainsGenericParameters public="1" get="accessor" set="null" override="1"><x path="Bool"/></ContainsGenericParameters>
		<IsGenericMethodDefinition public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsGenericMethodDefinition>
		<IsGenericMethod public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsGenericMethod>
		<ReturnTypeCustomAttributes public="1" get="accessor" set="null"><c path="cs.system.reflection.ICustomAttributeProvider"/></ReturnTypeCustomAttributes>
		<ReturnType public="1" get="accessor" set="null"><c path="cs.system.Type"/></ReturnType>
		<MemberType public="1" get="accessor" set="null" override="1"><e path="cs.system.reflection.MemberTypes"/></MemberType>
		<GetBaseDefinition public="1" set="method">
			<f a=""><c path="cs.system.reflection.MethodInfo"/></f>
			<meta><m n=":overload"/></meta>
		</GetBaseDefinition>
		<get_MemberType set="method" override="1">
			<f a=""><e path="cs.system.reflection.MemberTypes"/></f>
			<meta><m n=":overload"/></meta>
		</get_MemberType>
		<get_ReturnType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReturnType>
		<get_ReturnTypeCustomAttributes set="method">
			<f a=""><c path="cs.system.reflection.ICustomAttributeProvider"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReturnTypeCustomAttributes>
		<GetGenericMethodDefinition public="1" set="method">
			<f a=""><c path="cs.system.reflection.MethodInfo"/></f>
			<meta><m n=":overload"/></meta>
		</GetGenericMethodDefinition>
		<MakeGenericMethod public="1" set="method">
			<f a="typeArguments">
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.system.reflection.MethodInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</MakeGenericMethod>
		<GetGenericArguments public="1" set="method" override="1">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetGenericArguments>
		<get_IsGenericMethod set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsGenericMethod>
		<get_IsGenericMethodDefinition set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsGenericMethodDefinition>
		<get_ContainsGenericParameters set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_ContainsGenericParameters>
		<get_ReturnParameter set="method">
			<f a=""><c path="cs.system.reflection.ParameterInfo"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReturnParameter>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.MethodInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._Module" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._Module" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method">
			<f a="riid:rgszNames:cNames:lcid:rgDispId">
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<c path="cs.system.IntPtr"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetIDsOfNames>
		<GetTypeInfo public="1" set="method">
			<f a="iTInfo:lcid:ppTInfo">
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfo>
		<GetTypeInfoCount public="1" set="method">
			<f a="pcTInfo">
				<t path="cs.Out"><x path="UInt"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfoCount>
		<Invoke public="1" set="method">
			<f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
				<x path="UInt"/>
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<x path="UInt"/>
				<t path="cs.types.Int16"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._Module"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.Module" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.Module" extern="1">
		<implements path="cs.system.reflection.ICustomAttributeProvider"/>
		<implements path="cs.system.runtime.interopservices._Module"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<FilterTypeNameIgnoreCase public="1" set="null" static="1">
			<x path="cs.system.reflection.TypeFilter"/>
			<meta><m n=":readOnly"/></meta>
		</FilterTypeNameIgnoreCase>
		<FilterTypeName public="1" set="null" static="1">
			<x path="cs.system.reflection.TypeFilter"/>
			<meta><m n=":readOnly"/></meta>
		</FilterTypeName>
		<MetadataToken public="1" get="accessor" set="null"><x path="Int"/></MetadataToken>
		<FullyQualifiedName public="1" get="accessor" set="null"><c path="String"/></FullyQualifiedName>
		<ModuleVersionId public="1" get="accessor" set="null"><c path="cs.system.Guid"/></ModuleVersionId>
		<MDStreamVersion public="1" get="accessor" set="null"><x path="Int"/></MDStreamVersion>
		<ScopeName public="1" get="accessor" set="null"><c path="String"/></ScopeName>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<Assembly public="1" get="accessor" set="null"><c path="cs.system.reflection.Assembly"/></Assembly>
		<ModuleHandle public="1" get="accessor" set="null"><c path="cs.system.ModuleHandle"/></ModuleHandle>
		<get_ModuleHandle final="1" set="method">
			<f a=""><c path="cs.system.ModuleHandle"/></f>
			<meta><m n=":overload"/></meta>
		</get_ModuleHandle>
		<GetField final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.reflection.FieldInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetField public="1" set="method">
	<f a="name:bindingAttr">
		<c path="String"/>
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.system.reflection.FieldInfo"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetField></overloads>
		</GetField>
		<GetFields final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.FieldInfo"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetFields public="1" set="method">
	<f a="bindingFlags">
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.NativeArray"><c path="cs.system.reflection.FieldInfo"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetFields></overloads>
		</GetFields>
		<GetMethod final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.reflection.MethodInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetMethod final="1" public="1" set="method">
					<f a="name:bindingAttr:binder:callConvention:types:modifiers">
						<c path="String"/>
						<e path="cs.system.reflection.BindingFlags"/>
						<c path="cs.system.reflection.Binder"/>
						<e path="cs.system.reflection.CallingConventions"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
						<c path="cs.system.reflection.MethodInfo"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetMethod>
				<GetMethod final="1" public="1" set="method">
					<f a="name:types">
						<c path="String"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.system.reflection.MethodInfo"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetMethod>
			</overloads>
		</GetMethod>
		<GetMethods final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetMethods final="1" public="1" set="method">
	<f a="bindingFlags">
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetMethods></overloads>
		</GetMethods>
		<GetObjectData public="1" set="method">
			<f a="info:context">
				<c path="cs.system.runtime.serialization.SerializationInfo"/>
				<c path="cs.system.runtime.serialization.StreamingContext"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetObjectData>
		<GetType public="1" set="method">
			<f a="className">
				<c path="String"/>
				<c path="cs.system.Type"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetType public="1" set="method">
					<f a="className:throwOnError:ignoreCase">
						<c path="String"/>
						<x path="Bool"/>
						<x path="Bool"/>
						<c path="cs.system.Type"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetType>
				<GetType public="1" set="method">
					<f a="className:ignoreCase">
						<c path="String"/>
						<x path="Bool"/>
						<c path="cs.system.Type"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetType>
			</overloads>
		</GetType>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<ResolveField final="1" public="1" set="method">
			<f a="metadataToken">
				<x path="Int"/>
				<c path="cs.system.reflection.FieldInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><ResolveField final="1" public="1" set="method">
	<f a="metadataToken:genericTypeArguments:genericMethodArguments">
		<x path="Int"/>
		<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
		<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
		<c path="cs.system.reflection.FieldInfo"/>
	</f>
	<meta><m n=":overload"/></meta>
</ResolveField></overloads>
		</ResolveField>
		<ResolveMember final="1" public="1" set="method">
			<f a="metadataToken">
				<x path="Int"/>
				<c path="cs.system.reflection.MemberInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><ResolveMember final="1" public="1" set="method">
	<f a="metadataToken:genericTypeArguments:genericMethodArguments">
		<x path="Int"/>
		<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
		<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
		<c path="cs.system.reflection.MemberInfo"/>
	</f>
	<meta><m n=":overload"/></meta>
</ResolveMember></overloads>
		</ResolveMember>
		<ResolveMethod final="1" public="1" set="method">
			<f a="metadataToken">
				<x path="Int"/>
				<c path="cs.system.reflection.MethodBase"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><ResolveMethod final="1" public="1" set="method">
	<f a="metadataToken:genericTypeArguments:genericMethodArguments">
		<x path="Int"/>
		<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
		<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
		<c path="cs.system.reflection.MethodBase"/>
	</f>
	<meta><m n=":overload"/></meta>
</ResolveMethod></overloads>
		</ResolveMethod>
		<ResolveType final="1" public="1" set="method">
			<f a="metadataToken">
				<x path="Int"/>
				<c path="cs.system.Type"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><ResolveType final="1" public="1" set="method">
	<f a="metadataToken:genericTypeArguments:genericMethodArguments">
		<x path="Int"/>
		<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
		<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
		<c path="cs.system.Type"/>
	</f>
	<meta><m n=":overload"/></meta>
</ResolveType></overloads>
		</ResolveType>
		<get_Assembly final="1" set="method">
			<f a=""><c path="cs.system.reflection.Assembly"/></f>
			<meta><m n=":overload"/></meta>
		</get_Assembly>
		<get_Name final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<get_ScopeName final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_ScopeName>
		<get_MDStreamVersion final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_MDStreamVersion>
		<get_ModuleVersionId final="1" set="method">
			<f a=""><c path="cs.system.Guid"/></f>
			<meta><m n=":overload"/></meta>
		</get_ModuleVersionId>
		<get_FullyQualifiedName set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_FullyQualifiedName>
		<IsResource final="1" public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</IsResource>
		<FindTypes public="1" set="method">
			<f a="filter:filterCriteria">
				<x path="cs.system.reflection.TypeFilter"/>
				<d/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</FindTypes>
		<GetCustomAttributes public="1" set="method">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetCustomAttributes public="1" set="method">
	<f a="attributeType:inherit">
		<c path="cs.system.Type"/>
		<x path="Bool"/>
		<c path="cs.NativeArray"><d/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<get_MetadataToken set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_MetadataToken>
		<GetMethodImpl set="method">
			<f a="name:bindingAttr:binder:callConvention:types:modifiers">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<e path="cs.system.reflection.CallingConventions"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.reflection.MethodInfo"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</GetMethodImpl>
		<GetPEKind public="1" set="method">
			<f a="peKind:machine">
				<t path="cs.Out"><e path="cs.system.reflection.PortableExecutableKinds"/></t>
				<t path="cs.Out"><e path="cs.system.reflection.ImageFileMachine"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetPEKind>
		<IsDefined public="1" set="method">
			<f a="attributeType:inherit">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsDefined>
		<ResolveString final="1" public="1" set="method">
			<f a="metadataToken">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ResolveString>
		<ResolveSignature final="1" public="1" set="method">
			<f a="metadataToken">
				<x path="Int"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</ResolveSignature>
		<GetSignerCertificate final="1" public="1" set="method">
			<f a=""><c path="cs.system.security.cryptography.x509certificates.X509Certificate"/></f>
			<meta><m n=":overload"/></meta>
		</GetSignerCertificate>
		<GetTypes public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetTypes>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Module"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.Delegate_ModuleResolveEventHandler" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.ModuleResolveEventHandler" module="cs.system.reflection.ModuleResolveEventHandler" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.reflection.ModuleResolveEventHandler"/>
	<x path="cs.system.reflection.ModuleResolveEventHandler"/>
	<x path="cs.system.reflection.ModuleResolveEventHandler"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.reflection.ModuleResolveEventHandler"/>
	<x path="cs.system.reflection.ModuleResolveEventHandler"/>
	<x path="cs.system.reflection.ModuleResolveEventHandler"/>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="sender:e">
				<d/>
				<c path="cs.system.ResolveEventArgs"/>
				<c path="cs.system.reflection.Module"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="sender:e:callback:object">
				<d/>
				<c path="cs.system.ResolveEventArgs"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<c path="cs.system.reflection.Module"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.ModuleResolveEventHandler"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.reflection.ModuleResolveEventHandler" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.ModuleResolveEventHandler">
		<from><icast field="FromHaxeFunction"><f a=":">
	<d/>
	<c path="cs.system.ResolveEventArgs"/>
	<c path="cs.system.reflection.Module"/>
</f></icast></from>
		<this><c path="cs.system.reflection.Delegate_ModuleResolveEventHandler"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.reflection._ModuleResolveEventHandler.ModuleResolveEventHandler_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.ModuleResolveEventHandler" private="1" module="cs.system.reflection.ModuleResolveEventHandler">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=":">
				<d/>
				<c path="cs.system.ResolveEventArgs"/>
				<c path="cs.system.reflection.Module"/>
			</f>
			<x path="cs.system.reflection.ModuleResolveEventHandler"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=":">
				<d/>
				<c path="cs.system.ResolveEventArgs"/>
				<c path="cs.system.reflection.Module"/>
			</f>
			<x path="cs.system.reflection.ModuleResolveEventHandler"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.reflection.Delegate_ModuleResolveEventHandler"/>
			<c path="cs.system.reflection.Delegate_ModuleResolveEventHandler"/>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.reflection.ModuleResolveEventHandler"/>
			<x path="cs.system.reflection.ModuleResolveEventHandler"/>
			<x path="cs.system.reflection.ModuleResolveEventHandler"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.reflection.ModuleResolveEventHandler"/>
			<x path="cs.system.reflection.ModuleResolveEventHandler"/>
			<x path="cs.system.reflection.ModuleResolveEventHandler"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system.reflection._ModuleResolveEventHandler.ModuleResolveEventHandler_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.ModuleResolveEventHandler" private="1" module="cs.system.reflection.ModuleResolveEventHandler">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=":">
					<d/>
					<c path="cs.system.ResolveEventArgs"/>
					<c path="cs.system.reflection.Module"/>
				</f>
				<x path="cs.system.reflection.ModuleResolveEventHandler"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=":">
					<d/>
					<c path="cs.system.ResolveEventArgs"/>
					<c path="cs.system.reflection.Module"/>
				</f>
				<x path="cs.system.reflection.ModuleResolveEventHandler"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.reflection.Delegate_ModuleResolveEventHandler"/>
				<c path="cs.system.reflection.Delegate_ModuleResolveEventHandler"/>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.reflection.ModuleResolveEventHandler"/>
				<x path="cs.system.reflection.ModuleResolveEventHandler"/>
				<x path="cs.system.reflection.ModuleResolveEventHandler"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.reflection.ModuleResolveEventHandler"/>
				<x path="cs.system.reflection.ModuleResolveEventHandler"/>
				<x path="cs.system.reflection.ModuleResolveEventHandler"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<enum path="cs.system.reflection.ParameterAttributes" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.ParameterAttributes">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<In><meta><m n=":csNative"><e>1</e></m></meta></In>
		<Out><meta><m n=":csNative"><e>2</e></m></meta></Out>
		<Lcid><meta><m n=":csNative"><e>4</e></m></meta></Lcid>
		<Retval><meta><m n=":csNative"><e>8</e></m></meta></Retval>
		<Optional><meta><m n=":csNative"><e>16</e></m></meta></Optional>
		<HasDefault><meta><m n=":csNative"><e>4096</e></m></meta></HasDefault>
		<HasFieldMarshal><meta><m n=":csNative"><e>8192</e></m></meta></HasFieldMarshal>
		<Reserved3><meta><m n=":csNative"><e>16384</e></m></meta></Reserved3>
		<Reserved4><meta><m n=":csNative"><e>32768</e></m></meta></Reserved4>
		<ReservedMask><meta><m n=":csNative"><e>61440</e></m></meta></ReservedMask>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.ParameterAttributes"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.runtime.interopservices._ParameterInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._ParameterInfo" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method">
			<f a="riid:rgszNames:cNames:lcid:rgDispId">
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<c path="cs.system.IntPtr"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetIDsOfNames>
		<GetTypeInfo public="1" set="method">
			<f a="iTInfo:lcid:ppTInfo">
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfo>
		<GetTypeInfoCount public="1" set="method">
			<f a="pcTInfo">
				<t path="cs.Out"><x path="UInt"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfoCount>
		<Invoke public="1" set="method">
			<f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
				<x path="UInt"/>
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<x path="UInt"/>
				<t path="cs.types.Int16"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._ParameterInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.ParameterInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.ParameterInfo" extern="1">
		<implements path="cs.system.reflection.ICustomAttributeProvider"/>
		<implements path="cs.system.runtime.interopservices._ParameterInfo"/>
		<RawDefaultValue public="1" get="accessor" set="null"><d/></RawDefaultValue>
		<MetadataToken public="1" get="accessor" set="null"><x path="Int"/></MetadataToken>
		<Position public="1" get="accessor" set="null"><x path="Int"/></Position>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<Member public="1" get="accessor" set="null"><c path="cs.system.reflection.MemberInfo"/></Member>
		<IsRetval public="1" get="accessor" set="null"><x path="Bool"/></IsRetval>
		<IsOut public="1" get="accessor" set="null"><x path="Bool"/></IsOut>
		<IsOptional public="1" get="accessor" set="null"><x path="Bool"/></IsOptional>
		<IsLcid public="1" get="accessor" set="null"><x path="Bool"/></IsLcid>
		<IsIn public="1" get="accessor" set="null"><x path="Bool"/></IsIn>
		<DefaultValue public="1" get="accessor" set="null"><d/></DefaultValue>
		<Attributes public="1" get="accessor" set="null"><e path="cs.system.reflection.ParameterAttributes"/></Attributes>
		<ParameterType public="1" get="accessor" set="null"><c path="cs.system.Type"/></ParameterType>
		<AttrsImpl><e path="cs.system.reflection.ParameterAttributes"/></AttrsImpl>
		<PositionImpl><x path="Int"/></PositionImpl>
		<NameImpl><c path="String"/></NameImpl>
		<MemberImpl><c path="cs.system.reflection.MemberInfo"/></MemberImpl>
		<DefaultValueImpl><d/></DefaultValueImpl>
		<ClassImpl><c path="cs.system.Type"/></ClassImpl>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<get_ParameterType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_ParameterType>
		<get_Attributes set="method">
			<f a=""><e path="cs.system.reflection.ParameterAttributes"/></f>
			<meta><m n=":overload"/></meta>
		</get_Attributes>
		<get_DefaultValue set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_DefaultValue>
		<get_IsIn final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsIn>
		<get_IsLcid final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsLcid>
		<get_IsOptional final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsOptional>
		<get_IsOut final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsOut>
		<get_IsRetval final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsRetval>
		<get_Member set="method">
			<f a=""><c path="cs.system.reflection.MemberInfo"/></f>
			<meta><m n=":overload"/></meta>
		</get_Member>
		<get_Name set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<get_Position set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Position>
		<get_MetadataToken final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_MetadataToken>
		<GetCustomAttributes public="1" set="method">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetCustomAttributes public="1" set="method">
	<f a="attributeType:inherit">
		<c path="cs.system.Type"/>
		<x path="Bool"/>
		<c path="cs.NativeArray"><d/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<IsDefined public="1" set="method">
			<f a="attributeType:inherit">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsDefined>
		<GetOptionalCustomModifiers public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetOptionalCustomModifiers>
		<GetRequiredCustomModifiers public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetRequiredCustomModifiers>
		<get_RawDefaultValue set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_RawDefaultValue>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.ParameterInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.ParameterModifier" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.ParameterModifier" extern="1">
		<extends path="cs.system.ValueType"/>
		<get_Item final="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</get_Item>
		<set_Item final="1" set="method">
			<f a="index:value">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Item>
		<new final="1" public="1" set="method">
			<f a="parameterCount">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.ParameterModifier"</e></m>
		</meta>
	</class>
	<enum path="cs.system.reflection.PortableExecutableKinds" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.PortableExecutableKinds">
		<NotAPortableExecutableImage><meta><m n=":csNative"><e>0</e></m></meta></NotAPortableExecutableImage>
		<ILOnly><meta><m n=":csNative"><e>1</e></m></meta></ILOnly>
		<Required32Bit><meta><m n=":csNative"><e>2</e></m></meta></Required32Bit>
		<PE32Plus><meta><m n=":csNative"><e>4</e></m></meta></PE32Plus>
		<Unmanaged32Bit><meta><m n=":csNative"><e>8</e></m></meta></Unmanaged32Bit>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.PortableExecutableKinds"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.reflection.ProcessorArchitecture" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.ProcessorArchitecture">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<MSIL><meta><m n=":csNative"><e>1</e></m></meta></MSIL>
		<X86><meta><m n=":csNative"><e>2</e></m></meta></X86>
		<IA64><meta><m n=":csNative"><e>3</e></m></meta></IA64>
		<Amd64><meta><m n=":csNative"><e>4</e></m></meta></Amd64>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.ProcessorArchitecture"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.reflection.PropertyAttributes" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.PropertyAttributes">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<SpecialName><meta><m n=":csNative"><e>512</e></m></meta></SpecialName>
		<RTSpecialName><meta><m n=":csNative"><e>1024</e></m></meta></RTSpecialName>
		<HasDefault><meta><m n=":csNative"><e>4096</e></m></meta></HasDefault>
		<Reserved2><meta><m n=":csNative"><e>8192</e></m></meta></Reserved2>
		<Reserved3><meta><m n=":csNative"><e>16384</e></m></meta></Reserved3>
		<Reserved4><meta><m n=":csNative"><e>32768</e></m></meta></Reserved4>
		<ReservedMask><meta><m n=":csNative"><e>62464</e></m></meta></ReservedMask>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.PropertyAttributes"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.runtime.interopservices._PropertyInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._PropertyInfo" extern="1" interface="1">
		<ReflectedType public="1" get="accessor" set="null"><c path="cs.system.Type"/></ReflectedType>
		<PropertyType public="1" get="accessor" set="null"><c path="cs.system.Type"/></PropertyType>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<MemberType public="1" get="accessor" set="null"><e path="cs.system.reflection.MemberTypes"/></MemberType>
		<IsSpecialName public="1" get="accessor" set="null"><x path="Bool"/></IsSpecialName>
		<DeclaringType public="1" get="accessor" set="null"><c path="cs.system.Type"/></DeclaringType>
		<CanWrite public="1" get="accessor" set="null"><x path="Bool"/></CanWrite>
		<CanRead public="1" get="accessor" set="null"><x path="Bool"/></CanRead>
		<Attributes public="1" get="accessor" set="null"><e path="cs.system.reflection.PropertyAttributes"/></Attributes>
		<GetAccessors public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetAccessors public="1" set="method">
	<f a="nonPublic">
		<x path="Bool"/>
		<c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetAccessors></overloads>
		</GetAccessors>
		<GetCustomAttributes public="1" set="method">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetCustomAttributes public="1" set="method">
	<f a="attributeType:inherit">
		<c path="cs.system.Type"/>
		<x path="Bool"/>
		<c path="cs.NativeArray"><d/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<GetGetMethod public="1" set="method">
			<f a=""><c path="cs.system.reflection.MethodInfo"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetGetMethod public="1" set="method">
	<f a="nonPublic">
		<x path="Bool"/>
		<c path="cs.system.reflection.MethodInfo"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetGetMethod></overloads>
		</GetGetMethod>
		<GetIndexParameters public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.ParameterInfo"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetIndexParameters>
		<GetSetMethod public="1" set="method">
			<f a=""><c path="cs.system.reflection.MethodInfo"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetSetMethod public="1" set="method">
	<f a="nonPublic">
		<x path="Bool"/>
		<c path="cs.system.reflection.MethodInfo"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetSetMethod></overloads>
		</GetSetMethod>
		<GetIDsOfNames public="1" set="method">
			<f a="riid:rgszNames:cNames:lcid:rgDispId">
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<c path="cs.system.IntPtr"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetIDsOfNames>
		<GetTypeInfo public="1" set="method">
			<f a="iTInfo:lcid:ppTInfo">
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfo>
		<GetTypeInfoCount public="1" set="method">
			<f a="pcTInfo">
				<t path="cs.Out"><x path="UInt"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfoCount>
		<Invoke public="1" set="method">
			<f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
				<x path="UInt"/>
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<x path="UInt"/>
				<t path="cs.types.Int16"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<GetType public="1" set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</GetType>
		<GetValue public="1" set="method">
			<f a="obj:index">
				<d/>
				<c path="cs.NativeArray"><d/></c>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetValue public="1" set="method">
	<f a="obj:invokeAttr:binder:index:culture">
		<d/>
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.system.reflection.Binder"/>
		<c path="cs.NativeArray"><d/></c>
		<c path="cs.system.globalization.CultureInfo"/>
		<d/>
	</f>
	<meta><m n=":overload"/></meta>
</GetValue></overloads>
		</GetValue>
		<IsDefined public="1" set="method">
			<f a="attributeType:inherit">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsDefined>
		<SetValue public="1" set="method">
			<f a="obj:value:index">
				<d/>
				<d/>
				<c path="cs.NativeArray"><d/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><SetValue public="1" set="method">
	<f a="obj:value:invokeAttr:binder:index:culture">
		<d/>
		<d/>
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.system.reflection.Binder"/>
		<c path="cs.NativeArray"><d/></c>
		<c path="cs.system.globalization.CultureInfo"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</SetValue></overloads>
		</SetValue>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<get_Attributes set="method">
			<f a=""><e path="cs.system.reflection.PropertyAttributes"/></f>
			<meta><m n=":overload"/></meta>
		</get_Attributes>
		<get_CanRead set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_CanRead>
		<get_CanWrite set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_CanWrite>
		<get_DeclaringType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_DeclaringType>
		<get_IsSpecialName set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSpecialName>
		<get_MemberType set="method">
			<f a=""><e path="cs.system.reflection.MemberTypes"/></f>
			<meta><m n=":overload"/></meta>
		</get_MemberType>
		<get_Name set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<get_PropertyType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_PropertyType>
		<get_ReflectedType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReflectedType>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._PropertyInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.PropertyInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.PropertyInfo" extern="1">
		<extends path="cs.system.reflection.MemberInfo"/>
		<implements path="cs.system.runtime.interopservices._PropertyInfo"/>
		<PropertyType public="1" get="accessor" set="null"><c path="cs.system.Type"/></PropertyType>
		<MemberType public="1" get="accessor" set="null" override="1"><e path="cs.system.reflection.MemberTypes"/></MemberType>
		<IsSpecialName public="1" get="accessor" set="null"><x path="Bool"/></IsSpecialName>
		<CanWrite public="1" get="accessor" set="null"><x path="Bool"/></CanWrite>
		<CanRead public="1" get="accessor" set="null"><x path="Bool"/></CanRead>
		<Attributes public="1" get="accessor" set="null"><e path="cs.system.reflection.PropertyAttributes"/></Attributes>
		<get_Attributes set="method">
			<f a=""><e path="cs.system.reflection.PropertyAttributes"/></f>
			<meta><m n=":overload"/></meta>
		</get_Attributes>
		<get_CanRead set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_CanRead>
		<get_CanWrite set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_CanWrite>
		<get_IsSpecialName final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSpecialName>
		<get_MemberType set="method" override="1">
			<f a=""><e path="cs.system.reflection.MemberTypes"/></f>
			<meta><m n=":overload"/></meta>
		</get_MemberType>
		<get_PropertyType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_PropertyType>
		<GetAccessors final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetAccessors public="1" set="method">
	<f a="nonPublic">
		<x path="Bool"/>
		<c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetAccessors></overloads>
		</GetAccessors>
		<GetGetMethod final="1" public="1" set="method">
			<f a=""><c path="cs.system.reflection.MethodInfo"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetGetMethod public="1" set="method">
	<f a="nonPublic">
		<x path="Bool"/>
		<c path="cs.system.reflection.MethodInfo"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetGetMethod></overloads>
		</GetGetMethod>
		<GetIndexParameters public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.ParameterInfo"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetIndexParameters>
		<GetSetMethod final="1" public="1" set="method">
			<f a=""><c path="cs.system.reflection.MethodInfo"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetSetMethod public="1" set="method">
	<f a="nonPublic">
		<x path="Bool"/>
		<c path="cs.system.reflection.MethodInfo"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetSetMethod></overloads>
		</GetSetMethod>
		<GetValue public="1" set="method">
			<f a="obj:index">
				<d/>
				<c path="cs.NativeArray"><d/></c>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetValue public="1" set="method">
	<f a="obj:invokeAttr:binder:index:culture">
		<d/>
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.system.reflection.Binder"/>
		<c path="cs.NativeArray"><d/></c>
		<c path="cs.system.globalization.CultureInfo"/>
		<d/>
	</f>
	<meta><m n=":overload"/></meta>
</GetValue></overloads>
		</GetValue>
		<SetValue public="1" set="method">
			<f a="obj:value:index">
				<d/>
				<d/>
				<c path="cs.NativeArray"><d/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><SetValue public="1" set="method">
	<f a="obj:value:invokeAttr:binder:index:culture">
		<d/>
		<d/>
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.system.reflection.Binder"/>
		<c path="cs.NativeArray"><d/></c>
		<c path="cs.system.globalization.CultureInfo"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</SetValue></overloads>
		</SetValue>
		<GetOptionalCustomModifiers public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetOptionalCustomModifiers>
		<GetRequiredCustomModifiers public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetRequiredCustomModifiers>
		<GetConstantValue public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</GetConstantValue>
		<GetRawConstantValue public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</GetRawConstantValue>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.PropertyInfo"</e></m>
		</meta>
	</class>
	<enum path="cs.system.reflection.ResourceAttributes" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.ResourceAttributes">
		<Public><meta><m n=":csNative"><e>1</e></m></meta></Public>
		<Private><meta><m n=":csNative"><e>2</e></m></meta></Private>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.ResourceAttributes"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.reflection.ResourceLocation" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.ResourceLocation">
		<Embedded><meta><m n=":csNative"><e>1</e></m></meta></Embedded>
		<ContainedInAnotherAssembly><meta><m n=":csNative"><e>2</e></m></meta></ContainedInAnotherAssembly>
		<ContainedInManifestFile><meta><m n=":csNative"><e>4</e></m></meta></ContainedInManifestFile>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.ResourceLocation"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.reflection.StrongNameKeyPair" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.StrongNameKeyPair" extern="1">
		<implements path="cs.system.runtime.serialization.IDeserializationCallback"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<PublicKey public="1" get="accessor" set="null"><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></PublicKey>
		<get_PublicKey final="1" set="method">
			<f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f>
			<meta><m n=":overload"/></meta>
		</get_PublicKey>
		<new final="1" public="1" set="method">
			<f a="keyPairArray">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" set="method">
					<f a="info:context">
						<c path="cs.system.runtime.serialization.SerializationInfo"/>
						<c path="cs.system.runtime.serialization.StreamingContext"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":protected"/>
						<m n=":overload"/>
					</meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="keyPairContainer">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="keyPairFile">
						<c path="cs.system.io.FileStream"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.StrongNameKeyPair"</e></m>
		</meta>
	</class>
	<enum path="cs.system.reflection.TypeAttributes" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.TypeAttributes">
		<NotPublic><meta><m n=":csNative"><e>0</e></m></meta></NotPublic>
		<AutoLayout><meta><m n=":csNative"><e>0</e></m></meta></AutoLayout>
		<Class><meta><m n=":csNative"><e>0</e></m></meta></Class>
		<AnsiClass><meta><m n=":csNative"><e>0</e></m></meta></AnsiClass>
		<Public><meta><m n=":csNative"><e>1</e></m></meta></Public>
		<NestedPublic><meta><m n=":csNative"><e>2</e></m></meta></NestedPublic>
		<NestedPrivate><meta><m n=":csNative"><e>3</e></m></meta></NestedPrivate>
		<NestedFamily><meta><m n=":csNative"><e>4</e></m></meta></NestedFamily>
		<NestedAssembly><meta><m n=":csNative"><e>5</e></m></meta></NestedAssembly>
		<NestedFamANDAssem><meta><m n=":csNative"><e>6</e></m></meta></NestedFamANDAssem>
		<VisibilityMask><meta><m n=":csNative"><e>7</e></m></meta></VisibilityMask>
		<NestedFamORAssem><meta><m n=":csNative"><e>7</e></m></meta></NestedFamORAssem>
		<SequentialLayout><meta><m n=":csNative"><e>8</e></m></meta></SequentialLayout>
		<ExplicitLayout><meta><m n=":csNative"><e>16</e></m></meta></ExplicitLayout>
		<LayoutMask><meta><m n=":csNative"><e>24</e></m></meta></LayoutMask>
		<ClassSemanticsMask><meta><m n=":csNative"><e>32</e></m></meta></ClassSemanticsMask>
		<Interface><meta><m n=":csNative"><e>32</e></m></meta></Interface>
		<Abstract><meta><m n=":csNative"><e>128</e></m></meta></Abstract>
		<Sealed><meta><m n=":csNative"><e>256</e></m></meta></Sealed>
		<SpecialName><meta><m n=":csNative"><e>1024</e></m></meta></SpecialName>
		<RTSpecialName><meta><m n=":csNative"><e>2048</e></m></meta></RTSpecialName>
		<Import><meta><m n=":csNative"><e>4096</e></m></meta></Import>
		<Serializable><meta><m n=":csNative"><e>8192</e></m></meta></Serializable>
		<UnicodeClass><meta><m n=":csNative"><e>65536</e></m></meta></UnicodeClass>
		<AutoClass><meta><m n=":csNative"><e>131072</e></m></meta></AutoClass>
		<StringFormatMask><meta><m n=":csNative"><e>196608</e></m></meta></StringFormatMask>
		<CustomFormatClass><meta><m n=":csNative"><e>196608</e></m></meta></CustomFormatClass>
		<HasSecurity><meta><m n=":csNative"><e>262144</e></m></meta></HasSecurity>
		<ReservedMask><meta><m n=":csNative"><e>264192</e></m></meta></ReservedMask>
		<BeforeFieldInit><meta><m n=":csNative"><e>1048576</e></m></meta></BeforeFieldInit>
		<CustomFormatMask><meta><m n=":csNative"><e>12582912</e></m></meta></CustomFormatMask>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.TypeAttributes"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.reflection.Delegate_TypeFilter" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.TypeFilter" module="cs.system.reflection.TypeFilter" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.reflection.TypeFilter"/>
	<x path="cs.system.reflection.TypeFilter"/>
	<x path="cs.system.reflection.TypeFilter"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.reflection.TypeFilter"/>
	<x path="cs.system.reflection.TypeFilter"/>
	<x path="cs.system.reflection.TypeFilter"/>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="m:filterCriteria">
				<c path="cs.system.Type"/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="m:filterCriteria:callback:object">
				<c path="cs.system.Type"/>
				<d/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.TypeFilter"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.reflection.TypeFilter" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.TypeFilter">
		<from><icast field="FromHaxeFunction"><f a=":">
	<c path="cs.system.Type"/>
	<d/>
	<x path="Bool"/>
</f></icast></from>
		<this><c path="cs.system.reflection.Delegate_TypeFilter"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.reflection._TypeFilter.TypeFilter_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.TypeFilter" private="1" module="cs.system.reflection.TypeFilter">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=":">
				<c path="cs.system.Type"/>
				<d/>
				<x path="Bool"/>
			</f>
			<x path="cs.system.reflection.TypeFilter"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=":">
				<c path="cs.system.Type"/>
				<d/>
				<x path="Bool"/>
			</f>
			<x path="cs.system.reflection.TypeFilter"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.reflection.Delegate_TypeFilter"/>
			<c path="cs.system.reflection.Delegate_TypeFilter"/>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.reflection.TypeFilter"/>
			<x path="cs.system.reflection.TypeFilter"/>
			<x path="cs.system.reflection.TypeFilter"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.reflection.TypeFilter"/>
			<x path="cs.system.reflection.TypeFilter"/>
			<x path="cs.system.reflection.TypeFilter"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system.reflection._TypeFilter.TypeFilter_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.TypeFilter" private="1" module="cs.system.reflection.TypeFilter">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=":">
					<c path="cs.system.Type"/>
					<d/>
					<x path="Bool"/>
				</f>
				<x path="cs.system.reflection.TypeFilter"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=":">
					<c path="cs.system.Type"/>
					<d/>
					<x path="Bool"/>
				</f>
				<x path="cs.system.reflection.TypeFilter"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.reflection.Delegate_TypeFilter"/>
				<c path="cs.system.reflection.Delegate_TypeFilter"/>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.reflection.TypeFilter"/>
				<x path="cs.system.reflection.TypeFilter"/>
				<x path="cs.system.reflection.TypeFilter"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.reflection.TypeFilter"/>
				<x path="cs.system.reflection.TypeFilter"/>
				<x path="cs.system.reflection.TypeFilter"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="cs.system.runtime.interopservices._AssemblyBuilder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._AssemblyBuilder" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method">
			<f a="riid:rgszNames:cNames:lcid:rgDispId">
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<c path="cs.system.IntPtr"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetIDsOfNames>
		<GetTypeInfo public="1" set="method">
			<f a="iTInfo:lcid:ppTInfo">
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfo>
		<GetTypeInfoCount public="1" set="method">
			<f a="pcTInfo">
				<t path="cs.Out"><x path="UInt"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfoCount>
		<Invoke public="1" set="method">
			<f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
				<x path="UInt"/>
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<x path="UInt"/>
				<t path="cs.types.Int16"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._AssemblyBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.AssemblyBuilder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.AssemblyBuilder" extern="1">
		<extends path="cs.system.reflection.Assembly"/>
		<implements path="cs.system.runtime.interopservices._AssemblyBuilder"/>
		<ReflectionOnly public="1" get="accessor" set="null" override="1"><x path="Bool"/></ReflectionOnly>
		<ImageRuntimeVersion public="1" get="accessor" set="null" override="1"><c path="String"/></ImageRuntimeVersion>
		<Location public="1" get="accessor" set="null" override="1"><c path="String"/></Location>
		<EntryPoint public="1" get="accessor" set="null" override="1"><c path="cs.system.reflection.MethodInfo"/></EntryPoint>
		<CodeBase public="1" get="accessor" set="null" override="1"><c path="String"/></CodeBase>
		<get_CodeBase set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_CodeBase>
		<get_EntryPoint set="method" override="1">
			<f a=""><c path="cs.system.reflection.MethodInfo"/></f>
			<meta><m n=":overload"/></meta>
		</get_EntryPoint>
		<get_Location set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Location>
		<get_ImageRuntimeVersion set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_ImageRuntimeVersion>
		<get_ReflectionOnly set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReflectionOnly>
		<AddResourceFile final="1" public="1" set="method">
			<f a="name:fileName">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><AddResourceFile final="1" public="1" set="method">
	<f a="name:fileName:attribute">
		<c path="String"/>
		<c path="String"/>
		<e path="cs.system.reflection.ResourceAttributes"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</AddResourceFile></overloads>
		</AddResourceFile>
		<DefineDynamicModule final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.reflection.emit.ModuleBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<DefineDynamicModule final="1" public="1" set="method">
					<f a="name:fileName:emitSymbolInfo">
						<c path="String"/>
						<c path="String"/>
						<x path="Bool"/>
						<c path="cs.system.reflection.emit.ModuleBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineDynamicModule>
				<DefineDynamicModule final="1" public="1" set="method">
					<f a="name:fileName">
						<c path="String"/>
						<c path="String"/>
						<c path="cs.system.reflection.emit.ModuleBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineDynamicModule>
				<DefineDynamicModule final="1" public="1" set="method">
					<f a="name:emitSymbolInfo">
						<c path="String"/>
						<x path="Bool"/>
						<c path="cs.system.reflection.emit.ModuleBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineDynamicModule>
			</overloads>
		</DefineDynamicModule>
		<DefineResource final="1" public="1" set="method">
			<f a="name:description:fileName">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="cs.system.resources.IResourceWriter"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><DefineResource final="1" public="1" set="method">
	<f a="name:description:fileName:attribute">
		<c path="String"/>
		<c path="String"/>
		<c path="String"/>
		<e path="cs.system.reflection.ResourceAttributes"/>
		<c path="cs.system.resources.IResourceWriter"/>
	</f>
	<meta><m n=":overload"/></meta>
</DefineResource></overloads>
		</DefineResource>
		<DefineUnmanagedResource final="1" public="1" set="method">
			<f a="resource">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><DefineUnmanagedResource final="1" public="1" set="method">
	<f a="resourceFileName">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</DefineUnmanagedResource></overloads>
		</DefineUnmanagedResource>
		<DefineVersionInfoResource final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><DefineVersionInfoResource final="1" public="1" set="method">
	<f a="product:productVersion:company:copyright:trademark">
		<c path="String"/>
		<c path="String"/>
		<c path="String"/>
		<c path="String"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</DefineVersionInfoResource></overloads>
		</DefineVersionInfoResource>
		<GetDynamicModule final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.reflection.emit.ModuleBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetDynamicModule>
		<GetExportedTypes public="1" set="method" override="1">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetExportedTypes>
		<GetFile public="1" set="method" override="1">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.io.FileStream"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetFile>
		<GetFiles public="1" set="method" override="1">
			<f a="getResourceModules">
				<x path="Bool"/>
				<c path="cs.NativeArray"><c path="cs.system.io.FileStream"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</GetFiles>
		<GetManifestResourceInfo public="1" set="method" override="1">
			<f a="resourceName">
				<c path="String"/>
				<c path="cs.system.reflection.ManifestResourceInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetManifestResourceInfo>
		<GetManifestResourceNames public="1" set="method" override="1">
			<f a=""><c path="cs.NativeArray"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetManifestResourceNames>
		<GetManifestResourceStream public="1" set="method" override="1">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.io.Stream"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetManifestResourceStream public="1" set="method">
	<f a="type:name">
		<c path="cs.system.Type"/>
		<c path="String"/>
		<c path="cs.system.io.Stream"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetManifestResourceStream></overloads>
		</GetManifestResourceStream>
		<Save final="1" public="1" set="method">
			<f a="assemblyFileName:portableExecutableKind:imageFileMachine">
				<c path="String"/>
				<e path="cs.system.reflection.PortableExecutableKinds"/>
				<e path="cs.system.reflection.ImageFileMachine"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><Save final="1" public="1" set="method">
	<f a="assemblyFileName">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</Save></overloads>
		</Save>
		<SetEntryPoint final="1" public="1" set="method">
			<f a="entryMethod">
				<c path="cs.system.reflection.MethodInfo"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><SetEntryPoint final="1" public="1" set="method">
	<f a="entryMethod:fileKind">
		<c path="cs.system.reflection.MethodInfo"/>
		<e path="cs.system.reflection.emit.PEFileKinds"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</SetEntryPoint></overloads>
		</SetEntryPoint>
		<SetCustomAttribute final="1" public="1" set="method">
			<f a="customBuilder">
				<c path="cs.system.reflection.emit.CustomAttributeBuilder"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><SetCustomAttribute final="1" public="1" set="method">
	<f a="con:binaryAttribute">
		<c path="cs.system.reflection.ConstructorInfo"/>
		<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</SetCustomAttribute></overloads>
		</SetCustomAttribute>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.AssemblyBuilder"</e></m>
		</meta>
	</class>
	<enum path="cs.system.reflection.emit.AssemblyBuilderAccess" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.AssemblyBuilderAccess">
		<Run><meta><m n=":csNative"><e>1</e></m></meta></Run>
		<Save><meta><m n=":csNative"><e>2</e></m></meta></Save>
		<RunAndSave><meta><m n=":csNative"><e>3</e></m></meta></RunAndSave>
		<ReflectionOnly><meta><m n=":csNative"><e>6</e></m></meta></ReflectionOnly>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.Emit.AssemblyBuilderAccess"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.runtime.interopservices._ConstructorBuilder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._ConstructorBuilder" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method">
			<f a="riid:rgszNames:cNames:lcid:rgDispId">
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<c path="cs.system.IntPtr"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetIDsOfNames>
		<GetTypeInfo public="1" set="method">
			<f a="iTInfo:lcid:ppTInfo">
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfo>
		<GetTypeInfoCount public="1" set="method">
			<f a="pcTInfo">
				<t path="cs.Out"><x path="UInt"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfoCount>
		<Invoke public="1" set="method">
			<f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
				<x path="UInt"/>
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<x path="UInt"/>
				<t path="cs.types.Int16"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._ConstructorBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.ConstructorBuilder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.ConstructorBuilder" extern="1">
		<extends path="cs.system.reflection.ConstructorInfo"/>
		<implements path="cs.system.runtime.interopservices._ConstructorBuilder"/>
		<Module public="1" get="accessor" set="null" override="1"><c path="cs.system.reflection.Module"/></Module>
		<Signature public="1" get="accessor" set="null"><c path="String"/></Signature>
		<Name public="1" get="accessor" set="null" override="1"><c path="String"/></Name>
		<ReturnType public="1" get="accessor" set="null"><c path="cs.system.Type"/></ReturnType>
		<DeclaringType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></DeclaringType>
		<ReflectedType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></ReflectedType>
		<Attributes public="1" get="accessor" set="null" override="1"><e path="cs.system.reflection.MethodAttributes"/></Attributes>
		<MethodHandle public="1" get="accessor" set="null" override="1"><c path="cs.system.RuntimeMethodHandle"/></MethodHandle>
		<InitLocals public="1" get="accessor" set="accessor"><x path="Bool"/></InitLocals>
		<CallingConvention public="1" get="accessor" set="null" override="1"><e path="cs.system.reflection.CallingConventions"/></CallingConvention>
		<get_CallingConvention set="method" override="1">
			<f a=""><e path="cs.system.reflection.CallingConventions"/></f>
			<meta><m n=":overload"/></meta>
		</get_CallingConvention>
		<get_InitLocals final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_InitLocals>
		<set_InitLocals final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_InitLocals>
		<GetMethodImplementationFlags public="1" set="method" override="1">
			<f a=""><e path="cs.system.reflection.MethodImplAttributes"/></f>
			<meta><m n=":overload"/></meta>
		</GetMethodImplementationFlags>
		<GetParameters public="1" set="method" override="1">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.ParameterInfo"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetParameters>
		<Invoke public="1" set="method" override="1">
			<f a="obj:invokeAttr:binder:parameters:culture">
				<d/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<c path="cs.NativeArray"><d/></c>
				<c path="cs.system.globalization.CultureInfo"/>
				<d/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":overload"/>
			</meta>
			<overloads><Invoke public="1" set="method">
	<f a="invokeAttr:binder:parameters:culture">
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.system.reflection.Binder"/>
		<c path="cs.NativeArray"><d/></c>
		<c path="cs.system.globalization.CultureInfo"/>
		<d/>
	</f>
	<meta>
		<m n=":noCompletion"/>
		<m n=":skipReflection"/>
		<m n=":overload"/>
	</meta>
</Invoke></overloads>
		</Invoke>
		<get_MethodHandle set="method" override="1">
			<f a=""><c path="cs.system.RuntimeMethodHandle"/></f>
			<meta><m n=":overload"/></meta>
		</get_MethodHandle>
		<get_Attributes set="method" override="1">
			<f a=""><e path="cs.system.reflection.MethodAttributes"/></f>
			<meta><m n=":overload"/></meta>
		</get_Attributes>
		<get_ReflectedType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReflectedType>
		<get_DeclaringType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_DeclaringType>
		<get_ReturnType final="1" set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReturnType>
		<get_Name set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<get_Signature final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Signature>
		<AddDeclarativeSecurity final="1" public="1" set="method">
			<f a="action:pset">
				<e path="cs.system.security.permissions.SecurityAction"/>
				<c path="cs.system.security.PermissionSet"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddDeclarativeSecurity>
		<DefineParameter final="1" public="1" set="method">
			<f a="iSequence:attributes:strParamName">
				<x path="Int"/>
				<e path="cs.system.reflection.ParameterAttributes"/>
				<c path="String"/>
				<c path="cs.system.reflection.emit.ParameterBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DefineParameter>
		<IsDefined public="1" set="method" override="1">
			<f a="attributeType:inherit">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsDefined>
		<GetCustomAttributes public="1" set="method" override="1">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetCustomAttributes public="1" set="method">
	<f a="attributeType:inherit">
		<c path="cs.system.Type"/>
		<x path="Bool"/>
		<c path="cs.NativeArray"><d/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<GetILGenerator final="1" public="1" set="method">
			<f a=""><c path="cs.system.reflection.emit.ILGenerator"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetILGenerator final="1" public="1" set="method">
	<f a="streamSize">
		<x path="Int"/>
		<c path="cs.system.reflection.emit.ILGenerator"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetILGenerator></overloads>
		</GetILGenerator>
		<SetCustomAttribute final="1" public="1" set="method">
			<f a="customBuilder">
				<c path="cs.system.reflection.emit.CustomAttributeBuilder"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><SetCustomAttribute final="1" public="1" set="method">
	<f a="con:binaryAttribute">
		<c path="cs.system.reflection.ConstructorInfo"/>
		<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</SetCustomAttribute></overloads>
		</SetCustomAttribute>
		<SetImplementationFlags final="1" public="1" set="method">
			<f a="attributes">
				<e path="cs.system.reflection.MethodImplAttributes"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetImplementationFlags>
		<GetModule final="1" public="1" set="method">
			<f a=""><c path="cs.system.reflection.Module"/></f>
			<meta><m n=":overload"/></meta>
		</GetModule>
		<GetToken final="1" public="1" set="method">
			<f a=""><c path="cs.system.reflection.emit.MethodToken"/></f>
			<meta><m n=":overload"/></meta>
		</GetToken>
		<SetSymCustomAttribute final="1" public="1" set="method">
			<f a="name:data">
				<c path="String"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetSymCustomAttribute>
		<get_Module set="method" override="1">
			<f a=""><c path="cs.system.reflection.Module"/></f>
			<meta><m n=":overload"/></meta>
		</get_Module>
		<ToString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.ConstructorBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.CustomAttributeBuilder_CustomAttributeInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.CustomAttributeBuilder" module="cs.system.reflection.emit.CustomAttributeBuilder" extern="1">
		<extends path="cs.system.ValueType"/>
		<namedParamValues public="1"><c path="cs.NativeArray"><d/></c></namedParamValues>
		<namedParamNames public="1"><c path="cs.NativeArray"><c path="String"/></c></namedParamNames>
		<ctorArgs public="1"><c path="cs.NativeArray"><d/></c></ctorArgs>
		<ctor public="1"><c path="cs.system.reflection.ConstructorInfo"/></ctor>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.CustomAttributeBuilder.CustomAttributeInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._CustomAttributeBuilder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._CustomAttributeBuilder" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method">
			<f a="riid:rgszNames:cNames:lcid:rgDispId">
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<c path="cs.system.IntPtr"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetIDsOfNames>
		<GetTypeInfo public="1" set="method">
			<f a="iTInfo:lcid:ppTInfo">
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfo>
		<GetTypeInfoCount public="1" set="method">
			<f a="pcTInfo">
				<t path="cs.Out"><x path="UInt"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfoCount>
		<Invoke public="1" set="method">
			<f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
				<x path="UInt"/>
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<x path="UInt"/>
				<t path="cs.types.Int16"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._CustomAttributeBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.CustomAttributeBuilder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.CustomAttributeBuilder" extern="1">
		<implements path="cs.system.runtime.interopservices._CustomAttributeBuilder"/>
		<new final="1" public="1" set="method">
			<f a="con:constructorArgs">
				<c path="cs.system.reflection.ConstructorInfo"/>
				<c path="cs.NativeArray"><d/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="con:constructorArgs:namedProperties:propertyValues:namedFields:fieldValues">
						<c path="cs.system.reflection.ConstructorInfo"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.NativeArray"><c path="cs.system.reflection.PropertyInfo"/></c>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.NativeArray"><c path="cs.system.reflection.FieldInfo"/></c>
						<c path="cs.NativeArray"><d/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="con:constructorArgs:namedProperties:propertyValues">
						<c path="cs.system.reflection.ConstructorInfo"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.NativeArray"><c path="cs.system.reflection.PropertyInfo"/></c>
						<c path="cs.NativeArray"><d/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="con:constructorArgs:namedFields:fieldValues">
						<c path="cs.system.reflection.ConstructorInfo"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.NativeArray"><c path="cs.system.reflection.FieldInfo"/></c>
						<c path="cs.NativeArray"><d/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.CustomAttributeBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._EnumBuilder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._EnumBuilder" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method">
			<f a="riid:rgszNames:cNames:lcid:rgDispId">
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<c path="cs.system.IntPtr"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetIDsOfNames>
		<GetTypeInfo public="1" set="method">
			<f a="iTInfo:lcid:ppTInfo">
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfo>
		<GetTypeInfoCount public="1" set="method">
			<f a="pcTInfo">
				<t path="cs.Out"><x path="UInt"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfoCount>
		<Invoke public="1" set="method">
			<f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
				<x path="UInt"/>
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<x path="UInt"/>
				<t path="cs.types.Int16"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._EnumBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.EnumBuilder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.EnumBuilder" extern="1">
		<extends path="cs.system.Type"/>
		<implements path="cs.system.runtime.interopservices._EnumBuilder"/>
		<UnderlyingSystemType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></UnderlyingSystemType>
		<UnderlyingField public="1" get="accessor" set="null"><c path="cs.system.reflection.emit.FieldBuilder"/></UnderlyingField>
		<TypeToken public="1" get="accessor" set="null"><c path="cs.system.reflection.emit.TypeToken"/></TypeToken>
		<TypeHandle public="1" get="accessor" set="null" override="1"><c path="cs.system.RuntimeTypeHandle"/></TypeHandle>
		<ReflectedType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></ReflectedType>
		<Namespace public="1" get="accessor" set="null" override="1"><c path="String"/></Namespace>
		<Name public="1" get="accessor" set="null" override="1"><c path="String"/></Name>
		<Module public="1" get="accessor" set="null" override="1"><c path="cs.system.reflection.Module"/></Module>
		<GUID public="1" get="accessor" set="null" override="1"><c path="cs.system.Guid"/></GUID>
		<FullName public="1" get="accessor" set="null" override="1"><c path="String"/></FullName>
		<DeclaringType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></DeclaringType>
		<BaseType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></BaseType>
		<AssemblyQualifiedName public="1" get="accessor" set="null" override="1"><c path="String"/></AssemblyQualifiedName>
		<Assembly public="1" get="accessor" set="null" override="1"><c path="cs.system.reflection.Assembly"/></Assembly>
		<get_Assembly set="method" override="1">
			<f a=""><c path="cs.system.reflection.Assembly"/></f>
			<meta><m n=":overload"/></meta>
		</get_Assembly>
		<get_AssemblyQualifiedName set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_AssemblyQualifiedName>
		<get_BaseType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_BaseType>
		<get_DeclaringType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_DeclaringType>
		<get_FullName set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_FullName>
		<get_GUID set="method" override="1">
			<f a=""><c path="cs.system.Guid"/></f>
			<meta><m n=":overload"/></meta>
		</get_GUID>
		<get_Module set="method" override="1">
			<f a=""><c path="cs.system.reflection.Module"/></f>
			<meta><m n=":overload"/></meta>
		</get_Module>
		<get_Name set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<get_Namespace set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Namespace>
		<get_ReflectedType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReflectedType>
		<get_TypeHandle set="method" override="1">
			<f a=""><c path="cs.system.RuntimeTypeHandle"/></f>
			<meta><m n=":overload"/></meta>
		</get_TypeHandle>
		<get_TypeToken final="1" set="method">
			<f a=""><c path="cs.system.reflection.emit.TypeToken"/></f>
			<meta><m n=":overload"/></meta>
		</get_TypeToken>
		<get_UnderlyingField final="1" set="method">
			<f a=""><c path="cs.system.reflection.emit.FieldBuilder"/></f>
			<meta><m n=":overload"/></meta>
		</get_UnderlyingField>
		<get_UnderlyingSystemType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_UnderlyingSystemType>
		<CreateType final="1" public="1" set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</CreateType>
		<DefineLiteral final="1" public="1" set="method">
			<f a="literalName:literalValue">
				<c path="String"/>
				<d/>
				<c path="cs.system.reflection.emit.FieldBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DefineLiteral>
		<GetAttributeFlagsImpl set="method" override="1">
			<f a=""><e path="cs.system.reflection.TypeAttributes"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</GetAttributeFlagsImpl>
		<GetConstructorImpl set="method" override="1">
			<f a="bindingAttr:binder:callConvention:types:modifiers">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<e path="cs.system.reflection.CallingConventions"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.reflection.ConstructorInfo"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</GetConstructorImpl>
		<GetConstructors public="1" set="method" override="1">
			<f a="bindingAttr">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ConstructorInfo"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</GetConstructors>
		<GetCustomAttributes public="1" set="method" override="1">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetCustomAttributes public="1" set="method">
	<f a="attributeType:inherit">
		<c path="cs.system.Type"/>
		<x path="Bool"/>
		<c path="cs.NativeArray"><d/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<GetElementType public="1" set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</GetElementType>
		<GetEvent public="1" set="method" override="1">
			<f a="name:bindingAttr">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.EventInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetEvent>
		<GetEvents public="1" set="method" override="1">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.EventInfo"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetEvents public="1" set="method">
	<f a="bindingAttr">
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.NativeArray"><c path="cs.system.reflection.EventInfo"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetEvents></overloads>
		</GetEvents>
		<GetField public="1" set="method" override="1">
			<f a="name:bindingAttr">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.FieldInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetField>
		<GetFields public="1" set="method" override="1">
			<f a="bindingAttr">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.FieldInfo"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</GetFields>
		<GetInterface public="1" set="method" override="1">
			<f a="name:ignoreCase">
				<c path="String"/>
				<x path="Bool"/>
				<c path="cs.system.Type"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetInterface>
		<GetInterfaceMap public="1" set="method" override="1">
			<f a="interfaceType">
				<c path="cs.system.Type"/>
				<c path="cs.system.reflection.InterfaceMapping"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetInterfaceMap>
		<GetInterfaces public="1" set="method" override="1">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetInterfaces>
		<GetMember public="1" set="method" override="1">
			<f a="name:type:bindingAttr">
				<c path="String"/>
				<e path="cs.system.reflection.MemberTypes"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</GetMember>
		<GetMembers public="1" set="method" override="1">
			<f a="bindingAttr">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</GetMembers>
		<GetMethodImpl set="method" override="1">
			<f a="name:bindingAttr:binder:callConvention:types:modifiers">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<e path="cs.system.reflection.CallingConventions"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.reflection.MethodInfo"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</GetMethodImpl>
		<GetMethods public="1" set="method" override="1">
			<f a="bindingAttr">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</GetMethods>
		<GetNestedType public="1" set="method" override="1">
			<f a="name:bindingAttr">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.Type"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetNestedType>
		<GetNestedTypes public="1" set="method" override="1">
			<f a="bindingAttr">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</GetNestedTypes>
		<GetProperties public="1" set="method" override="1">
			<f a="bindingAttr">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.PropertyInfo"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</GetProperties>
		<GetPropertyImpl set="method" override="1">
			<f a="name:bindingAttr:binder:returnType:types:modifiers">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<c path="cs.system.Type"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.reflection.PropertyInfo"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</GetPropertyImpl>
		<HasElementTypeImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</HasElementTypeImpl>
		<InvokeMember public="1" set="method" override="1">
			<f a="name:invokeAttr:binder:target:args:modifiers:culture:namedParameters">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<d/>
				<c path="cs.NativeArray"><d/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.globalization.CultureInfo"/>
				<c path="cs.NativeArray"><c path="String"/></c>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</InvokeMember>
		<IsArrayImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</IsArrayImpl>
		<IsByRefImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</IsByRefImpl>
		<IsCOMObjectImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</IsCOMObjectImpl>
		<IsPointerImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</IsPointerImpl>
		<IsPrimitiveImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</IsPrimitiveImpl>
		<IsValueTypeImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</IsValueTypeImpl>
		<IsDefined public="1" set="method" override="1">
			<f a="attributeType:inherit">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsDefined>
		<MakeArrayType public="1" set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><MakeArrayType public="1" set="method">
	<f a="rank">
		<x path="Int"/>
		<c path="cs.system.Type"/>
	</f>
	<meta><m n=":overload"/></meta>
</MakeArrayType></overloads>
		</MakeArrayType>
		<MakeByRefType public="1" set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</MakeByRefType>
		<MakePointerType public="1" set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</MakePointerType>
		<SetCustomAttribute final="1" public="1" set="method">
			<f a="customBuilder">
				<c path="cs.system.reflection.emit.CustomAttributeBuilder"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><SetCustomAttribute final="1" public="1" set="method">
	<f a="con:binaryAttribute">
		<c path="cs.system.reflection.ConstructorInfo"/>
		<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</SetCustomAttribute></overloads>
		</SetCustomAttribute>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.EnumBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._EventBuilder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._EventBuilder" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method">
			<f a="riid:rgszNames:cNames:lcid:rgDispId">
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<c path="cs.system.IntPtr"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetIDsOfNames>
		<GetTypeInfo public="1" set="method">
			<f a="iTInfo:lcid:ppTInfo">
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfo>
		<GetTypeInfoCount public="1" set="method">
			<f a="pcTInfo">
				<t path="cs.Out"><x path="UInt"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfoCount>
		<Invoke public="1" set="method">
			<f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
				<x path="UInt"/>
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<x path="UInt"/>
				<t path="cs.types.Int16"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._EventBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.EventBuilder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.EventBuilder" extern="1">
		<implements path="cs.system.runtime.interopservices._EventBuilder"/>
		<AddOtherMethod final="1" public="1" set="method">
			<f a="mdBuilder">
				<c path="cs.system.reflection.emit.MethodBuilder"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddOtherMethod>
		<GetEventToken final="1" public="1" set="method">
			<f a=""><c path="cs.system.reflection.emit.EventToken"/></f>
			<meta><m n=":overload"/></meta>
		</GetEventToken>
		<SetAddOnMethod final="1" public="1" set="method">
			<f a="mdBuilder">
				<c path="cs.system.reflection.emit.MethodBuilder"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetAddOnMethod>
		<SetRaiseMethod final="1" public="1" set="method">
			<f a="mdBuilder">
				<c path="cs.system.reflection.emit.MethodBuilder"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetRaiseMethod>
		<SetRemoveOnMethod final="1" public="1" set="method">
			<f a="mdBuilder">
				<c path="cs.system.reflection.emit.MethodBuilder"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetRemoveOnMethod>
		<SetCustomAttribute final="1" public="1" set="method">
			<f a="customBuilder">
				<c path="cs.system.reflection.emit.CustomAttributeBuilder"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><SetCustomAttribute final="1" public="1" set="method">
	<f a="con:binaryAttribute">
		<c path="cs.system.reflection.ConstructorInfo"/>
		<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</SetCustomAttribute></overloads>
		</SetCustomAttribute>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.EventBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.EventToken" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.EventToken" extern="1">
		<extends path="cs.system.ValueType"/>
		<Empty public="1" set="null" static="1">
			<c path="cs.system.reflection.emit.EventToken"/>
			<meta><m n=":readOnly"/></meta>
		</Empty>
		<op_Equality final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="cs.system.reflection.emit.EventToken"/>
				<c path="cs.system.reflection.emit.EventToken"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Equality>
		<op_Inequality final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="cs.system.reflection.emit.EventToken"/>
				<c path="cs.system.reflection.emit.EventToken"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Inequality>
		<Token public="1" get="accessor" set="null"><x path="Int"/></Token>
		<get_Token final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Token>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.EventToken"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._FieldBuilder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._FieldBuilder" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method">
			<f a="riid:rgszNames:cNames:lcid:rgDispId">
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<c path="cs.system.IntPtr"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetIDsOfNames>
		<GetTypeInfo public="1" set="method">
			<f a="iTInfo:lcid:ppTInfo">
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfo>
		<GetTypeInfoCount public="1" set="method">
			<f a="pcTInfo">
				<t path="cs.Out"><x path="UInt"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfoCount>
		<Invoke public="1" set="method">
			<f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
				<x path="UInt"/>
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<x path="UInt"/>
				<t path="cs.types.Int16"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._FieldBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.FieldBuilder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.FieldBuilder" extern="1">
		<extends path="cs.system.reflection.FieldInfo"/>
		<implements path="cs.system.runtime.interopservices._FieldBuilder"/>
		<Module public="1" get="accessor" set="null" override="1"><c path="cs.system.reflection.Module"/></Module>
		<ReflectedType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></ReflectedType>
		<Name public="1" get="accessor" set="null" override="1"><c path="String"/></Name>
		<FieldType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></FieldType>
		<FieldHandle public="1" get="accessor" set="null" override="1"><c path="cs.system.RuntimeFieldHandle"/></FieldHandle>
		<DeclaringType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></DeclaringType>
		<Attributes public="1" get="accessor" set="null" override="1"><e path="cs.system.reflection.FieldAttributes"/></Attributes>
		<get_Attributes set="method" override="1">
			<f a=""><e path="cs.system.reflection.FieldAttributes"/></f>
			<meta><m n=":overload"/></meta>
		</get_Attributes>
		<get_DeclaringType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_DeclaringType>
		<get_FieldHandle set="method" override="1">
			<f a=""><c path="cs.system.RuntimeFieldHandle"/></f>
			<meta><m n=":overload"/></meta>
		</get_FieldHandle>
		<get_FieldType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_FieldType>
		<get_Name set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<get_ReflectedType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReflectedType>
		<GetCustomAttributes public="1" set="method" override="1">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetCustomAttributes public="1" set="method">
	<f a="attributeType:inherit">
		<c path="cs.system.Type"/>
		<x path="Bool"/>
		<c path="cs.NativeArray"><d/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<GetToken final="1" public="1" set="method">
			<f a=""><c path="cs.system.reflection.emit.FieldToken"/></f>
			<meta><m n=":overload"/></meta>
		</GetToken>
		<GetValue public="1" set="method" override="1">
			<f a="obj">
				<d/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetValue>
		<IsDefined public="1" set="method" override="1">
			<f a="attributeType:inherit">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsDefined>
		<SetConstant final="1" public="1" set="method">
			<f a="defaultValue">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetConstant>
		<SetCustomAttribute final="1" public="1" set="method">
			<f a="customBuilder">
				<c path="cs.system.reflection.emit.CustomAttributeBuilder"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><SetCustomAttribute final="1" public="1" set="method">
	<f a="con:binaryAttribute">
		<c path="cs.system.reflection.ConstructorInfo"/>
		<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</SetCustomAttribute></overloads>
		</SetCustomAttribute>
		<SetMarshal final="1" public="1" set="method">
			<f a="unmanagedMarshal">
				<c path="cs.system.reflection.emit.UnmanagedMarshal"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetMarshal>
		<SetOffset final="1" public="1" set="method">
			<f a="iOffset">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetOffset>
		<SetValue public="1" set="method" override="1">
			<f a="obj:val:invokeAttr:binder:culture">
				<d/>
				<d/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<c path="cs.system.globalization.CultureInfo"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetValue>
		<get_Module set="method" override="1">
			<f a=""><c path="cs.system.reflection.Module"/></f>
			<meta><m n=":overload"/></meta>
		</get_Module>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.FieldBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.FieldToken" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.FieldToken" extern="1">
		<extends path="cs.system.ValueType"/>
		<Empty public="1" set="null" static="1">
			<c path="cs.system.reflection.emit.FieldToken"/>
			<meta><m n=":readOnly"/></meta>
		</Empty>
		<op_Equality final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="cs.system.reflection.emit.FieldToken"/>
				<c path="cs.system.reflection.emit.FieldToken"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Equality>
		<op_Inequality final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="cs.system.reflection.emit.FieldToken"/>
				<c path="cs.system.reflection.emit.FieldToken"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Inequality>
		<Token public="1" get="accessor" set="null"><x path="Int"/></Token>
		<get_Token final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Token>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.FieldToken"</e></m>
		</meta>
	</class>
	<enum path="cs.system.reflection.emit.FlowControl" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.FlowControl">
		<Branch><meta><m n=":csNative"><e>0</e></m></meta></Branch>
		<Break><meta><m n=":csNative"><e>1</e></m></meta></Break>
		<Call><meta><m n=":csNative"><e>2</e></m></meta></Call>
		<Cond_Branch><meta><m n=":csNative"><e>3</e></m></meta></Cond_Branch>
		<Meta><meta><m n=":csNative"><e>4</e></m></meta></Meta>
		<Next><meta><m n=":csNative"><e>5</e></m></meta></Next>
		<Phi><meta><m n=":csNative"><e>6</e></m></meta></Phi>
		<Return><meta><m n=":csNative"><e>7</e></m></meta></Return>
		<Throw><meta><m n=":csNative"><e>8</e></m></meta></Throw>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.Emit.FlowControl"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.reflection.emit.GenericTypeParameterBuilder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.GenericTypeParameterBuilder" extern="1">
		<extends path="cs.system.Type"/>
		<DeclaringMethod public="1" get="accessor" set="null" override="1"><c path="cs.system.reflection.MethodBase"/></DeclaringMethod>
		<GenericParameterPosition public="1" get="accessor" set="null" override="1"><x path="Int"/></GenericParameterPosition>
		<GenericParameterAttributes public="1" get="accessor" set="null" override="1"><e path="cs.system.reflection.GenericParameterAttributes"/></GenericParameterAttributes>
		<IsGenericTypeDefinition public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsGenericTypeDefinition>
		<IsGenericType public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsGenericType>
		<IsGenericParameter public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsGenericParameter>
		<ContainsGenericParameters public="1" get="accessor" set="null" override="1"><x path="Bool"/></ContainsGenericParameters>
		<TypeHandle public="1" get="accessor" set="null" override="1"><c path="cs.system.RuntimeTypeHandle"/></TypeHandle>
		<ReflectedType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></ReflectedType>
		<DeclaringType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></DeclaringType>
		<Module public="1" get="accessor" set="null" override="1"><c path="cs.system.reflection.Module"/></Module>
		<Namespace public="1" get="accessor" set="null" override="1"><c path="String"/></Namespace>
		<Name public="1" get="accessor" set="null" override="1"><c path="String"/></Name>
		<GUID public="1" get="accessor" set="null" override="1"><c path="cs.system.Guid"/></GUID>
		<FullName public="1" get="accessor" set="null" override="1"><c path="String"/></FullName>
		<BaseType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></BaseType>
		<AssemblyQualifiedName public="1" get="accessor" set="null" override="1"><c path="String"/></AssemblyQualifiedName>
		<Assembly public="1" get="accessor" set="null" override="1"><c path="cs.system.reflection.Assembly"/></Assembly>
		<UnderlyingSystemType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></UnderlyingSystemType>
		<SetBaseTypeConstraint final="1" public="1" set="method">
			<f a="baseTypeConstraint">
				<c path="cs.system.Type"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetBaseTypeConstraint>
		<SetInterfaceConstraints final="1" public="1" set="method">
			<f a="interfaceConstraints">
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetInterfaceConstraints>
		<SetGenericParameterAttributes final="1" public="1" set="method">
			<f a="genericParameterAttributes">
				<e path="cs.system.reflection.GenericParameterAttributes"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetGenericParameterAttributes>
		<IsSubclassOf public="1" set="method" override="1">
			<f a="c">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsSubclassOf>
		<GetAttributeFlagsImpl set="method" override="1">
			<f a=""><e path="cs.system.reflection.TypeAttributes"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</GetAttributeFlagsImpl>
		<GetConstructorImpl set="method" override="1">
			<f a="bindingAttr:binder:callConvention:types:modifiers">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<e path="cs.system.reflection.CallingConventions"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.reflection.ConstructorInfo"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</GetConstructorImpl>
		<GetConstructors public="1" set="method" override="1">
			<f a="bindingAttr">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ConstructorInfo"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</GetConstructors>
		<GetEvent public="1" set="method" override="1">
			<f a="name:bindingAttr">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.EventInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetEvent>
		<GetEvents public="1" set="method" override="1">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.EventInfo"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetEvents public="1" set="method">
	<f a="bindingAttr">
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.NativeArray"><c path="cs.system.reflection.EventInfo"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetEvents></overloads>
		</GetEvents>
		<GetField public="1" set="method" override="1">
			<f a="name:bindingAttr">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.FieldInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetField>
		<GetFields public="1" set="method" override="1">
			<f a="bindingAttr">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.FieldInfo"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</GetFields>
		<GetInterface public="1" set="method" override="1">
			<f a="name:ignoreCase">
				<c path="String"/>
				<x path="Bool"/>
				<c path="cs.system.Type"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetInterface>
		<GetInterfaces public="1" set="method" override="1">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetInterfaces>
		<GetMembers public="1" set="method" override="1">
			<f a="bindingAttr">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</GetMembers>
		<GetMember public="1" set="method" override="1">
			<f a="name:type:bindingAttr">
				<c path="String"/>
				<e path="cs.system.reflection.MemberTypes"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</GetMember>
		<GetMethods public="1" set="method" override="1">
			<f a="bindingAttr">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</GetMethods>
		<GetMethodImpl set="method" override="1">
			<f a="name:bindingAttr:binder:callConvention:types:modifiers">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<e path="cs.system.reflection.CallingConventions"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.reflection.MethodInfo"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</GetMethodImpl>
		<GetNestedType public="1" set="method" override="1">
			<f a="name:bindingAttr">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.Type"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetNestedType>
		<GetNestedTypes public="1" set="method" override="1">
			<f a="bindingAttr">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</GetNestedTypes>
		<GetProperties public="1" set="method" override="1">
			<f a="bindingAttr">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.PropertyInfo"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</GetProperties>
		<GetPropertyImpl set="method" override="1">
			<f a="name:bindingAttr:binder:returnType:types:modifiers">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<c path="cs.system.Type"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.reflection.PropertyInfo"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</GetPropertyImpl>
		<HasElementTypeImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</HasElementTypeImpl>
		<IsAssignableFrom public="1" set="method" override="1">
			<f a="c">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsAssignableFrom>
		<IsInstanceOfType public="1" set="method" override="1">
			<f a="o">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsInstanceOfType>
		<IsArrayImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</IsArrayImpl>
		<IsByRefImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</IsByRefImpl>
		<IsCOMObjectImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</IsCOMObjectImpl>
		<IsPointerImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</IsPointerImpl>
		<IsPrimitiveImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</IsPrimitiveImpl>
		<IsValueTypeImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</IsValueTypeImpl>
		<InvokeMember public="1" set="method" override="1">
			<f a="name:invokeAttr:binder:target:args:modifiers:culture:namedParameters">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<d/>
				<c path="cs.NativeArray"><d/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.globalization.CultureInfo"/>
				<c path="cs.NativeArray"><c path="String"/></c>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</InvokeMember>
		<GetElementType public="1" set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</GetElementType>
		<get_UnderlyingSystemType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_UnderlyingSystemType>
		<get_Assembly set="method" override="1">
			<f a=""><c path="cs.system.reflection.Assembly"/></f>
			<meta><m n=":overload"/></meta>
		</get_Assembly>
		<get_AssemblyQualifiedName set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_AssemblyQualifiedName>
		<get_BaseType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_BaseType>
		<get_FullName set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_FullName>
		<get_GUID set="method" override="1">
			<f a=""><c path="cs.system.Guid"/></f>
			<meta><m n=":overload"/></meta>
		</get_GUID>
		<IsDefined public="1" set="method" override="1">
			<f a="attributeType:inherit">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsDefined>
		<GetCustomAttributes public="1" set="method" override="1">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetCustomAttributes public="1" set="method">
	<f a="attributeType:inherit">
		<c path="cs.system.Type"/>
		<x path="Bool"/>
		<c path="cs.NativeArray"><d/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<GetInterfaceMap public="1" set="method" override="1">
			<f a="interfaceType">
				<c path="cs.system.Type"/>
				<c path="cs.system.reflection.InterfaceMapping"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetInterfaceMap>
		<get_Name set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<get_Namespace set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Namespace>
		<get_Module set="method" override="1">
			<f a=""><c path="cs.system.reflection.Module"/></f>
			<meta><m n=":overload"/></meta>
		</get_Module>
		<get_DeclaringType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_DeclaringType>
		<get_ReflectedType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReflectedType>
		<get_TypeHandle set="method" override="1">
			<f a=""><c path="cs.system.RuntimeTypeHandle"/></f>
			<meta><m n=":overload"/></meta>
		</get_TypeHandle>
		<GetGenericArguments public="1" set="method" override="1">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetGenericArguments>
		<GetGenericTypeDefinition public="1" set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</GetGenericTypeDefinition>
		<get_ContainsGenericParameters set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_ContainsGenericParameters>
		<get_IsGenericParameter set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsGenericParameter>
		<get_IsGenericType set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsGenericType>
		<get_IsGenericTypeDefinition set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsGenericTypeDefinition>
		<get_GenericParameterAttributes set="method" override="1">
			<f a=""><e path="cs.system.reflection.GenericParameterAttributes"/></f>
			<meta><m n=":overload"/></meta>
		</get_GenericParameterAttributes>
		<get_GenericParameterPosition set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_GenericParameterPosition>
		<GetGenericParameterConstraints public="1" set="method" override="1">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetGenericParameterConstraints>
		<get_DeclaringMethod set="method" override="1">
			<f a=""><c path="cs.system.reflection.MethodBase"/></f>
			<meta><m n=":overload"/></meta>
		</get_DeclaringMethod>
		<SetCustomAttribute final="1" public="1" set="method">
			<f a="customBuilder">
				<c path="cs.system.reflection.emit.CustomAttributeBuilder"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><SetCustomAttribute final="1" public="1" set="method">
	<f a="con:binaryAttribute">
		<c path="cs.system.reflection.ConstructorInfo"/>
		<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</SetCustomAttribute></overloads>
		</SetCustomAttribute>
		<ToString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<MakeArrayType public="1" set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><MakeArrayType public="1" set="method">
	<f a="rank">
		<x path="Int"/>
		<c path="cs.system.Type"/>
	</f>
	<meta><m n=":overload"/></meta>
</MakeArrayType></overloads>
		</MakeArrayType>
		<MakeByRefType public="1" set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</MakeByRefType>
		<MakeGenericType public="1" set="method" override="1">
			<f a="typeArguments">
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.system.Type"/>
			</f>
			<meta><m n=":overload"/></meta>
		</MakeGenericType>
		<MakePointerType public="1" set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</MakePointerType>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.GenericTypeParameterBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.ILGenerator_LabelData" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.ILGenerator" module="cs.system.reflection.emit.ILGenerator" extern="1">
		<extends path="cs.system.ValueType"/>
		<maxStack public="1"><x path="Int"/></maxStack>
		<addr public="1"><x path="Int"/></addr>
		<new final="1" public="1" set="method">
			<f a="addr:maxStack">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.ILGenerator.LabelData"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.ILGenerator_LabelFixup" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.ILGenerator" module="cs.system.reflection.emit.ILGenerator" extern="1">
		<extends path="cs.system.ValueType"/>
		<label_idx public="1"><x path="Int"/></label_idx>
		<pos public="1"><x path="Int"/></pos>
		<offset public="1"><x path="Int"/></offset>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.ILGenerator.LabelFixup"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._ILGenerator" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._ILGenerator" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method">
			<f a="riid:rgszNames:cNames:lcid:rgDispId">
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<c path="cs.system.IntPtr"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetIDsOfNames>
		<GetTypeInfo public="1" set="method">
			<f a="iTInfo:lcid:ppTInfo">
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfo>
		<GetTypeInfoCount public="1" set="method">
			<f a="pcTInfo">
				<t path="cs.Out"><x path="UInt"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfoCount>
		<Invoke public="1" set="method">
			<f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
				<x path="UInt"/>
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<x path="UInt"/>
				<t path="cs.types.Int16"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._ILGenerator"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.ILGenerator" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.ILGenerator" extern="1">
		<implements path="cs.system.runtime.interopservices._ILGenerator"/>
		<BeginCatchBlock public="1" set="method">
			<f a="exceptionType">
				<c path="cs.system.Type"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginCatchBlock>
		<BeginExceptFilterBlock public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</BeginExceptFilterBlock>
		<BeginExceptionBlock public="1" set="method">
			<f a=""><c path="cs.system.reflection.emit.Label"/></f>
			<meta><m n=":overload"/></meta>
		</BeginExceptionBlock>
		<BeginFaultBlock public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</BeginFaultBlock>
		<BeginFinallyBlock public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</BeginFinallyBlock>
		<BeginScope public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</BeginScope>
		<DeclareLocal public="1" set="method">
			<f a="localType">
				<c path="cs.system.Type"/>
				<c path="cs.system.reflection.emit.LocalBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><DeclareLocal public="1" set="method">
	<f a="localType:pinned">
		<c path="cs.system.Type"/>
		<x path="Bool"/>
		<c path="cs.system.reflection.emit.LocalBuilder"/>
	</f>
	<meta><m n=":overload"/></meta>
</DeclareLocal></overloads>
		</DeclareLocal>
		<DefineLabel public="1" set="method">
			<f a=""><c path="cs.system.reflection.emit.Label"/></f>
			<meta><m n=":overload"/></meta>
		</DefineLabel>
		<Emit public="1" set="method">
			<f a="opcode">
				<c path="cs.system.reflection.emit.OpCode"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Emit public="1" set="method">
					<f a="opcode:cls">
						<c path="cs.system.reflection.emit.OpCode"/>
						<c path="cs.system.Type"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Emit>
				<Emit public="1" set="method">
					<f a="opcode:str">
						<c path="cs.system.reflection.emit.OpCode"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Emit>
				<Emit public="1" set="method">
					<f a="opcode:arg">
						<c path="cs.system.reflection.emit.OpCode"/>
						<x path="Single"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Emit>
				<Emit public="1" set="method">
					<f a="opcode:signature">
						<c path="cs.system.reflection.emit.OpCode"/>
						<c path="cs.system.reflection.emit.SignatureHelper"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Emit>
				<Emit final="1" public="1" set="method">
					<f a="opcode:arg">
						<c path="cs.system.reflection.emit.OpCode"/>
						<t path="cs.types.Int8"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Emit>
				<Emit public="1" set="method">
					<f a="opcode:meth">
						<c path="cs.system.reflection.emit.OpCode"/>
						<c path="cs.system.reflection.MethodInfo"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Emit>
				<Emit public="1" set="method">
					<f a="opcode:local">
						<c path="cs.system.reflection.emit.OpCode"/>
						<c path="cs.system.reflection.emit.LocalBuilder"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Emit>
				<Emit public="1" set="method">
					<f a="opcode:labels">
						<c path="cs.system.reflection.emit.OpCode"/>
						<c path="cs.NativeArray"><c path="cs.system.reflection.emit.Label"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Emit>
				<Emit public="1" set="method">
					<f a="opcode:label">
						<c path="cs.system.reflection.emit.OpCode"/>
						<c path="cs.system.reflection.emit.Label"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Emit>
				<Emit public="1" set="method">
					<f a="opcode:arg">
						<c path="cs.system.reflection.emit.OpCode"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Emit>
				<Emit public="1" set="method">
					<f a="opcode:arg">
						<c path="cs.system.reflection.emit.OpCode"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Emit>
				<Emit public="1" set="method">
					<f a="opcode:arg">
						<c path="cs.system.reflection.emit.OpCode"/>
						<t path="cs.types.Int16"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Emit>
				<Emit public="1" set="method">
					<f a="opcode:field">
						<c path="cs.system.reflection.emit.OpCode"/>
						<c path="cs.system.reflection.FieldInfo"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Emit>
				<Emit public="1" set="method">
					<f a="opcode:arg">
						<c path="cs.system.reflection.emit.OpCode"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Emit>
				<Emit public="1" set="method">
					<f a="opcode:con">
						<c path="cs.system.reflection.emit.OpCode"/>
						<c path="cs.system.reflection.ConstructorInfo"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Emit>
				<Emit public="1" set="method">
					<f a="opcode:arg">
						<c path="cs.system.reflection.emit.OpCode"/>
						<t path="cs.types.UInt8"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Emit>
			</overloads>
		</Emit>
		<EmitCall public="1" set="method">
			<f a="opcode:methodInfo:optionalParameterTypes">
				<c path="cs.system.reflection.emit.OpCode"/>
				<c path="cs.system.reflection.MethodInfo"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EmitCall>
		<EmitCalli public="1" set="method">
			<f a="opcode:unmanagedCallConv:returnType:parameterTypes">
				<c path="cs.system.reflection.emit.OpCode"/>
				<e path="cs.system.runtime.interopservices.CallingConvention"/>
				<c path="cs.system.Type"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><EmitCalli public="1" set="method">
	<f a="opcode:callingConvention:returnType:parameterTypes:optionalParameterTypes">
		<c path="cs.system.reflection.emit.OpCode"/>
		<e path="cs.system.reflection.CallingConventions"/>
		<c path="cs.system.Type"/>
		<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
		<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</EmitCalli></overloads>
		</EmitCalli>
		<EmitWriteLine public="1" set="method">
			<f a="fld">
				<c path="cs.system.reflection.FieldInfo"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<EmitWriteLine public="1" set="method">
					<f a="value">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</EmitWriteLine>
				<EmitWriteLine public="1" set="method">
					<f a="localBuilder">
						<c path="cs.system.reflection.emit.LocalBuilder"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</EmitWriteLine>
			</overloads>
		</EmitWriteLine>
		<EndExceptionBlock public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</EndExceptionBlock>
		<EndScope public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</EndScope>
		<MarkLabel public="1" set="method">
			<f a="loc">
				<c path="cs.system.reflection.emit.Label"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</MarkLabel>
		<MarkSequencePoint public="1" set="method">
			<f a="document:startLine:startColumn:endLine:endColumn">
				<c path="cs.system.diagnostics.symbolstore.ISymbolDocumentWriter"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</MarkSequencePoint>
		<ThrowException public="1" set="method">
			<f a="excType">
				<c path="cs.system.Type"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ThrowException>
		<UsingNamespace public="1" set="method">
			<f a="usingNamespace">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</UsingNamespace>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.ILGenerator"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.Label" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.Label" extern="1">
		<extends path="cs.system.ValueType"/>
		<op_Equality final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="cs.system.reflection.emit.Label"/>
				<c path="cs.system.reflection.emit.Label"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Equality>
		<op_Inequality final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="cs.system.reflection.emit.Label"/>
				<c path="cs.system.reflection.emit.Label"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Inequality>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.Label"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._LocalBuilder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._LocalBuilder" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method">
			<f a="riid:rgszNames:cNames:lcid:rgDispId">
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<c path="cs.system.IntPtr"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetIDsOfNames>
		<GetTypeInfo public="1" set="method">
			<f a="iTInfo:lcid:ppTInfo">
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfo>
		<GetTypeInfoCount public="1" set="method">
			<f a="pcTInfo">
				<t path="cs.Out"><x path="UInt"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfoCount>
		<Invoke public="1" set="method">
			<f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
				<x path="UInt"/>
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<x path="UInt"/>
				<t path="cs.types.Int16"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._LocalBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.LocalBuilder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.LocalBuilder" extern="1">
		<extends path="cs.system.reflection.LocalVariableInfo"/>
		<implements path="cs.system.runtime.interopservices._LocalBuilder"/>
		<LocalIndex public="1" get="accessor" set="null" override="1"><x path="Int"/></LocalIndex>
		<IsPinned public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsPinned>
		<LocalType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></LocalType>
		<SetLocalSymInfo final="1" public="1" set="method">
			<f a="name:startOffset:endOffset">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><SetLocalSymInfo final="1" public="1" set="method">
	<f a="name">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</SetLocalSymInfo></overloads>
		</SetLocalSymInfo>
		<get_LocalType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_LocalType>
		<get_IsPinned set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsPinned>
		<get_LocalIndex set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_LocalIndex>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.LocalBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._MethodBuilder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._MethodBuilder" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method">
			<f a="riid:rgszNames:cNames:lcid:rgDispId">
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<c path="cs.system.IntPtr"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetIDsOfNames>
		<GetTypeInfo public="1" set="method">
			<f a="iTInfo:lcid:ppTInfo">
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfo>
		<GetTypeInfoCount public="1" set="method">
			<f a="pcTInfo">
				<t path="cs.Out"><x path="UInt"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfoCount>
		<Invoke public="1" set="method">
			<f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
				<x path="UInt"/>
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<x path="UInt"/>
				<t path="cs.types.Int16"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._MethodBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.MethodBuilder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.MethodBuilder" extern="1">
		<extends path="cs.system.reflection.MethodInfo"/>
		<implements path="cs.system.runtime.interopservices._MethodBuilder"/>
		<Module public="1" get="accessor" set="null" override="1"><c path="cs.system.reflection.Module"/></Module>
		<IsGenericMethod public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsGenericMethod>
		<IsGenericMethodDefinition public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsGenericMethodDefinition>
		<Signature public="1" get="accessor" set="null"><c path="String"/></Signature>
		<CallingConvention public="1" get="accessor" set="null" override="1"><e path="cs.system.reflection.CallingConventions"/></CallingConvention>
		<ReturnTypeCustomAttributes public="1" get="accessor" set="null" override="1"><c path="cs.system.reflection.ICustomAttributeProvider"/></ReturnTypeCustomAttributes>
		<Attributes public="1" get="accessor" set="null" override="1"><e path="cs.system.reflection.MethodAttributes"/></Attributes>
		<Name public="1" get="accessor" set="null" override="1"><c path="String"/></Name>
		<DeclaringType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></DeclaringType>
		<ReflectedType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></ReflectedType>
		<ReturnType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></ReturnType>
		<MethodHandle public="1" get="accessor" set="null" override="1"><c path="cs.system.RuntimeMethodHandle"/></MethodHandle>
		<InitLocals public="1" get="accessor" set="accessor"><x path="Bool"/></InitLocals>
		<ContainsGenericParameters public="1" get="accessor" set="null" override="1"><x path="Bool"/></ContainsGenericParameters>
		<get_ContainsGenericParameters set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_ContainsGenericParameters>
		<get_InitLocals final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_InitLocals>
		<set_InitLocals final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_InitLocals>
		<get_MethodHandle set="method" override="1">
			<f a=""><c path="cs.system.RuntimeMethodHandle"/></f>
			<meta><m n=":overload"/></meta>
		</get_MethodHandle>
		<get_ReturnType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReturnType>
		<get_ReflectedType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReflectedType>
		<get_DeclaringType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_DeclaringType>
		<get_Name set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<get_Attributes set="method" override="1">
			<f a=""><e path="cs.system.reflection.MethodAttributes"/></f>
			<meta><m n=":overload"/></meta>
		</get_Attributes>
		<get_ReturnTypeCustomAttributes set="method" override="1">
			<f a=""><c path="cs.system.reflection.ICustomAttributeProvider"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReturnTypeCustomAttributes>
		<get_CallingConvention set="method" override="1">
			<f a=""><e path="cs.system.reflection.CallingConventions"/></f>
			<meta><m n=":overload"/></meta>
		</get_CallingConvention>
		<get_Signature final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Signature>
		<GetToken final="1" public="1" set="method">
			<f a=""><c path="cs.system.reflection.emit.MethodToken"/></f>
			<meta><m n=":overload"/></meta>
		</GetToken>
		<GetBaseDefinition public="1" set="method" override="1">
			<f a=""><c path="cs.system.reflection.MethodInfo"/></f>
			<meta><m n=":overload"/></meta>
		</GetBaseDefinition>
		<GetMethodImplementationFlags public="1" set="method" override="1">
			<f a=""><e path="cs.system.reflection.MethodImplAttributes"/></f>
			<meta><m n=":overload"/></meta>
		</GetMethodImplementationFlags>
		<GetParameters public="1" set="method" override="1">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.ParameterInfo"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetParameters>
		<GetModule final="1" public="1" set="method">
			<f a=""><c path="cs.system.reflection.Module"/></f>
			<meta><m n=":overload"/></meta>
		</GetModule>
		<CreateMethodBody final="1" public="1" set="method">
			<f a="il:count">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CreateMethodBody>
		<Invoke public="1" set="method" override="1">
			<f a="obj:invokeAttr:binder:parameters:culture">
				<d/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<c path="cs.NativeArray"><d/></c>
				<c path="cs.system.globalization.CultureInfo"/>
				<d/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":overload"/>
			</meta>
		</Invoke>
		<IsDefined public="1" set="method" override="1">
			<f a="attributeType:inherit">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsDefined>
		<GetCustomAttributes public="1" set="method" override="1">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetCustomAttributes public="1" set="method">
	<f a="attributeType:inherit">
		<c path="cs.system.Type"/>
		<x path="Bool"/>
		<c path="cs.NativeArray"><d/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<GetILGenerator final="1" public="1" set="method">
			<f a=""><c path="cs.system.reflection.emit.ILGenerator"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetILGenerator final="1" public="1" set="method">
	<f a="size">
		<x path="Int"/>
		<c path="cs.system.reflection.emit.ILGenerator"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetILGenerator></overloads>
		</GetILGenerator>
		<DefineParameter final="1" public="1" set="method">
			<f a="position:attributes:strParamName">
				<x path="Int"/>
				<e path="cs.system.reflection.ParameterAttributes"/>
				<c path="String"/>
				<c path="cs.system.reflection.emit.ParameterBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DefineParameter>
		<SetCustomAttribute final="1" public="1" set="method">
			<f a="customBuilder">
				<c path="cs.system.reflection.emit.CustomAttributeBuilder"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><SetCustomAttribute final="1" public="1" set="method">
	<f a="con:binaryAttribute">
		<c path="cs.system.reflection.ConstructorInfo"/>
		<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</SetCustomAttribute></overloads>
		</SetCustomAttribute>
		<SetImplementationFlags final="1" public="1" set="method">
			<f a="attributes">
				<e path="cs.system.reflection.MethodImplAttributes"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetImplementationFlags>
		<AddDeclarativeSecurity final="1" public="1" set="method">
			<f a="action:pset">
				<e path="cs.system.security.permissions.SecurityAction"/>
				<c path="cs.system.security.PermissionSet"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddDeclarativeSecurity>
		<SetMarshal final="1" public="1" set="method">
			<f a="unmanagedMarshal">
				<c path="cs.system.reflection.emit.UnmanagedMarshal"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetMarshal>
		<SetSymCustomAttribute final="1" public="1" set="method">
			<f a="name:data">
				<c path="String"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetSymCustomAttribute>
		<ToString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<MakeGenericMethod public="1" set="method" override="1">
			<f a="typeArguments">
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.system.reflection.MethodInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</MakeGenericMethod>
		<get_IsGenericMethodDefinition set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsGenericMethodDefinition>
		<get_IsGenericMethod set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsGenericMethod>
		<GetGenericMethodDefinition public="1" set="method" override="1">
			<f a=""><c path="cs.system.reflection.MethodInfo"/></f>
			<meta><m n=":overload"/></meta>
		</GetGenericMethodDefinition>
		<GetGenericArguments public="1" set="method" override="1">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetGenericArguments>
		<DefineGenericParameters final="1" public="1" set="method">
			<f a="names">
				<c path="cs.NativeArray"><c path="String"/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.emit.GenericTypeParameterBuilder"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</DefineGenericParameters>
		<SetReturnType final="1" public="1" set="method">
			<f a="returnType">
				<c path="cs.system.Type"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetReturnType>
		<SetParameters final="1" public="1" set="method">
			<f a="parameterTypes">
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetParameters>
		<SetSignature final="1" public="1" set="method">
			<f a="returnType:returnTypeRequiredCustomModifiers:returnTypeOptionalCustomModifiers:parameterTypes:parameterTypeRequiredCustomModifiers:parameterTypeOptionalCustomModifiers">
				<c path="cs.system.Type"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
				<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetSignature>
		<get_Module set="method" override="1">
			<f a=""><c path="cs.system.reflection.Module"/></f>
			<meta><m n=":overload"/></meta>
		</get_Module>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.MethodBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.MethodToken" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.MethodToken" extern="1">
		<extends path="cs.system.ValueType"/>
		<Empty public="1" set="null" static="1">
			<c path="cs.system.reflection.emit.MethodToken"/>
			<meta><m n=":readOnly"/></meta>
		</Empty>
		<op_Equality final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="cs.system.reflection.emit.MethodToken"/>
				<c path="cs.system.reflection.emit.MethodToken"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Equality>
		<op_Inequality final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="cs.system.reflection.emit.MethodToken"/>
				<c path="cs.system.reflection.emit.MethodToken"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Inequality>
		<Token public="1" get="accessor" set="null"><x path="Int"/></Token>
		<get_Token final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Token>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.MethodToken"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._ModuleBuilder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._ModuleBuilder" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method">
			<f a="riid:rgszNames:cNames:lcid:rgDispId">
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<c path="cs.system.IntPtr"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetIDsOfNames>
		<GetTypeInfo public="1" set="method">
			<f a="iTInfo:lcid:ppTInfo">
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfo>
		<GetTypeInfoCount public="1" set="method">
			<f a="pcTInfo">
				<t path="cs.Out"><x path="UInt"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfoCount>
		<Invoke public="1" set="method">
			<f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
				<x path="UInt"/>
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<x path="UInt"/>
				<t path="cs.types.Int16"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._ModuleBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.ModuleBuilder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.ModuleBuilder" extern="1">
		<extends path="cs.system.reflection.Module"/>
		<implements path="cs.system.runtime.interopservices._ModuleBuilder"/>
		<FullyQualifiedName public="1" get="accessor" set="null" override="1"><c path="String"/></FullyQualifiedName>
		<get_FullyQualifiedName set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_FullyQualifiedName>
		<IsTransient final="1" public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</IsTransient>
		<CreateGlobalFunctions final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</CreateGlobalFunctions>
		<DefineInitializedData final="1" public="1" set="method">
			<f a="name:data:attributes">
				<c path="String"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<e path="cs.system.reflection.FieldAttributes"/>
				<c path="cs.system.reflection.emit.FieldBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DefineInitializedData>
		<DefineUninitializedData final="1" public="1" set="method">
			<f a="name:size:attributes">
				<c path="String"/>
				<x path="Int"/>
				<e path="cs.system.reflection.FieldAttributes"/>
				<c path="cs.system.reflection.emit.FieldBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DefineUninitializedData>
		<DefineGlobalMethod final="1" public="1" set="method">
			<f a="name:attributes:returnType:parameterTypes">
				<c path="String"/>
				<e path="cs.system.reflection.MethodAttributes"/>
				<c path="cs.system.Type"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.system.reflection.emit.MethodBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<DefineGlobalMethod final="1" public="1" set="method">
					<f a="name:attributes:callingConvention:returnType:requiredReturnTypeCustomModifiers:optionalReturnTypeCustomModifiers:parameterTypes:requiredParameterTypeCustomModifiers:optionalParameterTypeCustomModifiers">
						<c path="String"/>
						<e path="cs.system.reflection.MethodAttributes"/>
						<e path="cs.system.reflection.CallingConventions"/>
						<c path="cs.system.Type"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
						<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
						<c path="cs.system.reflection.emit.MethodBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineGlobalMethod>
				<DefineGlobalMethod final="1" public="1" set="method">
					<f a="name:attributes:callingConvention:returnType:parameterTypes">
						<c path="String"/>
						<e path="cs.system.reflection.MethodAttributes"/>
						<e path="cs.system.reflection.CallingConventions"/>
						<c path="cs.system.Type"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.system.reflection.emit.MethodBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineGlobalMethod>
			</overloads>
		</DefineGlobalMethod>
		<DefinePInvokeMethod final="1" public="1" set="method">
			<f a="name:dllName:attributes:callingConvention:returnType:parameterTypes:nativeCallConv:nativeCharSet">
				<c path="String"/>
				<c path="String"/>
				<e path="cs.system.reflection.MethodAttributes"/>
				<e path="cs.system.reflection.CallingConventions"/>
				<c path="cs.system.Type"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<e path="cs.system.runtime.interopservices.CallingConvention"/>
				<e path="cs.system.runtime.interopservices.CharSet"/>
				<c path="cs.system.reflection.emit.MethodBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><DefinePInvokeMethod final="1" public="1" set="method">
	<f a="name:dllName:entryName:attributes:callingConvention:returnType:parameterTypes:nativeCallConv:nativeCharSet">
		<c path="String"/>
		<c path="String"/>
		<c path="String"/>
		<e path="cs.system.reflection.MethodAttributes"/>
		<e path="cs.system.reflection.CallingConventions"/>
		<c path="cs.system.Type"/>
		<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
		<e path="cs.system.runtime.interopservices.CallingConvention"/>
		<e path="cs.system.runtime.interopservices.CharSet"/>
		<c path="cs.system.reflection.emit.MethodBuilder"/>
	</f>
	<meta><m n=":overload"/></meta>
</DefinePInvokeMethod></overloads>
		</DefinePInvokeMethod>
		<DefineType final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.reflection.emit.TypeBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<DefineType final="1" public="1" set="method">
					<f a="name:attr:parent:packingSize:typesize">
						<c path="String"/>
						<e path="cs.system.reflection.TypeAttributes"/>
						<c path="cs.system.Type"/>
						<e path="cs.system.reflection.emit.PackingSize"/>
						<x path="Int"/>
						<c path="cs.system.reflection.emit.TypeBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineType>
				<DefineType final="1" public="1" set="method">
					<f a="name:attr:parent:packsize">
						<c path="String"/>
						<e path="cs.system.reflection.TypeAttributes"/>
						<c path="cs.system.Type"/>
						<e path="cs.system.reflection.emit.PackingSize"/>
						<c path="cs.system.reflection.emit.TypeBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineType>
				<DefineType final="1" public="1" set="method">
					<f a="name:attr:parent:typesize">
						<c path="String"/>
						<e path="cs.system.reflection.TypeAttributes"/>
						<c path="cs.system.Type"/>
						<x path="Int"/>
						<c path="cs.system.reflection.emit.TypeBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineType>
				<DefineType final="1" public="1" set="method">
					<f a="name:attr:parent:interfaces">
						<c path="String"/>
						<e path="cs.system.reflection.TypeAttributes"/>
						<c path="cs.system.Type"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.system.reflection.emit.TypeBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineType>
				<DefineType final="1" public="1" set="method">
					<f a="name:attr:parent">
						<c path="String"/>
						<e path="cs.system.reflection.TypeAttributes"/>
						<c path="cs.system.Type"/>
						<c path="cs.system.reflection.emit.TypeBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineType>
				<DefineType final="1" public="1" set="method">
					<f a="name:attr">
						<c path="String"/>
						<e path="cs.system.reflection.TypeAttributes"/>
						<c path="cs.system.reflection.emit.TypeBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineType>
			</overloads>
		</DefineType>
		<GetArrayMethod final="1" public="1" set="method">
			<f a="arrayClass:methodName:callingConvention:returnType:parameterTypes">
				<c path="cs.system.Type"/>
				<c path="String"/>
				<e path="cs.system.reflection.CallingConventions"/>
				<c path="cs.system.Type"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.system.reflection.MethodInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetArrayMethod>
		<DefineEnum final="1" public="1" set="method">
			<f a="name:visibility:underlyingType">
				<c path="String"/>
				<e path="cs.system.reflection.TypeAttributes"/>
				<c path="cs.system.Type"/>
				<c path="cs.system.reflection.emit.EnumBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DefineEnum>
		<GetType public="1" set="method" override="1">
			<f a="className">
				<c path="String"/>
				<c path="cs.system.Type"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetType public="1" set="method">
					<f a="className:throwOnError:ignoreCase">
						<c path="String"/>
						<x path="Bool"/>
						<x path="Bool"/>
						<c path="cs.system.Type"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetType>
				<GetType public="1" set="method">
					<f a="className:ignoreCase">
						<c path="String"/>
						<x path="Bool"/>
						<c path="cs.system.Type"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetType>
			</overloads>
		</GetType>
		<SetCustomAttribute final="1" public="1" set="method">
			<f a="customBuilder">
				<c path="cs.system.reflection.emit.CustomAttributeBuilder"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><SetCustomAttribute final="1" public="1" set="method">
	<f a="con:binaryAttribute">
		<c path="cs.system.reflection.ConstructorInfo"/>
		<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</SetCustomAttribute></overloads>
		</SetCustomAttribute>
		<GetSymWriter final="1" public="1" set="method">
			<f a=""><c path="cs.system.diagnostics.symbolstore.ISymbolWriter"/></f>
			<meta><m n=":overload"/></meta>
		</GetSymWriter>
		<DefineDocument final="1" public="1" set="method">
			<f a="url:language:languageVendor:documentType">
				<c path="String"/>
				<c path="cs.system.Guid"/>
				<c path="cs.system.Guid"/>
				<c path="cs.system.Guid"/>
				<c path="cs.system.diagnostics.symbolstore.ISymbolDocumentWriter"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DefineDocument>
		<GetTypes public="1" set="method" override="1">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetTypes>
		<DefineResource final="1" public="1" set="method">
			<f a="name:description:attribute">
				<c path="String"/>
				<c path="String"/>
				<e path="cs.system.reflection.ResourceAttributes"/>
				<c path="cs.system.resources.IResourceWriter"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><DefineResource final="1" public="1" set="method">
	<f a="name:description">
		<c path="String"/>
		<c path="String"/>
		<c path="cs.system.resources.IResourceWriter"/>
	</f>
	<meta><m n=":overload"/></meta>
</DefineResource></overloads>
		</DefineResource>
		<DefineUnmanagedResource final="1" public="1" set="method">
			<f a="resource">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><DefineUnmanagedResource final="1" public="1" set="method">
	<f a="resourceFileName">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</DefineUnmanagedResource></overloads>
		</DefineUnmanagedResource>
		<DefineManifestResource final="1" public="1" set="method">
			<f a="name:stream:attribute">
				<c path="String"/>
				<c path="cs.system.io.Stream"/>
				<e path="cs.system.reflection.ResourceAttributes"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DefineManifestResource>
		<SetSymCustomAttribute final="1" public="1" set="method">
			<f a="name:data">
				<c path="String"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetSymCustomAttribute>
		<SetUserEntryPoint final="1" public="1" set="method">
			<f a="entryPoint">
				<c path="cs.system.reflection.MethodInfo"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetUserEntryPoint>
		<GetMethodToken final="1" public="1" set="method">
			<f a="method">
				<c path="cs.system.reflection.MethodInfo"/>
				<c path="cs.system.reflection.emit.MethodToken"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetMethodToken>
		<GetArrayMethodToken final="1" public="1" set="method">
			<f a="arrayClass:methodName:callingConvention:returnType:parameterTypes">
				<c path="cs.system.Type"/>
				<c path="String"/>
				<e path="cs.system.reflection.CallingConventions"/>
				<c path="cs.system.Type"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.system.reflection.emit.MethodToken"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetArrayMethodToken>
		<GetConstructorToken final="1" public="1" set="method">
			<f a="con">
				<c path="cs.system.reflection.ConstructorInfo"/>
				<c path="cs.system.reflection.emit.MethodToken"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetConstructorToken>
		<GetFieldToken final="1" public="1" set="method">
			<f a="field">
				<c path="cs.system.reflection.FieldInfo"/>
				<c path="cs.system.reflection.emit.FieldToken"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetFieldToken>
		<GetSignatureToken final="1" public="1" set="method">
			<f a="sigBytes:sigLength">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<c path="cs.system.reflection.emit.SignatureToken"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetSignatureToken final="1" public="1" set="method">
	<f a="sigHelper">
		<c path="cs.system.reflection.emit.SignatureHelper"/>
		<c path="cs.system.reflection.emit.SignatureToken"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetSignatureToken></overloads>
		</GetSignatureToken>
		<GetStringConstant final="1" public="1" set="method">
			<f a="str">
				<c path="String"/>
				<c path="cs.system.reflection.emit.StringToken"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetStringConstant>
		<GetTypeToken final="1" public="1" set="method">
			<f a="type">
				<c path="cs.system.Type"/>
				<c path="cs.system.reflection.emit.TypeToken"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetTypeToken final="1" public="1" set="method">
	<f a="name">
		<c path="String"/>
		<c path="cs.system.reflection.emit.TypeToken"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetTypeToken></overloads>
		</GetTypeToken>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.ModuleBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.OpCode" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.OpCode" extern="1">
		<extends path="cs.system.ValueType"/>
		<op_Equality final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="cs.system.reflection.emit.OpCode"/>
				<c path="cs.system.reflection.emit.OpCode"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Equality>
		<op_Inequality final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="cs.system.reflection.emit.OpCode"/>
				<c path="cs.system.reflection.emit.OpCode"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Inequality>
		<Value public="1" get="accessor" set="null"><t path="cs.types.Int16"/></Value>
		<StackBehaviourPush public="1" get="accessor" set="null"><e path="cs.system.reflection.emit.StackBehaviour"/></StackBehaviourPush>
		<StackBehaviourPop public="1" get="accessor" set="null"><e path="cs.system.reflection.emit.StackBehaviour"/></StackBehaviourPop>
		<FlowControl public="1" get="accessor" set="null"><e path="cs.system.reflection.emit.FlowControl"/></FlowControl>
		<OperandType public="1" get="accessor" set="null"><e path="cs.system.reflection.emit.OperandType"/></OperandType>
		<OpCodeType public="1" get="accessor" set="null"><e path="cs.system.reflection.emit.OpCodeType"/></OpCodeType>
		<Size public="1" get="accessor" set="null"><x path="Int"/></Size>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<ToString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<get_Name final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<get_Size final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Size>
		<get_OpCodeType final="1" set="method">
			<f a=""><e path="cs.system.reflection.emit.OpCodeType"/></f>
			<meta><m n=":overload"/></meta>
		</get_OpCodeType>
		<get_OperandType final="1" set="method">
			<f a=""><e path="cs.system.reflection.emit.OperandType"/></f>
			<meta><m n=":overload"/></meta>
		</get_OperandType>
		<get_FlowControl final="1" set="method">
			<f a=""><e path="cs.system.reflection.emit.FlowControl"/></f>
			<meta><m n=":overload"/></meta>
		</get_FlowControl>
		<get_StackBehaviourPop final="1" set="method">
			<f a=""><e path="cs.system.reflection.emit.StackBehaviour"/></f>
			<meta><m n=":overload"/></meta>
		</get_StackBehaviourPop>
		<get_StackBehaviourPush final="1" set="method">
			<f a=""><e path="cs.system.reflection.emit.StackBehaviour"/></f>
			<meta><m n=":overload"/></meta>
		</get_StackBehaviourPush>
		<get_Value final="1" set="method">
			<f a=""><t path="cs.types.Int16"/></f>
			<meta><m n=":overload"/></meta>
		</get_Value>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.OpCode"</e></m>
		</meta>
	</class>
	<enum path="cs.system.reflection.emit.OpCodeType" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.OpCodeType">
		<Annotation><meta><m n=":csNative"><e>0</e></m></meta></Annotation>
		<Macro><meta><m n=":csNative"><e>1</e></m></meta></Macro>
		<Nternal><meta><m n=":csNative"><e>2</e></m></meta></Nternal>
		<Objmodel><meta><m n=":csNative"><e>3</e></m></meta></Objmodel>
		<Prefix><meta><m n=":csNative"><e>4</e></m></meta></Prefix>
		<Primitive><meta><m n=":csNative"><e>5</e></m></meta></Primitive>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.Emit.OpCodeType"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.reflection.emit.OperandType" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.OperandType">
		<InlineBrTarget><meta><m n=":csNative"><e>0</e></m></meta></InlineBrTarget>
		<InlineField><meta><m n=":csNative"><e>1</e></m></meta></InlineField>
		<InlineI><meta><m n=":csNative"><e>2</e></m></meta></InlineI>
		<InlineI8><meta><m n=":csNative"><e>3</e></m></meta></InlineI8>
		<InlineMethod><meta><m n=":csNative"><e>4</e></m></meta></InlineMethod>
		<InlineNone><meta><m n=":csNative"><e>5</e></m></meta></InlineNone>
		<InlinePhi><meta><m n=":csNative"><e>6</e></m></meta></InlinePhi>
		<InlineR><meta><m n=":csNative"><e>7</e></m></meta></InlineR>
		<InlineSig><meta><m n=":csNative"><e>9</e></m></meta></InlineSig>
		<InlineString><meta><m n=":csNative"><e>10</e></m></meta></InlineString>
		<InlineSwitch><meta><m n=":csNative"><e>11</e></m></meta></InlineSwitch>
		<InlineTok><meta><m n=":csNative"><e>12</e></m></meta></InlineTok>
		<InlineType><meta><m n=":csNative"><e>13</e></m></meta></InlineType>
		<InlineVar><meta><m n=":csNative"><e>14</e></m></meta></InlineVar>
		<ShortInlineBrTarget><meta><m n=":csNative"><e>15</e></m></meta></ShortInlineBrTarget>
		<ShortInlineI><meta><m n=":csNative"><e>16</e></m></meta></ShortInlineI>
		<ShortInlineR><meta><m n=":csNative"><e>17</e></m></meta></ShortInlineR>
		<ShortInlineVar><meta><m n=":csNative"><e>18</e></m></meta></ShortInlineVar>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.Emit.OperandType"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.reflection.emit.PEFileKinds" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.PEFileKinds">
		<Dll><meta><m n=":csNative"><e>1</e></m></meta></Dll>
		<ConsoleApplication><meta><m n=":csNative"><e>2</e></m></meta></ConsoleApplication>
		<WindowApplication><meta><m n=":csNative"><e>3</e></m></meta></WindowApplication>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.Emit.PEFileKinds"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.reflection.emit.PackingSize" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.PackingSize">
		<Unspecified><meta><m n=":csNative"><e>0</e></m></meta></Unspecified>
		<Size1><meta><m n=":csNative"><e>1</e></m></meta></Size1>
		<Size2><meta><m n=":csNative"><e>2</e></m></meta></Size2>
		<Size4><meta><m n=":csNative"><e>4</e></m></meta></Size4>
		<Size8><meta><m n=":csNative"><e>8</e></m></meta></Size8>
		<Size16><meta><m n=":csNative"><e>16</e></m></meta></Size16>
		<Size32><meta><m n=":csNative"><e>32</e></m></meta></Size32>
		<Size64><meta><m n=":csNative"><e>64</e></m></meta></Size64>
		<Size128><meta><m n=":csNative"><e>128</e></m></meta></Size128>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.Emit.PackingSize"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.runtime.interopservices._ParameterBuilder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._ParameterBuilder" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method">
			<f a="riid:rgszNames:cNames:lcid:rgDispId">
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<c path="cs.system.IntPtr"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetIDsOfNames>
		<GetTypeInfo public="1" set="method">
			<f a="iTInfo:lcid:ppTInfo">
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfo>
		<GetTypeInfoCount public="1" set="method">
			<f a="pcTInfo">
				<t path="cs.Out"><x path="UInt"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfoCount>
		<Invoke public="1" set="method">
			<f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
				<x path="UInt"/>
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<x path="UInt"/>
				<t path="cs.types.Int16"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._ParameterBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.ParameterBuilder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.ParameterBuilder" extern="1">
		<implements path="cs.system.runtime.interopservices._ParameterBuilder"/>
		<Position public="1" get="accessor" set="null"><x path="Int"/></Position>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<IsOptional public="1" get="accessor" set="null"><x path="Bool"/></IsOptional>
		<IsOut public="1" get="accessor" set="null"><x path="Bool"/></IsOut>
		<IsIn public="1" get="accessor" set="null"><x path="Bool"/></IsIn>
		<Attributes public="1" get="accessor" set="null"><x path="Int"/></Attributes>
		<get_Attributes set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Attributes>
		<get_IsIn final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsIn>
		<get_IsOut final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsOut>
		<get_IsOptional final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsOptional>
		<get_Name set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<get_Position set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Position>
		<GetToken public="1" set="method">
			<f a=""><c path="cs.system.reflection.emit.ParameterToken"/></f>
			<meta><m n=":overload"/></meta>
		</GetToken>
		<SetConstant public="1" set="method">
			<f a="defaultValue">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetConstant>
		<SetCustomAttribute final="1" public="1" set="method">
			<f a="customBuilder">
				<c path="cs.system.reflection.emit.CustomAttributeBuilder"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><SetCustomAttribute final="1" public="1" set="method">
	<f a="con:binaryAttribute">
		<c path="cs.system.reflection.ConstructorInfo"/>
		<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</SetCustomAttribute></overloads>
		</SetCustomAttribute>
		<SetMarshal public="1" set="method">
			<f a="unmanagedMarshal">
				<c path="cs.system.reflection.emit.UnmanagedMarshal"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetMarshal>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.ParameterBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.ParameterToken" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.ParameterToken" extern="1">
		<extends path="cs.system.ValueType"/>
		<Empty public="1" set="null" static="1">
			<c path="cs.system.reflection.emit.ParameterToken"/>
			<meta><m n=":readOnly"/></meta>
		</Empty>
		<op_Equality final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="cs.system.reflection.emit.ParameterToken"/>
				<c path="cs.system.reflection.emit.ParameterToken"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Equality>
		<op_Inequality final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="cs.system.reflection.emit.ParameterToken"/>
				<c path="cs.system.reflection.emit.ParameterToken"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Inequality>
		<Token public="1" get="accessor" set="null"><x path="Int"/></Token>
		<get_Token final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Token>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.ParameterToken"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._PropertyBuilder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._PropertyBuilder" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method">
			<f a="riid:rgszNames:cNames:lcid:rgDispId">
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<c path="cs.system.IntPtr"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetIDsOfNames>
		<GetTypeInfo public="1" set="method">
			<f a="iTInfo:lcid:ppTInfo">
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfo>
		<GetTypeInfoCount public="1" set="method">
			<f a="pcTInfo">
				<t path="cs.Out"><x path="UInt"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfoCount>
		<Invoke public="1" set="method">
			<f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
				<x path="UInt"/>
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<x path="UInt"/>
				<t path="cs.types.Int16"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._PropertyBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.PropertyBuilder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.PropertyBuilder" extern="1">
		<extends path="cs.system.reflection.PropertyInfo"/>
		<implements path="cs.system.runtime.interopservices._PropertyBuilder"/>
		<Module public="1" get="accessor" set="null" override="1"><c path="cs.system.reflection.Module"/></Module>
		<ReflectedType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></ReflectedType>
		<PropertyType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></PropertyType>
		<PropertyToken public="1" get="accessor" set="null"><c path="cs.system.reflection.emit.PropertyToken"/></PropertyToken>
		<Name public="1" get="accessor" set="null" override="1"><c path="String"/></Name>
		<DeclaringType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></DeclaringType>
		<CanWrite public="1" get="accessor" set="null" override="1"><x path="Bool"/></CanWrite>
		<CanRead public="1" get="accessor" set="null" override="1"><x path="Bool"/></CanRead>
		<Attributes public="1" get="accessor" set="null" override="1"><e path="cs.system.reflection.PropertyAttributes"/></Attributes>
		<get_Attributes set="method" override="1">
			<f a=""><e path="cs.system.reflection.PropertyAttributes"/></f>
			<meta><m n=":overload"/></meta>
		</get_Attributes>
		<get_CanRead set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_CanRead>
		<get_CanWrite set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_CanWrite>
		<get_DeclaringType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_DeclaringType>
		<get_Name set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<get_PropertyToken final="1" set="method">
			<f a=""><c path="cs.system.reflection.emit.PropertyToken"/></f>
			<meta><m n=":overload"/></meta>
		</get_PropertyToken>
		<get_PropertyType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_PropertyType>
		<get_ReflectedType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReflectedType>
		<AddOtherMethod final="1" public="1" set="method">
			<f a="mdBuilder">
				<c path="cs.system.reflection.emit.MethodBuilder"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddOtherMethod>
		<GetAccessors public="1" set="method" override="1">
			<f a="nonPublic">
				<x path="Bool"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</GetAccessors>
		<GetCustomAttributes public="1" set="method" override="1">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetCustomAttributes public="1" set="method">
	<f a="attributeType:inherit">
		<c path="cs.system.Type"/>
		<x path="Bool"/>
		<c path="cs.NativeArray"><d/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<GetGetMethod public="1" set="method" override="1">
			<f a="nonPublic">
				<x path="Bool"/>
				<c path="cs.system.reflection.MethodInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetGetMethod>
		<GetIndexParameters public="1" set="method" override="1">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.ParameterInfo"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetIndexParameters>
		<GetSetMethod public="1" set="method" override="1">
			<f a="nonPublic">
				<x path="Bool"/>
				<c path="cs.system.reflection.MethodInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetSetMethod>
		<GetValue public="1" set="method" override="1">
			<f a="obj:index">
				<d/>
				<c path="cs.NativeArray"><d/></c>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetValue public="1" set="method">
	<f a="obj:invokeAttr:binder:index:culture">
		<d/>
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.system.reflection.Binder"/>
		<c path="cs.NativeArray"><d/></c>
		<c path="cs.system.globalization.CultureInfo"/>
		<d/>
	</f>
	<meta><m n=":overload"/></meta>
</GetValue></overloads>
		</GetValue>
		<IsDefined public="1" set="method" override="1">
			<f a="attributeType:inherit">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsDefined>
		<SetConstant final="1" public="1" set="method">
			<f a="defaultValue">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetConstant>
		<SetCustomAttribute final="1" public="1" set="method">
			<f a="customBuilder">
				<c path="cs.system.reflection.emit.CustomAttributeBuilder"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><SetCustomAttribute final="1" public="1" set="method">
	<f a="con:binaryAttribute">
		<c path="cs.system.reflection.ConstructorInfo"/>
		<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</SetCustomAttribute></overloads>
		</SetCustomAttribute>
		<SetGetMethod final="1" public="1" set="method">
			<f a="mdBuilder">
				<c path="cs.system.reflection.emit.MethodBuilder"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetGetMethod>
		<SetSetMethod final="1" public="1" set="method">
			<f a="mdBuilder">
				<c path="cs.system.reflection.emit.MethodBuilder"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetSetMethod>
		<SetValue public="1" set="method" override="1">
			<f a="obj:value:index">
				<d/>
				<d/>
				<c path="cs.NativeArray"><d/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><SetValue public="1" set="method">
	<f a="obj:value:invokeAttr:binder:index:culture">
		<d/>
		<d/>
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.system.reflection.Binder"/>
		<c path="cs.NativeArray"><d/></c>
		<c path="cs.system.globalization.CultureInfo"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</SetValue></overloads>
		</SetValue>
		<get_Module set="method" override="1">
			<f a=""><c path="cs.system.reflection.Module"/></f>
			<meta><m n=":overload"/></meta>
		</get_Module>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.PropertyBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.PropertyToken" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.PropertyToken" extern="1">
		<extends path="cs.system.ValueType"/>
		<Empty public="1" set="null" static="1">
			<c path="cs.system.reflection.emit.PropertyToken"/>
			<meta><m n=":readOnly"/></meta>
		</Empty>
		<op_Equality final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="cs.system.reflection.emit.PropertyToken"/>
				<c path="cs.system.reflection.emit.PropertyToken"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Equality>
		<op_Inequality final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="cs.system.reflection.emit.PropertyToken"/>
				<c path="cs.system.reflection.emit.PropertyToken"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Inequality>
		<Token public="1" get="accessor" set="null"><x path="Int"/></Token>
		<get_Token final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Token>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.PropertyToken"</e></m>
		</meta>
	</class>
	<enum path="cs.system.reflection.emit.SignatureHelper_SignatureHelperType" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.SignatureHelper" module="cs.system.reflection.emit.SignatureHelper">
		<HELPER_FIELD><meta><m n=":csNative"><e>0</e></m></meta></HELPER_FIELD>
		<HELPER_LOCAL><meta><m n=":csNative"><e>1</e></m></meta></HELPER_LOCAL>
		<HELPER_METHOD><meta><m n=":csNative"><e>2</e></m></meta></HELPER_METHOD>
		<HELPER_PROPERTY><meta><m n=":csNative"><e>3</e></m></meta></HELPER_PROPERTY>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.Emit.SignatureHelper.SignatureHelperType"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.runtime.interopservices._SignatureHelper" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._SignatureHelper" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method">
			<f a="riid:rgszNames:cNames:lcid:rgDispId">
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<c path="cs.system.IntPtr"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetIDsOfNames>
		<GetTypeInfo public="1" set="method">
			<f a="iTInfo:lcid:ppTInfo">
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfo>
		<GetTypeInfoCount public="1" set="method">
			<f a="pcTInfo">
				<t path="cs.Out"><x path="UInt"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfoCount>
		<Invoke public="1" set="method">
			<f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
				<x path="UInt"/>
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<x path="UInt"/>
				<t path="cs.types.Int16"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._SignatureHelper"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.SignatureHelper" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.SignatureHelper" extern="1">
		<implements path="cs.system.runtime.interopservices._SignatureHelper"/>
		<GetFieldSigHelper final="1" public="1" set="method" static="1">
			<f a="mod">
				<c path="cs.system.reflection.Module"/>
				<c path="cs.system.reflection.emit.SignatureHelper"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetFieldSigHelper>
		<GetLocalVarSigHelper final="1" public="1" set="method" static="1">
			<f a="mod">
				<c path="cs.system.reflection.Module"/>
				<c path="cs.system.reflection.emit.SignatureHelper"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetLocalVarSigHelper final="1" public="1" set="method">
	<f a=""><c path="cs.system.reflection.emit.SignatureHelper"/></f>
	<meta><m n=":overload"/></meta>
</GetLocalVarSigHelper></overloads>
		</GetLocalVarSigHelper>
		<GetMethodSigHelper final="1" public="1" set="method" static="1">
			<f a="callingConvention:returnType">
				<e path="cs.system.reflection.CallingConventions"/>
				<c path="cs.system.Type"/>
				<c path="cs.system.reflection.emit.SignatureHelper"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetMethodSigHelper final="1" public="1" set="method">
					<f a="mod:returnType:parameterTypes">
						<c path="cs.system.reflection.Module"/>
						<c path="cs.system.Type"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.system.reflection.emit.SignatureHelper"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetMethodSigHelper>
				<GetMethodSigHelper final="1" public="1" set="method">
					<f a="mod:unmanagedCallConv:returnType">
						<c path="cs.system.reflection.Module"/>
						<e path="cs.system.runtime.interopservices.CallingConvention"/>
						<c path="cs.system.Type"/>
						<c path="cs.system.reflection.emit.SignatureHelper"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetMethodSigHelper>
				<GetMethodSigHelper final="1" public="1" set="method">
					<f a="mod:callingConvention:returnType">
						<c path="cs.system.reflection.Module"/>
						<e path="cs.system.reflection.CallingConventions"/>
						<c path="cs.system.Type"/>
						<c path="cs.system.reflection.emit.SignatureHelper"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetMethodSigHelper>
				<GetMethodSigHelper final="1" public="1" set="method">
					<f a="unmanagedCallingConvention:returnType">
						<e path="cs.system.runtime.interopservices.CallingConvention"/>
						<c path="cs.system.Type"/>
						<c path="cs.system.reflection.emit.SignatureHelper"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetMethodSigHelper>
			</overloads>
		</GetMethodSigHelper>
		<GetPropertySigHelper final="1" public="1" set="method" static="1">
			<f a="mod:returnType:parameterTypes">
				<c path="cs.system.reflection.Module"/>
				<c path="cs.system.Type"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.system.reflection.emit.SignatureHelper"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetPropertySigHelper final="1" public="1" set="method">
	<f a="mod:returnType:requiredReturnTypeCustomModifiers:optionalReturnTypeCustomModifiers:parameterTypes:requiredParameterTypeCustomModifiers:optionalParameterTypeCustomModifiers">
		<c path="cs.system.reflection.Module"/>
		<c path="cs.system.Type"/>
		<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
		<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
		<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
		<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
		<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
		<c path="cs.system.reflection.emit.SignatureHelper"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetPropertySigHelper></overloads>
		</GetPropertySigHelper>
		<AddArguments final="1" public="1" set="method">
			<f a="arguments:requiredCustomModifiers:optionalCustomModifiers">
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
				<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddArguments>
		<AddArgument final="1" public="1" set="method">
			<f a="argument:pinned">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<AddArgument final="1" public="1" set="method">
					<f a="clsArgument">
						<c path="cs.system.Type"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</AddArgument>
				<AddArgument final="1" public="1" set="method">
					<f a="argument:requiredCustomModifiers:optionalCustomModifiers">
						<c path="cs.system.Type"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</AddArgument>
			</overloads>
		</AddArgument>
		<AddSentinel final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</AddSentinel>
		<GetSignature final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetSignature>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.SignatureHelper"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.SignatureToken" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.SignatureToken" extern="1">
		<extends path="cs.system.ValueType"/>
		<Empty public="1" set="null" static="1">
			<c path="cs.system.reflection.emit.SignatureToken"/>
			<meta><m n=":readOnly"/></meta>
		</Empty>
		<op_Equality final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="cs.system.reflection.emit.SignatureToken"/>
				<c path="cs.system.reflection.emit.SignatureToken"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Equality>
		<op_Inequality final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="cs.system.reflection.emit.SignatureToken"/>
				<c path="cs.system.reflection.emit.SignatureToken"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Inequality>
		<Token public="1" get="accessor" set="null"><x path="Int"/></Token>
		<get_Token final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Token>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.SignatureToken"</e></m>
		</meta>
	</class>
	<enum path="cs.system.reflection.emit.StackBehaviour" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.StackBehaviour">
		<Pop0><meta><m n=":csNative"><e>0</e></m></meta></Pop0>
		<Pop1><meta><m n=":csNative"><e>1</e></m></meta></Pop1>
		<Pop1_pop1><meta><m n=":csNative"><e>2</e></m></meta></Pop1_pop1>
		<Popi><meta><m n=":csNative"><e>3</e></m></meta></Popi>
		<Popi_pop1><meta><m n=":csNative"><e>4</e></m></meta></Popi_pop1>
		<Popi_popi><meta><m n=":csNative"><e>5</e></m></meta></Popi_popi>
		<Popi_popi8><meta><m n=":csNative"><e>6</e></m></meta></Popi_popi8>
		<Popi_popi_popi><meta><m n=":csNative"><e>7</e></m></meta></Popi_popi_popi>
		<Popi_popr4><meta><m n=":csNative"><e>8</e></m></meta></Popi_popr4>
		<Popi_popr8><meta><m n=":csNative"><e>9</e></m></meta></Popi_popr8>
		<Popref><meta><m n=":csNative"><e>10</e></m></meta></Popref>
		<Popref_pop1><meta><m n=":csNative"><e>11</e></m></meta></Popref_pop1>
		<Popref_popi><meta><m n=":csNative"><e>12</e></m></meta></Popref_popi>
		<Popref_popi_popi><meta><m n=":csNative"><e>13</e></m></meta></Popref_popi_popi>
		<Popref_popi_popi8><meta><m n=":csNative"><e>14</e></m></meta></Popref_popi_popi8>
		<Popref_popi_popr4><meta><m n=":csNative"><e>15</e></m></meta></Popref_popi_popr4>
		<Popref_popi_popr8><meta><m n=":csNative"><e>16</e></m></meta></Popref_popi_popr8>
		<Popref_popi_popref><meta><m n=":csNative"><e>17</e></m></meta></Popref_popi_popref>
		<Push0><meta><m n=":csNative"><e>18</e></m></meta></Push0>
		<Push1><meta><m n=":csNative"><e>19</e></m></meta></Push1>
		<Push1_push1><meta><m n=":csNative"><e>20</e></m></meta></Push1_push1>
		<Pushi><meta><m n=":csNative"><e>21</e></m></meta></Pushi>
		<Pushi8><meta><m n=":csNative"><e>22</e></m></meta></Pushi8>
		<Pushr4><meta><m n=":csNative"><e>23</e></m></meta></Pushr4>
		<Pushr8><meta><m n=":csNative"><e>24</e></m></meta></Pushr8>
		<Pushref><meta><m n=":csNative"><e>25</e></m></meta></Pushref>
		<Varpop><meta><m n=":csNative"><e>26</e></m></meta></Varpop>
		<Varpush><meta><m n=":csNative"><e>27</e></m></meta></Varpush>
		<Popref_popi_pop1><meta><m n=":csNative"><e>28</e></m></meta></Popref_popi_pop1>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Reflection.Emit.StackBehaviour"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.reflection.emit.StringToken" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.StringToken" extern="1">
		<extends path="cs.system.ValueType"/>
		<op_Equality final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="cs.system.reflection.emit.StringToken"/>
				<c path="cs.system.reflection.emit.StringToken"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Equality>
		<op_Inequality final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="cs.system.reflection.emit.StringToken"/>
				<c path="cs.system.reflection.emit.StringToken"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Inequality>
		<Token public="1" get="accessor" set="null"><x path="Int"/></Token>
		<get_Token final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Token>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.StringToken"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices._TypeBuilder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._TypeBuilder" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method">
			<f a="riid:rgszNames:cNames:lcid:rgDispId">
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<c path="cs.system.IntPtr"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetIDsOfNames>
		<GetTypeInfo public="1" set="method">
			<f a="iTInfo:lcid:ppTInfo">
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfo>
		<GetTypeInfoCount public="1" set="method">
			<f a="pcTInfo">
				<t path="cs.Out"><x path="UInt"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfoCount>
		<Invoke public="1" set="method">
			<f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
				<x path="UInt"/>
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<x path="UInt"/>
				<t path="cs.types.Int16"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._TypeBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.TypeBuilder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.TypeBuilder" extern="1">
		<extends path="cs.system.Type"/>
		<implements path="cs.system.runtime.interopservices._TypeBuilder"/>
		<UnspecifiedTypeSize public="1" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":readOnly"/></meta>
		</UnspecifiedTypeSize>
		<GetConstructor final="1" public="1" set="method" static="1">
			<f a="type:constructor">
				<c path="cs.system.Type"/>
				<c path="cs.system.reflection.ConstructorInfo"/>
				<c path="cs.system.reflection.ConstructorInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetConstructor>
		<_GetConstructor final="1" public="1" set="method" static="1">
			<f a="type:constructor">
				<c path="cs.system.Type"/>
				<c path="cs.system.reflection.ConstructorInfo"/>
				<c path="cs.system.reflection.ConstructorInfo"/>
			</f>
			<meta>
				<m n=":native"><e>"GetConstructor"</e></m>
				<m n=":overload"/>
			</meta>
		</_GetConstructor>
		<GetMethod final="1" public="1" set="method" static="1">
			<f a="type:method">
				<c path="cs.system.Type"/>
				<c path="cs.system.reflection.MethodInfo"/>
				<c path="cs.system.reflection.MethodInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetMethod>
		<_GetMethod final="1" public="1" set="method" static="1">
			<f a="type:method">
				<c path="cs.system.Type"/>
				<c path="cs.system.reflection.MethodInfo"/>
				<c path="cs.system.reflection.MethodInfo"/>
			</f>
			<meta>
				<m n=":native"><e>"GetMethod"</e></m>
				<m n=":overload"/>
			</meta>
		</_GetMethod>
		<GetField final="1" public="1" set="method" static="1">
			<f a="type:field">
				<c path="cs.system.Type"/>
				<c path="cs.system.reflection.FieldInfo"/>
				<c path="cs.system.reflection.FieldInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetField>
		<_GetField final="1" public="1" set="method" static="1">
			<f a="type:field">
				<c path="cs.system.Type"/>
				<c path="cs.system.reflection.FieldInfo"/>
				<c path="cs.system.reflection.FieldInfo"/>
			</f>
			<meta>
				<m n=":native"><e>"GetField"</e></m>
				<m n=":overload"/>
			</meta>
		</_GetField>
		<DeclaringMethod public="1" get="accessor" set="null" override="1"><c path="cs.system.reflection.MethodBase"/></DeclaringMethod>
		<GenericParameterPosition public="1" get="accessor" set="null" override="1"><x path="Int"/></GenericParameterPosition>
		<IsGenericType public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsGenericType>
		<IsGenericTypeDefinition public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsGenericTypeDefinition>
		<GenericParameterAttributes public="1" get="accessor" set="null" override="1"><e path="cs.system.reflection.GenericParameterAttributes"/></GenericParameterAttributes>
		<IsGenericParameter public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsGenericParameter>
		<ContainsGenericParameters public="1" get="accessor" set="null" override="1"><x path="Bool"/></ContainsGenericParameters>
		<TypeToken public="1" get="accessor" set="null"><c path="cs.system.reflection.emit.TypeToken"/></TypeToken>
		<TypeHandle public="1" get="accessor" set="null" override="1"><c path="cs.system.RuntimeTypeHandle"/></TypeHandle>
		<ReflectedType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></ReflectedType>
		<Size public="1" get="accessor" set="null"><x path="Int"/></Size>
		<PackingSize public="1" get="accessor" set="null"><e path="cs.system.reflection.emit.PackingSize"/></PackingSize>
		<Namespace public="1" get="accessor" set="null" override="1"><c path="String"/></Namespace>
		<Name public="1" get="accessor" set="null" override="1"><c path="String"/></Name>
		<Module public="1" get="accessor" set="null" override="1"><c path="cs.system.reflection.Module"/></Module>
		<GUID public="1" get="accessor" set="null" override="1"><c path="cs.system.Guid"/></GUID>
		<FullName public="1" get="accessor" set="null" override="1"><c path="String"/></FullName>
		<UnderlyingSystemType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></UnderlyingSystemType>
		<DeclaringType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></DeclaringType>
		<BaseType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></BaseType>
		<AssemblyQualifiedName public="1" get="accessor" set="null" override="1"><c path="String"/></AssemblyQualifiedName>
		<Assembly public="1" get="accessor" set="null" override="1"><c path="cs.system.reflection.Assembly"/></Assembly>
		<GetAttributeFlagsImpl set="method" override="1">
			<f a=""><e path="cs.system.reflection.TypeAttributes"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</GetAttributeFlagsImpl>
		<get_Assembly set="method" override="1">
			<f a=""><c path="cs.system.reflection.Assembly"/></f>
			<meta><m n=":overload"/></meta>
		</get_Assembly>
		<get_AssemblyQualifiedName set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_AssemblyQualifiedName>
		<get_BaseType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_BaseType>
		<get_DeclaringType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_DeclaringType>
		<IsSubclassOf public="1" set="method" override="1">
			<f a="c">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsSubclassOf>
		<get_UnderlyingSystemType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_UnderlyingSystemType>
		<get_FullName set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_FullName>
		<get_GUID set="method" override="1">
			<f a=""><c path="cs.system.Guid"/></f>
			<meta><m n=":overload"/></meta>
		</get_GUID>
		<get_Module set="method" override="1">
			<f a=""><c path="cs.system.reflection.Module"/></f>
			<meta><m n=":overload"/></meta>
		</get_Module>
		<get_Name set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<get_Namespace set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Namespace>
		<get_PackingSize final="1" set="method">
			<f a=""><e path="cs.system.reflection.emit.PackingSize"/></f>
			<meta><m n=":overload"/></meta>
		</get_PackingSize>
		<get_Size final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Size>
		<get_ReflectedType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReflectedType>
		<AddDeclarativeSecurity final="1" public="1" set="method">
			<f a="action:pset">
				<e path="cs.system.security.permissions.SecurityAction"/>
				<c path="cs.system.security.PermissionSet"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddDeclarativeSecurity>
		<AddInterfaceImplementation final="1" public="1" set="method">
			<f a="interfaceType">
				<c path="cs.system.Type"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddInterfaceImplementation>
		<GetConstructorImpl set="method" override="1">
			<f a="bindingAttr:binder:callConvention:types:modifiers">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<e path="cs.system.reflection.CallingConventions"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.reflection.ConstructorInfo"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</GetConstructorImpl>
		<IsDefined public="1" set="method" override="1">
			<f a="attributeType:inherit">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsDefined>
		<GetCustomAttributes public="1" set="method" override="1">
			<f a="inherit">
				<x path="Bool"/>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetCustomAttributes public="1" set="method">
	<f a="attributeType:inherit">
		<c path="cs.system.Type"/>
		<x path="Bool"/>
		<c path="cs.NativeArray"><d/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetCustomAttributes></overloads>
		</GetCustomAttributes>
		<DefineNestedType final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.reflection.emit.TypeBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<DefineNestedType final="1" public="1" set="method">
					<f a="name:attr:parent:packSize">
						<c path="String"/>
						<e path="cs.system.reflection.TypeAttributes"/>
						<c path="cs.system.Type"/>
						<e path="cs.system.reflection.emit.PackingSize"/>
						<c path="cs.system.reflection.emit.TypeBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineNestedType>
				<DefineNestedType final="1" public="1" set="method">
					<f a="name:attr:parent:typeSize">
						<c path="String"/>
						<e path="cs.system.reflection.TypeAttributes"/>
						<c path="cs.system.Type"/>
						<x path="Int"/>
						<c path="cs.system.reflection.emit.TypeBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineNestedType>
				<DefineNestedType final="1" public="1" set="method">
					<f a="name:attr:parent:interfaces">
						<c path="String"/>
						<e path="cs.system.reflection.TypeAttributes"/>
						<c path="cs.system.Type"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.system.reflection.emit.TypeBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineNestedType>
				<DefineNestedType final="1" public="1" set="method">
					<f a="name:attr:parent">
						<c path="String"/>
						<e path="cs.system.reflection.TypeAttributes"/>
						<c path="cs.system.Type"/>
						<c path="cs.system.reflection.emit.TypeBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineNestedType>
				<DefineNestedType final="1" public="1" set="method">
					<f a="name:attr">
						<c path="String"/>
						<e path="cs.system.reflection.TypeAttributes"/>
						<c path="cs.system.reflection.emit.TypeBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineNestedType>
			</overloads>
		</DefineNestedType>
		<DefineConstructor final="1" public="1" set="method">
			<f a="attributes:callingConvention:parameterTypes">
				<e path="cs.system.reflection.MethodAttributes"/>
				<e path="cs.system.reflection.CallingConventions"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.system.reflection.emit.ConstructorBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><DefineConstructor final="1" public="1" set="method">
	<f a="attributes:callingConvention:parameterTypes:requiredCustomModifiers:optionalCustomModifiers">
		<e path="cs.system.reflection.MethodAttributes"/>
		<e path="cs.system.reflection.CallingConventions"/>
		<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
		<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
		<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
		<c path="cs.system.reflection.emit.ConstructorBuilder"/>
	</f>
	<meta><m n=":overload"/></meta>
</DefineConstructor></overloads>
		</DefineConstructor>
		<DefineDefaultConstructor final="1" public="1" set="method">
			<f a="attributes">
				<e path="cs.system.reflection.MethodAttributes"/>
				<c path="cs.system.reflection.emit.ConstructorBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DefineDefaultConstructor>
		<DefineMethod final="1" public="1" set="method">
			<f a="name:attributes:returnType:parameterTypes">
				<c path="String"/>
				<e path="cs.system.reflection.MethodAttributes"/>
				<c path="cs.system.Type"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.system.reflection.emit.MethodBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<DefineMethod final="1" public="1" set="method">
					<f a="name:attributes:callingConvention">
						<c path="String"/>
						<e path="cs.system.reflection.MethodAttributes"/>
						<e path="cs.system.reflection.CallingConventions"/>
						<c path="cs.system.reflection.emit.MethodBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineMethod>
				<DefineMethod final="1" public="1" set="method">
					<f a="name:attributes">
						<c path="String"/>
						<e path="cs.system.reflection.MethodAttributes"/>
						<c path="cs.system.reflection.emit.MethodBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineMethod>
				<DefineMethod final="1" public="1" set="method">
					<f a="name:attributes:callingConvention:returnType:returnTypeRequiredCustomModifiers:returnTypeOptionalCustomModifiers:parameterTypes:parameterTypeRequiredCustomModifiers:parameterTypeOptionalCustomModifiers">
						<c path="String"/>
						<e path="cs.system.reflection.MethodAttributes"/>
						<e path="cs.system.reflection.CallingConventions"/>
						<c path="cs.system.Type"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
						<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
						<c path="cs.system.reflection.emit.MethodBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineMethod>
				<DefineMethod final="1" public="1" set="method">
					<f a="name:attributes:callingConvention:returnType:parameterTypes">
						<c path="String"/>
						<e path="cs.system.reflection.MethodAttributes"/>
						<e path="cs.system.reflection.CallingConventions"/>
						<c path="cs.system.Type"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.system.reflection.emit.MethodBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineMethod>
			</overloads>
		</DefineMethod>
		<DefinePInvokeMethod final="1" public="1" set="method">
			<f a="name:dllName:entryName:attributes:callingConvention:returnType:parameterTypes:nativeCallConv:nativeCharSet">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<e path="cs.system.reflection.MethodAttributes"/>
				<e path="cs.system.reflection.CallingConventions"/>
				<c path="cs.system.Type"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<e path="cs.system.runtime.interopservices.CallingConvention"/>
				<e path="cs.system.runtime.interopservices.CharSet"/>
				<c path="cs.system.reflection.emit.MethodBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<DefinePInvokeMethod final="1" public="1" set="method">
					<f a="name:dllName:attributes:callingConvention:returnType:parameterTypes:nativeCallConv:nativeCharSet">
						<c path="String"/>
						<c path="String"/>
						<e path="cs.system.reflection.MethodAttributes"/>
						<e path="cs.system.reflection.CallingConventions"/>
						<c path="cs.system.Type"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<e path="cs.system.runtime.interopservices.CallingConvention"/>
						<e path="cs.system.runtime.interopservices.CharSet"/>
						<c path="cs.system.reflection.emit.MethodBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefinePInvokeMethod>
				<DefinePInvokeMethod final="1" public="1" set="method">
					<f a="name:dllName:entryName:attributes:callingConvention:returnType:returnTypeRequiredCustomModifiers:returnTypeOptionalCustomModifiers:parameterTypes:parameterTypeRequiredCustomModifiers:parameterTypeOptionalCustomModifiers:nativeCallConv:nativeCharSet">
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<e path="cs.system.reflection.MethodAttributes"/>
						<e path="cs.system.reflection.CallingConventions"/>
						<c path="cs.system.Type"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
						<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
						<e path="cs.system.runtime.interopservices.CallingConvention"/>
						<e path="cs.system.runtime.interopservices.CharSet"/>
						<c path="cs.system.reflection.emit.MethodBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefinePInvokeMethod>
			</overloads>
		</DefinePInvokeMethod>
		<DefineMethodOverride final="1" public="1" set="method">
			<f a="methodInfoBody:methodInfoDeclaration">
				<c path="cs.system.reflection.MethodInfo"/>
				<c path="cs.system.reflection.MethodInfo"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DefineMethodOverride>
		<DefineField final="1" public="1" set="method">
			<f a="fieldName:type:attributes">
				<c path="String"/>
				<c path="cs.system.Type"/>
				<e path="cs.system.reflection.FieldAttributes"/>
				<c path="cs.system.reflection.emit.FieldBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><DefineField final="1" public="1" set="method">
	<f a="fieldName:type:requiredCustomModifiers:optionalCustomModifiers:attributes">
		<c path="String"/>
		<c path="cs.system.Type"/>
		<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
		<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
		<e path="cs.system.reflection.FieldAttributes"/>
		<c path="cs.system.reflection.emit.FieldBuilder"/>
	</f>
	<meta><m n=":overload"/></meta>
</DefineField></overloads>
		</DefineField>
		<DefineProperty final="1" public="1" set="method">
			<f a="name:attributes:returnType:parameterTypes">
				<c path="String"/>
				<e path="cs.system.reflection.PropertyAttributes"/>
				<c path="cs.system.Type"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.system.reflection.emit.PropertyBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<DefineProperty final="1" public="1" set="method">
					<f a="name:attributes:callingConvention:returnType:returnTypeRequiredCustomModifiers:returnTypeOptionalCustomModifiers:parameterTypes:parameterTypeRequiredCustomModifiers:parameterTypeOptionalCustomModifiers">
						<c path="String"/>
						<e path="cs.system.reflection.PropertyAttributes"/>
						<e path="cs.system.reflection.CallingConventions"/>
						<c path="cs.system.Type"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
						<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
						<c path="cs.system.reflection.emit.PropertyBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineProperty>
				<DefineProperty final="1" public="1" set="method">
					<f a="name:attributes:returnType:returnTypeRequiredCustomModifiers:returnTypeOptionalCustomModifiers:parameterTypes:parameterTypeRequiredCustomModifiers:parameterTypeOptionalCustomModifiers">
						<c path="String"/>
						<e path="cs.system.reflection.PropertyAttributes"/>
						<c path="cs.system.Type"/>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
						<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
						<c path="cs.NativeArray"><c path="cs.NativeArray"><c path="cs.system.Type"/></c></c>
						<c path="cs.system.reflection.emit.PropertyBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</DefineProperty>
			</overloads>
		</DefineProperty>
		<DefineTypeInitializer final="1" public="1" set="method">
			<f a=""><c path="cs.system.reflection.emit.ConstructorBuilder"/></f>
			<meta><m n=":overload"/></meta>
		</DefineTypeInitializer>
		<CreateType final="1" public="1" set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</CreateType>
		<GetConstructors public="1" set="method" override="1">
			<f a="bindingAttr">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ConstructorInfo"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</GetConstructors>
		<GetElementType public="1" set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</GetElementType>
		<GetEvent public="1" set="method" override="1">
			<f a="name:bindingAttr">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.EventInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetEvent>
		<GetEvents public="1" set="method" override="1">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.reflection.EventInfo"/></c></f>
			<meta><m n=":overload"/></meta>
			<overloads><GetEvents public="1" set="method">
	<f a="bindingAttr">
		<e path="cs.system.reflection.BindingFlags"/>
		<c path="cs.NativeArray"><c path="cs.system.reflection.EventInfo"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</GetEvents></overloads>
		</GetEvents>
		<GetField public="1" set="method" override="1">
			<f a="name:bindingAttr">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.FieldInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetField>
		<GetFields public="1" set="method" override="1">
			<f a="bindingAttr">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.FieldInfo"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</GetFields>
		<GetInterface public="1" set="method" override="1">
			<f a="name:ignoreCase">
				<c path="String"/>
				<x path="Bool"/>
				<c path="cs.system.Type"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetInterface>
		<GetInterfaces public="1" set="method" override="1">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetInterfaces>
		<GetMember public="1" set="method" override="1">
			<f a="name:type:bindingAttr">
				<c path="String"/>
				<e path="cs.system.reflection.MemberTypes"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</GetMember>
		<GetMembers public="1" set="method" override="1">
			<f a="bindingAttr">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.MemberInfo"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</GetMembers>
		<GetMethods public="1" set="method" override="1">
			<f a="bindingAttr">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.MethodInfo"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</GetMethods>
		<GetMethodImpl set="method" override="1">
			<f a="name:bindingAttr:binder:callConvention:types:modifiers">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<e path="cs.system.reflection.CallingConventions"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.reflection.MethodInfo"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</GetMethodImpl>
		<GetNestedType public="1" set="method" override="1">
			<f a="name:bindingAttr">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.Type"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetNestedType>
		<GetNestedTypes public="1" set="method" override="1">
			<f a="bindingAttr">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</GetNestedTypes>
		<GetProperties public="1" set="method" override="1">
			<f a="bindingAttr">
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.NativeArray"><c path="cs.system.reflection.PropertyInfo"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</GetProperties>
		<GetPropertyImpl set="method" override="1">
			<f a="name:bindingAttr:binder:returnType:types:modifiers">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<c path="cs.system.Type"/>
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.reflection.PropertyInfo"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</GetPropertyImpl>
		<HasElementTypeImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</HasElementTypeImpl>
		<InvokeMember public="1" set="method" override="1">
			<f a="name:invokeAttr:binder:target:args:modifiers:culture:namedParameters">
				<c path="String"/>
				<e path="cs.system.reflection.BindingFlags"/>
				<c path="cs.system.reflection.Binder"/>
				<d/>
				<c path="cs.NativeArray"><d/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.ParameterModifier"/></c>
				<c path="cs.system.globalization.CultureInfo"/>
				<c path="cs.NativeArray"><c path="String"/></c>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</InvokeMember>
		<IsArrayImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</IsArrayImpl>
		<IsByRefImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</IsByRefImpl>
		<IsCOMObjectImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</IsCOMObjectImpl>
		<IsPointerImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</IsPointerImpl>
		<IsPrimitiveImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</IsPrimitiveImpl>
		<IsValueTypeImpl set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</IsValueTypeImpl>
		<MakeArrayType public="1" set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><MakeArrayType public="1" set="method">
	<f a="rank">
		<x path="Int"/>
		<c path="cs.system.Type"/>
	</f>
	<meta><m n=":overload"/></meta>
</MakeArrayType></overloads>
		</MakeArrayType>
		<MakeByRefType public="1" set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</MakeByRefType>
		<MakeGenericType public="1" set="method" override="1">
			<f a="typeArguments">
				<c path="cs.NativeArray"><c path="cs.system.Type"/></c>
				<c path="cs.system.Type"/>
			</f>
			<meta><m n=":overload"/></meta>
		</MakeGenericType>
		<MakePointerType public="1" set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</MakePointerType>
		<get_TypeHandle set="method" override="1">
			<f a=""><c path="cs.system.RuntimeTypeHandle"/></f>
			<meta><m n=":overload"/></meta>
		</get_TypeHandle>
		<SetCustomAttribute final="1" public="1" set="method">
			<f a="customBuilder">
				<c path="cs.system.reflection.emit.CustomAttributeBuilder"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><SetCustomAttribute final="1" public="1" set="method">
	<f a="con:binaryAttribute">
		<c path="cs.system.reflection.ConstructorInfo"/>
		<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</SetCustomAttribute></overloads>
		</SetCustomAttribute>
		<DefineEvent final="1" public="1" set="method">
			<f a="name:attributes:eventtype">
				<c path="String"/>
				<e path="cs.system.reflection.EventAttributes"/>
				<c path="cs.system.Type"/>
				<c path="cs.system.reflection.emit.EventBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DefineEvent>
		<DefineInitializedData final="1" public="1" set="method">
			<f a="name:data:attributes">
				<c path="String"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<e path="cs.system.reflection.FieldAttributes"/>
				<c path="cs.system.reflection.emit.FieldBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DefineInitializedData>
		<DefineUninitializedData final="1" public="1" set="method">
			<f a="name:size:attributes">
				<c path="String"/>
				<x path="Int"/>
				<e path="cs.system.reflection.FieldAttributes"/>
				<c path="cs.system.reflection.emit.FieldBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DefineUninitializedData>
		<get_TypeToken final="1" set="method">
			<f a=""><c path="cs.system.reflection.emit.TypeToken"/></f>
			<meta><m n=":overload"/></meta>
		</get_TypeToken>
		<SetParent final="1" public="1" set="method">
			<f a="parent">
				<c path="cs.system.Type"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetParent>
		<GetInterfaceMap public="1" set="method" override="1">
			<f a="interfaceType">
				<c path="cs.system.Type"/>
				<c path="cs.system.reflection.InterfaceMapping"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetInterfaceMap>
		<ToString public="1" set="method" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<IsAssignableFrom public="1" set="method" override="1">
			<f a="c">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsAssignableFrom>
		<IsCreated final="1" public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</IsCreated>
		<GetGenericArguments public="1" set="method" override="1">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.Type"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetGenericArguments>
		<GetGenericTypeDefinition public="1" set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</GetGenericTypeDefinition>
		<get_ContainsGenericParameters set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_ContainsGenericParameters>
		<get_IsGenericParameter set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsGenericParameter>
		<get_GenericParameterAttributes set="method" override="1">
			<f a=""><e path="cs.system.reflection.GenericParameterAttributes"/></f>
			<meta><m n=":overload"/></meta>
		</get_GenericParameterAttributes>
		<get_IsGenericTypeDefinition set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsGenericTypeDefinition>
		<get_IsGenericType set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsGenericType>
		<get_GenericParameterPosition set="method" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_GenericParameterPosition>
		<get_DeclaringMethod set="method" override="1">
			<f a=""><c path="cs.system.reflection.MethodBase"/></f>
			<meta><m n=":overload"/></meta>
		</get_DeclaringMethod>
		<DefineGenericParameters final="1" public="1" set="method">
			<f a="names">
				<c path="cs.NativeArray"><c path="String"/></c>
				<c path="cs.NativeArray"><c path="cs.system.reflection.emit.GenericTypeParameterBuilder"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</DefineGenericParameters>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.TypeBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.TypeToken" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.TypeToken" extern="1">
		<extends path="cs.system.ValueType"/>
		<Empty public="1" set="null" static="1">
			<c path="cs.system.reflection.emit.TypeToken"/>
			<meta><m n=":readOnly"/></meta>
		</Empty>
		<op_Equality final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="cs.system.reflection.emit.TypeToken"/>
				<c path="cs.system.reflection.emit.TypeToken"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Equality>
		<op_Inequality final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="cs.system.reflection.emit.TypeToken"/>
				<c path="cs.system.reflection.emit.TypeToken"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Inequality>
		<Token public="1" get="accessor" set="null"><x path="Int"/></Token>
		<get_Token final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Token>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.TypeToken"</e></m>
		</meta>
	</class>
	<class path="cs.system.reflection.emit.UnmanagedMarshal" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.reflection.emit.UnmanagedMarshal" extern="1">
		<DefineByValArray final="1" public="1" set="method" static="1">
			<f a="elemCount">
				<x path="Int"/>
				<c path="cs.system.reflection.emit.UnmanagedMarshal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DefineByValArray>
		<DefineByValTStr final="1" public="1" set="method" static="1">
			<f a="elemCount">
				<x path="Int"/>
				<c path="cs.system.reflection.emit.UnmanagedMarshal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DefineByValTStr>
		<DefineLPArray final="1" public="1" set="method" static="1">
			<f a="elemType">
				<e path="cs.system.runtime.interopservices.UnmanagedType"/>
				<c path="cs.system.reflection.emit.UnmanagedMarshal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DefineLPArray>
		<DefineSafeArray final="1" public="1" set="method" static="1">
			<f a="elemType">
				<e path="cs.system.runtime.interopservices.UnmanagedType"/>
				<c path="cs.system.reflection.emit.UnmanagedMarshal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DefineSafeArray>
		<DefineUnmanagedMarshal final="1" public="1" set="method" static="1">
			<f a="unmanagedType">
				<e path="cs.system.runtime.interopservices.UnmanagedType"/>
				<c path="cs.system.reflection.emit.UnmanagedMarshal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DefineUnmanagedMarshal>
		<DefineCustom final="1" public="1" set="method" static="1">
			<f a="typeref:cookie:mtype:id">
				<c path="cs.system.Type"/>
				<c path="String"/>
				<c path="String"/>
				<c path="cs.system.Guid"/>
				<c path="cs.system.reflection.emit.UnmanagedMarshal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DefineCustom>
		<IIDGuid public="1" get="accessor" set="null"><c path="cs.system.Guid"/></IIDGuid>
		<GetUnmanagedType public="1" get="accessor" set="null"><e path="cs.system.runtime.interopservices.UnmanagedType"/></GetUnmanagedType>
		<ElementCount public="1" get="accessor" set="null"><x path="Int"/></ElementCount>
		<BaseType public="1" get="accessor" set="null"><e path="cs.system.runtime.interopservices.UnmanagedType"/></BaseType>
		<get_BaseType final="1" set="method">
			<f a=""><e path="cs.system.runtime.interopservices.UnmanagedType"/></f>
			<meta><m n=":overload"/></meta>
		</get_BaseType>
		<get_ElementCount final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_ElementCount>
		<get_GetUnmanagedType final="1" set="method">
			<f a=""><e path="cs.system.runtime.interopservices.UnmanagedType"/></f>
			<meta><m n=":overload"/></meta>
		</get_GetUnmanagedType>
		<get_IIDGuid final="1" set="method">
			<f a=""><c path="cs.system.Guid"/></f>
			<meta><m n=":overload"/></meta>
		</get_IIDGuid>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Reflection.Emit.UnmanagedMarshal"</e></m>
		</meta>
	</class>
	<class path="cs.system.resources.IResourceWriter" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.resources.IResourceWriter" extern="1" interface="1">
		<extends path="cs.system.IDisposable"/>
		<Dispose public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Dispose>
		<AddResource public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<AddResource public="1" set="method">
					<f a="name:value">
						<c path="String"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</AddResource>
				<AddResource public="1" set="method">
					<f a="name:value">
						<c path="String"/>
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</AddResource>
			</overloads>
		</AddResource>
		<Close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Close>
		<Generate public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Generate>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Resources.IResourceWriter"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.constrainedexecution.CriticalFinalizerObject" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.constrainedexecution.CriticalFinalizerObject" extern="1">
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.ConstrainedExecution.CriticalFinalizerObject"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.hosting.ActivationArguments" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.hosting.ActivationArguments" extern="1">
		<ApplicationIdentity public="1" get="accessor" set="null"><c path="cs.system.ApplicationIdentity"/></ApplicationIdentity>
		<ActivationData public="1" get="accessor" set="null"><c path="cs.NativeArray"><c path="String"/></c></ActivationData>
		<ActivationContext public="1" get="accessor" set="null"><c path="cs.system.ActivationContext"/></ActivationContext>
		<get_ActivationContext final="1" set="method">
			<f a=""><c path="cs.system.ActivationContext"/></f>
			<meta><m n=":overload"/></meta>
		</get_ActivationContext>
		<get_ActivationData final="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</get_ActivationData>
		<get_ApplicationIdentity final="1" set="method">
			<f a=""><c path="cs.system.ApplicationIdentity"/></f>
			<meta><m n=":overload"/></meta>
		</get_ApplicationIdentity>
		<new final="1" public="1" set="method">
			<f a="activationData">
				<c path="cs.system.ActivationContext"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="applicationIdentity:activationData">
						<c path="cs.system.ApplicationIdentity"/>
						<c path="cs.NativeArray"><c path="String"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="activationContext:activationData">
						<c path="cs.system.ActivationContext"/>
						<c path="cs.NativeArray"><c path="String"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="applicationIdentity">
						<c path="cs.system.ApplicationIdentity"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Hosting.ActivationArguments"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.hosting.ApplicationActivator" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.hosting.ApplicationActivator" extern="1">
		<CreateInstanceHelper final="1" set="method" static="1">
			<f a="adSetup">
				<c path="cs.system.AppDomainSetup"/>
				<c path="cs.system.runtime.remoting.ObjectHandle"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</CreateInstanceHelper>
		<CreateInstance public="1" set="method">
			<f a="activationContext">
				<c path="cs.system.ActivationContext"/>
				<c path="cs.system.runtime.remoting.ObjectHandle"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><CreateInstance public="1" set="method">
	<f a="activationContext:activationCustomData">
		<c path="cs.system.ActivationContext"/>
		<c path="cs.NativeArray"><c path="String"/></c>
		<c path="cs.system.runtime.remoting.ObjectHandle"/>
	</f>
	<meta><m n=":overload"/></meta>
</CreateInstance></overloads>
		</CreateInstance>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Hosting.ApplicationActivator"</e></m>
		</meta>
	</class>
	<enum path="cs.system.runtime.interopservices.CallingConvention" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices.CallingConvention">
		<Winapi><meta><m n=":csNative"><e>1</e></m></meta></Winapi>
		<Cdecl><meta><m n=":csNative"><e>2</e></m></meta></Cdecl>
		<StdCall><meta><m n=":csNative"><e>3</e></m></meta></StdCall>
		<ThisCall><meta><m n=":csNative"><e>4</e></m></meta></ThisCall>
		<FastCall><meta><m n=":csNative"><e>5</e></m></meta></FastCall>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Runtime.InteropServices.CallingConvention"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.runtime.interopservices.CharSet" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices.CharSet">
		<None><meta><m n=":csNative"><e>1</e></m></meta></None>
		<Ansi><meta><m n=":csNative"><e>2</e></m></meta></Ansi>
		<Unicode><meta><m n=":csNative"><e>3</e></m></meta></Unicode>
		<Auto><meta><m n=":csNative"><e>4</e></m></meta></Auto>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Runtime.InteropServices.CharSet"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.runtime.interopservices.LayoutKind" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices.LayoutKind">
		<Sequential><meta><m n=":csNative"><e>0</e></m></meta></Sequential>
		<Explicit><meta><m n=":csNative"><e>2</e></m></meta></Explicit>
		<Auto><meta><m n=":csNative"><e>3</e></m></meta></Auto>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Runtime.InteropServices.LayoutKind"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.runtime.interopservices.SafeHandle" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices.SafeHandle" extern="1">
		<extends path="cs.system.runtime.constrainedexecution.CriticalFinalizerObject"/>
		<implements path="cs.system.IDisposable"/>
		<IsInvalid public="1" get="accessor" set="null"><x path="Bool"/></IsInvalid>
		<IsClosed public="1" get="accessor" set="null"><x path="Bool"/></IsClosed>
		<handle><c path="cs.system.IntPtr"/></handle>
		<Close final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Close>
		<DangerousAddRef final="1" public="1" set="method">
			<f a="success">
				<t path="cs.Ref"><x path="Bool"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DangerousAddRef>
		<DangerousGetHandle final="1" public="1" set="method">
			<f a=""><c path="cs.system.IntPtr"/></f>
			<meta><m n=":overload"/></meta>
		</DangerousGetHandle>
		<DangerousRelease final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</DangerousRelease>
		<Dispose final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><Dispose set="method">
	<f a="disposing">
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":protected"/>
		<m n=":overload"/>
	</meta>
</Dispose></overloads>
		</Dispose>
		<SetHandleAsInvalid final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</SetHandleAsInvalid>
		<ReleaseHandle set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</ReleaseHandle>
		<SetHandle final="1" set="method">
			<f a="handle">
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</SetHandle>
		<get_IsClosed final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsClosed>
		<get_IsInvalid set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsInvalid>
		<new final="1" set="method">
			<f a="invalidHandleValue:ownsHandle">
				<c path="cs.system.IntPtr"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices.SafeHandle"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.interopservices.StructLayoutAttribute" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices.StructLayoutAttribute" extern="1">
		<extends path="cs.system.Attribute"/>
		<Value public="1" get="accessor" set="null"><e path="cs.system.runtime.interopservices.LayoutKind"/></Value>
		<Size public="1"><x path="Int"/></Size>
		<Pack public="1"><x path="Int"/></Pack>
		<CharSet public="1"><e path="cs.system.runtime.interopservices.CharSet"/></CharSet>
		<get_Value final="1" set="method">
			<f a=""><e path="cs.system.runtime.interopservices.LayoutKind"/></f>
			<meta><m n=":overload"/></meta>
		</get_Value>
		<new final="1" public="1" set="method">
			<f a="layoutKind">
				<t path="cs.types.Int16"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new final="1" public="1" set="method">
	<f a="layoutKind">
		<e path="cs.system.runtime.interopservices.LayoutKind"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices.StructLayoutAttribute"</e></m>
		</meta>
	</class>
	<enum path="cs.system.runtime.interopservices.UnmanagedType" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices.UnmanagedType">
		<Bool><meta><m n=":csNative"><e>2</e></m></meta></Bool>
		<I1><meta><m n=":csNative"><e>3</e></m></meta></I1>
		<U1><meta><m n=":csNative"><e>4</e></m></meta></U1>
		<I2><meta><m n=":csNative"><e>5</e></m></meta></I2>
		<U2><meta><m n=":csNative"><e>6</e></m></meta></U2>
		<I4><meta><m n=":csNative"><e>7</e></m></meta></I4>
		<U4><meta><m n=":csNative"><e>8</e></m></meta></U4>
		<I8><meta><m n=":csNative"><e>9</e></m></meta></I8>
		<U8><meta><m n=":csNative"><e>10</e></m></meta></U8>
		<R4><meta><m n=":csNative"><e>11</e></m></meta></R4>
		<R8><meta><m n=":csNative"><e>12</e></m></meta></R8>
		<Currency><meta><m n=":csNative"><e>15</e></m></meta></Currency>
		<BStr><meta><m n=":csNative"><e>19</e></m></meta></BStr>
		<LPStr><meta><m n=":csNative"><e>20</e></m></meta></LPStr>
		<LPWStr><meta><m n=":csNative"><e>21</e></m></meta></LPWStr>
		<LPTStr><meta><m n=":csNative"><e>22</e></m></meta></LPTStr>
		<ByValTStr><meta><m n=":csNative"><e>23</e></m></meta></ByValTStr>
		<IUnknown><meta><m n=":csNative"><e>25</e></m></meta></IUnknown>
		<IDispatch><meta><m n=":csNative"><e>26</e></m></meta></IDispatch>
		<Struct><meta><m n=":csNative"><e>27</e></m></meta></Struct>
		<Interface><meta><m n=":csNative"><e>28</e></m></meta></Interface>
		<SafeArray><meta><m n=":csNative"><e>29</e></m></meta></SafeArray>
		<ByValArray><meta><m n=":csNative"><e>30</e></m></meta></ByValArray>
		<SysInt><meta><m n=":csNative"><e>31</e></m></meta></SysInt>
		<SysUInt><meta><m n=":csNative"><e>32</e></m></meta></SysUInt>
		<VBByRefStr><meta><m n=":csNative"><e>34</e></m></meta></VBByRefStr>
		<AnsiBStr><meta><m n=":csNative"><e>35</e></m></meta></AnsiBStr>
		<TBStr><meta><m n=":csNative"><e>36</e></m></meta></TBStr>
		<VariantBool><meta><m n=":csNative"><e>37</e></m></meta></VariantBool>
		<FunctionPtr><meta><m n=":csNative"><e>38</e></m></meta></FunctionPtr>
		<AsAny><meta><m n=":csNative"><e>40</e></m></meta></AsAny>
		<LPArray><meta><m n=":csNative"><e>42</e></m></meta></LPArray>
		<LPStruct><meta><m n=":csNative"><e>43</e></m></meta></LPStruct>
		<CustomMarshaler><meta><m n=":csNative"><e>44</e></m></meta></CustomMarshaler>
		<Error><meta><m n=":csNative"><e>45</e></m></meta></Error>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Runtime.InteropServices.UnmanagedType"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.runtime.interopservices._Thread" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.interopservices._Thread" extern="1" interface="1">
		<GetIDsOfNames public="1" set="method">
			<f a="riid:rgszNames:cNames:lcid:rgDispId">
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<c path="cs.system.IntPtr"/>
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetIDsOfNames>
		<GetTypeInfo public="1" set="method">
			<f a="iTInfo:lcid:ppTInfo">
				<x path="UInt"/>
				<x path="UInt"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfo>
		<GetTypeInfoCount public="1" set="method">
			<f a="pcTInfo">
				<t path="cs.Out"><x path="UInt"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetTypeInfoCount>
		<Invoke public="1" set="method">
			<f a="dispIdMember:riid:lcid:wFlags:pDispParams:pVarResult:pExcepInfo:puArgErr">
				<x path="UInt"/>
				<t path="cs.Ref"><c path="cs.system.Guid"/></t>
				<x path="UInt"/>
				<t path="cs.types.Int16"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.InteropServices._Thread"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.remoting.IChannelInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.IChannelInfo" extern="1" interface="1">
		<ChannelData public="1" get="accessor" set="accessor"><c path="cs.NativeArray"><d/></c></ChannelData>
		<get_ChannelData set="method">
			<f a=""><c path="cs.NativeArray"><d/></c></f>
			<meta><m n=":overload"/></meta>
		</get_ChannelData>
		<set_ChannelData set="method">
			<f a="value">
				<c path="cs.NativeArray"><d/></c>
				<c path="cs.NativeArray"><d/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ChannelData>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Remoting.IChannelInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.remoting.IEnvoyInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.IEnvoyInfo" extern="1" interface="1">
		<EnvoySinks public="1" get="accessor" set="accessor"><c path="cs.system.runtime.remoting.messaging.IMessageSink"/></EnvoySinks>
		<get_EnvoySinks set="method">
			<f a=""><c path="cs.system.runtime.remoting.messaging.IMessageSink"/></f>
			<meta><m n=":overload"/></meta>
		</get_EnvoySinks>
		<set_EnvoySinks set="method">
			<f a="value">
				<c path="cs.system.runtime.remoting.messaging.IMessageSink"/>
				<c path="cs.system.runtime.remoting.messaging.IMessageSink"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_EnvoySinks>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Remoting.IEnvoyInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.remoting.IObjectHandle" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.IObjectHandle" extern="1" interface="1">
		<Unwrap public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</Unwrap>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Remoting.IObjectHandle"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.remoting.IRemotingTypeInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.IRemotingTypeInfo" extern="1" interface="1">
		<TypeName public="1" get="accessor" set="accessor"><c path="String"/></TypeName>
		<get_TypeName set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_TypeName>
		<set_TypeName set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_TypeName>
		<CanCastTo public="1" set="method">
			<f a="fromType:o">
				<c path="cs.system.Type"/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CanCastTo>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Remoting.IRemotingTypeInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.remoting.ObjRef" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.ObjRef" extern="1">
		<implements path="cs.system.runtime.serialization.IObjectReference"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<URI public="1" get="accessor" set="accessor"><c path="String"/></URI>
		<TypeInfo public="1" get="accessor" set="accessor"><c path="cs.system.runtime.remoting.IRemotingTypeInfo"/></TypeInfo>
		<EnvoyInfo public="1" get="accessor" set="accessor"><c path="cs.system.runtime.remoting.IEnvoyInfo"/></EnvoyInfo>
		<ChannelInfo public="1" get="accessor" set="accessor"><c path="cs.system.runtime.remoting.IChannelInfo"/></ChannelInfo>
		<get_ChannelInfo set="method">
			<f a=""><c path="cs.system.runtime.remoting.IChannelInfo"/></f>
			<meta><m n=":overload"/></meta>
		</get_ChannelInfo>
		<set_ChannelInfo set="method">
			<f a="value">
				<c path="cs.system.runtime.remoting.IChannelInfo"/>
				<c path="cs.system.runtime.remoting.IChannelInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ChannelInfo>
		<get_EnvoyInfo set="method">
			<f a=""><c path="cs.system.runtime.remoting.IEnvoyInfo"/></f>
			<meta><m n=":overload"/></meta>
		</get_EnvoyInfo>
		<set_EnvoyInfo set="method">
			<f a="value">
				<c path="cs.system.runtime.remoting.IEnvoyInfo"/>
				<c path="cs.system.runtime.remoting.IEnvoyInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_EnvoyInfo>
		<get_TypeInfo set="method">
			<f a=""><c path="cs.system.runtime.remoting.IRemotingTypeInfo"/></f>
			<meta><m n=":overload"/></meta>
		</get_TypeInfo>
		<set_TypeInfo set="method">
			<f a="value">
				<c path="cs.system.runtime.remoting.IRemotingTypeInfo"/>
				<c path="cs.system.runtime.remoting.IRemotingTypeInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_TypeInfo>
		<get_URI set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_URI>
		<set_URI set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_URI>
		<GetObjectData public="1" set="method">
			<f a="info:context">
				<c path="cs.system.runtime.serialization.SerializationInfo"/>
				<c path="cs.system.runtime.serialization.StreamingContext"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetObjectData>
		<GetRealObject public="1" set="method">
			<f a="context">
				<c path="cs.system.runtime.serialization.StreamingContext"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetRealObject>
		<IsFromThisAppDomain final="1" public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</IsFromThisAppDomain>
		<IsFromThisProcess final="1" public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</IsFromThisProcess>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" set="method">
					<f a="info:context">
						<c path="cs.system.runtime.serialization.SerializationInfo"/>
						<c path="cs.system.runtime.serialization.StreamingContext"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":protected"/>
						<m n=":overload"/>
					</meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="o:requestedType">
						<c path="cs.system.MarshalByRefObject"/>
						<c path="cs.system.Type"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Remoting.ObjRef"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.remoting.ObjectHandle" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.ObjectHandle" extern="1">
		<extends path="cs.system.MarshalByRefObject"/>
		<implements path="cs.system.runtime.remoting.IObjectHandle"/>
		<InitializeLifetimeService public="1" set="method" override="1">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</InitializeLifetimeService>
		<Unwrap final="1" public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</Unwrap>
		<new final="1" public="1" set="method">
			<f a="o">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Remoting.ObjectHandle"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.remoting.contexts.Context_NamedSlots" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.contexts.Context" module="cs.system.runtime.remoting.contexts.Context" extern="1">
		<namedSlots public="1" static="1"><c path="cs.system.collections.Hashtable"/></namedSlots>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Remoting.Contexts.Context.NamedSlots"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.remoting.contexts.Context" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.contexts.Context" extern="1">
		<DefaultContext public="1" get="accessor" set="null" static="1"><c path="cs.system.runtime.remoting.contexts.Context"/></DefaultContext>
		<get_DefaultContext final="1" set="method" static="1">
			<f a=""><c path="cs.system.runtime.remoting.contexts.Context"/></f>
			<meta><m n=":overload"/></meta>
		</get_DefaultContext>
		<RegisterDynamicProperty final="1" public="1" set="method" static="1">
			<f a="prop:obj:ctx">
				<c path="cs.system.runtime.remoting.contexts.IDynamicProperty"/>
				<c path="cs.system.ContextBoundObject"/>
				<c path="cs.system.runtime.remoting.contexts.Context"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RegisterDynamicProperty>
		<UnregisterDynamicProperty final="1" public="1" set="method" static="1">
			<f a="name:obj:ctx">
				<c path="String"/>
				<c path="cs.system.ContextBoundObject"/>
				<c path="cs.system.runtime.remoting.contexts.Context"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</UnregisterDynamicProperty>
		<AllocateDataSlot final="1" public="1" set="method" static="1">
			<f a=""><c path="cs.system.LocalDataStoreSlot"/></f>
			<meta><m n=":overload"/></meta>
		</AllocateDataSlot>
		<AllocateNamedDataSlot final="1" public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.LocalDataStoreSlot"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AllocateNamedDataSlot>
		<FreeNamedDataSlot final="1" public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</FreeNamedDataSlot>
		<GetData final="1" public="1" set="method" static="1">
			<f a="slot">
				<c path="cs.system.LocalDataStoreSlot"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetData>
		<GetNamedDataSlot final="1" public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.LocalDataStoreSlot"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetNamedDataSlot>
		<SetData final="1" public="1" set="method" static="1">
			<f a="slot:data">
				<c path="cs.system.LocalDataStoreSlot"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetData>
		<ContextProperties public="1" get="accessor" set="null"><c path="cs.NativeArray"><c path="cs.system.runtime.remoting.contexts.IContextProperty"/></c></ContextProperties>
		<ContextID public="1" get="accessor" set="null"><x path="Int"/></ContextID>
		<get_ContextID set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_ContextID>
		<get_ContextProperties set="method">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.runtime.remoting.contexts.IContextProperty"/></c></f>
			<meta><m n=":overload"/></meta>
		</get_ContextProperties>
		<GetProperty public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.runtime.remoting.contexts.IContextProperty"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetProperty>
		<SetProperty public="1" set="method">
			<f a="prop">
				<c path="cs.system.runtime.remoting.contexts.IContextProperty"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetProperty>
		<Freeze public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Freeze>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<DoCallBack final="1" public="1" set="method">
			<f a="deleg">
				<x path="cs.system.runtime.remoting.contexts.CrossContextDelegate"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DoCallBack>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Remoting.Contexts.Context"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.remoting.contexts.Delegate_CrossContextDelegate" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.contexts.CrossContextDelegate" module="cs.system.runtime.remoting.contexts.CrossContextDelegate" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.runtime.remoting.contexts.CrossContextDelegate"/>
	<x path="cs.system.runtime.remoting.contexts.CrossContextDelegate"/>
	<x path="cs.system.runtime.remoting.contexts.CrossContextDelegate"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.runtime.remoting.contexts.CrossContextDelegate"/>
	<x path="cs.system.runtime.remoting.contexts.CrossContextDelegate"/>
	<x path="cs.system.runtime.remoting.contexts.CrossContextDelegate"/>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="callback:object">
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Remoting.Contexts.CrossContextDelegate"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.runtime.remoting.contexts.CrossContextDelegate" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.contexts.CrossContextDelegate">
		<from><icast field="FromHaxeFunction"><f a=""><x path="Void"/></f></icast></from>
		<this><c path="cs.system.runtime.remoting.contexts.Delegate_CrossContextDelegate"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.runtime.remoting.contexts._CrossContextDelegate.CrossContextDelegate_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.contexts.CrossContextDelegate" private="1" module="cs.system.runtime.remoting.contexts.CrossContextDelegate">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=""><x path="Void"/></f>
			<x path="cs.system.runtime.remoting.contexts.CrossContextDelegate"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=""><x path="Void"/></f>
			<x path="cs.system.runtime.remoting.contexts.CrossContextDelegate"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.runtime.remoting.contexts.Delegate_CrossContextDelegate"/>
			<c path="cs.system.runtime.remoting.contexts.Delegate_CrossContextDelegate"/>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.runtime.remoting.contexts.CrossContextDelegate"/>
			<x path="cs.system.runtime.remoting.contexts.CrossContextDelegate"/>
			<x path="cs.system.runtime.remoting.contexts.CrossContextDelegate"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.runtime.remoting.contexts.CrossContextDelegate"/>
			<x path="cs.system.runtime.remoting.contexts.CrossContextDelegate"/>
			<x path="cs.system.runtime.remoting.contexts.CrossContextDelegate"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system.runtime.remoting.contexts._CrossContextDelegate.CrossContextDelegate_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.contexts.CrossContextDelegate" private="1" module="cs.system.runtime.remoting.contexts.CrossContextDelegate">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=""><x path="Void"/></f>
				<x path="cs.system.runtime.remoting.contexts.CrossContextDelegate"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=""><x path="Void"/></f>
				<x path="cs.system.runtime.remoting.contexts.CrossContextDelegate"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.runtime.remoting.contexts.Delegate_CrossContextDelegate"/>
				<c path="cs.system.runtime.remoting.contexts.Delegate_CrossContextDelegate"/>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.runtime.remoting.contexts.CrossContextDelegate"/>
				<x path="cs.system.runtime.remoting.contexts.CrossContextDelegate"/>
				<x path="cs.system.runtime.remoting.contexts.CrossContextDelegate"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.runtime.remoting.contexts.CrossContextDelegate"/>
				<x path="cs.system.runtime.remoting.contexts.CrossContextDelegate"/>
				<x path="cs.system.runtime.remoting.contexts.CrossContextDelegate"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="cs.system.runtime.remoting.contexts.IContextProperty" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.contexts.IContextProperty" extern="1" interface="1">
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<get_Name set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<Freeze public="1" set="method">
			<f a="newContext">
				<c path="cs.system.runtime.remoting.contexts.Context"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Freeze>
		<IsNewContextOK public="1" set="method">
			<f a="newCtx">
				<c path="cs.system.runtime.remoting.contexts.Context"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsNewContextOK>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Remoting.Contexts.IContextProperty"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.remoting.contexts.IDynamicProperty" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.contexts.IDynamicProperty" extern="1" interface="1">
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<get_Name set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Remoting.Contexts.IDynamicProperty"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.remoting.messaging.IMessage" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.messaging.IMessage" extern="1" interface="1">
		<Properties public="1" get="accessor" set="null"><c path="cs.system.collections.IDictionary"/></Properties>
		<get_Properties set="method">
			<f a=""><c path="cs.system.collections.IDictionary"/></f>
			<meta><m n=":overload"/></meta>
		</get_Properties>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Remoting.Messaging.IMessage"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.remoting.messaging.IMessageCtrl" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.messaging.IMessageCtrl" extern="1" interface="1">
		<Cancel public="1" set="method">
			<f a="msToCancel">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Cancel>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Remoting.Messaging.IMessageCtrl"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.remoting.messaging.IMessageSink" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.remoting.messaging.IMessageSink" extern="1" interface="1">
		<NextSink public="1" get="accessor" set="null"><c path="cs.system.runtime.remoting.messaging.IMessageSink"/></NextSink>
		<SyncProcessMessage public="1" set="method">
			<f a="msg">
				<c path="cs.system.runtime.remoting.messaging.IMessage"/>
				<c path="cs.system.runtime.remoting.messaging.IMessage"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SyncProcessMessage>
		<AsyncProcessMessage public="1" set="method">
			<f a="msg:replySink">
				<c path="cs.system.runtime.remoting.messaging.IMessage"/>
				<c path="cs.system.runtime.remoting.messaging.IMessageSink"/>
				<c path="cs.system.runtime.remoting.messaging.IMessageCtrl"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AsyncProcessMessage>
		<get_NextSink set="method">
			<f a=""><c path="cs.system.runtime.remoting.messaging.IMessageSink"/></f>
			<meta><m n=":overload"/></meta>
		</get_NextSink>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Remoting.Messaging.IMessageSink"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.serialization.IFormatterConverter" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.serialization.IFormatterConverter" extern="1" interface="1">
		<Convert public="1" set="method">
			<f a="value:type">
				<d/>
				<c path="cs.system.Type"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><Convert public="1" set="method">
	<f a="value:typeCode">
		<d/>
		<e path="cs.system.TypeCode"/>
		<d/>
	</f>
	<meta><m n=":overload"/></meta>
</Convert></overloads>
		</Convert>
		<ToBoolean public="1" set="method">
			<f a="value">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToBoolean>
		<ToByte public="1" set="method">
			<f a="value">
				<d/>
				<t path="cs.types.UInt8"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToByte>
		<ToChar public="1" set="method">
			<f a="value">
				<d/>
				<t path="cs.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToChar>
		<ToDateTime public="1" set="method">
			<f a="value">
				<d/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToDateTime>
		<ToDecimal public="1" set="method">
			<f a="value">
				<d/>
				<c path="cs.system.Decimal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToDecimal>
		<ToDouble public="1" set="method">
			<f a="value">
				<d/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToDouble>
		<ToInt16 public="1" set="method">
			<f a="value">
				<d/>
				<t path="cs.types.Int16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToInt16>
		<ToInt32 public="1" set="method">
			<f a="value">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToInt32>
		<ToInt64 public="1" set="method">
			<f a="value">
				<d/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToInt64>
		<ToSByte public="1" set="method">
			<f a="value">
				<d/>
				<t path="cs.types.Int8"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToSByte>
		<ToSingle public="1" set="method">
			<f a="value">
				<d/>
				<x path="Single"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToSingle>
		<ToString public="1" set="method">
			<f a="value">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<ToUInt16 public="1" set="method">
			<f a="value">
				<d/>
				<t path="cs.types.UInt16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToUInt16>
		<ToUInt32 public="1" set="method">
			<f a="value">
				<d/>
				<x path="UInt"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToUInt32>
		<ToUInt64 public="1" set="method">
			<f a="value">
				<d/>
				<t path="cs.types.UInt64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToUInt64>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Serialization.IFormatterConverter"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.serialization.SerializationEntry" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.serialization.SerializationEntry" extern="1">
		<extends path="cs.system.ValueType"/>
		<Value public="1" get="accessor" set="null"><d/></Value>
		<ObjectType public="1" get="accessor" set="null"><c path="cs.system.Type"/></ObjectType>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<get_Name final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<get_ObjectType final="1" set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_ObjectType>
		<get_Value final="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_Value>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Serialization.SerializationEntry"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.serialization.SerializationInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.serialization.SerializationInfo" extern="1">
		<MemberCount public="1" get="accessor" set="null"><x path="Int"/></MemberCount>
		<FullTypeName public="1" get="accessor" set="accessor"><c path="String"/></FullTypeName>
		<AssemblyName public="1" get="accessor" set="accessor"><c path="String"/></AssemblyName>
		<get_AssemblyName final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_AssemblyName>
		<set_AssemblyName final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_AssemblyName>
		<get_FullTypeName final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_FullTypeName>
		<set_FullTypeName final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_FullTypeName>
		<get_MemberCount final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_MemberCount>
		<AddValue final="1" public="1" set="method">
			<f a="name:value:type">
				<c path="String"/>
				<d/>
				<c path="cs.system.Type"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<AddValue final="1" public="1" set="method">
					<f a="name:value">
						<c path="String"/>
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</AddValue>
				<AddValue final="1" public="1" set="method">
					<f a="name:value">
						<c path="String"/>
						<t path="cs.types.UInt64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</AddValue>
				<AddValue final="1" public="1" set="method">
					<f a="name:value">
						<c path="String"/>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</AddValue>
				<AddValue final="1" public="1" set="method">
					<f a="name:value">
						<c path="String"/>
						<x path="UInt"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</AddValue>
				<AddValue final="1" public="1" set="method">
					<f a="name:value">
						<c path="String"/>
						<x path="Single"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</AddValue>
				<AddValue final="1" public="1" set="method">
					<f a="name:value">
						<c path="String"/>
						<c path="cs.system.DateTime"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</AddValue>
				<AddValue final="1" public="1" set="method">
					<f a="name:value">
						<c path="String"/>
						<c path="cs.system.Decimal"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</AddValue>
				<AddValue final="1" public="1" set="method">
					<f a="name:value">
						<c path="String"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</AddValue>
				<AddValue final="1" public="1" set="method">
					<f a="name:value">
						<c path="String"/>
						<t path="cs.types.Int8"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</AddValue>
				<AddValue final="1" public="1" set="method">
					<f a="name:value">
						<c path="String"/>
						<t path="cs.types.Char16"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</AddValue>
				<AddValue final="1" public="1" set="method">
					<f a="name:value">
						<c path="String"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</AddValue>
				<AddValue final="1" public="1" set="method">
					<f a="name:value">
						<c path="String"/>
						<t path="cs.types.UInt8"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</AddValue>
				<AddValue final="1" public="1" set="method">
					<f a="name:value">
						<c path="String"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</AddValue>
				<AddValue final="1" public="1" set="method">
					<f a="name:value">
						<c path="String"/>
						<t path="cs.types.UInt16"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</AddValue>
				<AddValue final="1" public="1" set="method">
					<f a="name:value">
						<c path="String"/>
						<t path="cs.types.Int16"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</AddValue>
			</overloads>
		</AddValue>
		<GetValue final="1" public="1" set="method">
			<f a="name:type">
				<c path="String"/>
				<c path="cs.system.Type"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetValue>
		<SetType final="1" public="1" set="method">
			<f a="type">
				<c path="cs.system.Type"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetType>
		<GetEnumerator final="1" public="1" set="method">
			<f a=""><c path="cs.system.runtime.serialization.SerializationInfoEnumerator"/></f>
			<meta><m n=":overload"/></meta>
		</GetEnumerator>
		<GetBoolean final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetBoolean>
		<GetByte final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<t path="cs.types.UInt8"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetByte>
		<GetChar final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<t path="cs.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetChar>
		<GetDateTime final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.DateTime"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetDateTime>
		<GetDecimal final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.Decimal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetDecimal>
		<GetDouble final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetDouble>
		<GetInt16 final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<t path="cs.types.Int16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetInt16>
		<GetInt32 final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetInt32>
		<GetInt64 final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetInt64>
		<GetSByte final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<t path="cs.types.Int8"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetSByte>
		<GetSingle final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Single"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetSingle>
		<GetString final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetString>
		<GetUInt16 final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<t path="cs.types.UInt16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetUInt16>
		<GetUInt32 final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetUInt32>
		<GetUInt64 final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<t path="cs.types.UInt64"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetUInt64>
		<new final="1" public="1" set="method">
			<f a="type:converter">
				<c path="cs.system.Type"/>
				<c path="cs.system.runtime.serialization.IFormatterConverter"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Serialization.SerializationInfo"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.serialization.SerializationInfoEnumerator" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.serialization.SerializationInfoEnumerator" extern="1">
		<implements path="cs.system.collections.IEnumerator"/>
		<Value public="1" get="accessor" set="null"><d/></Value>
		<ObjectType public="1" get="accessor" set="null"><c path="cs.system.Type"/></ObjectType>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<Current public="1" get="accessor" set="null">
			<c path="cs.system.runtime.serialization.SerializationEntry"/>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
			</meta>
		</Current>
		<get_Current final="1" set="method">
			<f a=""><c path="cs.system.runtime.serialization.SerializationEntry"/></f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":skipReflection"/>
				<m n=":overload"/>
			</meta>
		</get_Current>
		<get_Name final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<get_ObjectType final="1" set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_ObjectType>
		<get_Value final="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_Value>
		<MoveNext final="1" public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</MoveNext>
		<Reset final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Reset>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Serialization.SerializationInfoEnumerator"</e></m>
		</meta>
	</class>
	<class path="cs.system.runtime.serialization.StreamingContext" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.serialization.StreamingContext" extern="1">
		<extends path="cs.system.ValueType"/>
		<State public="1" get="accessor" set="null"><e path="cs.system.runtime.serialization.StreamingContextStates"/></State>
		<Context public="1" get="accessor" set="null"><d/></Context>
		<get_Context final="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_Context>
		<get_State final="1" set="method">
			<f a=""><e path="cs.system.runtime.serialization.StreamingContextStates"/></f>
			<meta><m n=":overload"/></meta>
		</get_State>
		<new final="1" public="1" set="method">
			<f a="state">
				<e path="cs.system.runtime.serialization.StreamingContextStates"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new final="1" public="1" set="method">
	<f a="state:additional">
		<e path="cs.system.runtime.serialization.StreamingContextStates"/>
		<d/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Runtime.Serialization.StreamingContext"</e></m>
		</meta>
	</class>
	<enum path="cs.system.runtime.serialization.StreamingContextStates" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.runtime.serialization.StreamingContextStates">
		<CrossProcess><meta><m n=":csNative"><e>1</e></m></meta></CrossProcess>
		<CrossMachine><meta><m n=":csNative"><e>2</e></m></meta></CrossMachine>
		<File><meta><m n=":csNative"><e>4</e></m></meta></File>
		<Persistence><meta><m n=":csNative"><e>8</e></m></meta></Persistence>
		<Remoting><meta><m n=":csNative"><e>16</e></m></meta></Remoting>
		<Other><meta><m n=":csNative"><e>32</e></m></meta></Other>
		<Clone><meta><m n=":csNative"><e>64</e></m></meta></Clone>
		<CrossAppDomain><meta><m n=":csNative"><e>128</e></m></meta></CrossAppDomain>
		<All><meta><m n=":csNative"><e>255</e></m></meta></All>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Runtime.Serialization.StreamingContextStates"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.security.HostSecurityManager" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.HostSecurityManager" extern="1">
		<Flags public="1" get="accessor" set="null"><e path="cs.system.security.HostSecurityManagerOptions"/></Flags>
		<DomainPolicy public="1" get="accessor" set="null"><c path="cs.system.security.policy.PolicyLevel"/></DomainPolicy>
		<get_DomainPolicy set="method">
			<f a=""><c path="cs.system.security.policy.PolicyLevel"/></f>
			<meta><m n=":overload"/></meta>
		</get_DomainPolicy>
		<get_Flags set="method">
			<f a=""><e path="cs.system.security.HostSecurityManagerOptions"/></f>
			<meta><m n=":overload"/></meta>
		</get_Flags>
		<DetermineApplicationTrust public="1" set="method">
			<f a="applicationEvidence:activatorEvidence:context">
				<c path="cs.system.security.policy.Evidence"/>
				<c path="cs.system.security.policy.Evidence"/>
				<c path="cs.system.security.policy.TrustManagerContext"/>
				<c path="cs.system.security.policy.ApplicationTrust"/>
			</f>
			<meta><m n=":overload"/></meta>
		</DetermineApplicationTrust>
		<ProvideAppDomainEvidence public="1" set="method">
			<f a="inputEvidence">
				<c path="cs.system.security.policy.Evidence"/>
				<c path="cs.system.security.policy.Evidence"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ProvideAppDomainEvidence>
		<ProvideAssemblyEvidence public="1" set="method">
			<f a="loadedAssembly:inputEvidence">
				<c path="cs.system.reflection.Assembly"/>
				<c path="cs.system.security.policy.Evidence"/>
				<c path="cs.system.security.policy.Evidence"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ProvideAssemblyEvidence>
		<ResolvePolicy public="1" set="method">
			<f a="evidence">
				<c path="cs.system.security.policy.Evidence"/>
				<c path="cs.system.security.PermissionSet"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ResolvePolicy>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.HostSecurityManager"</e></m>
		</meta>
	</class>
	<enum path="cs.system.security.HostSecurityManagerOptions" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.HostSecurityManagerOptions">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<HostAppDomainEvidence><meta><m n=":csNative"><e>1</e></m></meta></HostAppDomainEvidence>
		<HostPolicyLevel><meta><m n=":csNative"><e>2</e></m></meta></HostPolicyLevel>
		<HostAssemblyEvidence><meta><m n=":csNative"><e>4</e></m></meta></HostAssemblyEvidence>
		<HostDetermineApplicationTrust><meta><m n=":csNative"><e>8</e></m></meta></HostDetermineApplicationTrust>
		<HostResolvePolicy><meta><m n=":csNative"><e>16</e></m></meta></HostResolvePolicy>
		<AllFlags><meta><m n=":csNative"><e>31</e></m></meta></AllFlags>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.HostSecurityManagerOptions"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.security.ISecurityEncodable" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.ISecurityEncodable" extern="1" interface="1">
		<FromXml public="1" set="method">
			<f a="e">
				<c path="cs.system.security.SecurityElement"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</FromXml>
		<ToXml public="1" set="method">
			<f a=""><c path="cs.system.security.SecurityElement"/></f>
			<meta><m n=":overload"/></meta>
		</ToXml>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.ISecurityEncodable"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.IPermission" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.IPermission" extern="1" interface="1">
		<extends path="cs.system.security.ISecurityEncodable"/>
		<ToXml public="1" set="method">
			<f a=""><c path="cs.system.security.SecurityElement"/></f>
			<meta><m n=":overload"/></meta>
		</ToXml>
		<FromXml public="1" set="method">
			<f a="e">
				<c path="cs.system.security.SecurityElement"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</FromXml>
		<Copy public="1" set="method">
			<f a=""><c path="cs.system.security.IPermission"/></f>
			<meta><m n=":overload"/></meta>
		</Copy>
		<Demand public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Demand>
		<Intersect public="1" set="method">
			<f a="target">
				<c path="cs.system.security.IPermission"/>
				<c path="cs.system.security.IPermission"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Intersect>
		<IsSubsetOf public="1" set="method">
			<f a="target">
				<c path="cs.system.security.IPermission"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsSubsetOf>
		<Union public="1" set="method">
			<f a="target">
				<c path="cs.system.security.IPermission"/>
				<c path="cs.system.security.IPermission"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Union>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.IPermission"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.ISecurityPolicyEncodable" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.ISecurityPolicyEncodable" extern="1" interface="1">
		<FromXml public="1" set="method">
			<f a="e:level">
				<c path="cs.system.security.SecurityElement"/>
				<c path="cs.system.security.policy.PolicyLevel"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</FromXml>
		<ToXml public="1" set="method">
			<f a="level">
				<c path="cs.system.security.policy.PolicyLevel"/>
				<c path="cs.system.security.SecurityElement"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ToXml>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.ISecurityPolicyEncodable"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.IStackWalk" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.IStackWalk" extern="1" interface="1">
		<Assert public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Assert>
		<Demand public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Demand>
		<Deny public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Deny>
		<PermitOnly public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</PermitOnly>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.IStackWalk"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.PermissionSet" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.PermissionSet" extern="1">
		<implements path="cs.system.collections.ICollection"/>
		<implements path="cs.system.collections.IEnumerable"/>
		<implements path="cs.system.runtime.serialization.IDeserializationCallback"/>
		<implements path="cs.system.security.ISecurityEncodable"/>
		<implements path="cs.system.security.IStackWalk"/>
		<ConvertPermissionSet final="1" public="1" set="method" static="1">
			<f a="inFormat:inData:outFormat">
				<c path="String"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<c path="String"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
			</f>
			<meta><m n=":overload"/></meta>
		</ConvertPermissionSet>
		<RevertAssert final="1" public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</RevertAssert>
		<SyncRoot public="1" get="accessor" set="null"><d/></SyncRoot>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<IsSynchronized public="1" get="accessor" set="null"><x path="Bool"/></IsSynchronized>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<AddPermission final="1" public="1" set="method">
			<f a="perm">
				<c path="cs.system.security.IPermission"/>
				<c path="cs.system.security.IPermission"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddPermission>
		<Assert final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Assert>
		<Copy public="1" set="method">
			<f a=""><c path="cs.system.security.PermissionSet"/></f>
			<meta><m n=":overload"/></meta>
		</Copy>
		<CopyTo public="1" set="method">
			<f a="array:index">
				<c path="cs.system.Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CopyTo>
		<Demand final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Demand>
		<Deny final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Deny>
		<FromXml public="1" set="method">
			<f a="et">
				<c path="cs.system.security.SecurityElement"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</FromXml>
		<GetEnumerator final="1" public="1" set="method">
			<f a=""><c path="cs.system.collections.IEnumerator"/></f>
			<meta><m n=":overload"/></meta>
		</GetEnumerator>
		<IsSubsetOf final="1" public="1" set="method">
			<f a="target">
				<c path="cs.system.security.PermissionSet"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsSubsetOf>
		<PermitOnly final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</PermitOnly>
		<ContainsNonCodeAccessPermissions final="1" public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</ContainsNonCodeAccessPermissions>
		<GetPermission final="1" public="1" set="method">
			<f a="permClass">
				<c path="cs.system.Type"/>
				<c path="cs.system.security.IPermission"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetPermission>
		<Intersect final="1" public="1" set="method">
			<f a="other">
				<c path="cs.system.security.PermissionSet"/>
				<c path="cs.system.security.PermissionSet"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Intersect>
		<IsEmpty final="1" public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</IsEmpty>
		<IsUnrestricted final="1" public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</IsUnrestricted>
		<RemovePermission final="1" public="1" set="method">
			<f a="permClass">
				<c path="cs.system.Type"/>
				<c path="cs.system.security.IPermission"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemovePermission>
		<SetPermission final="1" public="1" set="method">
			<f a="perm">
				<c path="cs.system.security.IPermission"/>
				<c path="cs.system.security.IPermission"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetPermission>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<ToXml public="1" set="method">
			<f a=""><c path="cs.system.security.SecurityElement"/></f>
			<meta><m n=":overload"/></meta>
		</ToXml>
		<Union final="1" public="1" set="method">
			<f a="other">
				<c path="cs.system.security.PermissionSet"/>
				<c path="cs.system.security.PermissionSet"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Union>
		<get_Count set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Count>
		<get_IsSynchronized set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSynchronized>
		<get_IsReadOnly set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsReadOnly>
		<get_SyncRoot set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_SyncRoot>
		<new final="1" public="1" set="method">
			<f a="state">
				<e path="cs.system.security.permissions.PermissionState"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new final="1" public="1" set="method">
	<f a="permSet">
		<c path="cs.system.security.PermissionSet"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.PermissionSet"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.NamedPermissionSet" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.NamedPermissionSet" extern="1">
		<extends path="cs.system.security.PermissionSet"/>
		<Name public="1" get="accessor" set="accessor"><c path="String"/></Name>
		<Description public="1" get="accessor" set="accessor"><c path="String"/></Description>
		<get_Description final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Description>
		<set_Description final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Description>
		<get_Name final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<set_Name final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Name>
		<Copy public="1" set="method" override="1">
			<f a=""><c path="cs.system.security.PermissionSet"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><Copy final="1" public="1" set="method">
	<f a="name">
		<c path="String"/>
		<c path="cs.system.security.NamedPermissionSet"/>
	</f>
	<meta><m n=":overload"/></meta>
</Copy></overloads>
		</Copy>
		<FromXml public="1" set="method" override="1">
			<f a="et">
				<c path="cs.system.security.SecurityElement"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</FromXml>
		<ToXml public="1" set="method" override="1">
			<f a=""><c path="cs.system.security.SecurityElement"/></f>
			<meta><m n=":overload"/></meta>
		</ToXml>
		<new final="1" public="1" set="method">
			<f a="name:permSet">
				<c path="String"/>
				<c path="cs.system.security.PermissionSet"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="name">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="permSet">
						<c path="cs.system.security.NamedPermissionSet"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="name:state">
						<c path="String"/>
						<e path="cs.system.security.permissions.PermissionState"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.NamedPermissionSet"</e></m>
		</meta>
	</class>
	<enum path="cs.system.security.PolicyLevelType" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.PolicyLevelType">
		<User><meta><m n=":csNative"><e>0</e></m></meta></User>
		<Machine><meta><m n=":csNative"><e>1</e></m></meta></Machine>
		<Enterprise><meta><m n=":csNative"><e>2</e></m></meta></Enterprise>
		<AppDomain><meta><m n=":csNative"><e>3</e></m></meta></AppDomain>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.PolicyLevelType"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.security.SecureString" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.SecureString" extern="1">
		<extends path="cs.system.runtime.constrainedexecution.CriticalFinalizerObject"/>
		<implements path="cs.system.IDisposable"/>
		<Length public="1" get="accessor" set="null"><x path="Int"/></Length>
		<get_Length final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Length>
		<AppendChar final="1" public="1" set="method">
			<f a="c">
				<t path="cs.types.Char16"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AppendChar>
		<Clear final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Clear>
		<Copy final="1" public="1" set="method">
			<f a=""><c path="cs.system.security.SecureString"/></f>
			<meta><m n=":overload"/></meta>
		</Copy>
		<Dispose final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Dispose>
		<InsertAt final="1" public="1" set="method">
			<f a="index:c">
				<x path="Int"/>
				<t path="cs.types.Char16"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</InsertAt>
		<IsReadOnly final="1" public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</IsReadOnly>
		<MakeReadOnly final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</MakeReadOnly>
		<RemoveAt final="1" public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveAt>
		<SetAt final="1" public="1" set="method">
			<f a="index:c">
				<x path="Int"/>
				<t path="cs.types.Char16"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetAt>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><new final="1" public="1" set="method">
	<f a="value:length">
		<x path="cs.Pointer"><t path="cs.types.Char16"/></x>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.SecureString"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.SecurityElement_SecurityAttribute" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.SecurityElement" module="cs.system.security.SecurityElement" extern="1">
		<Value public="1" get="accessor" set="null"><c path="String"/></Value>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<get_Name final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<get_Value final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Value>
		<new final="1" public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.SecurityElement.SecurityAttribute"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.SecurityElement" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.SecurityElement" extern="1">
		<Escape final="1" public="1" set="method" static="1">
			<f a="str">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Escape>
		<FromString final="1" public="1" set="method" static="1">
			<f a="xml">
				<c path="String"/>
				<c path="cs.system.security.SecurityElement"/>
			</f>
			<meta><m n=":overload"/></meta>
		</FromString>
		<IsValidAttributeName final="1" public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsValidAttributeName>
		<IsValidAttributeValue final="1" public="1" set="method" static="1">
			<f a="value">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsValidAttributeValue>
		<IsValidTag final="1" public="1" set="method" static="1">
			<f a="tag">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsValidTag>
		<IsValidText final="1" public="1" set="method" static="1">
			<f a="text">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsValidText>
		<Text public="1" get="accessor" set="accessor"><c path="String"/></Text>
		<Tag public="1" get="accessor" set="accessor"><c path="String"/></Tag>
		<Children public="1" get="accessor" set="accessor"><c path="cs.system.collections.ArrayList"/></Children>
		<Attributes public="1" get="accessor" set="accessor"><c path="cs.system.collections.Hashtable"/></Attributes>
		<get_Attributes final="1" set="method">
			<f a=""><c path="cs.system.collections.Hashtable"/></f>
			<meta><m n=":overload"/></meta>
		</get_Attributes>
		<set_Attributes final="1" set="method">
			<f a="value">
				<c path="cs.system.collections.Hashtable"/>
				<c path="cs.system.collections.Hashtable"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Attributes>
		<get_Children final="1" set="method">
			<f a=""><c path="cs.system.collections.ArrayList"/></f>
			<meta><m n=":overload"/></meta>
		</get_Children>
		<set_Children final="1" set="method">
			<f a="value">
				<c path="cs.system.collections.ArrayList"/>
				<c path="cs.system.collections.ArrayList"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Children>
		<get_Tag final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Tag>
		<set_Tag final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Tag>
		<get_Text final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Text>
		<set_Text final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Text>
		<AddAttribute final="1" public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddAttribute>
		<AddChild final="1" public="1" set="method">
			<f a="child">
				<c path="cs.system.security.SecurityElement"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddChild>
		<Attribute final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Attribute>
		<Copy final="1" public="1" set="method">
			<f a=""><c path="cs.system.security.SecurityElement"/></f>
			<meta><m n=":overload"/></meta>
		</Copy>
		<Equal final="1" public="1" set="method">
			<f a="other">
				<c path="cs.system.security.SecurityElement"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Equal>
		<SearchForChildByTag final="1" public="1" set="method">
			<f a="tag">
				<c path="String"/>
				<c path="cs.system.security.SecurityElement"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SearchForChildByTag>
		<SearchForTextOfTag final="1" public="1" set="method">
			<f a="tag">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SearchForTextOfTag>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<new final="1" public="1" set="method">
			<f a="tag">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new final="1" public="1" set="method">
	<f a="tag:text">
		<c path="String"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.SecurityElement"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.SecurityState" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.SecurityState" extern="1">
		<EnsureState public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</EnsureState>
		<IsStateAvailable final="1" public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</IsStateAvailable>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.SecurityState"</e></m>
		</meta>
	</class>
	<enum path="cs.system.security.accesscontrol.AccessControlModification" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.AccessControlModification">
		<Add><meta><m n=":csNative"><e>0</e></m></meta></Add>
		<Set><meta><m n=":csNative"><e>1</e></m></meta></Set>
		<Reset><meta><m n=":csNative"><e>2</e></m></meta></Reset>
		<Remove><meta><m n=":csNative"><e>3</e></m></meta></Remove>
		<RemoveAll><meta><m n=":csNative"><e>4</e></m></meta></RemoveAll>
		<RemoveSpecific><meta><m n=":csNative"><e>5</e></m></meta></RemoveSpecific>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.AccessControl.AccessControlModification"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.security.accesscontrol.AccessControlSections" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.AccessControlSections">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<Audit><meta><m n=":csNative"><e>1</e></m></meta></Audit>
		<Access><meta><m n=":csNative"><e>2</e></m></meta></Access>
		<Owner><meta><m n=":csNative"><e>4</e></m></meta></Owner>
		<Group><meta><m n=":csNative"><e>8</e></m></meta></Group>
		<All><meta><m n=":csNative"><e>15</e></m></meta></All>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.AccessControl.AccessControlSections"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.security.accesscontrol.AccessControlType" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.AccessControlType">
		<Allow><meta><m n=":csNative"><e>0</e></m></meta></Allow>
		<Deny><meta><m n=":csNative"><e>1</e></m></meta></Deny>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.AccessControl.AccessControlType"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.security.accesscontrol.AuthorizationRule" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.AuthorizationRule" extern="1">
		<AccessMask get="null" set="null"><x path="Int"/></AccessMask>
		<PropagationFlags public="1" get="accessor" set="null"><e path="cs.system.security.accesscontrol.PropagationFlags"/></PropagationFlags>
		<IsInherited public="1" get="accessor" set="null"><x path="Bool"/></IsInherited>
		<InheritanceFlags public="1" get="accessor" set="null"><e path="cs.system.security.accesscontrol.InheritanceFlags"/></InheritanceFlags>
		<IdentityReference public="1" get="accessor" set="null"><c path="cs.system.security.principal.IdentityReference"/></IdentityReference>
		<get_IdentityReference final="1" set="method">
			<f a=""><c path="cs.system.security.principal.IdentityReference"/></f>
			<meta><m n=":overload"/></meta>
		</get_IdentityReference>
		<get_InheritanceFlags final="1" set="method">
			<f a=""><e path="cs.system.security.accesscontrol.InheritanceFlags"/></f>
			<meta><m n=":overload"/></meta>
		</get_InheritanceFlags>
		<get_IsInherited final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsInherited>
		<get_PropagationFlags final="1" set="method">
			<f a=""><e path="cs.system.security.accesscontrol.PropagationFlags"/></f>
			<meta><m n=":overload"/></meta>
		</get_PropagationFlags>
		<get_AccessMask final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</get_AccessMask>
		<new final="1" set="method">
			<f a="identity:accessMask:isInherited:inheritanceFlags:propagationFlags">
				<c path="cs.system.security.principal.IdentityReference"/>
				<x path="Int"/>
				<x path="Bool"/>
				<e path="cs.system.security.accesscontrol.InheritanceFlags"/>
				<e path="cs.system.security.accesscontrol.PropagationFlags"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.AuthorizationRule"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.accesscontrol.AccessRule" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.AccessRule" extern="1">
		<extends path="cs.system.security.accesscontrol.AuthorizationRule"/>
		<AccessControlType public="1" get="accessor" set="null"><e path="cs.system.security.accesscontrol.AccessControlType"/></AccessControlType>
		<get_AccessControlType final="1" set="method">
			<f a=""><e path="cs.system.security.accesscontrol.AccessControlType"/></f>
			<meta><m n=":overload"/></meta>
		</get_AccessControlType>
		<new final="1" set="method">
			<f a="identity:accessMask:isInherited:inheritanceFlags:propagationFlags:type">
				<c path="cs.system.security.principal.IdentityReference"/>
				<x path="Int"/>
				<x path="Bool"/>
				<e path="cs.system.security.accesscontrol.InheritanceFlags"/>
				<e path="cs.system.security.accesscontrol.PropagationFlags"/>
				<e path="cs.system.security.accesscontrol.AccessControlType"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.AccessRule"</e></m>
		</meta>
	</class>
	<enum path="cs.system.security.accesscontrol.AuditFlags" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.AuditFlags">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<Success><meta><m n=":csNative"><e>1</e></m></meta></Success>
		<Failure><meta><m n=":csNative"><e>2</e></m></meta></Failure>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.AccessControl.AuditFlags"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.security.accesscontrol.AuditRule" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.AuditRule" extern="1">
		<extends path="cs.system.security.accesscontrol.AuthorizationRule"/>
		<AuditFlags public="1" get="accessor" set="null"><e path="cs.system.security.accesscontrol.AuditFlags"/></AuditFlags>
		<get_AuditFlags final="1" set="method">
			<f a=""><e path="cs.system.security.accesscontrol.AuditFlags"/></f>
			<meta><m n=":overload"/></meta>
		</get_AuditFlags>
		<new final="1" set="method">
			<f a="identity:accessMask:isInherited:inheritanceFlags:propagationFlags:auditFlags">
				<c path="cs.system.security.principal.IdentityReference"/>
				<x path="Int"/>
				<x path="Bool"/>
				<e path="cs.system.security.accesscontrol.InheritanceFlags"/>
				<e path="cs.system.security.accesscontrol.PropagationFlags"/>
				<e path="cs.system.security.accesscontrol.AuditFlags"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.AuditRule"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.accesscontrol.AuthorizationRuleCollection" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.AuthorizationRuleCollection" extern="1">
		<extends path="cs.system.collections.ReadOnlyCollectionBase"/>
		<get_Item final="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="cs.system.security.accesscontrol.AuthorizationRule"/>
			</f>
			<meta><m n=":overload"/></meta>
		</get_Item>
		<CopyTo final="1" public="1" set="method">
			<f a="rules:index">
				<c path="cs.NativeArray"><c path="cs.system.security.accesscontrol.AuthorizationRule"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CopyTo>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.AuthorizationRuleCollection"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.accesscontrol.ObjectSecurity" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.ObjectSecurity" extern="1">
		<IsSddlConversionSupported final="1" public="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</IsSddlConversionSupported>
		<OwnerModified get="null" set="null"><x path="Bool"/></OwnerModified>
		<IsDS get="null" set="null"><x path="Bool"/></IsDS>
		<IsContainer get="null" set="null"><x path="Bool"/></IsContainer>
		<GroupModified get="null" set="null"><x path="Bool"/></GroupModified>
		<AuditRulesModified get="null" set="null"><x path="Bool"/></AuditRulesModified>
		<AccessRulesModified get="null" set="null"><x path="Bool"/></AccessRulesModified>
		<AreAuditRulesProtected public="1" get="accessor" set="null"><x path="Bool"/></AreAuditRulesProtected>
		<AreAuditRulesCanonical public="1" get="accessor" set="null"><x path="Bool"/></AreAuditRulesCanonical>
		<AreAccessRulesProtected public="1" get="accessor" set="null"><x path="Bool"/></AreAccessRulesProtected>
		<AreAccessRulesCanonical public="1" get="accessor" set="null"><x path="Bool"/></AreAccessRulesCanonical>
		<AuditRuleType public="1" get="accessor" set="null"><c path="cs.system.Type"/></AuditRuleType>
		<AccessRuleType public="1" get="accessor" set="null"><c path="cs.system.Type"/></AccessRuleType>
		<AccessRightType public="1" get="accessor" set="null"><c path="cs.system.Type"/></AccessRightType>
		<get_AccessRightType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_AccessRightType>
		<get_AccessRuleType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_AccessRuleType>
		<get_AuditRuleType set="method">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_AuditRuleType>
		<get_AreAccessRulesCanonical final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_AreAccessRulesCanonical>
		<get_AreAccessRulesProtected final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_AreAccessRulesProtected>
		<get_AreAuditRulesCanonical final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_AreAuditRulesCanonical>
		<get_AreAuditRulesProtected final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_AreAuditRulesProtected>
		<get_AccessRulesModified final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</get_AccessRulesModified>
		<set_AccessRulesModified final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</set_AccessRulesModified>
		<get_AuditRulesModified final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</get_AuditRulesModified>
		<set_AuditRulesModified final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</set_AuditRulesModified>
		<get_GroupModified final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</get_GroupModified>
		<set_GroupModified final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</set_GroupModified>
		<get_IsContainer final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</get_IsContainer>
		<get_IsDS final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</get_IsDS>
		<get_OwnerModified final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</get_OwnerModified>
		<set_OwnerModified final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</set_OwnerModified>
		<AccessRuleFactory public="1" set="method">
			<f a="identityReference:accessMask:isInherited:inheritanceFlags:propagationFlags:type">
				<c path="cs.system.security.principal.IdentityReference"/>
				<x path="Int"/>
				<x path="Bool"/>
				<e path="cs.system.security.accesscontrol.InheritanceFlags"/>
				<e path="cs.system.security.accesscontrol.PropagationFlags"/>
				<e path="cs.system.security.accesscontrol.AccessControlType"/>
				<c path="cs.system.security.accesscontrol.AccessRule"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AccessRuleFactory>
		<AuditRuleFactory public="1" set="method">
			<f a="identityReference:accessMask:isInherited:inheritanceFlags:propagationFlags:flags">
				<c path="cs.system.security.principal.IdentityReference"/>
				<x path="Int"/>
				<x path="Bool"/>
				<e path="cs.system.security.accesscontrol.InheritanceFlags"/>
				<e path="cs.system.security.accesscontrol.PropagationFlags"/>
				<e path="cs.system.security.accesscontrol.AuditFlags"/>
				<c path="cs.system.security.accesscontrol.AuditRule"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AuditRuleFactory>
		<GetGroup final="1" public="1" set="method">
			<f a="targetType">
				<c path="cs.system.Type"/>
				<c path="cs.system.security.principal.IdentityReference"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetGroup>
		<GetOwner final="1" public="1" set="method">
			<f a="targetType">
				<c path="cs.system.Type"/>
				<c path="cs.system.security.principal.IdentityReference"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetOwner>
		<GetSecurityDescriptorBinaryForm final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetSecurityDescriptorBinaryForm>
		<GetSecurityDescriptorSddlForm final="1" public="1" set="method">
			<f a="includeSections">
				<e path="cs.system.security.accesscontrol.AccessControlSections"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetSecurityDescriptorSddlForm>
		<ModifyAccessRule public="1" set="method">
			<f a="modification:rule:modified">
				<e path="cs.system.security.accesscontrol.AccessControlModification"/>
				<c path="cs.system.security.accesscontrol.AccessRule"/>
				<t path="cs.Out"><x path="Bool"/></t>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ModifyAccessRule>
		<ModifyAuditRule public="1" set="method">
			<f a="modification:rule:modified">
				<e path="cs.system.security.accesscontrol.AccessControlModification"/>
				<c path="cs.system.security.accesscontrol.AuditRule"/>
				<t path="cs.Out"><x path="Bool"/></t>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ModifyAuditRule>
		<PurgeAccessRules public="1" set="method">
			<f a="identity">
				<c path="cs.system.security.principal.IdentityReference"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</PurgeAccessRules>
		<PurgeAuditRules public="1" set="method">
			<f a="identity">
				<c path="cs.system.security.principal.IdentityReference"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</PurgeAuditRules>
		<SetAccessRuleProtection final="1" public="1" set="method">
			<f a="isProtected:preserveInheritance">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetAccessRuleProtection>
		<SetAuditRuleProtection final="1" public="1" set="method">
			<f a="isProtected:preserveInheritance">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetAuditRuleProtection>
		<SetGroup final="1" public="1" set="method">
			<f a="identity">
				<c path="cs.system.security.principal.IdentityReference"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetGroup>
		<SetOwner final="1" public="1" set="method">
			<f a="identity">
				<c path="cs.system.security.principal.IdentityReference"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetOwner>
		<SetSecurityDescriptorBinaryForm final="1" public="1" set="method">
			<f a="binaryForm">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><SetSecurityDescriptorBinaryForm final="1" public="1" set="method">
	<f a="binaryForm:includeSections">
		<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
		<e path="cs.system.security.accesscontrol.AccessControlSections"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</SetSecurityDescriptorBinaryForm></overloads>
		</SetSecurityDescriptorBinaryForm>
		<SetSecurityDescriptorSddlForm final="1" public="1" set="method">
			<f a="sddlForm">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><SetSecurityDescriptorSddlForm final="1" public="1" set="method">
	<f a="sddlForm:includeSections">
		<c path="String"/>
		<e path="cs.system.security.accesscontrol.AccessControlSections"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</SetSecurityDescriptorSddlForm></overloads>
		</SetSecurityDescriptorSddlForm>
		<ModifyAccess set="method">
			<f a="modification:rule:modified">
				<e path="cs.system.security.accesscontrol.AccessControlModification"/>
				<c path="cs.system.security.accesscontrol.AccessRule"/>
				<t path="cs.Out"><x path="Bool"/></t>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</ModifyAccess>
		<ModifyAudit set="method">
			<f a="modification:rule:modified">
				<e path="cs.system.security.accesscontrol.AccessControlModification"/>
				<c path="cs.system.security.accesscontrol.AuditRule"/>
				<t path="cs.Out"><x path="Bool"/></t>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</ModifyAudit>
		<Persist set="method">
			<f a="handle:includeSections">
				<c path="cs.system.runtime.interopservices.SafeHandle"/>
				<e path="cs.system.security.accesscontrol.AccessControlSections"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
			<overloads>
				<Persist set="method">
					<f a="enableOwnershipPrivilege:name:includeSections">
						<x path="Bool"/>
						<c path="String"/>
						<e path="cs.system.security.accesscontrol.AccessControlSections"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":protected"/>
						<m n=":overload"/>
					</meta>
				</Persist>
				<Persist set="method">
					<f a="name:includeSections">
						<c path="String"/>
						<e path="cs.system.security.accesscontrol.AccessControlSections"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":protected"/>
						<m n=":overload"/>
					</meta>
				</Persist>
			</overloads>
		</Persist>
		<ReadLock final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</ReadLock>
		<ReadUnlock final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</ReadUnlock>
		<WriteLock final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</WriteLock>
		<WriteUnlock final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</WriteUnlock>
		<new final="1" set="method">
			<f a="isContainer:isDS">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.ObjectSecurity"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.accesscontrol.CommonObjectSecurity" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.CommonObjectSecurity" extern="1">
		<extends path="cs.system.security.accesscontrol.ObjectSecurity"/>
		<GetAccessRules final="1" public="1" set="method">
			<f a="includeExplicit:includeInherited:targetType">
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="cs.system.Type"/>
				<c path="cs.system.security.accesscontrol.AuthorizationRuleCollection"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetAccessRules>
		<GetAuditRules final="1" public="1" set="method">
			<f a="includeExplicit:includeInherited:targetType">
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="cs.system.Type"/>
				<c path="cs.system.security.accesscontrol.AuthorizationRuleCollection"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetAuditRules>
		<AddAccessRule final="1" set="method">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.AccessRule"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</AddAccessRule>
		<RemoveAccessRule final="1" set="method">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.AccessRule"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</RemoveAccessRule>
		<RemoveAccessRuleAll final="1" set="method">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.AccessRule"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</RemoveAccessRuleAll>
		<RemoveAccessRuleSpecific final="1" set="method">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.AccessRule"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</RemoveAccessRuleSpecific>
		<ResetAccessRule final="1" set="method">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.AccessRule"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</ResetAccessRule>
		<SetAccessRule final="1" set="method">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.AccessRule"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</SetAccessRule>
		<ModifyAccess set="method" override="1">
			<f a="modification:rule:modified">
				<e path="cs.system.security.accesscontrol.AccessControlModification"/>
				<c path="cs.system.security.accesscontrol.AccessRule"/>
				<t path="cs.Out"><x path="Bool"/></t>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</ModifyAccess>
		<AddAuditRule final="1" set="method">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.AuditRule"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</AddAuditRule>
		<RemoveAuditRule final="1" set="method">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.AuditRule"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</RemoveAuditRule>
		<RemoveAuditRuleAll final="1" set="method">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.AuditRule"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</RemoveAuditRuleAll>
		<RemoveAuditRuleSpecific final="1" set="method">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.AuditRule"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</RemoveAuditRuleSpecific>
		<SetAuditRule final="1" set="method">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.AuditRule"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</SetAuditRule>
		<ModifyAudit set="method" override="1">
			<f a="modification:rule:modified">
				<e path="cs.system.security.accesscontrol.AccessControlModification"/>
				<c path="cs.system.security.accesscontrol.AuditRule"/>
				<t path="cs.Out"><x path="Bool"/></t>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</ModifyAudit>
		<new final="1" set="method">
			<f a="isContainer">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.CommonObjectSecurity"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.accesscontrol.NativeObjectSecurity" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.NativeObjectSecurity" extern="1">
		<extends path="cs.system.security.accesscontrol.CommonObjectSecurity"/>
		<Persist final="1" set="method" override="1">
			<f a="handle:includeSections">
				<c path="cs.system.runtime.interopservices.SafeHandle"/>
				<e path="cs.system.security.accesscontrol.AccessControlSections"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
			<overloads>
				<Persist final="1" set="method">
					<f a="name:includeSections:exceptionContext">
						<c path="String"/>
						<e path="cs.system.security.accesscontrol.AccessControlSections"/>
						<d/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":protected"/>
						<m n=":overload"/>
					</meta>
				</Persist>
				<Persist final="1" set="method">
					<f a="handle:includeSections:exceptionContext">
						<c path="cs.system.runtime.interopservices.SafeHandle"/>
						<e path="cs.system.security.accesscontrol.AccessControlSections"/>
						<d/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":protected"/>
						<m n=":overload"/>
					</meta>
				</Persist>
				<Persist final="1" set="method">
					<f a="name:includeSections">
						<c path="String"/>
						<e path="cs.system.security.accesscontrol.AccessControlSections"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":protected"/>
						<m n=":overload"/>
					</meta>
				</Persist>
			</overloads>
		</Persist>
		<new final="1" set="method">
			<f a="isContainer:resourceType">
				<x path="Bool"/>
				<e path="cs.system.security.accesscontrol.ResourceType"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
			<overloads>
				<new final="1" set="method">
					<f a="isContainer:resourceType:name:includeSections:exceptionFromErrorCode:exceptionContext">
						<x path="Bool"/>
						<e path="cs.system.security.accesscontrol.ResourceType"/>
						<c path="String"/>
						<e path="cs.system.security.accesscontrol.AccessControlSections"/>
						<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
						<d/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":protected"/>
						<m n=":overload"/>
					</meta>
				</new>
				<new final="1" set="method">
					<f a="isContainer:resourceType:handle:includeSections:exceptionFromErrorCode:exceptionContext">
						<x path="Bool"/>
						<e path="cs.system.security.accesscontrol.ResourceType"/>
						<c path="cs.system.runtime.interopservices.SafeHandle"/>
						<e path="cs.system.security.accesscontrol.AccessControlSections"/>
						<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
						<d/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":protected"/>
						<m n=":overload"/>
					</meta>
				</new>
				<new final="1" set="method">
					<f a="isContainer:resourceType:name:includeSections">
						<x path="Bool"/>
						<e path="cs.system.security.accesscontrol.ResourceType"/>
						<c path="String"/>
						<e path="cs.system.security.accesscontrol.AccessControlSections"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":protected"/>
						<m n=":overload"/>
					</meta>
				</new>
				<new final="1" set="method">
					<f a="isContainer:resourceType:handle:includeSections">
						<x path="Bool"/>
						<e path="cs.system.security.accesscontrol.ResourceType"/>
						<c path="cs.system.runtime.interopservices.SafeHandle"/>
						<e path="cs.system.security.accesscontrol.AccessControlSections"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":protected"/>
						<m n=":overload"/>
					</meta>
				</new>
				<new final="1" set="method">
					<f a="isContainer:resourceType:exceptionFromErrorCode:exceptionContext">
						<x path="Bool"/>
						<e path="cs.system.security.accesscontrol.ResourceType"/>
						<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
						<d/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":protected"/>
						<m n=":overload"/>
					</meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.NativeObjectSecurity"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.accesscontrol.FileSystemSecurity" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.FileSystemSecurity" extern="1">
		<extends path="cs.system.security.accesscontrol.NativeObjectSecurity"/>
		<AuditRuleType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></AuditRuleType>
		<AccessRuleType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></AccessRuleType>
		<AccessRightType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></AccessRightType>
		<get_AccessRightType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_AccessRightType>
		<get_AccessRuleType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_AccessRuleType>
		<get_AuditRuleType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_AuditRuleType>
		<AccessRuleFactory final="1" public="1" set="method" override="1">
			<f a="identityReference:accessMask:isInherited:inheritanceFlags:propagationFlags:type">
				<c path="cs.system.security.principal.IdentityReference"/>
				<x path="Int"/>
				<x path="Bool"/>
				<e path="cs.system.security.accesscontrol.InheritanceFlags"/>
				<e path="cs.system.security.accesscontrol.PropagationFlags"/>
				<e path="cs.system.security.accesscontrol.AccessControlType"/>
				<c path="cs.system.security.accesscontrol.AccessRule"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AccessRuleFactory>
		<AddAccessRule final="1" public="1" set="method" override="1">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.FileSystemAccessRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddAccessRule>
		<RemoveAccessRule final="1" public="1" set="method" override="1">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.FileSystemAccessRule"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveAccessRule>
		<RemoveAccessRuleAll final="1" public="1" set="method" override="1">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.FileSystemAccessRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveAccessRuleAll>
		<RemoveAccessRuleSpecific final="1" public="1" set="method" override="1">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.FileSystemAccessRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveAccessRuleSpecific>
		<ResetAccessRule final="1" public="1" set="method" override="1">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.FileSystemAccessRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ResetAccessRule>
		<SetAccessRule final="1" public="1" set="method" override="1">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.FileSystemAccessRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetAccessRule>
		<AuditRuleFactory final="1" public="1" set="method" override="1">
			<f a="identityReference:accessMask:isInherited:inheritanceFlags:propagationFlags:flags">
				<c path="cs.system.security.principal.IdentityReference"/>
				<x path="Int"/>
				<x path="Bool"/>
				<e path="cs.system.security.accesscontrol.InheritanceFlags"/>
				<e path="cs.system.security.accesscontrol.PropagationFlags"/>
				<e path="cs.system.security.accesscontrol.AuditFlags"/>
				<c path="cs.system.security.accesscontrol.AuditRule"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AuditRuleFactory>
		<AddAuditRule final="1" public="1" set="method" override="1">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.FileSystemAuditRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddAuditRule>
		<RemoveAuditRule final="1" public="1" set="method" override="1">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.FileSystemAuditRule"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveAuditRule>
		<RemoveAuditRuleAll final="1" public="1" set="method" override="1">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.FileSystemAuditRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveAuditRuleAll>
		<RemoveAuditRuleSpecific final="1" public="1" set="method" override="1">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.FileSystemAuditRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveAuditRuleSpecific>
		<SetAuditRule final="1" public="1" set="method" override="1">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.FileSystemAuditRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetAuditRule>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.FileSystemSecurity"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.accesscontrol.DirectorySecurity" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.DirectorySecurity" extern="1">
		<extends path="cs.system.security.accesscontrol.FileSystemSecurity"/>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><new final="1" public="1" set="method">
	<f a="name:includeSections">
		<c path="String"/>
		<e path="cs.system.security.accesscontrol.AccessControlSections"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.DirectorySecurity"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.accesscontrol.EventWaitHandleAccessRule" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.EventWaitHandleAccessRule" extern="1">
		<extends path="cs.system.security.accesscontrol.AccessRule"/>
		<EventWaitHandleRights public="1" get="accessor" set="null"><e path="cs.system.security.accesscontrol.EventWaitHandleRights"/></EventWaitHandleRights>
		<get_EventWaitHandleRights final="1" set="method">
			<f a=""><e path="cs.system.security.accesscontrol.EventWaitHandleRights"/></f>
			<meta><m n=":overload"/></meta>
		</get_EventWaitHandleRights>
		<new final="1" public="1" set="method">
			<f a="identity:eventRights:type">
				<c path="cs.system.security.principal.IdentityReference"/>
				<e path="cs.system.security.accesscontrol.EventWaitHandleRights"/>
				<e path="cs.system.security.accesscontrol.AccessControlType"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new final="1" public="1" set="method">
	<f a="identity:eventRights:type">
		<c path="String"/>
		<e path="cs.system.security.accesscontrol.EventWaitHandleRights"/>
		<e path="cs.system.security.accesscontrol.AccessControlType"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.EventWaitHandleAccessRule"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.accesscontrol.EventWaitHandleAuditRule" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.EventWaitHandleAuditRule" extern="1">
		<extends path="cs.system.security.accesscontrol.AuditRule"/>
		<EventWaitHandleRights public="1" get="accessor" set="null"><e path="cs.system.security.accesscontrol.EventWaitHandleRights"/></EventWaitHandleRights>
		<get_EventWaitHandleRights final="1" set="method">
			<f a=""><e path="cs.system.security.accesscontrol.EventWaitHandleRights"/></f>
			<meta><m n=":overload"/></meta>
		</get_EventWaitHandleRights>
		<new final="1" public="1" set="method">
			<f a="identity:eventRights:flags">
				<c path="cs.system.security.principal.IdentityReference"/>
				<e path="cs.system.security.accesscontrol.EventWaitHandleRights"/>
				<e path="cs.system.security.accesscontrol.AuditFlags"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.EventWaitHandleAuditRule"</e></m>
		</meta>
	</class>
	<enum path="cs.system.security.accesscontrol.EventWaitHandleRights" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.EventWaitHandleRights">
		<Modify><meta><m n=":csNative"><e>2</e></m></meta></Modify>
		<Delete><meta><m n=":csNative"><e>65536</e></m></meta></Delete>
		<ReadPermissions><meta><m n=":csNative"><e>131072</e></m></meta></ReadPermissions>
		<ChangePermissions><meta><m n=":csNative"><e>262144</e></m></meta></ChangePermissions>
		<TakeOwnership><meta><m n=":csNative"><e>524288</e></m></meta></TakeOwnership>
		<Synchronize><meta><m n=":csNative"><e>1048576</e></m></meta></Synchronize>
		<FullControl><meta><m n=":csNative"><e>2031619</e></m></meta></FullControl>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.AccessControl.EventWaitHandleRights"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.security.accesscontrol.EventWaitHandleSecurity" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.EventWaitHandleSecurity" extern="1">
		<extends path="cs.system.security.accesscontrol.NativeObjectSecurity"/>
		<AuditRuleType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></AuditRuleType>
		<AccessRuleType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></AccessRuleType>
		<AccessRightType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></AccessRightType>
		<get_AccessRightType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_AccessRightType>
		<get_AccessRuleType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_AccessRuleType>
		<get_AuditRuleType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_AuditRuleType>
		<AccessRuleFactory public="1" set="method" override="1">
			<f a="identityReference:accessMask:isInherited:inheritanceFlags:propagationFlags:type">
				<c path="cs.system.security.principal.IdentityReference"/>
				<x path="Int"/>
				<x path="Bool"/>
				<e path="cs.system.security.accesscontrol.InheritanceFlags"/>
				<e path="cs.system.security.accesscontrol.PropagationFlags"/>
				<e path="cs.system.security.accesscontrol.AccessControlType"/>
				<c path="cs.system.security.accesscontrol.AccessRule"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AccessRuleFactory>
		<AddAccessRule final="1" public="1" set="method" override="1">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.EventWaitHandleAccessRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddAccessRule>
		<RemoveAccessRule final="1" public="1" set="method" override="1">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.EventWaitHandleAccessRule"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveAccessRule>
		<RemoveAccessRuleAll final="1" public="1" set="method" override="1">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.EventWaitHandleAccessRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveAccessRuleAll>
		<RemoveAccessRuleSpecific final="1" public="1" set="method" override="1">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.EventWaitHandleAccessRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveAccessRuleSpecific>
		<ResetAccessRule final="1" public="1" set="method" override="1">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.EventWaitHandleAccessRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ResetAccessRule>
		<SetAccessRule final="1" public="1" set="method" override="1">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.EventWaitHandleAccessRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetAccessRule>
		<AuditRuleFactory public="1" set="method" override="1">
			<f a="identityReference:accessMask:isInherited:inheritanceFlags:propagationFlags:flags">
				<c path="cs.system.security.principal.IdentityReference"/>
				<x path="Int"/>
				<x path="Bool"/>
				<e path="cs.system.security.accesscontrol.InheritanceFlags"/>
				<e path="cs.system.security.accesscontrol.PropagationFlags"/>
				<e path="cs.system.security.accesscontrol.AuditFlags"/>
				<c path="cs.system.security.accesscontrol.AuditRule"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AuditRuleFactory>
		<AddAuditRule final="1" public="1" set="method" override="1">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.EventWaitHandleAuditRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddAuditRule>
		<RemoveAuditRule final="1" public="1" set="method" override="1">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.EventWaitHandleAuditRule"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveAuditRule>
		<RemoveAuditRuleAll final="1" public="1" set="method" override="1">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.EventWaitHandleAuditRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveAuditRuleAll>
		<RemoveAuditRuleSpecific final="1" public="1" set="method" override="1">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.EventWaitHandleAuditRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveAuditRuleSpecific>
		<SetAuditRule final="1" public="1" set="method" override="1">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.EventWaitHandleAuditRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetAuditRule>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.EventWaitHandleSecurity"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.accesscontrol.FileSecurity" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.FileSecurity" extern="1">
		<extends path="cs.system.security.accesscontrol.FileSystemSecurity"/>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><new final="1" public="1" set="method">
	<f a="fileName:includeSections">
		<c path="String"/>
		<e path="cs.system.security.accesscontrol.AccessControlSections"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.FileSecurity"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.accesscontrol.FileSystemAccessRule" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.FileSystemAccessRule" extern="1">
		<extends path="cs.system.security.accesscontrol.AccessRule"/>
		<FileSystemRights public="1" get="accessor" set="null"><e path="cs.system.security.accesscontrol.FileSystemRights"/></FileSystemRights>
		<get_FileSystemRights final="1" set="method">
			<f a=""><e path="cs.system.security.accesscontrol.FileSystemRights"/></f>
			<meta><m n=":overload"/></meta>
		</get_FileSystemRights>
		<new final="1" public="1" set="method">
			<f a="identity:fileSystemRights:type">
				<c path="cs.system.security.principal.IdentityReference"/>
				<e path="cs.system.security.accesscontrol.FileSystemRights"/>
				<e path="cs.system.security.accesscontrol.AccessControlType"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="identity:fileSystemRights:inheritanceFlags:propagationFlags:type">
						<c path="String"/>
						<e path="cs.system.security.accesscontrol.FileSystemRights"/>
						<e path="cs.system.security.accesscontrol.InheritanceFlags"/>
						<e path="cs.system.security.accesscontrol.PropagationFlags"/>
						<e path="cs.system.security.accesscontrol.AccessControlType"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="identity:fileSystemRights:inheritanceFlags:propagationFlags:type">
						<c path="cs.system.security.principal.IdentityReference"/>
						<e path="cs.system.security.accesscontrol.FileSystemRights"/>
						<e path="cs.system.security.accesscontrol.InheritanceFlags"/>
						<e path="cs.system.security.accesscontrol.PropagationFlags"/>
						<e path="cs.system.security.accesscontrol.AccessControlType"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="identity:fileSystemRights:type">
						<c path="String"/>
						<e path="cs.system.security.accesscontrol.FileSystemRights"/>
						<e path="cs.system.security.accesscontrol.AccessControlType"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.FileSystemAccessRule"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.accesscontrol.FileSystemAuditRule" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.FileSystemAuditRule" extern="1">
		<extends path="cs.system.security.accesscontrol.AuditRule"/>
		<FileSystemRights public="1" get="accessor" set="null"><e path="cs.system.security.accesscontrol.FileSystemRights"/></FileSystemRights>
		<get_FileSystemRights final="1" set="method">
			<f a=""><e path="cs.system.security.accesscontrol.FileSystemRights"/></f>
			<meta><m n=":overload"/></meta>
		</get_FileSystemRights>
		<new final="1" public="1" set="method">
			<f a="identity:fileSystemRights:flags">
				<c path="cs.system.security.principal.IdentityReference"/>
				<e path="cs.system.security.accesscontrol.FileSystemRights"/>
				<e path="cs.system.security.accesscontrol.AuditFlags"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="identity:fileSystemRights:inheritanceFlags:propagationFlags:flags">
						<c path="String"/>
						<e path="cs.system.security.accesscontrol.FileSystemRights"/>
						<e path="cs.system.security.accesscontrol.InheritanceFlags"/>
						<e path="cs.system.security.accesscontrol.PropagationFlags"/>
						<e path="cs.system.security.accesscontrol.AuditFlags"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="identity:fileSystemRights:inheritanceFlags:propagationFlags:flags">
						<c path="cs.system.security.principal.IdentityReference"/>
						<e path="cs.system.security.accesscontrol.FileSystemRights"/>
						<e path="cs.system.security.accesscontrol.InheritanceFlags"/>
						<e path="cs.system.security.accesscontrol.PropagationFlags"/>
						<e path="cs.system.security.accesscontrol.AuditFlags"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="identity:fileSystemRights:flags">
						<c path="String"/>
						<e path="cs.system.security.accesscontrol.FileSystemRights"/>
						<e path="cs.system.security.accesscontrol.AuditFlags"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.FileSystemAuditRule"</e></m>
		</meta>
	</class>
	<enum path="cs.system.security.accesscontrol.FileSystemRights" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.FileSystemRights">
		<ListDirectory><meta><m n=":csNative"><e>1</e></m></meta></ListDirectory>
		<ReadData><meta><m n=":csNative"><e>1</e></m></meta></ReadData>
		<CreateFiles><meta><m n=":csNative"><e>2</e></m></meta></CreateFiles>
		<WriteData><meta><m n=":csNative"><e>2</e></m></meta></WriteData>
		<AppendData><meta><m n=":csNative"><e>4</e></m></meta></AppendData>
		<CreateDirectories><meta><m n=":csNative"><e>4</e></m></meta></CreateDirectories>
		<ReadExtendedAttributes><meta><m n=":csNative"><e>8</e></m></meta></ReadExtendedAttributes>
		<WriteExtendedAttributes><meta><m n=":csNative"><e>16</e></m></meta></WriteExtendedAttributes>
		<ExecuteFile><meta><m n=":csNative"><e>32</e></m></meta></ExecuteFile>
		<Traverse><meta><m n=":csNative"><e>32</e></m></meta></Traverse>
		<DeleteSubdirectoriesAndFiles><meta><m n=":csNative"><e>64</e></m></meta></DeleteSubdirectoriesAndFiles>
		<ReadAttributes><meta><m n=":csNative"><e>128</e></m></meta></ReadAttributes>
		<WriteAttributes><meta><m n=":csNative"><e>256</e></m></meta></WriteAttributes>
		<Write><meta><m n=":csNative"><e>278</e></m></meta></Write>
		<Delete><meta><m n=":csNative"><e>65536</e></m></meta></Delete>
		<ReadPermissions><meta><m n=":csNative"><e>131072</e></m></meta></ReadPermissions>
		<Read><meta><m n=":csNative"><e>131209</e></m></meta></Read>
		<ReadAndExecute><meta><m n=":csNative"><e>131241</e></m></meta></ReadAndExecute>
		<Modify><meta><m n=":csNative"><e>197055</e></m></meta></Modify>
		<ChangePermissions><meta><m n=":csNative"><e>262144</e></m></meta></ChangePermissions>
		<TakeOwnership><meta><m n=":csNative"><e>524288</e></m></meta></TakeOwnership>
		<Synchronize><meta><m n=":csNative"><e>1048576</e></m></meta></Synchronize>
		<FullControl><meta><m n=":csNative"><e>2032127</e></m></meta></FullControl>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.AccessControl.FileSystemRights"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.security.accesscontrol.InheritanceFlags" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.InheritanceFlags">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<ContainerInherit><meta><m n=":csNative"><e>1</e></m></meta></ContainerInherit>
		<ObjectInherit><meta><m n=":csNative"><e>2</e></m></meta></ObjectInherit>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.AccessControl.InheritanceFlags"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.security.accesscontrol.MutexAccessRule" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.MutexAccessRule" extern="1">
		<extends path="cs.system.security.accesscontrol.AccessRule"/>
		<MutexRights public="1" get="accessor" set="null"><e path="cs.system.security.accesscontrol.MutexRights"/></MutexRights>
		<get_MutexRights final="1" set="method">
			<f a=""><e path="cs.system.security.accesscontrol.MutexRights"/></f>
			<meta><m n=":overload"/></meta>
		</get_MutexRights>
		<new final="1" public="1" set="method">
			<f a="identity:eventRights:type">
				<c path="cs.system.security.principal.IdentityReference"/>
				<e path="cs.system.security.accesscontrol.MutexRights"/>
				<e path="cs.system.security.accesscontrol.AccessControlType"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new final="1" public="1" set="method">
	<f a="identity:eventRights:type">
		<c path="String"/>
		<e path="cs.system.security.accesscontrol.MutexRights"/>
		<e path="cs.system.security.accesscontrol.AccessControlType"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.MutexAccessRule"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.accesscontrol.MutexAuditRule" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.MutexAuditRule" extern="1">
		<extends path="cs.system.security.accesscontrol.AuditRule"/>
		<MutexRights public="1" get="accessor" set="null"><e path="cs.system.security.accesscontrol.MutexRights"/></MutexRights>
		<get_MutexRights final="1" set="method">
			<f a=""><e path="cs.system.security.accesscontrol.MutexRights"/></f>
			<meta><m n=":overload"/></meta>
		</get_MutexRights>
		<new final="1" public="1" set="method">
			<f a="identity:eventRights:flags">
				<c path="cs.system.security.principal.IdentityReference"/>
				<e path="cs.system.security.accesscontrol.MutexRights"/>
				<e path="cs.system.security.accesscontrol.AuditFlags"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.MutexAuditRule"</e></m>
		</meta>
	</class>
	<enum path="cs.system.security.accesscontrol.MutexRights" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.MutexRights">
		<Modify><meta><m n=":csNative"><e>1</e></m></meta></Modify>
		<Delete><meta><m n=":csNative"><e>65536</e></m></meta></Delete>
		<ReadPermissions><meta><m n=":csNative"><e>131072</e></m></meta></ReadPermissions>
		<ChangePermissions><meta><m n=":csNative"><e>262144</e></m></meta></ChangePermissions>
		<TakeOwnership><meta><m n=":csNative"><e>524288</e></m></meta></TakeOwnership>
		<Synchronize><meta><m n=":csNative"><e>1048576</e></m></meta></Synchronize>
		<FullControl><meta><m n=":csNative"><e>2031617</e></m></meta></FullControl>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.AccessControl.MutexRights"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.security.accesscontrol.MutexSecurity" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.MutexSecurity" extern="1">
		<extends path="cs.system.security.accesscontrol.NativeObjectSecurity"/>
		<AuditRuleType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></AuditRuleType>
		<AccessRuleType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></AccessRuleType>
		<AccessRightType public="1" get="accessor" set="null" override="1"><c path="cs.system.Type"/></AccessRightType>
		<get_AccessRightType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_AccessRightType>
		<get_AccessRuleType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_AccessRuleType>
		<get_AuditRuleType set="method" override="1">
			<f a=""><c path="cs.system.Type"/></f>
			<meta><m n=":overload"/></meta>
		</get_AuditRuleType>
		<AccessRuleFactory public="1" set="method" override="1">
			<f a="identityReference:accessMask:isInherited:inheritanceFlags:propagationFlags:type">
				<c path="cs.system.security.principal.IdentityReference"/>
				<x path="Int"/>
				<x path="Bool"/>
				<e path="cs.system.security.accesscontrol.InheritanceFlags"/>
				<e path="cs.system.security.accesscontrol.PropagationFlags"/>
				<e path="cs.system.security.accesscontrol.AccessControlType"/>
				<c path="cs.system.security.accesscontrol.AccessRule"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AccessRuleFactory>
		<AddAccessRule final="1" public="1" set="method" override="1">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.MutexAccessRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddAccessRule>
		<RemoveAccessRule final="1" public="1" set="method" override="1">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.MutexAccessRule"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveAccessRule>
		<RemoveAccessRuleAll final="1" public="1" set="method" override="1">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.MutexAccessRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveAccessRuleAll>
		<RemoveAccessRuleSpecific final="1" public="1" set="method" override="1">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.MutexAccessRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveAccessRuleSpecific>
		<ResetAccessRule final="1" public="1" set="method" override="1">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.MutexAccessRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ResetAccessRule>
		<SetAccessRule final="1" public="1" set="method" override="1">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.MutexAccessRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetAccessRule>
		<AuditRuleFactory public="1" set="method" override="1">
			<f a="identityReference:accessMask:isInherited:inheritanceFlags:propagationFlags:flags">
				<c path="cs.system.security.principal.IdentityReference"/>
				<x path="Int"/>
				<x path="Bool"/>
				<e path="cs.system.security.accesscontrol.InheritanceFlags"/>
				<e path="cs.system.security.accesscontrol.PropagationFlags"/>
				<e path="cs.system.security.accesscontrol.AuditFlags"/>
				<c path="cs.system.security.accesscontrol.AuditRule"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AuditRuleFactory>
		<AddAuditRule final="1" public="1" set="method" override="1">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.MutexAuditRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddAuditRule>
		<RemoveAuditRule final="1" public="1" set="method" override="1">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.MutexAuditRule"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveAuditRule>
		<RemoveAuditRuleAll final="1" public="1" set="method" override="1">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.MutexAuditRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveAuditRuleAll>
		<RemoveAuditRuleSpecific final="1" public="1" set="method" override="1">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.MutexAuditRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveAuditRuleSpecific>
		<SetAuditRule final="1" public="1" set="method" override="1">
			<f a="rule">
				<c path="cs.system.security.accesscontrol.MutexAuditRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetAuditRule>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><new final="1" public="1" set="method">
	<f a="name:includeSections">
		<c path="String"/>
		<e path="cs.system.security.accesscontrol.AccessControlSections"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.MutexSecurity"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.accesscontrol.NativeObjectSecurity_Delegate_ExceptionFromErrorCode" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.NativeObjectSecurity" module="cs.system.security.accesscontrol.NativeObjectSecurity" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
	<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
	<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
	<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
	<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="errorCode:name:handle:context">
				<x path="Int"/>
				<c path="String"/>
				<c path="cs.system.runtime.interopservices.SafeHandle"/>
				<d/>
				<c path="cs.system.Exception"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="errorCode:name:handle:context:callback:object">
				<x path="Int"/>
				<c path="String"/>
				<c path="cs.system.runtime.interopservices.SafeHandle"/>
				<d/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<c path="cs.system.Exception"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.AccessControl.NativeObjectSecurity.ExceptionFromErrorCode"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.NativeObjectSecurity" module="cs.system.security.accesscontrol.NativeObjectSecurity">
		<from><icast field="FromHaxeFunction"><f a=":::">
	<x path="Int"/>
	<c path="String"/>
	<c path="cs.system.runtime.interopservices.SafeHandle"/>
	<d/>
	<c path="cs.system.Exception"/>
</f></icast></from>
		<this><c path="cs.system.security.accesscontrol.NativeObjectSecurity_Delegate_ExceptionFromErrorCode"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.security.accesscontrol._NativeObjectSecurity.NativeObjectSecurity_ExceptionFromErrorCode_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.NativeObjectSecurity" private="1" module="cs.system.security.accesscontrol.NativeObjectSecurity">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=":::">
				<x path="Int"/>
				<c path="String"/>
				<c path="cs.system.runtime.interopservices.SafeHandle"/>
				<d/>
				<c path="cs.system.Exception"/>
			</f>
			<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=":::">
				<x path="Int"/>
				<c path="String"/>
				<c path="cs.system.runtime.interopservices.SafeHandle"/>
				<d/>
				<c path="cs.system.Exception"/>
			</f>
			<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.security.accesscontrol.NativeObjectSecurity_Delegate_ExceptionFromErrorCode"/>
			<c path="cs.system.security.accesscontrol.NativeObjectSecurity_Delegate_ExceptionFromErrorCode"/>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
			<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
			<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
			<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
			<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system.security.accesscontrol._NativeObjectSecurity.NativeObjectSecurity_ExceptionFromErrorCode_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.NativeObjectSecurity" private="1" module="cs.system.security.accesscontrol.NativeObjectSecurity">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=":::">
					<x path="Int"/>
					<c path="String"/>
					<c path="cs.system.runtime.interopservices.SafeHandle"/>
					<d/>
					<c path="cs.system.Exception"/>
				</f>
				<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=":::">
					<x path="Int"/>
					<c path="String"/>
					<c path="cs.system.runtime.interopservices.SafeHandle"/>
					<d/>
					<c path="cs.system.Exception"/>
				</f>
				<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.security.accesscontrol.NativeObjectSecurity_Delegate_ExceptionFromErrorCode"/>
				<c path="cs.system.security.accesscontrol.NativeObjectSecurity_Delegate_ExceptionFromErrorCode"/>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
				<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
				<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
				<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
				<x path="cs.system.security.accesscontrol.NativeObjectSecurity_ExceptionFromErrorCode"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<enum path="cs.system.security.accesscontrol.PropagationFlags" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.PropagationFlags">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<NoPropagateInherit><meta><m n=":csNative"><e>1</e></m></meta></NoPropagateInherit>
		<InheritOnly><meta><m n=":csNative"><e>2</e></m></meta></InheritOnly>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.AccessControl.PropagationFlags"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.security.accesscontrol.ResourceType" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.accesscontrol.ResourceType">
		<Unknown><meta><m n=":csNative"><e>0</e></m></meta></Unknown>
		<FileObject><meta><m n=":csNative"><e>1</e></m></meta></FileObject>
		<Service><meta><m n=":csNative"><e>2</e></m></meta></Service>
		<Printer><meta><m n=":csNative"><e>3</e></m></meta></Printer>
		<RegistryKey><meta><m n=":csNative"><e>4</e></m></meta></RegistryKey>
		<LMShare><meta><m n=":csNative"><e>5</e></m></meta></LMShare>
		<KernelObject><meta><m n=":csNative"><e>6</e></m></meta></KernelObject>
		<WindowObject><meta><m n=":csNative"><e>7</e></m></meta></WindowObject>
		<DSObject><meta><m n=":csNative"><e>8</e></m></meta></DSObject>
		<DSObjectAll><meta><m n=":csNative"><e>9</e></m></meta></DSObjectAll>
		<ProviderDefined><meta><m n=":csNative"><e>10</e></m></meta></ProviderDefined>
		<WmiGuidObject><meta><m n=":csNative"><e>11</e></m></meta></WmiGuidObject>
		<RegistryWow6432Key><meta><m n=":csNative"><e>12</e></m></meta></RegistryWow6432Key>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.AccessControl.ResourceType"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.security.cryptography.x509certificates.X509Certificate_CertificateContext" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.cryptography.x509certificates.X509Certificate" module="cs.system.security.cryptography.x509certificates.X509Certificate" extern="1">
		<extends path="cs.system.ValueType"/>
		<hCertStore public="1"><c path="cs.system.IntPtr"/></hCertStore>
		<pCertInfo public="1"><c path="cs.system.IntPtr"/></pCertInfo>
		<cbCertEncoded public="1"><x path="UInt"/></cbCertEncoded>
		<pbCertEncoded public="1"><c path="cs.system.IntPtr"/></pbCertEncoded>
		<dwCertEncodingType public="1"><x path="UInt"/></dwCertEncodingType>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Cryptography.X509Certificates.X509Certificate.CertificateContext"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.cryptography.x509certificates.X509Certificate" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.cryptography.x509certificates.X509Certificate" extern="1">
		<implements path="cs.system.runtime.serialization.IDeserializationCallback"/>
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<CreateFromCertFile final="1" public="1" set="method" static="1">
			<f a="filename">
				<c path="String"/>
				<c path="cs.system.security.cryptography.x509certificates.X509Certificate"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CreateFromCertFile>
		<CreateFromSignedFile final="1" public="1" set="method" static="1">
			<f a="filename">
				<c path="String"/>
				<c path="cs.system.security.cryptography.x509certificates.X509Certificate"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CreateFromSignedFile>
		<Handle public="1" get="accessor" set="null"><c path="cs.system.IntPtr"/></Handle>
		<Subject public="1" get="accessor" set="null"><c path="String"/></Subject>
		<Issuer public="1" get="accessor" set="null"><c path="String"/></Issuer>
		<GetCertHash public="1" set="method">
			<f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetCertHash>
		<GetCertHashString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</GetCertHashString>
		<GetEffectiveDateString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</GetEffectiveDateString>
		<GetExpirationDateString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</GetExpirationDateString>
		<GetFormat public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</GetFormat>
		<GetIssuerName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</GetIssuerName>
		<GetKeyAlgorithm public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</GetKeyAlgorithm>
		<GetKeyAlgorithmParameters public="1" set="method">
			<f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetKeyAlgorithmParameters>
		<GetKeyAlgorithmParametersString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</GetKeyAlgorithmParametersString>
		<GetName public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</GetName>
		<GetPublicKey public="1" set="method">
			<f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetPublicKey>
		<GetPublicKeyString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</GetPublicKeyString>
		<GetRawCertData public="1" set="method">
			<f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetRawCertData>
		<GetRawCertDataString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</GetRawCertDataString>
		<GetSerialNumber public="1" set="method">
			<f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetSerialNumber>
		<GetSerialNumberString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</GetSerialNumberString>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><ToString public="1" set="method">
	<f a="fVerbose">
		<x path="Bool"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</ToString></overloads>
		</ToString>
		<get_Issuer final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Issuer>
		<get_Subject final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Subject>
		<get_Handle final="1" set="method">
			<f a=""><c path="cs.system.IntPtr"/></f>
			<meta><m n=":overload"/></meta>
		</get_Handle>
		<Export public="1" set="method">
			<f a="contentType">
				<e path="cs.system.security.cryptography.x509certificates.X509ContentType"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Export public="1" set="method">
					<f a="contentType:password">
						<e path="cs.system.security.cryptography.x509certificates.X509ContentType"/>
						<c path="cs.system.security.SecureString"/>
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</Export>
				<Export public="1" set="method">
					<f a="contentType:password">
						<e path="cs.system.security.cryptography.x509certificates.X509ContentType"/>
						<c path="String"/>
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</Export>
			</overloads>
		</Export>
		<Import public="1" set="method">
			<f a="rawData">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Import public="1" set="method">
					<f a="fileName:password:keyStorageFlags">
						<c path="String"/>
						<c path="cs.system.security.SecureString"/>
						<e path="cs.system.security.cryptography.x509certificates.X509KeyStorageFlags"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Import>
				<Import public="1" set="method">
					<f a="fileName:password:keyStorageFlags">
						<c path="String"/>
						<c path="String"/>
						<e path="cs.system.security.cryptography.x509certificates.X509KeyStorageFlags"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Import>
				<Import public="1" set="method">
					<f a="fileName">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Import>
				<Import public="1" set="method">
					<f a="rawData:password:keyStorageFlags">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<c path="cs.system.security.SecureString"/>
						<e path="cs.system.security.cryptography.x509certificates.X509KeyStorageFlags"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Import>
				<Import public="1" set="method">
					<f a="rawData:password:keyStorageFlags">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<c path="String"/>
						<e path="cs.system.security.cryptography.x509certificates.X509KeyStorageFlags"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Import>
			</overloads>
		</Import>
		<Reset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Reset>
		<new final="1" public="1" set="method">
			<f a="data">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="info:context">
						<c path="cs.system.runtime.serialization.SerializationInfo"/>
						<c path="cs.system.runtime.serialization.StreamingContext"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="fileName:password:keyStorageFlags">
						<c path="String"/>
						<c path="cs.system.security.SecureString"/>
						<e path="cs.system.security.cryptography.x509certificates.X509KeyStorageFlags"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="fileName:password:keyStorageFlags">
						<c path="String"/>
						<c path="String"/>
						<e path="cs.system.security.cryptography.x509certificates.X509KeyStorageFlags"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="fileName:password">
						<c path="String"/>
						<c path="cs.system.security.SecureString"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="fileName:password">
						<c path="String"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="fileName">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="rawData:password:keyStorageFlags">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<c path="cs.system.security.SecureString"/>
						<e path="cs.system.security.cryptography.x509certificates.X509KeyStorageFlags"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="rawData:password:keyStorageFlags">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<c path="String"/>
						<e path="cs.system.security.cryptography.x509certificates.X509KeyStorageFlags"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="rawData:password">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<c path="cs.system.security.SecureString"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="rawData:password">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="cert">
						<c path="cs.system.security.cryptography.x509certificates.X509Certificate"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="handle">
						<c path="cs.system.IntPtr"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Cryptography.X509Certificates.X509Certificate"</e></m>
		</meta>
	</class>
	<enum path="cs.system.security.cryptography.x509certificates.X509ContentType" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.cryptography.x509certificates.X509ContentType">
		<Unknown><meta><m n=":csNative"><e>0</e></m></meta></Unknown>
		<Cert><meta><m n=":csNative"><e>1</e></m></meta></Cert>
		<SerializedCert><meta><m n=":csNative"><e>2</e></m></meta></SerializedCert>
		<Pfx><meta><m n=":csNative"><e>3</e></m></meta></Pfx>
		<Pkcs12><meta><m n=":csNative"><e>3</e></m></meta></Pkcs12>
		<SerializedStore><meta><m n=":csNative"><e>4</e></m></meta></SerializedStore>
		<Pkcs7><meta><m n=":csNative"><e>5</e></m></meta></Pkcs7>
		<Authenticode><meta><m n=":csNative"><e>6</e></m></meta></Authenticode>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.Cryptography.X509Certificates.X509ContentType"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.security.cryptography.x509certificates.X509KeyStorageFlags" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.cryptography.x509certificates.X509KeyStorageFlags">
		<DefaultKeySet><meta><m n=":csNative"><e>0</e></m></meta></DefaultKeySet>
		<UserKeySet><meta><m n=":csNative"><e>1</e></m></meta></UserKeySet>
		<MachineKeySet><meta><m n=":csNative"><e>2</e></m></meta></MachineKeySet>
		<Exportable><meta><m n=":csNative"><e>4</e></m></meta></Exportable>
		<UserProtected><meta><m n=":csNative"><e>8</e></m></meta></UserProtected>
		<PersistKeySet><meta><m n=":csNative"><e>16</e></m></meta></PersistKeySet>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.Cryptography.X509Certificates.X509KeyStorageFlags"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.security.permissions.PermissionState" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.permissions.PermissionState">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<Unrestricted><meta><m n=":csNative"><e>1</e></m></meta></Unrestricted>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.Permissions.PermissionState"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<enum path="cs.system.security.permissions.SecurityAction" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.permissions.SecurityAction">
		<Demand><meta><m n=":csNative"><e>2</e></m></meta></Demand>
		<Assert><meta><m n=":csNative"><e>3</e></m></meta></Assert>
		<Deny><meta><m n=":csNative"><e>4</e></m></meta></Deny>
		<PermitOnly><meta><m n=":csNative"><e>5</e></m></meta></PermitOnly>
		<LinkDemand><meta><m n=":csNative"><e>6</e></m></meta></LinkDemand>
		<InheritanceDemand><meta><m n=":csNative"><e>7</e></m></meta></InheritanceDemand>
		<RequestMinimum><meta><m n=":csNative"><e>8</e></m></meta></RequestMinimum>
		<RequestOptional><meta><m n=":csNative"><e>9</e></m></meta></RequestOptional>
		<RequestRefuse><meta><m n=":csNative"><e>10</e></m></meta></RequestRefuse>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.Permissions.SecurityAction"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.security.permissions.StrongNamePublicKeyBlob" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.permissions.StrongNamePublicKeyBlob" extern="1">
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<new final="1" public="1" set="method">
			<f a="publicKey">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Permissions.StrongNamePublicKeyBlob"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.policy.ApplicationTrust" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.policy.ApplicationTrust" extern="1">
		<implements path="cs.system.security.ISecurityEncodable"/>
		<Persist public="1" get="accessor" set="accessor"><x path="Bool"/></Persist>
		<IsApplicationTrustedToRun public="1" get="accessor" set="accessor"><x path="Bool"/></IsApplicationTrustedToRun>
		<ExtraInfo public="1" get="accessor" set="accessor"><d/></ExtraInfo>
		<DefaultGrantSet public="1" get="accessor" set="accessor"><c path="cs.system.security.policy.PolicyStatement"/></DefaultGrantSet>
		<ApplicationIdentity public="1" get="accessor" set="accessor"><c path="cs.system.ApplicationIdentity"/></ApplicationIdentity>
		<get_ApplicationIdentity final="1" set="method">
			<f a=""><c path="cs.system.ApplicationIdentity"/></f>
			<meta><m n=":overload"/></meta>
		</get_ApplicationIdentity>
		<set_ApplicationIdentity final="1" set="method">
			<f a="value">
				<c path="cs.system.ApplicationIdentity"/>
				<c path="cs.system.ApplicationIdentity"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ApplicationIdentity>
		<get_DefaultGrantSet final="1" set="method">
			<f a=""><c path="cs.system.security.policy.PolicyStatement"/></f>
			<meta><m n=":overload"/></meta>
		</get_DefaultGrantSet>
		<set_DefaultGrantSet final="1" set="method">
			<f a="value">
				<c path="cs.system.security.policy.PolicyStatement"/>
				<c path="cs.system.security.policy.PolicyStatement"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_DefaultGrantSet>
		<get_ExtraInfo final="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_ExtraInfo>
		<set_ExtraInfo final="1" set="method">
			<f a="value">
				<d/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ExtraInfo>
		<get_IsApplicationTrustedToRun final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsApplicationTrustedToRun>
		<set_IsApplicationTrustedToRun final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_IsApplicationTrustedToRun>
		<get_Persist final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_Persist>
		<set_Persist final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Persist>
		<FromXml final="1" public="1" set="method">
			<f a="element">
				<c path="cs.system.security.SecurityElement"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</FromXml>
		<ToXml final="1" public="1" set="method">
			<f a=""><c path="cs.system.security.SecurityElement"/></f>
			<meta><m n=":overload"/></meta>
		</ToXml>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><new final="1" public="1" set="method">
	<f a="applicationIdentity">
		<c path="cs.system.ApplicationIdentity"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Policy.ApplicationTrust"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.policy.CodeGroup" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.policy.CodeGroup" extern="1">
		<PermissionSetName public="1" get="accessor" set="null"><c path="String"/></PermissionSetName>
		<AttributeString public="1" get="accessor" set="null"><c path="String"/></AttributeString>
		<Children public="1" get="accessor" set="accessor"><c path="cs.system.collections.IList"/></Children>
		<Name public="1" get="accessor" set="accessor"><c path="String"/></Name>
		<MembershipCondition public="1" get="accessor" set="accessor"><c path="cs.system.security.policy.IMembershipCondition"/></MembershipCondition>
		<Description public="1" get="accessor" set="accessor"><c path="String"/></Description>
		<PolicyStatement public="1" get="accessor" set="accessor"><c path="cs.system.security.policy.PolicyStatement"/></PolicyStatement>
		<MergeLogic public="1" get="accessor" set="null"><c path="String"/></MergeLogic>
		<Copy public="1" set="method">
			<f a=""><c path="cs.system.security.policy.CodeGroup"/></f>
			<meta><m n=":overload"/></meta>
		</Copy>
		<get_MergeLogic set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_MergeLogic>
		<Resolve public="1" set="method">
			<f a="evidence">
				<c path="cs.system.security.policy.Evidence"/>
				<c path="cs.system.security.policy.PolicyStatement"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Resolve>
		<ResolveMatchingCodeGroups public="1" set="method">
			<f a="evidence">
				<c path="cs.system.security.policy.Evidence"/>
				<c path="cs.system.security.policy.CodeGroup"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ResolveMatchingCodeGroups>
		<get_PolicyStatement final="1" set="method">
			<f a=""><c path="cs.system.security.policy.PolicyStatement"/></f>
			<meta><m n=":overload"/></meta>
		</get_PolicyStatement>
		<set_PolicyStatement final="1" set="method">
			<f a="value">
				<c path="cs.system.security.policy.PolicyStatement"/>
				<c path="cs.system.security.policy.PolicyStatement"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_PolicyStatement>
		<get_Description final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Description>
		<set_Description final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Description>
		<get_MembershipCondition final="1" set="method">
			<f a=""><c path="cs.system.security.policy.IMembershipCondition"/></f>
			<meta><m n=":overload"/></meta>
		</get_MembershipCondition>
		<set_MembershipCondition final="1" set="method">
			<f a="value">
				<c path="cs.system.security.policy.IMembershipCondition"/>
				<c path="cs.system.security.policy.IMembershipCondition"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_MembershipCondition>
		<get_Name final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<set_Name final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Name>
		<get_Children final="1" set="method">
			<f a=""><c path="cs.system.collections.IList"/></f>
			<meta><m n=":overload"/></meta>
		</get_Children>
		<set_Children final="1" set="method">
			<f a="value">
				<c path="cs.system.collections.IList"/>
				<c path="cs.system.collections.IList"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Children>
		<get_AttributeString set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_AttributeString>
		<get_PermissionSetName set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_PermissionSetName>
		<AddChild final="1" public="1" set="method">
			<f a="group">
				<c path="cs.system.security.policy.CodeGroup"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddChild>
		<RemoveChild final="1" public="1" set="method">
			<f a="group">
				<c path="cs.system.security.policy.CodeGroup"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveChild>
		<FromXml final="1" public="1" set="method">
			<f a="e">
				<c path="cs.system.security.SecurityElement"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><FromXml final="1" public="1" set="method">
	<f a="e:level">
		<c path="cs.system.security.SecurityElement"/>
		<c path="cs.system.security.policy.PolicyLevel"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</FromXml></overloads>
		</FromXml>
		<ParseXml set="method">
			<f a="e:level">
				<c path="cs.system.security.SecurityElement"/>
				<c path="cs.system.security.policy.PolicyLevel"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</ParseXml>
		<ToXml final="1" public="1" set="method">
			<f a=""><c path="cs.system.security.SecurityElement"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><ToXml final="1" public="1" set="method">
	<f a="level">
		<c path="cs.system.security.policy.PolicyLevel"/>
		<c path="cs.system.security.SecurityElement"/>
	</f>
	<meta><m n=":overload"/></meta>
</ToXml></overloads>
		</ToXml>
		<CreateXml set="method">
			<f a="element:level">
				<c path="cs.system.security.SecurityElement"/>
				<c path="cs.system.security.policy.PolicyLevel"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</CreateXml>
		<new final="1" set="method">
			<f a="membershipCondition:policy">
				<c path="cs.system.security.policy.IMembershipCondition"/>
				<c path="cs.system.security.policy.PolicyStatement"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Policy.CodeGroup"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.policy.Evidence_EvidenceEnumerator" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.policy.Evidence" module="cs.system.security.policy.Evidence" extern="1">
		<implements path="cs.system.collections.IEnumerator"/>
		<Current public="1" get="accessor" set="null"><d/></Current>
		<MoveNext final="1" public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</MoveNext>
		<Reset final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Reset>
		<get_Current final="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_Current>
		<new final="1" public="1" set="method">
			<f a="hostenum:assemblyenum">
				<c path="cs.system.collections.IEnumerator"/>
				<c path="cs.system.collections.IEnumerator"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Policy.Evidence.EvidenceEnumerator"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.policy.Evidence" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.policy.Evidence" extern="1">
		<implements path="cs.system.collections.ICollection"/>
		<implements path="cs.system.collections.IEnumerable"/>
		<SyncRoot public="1" get="accessor" set="null"><d/></SyncRoot>
		<Locked public="1" get="accessor" set="accessor"><x path="Bool"/></Locked>
		<IsSynchronized public="1" get="accessor" set="null"><x path="Bool"/></IsSynchronized>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<get_Count final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Count>
		<get_IsReadOnly final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsReadOnly>
		<get_IsSynchronized final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSynchronized>
		<get_Locked final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_Locked>
		<set_Locked final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Locked>
		<get_SyncRoot final="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_SyncRoot>
		<AddAssembly final="1" public="1" set="method">
			<f a="id">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddAssembly>
		<AddHost final="1" public="1" set="method">
			<f a="id">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddHost>
		<Clear final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Clear>
		<CopyTo final="1" public="1" set="method">
			<f a="array:index">
				<c path="cs.system.Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CopyTo>
		<GetEnumerator final="1" public="1" set="method">
			<f a=""><c path="cs.system.collections.IEnumerator"/></f>
			<meta><m n=":overload"/></meta>
		</GetEnumerator>
		<GetAssemblyEnumerator final="1" public="1" set="method">
			<f a=""><c path="cs.system.collections.IEnumerator"/></f>
			<meta><m n=":overload"/></meta>
		</GetAssemblyEnumerator>
		<GetHostEnumerator final="1" public="1" set="method">
			<f a=""><c path="cs.system.collections.IEnumerator"/></f>
			<meta><m n=":overload"/></meta>
		</GetHostEnumerator>
		<Merge final="1" public="1" set="method">
			<f a="evidence">
				<c path="cs.system.security.policy.Evidence"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Merge>
		<RemoveType final="1" public="1" set="method">
			<f a="t">
				<c path="cs.system.Type"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</RemoveType>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="hostEvidence:assemblyEvidence">
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.NativeArray"><d/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="evidence">
						<c path="cs.system.security.policy.Evidence"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Policy.Evidence"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.policy.IBuiltInEvidence" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.policy.IBuiltInEvidence" extern="1" interface="1">
		<GetRequiredSize public="1" set="method">
			<f a="verbose">
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetRequiredSize>
		<InitFromBuffer public="1" set="method">
			<f a="buffer:position">
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</InitFromBuffer>
		<OutputToBuffer public="1" set="method">
			<f a="buffer:position:verbose">
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</OutputToBuffer>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Policy.IBuiltInEvidence"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.policy.IConstantMembershipCondition" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.policy.IConstantMembershipCondition" extern="1" interface="1"><meta>
	<m n=":nativeGen"/>
	<m n=":abstract"/>
	<m n=":libType"/>
	<m n=":csNative"/>
	<m n=":native"><e>"System.Security.Policy.IConstantMembershipCondition"</e></m>
</meta></class>
	<class path="cs.system.security.policy.IIdentityPermissionFactory" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.policy.IIdentityPermissionFactory" extern="1" interface="1">
		<CreateIdentityPermission public="1" set="method">
			<f a="evidence">
				<c path="cs.system.security.policy.Evidence"/>
				<c path="cs.system.security.IPermission"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CreateIdentityPermission>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Policy.IIdentityPermissionFactory"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.policy.IMembershipCondition" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.policy.IMembershipCondition" extern="1" interface="1">
		<extends path="cs.system.security.ISecurityEncodable"/>
		<extends path="cs.system.security.ISecurityPolicyEncodable"/>
		<ToXml public="1" set="method">
			<f a=""><c path="cs.system.security.SecurityElement"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><ToXml public="1" set="method">
	<f a="level">
		<c path="cs.system.security.policy.PolicyLevel"/>
		<c path="cs.system.security.SecurityElement"/>
	</f>
	<meta><m n=":overload"/></meta>
</ToXml></overloads>
		</ToXml>
		<FromXml public="1" set="method">
			<f a="e">
				<c path="cs.system.security.SecurityElement"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><FromXml public="1" set="method">
	<f a="e:level">
		<c path="cs.system.security.SecurityElement"/>
		<c path="cs.system.security.policy.PolicyLevel"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</FromXml></overloads>
		</FromXml>
		<Check public="1" set="method">
			<f a="evidence">
				<c path="cs.system.security.policy.Evidence"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Check>
		<Copy public="1" set="method">
			<f a=""><c path="cs.system.security.policy.IMembershipCondition"/></f>
			<meta><m n=":overload"/></meta>
		</Copy>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Policy.IMembershipCondition"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.policy.PolicyLevel" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.policy.PolicyLevel" extern="1">
		<CreateAppDomainLevel final="1" public="1" set="method" static="1">
			<f a=""><c path="cs.system.security.policy.PolicyLevel"/></f>
			<meta><m n=":overload"/></meta>
		</CreateAppDomainLevel>
		<Type public="1" get="accessor" set="null"><e path="cs.system.security.PolicyLevelType"/></Type>
		<StoreLocation public="1" get="accessor" set="null"><c path="String"/></StoreLocation>
		<RootCodeGroup public="1" get="accessor" set="accessor"><c path="cs.system.security.policy.CodeGroup"/></RootCodeGroup>
		<NamedPermissionSets public="1" get="accessor" set="null"><c path="cs.system.collections.IList"/></NamedPermissionSets>
		<Label public="1" get="accessor" set="null"><c path="String"/></Label>
		<FullTrustAssemblies public="1" get="accessor" set="null"><c path="cs.system.collections.IList"/></FullTrustAssemblies>
		<get_FullTrustAssemblies final="1" set="method">
			<f a=""><c path="cs.system.collections.IList"/></f>
			<meta><m n=":overload"/></meta>
		</get_FullTrustAssemblies>
		<get_Label final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Label>
		<get_NamedPermissionSets final="1" set="method">
			<f a=""><c path="cs.system.collections.IList"/></f>
			<meta><m n=":overload"/></meta>
		</get_NamedPermissionSets>
		<get_RootCodeGroup final="1" set="method">
			<f a=""><c path="cs.system.security.policy.CodeGroup"/></f>
			<meta><m n=":overload"/></meta>
		</get_RootCodeGroup>
		<set_RootCodeGroup final="1" set="method">
			<f a="value">
				<c path="cs.system.security.policy.CodeGroup"/>
				<c path="cs.system.security.policy.CodeGroup"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_RootCodeGroup>
		<get_StoreLocation final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_StoreLocation>
		<get_Type final="1" set="method">
			<f a=""><e path="cs.system.security.PolicyLevelType"/></f>
			<meta><m n=":overload"/></meta>
		</get_Type>
		<AddFullTrustAssembly final="1" public="1" set="method">
			<f a="sn">
				<c path="cs.system.security.policy.StrongName"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><AddFullTrustAssembly final="1" public="1" set="method">
	<f a="snMC">
		<c path="cs.system.security.policy.StrongNameMembershipCondition"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</AddFullTrustAssembly></overloads>
		</AddFullTrustAssembly>
		<AddNamedPermissionSet final="1" public="1" set="method">
			<f a="permSet">
				<c path="cs.system.security.NamedPermissionSet"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AddNamedPermissionSet>
		<ChangeNamedPermissionSet final="1" public="1" set="method">
			<f a="name:pSet">
				<c path="String"/>
				<c path="cs.system.security.PermissionSet"/>
				<c path="cs.system.security.NamedPermissionSet"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ChangeNamedPermissionSet>
		<FromXml final="1" public="1" set="method">
			<f a="e">
				<c path="cs.system.security.SecurityElement"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</FromXml>
		<GetNamedPermissionSet final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.security.NamedPermissionSet"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetNamedPermissionSet>
		<Recover final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Recover>
		<RemoveFullTrustAssembly final="1" public="1" set="method">
			<f a="sn">
				<c path="cs.system.security.policy.StrongName"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><RemoveFullTrustAssembly final="1" public="1" set="method">
	<f a="snMC">
		<c path="cs.system.security.policy.StrongNameMembershipCondition"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</RemoveFullTrustAssembly></overloads>
		</RemoveFullTrustAssembly>
		<RemoveNamedPermissionSet final="1" public="1" set="method">
			<f a="permSet">
				<c path="cs.system.security.NamedPermissionSet"/>
				<c path="cs.system.security.NamedPermissionSet"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><RemoveNamedPermissionSet final="1" public="1" set="method">
	<f a="name">
		<c path="String"/>
		<c path="cs.system.security.NamedPermissionSet"/>
	</f>
	<meta><m n=":overload"/></meta>
</RemoveNamedPermissionSet></overloads>
		</RemoveNamedPermissionSet>
		<Reset final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Reset>
		<Resolve final="1" public="1" set="method">
			<f a="evidence">
				<c path="cs.system.security.policy.Evidence"/>
				<c path="cs.system.security.policy.PolicyStatement"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Resolve>
		<ResolveMatchingCodeGroups final="1" public="1" set="method">
			<f a="evidence">
				<c path="cs.system.security.policy.Evidence"/>
				<c path="cs.system.security.policy.CodeGroup"/>
			</f>
			<meta><m n=":overload"/></meta>
		</ResolveMatchingCodeGroups>
		<ToXml final="1" public="1" set="method">
			<f a=""><c path="cs.system.security.SecurityElement"/></f>
			<meta><m n=":overload"/></meta>
		</ToXml>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Policy.PolicyLevel"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.policy.PolicyStatement" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.policy.PolicyStatement" extern="1">
		<implements path="cs.system.security.ISecurityEncodable"/>
		<implements path="cs.system.security.ISecurityPolicyEncodable"/>
		<AttributeString public="1" get="accessor" set="null"><c path="String"/></AttributeString>
		<Attributes public="1" get="accessor" set="accessor"><e path="cs.system.security.policy.PolicyStatementAttribute"/></Attributes>
		<PermissionSet public="1" get="accessor" set="accessor"><c path="cs.system.security.PermissionSet"/></PermissionSet>
		<get_PermissionSet final="1" set="method">
			<f a=""><c path="cs.system.security.PermissionSet"/></f>
			<meta><m n=":overload"/></meta>
		</get_PermissionSet>
		<set_PermissionSet final="1" set="method">
			<f a="value">
				<c path="cs.system.security.PermissionSet"/>
				<c path="cs.system.security.PermissionSet"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_PermissionSet>
		<get_Attributes final="1" set="method">
			<f a=""><e path="cs.system.security.policy.PolicyStatementAttribute"/></f>
			<meta><m n=":overload"/></meta>
		</get_Attributes>
		<set_Attributes final="1" set="method">
			<f a="value">
				<e path="cs.system.security.policy.PolicyStatementAttribute"/>
				<e path="cs.system.security.policy.PolicyStatementAttribute"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Attributes>
		<get_AttributeString final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_AttributeString>
		<Copy final="1" public="1" set="method">
			<f a=""><c path="cs.system.security.policy.PolicyStatement"/></f>
			<meta><m n=":overload"/></meta>
		</Copy>
		<FromXml final="1" public="1" set="method">
			<f a="et">
				<c path="cs.system.security.SecurityElement"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><FromXml final="1" public="1" set="method">
	<f a="et:level">
		<c path="cs.system.security.SecurityElement"/>
		<c path="cs.system.security.policy.PolicyLevel"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</FromXml></overloads>
		</FromXml>
		<ToXml final="1" public="1" set="method">
			<f a=""><c path="cs.system.security.SecurityElement"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><ToXml final="1" public="1" set="method">
	<f a="level">
		<c path="cs.system.security.policy.PolicyLevel"/>
		<c path="cs.system.security.SecurityElement"/>
	</f>
	<meta><m n=":overload"/></meta>
</ToXml></overloads>
		</ToXml>
		<new final="1" public="1" set="method">
			<f a="permSet">
				<c path="cs.system.security.PermissionSet"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><new final="1" public="1" set="method">
	<f a="permSet:attributes">
		<c path="cs.system.security.PermissionSet"/>
		<e path="cs.system.security.policy.PolicyStatementAttribute"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Policy.PolicyStatement"</e></m>
		</meta>
	</class>
	<enum path="cs.system.security.policy.PolicyStatementAttribute" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.policy.PolicyStatementAttribute">
		<Nothing><meta><m n=":csNative"><e>0</e></m></meta></Nothing>
		<Exclusive><meta><m n=":csNative"><e>1</e></m></meta></Exclusive>
		<LevelFinal><meta><m n=":csNative"><e>2</e></m></meta></LevelFinal>
		<All><meta><m n=":csNative"><e>3</e></m></meta></All>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.Policy.PolicyStatementAttribute"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.security.policy.StrongName" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.policy.StrongName" extern="1">
		<implements path="cs.system.security.policy.IBuiltInEvidence"/>
		<implements path="cs.system.security.policy.IIdentityPermissionFactory"/>
		<Version public="1" get="accessor" set="null"><c path="cs.system.Version"/></Version>
		<PublicKey public="1" get="accessor" set="null"><c path="cs.system.security.permissions.StrongNamePublicKeyBlob"/></PublicKey>
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<get_Name final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<get_PublicKey final="1" set="method">
			<f a=""><c path="cs.system.security.permissions.StrongNamePublicKeyBlob"/></f>
			<meta><m n=":overload"/></meta>
		</get_PublicKey>
		<get_Version final="1" set="method">
			<f a=""><c path="cs.system.Version"/></f>
			<meta><m n=":overload"/></meta>
		</get_Version>
		<Copy final="1" public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</Copy>
		<CreateIdentityPermission final="1" public="1" set="method">
			<f a="evidence">
				<c path="cs.system.security.policy.Evidence"/>
				<c path="cs.system.security.IPermission"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CreateIdentityPermission>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<new final="1" public="1" set="method">
			<f a="blob:name:version">
				<c path="cs.system.security.permissions.StrongNamePublicKeyBlob"/>
				<c path="String"/>
				<c path="cs.system.Version"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Policy.StrongName"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.policy.StrongNameMembershipCondition" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.policy.StrongNameMembershipCondition" extern="1">
		<implements path="cs.system.security.ISecurityEncodable"/>
		<implements path="cs.system.security.ISecurityPolicyEncodable"/>
		<implements path="cs.system.security.policy.IConstantMembershipCondition"/>
		<implements path="cs.system.security.policy.IMembershipCondition"/>
		<PublicKey public="1" get="accessor" set="accessor"><c path="cs.system.security.permissions.StrongNamePublicKeyBlob"/></PublicKey>
		<Version public="1" get="accessor" set="accessor"><c path="cs.system.Version"/></Version>
		<Name public="1" get="accessor" set="accessor"><c path="String"/></Name>
		<get_Name final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<set_Name final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Name>
		<get_Version final="1" set="method">
			<f a=""><c path="cs.system.Version"/></f>
			<meta><m n=":overload"/></meta>
		</get_Version>
		<set_Version final="1" set="method">
			<f a="value">
				<c path="cs.system.Version"/>
				<c path="cs.system.Version"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Version>
		<get_PublicKey final="1" set="method">
			<f a=""><c path="cs.system.security.permissions.StrongNamePublicKeyBlob"/></f>
			<meta><m n=":overload"/></meta>
		</get_PublicKey>
		<set_PublicKey final="1" set="method">
			<f a="value">
				<c path="cs.system.security.permissions.StrongNamePublicKeyBlob"/>
				<c path="cs.system.security.permissions.StrongNamePublicKeyBlob"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_PublicKey>
		<Check final="1" public="1" set="method">
			<f a="evidence">
				<c path="cs.system.security.policy.Evidence"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Check>
		<Copy final="1" public="1" set="method">
			<f a=""><c path="cs.system.security.policy.IMembershipCondition"/></f>
			<meta><m n=":overload"/></meta>
		</Copy>
		<FromXml final="1" public="1" set="method">
			<f a="e">
				<c path="cs.system.security.SecurityElement"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><FromXml final="1" public="1" set="method">
	<f a="e:level">
		<c path="cs.system.security.SecurityElement"/>
		<c path="cs.system.security.policy.PolicyLevel"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</FromXml></overloads>
		</FromXml>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<ToXml final="1" public="1" set="method">
			<f a=""><c path="cs.system.security.SecurityElement"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><ToXml final="1" public="1" set="method">
	<f a="level">
		<c path="cs.system.security.policy.PolicyLevel"/>
		<c path="cs.system.security.SecurityElement"/>
	</f>
	<meta><m n=":overload"/></meta>
</ToXml></overloads>
		</ToXml>
		<new final="1" public="1" set="method">
			<f a="blob:name:version">
				<c path="cs.system.security.permissions.StrongNamePublicKeyBlob"/>
				<c path="String"/>
				<c path="cs.system.Version"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Policy.StrongNameMembershipCondition"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.policy.TrustManagerContext" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.policy.TrustManagerContext" extern="1">
		<UIContext public="1" get="accessor" set="accessor"><e path="cs.system.security.policy.TrustManagerUIContext"/></UIContext>
		<PreviousApplicationIdentity public="1" get="accessor" set="accessor"><c path="cs.system.ApplicationIdentity"/></PreviousApplicationIdentity>
		<Persist public="1" get="accessor" set="accessor"><x path="Bool"/></Persist>
		<NoPrompt public="1" get="accessor" set="accessor"><x path="Bool"/></NoPrompt>
		<KeepAlive public="1" get="accessor" set="accessor"><x path="Bool"/></KeepAlive>
		<IgnorePersistedDecision public="1" get="accessor" set="accessor"><x path="Bool"/></IgnorePersistedDecision>
		<get_IgnorePersistedDecision set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IgnorePersistedDecision>
		<set_IgnorePersistedDecision set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_IgnorePersistedDecision>
		<get_KeepAlive set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_KeepAlive>
		<set_KeepAlive set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_KeepAlive>
		<get_NoPrompt set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_NoPrompt>
		<set_NoPrompt set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_NoPrompt>
		<get_Persist set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_Persist>
		<set_Persist set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Persist>
		<get_PreviousApplicationIdentity set="method">
			<f a=""><c path="cs.system.ApplicationIdentity"/></f>
			<meta><m n=":overload"/></meta>
		</get_PreviousApplicationIdentity>
		<set_PreviousApplicationIdentity set="method">
			<f a="value">
				<c path="cs.system.ApplicationIdentity"/>
				<c path="cs.system.ApplicationIdentity"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_PreviousApplicationIdentity>
		<get_UIContext set="method">
			<f a=""><e path="cs.system.security.policy.TrustManagerUIContext"/></f>
			<meta><m n=":overload"/></meta>
		</get_UIContext>
		<set_UIContext set="method">
			<f a="value">
				<e path="cs.system.security.policy.TrustManagerUIContext"/>
				<e path="cs.system.security.policy.TrustManagerUIContext"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_UIContext>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><new final="1" public="1" set="method">
	<f a="uiContext">
		<e path="cs.system.security.policy.TrustManagerUIContext"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Policy.TrustManagerContext"</e></m>
		</meta>
	</class>
	<enum path="cs.system.security.policy.TrustManagerUIContext" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.policy.TrustManagerUIContext">
		<Install><meta><m n=":csNative"><e>0</e></m></meta></Install>
		<Upgrade><meta><m n=":csNative"><e>1</e></m></meta></Upgrade>
		<Run><meta><m n=":csNative"><e>2</e></m></meta></Run>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.Policy.TrustManagerUIContext"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.security.principal.IIdentity" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.principal.IIdentity" extern="1" interface="1">
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<IsAuthenticated public="1" get="accessor" set="null"><x path="Bool"/></IsAuthenticated>
		<AuthenticationType public="1" get="accessor" set="null"><c path="String"/></AuthenticationType>
		<get_AuthenticationType set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_AuthenticationType>
		<get_IsAuthenticated set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsAuthenticated>
		<get_Name set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Principal.IIdentity"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.principal.IPrincipal" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.principal.IPrincipal" extern="1" interface="1">
		<Identity public="1" get="accessor" set="null"><c path="cs.system.security.principal.IIdentity"/></Identity>
		<get_Identity set="method">
			<f a=""><c path="cs.system.security.principal.IIdentity"/></f>
			<meta><m n=":overload"/></meta>
		</get_Identity>
		<IsInRole public="1" set="method">
			<f a="role">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsInRole>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Principal.IPrincipal"</e></m>
		</meta>
	</class>
	<class path="cs.system.security.principal.IdentityReference" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.principal.IdentityReference" extern="1">
		<op_Equality final="1" public="1" set="method" static="1">
			<f a="left:right">
				<c path="cs.system.security.principal.IdentityReference"/>
				<c path="cs.system.security.principal.IdentityReference"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Equality>
		<op_Inequality final="1" public="1" set="method" static="1">
			<f a="left:right">
				<c path="cs.system.security.principal.IdentityReference"/>
				<c path="cs.system.security.principal.IdentityReference"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Inequality>
		<Value public="1" get="accessor" set="null"><c path="String"/></Value>
		<get_Value set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Value>
		<IsValidTargetType public="1" set="method">
			<f a="targetType">
				<c path="cs.system.Type"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</IsValidTargetType>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<Translate public="1" set="method">
			<f a="targetType">
				<c path="cs.system.Type"/>
				<c path="cs.system.security.principal.IdentityReference"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Translate>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Security.Principal.IdentityReference"</e></m>
		</meta>
	</class>
	<enum path="cs.system.security.principal.PrincipalPolicy" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.security.principal.PrincipalPolicy">
		<UnauthenticatedPrincipal><meta><m n=":csNative"><e>0</e></m></meta></UnauthenticatedPrincipal>
		<NoPrincipal><meta><m n=":csNative"><e>1</e></m></meta></NoPrincipal>
		<WindowsPrincipal><meta><m n=":csNative"><e>2</e></m></meta></WindowsPrincipal>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Security.Principal.PrincipalPolicy"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.text.Decoder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.text.Decoder" extern="1">
		<FallbackBuffer public="1" get="accessor" set="null"><c path="cs.system.text.DecoderFallbackBuffer"/></FallbackBuffer>
		<Fallback public="1" get="accessor" set="accessor"><c path="cs.system.text.DecoderFallback"/></Fallback>
		<get_Fallback final="1" set="method">
			<f a=""><c path="cs.system.text.DecoderFallback"/></f>
			<meta><m n=":overload"/></meta>
		</get_Fallback>
		<set_Fallback final="1" set="method">
			<f a="value">
				<c path="cs.system.text.DecoderFallback"/>
				<c path="cs.system.text.DecoderFallback"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Fallback>
		<get_FallbackBuffer final="1" set="method">
			<f a=""><c path="cs.system.text.DecoderFallbackBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</get_FallbackBuffer>
		<GetCharCount public="1" set="method">
			<f a="bytes:index:count">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetCharCount public="1" set="method">
					<f a="bytes:count:flush">
						<x path="cs.Pointer"><t path="cs.types.UInt8"/></x>
						<x path="Int"/>
						<x path="Bool"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetCharCount>
				<GetCharCount public="1" set="method">
					<f a="bytes:index:count:flush">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Bool"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetCharCount>
			</overloads>
		</GetCharCount>
		<GetChars public="1" set="method">
			<f a="bytes:byteIndex:byteCount:chars:charIndex">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetChars public="1" set="method">
					<f a="bytes:byteCount:chars:charCount:flush">
						<x path="cs.Pointer"><t path="cs.types.UInt8"/></x>
						<x path="Int"/>
						<x path="cs.Pointer"><t path="cs.types.Char16"/></x>
						<x path="Int"/>
						<x path="Bool"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetChars>
				<GetChars public="1" set="method">
					<f a="bytes:byteIndex:byteCount:chars:charIndex:flush">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
						<x path="Int"/>
						<x path="Bool"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetChars>
			</overloads>
		</GetChars>
		<Reset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Reset>
		<Convert public="1" set="method">
			<f a="bytes:byteCount:chars:charCount:flush:bytesUsed:charsUsed:completed">
				<x path="cs.Pointer"><t path="cs.types.UInt8"/></x>
				<x path="Int"/>
				<x path="cs.Pointer"><t path="cs.types.Char16"/></x>
				<x path="Int"/>
				<x path="Bool"/>
				<t path="cs.Out"><x path="Int"/></t>
				<t path="cs.Out"><x path="Int"/></t>
				<t path="cs.Out"><x path="Bool"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><Convert public="1" set="method">
	<f a="bytes:byteIndex:byteCount:chars:charIndex:charCount:flush:bytesUsed:charsUsed:completed">
		<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Bool"/>
		<t path="cs.Out"><x path="Int"/></t>
		<t path="cs.Out"><x path="Int"/></t>
		<t path="cs.Out"><x path="Bool"/></t>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</Convert></overloads>
		</Convert>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.Decoder"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.DecoderFallback" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.text.DecoderFallback" extern="1">
		<ReplacementFallback public="1" get="accessor" set="null" static="1"><c path="cs.system.text.DecoderFallback"/></ReplacementFallback>
		<ExceptionFallback public="1" get="accessor" set="null" static="1"><c path="cs.system.text.DecoderFallback"/></ExceptionFallback>
		<get_ExceptionFallback final="1" set="method" static="1">
			<f a=""><c path="cs.system.text.DecoderFallback"/></f>
			<meta><m n=":overload"/></meta>
		</get_ExceptionFallback>
		<get_ReplacementFallback final="1" set="method" static="1">
			<f a=""><c path="cs.system.text.DecoderFallback"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReplacementFallback>
		<MaxCharCount public="1" get="accessor" set="null"><x path="Int"/></MaxCharCount>
		<get_MaxCharCount set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_MaxCharCount>
		<CreateFallbackBuffer public="1" set="method">
			<f a=""><c path="cs.system.text.DecoderFallbackBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</CreateFallbackBuffer>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.DecoderFallback"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.DecoderFallbackBuffer" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.text.DecoderFallbackBuffer" extern="1">
		<Remaining public="1" get="accessor" set="null"><x path="Int"/></Remaining>
		<get_Remaining set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Remaining>
		<Fallback public="1" set="method">
			<f a="bytesUnknown:index">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Fallback>
		<GetNextChar public="1" set="method">
			<f a=""><t path="cs.types.Char16"/></f>
			<meta><m n=":overload"/></meta>
		</GetNextChar>
		<MovePrevious public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</MovePrevious>
		<Reset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Reset>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.DecoderFallbackBuffer"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.Encoder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.text.Encoder" extern="1">
		<FallbackBuffer public="1" get="accessor" set="null"><c path="cs.system.text.EncoderFallbackBuffer"/></FallbackBuffer>
		<Fallback public="1" get="accessor" set="accessor"><c path="cs.system.text.EncoderFallback"/></Fallback>
		<get_Fallback final="1" set="method">
			<f a=""><c path="cs.system.text.EncoderFallback"/></f>
			<meta><m n=":overload"/></meta>
		</get_Fallback>
		<set_Fallback final="1" set="method">
			<f a="value">
				<c path="cs.system.text.EncoderFallback"/>
				<c path="cs.system.text.EncoderFallback"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Fallback>
		<get_FallbackBuffer final="1" set="method">
			<f a=""><c path="cs.system.text.EncoderFallbackBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</get_FallbackBuffer>
		<GetByteCount public="1" set="method">
			<f a="chars:index:count:flush">
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetByteCount public="1" set="method">
	<f a="chars:count:flush">
		<x path="cs.Pointer"><t path="cs.types.Char16"/></x>
		<x path="Int"/>
		<x path="Bool"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetByteCount></overloads>
		</GetByteCount>
		<GetBytes public="1" set="method">
			<f a="chars:charIndex:charCount:bytes:byteIndex:flush">
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetBytes public="1" set="method">
	<f a="chars:charCount:bytes:byteCount:flush">
		<x path="cs.Pointer"><t path="cs.types.Char16"/></x>
		<x path="Int"/>
		<x path="cs.Pointer"><t path="cs.types.UInt8"/></x>
		<x path="Int"/>
		<x path="Bool"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetBytes></overloads>
		</GetBytes>
		<Reset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Reset>
		<Convert public="1" set="method">
			<f a="chars:charCount:bytes:byteCount:flush:charsUsed:bytesUsed:completed">
				<x path="cs.Pointer"><t path="cs.types.Char16"/></x>
				<x path="Int"/>
				<x path="cs.Pointer"><t path="cs.types.UInt8"/></x>
				<x path="Int"/>
				<x path="Bool"/>
				<t path="cs.Out"><x path="Int"/></t>
				<t path="cs.Out"><x path="Int"/></t>
				<t path="cs.Out"><x path="Bool"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><Convert public="1" set="method">
	<f a="chars:charIndex:charCount:bytes:byteIndex:byteCount:flush:charsUsed:bytesUsed:completed">
		<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Bool"/>
		<t path="cs.Out"><x path="Int"/></t>
		<t path="cs.Out"><x path="Int"/></t>
		<t path="cs.Out"><x path="Bool"/></t>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</Convert></overloads>
		</Convert>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.Encoder"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.EncoderFallback" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.text.EncoderFallback" extern="1">
		<ReplacementFallback public="1" get="accessor" set="null" static="1"><c path="cs.system.text.EncoderFallback"/></ReplacementFallback>
		<ExceptionFallback public="1" get="accessor" set="null" static="1"><c path="cs.system.text.EncoderFallback"/></ExceptionFallback>
		<get_ExceptionFallback final="1" set="method" static="1">
			<f a=""><c path="cs.system.text.EncoderFallback"/></f>
			<meta><m n=":overload"/></meta>
		</get_ExceptionFallback>
		<get_ReplacementFallback final="1" set="method" static="1">
			<f a=""><c path="cs.system.text.EncoderFallback"/></f>
			<meta><m n=":overload"/></meta>
		</get_ReplacementFallback>
		<MaxCharCount public="1" get="accessor" set="null"><x path="Int"/></MaxCharCount>
		<get_MaxCharCount set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_MaxCharCount>
		<CreateFallbackBuffer public="1" set="method">
			<f a=""><c path="cs.system.text.EncoderFallbackBuffer"/></f>
			<meta><m n=":overload"/></meta>
		</CreateFallbackBuffer>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.EncoderFallback"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.EncoderFallbackBuffer" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.text.EncoderFallbackBuffer" extern="1">
		<Remaining public="1" get="accessor" set="null"><x path="Int"/></Remaining>
		<get_Remaining set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Remaining>
		<Fallback public="1" set="method">
			<f a="charUnknown:index">
				<t path="cs.types.Char16"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><Fallback public="1" set="method">
	<f a="charUnknownHigh:charUnknownLow:index">
		<t path="cs.types.Char16"/>
		<t path="cs.types.Char16"/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</Fallback></overloads>
		</Fallback>
		<GetNextChar public="1" set="method">
			<f a=""><t path="cs.types.Char16"/></f>
			<meta><m n=":overload"/></meta>
		</GetNextChar>
		<MovePrevious public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</MovePrevious>
		<Reset public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Reset>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.EncoderFallbackBuffer"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.Encoding_ForwardingEncoder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.text.Encoding" module="cs.system.text.Encoding" extern="1">
		<extends path="cs.system.text.Encoder"/>
		<GetByteCount public="1" set="method" override="1">
			<f a="chars:index:count:flush">
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetByteCount>
		<GetBytes public="1" set="method" override="1">
			<f a="chars:charIndex:charCount:bytes:byteCount:flush">
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetBytes>
		<new final="1" public="1" set="method">
			<f a="enc">
				<c path="cs.system.text.Encoding"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.Encoding.ForwardingEncoder"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.Encoding_ForwardingDecoder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.text.Encoding" module="cs.system.text.Encoding" extern="1">
		<extends path="cs.system.text.Decoder"/>
		<GetCharCount public="1" set="method" override="1">
			<f a="bytes:index:count">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetCharCount>
		<GetChars public="1" set="method" override="1">
			<f a="bytes:byteIndex:byteCount:chars:charIndex">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetChars>
		<new final="1" public="1" set="method">
			<f a="enc">
				<c path="cs.system.text.Encoding"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.Encoding.ForwardingDecoder"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.Encoding" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.text.Encoding" extern="1">
		<implements path="cs.system.ICloneable"/>
		<UTF32 public="1" get="accessor" set="null" static="1"><c path="cs.system.text.Encoding"/></UTF32>
		<Unicode public="1" get="accessor" set="null" static="1"><c path="cs.system.text.Encoding"/></Unicode>
		<UTF8 public="1" get="accessor" set="null" static="1"><c path="cs.system.text.Encoding"/></UTF8>
		<UTF7 public="1" get="accessor" set="null" static="1"><c path="cs.system.text.Encoding"/></UTF7>
		<Default public="1" get="accessor" set="null" static="1"><c path="cs.system.text.Encoding"/></Default>
		<BigEndianUnicode public="1" get="accessor" set="null" static="1"><c path="cs.system.text.Encoding"/></BigEndianUnicode>
		<ASCII public="1" get="accessor" set="null" static="1"><c path="cs.system.text.Encoding"/></ASCII>
		<Convert final="1" public="1" set="method" static="1">
			<f a="srcEncoding:dstEncoding:bytes">
				<c path="cs.system.text.Encoding"/>
				<c path="cs.system.text.Encoding"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><Convert final="1" public="1" set="method">
	<f a="srcEncoding:dstEncoding:bytes:index:count">
		<c path="cs.system.text.Encoding"/>
		<c path="cs.system.text.Encoding"/>
		<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
		<x path="Int"/>
		<x path="Int"/>
		<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</Convert></overloads>
		</Convert>
		<GetEncoding final="1" public="1" set="method" static="1">
			<f a="codepage">
				<x path="Int"/>
				<c path="cs.system.text.Encoding"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetEncoding final="1" public="1" set="method">
					<f a="name">
						<c path="String"/>
						<c path="cs.system.text.Encoding"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetEncoding>
				<GetEncoding final="1" public="1" set="method">
					<f a="name:encoderFallback:decoderFallback">
						<c path="String"/>
						<c path="cs.system.text.EncoderFallback"/>
						<c path="cs.system.text.DecoderFallback"/>
						<c path="cs.system.text.Encoding"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetEncoding>
				<GetEncoding final="1" public="1" set="method">
					<f a="codepage:encoderFallback:decoderFallback">
						<x path="Int"/>
						<c path="cs.system.text.EncoderFallback"/>
						<c path="cs.system.text.DecoderFallback"/>
						<c path="cs.system.text.Encoding"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetEncoding>
			</overloads>
		</GetEncoding>
		<GetEncodings final="1" public="1" set="method" static="1">
			<f a=""><c path="cs.NativeArray"><c path="cs.system.text.EncodingInfo"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetEncodings>
		<get_ASCII final="1" set="method" static="1">
			<f a=""><c path="cs.system.text.Encoding"/></f>
			<meta><m n=":overload"/></meta>
		</get_ASCII>
		<get_BigEndianUnicode final="1" set="method" static="1">
			<f a=""><c path="cs.system.text.Encoding"/></f>
			<meta><m n=":overload"/></meta>
		</get_BigEndianUnicode>
		<get_Default final="1" set="method" static="1">
			<f a=""><c path="cs.system.text.Encoding"/></f>
			<meta><m n=":overload"/></meta>
		</get_Default>
		<get_UTF7 final="1" set="method" static="1">
			<f a=""><c path="cs.system.text.Encoding"/></f>
			<meta><m n=":overload"/></meta>
		</get_UTF7>
		<get_UTF8 final="1" set="method" static="1">
			<f a=""><c path="cs.system.text.Encoding"/></f>
			<meta><m n=":overload"/></meta>
		</get_UTF8>
		<get_Unicode final="1" set="method" static="1">
			<f a=""><c path="cs.system.text.Encoding"/></f>
			<meta><m n=":overload"/></meta>
		</get_Unicode>
		<get_UTF32 final="1" set="method" static="1">
			<f a=""><c path="cs.system.text.Encoding"/></f>
			<meta><m n=":overload"/></meta>
		</get_UTF32>
		<WindowsCodePage public="1" get="accessor" set="null"><x path="Int"/></WindowsCodePage>
		<WebName public="1" get="accessor" set="null"><c path="String"/></WebName>
		<IsMailNewsSave public="1" get="accessor" set="null"><x path="Bool"/></IsMailNewsSave>
		<IsMailNewsDisplay public="1" get="accessor" set="null"><x path="Bool"/></IsMailNewsDisplay>
		<IsBrowserSave public="1" get="accessor" set="null"><x path="Bool"/></IsBrowserSave>
		<IsBrowserDisplay public="1" get="accessor" set="null"><x path="Bool"/></IsBrowserDisplay>
		<HeaderName public="1" get="accessor" set="null"><c path="String"/></HeaderName>
		<EncodingName public="1" get="accessor" set="null"><c path="String"/></EncodingName>
		<CodePage public="1" get="accessor" set="null"><x path="Int"/></CodePage>
		<BodyName public="1" get="accessor" set="null"><c path="String"/></BodyName>
		<EncoderFallback public="1" get="accessor" set="accessor"><c path="cs.system.text.EncoderFallback"/></EncoderFallback>
		<DecoderFallback public="1" get="accessor" set="accessor"><c path="cs.system.text.DecoderFallback"/></DecoderFallback>
		<IsSingleByte public="1" get="accessor" set="null"><x path="Bool"/></IsSingleByte>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<get_IsReadOnly final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsReadOnly>
		<get_IsSingleByte set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSingleByte>
		<get_DecoderFallback final="1" set="method">
			<f a=""><c path="cs.system.text.DecoderFallback"/></f>
			<meta><m n=":overload"/></meta>
		</get_DecoderFallback>
		<set_DecoderFallback final="1" set="method">
			<f a="value">
				<c path="cs.system.text.DecoderFallback"/>
				<c path="cs.system.text.DecoderFallback"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_DecoderFallback>
		<get_EncoderFallback final="1" set="method">
			<f a=""><c path="cs.system.text.EncoderFallback"/></f>
			<meta><m n=":overload"/></meta>
		</get_EncoderFallback>
		<set_EncoderFallback final="1" set="method">
			<f a="value">
				<c path="cs.system.text.EncoderFallback"/>
				<c path="cs.system.text.EncoderFallback"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_EncoderFallback>
		<GetByteCount public="1" set="method">
			<f a="chars:index:count">
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetByteCount public="1" set="method">
					<f a="chars:count">
						<x path="cs.Pointer"><t path="cs.types.Char16"/></x>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetByteCount>
				<GetByteCount public="1" set="method">
					<f a="chars">
						<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetByteCount>
				<GetByteCount public="1" set="method">
					<f a="s">
						<c path="String"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetByteCount>
			</overloads>
		</GetByteCount>
		<GetBytes public="1" set="method">
			<f a="chars:charIndex:charCount:bytes:byteIndex">
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetBytes public="1" set="method">
					<f a="chars:charCount:bytes:byteCount">
						<x path="cs.Pointer"><t path="cs.types.Char16"/></x>
						<x path="Int"/>
						<x path="cs.Pointer"><t path="cs.types.UInt8"/></x>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetBytes>
				<GetBytes public="1" set="method">
					<f a="chars">
						<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetBytes>
				<GetBytes public="1" set="method">
					<f a="chars:index:count">
						<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetBytes>
				<GetBytes public="1" set="method">
					<f a="s">
						<c path="String"/>
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetBytes>
				<GetBytes public="1" set="method">
					<f a="s:charIndex:charCount:bytes:byteIndex">
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetBytes>
			</overloads>
		</GetBytes>
		<GetCharCount public="1" set="method">
			<f a="bytes:index:count">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetCharCount public="1" set="method">
					<f a="bytes:count">
						<x path="cs.Pointer"><t path="cs.types.UInt8"/></x>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetCharCount>
				<GetCharCount public="1" set="method">
					<f a="bytes">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetCharCount>
			</overloads>
		</GetCharCount>
		<GetChars public="1" set="method">
			<f a="bytes:byteIndex:byteCount:chars:charIndex">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetChars public="1" set="method">
					<f a="bytes:byteCount:chars:charCount">
						<x path="cs.Pointer"><t path="cs.types.UInt8"/></x>
						<x path="Int"/>
						<x path="cs.Pointer"><t path="cs.types.Char16"/></x>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetChars>
				<GetChars public="1" set="method">
					<f a="bytes">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetChars>
				<GetChars public="1" set="method">
					<f a="bytes:index:count">
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</GetChars>
			</overloads>
		</GetChars>
		<GetDecoder public="1" set="method">
			<f a=""><c path="cs.system.text.Decoder"/></f>
			<meta><m n=":overload"/></meta>
		</GetDecoder>
		<GetEncoder public="1" set="method">
			<f a=""><c path="cs.system.text.Encoder"/></f>
			<meta><m n=":overload"/></meta>
		</GetEncoder>
		<Clone public="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</Clone>
		<IsAlwaysNormalized final="1" public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><IsAlwaysNormalized public="1" set="method">
	<f a="form">
		<e path="cs.system.text.NormalizationForm"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</IsAlwaysNormalized></overloads>
		</IsAlwaysNormalized>
		<GetMaxByteCount public="1" set="method">
			<f a="charCount">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetMaxByteCount>
		<GetMaxCharCount public="1" set="method">
			<f a="byteCount">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetMaxCharCount>
		<GetPreamble public="1" set="method">
			<f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetPreamble>
		<GetString public="1" set="method">
			<f a="bytes:index:count">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetString public="1" set="method">
	<f a="bytes">
		<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetString></overloads>
		</GetString>
		<get_BodyName set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_BodyName>
		<get_CodePage set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_CodePage>
		<get_EncodingName set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_EncodingName>
		<get_HeaderName set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_HeaderName>
		<get_IsBrowserDisplay set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsBrowserDisplay>
		<get_IsBrowserSave set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsBrowserSave>
		<get_IsMailNewsDisplay set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsMailNewsDisplay>
		<get_IsMailNewsSave set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsMailNewsSave>
		<get_WebName set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_WebName>
		<get_WindowsCodePage set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_WindowsCodePage>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
			<overloads><new final="1" set="method">
	<f a="codePage">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<meta>
		<m n=":protected"/>
		<m n=":overload"/>
	</meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.Encoding"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.EncodingInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.text.EncodingInfo" extern="1">
		<Name public="1" get="accessor" set="null"><c path="String"/></Name>
		<DisplayName public="1" get="accessor" set="null"><c path="String"/></DisplayName>
		<CodePage public="1" get="accessor" set="null"><x path="Int"/></CodePage>
		<get_CodePage final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_CodePage>
		<get_DisplayName final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_DisplayName>
		<get_Name final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<GetEncoding final="1" public="1" set="method">
			<f a=""><c path="cs.system.text.Encoding"/></f>
			<meta><m n=":overload"/></meta>
		</GetEncoding>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.EncodingInfo"</e></m>
		</meta>
	</class>
	<enum path="cs.system.text.NormalizationForm" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.text.NormalizationForm">
		<FormC><meta><m n=":csNative"><e>1</e></m></meta></FormC>
		<FormD><meta><m n=":csNative"><e>2</e></m></meta></FormD>
		<FormKC><meta><m n=":csNative"><e>5</e></m></meta></FormKC>
		<FormKD><meta><m n=":csNative"><e>6</e></m></meta></FormKD>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Text.NormalizationForm"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.text.StringBuilder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.text.StringBuilder" extern="1">
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<Length public="1" get="accessor" set="accessor"><x path="Int"/></Length>
		<Capacity public="1" get="accessor" set="accessor"><x path="Int"/></Capacity>
		<MaxCapacity public="1" get="accessor" set="null"><x path="Int"/></MaxCapacity>
		<get_MaxCapacity final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_MaxCapacity>
		<get_Capacity final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Capacity>
		<set_Capacity final="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Capacity>
		<get_Length final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Length>
		<set_Length final="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Length>
		<get_Chars final="1" set="method">
			<f a="index">
				<x path="Int"/>
				<t path="cs.types.Char16"/>
			</f>
			<meta><m n=":overload"/></meta>
		</get_Chars>
		<set_Chars final="1" set="method">
			<f a="index:value">
				<x path="Int"/>
				<t path="cs.types.Char16"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Chars>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><ToString final="1" public="1" set="method">
	<f a="startIndex:length">
		<x path="Int"/>
		<x path="Int"/>
		<c path="String"/>
	</f>
	<meta><m n=":overload"/></meta>
</ToString></overloads>
		</ToString>
		<EnsureCapacity final="1" public="1" set="method">
			<f a="capacity">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EnsureCapacity>
		<Remove final="1" public="1" set="method">
			<f a="startIndex:length">
				<x path="Int"/>
				<x path="Int"/>
				<c path="cs.system.text.StringBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Remove>
		<Replace final="1" public="1" set="method">
			<f a="oldChar:newChar">
				<t path="cs.types.Char16"/>
				<t path="cs.types.Char16"/>
				<c path="cs.system.text.StringBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Replace final="1" public="1" set="method">
					<f a="oldValue:newValue:startIndex:count">
						<c path="String"/>
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Replace>
				<Replace final="1" public="1" set="method">
					<f a="oldValue:newValue">
						<c path="String"/>
						<c path="String"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Replace>
				<Replace final="1" public="1" set="method">
					<f a="oldChar:newChar:startIndex:count">
						<t path="cs.types.Char16"/>
						<t path="cs.types.Char16"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Replace>
			</overloads>
		</Replace>
		<Append final="1" public="1" set="method">
			<f a="value">
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<c path="cs.system.text.StringBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Append final="1" public="1" set="method">
					<f a="value:startIndex:count">
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Append>
				<Append final="1" public="1" set="method">
					<f a="value:startIndex:charCount">
						<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Append>
				<Append final="1" public="1" set="method">
					<f a="value:repeatCount">
						<t path="cs.types.Char16"/>
						<x path="Int"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Append>
				<Append final="1" public="1" set="method">
					<f a="value">
						<t path="cs.types.Char16"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Append>
				<Append final="1" public="1" set="method">
					<f a="value">
						<t path="cs.types.UInt64"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Append>
				<Append final="1" public="1" set="method">
					<f a="value">
						<x path="UInt"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Append>
				<Append final="1" public="1" set="method">
					<f a="value">
						<t path="cs.types.UInt16"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Append>
				<Append final="1" public="1" set="method">
					<f a="value">
						<x path="Single"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Append>
				<Append final="1" public="1" set="method">
					<f a="value">
						<t path="cs.types.Int8"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Append>
				<Append final="1" public="1" set="method">
					<f a="value">
						<d/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Append>
				<Append final="1" public="1" set="method">
					<f a="value">
						<x path="haxe.Int64"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Append>
				<Append final="1" public="1" set="method">
					<f a="value">
						<x path="Int"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Append>
				<Append final="1" public="1" set="method">
					<f a="value">
						<t path="cs.types.Int16"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Append>
				<Append final="1" public="1" set="method">
					<f a="value">
						<x path="Float"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Append>
				<Append final="1" public="1" set="method">
					<f a="value">
						<c path="cs.system.Decimal"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Append>
				<Append final="1" public="1" set="method">
					<f a="value">
						<t path="cs.types.UInt8"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Append>
				<Append final="1" public="1" set="method">
					<f a="value">
						<x path="Bool"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Append>
				<Append final="1" public="1" set="method">
					<f a="value">
						<c path="String"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Append>
			</overloads>
		</Append>
		<AppendLine final="1" public="1" set="method">
			<f a=""><c path="cs.system.text.StringBuilder"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><AppendLine final="1" public="1" set="method">
	<f a="value">
		<c path="String"/>
		<c path="cs.system.text.StringBuilder"/>
	</f>
	<meta><m n=":overload"/></meta>
</AppendLine></overloads>
		</AppendLine>
		<AppendFormat final="1" public="1" set="method">
			<f a="format:args">
				<c path="String"/>
				<c path="cs.NativeArray"><d/></c>
				<c path="cs.system.text.StringBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<AppendFormat final="1" public="1" set="method">
					<f a="format:arg0:arg1:arg2">
						<c path="String"/>
						<d/>
						<d/>
						<d/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</AppendFormat>
				<AppendFormat final="1" public="1" set="method">
					<f a="format:arg0:arg1">
						<c path="String"/>
						<d/>
						<d/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</AppendFormat>
				<AppendFormat final="1" public="1" set="method">
					<f a="format:arg0">
						<c path="String"/>
						<d/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</AppendFormat>
				<AppendFormat final="1" public="1" set="method">
					<f a="provider:format:args">
						<c path="cs.system.IFormatProvider"/>
						<c path="String"/>
						<c path="cs.NativeArray"><d/></c>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</AppendFormat>
			</overloads>
		</AppendFormat>
		<Insert final="1" public="1" set="method">
			<f a="index:value">
				<x path="Int"/>
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<c path="cs.system.text.StringBuilder"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Insert final="1" public="1" set="method">
					<f a="index:value:startIndex:charCount">
						<x path="Int"/>
						<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
						<x path="Int"/>
						<x path="Int"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Insert>
				<Insert final="1" public="1" set="method">
					<f a="index:value:count">
						<x path="Int"/>
						<c path="String"/>
						<x path="Int"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Insert>
				<Insert final="1" public="1" set="method">
					<f a="index:value">
						<x path="Int"/>
						<t path="cs.types.UInt64"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Insert>
				<Insert final="1" public="1" set="method">
					<f a="index:value">
						<x path="Int"/>
						<x path="UInt"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Insert>
				<Insert final="1" public="1" set="method">
					<f a="index:value">
						<x path="Int"/>
						<t path="cs.types.UInt16"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Insert>
				<Insert final="1" public="1" set="method">
					<f a="index:value">
						<x path="Int"/>
						<x path="Single"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Insert>
				<Insert final="1" public="1" set="method">
					<f a="index:value">
						<x path="Int"/>
						<t path="cs.types.Int8"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Insert>
				<Insert final="1" public="1" set="method">
					<f a="index:value">
						<x path="Int"/>
						<d/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Insert>
				<Insert final="1" public="1" set="method">
					<f a="index:value">
						<x path="Int"/>
						<x path="haxe.Int64"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Insert>
				<Insert final="1" public="1" set="method">
					<f a="index:value">
						<x path="Int"/>
						<x path="Int"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Insert>
				<Insert final="1" public="1" set="method">
					<f a="index:value">
						<x path="Int"/>
						<t path="cs.types.Int16"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Insert>
				<Insert final="1" public="1" set="method">
					<f a="index:value">
						<x path="Int"/>
						<x path="Float"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Insert>
				<Insert final="1" public="1" set="method">
					<f a="index:value">
						<x path="Int"/>
						<c path="cs.system.Decimal"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Insert>
				<Insert final="1" public="1" set="method">
					<f a="index:value">
						<x path="Int"/>
						<t path="cs.types.Char16"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Insert>
				<Insert final="1" public="1" set="method">
					<f a="index:value">
						<x path="Int"/>
						<t path="cs.types.UInt8"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Insert>
				<Insert final="1" public="1" set="method">
					<f a="index:value">
						<x path="Int"/>
						<x path="Bool"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Insert>
				<Insert final="1" public="1" set="method">
					<f a="index:value">
						<x path="Int"/>
						<c path="String"/>
						<c path="cs.system.text.StringBuilder"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Insert>
			</overloads>
		</Insert>
		<CopyTo final="1" public="1" set="method">
			<f a="sourceIndex:destination:destinationIndex:count">
				<x path="Int"/>
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CopyTo>
		<new final="1" public="1" set="method">
			<f a="value:startIndex:length:capacity">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="value:capacity">
						<c path="String"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="value">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="capacity:maxCapacity">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="capacity">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a=""><x path="Void"/></f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.StringBuilder"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.UTF8Encoding_UTF8Encoder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.text.UTF8Encoding" module="cs.system.text.UTF8Encoding" extern="1">
		<extends path="cs.system.text.Encoder"/>
		<GetByteCount public="1" set="method" override="1">
			<f a="chars:index:count:flush">
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetByteCount public="1" set="method">
	<f a="chars:count:flush">
		<x path="cs.Pointer"><t path="cs.types.Char16"/></x>
		<x path="Int"/>
		<x path="Bool"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetByteCount></overloads>
		</GetByteCount>
		<GetBytes public="1" set="method" override="1">
			<f a="chars:charIndex:charCount:bytes:byteIndex:flush">
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetBytes public="1" set="method">
	<f a="chars:charCount:bytes:byteCount:flush">
		<x path="cs.Pointer"><t path="cs.types.Char16"/></x>
		<x path="Int"/>
		<x path="cs.Pointer"><t path="cs.types.UInt8"/></x>
		<x path="Int"/>
		<x path="Bool"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetBytes></overloads>
		</GetBytes>
		<new final="1" public="1" set="method">
			<f a="fallback:emitIdentifier">
				<c path="cs.system.text.EncoderFallback"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.UTF8Encoding.UTF8Encoder"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.UTF8Encoding_UTF8Decoder" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.text.UTF8Encoding" module="cs.system.text.UTF8Encoding" extern="1">
		<extends path="cs.system.text.Decoder"/>
		<GetCharCount public="1" set="method" override="1">
			<f a="bytes:index:count">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetCharCount>
		<GetChars public="1" set="method" override="1">
			<f a="bytes:byteIndex:byteCount:chars:charIndex">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetChars>
		<new final="1" public="1" set="method">
			<f a="fallback">
				<c path="cs.system.text.DecoderFallback"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.UTF8Encoding.UTF8Decoder"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.UTF8Encoding" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.text.UTF8Encoding" extern="1">
		<extends path="cs.system.text.Encoding"/>
		<GetByteCount public="1" set="method" override="1">
			<f a="chars:index:count">
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetByteCount public="1" set="method">
					<f a="chars">
						<c path="String"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetByteCount>
				<GetByteCount public="1" set="method">
					<f a="chars:count">
						<x path="cs.Pointer"><t path="cs.types.Char16"/></x>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetByteCount>
			</overloads>
		</GetByteCount>
		<GetBytes public="1" set="method" override="1">
			<f a="chars:charIndex:charCount:bytes:byteIndex">
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<GetBytes public="1" set="method">
					<f a="chars:charCount:bytes:byteCount">
						<x path="cs.Pointer"><t path="cs.types.Char16"/></x>
						<x path="Int"/>
						<x path="cs.Pointer"><t path="cs.types.UInt8"/></x>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetBytes>
				<GetBytes public="1" set="method">
					<f a="s:charIndex:charCount:bytes:byteIndex">
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
						<x path="Int"/>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</GetBytes>
			</overloads>
		</GetBytes>
		<GetCharCount public="1" set="method" override="1">
			<f a="bytes:index:count">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetCharCount public="1" set="method">
	<f a="bytes:count">
		<x path="cs.Pointer"><t path="cs.types.UInt8"/></x>
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetCharCount></overloads>
		</GetCharCount>
		<GetChars public="1" set="method" override="1">
			<f a="bytes:byteIndex:byteCount:chars:charIndex">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="cs.NativeArray"><t path="cs.types.Char16"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><GetChars public="1" set="method">
	<f a="bytes:byteCount:chars:charCount">
		<x path="cs.Pointer"><t path="cs.types.UInt8"/></x>
		<x path="Int"/>
		<x path="cs.Pointer"><t path="cs.types.Char16"/></x>
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<meta><m n=":overload"/></meta>
</GetChars></overloads>
		</GetChars>
		<GetMaxByteCount public="1" set="method" override="1">
			<f a="charCount">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetMaxByteCount>
		<GetMaxCharCount public="1" set="method" override="1">
			<f a="byteCount">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetMaxCharCount>
		<GetDecoder public="1" set="method" override="1">
			<f a=""><c path="cs.system.text.Decoder"/></f>
			<meta><m n=":overload"/></meta>
		</GetDecoder>
		<GetEncoder public="1" set="method" override="1">
			<f a=""><c path="cs.system.text.Encoder"/></f>
			<meta><m n=":overload"/></meta>
		</GetEncoder>
		<GetPreamble public="1" set="method" override="1">
			<f a=""><c path="cs.NativeArray"><t path="cs.types.UInt8"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetPreamble>
		<GetString public="1" set="method" override="1">
			<f a="bytes:index:count">
				<c path="cs.NativeArray"><t path="cs.types.UInt8"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetString>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="encoderShouldEmitUTF8Identifier:throwOnInvalidBytes">
						<x path="Bool"/>
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="encoderShouldEmitUTF8Identifier">
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.UTF8Encoding"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.regularexpressions.Capture" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.text.regularexpressions.Capture" extern="1">
		<Value public="1" get="accessor" set="null"><c path="String"/></Value>
		<Length public="1" get="accessor" set="null"><x path="Int"/></Length>
		<Index public="1" get="accessor" set="null"><x path="Int"/></Index>
		<get_Index final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Index>
		<get_Length final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Length>
		<get_Value final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Value>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.RegularExpressions.Capture"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.regularexpressions.CaptureCollection" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.text.regularexpressions.CaptureCollection" extern="1">
		<implements path="cs.system.collections.ICollection"/>
		<implements path="cs.system.collections.IEnumerable"/>
		<SyncRoot public="1" get="accessor" set="null"><d/></SyncRoot>
		<IsSynchronized public="1" get="accessor" set="null"><x path="Bool"/></IsSynchronized>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<get_Count final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Count>
		<get_IsReadOnly final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsReadOnly>
		<get_IsSynchronized final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSynchronized>
		<get_Item final="1" set="method">
			<f a="i">
				<x path="Int"/>
				<c path="cs.system.text.regularexpressions.Capture"/>
			</f>
			<meta><m n=":overload"/></meta>
		</get_Item>
		<get_SyncRoot final="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_SyncRoot>
		<CopyTo final="1" public="1" set="method">
			<f a="array:index">
				<c path="cs.system.Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CopyTo>
		<GetEnumerator final="1" public="1" set="method">
			<f a=""><c path="cs.system.collections.IEnumerator"/></f>
			<meta><m n=":overload"/></meta>
		</GetEnumerator>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.RegularExpressions.CaptureCollection"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.regularexpressions.Group" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.text.regularexpressions.Group" extern="1">
		<extends path="cs.system.text.regularexpressions.Capture"/>
		<Synchronized final="1" public="1" set="method" static="1">
			<f a="inner">
				<c path="cs.system.text.regularexpressions.Group"/>
				<c path="cs.system.text.regularexpressions.Group"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Synchronized>
		<Success public="1" get="accessor" set="null"><x path="Bool"/></Success>
		<Captures public="1" get="accessor" set="null"><c path="cs.system.text.regularexpressions.CaptureCollection"/></Captures>
		<get_Captures final="1" set="method">
			<f a=""><c path="cs.system.text.regularexpressions.CaptureCollection"/></f>
			<meta><m n=":overload"/></meta>
		</get_Captures>
		<get_Success final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_Success>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.RegularExpressions.Group"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.regularexpressions.GroupCollection" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.text.regularexpressions.GroupCollection" extern="1">
		<implements path="cs.system.collections.ICollection"/>
		<implements path="cs.system.collections.IEnumerable"/>
		<SyncRoot public="1" get="accessor" set="null"><d/></SyncRoot>
		<IsSynchronized public="1" get="accessor" set="null"><x path="Bool"/></IsSynchronized>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<get_Count final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Count>
		<get_IsReadOnly final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsReadOnly>
		<get_IsSynchronized final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSynchronized>
		<get_Item final="1" set="method">
			<f a="i">
				<x path="Int"/>
				<c path="cs.system.text.regularexpressions.Group"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><get_Item final="1" set="method">
	<f a="groupName">
		<c path="String"/>
		<c path="cs.system.text.regularexpressions.Group"/>
	</f>
	<meta><m n=":overload"/></meta>
</get_Item></overloads>
		</get_Item>
		<get_SyncRoot final="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_SyncRoot>
		<CopyTo final="1" public="1" set="method">
			<f a="array:index">
				<c path="cs.system.Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CopyTo>
		<GetEnumerator final="1" public="1" set="method">
			<f a=""><c path="cs.system.collections.IEnumerator"/></f>
			<meta><m n=":overload"/></meta>
		</GetEnumerator>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.RegularExpressions.GroupCollection"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.regularexpressions.Match" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.text.regularexpressions.Match" extern="1">
		<extends path="cs.system.text.regularexpressions.Group"/>
		<Empty public="1" get="accessor" set="null" static="1"><c path="cs.system.text.regularexpressions.Match"/></Empty>
		<get_Empty final="1" set="method" static="1">
			<f a=""><c path="cs.system.text.regularexpressions.Match"/></f>
			<meta><m n=":overload"/></meta>
		</get_Empty>
		<Synchronized final="1" public="1" set="method" static="1">
			<f a="inner">
				<c path="cs.system.text.regularexpressions.Match"/>
				<c path="cs.system.text.regularexpressions.Match"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Synchronized>
		<Groups public="1" get="accessor" set="null"><c path="cs.system.text.regularexpressions.GroupCollection"/></Groups>
		<get_Groups set="method">
			<f a=""><c path="cs.system.text.regularexpressions.GroupCollection"/></f>
			<meta><m n=":overload"/></meta>
		</get_Groups>
		<NextMatch final="1" public="1" set="method">
			<f a=""><c path="cs.system.text.regularexpressions.Match"/></f>
			<meta><m n=":overload"/></meta>
		</NextMatch>
		<Result public="1" set="method">
			<f a="replacement">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Result>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.RegularExpressions.Match"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.regularexpressions.MatchCollection_Enumerator" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.text.regularexpressions.MatchCollection" module="cs.system.text.regularexpressions.MatchCollection" extern="1">
		<implements path="cs.system.collections.IEnumerator"/>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.RegularExpressions.MatchCollection.Enumerator"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.regularexpressions.MatchCollection" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.text.regularexpressions.MatchCollection" extern="1">
		<implements path="cs.system.collections.ICollection"/>
		<implements path="cs.system.collections.IEnumerable"/>
		<SyncRoot public="1" get="accessor" set="null"><d/></SyncRoot>
		<IsSynchronized public="1" get="accessor" set="null"><x path="Bool"/></IsSynchronized>
		<IsReadOnly public="1" get="accessor" set="null"><x path="Bool"/></IsReadOnly>
		<Count public="1" get="accessor" set="null"><x path="Int"/></Count>
		<get_Count final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_Count>
		<get_IsReadOnly final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsReadOnly>
		<get_IsSynchronized final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsSynchronized>
		<get_Item set="method">
			<f a="i">
				<x path="Int"/>
				<c path="cs.system.text.regularexpressions.Match"/>
			</f>
			<meta><m n=":overload"/></meta>
		</get_Item>
		<get_SyncRoot final="1" set="method">
			<f a=""><d/></f>
			<meta><m n=":overload"/></meta>
		</get_SyncRoot>
		<CopyTo final="1" public="1" set="method">
			<f a="array:index">
				<c path="cs.system.Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</CopyTo>
		<GetEnumerator final="1" public="1" set="method">
			<f a=""><c path="cs.system.collections.IEnumerator"/></f>
			<meta><m n=":overload"/></meta>
		</GetEnumerator>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.RegularExpressions.MatchCollection"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.regularexpressions.Delegate_MatchEvaluator" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.text.regularexpressions.MatchEvaluator" module="cs.system.text.regularexpressions.MatchEvaluator" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
	<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
	<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
	<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
	<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="match">
				<c path="cs.system.text.regularexpressions.Match"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="match:callback:object">
				<c path="cs.system.text.regularexpressions.Match"/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.RegularExpressions.MatchEvaluator"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.text.regularexpressions.MatchEvaluator" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.text.regularexpressions.MatchEvaluator">
		<from><icast field="FromHaxeFunction"><f a="">
	<c path="cs.system.text.regularexpressions.Match"/>
	<c path="String"/>
</f></icast></from>
		<this><c path="cs.system.text.regularexpressions.Delegate_MatchEvaluator"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.text.regularexpressions._MatchEvaluator.MatchEvaluator_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.text.regularexpressions.MatchEvaluator" private="1" module="cs.system.text.regularexpressions.MatchEvaluator">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="">
				<c path="cs.system.text.regularexpressions.Match"/>
				<c path="String"/>
			</f>
			<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="">
				<c path="cs.system.text.regularexpressions.Match"/>
				<c path="String"/>
			</f>
			<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.text.regularexpressions.Delegate_MatchEvaluator"/>
			<c path="cs.system.text.regularexpressions.Delegate_MatchEvaluator"/>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
			<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
			<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
			<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
			<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system.text.regularexpressions._MatchEvaluator.MatchEvaluator_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.text.regularexpressions.MatchEvaluator" private="1" module="cs.system.text.regularexpressions.MatchEvaluator">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="">
					<c path="cs.system.text.regularexpressions.Match"/>
					<c path="String"/>
				</f>
				<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="">
					<c path="cs.system.text.regularexpressions.Match"/>
					<c path="String"/>
				</f>
				<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.text.regularexpressions.Delegate_MatchEvaluator"/>
				<c path="cs.system.text.regularexpressions.Delegate_MatchEvaluator"/>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
				<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
				<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
				<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
				<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="cs.system.text.regularexpressions.Regex_Adapter" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.text.regularexpressions.Regex" module="cs.system.text.regularexpressions.Regex" extern="1">
		<Evaluate final="1" public="1" set="method">
			<f a="m:sb">
				<c path="cs.system.text.regularexpressions.Match"/>
				<c path="cs.system.text.StringBuilder"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Evaluate>
		<new final="1" public="1" set="method">
			<f a="ev">
				<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.RegularExpressions.Regex.Adapter"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.regularexpressions.Regex" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.text.regularexpressions.Regex" extern="1">
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<CacheSize public="1" get="accessor" set="accessor" static="1"><x path="Int"/></CacheSize>
		<CompileToAssembly final="1" public="1" set="method" static="1">
			<f a="regexes:aname">
				<c path="cs.NativeArray"><c path="cs.system.text.regularexpressions.RegexCompilationInfo"/></c>
				<c path="cs.system.reflection.AssemblyName"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<CompileToAssembly final="1" public="1" set="method">
					<f a="regexes:aname:attribs:resourceFile">
						<c path="cs.NativeArray"><c path="cs.system.text.regularexpressions.RegexCompilationInfo"/></c>
						<c path="cs.system.reflection.AssemblyName"/>
						<c path="cs.NativeArray"><c path="cs.system.reflection.emit.CustomAttributeBuilder"/></c>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CompileToAssembly>
				<CompileToAssembly final="1" public="1" set="method">
					<f a="regexes:aname:attribs">
						<c path="cs.NativeArray"><c path="cs.system.text.regularexpressions.RegexCompilationInfo"/></c>
						<c path="cs.system.reflection.AssemblyName"/>
						<c path="cs.NativeArray"><c path="cs.system.reflection.emit.CustomAttributeBuilder"/></c>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</CompileToAssembly>
			</overloads>
		</CompileToAssembly>
		<Escape final="1" public="1" set="method" static="1">
			<f a="str">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Escape>
		<Unescape final="1" public="1" set="method" static="1">
			<f a="str">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Unescape>
		<IsMatch final="1" public="1" set="method" static="1">
			<f a="input:pattern">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><IsMatch final="1" public="1" set="method">
	<f a="input:pattern:options">
		<c path="String"/>
		<c path="String"/>
		<e path="cs.system.text.regularexpressions.RegexOptions"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</IsMatch></overloads>
		</IsMatch>
		<_IsMatch final="1" public="1" set="method" static="1">
			<f a="input:pattern">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":native"><e>"IsMatch"</e></m>
				<m n=":overload"/>
			</meta>
			<overloads><IsMatch final="1" public="1" set="method">
	<f a="input:pattern:options">
		<c path="String"/>
		<c path="String"/>
		<e path="cs.system.text.regularexpressions.RegexOptions"/>
		<x path="Bool"/>
	</f>
	<meta>
		<m n=":native"><e>"IsMatch"</e></m>
		<m n=":overload"/>
	</meta>
</IsMatch></overloads>
		</_IsMatch>
		<Match final="1" public="1" set="method" static="1">
			<f a="input:pattern">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.system.text.regularexpressions.Match"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><Match final="1" public="1" set="method">
	<f a="input:pattern:options">
		<c path="String"/>
		<c path="String"/>
		<e path="cs.system.text.regularexpressions.RegexOptions"/>
		<c path="cs.system.text.regularexpressions.Match"/>
	</f>
	<meta><m n=":overload"/></meta>
</Match></overloads>
		</Match>
		<_Match final="1" public="1" set="method" static="1">
			<f a="input:pattern">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.system.text.regularexpressions.Match"/>
			</f>
			<meta>
				<m n=":native"><e>"Match"</e></m>
				<m n=":overload"/>
			</meta>
			<overloads><Match final="1" public="1" set="method">
	<f a="input:pattern:options">
		<c path="String"/>
		<c path="String"/>
		<e path="cs.system.text.regularexpressions.RegexOptions"/>
		<c path="cs.system.text.regularexpressions.Match"/>
	</f>
	<meta>
		<m n=":native"><e>"Match"</e></m>
		<m n=":overload"/>
	</meta>
</Match></overloads>
		</_Match>
		<Matches final="1" public="1" set="method" static="1">
			<f a="input:pattern">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.system.text.regularexpressions.MatchCollection"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><Matches final="1" public="1" set="method">
	<f a="input:pattern:options">
		<c path="String"/>
		<c path="String"/>
		<e path="cs.system.text.regularexpressions.RegexOptions"/>
		<c path="cs.system.text.regularexpressions.MatchCollection"/>
	</f>
	<meta><m n=":overload"/></meta>
</Matches></overloads>
		</Matches>
		<_Matches final="1" public="1" set="method" static="1">
			<f a="input:pattern">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.system.text.regularexpressions.MatchCollection"/>
			</f>
			<meta>
				<m n=":native"><e>"Matches"</e></m>
				<m n=":overload"/>
			</meta>
			<overloads><Matches final="1" public="1" set="method">
	<f a="input:pattern:options">
		<c path="String"/>
		<c path="String"/>
		<e path="cs.system.text.regularexpressions.RegexOptions"/>
		<c path="cs.system.text.regularexpressions.MatchCollection"/>
	</f>
	<meta>
		<m n=":native"><e>"Matches"</e></m>
		<m n=":overload"/>
	</meta>
</Matches></overloads>
		</_Matches>
		<Replace final="1" public="1" set="method" static="1">
			<f a="input:pattern:evaluator">
				<c path="String"/>
				<c path="String"/>
				<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Replace final="1" public="1" set="method">
					<f a="input:pattern:replacement:options">
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<e path="cs.system.text.regularexpressions.RegexOptions"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Replace>
				<Replace final="1" public="1" set="method">
					<f a="input:pattern:replacement">
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Replace>
				<Replace final="1" public="1" set="method">
					<f a="input:pattern:evaluator:options">
						<c path="String"/>
						<c path="String"/>
						<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
						<e path="cs.system.text.regularexpressions.RegexOptions"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Replace>
			</overloads>
		</Replace>
		<_Replace final="1" public="1" set="method" static="1">
			<f a="input:pattern:evaluator">
				<c path="String"/>
				<c path="String"/>
				<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":native"><e>"Replace"</e></m>
				<m n=":overload"/>
			</meta>
			<overloads>
				<Replace final="1" public="1" set="method">
					<f a="input:pattern:replacement:options">
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<e path="cs.system.text.regularexpressions.RegexOptions"/>
						<c path="String"/>
					</f>
					<meta>
						<m n=":native"><e>"Replace"</e></m>
						<m n=":overload"/>
					</meta>
				</Replace>
				<Replace final="1" public="1" set="method">
					<f a="input:pattern:replacement">
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
					</f>
					<meta>
						<m n=":native"><e>"Replace"</e></m>
						<m n=":overload"/>
					</meta>
				</Replace>
				<Replace final="1" public="1" set="method">
					<f a="input:pattern:evaluator:options">
						<c path="String"/>
						<c path="String"/>
						<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
						<e path="cs.system.text.regularexpressions.RegexOptions"/>
						<c path="String"/>
					</f>
					<meta>
						<m n=":native"><e>"Replace"</e></m>
						<m n=":overload"/>
					</meta>
				</Replace>
			</overloads>
		</_Replace>
		<Split final="1" public="1" set="method" static="1">
			<f a="input:pattern">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.NativeArray"><c path="String"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><Split final="1" public="1" set="method">
	<f a="input:pattern:options">
		<c path="String"/>
		<c path="String"/>
		<e path="cs.system.text.regularexpressions.RegexOptions"/>
		<c path="cs.NativeArray"><c path="String"/></c>
	</f>
	<meta><m n=":overload"/></meta>
</Split></overloads>
		</Split>
		<_Split final="1" public="1" set="method" static="1">
			<f a="input:pattern">
				<c path="String"/>
				<c path="String"/>
				<c path="cs.NativeArray"><c path="String"/></c>
			</f>
			<meta>
				<m n=":native"><e>"Split"</e></m>
				<m n=":overload"/>
			</meta>
			<overloads><Split final="1" public="1" set="method">
	<f a="input:pattern:options">
		<c path="String"/>
		<c path="String"/>
		<e path="cs.system.text.regularexpressions.RegexOptions"/>
		<c path="cs.NativeArray"><c path="String"/></c>
	</f>
	<meta>
		<m n=":native"><e>"Split"</e></m>
		<m n=":overload"/>
	</meta>
</Split></overloads>
		</_Split>
		<get_CacheSize final="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_CacheSize>
		<set_CacheSize final="1" set="method" static="1">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_CacheSize>
		<RightToLeft public="1" get="accessor" set="null"><x path="Bool"/></RightToLeft>
		<Options public="1" get="accessor" set="null"><e path="cs.system.text.regularexpressions.RegexOptions"/></Options>
		<capslist><c path="cs.NativeArray"><c path="String"/></c></capslist>
		<capsize><x path="Int"/></capsize>
		<factory><c path="cs.system.text.regularexpressions.RegexRunnerFactory"/></factory>
		<caps><c path="cs.system.collections.Hashtable"/></caps>
		<capnames><c path="cs.system.collections.Hashtable"/></capnames>
		<roptions><e path="cs.system.text.regularexpressions.RegexOptions"/></roptions>
		<pattern><c path="String"/></pattern>
		<get_Options final="1" set="method">
			<f a=""><e path="cs.system.text.regularexpressions.RegexOptions"/></f>
			<meta><m n=":overload"/></meta>
		</get_Options>
		<get_RightToLeft final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_RightToLeft>
		<GetGroupNames final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><c path="String"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetGroupNames>
		<GetGroupNumbers final="1" public="1" set="method">
			<f a=""><c path="cs.NativeArray"><x path="Int"/></c></f>
			<meta><m n=":overload"/></meta>
		</GetGroupNumbers>
		<GroupNameFromNumber final="1" public="1" set="method">
			<f a="i">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GroupNameFromNumber>
		<GroupNumberFromName final="1" public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GroupNumberFromName>
		<IsMatch final="1" public="1" set="method">
			<f a="input">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><IsMatch final="1" public="1" set="method">
	<f a="input:startat">
		<c path="String"/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":overload"/></meta>
</IsMatch></overloads>
		</IsMatch>
		<Match final="1" public="1" set="method">
			<f a="input">
				<c path="String"/>
				<c path="cs.system.text.regularexpressions.Match"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Match final="1" public="1" set="method">
					<f a="input:startat:length">
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="cs.system.text.regularexpressions.Match"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Match>
				<Match final="1" public="1" set="method">
					<f a="input:startat">
						<c path="String"/>
						<x path="Int"/>
						<c path="cs.system.text.regularexpressions.Match"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Match>
			</overloads>
		</Match>
		<Matches final="1" public="1" set="method">
			<f a="input">
				<c path="String"/>
				<c path="cs.system.text.regularexpressions.MatchCollection"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><Matches final="1" public="1" set="method">
	<f a="input:startat">
		<c path="String"/>
		<x path="Int"/>
		<c path="cs.system.text.regularexpressions.MatchCollection"/>
	</f>
	<meta><m n=":overload"/></meta>
</Matches></overloads>
		</Matches>
		<Replace final="1" public="1" set="method">
			<f a="input:evaluator">
				<c path="String"/>
				<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Replace final="1" public="1" set="method">
					<f a="input:replacement:count:startat">
						<c path="String"/>
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Replace>
				<Replace final="1" public="1" set="method">
					<f a="input:replacement:count">
						<c path="String"/>
						<c path="String"/>
						<x path="Int"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Replace>
				<Replace final="1" public="1" set="method">
					<f a="input:replacement">
						<c path="String"/>
						<c path="String"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Replace>
				<Replace final="1" public="1" set="method">
					<f a="input:evaluator:count:startat">
						<c path="String"/>
						<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Replace>
				<Replace final="1" public="1" set="method">
					<f a="input:evaluator:count">
						<c path="String"/>
						<x path="cs.system.text.regularexpressions.MatchEvaluator"/>
						<x path="Int"/>
						<c path="String"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Replace>
			</overloads>
		</Replace>
		<Split final="1" public="1" set="method">
			<f a="input">
				<c path="String"/>
				<c path="cs.NativeArray"><c path="String"/></c>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Split final="1" public="1" set="method">
					<f a="input:count:startat">
						<c path="String"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="cs.NativeArray"><c path="String"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</Split>
				<Split final="1" public="1" set="method">
					<f a="input:count">
						<c path="String"/>
						<x path="Int"/>
						<c path="cs.NativeArray"><c path="String"/></c>
					</f>
					<meta><m n=":overload"/></meta>
				</Split>
			</overloads>
		</Split>
		<InitializeReferences final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</InitializeReferences>
		<UseOptionC final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</UseOptionC>
		<UseOptionR final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</UseOptionR>
		<ToString public="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</ToString>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
			<overloads>
				<new final="1" set="method">
					<f a="info:context">
						<c path="cs.system.runtime.serialization.SerializationInfo"/>
						<c path="cs.system.runtime.serialization.StreamingContext"/>
						<x path="Void"/>
					</f>
					<meta>
						<m n=":protected"/>
						<m n=":overload"/>
					</meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="pattern:options">
						<c path="String"/>
						<e path="cs.system.text.regularexpressions.RegexOptions"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="pattern">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.RegularExpressions.Regex"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.regularexpressions.RegexCompilationInfo" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.text.regularexpressions.RegexCompilationInfo" extern="1">
		<Pattern public="1" get="accessor" set="accessor"><c path="String"/></Pattern>
		<Options public="1" get="accessor" set="accessor"><e path="cs.system.text.regularexpressions.RegexOptions"/></Options>
		<Namespace public="1" get="accessor" set="accessor"><c path="String"/></Namespace>
		<Name public="1" get="accessor" set="accessor"><c path="String"/></Name>
		<IsPublic public="1" get="accessor" set="accessor"><x path="Bool"/></IsPublic>
		<get_IsPublic final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsPublic>
		<set_IsPublic final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_IsPublic>
		<get_Name final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<set_Name final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Name>
		<get_Namespace final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Namespace>
		<set_Namespace final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Namespace>
		<get_Options final="1" set="method">
			<f a=""><e path="cs.system.text.regularexpressions.RegexOptions"/></f>
			<meta><m n=":overload"/></meta>
		</get_Options>
		<set_Options final="1" set="method">
			<f a="value">
				<e path="cs.system.text.regularexpressions.RegexOptions"/>
				<e path="cs.system.text.regularexpressions.RegexOptions"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Options>
		<get_Pattern final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Pattern>
		<set_Pattern final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Pattern>
		<new final="1" public="1" set="method">
			<f a="pattern:options:name:fullnamespace:ispublic">
				<c path="String"/>
				<e path="cs.system.text.regularexpressions.RegexOptions"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.RegularExpressions.RegexCompilationInfo"</e></m>
		</meta>
	</class>
	<enum path="cs.system.text.regularexpressions.RegexOptions" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.text.regularexpressions.RegexOptions">
		<None><meta><m n=":csNative"><e>0</e></m></meta></None>
		<IgnoreCase><meta><m n=":csNative"><e>1</e></m></meta></IgnoreCase>
		<Multiline><meta><m n=":csNative"><e>2</e></m></meta></Multiline>
		<ExplicitCapture><meta><m n=":csNative"><e>4</e></m></meta></ExplicitCapture>
		<Compiled><meta><m n=":csNative"><e>8</e></m></meta></Compiled>
		<Singleline><meta><m n=":csNative"><e>16</e></m></meta></Singleline>
		<IgnorePatternWhitespace><meta><m n=":csNative"><e>32</e></m></meta></IgnorePatternWhitespace>
		<RightToLeft><meta><m n=":csNative"><e>64</e></m></meta></RightToLeft>
		<ECMAScript><meta><m n=":csNative"><e>256</e></m></meta></ECMAScript>
		<CultureInvariant><meta><m n=":csNative"><e>512</e></m></meta></CultureInvariant>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Text.RegularExpressions.RegexOptions"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.text.regularexpressions.RegexRunner" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.text.regularexpressions.RegexRunner" extern="1">
		<CharInClass final="1" set="method" static="1">
			<f a="ch:charClass">
				<t path="cs.types.Char16"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</CharInClass>
		<CharInSet final="1" set="method" static="1">
			<f a="ch:set:category">
				<t path="cs.types.Char16"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</CharInSet>
		<runtrackpos><x path="Int"/></runtrackpos>
		<runtrackcount><x path="Int"/></runtrackcount>
		<runtrack><c path="cs.NativeArray"><x path="Int"/></c></runtrack>
		<runtextstart><x path="Int"/></runtextstart>
		<runtextpos><x path="Int"/></runtextpos>
		<runtextend><x path="Int"/></runtextend>
		<runtextbeg><x path="Int"/></runtextbeg>
		<runtext><c path="String"/></runtext>
		<runstackpos><x path="Int"/></runstackpos>
		<runstack><c path="cs.NativeArray"><x path="Int"/></c></runstack>
		<runregex><c path="cs.system.text.regularexpressions.Regex"/></runregex>
		<runmatch><c path="cs.system.text.regularexpressions.Match"/></runmatch>
		<runcrawlpos><x path="Int"/></runcrawlpos>
		<runcrawl><c path="cs.NativeArray"><x path="Int"/></c></runcrawl>
		<FindFirstChar set="method">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</FindFirstChar>
		<Go set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</Go>
		<InitTrackCount set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</InitTrackCount>
		<Capture final="1" set="method">
			<f a="capnum:start:end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</Capture>
		<Crawl final="1" set="method">
			<f a="i">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</Crawl>
		<Crawlpos final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</Crawlpos>
		<DoubleCrawl final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</DoubleCrawl>
		<DoubleStack final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</DoubleStack>
		<DoubleTrack final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</DoubleTrack>
		<EnsureStorage final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</EnsureStorage>
		<IsBoundary final="1" set="method">
			<f a="index:startpos:endpos">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</IsBoundary>
		<IsECMABoundary final="1" set="method">
			<f a="index:startpos:endpos">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</IsECMABoundary>
		<IsMatched final="1" set="method">
			<f a="cap">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</IsMatched>
		<MatchIndex final="1" set="method">
			<f a="cap">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</MatchIndex>
		<MatchLength final="1" set="method">
			<f a="cap">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</MatchLength>
		<Popcrawl final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</Popcrawl>
		<TransferCapture final="1" set="method">
			<f a="capnum:uncapnum:start:end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</TransferCapture>
		<Uncapture final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</Uncapture>
		<Scan final="1" set="method">
			<f a="regex:text:textbeg:textend:textstart:prevlen:quick">
				<c path="cs.system.text.regularexpressions.Regex"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<c path="cs.system.text.regularexpressions.Match"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</Scan>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.RegularExpressions.RegexRunner"</e></m>
		</meta>
	</class>
	<class path="cs.system.text.regularexpressions.RegexRunnerFactory" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/System.dll @ cs.system.text.regularexpressions.RegexRunnerFactory" extern="1">
		<CreateInstance set="method">
			<f a=""><c path="cs.system.text.regularexpressions.RegexRunner"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</CreateInstance>
		<new final="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Text.RegularExpressions.RegexRunnerFactory"</e></m>
		</meta>
	</class>
	<enum path="cs.system.threading.ApartmentState" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.threading.ApartmentState">
		<STA><meta><m n=":csNative"><e>0</e></m></meta></STA>
		<MTA><meta><m n=":csNative"><e>1</e></m></meta></MTA>
		<Unknown><meta><m n=":csNative"><e>2</e></m></meta></Unknown>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Threading.ApartmentState"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.threading.AsyncFlowControl" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.threading.AsyncFlowControl" extern="1">
		<extends path="cs.system.ValueType"/>
		<implements path="cs.system.IDisposable"/>
		<op_Equality final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="cs.system.threading.AsyncFlowControl"/>
				<c path="cs.system.threading.AsyncFlowControl"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Equality>
		<op_Inequality final="1" public="1" set="method" static="1">
			<f a="a:b">
				<c path="cs.system.threading.AsyncFlowControl"/>
				<c path="cs.system.threading.AsyncFlowControl"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</op_Inequality>
		<Undo final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Undo>
		<meta>
			<m n=":nativeGen"/>
			<m n=":struct"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Threading.AsyncFlowControl"</e></m>
		</meta>
	</class>
	<class path="cs.system.threading.CompressedStack" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.threading.CompressedStack" extern="1">
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<Capture final="1" public="1" set="method" static="1">
			<f a=""><c path="cs.system.threading.CompressedStack"/></f>
			<meta><m n=":overload"/></meta>
		</Capture>
		<GetCompressedStack final="1" public="1" set="method" static="1">
			<f a=""><c path="cs.system.threading.CompressedStack"/></f>
			<meta><m n=":overload"/></meta>
		</GetCompressedStack>
		<Run final="1" public="1" set="method" static="1">
			<f a="compressedStack:callback:state">
				<c path="cs.system.threading.CompressedStack"/>
				<x path="cs.system.threading.ContextCallback"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Run>
		<CreateCopy final="1" public="1" set="method">
			<f a=""><c path="cs.system.threading.CompressedStack"/></f>
			<meta><m n=":overload"/></meta>
		</CreateCopy>
		<GetObjectData final="1" public="1" set="method">
			<f a="info:context">
				<c path="cs.system.runtime.serialization.SerializationInfo"/>
				<c path="cs.system.runtime.serialization.StreamingContext"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetObjectData>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Threading.CompressedStack"</e></m>
		</meta>
	</class>
	<class path="cs.system.threading.Delegate_ContextCallback" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.threading.ContextCallback" module="cs.system.threading.ContextCallback" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.threading.ContextCallback"/>
	<x path="cs.system.threading.ContextCallback"/>
	<x path="cs.system.threading.ContextCallback"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.threading.ContextCallback"/>
	<x path="cs.system.threading.ContextCallback"/>
	<x path="cs.system.threading.ContextCallback"/>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="state">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="state:callback:object">
				<d/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Threading.ContextCallback"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.threading.ContextCallback" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.threading.ContextCallback">
		<from><icast field="FromHaxeFunction"><f a="">
	<d/>
	<x path="Void"/>
</f></icast></from>
		<this><c path="cs.system.threading.Delegate_ContextCallback"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.threading._ContextCallback.ContextCallback_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.threading.ContextCallback" private="1" module="cs.system.threading.ContextCallback">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="">
				<d/>
				<x path="Void"/>
			</f>
			<x path="cs.system.threading.ContextCallback"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="">
				<d/>
				<x path="Void"/>
			</f>
			<x path="cs.system.threading.ContextCallback"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.threading.Delegate_ContextCallback"/>
			<c path="cs.system.threading.Delegate_ContextCallback"/>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.threading.ContextCallback"/>
			<x path="cs.system.threading.ContextCallback"/>
			<x path="cs.system.threading.ContextCallback"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.threading.ContextCallback"/>
			<x path="cs.system.threading.ContextCallback"/>
			<x path="cs.system.threading.ContextCallback"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system.threading._ContextCallback.ContextCallback_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.threading.ContextCallback" private="1" module="cs.system.threading.ContextCallback">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="cs.system.threading.ContextCallback"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="cs.system.threading.ContextCallback"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.threading.Delegate_ContextCallback"/>
				<c path="cs.system.threading.Delegate_ContextCallback"/>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.threading.ContextCallback"/>
				<x path="cs.system.threading.ContextCallback"/>
				<x path="cs.system.threading.ContextCallback"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.threading.ContextCallback"/>
				<x path="cs.system.threading.ContextCallback"/>
				<x path="cs.system.threading.ContextCallback"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<enum path="cs.system.threading.EventResetMode" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.threading.EventResetMode">
		<AutoReset><meta><m n=":csNative"><e>0</e></m></meta></AutoReset>
		<ManualReset><meta><m n=":csNative"><e>1</e></m></meta></ManualReset>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Threading.EventResetMode"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.threading.EventWaitHandle" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.threading.EventWaitHandle" extern="1">
		<extends path="cs.system.threading.WaitHandle"/>
		<OpenExisting final="1" public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.threading.EventWaitHandle"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><OpenExisting final="1" public="1" set="method">
	<f a="name:rights">
		<c path="String"/>
		<e path="cs.system.security.accesscontrol.EventWaitHandleRights"/>
		<c path="cs.system.threading.EventWaitHandle"/>
	</f>
	<meta><m n=":overload"/></meta>
</OpenExisting></overloads>
		</OpenExisting>
		<GetAccessControl final="1" public="1" set="method">
			<f a=""><c path="cs.system.security.accesscontrol.EventWaitHandleSecurity"/></f>
			<meta><m n=":overload"/></meta>
		</GetAccessControl>
		<Reset final="1" public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</Reset>
		<Set final="1" public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</Set>
		<SetAccessControl final="1" public="1" set="method">
			<f a="eventSecurity">
				<c path="cs.system.security.accesscontrol.EventWaitHandleSecurity"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetAccessControl>
		<new final="1" public="1" set="method">
			<f a="initialState:mode">
				<x path="Bool"/>
				<e path="cs.system.threading.EventResetMode"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="initialState:mode:name:createdNew:eventSecurity">
						<x path="Bool"/>
						<e path="cs.system.threading.EventResetMode"/>
						<c path="String"/>
						<t path="cs.Out"><x path="Bool"/></t>
						<c path="cs.system.security.accesscontrol.EventWaitHandleSecurity"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="initialState:mode:name:createdNew">
						<x path="Bool"/>
						<e path="cs.system.threading.EventResetMode"/>
						<c path="String"/>
						<t path="cs.Out"><x path="Bool"/></t>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="initialState:mode:name">
						<x path="Bool"/>
						<e path="cs.system.threading.EventResetMode"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Threading.EventWaitHandle"</e></m>
		</meta>
	</class>
	<class path="cs.system.threading.ExecutionContext" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.threading.ExecutionContext" extern="1">
		<implements path="cs.system.runtime.serialization.ISerializable"/>
		<Capture final="1" public="1" set="method" static="1">
			<f a=""><c path="cs.system.threading.ExecutionContext"/></f>
			<meta><m n=":overload"/></meta>
		</Capture>
		<IsFlowSuppressed final="1" public="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</IsFlowSuppressed>
		<RestoreFlow final="1" public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</RestoreFlow>
		<Run final="1" public="1" set="method" static="1">
			<f a="executionContext:callback:state">
				<c path="cs.system.threading.ExecutionContext"/>
				<x path="cs.system.threading.ContextCallback"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Run>
		<SuppressFlow final="1" public="1" set="method" static="1">
			<f a=""><c path="cs.system.threading.AsyncFlowControl"/></f>
			<meta><m n=":overload"/></meta>
		</SuppressFlow>
		<CreateCopy final="1" public="1" set="method">
			<f a=""><c path="cs.system.threading.ExecutionContext"/></f>
			<meta><m n=":overload"/></meta>
		</CreateCopy>
		<GetObjectData final="1" public="1" set="method">
			<f a="info:context">
				<c path="cs.system.runtime.serialization.SerializationInfo"/>
				<c path="cs.system.runtime.serialization.StreamingContext"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetObjectData>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Threading.ExecutionContext"</e></m>
		</meta>
	</class>
	<class path="cs.system.threading.HostExecutionContext" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.threading.HostExecutionContext" extern="1">
		<State get="null" set="null"><d/></State>
		<CreateCopy public="1" set="method">
			<f a=""><c path="cs.system.threading.HostExecutionContext"/></f>
			<meta><m n=":overload"/></meta>
		</CreateCopy>
		<get_State final="1" set="method">
			<f a=""><d/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</get_State>
		<set_State final="1" set="method">
			<f a="value">
				<d/>
				<d/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</set_State>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><new final="1" public="1" set="method">
	<f a="state">
		<d/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</new></overloads>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Threading.HostExecutionContext"</e></m>
		</meta>
	</class>
	<class path="cs.system.threading.HostExecutionContextManager" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.threading.HostExecutionContextManager" extern="1">
		<Capture public="1" set="method">
			<f a=""><c path="cs.system.threading.HostExecutionContext"/></f>
			<meta><m n=":overload"/></meta>
		</Capture>
		<Revert public="1" set="method">
			<f a="previousState">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Revert>
		<SetHostExecutionContext public="1" set="method">
			<f a="hostExecutionContext">
				<c path="cs.system.threading.HostExecutionContext"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetHostExecutionContext>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Threading.HostExecutionContextManager"</e></m>
		</meta>
	</class>
	<class path="cs.system.threading.ManualResetEvent" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.threading.ManualResetEvent" extern="1">
		<extends path="cs.system.threading.EventWaitHandle"/>
		<new final="1" public="1" set="method">
			<f a="initialState">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Threading.ManualResetEvent"</e></m>
		</meta>
	</class>
	<class path="cs.system.threading.Mutex" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.threading.Mutex" extern="1">
		<extends path="cs.system.threading.WaitHandle"/>
		<OpenExisting final="1" public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.threading.Mutex"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><OpenExisting final="1" public="1" set="method">
	<f a="name:rights">
		<c path="String"/>
		<e path="cs.system.security.accesscontrol.MutexRights"/>
		<c path="cs.system.threading.Mutex"/>
	</f>
	<meta><m n=":overload"/></meta>
</OpenExisting></overloads>
		</OpenExisting>
		<GetAccessControl final="1" public="1" set="method">
			<f a=""><c path="cs.system.security.accesscontrol.MutexSecurity"/></f>
			<meta><m n=":overload"/></meta>
		</GetAccessControl>
		<ReleaseMutex final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</ReleaseMutex>
		<SetAccessControl final="1" public="1" set="method">
			<f a="mutexSecurity">
				<c path="cs.system.security.accesscontrol.MutexSecurity"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetAccessControl>
		<new final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="initiallyOwned:name:createdNew:mutexSecurity">
						<x path="Bool"/>
						<c path="String"/>
						<t path="cs.Out"><x path="Bool"/></t>
						<c path="cs.system.security.accesscontrol.MutexSecurity"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="initiallyOwned:name:createdNew">
						<x path="Bool"/>
						<c path="String"/>
						<t path="cs.Out"><x path="Bool"/></t>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="initiallyOwned:name">
						<x path="Bool"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="initiallyOwned">
						<x path="Bool"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Threading.Mutex"</e></m>
		</meta>
	</class>
	<class path="cs.system.threading.Delegate_ParameterizedThreadStart" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.threading.ParameterizedThreadStart" module="cs.system.threading.ParameterizedThreadStart" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.threading.ParameterizedThreadStart"/>
	<x path="cs.system.threading.ParameterizedThreadStart"/>
	<x path="cs.system.threading.ParameterizedThreadStart"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.threading.ParameterizedThreadStart"/>
	<x path="cs.system.threading.ParameterizedThreadStart"/>
	<x path="cs.system.threading.ParameterizedThreadStart"/>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a="obj">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="obj:callback:object">
				<d/>
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Threading.ParameterizedThreadStart"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.threading.ParameterizedThreadStart" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.threading.ParameterizedThreadStart">
		<from><icast field="FromHaxeFunction"><f a="">
	<d/>
	<x path="Void"/>
</f></icast></from>
		<this><c path="cs.system.threading.Delegate_ParameterizedThreadStart"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.threading._ParameterizedThreadStart.ParameterizedThreadStart_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.threading.ParameterizedThreadStart" private="1" module="cs.system.threading.ParameterizedThreadStart">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="">
				<d/>
				<x path="Void"/>
			</f>
			<x path="cs.system.threading.ParameterizedThreadStart"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a="">
				<d/>
				<x path="Void"/>
			</f>
			<x path="cs.system.threading.ParameterizedThreadStart"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.threading.Delegate_ParameterizedThreadStart"/>
			<c path="cs.system.threading.Delegate_ParameterizedThreadStart"/>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.threading.ParameterizedThreadStart"/>
			<x path="cs.system.threading.ParameterizedThreadStart"/>
			<x path="cs.system.threading.ParameterizedThreadStart"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.threading.ParameterizedThreadStart"/>
			<x path="cs.system.threading.ParameterizedThreadStart"/>
			<x path="cs.system.threading.ParameterizedThreadStart"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system.threading._ParameterizedThreadStart.ParameterizedThreadStart_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.threading.ParameterizedThreadStart" private="1" module="cs.system.threading.ParameterizedThreadStart">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="cs.system.threading.ParameterizedThreadStart"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="cs.system.threading.ParameterizedThreadStart"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.threading.Delegate_ParameterizedThreadStart"/>
				<c path="cs.system.threading.Delegate_ParameterizedThreadStart"/>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.threading.ParameterizedThreadStart"/>
				<x path="cs.system.threading.ParameterizedThreadStart"/>
				<x path="cs.system.threading.ParameterizedThreadStart"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.threading.ParameterizedThreadStart"/>
				<x path="cs.system.threading.ParameterizedThreadStart"/>
				<x path="cs.system.threading.ParameterizedThreadStart"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="cs.system.threading.Thread" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.threading.Thread" extern="1">
		<extends path="cs.system.runtime.constrainedexecution.CriticalFinalizerObject"/>
		<implements path="cs.system.runtime.interopservices._Thread"/>
		<CurrentThread public="1" get="accessor" set="null" static="1"><c path="cs.system.threading.Thread"/></CurrentThread>
		<CurrentPrincipal public="1" get="accessor" set="accessor" static="1"><c path="cs.system.security.principal.IPrincipal"/></CurrentPrincipal>
		<CurrentContext public="1" get="accessor" set="null" static="1"><c path="cs.system.runtime.remoting.contexts.Context"/></CurrentContext>
		<get_CurrentContext final="1" set="method" static="1">
			<f a=""><c path="cs.system.runtime.remoting.contexts.Context"/></f>
			<meta><m n=":overload"/></meta>
		</get_CurrentContext>
		<get_CurrentPrincipal final="1" set="method" static="1">
			<f a=""><c path="cs.system.security.principal.IPrincipal"/></f>
			<meta><m n=":overload"/></meta>
		</get_CurrentPrincipal>
		<set_CurrentPrincipal final="1" set="method" static="1">
			<f a="value">
				<c path="cs.system.security.principal.IPrincipal"/>
				<c path="cs.system.security.principal.IPrincipal"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_CurrentPrincipal>
		<get_CurrentThread final="1" set="method" static="1">
			<f a=""><c path="cs.system.threading.Thread"/></f>
			<meta><m n=":overload"/></meta>
		</get_CurrentThread>
		<AllocateNamedDataSlot final="1" public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.LocalDataStoreSlot"/>
			</f>
			<meta><m n=":overload"/></meta>
		</AllocateNamedDataSlot>
		<FreeNamedDataSlot final="1" public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</FreeNamedDataSlot>
		<AllocateDataSlot final="1" public="1" set="method" static="1">
			<f a=""><c path="cs.system.LocalDataStoreSlot"/></f>
			<meta><m n=":overload"/></meta>
		</AllocateDataSlot>
		<GetData final="1" public="1" set="method" static="1">
			<f a="slot">
				<c path="cs.system.LocalDataStoreSlot"/>
				<d/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetData>
		<SetData final="1" public="1" set="method" static="1">
			<f a="slot:data">
				<c path="cs.system.LocalDataStoreSlot"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetData>
		<GetNamedDataSlot final="1" public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<c path="cs.system.LocalDataStoreSlot"/>
			</f>
			<meta><m n=":overload"/></meta>
		</GetNamedDataSlot>
		<GetDomain final="1" public="1" set="method" static="1">
			<f a=""><c path="cs.system.AppDomain"/></f>
			<meta><m n=":overload"/></meta>
		</GetDomain>
		<GetDomainID final="1" public="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</GetDomainID>
		<ResetAbort final="1" public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</ResetAbort>
		<Sleep final="1" public="1" set="method" static="1">
			<f a="millisecondsTimeout">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads><Sleep final="1" public="1" set="method">
	<f a="timeout">
		<c path="cs.system.TimeSpan"/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</Sleep></overloads>
		</Sleep>
		<MemoryBarrier final="1" public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</MemoryBarrier>
		<SpinWait final="1" public="1" set="method" static="1">
			<f a="iterations">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SpinWait>
		<VolatileRead final="1" public="1" set="method" static="1">
			<f a="address">
				<t path="cs.Ref"><t path="cs.types.UInt8"/></t>
				<t path="cs.types.UInt8"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<VolatileRead final="1" public="1" set="method">
					<f a="address">
						<t path="cs.Ref"><c path="cs.system.UIntPtr"/></t>
						<c path="cs.system.UIntPtr"/>
					</f>
					<meta><m n=":overload"/></meta>
				</VolatileRead>
				<VolatileRead final="1" public="1" set="method">
					<f a="address">
						<t path="cs.Ref"><t path="cs.types.UInt64"/></t>
						<t path="cs.types.UInt64"/>
					</f>
					<meta><m n=":overload"/></meta>
				</VolatileRead>
				<VolatileRead final="1" public="1" set="method">
					<f a="address">
						<t path="cs.Ref"><x path="UInt"/></t>
						<x path="UInt"/>
					</f>
					<meta><m n=":overload"/></meta>
				</VolatileRead>
				<VolatileRead final="1" public="1" set="method">
					<f a="address">
						<t path="cs.Ref"><t path="cs.types.UInt16"/></t>
						<t path="cs.types.UInt16"/>
					</f>
					<meta><m n=":overload"/></meta>
				</VolatileRead>
				<VolatileRead final="1" public="1" set="method">
					<f a="address">
						<t path="cs.Ref"><x path="Single"/></t>
						<x path="Single"/>
					</f>
					<meta><m n=":overload"/></meta>
				</VolatileRead>
				<VolatileRead final="1" public="1" set="method">
					<f a="address">
						<t path="cs.Ref"><t path="cs.types.Int8"/></t>
						<t path="cs.types.Int8"/>
					</f>
					<meta><m n=":overload"/></meta>
				</VolatileRead>
				<VolatileRead final="1" public="1" set="method">
					<f a="address">
						<t path="cs.Ref"><d/></t>
						<d/>
					</f>
					<meta><m n=":overload"/></meta>
				</VolatileRead>
				<VolatileRead final="1" public="1" set="method">
					<f a="address">
						<t path="cs.Ref"><c path="cs.system.IntPtr"/></t>
						<c path="cs.system.IntPtr"/>
					</f>
					<meta><m n=":overload"/></meta>
				</VolatileRead>
				<VolatileRead final="1" public="1" set="method">
					<f a="address">
						<t path="cs.Ref"><x path="haxe.Int64"/></t>
						<x path="haxe.Int64"/>
					</f>
					<meta><m n=":overload"/></meta>
				</VolatileRead>
				<VolatileRead final="1" public="1" set="method">
					<f a="address">
						<t path="cs.Ref"><x path="Int"/></t>
						<x path="Int"/>
					</f>
					<meta><m n=":overload"/></meta>
				</VolatileRead>
				<VolatileRead final="1" public="1" set="method">
					<f a="address">
						<t path="cs.Ref"><t path="cs.types.Int16"/></t>
						<t path="cs.types.Int16"/>
					</f>
					<meta><m n=":overload"/></meta>
				</VolatileRead>
				<VolatileRead final="1" public="1" set="method">
					<f a="address">
						<t path="cs.Ref"><x path="Float"/></t>
						<x path="Float"/>
					</f>
					<meta><m n=":overload"/></meta>
				</VolatileRead>
			</overloads>
		</VolatileRead>
		<VolatileWrite final="1" public="1" set="method" static="1">
			<f a="address:value">
				<t path="cs.Ref"><t path="cs.types.UInt8"/></t>
				<t path="cs.types.UInt8"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<VolatileWrite final="1" public="1" set="method">
					<f a="address:value">
						<t path="cs.Ref"><c path="cs.system.UIntPtr"/></t>
						<c path="cs.system.UIntPtr"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</VolatileWrite>
				<VolatileWrite final="1" public="1" set="method">
					<f a="address:value">
						<t path="cs.Ref"><t path="cs.types.UInt64"/></t>
						<t path="cs.types.UInt64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</VolatileWrite>
				<VolatileWrite final="1" public="1" set="method">
					<f a="address:value">
						<t path="cs.Ref"><x path="UInt"/></t>
						<x path="UInt"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</VolatileWrite>
				<VolatileWrite final="1" public="1" set="method">
					<f a="address:value">
						<t path="cs.Ref"><t path="cs.types.UInt16"/></t>
						<t path="cs.types.UInt16"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</VolatileWrite>
				<VolatileWrite final="1" public="1" set="method">
					<f a="address:value">
						<t path="cs.Ref"><x path="Single"/></t>
						<x path="Single"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</VolatileWrite>
				<VolatileWrite final="1" public="1" set="method">
					<f a="address:value">
						<t path="cs.Ref"><t path="cs.types.Int8"/></t>
						<t path="cs.types.Int8"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</VolatileWrite>
				<VolatileWrite final="1" public="1" set="method">
					<f a="address:value">
						<t path="cs.Ref"><d/></t>
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</VolatileWrite>
				<VolatileWrite final="1" public="1" set="method">
					<f a="address:value">
						<t path="cs.Ref"><c path="cs.system.IntPtr"/></t>
						<c path="cs.system.IntPtr"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</VolatileWrite>
				<VolatileWrite final="1" public="1" set="method">
					<f a="address:value">
						<t path="cs.Ref"><x path="haxe.Int64"/></t>
						<x path="haxe.Int64"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</VolatileWrite>
				<VolatileWrite final="1" public="1" set="method">
					<f a="address:value">
						<t path="cs.Ref"><x path="Int"/></t>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</VolatileWrite>
				<VolatileWrite final="1" public="1" set="method">
					<f a="address:value">
						<t path="cs.Ref"><t path="cs.types.Int16"/></t>
						<t path="cs.types.Int16"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</VolatileWrite>
				<VolatileWrite final="1" public="1" set="method">
					<f a="address:value">
						<t path="cs.Ref"><x path="Float"/></t>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</VolatileWrite>
			</overloads>
		</VolatileWrite>
		<BeginCriticalRegion final="1" public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</BeginCriticalRegion>
		<EndCriticalRegion final="1" public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</EndCriticalRegion>
		<BeginThreadAffinity final="1" public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</BeginThreadAffinity>
		<EndThreadAffinity final="1" public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</EndThreadAffinity>
		<ManagedThreadId public="1" get="accessor" set="null"><x path="Int"/></ManagedThreadId>
		<ExecutionContext public="1" get="accessor" set="null"><c path="cs.system.threading.ExecutionContext"/></ExecutionContext>
		<ThreadState public="1" get="accessor" set="null"><e path="cs.system.threading.ThreadState"/></ThreadState>
		<Priority public="1" get="accessor" set="accessor"><e path="cs.system.threading.ThreadPriority"/></Priority>
		<Name public="1" get="accessor" set="accessor"><c path="String"/></Name>
		<IsBackground public="1" get="accessor" set="accessor"><x path="Bool"/></IsBackground>
		<IsAlive public="1" get="accessor" set="null"><x path="Bool"/></IsAlive>
		<IsThreadPoolThread public="1" get="accessor" set="null"><x path="Bool"/></IsThreadPoolThread>
		<CurrentUICulture public="1" get="accessor" set="accessor"><c path="cs.system.globalization.CultureInfo"/></CurrentUICulture>
		<CurrentCulture public="1" get="accessor" set="accessor"><c path="cs.system.globalization.CultureInfo"/></CurrentCulture>
		<ApartmentState public="1" get="accessor" set="accessor"><e path="cs.system.threading.ApartmentState"/></ApartmentState>
		<get_ApartmentState final="1" set="method">
			<f a=""><e path="cs.system.threading.ApartmentState"/></f>
			<meta><m n=":overload"/></meta>
		</get_ApartmentState>
		<set_ApartmentState final="1" set="method">
			<f a="value">
				<e path="cs.system.threading.ApartmentState"/>
				<e path="cs.system.threading.ApartmentState"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_ApartmentState>
		<get_CurrentCulture final="1" set="method">
			<f a=""><c path="cs.system.globalization.CultureInfo"/></f>
			<meta><m n=":overload"/></meta>
		</get_CurrentCulture>
		<set_CurrentCulture final="1" set="method">
			<f a="value">
				<c path="cs.system.globalization.CultureInfo"/>
				<c path="cs.system.globalization.CultureInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_CurrentCulture>
		<get_CurrentUICulture final="1" set="method">
			<f a=""><c path="cs.system.globalization.CultureInfo"/></f>
			<meta><m n=":overload"/></meta>
		</get_CurrentUICulture>
		<set_CurrentUICulture final="1" set="method">
			<f a="value">
				<c path="cs.system.globalization.CultureInfo"/>
				<c path="cs.system.globalization.CultureInfo"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_CurrentUICulture>
		<get_IsThreadPoolThread final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsThreadPoolThread>
		<get_IsAlive final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsAlive>
		<get_IsBackground final="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsBackground>
		<set_IsBackground final="1" set="method">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_IsBackground>
		<get_Name final="1" set="method">
			<f a=""><c path="String"/></f>
			<meta><m n=":overload"/></meta>
		</get_Name>
		<set_Name final="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Name>
		<get_Priority final="1" set="method">
			<f a=""><e path="cs.system.threading.ThreadPriority"/></f>
			<meta><m n=":overload"/></meta>
		</get_Priority>
		<set_Priority final="1" set="method">
			<f a="value">
				<e path="cs.system.threading.ThreadPriority"/>
				<e path="cs.system.threading.ThreadPriority"/>
			</f>
			<meta><m n=":overload"/></meta>
		</set_Priority>
		<get_ThreadState final="1" set="method">
			<f a=""><e path="cs.system.threading.ThreadState"/></f>
			<meta><m n=":overload"/></meta>
		</get_ThreadState>
		<Abort final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><Abort final="1" public="1" set="method">
	<f a="stateInfo">
		<d/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</Abort></overloads>
		</Abort>
		<Interrupt final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Interrupt>
		<Join final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<Join final="1" public="1" set="method">
					<f a="timeout">
						<c path="cs.system.TimeSpan"/>
						<x path="Bool"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Join>
				<Join final="1" public="1" set="method">
					<f a="millisecondsTimeout">
						<x path="Int"/>
						<x path="Bool"/>
					</f>
					<meta><m n=":overload"/></meta>
				</Join>
			</overloads>
		</Join>
		<Resume final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Resume>
		<Start final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
			<overloads><Start final="1" public="1" set="method">
	<f a="parameter">
		<d/>
		<x path="Void"/>
	</f>
	<meta><m n=":overload"/></meta>
</Start></overloads>
		</Start>
		<Suspend final="1" public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Suspend>
		<get_ExecutionContext final="1" set="method">
			<f a=""><c path="cs.system.threading.ExecutionContext"/></f>
			<meta><m n=":overload"/></meta>
		</get_ExecutionContext>
		<get_ManagedThreadId final="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":overload"/></meta>
		</get_ManagedThreadId>
		<GetApartmentState final="1" public="1" set="method">
			<f a=""><e path="cs.system.threading.ApartmentState"/></f>
			<meta><m n=":overload"/></meta>
		</GetApartmentState>
		<SetApartmentState final="1" public="1" set="method">
			<f a="state">
				<e path="cs.system.threading.ApartmentState"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetApartmentState>
		<TrySetApartmentState final="1" public="1" set="method">
			<f a="state">
				<e path="cs.system.threading.ApartmentState"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":overload"/></meta>
		</TrySetApartmentState>
		<GetCompressedStack final="1" public="1" set="method">
			<f a=""><c path="cs.system.threading.CompressedStack"/></f>
			<meta><m n=":overload"/></meta>
		</GetCompressedStack>
		<SetCompressedStack final="1" public="1" set="method">
			<f a="stack">
				<c path="cs.system.threading.CompressedStack"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</SetCompressedStack>
		<new final="1" public="1" set="method">
			<f a="start">
				<x path="cs.system.threading.ThreadStart"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
			<overloads>
				<new final="1" public="1" set="method">
					<f a="start:maxStackSize">
						<x path="cs.system.threading.ParameterizedThreadStart"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="start">
						<x path="cs.system.threading.ParameterizedThreadStart"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
				<new final="1" public="1" set="method">
					<f a="start:maxStackSize">
						<x path="cs.system.threading.ThreadStart"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<meta><m n=":overload"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Threading.Thread"</e></m>
		</meta>
	</class>
	<enum path="cs.system.threading.ThreadPriority" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.threading.ThreadPriority">
		<Lowest><meta><m n=":csNative"><e>0</e></m></meta></Lowest>
		<BelowNormal><meta><m n=":csNative"><e>1</e></m></meta></BelowNormal>
		<Normal><meta><m n=":csNative"><e>2</e></m></meta></Normal>
		<AboveNormal><meta><m n=":csNative"><e>3</e></m></meta></AboveNormal>
		<Highest><meta><m n=":csNative"><e>4</e></m></meta></Highest>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Threading.ThreadPriority"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<class path="cs.system.threading.Delegate_ThreadStart" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.threading.ThreadStart" module="cs.system.threading.ThreadStart" extern="1">
		<extends path="cs.system.MulticastDelegate"/>
		<op_Addition public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.threading.ThreadStart"/>
	<x path="cs.system.threading.ThreadStart"/>
	<x path="cs.system.threading.ThreadStart"/>
</f></op_Addition>
		<op_Subtraction public="1" set="method" static="1"><f a="arg1:arg2">
	<x path="cs.system.threading.ThreadStart"/>
	<x path="cs.system.threading.ThreadStart"/>
	<x path="cs.system.threading.ThreadStart"/>
</f></op_Subtraction>
		<Invoke public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":overload"/></meta>
		</Invoke>
		<BeginInvoke public="1" set="method">
			<f a="callback:object">
				<x path="cs.system.AsyncCallback"/>
				<d/>
				<c path="cs.system.IAsyncResult"/>
			</f>
			<meta><m n=":overload"/></meta>
		</BeginInvoke>
		<EndInvoke public="1" set="method">
			<f a="result">
				<c path="cs.system.IAsyncResult"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</EndInvoke>
		<new final="1" public="1" set="method">
			<f a="object:method">
				<d/>
				<c path="cs.system.IntPtr"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"System.Threading.ThreadStart"</e></m>
		</meta>
	</class>
	<abstract path="cs.system.threading.ThreadStart" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.threading.ThreadStart">
		<from><icast field="FromHaxeFunction"><f a=""><x path="Void"/></f></icast></from>
		<this><c path="cs.system.threading.Delegate_ThreadStart"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":delegate"/>
			<m n=":forward"/>
		</meta>
		<impl><class path="cs.system.threading._ThreadStart.ThreadStart_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.threading.ThreadStart" private="1" module="cs.system.threading.ThreadStart">
	<_new public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=""><x path="Void"/></f>
			<x path="cs.system.threading.ThreadStart"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
		<f a="hxfunc">
			<f a=""><x path="Void"/></f>
			<x path="cs.system.threading.ThreadStart"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":from"/>
		</meta>
	</FromHaxeFunction>
	<AsDelegate public="1" get="inline" set="null" line="1" static="1">
		<f a="this">
			<c path="cs.system.threading.Delegate_ThreadStart"/>
			<c path="cs.system.threading.Delegate_ThreadStart"/>
		</f>
		<meta><m n=":impl"/></meta>
	</AsDelegate>
	<Add public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.threading.ThreadStart"/>
			<x path="cs.system.threading.ThreadStart"/>
			<x path="cs.system.threading.ThreadStart"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</Add>
	<Remove public="1" get="inline" set="null" line="1" static="1">
		<f a="arg1:arg2">
			<x path="cs.system.threading.ThreadStart"/>
			<x path="cs.system.threading.ThreadStart"/>
			<x path="cs.system.threading.ThreadStart"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</Remove>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="cs.system.threading._ThreadStart.ThreadStart_Impl_" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.threading.ThreadStart" private="1" module="cs.system.threading.ThreadStart">
		<_new public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=""><x path="Void"/></f>
				<x path="cs.system.threading.ThreadStart"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<FromHaxeFunction public="1" get="inline" set="null" line="1" static="1">
			<f a="hxfunc">
				<f a=""><x path="Void"/></f>
				<x path="cs.system.threading.ThreadStart"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":from"/>
			</meta>
		</FromHaxeFunction>
		<AsDelegate public="1" get="inline" set="null" line="1" static="1">
			<f a="this">
				<c path="cs.system.threading.Delegate_ThreadStart"/>
				<c path="cs.system.threading.Delegate_ThreadStart"/>
			</f>
			<meta><m n=":impl"/></meta>
		</AsDelegate>
		<Add public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.threading.ThreadStart"/>
				<x path="cs.system.threading.ThreadStart"/>
				<x path="cs.system.threading.ThreadStart"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</Add>
		<Remove public="1" get="inline" set="null" line="1" static="1">
			<f a="arg1:arg2">
				<x path="cs.system.threading.ThreadStart"/>
				<x path="cs.system.threading.ThreadStart"/>
				<x path="cs.system.threading.ThreadStart"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</Remove>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<enum path="cs.system.threading.ThreadState" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ cs.system.threading.ThreadState">
		<Running><meta><m n=":csNative"><e>0</e></m></meta></Running>
		<StopRequested><meta><m n=":csNative"><e>1</e></m></meta></StopRequested>
		<SuspendRequested><meta><m n=":csNative"><e>2</e></m></meta></SuspendRequested>
		<Background><meta><m n=":csNative"><e>4</e></m></meta></Background>
		<Unstarted><meta><m n=":csNative"><e>8</e></m></meta></Unstarted>
		<Stopped><meta><m n=":csNative"><e>16</e></m></meta></Stopped>
		<WaitSleepJoin><meta><m n=":csNative"><e>32</e></m></meta></WaitSleepJoin>
		<Suspended><meta><m n=":csNative"><e>64</e></m></meta></Suspended>
		<AbortRequested><meta><m n=":csNative"><e>128</e></m></meta></AbortRequested>
		<Aborted><meta><m n=":csNative"><e>256</e></m></meta></Aborted>
		<meta>
			<m n=":nativeGen"/>
			<m n=":flatEnum"/>
			<m n=":native"><e>"System.Threading.ThreadState"</e></m>
			<m n=":csNative"/>
		</meta>
	</enum>
	<typedef path="cs.types.Char16" params="" file="/home/vsts/work/1/s/std/cs/types/Char16.hx">
		<x path="cs.Char16"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="cs.types.Int16" params="" file="/home/vsts/work/1/s/std/cs/types/Int16.hx">
		<x path="cs.Int16"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="cs.types.Int64" params="" file="/home/vsts/work/1/s/std/cs/types/Int64.hx">
		<x path="cs.Int64"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="cs.types.Int8" params="" file="/home/vsts/work/1/s/std/cs/types/Int8.hx">
		<x path="cs.Int8"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="cs.types.UInt16" params="" file="/home/vsts/work/1/s/std/cs/types/UInt16.hx">
		<x path="cs.UInt16"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="cs.types.UInt64" params="" file="/home/vsts/work/1/s/std/cs/types/UInt64.hx">
		<x path="cs.UInt64"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="cs.types.UInt8" params="" file="/home/vsts/work/1/s/std/cs/types/UInt8.hx">
		<x path="cs.UInt8"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<enum path="haxe.StackItem" params="" file="/home/vsts/work/1/s/std/haxe/CallStack.hx" module="haxe.CallStack">
		<CFunction/>
		<Module a="m"><c path="String"/></Module>
		<FilePos a="s:file:line:?column">
			<x path="Null"><e path="haxe.StackItem"/></x>
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
		</FilePos>
		<Method a="classname:method">
			<x path="Null"><c path="String"/></x>
			<c path="String"/>
		</Method>
		<LocalFunction a="?v"><x path="Int"/></LocalFunction>
		<haxe_doc>Elements return by `CallStack` methods.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<class path="haxe.CallStack" params="" file="/home/vsts/work/1/s/std/haxe/CallStack.hx">
		<callStack public="1" set="method" line="94" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>Return the call stack elements, or an empty array if not available.</haxe_doc>
		</callStack>
		<exceptionStack public="1" set="method" line="191" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>Return the exception stack : this is the stack elements between
		the place the last exception was thrown and the place it was
		caught, or an empty array if not available.</haxe_doc>
		</exceptionStack>
		<toString public="1" set="method" line="259" static="1">
			<f a="stack">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a representation of the stack as a printable string.</haxe_doc>
		</toString>
		<itemToString set="method" line="268" static="1"><f a="b:s">
	<c path="StringBuf"/>
	<e path="haxe.StackItem"/>
	<x path="Void"/>
</f></itemToString>
		<makeStack set="method" line="302" static="1"><f a="s">
	<c path="cs.system.diagnostics.StackTrace"/>
	<c path="Array"><e path="haxe.StackItem"/></c>
</f></makeStack>
		<haxe_doc>Get information about the call stack.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<abstract path="haxe.Function" params="" file="/home/vsts/work/1/s/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":callable"/>
		</meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"><meta><m n=":hxGen"/></meta></class></impl>
	</abstract>
	<class path="haxe._Constraints.Function_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"><meta><m n=":hxGen"/></meta></class>
	<abstract path="haxe.FlatEnum" params="" file="/home/vsts/work/1/s/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"><meta><m n=":hxGen"/></meta></class></impl>
	</abstract>
	<class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"><meta><m n=":hxGen"/></meta></class>
	<abstract path="haxe.Constructible" params="T" file="/home/vsts/work/1/s/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which

	  * is `public` and
	  * unifies with the type used for type parameter `T`.

	If a type parameter `A` is assigned to a type parameter `B` which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<meta><m n=":hxGen"/></meta>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"><meta><m n=":hxGen"/></meta></class></impl>
	</abstract>
	<class path="haxe._Constraints.Constructible_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"><meta><m n=":hxGen"/></meta></class>
	<class path="haxe.IMap" params="K:V" file="/home/vsts/work/1/s/std/haxe/Constraints.hx" module="haxe.Constraints" interface="1">
		<get public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Null"><c path="haxe.IMap.V"/></x>
</f></get>
		<set public="1" set="method"><f a="k:v">
	<c path="haxe.IMap.K"/>
	<c path="haxe.IMap.V"/>
	<x path="Void"/>
</f></set>
		<exists public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Bool"/>
</f></exists>
		<remove public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Bool"/>
</f></remove>
		<keys public="1" set="method"><f a=""><t path="Iterator"><c path="haxe.IMap.K"/></t></f></keys>
		<iterator public="1" set="method"><f a=""><t path="Iterator"><c path="haxe.IMap.V"/></t></f></iterator>
		<keyValueIterator public="1" set="method"><f a=""><t path="KeyValueIterator">
	<c path="haxe.IMap.K"/>
	<c path="haxe.IMap.V"/>
</t></f></keyValueIterator>
		<copy public="1" set="method"><f a=""><c path="haxe.IMap">
	<c path="haxe.IMap.K"/>
	<c path="haxe.IMap.V"/>
</c></f></copy>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<meta><m n=":hxGen"/></meta>
	</class>
	<abstract path="haxe.DynamicAccess" params="T" file="/home/vsts/work/1/s/std/haxe/DynamicAccess.hx">
		<from><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></from>
		<this><d><c path="haxe.DynamicAccess.T"/></d></this>
		<to><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></to>
		<haxe_doc>DynamicAccess is an abstract type for working with anonymous structures
	that are intended to hold collections of objects by the string key.

	For example, these types of structures are often created from JSON.

	Basically, it wraps `Reflect` calls in a `Map`-like interface.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
		<impl><class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess">
	<_new public="1" get="inline" set="null" line="40" static="1">
		<f a=""><x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x></f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Creates a new structure.</haxe_doc>
	</_new>
	<get public="1" get="inline" set="null" line="51" static="1">
		<f a="this:key">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<x path="Null"><c path="haxe.DynamicAccess.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Returns a value by specified `key`.

		If the structure does not contain the given key, `null` is returned.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</get>
	<set public="1" get="inline" set="null" line="69" static="1">
		<f a="this:key:value">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<c path="haxe.DynamicAccess.T"/>
			<c path="haxe.DynamicAccess.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Sets a `value` for a specified `key`.

		If the structure contains the given key, its value will be overwritten.

		Returns the given value.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</set>
	<exists public="1" get="inline" set="null" line="83" static="1">
		<f a="this:key">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Tells if the structure contains a specified `key`.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="93" static="1">
		<f a="this:key">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Removes a specified `key` from the structure.

		Returns true, if `key` was present in structure, or false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="99" static="1">
		<f a="this">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="Array"><c path="String"/></c>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an array of `keys` in a structure.</haxe_doc>
	</keys>
	<copy public="1" get="inline" set="null" line="105" static="1">
		<f a="this">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a shallow copy of the structure</haxe_doc>
	</copy>
	<iterator public="1" get="inline" set="null" line="113" static="1">
		<f a="this">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="haxe.iterators.DynamicAccessIterator"><c path="haxe.DynamicAccess.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an Iterator over the values of this `DynamicAccess`.

		The order of values is undefined.</haxe_doc>
	</iterator>
	<keyValueIterator public="1" get="inline" set="null" line="122" static="1">
		<f a="this">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="haxe.iterators.DynamicAccessKeyValueIterator"><c path="haxe.DynamicAccess.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an Iterator over the keys and values of this `DynamicAccess`.

		The order of values is undefined.</haxe_doc>
	</keyValueIterator>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess">
		<_new public="1" get="inline" set="null" line="40" static="1">
			<f a=""><x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x></f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Creates a new structure.</haxe_doc>
		</_new>
		<get public="1" get="inline" set="null" line="51" static="1">
			<f a="this:key">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<x path="Null"><c path="haxe.DynamicAccess.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Returns a value by specified `key`.

		If the structure does not contain the given key, `null` is returned.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="69" static="1">
			<f a="this:key:value">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<c path="haxe.DynamicAccess.T"/>
				<c path="haxe.DynamicAccess.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Sets a `value` for a specified `key`.

		If the structure contains the given key, its value will be overwritten.

		Returns the given value.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</set>
		<exists public="1" get="inline" set="null" line="83" static="1">
			<f a="this:key">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Tells if the structure contains a specified `key`.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="93" static="1">
			<f a="this:key">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Removes a specified `key` from the structure.

		Returns true, if `key` was present in structure, or false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="99" static="1">
			<f a="this">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an array of `keys` in a structure.</haxe_doc>
		</keys>
		<copy public="1" get="inline" set="null" line="105" static="1">
			<f a="this">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a shallow copy of the structure</haxe_doc>
		</copy>
		<iterator public="1" get="inline" set="null" line="113" static="1">
			<f a="this">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="haxe.iterators.DynamicAccessIterator"><c path="haxe.DynamicAccess.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an Iterator over the values of this `DynamicAccess`.

		The order of values is undefined.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="122" static="1">
			<f a="this">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="haxe.iterators.DynamicAccessKeyValueIterator"><c path="haxe.DynamicAccess.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an Iterator over the keys and values of this `DynamicAccess`.

		The order of values is undefined.</haxe_doc>
		</keyValueIterator>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="sys.thread.Mutex" params="" file="/home/vsts/work/1/s/std/cs/_std/sys/thread/Mutex.hx">
		<native final="1" expr="new NativeMutex()" line="28">
			<c path="cs.system.threading.Mutex"/>
			<meta><m n=":value"><e>new NativeMutex()</e></m></meta>
		</native>
		<acquire public="1" set="method" line="32"><f a=""><x path="Void"/></f></acquire>
		<tryAcquire public="1" set="method" line="36"><f a=""><x path="Bool"/></f></tryAcquire>
		<release public="1" set="method" line="40"><f a=""><x path="Void"/></f></release>
		<new public="1" set="method" line="30"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
		</meta>
	</class>
	<class path="sys.thread.Lock" params="" file="/home/vsts/work/1/s/std/cs/_std/sys/thread/Lock.hx">
		<lockObj final="1" expr="{ }" line="30">
			<a/>
			<meta><m n=":value"><e>{ }</e></m></meta>
		</lockObj>
		<releaseEvent final="1" expr="new ManualResetEvent(false)" line="31">
			<c path="cs.system.threading.ManualResetEvent"/>
			<meta><m n=":value"><e>new ManualResetEvent(false)</e></m></meta>
		</releaseEvent>
		<waitCount expr="1" line="33">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</waitCount>
		<releaseCount expr="0" line="34">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</releaseCount>
		<wait public="1" set="method" line="38"><f a="?timeout">
	<x path="Float"/>
	<x path="Bool"/>
</f></wait>
		<release public="1" set="method" line="73"><f a=""><x path="Void"/></f></release>
		<new public="1" set="method" line="36"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
		</meta>
	</class>
	<class path="haxe.EntryPoint" params="" file="/home/vsts/work/1/s/std/haxe/EntryPoint.hx">
		<sleepLock expr="new Lock()" line="37" static="1">
			<c path="sys.thread.Lock"/>
			<meta><m n=":value"><e>new Lock()</e></m></meta>
		</sleepLock>
		<mutex expr="new Mutex()" line="38" static="1">
			<c path="sys.thread.Mutex"/>
			<meta><m n=":value"><e>new Mutex()</e></m></meta>
		</mutex>
		<pending expr="new Array&lt;Void&gt;()" line="40" static="1">
			<c path="Array"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e><![CDATA[new Array<Void>()]]></e></m></meta>
		</pending>
		<threadCount public="1" set="null" expr="0" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</threadCount>
		<wakeup public="1" set="method" line="46" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Wakeup a sleeping `run()`</haxe_doc>
		</wakeup>
		<runInMainThread public="1" set="method" line="52" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></runInMainThread>
		<addThread public="1" set="method" line="63" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></addThread>
		<processEvents set="method" line="85" static="1"><f a=""><x path="Float"/></f></processEvents>
		<run public="1" set="method" line="108" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>Start the main loop. Depending on the platform, this can return immediately or will only return when the application exits.</haxe_doc>
		</run>
		<haxe_doc>If `haxe.MainLoop` is kept from DCE, then we will insert an `haxe.EntryPoint.run()` call just at then end of `main()`.
	This class can be redefined by custom frameworks so they can handle their own main loop logic.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<abstract path="haxe.EnumFlags" params="T" file="/home/vsts/work/1/s/std/haxe/EnumFlags.hx">
		<this><x path="Int"/></this>
		<haxe_doc>A typed interface for bit flags. This is not a real object, only a typed
	interface for an actual Int. Each flag can be tested/set with the
	corresponding enum instance. Up to 32 flags can be stored that way.

	Enum constructor indices are preserved from Haxe syntax, so the first
	declared is index 0, the next index 1 etc. The methods are optimized if the
	enum instance is passed directly, e.g. as `has(EnumCtor)`. Otherwise
	`Type.enumIndex()` reflection is used.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
		<impl><class path="haxe._EnumFlags.EnumFlags_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/EnumFlags.hx" private="1" module="haxe.EnumFlags">
	<_new public="1" get="inline" set="null" line="39" static="1">
		<f a="?i" v="0">
			<x path="Int"/>
			<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
		</f>
		<meta>
			<m n=":value"><e>{ i : 0 }</e></m>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Initializes the bitflags to `i`.</haxe_doc>
	</_new>
	<has public="1" get="inline" set="null" line="51" static="1">
		<f a="this:v">
			<x path="Int"/>
			<c path="haxe.EnumFlags.T"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Checks if the index of enum instance `v` is set.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
	</has>
	<set public="1" get="inline" set="null" line="63" static="1">
		<f a="this:v">
			<x path="Int"/>
			<c path="haxe.EnumFlags.T"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Sets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
	</set>
	<unset public="1" get="inline" set="null" line="75" static="1">
		<f a="this:v">
			<x path="Int"/>
			<c path="haxe.EnumFlags.T"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Unsets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
	</unset>
	<ofInt public="1" params="T" get="inline" set="null" line="83" static="1">
		<f a="i">
			<x path="Int"/>
			<x path="haxe.EnumFlags"><c path="ofInt.T"/></x>
		</f>
		<haxe_doc>Convert a integer bitflag into a typed one (this is a no-op, it does not
		have any impact on speed).</haxe_doc>
	</ofInt>
	<toInt public="1" get="inline" set="null" line="91" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Convert the typed bitflag into the corresponding int value (this is a
		no-op, it doesn't have any impact on speed).</haxe_doc>
	</toInt>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="haxe._EnumFlags.EnumFlags_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/EnumFlags.hx" private="1" module="haxe.EnumFlags">
		<_new public="1" get="inline" set="null" line="39" static="1">
			<f a="?i" v="0">
				<x path="Int"/>
				<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
			</f>
			<meta>
				<m n=":value"><e>{ i : 0 }</e></m>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Initializes the bitflags to `i`.</haxe_doc>
		</_new>
		<has public="1" get="inline" set="null" line="51" static="1">
			<f a="this:v">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Checks if the index of enum instance `v` is set.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
		</has>
		<set public="1" get="inline" set="null" line="63" static="1">
			<f a="this:v">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Sets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
		</set>
		<unset public="1" get="inline" set="null" line="75" static="1">
			<f a="this:v">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Unsets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		`SomeEnum.SomeCtor`.

		If `v` is `null`, the result is unspecified.</haxe_doc>
		</unset>
		<ofInt public="1" params="T" get="inline" set="null" line="83" static="1">
			<f a="i">
				<x path="Int"/>
				<x path="haxe.EnumFlags"><c path="ofInt.T"/></x>
			</f>
			<haxe_doc>Convert a integer bitflag into a typed one (this is a no-op, it does not
		have any impact on speed).</haxe_doc>
		</ofInt>
		<toInt public="1" get="inline" set="null" line="91" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Convert the typed bitflag into the corresponding int value (this is a
		no-op, it doesn't have any impact on speed).</haxe_doc>
		</toInt>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.EnumTools" params="" file="/home/vsts/work/1/s/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="52" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		
			pack1.pack2.(...).packN.EnumName

		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="65" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="81" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `enum` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/home/vsts/work/1/s/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="133" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="144" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="158" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="170" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `EnumValue` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<typedef path="haxe.Http" params="" file="/home/vsts/work/1/s/std/haxe/Http.hx">
		<c path="sys.Http"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.Int32" params="" file="/home/vsts/work/1/s/std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
	all platforms.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/Int32.hx" private="1" module="haxe.Int32">
	<negate get="inline" set="null" line="30" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>-A</e></m>
		</meta>
	</negate>
	<preIncrement get="inline" set="null" line="33" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>++A</e></m>
		</meta>
	</preIncrement>
	<postIncrement get="inline" set="null" line="36" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</postIncrement>
	<preDecrement get="inline" set="null" line="42" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>--A</e></m>
		</meta>
	</preDecrement>
	<postDecrement get="inline" set="null" line="45" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A--</e></m>
		</meta>
	</postDecrement>
	<add get="inline" set="null" line="51" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</add>
	<addInt get="inline" set="null" line="54" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":op"><e>A + B</e></m>
			<m n=":commutative"/>
		</meta>
	</addInt>
	<sub get="inline" set="null" line="59" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</sub>
	<subInt get="inline" set="null" line="62" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subInt>
	<intSub get="inline" set="null" line="65" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</intSub>
	<toFloat get="inline" set="null" line="247" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toFloat>
	<ucompare public="1" set="method" line="253" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
	</ucompare>
	<clamp get="inline" set="null" line="264" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></clamp>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="haxe._Int32.Int32_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/Int32.hx" private="1" module="haxe.Int32">
		<negate get="inline" set="null" line="30" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>-A</e></m>
			</meta>
		</negate>
		<preIncrement get="inline" set="null" line="33" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>++A</e></m>
			</meta>
		</preIncrement>
		<postIncrement get="inline" set="null" line="36" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</postIncrement>
		<preDecrement get="inline" set="null" line="42" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>--A</e></m>
			</meta>
		</preDecrement>
		<postDecrement get="inline" set="null" line="45" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A--</e></m>
			</meta>
		</postDecrement>
		<add get="inline" set="null" line="51" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</add>
		<addInt get="inline" set="null" line="54" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":op"><e>A + B</e></m>
				<m n=":commutative"/>
			</meta>
		</addInt>
		<sub get="inline" set="null" line="59" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</sub>
		<subInt get="inline" set="null" line="62" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subInt>
		<intSub get="inline" set="null" line="65" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</intSub>
		<toFloat get="inline" set="null" line="247" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toFloat>
		<ucompare public="1" set="method" line="253" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
		</ucompare>
		<clamp get="inline" set="null" line="264" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></clamp>
		<meta><m n=":hxGen"/></meta>
	</class>
	<typedef path="haxe._Int64.__Int64" params="" file="/home/vsts/work/1/s/std/cs/_std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<x path="cs.Int64"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.Int64" params="" file="/home/vsts/work/1/s/std/cs/_std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<meta>
			<m n=":hxGen"/>
			<m n=":coreApi"/>
		</meta>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="/home/vsts/work/1/s/std/cs/_std/haxe/Int64.hx" private="1" module="haxe.Int64">
	<make public="1" get="inline" set="null" line="33" static="1">
		<f a="high:low">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":has_untyped"/></meta>
		<haxe_doc>Construct an Int64 from two 32-bit words `high` and `low`.</haxe_doc>
	</make>
	<_new get="inline" set="null" line="36" static="1">
		<f a="x">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<val get="accessor" set="accessor" static="1">
		<t path="haxe._Int64.__Int64"/>
		<meta><m n=":impl"/></meta>
	</val>
	<get_val get="inline" set="null" line="41" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<t path="haxe._Int64.__Int64"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_val>
	<set_val get="inline" set="null" line="44" static="1">
		<f a="this:x">
			<t path="haxe._Int64.__Int64"/>
			<t path="haxe._Int64.__Int64"/>
			<t path="haxe._Int64.__Int64"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_val>
	<high public="1" get="accessor" set="null" static="1">
		<x path="haxe.Int32"/>
		<meta><m n=":impl"/></meta>
	</high>
	<get_high public="1" get="inline" set="null" line="49" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_high>
	<low public="1" get="accessor" set="null" static="1">
		<x path="haxe.Int32"/>
		<meta><m n=":impl"/></meta>
	</low>
	<get_low public="1" get="inline" set="null" line="54" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_low>
	<copy public="1" get="inline" set="null" line="57" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Makes a copy of `this` Int64.</haxe_doc>
	</copy>
	<ofInt public="1" get="inline" set="null" line="60" static="1">
		<f a="x">
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>Returns an Int64 with the value of the Int `x`.
		`x` is sign-extended to fill 64 bits.</haxe_doc>
	</ofInt>
	<toInt public="1" get="inline" set="null" line="63" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Returns an Int with the value of the Int64 `x`.
		Throws an exception  if `x` cannot be represented in 32 bits.</haxe_doc>
	</toInt>
	<is public="1" get="inline" set="null" line="69" static="1">
		<f a="val">
			<d/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns whether the value `val` is of type `haxe.Int64`</haxe_doc>
	</is>
	<getHigh public="1" get="inline" set="null" line="72" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<haxe_doc>Returns the high 32-bit word of `x`.</haxe_doc>
	</getHigh>
	<getLow public="1" get="inline" set="null" line="75" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<haxe_doc>Returns the low 32-bit word of `x`.</haxe_doc>
	</getLow>
	<isNeg public="1" get="inline" set="null" line="78" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns `true` if `x` is less than zero.</haxe_doc>
	</isNeg>
	<isZero public="1" get="inline" set="null" line="81" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns `true` if `x` is exactly zero.</haxe_doc>
	</isZero>
	<compare public="1" get="inline" set="null" line="84" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc><![CDATA[Compares `a` and `b` in signed mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
	</compare>
	<ucompare public="1" get="inline" set="null" line="92" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc><![CDATA[Compares `a` and `b` in unsigned mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
	</ucompare>
	<toStr public="1" get="inline" set="null" line="98" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns a signed decimal `String` representation of `x`.</haxe_doc>
	</toStr>
	<divMod public="1" get="inline" set="null" line="101" static="1">
		<f a="dividend:divisor">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<a>
				<quotient><x path="haxe.Int64"/></quotient>
				<modulus><x path="haxe.Int64"/></modulus>
			</a>
		</f>
		<haxe_doc>Performs signed integer divison of `dividend` by `divisor`.
		Returns `{ quotient : Int64, modulus : Int64 }`.</haxe_doc>
	</divMod>
	<toString get="inline" set="null" line="104" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
	<parseString public="1" set="method" line="107" static="1"><f a="sParam">
	<c path="String"/>
	<x path="haxe.Int64"/>
</f></parseString>
	<fromFloat public="1" set="method" line="111" static="1"><f a="f">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></fromFloat>
	<neg public="1" set="method" line="115" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc>Returns the negative of `x`.</haxe_doc>
	</neg>
	<preIncrement get="inline" set="null" line="118" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>++A</e></m>
		</meta>
	</preIncrement>
	<postIncrement get="inline" set="null" line="121" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</postIncrement>
	<preDecrement get="inline" set="null" line="124" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>--A</e></m>
		</meta>
	</preDecrement>
	<postDecrement get="inline" set="null" line="127" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A--</e></m>
		</meta>
	</postDecrement>
	<add public="1" get="inline" set="null" line="130" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc>Returns the sum of `a` and `b`.</haxe_doc>
	</add>
	<addInt get="inline" set="null" line="133" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":op"><e>A + B</e></m>
			<m n=":commutative"/>
		</meta>
	</addInt>
	<sub public="1" get="inline" set="null" line="136" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc>Returns `a` minus `b`.</haxe_doc>
	</sub>
	<subInt get="inline" set="null" line="139" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subInt>
	<intSub get="inline" set="null" line="142" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</intSub>
	<mul public="1" get="inline" set="null" line="145" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
		<haxe_doc>Returns the product of `a` and `b`.</haxe_doc>
	</mul>
	<mulInt get="inline" set="null" line="148" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
	</mulInt>
	<div public="1" get="inline" set="null" line="151" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
		<haxe_doc>Returns the quotient of `a` divided by `b`.</haxe_doc>
	</div>
	<divInt get="inline" set="null" line="154" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divInt>
	<intDiv get="inline" set="null" line="157" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</intDiv>
	<mod public="1" get="inline" set="null" line="160" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
		<haxe_doc>Returns the modulus of `a` divided by `b`.</haxe_doc>
	</mod>
	<modInt get="inline" set="null" line="163" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</modInt>
	<intMod get="inline" set="null" line="166" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</intMod>
	<eq public="1" get="inline" set="null" line="169" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc>Returns `true` if `a` is equal to `b`.</haxe_doc>
	</eq>
	<eqInt get="inline" set="null" line="172" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":op"><e>A == B</e></m>
			<m n=":commutative"/>
		</meta>
	</eqInt>
	<neq public="1" get="inline" set="null" line="175" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc>Returns `true` if `a` is not equal to `b`.</haxe_doc>
	</neq>
	<neqInt get="inline" set="null" line="178" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":op"><e>A != B</e></m>
			<m n=":commutative"/>
		</meta>
	</neqInt>
	<lt get="inline" set="null" line="181" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</lt>
	<ltInt get="inline" set="null" line="184" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</ltInt>
	<intLt get="inline" set="null" line="187" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</intLt>
	<lte get="inline" set="null" line="190" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lte>
	<lteInt get="inline" set="null" line="193" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lteInt>
	<intLte get="inline" set="null" line="196" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</intLte>
	<gt get="inline" set="null" line="199" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gt>
	<gtInt get="inline" set="null" line="202" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gtInt>
	<intGt get="inline" set="null" line="205" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</intGt>
	<gte get="inline" set="null" line="208" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gte>
	<gteInt get="inline" set="null" line="211" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gteInt>
	<intGte get="inline" set="null" line="214" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</intGte>
	<complement get="inline" set="null" line="217" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>~A</e></m></meta>
	</complement>
	<and public="1" get="inline" set="null" line="220" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
		<haxe_doc>Returns the bitwise AND of `a` and `b`.</haxe_doc>
	</and>
	<or public="1" get="inline" set="null" line="223" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A | B</e></m></meta>
		<haxe_doc>Returns the bitwise OR of `a` and `b`.</haxe_doc>
	</or>
	<xor public="1" get="inline" set="null" line="226" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A ^ B</e></m></meta>
		<haxe_doc>Returns the bitwise XOR of `a` and `b`.</haxe_doc>
	</xor>
	<shl public="1" get="inline" set="null" line="229" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
		<haxe_doc>Returns `a` left-shifted by `b` bits.</haxe_doc>
	</shl>
	<shr public="1" get="inline" set="null" line="232" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
		<haxe_doc>Returns `a` right-shifted by `b` bits in signed mode.
		`a` is sign-extended.</haxe_doc>
	</shr>
	<ushr public="1" get="inline" set="null" line="235" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
		<haxe_doc>Returns `a` right-shifted by `b` bits in unsigned mode.
		`a` is padded with zeroes.</haxe_doc>
	</ushr>
	<meta>
		<m n=":hxGen"/>
		<m n=":coreApi"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe._Int64.Int64_Impl_" params="" file="/home/vsts/work/1/s/std/cs/_std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<make public="1" get="inline" set="null" line="33" static="1">
			<f a="high:low">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Construct an Int64 from two 32-bit words `high` and `low`.</haxe_doc>
		</make>
		<_new get="inline" set="null" line="36" static="1">
			<f a="x">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<val get="accessor" set="accessor" static="1">
			<t path="haxe._Int64.__Int64"/>
			<meta><m n=":impl"/></meta>
		</val>
		<get_val get="inline" set="null" line="41" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_val>
		<set_val get="inline" set="null" line="44" static="1">
			<f a="this:x">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_val>
		<high public="1" get="accessor" set="null" static="1">
			<x path="haxe.Int32"/>
			<meta><m n=":impl"/></meta>
		</high>
		<get_high public="1" get="inline" set="null" line="49" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_high>
		<low public="1" get="accessor" set="null" static="1">
			<x path="haxe.Int32"/>
			<meta><m n=":impl"/></meta>
		</low>
		<get_low public="1" get="inline" set="null" line="54" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_low>
		<copy public="1" get="inline" set="null" line="57" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Makes a copy of `this` Int64.</haxe_doc>
		</copy>
		<ofInt public="1" get="inline" set="null" line="60" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>Returns an Int64 with the value of the Int `x`.
		`x` is sign-extended to fill 64 bits.</haxe_doc>
		</ofInt>
		<toInt public="1" get="inline" set="null" line="63" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns an Int with the value of the Int64 `x`.
		Throws an exception  if `x` cannot be represented in 32 bits.</haxe_doc>
		</toInt>
		<is public="1" get="inline" set="null" line="69" static="1">
			<f a="val">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns whether the value `val` is of type `haxe.Int64`</haxe_doc>
		</is>
		<getHigh public="1" get="inline" set="null" line="72" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<haxe_doc>Returns the high 32-bit word of `x`.</haxe_doc>
		</getHigh>
		<getLow public="1" get="inline" set="null" line="75" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<haxe_doc>Returns the low 32-bit word of `x`.</haxe_doc>
		</getLow>
		<isNeg public="1" get="inline" set="null" line="78" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `x` is less than zero.</haxe_doc>
		</isNeg>
		<isZero public="1" get="inline" set="null" line="81" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `x` is exactly zero.</haxe_doc>
		</isZero>
		<compare public="1" get="inline" set="null" line="84" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Compares `a` and `b` in signed mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
		</compare>
		<ucompare public="1" get="inline" set="null" line="92" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Compares `a` and `b` in unsigned mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
		</ucompare>
		<toStr public="1" get="inline" set="null" line="98" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a signed decimal `String` representation of `x`.</haxe_doc>
		</toStr>
		<divMod public="1" get="inline" set="null" line="101" static="1">
			<f a="dividend:divisor">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<a>
					<quotient><x path="haxe.Int64"/></quotient>
					<modulus><x path="haxe.Int64"/></modulus>
				</a>
			</f>
			<haxe_doc>Performs signed integer divison of `dividend` by `divisor`.
		Returns `{ quotient : Int64, modulus : Int64 }`.</haxe_doc>
		</divMod>
		<toString get="inline" set="null" line="104" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
		<parseString public="1" set="method" line="107" static="1"><f a="sParam">
	<c path="String"/>
	<x path="haxe.Int64"/>
</f></parseString>
		<fromFloat public="1" set="method" line="111" static="1"><f a="f">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></fromFloat>
		<neg public="1" set="method" line="115" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc>Returns the negative of `x`.</haxe_doc>
		</neg>
		<preIncrement get="inline" set="null" line="118" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>++A</e></m>
			</meta>
		</preIncrement>
		<postIncrement get="inline" set="null" line="121" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</postIncrement>
		<preDecrement get="inline" set="null" line="124" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>--A</e></m>
			</meta>
		</preDecrement>
		<postDecrement get="inline" set="null" line="127" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A--</e></m>
			</meta>
		</postDecrement>
		<add public="1" get="inline" set="null" line="130" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc>Returns the sum of `a` and `b`.</haxe_doc>
		</add>
		<addInt get="inline" set="null" line="133" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":op"><e>A + B</e></m>
				<m n=":commutative"/>
			</meta>
		</addInt>
		<sub public="1" get="inline" set="null" line="136" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc>Returns `a` minus `b`.</haxe_doc>
		</sub>
		<subInt get="inline" set="null" line="139" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subInt>
		<intSub get="inline" set="null" line="142" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</intSub>
		<mul public="1" get="inline" set="null" line="145" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
			<haxe_doc>Returns the product of `a` and `b`.</haxe_doc>
		</mul>
		<mulInt get="inline" set="null" line="148" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
		</mulInt>
		<div public="1" get="inline" set="null" line="151" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
			<haxe_doc>Returns the quotient of `a` divided by `b`.</haxe_doc>
		</div>
		<divInt get="inline" set="null" line="154" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divInt>
		<intDiv get="inline" set="null" line="157" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</intDiv>
		<mod public="1" get="inline" set="null" line="160" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
			<haxe_doc>Returns the modulus of `a` divided by `b`.</haxe_doc>
		</mod>
		<modInt get="inline" set="null" line="163" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</modInt>
		<intMod get="inline" set="null" line="166" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</intMod>
		<eq public="1" get="inline" set="null" line="169" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc>Returns `true` if `a` is equal to `b`.</haxe_doc>
		</eq>
		<eqInt get="inline" set="null" line="172" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":op"><e>A == B</e></m>
				<m n=":commutative"/>
			</meta>
		</eqInt>
		<neq public="1" get="inline" set="null" line="175" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc>Returns `true` if `a` is not equal to `b`.</haxe_doc>
		</neq>
		<neqInt get="inline" set="null" line="178" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":op"><e>A != B</e></m>
				<m n=":commutative"/>
			</meta>
		</neqInt>
		<lt get="inline" set="null" line="181" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</lt>
		<ltInt get="inline" set="null" line="184" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</ltInt>
		<intLt get="inline" set="null" line="187" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</intLt>
		<lte get="inline" set="null" line="190" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lte>
		<lteInt get="inline" set="null" line="193" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lteInt>
		<intLte get="inline" set="null" line="196" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</intLte>
		<gt get="inline" set="null" line="199" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gt>
		<gtInt get="inline" set="null" line="202" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gtInt>
		<intGt get="inline" set="null" line="205" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</intGt>
		<gte get="inline" set="null" line="208" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gte>
		<gteInt get="inline" set="null" line="211" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gteInt>
		<intGte get="inline" set="null" line="214" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</intGte>
		<complement get="inline" set="null" line="217" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>~A</e></m></meta>
		</complement>
		<and public="1" get="inline" set="null" line="220" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
			<haxe_doc>Returns the bitwise AND of `a` and `b`.</haxe_doc>
		</and>
		<or public="1" get="inline" set="null" line="223" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A | B</e></m></meta>
			<haxe_doc>Returns the bitwise OR of `a` and `b`.</haxe_doc>
		</or>
		<xor public="1" get="inline" set="null" line="226" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A ^ B</e></m></meta>
			<haxe_doc>Returns the bitwise XOR of `a` and `b`.</haxe_doc>
		</xor>
		<shl public="1" get="inline" set="null" line="229" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
			<haxe_doc>Returns `a` left-shifted by `b` bits.</haxe_doc>
		</shl>
		<shr public="1" get="inline" set="null" line="232" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
			<haxe_doc>Returns `a` right-shifted by `b` bits in signed mode.
		`a` is sign-extended.</haxe_doc>
		</shr>
		<ushr public="1" get="inline" set="null" line="235" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
			<haxe_doc>Returns `a` right-shifted by `b` bits in unsigned mode.
		`a` is padded with zeroes.</haxe_doc>
		</ushr>
		<meta>
			<m n=":hxGen"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.Int64Helper" params="" file="/home/vsts/work/1/s/std/haxe/Int64Helper.hx">
		<parseString public="1" set="method" line="36" static="1">
			<f a="sParam">
				<c path="String"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Create `Int64` from given string.</haxe_doc>
		</parseString>
		<fromFloat public="1" set="method" line="79" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Create `Int64` from given float.</haxe_doc>
		</fromFloat>
		<haxe_doc>Helper for parsing to `Int64` instances.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.Json" params="" file="/home/vsts/work/1/s/std/haxe/Json.hx">
		<parse public="1" get="inline" set="null" line="43" static="1">
			<f a="text">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Parses given JSON-encoded `text` and returns the resulting object.

		JSON objects are parsed into anonymous structures and JSON arrays
		are parsed into `Array<Dynamic>`.

		If given `text` is not valid JSON, an exception will be thrown.

		@see https://haxe.org/manual/std-Json-parsing.html]]></haxe_doc>
		</parse>
		<stringify public="1" get="inline" set="null" line="59" static="1">
			<f a="value:?replacer:?space">
				<d/>
				<f a="key:value">
					<d/>
					<d/>
					<d/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes the given `value` and returns the resulting JSON string.

		If `replacer` is given and is not null, it is used to retrieve the
		actual object to be encoded. The `replacer` function takes two parameters,
		the key and the value being encoded. Initial key value is an empty string.

		If `space` is given and is not null, the result will be pretty-printed.
		Successive levels will be indented by this string.

		@see https://haxe.org/manual/std-Json-encoding.html</haxe_doc>
		</stringify>
		<haxe_doc>Cross-platform JSON API: it will automatically use the optimized native API if available.
	Use `-D haxeJSON` to force usage of the Haxe implementation even if a native API is found:
	This will provide extra encoding features such as enums (replaced by their index) and StringMaps.

	@see https://haxe.org/manual/std-Json.html</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.Log" params="" file="/home/vsts/work/1/s/std/haxe/Log.hx">
		<formatOutput public="1" set="method" line="33" static="1">
			<f a="v:infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<c path="String"/>
			</f>
			<haxe_doc>Format the output of `trace` before printing it.</haxe_doc>
		</formatOutput>
		<trace public="1" set="dynamic" line="62" static="1">
			<f a="v:?infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the `trace()` call was made.

		This method can be rebound to a custom function:

			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v, ?infos) {
			  // handle trace
			}
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to `trace()` will cause an
		exception.</haxe_doc>
		</trace>
		<haxe_doc>Log primarily provides the `trace()` method, which is invoked upon a call to
	`trace()` in Haxe code.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.MainEvent" params="" file="/home/vsts/work/1/s/std/haxe/MainLoop.hx" module="haxe.MainLoop">
		<f><f a=""><x path="Void"/></f></f>
		<prev><c path="haxe.MainEvent"/></prev>
		<next><c path="haxe.MainEvent"/></next>
		<isBlocking public="1" expr="true" line="13">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
			<haxe_doc>Tells if the event can lock the process from exiting (default:true)</haxe_doc>
		</isBlocking>
		<nextRun public="1" set="null"><x path="Float"/></nextRun>
		<priority public="1" set="null"><x path="Int"/></priority>
		<delay public="1" set="method" line="28">
			<f a="t">
				<x path="Null"><x path="Float"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Delay the execution of the event for the given time, in seconds.
		If t is null, the event will be run at tick() time.</haxe_doc>
		</delay>
		<call public="1" get="inline" set="null" line="35">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Call the event. Will do nothing if the event has been stopped.</haxe_doc>
		</call>
		<stop public="1" set="method" line="43">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stop the event from firing anymore.</haxe_doc>
		</stop>
		<new set="method" line="18"><f a="f:p">
	<f a=""><x path="Void"/></f>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.MainLoop" params="" file="/home/vsts/work/1/s/std/haxe/MainLoop.hx">
		<pending static="1"><c path="haxe.MainEvent"/></pending>
		<threadCount public="1" get="accessor" set="null" static="1"><x path="Int"/></threadCount>
		<get_threadCount get="inline" set="null" line="63" static="1"><f a=""><x path="Int"/></f></get_threadCount>
		<hasEvents public="1" set="method" line="66" static="1"><f a=""><x path="Bool"/></f></hasEvents>
		<addThread public="1" set="method" line="76" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></addThread>
		<runInMainThread public="1" set="method" line="80" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></runInMainThread>
		<add public="1" set="method" line="87" static="1">
			<f a="f:?priority" v=":0">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<c path="haxe.MainEvent"/>
			</f>
			<meta><m n=":value"><e>{ priority : 0 }</e></m></meta>
			<haxe_doc>Add a pending event to be run into the main loop.</haxe_doc>
		</add>
		<sortEvents set="method" line="99" static="1"><f a=""><x path="Void"/></f></sortEvents>
		<tick set="method" line="164" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Run the pending events. Return the time for next event.</haxe_doc>
		</tick>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
			<m n=":access"><e>haxe.MainEvent</e></m>
		</meta>
	</class>
	<typedef path="haxe.PosInfos" params="" file="/home/vsts/work/1/s/std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<x path="Null"><c path="Array"><d/></c></x>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>`PosInfos` is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	`(..., ?pos:haxe.PosInfos)`, each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<class path="haxe.Resource" params="" file="/home/vsts/work/1/s/std/cs/_std/haxe/Resource.hx">
		<content static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":keep"/></meta>
		</content>
		<paths static="1"><t path="Map">
	<c path="String"/>
	<c path="String"/>
</t></paths>
		<getPaths set="method" line="29" static="1">
			<f a=""><t path="Map">
	<c path="String"/>
	<c path="String"/>
</t></f>
			<meta><m n=":keep"/></meta>
		</getPaths>
		<listNames public="1" get="inline" set="null" line="43" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Lists all available resource names. The resource name is the name part
		of the `--resource file@name` command line parameter.</haxe_doc>
		</listNames>
		<getString public="1" set="method" line="48" static="1">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":access"><e>haxe.io.Path.escape</e></m></meta>
			<haxe_doc>Retrieves the resource identified by `name` as a `String`.

		If `name` does not match any resource name, `null` is returned.</haxe_doc>
		</getString>
		<getBytes public="1" set="method" line="60" static="1">
			<f a="name">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":access"><e>haxe.io.Path.escape</e></m></meta>
			<haxe_doc>Retrieves the resource identified by `name` as an instance of
		haxe.io.Bytes.

		If `name` does not match any resource name, `null` is returned.</haxe_doc>
		</getBytes>
		<haxe_doc>Resource can be used to access resources that were added through the
	`--resource file@name` command line parameter.

	Depending on their type they can be obtained as `String` through
	`getString(name)`, or as binary data through `getBytes(name)`.

	A list of all available resource names can be obtained from `listNames()`.</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.Serializer" params="" file="/home/vsts/work/1/s/std/haxe/Serializer.hx">
		<USE_CACHE public="1" expr="false" line="57" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>If the values you are serializing can contain circular references or
		objects repetitions, you should set `USE_CACHE` to true to prevent
		infinite loops.

		This may also reduce the size of serialization Strings at the expense of
		performance.

		This value can be changed for individual instances of `Serializer` by
		setting their `useCache` field.</haxe_doc>
		</USE_CACHE>
		<USE_ENUM_INDEX public="1" expr="false" line="69" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>Use constructor indexes for enums instead of names.

		This may reduce the size of serialization Strings, but makes them less
		suited for long-term storage: If constructors are removed or added from
		the enum, the indices may no longer match.

		This value can be changed for individual instances of `Serializer` by
		setting their `useEnumIndex` field.</haxe_doc>
		</USE_ENUM_INDEX>
		<BASE64 expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:&quot;" line="71" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:"</e></m></meta>
		</BASE64>
		<BASE64_CODES expr="null" line="72" static="1">
			<x path="haxe.ds.Vector"><x path="Null"><x path="Int"/></x></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</BASE64_CODES>
		<run public="1" set="method" line="575" static="1">
			<f a="v">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Serializes `v` and returns the String representation.

	This is a convenience function for creating a new instance of
	Serializer, serialize `v` into it and obtain the result through a call
	to `toString()`.</haxe_doc>
		</run>
		<buf><c path="StringBuf"/></buf>
		<cache><c path="Array"><d/></c></cache>
		<shash><c path="haxe.ds.StringMap"><x path="Int"/></c></shash>
		<scount><x path="Int"/></scount>
		<useCache public="1">
			<x path="Bool"/>
			<haxe_doc>The individual cache setting for `this` Serializer instance.

		See `USE_CACHE` for a complete description.</haxe_doc>
		</useCache>
		<useEnumIndex public="1">
			<x path="Bool"/>
			<haxe_doc>The individual enum index setting for `this` Serializer instance.

		See `USE_ENUM_INDEX` for a complete description.</haxe_doc>
		</useEnumIndex>
		<toString public="1" set="method" line="118">
			<f a=""><c path="String"/></f>
			<haxe_doc>Return the String representation of `this` Serializer.

		The exact format specification can be found here:
		https://haxe.org/manual/serialization/format</haxe_doc>
		</toString>
		<serializeString set="method" line="154"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></serializeString>
		<serializeRef set="method" line="174"><f a="v">
	<d/>
	<x path="Bool"/>
</f></serializeRef>
		<serializeFields set="method" line="211"><f a="v">
	<a/>
	<x path="Void"/>
</f></serializeFields>
		<serialize public="1" set="method" line="229">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Serializes `v`.

	All haxe-defined values and objects with the exception of functions can
	be serialized. Serialization of external/native objects is not
	guaranteed to work.

	The values of `this.useCache` and `this.useEnumIndex` may affect
	serialization output.</haxe_doc>
		</serialize>
		<__getField get="inline" set="null" line="549"><f a="o:f">
	<d/>
	<c path="String"/>
	<d/>
</f></__getField>
		<serializeException public="1" set="method" line="552"><f a="e">
	<d/>
	<x path="Void"/>
</f></serializeException>
		<new public="1" set="method" line="103">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Serializer instance.

		Subsequent calls to `this.serialize` will append values to the
		internal buffer of this String. Once complete, the contents can be
		retrieved through a call to `this.toString`.

		Each `Serializer` instance maintains its own cache if `this.useCache` is
		`true`.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The Serializer class can be used to encode values and objects into a `String`,
	from which the `Unserializer` class can recreate the original representation.

	This class can be used in two ways:

	- create a `new Serializer()` instance, call its `serialize()` method with
		any argument and finally retrieve the String representation from
		`toString()`
	- call `Serializer.run()` to obtain the serialized representation of a
		single argument

	Serialization is guaranteed to work for all haxe-defined classes, but may
	or may not work for instances of external/native classes.

	The specification of the serialization format can be found here:
	<https://haxe.org/manual/std-serialization-format.html>]]></haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<enum path="haxe._Template.TemplateExpr" params="" file="/home/vsts/work/1/s/std/haxe/Template.hx" private="1" module="haxe.Template">
		<OpVar a="v"><c path="String"/></OpVar>
		<OpExpr a="expr"><f a=""><d/></f></OpExpr>
		<OpIf a="expr:eif:eelse">
			<f a=""><d/></f>
			<e path="haxe._Template.TemplateExpr"/>
			<e path="haxe._Template.TemplateExpr"/>
		</OpIf>
		<OpStr a="str"><c path="String"/></OpStr>
		<OpBlock a="l"><c path="haxe.ds.List"><e path="haxe._Template.TemplateExpr"/></c></OpBlock>
		<OpForeach a="expr:loop">
			<f a=""><d/></f>
			<e path="haxe._Template.TemplateExpr"/>
		</OpForeach>
		<OpMacro a="name:params">
			<c path="String"/>
			<c path="haxe.ds.List"><e path="haxe._Template.TemplateExpr"/></c>
		</OpMacro>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<typedef path="haxe._Template.Token" params="" file="/home/vsts/work/1/s/std/haxe/Template.hx" private="1" module="haxe.Template">
		<a>
			<s><x path="Bool"/></s>
			<p><c path="String"/></p>
			<l><c path="Array"><c path="String"/></c></l>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe._Template.ExprToken" params="" file="/home/vsts/work/1/s/std/haxe/Template.hx" private="1" module="haxe.Template">
		<a>
			<s><x path="Bool"/></s>
			<p><c path="String"/></p>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<class path="haxe.Template" params="" file="/home/vsts/work/1/s/std/haxe/Template.hx">
		<splitter expr="~/(::[A-Za-z0-9_ ()&amp;|!+=/&gt;&lt;*.&quot;-]+::|\$\$([A-Za-z0-9_-]+)\()/" line="58" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e><![CDATA[~/(::[A-Za-z0-9_ ()&|!+=/><*."-]+::|\$\$([A-Za-z0-9_-]+)\()/]]></e></m></meta>
		</splitter>
		<expr_splitter expr="~/(\(|\)|[ 
	]*&quot;[^&quot;]*&quot;[ 
	]*|[!+=/&gt;&lt;*.&amp;|-]+)/" line="59" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e><![CDATA[~/(\(|\)|[ 
	]*"[^"]*"[ 
	]*|[!+=/><*.&|-]+)/]]></e></m></meta>
		</expr_splitter>
		<expr_trim expr="~/^[ ]*([^ ]+)[ ]*$/" line="60" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[ ]*([^ ]+)[ ]*$/</e></m></meta>
		</expr_trim>
		<expr_int expr="~/^[0-9]+$/" line="61" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[0-9]+$/</e></m></meta>
		</expr_int>
		<expr_float expr="~/^([+-]?)(?=\d|,\d)\d*(,\d*)?([Ee]([+-]?\d+))?$/" line="62" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^([+-]?)(?=\d|,\d)\d*(,\d*)?([Ee]([+-]?\d+))?$/</e></m></meta>
		</expr_float>
		<globals public="1" expr="{ }" line="68" static="1">
			<d/>
			<meta><m n=":value"><e>{ }</e></m></meta>
			<haxe_doc>Global replacements which are used across all `Template` instances. This
		has lower priority than the context argument of `execute()`.</haxe_doc>
		</globals>
		<hxKeepArrayIterator expr="[].iterator()" line="71" static="1">
			<t path="Iterator"><unknown/></t>
			<meta>
				<m n=":value"><e>[].iterator()</e></m>
				<m n=":ifFeature"><e>"haxe.Template.run"</e></m>
			</meta>
		</hxKeepArrayIterator>
		<expr><e path="haxe._Template.TemplateExpr"/></expr>
		<context><d/></context>
		<macros><d/></macros>
		<stack><c path="haxe.ds.List"><d/></c></stack>
		<buf><c path="StringBuf"/></buf>
		<execute public="1" set="method" line="112">
			<f a="context:?macros">
				<d/>
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Executes `this` `Template`, taking into account `context` for
		replacements and `macros` for callback functions.

		If `context` has a field `name`, its value replaces all occurrences of
		`::name::` in the `Template`. Otherwise `Template.globals` is checked instead,
		If `name` is not a field of that either, `::name::` is replaced with `null`.

		If `macros` has a field `name`, all occurrences of `$$name(args)` are
		replaced with the result of calling that field. The first argument is
		always the `resolve()` method, followed by the given arguments.
		If `macros` has no such field, the result is unspecified.

		If `context` is `null`, the result is unspecified. If `macros` is `null`,
		no macros are used.</haxe_doc>
		</execute>
		<resolve set="method" line="121"><f a="v">
	<c path="String"/>
	<d/>
</f></resolve>
		<parseTokens set="method" line="135"><f a="data">
	<c path="String"/>
	<c path="haxe.ds.List"><t path="haxe._Template.Token"/></c>
</f></parseTokens>
		<parseBlock set="method" line="182"><f a="tokens">
	<c path="haxe.ds.List"><t path="haxe._Template.Token"/></c>
	<e path="haxe._Template.TemplateExpr"/>
</f></parseBlock>
		<parse set="method" line="197"><f a="tokens">
	<c path="haxe.ds.List"><t path="haxe._Template.Token"/></c>
	<e path="haxe._Template.TemplateExpr"/>
</f></parse>
		<parseExpr set="method" line="263"><f a="data">
	<c path="String"/>
	<f a=""><unknown/></f>
</f></parseExpr>
		<makeConst set="method" line="302"><f a="v">
	<c path="String"/>
	<f a=""><d/></f>
</f></makeConst>
		<makePath set="method" line="327"><f a="e:l">
	<f a=""><d/></f>
	<c path="haxe.ds.List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makePath>
		<makeExpr set="method" line="343"><f a="l">
	<c path="haxe.ds.List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makeExpr>
		<skipSpaces set="method" line="347"><f a="l">
	<c path="haxe.ds.List"><t path="haxe._Template.ExprToken"/></c>
	<x path="Void"/>
</f></skipSpaces>
		<makeExpr2 set="method" line="360"><f a="l">
	<c path="haxe.ds.List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makeExpr2>
		<run set="method" line="439"><f a="e">
	<e path="haxe._Template.TemplateExpr"/>
	<x path="Void"/>
</f></run>
		<new public="1" set="method" line="89">
			<f a="str">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new `Template` instance from `str`.

		`str` is parsed into tokens, which are stored for internal use. This
		means that multiple `execute()` operations on a single `Template` instance
		are more efficient than one `execute()` operations on multiple `Template`
		instances.

		If `str` is `null`, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[`Template` provides a basic templating mechanism to replace values in a source
	String, and to have some basic logic.

	A complete documentation of the supported syntax is available at:
	<https://haxe.org/manual/std-template.html>]]></haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.Timer" params="" file="/home/vsts/work/1/s/std/haxe/Timer.hx">
		<delay public="1" set="method" line="139" static="1">
			<f a="f:time_ms">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<c path="haxe.Timer"/>
			</f>
			<haxe_doc>Invokes `f` after `time_ms` milliseconds.

		This is a convenience function for creating a new Timer instance with
		`time_ms` as argument, binding its `run()` method to `f` and then stopping
		`this` Timer upon the first invocation.

		If `f` is `null`, the result is unspecified.</haxe_doc>
		</delay>
		<measure public="1" params="T" set="method" line="159" static="1">
			<f a="f:?pos">
				<f a=""><c path="measure.T"/></f>
				<t path="haxe.PosInfos"/>
				<c path="measure.T"/>
			</f>
			<haxe_doc>Measures the time it takes to execute `f`, in seconds with fractions.

		This is a convenience function for calculating the difference between
		`Timer.stamp()` before and after the invocation of `f`.

		The difference is passed as argument to `Log.trace()`, with `"s"` appended
		to denote the unit. The optional `pos` argument is passed through.

		If `f` is `null`, the result is unspecified.</haxe_doc>
		</measure>
		<stamp public="1" get="inline" set="null" line="172" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a timestamp, in seconds with fractions.

		The value itself might differ depending on platforms, only differences
		between two values make sense.</haxe_doc>
		</stamp>
		<event><c path="haxe.MainEvent"/></event>
		<stop public="1" set="method" line="90">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stops `this` Timer.

		After calling this method, no additional invocations of `this.run`
		will occur.

		It is not possible to restart `this` Timer once stopped.</haxe_doc>
		</stop>
		<run public="1" set="dynamic" line="128">
			<f a=""><x path="Void"/></f>
			<haxe_doc>This method is invoked repeatedly on `this` Timer.

		It can be overridden in a subclass, or rebound directly to a custom
		function:

		```haxe
		var timer = new haxe.Timer(1000); // 1000ms delay
		timer.run = function() { ... }
		```
		
		Once bound, it can still be rebound to different functions until `this`
		Timer is stopped through a call to `this.stop`.</haxe_doc>
		</run>
		<new public="1" set="method" line="60">
			<f a="time_ms">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new timer that will run every `time_ms` milliseconds.

		After creating the Timer instance, it calls `this.run` repeatedly,
		with delays of `time_ms` milliseconds, until `this.stop` is called.

		The first invocation occurs after `time_ms` milliseconds, not
		immediately.

		The accuracy of this may be platform-dependent.</haxe_doc>
		</new>
		<haxe_doc>The `Timer` class allows you to create asynchronous timers on platforms that
	support events.

	The intended usage is to create an instance of the `Timer` class with a given
	interval, set its `run()` method to a custom function to be invoked and
	eventually call `stop()` to stop the `Timer`.

	Note that a running `Timer` may or may not prevent the program to exit
	automatically when `main()` returns.

	It is also possible to extend this class and override its `run()` method in
	the child class.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<abstract path="haxe.Ucs2" params="" file="/home/vsts/work/1/s/std/haxe/Ucs2.hx">
		<this><c path="String"/></this>
		<haxe_doc>Cross platform UCS2 string API.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
		<impl><class path="haxe._Ucs2.Ucs2_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/Ucs2.hx" private="1" module="haxe.Ucs2">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<_new get="inline" set="null" line="31" static="1">
		<f a="str">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<get_length get="inline" set="null" line="40" static="1">
		<f a="this">
			<c path="String"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<toUpperCase public="1" get="inline" set="null" line="49" static="1">
		<f a="this">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
	</toUpperCase>
	<toLowerCase public="1" get="inline" set="null" line="58" static="1">
		<f a="this">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
	</toLowerCase>
	<charAt public="1" get="inline" set="null" line="68" static="1">
		<f a="this:index">
			<c path="String"/>
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the character at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, the empty Ucs2 ""
		is returned.</haxe_doc>
	</charAt>
	<charCodeAt public="1" get="inline" set="null" line="81" static="1">
		<f a="this:index">
			<c path="String"/>
			<x path="Int"/>
			<x path="Null"><x path="Int"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the character code at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be used
		instead to extern public inline the character code at compile time. Note that this
		only works on Ucs2 literals of length 1.</haxe_doc>
	</charCodeAt>
	<indexOf public="1" get="inline" set="null" line="96" static="1">
		<f a="this:str:?startIndex">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 starting from `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
	</indexOf>
	<lastIndexOf public="1" get="inline" set="null" line="111" static="1">
		<f a="this:str:?startIndex">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 from 0 to `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
	</lastIndexOf>
	<split public="1" get="inline" set="null" line="135" static="1">
		<f a="this:delimiter">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
			<c path="Array"><x path="haxe.Ucs2"/></c>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Splits `this` Ucs2 at each occurrence of `delimiter`.

		If `this` Ucs2 is the empty Ucs2 "", the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty Ucs2 "", `this` Ucs2 is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` Ucs2.

		If `delimiter` is not found within `this` Ucs2, the result is an Array
		with one element, which equals `this` Ucs2.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` Ucs2 is split into parts at each occurrence of
		`delimiter`. If `this` Ucs2 starts (or ends) with `delimiter`, the
		result Array contains a leading (or trailing) empty Ucs2 "" element.
		Two subsequent delimiters also result in an empty Ucs2 "" element.</haxe_doc>
	</split>
	<substr public="1" get="inline" set="null" line="154" static="1">
		<f a="this:pos:?len">
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns `len` characters of `this` Ucs2, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` Ucs2 are included.

		If `pos` is negative, its value is calculated from the end of `this`
		Ucs2 by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` Ucs2 are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
	</substr>
	<substring public="1" get="inline" set="null" line="171" static="1">
		<f a="this:startIndex:?endIndex">
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the part of `this` Ucs2 from `startIndex` to `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		Ucs2 "" is returned.</haxe_doc>
	</substring>
	<toNativeString public="1" get="inline" set="null" line="178" static="1">
		<f a="this">
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the native underlying String.</haxe_doc>
	</toNativeString>
	<fromCharCode public="1" get="inline" set="null" line="188" static="1">
		<f a="code">
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<haxe_doc>Returns the Ucs2 corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
	</fromCharCode>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="haxe._Ucs2.Ucs2_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/Ucs2.hx" private="1" module="haxe.Ucs2">
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<_new get="inline" set="null" line="31" static="1">
			<f a="str">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<get_length get="inline" set="null" line="40" static="1">
			<f a="this">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<toUpperCase public="1" get="inline" set="null" line="49" static="1">
			<f a="this">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" get="inline" set="null" line="58" static="1">
			<f a="this">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<charAt public="1" get="inline" set="null" line="68" static="1">
			<f a="this:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the character at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, the empty Ucs2 ""
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" get="inline" set="null" line="81" static="1">
			<f a="this:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the character code at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be used
		instead to extern public inline the character code at compile time. Note that this
		only works on Ucs2 literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" get="inline" set="null" line="96" static="1">
			<f a="this:str:?startIndex">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 starting from `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" get="inline" set="null" line="111" static="1">
			<f a="this:str:?startIndex">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 from 0 to `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" get="inline" set="null" line="135" static="1">
			<f a="this:delimiter">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
				<c path="Array"><x path="haxe.Ucs2"/></c>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Splits `this` Ucs2 at each occurrence of `delimiter`.

		If `this` Ucs2 is the empty Ucs2 "", the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty Ucs2 "", `this` Ucs2 is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` Ucs2.

		If `delimiter` is not found within `this` Ucs2, the result is an Array
		with one element, which equals `this` Ucs2.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` Ucs2 is split into parts at each occurrence of
		`delimiter`. If `this` Ucs2 starts (or ends) with `delimiter`, the
		result Array contains a leading (or trailing) empty Ucs2 "" element.
		Two subsequent delimiters also result in an empty Ucs2 "" element.</haxe_doc>
		</split>
		<substr public="1" get="inline" set="null" line="154" static="1">
			<f a="this:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns `len` characters of `this` Ucs2, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` Ucs2 are included.

		If `pos` is negative, its value is calculated from the end of `this`
		Ucs2 by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` Ucs2 are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" get="inline" set="null" line="171" static="1">
			<f a="this:startIndex:?endIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the part of `this` Ucs2 from `startIndex` to `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		Ucs2 "" is returned.</haxe_doc>
		</substring>
		<toNativeString public="1" get="inline" set="null" line="178" static="1">
			<f a="this">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the native underlying String.</haxe_doc>
		</toNativeString>
		<fromCharCode public="1" get="inline" set="null" line="188" static="1">
			<f a="code">
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<haxe_doc>Returns the Ucs2 corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="haxe._Unserializer.DefaultResolver" params="" file="/home/vsts/work/1/s/std/haxe/Unserializer.hx" private="1" module="haxe.Unserializer">
		<resolveClass public="1" get="inline" set="null" line="473"><f a="name">
	<c path="String"/>
	<x path="Class"><d/></x>
</f></resolveClass>
		<resolveEnum public="1" get="inline" set="null" line="476"><f a="name">
	<c path="String"/>
	<x path="Enum"><d/></x>
</f></resolveEnum>
		<new public="1" set="method" line="471"><f a=""><x path="Void"/></f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.Unserializer" params="" file="/home/vsts/work/1/s/std/haxe/Unserializer.hx">
		<DEFAULT_RESOLVER public="1" expr="new DefaultResolver()" line="65" static="1">
			<t path="haxe.TypeResolver"/>
			<meta><m n=":value"><e>new DefaultResolver()</e></m></meta>
			<haxe_doc><![CDATA[This value can be set to use custom type resolvers.

		A type resolver finds a `Class` or `Enum` instance from a given `String`.
		By default, the Haxe `Type` Api is used.

		A type resolver must provide two methods:

		1. `resolveClass(name:String):Class<Dynamic>` is called to determine a
				`Class` from a class name
		2. `resolveEnum(name:String):Enum<Dynamic>` is called to determine an
				`Enum` from an enum name

		This value is applied when a new `Unserializer` instance is created.
		Changing it afterwards has no effect on previously created instances.]]></haxe_doc>
		</DEFAULT_RESOLVER>
		<BASE64 expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:&quot;" line="67" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:"</e></m></meta>
		</BASE64>
		<CODES expr="null" line="70" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>null</e></m></meta>
		</CODES>
		<initCodes set="method" line="72" static="1"><f a=""><c path="Array"><x path="Int"/></c></f></initCodes>
		<run public="1" set="method" line="461" static="1">
			<f a="v">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Unserializes `v` and returns the according value.

		This is a convenience function for creating a new instance of
		Unserializer with `v` as buffer and calling its `unserialize()` method
		once.</haxe_doc>
		</run>
		<buf><c path="String"/></buf>
		<pos><x path="Int"/></pos>
		<length><x path="Int"/></length>
		<cache><c path="Array"><d/></c></cache>
		<scache><c path="Array"><c path="String"/></c></scache>
		<resolver><t path="haxe.TypeResolver"/></resolver>
		<setResolver public="1" set="method" line="124">
			<f a="r">
				<t path="haxe.TypeResolver"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the type resolver of `this` Unserializer instance to `r`.

		If `r` is `null`, a special resolver is used which returns `null` for all
		input values.

		See `DEFAULT_RESOLVER` for more information on type resolvers.</haxe_doc>
		</setResolver>
		<getResolver public="1" set="method" line="136">
			<f a=""><t path="haxe.TypeResolver"/></f>
			<haxe_doc>Gets the type resolver of `this` Unserializer instance.

		See `DEFAULT_RESOLVER` for more information on type resolvers.</haxe_doc>
		</getResolver>
		<get get="inline" set="null" line="140"><f a="p">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<readDigits set="method" line="144"><f a=""><x path="Int"/></f></readDigits>
		<readFloat set="method" line="169"><f a=""><x path="Float"/></f></readFloat>
		<unserializeObject set="method" line="184"><f a="o">
	<a/>
	<x path="Void"/>
</f></unserializeObject>
		<unserializeEnum params="T" set="method" line="199"><f a="edecl:tag">
	<x path="Enum"><c path="unserializeEnum.T"/></x>
	<c path="String"/>
	<c path="unserializeEnum.T"/>
</f></unserializeEnum>
		<unserialize public="1" set="method" line="231">
			<f a=""><d/></f>
			<haxe_doc>Unserializes the next part of `this` Unserializer instance and returns
		the according value.

		This function may call `this.resolver.resolveClass` to determine a
		Class from a String, and `this.resolver.resolveEnum` to determine an
		Enum from a String.

		If `this` Unserializer instance contains no more or invalid data, an
		exception is thrown.

		This operation may fail on structurally valid data if a type cannot be
		resolved or if a field cannot be set. This can happen when unserializing
		Strings that were serialized on a different Haxe target, in which the
		serialization side has to make sure not to include platform-specific
		data.

		Classes are created from `Type.createEmptyInstance`, which means their
		constructors are not called.</haxe_doc>
		</unserialize>
		<new public="1" set="method" line="99">
			<f a="buf">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Unserializer instance, with its internal buffer
		initialized to `buf`.

		This does not parse `buf` immediately. It is parsed only when calls to
		`this.unserialize` are made.

		Each Unserializer instance maintains its own cache.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Unserializer` class is the complement to the `Serializer` class. It parses
	a serialization `String` and creates objects from the contained data.

	This class can be used in two ways:

	- create a `new Unserializer()` instance with a given serialization
		String, then call its `unserialize()` method until all values are
		extracted
	- call `Unserializer.run()`  to unserialize a single value from a given
		String

	The specification of the serialization format can be found here:
	<https://haxe.org/manual/serialization/format>]]></haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe._Unserializer.NullResolver" params="" file="/home/vsts/work/1/s/std/haxe/Unserializer.hx" private="1" module="haxe.Unserializer">
		<instance public="1" get="accessor" set="null" static="1"><c path="haxe._Unserializer.NullResolver"/></instance>
		<get_instance get="inline" set="null" line="491" static="1"><f a=""><c path="haxe._Unserializer.NullResolver"/></f></get_instance>
		<resolveClass public="1" get="inline" set="null" line="483"><f a="name">
	<c path="String"/>
	<x path="Class"><d/></x>
</f></resolveClass>
		<resolveEnum public="1" get="inline" set="null" line="486"><f a="name">
	<c path="String"/>
	<x path="Enum"><d/></x>
</f></resolveEnum>
		<new set="method" line="481"><f a=""><x path="Void"/></f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.Utf8" params="" file="/home/vsts/work/1/s/std/haxe/Utf8.hx">
		<iter public="1" set="method" line="57" static="1">
			<f a="s:chars">
				<c path="String"/>
				<f a="">
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Call the `chars` function for each UTF8 char of the string.</haxe_doc>
		</iter>
		<encode public="1" set="method" line="65" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encode the input ISO string into the corresponding UTF8 one.</haxe_doc>
		</encode>
		<decode public="1" set="method" line="73" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Decode an UTF8 string back to an ISO string.
		Throw an exception if a given UTF8 character is not supported by the decoder.</haxe_doc>
		</decode>
		<charCodeAt public="1" get="inline" set="null" line="80" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Similar to `String.charCodeAt` but uses the UTF8 character position.</haxe_doc>
		</charCodeAt>
		<validate public="1" get="inline" set="null" line="87" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the String is correctly encoded as UTF8.</haxe_doc>
		</validate>
		<length public="1" get="inline" set="null" line="97" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of UTF8 chars of the String.</haxe_doc>
		</length>
		<compare public="1" set="method" line="104" static="1">
			<f a="a:b">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compare two UTF8 strings, character by character.</haxe_doc>
		</compare>
		<sub public="1" get="inline" set="null" line="111" static="1">
			<f a="s:pos:len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>This is similar to `String.substr` but the `pos` and `len` parts are considering UTF8 characters.</haxe_doc>
		</sub>
		<__b><c path="String"/></__b>
		<addChar public="1" get="inline" set="null" line="43">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Add the given UTF8 character code to the buffer.</haxe_doc>
		</addChar>
		<toString public="1" get="inline" set="null" line="50">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the buffer converted to a String.</haxe_doc>
		</toString>
		<new public="1" set="method" line="36">
			<f a="?size">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allocate a new Utf8 buffer using an optional bytes size.</haxe_doc>
		</new>
		<haxe_doc>Since not all platforms guarantee that `String` always uses UTF-8 encoding, you
	can use this cross-platform API to perform operations on such strings.</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":deprecated"><e>"haxe.Utf8 is deprecated. Use UnicodeString instead."</e></m>
		</meta>
	</class>
	<class path="haxe.crypto.Adler32" params="" file="/home/vsts/work/1/s/std/haxe/crypto/Adler32.hx">
		<read public="1" set="method" line="60" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="haxe.crypto.Adler32"/>
</f></read>
		<make public="1" set="method" line="71" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></make>
		<a1><x path="Int"/></a1>
		<a2><x path="Int"/></a2>
		<get public="1" set="method" line="37"><f a=""><x path="Int"/></f></get>
		<update public="1" set="method" line="41"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update>
		<equals public="1" set="method" line="52"><f a="a">
	<c path="haxe.crypto.Adler32"/>
	<x path="Bool"/>
</f></equals>
		<toString public="1" set="method" line="56"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Calculates the Adler32 of the given Bytes.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.io.Bytes" params="" file="/home/vsts/work/1/s/std/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="549" static="1">
			<f a="length">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Returns a new `Bytes` instance with the given `length`. The values of the
		bytes are not initialized and may not be zero.</haxe_doc>
		</alloc>
		<ofString public="1" set="method" line="580" static="1">
			<f a="s:?encoding">
				<c path="String"/>
				<e path="haxe.io.Encoding"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Returns the `Bytes` representation of the given `String`, using the
		specified encoding (UTF-8 by default).</haxe_doc>
		</ofString>
		<ofData public="1" set="method" line="656" static="1">
			<f a="b">
				<t path="haxe.io.BytesData"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Returns the `Bytes` representation of the given `BytesData`.</haxe_doc>
		</ofData>
		<ofHex public="1" set="method" line="673" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Converts the given hexadecimal `String` to `Bytes`. `s` must be a string of
		even length consisting only of hexadecimal digits. For example:
		`"0FDA14058916052309"`.</haxe_doc>
		</ofHex>
		<fastGet public="1" get="inline" set="null" line="694" static="1">
			<f a="b:pos">
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads the `pos`-th byte of the given `b` bytes, in the most efficient way
		possible. Behavior when reading outside of the available data is
		unspecified.</haxe_doc>
		</fastGet>
		<length public="1" set="null"><x path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<get public="1" get="inline" set="null" line="45">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the byte at index `pos`.</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="64">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given byte `v` at the given position `pos`.</haxe_doc>
		</set>
		<blit public="1" set="method" line="90">
			<f a="pos:src:srcpos:len">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies `len` bytes from `src` into this instance.
		@param pos Zero-based location in `this` instance at which to start writing
			bytes.
		@param src Source `Bytes` instance from which to copy bytes.
		@param srcpos Zero-based location at `src` from which bytes will be copied.
		@param len Number of bytes to be copied.</haxe_doc>
		</blit>
		<fill public="1" set="method" line="132">
			<f a="pos:len:value">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets `len` consecutive bytes starting from index `pos` of `this` instance
		to `value`.</haxe_doc>
		</fill>
		<sub public="1" set="method" line="155">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Returns a new `Bytes` instance that contains a copy of `len` bytes of
		`this` instance, starting at index `pos`.</haxe_doc>
		</sub>
		<compare public="1" set="method" line="194">
			<f a="other">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns `0` if the bytes of `this` instance and the bytes of `other` are
		identical.

		Returns a negative value if the `length` of `this` instance is less than
		the `length` of `other`, or a positive value if the `length` of `this`
		instance is greater than the `length` of `other`.

		In case of equal `length`s, returns a negative value if the first different
		value in `other` is greater than the corresponding value in `this`
		instance; otherwise returns a positive value.</haxe_doc>
		</compare>
		<getDouble public="1" set="method" line="246">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the IEEE double-precision value at the given position `pos` (in
		little-endian encoding). Result is unspecified if `pos` is outside the
		bounds.</haxe_doc>
		</getDouble>
		<getFloat public="1" set="method" line="269">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the IEEE single-precision value at the given position `pos` (in
		little-endian encoding). Result is unspecified if `pos` is outside the
		bounds.</haxe_doc>
		</getFloat>
		<setDouble public="1" set="method" line="292">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given IEEE double-precision value `v` at the given position
		`pos` in little-endian encoding. Result is unspecified if writing outside
		of bounds.</haxe_doc>
		</setDouble>
		<setFloat public="1" set="method" line="319">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given IEEE single-precision value `v` at the given position
		`pos` in little-endian encoding. Result is unspecified if writing outside
		of bounds.</haxe_doc>
		</setFloat>
		<getUInt16 public="1" get="inline" set="null" line="340">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 16-bit unsigned integer at the given position `pos` (in
		little-endian encoding).</haxe_doc>
		</getUInt16>
		<setUInt16 public="1" get="inline" set="null" line="352">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given 16-bit unsigned integer `v` at the given position `pos`
		(in little-endian encoding).</haxe_doc>
		</setUInt16>
		<getInt32 public="1" get="inline" set="null" line="365">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 32-bit integer at the given position `pos` (in little-endian
		encoding).</haxe_doc>
		</getInt32>
		<getInt64 public="1" get="inline" set="null" line="383">
			<f a="pos">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Returns the 64-bit integer at the given position `pos` (in little-endian
		encoding).</haxe_doc>
		</getInt64>
		<setInt32 public="1" get="inline" set="null" line="391">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given 32-bit integer `v` at the given position `pos` (in
		little-endian encoding).</haxe_doc>
		</setInt32>
		<setInt64 public="1" get="inline" set="null" line="406">
			<f a="pos:v">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores the given 64-bit integer `v` at the given position `pos` (in
		little-endian encoding).</haxe_doc>
		</setInt64>
		<getString public="1" set="method" line="415">
			<f a="pos:len:?encoding">
				<x path="Int"/>
				<x path="Int"/>
				<e path="haxe.io.Encoding"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the `len`-bytes long string stored at the given position `pos`,
		interpreted with the given `encoding` (UTF-8 by default).</haxe_doc>
		</getString>
		<readString public="1" get="inline" set="null" line="495">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":deprecated"><e>"readString is deprecated, use getString instead"</e></m>
				<m n=":noCompletion"/>
			</meta>
		</readString>
		<toString public="1" set="method" line="502">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a `String` representation of the bytes interpreted as UTF-8.</haxe_doc>
		</toString>
		<toHex public="1" set="method" line="524">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a hexadecimal `String` representation of the bytes of `this`
		instance.</haxe_doc>
		</toHex>
		<getData public="1" get="inline" set="null" line="541">
			<f a=""><t path="haxe.io.BytesData"/></f>
			<haxe_doc>Returns the bytes of `this` instance as `BytesData`.</haxe_doc>
		</getData>
		<new set="method" line="34"><f a="length:b">
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.crypto.Base64" params="" file="/home/vsts/work/1/s/std/haxe/crypto/Base64.hx">
		<CHARS public="1" set="null" expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;" line="29" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</e></m></meta>
		</CHARS>
		<BYTES public="1" set="null" expr="haxe.io.Bytes.ofString(CHARS)" line="30" static="1">
			<c path="haxe.io.Bytes"/>
			<meta><m n=":value"><e>haxe.io.Bytes.ofString(CHARS)</e></m></meta>
		</BYTES>
		<URL_CHARS public="1" set="null" expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_&quot;" line="32" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"</e></m></meta>
		</URL_CHARS>
		<URL_BYTES public="1" set="null" expr="haxe.io.Bytes.ofString(URL_CHARS)" line="33" static="1">
			<c path="haxe.io.Bytes"/>
			<meta><m n=":value"><e>haxe.io.Bytes.ofString(URL_CHARS)</e></m></meta>
		</URL_BYTES>
		<encode public="1" set="method" line="35" static="1">
			<f a="bytes:?complement" v=":true">
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ complement : true }</e></m></meta>
		</encode>
		<decode public="1" set="method" line="48" static="1">
			<f a="str:?complement" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ complement : true }</e></m></meta>
		</decode>
		<urlEncode public="1" set="method" line="55" static="1">
			<f a="bytes:?complement" v=":false">
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ complement : false }</e></m></meta>
		</urlEncode>
		<urlDecode public="1" set="method" line="68" static="1">
			<f a="str:?complement" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ complement : false }</e></m></meta>
		</urlDecode>
		<haxe_doc>Allows one to encode/decode String and bytes using Base64 encoding.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.crypto.BaseCode" params="" file="/home/vsts/work/1/s/std/haxe/crypto/BaseCode.hx">
		<encode public="1" set="method" line="128" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<decode public="1" set="method" line="133" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></decode>
		<base><c path="haxe.io.Bytes"/></base>
		<nbits><x path="Int"/></nbits>
		<tbl><c path="Array"><x path="Int"/></c></tbl>
		<encodeBytes public="1" set="method" line="44"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></encodeBytes>
		<initTable set="method" line="72"><f a=""><x path="Void"/></f></initTable>
		<decodeBytes public="1" set="method" line="81"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></decodeBytes>
		<encodeString public="1" set="method" line="112"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encodeString>
		<decodeString public="1" set="method" line="120"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></decodeString>
		<new public="1" set="method" line="33"><f a="base">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Allows one to encode/decode String and bytes using a power of two base dictionary.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.crypto.Crc32" params="" file="/home/vsts/work/1/s/std/haxe/crypto/Crc32.hx">
		<make public="1" set="method" line="59" static="1">
			<f a="data">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Calculates the CRC32 of the given data bytes</haxe_doc>
		</make>
		<crc><x path="Int"/></crc>
		<byte public="1" get="inline" set="null" line="35"><f a="b">
	<x path="Int"/>
	<x path="Void"/>
</f></byte>
		<update public="1" get="inline" set="null" line="42"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update>
		<get public="1" get="inline" set="null" line="52"><f a=""><x path="Int"/></f></get>
		<new public="1" get="inline" set="null" line="31"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Calculates the Crc32 of the given Bytes.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<enum path="haxe.crypto.HashMethod" params="" file="/home/vsts/work/1/s/std/haxe/crypto/Hmac.hx" module="haxe.crypto.Hmac">
		<MD5/>
		<SHA1/>
		<SHA256/>
		<haxe_doc>Hash methods for Hmac calculation.</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="haxe.crypto.Hmac" params="" file="/home/vsts/work/1/s/std/haxe/crypto/Hmac.hx">
		<method><e path="haxe.crypto.HashMethod"/></method>
		<blockSize><x path="Int"/></blockSize>
		<length><x path="Int"/></length>
		<doHash get="inline" set="null" line="54"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></doHash>
		<nullPad set="method" line="62"><f a="s:chunkLen">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></nullPad>
		<make public="1" set="method" line="73"><f a="key:msg">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<new public="1" set="method" line="42"><f a="hashMethod">
	<e path="haxe.crypto.HashMethod"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Calculates a Hmac of the given Bytes using a HashMethod.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.crypto.Md5" params="" file="/home/vsts/work/1/s/std/haxe/crypto/Md5.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="39" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<bytes2blks set="method" line="102" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><x path="Int"/></c>
</f></bytes2blks>
		<str2blks set="method" line="132" static="1"><f a="str">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<bitOR set="method" line="69"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitOR>
		<bitXOR set="method" line="75"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitXOR>
		<bitAND set="method" line="81"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitAND>
		<addme set="method" line="87"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></addme>
		<hex set="method" line="93"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<rol set="method" line="166"><f a="num:cnt">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></rol>
		<cmn set="method" line="170"><f a="q:a:b:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></cmn>
		<ff set="method" line="174"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ff>
		<gg set="method" line="178"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></gg>
		<hh set="method" line="182"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></hh>
		<ii set="method" line="186"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ii>
		<doEncode set="method" line="190"><f a="x">
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<new set="method" line="67"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a MD5 of a String.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.crypto.Sha1" params="" file="/home/vsts/work/1/s/std/haxe/crypto/Sha1.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="35" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<str2blks set="method" line="95" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<haxe_doc>Convert a string to a sequence of 16-word blocks, stored as an array.
		Append padding bits and the length, as described in the SHA1 standard.</haxe_doc>
		</str2blks>
		<bytes2blks set="method" line="115" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><x path="Int"/></c>
</f></bytes2blks>
		<doEncode set="method" line="50"><f a="x">
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<rol get="inline" set="null" line="135">
			<f a="num:cnt">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Bitwise rotate a 32-bit number to the left</haxe_doc>
		</rol>
		<ft set="method" line="142">
			<f a="t:b:c:d">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Perform the appropriate triplet combination function for the current iteration</haxe_doc>
		</ft>
		<kt set="method" line="155">
			<f a="t">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Determine the appropriate additive constant for the current iteration</haxe_doc>
		</kt>
		<hex set="method" line="165"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<new set="method" line="48"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a Sha1 of a String.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.crypto.Sha224" params="" file="/home/vsts/work/1/s/std/haxe/crypto/Sha224.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="35" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<str2blks set="method" line="126" static="1"><f a="s">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<safeAdd get="inline" set="null" line="142" static="1"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></safeAdd>
		<doEncode set="method" line="50"><f a="str:strlen">
	<c path="String"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<ROTR get="inline" set="null" line="149"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ROTR>
		<SHR get="inline" set="null" line="154"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></SHR>
		<Ch get="inline" set="null" line="159"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Ch>
		<Maj get="inline" set="null" line="164"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Maj>
		<Sigma0 get="inline" set="null" line="168"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma0>
		<Sigma1 get="inline" set="null" line="172"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma1>
		<Gamma0 get="inline" set="null" line="176"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma0>
		<Gamma1 get="inline" set="null" line="180"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma1>
		<hex set="method" line="184"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<new public="1" set="method" line="48"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a Sha224 of a String.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.crypto.Sha256" params="" file="/home/vsts/work/1/s/std/haxe/crypto/Sha256.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="35" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<str2blks set="method" line="113" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<haxe_doc>Convert a string to a sequence of 16-word blocks, stored as an array.
		Append padding bits and the length, as described in the SHA1 standard.</haxe_doc>
		</str2blks>
		<bytes2blks set="method" line="133" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><x path="Int"/></c>
</f></bytes2blks>
		<doEncode set="method" line="50"><f a="m:l">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<S get="inline" set="null" line="150"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></S>
		<R get="inline" set="null" line="154"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></R>
		<Ch get="inline" set="null" line="158"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Ch>
		<Maj get="inline" set="null" line="162"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Maj>
		<Sigma0256 get="inline" set="null" line="166"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma0256>
		<Sigma1256 get="inline" set="null" line="170"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma1256>
		<Gamma0256 get="inline" set="null" line="174"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma0256>
		<Gamma1256 get="inline" set="null" line="178"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma1256>
		<safeAdd get="inline" set="null" line="182"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></safeAdd>
		<hex set="method" line="188"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<new public="1" set="method" line="48"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a Sha256 of a String.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.display.DisplayMethods" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<Completion public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;CompletionParams,CompletionResult&gt;(&quot;display/completion&quot;)" line="39" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.CompletionParams"/>
				<t path="haxe.display.CompletionResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<CompletionParams,CompletionResult>("display/completion")]]></e></m></meta>
			<haxe_doc>The completion request is sent from the client to Haxe to request code completion.
		Haxe automatically determines the type of completion to use based on the passed position, see `CompletionResultKind`.</haxe_doc>
		</Completion>
		<CompletionItemResolve public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;CompletionItemResolveParams,CompletionItemResolveResult&gt;(&quot;display/completionItem/resolve&quot;)" line="44" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.CompletionItemResolveParams"/>
				<t path="haxe.display.CompletionItemResolveResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<CompletionItemResolveParams,CompletionItemResolveResult>("display/completionItem/resolve")]]></e></m></meta>
			<haxe_doc>The request is sent from the client to Haxe to resolve additional information for a given completion item.</haxe_doc>
		</CompletionItemResolve>
		<FindReferences public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;PositionParams,GotoDefinitionResult&gt;(&quot;display/references&quot;)" line="49" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.PositionParams"/>
				<t path="haxe.display.GotoDefinitionResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<PositionParams,GotoDefinitionResult>("display/references")]]></e></m></meta>
			<haxe_doc>The find references request is sent from the client to Haxe to find locations that reference the symbol at a given text document position.</haxe_doc>
		</FindReferences>
		<GotoDefinition public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;PositionParams,GotoDefinitionResult&gt;(&quot;display/definition&quot;)" line="54" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.PositionParams"/>
				<t path="haxe.display.GotoDefinitionResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<PositionParams,GotoDefinitionResult>("display/definition")]]></e></m></meta>
			<haxe_doc>The goto definition request is sent from the client to Haxe to resolve the definition location(s) of a symbol at a given text document position.</haxe_doc>
		</GotoDefinition>
		<GotoTypeDefinition public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;PositionParams,GotoTypeDefinitionResult&gt;(&quot;display/typeDefinition&quot;)" line="59" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.PositionParams"/>
				<t path="haxe.display.GotoTypeDefinitionResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<PositionParams,GotoTypeDefinitionResult>("display/typeDefinition")]]></e></m></meta>
			<haxe_doc>The goto type definition request is sent from the client to Haxe to resolve the type definition location(s) of a symbol at a given text document position.</haxe_doc>
		</GotoTypeDefinition>
		<Hover public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;PositionParams,HoverResult&gt;(&quot;display/hover&quot;)" line="64" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.PositionParams"/>
				<t path="haxe.display.HoverResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<PositionParams,HoverResult>("display/hover")]]></e></m></meta>
			<haxe_doc>The hover request is sent from the client to Haxe to request hover information at a given text document position.</haxe_doc>
		</Hover>
		<DeterminePackage public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;FileParams,DeterminePackageResult&gt;(&quot;display/package&quot;)" line="69" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.FileParams"/>
				<t path="haxe.display.DeterminePackageResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<FileParams,DeterminePackageResult>("display/package")]]></e></m></meta>
			<haxe_doc>This request is sent from the client to Haxe to determine the package for a given file, based on class paths configuration.</haxe_doc>
		</DeterminePackage>
		<SignatureHelp public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;SignatureHelpParams,SignatureHelpResult&gt;(&quot;display/signatureHelp&quot;)" line="74" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.SignatureHelpParams"/>
				<t path="haxe.display.SignatureHelpResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<SignatureHelpParams,SignatureHelpResult>("display/signatureHelp")]]></e></m></meta>
			<haxe_doc>The signature help request is sent from the client to Haxe to request signature information at a given cursor position.</haxe_doc>
		</SignatureHelp>
		<haxe_doc>Methods of the JSON-RPC-based `--display` protocol in Haxe 4.
	A lot of the methods are *inspired* by the Language Server Protocol, but there is **no** intention to be directly compatible with it.</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":publicFields"/>
		</meta>
	</class>
	<typedef path="haxe.display.CompletionParams" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<wasAutoTriggered><x path="Bool"/></wasAutoTriggered>
			<offset>
				<x path="Int"/>
				<haxe_doc>Unicode character offset in the file.</haxe_doc>
			</offset>
			<meta>
				<x path="Null"><c path="Array"><c path="String"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>list of metas to include in responses</haxe_doc>
			</meta>
			<file><x path="haxe.display.FsPath"/></file>
			<contents>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</contents>
		</a>
		<haxe_doc>Completion</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.FieldResolution" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<qualifier>
				<c path="String"/>
				<haxe_doc>The qualifier that has to be inserted to use the field if `!isQualified`.
		Can either be `this` or `super` for instance fields for the type name for `static` fields.</haxe_doc>
			</qualifier>
			<isQualified>
				<x path="Bool"/>
				<haxe_doc>Whether it's valid to use the unqualified name of the field or not.
		This is `false` if the identifier is shadowed.</haxe_doc>
			</isQualified>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.DisplayLocal" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<type><t path="haxe.display.JsonType"><c path="haxe.display.DisplayLocal.T"/></t></type>
			<pos><t path="haxe.display.JsonPos"/></pos>
			<origin><x path="haxe.display.LocalOrigin"/></origin>
			<name><c path="String"/></name>
			<meta><t path="haxe.display.JsonMetadata"/></meta>
			<isInline><x path="Bool"/></isInline>
			<isFinal><x path="Bool"/></isFinal>
			<id><x path="Int"/></id>
			<extra>
				<x path="Null"><a>
	<params><c path="Array"><t path="haxe.display.JsonTypeParameter"/></c></params>
	<expr><t path="haxe.display.JsonExpr"/></expr>
</a></x>
				<meta><m n=":optional"/></meta>
			</extra>
			<capture><x path="Bool"/></capture>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.display.LocalOrigin" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta>
			<m n=":hxGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.display._Display.LocalOrigin_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1">
	<LocalVariable public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.LocalOrigin"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LocalVariable>
	<Argument public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.LocalOrigin"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Argument>
	<ForVariable public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.LocalOrigin"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ForVariable>
	<PatternVariable public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.display.LocalOrigin"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PatternVariable>
	<CatchVariable public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="haxe.display.LocalOrigin"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CatchVariable>
	<LocalFunction public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="haxe.display.LocalOrigin"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LocalFunction>
	<meta>
		<m n=":hxGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.LocalOrigin_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1">
		<LocalVariable public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.LocalOrigin"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LocalVariable>
		<Argument public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.LocalOrigin"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Argument>
		<ForVariable public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.LocalOrigin"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ForVariable>
		<PatternVariable public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.display.LocalOrigin"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PatternVariable>
		<CatchVariable public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="haxe.display.LocalOrigin"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CatchVariable>
		<LocalFunction public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="haxe.display.LocalOrigin"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LocalFunction>
		<meta>
			<m n=":hxGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="haxe.display.ClassFieldOriginKind" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta>
			<m n=":hxGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.display._Display.ClassFieldOriginKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1">
	<Self public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The field is declared on the current type itself.</haxe_doc>
	</Self>
	<StaticImport public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The field is a static field brought into context via a static import
		(`import pack.Module.Type.field`).</haxe_doc>
	</StaticImport>
	<Parent public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The field is declared on a parent type, such as:
		- a super class field that is not overriden
		- a forwarded abstract field</haxe_doc>
	</Parent>
	<StaticExtension public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The field is a static extension method brought
		into context with the `using` keyword.</haxe_doc>
	</StaticExtension>
	<AnonymousStructure public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonAnon"/></x>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>This field doesn't belong to any named type, just an anonymous structure.</haxe_doc>
	</AnonymousStructure>
	<BuiltIn public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><e path="haxe.display.NoData"/></x>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Special fields built into the compiler, such as:
		- `code` on single-character Strings
		- `bind()` on functions.</haxe_doc>
	</BuiltIn>
	<Unknown public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="haxe.display.ClassFieldOriginKind"><e path="haxe.display.NoData"/></x>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The origin of this class field is unknown.</haxe_doc>
	</Unknown>
	<meta>
		<m n=":hxGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.ClassFieldOriginKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1">
		<Self public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The field is declared on the current type itself.</haxe_doc>
		</Self>
		<StaticImport public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The field is a static field brought into context via a static import
		(`import pack.Module.Type.field`).</haxe_doc>
		</StaticImport>
		<Parent public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The field is declared on a parent type, such as:
		- a super class field that is not overriden
		- a forwarded abstract field</haxe_doc>
		</Parent>
		<StaticExtension public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.ClassFieldOriginKind.T"/></t></x>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The field is a static extension method brought
		into context with the `using` keyword.</haxe_doc>
		</StaticExtension>
		<AnonymousStructure public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><t path="haxe.display.JsonAnon"/></x>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>This field doesn't belong to any named type, just an anonymous structure.</haxe_doc>
		</AnonymousStructure>
		<BuiltIn public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><e path="haxe.display.NoData"/></x>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Special fields built into the compiler, such as:
		- `code` on single-character Strings
		- `bind()` on functions.</haxe_doc>
		</BuiltIn>
		<Unknown public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="haxe.display.ClassFieldOriginKind"><e path="haxe.display.NoData"/></x>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The origin of this class field is unknown.</haxe_doc>
		</Unknown>
		<meta>
			<m n=":hxGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="haxe.display.ClassFieldOrigin" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<kind><x path="haxe.display.ClassFieldOriginKind"><c path="haxe.display.ClassFieldOrigin.T"/></x></kind>
			<args>
				<x path="Null"><c path="haxe.display.ClassFieldOrigin.T"/></x>
				<meta><m n=":optional"/></meta>
			</args>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.ClassFieldOccurrence" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<resolution><t path="haxe.display.FieldResolution"/></resolution>
			<origin>
				<x path="Null"><t path="haxe.display.ClassFieldOrigin"><c path="haxe.display.ClassFieldOccurrence.T"/></t></x>
				<meta><m n=":optional"/></meta>
			</origin>
			<field><t path="haxe.display.JsonClassField"/></field>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.display.EnumFieldOriginKind" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta>
			<m n=":hxGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.display._Display.EnumFieldOriginKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1">
	<Self public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.EnumFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.EnumFieldOriginKind.T"/></t></x>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The enum value is declared on the current type itself.</haxe_doc>
	</Self>
	<StaticImport public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.EnumFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.EnumFieldOriginKind.T"/></t></x>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The enum value is brought into context via a static import
		(`import pack.Module.Enum.Value`).</haxe_doc>
	</StaticImport>
	<meta>
		<m n=":hxGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.EnumFieldOriginKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1">
		<Self public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.EnumFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.EnumFieldOriginKind.T"/></t></x>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The enum value is declared on the current type itself.</haxe_doc>
		</Self>
		<StaticImport public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.EnumFieldOriginKind"><t path="haxe.display.JsonModuleType"><c path="haxe.display.EnumFieldOriginKind.T"/></t></x>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The enum value is brought into context via a static import
		(`import pack.Module.Enum.Value`).</haxe_doc>
		</StaticImport>
		<meta>
			<m n=":hxGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="haxe.display.EnumFieldOrigin" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<kind><x path="haxe.display.EnumFieldOriginKind"><c path="haxe.display.EnumFieldOrigin.T"/></x></kind>
			<args>
				<x path="Null"><c path="haxe.display.EnumFieldOrigin.T"/></x>
				<meta><m n=":optional"/></meta>
			</args>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.EnumFieldOccurrence" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<resolution><t path="haxe.display.FieldResolution"/></resolution>
			<origin>
				<x path="Null"><t path="haxe.display.EnumFieldOrigin"><c path="haxe.display.EnumFieldOccurrence.T"/></t></x>
				<meta><m n=":optional"/></meta>
			</origin>
			<field><t path="haxe.display.JsonEnumField"/></field>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.display.Literal" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.display._Display.Literal_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1">
	<Null public="1" get="inline" set="null" expr="cast &quot;null&quot;" line="212" static="1">
		<x path="haxe.display.Literal"/>
		<meta>
			<m n=":value"><e>cast "null"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Null>
	<True public="1" get="inline" set="null" expr="cast &quot;true&quot;" line="213" static="1">
		<x path="haxe.display.Literal"/>
		<meta>
			<m n=":value"><e>cast "true"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</True>
	<False public="1" get="inline" set="null" expr="cast &quot;false&quot;" line="214" static="1">
		<x path="haxe.display.Literal"/>
		<meta>
			<m n=":value"><e>cast "false"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</False>
	<This public="1" get="inline" set="null" expr="cast &quot;this&quot;" line="215" static="1">
		<x path="haxe.display.Literal"/>
		<meta>
			<m n=":value"><e>cast "this"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</This>
	<Trace public="1" get="inline" set="null" expr="cast &quot;trace&quot;" line="216" static="1">
		<x path="haxe.display.Literal"/>
		<meta>
			<m n=":value"><e>cast "trace"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Trace>
	<meta>
		<m n=":nativeGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.Literal_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1">
		<Null public="1" get="inline" set="null" expr="cast &quot;null&quot;" line="212" static="1">
			<x path="haxe.display.Literal"/>
			<meta>
				<m n=":value"><e>cast "null"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Null>
		<True public="1" get="inline" set="null" expr="cast &quot;true&quot;" line="213" static="1">
			<x path="haxe.display.Literal"/>
			<meta>
				<m n=":value"><e>cast "true"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</True>
		<False public="1" get="inline" set="null" expr="cast &quot;false&quot;" line="214" static="1">
			<x path="haxe.display.Literal"/>
			<meta>
				<m n=":value"><e>cast "false"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</False>
		<This public="1" get="inline" set="null" expr="cast &quot;this&quot;" line="215" static="1">
			<x path="haxe.display.Literal"/>
			<meta>
				<m n=":value"><e>cast "this"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</This>
		<Trace public="1" get="inline" set="null" expr="cast &quot;trace&quot;" line="216" static="1">
			<x path="haxe.display.Literal"/>
			<meta>
				<m n=":value"><e>cast "trace"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Trace>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="haxe.display.DisplayModuleTypeKind" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta>
			<m n=":hxGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.display._Display.DisplayModuleTypeKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1">
	<Class public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Class>
	<Interface public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Interface>
	<Enum public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Enum>
	<Abstract public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Abstract>
	<EnumAbstract public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EnumAbstract>
	<TypeAlias public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A `typedef` that is just an alias for another type.</haxe_doc>
	</TypeAlias>
	<Struct public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="haxe.display.DisplayModuleTypeKind"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A `typedef` that is an alias for an anonymous structure.</haxe_doc>
	</Struct>
	<meta>
		<m n=":hxGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.DisplayModuleTypeKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1">
		<Class public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Class>
		<Interface public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Interface>
		<Enum public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Enum>
		<Abstract public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Abstract>
		<EnumAbstract public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EnumAbstract>
		<TypeAlias public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A `typedef` that is just an alias for another type.</haxe_doc>
		</TypeAlias>
		<Struct public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="haxe.display.DisplayModuleTypeKind"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A `typedef` that is an alias for an anonymous structure.</haxe_doc>
		</Struct>
		<meta>
			<m n=":hxGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="haxe.display.DisplayModuleType" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<pos><t path="haxe.display.JsonPos"/></pos>
			<path><t path="haxe.display.JsonTypePath"/></path>
			<params><c path="Array"><t path="haxe.display.DisplayModuleTypeParameter"/></c></params>
			<meta><t path="haxe.display.JsonMetadata"/></meta>
			<kind><x path="haxe.display.DisplayModuleTypeKind"/></kind>
			<isPrivate><x path="Bool"/></isPrivate>
			<isFinal><x path="Bool"/></isFinal>
			<isExtern><x path="Bool"/></isExtern>
			<doc><t path="haxe.display.JsonDoc"/></doc>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.DisplayModuleTypeParameter" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<name><c path="String"/></name>
			<meta><t path="haxe.display.JsonMetadata"/></meta>
			<constraints><c path="Array"><t path="haxe.display.JsonType"><d/></t></c></constraints>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.DisplayLiteral" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a><name><c path="String"/></name></a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.display.MetadataTarget" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.display._Display.MetadataTarget_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1">
	<Class public="1" get="inline" set="null" expr="cast &quot;TClass&quot;" line="259" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TClass"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Class>
	<ClassField public="1" get="inline" set="null" expr="cast &quot;TClassField&quot;" line="260" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TClassField"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ClassField>
	<Abstract public="1" get="inline" set="null" expr="cast &quot;TAbstract&quot;" line="261" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TAbstract"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Abstract>
	<AbstractField public="1" get="inline" set="null" expr="cast &quot;TAbstractField&quot;" line="262" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TAbstractField"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AbstractField>
	<Enum public="1" get="inline" set="null" expr="cast &quot;TEnum&quot;" line="263" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TEnum"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Enum>
	<Typedef public="1" get="inline" set="null" expr="cast &quot;TTypedef&quot;" line="264" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TTypedef"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Typedef>
	<AnyField public="1" get="inline" set="null" expr="cast &quot;TAnyField&quot;" line="265" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TAnyField"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AnyField>
	<Expr public="1" get="inline" set="null" expr="cast &quot;TExpr&quot;" line="266" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TExpr"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Expr>
	<TypeParameter public="1" get="inline" set="null" expr="cast &quot;TTypeParameter&quot;" line="267" static="1">
		<x path="haxe.display.MetadataTarget"/>
		<meta>
			<m n=":value"><e>cast "TTypeParameter"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TypeParameter>
	<meta>
		<m n=":nativeGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.MetadataTarget_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1">
		<Class public="1" get="inline" set="null" expr="cast &quot;TClass&quot;" line="259" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TClass"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Class>
		<ClassField public="1" get="inline" set="null" expr="cast &quot;TClassField&quot;" line="260" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TClassField"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ClassField>
		<Abstract public="1" get="inline" set="null" expr="cast &quot;TAbstract&quot;" line="261" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TAbstract"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Abstract>
		<AbstractField public="1" get="inline" set="null" expr="cast &quot;TAbstractField&quot;" line="262" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TAbstractField"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AbstractField>
		<Enum public="1" get="inline" set="null" expr="cast &quot;TEnum&quot;" line="263" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TEnum"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Enum>
		<Typedef public="1" get="inline" set="null" expr="cast &quot;TTypedef&quot;" line="264" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TTypedef"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Typedef>
		<AnyField public="1" get="inline" set="null" expr="cast &quot;TAnyField&quot;" line="265" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TAnyField"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AnyField>
		<Expr public="1" get="inline" set="null" expr="cast &quot;TExpr&quot;" line="266" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TExpr"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Expr>
		<TypeParameter public="1" get="inline" set="null" expr="cast &quot;TTypeParameter&quot;" line="267" static="1">
			<x path="haxe.display.MetadataTarget"/>
			<meta>
				<m n=":value"><e>cast "TTypeParameter"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TypeParameter>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="haxe.display.Platform" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.display._Display.Platform_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1">
	<Cross public="1" get="inline" set="null" expr="cast &quot;cross&quot;" line="271" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "cross"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Cross>
	<Js public="1" get="inline" set="null" expr="cast &quot;js&quot;" line="272" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "js"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Js>
	<Lua public="1" get="inline" set="null" expr="cast &quot;lua&quot;" line="273" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "lua"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Lua>
	<Neko public="1" get="inline" set="null" expr="cast &quot;neko&quot;" line="274" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "neko"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Neko>
	<Flash public="1" get="inline" set="null" expr="cast &quot;flash&quot;" line="275" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "flash"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Flash>
	<Php public="1" get="inline" set="null" expr="cast &quot;php&quot;" line="276" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "php"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Php>
	<Cpp public="1" get="inline" set="null" expr="cast &quot;cpp&quot;" line="277" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "cpp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Cpp>
	<Cs public="1" get="inline" set="null" expr="cast &quot;cs&quot;" line="278" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "cs"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Cs>
	<Java public="1" get="inline" set="null" expr="cast &quot;java&quot;" line="279" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "java"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Java>
	<Python public="1" get="inline" set="null" expr="cast &quot;python&quot;" line="280" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "python"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Python>
	<Hl public="1" get="inline" set="null" expr="cast &quot;hl&quot;" line="281" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "hl"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Hl>
	<Eval public="1" get="inline" set="null" expr="cast &quot;eval&quot;" line="282" static="1">
		<x path="haxe.display.Platform"/>
		<meta>
			<m n=":value"><e>cast "eval"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Eval>
	<meta>
		<m n=":nativeGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.Platform_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1">
		<Cross public="1" get="inline" set="null" expr="cast &quot;cross&quot;" line="271" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "cross"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Cross>
		<Js public="1" get="inline" set="null" expr="cast &quot;js&quot;" line="272" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "js"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Js>
		<Lua public="1" get="inline" set="null" expr="cast &quot;lua&quot;" line="273" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "lua"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Lua>
		<Neko public="1" get="inline" set="null" expr="cast &quot;neko&quot;" line="274" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "neko"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Neko>
		<Flash public="1" get="inline" set="null" expr="cast &quot;flash&quot;" line="275" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "flash"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Flash>
		<Php public="1" get="inline" set="null" expr="cast &quot;php&quot;" line="276" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "php"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Php>
		<Cpp public="1" get="inline" set="null" expr="cast &quot;cpp&quot;" line="277" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "cpp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Cpp>
		<Cs public="1" get="inline" set="null" expr="cast &quot;cs&quot;" line="278" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "cs"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Cs>
		<Java public="1" get="inline" set="null" expr="cast &quot;java&quot;" line="279" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "java"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Java>
		<Python public="1" get="inline" set="null" expr="cast &quot;python&quot;" line="280" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "python"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Python>
		<Hl public="1" get="inline" set="null" expr="cast &quot;hl&quot;" line="281" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "hl"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Hl>
		<Eval public="1" get="inline" set="null" expr="cast &quot;eval&quot;" line="282" static="1">
			<x path="haxe.display.Platform"/>
			<meta>
				<m n=":value"><e>cast "eval"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Eval>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="haxe.display.Metadata" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<targets><c path="Array"><x path="haxe.display.MetadataTarget"/></c></targets>
			<platforms><c path="Array"><x path="haxe.display.Platform"/></c></platforms>
			<parameters><c path="Array"><c path="String"/></c></parameters>
			<name><c path="String"/></name>
			<links>
				<x path="Null"><c path="Array"><c path="String"/></c></x>
				<meta><m n=":optional"/></meta>
			</links>
			<internal><x path="Bool"/></internal>
			<doc><t path="haxe.display.JsonDoc"/></doc>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.Define" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<value><x path="Null"><c path="String"/></x></value>
			<platforms><c path="Array"><x path="haxe.display.Platform"/></c></platforms>
			<parameters><c path="Array"><c path="String"/></c></parameters>
			<name><c path="String"/></name>
			<links><c path="Array"><c path="String"/></c></links>
			<doc><t path="haxe.display.JsonDoc"/></doc>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.Keyword" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a><name><x path="haxe.display.KeywordKind"/></name></a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.display.KeywordKind" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.display._Display.KeywordKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1">
	<Implements public="1" get="inline" set="null" expr="cast &quot;implements&quot;" line="309" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "implements"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Implements>
	<Extends public="1" get="inline" set="null" expr="cast &quot;extends&quot;" line="310" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "extends"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Extends>
	<Function public="1" get="inline" set="null" expr="cast &quot;function&quot;" line="311" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "function"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Function>
	<Var public="1" get="inline" set="null" expr="cast &quot;var&quot;" line="312" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "var"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Var>
	<If public="1" get="inline" set="null" expr="cast &quot;if&quot;" line="313" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "if"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</If>
	<Else public="1" get="inline" set="null" expr="cast &quot;else&quot;" line="314" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "else"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Else>
	<While public="1" get="inline" set="null" expr="cast &quot;while&quot;" line="315" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "while"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</While>
	<Do public="1" get="inline" set="null" expr="cast &quot;do&quot;" line="316" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "do"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Do>
	<For public="1" get="inline" set="null" expr="cast &quot;for&quot;" line="317" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "for"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</For>
	<Break public="1" get="inline" set="null" expr="cast &quot;break&quot;" line="318" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "break"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Break>
	<Return public="1" get="inline" set="null" expr="cast &quot;return&quot;" line="319" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "return"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Return>
	<Continue public="1" get="inline" set="null" expr="cast &quot;continue&quot;" line="320" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "continue"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Continue>
	<Switch public="1" get="inline" set="null" expr="cast &quot;switch&quot;" line="321" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "switch"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Switch>
	<Case public="1" get="inline" set="null" expr="cast &quot;case&quot;" line="322" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "case"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Case>
	<Default public="1" get="inline" set="null" expr="cast &quot;default&quot;" line="323" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "default"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Default>
	<Try public="1" get="inline" set="null" expr="cast &quot;try&quot;" line="324" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "try"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Try>
	<Catch public="1" get="inline" set="null" expr="cast &quot;catch&quot;" line="325" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "catch"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Catch>
	<New public="1" get="inline" set="null" expr="cast &quot;new&quot;" line="326" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "new"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</New>
	<Throw public="1" get="inline" set="null" expr="cast &quot;throw&quot;" line="327" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "throw"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Throw>
	<Untyped public="1" get="inline" set="null" expr="cast &quot;untyped&quot;" line="328" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "untyped"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Untyped>
	<Cast public="1" get="inline" set="null" expr="cast &quot;cast&quot;" line="329" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "cast"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Cast>
	<Macro public="1" get="inline" set="null" expr="cast &quot;macro&quot;" line="330" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "macro"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Macro>
	<Package public="1" get="inline" set="null" expr="cast &quot;package&quot;" line="331" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "package"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Package>
	<Import public="1" get="inline" set="null" expr="cast &quot;import&quot;" line="332" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "import"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Import>
	<Using public="1" get="inline" set="null" expr="cast &quot;using&quot;" line="333" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "using"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Using>
	<Public public="1" get="inline" set="null" expr="cast &quot;public&quot;" line="334" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "public"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Public>
	<Private public="1" get="inline" set="null" expr="cast &quot;private&quot;" line="335" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "private"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Private>
	<Static public="1" get="inline" set="null" expr="cast &quot;static&quot;" line="336" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "static"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Static>
	<Extern public="1" get="inline" set="null" expr="cast &quot;extern&quot;" line="337" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "extern"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Extern>
	<Dynamic public="1" get="inline" set="null" expr="cast &quot;dynamic&quot;" line="338" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "dynamic"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Dynamic>
	<Override public="1" get="inline" set="null" expr="cast &quot;override&quot;" line="339" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "override"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Override>
	<Class public="1" get="inline" set="null" expr="cast &quot;class&quot;" line="340" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "class"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Class>
	<Interface public="1" get="inline" set="null" expr="cast &quot;interface&quot;" line="341" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "interface"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Interface>
	<Enum public="1" get="inline" set="null" expr="cast &quot;enum&quot;" line="342" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "enum"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Enum>
	<Abstract public="1" get="inline" set="null" expr="cast &quot;abstract&quot;" line="343" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "abstract"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Abstract>
	<Typedef public="1" get="inline" set="null" expr="cast &quot;typedef&quot;" line="344" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "typedef"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Typedef>
	<Final public="1" get="inline" set="null" expr="cast &quot;final&quot;" line="345" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "final"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Final>
	<Inline public="1" get="inline" set="null" expr="cast &quot;inline&quot;" line="346" static="1">
		<x path="haxe.display.KeywordKind"/>
		<meta>
			<m n=":value"><e>cast "inline"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Inline>
	<meta>
		<m n=":nativeGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.KeywordKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1">
		<Implements public="1" get="inline" set="null" expr="cast &quot;implements&quot;" line="309" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "implements"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Implements>
		<Extends public="1" get="inline" set="null" expr="cast &quot;extends&quot;" line="310" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "extends"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Extends>
		<Function public="1" get="inline" set="null" expr="cast &quot;function&quot;" line="311" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "function"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Function>
		<Var public="1" get="inline" set="null" expr="cast &quot;var&quot;" line="312" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "var"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Var>
		<If public="1" get="inline" set="null" expr="cast &quot;if&quot;" line="313" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "if"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</If>
		<Else public="1" get="inline" set="null" expr="cast &quot;else&quot;" line="314" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "else"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Else>
		<While public="1" get="inline" set="null" expr="cast &quot;while&quot;" line="315" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "while"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</While>
		<Do public="1" get="inline" set="null" expr="cast &quot;do&quot;" line="316" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "do"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Do>
		<For public="1" get="inline" set="null" expr="cast &quot;for&quot;" line="317" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "for"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</For>
		<Break public="1" get="inline" set="null" expr="cast &quot;break&quot;" line="318" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "break"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Break>
		<Return public="1" get="inline" set="null" expr="cast &quot;return&quot;" line="319" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "return"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Return>
		<Continue public="1" get="inline" set="null" expr="cast &quot;continue&quot;" line="320" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "continue"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Continue>
		<Switch public="1" get="inline" set="null" expr="cast &quot;switch&quot;" line="321" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "switch"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Switch>
		<Case public="1" get="inline" set="null" expr="cast &quot;case&quot;" line="322" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "case"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Case>
		<Default public="1" get="inline" set="null" expr="cast &quot;default&quot;" line="323" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "default"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Default>
		<Try public="1" get="inline" set="null" expr="cast &quot;try&quot;" line="324" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "try"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Try>
		<Catch public="1" get="inline" set="null" expr="cast &quot;catch&quot;" line="325" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "catch"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Catch>
		<New public="1" get="inline" set="null" expr="cast &quot;new&quot;" line="326" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "new"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</New>
		<Throw public="1" get="inline" set="null" expr="cast &quot;throw&quot;" line="327" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "throw"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Throw>
		<Untyped public="1" get="inline" set="null" expr="cast &quot;untyped&quot;" line="328" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "untyped"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Untyped>
		<Cast public="1" get="inline" set="null" expr="cast &quot;cast&quot;" line="329" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "cast"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Cast>
		<Macro public="1" get="inline" set="null" expr="cast &quot;macro&quot;" line="330" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "macro"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Macro>
		<Package public="1" get="inline" set="null" expr="cast &quot;package&quot;" line="331" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "package"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Package>
		<Import public="1" get="inline" set="null" expr="cast &quot;import&quot;" line="332" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "import"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Import>
		<Using public="1" get="inline" set="null" expr="cast &quot;using&quot;" line="333" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "using"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Using>
		<Public public="1" get="inline" set="null" expr="cast &quot;public&quot;" line="334" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "public"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Public>
		<Private public="1" get="inline" set="null" expr="cast &quot;private&quot;" line="335" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "private"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Private>
		<Static public="1" get="inline" set="null" expr="cast &quot;static&quot;" line="336" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "static"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Static>
		<Extern public="1" get="inline" set="null" expr="cast &quot;extern&quot;" line="337" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "extern"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Extern>
		<Dynamic public="1" get="inline" set="null" expr="cast &quot;dynamic&quot;" line="338" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "dynamic"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Dynamic>
		<Override public="1" get="inline" set="null" expr="cast &quot;override&quot;" line="339" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "override"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Override>
		<Class public="1" get="inline" set="null" expr="cast &quot;class&quot;" line="340" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "class"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Class>
		<Interface public="1" get="inline" set="null" expr="cast &quot;interface&quot;" line="341" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "interface"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Interface>
		<Enum public="1" get="inline" set="null" expr="cast &quot;enum&quot;" line="342" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "enum"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Enum>
		<Abstract public="1" get="inline" set="null" expr="cast &quot;abstract&quot;" line="343" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "abstract"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Abstract>
		<Typedef public="1" get="inline" set="null" expr="cast &quot;typedef&quot;" line="344" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "typedef"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Typedef>
		<Final public="1" get="inline" set="null" expr="cast &quot;final&quot;" line="345" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "final"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Final>
		<Inline public="1" get="inline" set="null" expr="cast &quot;inline&quot;" line="346" static="1">
			<x path="haxe.display.KeywordKind"/>
			<meta>
				<m n=":value"><e>cast "inline"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Inline>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="haxe.display.Package" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a><path><t path="haxe.display.JsonPackagePath"/></path></a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.Module" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a><path><t path="haxe.display.JsonModulePath"/></path></a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.display.DisplayItemKind" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.display._Display.DisplayItemKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1">
	<Local public="1" get="inline" set="null" expr="cast &quot;Local&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayLocal"><d/></t></x>
		<meta>
			<m n=":value"><e>cast "Local"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Local>
	<ClassField public="1" get="inline" set="null" expr="cast &quot;ClassField&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.ClassFieldOccurrence"><d/></t></x>
		<meta>
			<m n=":value"><e>cast "ClassField"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ClassField>
	<EnumField public="1" get="inline" set="null" expr="cast &quot;EnumField&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.EnumFieldOccurrence"><d/></t></x>
		<meta>
			<m n=":value"><e>cast "EnumField"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EnumField>
	<EnumAbstractField public="1" get="inline" set="null" expr="cast &quot;EnumAbstractField&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.ClassFieldOccurrence"><d/></t></x>
		<meta>
			<m n=":value"><e>cast "EnumAbstractField"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Only for the enum values in enum abstracts, other fields use `ClassField`.</haxe_doc>
	</EnumAbstractField>
	<Type public="1" get="inline" set="null" expr="cast &quot;Type&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayModuleType"/></x>
		<meta>
			<m n=":value"><e>cast "Type"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Type>
	<Package public="1" get="inline" set="null" expr="cast &quot;Package&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Package"/></x>
		<meta>
			<m n=":value"><e>cast "Package"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Package>
	<Module public="1" get="inline" set="null" expr="cast &quot;Module&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Module"/></x>
		<meta>
			<m n=":value"><e>cast "Module"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Module>
	<Literal public="1" get="inline" set="null" expr="cast &quot;Literal&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayLiteral"><d/></t></x>
		<meta>
			<m n=":value"><e>cast "Literal"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Literal>
	<Metadata public="1" get="inline" set="null" expr="cast &quot;Metadata&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Metadata"/></x>
		<meta>
			<m n=":value"><e>cast "Metadata"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Metadata>
	<Keyword public="1" get="inline" set="null" expr="cast &quot;Keyword&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Keyword"/></x>
		<meta>
			<m n=":value"><e>cast "Keyword"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Keyword>
	<AnonymousStructure public="1" get="inline" set="null" expr="cast &quot;AnonymousStructure&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.JsonAnon"/></x>
		<meta>
			<m n=":value"><e>cast "AnonymousStructure"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AnonymousStructure>
	<Expression public="1" get="inline" set="null" expr="cast &quot;Expression&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.JsonTExpr"/></x>
		<meta>
			<m n=":value"><e>cast "Expression"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Expression>
	<TypeParameter public="1" get="inline" set="null" expr="cast &quot;TypeParameter&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayModuleTypeParameter"/></x>
		<meta>
			<m n=":value"><e>cast "TypeParameter"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TypeParameter>
	<Define public="1" get="inline" set="null" expr="cast &quot;Define&quot;" line="1" static="1">
		<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Define"/></x>
		<meta>
			<m n=":value"><e>cast "Define"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Define>
	<meta>
		<m n=":nativeGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.DisplayItemKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1">
		<Local public="1" get="inline" set="null" expr="cast &quot;Local&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayLocal"><d/></t></x>
			<meta>
				<m n=":value"><e>cast "Local"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Local>
		<ClassField public="1" get="inline" set="null" expr="cast &quot;ClassField&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.ClassFieldOccurrence"><d/></t></x>
			<meta>
				<m n=":value"><e>cast "ClassField"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ClassField>
		<EnumField public="1" get="inline" set="null" expr="cast &quot;EnumField&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.EnumFieldOccurrence"><d/></t></x>
			<meta>
				<m n=":value"><e>cast "EnumField"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EnumField>
		<EnumAbstractField public="1" get="inline" set="null" expr="cast &quot;EnumAbstractField&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.ClassFieldOccurrence"><d/></t></x>
			<meta>
				<m n=":value"><e>cast "EnumAbstractField"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Only for the enum values in enum abstracts, other fields use `ClassField`.</haxe_doc>
		</EnumAbstractField>
		<Type public="1" get="inline" set="null" expr="cast &quot;Type&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayModuleType"/></x>
			<meta>
				<m n=":value"><e>cast "Type"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Type>
		<Package public="1" get="inline" set="null" expr="cast &quot;Package&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Package"/></x>
			<meta>
				<m n=":value"><e>cast "Package"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Package>
		<Module public="1" get="inline" set="null" expr="cast &quot;Module&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Module"/></x>
			<meta>
				<m n=":value"><e>cast "Module"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Module>
		<Literal public="1" get="inline" set="null" expr="cast &quot;Literal&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayLiteral"><d/></t></x>
			<meta>
				<m n=":value"><e>cast "Literal"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Literal>
		<Metadata public="1" get="inline" set="null" expr="cast &quot;Metadata&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Metadata"/></x>
			<meta>
				<m n=":value"><e>cast "Metadata"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Metadata>
		<Keyword public="1" get="inline" set="null" expr="cast &quot;Keyword&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Keyword"/></x>
			<meta>
				<m n=":value"><e>cast "Keyword"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Keyword>
		<AnonymousStructure public="1" get="inline" set="null" expr="cast &quot;AnonymousStructure&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.JsonAnon"/></x>
			<meta>
				<m n=":value"><e>cast "AnonymousStructure"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AnonymousStructure>
		<Expression public="1" get="inline" set="null" expr="cast &quot;Expression&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.JsonTExpr"/></x>
			<meta>
				<m n=":value"><e>cast "Expression"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Expression>
		<TypeParameter public="1" get="inline" set="null" expr="cast &quot;TypeParameter&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.DisplayModuleTypeParameter"/></x>
			<meta>
				<m n=":value"><e>cast "TypeParameter"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TypeParameter>
		<Define public="1" get="inline" set="null" expr="cast &quot;Define&quot;" line="1" static="1">
			<x path="haxe.display.DisplayItemKind"><t path="haxe.display.Define"/></x>
			<meta>
				<m n=":value"><e>cast "Define"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Define>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="haxe.display.DisplayItem" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<type>
				<x path="Null"><t path="haxe.display.JsonType"><d/></t></x>
				<meta><m n=":optional"/></meta>
			</type>
			<kind><x path="haxe.display.DisplayItemKind"><c path="haxe.display.DisplayItem.T"/></x></kind>
			<index>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</index>
			<args><c path="haxe.display.DisplayItem.T"/></args>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.DisplayItemOccurrence" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<range><t path="haxe.display.Range"/></range>
			<moduleTypeFollowed>
				<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
				<meta><m n=":optional"/></meta>
			</moduleTypeFollowed>
			<moduleType>
				<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
				<meta><m n=":optional"/></meta>
			</moduleType>
			<item><t path="haxe.display.DisplayItem"><c path="haxe.display.DisplayItemOccurrence.T"/></t></item>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.FieldCompletionSubject" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<range><t path="haxe.display.Range"/></range>
			<moduleTypeFollowed>
				<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
				<meta><m n=":optional"/></meta>
			</moduleTypeFollowed>
			<moduleType>
				<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
				<meta><m n=":optional"/></meta>
			</moduleType>
			<keyValueIterator>
				<x path="Null"><a>
	<value><t path="haxe.display.JsonType"><d/></t></value>
	<key><t path="haxe.display.JsonType"><d/></t></key>
</a></x>
				<meta><m n=":optional"/></meta>
			</keyValueIterator>
			<iterator>
				<x path="Null"><a><type><t path="haxe.display.JsonType"><d/></t></type></a></x>
				<meta><m n=":optional"/></meta>
			</iterator>
			<item><t path="haxe.display.DisplayItem"><c path="haxe.display.FieldCompletionSubject.T"/></t></item>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.ToplevelCompletion" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<expectedTypeFollowed>
				<x path="Null"><t path="haxe.display.JsonType"><c path="haxe.display.ToplevelCompletion.T"/></t></x>
				<meta><m n=":optional"/></meta>
			</expectedTypeFollowed>
			<expectedType>
				<x path="Null"><t path="haxe.display.JsonType"><c path="haxe.display.ToplevelCompletion.T"/></t></x>
				<meta><m n=":optional"/></meta>
			</expectedType>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.StructExtensionCompletion" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a><isIntersectionType><x path="Bool"/></isIntersectionType></a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.PatternCompletion" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<isOutermostPattern><x path="Bool"/></isOutermostPattern>
			<expectedTypeFollowed>
				<x path="Null"><t path="haxe.display.JsonType"><c path="haxe.display.PatternCompletion.T"/></t></x>
				<meta><m n=":optional"/></meta>
			</expectedTypeFollowed>
			<expectedType>
				<x path="Null"><t path="haxe.display.JsonType"><c path="haxe.display.PatternCompletion.T"/></t></x>
				<meta><m n=":optional"/></meta>
			</expectedType>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.display.CompletionModeKind" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta>
			<m n=":hxGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.display._Display.CompletionModeKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1">
	<Field public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><t path="haxe.display.FieldCompletionSubject"><d/></t></x>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Field>
	<StructureField public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</StructureField>
	<Toplevel public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><t path="haxe.display.ToplevelCompletion"><d/></t></x>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Toplevel>
	<Metadata public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Metadata>
	<TypeHint public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TypeHint>
	<Extends public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Extends>
	<Implements public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Implements>
	<StructExtension public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><t path="haxe.display.StructExtensionCompletion"/></x>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</StructExtension>
	<Import public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Import>
	<Using public="1" get="inline" set="null" expr="cast 9" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Using>
	<New public="1" get="inline" set="null" expr="cast 10" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 10</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</New>
	<Pattern public="1" get="inline" set="null" expr="cast 11" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><t path="haxe.display.PatternCompletion"><d/></t></x>
		<meta>
			<m n=":value"><e>cast 11</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Pattern>
	<Override public="1" get="inline" set="null" expr="cast 12" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 12</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Override>
	<TypeRelation public="1" get="inline" set="null" expr="cast 13" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 13</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TypeRelation>
	<TypeDeclaration public="1" get="inline" set="null" expr="cast 14" line="1" static="1">
		<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast 14</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TypeDeclaration>
	<meta>
		<m n=":hxGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.CompletionModeKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1">
		<Field public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><t path="haxe.display.FieldCompletionSubject"><d/></t></x>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Field>
		<StructureField public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</StructureField>
		<Toplevel public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><t path="haxe.display.ToplevelCompletion"><d/></t></x>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Toplevel>
		<Metadata public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Metadata>
		<TypeHint public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TypeHint>
		<Extends public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Extends>
		<Implements public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Implements>
		<StructExtension public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><t path="haxe.display.StructExtensionCompletion"/></x>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</StructExtension>
		<Import public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Import>
		<Using public="1" get="inline" set="null" expr="cast 9" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Using>
		<New public="1" get="inline" set="null" expr="cast 10" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 10</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</New>
		<Pattern public="1" get="inline" set="null" expr="cast 11" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><t path="haxe.display.PatternCompletion"><d/></t></x>
			<meta>
				<m n=":value"><e>cast 11</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Pattern>
		<Override public="1" get="inline" set="null" expr="cast 12" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 12</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Override>
		<TypeRelation public="1" get="inline" set="null" expr="cast 13" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 13</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TypeRelation>
		<TypeDeclaration public="1" get="inline" set="null" expr="cast 14" line="1" static="1">
			<x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionModeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast 14</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TypeDeclaration>
		<meta>
			<m n=":hxGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="haxe.display.CompletionMode" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<kind><x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionMode.T"/></x></kind>
			<args>
				<x path="Null"><c path="haxe.display.CompletionMode.T"/></x>
				<meta><m n=":optional"/></meta>
			</args>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.CompletionResponse" params="T1:T2" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<replaceRange>
				<x path="Null"><t path="haxe.display.Range"/></x>
				<meta><m n=":optional"/></meta>
			</replaceRange>
			<mode><t path="haxe.display.CompletionMode"><c path="haxe.display.CompletionResponse.T2"/></t></mode>
			<items><c path="Array"><t path="haxe.display.DisplayItem"><c path="haxe.display.CompletionResponse.T1"/></t></c></items>
			<isIncomplete>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</isIncomplete>
			<filterString>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</filterString>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.CompletionResult" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<t path="haxe.display.Response"><x path="Null"><t path="haxe.display.CompletionResponse">
	<d/>
	<d/>
</t></x></t>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.CompletionItemResolveParams" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a><index><x path="Int"/></index></a>
		<haxe_doc>CompletionItem Resolve</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.CompletionItemResolveResult" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<t path="haxe.display.Response"><a><item><t path="haxe.display.DisplayItem"><d/></t></item></a></t>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.GotoDefinitionResult" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<t path="haxe.display.Response"><c path="Array"><t path="haxe.display.Location"/></c></t>
		<haxe_doc>GotoDefinition</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.GotoTypeDefinitionResult" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<t path="haxe.display.Response"><c path="Array"><t path="haxe.display.Location"/></c></t>
		<haxe_doc>GotoTypeDefinition</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.HoverResult" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<t path="haxe.display.Response"><x path="Null"><t path="haxe.display.HoverDisplayItemOccurence"><d/></t></x></t>
		<haxe_doc>Hover</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.HoverDisplayItemOccurence" params="T" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<range><t path="haxe.display.Range"/></range>
			<moduleTypeFollowed>
				<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
				<meta><m n=":optional"/></meta>
			</moduleTypeFollowed>
			<moduleType>
				<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
				<meta><m n=":optional"/></meta>
			</moduleType>
			<item><t path="haxe.display.DisplayItem"><c path="haxe.display.HoverDisplayItemOccurence.T"/></t></item>
			<expected>
				<x path="Null"><a>
	<type>
		<x path="Null"><t path="haxe.display.JsonType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</type>
	<name>
		<x path="Null"><a>
	<name><c path="String"/></name>
	<kind><x path="haxe.display.HoverExpectedNameKind"/></kind>
</a></x>
		<meta><m n=":optional"/></meta>
	</name>
</a></x>
				<meta><m n=":optional"/></meta>
			</expected>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.display.HoverExpectedNameKind" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta>
			<m n=":hxGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.display._Display.HoverExpectedNameKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1">
	<FunctionArgument public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.HoverExpectedNameKind"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FunctionArgument>
	<StructureField public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.HoverExpectedNameKind"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</StructureField>
	<meta>
		<m n=":hxGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.HoverExpectedNameKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1">
		<FunctionArgument public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.HoverExpectedNameKind"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FunctionArgument>
		<StructureField public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.HoverExpectedNameKind"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</StructureField>
		<meta>
			<m n=":hxGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="haxe.display.DeterminePackageResult" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<t path="haxe.display.Response"><c path="Array"><c path="String"/></c></t>
		<haxe_doc>DeterminePackage</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.SignatureHelpParams" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<wasAutoTriggered><x path="Bool"/></wasAutoTriggered>
			<offset>
				<x path="Int"/>
				<haxe_doc>Unicode character offset in the file.</haxe_doc>
			</offset>
			<file><x path="haxe.display.FsPath"/></file>
			<contents>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</contents>
		</a>
		<haxe_doc>SignatureHelp</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.SignatureInformation" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<ret><t path="haxe.display.JsonType"><d/></t></ret>
			<documentation>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</documentation>
			<args><c path="Array"><t path="haxe.display.JsonFunctionArgument"/></c></args>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.display.SignatureItemKind" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta>
			<m n=":hxGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.display._Display.SignatureItemKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1">
	<Call public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.SignatureItemKind"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Call>
	<ArrayAccess public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.SignatureItemKind"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ArrayAccess>
	<meta>
		<m n=":hxGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Display.SignatureItemKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" private="1" module="haxe.display.Display" extern="1">
		<Call public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.SignatureItemKind"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Call>
		<ArrayAccess public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.SignatureItemKind"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ArrayAccess>
		<meta>
			<m n=":hxGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="haxe.display.SignatureItem" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<signatures><c path="Array"><t path="haxe.display.SignatureInformation"/></c></signatures>
			<kind><x path="haxe.display.SignatureItemKind"/></kind>
			<activeSignature><x path="Int"/></activeSignature>
			<activeParameter><x path="Int"/></activeParameter>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.SignatureHelpResult" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<t path="haxe.display.Response"><x path="Null"><t path="haxe.display.SignatureItem"/></x></t>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.PositionParams" params="" file="/home/vsts/work/1/s/std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<offset>
				<x path="Int"/>
				<haxe_doc>Unicode character offset in the file.</haxe_doc>
			</offset>
			<file><x path="haxe.display.FsPath"/></file>
			<contents>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</contents>
		</a>
		<haxe_doc>General types</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.display.FsPath" params="" file="/home/vsts/work/1/s/std/haxe/display/FsPath.hx">
		<this><c path="String"/></this>
		<meta><m n=":nativeGen"/></meta>
		<impl><class path="haxe.display._FsPath.FsPath_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/FsPath.hx" private="1" module="haxe.display.FsPath">
	<_new public="1" get="inline" set="null" line="26" static="1">
		<f a="path">
			<c path="String"/>
			<x path="haxe.display.FsPath"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<toString public="1" get="inline" set="null" line="30" static="1">
		<f a="this">
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._FsPath.FsPath_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/FsPath.hx" private="1" module="haxe.display.FsPath">
		<_new public="1" get="inline" set="null" line="26" static="1">
			<f a="path">
				<c path="String"/>
				<x path="haxe.display.FsPath"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<toString public="1" get="inline" set="null" line="30" static="1">
			<f a="this">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<typedef path="haxe.display.JsonTodo" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<d/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.JsonPos" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<a>
			<min><x path="Int"/></min>
			<max><x path="Int"/></max>
			<file><c path="String"/></file>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.JsonDoc" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<x path="Null"><c path="String"/></x>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.display.ImportStatus" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><x path="Int"/></this>
		<meta>
			<m n=":hxGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.display._JsonModuleTypes.ImportStatus_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
	<Imported public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.ImportStatus"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>This type is already available with it's unqualified name for one of these reasons:
		  - it's a toplevel type
		  - it's imported with an `import` in the current module
		  - it's imported in an `import.hx` file</haxe_doc>
	</Imported>
	<Unimported public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.ImportStatus"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The type is currently not imported. It can be accessed either
		with its fully qualified name or by inserting an import.</haxe_doc>
	</Unimported>
	<Shadowed public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.ImportStatus"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A type with the same name is already imported in the module.
		The fully qualified name has to be used to access it.</haxe_doc>
	</Shadowed>
	<meta>
		<m n=":hxGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.ImportStatus_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
		<Imported public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.ImportStatus"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>This type is already available with it's unqualified name for one of these reasons:
		  - it's a toplevel type
		  - it's imported with an `import` in the current module
		  - it's imported in an `import.hx` file</haxe_doc>
		</Imported>
		<Unimported public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.ImportStatus"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The type is currently not imported. It can be accessed either
		with its fully qualified name or by inserting an import.</haxe_doc>
		</Unimported>
		<Shadowed public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.ImportStatus"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A type with the same name is already imported in the module.
		The fully qualified name has to be used to access it.</haxe_doc>
		</Shadowed>
		<meta>
			<m n=":hxGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="haxe.display.JsonPackagePath" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<a><pack><c path="Array"><c path="String"/></c></pack></a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.JsonModulePath" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<a>
			<pack><c path="Array"><c path="String"/></c></pack>
			<moduleName><c path="String"/></moduleName>
			<importStatus>
				<x path="Null"><x path="haxe.display.ImportStatus"/></x>
				<meta><m n=":optional"/></meta>
			</importStatus>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.JsonTypePath" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<a>
			<typeName><c path="String"/></typeName>
			<pack><c path="Array"><c path="String"/></c></pack>
			<moduleName><c path="String"/></moduleName>
			<importStatus>
				<x path="Null"><x path="haxe.display.ImportStatus"/></x>
				<meta><m n=":optional"/></meta>
			</importStatus>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.JsonStaticFieldPath" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<a>
			<typeName><c path="String"/></typeName>
			<pack><c path="Array"><c path="String"/></c></pack>
			<moduleName><c path="String"/></moduleName>
			<importStatus>
				<x path="Null"><x path="haxe.display.ImportStatus"/></x>
				<meta><m n=":optional"/></meta>
			</importStatus>
			<fieldName><c path="String"/></fieldName>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.JsonTypePathWithParams" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<a>
			<path><t path="haxe.display.JsonTypePath"/></path>
			<params><t path="haxe.display.JsonTypes"/></params>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.JsonFunctionArgument" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<a>
			<value>
				<x path="Null"><a><string><c path="String"/></string></a></x>
				<meta><m n=":optional"/></meta>
			</value>
			<t><t path="haxe.display.JsonType"><d/></t></t>
			<opt><x path="Bool"/></opt>
			<name><c path="String"/></name>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.JsonFunctionSignature" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<a>
			<ret><t path="haxe.display.JsonType"><d/></t></ret>
			<args><c path="Array"><t path="haxe.display.JsonFunctionArgument"/></c></args>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.display.JsonAnonStatusKind" params="T" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonAnonStatusKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
	<AClosed public="1" get="inline" set="null" expr="cast &quot;AClosed&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AClosed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AClosed>
	<AOpened public="1" get="inline" set="null" expr="cast &quot;AOpened&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AOpened"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AOpened>
	<AConst public="1" get="inline" set="null" expr="cast &quot;AConst&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AConst"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AConst>
	<AExtend public="1" get="inline" set="null" expr="cast &quot;AExtend&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypes"/></x>
		<meta>
			<m n=":value"><e>cast "AExtend"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AExtend>
	<AClassStatics public="1" get="inline" set="null" expr="cast &quot;AClassStatics&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
		<meta>
			<m n=":value"><e>cast "AClassStatics"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AClassStatics>
	<AEnumStatics public="1" get="inline" set="null" expr="cast &quot;AEnumStatics&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
		<meta>
			<m n=":value"><e>cast "AEnumStatics"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AEnumStatics>
	<AAbstractStatics public="1" get="inline" set="null" expr="cast &quot;AAbstractStatics&quot;" line="1" static="1">
		<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
		<meta>
			<m n=":value"><e>cast "AAbstractStatics"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AAbstractStatics>
	<meta>
		<m n=":nativeGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonAnonStatusKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
		<AClosed public="1" get="inline" set="null" expr="cast &quot;AClosed&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AClosed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AClosed>
		<AOpened public="1" get="inline" set="null" expr="cast &quot;AOpened&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AOpened"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AOpened>
		<AConst public="1" get="inline" set="null" expr="cast &quot;AConst&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatusKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AConst"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AConst>
		<AExtend public="1" get="inline" set="null" expr="cast &quot;AExtend&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypes"/></x>
			<meta>
				<m n=":value"><e>cast "AExtend"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AExtend>
		<AClassStatics public="1" get="inline" set="null" expr="cast &quot;AClassStatics&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
			<meta>
				<m n=":value"><e>cast "AClassStatics"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AClassStatics>
		<AEnumStatics public="1" get="inline" set="null" expr="cast &quot;AEnumStatics&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
			<meta>
				<m n=":value"><e>cast "AEnumStatics"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AEnumStatics>
		<AAbstractStatics public="1" get="inline" set="null" expr="cast &quot;AAbstractStatics&quot;" line="1" static="1">
			<x path="haxe.display.JsonAnonStatusKind"><t path="haxe.display.JsonTypePath"/></x>
			<meta>
				<m n=":value"><e>cast "AAbstractStatics"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AAbstractStatics>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="haxe.display.JsonAnonStatus" params="T" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<a>
			<kind><x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatus.T"/></x></kind>
			<args><c path="haxe.display.JsonAnonStatus.T"/></args>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.JsonAnon" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<a>
			<status><t path="haxe.display.JsonAnonStatus"><d/></t></status>
			<fields><t path="haxe.display.JsonClassFields"/></fields>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.display.JsonTypeKind" params="T" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonTypeKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
	<TMono public="1" get="inline" set="null" expr="cast &quot;TMono&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><c path="haxe.display.JsonTypeKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "TMono"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TMono>
	<TInst public="1" get="inline" set="null" expr="cast &quot;TInst&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "TInst"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TInst>
	<TEnum public="1" get="inline" set="null" expr="cast &quot;TEnum&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "TEnum"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TEnum>
	<TType public="1" get="inline" set="null" expr="cast &quot;TType&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "TType"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TType>
	<TAbstract public="1" get="inline" set="null" expr="cast &quot;TAbstract&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "TAbstract"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TAbstract>
	<TFun public="1" get="inline" set="null" expr="cast &quot;TFun&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonFunctionSignature"/></x>
		<meta>
			<m n=":value"><e>cast "TFun"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TFun>
	<TAnonymous public="1" get="inline" set="null" expr="cast &quot;TAnonymous&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonAnon"/></x>
		<meta>
			<m n=":value"><e>cast "TAnonymous"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TAnonymous>
	<TDynamic public="1" get="inline" set="null" expr="cast &quot;TDynamic&quot;" line="1" static="1">
		<x path="haxe.display.JsonTypeKind"><x path="Null"><t path="haxe.display.JsonType"><d/></t></x></x>
		<meta>
			<m n=":value"><e>cast "TDynamic"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TDynamic>
	<meta>
		<m n=":nativeGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonTypeKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
		<TMono public="1" get="inline" set="null" expr="cast &quot;TMono&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><c path="haxe.display.JsonTypeKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "TMono"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TMono>
		<TInst public="1" get="inline" set="null" expr="cast &quot;TInst&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "TInst"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TInst>
		<TEnum public="1" get="inline" set="null" expr="cast &quot;TEnum&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "TEnum"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TEnum>
		<TType public="1" get="inline" set="null" expr="cast &quot;TType&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "TType"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TType>
		<TAbstract public="1" get="inline" set="null" expr="cast &quot;TAbstract&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "TAbstract"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TAbstract>
		<TFun public="1" get="inline" set="null" expr="cast &quot;TFun&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonFunctionSignature"/></x>
			<meta>
				<m n=":value"><e>cast "TFun"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TFun>
		<TAnonymous public="1" get="inline" set="null" expr="cast &quot;TAnonymous&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><t path="haxe.display.JsonAnon"/></x>
			<meta>
				<m n=":value"><e>cast "TAnonymous"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TAnonymous>
		<TDynamic public="1" get="inline" set="null" expr="cast &quot;TDynamic&quot;" line="1" static="1">
			<x path="haxe.display.JsonTypeKind"><x path="Null"><t path="haxe.display.JsonType"><d/></t></x></x>
			<meta>
				<m n=":value"><e>cast "TDynamic"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TDynamic>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="haxe.display.JsonType" params="T" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<a>
			<kind><x path="haxe.display.JsonTypeKind"><c path="haxe.display.JsonType.T"/></x></kind>
			<args><c path="haxe.display.JsonType.T"/></args>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.JsonTypes" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<c path="Array"><t path="haxe.display.JsonType"><d/></t></c>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.JsonTypeParameter" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<a>
			<name><c path="String"/></name>
			<constraints><t path="haxe.display.JsonTypes"/></constraints>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.JsonTypeParameters" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<c path="Array"><t path="haxe.display.JsonTypeParameter"/></c>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.display.JsonBinopKind" params="T" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonBinopKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
	<OpAdd public="1" get="inline" set="null" expr="cast &quot;OpAdd&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpAdd"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpAdd>
	<OpMult public="1" get="inline" set="null" expr="cast &quot;OpMult&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpMult"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpMult>
	<OpDiv public="1" get="inline" set="null" expr="cast &quot;OpDiv&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpDiv"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpDiv>
	<OpSub public="1" get="inline" set="null" expr="cast &quot;OpSub&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpSub"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpSub>
	<OpAssign public="1" get="inline" set="null" expr="cast &quot;OpAssign&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpAssign"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpAssign>
	<OpEq public="1" get="inline" set="null" expr="cast &quot;OpEq&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpEq"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpEq>
	<OpNotEq public="1" get="inline" set="null" expr="cast &quot;OpNotEq&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpNotEq"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpNotEq>
	<OpGt public="1" get="inline" set="null" expr="cast &quot;OpGt&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpGt"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpGt>
	<OpGte public="1" get="inline" set="null" expr="cast &quot;OpGte&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpGte"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpGte>
	<OpLt public="1" get="inline" set="null" expr="cast &quot;OpLt&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpLt"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpLt>
	<OpLte public="1" get="inline" set="null" expr="cast &quot;OpLte&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpLte"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpLte>
	<OpAnd public="1" get="inline" set="null" expr="cast &quot;OpAnd&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpAnd"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpAnd>
	<OpOr public="1" get="inline" set="null" expr="cast &quot;OpOr&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpOr"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpOr>
	<OpXor public="1" get="inline" set="null" expr="cast &quot;OpXor&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpXor"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpXor>
	<OpBoolAnd public="1" get="inline" set="null" expr="cast &quot;OpBoolAnd&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpBoolAnd"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpBoolAnd>
	<OpBoolOr public="1" get="inline" set="null" expr="cast &quot;OpBoolOr&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpBoolOr"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpBoolOr>
	<OpShl public="1" get="inline" set="null" expr="cast &quot;OpShl&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpShl"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpShl>
	<OpShr public="1" get="inline" set="null" expr="cast &quot;OpShr&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpShr"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpShr>
	<OpUShr public="1" get="inline" set="null" expr="cast &quot;OpUShr&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpUShr"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpUShr>
	<OpMod public="1" get="inline" set="null" expr="cast &quot;OpMod&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpMod"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpMod>
	<OpAssignOp public="1" get="inline" set="null" expr="cast &quot;OpAssignOp&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><t path="haxe.display.JsonBinop"><d/></t></x>
		<meta>
			<m n=":value"><e>cast "OpAssignOp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpAssignOp>
	<OpInterval public="1" get="inline" set="null" expr="cast &quot;OpInterval&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpInterval"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpInterval>
	<OpArrow public="1" get="inline" set="null" expr="cast &quot;OpArrow&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpArrow"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpArrow>
	<OpIn public="1" get="inline" set="null" expr="cast &quot;OpIn&quot;" line="1" static="1">
		<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "OpIn"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpIn>
	<meta>
		<m n=":nativeGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonBinopKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
		<OpAdd public="1" get="inline" set="null" expr="cast &quot;OpAdd&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpAdd"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpAdd>
		<OpMult public="1" get="inline" set="null" expr="cast &quot;OpMult&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpMult"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpMult>
		<OpDiv public="1" get="inline" set="null" expr="cast &quot;OpDiv&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpDiv"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpDiv>
		<OpSub public="1" get="inline" set="null" expr="cast &quot;OpSub&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpSub"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpSub>
		<OpAssign public="1" get="inline" set="null" expr="cast &quot;OpAssign&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpAssign"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpAssign>
		<OpEq public="1" get="inline" set="null" expr="cast &quot;OpEq&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpEq"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpEq>
		<OpNotEq public="1" get="inline" set="null" expr="cast &quot;OpNotEq&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpNotEq"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpNotEq>
		<OpGt public="1" get="inline" set="null" expr="cast &quot;OpGt&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpGt"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpGt>
		<OpGte public="1" get="inline" set="null" expr="cast &quot;OpGte&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpGte"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpGte>
		<OpLt public="1" get="inline" set="null" expr="cast &quot;OpLt&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpLt"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpLt>
		<OpLte public="1" get="inline" set="null" expr="cast &quot;OpLte&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpLte"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpLte>
		<OpAnd public="1" get="inline" set="null" expr="cast &quot;OpAnd&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpAnd"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpAnd>
		<OpOr public="1" get="inline" set="null" expr="cast &quot;OpOr&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpOr"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpOr>
		<OpXor public="1" get="inline" set="null" expr="cast &quot;OpXor&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpXor"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpXor>
		<OpBoolAnd public="1" get="inline" set="null" expr="cast &quot;OpBoolAnd&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpBoolAnd"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpBoolAnd>
		<OpBoolOr public="1" get="inline" set="null" expr="cast &quot;OpBoolOr&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpBoolOr"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpBoolOr>
		<OpShl public="1" get="inline" set="null" expr="cast &quot;OpShl&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpShl"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpShl>
		<OpShr public="1" get="inline" set="null" expr="cast &quot;OpShr&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpShr"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpShr>
		<OpUShr public="1" get="inline" set="null" expr="cast &quot;OpUShr&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpUShr"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpUShr>
		<OpMod public="1" get="inline" set="null" expr="cast &quot;OpMod&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpMod"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpMod>
		<OpAssignOp public="1" get="inline" set="null" expr="cast &quot;OpAssignOp&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><t path="haxe.display.JsonBinop"><d/></t></x>
			<meta>
				<m n=":value"><e>cast "OpAssignOp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpAssignOp>
		<OpInterval public="1" get="inline" set="null" expr="cast &quot;OpInterval&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpInterval"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpInterval>
		<OpArrow public="1" get="inline" set="null" expr="cast &quot;OpArrow&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpArrow"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpArrow>
		<OpIn public="1" get="inline" set="null" expr="cast &quot;OpIn&quot;" line="1" static="1">
			<x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinopKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "OpIn"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpIn>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="haxe.display.JsonBinop" params="T" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<a>
			<kind><x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinop.T"/></x></kind>
			<args><c path="haxe.display.JsonBinop.T"/></args>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.display.JsonUnop" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonUnop_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
	<OpIncrement public="1" get="inline" set="null" expr="cast &quot;OpIncrement&quot;" line="1" static="1">
		<x path="haxe.display.JsonUnop"/>
		<meta>
			<m n=":value"><e>cast "OpIncrement"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpIncrement>
	<OpDecrement public="1" get="inline" set="null" expr="cast &quot;OpDecrement&quot;" line="1" static="1">
		<x path="haxe.display.JsonUnop"/>
		<meta>
			<m n=":value"><e>cast "OpDecrement"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpDecrement>
	<OpNot public="1" get="inline" set="null" expr="cast &quot;OpNot&quot;" line="1" static="1">
		<x path="haxe.display.JsonUnop"/>
		<meta>
			<m n=":value"><e>cast "OpNot"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpNot>
	<OpNeg public="1" get="inline" set="null" expr="cast &quot;OpNeg&quot;" line="1" static="1">
		<x path="haxe.display.JsonUnop"/>
		<meta>
			<m n=":value"><e>cast "OpNeg"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpNeg>
	<OpNegBits public="1" get="inline" set="null" expr="cast &quot;OpNegBits&quot;" line="1" static="1">
		<x path="haxe.display.JsonUnop"/>
		<meta>
			<m n=":value"><e>cast "OpNegBits"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpNegBits>
	<meta>
		<m n=":nativeGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonUnop_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
		<OpIncrement public="1" get="inline" set="null" expr="cast &quot;OpIncrement&quot;" line="1" static="1">
			<x path="haxe.display.JsonUnop"/>
			<meta>
				<m n=":value"><e>cast "OpIncrement"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpIncrement>
		<OpDecrement public="1" get="inline" set="null" expr="cast &quot;OpDecrement&quot;" line="1" static="1">
			<x path="haxe.display.JsonUnop"/>
			<meta>
				<m n=":value"><e>cast "OpDecrement"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpDecrement>
		<OpNot public="1" get="inline" set="null" expr="cast &quot;OpNot&quot;" line="1" static="1">
			<x path="haxe.display.JsonUnop"/>
			<meta>
				<m n=":value"><e>cast "OpNot"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpNot>
		<OpNeg public="1" get="inline" set="null" expr="cast &quot;OpNeg&quot;" line="1" static="1">
			<x path="haxe.display.JsonUnop"/>
			<meta>
				<m n=":value"><e>cast "OpNeg"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpNeg>
		<OpNegBits public="1" get="inline" set="null" expr="cast &quot;OpNegBits&quot;" line="1" static="1">
			<x path="haxe.display.JsonUnop"/>
			<meta>
				<m n=":value"><e>cast "OpNegBits"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpNegBits>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="haxe.display.JsonExpr" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<t path="haxe.display.JsonTodo"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.JsonMetadataEntry" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<a>
			<pos><t path="haxe.display.JsonPos"/></pos>
			<name><c path="String"/></name>
			<args><c path="Array"><t path="haxe.display.JsonExpr"/></c></args>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.JsonMetadata" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<c path="Array"><t path="haxe.display.JsonMetadataEntry"/></c>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.display.JsonTConstantKind" params="T" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonTConstantKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
	<TInt public="1" get="inline" set="null" expr="cast &quot;TInt&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
		<meta>
			<m n=":value"><e>cast "TInt"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TInt>
	<TFloat public="1" get="inline" set="null" expr="cast &quot;TFloat&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
		<meta>
			<m n=":value"><e>cast "TFloat"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TFloat>
	<TString public="1" get="inline" set="null" expr="cast &quot;TString&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
		<meta>
			<m n=":value"><e>cast "TString"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TString>
	<TBool public="1" get="inline" set="null" expr="cast &quot;TBool&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><x path="Bool"/></x>
		<meta>
			<m n=":value"><e>cast "TBool"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TBool>
	<TNull public="1" get="inline" set="null" expr="cast &quot;TNull&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "TNull"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TNull>
	<TThis public="1" get="inline" set="null" expr="cast &quot;TThis&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "TThis"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TThis>
	<TSuper public="1" get="inline" set="null" expr="cast &quot;TSuper&quot;" line="1" static="1">
		<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "TSuper"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TSuper>
	<meta>
		<m n=":nativeGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonTConstantKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
		<TInt public="1" get="inline" set="null" expr="cast &quot;TInt&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
			<meta>
				<m n=":value"><e>cast "TInt"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TInt>
		<TFloat public="1" get="inline" set="null" expr="cast &quot;TFloat&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
			<meta>
				<m n=":value"><e>cast "TFloat"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TFloat>
		<TString public="1" get="inline" set="null" expr="cast &quot;TString&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="String"/></x>
			<meta>
				<m n=":value"><e>cast "TString"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TString>
		<TBool public="1" get="inline" set="null" expr="cast &quot;TBool&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><x path="Bool"/></x>
			<meta>
				<m n=":value"><e>cast "TBool"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TBool>
		<TNull public="1" get="inline" set="null" expr="cast &quot;TNull&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "TNull"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TNull>
		<TThis public="1" get="inline" set="null" expr="cast &quot;TThis&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "TThis"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TThis>
		<TSuper public="1" get="inline" set="null" expr="cast &quot;TSuper&quot;" line="1" static="1">
			<x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstantKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "TSuper"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TSuper>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="haxe.display.JsonTConstant" params="T" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<a>
			<kind><x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstant.T"/></x></kind>
			<args><c path="haxe.display.JsonTConstant.T"/></args>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.JsonTExpr" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<t path="haxe.display.JsonTodo"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.display.JsonVarAccessKind" params="T" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonVarAccessKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
	<AccNormal public="1" get="inline" set="null" expr="cast &quot;AccNormal&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccNormal"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AccNormal>
	<AccNo public="1" get="inline" set="null" expr="cast &quot;AccNo&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccNo"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AccNo>
	<AccNever public="1" get="inline" set="null" expr="cast &quot;AccNever&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccNever"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AccNever>
	<AccResolve public="1" get="inline" set="null" expr="cast &quot;AccResolve&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccResolve"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AccResolve>
	<AccCall public="1" get="inline" set="null" expr="cast &quot;AccCall&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccCall"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AccCall>
	<AccInline public="1" get="inline" set="null" expr="cast &quot;AccInline&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccInline"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AccInline>
	<AccRequire public="1" get="inline" set="null" expr="cast &quot;AccRequire&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><a>
	<require><c path="String"/></require>
	<message><x path="Null"><c path="String"/></x></message>
</a></x>
		<meta>
			<m n=":value"><e>cast "AccRequire"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AccRequire>
	<AccCtor public="1" get="inline" set="null" expr="cast &quot;AccCtor&quot;" line="1" static="1">
		<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "AccCtor"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AccCtor>
	<meta>
		<m n=":nativeGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonVarAccessKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
		<AccNormal public="1" get="inline" set="null" expr="cast &quot;AccNormal&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccNormal"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AccNormal>
		<AccNo public="1" get="inline" set="null" expr="cast &quot;AccNo&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccNo"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AccNo>
		<AccNever public="1" get="inline" set="null" expr="cast &quot;AccNever&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccNever"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AccNever>
		<AccResolve public="1" get="inline" set="null" expr="cast &quot;AccResolve&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccResolve"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AccResolve>
		<AccCall public="1" get="inline" set="null" expr="cast &quot;AccCall&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccCall"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AccCall>
		<AccInline public="1" get="inline" set="null" expr="cast &quot;AccInline&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccInline"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AccInline>
		<AccRequire public="1" get="inline" set="null" expr="cast &quot;AccRequire&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><a>
	<require><c path="String"/></require>
	<message><x path="Null"><c path="String"/></x></message>
</a></x>
			<meta>
				<m n=":value"><e>cast "AccRequire"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AccRequire>
		<AccCtor public="1" get="inline" set="null" expr="cast &quot;AccCtor&quot;" line="1" static="1">
			<x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccessKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "AccCtor"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AccCtor>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="haxe.display.JsonVarAccess" params="T" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<a>
			<kind><x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccess.T"/></x></kind>
			<args><c path="haxe.display.JsonVarAccess.T"/></args>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.display.JsonMethodKind" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonMethodKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
	<MethNormal public="1" get="inline" set="null" expr="cast &quot;MethNormal&quot;" line="1" static="1">
		<x path="haxe.display.JsonMethodKind"/>
		<meta>
			<m n=":value"><e>cast "MethNormal"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MethNormal>
	<MethInline public="1" get="inline" set="null" expr="cast &quot;MethInline&quot;" line="1" static="1">
		<x path="haxe.display.JsonMethodKind"/>
		<meta>
			<m n=":value"><e>cast "MethInline"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MethInline>
	<MethDynamic public="1" get="inline" set="null" expr="cast &quot;MethDynamic&quot;" line="1" static="1">
		<x path="haxe.display.JsonMethodKind"/>
		<meta>
			<m n=":value"><e>cast "MethDynamic"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MethDynamic>
	<MethMacro public="1" get="inline" set="null" expr="cast &quot;MethMacro&quot;" line="1" static="1">
		<x path="haxe.display.JsonMethodKind"/>
		<meta>
			<m n=":value"><e>cast "MethMacro"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MethMacro>
	<meta>
		<m n=":nativeGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonMethodKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
		<MethNormal public="1" get="inline" set="null" expr="cast &quot;MethNormal&quot;" line="1" static="1">
			<x path="haxe.display.JsonMethodKind"/>
			<meta>
				<m n=":value"><e>cast "MethNormal"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MethNormal>
		<MethInline public="1" get="inline" set="null" expr="cast &quot;MethInline&quot;" line="1" static="1">
			<x path="haxe.display.JsonMethodKind"/>
			<meta>
				<m n=":value"><e>cast "MethInline"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MethInline>
		<MethDynamic public="1" get="inline" set="null" expr="cast &quot;MethDynamic&quot;" line="1" static="1">
			<x path="haxe.display.JsonMethodKind"/>
			<meta>
				<m n=":value"><e>cast "MethDynamic"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MethDynamic>
		<MethMacro public="1" get="inline" set="null" expr="cast &quot;MethMacro&quot;" line="1" static="1">
			<x path="haxe.display.JsonMethodKind"/>
			<meta>
				<m n=":value"><e>cast "MethMacro"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MethMacro>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="haxe.display.JsonFieldKindKind" params="T" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonFieldKindKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
	<FVar public="1" get="inline" set="null" expr="cast &quot;FVar&quot;" line="1" static="1">
		<x path="haxe.display.JsonFieldKindKind"><a>
	<write><t path="haxe.display.JsonVarAccess"><d/></t></write>
	<read><t path="haxe.display.JsonVarAccess"><d/></t></read>
</a></x>
		<meta>
			<m n=":value"><e>cast "FVar"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FVar>
	<FMethod public="1" get="inline" set="null" expr="cast &quot;FMethod&quot;" line="1" static="1">
		<x path="haxe.display.JsonFieldKindKind"><x path="haxe.display.JsonMethodKind"/></x>
		<meta>
			<m n=":value"><e>cast "FMethod"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FMethod>
	<meta>
		<m n=":nativeGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonFieldKindKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
		<FVar public="1" get="inline" set="null" expr="cast &quot;FVar&quot;" line="1" static="1">
			<x path="haxe.display.JsonFieldKindKind"><a>
	<write><t path="haxe.display.JsonVarAccess"><d/></t></write>
	<read><t path="haxe.display.JsonVarAccess"><d/></t></read>
</a></x>
			<meta>
				<m n=":value"><e>cast "FVar"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FVar>
		<FMethod public="1" get="inline" set="null" expr="cast &quot;FMethod&quot;" line="1" static="1">
			<x path="haxe.display.JsonFieldKindKind"><x path="haxe.display.JsonMethodKind"/></x>
			<meta>
				<m n=":value"><e>cast "FMethod"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FMethod>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="haxe.display.JsonFieldKind" params="T" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<a>
			<kind><x path="haxe.display.JsonFieldKindKind"><c path="haxe.display.JsonFieldKind.T"/></x></kind>
			<args><c path="haxe.display.JsonFieldKind.T"/></args>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.display.JsonClassFieldScope" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><x path="Int"/></this>
		<meta>
			<m n=":hxGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonClassFieldScope_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
	<Static public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.display.JsonClassFieldScope"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Static>
	<Member public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.display.JsonClassFieldScope"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Member>
	<Constructor public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.JsonClassFieldScope"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Constructor>
	<meta>
		<m n=":hxGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonClassFieldScope_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
		<Static public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.display.JsonClassFieldScope"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Static>
		<Member public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.display.JsonClassFieldScope"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Member>
		<Constructor public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.JsonClassFieldScope"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Constructor>
		<meta>
			<m n=":hxGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="haxe.display.JsonClassField" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<a>
			<type><t path="haxe.display.JsonType"><d/></t></type>
			<scope><x path="haxe.display.JsonClassFieldScope"/></scope>
			<pos><t path="haxe.display.JsonPos"/></pos>
			<params><t path="haxe.display.JsonTypeParameters"/></params>
			<overloads><t path="haxe.display.JsonClassFields"/></overloads>
			<name><c path="String"/></name>
			<meta><t path="haxe.display.JsonMetadata"/></meta>
			<kind><t path="haxe.display.JsonFieldKind"><d/></t></kind>
			<isPublic><x path="Bool"/></isPublic>
			<isFinal><x path="Bool"/></isFinal>
			<expr>
				<x path="Null"><a><string><c path="String"/></string></a></x>
				<meta><m n=":optional"/></meta>
			</expr>
			<doc><t path="haxe.display.JsonDoc"/></doc>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.JsonClassFields" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<c path="Array"><t path="haxe.display.JsonClassField"/></c>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.JsonClassFieldReference" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<c path="String"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.JsonEnumField" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<a>
			<type><t path="haxe.display.JsonType"><d/></t></type>
			<pos><t path="haxe.display.JsonPos"/></pos>
			<params><t path="haxe.display.JsonTypeParameters"/></params>
			<name><c path="String"/></name>
			<meta><t path="haxe.display.JsonMetadata"/></meta>
			<index><x path="Int"/></index>
			<doc><t path="haxe.display.JsonDoc"/></doc>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.JsonEnumFields" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<c path="Array"><t path="haxe.display.JsonEnumField"/></c>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.display.JsonClassKindKind" params="T" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonClassKindKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
	<KNormal public="1" get="inline" set="null" expr="cast &quot;KNormal&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "KNormal"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KNormal>
	<KTypeParameter public="1" get="inline" set="null" expr="cast &quot;KTypeParameter&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypes"/></x>
		<meta>
			<m n=":value"><e>cast "KTypeParameter"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KTypeParameter>
	<KExtension public="1" get="inline" set="null" expr="cast &quot;KExtension&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "KExtension"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KExtension>
	<KExpr public="1" get="inline" set="null" expr="cast &quot;KExpr&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonExpr"/></x>
		<meta>
			<m n=":value"><e>cast "KExpr"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KExpr>
	<KGeneric public="1" get="inline" set="null" expr="cast &quot;KGeneric&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "KGeneric"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KGeneric>
	<KGenericInstance public="1" get="inline" set="null" expr="cast &quot;KGenericInstance&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
		<meta>
			<m n=":value"><e>cast "KGenericInstance"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KGenericInstance>
	<KMacroType public="1" get="inline" set="null" expr="cast &quot;KMacroType&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "KMacroType"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KMacroType>
	<KAbstractImpl public="1" get="inline" set="null" expr="cast &quot;KAbstractImpl&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePath"/></x>
		<meta>
			<m n=":value"><e>cast "KAbstractImpl"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KAbstractImpl>
	<KGenericBuild public="1" get="inline" set="null" expr="cast &quot;KGenericBuild&quot;" line="1" static="1">
		<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
		<meta>
			<m n=":value"><e>cast "KGenericBuild"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</KGenericBuild>
	<meta>
		<m n=":nativeGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonClassKindKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
		<KNormal public="1" get="inline" set="null" expr="cast &quot;KNormal&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "KNormal"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KNormal>
		<KTypeParameter public="1" get="inline" set="null" expr="cast &quot;KTypeParameter&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypes"/></x>
			<meta>
				<m n=":value"><e>cast "KTypeParameter"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KTypeParameter>
		<KExtension public="1" get="inline" set="null" expr="cast &quot;KExtension&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "KExtension"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KExtension>
		<KExpr public="1" get="inline" set="null" expr="cast &quot;KExpr&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonExpr"/></x>
			<meta>
				<m n=":value"><e>cast "KExpr"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KExpr>
		<KGeneric public="1" get="inline" set="null" expr="cast &quot;KGeneric&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "KGeneric"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KGeneric>
		<KGenericInstance public="1" get="inline" set="null" expr="cast &quot;KGenericInstance&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePathWithParams"/></x>
			<meta>
				<m n=":value"><e>cast "KGenericInstance"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KGenericInstance>
		<KMacroType public="1" get="inline" set="null" expr="cast &quot;KMacroType&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "KMacroType"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KMacroType>
		<KAbstractImpl public="1" get="inline" set="null" expr="cast &quot;KAbstractImpl&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><t path="haxe.display.JsonTypePath"/></x>
			<meta>
				<m n=":value"><e>cast "KAbstractImpl"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KAbstractImpl>
		<KGenericBuild public="1" get="inline" set="null" expr="cast &quot;KGenericBuild&quot;" line="1" static="1">
			<x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKindKind.T"/></x>
			<meta>
				<m n=":value"><e>cast "KGenericBuild"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</KGenericBuild>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="haxe.display.JsonClassKind" params="T" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<a>
			<kind><x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKind.T"/></x></kind>
			<args><c path="haxe.display.JsonClassKind.T"/></args>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.JsonClass" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<a>
			<superClass><x path="Null"><t path="haxe.display.JsonTypePathWithParams"/></x></superClass>
			<statics><t path="haxe.display.JsonClassFields"/></statics>
			<overrides><c path="Array"><t path="haxe.display.JsonClassFieldReference"/></c></overrides>
			<kind><t path="haxe.display.JsonClassKind"><d/></t></kind>
			<isInterface><x path="Bool"/></isInterface>
			<isExtern><x path="Bool"/></isExtern>
			<interfaces><c path="Array"><t path="haxe.display.JsonTypePathWithParams"/></c></interfaces>
			<init><x path="Null"><t path="haxe.display.JsonTExpr"/></x></init>
			<fields><t path="haxe.display.JsonClassFields"/></fields>
			<constructor><x path="Null"><t path="haxe.display.JsonClassField"/></x></constructor>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.JsonEnum" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<a>
			<isExtern><x path="Bool"/></isExtern>
			<constructors><t path="haxe.display.JsonEnumFields"/></constructors>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.JsonTypedef" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<a><type><t path="haxe.display.JsonType"><d/></t></type></a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.JsonAbstractBinop" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<a>
			<op><t path="haxe.display.JsonBinop"><d/></t></op>
			<field><t path="haxe.display.JsonClassFieldReference"/></field>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.JsonAbstractUnop" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<a>
			<postFix><x path="Bool"/></postFix>
			<op><x path="haxe.display.JsonUnop"/></op>
			<field><t path="haxe.display.JsonClassFieldReference"/></field>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.JsonAbstractCast" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<a>
			<t><t path="haxe.display.JsonType"><d/></t></t>
			<field><t path="haxe.display.JsonClassFieldReference"/></field>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.JsonAbstract" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<a>
			<unops><c path="Array"><t path="haxe.display.JsonAbstractUnop"/></c></unops>
			<type><t path="haxe.display.JsonType"><d/></t></type>
			<to><c path="Array"><t path="haxe.display.JsonAbstractCast"/></c></to>
			<resolve><x path="Null"><t path="haxe.display.JsonClassFieldReference"/></x></resolve>
			<impl><x path="Null"><t path="haxe.display.JsonClass"/></x></impl>
			<from><c path="Array"><t path="haxe.display.JsonAbstractCast"/></c></from>
			<binops><c path="Array"><t path="haxe.display.JsonAbstractBinop"/></c></binops>
			<array><t path="haxe.display.JsonClassFields"/></array>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.display.JsonModuleTypeKind" params="T" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonModuleTypeKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
	<Class public="1" get="inline" set="null" expr="cast &quot;class&quot;" line="352" static="1">
		<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonClass"/></x>
		<meta>
			<m n=":value"><e>cast "class"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Class>
	<Enum public="1" get="inline" set="null" expr="cast &quot;enum&quot;" line="353" static="1">
		<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonEnum"/></x>
		<meta>
			<m n=":value"><e>cast "enum"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Enum>
	<Typedef public="1" get="inline" set="null" expr="cast &quot;typedef&quot;" line="354" static="1">
		<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonTypedef"/></x>
		<meta>
			<m n=":value"><e>cast "typedef"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Typedef>
	<Abstract public="1" get="inline" set="null" expr="cast &quot;abstract&quot;" line="355" static="1">
		<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonAbstract"/></x>
		<meta>
			<m n=":value"><e>cast "abstract"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Abstract>
	<meta>
		<m n=":nativeGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.display._JsonModuleTypes.JsonModuleTypeKind_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" extern="1">
		<Class public="1" get="inline" set="null" expr="cast &quot;class&quot;" line="352" static="1">
			<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonClass"/></x>
			<meta>
				<m n=":value"><e>cast "class"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Class>
		<Enum public="1" get="inline" set="null" expr="cast &quot;enum&quot;" line="353" static="1">
			<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonEnum"/></x>
			<meta>
				<m n=":value"><e>cast "enum"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Enum>
		<Typedef public="1" get="inline" set="null" expr="cast &quot;typedef&quot;" line="354" static="1">
			<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonTypedef"/></x>
			<meta>
				<m n=":value"><e>cast "typedef"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Typedef>
		<Abstract public="1" get="inline" set="null" expr="cast &quot;abstract&quot;" line="355" static="1">
			<x path="haxe.display.JsonModuleTypeKind"><t path="haxe.display.JsonAbstract"/></x>
			<meta>
				<m n=":value"><e>cast "abstract"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Abstract>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="haxe.display.JsonModuleType" params="T" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<a>
			<pos><t path="haxe.display.JsonPos"/></pos>
			<params><t path="haxe.display.JsonTypeParameters"/></params>
			<pack><c path="Array"><c path="String"/></c></pack>
			<name><c path="String"/></name>
			<moduleName><c path="String"/></moduleName>
			<meta><t path="haxe.display.JsonMetadata"/></meta>
			<kind><x path="haxe.display.JsonModuleTypeKind"><c path="haxe.display.JsonModuleType.T"/></x></kind>
			<isPrivate><x path="Bool"/></isPrivate>
			<doc><t path="haxe.display.JsonDoc"/></doc>
			<args><c path="haxe.display.JsonModuleType.T"/></args>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.JsonModuleTypes" params="" file="/home/vsts/work/1/s/std/haxe/display/JsonModuleTypes.hx">
		<c path="Array"><t path="haxe.display.JsonModuleType"><d/></t></c>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.Position" params="" file="/home/vsts/work/1/s/std/haxe/display/Position.hx">
		<a>
			<line>
				<x path="Int"/>
				<haxe_doc>Line position in a document (1-based).</haxe_doc>
			</line>
			<character>
				<x path="Int"/>
				<haxe_doc>Character offset on a line in a document (1-based).</haxe_doc>
			</character>
		</a>
		<haxe_doc>Position in a text document expressed as 1-based line and character offset.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.Range" params="" file="/home/vsts/work/1/s/std/haxe/display/Position.hx" module="haxe.display.Position">
		<a>
			<start>
				<t path="haxe.display.Position"/>
				<haxe_doc>The range's start position</haxe_doc>
			</start>
			<end>
				<t path="haxe.display.Position"/>
				<haxe_doc>The range's end position</haxe_doc>
			</end>
		</a>
		<haxe_doc>A range in a text document expressed as (1-based) start and end positions.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.Location" params="" file="/home/vsts/work/1/s/std/haxe/display/Position.hx" module="haxe.display.Position">
		<a>
			<range><t path="haxe.display.Range"/></range>
			<file><x path="haxe.display.FsPath"/></file>
		</a>
		<haxe_doc>Represents a location inside a resource, such as a line inside a text file.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<class path="haxe.display.Methods" params="" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<Initialize public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;InitializeParams,InitializeResult&gt;(&quot;initialize&quot;)" line="32" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.InitializeParams"/>
				<t path="haxe.display.InitializeResult"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<InitializeParams,InitializeResult>("initialize")]]></e></m></meta>
			<haxe_doc>The initialize request is sent from the client to Haxe to determine the capabilities.</haxe_doc>
		</Initialize>
		<meta>
			<m n=":hxGen"/>
			<m n=":publicFields"/>
		</meta>
	</class>
	<typedef path="haxe.display.InitializeParams" params="" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<a>
			<supportsResolve final="1" set="null">
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</supportsResolve>
			<maxCompletionItems final="1" set="null">
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The maximum number of completion items to return</haxe_doc>
			</maxCompletionItems>
			<exclude final="1" set="null">
				<x path="Null"><c path="Array"><c path="String"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>dot paths to exclude from readClassPaths / toplevel completion</haxe_doc>
			</exclude>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.Version" params="" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<a>
			<pre final="1" set="null"><c path="String"/></pre>
			<patch final="1" set="null"><x path="Int"/></patch>
			<minor final="1" set="null"><x path="Int"/></minor>
			<major final="1" set="null"><x path="Int"/></major>
			<build final="1" set="null"><c path="String"/></build>
		</a>
		<haxe_doc>Represents a semantic version, see https://semver.org/.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.InitializeResult" params="" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<t path="haxe.display.Response"><a>
	<protocolVersion final="1" set="null"><t path="haxe.display.Version"/></protocolVersion>
	<methods final="1" set="null"><c path="Array"><c path="String"/></c></methods>
	<haxeVersion final="1" set="null"><t path="haxe.display.Version"/></haxeVersion>
</a></t>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.Timer" params="" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<a>
			<time final="1" set="null"><x path="Float"/></time>
			<percentTotal final="1" set="null">
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
			</percentTotal>
			<percentParent final="1" set="null">
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
			</percentParent>
			<path final="1" set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</path>
			<name final="1" set="null"><c path="String"/></name>
			<info final="1" set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</info>
			<children final="1" set="null">
				<x path="Null"><c path="Array"><t path="haxe.display.Timer"/></c></x>
				<meta><m n=":optional"/></meta>
			</children>
			<calls final="1" set="null">
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</calls>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.Response" params="T" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<a>
			<timestamp final="1" set="null">
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>UNIX timestamp at the moment the data was sent.</haxe_doc>
			</timestamp>
			<timers final="1" set="null">
				<x path="Null"><t path="haxe.display.Timer"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Only sent if `--times` is enabled.</haxe_doc>
			</timers>
			<result final="1" set="null">
				<x path="Null"><c path="haxe.display.Response.T"/></x>
				<meta><m n=":optional"/></meta>
			</result>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.FileParams" params="" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<a><file><x path="haxe.display.FsPath"/></file></a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.display.HaxeRequestMethod" params="TParams:TResponse" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":nativeGen"/></meta>
		<impl><class path="haxe.display._Protocol.HaxeRequestMethod_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol">
	<_new public="1" get="inline" set="null" line="90" static="1">
		<f a="method">
			<c path="String"/>
			<x path="haxe.display.HaxeRequestMethod">
				<c path="haxe.display.HaxeRequestMethod.TParams"/>
				<c path="haxe.display.HaxeRequestMethod.TResponse"/>
			</x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Protocol.HaxeRequestMethod_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol">
		<_new public="1" get="inline" set="null" line="90" static="1">
			<f a="method">
				<c path="String"/>
				<x path="haxe.display.HaxeRequestMethod">
					<c path="haxe.display.HaxeRequestMethod.TParams"/>
					<c path="haxe.display.HaxeRequestMethod.TResponse"/>
				</x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<abstract path="haxe.display.HaxeNotificationMethod" params="TParams" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":nativeGen"/></meta>
		<impl><class path="haxe.display._Protocol.HaxeNotificationMethod_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol">
	<_new public="1" get="inline" set="null" line="95" static="1">
		<f a="method">
			<c path="String"/>
			<x path="haxe.display.HaxeNotificationMethod"><c path="haxe.display.HaxeNotificationMethod.TParams"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Protocol.HaxeNotificationMethod_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol">
		<_new public="1" get="inline" set="null" line="95" static="1">
			<f a="method">
				<c path="String"/>
				<x path="haxe.display.HaxeNotificationMethod"><c path="haxe.display.HaxeNotificationMethod.TParams"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<typedef path="haxe.display.HaxeResponseErrorData" params="" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<c path="Array"><a>
	<severity><x path="haxe.display.HaxeResponseErrorSeverity"/></severity>
	<message><c path="String"/></message>
	<location>
		<x path="Null"><t path="haxe.display.Location"/></x>
		<meta><m n=":optional"/></meta>
	</location>
</a></c>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.display.HaxeResponseErrorSeverity" params="" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<this><x path="Int"/></this>
		<meta>
			<m n=":hxGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.display._Protocol.HaxeResponseErrorSeverity_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol" extern="1">
	<Error public="1" get="inline" set="null" expr="cast 1" line="106" static="1">
		<x path="haxe.display.HaxeResponseErrorSeverity"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Error>
	<Warning public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.display.HaxeResponseErrorSeverity"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Warning>
	<Hint public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.display.HaxeResponseErrorSeverity"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Hint>
	<meta>
		<m n=":hxGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.display._Protocol.HaxeResponseErrorSeverity_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol" extern="1">
		<Error public="1" get="inline" set="null" expr="cast 1" line="106" static="1">
			<x path="haxe.display.HaxeResponseErrorSeverity"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Error>
		<Warning public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.display.HaxeResponseErrorSeverity"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Warning>
		<Hint public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.display.HaxeResponseErrorSeverity"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Hint>
		<meta>
			<m n=":hxGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<enum path="haxe.display.NoData" params="" file="/home/vsts/work/1/s/std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><meta>
	<m n=":hxGen"/>
	<m n=":flatEnum"/>
</meta></enum>
	<class path="haxe.display.ServerMethods" params="" file="/home/vsts/work/1/s/std/haxe/display/Server.hx" module="haxe.display.Server">
		<ReadClassPaths public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;NoData,Response&lt;{ @:optional}&gt;&gt;(&quot;server/readClassPaths&quot;)" line="34" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<e path="haxe.display.NoData"/>
				<t path="haxe.display.Response"><a><files>
	<x path="Null"><x path="Int"/></x>
	<meta><m n=":optional"/></meta>
</files></a></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<NoData,Response<{ @:optional}>>("server/readClassPaths")]]></e></m></meta>
			<haxe_doc>This request is sent from the client to Haxe to explore the class paths. This effectively creates a cache for toplevel completion.</haxe_doc>
		</ReadClassPaths>
		<Configure public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;ConfigureParams,Response&lt;NoData&gt;&gt;(&quot;server/configure&quot;)" line="36" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.ConfigureParams"/>
				<t path="haxe.display.Response"><e path="haxe.display.NoData"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<ConfigureParams,Response<NoData>>("server/configure")]]></e></m></meta>
		</Configure>
		<Invalidate public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;FileParams,Response&lt;NoData&gt;&gt;(&quot;server/invalidate&quot;)" line="37" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.FileParams"/>
				<t path="haxe.display.Response"><e path="haxe.display.NoData"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<FileParams,Response<NoData>>("server/invalidate")]]></e></m></meta>
		</Invalidate>
		<Contexts public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;NoData,Response&lt;Array&lt;HaxeServerContext&gt;&gt;&gt;(&quot;server/contexts&quot;)" line="38" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<e path="haxe.display.NoData"/>
				<t path="haxe.display.Response"><c path="Array"><t path="haxe.display.HaxeServerContext"/></c></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<NoData,Response<Array<HaxeServerContext>>>("server/contexts")]]></e></m></meta>
		</Contexts>
		<Memory public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;NoData,Response&lt;HaxeMemoryResult&gt;&gt;(&quot;server/memory&quot;)" line="39" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<e path="haxe.display.NoData"/>
				<t path="haxe.display.Response"><t path="haxe.display.HaxeMemoryResult"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<NoData,Response<HaxeMemoryResult>>("server/memory")]]></e></m></meta>
		</Memory>
		<ContextMemory public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;ContextParams,Response&lt;HaxeContextMemoryResult&gt;&gt;(&quot;server/memory/context&quot;)" line="40" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.ContextParams"/>
				<t path="haxe.display.Response"><t path="haxe.display.HaxeContextMemoryResult"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<ContextParams,Response<HaxeContextMemoryResult>>("server/memory/context")]]></e></m></meta>
		</ContextMemory>
		<ModuleMemory public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;ModuleParams,Response&lt;HaxeModuleMemoryResult&gt;&gt;(&quot;server/memory/module&quot;)" line="41" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.ModuleParams"/>
				<t path="haxe.display.Response"><t path="haxe.display.HaxeModuleMemoryResult"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<ModuleParams,Response<HaxeModuleMemoryResult>>("server/memory/module")]]></e></m></meta>
		</ModuleMemory>
		<Modules public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;ContextParams,Response&lt;Array&lt;String&gt;&gt;&gt;(&quot;server/modules&quot;)" line="42" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.ContextParams"/>
				<t path="haxe.display.Response"><c path="Array"><c path="String"/></c></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<ContextParams,Response<Array<String>>>("server/modules")]]></e></m></meta>
		</Modules>
		<Module public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;ModuleParams,Response&lt;JsonModule&gt;&gt;(&quot;server/module&quot;)" line="43" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.ModuleParams"/>
				<t path="haxe.display.Response"><t path="haxe.display.JsonModule"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<ModuleParams,Response<JsonModule>>("server/module")]]></e></m></meta>
		</Module>
		<Files public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;ContextParams,Response&lt;Array&lt;JsonServerFile&gt;&gt;&gt;(&quot;server/files&quot;)" line="44" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.ContextParams"/>
				<t path="haxe.display.Response"><c path="Array"><t path="haxe.display.JsonServerFile"/></c></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<ContextParams,Response<Array<JsonServerFile>>>("server/files")]]></e></m></meta>
		</Files>
		<ModuleCreated public="1" get="inline" set="null" expr="new HaxeRequestMethod&lt;FileParams,Response&lt;NoData&gt;&gt;(&quot;server/moduleCreated&quot;)" line="45" static="1">
			<x path="haxe.display.HaxeRequestMethod">
				<t path="haxe.display.FileParams"/>
				<t path="haxe.display.Response"><e path="haxe.display.NoData"/></t>
			</x>
			<meta><m n=":value"><e><![CDATA[new HaxeRequestMethod<FileParams,Response<NoData>>("server/moduleCreated")]]></e></m></meta>
		</ModuleCreated>
		<meta>
			<m n=":hxGen"/>
			<m n=":publicFields"/>
		</meta>
	</class>
	<typedef path="haxe.display.ConfigurePrintParams" params="" file="/home/vsts/work/1/s/std/haxe/display/Server.hx" module="haxe.display.Server">
		<a>
			<unchangedContent>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</unchangedContent>
			<uncaughtError>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</uncaughtError>
			<stats>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</stats>
			<socketMessage>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</socketMessage>
			<skippingDep>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</skippingDep>
			<signature>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</signature>
			<reusing>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</reusing>
			<removedDirectory>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</removedDirectory>
			<parsed>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</parsed>
			<notCached>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</notCached>
			<newContext>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</newContext>
			<modulePathChanged>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</modulePathChanged>
			<message>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</message>
			<foundDirectories>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</foundDirectories>
			<displayPosition>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</displayPosition>
			<defines>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</defines>
			<completion>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</completion>
			<changedDirectories>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</changedDirectories>
			<cachedModules>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</cachedModules>
			<arguments>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</arguments>
			<addedDirectory>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</addedDirectory>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.ConfigureParams" params="" file="/home/vsts/work/1/s/std/haxe/display/Server.hx" module="haxe.display.Server">
		<a>
			<print final="1" set="null">
				<x path="Null"><t path="haxe.display.ConfigurePrintParams"/></x>
				<meta><m n=":optional"/></meta>
			</print>
			<noModuleChecks final="1" set="null">
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</noModuleChecks>
			<legacyCompletion final="1" set="null">
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
			</legacyCompletion>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.HaxeServerContext" params="" file="/home/vsts/work/1/s/std/haxe/display/Server.hx" module="haxe.display.Server">
		<a>
			<signature final="1" set="null"><c path="String"/></signature>
			<platform final="1" set="null"><c path="String"/></platform>
			<index final="1" set="null"><x path="Int"/></index>
			<desc final="1" set="null"><c path="String"/></desc>
			<defines final="1" set="null"><c path="Array"><a>
	<value><c path="String"/></value>
	<key><c path="String"/></key>
</a></c></defines>
			<classPaths final="1" set="null"><c path="Array"><c path="String"/></c></classPaths>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.ModuleId" params="" file="/home/vsts/work/1/s/std/haxe/display/Server.hx" module="haxe.display.Server">
		<a>
			<sign final="1" set="null"><c path="String"/></sign>
			<path final="1" set="null"><c path="String"/></path>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.JsonModule" params="" file="/home/vsts/work/1/s/std/haxe/display/Server.hx" module="haxe.display.Server">
		<a>
			<types final="1" set="null"><c path="Array"><t path="haxe.display.JsonTypePath"/></c></types>
			<sign final="1" set="null"><c path="String"/></sign>
			<path final="1" set="null"><t path="haxe.display.JsonModulePath"/></path>
			<id final="1" set="null"><x path="Int"/></id>
			<file final="1" set="null"><c path="String"/></file>
			<dependencies final="1" set="null"><c path="Array"><t path="haxe.display.ModuleId"/></c></dependencies>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.JsonServerFile" params="" file="/home/vsts/work/1/s/std/haxe/display/Server.hx" module="haxe.display.Server">
		<a>
			<time final="1" set="null"><x path="Float"/></time>
			<pack final="1" set="null"><c path="String"/></pack>
			<moduleName final="1" set="null"><x path="Null"><c path="String"/></x></moduleName>
			<file final="1" set="null"><c path="String"/></file>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.HaxeMemoryResult" params="" file="/home/vsts/work/1/s/std/haxe/display/Server.hx" module="haxe.display.Server">
		<a>
			<memory final="1" set="null"><a>
	<totalCache final="1" set="null"><x path="Int"/></totalCache>
	<nativeLibCache final="1" set="null"><x path="Int"/></nativeLibCache>
	<haxelibCache final="1" set="null"><x path="Int"/></haxelibCache>
	<directoryCache final="1" set="null"><x path="Int"/></directoryCache>
	<contextCache final="1" set="null"><x path="Int"/></contextCache>
	<additionalSizes final="1" set="null">
		<x path="Null"><c path="Array"><a>
	<size><x path="Int"/></size>
	<name><c path="String"/></name>
</a></c></x>
		<meta><m n=":optional"/></meta>
	</additionalSizes>
</a></memory>
			<contexts final="1" set="null"><c path="Array"><a>
	<size final="1" set="null"><x path="Int"/></size>
	<context final="1" set="null"><t path="haxe.display.HaxeServerContext"/></context>
</a></c></contexts>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.HaxeContextMemoryResult" params="" file="/home/vsts/work/1/s/std/haxe/display/Server.hx" module="haxe.display.Server">
		<a>
			<syntaxCache final="1" set="null"><a><size final="1" set="null"><x path="Int"/></size></a></syntaxCache>
			<moduleCache final="1" set="null"><a>
	<size final="1" set="null"><x path="Int"/></size>
	<list final="1" set="null"><c path="Array"><a>
	<size final="1" set="null"><x path="Int"/></size>
	<path final="1" set="null"><c path="String"/></path>
	<hasTypes final="1" set="null"><x path="Bool"/></hasTypes>
</a></c></list>
</a></moduleCache>
			<leaks final="1" set="null">
				<x path="Null"><c path="Array"><a>
	<path final="1" set="null"><c path="String"/></path>
	<leaks final="1" set="null"><c path="Array"><a><path final="1" set="null"><c path="String"/></path></a></c></leaks>
</a></c></x>
				<meta><m n=":optional"/></meta>
			</leaks>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.HaxeModuleMemoryResult" params="" file="/home/vsts/work/1/s/std/haxe/display/Server.hx" module="haxe.display.Server">
		<a>
			<types final="1" set="null"><c path="Array"><a>
	<size final="1" set="null"><x path="Int"/></size>
	<pos final="1" set="null">
		<x path="Null"><t path="haxe.display.Location"/></x>
		<meta><m n=":optional"/></meta>
	</pos>
	<name final="1" set="null"><c path="String"/></name>
	<fields final="1" set="null"><c path="Array"><a>
	<size final="1" set="null"><x path="Int"/></size>
	<pos final="1" set="null">
		<x path="Null"><t path="haxe.display.Location"/></x>
		<meta><m n=":optional"/></meta>
	</pos>
	<name final="1" set="null"><c path="String"/></name>
</a></c></fields>
</a></c></types>
			<moduleExtra final="1" set="null"><x path="Int"/></moduleExtra>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.ContextParams" params="" file="/home/vsts/work/1/s/std/haxe/display/Server.hx" module="haxe.display.Server">
		<a><signature final="1" set="null"><c path="String"/></signature></a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.display.ModuleParams" params="" file="/home/vsts/work/1/s/std/haxe/display/Server.hx" module="haxe.display.Server">
		<a>
			<signature final="1" set="null"><c path="String"/></signature>
			<path final="1" set="null"><c path="String"/></path>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<class path="haxe.ds.ArraySort" params="" file="/home/vsts/work/1/s/std/haxe/ds/ArraySort.hx">
		<sort public="1" params="T" set="method" line="42" static="1">
			<f a="a:cmp">
				<c path="Array"><c path="sort.T"/></c>
				<f a=":">
					<c path="sort.T"/>
					<c path="sort.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts Array `a` according to the comparison function `cmp`, where
		`cmp(x,y)` returns 0 if `x == y`, a positive Int if `x > y` and a
		negative Int if `x < y`.

		This operation modifies Array `a` in place.

		This operation is stable: The order of equal elements is preserved.

		If `a` or `cmp` are null, the result is unspecified.]]></haxe_doc>
		</sort>
		<rec params="T" set="method" line="46" static="1"><f a="a:cmp:from:to">
	<c path="Array"><c path="rec.T"/></c>
	<f a=":">
		<c path="rec.T"/>
		<c path="rec.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rec>
		<doMerge params="T" set="method" line="68" static="1"><f a="a:cmp:from:pivot:to:len1:len2">
	<c path="Array"><c path="doMerge.T"/></c>
	<f a=":">
		<c path="doMerge.T"/>
		<c path="doMerge.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></doMerge>
		<rotate params="T" set="method" line="94" static="1"><f a="a:cmp:from:mid:to">
	<c path="Array"><c path="rotate.T"/></c>
	<f a=":">
		<c path="rotate.T"/>
		<c path="rotate.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rotate>
		<gcd set="method" line="115" static="1"><f a="m:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></gcd>
		<upper params="T" set="method" line="124" static="1"><f a="a:cmp:from:to:val">
	<c path="Array"><c path="upper.T"/></c>
	<f a=":">
		<c path="upper.T"/>
		<c path="upper.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></upper>
		<lower params="T" set="method" line="139" static="1"><f a="a:cmp:from:to:val">
	<c path="Array"><c path="lower.T"/></c>
	<f a=":">
		<c path="lower.T"/>
		<c path="lower.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lower>
		<swap params="T" set="method" line="153" static="1"><f a="a:i:j">
	<c path="Array"><c path="swap.T"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></swap>
		<compare params="T" get="inline" set="null" line="159" static="1"><f a="a:cmp:i:j">
	<c path="Array"><c path="compare.T"/></c>
	<f a=":">
		<c path="compare.T"/>
		<c path="compare.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></compare>
		<haxe_doc>ArraySort provides a stable implementation of merge sort through its `sort`
	method. It should be used instead of `Array.sort` in cases where the order
	of equal elements has to be retained on all targets.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.ds.BalancedTree" params="K:V" file="/home/vsts/work/1/s/std/haxe/ds/BalancedTree.hx">
		<implements path="haxe.IMap">
			<c path="haxe.ds.BalancedTree.K"/>
			<c path="haxe.ds.BalancedTree.V"/>
		</implements>
		<root><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></root>
		<set public="1" set="method" line="50">
			<f a="key:value">
				<c path="haxe.ds.BalancedTree.K"/>
				<c path="haxe.ds.BalancedTree.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds `key` to `value`.

		If `key` is already bound to a value, that binding disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" set="method" line="61">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Null"><c path="haxe.ds.BalancedTree.V"/></x>
			</f>
			<haxe_doc>Returns the value `key` is bound to.

		If `key` is not bound to any value, `null` is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<remove public="1" set="method" line="85">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the current binding of `key`.

		If `key` has no binding, `this` BalancedTree is unchanged and false is
		returned.

		Otherwise the binding of `key` is removed and true is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="101">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `key` is bound to a value.

		This method returns true even if `key` is bound to null.

		If `key` is null, the result is unspecified.</haxe_doc>
		</exists>
		<iterator public="1" set="method" line="120">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.V"/></t></f>
			<haxe_doc>Iterates over the bound values of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="129">
			<f a=""><t path="KeyValueIterator">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<keys public="1" set="method" line="138">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.K"/></t></f>
			<haxe_doc>Iterates over the keys of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</keys>
		<copy public="1" set="method" line="144"><f a=""><c path="haxe.ds.BalancedTree">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></f></copy>
		<setLoop set="method" line="150"><f a="k:v:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></setLoop>
		<removeLoop set="method" line="163"><f a="k:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeLoop>
		<iteratorLoop set="method" line="172"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="Array"><c path="haxe.ds.BalancedTree.V"/></c>
	<x path="Void"/>
</f></iteratorLoop>
		<keysLoop set="method" line="180"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="Array"><c path="haxe.ds.BalancedTree.K"/></c>
	<x path="Void"/>
</f></keysLoop>
		<merge set="method" line="188"><f a="t1:t2">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></merge>
		<minBinding set="method" line="197"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></minBinding>
		<removeMinBinding set="method" line="201"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeMinBinding>
		<balance set="method" line="205"><f a="l:k:v:r">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></balance>
		<compare set="method" line="225"><f a="k1:k2">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.K"/>
	<x path="Int"/>
</f></compare>
		<toString public="1" set="method" line="229"><f a=""><c path="String"/></f></toString>
		<clear public="1" set="method" line="236">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all keys from `this` BalancedTree.</haxe_doc>
		</clear>
		<new public="1" set="method" line="41">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new BalancedTree, which is initially empty.</haxe_doc>
		</new>
		<haxe_doc>BalancedTree allows key-value mapping with arbitrary keys, as long as they
	can be ordered. By default, `Reflect.compare` is used in the `compare`
	method, which can be overridden in subclasses.

	Operations have a logarithmic average and worst-case cost.

	Iteration over keys and values, using `keys` and `iterator` respectively,
	are in-order.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.ds.TreeNode" params="K:V" file="/home/vsts/work/1/s/std/haxe/ds/BalancedTree.hx" module="haxe.ds.BalancedTree">
		<left public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></left>
		<right public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></right>
		<key public="1"><c path="haxe.ds.TreeNode.K"/></key>
		<value public="1"><c path="haxe.ds.TreeNode.V"/></value>
		<_height><x path="Int"/></_height>
		<get_height public="1" get="inline" set="null" line="266"><f a=""><x path="Int"/></f></get_height>
		<toString public="1" set="method" line="269"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="255">
			<f a="l:k:v:r:?h" v="::::-1">
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<c path="haxe.ds.TreeNode.K"/>
				<c path="haxe.ds.TreeNode.V"/>
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ h : -1 }</e></m></meta>
		</new>
		<haxe_doc>A tree node of `haxe.ds.BalancedTree`.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<enum path="haxe.ds.Either" params="L:R" file="/home/vsts/work/1/s/std/haxe/ds/Either.hx">
		<Left a="v"><c path="haxe.ds.Either.L"/></Left>
		<Right a="v"><c path="haxe.ds.Either.R"/></Right>
		<haxe_doc>Either represents values which are either of type `L` (Left) or type `R`
	(Right).</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<class path="haxe.ds.EnumValueMap" params="K:V" file="/home/vsts/work/1/s/std/haxe/ds/EnumValueMap.hx">
		<extends path="haxe.ds.BalancedTree">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</extends>
		<implements path="haxe.IMap">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</implements>
		<compare set="method" line="32" override="1"><f a="k1:k2">
	<x path="EnumValue"/>
	<x path="EnumValue"/>
	<x path="Int"/>
</f></compare>
		<compareArgs set="method" line="43"><f a="a1:a2">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<x path="Int"/>
</f></compareArgs>
		<compareArg set="method" line="55"><f a="v1:v2">
	<d/>
	<d/>
	<x path="Int"/>
</f></compareArg>
		<copy public="1" set="method" line="65" override="1"><f a=""><c path="haxe.ds.EnumValueMap">
	<c path="haxe.ds.EnumValueMap.K"/>
	<c path="haxe.ds.EnumValueMap.V"/>
</c></f></copy>
		<haxe_doc>EnumValueMap allows mapping of enum value keys to arbitrary values.

	Keys are compared by value and recursively over their parameters. If any
	parameter is not an enum value, `Reflect.compare` is used to compare them.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.ds.GenericCell" params="T" file="/home/vsts/work/1/s/std/haxe/ds/GenericStack.hx" module="haxe.ds.GenericStack">
		<elt public="1"><c path="haxe.ds.GenericCell.T"/></elt>
		<next public="1"><c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericCell.T"/></c></next>
		<new public="1" set="method" line="37"><f a="elt:next">
	<c path="haxe.ds.GenericCell.T"/>
	<c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericCell.T"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>A cell of `haxe.ds.GenericStack`.

	@see https://haxe.org/manual/std-GenericStack.html</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.ds.GenericStack" params="T" file="/home/vsts/work/1/s/std/haxe/ds/GenericStack.hx">
		<head public="1"><c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericStack.T"/></c></head>
		<add public="1" get="inline" set="null" line="112">
			<f a="item">
				<c path="haxe.ds.GenericStack.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Pushes element `item` onto the stack.</haxe_doc>
		</add>
		<first public="1" get="inline" set="null" line="121">
			<f a=""><x path="Null"><c path="haxe.ds.GenericStack.T"/></x></f>
			<haxe_doc>Returns the topmost stack element without removing it.

		If the stack is empty, null is returned.</haxe_doc>
		</first>
		<pop public="1" get="inline" set="null" line="130">
			<f a=""><x path="Null"><c path="haxe.ds.GenericStack.T"/></x></f>
			<haxe_doc>Returns the topmost stack element and removes it.

		If the stack is empty, null is returned.</haxe_doc>
		</pop>
		<isEmpty public="1" get="inline" set="null" line="143">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if the stack is empty.</haxe_doc>
		</isEmpty>
		<remove public="1" set="method" line="156">
			<f a="v">
				<c path="haxe.ds.GenericStack.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first element which is equal to `v` according to the `==`
		operator.

		This method traverses the stack until it finds a matching element and
		unlinks it, returning true.

		If no matching element is found, false is returned.</haxe_doc>
		</remove>
		<iterator public="1" set="method" line="185">
			<f a=""><t path="Iterator"><c path="haxe.ds.GenericStack.T"/></t></f>
			<haxe_doc>Returns an iterator over the elements of `this` GenericStack.</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="203">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of `this` GenericStack.</haxe_doc>
		</toString>
		<new public="1" set="method" line="107">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty GenericStack.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A stack of elements.

	This class is generic, which means one type is generated for each type
	parameter T on static targets. For example:

	- `new GenericStack<Int>()` generates `GenericStack_Int`
	- `new GenericStack<String>()` generates `GenericStack_String`

	The generated name is an implementation detail and should not be relied
	upon.

	@see https://haxe.org/manual/std-GenericStack.html]]></haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="/home/vsts/work/1/s/std/haxe/ds/HashMap.hx">
		<this><c path="haxe.ds._HashMap.HashMapData">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</c></this>
		<haxe_doc>HashMap allows mapping of hashable objects to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":hxGen"/></meta>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
	<_new public="1" get="inline" set="null" line="36" static="1">
		<f a=""><x path="haxe.ds.HashMap">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</x></f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Creates a new HashMap.</haxe_doc>
	</_new>
	<set public="1" get="inline" set="null" line="43" static="1">
		<f a="this:k:v">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<c path="haxe.ds.HashMap.V"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.set`</haxe_doc>
	</set>
	<get public="1" get="inline" set="null" line="51" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Null"><c path="haxe.ds.HashMap.V"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.get`</haxe_doc>
	</get>
	<exists public="1" get="inline" set="null" line="58" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.exists`</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="65" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.remove`</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="73" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.HashMap.K"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.keys`</haxe_doc>
	</keys>
	<copy public="1" set="method" line="80" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<x path="haxe.ds.HashMap">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.copy`</haxe_doc>
	</copy>
	<iterator public="1" get="inline" set="null" line="90" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.HashMap.V"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.iterator`</haxe_doc>
	</iterator>
	<clear public="1" get="inline" set="null" line="97" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.clear`</haxe_doc>
	</clear>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
		<_new public="1" get="inline" set="null" line="36" static="1">
			<f a=""><x path="haxe.ds.HashMap">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</x></f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Creates a new HashMap.</haxe_doc>
		</_new>
		<set public="1" get="inline" set="null" line="43" static="1">
			<f a="this:k:v">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="51" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Null"><c path="haxe.ds.HashMap.V"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="58" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="65" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="73" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.HashMap.K"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<copy public="1" set="method" line="80" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<x path="haxe.ds.HashMap">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<iterator public="1" get="inline" set="null" line="90" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.HashMap.V"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<clear public="1" get="inline" set="null" line="97" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.ds._HashMap.HashMapData" params="K:V" file="/home/vsts/work/1/s/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
		<keys public="1"><c path="haxe.ds.IntMap"><c path="haxe.ds._HashMap.HashMapData.K"/></c></keys>
		<values public="1"><c path="haxe.ds.IntMap"><c path="haxe.ds._HashMap.HashMapData.V"/></c></values>
		<new public="1" get="inline" set="null" line="107"><f a=""><x path="Void"/></f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.ds.IntMap" params="T" file="/home/vsts/work/1/s/std/cs/_std/haxe/ds/IntMap.hx">
		<implements path="haxe.IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<HASH_UPPER get="inline" set="null" expr="0.7" line="35" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.7</e></m></meta>
		</HASH_UPPER>
		<assert get="inline" set="null" line="394" static="1"><f a="x">
	<x path="Bool"/>
	<x path="Void"/>
</f></assert>
		<defaultK get="inline" set="null" line="401" static="1"><f a=""><x path="Int"/></f></defaultK>
		<arrayCopy get="inline" set="null" line="404" static="1"><f a="sourceArray:sourceIndex:destinationArray:destinationIndex:length">
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></arrayCopy>
		<getInc get="inline" set="null" line="409" static="1"><f a="k:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getInc>
		<hash get="inline" set="null" line="413" static="1"><f a="i">
	<x path="Int"/>
	<x path="Int"/>
</f></hash>
		<getFlag get="inline" set="null" line="423" static="1"><f a="flags:i">
	<c path="cs.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
</f></getFlag>
		<isDel get="inline" set="null" line="427" static="1"><f a="flag">
	<x path="Int"/>
	<x path="Bool"/>
</f></isDel>
		<isEmpty get="inline" set="null" line="431" static="1"><f a="flag">
	<x path="Int"/>
	<x path="Bool"/>
</f></isEmpty>
		<isEither get="inline" set="null" line="435" static="1"><f a="flag">
	<x path="Int"/>
	<x path="Bool"/>
</f></isEither>
		<setIsDelFalse get="inline" set="null" line="439" static="1"><f a="flags:i">
	<c path="cs.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></setIsDelFalse>
		<setIsEmptyFalse get="inline" set="null" line="443" static="1"><f a="flags:i">
	<c path="cs.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></setIsEmptyFalse>
		<setIsBothFalse get="inline" set="null" line="447" static="1"><f a="flags:i">
	<c path="cs.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></setIsBothFalse>
		<setIsDelTrue get="inline" set="null" line="451" static="1"><f a="flags:i">
	<c path="cs.NativeArray"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></setIsDelTrue>
		<roundUp get="inline" set="null" line="455" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></roundUp>
		<flagsSize get="inline" set="null" line="465" static="1"><f a="m">
	<x path="Int"/>
	<x path="Int"/>
</f></flagsSize>
		<flags><c path="cs.NativeArray"><x path="Int"/></c></flags>
		<_keys><c path="cs.NativeArray"><x path="Int"/></c></_keys>
		<vals><c path="cs.NativeArray"><c path="haxe.ds.IntMap.T"/></c></vals>
		<nBuckets><x path="Int"/></nBuckets>
		<size><x path="Int"/></size>
		<nOccupied><x path="Int"/></nOccupied>
		<upperBound><x path="Int"/></upperBound>
		<cachedKey><x path="Int"/></cachedKey>
		<cachedIndex><x path="Int"/></cachedIndex>
		<set public="1" set="method" line="57">
			<f a="key:value">
				<x path="Int"/>
				<c path="haxe.ds.IntMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<lookup final="1" set="method" line="117"><f a="key">
	<x path="Int"/>
	<x path="Int"/>
</f></lookup>
		<get public="1" set="method" line="146">
			<f a="key">
				<x path="Int"/>
				<x path="Null"><c path="haxe.ds.IntMap.T"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<getDefault set="method" line="166"><f a="key:def">
	<x path="Int"/>
	<c path="haxe.ds.IntMap.T"/>
	<c path="haxe.ds.IntMap.T"/>
</f></getDefault>
		<exists public="1" set="method" line="186">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="207">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<resize final="1" set="method" line="240"><f a="newNBuckets">
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
		<keys public="1" get="inline" set="null" line="346">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>See `Map.keys`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" get="inline" set="null" line="350">
			<f a=""><t path="Iterator"><c path="haxe.ds.IntMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="354">
			<f a=""><t path="KeyValueIterator">
	<x path="Int"/>
	<c path="haxe.ds.IntMap.T"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method" line="358">
			<f a=""><c path="haxe.ds.IntMap"><c path="haxe.ds.IntMap.T"/></c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method" line="365">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method" line="380">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method" line="51">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new IntMap.</haxe_doc>
		</new>
		<haxe_doc>IntMap allows mapping of Int keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.ds._IntMap.IntMapKeyIterator" params="T" file="/home/vsts/work/1/s/std/cs/_std/haxe/ds/IntMap.hx" private="1" module="haxe.ds.IntMap">
		<m><c path="haxe.ds.IntMap"><c path="haxe.ds._IntMap.IntMapKeyIterator.T"/></c></m>
		<i><x path="Int"/></i>
		<len><x path="Int"/></len>
		<hasNext public="1" set="method" line="482"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method" line="492"><f a=""><x path="Int"/></f></next>
		<new public="1" set="method" line="476"><f a="m">
	<c path="haxe.ds.IntMap"><c path="haxe.ds._IntMap.IntMapKeyIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":hxGen"/>
			<m n=":access"><e>haxe.ds.IntMap</e></m>
		</meta>
	</class>
	<class path="haxe.ds._IntMap.IntMapValueIterator" params="T" file="/home/vsts/work/1/s/std/cs/_std/haxe/ds/IntMap.hx" private="1" module="haxe.ds.IntMap">
		<m><c path="haxe.ds.IntMap"><c path="haxe.ds._IntMap.IntMapValueIterator.T"/></c></m>
		<i><x path="Int"/></i>
		<len><x path="Int"/></len>
		<hasNext public="1" set="method" line="515"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="525"><f a=""><c path="haxe.ds._IntMap.IntMapValueIterator.T"/></f></next>
		<new public="1" set="method" line="509"><f a="m">
	<c path="haxe.ds.IntMap"><c path="haxe.ds._IntMap.IntMapValueIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":hxGen"/>
			<m n=":access"><e>haxe.ds.IntMap</e></m>
		</meta>
	</class>
	<class path="haxe.ds.List" params="T" file="/home/vsts/work/1/s/std/haxe/ds/List.hx">
		<h><c path="haxe.ds._List.ListNode"><c path="haxe.ds.List.T"/></c></h>
		<q><c path="haxe.ds._List.ListNode"><c path="haxe.ds.List.T"/></c></q>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` List.</haxe_doc>
		</length>
		<add public="1" set="method" line="53">
			<f a="item">
				<c path="haxe.ds.List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the end of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</add>
		<push public="1" set="method" line="68">
			<f a="item">
				<c path="haxe.ds.List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the beginning of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<first public="1" set="method" line="81">
			<f a=""><x path="Null"><c path="haxe.ds.List.T"/></x></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		This function does not modify `this` List.</haxe_doc>
		</first>
		<last public="1" set="method" line="90">
			<f a=""><x path="Null"><c path="haxe.ds.List.T"/></x></f>
			<haxe_doc>Returns the last element of `this` List, or null if no elements exist.

		This function does not modify `this` List.</haxe_doc>
		</last>
		<pop public="1" set="method" line="99">
			<f a=""><x path="Null"><c path="haxe.ds.List.T"/></x></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		The element is removed from `this` List.</haxe_doc>
		</pop>
		<isEmpty public="1" set="method" line="113">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if `this` List is empty.</haxe_doc>
		</isEmpty>
		<clear public="1" set="method" line="123">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Empties `this` List.

		This function does not traverse the elements, but simply sets the
		internal references to null and `this.length` to 0.</haxe_doc>
		</clear>
		<remove public="1" set="method" line="137">
			<f a="v">
				<c path="haxe.ds.List.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurrence of `v` in `this` List.

		If `v` is found by checking standard equality, it is removed from `this`
		List and the function returns true.

		Otherwise, false is returned.</haxe_doc>
		</remove>
		<iterator public="1" get="inline" set="null" line="160">
			<f a=""><c path="haxe.ds._List.ListIterator"><c path="haxe.ds.List.T"/></c></f>
			<haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="167">
			<f a=""><c path="haxe.ds._List.ListKeyValueIterator"><c path="haxe.ds.List.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the List indices and values.</haxe_doc>
		</keyValueIterator>
		<toString public="1" set="method" line="177">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` List.

		The result is enclosed in { } with the individual elements being
		separated by a comma.</haxe_doc>
		</toString>
		<join public="1" set="method" line="198">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` List, with `sep` separating
		each element.</haxe_doc>
		</join>
		<filter public="1" set="method" line="217">
			<f a="f">
				<f a="">
					<c path="haxe.ds.List.T"/>
					<x path="Bool"/>
				</f>
				<c path="haxe.ds.List"><c path="haxe.ds.List.T"/></c>
			</f>
			<haxe_doc>Returns a list filtered with `f`. The returned list will contain all
		elements for which `f(x) == true`.</haxe_doc>
		</filter>
		<map public="1" params="X" set="method" line="233">
			<f a="f">
				<f a="">
					<c path="haxe.ds.List.T"/>
					<c path="map.X"/>
				</f>
				<c path="haxe.ds.List"><c path="map.X"/></c>
			</f>
			<haxe_doc>Returns a new list where all elements have been converted by the
		function `f`.</haxe_doc>
		</map>
		<new public="1" set="method" line="44">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of element container objects
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole list content every time.

	@see https://haxe.org/manual/std-List.html</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.ds._List.ListNode" params="T" file="/home/vsts/work/1/s/std/haxe/ds/List.hx" private="1" module="haxe.ds.List">
		<create public="1" params="T" get="inline" set="null" line="271" static="1"><f a="item:next">
	<c path="create.T"/>
	<c path="haxe.ds._List.ListNode"><c path="create.T"/></c>
	<c path="haxe.ds._List.ListNode"><c path="create.T"/></c>
</f></create>
		<item public="1"><c path="haxe.ds._List.ListNode.T"/></item>
		<next public="1"><c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListNode.T"/></c></next>
		<new public="1" set="method" line="266"><f a="item:next">
	<c path="haxe.ds._List.ListNode.T"/>
	<c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListNode.T"/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.ds._List.ListIterator" params="T" file="/home/vsts/work/1/s/std/haxe/ds/List.hx" private="1" module="haxe.ds.List">
		<head><c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListIterator.T"/></c></head>
		<hasNext public="1" get="inline" set="null" line="284"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="288"><f a=""><c path="haxe.ds._List.ListIterator.T"/></f></next>
		<new public="1" get="inline" set="null" line="280"><f a="head">
	<c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.ds._List.ListKeyValueIterator" params="T" file="/home/vsts/work/1/s/std/haxe/ds/List.hx" private="1" module="haxe.ds.List">
		<idx><x path="Int"/></idx>
		<head><c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListKeyValueIterator.T"/></c></head>
		<hasNext public="1" get="inline" set="null" line="304"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="308"><f a=""><a>
	<value><c path="haxe.ds._List.ListKeyValueIterator.T"/></value>
	<key><x path="Int"/></key>
</a></f></next>
		<new public="1" get="inline" set="null" line="299"><f a="head">
	<c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListKeyValueIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.ds.ListSort" params="" file="/home/vsts/work/1/s/std/haxe/ds/ListSort.hx">
		<sort public="1" params="T" get="inline" set="null" line="42" static="1">
			<f a="list:cmp">
				<c path="sort.T"/>
				<f a=":">
					<c path="sort.T"/>
					<c path="sort.T"/>
					<x path="Int"/>
				</f>
				<c path="sort.T"/>
			</f>
			<haxe_doc><![CDATA[Sorts List `lst` according to the comparison function `cmp`, where
		`cmp(x,y)` returns 0 if `x == y`, a positive Int if `x > y` and a
		negative Int if `x < y`.

		This operation modifies List `a` in place and returns its head once modified.
		The `prev` of the head is set to the tail of the sorted list.

		If `list` or `cmp` are null, the result is unspecified.]]></haxe_doc>
		</sort>
		<sortSingleLinked public="1" params="T" get="inline" set="null" line="99" static="1">
			<f a="list:cmp">
				<c path="sortSingleLinked.T"/>
				<f a=":">
					<c path="sortSingleLinked.T"/>
					<c path="sortSingleLinked.T"/>
					<x path="Int"/>
				</f>
				<c path="sortSingleLinked.T"/>
			</f>
			<haxe_doc>Same as `sort` but on single linked list.</haxe_doc>
		</sortSingleLinked>
		<haxe_doc>ListSort provides a stable implementation of merge sort through its `sort`
	method. It has a O(N.log(N)) complexity and does not require additional memory allocation.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<abstract path="haxe.ds.Map" params="K:V" file="/home/vsts/work/1/s/std/haxe/ds/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="haxe.IMap">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `[key1 => value1, key2 => value2]` syntax.

	Map is an abstract type, it is not available at runtime.

	@see https://haxe.org/manual/std-Map.html]]></haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":multiType"><e>@:followWithAbstracts K</e></m>
		</meta>
		<impl><class path="haxe.ds._Map.Map_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map">
	<_new public="1" set="method" static="1">
		<f a=""><x path="haxe.ds.Map">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</x></f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if `K` is a `String`, `haxe.ds.StringMap` is used
		2. if `K` is an `Int`, `haxe.ds.IntMap` is used
		3. if `K` is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if `K` is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if `K` is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on `ObjectMap` by default.</haxe_doc>
	</_new>
	<set public="1" get="inline" set="null" line="74" static="1">
		<f a="this:key:value">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<c path="haxe.ds.Map.V"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Maps `key` to `value`.

		If `key` already has a mapping, the previous value disappears.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</set>
	<get public="1" get="inline" set="null" line="92" static="1">
		<f a="this:key">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<x path="Null"><c path="haxe.ds.Map.V"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Returns the current mapping of `key`.

		If no such mapping exists, `null` is returned.

		Note that a check like `map.get(key) == null` can hold for two reasons:

		1. the map has no mapping for `key`
		2. the map has a mapping with a value of `null`

		If it is important to distinguish these cases, `exists()` should be
		used.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</get>
	<exists public="1" get="inline" set="null" line="100" static="1">
		<f a="this:key">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns true if `key` has a mapping, false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="109" static="1">
		<f a="this:key">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Removes the mapping of `key` and returns true if such a mapping existed,
		false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="117" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.Map.K"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an Iterator over the keys of `this` Map.

		The order of keys is undefined.</haxe_doc>
	</keys>
	<iterator public="1" get="inline" set="null" line="126" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.Map.V"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an Iterator over the values of `this` Map.

		The order of values is undefined.</haxe_doc>
	</iterator>
	<keyValueIterator public="1" get="inline" set="null" line="135" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<t path="KeyValueIterator">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an Iterator over the keys and values of `this` Map.

		The order of values is undefined.</haxe_doc>
	</keyValueIterator>
	<copy public="1" get="inline" set="null" line="144" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<x path="haxe.ds.Map">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a shallow copy of `this` map.

		The order of values is undefined.</haxe_doc>
	</copy>
	<toString public="1" get="inline" set="null" line="153" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a String representation of `this` Map.

		The exact representation depends on the platform and key-type.</haxe_doc>
	</toString>
	<clear public="1" get="inline" set="null" line="160" static="1">
		<f a="this">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Removes all keys from `this` Map.</haxe_doc>
	</clear>
	<arrayWrite public="1" get="inline" set="null" line="164" static="1">
		<f a="this:k:v">
			<c path="haxe.IMap">
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
			</c>
			<c path="haxe.ds.Map.K"/>
			<c path="haxe.ds.Map.V"/>
			<c path="haxe.ds.Map.V"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
			<m n=":noCompletion"/>
		</meta>
	</arrayWrite>
	<toStringMap params="K:V" get="inline" set="null" line="169" static="1">
		<f a="t">
			<c path="haxe.IMap">
				<c path="toStringMap.K"/>
				<c path="toStringMap.V"/>
			</c>
			<c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toStringMap>
	<toIntMap params="K:V" get="inline" set="null" line="173" static="1">
		<f a="t">
			<c path="haxe.IMap">
				<c path="toIntMap.K"/>
				<c path="toIntMap.V"/>
			</c>
			<c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toIntMap>
	<toEnumValueMapMap params="K:V" get="inline" set="null" line="177" static="1">
		<f a="t">
			<c path="haxe.IMap">
				<c path="toEnumValueMapMap.K"/>
				<c path="toEnumValueMapMap.V"/>
			</c>
			<c path="haxe.ds.EnumValueMap">
				<c path="toEnumValueMapMap.K"/>
				<c path="toEnumValueMapMap.V"/>
			</c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toEnumValueMapMap>
	<toObjectMap params="K:V" get="inline" set="null" line="181" static="1">
		<f a="t">
			<c path="haxe.IMap">
				<c path="toObjectMap.K"/>
				<c path="toObjectMap.V"/>
			</c>
			<c path="haxe.ds.ObjectMap">
				<c path="toObjectMap.K"/>
				<c path="toObjectMap.V"/>
			</c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toObjectMap>
	<fromStringMap params="V" get="inline" set="null" line="185" static="1">
		<f a="map">
			<c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c>
			<x path="haxe.ds.Map">
				<c path="String"/>
				<c path="fromStringMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromStringMap>
	<fromIntMap params="V" get="inline" set="null" line="189" static="1">
		<f a="map">
			<c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c>
			<x path="haxe.ds.Map">
				<x path="Int"/>
				<c path="fromIntMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromIntMap>
	<fromObjectMap params="K:V" get="inline" set="null" line="193" static="1">
		<f a="map">
			<c path="haxe.ds.ObjectMap">
				<c path="fromObjectMap.K"/>
				<c path="fromObjectMap.V"/>
			</c>
			<x path="haxe.ds.Map">
				<c path="fromObjectMap.K"/>
				<c path="fromObjectMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromObjectMap>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.ds._Map.Map_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map">
		<_new public="1" set="method" static="1">
			<f a=""><x path="haxe.ds.Map">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</x></f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if `K` is a `String`, `haxe.ds.StringMap` is used
		2. if `K` is an `Int`, `haxe.ds.IntMap` is used
		3. if `K` is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if `K` is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if `K` is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on `ObjectMap` by default.</haxe_doc>
		</_new>
		<set public="1" get="inline" set="null" line="74" static="1">
			<f a="this:key:value">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Maps `key` to `value`.

		If `key` already has a mapping, the previous value disappears.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="92" static="1">
			<f a="this:key">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<x path="Null"><c path="haxe.ds.Map.V"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Returns the current mapping of `key`.

		If no such mapping exists, `null` is returned.

		Note that a check like `map.get(key) == null` can hold for two reasons:

		1. the map has no mapping for `key`
		2. the map has a mapping with a value of `null`

		If it is important to distinguish these cases, `exists()` should be
		used.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="100" static="1">
			<f a="this:key">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns true if `key` has a mapping, false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="109" static="1">
			<f a="this:key">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Removes the mapping of `key` and returns true if such a mapping existed,
		false otherwise.

		If `key` is `null`, the result is unspecified.</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="117" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.Map.K"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an Iterator over the keys of `this` Map.

		The order of keys is undefined.</haxe_doc>
		</keys>
		<iterator public="1" get="inline" set="null" line="126" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.Map.V"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an Iterator over the values of `this` Map.

		The order of values is undefined.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="135" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<t path="KeyValueIterator">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an Iterator over the keys and values of `this` Map.

		The order of values is undefined.</haxe_doc>
		</keyValueIterator>
		<copy public="1" get="inline" set="null" line="144" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<x path="haxe.ds.Map">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a shallow copy of `this` map.

		The order of values is undefined.</haxe_doc>
		</copy>
		<toString public="1" get="inline" set="null" line="153" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a String representation of `this` Map.

		The exact representation depends on the platform and key-type.</haxe_doc>
		</toString>
		<clear public="1" get="inline" set="null" line="160" static="1">
			<f a="this">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Removes all keys from `this` Map.</haxe_doc>
		</clear>
		<arrayWrite public="1" get="inline" set="null" line="164" static="1">
			<f a="this:k:v">
				<c path="haxe.IMap">
					<c path="haxe.ds.Map.K"/>
					<c path="haxe.ds.Map.V"/>
				</c>
				<c path="haxe.ds.Map.K"/>
				<c path="haxe.ds.Map.V"/>
				<c path="haxe.ds.Map.V"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
				<m n=":noCompletion"/>
			</meta>
		</arrayWrite>
		<toStringMap params="K:V" get="inline" set="null" line="169" static="1">
			<f a="t">
				<c path="haxe.IMap">
					<c path="toStringMap.K"/>
					<c path="toStringMap.V"/>
				</c>
				<c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toStringMap>
		<toIntMap params="K:V" get="inline" set="null" line="173" static="1">
			<f a="t">
				<c path="haxe.IMap">
					<c path="toIntMap.K"/>
					<c path="toIntMap.V"/>
				</c>
				<c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toIntMap>
		<toEnumValueMapMap params="K:V" get="inline" set="null" line="177" static="1">
			<f a="t">
				<c path="haxe.IMap">
					<c path="toEnumValueMapMap.K"/>
					<c path="toEnumValueMapMap.V"/>
				</c>
				<c path="haxe.ds.EnumValueMap">
					<c path="toEnumValueMapMap.K"/>
					<c path="toEnumValueMapMap.V"/>
				</c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toEnumValueMapMap>
		<toObjectMap params="K:V" get="inline" set="null" line="181" static="1">
			<f a="t">
				<c path="haxe.IMap">
					<c path="toObjectMap.K"/>
					<c path="toObjectMap.V"/>
				</c>
				<c path="haxe.ds.ObjectMap">
					<c path="toObjectMap.K"/>
					<c path="toObjectMap.V"/>
				</c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toObjectMap>
		<fromStringMap params="V" get="inline" set="null" line="185" static="1">
			<f a="map">
				<c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c>
				<x path="haxe.ds.Map">
					<c path="String"/>
					<c path="fromStringMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromStringMap>
		<fromIntMap params="V" get="inline" set="null" line="189" static="1">
			<f a="map">
				<c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c>
				<x path="haxe.ds.Map">
					<x path="Int"/>
					<c path="fromIntMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromIntMap>
		<fromObjectMap params="K:V" get="inline" set="null" line="193" static="1">
			<f a="map">
				<c path="haxe.ds.ObjectMap">
					<c path="fromObjectMap.K"/>
					<c path="fromObjectMap.V"/>
				</c>
				<x path="haxe.ds.Map">
					<c path="fromObjectMap.K"/>
					<c path="fromObjectMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromObjectMap>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.ds.ObjectMap" params="K:V" file="/home/vsts/work/1/s/std/cs/_std/haxe/ds/ObjectMap.hx">
		<implements path="haxe.IMap">
			<c path="haxe.ds.ObjectMap.K"/>
			<c path="haxe.ds.ObjectMap.V"/>
		</implements>
		<HASH_UPPER get="inline" set="null" expr="0.77" line="28" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.77</e></m></meta>
		</HASH_UPPER>
		<FLAG_EMPTY get="inline" set="null" expr="0" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</FLAG_EMPTY>
		<FLAG_DEL get="inline" set="null" expr="1" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</FLAG_DEL>
		<roundUp get="inline" set="null" line="414" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></roundUp>
		<getInc get="inline" set="null" line="424" static="1"><f a="k:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getInc>
		<isEither get="inline" set="null" line="427" static="1"><f a="v">
	<t path="haxe.ds._ObjectMap.HashType"/>
	<x path="Bool"/>
</f></isEither>
		<isEmpty get="inline" set="null" line="430" static="1"><f a="v">
	<t path="haxe.ds._ObjectMap.HashType"/>
	<x path="Bool"/>
</f></isEmpty>
		<isDel get="inline" set="null" line="433" static="1"><f a="v">
	<t path="haxe.ds._ObjectMap.HashType"/>
	<x path="Bool"/>
</f></isDel>
		<hash params="K" get="inline" set="null" line="437" static="1">
			<f a="s">
				<c path="hash.K"/>
				<t path="haxe.ds._ObjectMap.HashType"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</hash>
		<arrayCopy get="inline" set="null" line="463" static="1"><f a="sourceArray:sourceIndex:destinationArray:destinationIndex:length">
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></arrayCopy>
		<assert get="inline" set="null" line="467" static="1"><f a="x">
	<x path="Bool"/>
	<x path="Void"/>
</f></assert>
		<hashes>
			<c path="cs.NativeArray"><t path="haxe.ds._ObjectMap.HashType"/></c>
			<haxe_doc>* This is the most important structure here and the reason why it's so fast.
	 * It's an array of all the hashes contained in the table. These hashes cannot be 0 nor 1,
	 * which stand for "empty" and "deleted" states.
	 *
	 * The lookup algorithm will keep looking until a 0 or the key wanted is found;
	 * The insertion algorithm will do the same but will also break when FLAG_DEL is found;</haxe_doc>
		</hashes>
		<_keys><c path="cs.NativeArray"><c path="haxe.ds.ObjectMap.K"/></c></_keys>
		<vals><c path="cs.NativeArray"><c path="haxe.ds.ObjectMap.V"/></c></vals>
		<nBuckets><x path="Int"/></nBuckets>
		<size><x path="Int"/></size>
		<nOccupied><x path="Int"/></nOccupied>
		<upperBound><x path="Int"/></upperBound>
		<cachedKey><c path="haxe.ds.ObjectMap.K"/></cachedKey>
		<cachedIndex><x path="Int"/></cachedIndex>
		<set public="1" set="method" line="68">
			<f a="key:value">
				<c path="haxe.ds.ObjectMap.K"/>
				<c path="haxe.ds.ObjectMap.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<lookup final="1" set="method" line="138"><f a="key">
	<c path="haxe.ds.ObjectMap.K"/>
	<x path="Int"/>
</f></lookup>
		<resize final="1" set="method" line="166"><f a="newNBuckets">
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
		<get public="1" set="method" line="271">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Null"><c path="haxe.ds.ObjectMap.V"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<getDefault set="method" line="292"><f a="key:def">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.V"/>
	<c path="haxe.ds.ObjectMap.V"/>
</f></getDefault>
		<exists public="1" set="method" line="313">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="334">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="360">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.K"/></t></f>
			<haxe_doc>See `Map.keys`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="364">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="368">
			<f a=""><t path="KeyValueIterator">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.V"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method" line="372">
			<f a=""><c path="haxe.ds.ObjectMap">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.V"/>
</c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method" line="379">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method" line="394">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method" line="62">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new ObjectMap.</haxe_doc>
		</new>
		<haxe_doc>ObjectMap allows mapping of object keys to arbitrary values.

	On static targets, the keys are considered to be strong references. Refer
	to `haxe.ds.WeakMap` for a weak reference version.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.ds._ObjectMap.ObjectMapKeyIterator" params="T:V" file="/home/vsts/work/1/s/std/cs/_std/haxe/ds/ObjectMap.hx" private="1" module="haxe.ds.ObjectMap">
		<m><c path="haxe.ds.ObjectMap">
	<c path="haxe.ds._ObjectMap.ObjectMapKeyIterator.T"/>
	<c path="haxe.ds._ObjectMap.ObjectMapKeyIterator.V"/>
</c></m>
		<i><x path="Int"/></i>
		<len><x path="Int"/></len>
		<hasNext public="1" set="method" line="487"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method" line="497"><f a=""><c path="haxe.ds._ObjectMap.ObjectMapKeyIterator.T"/></f></next>
		<new public="1" set="method" line="481"><f a="m">
	<c path="haxe.ds.ObjectMap">
		<c path="haxe.ds._ObjectMap.ObjectMapKeyIterator.T"/>
		<c path="haxe.ds._ObjectMap.ObjectMapKeyIterator.V"/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":hxGen"/>
			<m n=":access"><e>haxe.ds.ObjectMap</e></m>
		</meta>
	</class>
	<class path="haxe.ds._ObjectMap.ObjectMapValueIterator" params="K:T" file="/home/vsts/work/1/s/std/cs/_std/haxe/ds/ObjectMap.hx" private="1" module="haxe.ds.ObjectMap">
		<m><c path="haxe.ds.ObjectMap">
	<c path="haxe.ds._ObjectMap.ObjectMapValueIterator.K"/>
	<c path="haxe.ds._ObjectMap.ObjectMapValueIterator.T"/>
</c></m>
		<i><x path="Int"/></i>
		<len><x path="Int"/></len>
		<hasNext public="1" set="method" line="522"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="532"><f a=""><c path="haxe.ds._ObjectMap.ObjectMapValueIterator.T"/></f></next>
		<new public="1" set="method" line="516"><f a="m">
	<c path="haxe.ds.ObjectMap">
		<c path="haxe.ds._ObjectMap.ObjectMapValueIterator.K"/>
		<c path="haxe.ds._ObjectMap.ObjectMapValueIterator.T"/>
	</c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":hxGen"/>
			<m n=":access"><e>haxe.ds.ObjectMap</e></m>
		</meta>
	</class>
	<typedef path="haxe.ds._ObjectMap.HashType" params="" file="/home/vsts/work/1/s/std/cs/_std/haxe/ds/ObjectMap.hx" private="1" module="haxe.ds.ObjectMap">
		<x path="Int"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<enum path="haxe.ds.Option" params="T" file="/home/vsts/work/1/s/std/haxe/ds/Option.hx">
		<Some a="v"><c path="haxe.ds.Option.T"/></Some>
		<None/>
		<haxe_doc>An Option is a wrapper type which can either have a value (Some) or not a
	value (None).

	@see https://haxe.org/manual/std-Option.html</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<abstract path="haxe.ds.ReadOnlyArray" params="T" file="/home/vsts/work/1/s/std/haxe/ds/ReadOnlyArray.hx">
		<from><icast><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></this>
		<haxe_doc>`ReadOnlyArray` is an abstract over an ordinary `Array` which only exposes
	APIs that don't modify the instance, hence "read-only".

	Note that this doesn't necessarily mean that the instance is *immutable*.
	Other code holding a reference to the underlying `Array` can still modify it,
	and the reference can be obtained with a `cast`.</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":forward">
				<e>concat</e>
				<e>copy</e>
				<e>filter</e>
				<e>indexOf</e>
				<e>iterator</e>
				<e>join</e>
				<e>lastIndexOf</e>
				<e>map</e>
				<e>slice</e>
				<e>toString</e>
			</m>
		</meta>
		<impl><class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>The length of `this` Array.</haxe_doc>
	</length>
	<get_length get="inline" set="null" line="40" static="1">
		<f a="this">
			<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get get="inline" set="null" line="43" static="1">
		<f a="this:i">
			<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
			<x path="Int"/>
			<c path="haxe.ds.ReadOnlyArray.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray">
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="40" static="1">
			<f a="this">
				<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get get="inline" set="null" line="43" static="1">
			<f a="this:i">
				<c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c>
				<x path="Int"/>
				<c path="haxe.ds.ReadOnlyArray.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.ds.StringMap" params="T" file="/home/vsts/work/1/s/std/cs/_std/haxe/ds/StringMap.hx">
		<implements path="haxe.IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<HASH_UPPER get="inline" set="null" expr="0.77" line="28" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.77</e></m></meta>
		</HASH_UPPER>
		<FLAG_EMPTY get="inline" set="null" expr="0" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</FLAG_EMPTY>
		<FLAG_DEL get="inline" set="null" expr="1" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</FLAG_DEL>
		<roundUp get="inline" set="null" line="413" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></roundUp>
		<isEither get="inline" set="null" line="423" static="1"><f a="v">
	<t path="haxe.ds._StringMap.HashType"/>
	<x path="Bool"/>
</f></isEither>
		<isEmpty get="inline" set="null" line="426" static="1"><f a="v">
	<t path="haxe.ds._StringMap.HashType"/>
	<x path="Bool"/>
</f></isEmpty>
		<isDel get="inline" set="null" line="429" static="1"><f a="v">
	<t path="haxe.ds._StringMap.HashType"/>
	<x path="Bool"/>
</f></isDel>
		<hash get="inline" set="null" line="433" static="1">
			<f a="s">
				<c path="String"/>
				<t path="haxe.ds._StringMap.HashType"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</hash>
		<arrayCopy get="inline" set="null" line="459" static="1"><f a="sourceArray:sourceIndex:destinationArray:destinationIndex:length">
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<c path="cs.system.Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></arrayCopy>
		<assert get="inline" set="null" line="463" static="1"><f a="x">
	<x path="Bool"/>
	<x path="Void"/>
</f></assert>
		<hashes>
			<c path="cs.NativeArray"><t path="haxe.ds._StringMap.HashType"/></c>
			<haxe_doc>* This is the most important structure here and the reason why it's so fast.
	 * It's an array of all the hashes contained in the table. These hashes cannot be 0 nor 1,
	 * which stand for "empty" and "deleted" states.
	 *
	 * The lookup algorithm will keep looking until a 0 or the key wanted is found;
	 * The insertion algorithm will do the same but will also break when FLAG_DEL is found;</haxe_doc>
		</hashes>
		<_keys><c path="cs.NativeArray"><c path="String"/></c></_keys>
		<vals><c path="cs.NativeArray"><c path="haxe.ds.StringMap.T"/></c></vals>
		<nBuckets><x path="Int"/></nBuckets>
		<size><x path="Int"/></size>
		<nOccupied><x path="Int"/></nOccupied>
		<upperBound><x path="Int"/></upperBound>
		<cachedKey><c path="String"/></cachedKey>
		<cachedIndex><x path="Int"/></cachedIndex>
		<set public="1" set="method" line="68">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<lookup final="1" set="method" line="140"><f a="key">
	<c path="String"/>
	<x path="Int"/>
</f></lookup>
		<resize final="1" set="method" line="168"><f a="newNBuckets">
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
		<get public="1" set="method" line="273">
			<f a="key">
				<c path="String"/>
				<x path="Null"><c path="haxe.ds.StringMap.T"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<getDefault set="method" line="292"><f a="key:def">
	<c path="String"/>
	<c path="haxe.ds.StringMap.T"/>
	<c path="haxe.ds.StringMap.T"/>
</f></getDefault>
		<exists public="1" set="method" line="313">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="333">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="359">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>See `Map.keys`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" get="inline" set="null" line="363">
			<f a=""><t path="Iterator"><c path="haxe.ds.StringMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="367">
			<f a=""><t path="KeyValueIterator">
	<c path="String"/>
	<c path="haxe.ds.StringMap.T"/>
</t></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method" line="371">
			<f a=""><c path="haxe.ds.StringMap"><c path="haxe.ds.StringMap.T"/></c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method" line="378">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method" line="393">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method" line="62">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":hxGen"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="haxe.ds._StringMap.HashType" params="" file="/home/vsts/work/1/s/std/cs/_std/haxe/ds/StringMap.hx" private="1" module="haxe.ds.StringMap">
		<x path="Int"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<class path="haxe.ds._StringMap.StringMapKeyIterator" params="T" file="/home/vsts/work/1/s/std/cs/_std/haxe/ds/StringMap.hx" private="1" module="haxe.ds.StringMap">
		<m><c path="haxe.ds.StringMap"><c path="haxe.ds._StringMap.StringMapKeyIterator.T"/></c></m>
		<i><x path="Int"/></i>
		<len><x path="Int"/></len>
		<hasNext public="1" set="method" line="485"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method" line="495"><f a=""><c path="String"/></f></next>
		<new public="1" set="method" line="479"><f a="m">
	<c path="haxe.ds.StringMap"><c path="haxe.ds._StringMap.StringMapKeyIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":hxGen"/>
			<m n=":access"><e>haxe.ds.StringMap</e></m>
		</meta>
	</class>
	<class path="haxe.ds._StringMap.StringMapValueIterator" params="T" file="/home/vsts/work/1/s/std/cs/_std/haxe/ds/StringMap.hx" private="1" module="haxe.ds.StringMap">
		<m><c path="haxe.ds.StringMap"><c path="haxe.ds._StringMap.StringMapValueIterator.T"/></c></m>
		<i><x path="Int"/></i>
		<len><x path="Int"/></len>
		<hasNext public="1" set="method" line="518"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="528"><f a=""><c path="haxe.ds._StringMap.StringMapValueIterator.T"/></f></next>
		<new public="1" set="method" line="512"><f a="m">
	<c path="haxe.ds.StringMap"><c path="haxe.ds._StringMap.StringMapValueIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":hxGen"/>
			<m n=":access"><e>haxe.ds.StringMap</e></m>
		</meta>
	</class>
	<typedef path="haxe.ds._Vector.VectorData" params="T" file="/home/vsts/work/1/s/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector">
		<c path="cs.NativeArray"><c path="haxe.ds._Vector.VectorData.T"/></c>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.ds.Vector" params="T" file="/home/vsts/work/1/s/std/haxe/ds/Vector.hx">
		<this><t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t></this>
		<haxe_doc>A Vector is a storage of fixed size. It can be faster than Array on some
	targets, and is never slower.

	@see https://haxe.org/manual/std-vector.html</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
		<impl><class path="haxe.ds._Vector.Vector_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector">
	<_new public="1" get="inline" set="null" line="64" static="1">
		<f a="length">
			<x path="Int"/>
			<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
		<haxe_doc>Creates a new Vector of length `length`.

		Initially `this` Vector contains `length` neutral elements:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
	</_new>
	<get public="1" get="inline" set="null" line="95" static="1">
		<f a="this:index">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
			<c path="haxe.ds.Vector.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
		<haxe_doc>Returns the value at index `index`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
	</get>
	<set public="1" get="inline" set="null" line="113" static="1">
		<f a="this:index:val">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
			<c path="haxe.ds.Vector.T"/>
			<c path="haxe.ds.Vector.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
		<haxe_doc>Sets the value at index `index` to `val`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
	</set>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the length of `this` Vector.</haxe_doc>
	</length>
	<get_length get="inline" set="null" line="130" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<blit public="1" params="T" get="inline" set="null" line="151" static="1">
		<f a="src:srcPos:dest:destPos:len">
			<x path="haxe.ds.Vector"><c path="blit.T"/></x>
			<x path="Int"/>
			<x path="haxe.ds.Vector"><c path="blit.T"/></x>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Copies `length` of elements from `src` Vector, beginning at `srcPos` to
		`dest` Vector, beginning at `destPos`

		The results are unspecified if `length` results in out-of-bounds access,
		or if `src` or `dest` are null</haxe_doc>
	</blit>
	<toArray public="1" set="method" line="192" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<c path="Array"><c path="haxe.ds.Vector.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Array, copy the content from the Vector to it, and returns it.</haxe_doc>
	</toArray>
	<toData public="1" get="inline" set="null" line="220" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Extracts the data of `this` Vector.

		This returns the internal representation type.</haxe_doc>
	</toData>
	<fromData public="1" params="T" get="inline" set="null" line="230" static="1">
		<f a="data">
			<t path="haxe.ds._Vector.VectorData"><c path="fromData.T"/></t>
			<x path="haxe.ds.Vector"><c path="fromData.T"/></x>
		</f>
		<haxe_doc>Initializes a new Vector from `data`.

		Since `data` is the internal representation of Vector, this is a no-op.

		If `data` is null, the corresponding Vector is also `null`.</haxe_doc>
	</fromData>
	<fromArrayCopy public="1" params="T" get="inline" set="null" line="247" static="1">
		<f a="array">
			<c path="Array"><c path="fromArrayCopy.T"/></c>
			<x path="haxe.ds.Vector"><c path="fromArrayCopy.T"/></x>
		</f>
		<haxe_doc>Creates a new Vector by copying the elements of `array`.

		This always creates a copy, even on platforms where the internal
		representation is Array.

		The elements are not copied and retain their identity, so
		`a[i] == Vector.fromArrayCopy(a).get(i)` is true for any valid i.

		If `array` is null, the result is unspecified.</haxe_doc>
	</fromArrayCopy>
	<copy public="1" params="T" get="inline" set="null" line="278" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="copy.T"/></t>
			<x path="haxe.ds.Vector"><c path="copy.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a shallow copy of `this` Vector.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
	</copy>
	<join public="1" params="T" get="inline" set="null" line="301" static="1">
		<f a="this:sep">
			<t path="haxe.ds._Vector.VectorData"><c path="join.T"/></t>
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a string representation of `this` Vector, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` Vector has length 0, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
	</join>
	<map public="1" params="S" get="inline" set="null" line="324" static="1">
		<f a="this:f">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<f a="">
				<c path="haxe.ds.Vector.T"/>
				<c path="map.S"/>
			</f>
			<x path="haxe.ds.Vector"><c path="map.S"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Vector by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
	</map>
	<sort public="1" params="T" get="inline" set="null" line="351" static="1">
		<f a="this:f">
			<t path="haxe.ds._Vector.VectorData"><c path="sort.T"/></t>
			<f a=":">
				<c path="sort.T"/>
				<c path="sort.T"/>
				<x path="Int"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Sorts `this` Vector according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Vector in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained.

		If `f` is null, the result is unspecified.]]></haxe_doc>
	</sort>
	<meta><m n=":nativeGen"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.ds._Vector.Vector_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector">
		<_new public="1" get="inline" set="null" line="64" static="1">
			<f a="length">
				<x path="Int"/>
				<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
			<haxe_doc>Creates a new Vector of length `length`.

		Initially `this` Vector contains `length` neutral elements:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
		</_new>
		<get public="1" get="inline" set="null" line="95" static="1">
			<f a="this:index">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
				<c path="haxe.ds.Vector.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
			<haxe_doc>Returns the value at index `index`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="113" static="1">
			<f a="this:index:val">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
				<c path="haxe.ds.Vector.T"/>
				<c path="haxe.ds.Vector.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
			<haxe_doc>Sets the value at index `index` to `val`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
		</set>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the length of `this` Vector.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="130" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<blit public="1" params="T" get="inline" set="null" line="151" static="1">
			<f a="src:srcPos:dest:destPos:len">
				<x path="haxe.ds.Vector"><c path="blit.T"/></x>
				<x path="Int"/>
				<x path="haxe.ds.Vector"><c path="blit.T"/></x>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies `length` of elements from `src` Vector, beginning at `srcPos` to
		`dest` Vector, beginning at `destPos`

		The results are unspecified if `length` results in out-of-bounds access,
		or if `src` or `dest` are null</haxe_doc>
		</blit>
		<toArray public="1" set="method" line="192" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<c path="Array"><c path="haxe.ds.Vector.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Array, copy the content from the Vector to it, and returns it.</haxe_doc>
		</toArray>
		<toData public="1" get="inline" set="null" line="220" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Extracts the data of `this` Vector.

		This returns the internal representation type.</haxe_doc>
		</toData>
		<fromData public="1" params="T" get="inline" set="null" line="230" static="1">
			<f a="data">
				<t path="haxe.ds._Vector.VectorData"><c path="fromData.T"/></t>
				<x path="haxe.ds.Vector"><c path="fromData.T"/></x>
			</f>
			<haxe_doc>Initializes a new Vector from `data`.

		Since `data` is the internal representation of Vector, this is a no-op.

		If `data` is null, the corresponding Vector is also `null`.</haxe_doc>
		</fromData>
		<fromArrayCopy public="1" params="T" get="inline" set="null" line="247" static="1">
			<f a="array">
				<c path="Array"><c path="fromArrayCopy.T"/></c>
				<x path="haxe.ds.Vector"><c path="fromArrayCopy.T"/></x>
			</f>
			<haxe_doc>Creates a new Vector by copying the elements of `array`.

		This always creates a copy, even on platforms where the internal
		representation is Array.

		The elements are not copied and retain their identity, so
		`a[i] == Vector.fromArrayCopy(a).get(i)` is true for any valid i.

		If `array` is null, the result is unspecified.</haxe_doc>
		</fromArrayCopy>
		<copy public="1" params="T" get="inline" set="null" line="278" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="copy.T"/></t>
				<x path="haxe.ds.Vector"><c path="copy.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a shallow copy of `this` Vector.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<join public="1" params="T" get="inline" set="null" line="301" static="1">
			<f a="this:sep">
				<t path="haxe.ds._Vector.VectorData"><c path="join.T"/></t>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a string representation of `this` Vector, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` Vector has length 0, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<map public="1" params="S" get="inline" set="null" line="324" static="1">
			<f a="this:f">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<f a="">
					<c path="haxe.ds.Vector.T"/>
					<c path="map.S"/>
				</f>
				<x path="haxe.ds.Vector"><c path="map.S"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Vector by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<sort public="1" params="T" get="inline" set="null" line="351" static="1">
			<f a="this:f">
				<t path="haxe.ds._Vector.VectorData"><c path="sort.T"/></t>
				<f a=":">
					<c path="sort.T"/>
					<c path="sort.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Sorts `this` Vector according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Vector in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="haxe.ds.WeakMap" params="K:V" file="/home/vsts/work/1/s/std/haxe/ds/WeakMap.hx">
		<implements path="haxe.IMap">
			<c path="haxe.ds.WeakMap.K"/>
			<c path="haxe.ds.WeakMap.V"/>
		</implements>
		<set public="1" set="method" line="45">
			<f a="key:value">
				<c path="haxe.ds.WeakMap.K"/>
				<c path="haxe.ds.WeakMap.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method" line="50">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Null"><c path="haxe.ds.WeakMap.V"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method" line="57">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="64">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="71">
			<f a=""><t path="Iterator"><c path="haxe.ds.WeakMap.K"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="78">
			<f a=""><t path="Iterator"><c path="haxe.ds.WeakMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="85">
			<f a=""><t path="KeyValueIterator">
	<c path="haxe.ds.WeakMap.K"/>
	<c path="haxe.ds.WeakMap.V"/>
</t></f>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method" line="92">
			<f a=""><c path="haxe.ds.WeakMap">
	<c path="haxe.ds.WeakMap.K"/>
	<c path="haxe.ds.WeakMap.V"/>
</c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method" line="99">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method" line="106">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method" line="38">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new WeakMap.</haxe_doc>
		</new>
		<haxe_doc>WeakMap allows mapping of object keys to arbitrary values.

	The keys are considered to be weak references on static targets.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<abstract path="haxe.extern.AsVar" params="T" file="/home/vsts/work/1/s/std/haxe/extern/AsVar.hx">
		<from><icast><c path="haxe.extern.AsVar.T"/></icast></from>
		<this><c path="haxe.extern.AsVar.T"/></this>
		<to><icast><c path="haxe.extern.AsVar.T"/></icast></to>
		<haxe_doc>If this type is used as an argument type, the compiler ensures that
	argument expressions are bound to a local variable.</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":forward"/>
			<m n=":semantics"><e>variable</e></m>
		</meta>
		<impl><class path="haxe.extern._AsVar.AsVar_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/extern/AsVar.hx" private="1" module="haxe.extern.AsVar" extern="1"><meta><m n=":hxGen"/></meta></class></impl>
	</abstract>
	<class path="haxe.extern._AsVar.AsVar_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/extern/AsVar.hx" private="1" module="haxe.extern.AsVar" extern="1"><meta><m n=":hxGen"/></meta></class>
	<abstract path="haxe.extern.EitherType" params="T1:T2" file="/home/vsts/work/1/s/std/haxe/extern/EitherType.hx">
		<from>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
		</from>
		<this><d/></this>
		<to>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
		</to>
		<haxe_doc><![CDATA[An abstract type allowing values to be either of `T1` or `T2` type.
	Supports implicit casts from/to either types.

	It is useful for interfacing with external code on dynamic platforms
	such as JavaScript or Python.

	Otherwise, use of this type is discouraged.

	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<meta><m n=":hxGen"/></meta>
		<impl><class path="haxe.extern._EitherType.EitherType_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/extern/EitherType.hx" private="1" module="haxe.extern.EitherType" extern="1"><meta><m n=":hxGen"/></meta></class></impl>
	</abstract>
	<class path="haxe.extern._EitherType.EitherType_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/extern/EitherType.hx" private="1" module="haxe.extern.EitherType" extern="1"><meta><m n=":hxGen"/></meta></class>
	<abstract path="haxe.extern.Rest" params="T" file="/home/vsts/work/1/s/std/haxe/extern/Rest.hx">
		<this><c path="Array"><c path="haxe.extern.Rest.T"/></c></this>
		<haxe_doc><![CDATA[A special abstract type that represents "rest" function argument.

	Should be used as a type for the last argument of an extern method,
	representing that arbitrary number of arguments of given type can be
	passed to that method.

	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<meta><m n=":hxGen"/></meta>
		<impl><class path="haxe.extern._Rest.Rest_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/extern/Rest.hx" private="1" module="haxe.extern.Rest" extern="1"><meta><m n=":hxGen"/></meta></class></impl>
	</abstract>
	<class path="haxe.extern._Rest.Rest_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/extern/Rest.hx" private="1" module="haxe.extern.Rest" extern="1"><meta><m n=":hxGen"/></meta></class>
	<class path="haxe.format.JsonParser" params="" file="/home/vsts/work/1/s/std/haxe/format/JsonParser.hx">
		<parse public="1" get="inline" set="null" line="44" static="1">
			<f a="str">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Parses given JSON-encoded `str` and returns the resulting object.

		JSON objects are parsed into anonymous structures and JSON arrays
		are parsed into `Array<Dynamic>`.

		If given `str` is not valid JSON, an exception will be thrown.

		If `str` is null, the result is unspecified.]]></haxe_doc>
		</parse>
		<str><c path="String"/></str>
		<pos><x path="Int"/></pos>
		<doParse set="method" line="56"><f a=""><d/></f></doParse>
		<parseRec set="method" line="70"><f a=""><d/></f></parseRec>
		<parseString set="method" line="152"><f a=""><c path="String"/></f></parseString>
		<parseNumber get="inline" set="null" line="256"><f a="c">
	<x path="Int"/>
	<d/>
</f></parseNumber>
		<nextChar get="inline" set="null" line="308"><f a=""><x path="Int"/></f></nextChar>
		<invalidChar set="method" line="312"><f a=""><x path="Void"/></f></invalidChar>
		<invalidNumber set="method" line="317"><f a="start">
	<x path="Int"/>
	<x path="Void"/>
</f></invalidNumber>
		<new set="method" line="51"><f a="str">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An implementation of JSON parser in Haxe.

	This class is used by `haxe.Json` when native JSON implementation
	is not available.

	@see https://haxe.org/manual/std-Json-parsing.html</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.format.JsonPrinter" params="" file="/home/vsts/work/1/s/std/haxe/format/JsonPrinter.hx">
		<print public="1" set="method" line="44" static="1">
			<f a="o:?replacer:?space">
				<d/>
				<f a="key:value">
					<d/>
					<d/>
					<d/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `o`'s value and returns the resulting JSON string.

		If `replacer` is given and is not null, it is used to retrieve
		actual object to be encoded. The `replacer` function takes two parameters,
		the key and the value being encoded. Initial key value is an empty string.

		If `space` is given and is not null, the result will be pretty-printed.
		Successive levels will be indented by this string.</haxe_doc>
		</print>
		<buf><c path="StringBuf"/></buf>
		<replacer><f a="key:value">
	<d/>
	<d/>
	<d/>
</f></replacer>
		<indent><c path="String"/></indent>
		<pretty><x path="Bool"/></pretty>
		<nind><x path="Int"/></nind>
		<ipad get="inline" set="null" line="71"><f a=""><x path="Void"/></f></ipad>
		<newl get="inline" set="null" line="76"><f a=""><x path="Void"/></f></newl>
		<write set="method" line="81"><f a="k:v">
	<d/>
	<d/>
	<x path="Void"/>
</f></write>
		<addChar get="inline" set="null" line="140"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></addChar>
		<add get="inline" set="null" line="148"><f a="v">
	<c path="String"/>
	<x path="Void"/>
</f></add>
		<classString set="method" line="157"><f a="v">
	<d/>
	<x path="Void"/>
</f></classString>
		<objString get="inline" set="null" line="161"><f a="v">
	<d/>
	<x path="Void"/>
</f></objString>
		<fieldsString set="method" line="165"><f a="v:fields">
	<d/>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></fieldsString>
		<quote set="method" line="196"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></quote>
		<new set="method" line="56"><f a="replacer:space">
	<f a="key:value">
		<d/>
		<d/>
		<d/>
	</f>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An implementation of JSON printer in Haxe.

	This class is used by `haxe.Json` when native JSON implementation
	is not available.

	@see https://haxe.org/manual/std-Json-encoding.html</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<typedef path="haxe.http._HttpBase.StringKeyValue" params="" file="/home/vsts/work/1/s/std/haxe/http/HttpBase.hx" private="1" module="haxe.http.HttpBase">
		<a>
			<value><c path="String"/></value>
			<name><c path="String"/></name>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<class path="haxe.http.HttpBase" params="" file="/home/vsts/work/1/s/std/haxe/http/HttpBase.hx">
		<url public="1">
			<c path="String"/>
			<haxe_doc>The url of `this` request. It is used only by the `request()` method and
		can be changed in order to send the same request to different target
		Urls.</haxe_doc>
		</url>
		<responseData public="1" get="accessor" set="null"><x path="Null"><c path="String"/></x></responseData>
		<responseBytes public="1" set="null"><x path="Null"><c path="haxe.io.Bytes"/></x></responseBytes>
		<responseAsString><x path="Null"><c path="String"/></x></responseAsString>
		<postData><x path="Null"><c path="String"/></x></postData>
		<postBytes><x path="Null"><c path="haxe.io.Bytes"/></x></postBytes>
		<headers><c path="Array"><t path="haxe.http._HttpBase.StringKeyValue"/></c></headers>
		<params><c path="Array"><t path="haxe.http._HttpBase.StringKeyValue"/></c></params>
		<emptyOnData final="1"><f a="">
	<c path="String"/>
	<x path="Void"/>
</f></emptyOnData>
		<setHeader public="1" set="method" line="85">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the header identified as `header` to value `value`.

		If `header` or `value` are null, the result is unspecified.

		This method provides a fluent interface.</haxe_doc>
		</setHeader>
		<addHeader public="1" set="method" line="98"><f a="header:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></addHeader>
		<setParameter public="1" set="method" line="112">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the parameter identified as `param` to value `value`.

		If `header` or `value` are null, the result is unspecified.

		This method provides a fluent interface.</haxe_doc>
		</setParameter>
		<addParameter public="1" set="method" line="125"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></addParameter>
		<setPostData public="1" set="method" line="142">
			<f a="data">
				<x path="Null"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the post data of `this` Http request to `data` string.

		There can only be one post data per request. Subsequent calls to
		this method or to `setPostBytes()` overwrite the previously set value.

		If `data` is null, the post data is considered to be absent.

		This method provides a fluent interface.</haxe_doc>
		</setPostData>
		<setPostBytes public="1" set="method" line="160">
			<f a="data">
				<x path="Null"><c path="haxe.io.Bytes"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the post data of `this` Http request to `data` bytes.

		There can only be one post data per request. Subsequent calls to
		this method or to `setPostData()` overwrite the previously set value.

		If `data` is null, the post data is considered to be absent.

		This method provides a fluent interface.</haxe_doc>
		</setPostBytes>
		<request public="1" set="method" line="185">
			<f a="?post">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sends `this` Http request to the Url specified by `this.url`.

		If `post` is true, the request is sent as POST request, otherwise it is
		sent as GET request.

		Depending on the outcome of the request, this method calls the
		`onStatus()`, `onError()`, `onData()` or `onBytes()` callback functions.

		If `this.url` is null, the result is unspecified.

		If `this.url` is an invalid or inaccessible Url, the `onError()` callback
		function is called.

		[js] If `this.async` is false, the callback functions are called before
		this method returns.</haxe_doc>
		</request>
		<onData public="1" set="dynamic" line="196">
			<f a="data">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a successful request, with `data` containing
		the result String.

		The intended usage is to bind it to a custom function:
		`httpInstance.onData = function(data) { // handle result }`</haxe_doc>
		</onData>
		<onBytes public="1" set="dynamic" line="205">
			<f a="data">
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a successful request, with `data` containing
		the result String.

		The intended usage is to bind it to a custom function:
		`httpInstance.onBytes = function(data) { // handle result }`</haxe_doc>
		</onBytes>
		<onError public="1" set="dynamic" line="214">
			<f a="msg">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a request error, with `msg` containing the
		error description.

		The intended usage is to bind it to a custom function:
		`httpInstance.onError = function(msg) { // handle error }`</haxe_doc>
		</onError>
		<onStatus public="1" set="dynamic" line="223">
			<f a="status">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a Http status change, with `status` being the
		new status.

		The intended usage is to bind it to a custom function:
		`httpInstance.onStatus = function(status) { // handle status }`</haxe_doc>
		</onStatus>
		<hasOnData set="method" line="228">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Override this if extending `haxe.Http` with overriding `onData`</haxe_doc>
		</hasOnData>
		<success set="method" line="232"><f a="data">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></success>
		<get_responseData set="method" line="240"><f a=""><x path="Null"><c path="String"/></x></f></get_responseData>
		<new public="1" set="method" line="71">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Http instance with `url` as parameter.

		This does not do a request until `request()` is called.

		If `url` is null, the field url must be set to a value before making the
		call to `request()`, or the result is unspecified.

		(Php) Https (SSL) connections are allowed only if the OpenSSL extension
		is enabled.</haxe_doc>
		</new>
		<haxe_doc>This class can be used to handle Http requests consistently across
	platforms. There are two intended usages:

	- call `haxe.Http.requestUrl(url)` and receive the result as a `String`
	(not available on flash)
	- create a `new haxe.Http(url)`, register your callbacks for `onData`,
	`onError` and `onStatus`, then call `request()`.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<abstract path="haxe.http.HttpMethod" params="" file="/home/vsts/work/1/s/std/haxe/http/HttpMethod.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>HTTP defines methods (sometimes referred to as _verbs_) to indicate the desired action to be
	performed on the identified resource. What this resource represents, whether pre-existing data
	or data that is generated dynamically, depends on the implementation of the server.

	Often, the resource corresponds to a file or the output of an executable residing on the server.
	The HTTP/1.0 specification defined the `GET`, `POST` and `HEAD` methods and the HTTP/1.1
	specification added 5 new methods: `OPTIONS`, `PUT`, `DELETE`, `TRACE` and `CONNECT`.

	By being specified in these documents their semantics are well known and can be depended upon.
	Any client can use any method and the server can be configured to support any combination of methods.
	If a method is unknown to an intermediate it will be treated as an unsafe and non-idempotent method.
	There is no limit to the number of methods that can be defined and this allows for future methods to
	be specified without breaking existing infrastructure.</haxe_doc>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.http._HttpMethod.HttpMethod_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/http/HttpMethod.hx" private="1" module="haxe.http.HttpMethod" extern="1">
	<Post public="1" get="inline" set="null" expr="cast &quot;POST&quot;" line="28" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "POST"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `POST` method requests that the server accept the entity enclosed in the request as
		a new subordinate of the web resource identified by the URI.
		
		The data `POST`ed might be, for example, an annotation for existing resources;
		a message for a bulletin board, newsgroup, mailing list, or comment thread;
		a block of data that is the result of submitting a web form to a data-handling process;
		or an item to add to a database.</haxe_doc>
	</Post>
	<Get public="1" get="inline" set="null" expr="cast &quot;GET&quot;" line="40" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "GET"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `GET` method requests a representation of the specified resource.

		Requests using `GET` should only retrieve data and should have no other effect.
		(This is also true of some other HTTP methods.) The W3C has published guidance
		principles on this distinction, saying, _"Web application design should be informed
		by the above principles, but also by the relevant limitations."_

		See safe methods below.</haxe_doc>
	</Get>
	<Head public="1" get="inline" set="null" expr="cast &quot;HEAD&quot;" line="47" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "HEAD"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `HEAD` method asks for a response identical to that of a `GET` request,
		but without the response body. This is useful for retrieving meta-information
		written in response headers, without having to transport the entire content.</haxe_doc>
	</Head>
	<Put public="1" get="inline" set="null" expr="cast &quot;PUT&quot;" line="54" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "PUT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `PUT` method requests that the enclosed entity be stored under the supplied URI.
		If the URI refers to an already existing resource, it is modified; if the URI does
		not point to an existing resource, then the server can create the resource with that URI.</haxe_doc>
	</Put>
	<Delete public="1" get="inline" set="null" expr="cast &quot;DELETE&quot;" line="59" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "DELETE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `DELETE` method deletes the specified resource.</haxe_doc>
	</Delete>
	<Trace public="1" get="inline" set="null" expr="cast &quot;TRACE&quot;" line="65" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "TRACE"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `TRACE` method echoes the received request so that a client can see
		what (if any) changes or additions have been made by intermediate servers.</haxe_doc>
	</Trace>
	<Options public="1" get="inline" set="null" expr="cast &quot;OPTIONS&quot;" line="72" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "OPTIONS"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `OPTIONS` method returns the HTTP methods that the server supports for the
		specified URL. This can be used to check the functionality of a web server by
		requesting `*` instead of a specific resource.</haxe_doc>
	</Options>
	<Connect public="1" get="inline" set="null" expr="cast &quot;CONNECT&quot;" line="78" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "CONNECT"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `CONNECT` method converts the request connection to a transparent TCP/IP tunnel,
		usually to facilitate SSL-encrypted communication (HTTPS) through an unencrypted HTTP proxy.</haxe_doc>
	</Connect>
	<Patch public="1" get="inline" set="null" expr="cast &quot;PATCH&quot;" line="83" static="1">
		<x path="haxe.http.HttpMethod"/>
		<meta>
			<m n=":value"><e>cast "PATCH"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>The `PATCH` method applies partial modifications to a resource.</haxe_doc>
	</Patch>
	<meta>
		<m n=":nativeGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.http._HttpMethod.HttpMethod_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/http/HttpMethod.hx" private="1" module="haxe.http.HttpMethod" extern="1">
		<Post public="1" get="inline" set="null" expr="cast &quot;POST&quot;" line="28" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "POST"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `POST` method requests that the server accept the entity enclosed in the request as
		a new subordinate of the web resource identified by the URI.
		
		The data `POST`ed might be, for example, an annotation for existing resources;
		a message for a bulletin board, newsgroup, mailing list, or comment thread;
		a block of data that is the result of submitting a web form to a data-handling process;
		or an item to add to a database.</haxe_doc>
		</Post>
		<Get public="1" get="inline" set="null" expr="cast &quot;GET&quot;" line="40" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "GET"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `GET` method requests a representation of the specified resource.

		Requests using `GET` should only retrieve data and should have no other effect.
		(This is also true of some other HTTP methods.) The W3C has published guidance
		principles on this distinction, saying, _"Web application design should be informed
		by the above principles, but also by the relevant limitations."_

		See safe methods below.</haxe_doc>
		</Get>
		<Head public="1" get="inline" set="null" expr="cast &quot;HEAD&quot;" line="47" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "HEAD"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `HEAD` method asks for a response identical to that of a `GET` request,
		but without the response body. This is useful for retrieving meta-information
		written in response headers, without having to transport the entire content.</haxe_doc>
		</Head>
		<Put public="1" get="inline" set="null" expr="cast &quot;PUT&quot;" line="54" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "PUT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `PUT` method requests that the enclosed entity be stored under the supplied URI.
		If the URI refers to an already existing resource, it is modified; if the URI does
		not point to an existing resource, then the server can create the resource with that URI.</haxe_doc>
		</Put>
		<Delete public="1" get="inline" set="null" expr="cast &quot;DELETE&quot;" line="59" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "DELETE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `DELETE` method deletes the specified resource.</haxe_doc>
		</Delete>
		<Trace public="1" get="inline" set="null" expr="cast &quot;TRACE&quot;" line="65" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "TRACE"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `TRACE` method echoes the received request so that a client can see
		what (if any) changes or additions have been made by intermediate servers.</haxe_doc>
		</Trace>
		<Options public="1" get="inline" set="null" expr="cast &quot;OPTIONS&quot;" line="72" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "OPTIONS"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `OPTIONS` method returns the HTTP methods that the server supports for the
		specified URL. This can be used to check the functionality of a web server by
		requesting `*` instead of a specific resource.</haxe_doc>
		</Options>
		<Connect public="1" get="inline" set="null" expr="cast &quot;CONNECT&quot;" line="78" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "CONNECT"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `CONNECT` method converts the request connection to a transparent TCP/IP tunnel,
		usually to facilitate SSL-encrypted communication (HTTPS) through an unencrypted HTTP proxy.</haxe_doc>
		</Connect>
		<Patch public="1" get="inline" set="null" expr="cast &quot;PATCH&quot;" line="83" static="1">
			<x path="haxe.http.HttpMethod"/>
			<meta>
				<m n=":value"><e>cast "PATCH"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>The `PATCH` method applies partial modifications to a resource.</haxe_doc>
		</Patch>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="haxe.http.HttpStatus" params="" file="/home/vsts/work/1/s/std/haxe/http/HttpStatus.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>HTTP Request Status</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.http._HttpStatus.HttpStatus_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/http/HttpStatus.hx" private="1" module="haxe.http.HttpStatus" extern="1">
	<Continue public="1" get="inline" set="null" expr="cast 100" line="7" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 100</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Continue>
	<SwitchingProtocols public="1" get="inline" set="null" expr="cast 101" line="8" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 101</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SwitchingProtocols>
	<Processing public="1" get="inline" set="null" expr="cast 102" line="9" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 102</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Processing>
	<OK public="1" get="inline" set="null" expr="cast 200" line="10" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 200</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OK>
	<Created public="1" get="inline" set="null" expr="cast 201" line="11" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 201</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Created>
	<Accepted public="1" get="inline" set="null" expr="cast 202" line="12" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 202</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Accepted>
	<NonAuthoritativeInformation public="1" get="inline" set="null" expr="cast 203" line="13" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 203</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NonAuthoritativeInformation>
	<NoContent public="1" get="inline" set="null" expr="cast 204" line="14" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 204</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NoContent>
	<ResetContent public="1" get="inline" set="null" expr="cast 205" line="15" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 205</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ResetContent>
	<PartialContent public="1" get="inline" set="null" expr="cast 206" line="16" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 206</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PartialContent>
	<MultiStatus public="1" get="inline" set="null" expr="cast 207" line="17" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 207</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MultiStatus>
	<AlreadyReported public="1" get="inline" set="null" expr="cast 208" line="18" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 208</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AlreadyReported>
	<IMUsed public="1" get="inline" set="null" expr="cast 226" line="19" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 226</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IMUsed>
	<MultipleChoices public="1" get="inline" set="null" expr="cast 300" line="20" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 300</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MultipleChoices>
	<MovedPermanently public="1" get="inline" set="null" expr="cast 301" line="21" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 301</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MovedPermanently>
	<Found public="1" get="inline" set="null" expr="cast 302" line="22" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 302</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Found>
	<SeeOther public="1" get="inline" set="null" expr="cast 303" line="23" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 303</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SeeOther>
	<NotModified public="1" get="inline" set="null" expr="cast 304" line="24" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 304</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NotModified>
	<UseProxy public="1" get="inline" set="null" expr="cast 305" line="25" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 305</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UseProxy>
	<SwitchProxy public="1" get="inline" set="null" expr="cast 306" line="26" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 306</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SwitchProxy>
	<TemporaryRedirect public="1" get="inline" set="null" expr="cast 307" line="27" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 307</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TemporaryRedirect>
	<PermanentRedirect public="1" get="inline" set="null" expr="cast 308" line="28" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 308</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PermanentRedirect>
	<BadRequest public="1" get="inline" set="null" expr="cast 400" line="29" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 400</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BadRequest>
	<Unauthorized public="1" get="inline" set="null" expr="cast 401" line="30" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 401</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Unauthorized>
	<PaymentRequired public="1" get="inline" set="null" expr="cast 402" line="31" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 402</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PaymentRequired>
	<Forbidden public="1" get="inline" set="null" expr="cast 403" line="32" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 403</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Forbidden>
	<NotFound public="1" get="inline" set="null" expr="cast 404" line="33" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 404</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NotFound>
	<MethodNotAllowed public="1" get="inline" set="null" expr="cast 405" line="34" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 405</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MethodNotAllowed>
	<NotAcceptable public="1" get="inline" set="null" expr="cast 406" line="35" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 406</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NotAcceptable>
	<ProxyAuthenticationRequired public="1" get="inline" set="null" expr="cast 407" line="36" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 407</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ProxyAuthenticationRequired>
	<RequestTimeout public="1" get="inline" set="null" expr="cast 408" line="37" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 408</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RequestTimeout>
	<Conflict public="1" get="inline" set="null" expr="cast 409" line="38" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 409</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Conflict>
	<Gone public="1" get="inline" set="null" expr="cast 410" line="39" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 410</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Gone>
	<LengthRequired public="1" get="inline" set="null" expr="cast 411" line="40" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 411</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LengthRequired>
	<PreconditionFailed public="1" get="inline" set="null" expr="cast 412" line="41" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 412</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PreconditionFailed>
	<PayloadTooLarge public="1" get="inline" set="null" expr="cast 413" line="42" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 413</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PayloadTooLarge>
	<URITooLong public="1" get="inline" set="null" expr="cast 414" line="43" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 414</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</URITooLong>
	<UnsupportedMediaType public="1" get="inline" set="null" expr="cast 415" line="44" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 415</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UnsupportedMediaType>
	<RangeNotSatisfiable public="1" get="inline" set="null" expr="cast 416" line="45" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 416</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RangeNotSatisfiable>
	<ExpectationFailed public="1" get="inline" set="null" expr="cast 417" line="46" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 417</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ExpectationFailed>
	<ImATeapot public="1" get="inline" set="null" expr="cast 418" line="47" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 418</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImATeapot>
	<MisdirectedRequest public="1" get="inline" set="null" expr="cast 421" line="48" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 421</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MisdirectedRequest>
	<UnprocessableEntity public="1" get="inline" set="null" expr="cast 422" line="49" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 422</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UnprocessableEntity>
	<Locked public="1" get="inline" set="null" expr="cast 423" line="50" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 423</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Locked>
	<FailedDependency public="1" get="inline" set="null" expr="cast 424" line="51" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 424</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FailedDependency>
	<UpgradeRequired public="1" get="inline" set="null" expr="cast 426" line="52" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 426</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UpgradeRequired>
	<PreconditionRequired public="1" get="inline" set="null" expr="cast 428" line="53" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 428</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PreconditionRequired>
	<TooManyRequests public="1" get="inline" set="null" expr="cast 429" line="54" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 429</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TooManyRequests>
	<RequestHeaderFieldsTooLarge public="1" get="inline" set="null" expr="cast 431" line="55" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 431</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RequestHeaderFieldsTooLarge>
	<UnavailableForLegalReasons public="1" get="inline" set="null" expr="cast 451" line="56" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 451</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UnavailableForLegalReasons>
	<InternalServerError public="1" get="inline" set="null" expr="cast 500" line="57" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 500</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</InternalServerError>
	<NotImplemented public="1" get="inline" set="null" expr="cast 501" line="58" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 501</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NotImplemented>
	<BadGateway public="1" get="inline" set="null" expr="cast 502" line="59" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 502</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BadGateway>
	<ServiceUnavailable public="1" get="inline" set="null" expr="cast 503" line="60" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 503</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ServiceUnavailable>
	<GatewayTimeout public="1" get="inline" set="null" expr="cast 504" line="61" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 504</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GatewayTimeout>
	<HTTPVersionNotSupported public="1" get="inline" set="null" expr="cast 505" line="62" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 505</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HTTPVersionNotSupported>
	<VariantAlsoNegotiates public="1" get="inline" set="null" expr="cast 506" line="63" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 506</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VariantAlsoNegotiates>
	<InsufficientStorage public="1" get="inline" set="null" expr="cast 507" line="64" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 507</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</InsufficientStorage>
	<LoopDetected public="1" get="inline" set="null" expr="cast 508" line="65" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 508</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LoopDetected>
	<NotExtended public="1" get="inline" set="null" expr="cast 510" line="66" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 510</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NotExtended>
	<NetworkAuthenticationRequired public="1" get="inline" set="null" expr="cast 511" line="67" static="1">
		<x path="haxe.http.HttpStatus"/>
		<meta>
			<m n=":value"><e>cast 511</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NetworkAuthenticationRequired>
	<meta>
		<m n=":hxGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.http._HttpStatus.HttpStatus_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/http/HttpStatus.hx" private="1" module="haxe.http.HttpStatus" extern="1">
		<Continue public="1" get="inline" set="null" expr="cast 100" line="7" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 100</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Continue>
		<SwitchingProtocols public="1" get="inline" set="null" expr="cast 101" line="8" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 101</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SwitchingProtocols>
		<Processing public="1" get="inline" set="null" expr="cast 102" line="9" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 102</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Processing>
		<OK public="1" get="inline" set="null" expr="cast 200" line="10" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 200</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OK>
		<Created public="1" get="inline" set="null" expr="cast 201" line="11" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 201</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Created>
		<Accepted public="1" get="inline" set="null" expr="cast 202" line="12" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 202</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Accepted>
		<NonAuthoritativeInformation public="1" get="inline" set="null" expr="cast 203" line="13" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 203</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NonAuthoritativeInformation>
		<NoContent public="1" get="inline" set="null" expr="cast 204" line="14" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 204</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NoContent>
		<ResetContent public="1" get="inline" set="null" expr="cast 205" line="15" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 205</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ResetContent>
		<PartialContent public="1" get="inline" set="null" expr="cast 206" line="16" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 206</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PartialContent>
		<MultiStatus public="1" get="inline" set="null" expr="cast 207" line="17" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 207</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MultiStatus>
		<AlreadyReported public="1" get="inline" set="null" expr="cast 208" line="18" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 208</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AlreadyReported>
		<IMUsed public="1" get="inline" set="null" expr="cast 226" line="19" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 226</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IMUsed>
		<MultipleChoices public="1" get="inline" set="null" expr="cast 300" line="20" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 300</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MultipleChoices>
		<MovedPermanently public="1" get="inline" set="null" expr="cast 301" line="21" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 301</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MovedPermanently>
		<Found public="1" get="inline" set="null" expr="cast 302" line="22" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 302</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Found>
		<SeeOther public="1" get="inline" set="null" expr="cast 303" line="23" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 303</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SeeOther>
		<NotModified public="1" get="inline" set="null" expr="cast 304" line="24" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 304</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NotModified>
		<UseProxy public="1" get="inline" set="null" expr="cast 305" line="25" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 305</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UseProxy>
		<SwitchProxy public="1" get="inline" set="null" expr="cast 306" line="26" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 306</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SwitchProxy>
		<TemporaryRedirect public="1" get="inline" set="null" expr="cast 307" line="27" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 307</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TemporaryRedirect>
		<PermanentRedirect public="1" get="inline" set="null" expr="cast 308" line="28" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 308</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PermanentRedirect>
		<BadRequest public="1" get="inline" set="null" expr="cast 400" line="29" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 400</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BadRequest>
		<Unauthorized public="1" get="inline" set="null" expr="cast 401" line="30" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 401</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Unauthorized>
		<PaymentRequired public="1" get="inline" set="null" expr="cast 402" line="31" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 402</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PaymentRequired>
		<Forbidden public="1" get="inline" set="null" expr="cast 403" line="32" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 403</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Forbidden>
		<NotFound public="1" get="inline" set="null" expr="cast 404" line="33" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 404</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NotFound>
		<MethodNotAllowed public="1" get="inline" set="null" expr="cast 405" line="34" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 405</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MethodNotAllowed>
		<NotAcceptable public="1" get="inline" set="null" expr="cast 406" line="35" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 406</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NotAcceptable>
		<ProxyAuthenticationRequired public="1" get="inline" set="null" expr="cast 407" line="36" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 407</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ProxyAuthenticationRequired>
		<RequestTimeout public="1" get="inline" set="null" expr="cast 408" line="37" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 408</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RequestTimeout>
		<Conflict public="1" get="inline" set="null" expr="cast 409" line="38" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 409</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Conflict>
		<Gone public="1" get="inline" set="null" expr="cast 410" line="39" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 410</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Gone>
		<LengthRequired public="1" get="inline" set="null" expr="cast 411" line="40" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 411</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LengthRequired>
		<PreconditionFailed public="1" get="inline" set="null" expr="cast 412" line="41" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 412</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PreconditionFailed>
		<PayloadTooLarge public="1" get="inline" set="null" expr="cast 413" line="42" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 413</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PayloadTooLarge>
		<URITooLong public="1" get="inline" set="null" expr="cast 414" line="43" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 414</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</URITooLong>
		<UnsupportedMediaType public="1" get="inline" set="null" expr="cast 415" line="44" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 415</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UnsupportedMediaType>
		<RangeNotSatisfiable public="1" get="inline" set="null" expr="cast 416" line="45" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 416</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RangeNotSatisfiable>
		<ExpectationFailed public="1" get="inline" set="null" expr="cast 417" line="46" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 417</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ExpectationFailed>
		<ImATeapot public="1" get="inline" set="null" expr="cast 418" line="47" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 418</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImATeapot>
		<MisdirectedRequest public="1" get="inline" set="null" expr="cast 421" line="48" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 421</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MisdirectedRequest>
		<UnprocessableEntity public="1" get="inline" set="null" expr="cast 422" line="49" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 422</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UnprocessableEntity>
		<Locked public="1" get="inline" set="null" expr="cast 423" line="50" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 423</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Locked>
		<FailedDependency public="1" get="inline" set="null" expr="cast 424" line="51" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 424</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FailedDependency>
		<UpgradeRequired public="1" get="inline" set="null" expr="cast 426" line="52" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 426</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UpgradeRequired>
		<PreconditionRequired public="1" get="inline" set="null" expr="cast 428" line="53" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 428</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PreconditionRequired>
		<TooManyRequests public="1" get="inline" set="null" expr="cast 429" line="54" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 429</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TooManyRequests>
		<RequestHeaderFieldsTooLarge public="1" get="inline" set="null" expr="cast 431" line="55" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 431</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RequestHeaderFieldsTooLarge>
		<UnavailableForLegalReasons public="1" get="inline" set="null" expr="cast 451" line="56" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 451</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UnavailableForLegalReasons>
		<InternalServerError public="1" get="inline" set="null" expr="cast 500" line="57" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 500</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</InternalServerError>
		<NotImplemented public="1" get="inline" set="null" expr="cast 501" line="58" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 501</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NotImplemented>
		<BadGateway public="1" get="inline" set="null" expr="cast 502" line="59" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 502</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BadGateway>
		<ServiceUnavailable public="1" get="inline" set="null" expr="cast 503" line="60" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 503</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ServiceUnavailable>
		<GatewayTimeout public="1" get="inline" set="null" expr="cast 504" line="61" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 504</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GatewayTimeout>
		<HTTPVersionNotSupported public="1" get="inline" set="null" expr="cast 505" line="62" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 505</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HTTPVersionNotSupported>
		<VariantAlsoNegotiates public="1" get="inline" set="null" expr="cast 506" line="63" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 506</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VariantAlsoNegotiates>
		<InsufficientStorage public="1" get="inline" set="null" expr="cast 507" line="64" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 507</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</InsufficientStorage>
		<LoopDetected public="1" get="inline" set="null" expr="cast 508" line="65" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 508</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LoopDetected>
		<NotExtended public="1" get="inline" set="null" expr="cast 510" line="66" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 510</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NotExtended>
		<NetworkAuthenticationRequired public="1" get="inline" set="null" expr="cast 511" line="67" static="1">
			<x path="haxe.http.HttpStatus"/>
			<meta>
				<m n=":value"><e>cast 511</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NetworkAuthenticationRequired>
		<meta>
			<m n=":hxGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="haxe.io.ArrayBufferViewData" params="" file="/home/vsts/work/1/s/std/haxe/io/ArrayBufferView.hx" module="haxe.io.ArrayBufferView">
		<c path="haxe.io.ArrayBufferViewImpl"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<class path="haxe.io.ArrayBufferViewImpl" params="" file="/home/vsts/work/1/s/std/haxe/io/ArrayBufferView.hx" module="haxe.io.ArrayBufferView">
		<bytes public="1"><c path="haxe.io.Bytes"/></bytes>
		<byteOffset public="1"><x path="Int"/></byteOffset>
		<byteLength public="1"><x path="Int"/></byteLength>
		<sub public="1" set="method" line="38"><f a="begin:?length">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.ArrayBufferViewImpl"/>
</f></sub>
		<subarray public="1" set="method" line="46"><f a="?begin:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.ArrayBufferViewImpl"/>
</f></subarray>
		<new public="1" set="method" line="32"><f a="bytes:pos:length">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<abstract path="haxe.io.ArrayBufferView" params="" file="/home/vsts/work/1/s/std/haxe/io/ArrayBufferView.hx">
		<this><t path="haxe.io.ArrayBufferViewData"/></this>
		<meta><m n=":hxGen"/></meta>
		<impl><class path="haxe.io._ArrayBufferView.ArrayBufferView_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/io/ArrayBufferView.hx" private="1" module="haxe.io.ArrayBufferView">
	<buffer public="1" get="accessor" set="null" static="1">
		<c path="haxe.io.Bytes"/>
		<meta><m n=":impl"/></meta>
	</buffer>
	<byteOffset public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</byteOffset>
	<byteLength public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</byteLength>
	<_new public="1" get="inline" set="null" line="60" static="1">
		<f a="size">
			<x path="Int"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<get_byteOffset get="inline" set="null" line="64" static="1">
		<f a="this">
			<t path="haxe.io.ArrayBufferViewData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_byteOffset>
	<get_byteLength get="inline" set="null" line="67" static="1">
		<f a="this">
			<t path="haxe.io.ArrayBufferViewData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_byteLength>
	<get_buffer get="inline" set="null" line="70" static="1">
		<f a="this">
			<t path="haxe.io.ArrayBufferViewData"/>
			<c path="haxe.io.Bytes"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_buffer>
	<sub public="1" get="inline" set="null" line="73" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.ArrayBufferViewData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="77" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.ArrayBufferViewData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="81" static="1">
		<f a="this">
			<t path="haxe.io.ArrayBufferViewData"/>
			<t path="haxe.io.ArrayBufferViewData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" get="inline" set="null" line="85" static="1"><f a="a">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></fromData>
	<fromBytes public="1" set="method" line="89" static="1">
		<f a="bytes:?pos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromBytes>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io._ArrayBufferView.ArrayBufferView_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/io/ArrayBufferView.hx" private="1" module="haxe.io.ArrayBufferView">
		<buffer public="1" get="accessor" set="null" static="1">
			<c path="haxe.io.Bytes"/>
			<meta><m n=":impl"/></meta>
		</buffer>
		<byteOffset public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</byteOffset>
		<byteLength public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</byteLength>
		<_new public="1" get="inline" set="null" line="60" static="1">
			<f a="size">
				<x path="Int"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<get_byteOffset get="inline" set="null" line="64" static="1">
			<f a="this">
				<t path="haxe.io.ArrayBufferViewData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_byteOffset>
		<get_byteLength get="inline" set="null" line="67" static="1">
			<f a="this">
				<t path="haxe.io.ArrayBufferViewData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_byteLength>
		<get_buffer get="inline" set="null" line="70" static="1">
			<f a="this">
				<t path="haxe.io.ArrayBufferViewData"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_buffer>
		<sub public="1" get="inline" set="null" line="73" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.ArrayBufferViewData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="77" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.ArrayBufferViewData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="81" static="1">
			<f a="this">
				<t path="haxe.io.ArrayBufferViewData"/>
				<t path="haxe.io.ArrayBufferViewData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" get="inline" set="null" line="85" static="1"><f a="a">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></fromData>
		<fromBytes public="1" set="method" line="89" static="1">
			<f a="bytes:?pos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromBytes>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.io.BufferInput" params="" file="/home/vsts/work/1/s/std/haxe/io/BufferInput.hx">
		<extends path="haxe.io.Input"/>
		<i public="1"><c path="haxe.io.Input"/></i>
		<buf public="1"><c path="haxe.io.Bytes"/></buf>
		<available public="1"><x path="Int"/></available>
		<pos public="1"><x path="Int"/></pos>
		<refill public="1" set="method" line="38"><f a=""><x path="Void"/></f></refill>
		<readByte public="1" set="method" line="46" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="55" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="31">
			<f a="i:buf:?pos:?available" v="::0:0">
				<c path="haxe.io.Input"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ available : 0, pos : 0 }</e></m></meta>
		</new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.io.BytesBuffer" params="" file="/home/vsts/work/1/s/std/haxe/io/BytesBuffer.hx">
		<b><c path="cs.system.io.MemoryStream"/></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the buffer in bytes.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="64"><f a=""><x path="Int"/></f></get_length>
		<addByte public="1" get="inline" set="null" line="76"><f a="byte">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<add public="1" get="inline" set="null" line="94"><f a="src">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></add>
		<addString public="1" get="inline" set="null" line="118"><f a="v:?encoding">
	<c path="String"/>
	<e path="haxe.io.Encoding"/>
	<x path="Void"/>
</f></addString>
		<addInt32 public="1" set="method" line="133"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></addInt32>
		<addInt64 public="1" set="method" line="144"><f a="v">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></addInt64>
		<addFloat public="1" get="inline" set="null" line="149"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></addFloat>
		<addDouble public="1" get="inline" set="null" line="157"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></addDouble>
		<addBytes public="1" get="inline" set="null" line="165"><f a="src:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<getBytes public="1" set="method" line="201">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns either a copy or a reference of the current bytes.
		Once called, the buffer should no longer be used.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="45"><f a=""><x path="Void"/></f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="/home/vsts/work/1/s/std/haxe/io/BytesData.hx">
		<c path="cs.NativeArray"><x path="cs.UInt8"/></c>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<class path="haxe.io.BytesInput" params="" file="/home/vsts/work/1/s/std/haxe/io/BytesInput.hx">
		<extends path="haxe.io.Input"/>
		<b><t path="haxe.io.BytesData"/></b>
		<pos><x path="Int"/></pos>
		<len><x path="Int"/></len>
		<totlen><x path="Int"/></totlen>
		<position public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<haxe_doc>The current position in the stream in bytes.</haxe_doc>
		</position>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the stream in bytes.</haxe_doc>
		</length>
		<get_position get="inline" set="null" line="67"><f a=""><x path="Int"/></f></get_position>
		<get_length get="inline" set="null" line="75"><f a=""><x path="Int"/></f></get_length>
		<set_position set="method" line="83"><f a="p">
	<x path="Int"/>
	<x path="Int"/>
</f></set_position>
		<readByte public="1" set="method" line="96" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="119" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="39"><f a="b:?pos:?len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.io.BytesOutput" params="" file="/home/vsts/work/1/s/std/haxe/io/BytesOutput.hx">
		<extends path="haxe.io.Output"/>
		<b><c path="haxe.io.BytesBuffer"/></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the stream in bytes.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="47"><f a=""><x path="Int"/></f></get_length>
		<writeByte public="1" set="method" line="51" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="59" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<getBytes public="1" set="method" line="137">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>Returns the `Bytes` of this output.

		This function should not be called more than once on a given
		`BytesOutput` instance.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="35"><f a=""><x path="Void"/></f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<enum path="haxe.io.Encoding" params="" file="/home/vsts/work/1/s/std/haxe/io/Encoding.hx">
		<UTF8/>
		<RawNative><haxe_doc>Output the string the way the platform represent it in memory. This is the most efficient but is platform-specific</haxe_doc></RawNative>
		<haxe_doc>String binary encoding supported by Haxe I/O</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="haxe.io.Eof" params="" file="/home/vsts/work/1/s/std/haxe/io/Eof.hx">
		<toString set="method" line="32">
			<f a=""><c path="String"/></f>
			<meta><m n=":ifFeature"><e>"haxe.io.Eof.*"</e></m></meta>
		</toString>
		<new public="1" set="method" line="29"><f a=""><x path="Void"/></f></new>
		<haxe_doc>This exception is raised when reading while data is no longer available in the `haxe.io.Input`.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<enum path="haxe.io.Error" params="" file="/home/vsts/work/1/s/std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<class path="haxe.io.FPHelper" params="" file="/home/vsts/work/1/s/std/haxe/io/FPHelper.hx">
		<i32ToFloat public="1" set="method" line="133" static="1"><f a="i">
	<x path="Int"/>
	<x path="Float"/>
</f></i32ToFloat>
		<floatToI32 public="1" set="method" line="177" static="1"><f a="f">
	<x path="Float"/>
	<x path="Int"/>
</f></floatToI32>
		<i64ToDouble public="1" set="method" line="214" static="1"><f a="low:high">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></i64ToDouble>
		<doubleToI64 public="1" set="method" line="268" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Returns an Int64 representing the bytes representation of the double precision IEEE float value.
		WARNING : for performance reason, the same Int64 value might be reused every time. Copy its low/high values before calling again.
		We still ensure that this is safe to use in a multithread environment</haxe_doc>
		</doubleToI64>
		<haxe_doc>Helper that converts between floating point and binary representation.
	Always works in low-endian encoding.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.io._FPHelper.SingleHelper" params="" file="/home/vsts/work/1/s/std/haxe/io/FPHelper.hx" private="1" module="haxe.io.FPHelper">
		<i public="1">
			<x path="Int"/>
			<meta><m n=":meta"><e>System.Runtime.InteropServices.FieldOffset(0)</e></m></meta>
		</i>
		<f public="1">
			<x path="Single"/>
			<meta><m n=":meta"><e>System.Runtime.InteropServices.FieldOffset(0)</e></m></meta>
		</f>
		<new public="1" set="method" line="344"><f a="f">
	<x path="Single"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":meta"><e>System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Explicit)</e></m>
			<m n=":nativeGen"/>
			<m n=":struct"/>
		</meta>
	</class>
	<class path="haxe.io._FPHelper.FloatHelper" params="" file="/home/vsts/work/1/s/std/haxe/io/FPHelper.hx" private="1" module="haxe.io.FPHelper">
		<i public="1">
			<x path="haxe.Int64"/>
			<meta><m n=":meta"><e>System.Runtime.InteropServices.FieldOffset(0)</e></m></meta>
		</i>
		<f public="1">
			<x path="Float"/>
			<meta><m n=":meta"><e>System.Runtime.InteropServices.FieldOffset(0)</e></m></meta>
		</f>
		<new public="1" set="method" line="357"><f a="f">
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":meta"><e>System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Explicit)</e></m>
			<m n=":nativeGen"/>
			<m n=":struct"/>
		</meta>
	</class>
	<typedef path="haxe.io.Float32ArrayData" params="" file="/home/vsts/work/1/s/std/haxe/io/Float32Array.hx" module="haxe.io.Float32Array">
		<t path="haxe.io.ArrayBufferViewData"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.io.Float32Array" params="" file="/home/vsts/work/1/s/std/haxe/io/Float32Array.hx">
		<this><t path="haxe.io.Float32ArrayData"/></this>
		<meta><m n=":hxGen"/></meta>
		<impl><class path="haxe.io._Float32Array.Float32Array_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/io/Float32Array.hx" private="1" module="haxe.io.Float32Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="33" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<get_length get="inline" set="null" line="37" static="1">
		<f a="this">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="41" static="1">
		<f a="this">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="45" static="1">
		<f a="this:index">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="49" static="1">
		<f a="this:index:value">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="57" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="61" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="65" static="1">
		<f a="this">
			<t path="haxe.io.Float32ArrayData"/>
			<t path="haxe.io.Float32ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="haxe.io.Float32Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="73" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="84" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io._Float32Array.Float32Array_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/io/Float32Array.hx" private="1" module="haxe.io.Float32Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="33" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<get_length get="inline" set="null" line="37" static="1">
			<f a="this">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="41" static="1">
			<f a="this">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="45" static="1">
			<f a="this:index">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="49" static="1">
			<f a="this:index:value">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="57" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="61" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="65" static="1">
			<f a="this">
				<t path="haxe.io.Float32ArrayData"/>
				<t path="haxe.io.Float32ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="haxe.io.Float32Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="73" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="84" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
		<meta><m n=":hxGen"/></meta>
	</class>
	<typedef path="haxe.io.Float64ArrayData" params="" file="/home/vsts/work/1/s/std/haxe/io/Float64Array.hx" module="haxe.io.Float64Array">
		<t path="haxe.io.ArrayBufferViewData"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.io.Float64Array" params="" file="/home/vsts/work/1/s/std/haxe/io/Float64Array.hx">
		<this><t path="haxe.io.Float64ArrayData"/></this>
		<meta><m n=":hxGen"/></meta>
		<impl><class path="haxe.io._Float64Array.Float64Array_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/io/Float64Array.hx" private="1" module="haxe.io.Float64Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="8" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>8</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="33" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<get_length get="inline" set="null" line="37" static="1">
		<f a="this">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="41" static="1">
		<f a="this">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="45" static="1">
		<f a="this:index">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="49" static="1">
		<f a="this:index:value">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="57" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="61" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="65" static="1">
		<f a="this">
			<t path="haxe.io.Float64ArrayData"/>
			<t path="haxe.io.Float64ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="haxe.io.Float64Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="73" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="84" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io._Float64Array.Float64Array_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/io/Float64Array.hx" private="1" module="haxe.io.Float64Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="8" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="33" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<get_length get="inline" set="null" line="37" static="1">
			<f a="this">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="41" static="1">
			<f a="this">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="45" static="1">
			<f a="this:index">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="49" static="1">
			<f a="this:index:value">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="57" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="61" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="65" static="1">
			<f a="this">
				<t path="haxe.io.Float64ArrayData"/>
				<t path="haxe.io.Float64ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="haxe.io.Float64Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="73" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="84" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
		<meta><m n=":hxGen"/></meta>
	</class>
	<typedef path="haxe.io.Int32ArrayData" params="" file="/home/vsts/work/1/s/std/haxe/io/Int32Array.hx" module="haxe.io.Int32Array">
		<t path="haxe.io.ArrayBufferViewData"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.io.Int32Array" params="" file="/home/vsts/work/1/s/std/haxe/io/Int32Array.hx">
		<this><t path="haxe.io.Int32ArrayData"/></this>
		<meta><m n=":hxGen"/></meta>
		<impl><class path="haxe.io._Int32Array.Int32Array_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/io/Int32Array.hx" private="1" module="haxe.io.Int32Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="33" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<get_length get="inline" set="null" line="37" static="1">
		<f a="this">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="41" static="1">
		<f a="this">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="45" static="1">
		<f a="this:index">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="49" static="1">
		<f a="this:index:value">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="57" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="61" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="65" static="1">
		<f a="this">
			<t path="haxe.io.Int32ArrayData"/>
			<t path="haxe.io.Int32ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="haxe.io.Int32Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="73" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="84" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io._Int32Array.Int32Array_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/io/Int32Array.hx" private="1" module="haxe.io.Int32Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="33" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<get_length get="inline" set="null" line="37" static="1">
			<f a="this">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="41" static="1">
			<f a="this">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="45" static="1">
			<f a="this:index">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="49" static="1">
			<f a="this:index:value">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="57" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="61" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="65" static="1">
			<f a="this">
				<t path="haxe.io.Int32ArrayData"/>
				<t path="haxe.io.Int32ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="haxe.io.Int32Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="73" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="84" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
		<meta><m n=":hxGen"/></meta>
	</class>
	<abstract path="haxe.io.Mime" params="" file="/home/vsts/work/1/s/std/haxe/io/Mime.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>HTML MimeType Enum
	@see http://www.sitepoint.com/web-foundations/mime-types-complete-list/</haxe_doc>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.io._Mime.Mime_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/io/Mime.hx" private="1" module="haxe.io.Mime" extern="1">
	<XWorldX3dmf public="1" get="inline" set="null" expr="cast &quot;x-world/x-3dmf&quot;" line="8" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "x-world/x-3dmf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XWorldX3dmf>
	<ApplicationOctetStream public="1" get="inline" set="null" expr="cast &quot;application/octet-stream&quot;" line="9" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/octet-stream"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationOctetStream>
	<ApplicationXAuthorwareBin public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-bin&quot;" line="10" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-authorware-bin"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXAuthorwareBin>
	<ApplicationXAuthorwareMap public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-map&quot;" line="11" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-authorware-map"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXAuthorwareMap>
	<ApplicationXAuthorwareSeg public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-seg&quot;" line="12" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-authorware-seg"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXAuthorwareSeg>
	<TextVndAbc public="1" get="inline" set="null" expr="cast &quot;text/vnd.abc&quot;" line="13" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/vnd.abc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextVndAbc>
	<TextHtml public="1" get="inline" set="null" expr="cast &quot;text/html&quot;" line="14" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/html"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextHtml>
	<VideoAnimaflex public="1" get="inline" set="null" expr="cast &quot;video/animaflex&quot;" line="15" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/animaflex"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoAnimaflex>
	<ApplicationPostscript public="1" get="inline" set="null" expr="cast &quot;application/postscript&quot;" line="16" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/postscript"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationPostscript>
	<AudioAiff public="1" get="inline" set="null" expr="cast &quot;audio/aiff&quot;" line="17" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/aiff"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioAiff>
	<AudioXAiff public="1" get="inline" set="null" expr="cast &quot;audio/x-aiff&quot;" line="18" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-aiff"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXAiff>
	<ApplicationXAim public="1" get="inline" set="null" expr="cast &quot;application/x-aim&quot;" line="19" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-aim"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXAim>
	<TextXAudiosoftIntra public="1" get="inline" set="null" expr="cast &quot;text/x-audiosoft-intra&quot;" line="20" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-audiosoft-intra"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXAudiosoftIntra>
	<ApplicationXNaviAnimation public="1" get="inline" set="null" expr="cast &quot;application/x-navi-animation&quot;" line="21" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-navi-animation"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXNaviAnimation>
	<ApplicationXNokia9000CommunicatorAddOnSoftware public="1" get="inline" set="null" expr="cast &quot;application/x-nokia-9000-communicator-add-on-software&quot;" line="22" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-nokia-9000-communicator-add-on-software"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXNokia9000CommunicatorAddOnSoftware>
	<ApplicationMime public="1" get="inline" set="null" expr="cast &quot;application/mime&quot;" line="23" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mime"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationMime>
	<ApplicationArj public="1" get="inline" set="null" expr="cast &quot;application/arj&quot;" line="24" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/arj"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationArj>
	<ImageXJg public="1" get="inline" set="null" expr="cast &quot;image/x-jg&quot;" line="25" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-jg"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXJg>
	<VideoXMsAsf public="1" get="inline" set="null" expr="cast &quot;video/x-ms-asf&quot;" line="26" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-ms-asf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoXMsAsf>
	<TextXAsm public="1" get="inline" set="null" expr="cast &quot;text/x-asm&quot;" line="27" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-asm"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXAsm>
	<TextAsp public="1" get="inline" set="null" expr="cast &quot;text/asp&quot;" line="28" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/asp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextAsp>
	<ApplicationXMplayer2 public="1" get="inline" set="null" expr="cast &quot;application/x-mplayer2&quot;" line="29" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-mplayer2"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXMplayer2>
	<AudioBasic public="1" get="inline" set="null" expr="cast &quot;audio/basic&quot;" line="30" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/basic"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioBasic>
	<ApplicationXTroffMsvideo public="1" get="inline" set="null" expr="cast &quot;application/x-troff-msvideo&quot;" line="31" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-troff-msvideo"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXTroffMsvideo>
	<VideoAvi public="1" get="inline" set="null" expr="cast &quot;video/avi&quot;" line="32" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/avi"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoAvi>
	<VideoMsvideo public="1" get="inline" set="null" expr="cast &quot;video/msvideo&quot;" line="33" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/msvideo"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoMsvideo>
	<VideoXMsvideo public="1" get="inline" set="null" expr="cast &quot;video/x-msvideo&quot;" line="34" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-msvideo"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoXMsvideo>
	<VideoAvsVideo public="1" get="inline" set="null" expr="cast &quot;video/avs-video&quot;" line="35" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/avs-video"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoAvsVideo>
	<ApplicationXBcpio public="1" get="inline" set="null" expr="cast &quot;application/x-bcpio&quot;" line="36" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bcpio"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXBcpio>
	<ApplicationMacBinary public="1" get="inline" set="null" expr="cast &quot;application/mac-binary&quot;" line="37" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mac-binary"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationMacBinary>
	<ApplicationMacbinary public="1" get="inline" set="null" expr="cast &quot;application/macbinary&quot;" line="38" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/macbinary"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationMacbinary>
	<ApplicationXBinary public="1" get="inline" set="null" expr="cast &quot;application/x-binary&quot;" line="39" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-binary"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXBinary>
	<ApplicationXMacbinary public="1" get="inline" set="null" expr="cast &quot;application/x-macbinary&quot;" line="40" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-macbinary"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXMacbinary>
	<ImageBmp public="1" get="inline" set="null" expr="cast &quot;image/bmp&quot;" line="41" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/bmp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageBmp>
	<ImageXWindowsBmp public="1" get="inline" set="null" expr="cast &quot;image/x-windows-bmp&quot;" line="42" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-windows-bmp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXWindowsBmp>
	<ApplicationBook public="1" get="inline" set="null" expr="cast &quot;application/book&quot;" line="43" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/book"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationBook>
	<ApplicationXBzip2 public="1" get="inline" set="null" expr="cast &quot;application/x-bzip2&quot;" line="44" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bzip2"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXBzip2>
	<ApplicationXBsh public="1" get="inline" set="null" expr="cast &quot;application/x-bsh&quot;" line="45" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bsh"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXBsh>
	<ApplicationXBzip public="1" get="inline" set="null" expr="cast &quot;application/x-bzip&quot;" line="46" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bzip"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXBzip>
	<TextPlain public="1" get="inline" set="null" expr="cast &quot;text/plain&quot;" line="47" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/plain"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextPlain>
	<TextXC public="1" get="inline" set="null" expr="cast &quot;text/x-c&quot;" line="48" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-c"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXC>
	<ApplicationVndMsPkiSeccat public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.seccat&quot;" line="49" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.ms-pki.seccat"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndMsPkiSeccat>
	<ApplicationClariscad public="1" get="inline" set="null" expr="cast &quot;application/clariscad&quot;" line="50" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/clariscad"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationClariscad>
	<ApplicationXCocoa public="1" get="inline" set="null" expr="cast &quot;application/x-cocoa&quot;" line="51" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-cocoa"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXCocoa>
	<ApplicationCdf public="1" get="inline" set="null" expr="cast &quot;application/cdf&quot;" line="52" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/cdf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationCdf>
	<ApplicationXCdf public="1" get="inline" set="null" expr="cast &quot;application/x-cdf&quot;" line="53" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-cdf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXCdf>
	<ApplicationXNetcdf public="1" get="inline" set="null" expr="cast &quot;application/x-netcdf&quot;" line="54" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-netcdf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXNetcdf>
	<ApplicationPkixCert public="1" get="inline" set="null" expr="cast &quot;application/pkix-cert&quot;" line="55" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkix-cert"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationPkixCert>
	<ApplicationXX509CaCert public="1" get="inline" set="null" expr="cast &quot;application/x-x509-ca-cert&quot;" line="56" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-x509-ca-cert"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXX509CaCert>
	<ApplicationXChat public="1" get="inline" set="null" expr="cast &quot;application/x-chat&quot;" line="57" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-chat"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXChat>
	<ApplicationJava public="1" get="inline" set="null" expr="cast &quot;application/java&quot;" line="58" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/java"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationJava>
	<ApplicationJavaByteCode public="1" get="inline" set="null" expr="cast &quot;application/java-byte-code&quot;" line="59" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/java-byte-code"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationJavaByteCode>
	<ApplicationXJavaClass public="1" get="inline" set="null" expr="cast &quot;application/x-java-class&quot;" line="60" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-java-class"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXJavaClass>
	<ApplicationXCpio public="1" get="inline" set="null" expr="cast &quot;application/x-cpio&quot;" line="61" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-cpio"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXCpio>
	<ApplicationMacCompactpro public="1" get="inline" set="null" expr="cast &quot;application/mac-compactpro&quot;" line="62" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mac-compactpro"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationMacCompactpro>
	<ApplicationPkcsCrl public="1" get="inline" set="null" expr="cast &quot;application/pkcs-crl&quot;" line="63" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkcs-crl"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationPkcsCrl>
	<ApplicationXCsh public="1" get="inline" set="null" expr="cast &quot;application/x-csh&quot;" line="64" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-csh"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXCsh>
	<TextCss public="1" get="inline" set="null" expr="cast &quot;text/css&quot;" line="65" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/css"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextCss>
	<ApplicationXDirector public="1" get="inline" set="null" expr="cast &quot;application/x-director&quot;" line="66" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-director"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXDirector>
	<ApplicationXDeepv public="1" get="inline" set="null" expr="cast &quot;application/x-deepv&quot;" line="67" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-deepv"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXDeepv>
	<VideoXDv public="1" get="inline" set="null" expr="cast &quot;video/x-dv&quot;" line="68" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-dv"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoXDv>
	<VideoDl public="1" get="inline" set="null" expr="cast &quot;video/dl&quot;" line="69" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/dl"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoDl>
	<ApplicationMsword public="1" get="inline" set="null" expr="cast &quot;application/msword&quot;" line="70" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/msword"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationMsword>
	<ApplicationCommonground public="1" get="inline" set="null" expr="cast &quot;application/commonground&quot;" line="71" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/commonground"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationCommonground>
	<ApplicationDrafting public="1" get="inline" set="null" expr="cast &quot;application/drafting&quot;" line="72" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/drafting"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationDrafting>
	<ApplicationXDvi public="1" get="inline" set="null" expr="cast &quot;application/x-dvi&quot;" line="73" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-dvi"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXDvi>
	<DrawingXDwf public="1" get="inline" set="null" expr="cast &quot;drawing/x-dwf (old)&quot;" line="74" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "drawing/x-dwf (old)"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DrawingXDwf>
	<ApplicationAcad public="1" get="inline" set="null" expr="cast &quot;application/acad&quot;" line="75" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/acad"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationAcad>
	<ApplicationDxf public="1" get="inline" set="null" expr="cast &quot;application/dxf&quot;" line="76" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/dxf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationDxf>
	<TextXScriptElisp public="1" get="inline" set="null" expr="cast &quot;text/x-script.elisp&quot;" line="77" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script.elisp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXScriptElisp>
	<ApplicationXBytecodeElisp public="1" get="inline" set="null" expr="cast &quot;application/x-bytecode.elisp (compiled elisp)&quot;" line="78" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bytecode.elisp (compiled elisp)"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXBytecodeElisp>
	<ApplicationXEnvoy public="1" get="inline" set="null" expr="cast &quot;application/x-envoy&quot;" line="79" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-envoy"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXEnvoy>
	<ApplicationXEsrehber public="1" get="inline" set="null" expr="cast &quot;application/x-esrehber&quot;" line="80" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-esrehber"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXEsrehber>
	<TextXSetext public="1" get="inline" set="null" expr="cast &quot;text/x-setext&quot;" line="81" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-setext"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXSetext>
	<ApplicationEnvoy public="1" get="inline" set="null" expr="cast &quot;application/envoy&quot;" line="82" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/envoy"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationEnvoy>
	<TextXFortran public="1" get="inline" set="null" expr="cast &quot;text/x-fortran&quot;" line="83" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-fortran"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXFortran>
	<ApplicationVndFdf public="1" get="inline" set="null" expr="cast &quot;application/vnd.fdf&quot;" line="84" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.fdf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndFdf>
	<ImageFif public="1" get="inline" set="null" expr="cast &quot;image/fif&quot;" line="85" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/fif"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageFif>
	<VideoFli public="1" get="inline" set="null" expr="cast &quot;video/fli&quot;" line="86" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/fli"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoFli>
	<ImageFlorian public="1" get="inline" set="null" expr="cast &quot;image/florian&quot;" line="87" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/florian"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageFlorian>
	<TextVndFmiFlexstor public="1" get="inline" set="null" expr="cast &quot;text/vnd.fmi.flexstor&quot;" line="88" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/vnd.fmi.flexstor"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextVndFmiFlexstor>
	<VideoXAtomic3dFeature public="1" get="inline" set="null" expr="cast &quot;video/x-atomic3d-feature&quot;" line="89" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-atomic3d-feature"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoXAtomic3dFeature>
	<ImageVndFpx public="1" get="inline" set="null" expr="cast &quot;image/vnd.fpx&quot;" line="90" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.fpx"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageVndFpx>
	<ApplicationFreeloader public="1" get="inline" set="null" expr="cast &quot;application/freeloader&quot;" line="91" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/freeloader"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationFreeloader>
	<AudioMake public="1" get="inline" set="null" expr="cast &quot;audio/make&quot;" line="92" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/make"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioMake>
	<ImageG3fax public="1" get="inline" set="null" expr="cast &quot;image/g3fax&quot;" line="93" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/g3fax"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageG3fax>
	<ImageGif public="1" get="inline" set="null" expr="cast &quot;image/gif&quot;" line="94" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/gif"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageGif>
	<VideoGl public="1" get="inline" set="null" expr="cast &quot;video/gl&quot;" line="95" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/gl"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoGl>
	<AudioXGsm public="1" get="inline" set="null" expr="cast &quot;audio/x-gsm&quot;" line="96" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-gsm"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXGsm>
	<ApplicationXGsp public="1" get="inline" set="null" expr="cast &quot;application/x-gsp&quot;" line="97" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-gsp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXGsp>
	<ApplicationXGss public="1" get="inline" set="null" expr="cast &quot;application/x-gss&quot;" line="98" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-gss"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXGss>
	<ApplicationXGtar public="1" get="inline" set="null" expr="cast &quot;application/x-gtar&quot;" line="99" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-gtar"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXGtar>
	<ApplicationXCompressed public="1" get="inline" set="null" expr="cast &quot;application/x-compressed&quot;" line="100" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-compressed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXCompressed>
	<ApplicationXGzip public="1" get="inline" set="null" expr="cast &quot;application/x-gzip&quot;" line="101" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-gzip"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXGzip>
	<ApplicationXHdf public="1" get="inline" set="null" expr="cast &quot;application/x-hdf&quot;" line="102" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-hdf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXHdf>
	<ApplicationXHelpfile public="1" get="inline" set="null" expr="cast &quot;application/x-helpfile&quot;" line="103" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-helpfile"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXHelpfile>
	<TextXScript public="1" get="inline" set="null" expr="cast &quot;text/x-script&quot;" line="104" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXScript>
	<ApplicationHlp public="1" get="inline" set="null" expr="cast &quot;application/hlp&quot;" line="105" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/hlp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationHlp>
	<ApplicationVndHpHpgl public="1" get="inline" set="null" expr="cast &quot;application/vnd.hp-hpgl&quot;" line="106" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.hp-hpgl"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndHpHpgl>
	<ApplicationBinhex public="1" get="inline" set="null" expr="cast &quot;application/binhex&quot;" line="107" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/binhex"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationBinhex>
	<ApplicationHta public="1" get="inline" set="null" expr="cast &quot;application/hta&quot;" line="108" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/hta"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationHta>
	<TextXComponent public="1" get="inline" set="null" expr="cast &quot;text/x-component&quot;" line="109" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-component"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXComponent>
	<TextWebviewhtml public="1" get="inline" set="null" expr="cast &quot;text/webviewhtml&quot;" line="110" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/webviewhtml"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextWebviewhtml>
	<XConferenceXCooltalk public="1" get="inline" set="null" expr="cast &quot;x-conference/x-cooltalk&quot;" line="111" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "x-conference/x-cooltalk"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XConferenceXCooltalk>
	<ImageXIcon public="1" get="inline" set="null" expr="cast &quot;image/x-icon&quot;" line="112" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-icon"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXIcon>
	<ImageIef public="1" get="inline" set="null" expr="cast &quot;image/ief&quot;" line="113" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/ief"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageIef>
	<ApplicationIges public="1" get="inline" set="null" expr="cast &quot;application/iges&quot;" line="114" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/iges"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationIges>
	<ApplicationXIma public="1" get="inline" set="null" expr="cast &quot;application/x-ima&quot;" line="115" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-ima"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXIma>
	<ApplicationXHttpdImap public="1" get="inline" set="null" expr="cast &quot;application/x-httpd-imap&quot;" line="116" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-httpd-imap"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXHttpdImap>
	<ApplicationInf public="1" get="inline" set="null" expr="cast &quot;application/inf&quot;" line="117" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/inf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationInf>
	<ApplicationXInternettSignup public="1" get="inline" set="null" expr="cast &quot;application/x-internett-signup&quot;" line="118" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-internett-signup"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXInternettSignup>
	<ApplicationXIp2 public="1" get="inline" set="null" expr="cast &quot;application/x-ip2&quot;" line="119" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-ip2"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXIp2>
	<VideoXIsvideo public="1" get="inline" set="null" expr="cast &quot;video/x-isvideo&quot;" line="120" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-isvideo"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoXIsvideo>
	<AudioIt public="1" get="inline" set="null" expr="cast &quot;audio/it&quot;" line="121" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/it"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioIt>
	<ApplicationXInventor public="1" get="inline" set="null" expr="cast &quot;application/x-inventor&quot;" line="122" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-inventor"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXInventor>
	<IWorldIVrml public="1" get="inline" set="null" expr="cast &quot;i-world/i-vrml&quot;" line="123" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "i-world/i-vrml"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IWorldIVrml>
	<ApplicationXLivescreen public="1" get="inline" set="null" expr="cast &quot;application/x-livescreen&quot;" line="124" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-livescreen"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXLivescreen>
	<AudioXJam public="1" get="inline" set="null" expr="cast &quot;audio/x-jam&quot;" line="125" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-jam"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXJam>
	<ApplicationXJavaCommerce public="1" get="inline" set="null" expr="cast &quot;application/x-java-commerce&quot;" line="126" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-java-commerce"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXJavaCommerce>
	<ImageJpeg public="1" get="inline" set="null" expr="cast &quot;image/jpeg&quot;" line="127" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/jpeg"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageJpeg>
	<ImageXJps public="1" get="inline" set="null" expr="cast &quot;image/x-jps&quot;" line="128" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-jps"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXJps>
	<TextJavascript public="1" get="inline" set="null" expr="cast &quot;text/javascript&quot;" line="129" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/javascript"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextJavascript>
	<ApplicationJson public="1" get="inline" set="null" expr="cast &quot;application/json&quot;" line="130" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/json"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationJson>
	<ApplicationJavascript public="1" get="inline" set="null" expr="cast &quot;application/javascript&quot;" line="131" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/javascript"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationJavascript>
	<ImageJutvision public="1" get="inline" set="null" expr="cast &quot;image/jutvision&quot;" line="132" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/jutvision"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageJutvision>
	<AudioMidi public="1" get="inline" set="null" expr="cast &quot;audio/midi&quot;" line="133" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/midi"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioMidi>
	<ApplicationXKsh public="1" get="inline" set="null" expr="cast &quot;application/x-ksh&quot;" line="134" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-ksh"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXKsh>
	<AudioNspaudio public="1" get="inline" set="null" expr="cast &quot;audio/nspaudio&quot;" line="135" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/nspaudio"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioNspaudio>
	<AudioXLiveaudio public="1" get="inline" set="null" expr="cast &quot;audio/x-liveaudio&quot;" line="136" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-liveaudio"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXLiveaudio>
	<ApplicationXLatex public="1" get="inline" set="null" expr="cast &quot;application/x-latex&quot;" line="137" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-latex"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXLatex>
	<ApplicationXLisp public="1" get="inline" set="null" expr="cast &quot;application/x-lisp&quot;" line="138" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-lisp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXLisp>
	<TextXLaAsf public="1" get="inline" set="null" expr="cast &quot;text/x-la-asf&quot;" line="139" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-la-asf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXLaAsf>
	<ApplicationLzx public="1" get="inline" set="null" expr="cast &quot;application/lzx&quot;" line="140" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/lzx"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationLzx>
	<VideoMpeg public="1" get="inline" set="null" expr="cast &quot;video/mpeg&quot;" line="141" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/mpeg"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoMpeg>
	<AudioMpeg public="1" get="inline" set="null" expr="cast &quot;audio/mpeg&quot;" line="142" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/mpeg"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioMpeg>
	<AudioXMpequrl public="1" get="inline" set="null" expr="cast &quot;audio/x-mpequrl&quot;" line="143" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-mpequrl"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXMpequrl>
	<ApplicationXTroffMan public="1" get="inline" set="null" expr="cast &quot;application/x-troff-man&quot;" line="144" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-troff-man"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXTroffMan>
	<ApplicationXNavimap public="1" get="inline" set="null" expr="cast &quot;application/x-navimap&quot;" line="145" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-navimap"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXNavimap>
	<ApplicationMbedlet public="1" get="inline" set="null" expr="cast &quot;application/mbedlet&quot;" line="146" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mbedlet"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationMbedlet>
	<ApplicationXMagicCapPackage10 public="1" get="inline" set="null" expr="cast &quot;application/x-magic-cap-package-1.0&quot;" line="147" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-magic-cap-package-1.0"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXMagicCapPackage10>
	<ApplicationMcad public="1" get="inline" set="null" expr="cast &quot;application/mcad&quot;" line="148" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mcad"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationMcad>
	<ImageVasa public="1" get="inline" set="null" expr="cast &quot;image/vasa&quot;" line="149" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vasa"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageVasa>
	<ApplicationNetmc public="1" get="inline" set="null" expr="cast &quot;application/netmc&quot;" line="150" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/netmc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationNetmc>
	<ApplicationXTroffMe public="1" get="inline" set="null" expr="cast &quot;application/x-troff-me&quot;" line="151" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-troff-me"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXTroffMe>
	<MessageRfc822 public="1" get="inline" set="null" expr="cast &quot;message/rfc822&quot;" line="152" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "message/rfc822"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MessageRfc822>
	<ApplicationXMif public="1" get="inline" set="null" expr="cast &quot;application/x-mif&quot;" line="153" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-mif"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXMif>
	<WwwMime public="1" get="inline" set="null" expr="cast &quot;www/mime&quot;" line="154" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "www/mime"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WwwMime>
	<AudioXVndAudioexplosionMjuicemediafile public="1" get="inline" set="null" expr="cast &quot;audio/x-vnd.audioexplosion.mjuicemediafile&quot;" line="155" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-vnd.audioexplosion.mjuicemediafile"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXVndAudioexplosionMjuicemediafile>
	<VideoXMotionJpeg public="1" get="inline" set="null" expr="cast &quot;video/x-motion-jpeg&quot;" line="156" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-motion-jpeg"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoXMotionJpeg>
	<ApplicationBase64 public="1" get="inline" set="null" expr="cast &quot;application/base64&quot;" line="157" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/base64"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationBase64>
	<AudioMod public="1" get="inline" set="null" expr="cast &quot;audio/mod&quot;" line="158" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/mod"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioMod>
	<VideoQuicktime public="1" get="inline" set="null" expr="cast &quot;video/quicktime&quot;" line="159" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/quicktime"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoQuicktime>
	<VideoXSgiMovie public="1" get="inline" set="null" expr="cast &quot;video/x-sgi-movie&quot;" line="160" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-sgi-movie"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoXSgiMovie>
	<AudioMpeg3 public="1" get="inline" set="null" expr="cast &quot;audio/mpeg3&quot;" line="161" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/mpeg3"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioMpeg3>
	<ApplicationXProject public="1" get="inline" set="null" expr="cast &quot;application/x-project&quot;" line="162" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-project"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXProject>
	<ApplicationVndMsProject public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-project&quot;" line="163" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.ms-project"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndMsProject>
	<ApplicationMarc public="1" get="inline" set="null" expr="cast &quot;application/marc&quot;" line="164" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/marc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationMarc>
	<ApplicationXTroffMs public="1" get="inline" set="null" expr="cast &quot;application/x-troff-ms&quot;" line="165" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-troff-ms"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXTroffMs>
	<ApplicationXVndAudioexplosionMzz public="1" get="inline" set="null" expr="cast &quot;application/x-vnd.audioexplosion.mzz&quot;" line="166" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-vnd.audioexplosion.mzz"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXVndAudioexplosionMzz>
	<ImageNaplps public="1" get="inline" set="null" expr="cast &quot;image/naplps&quot;" line="167" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/naplps"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageNaplps>
	<ApplicationVndNokiaConfigurationMessage public="1" get="inline" set="null" expr="cast &quot;application/vnd.nokia.configuration-message&quot;" line="168" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.nokia.configuration-message"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndNokiaConfigurationMessage>
	<ImageXNiff public="1" get="inline" set="null" expr="cast &quot;image/x-niff&quot;" line="169" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-niff"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXNiff>
	<ApplicationXMixTransfer public="1" get="inline" set="null" expr="cast &quot;application/x-mix-transfer&quot;" line="170" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-mix-transfer"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXMixTransfer>
	<ApplicationXConference public="1" get="inline" set="null" expr="cast &quot;application/x-conference&quot;" line="171" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-conference"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXConference>
	<ApplicationXNavidoc public="1" get="inline" set="null" expr="cast &quot;application/x-navidoc&quot;" line="172" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-navidoc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXNavidoc>
	<ApplicationOda public="1" get="inline" set="null" expr="cast &quot;application/oda&quot;" line="173" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/oda"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationOda>
	<ApplicationXOmc public="1" get="inline" set="null" expr="cast &quot;application/x-omc&quot;" line="174" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-omc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXOmc>
	<ApplicationXOmcdatamaker public="1" get="inline" set="null" expr="cast &quot;application/x-omcdatamaker&quot;" line="175" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-omcdatamaker"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXOmcdatamaker>
	<ApplicationXOmcregerator public="1" get="inline" set="null" expr="cast &quot;application/x-omcregerator&quot;" line="176" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-omcregerator"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXOmcregerator>
	<TextXPascal public="1" get="inline" set="null" expr="cast &quot;text/x-pascal&quot;" line="177" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-pascal"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXPascal>
	<ApplicationPkcs10 public="1" get="inline" set="null" expr="cast &quot;application/pkcs10&quot;" line="178" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkcs10"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationPkcs10>
	<ApplicationPkcs12 public="1" get="inline" set="null" expr="cast &quot;application/pkcs-12&quot;" line="179" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkcs-12"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationPkcs12>
	<ApplicationXPkcs7Signature public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-signature&quot;" line="180" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-pkcs7-signature"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXPkcs7Signature>
	<ApplicationPkcs7Mime public="1" get="inline" set="null" expr="cast &quot;application/pkcs7-mime&quot;" line="181" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkcs7-mime"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationPkcs7Mime>
	<ApplicationXPkcs7Certreqresp public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-certreqresp&quot;" line="182" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-pkcs7-certreqresp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXPkcs7Certreqresp>
	<ApplicationPkcs7Signature public="1" get="inline" set="null" expr="cast &quot;application/pkcs7-signature&quot;" line="183" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pkcs7-signature"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationPkcs7Signature>
	<ApplicationPro_eng public="1" get="inline" set="null" expr="cast &quot;application/pro_eng&quot;" line="184" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pro_eng"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationPro_eng>
	<TextPascal public="1" get="inline" set="null" expr="cast &quot;text/pascal&quot;" line="185" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/pascal"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextPascal>
	<ImageXPortableBitmap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-bitmap&quot;" line="186" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-portable-bitmap"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXPortableBitmap>
	<ApplicationVndHpPcl public="1" get="inline" set="null" expr="cast &quot;application/vnd.hp-pcl&quot;" line="187" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.hp-pcl"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndHpPcl>
	<ImageXPict public="1" get="inline" set="null" expr="cast &quot;image/x-pict&quot;" line="188" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-pict"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXPict>
	<ImageXPcx public="1" get="inline" set="null" expr="cast &quot;image/x-pcx&quot;" line="189" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-pcx"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXPcx>
	<ChemicalXPdb public="1" get="inline" set="null" expr="cast &quot;chemical/x-pdb&quot;" line="190" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "chemical/x-pdb"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ChemicalXPdb>
	<ApplicationPdf public="1" get="inline" set="null" expr="cast &quot;application/pdf&quot;" line="191" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/pdf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationPdf>
	<ImageXPortableGraymap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-graymap&quot;" line="192" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-portable-graymap"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXPortableGraymap>
	<ImagePict public="1" get="inline" set="null" expr="cast &quot;image/pict&quot;" line="193" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/pict"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImagePict>
	<ApplicationXNewtonCompatiblePkg public="1" get="inline" set="null" expr="cast &quot;application/x-newton-compatible-pkg&quot;" line="194" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-newton-compatible-pkg"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXNewtonCompatiblePkg>
	<ApplicationVndMsPkiPko public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.pko&quot;" line="195" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.ms-pki.pko"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndMsPkiPko>
	<ApplicationXPixclscript public="1" get="inline" set="null" expr="cast &quot;application/x-pixclscript&quot;" line="196" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-pixclscript"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXPixclscript>
	<ImageXXpixmap public="1" get="inline" set="null" expr="cast &quot;image/x-xpixmap&quot;" line="197" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-xpixmap"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXXpixmap>
	<ApplicationXPagemaker public="1" get="inline" set="null" expr="cast &quot;application/x-pagemaker&quot;" line="198" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-pagemaker"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXPagemaker>
	<ImagePng public="1" get="inline" set="null" expr="cast &quot;image/png&quot;" line="199" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/png"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImagePng>
	<ApplicationXPortableAnymap public="1" get="inline" set="null" expr="cast &quot;application/x-portable-anymap&quot;" line="200" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-portable-anymap"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXPortableAnymap>
	<ApplicationMspowerpoint public="1" get="inline" set="null" expr="cast &quot;application/mspowerpoint&quot;" line="201" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mspowerpoint"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationMspowerpoint>
	<ModelXPov public="1" get="inline" set="null" expr="cast &quot;model/x-pov&quot;" line="202" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "model/x-pov"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ModelXPov>
	<ApplicationVndMsPowerpoint public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-powerpoint&quot;" line="203" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.ms-powerpoint"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndMsPowerpoint>
	<ImageXPortablePixmap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-pixmap&quot;" line="204" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-portable-pixmap"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXPortablePixmap>
	<ApplicationXFreelance public="1" get="inline" set="null" expr="cast &quot;application/x-freelance&quot;" line="205" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-freelance"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXFreelance>
	<PaleovuXPv public="1" get="inline" set="null" expr="cast &quot;paleovu/x-pv&quot;" line="206" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "paleovu/x-pv"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PaleovuXPv>
	<TextXScriptPhyton public="1" get="inline" set="null" expr="cast &quot;text/x-script.phyton&quot;" line="207" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script.phyton"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXScriptPhyton>
	<ApplicationXBytecodePython public="1" get="inline" set="null" expr="cast &quot;application/x-bytecode.python&quot;" line="208" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-bytecode.python"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXBytecodePython>
	<AudioVndQcelp public="1" get="inline" set="null" expr="cast &quot;audio/vnd.qcelp&quot;" line="209" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/vnd.qcelp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioVndQcelp>
	<ImageXQuicktime public="1" get="inline" set="null" expr="cast &quot;image/x-quicktime&quot;" line="210" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-quicktime"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXQuicktime>
	<VideoXQtc public="1" get="inline" set="null" expr="cast &quot;video/x-qtc&quot;" line="211" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-qtc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoXQtc>
	<AudioXPnRealaudio public="1" get="inline" set="null" expr="cast &quot;audio/x-pn-realaudio&quot;" line="212" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-pn-realaudio"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXPnRealaudio>
	<ApplicationXCmuRaster public="1" get="inline" set="null" expr="cast &quot;application/x-cmu-raster&quot;" line="213" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-cmu-raster"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXCmuRaster>
	<ImageCmuRaster public="1" get="inline" set="null" expr="cast &quot;image/cmu-raster&quot;" line="214" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/cmu-raster"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageCmuRaster>
	<TextXScriptRexx public="1" get="inline" set="null" expr="cast &quot;text/x-script.rexx&quot;" line="215" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script.rexx"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXScriptRexx>
	<ImageVndRnRealflash public="1" get="inline" set="null" expr="cast &quot;image/vnd.rn-realflash&quot;" line="216" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.rn-realflash"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageVndRnRealflash>
	<ImageXRgb public="1" get="inline" set="null" expr="cast &quot;image/x-rgb&quot;" line="217" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-rgb"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXRgb>
	<ApplicationVndRnRealmedia public="1" get="inline" set="null" expr="cast &quot;application/vnd.rn-realmedia&quot;" line="218" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.rn-realmedia"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndRnRealmedia>
	<AudioMid public="1" get="inline" set="null" expr="cast &quot;audio/mid&quot;" line="219" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/mid"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioMid>
	<ApplicationRingingTones public="1" get="inline" set="null" expr="cast &quot;application/ringing-tones&quot;" line="220" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/ringing-tones"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationRingingTones>
	<ApplicationVndRnRealplayer public="1" get="inline" set="null" expr="cast &quot;application/vnd.rn-realplayer&quot;" line="221" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.rn-realplayer"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndRnRealplayer>
	<ApplicationXTroff public="1" get="inline" set="null" expr="cast &quot;application/x-troff&quot;" line="222" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-troff"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXTroff>
	<ImageVndRnRealpix public="1" get="inline" set="null" expr="cast &quot;image/vnd.rn-realpix&quot;" line="223" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.rn-realpix"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageVndRnRealpix>
	<AudioXPnRealaudioPlugin public="1" get="inline" set="null" expr="cast &quot;audio/x-pn-realaudio-plugin&quot;" line="224" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-pn-realaudio-plugin"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXPnRealaudioPlugin>
	<TextRichtext public="1" get="inline" set="null" expr="cast &quot;text/richtext&quot;" line="225" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/richtext"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextRichtext>
	<ApplicationRtf public="1" get="inline" set="null" expr="cast &quot;application/rtf&quot;" line="226" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/rtf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationRtf>
	<VideoVndRnRealvideo public="1" get="inline" set="null" expr="cast &quot;video/vnd.rn-realvideo&quot;" line="227" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/vnd.rn-realvideo"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoVndRnRealvideo>
	<AudioS3m public="1" get="inline" set="null" expr="cast &quot;audio/s3m&quot;" line="228" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/s3m"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioS3m>
	<ApplicationXTbook public="1" get="inline" set="null" expr="cast &quot;application/x-tbook&quot;" line="229" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-tbook"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXTbook>
	<ApplicationXLotusscreencam public="1" get="inline" set="null" expr="cast &quot;application/x-lotusscreencam&quot;" line="230" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-lotusscreencam"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXLotusscreencam>
	<ApplicationSdp public="1" get="inline" set="null" expr="cast &quot;application/sdp&quot;" line="231" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/sdp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationSdp>
	<ApplicationSounder public="1" get="inline" set="null" expr="cast &quot;application/sounder&quot;" line="232" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/sounder"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationSounder>
	<ApplicationSea public="1" get="inline" set="null" expr="cast &quot;application/sea&quot;" line="233" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/sea"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationSea>
	<ApplicationSet public="1" get="inline" set="null" expr="cast &quot;application/set&quot;" line="234" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/set"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationSet>
	<AudioXPsid public="1" get="inline" set="null" expr="cast &quot;audio/x-psid&quot;" line="235" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-psid"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXPsid>
	<ApplicationXSit public="1" get="inline" set="null" expr="cast &quot;application/x-sit&quot;" line="236" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-sit"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXSit>
	<ApplicationXKoan public="1" get="inline" set="null" expr="cast &quot;application/x-koan&quot;" line="237" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-koan"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXKoan>
	<ApplicationXSeelogo public="1" get="inline" set="null" expr="cast &quot;application/x-seelogo&quot;" line="238" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-seelogo"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXSeelogo>
	<ApplicationSmil public="1" get="inline" set="null" expr="cast &quot;application/smil&quot;" line="239" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/smil"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationSmil>
	<ApplicationSolids public="1" get="inline" set="null" expr="cast &quot;application/solids&quot;" line="240" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/solids"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationSolids>
	<ApplicationXPkcs7Certificates public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-certificates&quot;" line="241" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-pkcs7-certificates"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXPkcs7Certificates>
	<ApplicationFuturesplash public="1" get="inline" set="null" expr="cast &quot;application/futuresplash&quot;" line="242" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/futuresplash"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationFuturesplash>
	<ApplicationXSprite public="1" get="inline" set="null" expr="cast &quot;application/x-sprite&quot;" line="243" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-sprite"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXSprite>
	<ApplicationXWaisSource public="1" get="inline" set="null" expr="cast &quot;application/x-wais-source&quot;" line="244" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-wais-source"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXWaisSource>
	<TextXServerParsedHtml public="1" get="inline" set="null" expr="cast &quot;text/x-server-parsed-html&quot;" line="245" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-server-parsed-html"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXServerParsedHtml>
	<ApplicationStreamingmedia public="1" get="inline" set="null" expr="cast &quot;application/streamingmedia&quot;" line="246" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/streamingmedia"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationStreamingmedia>
	<ApplicationVndMsPkiCertstore public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.certstore&quot;" line="247" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.ms-pki.certstore"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndMsPkiCertstore>
	<ApplicationStep public="1" get="inline" set="null" expr="cast &quot;application/step&quot;" line="248" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/step"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationStep>
	<ApplicationSla public="1" get="inline" set="null" expr="cast &quot;application/sla&quot;" line="249" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/sla"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationSla>
	<ApplicationXSv4cpio public="1" get="inline" set="null" expr="cast &quot;application/x-sv4cpio&quot;" line="250" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-sv4cpio"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXSv4cpio>
	<ApplicationXSv4crc public="1" get="inline" set="null" expr="cast &quot;application/x-sv4crc&quot;" line="251" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-sv4crc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXSv4crc>
	<ImageVndDwg public="1" get="inline" set="null" expr="cast &quot;image/vnd.dwg&quot;" line="252" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.dwg"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageVndDwg>
	<ApplicationXWorld public="1" get="inline" set="null" expr="cast &quot;application/x-world&quot;" line="253" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-world"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXWorld>
	<ApplicationXShockwaveFlash public="1" get="inline" set="null" expr="cast &quot;application/x-shockwave-flash&quot;" line="254" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-shockwave-flash"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXShockwaveFlash>
	<TextXSpeech public="1" get="inline" set="null" expr="cast &quot;text/x-speech&quot;" line="255" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-speech"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXSpeech>
	<ApplicationXTar public="1" get="inline" set="null" expr="cast &quot;application/x-tar&quot;" line="256" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-tar"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXTar>
	<ApplicationToolbook public="1" get="inline" set="null" expr="cast &quot;application/toolbook&quot;" line="257" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/toolbook"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationToolbook>
	<ApplicationXTcl public="1" get="inline" set="null" expr="cast &quot;application/x-tcl&quot;" line="258" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-tcl"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXTcl>
	<TextXScriptTcsh public="1" get="inline" set="null" expr="cast &quot;text/x-script.tcsh&quot;" line="259" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script.tcsh"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXScriptTcsh>
	<ApplicationXTex public="1" get="inline" set="null" expr="cast &quot;application/x-tex&quot;" line="260" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-tex"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXTex>
	<ApplicationXTexinfo public="1" get="inline" set="null" expr="cast &quot;application/x-texinfo&quot;" line="261" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-texinfo"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXTexinfo>
	<ApplicationGnutar public="1" get="inline" set="null" expr="cast &quot;application/gnutar&quot;" line="262" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/gnutar"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationGnutar>
	<ImageTiff public="1" get="inline" set="null" expr="cast &quot;image/tiff&quot;" line="263" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/tiff"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageTiff>
	<AudioTspAudio public="1" get="inline" set="null" expr="cast &quot;audio/tsp-audio&quot;" line="264" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/tsp-audio"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioTspAudio>
	<ApplicationDsptype public="1" get="inline" set="null" expr="cast &quot;application/dsptype&quot;" line="265" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/dsptype"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationDsptype>
	<TextTabSeparatedValues public="1" get="inline" set="null" expr="cast &quot;text/tab-separated-values&quot;" line="266" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/tab-separated-values"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextTabSeparatedValues>
	<TextXUil public="1" get="inline" set="null" expr="cast &quot;text/x-uil&quot;" line="267" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-uil"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXUil>
	<TextUriList public="1" get="inline" set="null" expr="cast &quot;text/uri-list&quot;" line="268" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/uri-list"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextUriList>
	<ApplicationIDeas public="1" get="inline" set="null" expr="cast &quot;application/i-deas&quot;" line="269" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/i-deas"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationIDeas>
	<ApplicationXUstar public="1" get="inline" set="null" expr="cast &quot;application/x-ustar&quot;" line="270" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-ustar"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXUstar>
	<TextXUuencode public="1" get="inline" set="null" expr="cast &quot;text/x-uuencode&quot;" line="271" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-uuencode"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXUuencode>
	<ApplicationXCdlink public="1" get="inline" set="null" expr="cast &quot;application/x-cdlink&quot;" line="272" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-cdlink"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXCdlink>
	<TextXVcalendar public="1" get="inline" set="null" expr="cast &quot;text/x-vcalendar&quot;" line="273" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-vcalendar"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXVcalendar>
	<ApplicationVda public="1" get="inline" set="null" expr="cast &quot;application/vda&quot;" line="274" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vda"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVda>
	<VideoVdo public="1" get="inline" set="null" expr="cast &quot;video/vdo&quot;" line="275" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/vdo"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoVdo>
	<ApplicationGroupwise public="1" get="inline" set="null" expr="cast &quot;application/groupwise&quot;" line="276" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/groupwise"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationGroupwise>
	<VideoVivo public="1" get="inline" set="null" expr="cast &quot;video/vivo&quot;" line="277" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/vivo"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoVivo>
	<ApplicationVocaltecMediaDesc public="1" get="inline" set="null" expr="cast &quot;application/vocaltec-media-desc&quot;" line="278" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vocaltec-media-desc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVocaltecMediaDesc>
	<ApplicationVocaltecMediaFile public="1" get="inline" set="null" expr="cast &quot;application/vocaltec-media-file&quot;" line="279" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vocaltec-media-file"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVocaltecMediaFile>
	<AudioVoc public="1" get="inline" set="null" expr="cast &quot;audio/voc&quot;" line="280" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/voc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioVoc>
	<VideoVosaic public="1" get="inline" set="null" expr="cast &quot;video/vosaic&quot;" line="281" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/vosaic"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoVosaic>
	<AudioVoxware public="1" get="inline" set="null" expr="cast &quot;audio/voxware&quot;" line="282" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/voxware"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioVoxware>
	<AudioXTwinvqPlugin public="1" get="inline" set="null" expr="cast &quot;audio/x-twinvq-plugin&quot;" line="283" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-twinvq-plugin"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXTwinvqPlugin>
	<AudioXTwinvq public="1" get="inline" set="null" expr="cast &quot;audio/x-twinvq&quot;" line="284" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/x-twinvq"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXTwinvq>
	<ApplicationXVrml public="1" get="inline" set="null" expr="cast &quot;application/x-vrml&quot;" line="285" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-vrml"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXVrml>
	<XWorldXVrt public="1" get="inline" set="null" expr="cast &quot;x-world/x-vrt&quot;" line="286" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "x-world/x-vrt"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XWorldXVrt>
	<ApplicationXVisio public="1" get="inline" set="null" expr="cast &quot;application/x-visio&quot;" line="287" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-visio"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXVisio>
	<ApplicationWordperfect60 public="1" get="inline" set="null" expr="cast &quot;application/wordperfect6.0&quot;" line="288" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/wordperfect6.0"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationWordperfect60>
	<ApplicationWordperfect61 public="1" get="inline" set="null" expr="cast &quot;application/wordperfect6.1&quot;" line="289" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/wordperfect6.1"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationWordperfect61>
	<AudioWav public="1" get="inline" set="null" expr="cast &quot;audio/wav&quot;" line="290" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/wav"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioWav>
	<ApplicationXQpro public="1" get="inline" set="null" expr="cast &quot;application/x-qpro&quot;" line="291" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-qpro"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXQpro>
	<ImageVndWapWbmp public="1" get="inline" set="null" expr="cast &quot;image/vnd.wap.wbmp&quot;" line="292" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.wap.wbmp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageVndWapWbmp>
	<ApplicationVndXara public="1" get="inline" set="null" expr="cast &quot;application/vnd.xara&quot;" line="293" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.xara"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndXara>
	<ImageWebp public="1" get="inline" set="null" expr="cast &quot;image/webp&quot;" line="294" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/webp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageWebp>
	<ApplicationX123 public="1" get="inline" set="null" expr="cast &quot;application/x-123&quot;" line="295" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-123"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationX123>
	<WindowsMetafile public="1" get="inline" set="null" expr="cast &quot;windows/metafile&quot;" line="296" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "windows/metafile"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WindowsMetafile>
	<TextVndWapWml public="1" get="inline" set="null" expr="cast &quot;text/vnd.wap.wml&quot;" line="297" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/vnd.wap.wml"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextVndWapWml>
	<ApplicationVndWapWmlc public="1" get="inline" set="null" expr="cast &quot;application/vnd.wap.wmlc&quot;" line="298" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.wap.wmlc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndWapWmlc>
	<TextVndWapWmlscript public="1" get="inline" set="null" expr="cast &quot;text/vnd.wap.wmlscript&quot;" line="299" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/vnd.wap.wmlscript"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextVndWapWmlscript>
	<ApplicationVndWapWmlscriptc public="1" get="inline" set="null" expr="cast &quot;application/vnd.wap.wmlscriptc&quot;" line="300" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/vnd.wap.wmlscriptc"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationVndWapWmlscriptc>
	<ApplicationWordperfect public="1" get="inline" set="null" expr="cast &quot;application/wordperfect&quot;" line="301" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/wordperfect"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationWordperfect>
	<ApplicationXLotus public="1" get="inline" set="null" expr="cast &quot;application/x-lotus&quot;" line="302" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-lotus"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXLotus>
	<ApplicationMswrite public="1" get="inline" set="null" expr="cast &quot;application/mswrite&quot;" line="303" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/mswrite"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationMswrite>
	<ModelVrml public="1" get="inline" set="null" expr="cast &quot;model/vrml&quot;" line="304" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "model/vrml"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ModelVrml>
	<TextScriplet public="1" get="inline" set="null" expr="cast &quot;text/scriplet&quot;" line="305" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/scriplet"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextScriplet>
	<ApplicationXWintalk public="1" get="inline" set="null" expr="cast &quot;application/x-wintalk&quot;" line="306" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-wintalk"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXWintalk>
	<ImageXXbitmap public="1" get="inline" set="null" expr="cast &quot;image/x-xbitmap&quot;" line="307" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-xbitmap"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXXbitmap>
	<VideoXAmtDemorun public="1" get="inline" set="null" expr="cast &quot;video/x-amt-demorun&quot;" line="308" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-amt-demorun"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoXAmtDemorun>
	<XglDrawing public="1" get="inline" set="null" expr="cast &quot;xgl/drawing&quot;" line="309" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "xgl/drawing"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XglDrawing>
	<ImageVndXiff public="1" get="inline" set="null" expr="cast &quot;image/vnd.xiff&quot;" line="310" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/vnd.xiff"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageVndXiff>
	<ApplicationExcel public="1" get="inline" set="null" expr="cast &quot;application/excel&quot;" line="311" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/excel"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationExcel>
	<AudioXm public="1" get="inline" set="null" expr="cast &quot;audio/xm&quot;" line="312" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "audio/xm"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AudioXm>
	<ApplicationXml public="1" get="inline" set="null" expr="cast &quot;application/xml&quot;" line="313" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/xml"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXml>
	<XglMovie public="1" get="inline" set="null" expr="cast &quot;xgl/movie&quot;" line="314" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "xgl/movie"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XglMovie>
	<ApplicationXVndLsXpix public="1" get="inline" set="null" expr="cast &quot;application/x-vnd.ls-xpix&quot;" line="315" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-vnd.ls-xpix"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXVndLsXpix>
	<VideoXAmtShowrun public="1" get="inline" set="null" expr="cast &quot;video/x-amt-showrun&quot;" line="316" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "video/x-amt-showrun"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VideoXAmtShowrun>
	<ImageXXwd public="1" get="inline" set="null" expr="cast &quot;image/x-xwd&quot;" line="317" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "image/x-xwd"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ImageXXwd>
	<ApplicationXCompress public="1" get="inline" set="null" expr="cast &quot;application/x-compress&quot;" line="318" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "application/x-compress"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ApplicationXCompress>
	<MultipartXZip public="1" get="inline" set="null" expr="cast &quot;multipart/x-zip&quot;" line="319" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "multipart/x-zip"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MultipartXZip>
	<TextXScriptZsh public="1" get="inline" set="null" expr="cast &quot;text/x-script.zsh&quot;" line="320" static="1">
		<x path="haxe.io.Mime"/>
		<meta>
			<m n=":value"><e>cast "text/x-script.zsh"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextXScriptZsh>
	<meta>
		<m n=":nativeGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.io._Mime.Mime_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/io/Mime.hx" private="1" module="haxe.io.Mime" extern="1">
		<XWorldX3dmf public="1" get="inline" set="null" expr="cast &quot;x-world/x-3dmf&quot;" line="8" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "x-world/x-3dmf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XWorldX3dmf>
		<ApplicationOctetStream public="1" get="inline" set="null" expr="cast &quot;application/octet-stream&quot;" line="9" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/octet-stream"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationOctetStream>
		<ApplicationXAuthorwareBin public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-bin&quot;" line="10" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-authorware-bin"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXAuthorwareBin>
		<ApplicationXAuthorwareMap public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-map&quot;" line="11" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-authorware-map"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXAuthorwareMap>
		<ApplicationXAuthorwareSeg public="1" get="inline" set="null" expr="cast &quot;application/x-authorware-seg&quot;" line="12" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-authorware-seg"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXAuthorwareSeg>
		<TextVndAbc public="1" get="inline" set="null" expr="cast &quot;text/vnd.abc&quot;" line="13" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/vnd.abc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextVndAbc>
		<TextHtml public="1" get="inline" set="null" expr="cast &quot;text/html&quot;" line="14" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/html"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextHtml>
		<VideoAnimaflex public="1" get="inline" set="null" expr="cast &quot;video/animaflex&quot;" line="15" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/animaflex"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoAnimaflex>
		<ApplicationPostscript public="1" get="inline" set="null" expr="cast &quot;application/postscript&quot;" line="16" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/postscript"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationPostscript>
		<AudioAiff public="1" get="inline" set="null" expr="cast &quot;audio/aiff&quot;" line="17" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/aiff"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioAiff>
		<AudioXAiff public="1" get="inline" set="null" expr="cast &quot;audio/x-aiff&quot;" line="18" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-aiff"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXAiff>
		<ApplicationXAim public="1" get="inline" set="null" expr="cast &quot;application/x-aim&quot;" line="19" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-aim"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXAim>
		<TextXAudiosoftIntra public="1" get="inline" set="null" expr="cast &quot;text/x-audiosoft-intra&quot;" line="20" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-audiosoft-intra"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXAudiosoftIntra>
		<ApplicationXNaviAnimation public="1" get="inline" set="null" expr="cast &quot;application/x-navi-animation&quot;" line="21" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-navi-animation"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXNaviAnimation>
		<ApplicationXNokia9000CommunicatorAddOnSoftware public="1" get="inline" set="null" expr="cast &quot;application/x-nokia-9000-communicator-add-on-software&quot;" line="22" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-nokia-9000-communicator-add-on-software"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXNokia9000CommunicatorAddOnSoftware>
		<ApplicationMime public="1" get="inline" set="null" expr="cast &quot;application/mime&quot;" line="23" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mime"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationMime>
		<ApplicationArj public="1" get="inline" set="null" expr="cast &quot;application/arj&quot;" line="24" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/arj"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationArj>
		<ImageXJg public="1" get="inline" set="null" expr="cast &quot;image/x-jg&quot;" line="25" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-jg"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXJg>
		<VideoXMsAsf public="1" get="inline" set="null" expr="cast &quot;video/x-ms-asf&quot;" line="26" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-ms-asf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoXMsAsf>
		<TextXAsm public="1" get="inline" set="null" expr="cast &quot;text/x-asm&quot;" line="27" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-asm"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXAsm>
		<TextAsp public="1" get="inline" set="null" expr="cast &quot;text/asp&quot;" line="28" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/asp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextAsp>
		<ApplicationXMplayer2 public="1" get="inline" set="null" expr="cast &quot;application/x-mplayer2&quot;" line="29" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-mplayer2"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXMplayer2>
		<AudioBasic public="1" get="inline" set="null" expr="cast &quot;audio/basic&quot;" line="30" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/basic"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioBasic>
		<ApplicationXTroffMsvideo public="1" get="inline" set="null" expr="cast &quot;application/x-troff-msvideo&quot;" line="31" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-troff-msvideo"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXTroffMsvideo>
		<VideoAvi public="1" get="inline" set="null" expr="cast &quot;video/avi&quot;" line="32" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/avi"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoAvi>
		<VideoMsvideo public="1" get="inline" set="null" expr="cast &quot;video/msvideo&quot;" line="33" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/msvideo"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoMsvideo>
		<VideoXMsvideo public="1" get="inline" set="null" expr="cast &quot;video/x-msvideo&quot;" line="34" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-msvideo"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoXMsvideo>
		<VideoAvsVideo public="1" get="inline" set="null" expr="cast &quot;video/avs-video&quot;" line="35" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/avs-video"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoAvsVideo>
		<ApplicationXBcpio public="1" get="inline" set="null" expr="cast &quot;application/x-bcpio&quot;" line="36" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bcpio"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXBcpio>
		<ApplicationMacBinary public="1" get="inline" set="null" expr="cast &quot;application/mac-binary&quot;" line="37" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mac-binary"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationMacBinary>
		<ApplicationMacbinary public="1" get="inline" set="null" expr="cast &quot;application/macbinary&quot;" line="38" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/macbinary"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationMacbinary>
		<ApplicationXBinary public="1" get="inline" set="null" expr="cast &quot;application/x-binary&quot;" line="39" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-binary"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXBinary>
		<ApplicationXMacbinary public="1" get="inline" set="null" expr="cast &quot;application/x-macbinary&quot;" line="40" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-macbinary"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXMacbinary>
		<ImageBmp public="1" get="inline" set="null" expr="cast &quot;image/bmp&quot;" line="41" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/bmp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageBmp>
		<ImageXWindowsBmp public="1" get="inline" set="null" expr="cast &quot;image/x-windows-bmp&quot;" line="42" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-windows-bmp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXWindowsBmp>
		<ApplicationBook public="1" get="inline" set="null" expr="cast &quot;application/book&quot;" line="43" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/book"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationBook>
		<ApplicationXBzip2 public="1" get="inline" set="null" expr="cast &quot;application/x-bzip2&quot;" line="44" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bzip2"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXBzip2>
		<ApplicationXBsh public="1" get="inline" set="null" expr="cast &quot;application/x-bsh&quot;" line="45" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bsh"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXBsh>
		<ApplicationXBzip public="1" get="inline" set="null" expr="cast &quot;application/x-bzip&quot;" line="46" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bzip"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXBzip>
		<TextPlain public="1" get="inline" set="null" expr="cast &quot;text/plain&quot;" line="47" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/plain"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextPlain>
		<TextXC public="1" get="inline" set="null" expr="cast &quot;text/x-c&quot;" line="48" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-c"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXC>
		<ApplicationVndMsPkiSeccat public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.seccat&quot;" line="49" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.ms-pki.seccat"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndMsPkiSeccat>
		<ApplicationClariscad public="1" get="inline" set="null" expr="cast &quot;application/clariscad&quot;" line="50" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/clariscad"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationClariscad>
		<ApplicationXCocoa public="1" get="inline" set="null" expr="cast &quot;application/x-cocoa&quot;" line="51" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-cocoa"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXCocoa>
		<ApplicationCdf public="1" get="inline" set="null" expr="cast &quot;application/cdf&quot;" line="52" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/cdf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationCdf>
		<ApplicationXCdf public="1" get="inline" set="null" expr="cast &quot;application/x-cdf&quot;" line="53" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-cdf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXCdf>
		<ApplicationXNetcdf public="1" get="inline" set="null" expr="cast &quot;application/x-netcdf&quot;" line="54" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-netcdf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXNetcdf>
		<ApplicationPkixCert public="1" get="inline" set="null" expr="cast &quot;application/pkix-cert&quot;" line="55" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkix-cert"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationPkixCert>
		<ApplicationXX509CaCert public="1" get="inline" set="null" expr="cast &quot;application/x-x509-ca-cert&quot;" line="56" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-x509-ca-cert"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXX509CaCert>
		<ApplicationXChat public="1" get="inline" set="null" expr="cast &quot;application/x-chat&quot;" line="57" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-chat"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXChat>
		<ApplicationJava public="1" get="inline" set="null" expr="cast &quot;application/java&quot;" line="58" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/java"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationJava>
		<ApplicationJavaByteCode public="1" get="inline" set="null" expr="cast &quot;application/java-byte-code&quot;" line="59" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/java-byte-code"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationJavaByteCode>
		<ApplicationXJavaClass public="1" get="inline" set="null" expr="cast &quot;application/x-java-class&quot;" line="60" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-java-class"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXJavaClass>
		<ApplicationXCpio public="1" get="inline" set="null" expr="cast &quot;application/x-cpio&quot;" line="61" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-cpio"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXCpio>
		<ApplicationMacCompactpro public="1" get="inline" set="null" expr="cast &quot;application/mac-compactpro&quot;" line="62" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mac-compactpro"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationMacCompactpro>
		<ApplicationPkcsCrl public="1" get="inline" set="null" expr="cast &quot;application/pkcs-crl&quot;" line="63" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkcs-crl"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationPkcsCrl>
		<ApplicationXCsh public="1" get="inline" set="null" expr="cast &quot;application/x-csh&quot;" line="64" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-csh"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXCsh>
		<TextCss public="1" get="inline" set="null" expr="cast &quot;text/css&quot;" line="65" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/css"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextCss>
		<ApplicationXDirector public="1" get="inline" set="null" expr="cast &quot;application/x-director&quot;" line="66" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-director"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXDirector>
		<ApplicationXDeepv public="1" get="inline" set="null" expr="cast &quot;application/x-deepv&quot;" line="67" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-deepv"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXDeepv>
		<VideoXDv public="1" get="inline" set="null" expr="cast &quot;video/x-dv&quot;" line="68" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-dv"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoXDv>
		<VideoDl public="1" get="inline" set="null" expr="cast &quot;video/dl&quot;" line="69" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/dl"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoDl>
		<ApplicationMsword public="1" get="inline" set="null" expr="cast &quot;application/msword&quot;" line="70" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/msword"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationMsword>
		<ApplicationCommonground public="1" get="inline" set="null" expr="cast &quot;application/commonground&quot;" line="71" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/commonground"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationCommonground>
		<ApplicationDrafting public="1" get="inline" set="null" expr="cast &quot;application/drafting&quot;" line="72" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/drafting"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationDrafting>
		<ApplicationXDvi public="1" get="inline" set="null" expr="cast &quot;application/x-dvi&quot;" line="73" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-dvi"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXDvi>
		<DrawingXDwf public="1" get="inline" set="null" expr="cast &quot;drawing/x-dwf (old)&quot;" line="74" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "drawing/x-dwf (old)"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DrawingXDwf>
		<ApplicationAcad public="1" get="inline" set="null" expr="cast &quot;application/acad&quot;" line="75" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/acad"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationAcad>
		<ApplicationDxf public="1" get="inline" set="null" expr="cast &quot;application/dxf&quot;" line="76" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/dxf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationDxf>
		<TextXScriptElisp public="1" get="inline" set="null" expr="cast &quot;text/x-script.elisp&quot;" line="77" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script.elisp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXScriptElisp>
		<ApplicationXBytecodeElisp public="1" get="inline" set="null" expr="cast &quot;application/x-bytecode.elisp (compiled elisp)&quot;" line="78" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bytecode.elisp (compiled elisp)"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXBytecodeElisp>
		<ApplicationXEnvoy public="1" get="inline" set="null" expr="cast &quot;application/x-envoy&quot;" line="79" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-envoy"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXEnvoy>
		<ApplicationXEsrehber public="1" get="inline" set="null" expr="cast &quot;application/x-esrehber&quot;" line="80" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-esrehber"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXEsrehber>
		<TextXSetext public="1" get="inline" set="null" expr="cast &quot;text/x-setext&quot;" line="81" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-setext"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXSetext>
		<ApplicationEnvoy public="1" get="inline" set="null" expr="cast &quot;application/envoy&quot;" line="82" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/envoy"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationEnvoy>
		<TextXFortran public="1" get="inline" set="null" expr="cast &quot;text/x-fortran&quot;" line="83" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-fortran"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXFortran>
		<ApplicationVndFdf public="1" get="inline" set="null" expr="cast &quot;application/vnd.fdf&quot;" line="84" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.fdf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndFdf>
		<ImageFif public="1" get="inline" set="null" expr="cast &quot;image/fif&quot;" line="85" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/fif"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageFif>
		<VideoFli public="1" get="inline" set="null" expr="cast &quot;video/fli&quot;" line="86" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/fli"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoFli>
		<ImageFlorian public="1" get="inline" set="null" expr="cast &quot;image/florian&quot;" line="87" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/florian"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageFlorian>
		<TextVndFmiFlexstor public="1" get="inline" set="null" expr="cast &quot;text/vnd.fmi.flexstor&quot;" line="88" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/vnd.fmi.flexstor"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextVndFmiFlexstor>
		<VideoXAtomic3dFeature public="1" get="inline" set="null" expr="cast &quot;video/x-atomic3d-feature&quot;" line="89" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-atomic3d-feature"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoXAtomic3dFeature>
		<ImageVndFpx public="1" get="inline" set="null" expr="cast &quot;image/vnd.fpx&quot;" line="90" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.fpx"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageVndFpx>
		<ApplicationFreeloader public="1" get="inline" set="null" expr="cast &quot;application/freeloader&quot;" line="91" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/freeloader"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationFreeloader>
		<AudioMake public="1" get="inline" set="null" expr="cast &quot;audio/make&quot;" line="92" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/make"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioMake>
		<ImageG3fax public="1" get="inline" set="null" expr="cast &quot;image/g3fax&quot;" line="93" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/g3fax"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageG3fax>
		<ImageGif public="1" get="inline" set="null" expr="cast &quot;image/gif&quot;" line="94" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/gif"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageGif>
		<VideoGl public="1" get="inline" set="null" expr="cast &quot;video/gl&quot;" line="95" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/gl"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoGl>
		<AudioXGsm public="1" get="inline" set="null" expr="cast &quot;audio/x-gsm&quot;" line="96" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-gsm"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXGsm>
		<ApplicationXGsp public="1" get="inline" set="null" expr="cast &quot;application/x-gsp&quot;" line="97" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-gsp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXGsp>
		<ApplicationXGss public="1" get="inline" set="null" expr="cast &quot;application/x-gss&quot;" line="98" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-gss"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXGss>
		<ApplicationXGtar public="1" get="inline" set="null" expr="cast &quot;application/x-gtar&quot;" line="99" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-gtar"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXGtar>
		<ApplicationXCompressed public="1" get="inline" set="null" expr="cast &quot;application/x-compressed&quot;" line="100" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-compressed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXCompressed>
		<ApplicationXGzip public="1" get="inline" set="null" expr="cast &quot;application/x-gzip&quot;" line="101" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-gzip"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXGzip>
		<ApplicationXHdf public="1" get="inline" set="null" expr="cast &quot;application/x-hdf&quot;" line="102" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-hdf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXHdf>
		<ApplicationXHelpfile public="1" get="inline" set="null" expr="cast &quot;application/x-helpfile&quot;" line="103" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-helpfile"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXHelpfile>
		<TextXScript public="1" get="inline" set="null" expr="cast &quot;text/x-script&quot;" line="104" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXScript>
		<ApplicationHlp public="1" get="inline" set="null" expr="cast &quot;application/hlp&quot;" line="105" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/hlp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationHlp>
		<ApplicationVndHpHpgl public="1" get="inline" set="null" expr="cast &quot;application/vnd.hp-hpgl&quot;" line="106" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.hp-hpgl"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndHpHpgl>
		<ApplicationBinhex public="1" get="inline" set="null" expr="cast &quot;application/binhex&quot;" line="107" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/binhex"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationBinhex>
		<ApplicationHta public="1" get="inline" set="null" expr="cast &quot;application/hta&quot;" line="108" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/hta"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationHta>
		<TextXComponent public="1" get="inline" set="null" expr="cast &quot;text/x-component&quot;" line="109" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-component"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXComponent>
		<TextWebviewhtml public="1" get="inline" set="null" expr="cast &quot;text/webviewhtml&quot;" line="110" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/webviewhtml"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextWebviewhtml>
		<XConferenceXCooltalk public="1" get="inline" set="null" expr="cast &quot;x-conference/x-cooltalk&quot;" line="111" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "x-conference/x-cooltalk"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XConferenceXCooltalk>
		<ImageXIcon public="1" get="inline" set="null" expr="cast &quot;image/x-icon&quot;" line="112" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-icon"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXIcon>
		<ImageIef public="1" get="inline" set="null" expr="cast &quot;image/ief&quot;" line="113" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/ief"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageIef>
		<ApplicationIges public="1" get="inline" set="null" expr="cast &quot;application/iges&quot;" line="114" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/iges"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationIges>
		<ApplicationXIma public="1" get="inline" set="null" expr="cast &quot;application/x-ima&quot;" line="115" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-ima"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXIma>
		<ApplicationXHttpdImap public="1" get="inline" set="null" expr="cast &quot;application/x-httpd-imap&quot;" line="116" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-httpd-imap"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXHttpdImap>
		<ApplicationInf public="1" get="inline" set="null" expr="cast &quot;application/inf&quot;" line="117" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/inf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationInf>
		<ApplicationXInternettSignup public="1" get="inline" set="null" expr="cast &quot;application/x-internett-signup&quot;" line="118" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-internett-signup"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXInternettSignup>
		<ApplicationXIp2 public="1" get="inline" set="null" expr="cast &quot;application/x-ip2&quot;" line="119" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-ip2"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXIp2>
		<VideoXIsvideo public="1" get="inline" set="null" expr="cast &quot;video/x-isvideo&quot;" line="120" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-isvideo"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoXIsvideo>
		<AudioIt public="1" get="inline" set="null" expr="cast &quot;audio/it&quot;" line="121" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/it"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioIt>
		<ApplicationXInventor public="1" get="inline" set="null" expr="cast &quot;application/x-inventor&quot;" line="122" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-inventor"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXInventor>
		<IWorldIVrml public="1" get="inline" set="null" expr="cast &quot;i-world/i-vrml&quot;" line="123" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "i-world/i-vrml"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IWorldIVrml>
		<ApplicationXLivescreen public="1" get="inline" set="null" expr="cast &quot;application/x-livescreen&quot;" line="124" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-livescreen"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXLivescreen>
		<AudioXJam public="1" get="inline" set="null" expr="cast &quot;audio/x-jam&quot;" line="125" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-jam"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXJam>
		<ApplicationXJavaCommerce public="1" get="inline" set="null" expr="cast &quot;application/x-java-commerce&quot;" line="126" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-java-commerce"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXJavaCommerce>
		<ImageJpeg public="1" get="inline" set="null" expr="cast &quot;image/jpeg&quot;" line="127" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/jpeg"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageJpeg>
		<ImageXJps public="1" get="inline" set="null" expr="cast &quot;image/x-jps&quot;" line="128" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-jps"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXJps>
		<TextJavascript public="1" get="inline" set="null" expr="cast &quot;text/javascript&quot;" line="129" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/javascript"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextJavascript>
		<ApplicationJson public="1" get="inline" set="null" expr="cast &quot;application/json&quot;" line="130" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/json"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationJson>
		<ApplicationJavascript public="1" get="inline" set="null" expr="cast &quot;application/javascript&quot;" line="131" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/javascript"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationJavascript>
		<ImageJutvision public="1" get="inline" set="null" expr="cast &quot;image/jutvision&quot;" line="132" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/jutvision"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageJutvision>
		<AudioMidi public="1" get="inline" set="null" expr="cast &quot;audio/midi&quot;" line="133" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/midi"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioMidi>
		<ApplicationXKsh public="1" get="inline" set="null" expr="cast &quot;application/x-ksh&quot;" line="134" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-ksh"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXKsh>
		<AudioNspaudio public="1" get="inline" set="null" expr="cast &quot;audio/nspaudio&quot;" line="135" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/nspaudio"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioNspaudio>
		<AudioXLiveaudio public="1" get="inline" set="null" expr="cast &quot;audio/x-liveaudio&quot;" line="136" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-liveaudio"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXLiveaudio>
		<ApplicationXLatex public="1" get="inline" set="null" expr="cast &quot;application/x-latex&quot;" line="137" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-latex"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXLatex>
		<ApplicationXLisp public="1" get="inline" set="null" expr="cast &quot;application/x-lisp&quot;" line="138" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-lisp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXLisp>
		<TextXLaAsf public="1" get="inline" set="null" expr="cast &quot;text/x-la-asf&quot;" line="139" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-la-asf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXLaAsf>
		<ApplicationLzx public="1" get="inline" set="null" expr="cast &quot;application/lzx&quot;" line="140" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/lzx"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationLzx>
		<VideoMpeg public="1" get="inline" set="null" expr="cast &quot;video/mpeg&quot;" line="141" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/mpeg"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoMpeg>
		<AudioMpeg public="1" get="inline" set="null" expr="cast &quot;audio/mpeg&quot;" line="142" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/mpeg"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioMpeg>
		<AudioXMpequrl public="1" get="inline" set="null" expr="cast &quot;audio/x-mpequrl&quot;" line="143" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-mpequrl"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXMpequrl>
		<ApplicationXTroffMan public="1" get="inline" set="null" expr="cast &quot;application/x-troff-man&quot;" line="144" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-troff-man"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXTroffMan>
		<ApplicationXNavimap public="1" get="inline" set="null" expr="cast &quot;application/x-navimap&quot;" line="145" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-navimap"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXNavimap>
		<ApplicationMbedlet public="1" get="inline" set="null" expr="cast &quot;application/mbedlet&quot;" line="146" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mbedlet"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationMbedlet>
		<ApplicationXMagicCapPackage10 public="1" get="inline" set="null" expr="cast &quot;application/x-magic-cap-package-1.0&quot;" line="147" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-magic-cap-package-1.0"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXMagicCapPackage10>
		<ApplicationMcad public="1" get="inline" set="null" expr="cast &quot;application/mcad&quot;" line="148" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mcad"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationMcad>
		<ImageVasa public="1" get="inline" set="null" expr="cast &quot;image/vasa&quot;" line="149" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vasa"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageVasa>
		<ApplicationNetmc public="1" get="inline" set="null" expr="cast &quot;application/netmc&quot;" line="150" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/netmc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationNetmc>
		<ApplicationXTroffMe public="1" get="inline" set="null" expr="cast &quot;application/x-troff-me&quot;" line="151" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-troff-me"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXTroffMe>
		<MessageRfc822 public="1" get="inline" set="null" expr="cast &quot;message/rfc822&quot;" line="152" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "message/rfc822"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MessageRfc822>
		<ApplicationXMif public="1" get="inline" set="null" expr="cast &quot;application/x-mif&quot;" line="153" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-mif"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXMif>
		<WwwMime public="1" get="inline" set="null" expr="cast &quot;www/mime&quot;" line="154" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "www/mime"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WwwMime>
		<AudioXVndAudioexplosionMjuicemediafile public="1" get="inline" set="null" expr="cast &quot;audio/x-vnd.audioexplosion.mjuicemediafile&quot;" line="155" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-vnd.audioexplosion.mjuicemediafile"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXVndAudioexplosionMjuicemediafile>
		<VideoXMotionJpeg public="1" get="inline" set="null" expr="cast &quot;video/x-motion-jpeg&quot;" line="156" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-motion-jpeg"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoXMotionJpeg>
		<ApplicationBase64 public="1" get="inline" set="null" expr="cast &quot;application/base64&quot;" line="157" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/base64"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationBase64>
		<AudioMod public="1" get="inline" set="null" expr="cast &quot;audio/mod&quot;" line="158" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/mod"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioMod>
		<VideoQuicktime public="1" get="inline" set="null" expr="cast &quot;video/quicktime&quot;" line="159" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/quicktime"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoQuicktime>
		<VideoXSgiMovie public="1" get="inline" set="null" expr="cast &quot;video/x-sgi-movie&quot;" line="160" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-sgi-movie"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoXSgiMovie>
		<AudioMpeg3 public="1" get="inline" set="null" expr="cast &quot;audio/mpeg3&quot;" line="161" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/mpeg3"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioMpeg3>
		<ApplicationXProject public="1" get="inline" set="null" expr="cast &quot;application/x-project&quot;" line="162" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-project"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXProject>
		<ApplicationVndMsProject public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-project&quot;" line="163" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.ms-project"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndMsProject>
		<ApplicationMarc public="1" get="inline" set="null" expr="cast &quot;application/marc&quot;" line="164" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/marc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationMarc>
		<ApplicationXTroffMs public="1" get="inline" set="null" expr="cast &quot;application/x-troff-ms&quot;" line="165" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-troff-ms"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXTroffMs>
		<ApplicationXVndAudioexplosionMzz public="1" get="inline" set="null" expr="cast &quot;application/x-vnd.audioexplosion.mzz&quot;" line="166" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-vnd.audioexplosion.mzz"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXVndAudioexplosionMzz>
		<ImageNaplps public="1" get="inline" set="null" expr="cast &quot;image/naplps&quot;" line="167" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/naplps"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageNaplps>
		<ApplicationVndNokiaConfigurationMessage public="1" get="inline" set="null" expr="cast &quot;application/vnd.nokia.configuration-message&quot;" line="168" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.nokia.configuration-message"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndNokiaConfigurationMessage>
		<ImageXNiff public="1" get="inline" set="null" expr="cast &quot;image/x-niff&quot;" line="169" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-niff"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXNiff>
		<ApplicationXMixTransfer public="1" get="inline" set="null" expr="cast &quot;application/x-mix-transfer&quot;" line="170" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-mix-transfer"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXMixTransfer>
		<ApplicationXConference public="1" get="inline" set="null" expr="cast &quot;application/x-conference&quot;" line="171" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-conference"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXConference>
		<ApplicationXNavidoc public="1" get="inline" set="null" expr="cast &quot;application/x-navidoc&quot;" line="172" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-navidoc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXNavidoc>
		<ApplicationOda public="1" get="inline" set="null" expr="cast &quot;application/oda&quot;" line="173" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/oda"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationOda>
		<ApplicationXOmc public="1" get="inline" set="null" expr="cast &quot;application/x-omc&quot;" line="174" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-omc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXOmc>
		<ApplicationXOmcdatamaker public="1" get="inline" set="null" expr="cast &quot;application/x-omcdatamaker&quot;" line="175" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-omcdatamaker"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXOmcdatamaker>
		<ApplicationXOmcregerator public="1" get="inline" set="null" expr="cast &quot;application/x-omcregerator&quot;" line="176" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-omcregerator"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXOmcregerator>
		<TextXPascal public="1" get="inline" set="null" expr="cast &quot;text/x-pascal&quot;" line="177" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-pascal"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXPascal>
		<ApplicationPkcs10 public="1" get="inline" set="null" expr="cast &quot;application/pkcs10&quot;" line="178" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkcs10"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationPkcs10>
		<ApplicationPkcs12 public="1" get="inline" set="null" expr="cast &quot;application/pkcs-12&quot;" line="179" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkcs-12"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationPkcs12>
		<ApplicationXPkcs7Signature public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-signature&quot;" line="180" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-pkcs7-signature"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXPkcs7Signature>
		<ApplicationPkcs7Mime public="1" get="inline" set="null" expr="cast &quot;application/pkcs7-mime&quot;" line="181" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkcs7-mime"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationPkcs7Mime>
		<ApplicationXPkcs7Certreqresp public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-certreqresp&quot;" line="182" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-pkcs7-certreqresp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXPkcs7Certreqresp>
		<ApplicationPkcs7Signature public="1" get="inline" set="null" expr="cast &quot;application/pkcs7-signature&quot;" line="183" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pkcs7-signature"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationPkcs7Signature>
		<ApplicationPro_eng public="1" get="inline" set="null" expr="cast &quot;application/pro_eng&quot;" line="184" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pro_eng"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationPro_eng>
		<TextPascal public="1" get="inline" set="null" expr="cast &quot;text/pascal&quot;" line="185" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/pascal"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextPascal>
		<ImageXPortableBitmap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-bitmap&quot;" line="186" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-portable-bitmap"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXPortableBitmap>
		<ApplicationVndHpPcl public="1" get="inline" set="null" expr="cast &quot;application/vnd.hp-pcl&quot;" line="187" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.hp-pcl"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndHpPcl>
		<ImageXPict public="1" get="inline" set="null" expr="cast &quot;image/x-pict&quot;" line="188" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-pict"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXPict>
		<ImageXPcx public="1" get="inline" set="null" expr="cast &quot;image/x-pcx&quot;" line="189" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-pcx"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXPcx>
		<ChemicalXPdb public="1" get="inline" set="null" expr="cast &quot;chemical/x-pdb&quot;" line="190" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "chemical/x-pdb"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ChemicalXPdb>
		<ApplicationPdf public="1" get="inline" set="null" expr="cast &quot;application/pdf&quot;" line="191" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/pdf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationPdf>
		<ImageXPortableGraymap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-graymap&quot;" line="192" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-portable-graymap"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXPortableGraymap>
		<ImagePict public="1" get="inline" set="null" expr="cast &quot;image/pict&quot;" line="193" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/pict"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImagePict>
		<ApplicationXNewtonCompatiblePkg public="1" get="inline" set="null" expr="cast &quot;application/x-newton-compatible-pkg&quot;" line="194" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-newton-compatible-pkg"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXNewtonCompatiblePkg>
		<ApplicationVndMsPkiPko public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.pko&quot;" line="195" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.ms-pki.pko"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndMsPkiPko>
		<ApplicationXPixclscript public="1" get="inline" set="null" expr="cast &quot;application/x-pixclscript&quot;" line="196" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-pixclscript"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXPixclscript>
		<ImageXXpixmap public="1" get="inline" set="null" expr="cast &quot;image/x-xpixmap&quot;" line="197" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-xpixmap"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXXpixmap>
		<ApplicationXPagemaker public="1" get="inline" set="null" expr="cast &quot;application/x-pagemaker&quot;" line="198" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-pagemaker"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXPagemaker>
		<ImagePng public="1" get="inline" set="null" expr="cast &quot;image/png&quot;" line="199" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/png"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImagePng>
		<ApplicationXPortableAnymap public="1" get="inline" set="null" expr="cast &quot;application/x-portable-anymap&quot;" line="200" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-portable-anymap"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXPortableAnymap>
		<ApplicationMspowerpoint public="1" get="inline" set="null" expr="cast &quot;application/mspowerpoint&quot;" line="201" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mspowerpoint"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationMspowerpoint>
		<ModelXPov public="1" get="inline" set="null" expr="cast &quot;model/x-pov&quot;" line="202" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "model/x-pov"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ModelXPov>
		<ApplicationVndMsPowerpoint public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-powerpoint&quot;" line="203" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.ms-powerpoint"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndMsPowerpoint>
		<ImageXPortablePixmap public="1" get="inline" set="null" expr="cast &quot;image/x-portable-pixmap&quot;" line="204" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-portable-pixmap"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXPortablePixmap>
		<ApplicationXFreelance public="1" get="inline" set="null" expr="cast &quot;application/x-freelance&quot;" line="205" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-freelance"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXFreelance>
		<PaleovuXPv public="1" get="inline" set="null" expr="cast &quot;paleovu/x-pv&quot;" line="206" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "paleovu/x-pv"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PaleovuXPv>
		<TextXScriptPhyton public="1" get="inline" set="null" expr="cast &quot;text/x-script.phyton&quot;" line="207" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script.phyton"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXScriptPhyton>
		<ApplicationXBytecodePython public="1" get="inline" set="null" expr="cast &quot;application/x-bytecode.python&quot;" line="208" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-bytecode.python"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXBytecodePython>
		<AudioVndQcelp public="1" get="inline" set="null" expr="cast &quot;audio/vnd.qcelp&quot;" line="209" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/vnd.qcelp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioVndQcelp>
		<ImageXQuicktime public="1" get="inline" set="null" expr="cast &quot;image/x-quicktime&quot;" line="210" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-quicktime"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXQuicktime>
		<VideoXQtc public="1" get="inline" set="null" expr="cast &quot;video/x-qtc&quot;" line="211" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-qtc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoXQtc>
		<AudioXPnRealaudio public="1" get="inline" set="null" expr="cast &quot;audio/x-pn-realaudio&quot;" line="212" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-pn-realaudio"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXPnRealaudio>
		<ApplicationXCmuRaster public="1" get="inline" set="null" expr="cast &quot;application/x-cmu-raster&quot;" line="213" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-cmu-raster"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXCmuRaster>
		<ImageCmuRaster public="1" get="inline" set="null" expr="cast &quot;image/cmu-raster&quot;" line="214" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/cmu-raster"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageCmuRaster>
		<TextXScriptRexx public="1" get="inline" set="null" expr="cast &quot;text/x-script.rexx&quot;" line="215" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script.rexx"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXScriptRexx>
		<ImageVndRnRealflash public="1" get="inline" set="null" expr="cast &quot;image/vnd.rn-realflash&quot;" line="216" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.rn-realflash"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageVndRnRealflash>
		<ImageXRgb public="1" get="inline" set="null" expr="cast &quot;image/x-rgb&quot;" line="217" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-rgb"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXRgb>
		<ApplicationVndRnRealmedia public="1" get="inline" set="null" expr="cast &quot;application/vnd.rn-realmedia&quot;" line="218" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.rn-realmedia"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndRnRealmedia>
		<AudioMid public="1" get="inline" set="null" expr="cast &quot;audio/mid&quot;" line="219" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/mid"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioMid>
		<ApplicationRingingTones public="1" get="inline" set="null" expr="cast &quot;application/ringing-tones&quot;" line="220" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/ringing-tones"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationRingingTones>
		<ApplicationVndRnRealplayer public="1" get="inline" set="null" expr="cast &quot;application/vnd.rn-realplayer&quot;" line="221" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.rn-realplayer"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndRnRealplayer>
		<ApplicationXTroff public="1" get="inline" set="null" expr="cast &quot;application/x-troff&quot;" line="222" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-troff"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXTroff>
		<ImageVndRnRealpix public="1" get="inline" set="null" expr="cast &quot;image/vnd.rn-realpix&quot;" line="223" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.rn-realpix"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageVndRnRealpix>
		<AudioXPnRealaudioPlugin public="1" get="inline" set="null" expr="cast &quot;audio/x-pn-realaudio-plugin&quot;" line="224" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-pn-realaudio-plugin"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXPnRealaudioPlugin>
		<TextRichtext public="1" get="inline" set="null" expr="cast &quot;text/richtext&quot;" line="225" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/richtext"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextRichtext>
		<ApplicationRtf public="1" get="inline" set="null" expr="cast &quot;application/rtf&quot;" line="226" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/rtf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationRtf>
		<VideoVndRnRealvideo public="1" get="inline" set="null" expr="cast &quot;video/vnd.rn-realvideo&quot;" line="227" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/vnd.rn-realvideo"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoVndRnRealvideo>
		<AudioS3m public="1" get="inline" set="null" expr="cast &quot;audio/s3m&quot;" line="228" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/s3m"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioS3m>
		<ApplicationXTbook public="1" get="inline" set="null" expr="cast &quot;application/x-tbook&quot;" line="229" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-tbook"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXTbook>
		<ApplicationXLotusscreencam public="1" get="inline" set="null" expr="cast &quot;application/x-lotusscreencam&quot;" line="230" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-lotusscreencam"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXLotusscreencam>
		<ApplicationSdp public="1" get="inline" set="null" expr="cast &quot;application/sdp&quot;" line="231" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/sdp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationSdp>
		<ApplicationSounder public="1" get="inline" set="null" expr="cast &quot;application/sounder&quot;" line="232" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/sounder"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationSounder>
		<ApplicationSea public="1" get="inline" set="null" expr="cast &quot;application/sea&quot;" line="233" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/sea"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationSea>
		<ApplicationSet public="1" get="inline" set="null" expr="cast &quot;application/set&quot;" line="234" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/set"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationSet>
		<AudioXPsid public="1" get="inline" set="null" expr="cast &quot;audio/x-psid&quot;" line="235" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-psid"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXPsid>
		<ApplicationXSit public="1" get="inline" set="null" expr="cast &quot;application/x-sit&quot;" line="236" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-sit"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXSit>
		<ApplicationXKoan public="1" get="inline" set="null" expr="cast &quot;application/x-koan&quot;" line="237" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-koan"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXKoan>
		<ApplicationXSeelogo public="1" get="inline" set="null" expr="cast &quot;application/x-seelogo&quot;" line="238" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-seelogo"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXSeelogo>
		<ApplicationSmil public="1" get="inline" set="null" expr="cast &quot;application/smil&quot;" line="239" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/smil"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationSmil>
		<ApplicationSolids public="1" get="inline" set="null" expr="cast &quot;application/solids&quot;" line="240" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/solids"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationSolids>
		<ApplicationXPkcs7Certificates public="1" get="inline" set="null" expr="cast &quot;application/x-pkcs7-certificates&quot;" line="241" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-pkcs7-certificates"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXPkcs7Certificates>
		<ApplicationFuturesplash public="1" get="inline" set="null" expr="cast &quot;application/futuresplash&quot;" line="242" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/futuresplash"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationFuturesplash>
		<ApplicationXSprite public="1" get="inline" set="null" expr="cast &quot;application/x-sprite&quot;" line="243" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-sprite"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXSprite>
		<ApplicationXWaisSource public="1" get="inline" set="null" expr="cast &quot;application/x-wais-source&quot;" line="244" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-wais-source"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXWaisSource>
		<TextXServerParsedHtml public="1" get="inline" set="null" expr="cast &quot;text/x-server-parsed-html&quot;" line="245" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-server-parsed-html"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXServerParsedHtml>
		<ApplicationStreamingmedia public="1" get="inline" set="null" expr="cast &quot;application/streamingmedia&quot;" line="246" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/streamingmedia"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationStreamingmedia>
		<ApplicationVndMsPkiCertstore public="1" get="inline" set="null" expr="cast &quot;application/vnd.ms-pki.certstore&quot;" line="247" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.ms-pki.certstore"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndMsPkiCertstore>
		<ApplicationStep public="1" get="inline" set="null" expr="cast &quot;application/step&quot;" line="248" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/step"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationStep>
		<ApplicationSla public="1" get="inline" set="null" expr="cast &quot;application/sla&quot;" line="249" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/sla"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationSla>
		<ApplicationXSv4cpio public="1" get="inline" set="null" expr="cast &quot;application/x-sv4cpio&quot;" line="250" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-sv4cpio"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXSv4cpio>
		<ApplicationXSv4crc public="1" get="inline" set="null" expr="cast &quot;application/x-sv4crc&quot;" line="251" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-sv4crc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXSv4crc>
		<ImageVndDwg public="1" get="inline" set="null" expr="cast &quot;image/vnd.dwg&quot;" line="252" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.dwg"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageVndDwg>
		<ApplicationXWorld public="1" get="inline" set="null" expr="cast &quot;application/x-world&quot;" line="253" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-world"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXWorld>
		<ApplicationXShockwaveFlash public="1" get="inline" set="null" expr="cast &quot;application/x-shockwave-flash&quot;" line="254" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-shockwave-flash"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXShockwaveFlash>
		<TextXSpeech public="1" get="inline" set="null" expr="cast &quot;text/x-speech&quot;" line="255" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-speech"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXSpeech>
		<ApplicationXTar public="1" get="inline" set="null" expr="cast &quot;application/x-tar&quot;" line="256" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-tar"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXTar>
		<ApplicationToolbook public="1" get="inline" set="null" expr="cast &quot;application/toolbook&quot;" line="257" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/toolbook"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationToolbook>
		<ApplicationXTcl public="1" get="inline" set="null" expr="cast &quot;application/x-tcl&quot;" line="258" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-tcl"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXTcl>
		<TextXScriptTcsh public="1" get="inline" set="null" expr="cast &quot;text/x-script.tcsh&quot;" line="259" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script.tcsh"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXScriptTcsh>
		<ApplicationXTex public="1" get="inline" set="null" expr="cast &quot;application/x-tex&quot;" line="260" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-tex"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXTex>
		<ApplicationXTexinfo public="1" get="inline" set="null" expr="cast &quot;application/x-texinfo&quot;" line="261" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-texinfo"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXTexinfo>
		<ApplicationGnutar public="1" get="inline" set="null" expr="cast &quot;application/gnutar&quot;" line="262" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/gnutar"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationGnutar>
		<ImageTiff public="1" get="inline" set="null" expr="cast &quot;image/tiff&quot;" line="263" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/tiff"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageTiff>
		<AudioTspAudio public="1" get="inline" set="null" expr="cast &quot;audio/tsp-audio&quot;" line="264" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/tsp-audio"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioTspAudio>
		<ApplicationDsptype public="1" get="inline" set="null" expr="cast &quot;application/dsptype&quot;" line="265" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/dsptype"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationDsptype>
		<TextTabSeparatedValues public="1" get="inline" set="null" expr="cast &quot;text/tab-separated-values&quot;" line="266" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/tab-separated-values"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextTabSeparatedValues>
		<TextXUil public="1" get="inline" set="null" expr="cast &quot;text/x-uil&quot;" line="267" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-uil"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXUil>
		<TextUriList public="1" get="inline" set="null" expr="cast &quot;text/uri-list&quot;" line="268" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/uri-list"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextUriList>
		<ApplicationIDeas public="1" get="inline" set="null" expr="cast &quot;application/i-deas&quot;" line="269" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/i-deas"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationIDeas>
		<ApplicationXUstar public="1" get="inline" set="null" expr="cast &quot;application/x-ustar&quot;" line="270" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-ustar"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXUstar>
		<TextXUuencode public="1" get="inline" set="null" expr="cast &quot;text/x-uuencode&quot;" line="271" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-uuencode"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXUuencode>
		<ApplicationXCdlink public="1" get="inline" set="null" expr="cast &quot;application/x-cdlink&quot;" line="272" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-cdlink"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXCdlink>
		<TextXVcalendar public="1" get="inline" set="null" expr="cast &quot;text/x-vcalendar&quot;" line="273" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-vcalendar"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXVcalendar>
		<ApplicationVda public="1" get="inline" set="null" expr="cast &quot;application/vda&quot;" line="274" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vda"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVda>
		<VideoVdo public="1" get="inline" set="null" expr="cast &quot;video/vdo&quot;" line="275" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/vdo"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoVdo>
		<ApplicationGroupwise public="1" get="inline" set="null" expr="cast &quot;application/groupwise&quot;" line="276" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/groupwise"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationGroupwise>
		<VideoVivo public="1" get="inline" set="null" expr="cast &quot;video/vivo&quot;" line="277" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/vivo"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoVivo>
		<ApplicationVocaltecMediaDesc public="1" get="inline" set="null" expr="cast &quot;application/vocaltec-media-desc&quot;" line="278" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vocaltec-media-desc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVocaltecMediaDesc>
		<ApplicationVocaltecMediaFile public="1" get="inline" set="null" expr="cast &quot;application/vocaltec-media-file&quot;" line="279" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vocaltec-media-file"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVocaltecMediaFile>
		<AudioVoc public="1" get="inline" set="null" expr="cast &quot;audio/voc&quot;" line="280" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/voc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioVoc>
		<VideoVosaic public="1" get="inline" set="null" expr="cast &quot;video/vosaic&quot;" line="281" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/vosaic"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoVosaic>
		<AudioVoxware public="1" get="inline" set="null" expr="cast &quot;audio/voxware&quot;" line="282" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/voxware"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioVoxware>
		<AudioXTwinvqPlugin public="1" get="inline" set="null" expr="cast &quot;audio/x-twinvq-plugin&quot;" line="283" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-twinvq-plugin"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXTwinvqPlugin>
		<AudioXTwinvq public="1" get="inline" set="null" expr="cast &quot;audio/x-twinvq&quot;" line="284" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/x-twinvq"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXTwinvq>
		<ApplicationXVrml public="1" get="inline" set="null" expr="cast &quot;application/x-vrml&quot;" line="285" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-vrml"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXVrml>
		<XWorldXVrt public="1" get="inline" set="null" expr="cast &quot;x-world/x-vrt&quot;" line="286" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "x-world/x-vrt"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XWorldXVrt>
		<ApplicationXVisio public="1" get="inline" set="null" expr="cast &quot;application/x-visio&quot;" line="287" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-visio"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXVisio>
		<ApplicationWordperfect60 public="1" get="inline" set="null" expr="cast &quot;application/wordperfect6.0&quot;" line="288" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/wordperfect6.0"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationWordperfect60>
		<ApplicationWordperfect61 public="1" get="inline" set="null" expr="cast &quot;application/wordperfect6.1&quot;" line="289" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/wordperfect6.1"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationWordperfect61>
		<AudioWav public="1" get="inline" set="null" expr="cast &quot;audio/wav&quot;" line="290" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/wav"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioWav>
		<ApplicationXQpro public="1" get="inline" set="null" expr="cast &quot;application/x-qpro&quot;" line="291" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-qpro"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXQpro>
		<ImageVndWapWbmp public="1" get="inline" set="null" expr="cast &quot;image/vnd.wap.wbmp&quot;" line="292" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.wap.wbmp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageVndWapWbmp>
		<ApplicationVndXara public="1" get="inline" set="null" expr="cast &quot;application/vnd.xara&quot;" line="293" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.xara"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndXara>
		<ImageWebp public="1" get="inline" set="null" expr="cast &quot;image/webp&quot;" line="294" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/webp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageWebp>
		<ApplicationX123 public="1" get="inline" set="null" expr="cast &quot;application/x-123&quot;" line="295" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-123"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationX123>
		<WindowsMetafile public="1" get="inline" set="null" expr="cast &quot;windows/metafile&quot;" line="296" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "windows/metafile"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WindowsMetafile>
		<TextVndWapWml public="1" get="inline" set="null" expr="cast &quot;text/vnd.wap.wml&quot;" line="297" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/vnd.wap.wml"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextVndWapWml>
		<ApplicationVndWapWmlc public="1" get="inline" set="null" expr="cast &quot;application/vnd.wap.wmlc&quot;" line="298" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.wap.wmlc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndWapWmlc>
		<TextVndWapWmlscript public="1" get="inline" set="null" expr="cast &quot;text/vnd.wap.wmlscript&quot;" line="299" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/vnd.wap.wmlscript"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextVndWapWmlscript>
		<ApplicationVndWapWmlscriptc public="1" get="inline" set="null" expr="cast &quot;application/vnd.wap.wmlscriptc&quot;" line="300" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/vnd.wap.wmlscriptc"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationVndWapWmlscriptc>
		<ApplicationWordperfect public="1" get="inline" set="null" expr="cast &quot;application/wordperfect&quot;" line="301" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/wordperfect"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationWordperfect>
		<ApplicationXLotus public="1" get="inline" set="null" expr="cast &quot;application/x-lotus&quot;" line="302" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-lotus"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXLotus>
		<ApplicationMswrite public="1" get="inline" set="null" expr="cast &quot;application/mswrite&quot;" line="303" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/mswrite"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationMswrite>
		<ModelVrml public="1" get="inline" set="null" expr="cast &quot;model/vrml&quot;" line="304" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "model/vrml"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ModelVrml>
		<TextScriplet public="1" get="inline" set="null" expr="cast &quot;text/scriplet&quot;" line="305" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/scriplet"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextScriplet>
		<ApplicationXWintalk public="1" get="inline" set="null" expr="cast &quot;application/x-wintalk&quot;" line="306" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-wintalk"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXWintalk>
		<ImageXXbitmap public="1" get="inline" set="null" expr="cast &quot;image/x-xbitmap&quot;" line="307" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-xbitmap"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXXbitmap>
		<VideoXAmtDemorun public="1" get="inline" set="null" expr="cast &quot;video/x-amt-demorun&quot;" line="308" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-amt-demorun"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoXAmtDemorun>
		<XglDrawing public="1" get="inline" set="null" expr="cast &quot;xgl/drawing&quot;" line="309" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "xgl/drawing"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XglDrawing>
		<ImageVndXiff public="1" get="inline" set="null" expr="cast &quot;image/vnd.xiff&quot;" line="310" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/vnd.xiff"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageVndXiff>
		<ApplicationExcel public="1" get="inline" set="null" expr="cast &quot;application/excel&quot;" line="311" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/excel"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationExcel>
		<AudioXm public="1" get="inline" set="null" expr="cast &quot;audio/xm&quot;" line="312" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "audio/xm"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AudioXm>
		<ApplicationXml public="1" get="inline" set="null" expr="cast &quot;application/xml&quot;" line="313" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/xml"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXml>
		<XglMovie public="1" get="inline" set="null" expr="cast &quot;xgl/movie&quot;" line="314" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "xgl/movie"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XglMovie>
		<ApplicationXVndLsXpix public="1" get="inline" set="null" expr="cast &quot;application/x-vnd.ls-xpix&quot;" line="315" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-vnd.ls-xpix"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXVndLsXpix>
		<VideoXAmtShowrun public="1" get="inline" set="null" expr="cast &quot;video/x-amt-showrun&quot;" line="316" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "video/x-amt-showrun"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VideoXAmtShowrun>
		<ImageXXwd public="1" get="inline" set="null" expr="cast &quot;image/x-xwd&quot;" line="317" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "image/x-xwd"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ImageXXwd>
		<ApplicationXCompress public="1" get="inline" set="null" expr="cast &quot;application/x-compress&quot;" line="318" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "application/x-compress"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ApplicationXCompress>
		<MultipartXZip public="1" get="inline" set="null" expr="cast &quot;multipart/x-zip&quot;" line="319" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "multipart/x-zip"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MultipartXZip>
		<TextXScriptZsh public="1" get="inline" set="null" expr="cast &quot;text/x-script.zsh&quot;" line="320" static="1">
			<x path="haxe.io.Mime"/>
			<meta>
				<m n=":value"><e>cast "text/x-script.zsh"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextXScriptZsh>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="haxe.io.Path" params="" file="/home/vsts/work/1/s/std/haxe/io/Path.hx">
		<withoutExtension public="1" set="method" line="123" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String representation of `path` without the file extension.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</withoutExtension>
		<withoutDirectory public="1" set="method" line="134" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String representation of `path` without the directory.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</withoutDirectory>
		<directory public="1" set="method" line="147" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the directory of `path`.

		If the directory is `null`, the empty String `""` is returned.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</directory>
		<extension public="1" set="method" line="161" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the extension of `path`.

		If `path` has no extension, the empty String `""` is returned.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</extension>
		<withExtension public="1" set="method" line="175" static="1">
			<f a="path:ext">
				<c path="String"/>
				<x path="Null"><c path="String"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String representation of `path` where the extension is `ext`.

		If `path` has no extension, `ext` is added as extension.

		If `path` or `ext` are `null`, the result is unspecified.</haxe_doc>
		</withExtension>
		<join public="1" set="method" line="189" static="1">
			<f a="paths">
				<c path="Array"><c path="String"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all paths in `paths` together.

		If `paths` is empty, the empty String `""` is returned. Otherwise the
		paths are joined with a slash between them.

		If `paths` is `null`, the result is unspecified.</haxe_doc>
		</join>
		<normalize public="1" set="method" line="210" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Normalize a given `path` (e.g. turn `'/usr/local/../lib'` into `'/usr/lib'`).

		Also replaces backslashes `\` with slashes `/` and afterwards turns
		multiple slashes into a single one.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</normalize>
		<addTrailingSlash public="1" set="method" line="271" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Adds a trailing slash to `path`, if it does not have one already.

		If the last slash in `path` is a backslash, a backslash is appended to
		`path`.

		If the last slash in `path` is a slash, or if no slash is found, a slash
		is appended to `path`. In particular, this applies to the empty String
		`""`.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</addTrailingSlash>
		<removeTrailingSlashes public="1" set="method" line="299" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing slashes from `path`.

		If `path` does not end with a `/` or `\`, `path` is returned unchanged.

		Otherwise the substring of `path` excluding the trailing slashes or
		backslashes is returned.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</removeTrailingSlashes>
		<isAbsolute public="1" set="method" line="314" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the path is an absolute path, and `false` otherwise.</haxe_doc>
		</isAbsolute>
		<unescape set="method" line="324" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></unescape>
		<escape set="method" line="329" static="1">
			<f a="path:?allowSlashes" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ allowSlashes : false }</e></m></meta>
		</escape>
		<dir public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>The directory.

		This is the leading part of the path that is not part of the file name
		and the extension.

		Does not end with a `/` or `\` separator.

		If the path has no directory, the value is `null`.</haxe_doc>
		</dir>
		<file public="1">
			<c path="String"/>
			<haxe_doc>The file name.

		This is the part of the part between the directory and the extension.

		If there is no file name, e.g. for `".htaccess"` or `"/dir/"`, the value
		is the empty String `""`.</haxe_doc>
		</file>
		<ext public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>The file extension.

		It is separated from the file name by a dot. This dot is not part of
		the extension.

		If the path has no extension, the value is `null`.</haxe_doc>
		</ext>
		<backslash public="1">
			<x path="Bool"/>
			<haxe_doc>`true` if the last directory separator is a backslash, `false` otherwise.</haxe_doc>
		</backslash>
		<toString public="1" set="method" line="114">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of `this` path.

		If `this.backslash` is `true`, backslash is used as directory separator,
		otherwise slash is used. This only affects the separator between
		`this.dir` and `this.file`.

		If `this.directory` or `this.extension` is `null`, their representation
		is the empty String `""`.</haxe_doc>
		</toString>
		<new public="1" set="method" line="76">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new `Path` instance by parsing `path`.

		Path information can be retrieved by accessing the `dir`, `file` and `ext`
		properties.</haxe_doc>
		</new>
		<haxe_doc>This class provides a convenient way of working with paths. It supports the
	common path formats:

	- `directory1/directory2/filename.extension`
	- `directory1\directory2\filename.extension`</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<abstract path="haxe.io.Scheme" params="" file="/home/vsts/work/1/s/std/haxe/io/Scheme.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>A scheme consists of a sequence of characters beginning with a letter and followed
	by any combination of letters, digits, plus (`+`, period (`.`), or hyphen (`-`).

	Although schemes are case-insensitive, the canonical form is lowercase
	and documents that specify schemes must do so with lowercase letters.
	It is followed by a colon (`:`).</haxe_doc>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.io._Scheme.Scheme_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/io/Scheme.hx" private="1" module="haxe.io.Scheme" extern="1">
	<Http public="1" get="inline" set="null" expr="cast &quot;http&quot;" line="12" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "http"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Http>
	<Https public="1" get="inline" set="null" expr="cast &quot;https&quot;" line="13" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "https"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Https>
	<Ftp public="1" get="inline" set="null" expr="cast &quot;ftp&quot;" line="14" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "ftp"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Ftp>
	<MailTo public="1" get="inline" set="null" expr="cast &quot;mailto&quot;" line="15" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "mailto"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MailTo>
	<File public="1" get="inline" set="null" expr="cast &quot;file&quot;" line="16" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "file"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</File>
	<Data public="1" get="inline" set="null" expr="cast &quot;data&quot;" line="17" static="1">
		<x path="haxe.io.Scheme"/>
		<meta>
			<m n=":value"><e>cast "data"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Data>
	<meta>
		<m n=":nativeGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.io._Scheme.Scheme_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/io/Scheme.hx" private="1" module="haxe.io.Scheme" extern="1">
		<Http public="1" get="inline" set="null" expr="cast &quot;http&quot;" line="12" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "http"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Http>
		<Https public="1" get="inline" set="null" expr="cast &quot;https&quot;" line="13" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "https"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Https>
		<Ftp public="1" get="inline" set="null" expr="cast &quot;ftp&quot;" line="14" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "ftp"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Ftp>
		<MailTo public="1" get="inline" set="null" expr="cast &quot;mailto&quot;" line="15" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "mailto"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MailTo>
		<File public="1" get="inline" set="null" expr="cast &quot;file&quot;" line="16" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "file"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</File>
		<Data public="1" get="inline" set="null" expr="cast &quot;data&quot;" line="17" static="1">
			<x path="haxe.io.Scheme"/>
			<meta>
				<m n=":value"><e>cast "data"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Data>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="haxe.io.StringInput" params="" file="/home/vsts/work/1/s/std/haxe/io/StringInput.hx">
		<extends path="haxe.io.BytesInput"/>
		<new public="1" set="method" line="26"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<typedef path="haxe.io.UInt16ArrayData" params="" file="/home/vsts/work/1/s/std/haxe/io/UInt16Array.hx" module="haxe.io.UInt16Array">
		<t path="haxe.io.ArrayBufferViewData"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.io.UInt16Array" params="" file="/home/vsts/work/1/s/std/haxe/io/UInt16Array.hx">
		<this><t path="haxe.io.UInt16ArrayData"/></this>
		<meta><m n=":hxGen"/></meta>
		<impl><class path="haxe.io._UInt16Array.UInt16Array_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/io/UInt16Array.hx" private="1" module="haxe.io.UInt16Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>2</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="33" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<get_length get="inline" set="null" line="37" static="1">
		<f a="this">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="41" static="1">
		<f a="this">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="45" static="1">
		<f a="this:index">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="49" static="1">
		<f a="this:index:value">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="57" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="61" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="65" static="1">
		<f a="this">
			<t path="haxe.io.UInt16ArrayData"/>
			<t path="haxe.io.UInt16ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="haxe.io.UInt16Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="73" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="84" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io._UInt16Array.UInt16Array_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/io/UInt16Array.hx" private="1" module="haxe.io.UInt16Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="33" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<get_length get="inline" set="null" line="37" static="1">
			<f a="this">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="41" static="1">
			<f a="this">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="45" static="1">
			<f a="this:index">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="49" static="1">
			<f a="this:index:value">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="57" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="61" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="65" static="1">
			<f a="this">
				<t path="haxe.io.UInt16ArrayData"/>
				<t path="haxe.io.UInt16ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="haxe.io.UInt16Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="73" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="84" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
		<meta><m n=":hxGen"/></meta>
	</class>
	<typedef path="haxe.io.UInt32ArrayData" params="" file="/home/vsts/work/1/s/std/haxe/io/UInt32Array.hx" module="haxe.io.UInt32Array">
		<t path="haxe.io.ArrayBufferViewData"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.io.UInt32Array" params="" file="/home/vsts/work/1/s/std/haxe/io/UInt32Array.hx">
		<this><t path="haxe.io.UInt32ArrayData"/></this>
		<meta><m n=":hxGen"/></meta>
		<impl><class path="haxe.io._UInt32Array.UInt32Array_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/io/UInt32Array.hx" private="1" module="haxe.io.UInt32Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="33" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<get_length get="inline" set="null" line="37" static="1">
		<f a="this">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="41" static="1">
		<f a="this">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="45" static="1">
		<f a="this:index">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="49" static="1">
		<f a="this:index:value">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="57" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="61" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="65" static="1">
		<f a="this">
			<t path="haxe.io.UInt32ArrayData"/>
			<t path="haxe.io.UInt32ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="haxe.io.UInt32Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="73" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="UInt"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="84" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io._UInt32Array.UInt32Array_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/io/UInt32Array.hx" private="1" module="haxe.io.UInt32Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="33" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<get_length get="inline" set="null" line="37" static="1">
			<f a="this">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="41" static="1">
			<f a="this">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="45" static="1">
			<f a="this:index">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="49" static="1">
			<f a="this:index:value">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="57" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="61" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="65" static="1">
			<f a="this">
				<t path="haxe.io.UInt32ArrayData"/>
				<t path="haxe.io.UInt32ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="haxe.io.UInt32Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="73" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="UInt"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="84" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
		<meta><m n=":hxGen"/></meta>
	</class>
	<typedef path="haxe.io.UInt8ArrayData" params="" file="/home/vsts/work/1/s/std/haxe/io/UInt8Array.hx" module="haxe.io.UInt8Array">
		<t path="haxe.io.ArrayBufferViewData"/>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<abstract path="haxe.io.UInt8Array" params="" file="/home/vsts/work/1/s/std/haxe/io/UInt8Array.hx">
		<this><t path="haxe.io.UInt8ArrayData"/></this>
		<meta><m n=":hxGen"/></meta>
		<impl><class path="haxe.io._UInt8Array.UInt8Array_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/io/UInt8Array.hx" private="1" module="haxe.io.UInt8Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="28" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>1</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="33" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<get_length get="inline" set="null" line="37" static="1">
		<f a="this">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="41" static="1">
		<f a="this">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="45" static="1">
		<f a="this:index">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="49" static="1">
		<f a="this:index:value">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="57" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="61" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="65" static="1">
		<f a="this">
			<t path="haxe.io.UInt8ArrayData"/>
			<t path="haxe.io.UInt8ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="haxe.io.UInt8Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="73" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="84" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io._UInt8Array.UInt8Array_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/io/UInt8Array.hx" private="1" module="haxe.io.UInt8Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="33" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<get_length get="inline" set="null" line="37" static="1">
			<f a="this">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="41" static="1">
			<f a="this">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="45" static="1">
			<f a="this:index">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="49" static="1">
			<f a="this:index:value">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="57" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="61" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="65" static="1">
			<f a="this">
				<t path="haxe.io.UInt8ArrayData"/>
				<t path="haxe.io.UInt8ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" set="method" line="69" static="1"><f a="d">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="haxe.io.UInt8Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="73" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="84" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.iterators.DynamicAccessIterator" params="T" file="/home/vsts/work/1/s/std/haxe/iterators/DynamicAccessIterator.hx">
		<access final="1"><x path="haxe.DynamicAccess"><c path="haxe.iterators.DynamicAccessIterator.T"/></x></access>
		<keys final="1"><c path="Array"><c path="String"/></c></keys>
		<index><x path="Int"/></index>
		<hasNext public="1" get="inline" set="null" line="42">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="49">
			<f a=""><c path="haxe.iterators.DynamicAccessIterator.T"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="33"><f a="access">
	<x path="haxe.DynamicAccess"><c path="haxe.iterators.DynamicAccessIterator.T"/></x>
	<x path="Void"/>
</f></new>
		<haxe_doc>This iterator can be used to iterate over the values of `haxe.DynamicAccess`.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.iterators.DynamicAccessKeyValueIterator" params="T" file="/home/vsts/work/1/s/std/haxe/iterators/DynamicAccessKeyValueIterator.hx">
		<access final="1"><x path="haxe.DynamicAccess"><c path="haxe.iterators.DynamicAccessKeyValueIterator.T"/></x></access>
		<keys final="1"><c path="Array"><c path="String"/></c></keys>
		<index><x path="Int"/></index>
		<hasNext public="1" get="inline" set="null" line="42">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="49">
			<f a=""><a>
	<value><c path="haxe.iterators.DynamicAccessKeyValueIterator.T"/></value>
	<key><c path="String"/></key>
</a></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="33"><f a="access">
	<x path="haxe.DynamicAccess"><c path="haxe.iterators.DynamicAccessKeyValueIterator.T"/></x>
	<x path="Void"/>
</f></new>
		<haxe_doc>This Key/Value iterator can be used to iterate over `haxe.DynamicAccess`.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.iterators.MapKeyValueIterator" params="K:V" file="/home/vsts/work/1/s/std/haxe/iterators/MapKeyValueIterator.hx">
		<map><c path="haxe.IMap">
	<c path="haxe.iterators.MapKeyValueIterator.K"/>
	<c path="haxe.iterators.MapKeyValueIterator.V"/>
</c></map>
		<keys><t path="Iterator"><c path="haxe.iterators.MapKeyValueIterator.K"/></t></keys>
		<hasNext public="1" get="inline" set="null" line="43">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="50">
			<f a=""><a>
	<value><c path="haxe.iterators.MapKeyValueIterator.V"/></value>
	<key><c path="haxe.iterators.MapKeyValueIterator.K"/></key>
</a></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="35"><f a="map">
	<c path="haxe.IMap">
		<c path="haxe.iterators.MapKeyValueIterator.K"/>
		<c path="haxe.iterators.MapKeyValueIterator.V"/>
	</c>
	<x path="Void"/>
</f></new>
		<haxe_doc>This Key/Value iterator can be used to iterate across maps.</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":ifFeature">
				<e>"anon_read.keyValueIterator"</e>
				<e>"dynamic_read.keyValueIterator"</e>
			</m>
		</meta>
	</class>
	<class path="haxe.iterators.StringIterator" params="" file="/home/vsts/work/1/s/std/haxe/iterators/StringIterator.hx">
		<offset expr="0" line="32">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</offset>
		<s><c path="String"/></s>
		<hasNext public="1" get="inline" set="null" line="45">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="52">
			<f a=""><x path="Int"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="38">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `StringIterator` over String `s`.</haxe_doc>
		</new>
		<haxe_doc>This iterator can be used to iterate over char codes in a string.

	Note that char codes may differ across platforms because of different
	internal encoding of strings in different of runtimes.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.iterators.StringIteratorUnicode" params="" file="/home/vsts/work/1/s/std/haxe/iterators/StringIteratorUnicode.hx">
		<unicodeIterator public="1" get="inline" set="null" line="70" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.iterators.StringIteratorUnicode"/>
			</f>
			<haxe_doc>Convenience function which can be used as a static extension.</haxe_doc>
		</unicodeIterator>
		<offset expr="0" line="34">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</offset>
		<s><c path="String"/></s>
		<hasNext public="1" get="inline" set="null" line="47">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="55">
			<f a=""><x path="Int"/></f>
			<meta><m n=":access"><e>StringTools</e></m></meta>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="40">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `StringIteratorUnicode` over String `s`.</haxe_doc>
		</new>
		<haxe_doc>This iterator can be used to iterate across strings in a cross-platform
	way. It handles surrogate pairs on platforms that require it. On each
	iteration, it returns the next character code.

	Note that this has different semantics than a standard for-loop over the
	String's length due to the fact that it deals with surrogate pairs.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.iterators.StringKeyValueIterator" params="" file="/home/vsts/work/1/s/std/haxe/iterators/StringKeyValueIterator.hx">
		<offset expr="0" line="32">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</offset>
		<s><c path="String"/></s>
		<hasNext public="1" get="inline" set="null" line="45">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `KeyValueIterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="52">
			<f a=""><a>
	<value><x path="Int"/></value>
	<key><x path="Int"/></key>
</a></f>
			<haxe_doc>See `KeyValueIterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="38">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `StringKeyValueIterator` over String `s`.</haxe_doc>
		</new>
		<haxe_doc>This iterator can be used to iterate over char indexes and char codes in a string.

	Note that char codes may differ across platforms because of different
	internal encoding of strings in different runtimes.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.iterators.StringKeyValueIteratorUnicode" params="" file="/home/vsts/work/1/s/std/haxe/iterators/StringKeyValueIteratorUnicode.hx">
		<unicodeKeyValueIterator public="1" get="inline" set="null" line="73" static="1">
			<f a="s">
				<c path="String"/>
				<c path="haxe.iterators.StringKeyValueIteratorUnicode"/>
			</f>
			<haxe_doc>Convenience function which can be used as a static extension.</haxe_doc>
		</unicodeKeyValueIterator>
		<byteOffset expr="0" line="36">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</byteOffset>
		<charOffset expr="0" line="37">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</charOffset>
		<s><c path="String"/></s>
		<hasNext public="1" get="inline" set="null" line="50">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="58">
			<f a=""><a>
	<value><x path="Int"/></value>
	<key><x path="Int"/></key>
</a></f>
			<meta><m n=":access"><e>StringTools</e></m></meta>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="43">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `StringKeyValueIteratorUnicode` over String `s`.</haxe_doc>
		</new>
		<haxe_doc>This iterator can be used to iterate across strings in a cross-platform
	way. It handles surrogate pairs on platforms that require it. On each
	iteration, it returns the next character offset as key and the next
	character code as value.

	Note that in the general case, because of surrogate pairs, the key values
	should not be used as offsets for various String API operations. For the
	same reason, the last key value returned might be less than `s.length - 1`.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<abstract path="haxe.macro.ModuleCheckPolicy" params="" file="/home/vsts/work/1/s/std/haxe/macro/CompilationServer.hx" module="haxe.macro.CompilationServer">
		<this><x path="Int"/></this>
		<meta>
			<m n=":hxGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.macro._CompilationServer.ModuleCheckPolicy_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/macro/CompilationServer.hx" private="1" module="haxe.macro.CompilationServer" extern="1">
	<NoCheckFileTimeModification public="1" get="inline" set="null" expr="cast 0" line="31" static="1">
		<x path="haxe.macro.ModuleCheckPolicy"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Disables file modification checks, avoiding some filesystem operations.</haxe_doc>
	</NoCheckFileTimeModification>
	<CheckFileContentModification public="1" get="inline" set="null" expr="cast 1" line="37" static="1">
		<x path="haxe.macro.ModuleCheckPolicy"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>If a file is modified, also checks if its content changed. This check
		is not free, but useful when .hx files are auto-generated.</haxe_doc>
	</CheckFileContentModification>
	<NoCheckDependencies public="1" get="inline" set="null" expr="cast 2" line="47" static="1">
		<x path="haxe.macro.ModuleCheckPolicy"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Disables dependency checks of the module.

		This should only be used for modules that don't depend on any module that
		might change. It is effectively a promise to the compiler that the module
		is unaffected by changes made to other modules. If that promise is broken,
		the compiler is sad and things probably stop working.</haxe_doc>
	</NoCheckDependencies>
	<NoCheckShadowing public="1" get="inline" set="null" expr="cast 3" line="54" static="1">
		<x path="haxe.macro.ModuleCheckPolicy"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Disables file shadowing checks. Shadowing can occur when a new file
		is added to a class-path that has higher priority than the class-path
		of the current module file.</haxe_doc>
	</NoCheckShadowing>
	<meta>
		<m n=":hxGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.macro._CompilationServer.ModuleCheckPolicy_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/macro/CompilationServer.hx" private="1" module="haxe.macro.CompilationServer" extern="1">
		<NoCheckFileTimeModification public="1" get="inline" set="null" expr="cast 0" line="31" static="1">
			<x path="haxe.macro.ModuleCheckPolicy"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Disables file modification checks, avoiding some filesystem operations.</haxe_doc>
		</NoCheckFileTimeModification>
		<CheckFileContentModification public="1" get="inline" set="null" expr="cast 1" line="37" static="1">
			<x path="haxe.macro.ModuleCheckPolicy"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>If a file is modified, also checks if its content changed. This check
		is not free, but useful when .hx files are auto-generated.</haxe_doc>
		</CheckFileContentModification>
		<NoCheckDependencies public="1" get="inline" set="null" expr="cast 2" line="47" static="1">
			<x path="haxe.macro.ModuleCheckPolicy"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Disables dependency checks of the module.

		This should only be used for modules that don't depend on any module that
		might change. It is effectively a promise to the compiler that the module
		is unaffected by changes made to other modules. If that promise is broken,
		the compiler is sad and things probably stop working.</haxe_doc>
		</NoCheckDependencies>
		<NoCheckShadowing public="1" get="inline" set="null" expr="cast 3" line="54" static="1">
			<x path="haxe.macro.ModuleCheckPolicy"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Disables file shadowing checks. Shadowing can occur when a new file
		is added to a class-path that has higher priority than the class-path
		of the current module file.</haxe_doc>
		</NoCheckShadowing>
		<meta>
			<m n=":hxGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="haxe.macro.ContextOptions" params="" file="/home/vsts/work/1/s/std/haxe/macro/CompilationServer.hx" module="haxe.macro.CompilationServer">
		<this><x path="Int"/></this>
		<meta>
			<m n=":hxGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.macro._CompilationServer.ContextOptions_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/macro/CompilationServer.hx" private="1" module="haxe.macro.CompilationServer" extern="1">
	<NormalContext public="1" get="inline" set="null" expr="cast 0" line="61" static="1">
		<x path="haxe.macro.ContextOptions"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Affects only the normal context.</haxe_doc>
	</NormalContext>
	<MacroContext public="1" get="inline" set="null" expr="cast 1" line="66" static="1">
		<x path="haxe.macro.ContextOptions"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Affects only the macro context.</haxe_doc>
	</MacroContext>
	<NormalAndMacroContext public="1" get="inline" set="null" expr="cast 2" line="71" static="1">
		<x path="haxe.macro.ContextOptions"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Affects the normal and macro contexts.</haxe_doc>
	</NormalAndMacroContext>
	<meta>
		<m n=":hxGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.macro._CompilationServer.ContextOptions_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/macro/CompilationServer.hx" private="1" module="haxe.macro.CompilationServer" extern="1">
		<NormalContext public="1" get="inline" set="null" expr="cast 0" line="61" static="1">
			<x path="haxe.macro.ContextOptions"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Affects only the normal context.</haxe_doc>
		</NormalContext>
		<MacroContext public="1" get="inline" set="null" expr="cast 1" line="66" static="1">
			<x path="haxe.macro.ContextOptions"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Affects only the macro context.</haxe_doc>
		</MacroContext>
		<NormalAndMacroContext public="1" get="inline" set="null" expr="cast 2" line="71" static="1">
			<x path="haxe.macro.ContextOptions"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Affects the normal and macro contexts.</haxe_doc>
		</NormalAndMacroContext>
		<meta>
			<m n=":hxGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="haxe.macro.CompilationServer" params="" file="/home/vsts/work/1/s/std/haxe/macro/CompilationServer.hx">
		<haxe_doc>This class provides some methods which can be invoked from command line using
	`--macro server.field(args)`.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.macro.Compiler" params="" file="/home/vsts/work/1/s/std/haxe/macro/Compiler.hx">
		<getDefine public="1" set="method" static="1">
			<f a="key">
				<d/>
				<d/>
			</f>
			<haxe_doc>A conditional compilation flag can be set on the command line using
		`-D key=value`.

		Returns the value of a compiler flag.

		If the compiler flag is defined but no value is set,
		`Compiler.getDefine` returns `"1"` (e.g. `-D key`).

		If the compiler flag is not defined, `Compiler.getDefine` returns
		`null`.

		Note: This is a macro and cannot be called from within other macros. Refer
		to `haxe.macro.Context.definedValue` to obtain defined values in macro context.

		@see https://haxe.org/manual/lf-condition-compilation.html</haxe_doc>
		</getDefine>
		<haxe_doc>All these methods can be called for compiler configuration macros.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<abstract path="haxe.macro.IncludePosition" params="" file="/home/vsts/work/1/s/std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.macro._Compiler.IncludePosition_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/macro/Compiler.hx" private="1" module="haxe.macro.Compiler" extern="1">
	<Top public="1" get="inline" set="null" expr="cast &quot;top&quot;" line="505" static="1">
		<x path="haxe.macro.IncludePosition"/>
		<meta>
			<m n=":value"><e>cast "top"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Prepend the file content to the output file.</haxe_doc>
	</Top>
	<Closure public="1" get="inline" set="null" expr="cast &quot;closure&quot;" line="512" static="1">
		<x path="haxe.macro.IncludePosition"/>
		<meta>
			<m n=":value"><e>cast "closure"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Prepend the file content to the body of the top-level closure.

		Since the closure is in strict-mode, there may be run-time error if the input is not strict-mode-compatible.</haxe_doc>
	</Closure>
	<Inline public="1" get="inline" set="null" expr="cast &quot;inline&quot;" line="517" static="1">
		<x path="haxe.macro.IncludePosition"/>
		<meta>
			<m n=":value"><e>cast "inline"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Directly inject the file content at the call site.</haxe_doc>
	</Inline>
	<meta>
		<m n=":nativeGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.macro._Compiler.IncludePosition_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/macro/Compiler.hx" private="1" module="haxe.macro.Compiler" extern="1">
		<Top public="1" get="inline" set="null" expr="cast &quot;top&quot;" line="505" static="1">
			<x path="haxe.macro.IncludePosition"/>
			<meta>
				<m n=":value"><e>cast "top"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Prepend the file content to the output file.</haxe_doc>
		</Top>
		<Closure public="1" get="inline" set="null" expr="cast &quot;closure&quot;" line="512" static="1">
			<x path="haxe.macro.IncludePosition"/>
			<meta>
				<m n=":value"><e>cast "closure"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Prepend the file content to the body of the top-level closure.

		Since the closure is in strict-mode, there may be run-time error if the input is not strict-mode-compatible.</haxe_doc>
		</Closure>
		<Inline public="1" get="inline" set="null" expr="cast &quot;inline&quot;" line="517" static="1">
			<x path="haxe.macro.IncludePosition"/>
			<meta>
				<m n=":value"><e>cast "inline"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Directly inject the file content at the call site.</haxe_doc>
		</Inline>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="haxe.macro.NullSafetyMode" params="" file="/home/vsts/work/1/s/std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.macro._Compiler.NullSafetyMode_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/macro/Compiler.hx" private="1" module="haxe.macro.Compiler" extern="1">
	<Off public="1" get="inline" set="null" expr="cast &quot;Off&quot;" line="1" static="1">
		<x path="haxe.macro.NullSafetyMode"/>
		<meta>
			<m n=":value"><e>cast "Off"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Disable null safety.</haxe_doc>
	</Off>
	<Strict public="1" get="inline" set="null" expr="cast &quot;Strict&quot;" line="1" static="1">
		<x path="haxe.macro.NullSafetyMode"/>
		<meta>
			<m n=":value"><e>cast "Strict"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Full scale null safety.</haxe_doc>
	</Strict>
	<Loose public="1" get="inline" set="null" expr="cast &quot;Loose&quot;" line="1" static="1">
		<x path="haxe.macro.NullSafetyMode"/>
		<meta>
			<m n=":value"><e>cast "Loose"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc><![CDATA[Loose safety.
		If an expression is checked ` != null`, then it's considered safe even if it could be modified after the check.
		E.g.
		```haxe
		function example(o:{field:Null<String>}) {
			if(o.field != null) {
				mutate(o);
				var notNullable:String = o.field; //no error
			}
		}

		function mutate(o:{field:Null<String>}) {
			o.field = null;
		}
		```]]></haxe_doc>
	</Loose>
	<meta>
		<m n=":nativeGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.macro._Compiler.NullSafetyMode_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/macro/Compiler.hx" private="1" module="haxe.macro.Compiler" extern="1">
		<Off public="1" get="inline" set="null" expr="cast &quot;Off&quot;" line="1" static="1">
			<x path="haxe.macro.NullSafetyMode"/>
			<meta>
				<m n=":value"><e>cast "Off"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Disable null safety.</haxe_doc>
		</Off>
		<Strict public="1" get="inline" set="null" expr="cast &quot;Strict&quot;" line="1" static="1">
			<x path="haxe.macro.NullSafetyMode"/>
			<meta>
				<m n=":value"><e>cast "Strict"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Full scale null safety.</haxe_doc>
		</Strict>
		<Loose public="1" get="inline" set="null" expr="cast &quot;Loose&quot;" line="1" static="1">
			<x path="haxe.macro.NullSafetyMode"/>
			<meta>
				<m n=":value"><e>cast "Loose"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc><![CDATA[Loose safety.
		If an expression is checked ` != null`, then it's considered safe even if it could be modified after the check.
		E.g.
		```haxe
		function example(o:{field:Null<String>}) {
			if(o.field != null) {
				mutate(o);
				var notNullable:String = o.field; //no error
			}
		}

		function mutate(o:{field:Null<String>}) {
			o.field = null;
		}
		```]]></haxe_doc>
		</Loose>
		<meta>
			<m n=":nativeGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="haxe.macro.ComplexTypeTools" params="" file="/home/vsts/work/1/s/std/haxe/macro/ComplexTypeTools.hx">
		<toString public="1" set="method" line="39" static="1">
			<f a="c">
				<e path="haxe.macro.ComplexType"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts type `c` to a human-readable `String` representation.

		The result is guaranteed to be valid Haxe code, but there may be
		differences from the original lexical syntax.</haxe_doc>
		</toString>
		<haxe_doc>This class provides some utility methods to work with AST-level types. It is
	best used through `using haxe.macro.ComplexTypeTools` syntax and then provides
	additional methods on `haxe.macro.ComplexType` instances.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<enum path="haxe.macro.Message" params="" file="/home/vsts/work/1/s/std/haxe/macro/Context.hx" module="haxe.macro.Context">
		<Info a="msg:pos">
			<c path="String"/>
			<t path="haxe.macro.Position"/>
		</Info>
		<Warning a="msg:pos">
			<c path="String"/>
			<t path="haxe.macro.Position"/>
		</Warning>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<class path="haxe.macro.Context" params="" file="/home/vsts/work/1/s/std/haxe/macro/Context.hx">
		<haxe_doc>Context provides an API for macro programming.

	It contains common functions that interact with the macro interpreter to
	query or set information. Other API functions are available in the tools
	classes:

	- `haxe.macro.ComplexTypeTools`
	- `haxe.macro.ExprTools`
	- `haxe.macro.TypeTools`</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<typedef path="haxe.macro.Position" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<min>
				<x path="Int"/>
				<haxe_doc>Position of the first character.</haxe_doc>
			</min>
			<max>
				<x path="Int"/>
				<haxe_doc>Position of the last character.</haxe_doc>
			</max>
			<file>
				<c path="String"/>
				<haxe_doc>Reference to the filename.</haxe_doc>
			</file>
		</a>
		<haxe_doc>Represents a position in a file.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<enum path="haxe.macro.StringLiteralKind" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<DoubleQuotes/>
		<SingleQuotes/>
		<meta>
			<m n=":hxGen"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="haxe.macro.Constant" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<CInt a="v">
			<c path="String"/>
			<haxe_doc>Represents an integer literal.</haxe_doc>
		</CInt>
		<CFloat a="f">
			<c path="String"/>
			<haxe_doc>Represents a float literal.</haxe_doc>
		</CFloat>
		<CString a="s:?kind">
			<c path="String"/>
			<e path="haxe.macro.StringLiteralKind"/>
			<haxe_doc>Represents a string literal.</haxe_doc>
		</CString>
		<CIdent a="s">
			<c path="String"/>
			<haxe_doc>Represents an identifier.</haxe_doc>
		</CIdent>
		<CRegexp a="r:opt">
			<c path="String"/>
			<c path="String"/>
			<haxe_doc>Represents a regular expression literal.

		Example: `~/haxe/i`
		* The first argument _haxe_ is a string with regular expression pattern.
		* The second argument _i_ is a string with regular expression flags.

		@see https://haxe.org/manual/std-regex.html</haxe_doc>
		</CRegexp>
		<haxe_doc>Represents a constant.
	@see https://haxe.org/manual/expression-constants.html</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<enum path="haxe.macro.Binop" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpAdd><haxe_doc>`+`</haxe_doc></OpAdd>
		<OpMult><haxe_doc>`*`</haxe_doc></OpMult>
		<OpDiv><haxe_doc>`/`</haxe_doc></OpDiv>
		<OpSub><haxe_doc>`-`</haxe_doc></OpSub>
		<OpAssign><haxe_doc>`=`</haxe_doc></OpAssign>
		<OpEq><haxe_doc>`==`</haxe_doc></OpEq>
		<OpNotEq><haxe_doc>`!=`</haxe_doc></OpNotEq>
		<OpGt><haxe_doc><![CDATA[`>`]]></haxe_doc></OpGt>
		<OpGte><haxe_doc><![CDATA[`>=`]]></haxe_doc></OpGte>
		<OpLt><haxe_doc><![CDATA[`<`]]></haxe_doc></OpLt>
		<OpLte><haxe_doc><![CDATA[`<=`]]></haxe_doc></OpLte>
		<OpAnd><haxe_doc><![CDATA[`&`]]></haxe_doc></OpAnd>
		<OpOr><haxe_doc>`|`</haxe_doc></OpOr>
		<OpXor><haxe_doc>`^`</haxe_doc></OpXor>
		<OpBoolAnd><haxe_doc><![CDATA[`&&`]]></haxe_doc></OpBoolAnd>
		<OpBoolOr><haxe_doc>`||`</haxe_doc></OpBoolOr>
		<OpShl><haxe_doc><![CDATA[`<<`]]></haxe_doc></OpShl>
		<OpShr><haxe_doc><![CDATA[`>>`]]></haxe_doc></OpShr>
		<OpUShr><haxe_doc><![CDATA[`>>>`]]></haxe_doc></OpUShr>
		<OpMod><haxe_doc>`%`</haxe_doc></OpMod>
		<OpAssignOp a="op">
			<e path="haxe.macro.Binop"/>
			<haxe_doc><![CDATA[`+=`
		`-=`
		`/=`
		`*=`
		`<<=`
		`>>=`
		`>>>=`
		`|=`
		`&=`
		`^=`
		`%=`]]></haxe_doc>
		</OpAssignOp>
		<OpInterval><haxe_doc>`...`</haxe_doc></OpInterval>
		<OpArrow><haxe_doc><![CDATA[`=>`]]></haxe_doc></OpArrow>
		<OpIn><haxe_doc>`in`</haxe_doc></OpIn>
		<haxe_doc>A binary operator.
	@see https://haxe.org/manual/types-numeric-operators.html</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<enum path="haxe.macro.Unop" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpIncrement><haxe_doc>`++`</haxe_doc></OpIncrement>
		<OpDecrement><haxe_doc>`--`</haxe_doc></OpDecrement>
		<OpNot><haxe_doc>`!`</haxe_doc></OpNot>
		<OpNeg><haxe_doc>`-`</haxe_doc></OpNeg>
		<OpNegBits><haxe_doc>`~`</haxe_doc></OpNegBits>
		<haxe_doc>A unary operator.
	@see https://haxe.org/manual/types-numeric-operators.html</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<typedef path="haxe.macro.Expr" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.ExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a node in the AST.
	@see https://haxe.org/manual/macro-reification-expression.html</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<t path="haxe.macro.Expr"/>
		<haxe_doc>Represents a AST node identical to `Expr`, but it allows constraining the
	type of accepted expressions.
	@see https://haxe.org/manual/macro-ExprOf.html</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.macro.Case" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<values>
				<c path="Array"><t path="haxe.macro.Expr"/></c>
				<haxe_doc>The value expressions of the case.</haxe_doc>
			</values>
			<guard>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional guard expressions of the case, if available.</haxe_doc>
			</guard>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<haxe_doc>The expression of the case, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a switch case.
	@see https://haxe.org/manual/expression-switch.html</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.macro.Var" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<haxe_doc>The type-hint of the variable, if available.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<isFinal>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the variable can be assigned to.</haxe_doc>
			</isFinal>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<haxe_doc>The expression of the variable, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a variable in the AST.
	@see https://haxe.org/manual/expression-var.html</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.macro.Catch" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<e path="haxe.macro.ComplexType"/>
				<haxe_doc>The type of the catch.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the catch variable.</haxe_doc>
			</name>
			<expr>
				<t path="haxe.macro.Expr"/>
				<haxe_doc>The expression of the catch.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a catch in the AST.
	@https://haxe.org/manual/expression-try-catch.html</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<enum path="haxe.macro.QuoteStatus" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<Unquoted><haxe_doc>No quotes</haxe_doc></Unquoted>
		<Quoted><haxe_doc>Double quotes `"`</haxe_doc></Quoted>
		<haxe_doc>Represents the way something is quoted.</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<typedef path="haxe.macro.ObjectField" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<quotes>
				<x path="Null"><e path="haxe.macro.QuoteStatus"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>How the field name is quoted.</haxe_doc>
			</quotes>
			<field>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</field>
			<expr>
				<t path="haxe.macro.Expr"/>
				<haxe_doc>The field expression.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents the field of an object declaration.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<enum path="haxe.macro.FunctionKind" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<FAnonymous><haxe_doc>Anonymous function</haxe_doc></FAnonymous>
		<FNamed a="name:?inlined">
			<c path="String"/>
			<x path="Bool"/>
			<haxe_doc>Named function</haxe_doc>
		</FNamed>
		<FArrow><haxe_doc>Arrow function</haxe_doc></FArrow>
		<haxe_doc>Represents function kind in the AST</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<enum path="haxe.macro.ExprDef" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<EConst a="c">
			<e path="haxe.macro.Constant"/>
			<haxe_doc>A constant.</haxe_doc>
		</EConst>
		<EArray a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Array access `e1[e2]`.</haxe_doc>
		</EArray>
		<EBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Binary operator `e1 op e2`.</haxe_doc>
		</EBinop>
		<EField a="e:field">
			<t path="haxe.macro.Expr"/>
			<c path="String"/>
			<haxe_doc>Field access on `e.field`.</haxe_doc>
		</EField>
		<EParenthesis a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Parentheses `(e)`.</haxe_doc>
		</EParenthesis>
		<EObjectDecl a="fields">
			<c path="Array"><t path="haxe.macro.ObjectField"/></c>
			<haxe_doc>An object declaration.</haxe_doc>
		</EObjectDecl>
		<EArrayDecl a="values">
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>An array declaration `[el]`.</haxe_doc>
		</EArrayDecl>
		<ECall a="e:params">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>A call `e(params)`.</haxe_doc>
		</ECall>
		<ENew a="t:params">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>A constructor call `new t(params)`.</haxe_doc>
		</ENew>
		<EUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<x path="Bool"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>An unary operator `op` on `e`:

		* e++ (op = OpIncrement, postFix = true)
		* e-- (op = OpDecrement, postFix = true)
		* ++e (op = OpIncrement, postFix = false)
		* --e (op = OpDecrement, postFix = false)
		* -e (op = OpNeg, postFix = false)
		* !e (op = OpNot, postFix = false)
		* ~e (op = OpNegBits, postFix = false)</haxe_doc>
		</EUnop>
		<EVars a="vars">
			<c path="Array"><t path="haxe.macro.Var"/></c>
			<haxe_doc>Variable declarations.</haxe_doc>
		</EVars>
		<EFunction a="kind:f">
			<x path="Null"><e path="haxe.macro.FunctionKind"/></x>
			<t path="haxe.macro.Function"/>
			<haxe_doc>A function declaration.</haxe_doc>
		</EFunction>
		<EBlock a="exprs">
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>A block of expressions `{exprs}`.</haxe_doc>
		</EBlock>
		<EFor a="it:expr">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `for` expression.</haxe_doc>
		</EFor>
		<EIf a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<x path="Null"><t path="haxe.macro.Expr"/></x>
			<haxe_doc>An `if(econd) eif` or `if(econd) eif else eelse` expression.</haxe_doc>
		</EIf>
		<EWhile a="econd:e:normalWhile">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<x path="Bool"/>
			<haxe_doc>Represents a `while` expression.
		When `normalWhile` is `true` it is `while (...)`.
		When `normalWhile` is `false` it is `do {...} while (...)`.</haxe_doc>
		</EWhile>
		<ESwitch a="e:cases:edef">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Case"/></c>
			<x path="Null"><t path="haxe.macro.Expr"/></x>
			<haxe_doc>Represents a `switch` expression with related cases and an optional.
		`default` case if edef != null.</haxe_doc>
		</ESwitch>
		<ETry a="e:catches">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Catch"/></c>
			<haxe_doc>Represents a `try`-expression with related catches.</haxe_doc>
		</ETry>
		<EReturn a="?e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `return` or `return e` expression.</haxe_doc>
		</EReturn>
		<EBreak><haxe_doc>A `break` expression.</haxe_doc></EBreak>
		<EContinue><haxe_doc>A `continue` expression.</haxe_doc></EContinue>
		<EUntyped a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>An `untyped e` source code.</haxe_doc>
		</EUntyped>
		<EThrow a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `throw e` expression.</haxe_doc>
		</EThrow>
		<ECast a="e:t">
			<t path="haxe.macro.Expr"/>
			<x path="Null"><e path="haxe.macro.ComplexType"/></x>
			<haxe_doc>A `cast e` or `cast (e, m)` expression.</haxe_doc>
		</ECast>
		<EDisplay a="e:displayKind">
			<t path="haxe.macro.Expr"/>
			<e path="haxe.macro.DisplayKind"/>
			<haxe_doc>Internally used to provide completion.</haxe_doc>
		</EDisplay>
		<EDisplayNew a="t">
			<t path="haxe.macro.TypePath"/>
			<haxe_doc>Internally used to provide completion.</haxe_doc>
		</EDisplayNew>
		<ETernary a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `(econd) ? eif : eelse` expression.</haxe_doc>
		</ETernary>
		<ECheckType a="e:t">
			<t path="haxe.macro.Expr"/>
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>A `(e:t)` expression.</haxe_doc>
		</ECheckType>
		<EMeta a="s:e">
			<t path="haxe.macro.MetadataEntry"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `@m e` expression.</haxe_doc>
		</EMeta>
		<haxe_doc>Represents the kind of a node in the AST.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<enum path="haxe.macro.DisplayKind" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<DKCall/>
		<DKDot/>
		<DKStructure/>
		<DKMarked/>
		<DKPattern a="outermost"><x path="Bool"/></DKPattern>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<enum path="haxe.macro.ComplexType" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPath a="p">
			<t path="haxe.macro.TypePath"/>
			<haxe_doc>Represents the type path.</haxe_doc>
		</TPath>
		<TFunction a="args:ret">
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents a function type.
		@see https://haxe.org/manual/types-function.html</haxe_doc>
		</TFunction>
		<TAnonymous a="fields">
			<c path="Array"><t path="haxe.macro.Field"/></c>
			<haxe_doc>Represents an anonymous structure type.
		@see https://haxe.org/manual/types-anonymous-structure.html</haxe_doc>
		</TAnonymous>
		<TParent a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc><![CDATA[Represents parentheses around a type, e.g. the `(Int -> Void)` part in
		`(Int -> Void) -> String`.]]></haxe_doc>
		</TParent>
		<TExtend a="p:fields">
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<c path="Array"><t path="haxe.macro.Field"/></c>
			<haxe_doc><![CDATA[Represents typedef extensions `> Iterable<T>`.
		The array `p` holds the type paths to the given types.
		@see https://haxe.org/manual/type-system-extensions.html]]></haxe_doc>
		</TExtend>
		<TOptional a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents an optional type.</haxe_doc>
		</TOptional>
		<TNamed a="n:t">
			<c path="String"/>
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents a type with a name.</haxe_doc>
		</TNamed>
		<TIntersection a="tl">
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<haxe_doc><![CDATA[Represents an intersection type `T1 & T2 & ... & TN`.]]></haxe_doc>
		</TIntersection>
		<haxe_doc>Represents a type syntax in the AST.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<typedef path="haxe.macro.TypePath" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<sub>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sub is set on module sub-type access:
		`pack.Module.Type` has name = Module, sub = Type, if available.</haxe_doc>
			</sub>
			<params>
				<x path="Null"><c path="Array"><e path="haxe.macro.TypeParam"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Optional parameters of the type path.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>Represents the package of the type path.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type path.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a type path in the AST.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<enum path="haxe.macro.TypeParam" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPType a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc></haxe_doc>
		</TPType>
		<TPExpr a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc></haxe_doc>
		</TPExpr>
		<haxe_doc><![CDATA[Represents a concrete type parameter in the AST.

	Haxe allows expressions in concrete type parameters, e.g.
	`new YourType<["hello", "world"]>`. In that case the value is `TPExpr` while
	in the normal case it's `TPType`.]]></haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<typedef path="haxe.macro.TypeParamDecl" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the type parameter.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the type parameter.</haxe_doc>
			</meta>
			<constraints>
				<x path="Null"><c path="Array"><e path="haxe.macro.ComplexType"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional constraints of the type parameter.</haxe_doc>
			</constraints>
		</a>
		<haxe_doc>Represents a type parameter declaration in the AST.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.macro.Function" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<ret>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<haxe_doc>The return type-hint of the function, if available.</haxe_doc>
			</ret>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An optional list of function parameter type declarations.</haxe_doc>
			</params>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<haxe_doc>The expression of the function body, if available.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><t path="haxe.macro.FunctionArg"/></c>
				<haxe_doc>A list of function arguments.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the AST.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<value>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional value of the function argument, if available.</haxe_doc>
			</value>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<haxe_doc>The type-hint of the function argument, if available.</haxe_doc>
			</type>
			<opt>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the function argument is optional.</haxe_doc>
			</opt>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the function argument.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the function argument.</haxe_doc>
			</meta>
		</a>
		<haxe_doc>Represents a function argument in the AST.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.macro.MetadataEntry" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the metadata entry.</haxe_doc>
			</pos>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.Expr"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the metadata entry.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the metadata entry.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a metadata entry in the AST.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.macro.Metadata" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
		<haxe_doc>Represents metadata in the AST.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.macro.Field" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the field.</haxe_doc>
			</pos>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldType"/>
				<haxe_doc>The kind of the field.</haxe_doc>
			</kind>
			<doc>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the field, if available. If the field has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
			<access>
				<x path="Null"><c path="Array"><e path="haxe.macro.Access"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The access modifiers of the field. By default fields have private access.
		@see https://haxe.org/manual/class-field-access-modifier.html</haxe_doc>
			</access>
		</a>
		<haxe_doc>Represents a field in the AST.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<enum path="haxe.macro.Access" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<APublic><haxe_doc>Public access modifier, grants access from anywhere.
		@see https://haxe.org/manual/class-field-visibility.html</haxe_doc></APublic>
		<APrivate><haxe_doc>Private access modifier, grants access to class and its sub-classes
		only.
		@see https://haxe.org/manual/class-field-visibility.html</haxe_doc></APrivate>
		<AStatic><haxe_doc>Static access modifier.</haxe_doc></AStatic>
		<AOverride><haxe_doc>Override access modifier.
		@see https://haxe.org/manual/class-field-override.html</haxe_doc></AOverride>
		<ADynamic><haxe_doc>Dynamic (re-)bindable access modifier.
		@see https://haxe.org/manual/class-field-dynamic.html</haxe_doc></ADynamic>
		<AInline><haxe_doc>Inline access modifier. Allows expressions to be directly inserted in
		place of calls to them.
		@see https://haxe.org/manual/class-field-inline.html</haxe_doc></AInline>
		<AMacro><haxe_doc>Macros access modifier. Allows expression macro functions. These are
		normal functions which are executed as soon as they are typed.</haxe_doc></AMacro>
		<AFinal><haxe_doc>Final access modifier. For functions, they can not be overridden. For
		variables, it means they can be assigned to only once.</haxe_doc></AFinal>
		<AExtern><haxe_doc>Extern access modifier.</haxe_doc></AExtern>
		<haxe_doc>Represents an access modifier.
	@see https://haxe.org/manual/class-field-access-modifier.html</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="haxe.macro.FieldType" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<FVar a="t:?e">
			<x path="Null"><e path="haxe.macro.ComplexType"/></x>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Represents a variable field type.</haxe_doc>
		</FVar>
		<FFun a="f">
			<t path="haxe.macro.Function"/>
			<haxe_doc>Represents a function field type.</haxe_doc>
		</FFun>
		<FProp a="get:set:?t:?e">
			<c path="String"/>
			<c path="String"/>
			<e path="haxe.macro.ComplexType"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Represents a property with getter and setter field type.</haxe_doc>
		</FProp>
		<haxe_doc>Represents the field type in the AST.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<typedef path="haxe.macro.TypeDefinition" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position to the type definition.</haxe_doc>
			</pos>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The parameter type declarations of the type definition.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type definition.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type definition.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the type definition.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.TypeDefKind"/>
				<haxe_doc>The kind of the type definition.</haxe_doc>
			</kind>
			<isExtern>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<fields>
				<c path="Array"><t path="haxe.macro.Field"/></c>
				<haxe_doc>The fields of the type definition.</haxe_doc>
			</fields>
			<doc>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the type, if available. If the type has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a type definition.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<enum path="haxe.macro.TypeDefKind" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TDEnum><haxe_doc>Represents an enum kind.</haxe_doc></TDEnum>
		<TDStructure><haxe_doc>Represents a structure kind.</haxe_doc></TDStructure>
		<TDClass a="?superClass:?interfaces:?isInterface:?isFinal">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<x path="Bool"/>
			<x path="Bool"/>
			<haxe_doc>Represents a class kind.</haxe_doc>
		</TDClass>
		<TDAlias a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents an alias/typedef kind.</haxe_doc>
		</TDAlias>
		<TDAbstract a="tthis:?from:?to">
			<x path="Null"><e path="haxe.macro.ComplexType"/></x>
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<haxe_doc>Represents an abstract kind.</haxe_doc>
		</TDAbstract>
		<haxe_doc>Represents a type definition kind.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<class path="haxe.macro.Error" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<message public="1">
			<c path="String"/>
			<haxe_doc>The error message.</haxe_doc>
		</message>
		<pos public="1">
			<t path="haxe.macro.Position"/>
			<haxe_doc>The position of the error.</haxe_doc>
		</pos>
		<toString set="method" line="995">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the string representation of the error.</haxe_doc>
		</toString>
		<new public="1" set="method" line="987">
			<f a="m:p">
				<c path="String"/>
				<t path="haxe.macro.Position"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Instantiates an error with given message and position.</haxe_doc>
		</new>
		<haxe_doc>This error can be used to handle or produce compilation errors in macros.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<enum path="haxe.macro.ImportMode" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<INormal><haxe_doc>Represents a default import `import c`.</haxe_doc></INormal>
		<IAsName a="alias">
			<c path="String"/>
			<haxe_doc>Represents the alias import `import c as alias`.</haxe_doc>
		</IAsName>
		<IAll><haxe_doc>Represents the wildcard import `import *`.</haxe_doc></IAll>
		<haxe_doc>Represents the import mode.
	@see https://haxe.org/manual/type-system-import.html</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<typedef path="haxe.macro.ImportExpr" params="" file="/home/vsts/work/1/s/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<path>
				<c path="Array"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
</a></c>
				<haxe_doc>The path to the import expression.</haxe_doc>
			</path>
			<mode>
				<e path="haxe.macro.ImportMode"/>
				<haxe_doc>The mode of the import expression.</haxe_doc>
			</mode>
		</a>
		<haxe_doc>Represents the import expression.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<class path="haxe.macro.ExprTools" params="" file="/home/vsts/work/1/s/std/haxe/macro/ExprTools.hx">
		<toString public="1" set="method" line="44" static="1">
			<f a="e">
				<t path="haxe.macro.Expr"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts expression `e` to a human-readable String representation.

		The result is guaranteed to be valid Haxe code, but there may be
		differences from the original lexical syntax.</haxe_doc>
		</toString>
		<iter public="1" set="method" line="71" static="1">
			<f a="e:f">
				<t path="haxe.macro.Expr"/>
				<f a="">
					<t path="haxe.macro.Expr"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls function `f` on each sub-expression of `e`.

		If `e` has no sub-expressions, this operation has no effect.

		Otherwise `f` is called once per sub-expression of `e`, with the
		sub-expression as argument. These calls are done in order of the
		sub-expression declarations.

		This method does not call itself recursively. It should instead be used
		in a recursive function which handles the expression nodes of interest.

		Usage example:
		```haxe
		function findStrings(e:Expr) {
			switch(e.expr) {
				case EConst(CString(s)):
					// handle s
				case _:
					ExprTools.iter(e, findStrings);
			}
		}
		```</haxe_doc>
		</iter>
		<map public="1" set="method" line="140" static="1">
			<f a="e:f">
				<t path="haxe.macro.Expr"/>
				<f a="">
					<t path="haxe.macro.Expr"/>
					<t path="haxe.macro.Expr"/>
				</f>
				<t path="haxe.macro.Expr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of `e` by calling `f` on each of them.

		If `e` has no sub-expressions, this operation returns `e` unchanged.

		Otherwise `f` is called once per sub-expression of `e`, with the
		sub-expression as argument. These calls are done in order of the
		sub-expression declarations.

		This method does not call itself recursively. It should instead be used
		in a recursive function which handles the expression nodes of interest.

		Usage example:
		```haxe
		function capitalizeStrings(e:Expr) {
			return switch(e.expr) {
				case EConst(CString(s)):
					{ expr: EConst(CString(s.toUpperCase())), pos: e.pos };
				case _:
					ExprTools.map(e, capitalizeStrings);
			}
		}
		```</haxe_doc>
		</map>
		<getValue public="1" set="method" line="229" static="1">
			<f a="e">
				<t path="haxe.macro.Expr"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Returns the value `e` represents.

		Supported expressions are:

		 - `Int`, `Float` and `String` literals
		 - identifiers `true`, `false` and `null`
		 - structure declarations if all their fields are values
		 - array declarations if all their elements are values
		 - unary operators `-`, `!` and `~` if the operand is a value
		 - binary operators except `=>`, `...` and assignments

		Parentheses, metadata and the `untyped` keyword are ignored.

		If any non-value is encountered, an exception of type `String` is
		thrown.

		If `e` is null, the result is unspecified.]]></haxe_doc>
		</getValue>
		<opt get="inline" set="null" line="289" static="1"><f a="e:f">
	<x path="Null"><t path="haxe.macro.Expr"/></x>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<t path="haxe.macro.Expr"/>
	</f>
	<t path="haxe.macro.Expr"/>
</f></opt>
		<opt2 get="inline" set="null" line="292" static="1"><f a="e:f">
	<x path="Null"><t path="haxe.macro.Expr"/></x>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></opt2>
		<haxe_doc>This class provides some utility methods to work with expressions. It is
	best used through 'using haxe.macro.ExprTools' syntax and then provides
	additional methods on haxe.macro.Expr instances.

	While mainly intended to be used in macros, it works in non-macro code as
	well.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.macro.ExprArrayTools" params="" file="/home/vsts/work/1/s/std/haxe/macro/ExprTools.hx" module="haxe.macro.ExprTools">
		<map public="1" set="method" line="302" static="1"><f a="el:f">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<t path="haxe.macro.Expr"/>
	</f>
	<c path="Array"><t path="haxe.macro.Expr"/></c>
</f></map>
		<iter public="1" set="method" line="309" static="1"><f a="el:f">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></iter>
		<haxe_doc>This class provides functions on expression arrays for convenience. For a
	detailed reference on each method, see the documentation of ExprTools.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.macro.Format" params="" file="/home/vsts/work/1/s/std/haxe/macro/Format.hx">
		<haxe_doc>The actual macro implemented for Std.format</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<typedef path="haxe.macro.JSGenApi" params="" file="/home/vsts/work/1/s/std/haxe/macro/JSGenApi.hx">
		<a>
			<types>
				<c path="Array"><e path="haxe.macro.Type"/></c>
				<haxe_doc>all the types that were compiled by Haxe</haxe_doc>
			</types>
			<setTypeAccessor set="method">
				<f a="callb">
					<f a="">
						<e path="haxe.macro.Type"/>
						<c path="String"/>
					</f>
					<x path="Void"/>
				</f>
				<haxe_doc>define the JS code that gets generated when a class or enum is accessed in a typed expression</haxe_doc>
			</setTypeAccessor>
			<setCurrentClass set="method">
				<f a="c">
					<t path="haxe.macro.ClassType"/>
					<x path="Void"/>
				</f>
				<haxe_doc>select the current classe</haxe_doc>
			</setCurrentClass>
			<quoteString set="method">
				<f a="s">
					<c path="String"/>
					<c path="String"/>
				</f>
				<haxe_doc>quote and escape the given string constant</haxe_doc>
			</quoteString>
			<outputFile>
				<c path="String"/>
				<haxe_doc>the file in which the JS code can be generated</haxe_doc>
			</outputFile>
			<main>
				<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
				<haxe_doc>the main call expression, if a -main class is defined</haxe_doc>
			</main>
			<isKeyword set="method">
				<f a="ident">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>tells if the given identifier is a JS keyword</haxe_doc>
			</isKeyword>
			<hasFeature set="method">
				<f a="f">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>check if a feature is used</haxe_doc>
			</hasFeature>
			<generateValue set="method">
				<f a="e">
					<t path="haxe.macro.TypedExpr"/>
					<c path="String"/>
				</f>
				<haxe_doc>generate the JS code for a given typed expression-value</haxe_doc>
			</generateValue>
			<generateStatement set="method">
				<f a="e">
					<t path="haxe.macro.TypedExpr"/>
					<c path="String"/>
				</f>
				<haxe_doc>generate the JS code for any given typed expression</haxe_doc>
			</generateStatement>
			<buildMetaData set="method">
				<f a="t">
					<t path="haxe.macro.BaseType"/>
					<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
				</f>
				<haxe_doc>create the metadata expression for the given type</haxe_doc>
			</buildMetaData>
			<addFeature set="method">
				<f a="f">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>add a feature</haxe_doc>
			</addFeature>
		</a>
		<haxe_doc>This is the api that is passed to the custom JS generator.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<class path="haxe.macro.MacroStringTools" params="" file="/home/vsts/work/1/s/std/haxe/macro/MacroStringTools.hx">
		<toFieldExpr public="1" set="method" line="84" static="1">
			<f a="sl:?pos">
				<c path="Array"><c path="String"/></c>
				<t path="haxe.macro.Position"/>
				<t path="haxe.macro.Expr"/>
			</f>
			<haxe_doc>Converts an array of Strings `sl` to a field expression.

		If `sl` has no elements, the result is null.

		If `sl` has one element, the result is `EConst(CIdent(sl[0])`.

		Otherwise the result is a chain of `EField` nodes.

		If `sl` is null, the result is unspecified.</haxe_doc>
		</toFieldExpr>
		<toDotPath public="1" set="method" line="107" static="1">
			<f a="pack:name">
				<c path="Array"><c path="String"/></c>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts a path given by package `pack` and name `name` to a `String`
		separated by dots.

		If `pack` has no elements, the result is `name`.

		If `pack` is null, the result is unspecified.

		Otherwise the elements of `pack` are joined with a separating dot, with
		an appended dot separating the result from `name`.</haxe_doc>
		</toDotPath>
		<toComplex public="1" set="method" line="111" static="1"><f a="path">
	<c path="String"/>
	<e path="haxe.macro.ComplexType"/>
</f></toComplex>
		<haxe_doc>This class provides some utility methods to work with strings in macro
	context.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.macro.MacroType" params="Const" file="/home/vsts/work/1/s/std/haxe/macro/MacroType.hx" extern="1">
		<haxe_doc><![CDATA[This type is meant to be used to generate custom types using a macro.
	For instance by doing MacroType<[my.Class.myMacro(55)]>]]></haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</class>
	<class path="haxe.macro.PositionTools" params="" file="/home/vsts/work/1/s/std/haxe/macro/PositionTools.hx">
		<here public="1" set="method" static="1">
			<f a=""><t path="haxe.macro.Position"/></f>
			<haxe_doc>Returns the `Position` where the caller of `here` is.</haxe_doc>
		</here>
		<getInfos public="1" set="method" line="44" static="1">
			<f a="p">
				<t path="haxe.macro.Position"/>
				<a>
					<min><x path="Int"/></min>
					<max><x path="Int"/></max>
					<file><c path="String"/></file>
				</a>
			</f>
			<haxe_doc>Like `Context.getPosInfos`, except this method is available on all platforms.</haxe_doc>
		</getInfos>
		<make public="1" set="method" line="55" static="1">
			<f a="inf">
				<a>
					<min><x path="Int"/></min>
					<max><x path="Int"/></max>
					<file><c path="String"/></file>
				</a>
				<t path="haxe.macro.Position"/>
			</f>
			<haxe_doc>Like `Context.makePosition`, except this method is available on all platforms.</haxe_doc>
		</make>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.macro.Printer" params="" file="/home/vsts/work/1/s/std/haxe/macro/Printer.hx">
		<tabs><c path="String"/></tabs>
		<tabString><c path="String"/></tabString>
		<printUnop public="1" set="method" line="43"><f a="op">
	<e path="haxe.macro.Unop"/>
	<c path="String"/>
</f></printUnop>
		<printBinop public="1" set="method" line="52"><f a="op">
	<e path="haxe.macro.Binop"/>
	<c path="String"/>
</f></printBinop>
		<escapeString set="method" line="81"><f a="s:delim">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></escapeString>
		<printFormatString public="1" set="method" line="90"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></printFormatString>
		<printString public="1" set="method" line="94"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></printString>
		<printConstant public="1" set="method" line="98"><f a="c">
	<e path="haxe.macro.Constant"/>
	<c path="String"/>
</f></printConstant>
		<printTypeParam public="1" set="method" line="106"><f a="param">
	<e path="haxe.macro.TypeParam"/>
	<c path="String"/>
</f></printTypeParam>
		<printTypePath public="1" set="method" line="112"><f a="tp">
	<t path="haxe.macro.TypePath"/>
	<c path="String"/>
</f></printTypePath>
		<printComplexType public="1" set="method" line="119"><f a="ct">
	<e path="haxe.macro.ComplexType"/>
	<c path="String"/>
</f></printComplexType>
		<printMetadata public="1" set="method" line="139"><f a="meta">
	<t path="haxe.macro.MetadataEntry"/>
	<c path="String"/>
</f></printMetadata>
		<printAccess public="1" set="method" line="142"><f a="access">
	<e path="haxe.macro.Access"/>
	<c path="String"/>
</f></printAccess>
		<printField public="1" set="method" line="155"><f a="field">
	<t path="haxe.macro.Field"/>
	<c path="String"/>
</f></printField>
		<printTypeParamDecl public="1" set="method" line="173"><f a="tpd">
	<t path="haxe.macro.TypeParamDecl"/>
	<c path="String"/>
</f></printTypeParamDecl>
		<printFunctionArg public="1" set="method" line="178"><f a="arg">
	<t path="haxe.macro.FunctionArg"/>
	<c path="String"/>
</f></printFunctionArg>
		<printFunction public="1" set="method" line="181"><f a="func">
	<t path="haxe.macro.Function"/>
	<c path="String"/>
</f></printFunction>
		<printVar public="1" set="method" line="189"><f a="v">
	<t path="haxe.macro.Var"/>
	<c path="String"/>
</f></printVar>
		<printObjectFieldKey public="1" set="method" line="192"><f a="of">
	<t path="haxe.macro.ObjectField"/>
	<c path="String"/>
</f></printObjectFieldKey>
		<printObjectField public="1" set="method" line="199"><f a="of">
	<t path="haxe.macro.ObjectField"/>
	<c path="String"/>
</f></printObjectField>
		<printExpr public="1" set="method" line="203"><f a="e">
	<t path="haxe.macro.Expr"/>
	<c path="String"/>
</f></printExpr>
		<printExprs public="1" set="method" line="262"><f a="el:sep">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<c path="String"/>
	<c path="String"/>
</f></printExprs>
		<printExtension set="method" line="266"><f a="tpl:fields">
	<c path="Array"><t path="haxe.macro.TypePath"/></c>
	<c path="Array"><t path="haxe.macro.Field"/></c>
	<c path="String"/>
</f></printExtension>
		<printStructure set="method" line="273"><f a="fields">
	<c path="Array"><t path="haxe.macro.Field"/></c>
	<c path="String"/>
</f></printStructure>
		<printTypeDefinition public="1" set="method" line="277">
			<f a="t:?printPackage" v=":true">
				<t path="haxe.macro.TypeDefinition"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ printPackage : true }</e></m></meta>
		</printTypeDefinition>
		<printFieldWithDelimiter set="method" line="369"><f a="f">
	<t path="haxe.macro.Field"/>
	<c path="String"/>
</f></printFieldWithDelimiter>
		<opt params="T" set="method" line="379">
			<f a="v:f:?prefix" v="::&quot;&quot;">
				<c path="opt.T"/>
				<f a="">
					<c path="opt.T"/>
					<c path="String"/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ prefix : "" }</e></m></meta>
		</opt>
		<printExprWithPositions public="1" set="method" line="382"><f a="e">
	<t path="haxe.macro.Expr"/>
	<c path="String"/>
</f></printExprWithPositions>
		<new public="1" set="method" line="38">
			<f a="?tabString" v="&quot;\t&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ tabString : "\t" }</e></m></meta>
		</new>
		<haxe_doc>This class provides some utility methods to convert elements from the
	macro context to a human-readable String representation.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<typedef path="haxe.macro.TExprTools" params="" file="/home/vsts/work/1/s/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.ExprTools"/>
		<haxe_doc><![CDATA[This class can be added via `using haxe.macro.Tools` in order to enable
	`using` functionality on these macro tool classes:

	- `haxe.macro.ExprTools`
	- `haxe.macro.ComplexTypeTools`
	- `haxe.macro.TypeTools`
	- `haxe.macro.MacroStringTools`
	- `haxe.macro.TypedExprTools`
	- `haxe.macro.PositionTools`

	  @see <https://haxe.org/manual/lf-static-extension.html>]]></haxe_doc>
		<meta>
			<m n=":nativeGen"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</typedef>
	<typedef path="haxe.macro.TComplexTypeTools" params="" file="/home/vsts/work/1/s/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.ComplexTypeTools"/>
		<meta>
			<m n=":nativeGen"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</typedef>
	<typedef path="haxe.macro.TTypeTools" params="" file="/home/vsts/work/1/s/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.TypeTools"/>
		<meta>
			<m n=":nativeGen"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</typedef>
	<typedef path="haxe.macro.TMacroStringTools" params="" file="/home/vsts/work/1/s/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.MacroStringTools"/>
		<meta>
			<m n=":nativeGen"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</typedef>
	<typedef path="haxe.macro.TTypedExprTools" params="" file="/home/vsts/work/1/s/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.TypedExprTools"/>
		<meta>
			<m n=":nativeGen"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</typedef>
	<typedef path="haxe.macro.TPositionTools" params="" file="/home/vsts/work/1/s/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.PositionTools"/>
		<meta>
			<m n=":nativeGen"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</typedef>
	<typedef path="haxe.macro.Ref" params="T" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<toString set="method"><f a=""><c path="String"/></f></toString>
			<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
		</a>
		<haxe_doc>Represents a reference to internal compiler structure. It exists to avoid
	expensive encoding if it is not required and to ensure that physical
	equality remains intact.

	A structure is only encoded when user requests it through `ref.get()`.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<enum path="haxe.macro.Type" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx">
		<TMono a="t">
			<t path="haxe.macro.Ref"><x path="Null"><e path="haxe.macro.Type"/></x></t>
			<haxe_doc>Represents a monomorph.

		@see https://haxe.org/manual/types-monomorph.html</haxe_doc>
		</TMono>
		<TEnum a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents an enum instance.

		@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		</TEnum>
		<TInst a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents a class instance.

		@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		</TInst>
		<TType a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents a typedef.

		@see https://haxe.org/manual/type-system-typedef.html</haxe_doc>
		</TType>
		<TFun a="args:ret">
			<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<e path="haxe.macro.Type"/>
			<haxe_doc>Represents a function type.

		@see https://haxe.org/manual/types-function.html</haxe_doc>
		</TFun>
		<TAnonymous a="a">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AnonType"/></t>
			<haxe_doc>Represents an anonymous structure type.

		@see https://haxe.org/manual/types-anonymous-structure.html</haxe_doc>
		</TAnonymous>
		<TDynamic a="t">
			<x path="Null"><e path="haxe.macro.Type"/></x>
			<haxe_doc>Represents Dynamic.

		@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		</TDynamic>
		<TLazy a="f">
			<f a=""><e path="haxe.macro.Type"/></f>
			<haxe_doc>Used internally by the compiler to delay some typing.</haxe_doc>
		</TLazy>
		<TAbstract a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents an abstract type.

		@see https://haxe.org/manual/types-abstract.html</haxe_doc>
		</TAbstract>
		<haxe_doc>Represents a type.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<typedef path="haxe.macro.AnonType" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<status>
				<e path="haxe.macro.AnonStatus"/>
				<haxe_doc>The status/kind of the structure.</haxe_doc>
			</status>
			<fields>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The class fields of the structure.</haxe_doc>
			</fields>
		</a>
		<haxe_doc>Represents information for anonymous structure types.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<enum path="haxe.macro.AnonStatus" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<AClosed><haxe_doc>A closed structure is considered complete. That is, no further fields
		can be added to it.</haxe_doc></AClosed>
		<AOpened><haxe_doc>An open structure allows having additional fields added to it, which is
		used during type inference. It is closed upon unification.</haxe_doc></AOpened>
		<AConst><haxe_doc>A const structure is one that appears directly in syntax. It cannot be
		assigned to a smaller structure type (that is, it does not allow
		structural sub-typing).</haxe_doc></AConst>
		<AExtend a="tl">
			<t path="haxe.macro.Ref"><c path="Array"><e path="haxe.macro.Type"/></c></t>
			<haxe_doc>Represents a structure which extends one or multiple structures defined
		in `tl`.

		@see https://haxe.org/manual/type-system-extensions.html</haxe_doc>
		</AExtend>
		<AClassStatics a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<haxe_doc>A structure that represents the static fields of a class.</haxe_doc>
		</AClassStatics>
		<AEnumStatics a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<haxe_doc>A structure that represents the constructors of an enum.</haxe_doc>
		</AEnumStatics>
		<AAbstractStatics a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<haxe_doc>A structure that represents the static fields of an abstract.</haxe_doc>
		</AAbstractStatics>
		<haxe_doc>Represents the kind of the anonymous structure type.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<typedef path="haxe.macro.TypeParameter" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the type parameter. It is guaranteed to be a `TInst` with a
		`KTypeParameter` kind.</haxe_doc>
			</t>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents the declaration of type parameters.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.macro.ClassField" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the class field.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the class field.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the class field.</haxe_doc>
			</params>
			<overloads>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The overload fields of the class field.</haxe_doc>
			</overloads>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the class field.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the class field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldKind"/>
				<haxe_doc>The class field kind.</haxe_doc>
			</kind>
			<isPublic>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is public.</haxe_doc>
			</isPublic>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is final.</haxe_doc>
			</isFinal>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is extern.</haxe_doc>
			</isExtern>
			<expr set="method">
				<f a=""><x path="Null"><t path="haxe.macro.TypedExpr"/></x></f>
				<haxe_doc>Returns the typed expression of the class field.</haxe_doc>
			</expr>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a class field.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.macro.EnumField" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the enum constructor.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the enum constructor.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the enum constructor.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the enum constructor.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the enum constructor.</haxe_doc>
			</meta>
			<index>
				<x path="Int"/>
				<haxe_doc>The index of the enum constructor, i.e. in which position it appears
		in the syntax.</haxe_doc>
			</index>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the enum constructor.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents an enum constructor.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<enum path="haxe.macro.ClassKind" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<KNormal><haxe_doc>A normal class.</haxe_doc></KNormal>
		<KTypeParameter a="constraints">
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>A type parameter class with a set of constraints.</haxe_doc>
		</KTypeParameter>
		<KExtension a="cl:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>A structurally extended class.

		@deprecated</haxe_doc>
		</KExtension>
		<KExpr a="expr">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A special kind of class to encode expressions into type parameters.</haxe_doc>
		</KExpr>
		<KGeneric><haxe_doc>A `@:generic` base class.</haxe_doc></KGeneric>
		<KGenericInstance a="cl:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>A concrete `@:generic` instance, referencing the original class and the
		applied type parameters.</haxe_doc>
		</KGenericInstance>
		<KMacroType><haxe_doc>A special class for `haxe.macro.MacroType`.

		@deprecated</haxe_doc></KMacroType>
		<KAbstractImpl a="a">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<haxe_doc>An implementation class of an abstract, i.e. where all its run-time code
		is.</haxe_doc>
		</KAbstractImpl>
		<KGenericBuild><haxe_doc>A `@:genericBuild` class</haxe_doc></KGenericBuild>
		<haxe_doc>Represents the kind of a class.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<typedef path="haxe.macro.BaseType" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The information that all types (`ClassType`, `EnumType`, `DefType`,
	`AbstractType`) have in common.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.macro.ClassType" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<superClass>
				<x path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></x>
				<haxe_doc>The parent class and its type parameters, if available.</haxe_doc>
			</superClass>
			<statics>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The static fields of the class.</haxe_doc>
			</statics>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<overrides>
				<c path="Array"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></c>
				<haxe_doc>The list of fields that have override status.</haxe_doc>
			</overrides>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.ClassKind"/>
				<haxe_doc>The kind of the class.</haxe_doc>
			</kind>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isInterface>
				<x path="Bool"/>
				<haxe_doc>If true the type is an interface, otherwise it is a class.</haxe_doc>
			</isInterface>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>If true the class is final and cannot be extended.</haxe_doc>
			</isFinal>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<interfaces>
				<c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c>
				<haxe_doc>The implemented interfaces and their type parameters.</haxe_doc>
			</interfaces>
			<init>
				<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
				<haxe_doc>The `__init__` expression of the class, if available.</haxe_doc>
			</init>
			<fields>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The member fields of the class.</haxe_doc>
			</fields>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructor>
				<x path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></x>
				<haxe_doc>The constructor of the class, if available.</haxe_doc>
			</constructor>
		</a>
		<haxe_doc>Represents a class type.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.macro.EnumType" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<names>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>An ordered list of enum constructor names.</haxe_doc>
			</names>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructs>
				<t path="Map">
					<c path="String"/>
					<t path="haxe.macro.EnumField"/>
				</t>
				<haxe_doc>The available enum constructors.</haxe_doc>
			</constructs>
		</a>
		<haxe_doc>Represents an enum type.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.macro.DefType" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The target type of the typedef.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a typedef.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.macro.AbstractType" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<unops>
				<c path="Array"><a>
	<postFix><x path="Bool"/></postFix>
	<op><e path="haxe.macro.Unop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined unary operators of the abstract.</haxe_doc>
			</unops>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The underlying type of the abstract.</haxe_doc>
			</type>
			<to>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><x path="Null"><t path="haxe.macro.ClassField"/></x></field>
</a></c>
				<haxe_doc>The available implicit to-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</to>
			<resolveWrite>
				<x path="Null"><t path="haxe.macro.ClassField"/></x>
				<haxe_doc>The method used for resolving unknown field access, if available.</haxe_doc>
			</resolveWrite>
			<resolve>
				<x path="Null"><t path="haxe.macro.ClassField"/></x>
				<haxe_doc>The method used for resolving unknown field access, if available.</haxe_doc>
			</resolve>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<impl>
				<x path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></x>
				<haxe_doc>The implementation class of the abstract, if available.</haxe_doc>
			</impl>
			<from>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><x path="Null"><t path="haxe.macro.ClassField"/></x></field>
</a></c>
				<haxe_doc>The available implicit from-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</from>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<binops>
				<c path="Array"><a>
	<op><e path="haxe.macro.Binop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined binary operators of the abstract.</haxe_doc>
			</binops>
			<array>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The defined array-access fields of the abstract.</haxe_doc>
			</array>
		</a>
		<haxe_doc>Represents an abstract type.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.macro.MetaAccess" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<remove set="method">
				<f a="name">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Removes all `name` metadata entries from the origin of `this`
		MetaAccess.

		This method might clear several metadata entries of the same name.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `remove` has no effect on that array.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</remove>
			<has set="method">
				<f a="name">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>Tells if the origin of `this` MetaAccess has a `name` metadata entry.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</has>
			<get set="method">
				<f a=""><t path="haxe.macro.Metadata"/></f>
				<haxe_doc>Return the wrapped `Metadata` array.

		Modifying this array has no effect on the origin of `this` MetaAccess.
		The `add` and `remove` methods can be used for that.</haxe_doc>
			</get>
			<extract set="method">
				<f a="name">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
				</f>
				<haxe_doc>Extract metadata entries by given `name`.

		If there's no metadata with such name, empty array `[]` is returned.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</extract>
			<add set="method">
				<f a="name:params:pos">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.Expr"/></c>
					<t path="haxe.macro.Position"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Adds the metadata specified by `name`, `params` and `pos` to the origin
		of `this` MetaAccess.

		Metadata names are not unique during compilation, so this method never
		overwrites a previous metadata.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `add` has no effect on that array.

		If any argument is null, compilation fails with an error.</haxe_doc>
			</add>
		</a>
		<haxe_doc>MetaAccess is a wrapper for the `Metadata` array. It can be used to add
	metadata to and remove metadata from its origin.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<enum path="haxe.macro.FieldKind" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<FVar a="read:write">
			<e path="haxe.macro.VarAccess"/>
			<e path="haxe.macro.VarAccess"/>
			<haxe_doc>A variable of property, depending on the `read` and `write` values.</haxe_doc>
		</FVar>
		<FMethod a="k">
			<e path="haxe.macro.MethodKind"/>
			<haxe_doc>A method</haxe_doc>
		</FMethod>
		<haxe_doc>Represents a field kind.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<enum path="haxe.macro.VarAccess" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<AccNormal><haxe_doc>Normal access (`default`).</haxe_doc></AccNormal>
		<AccNo><haxe_doc>Private access (`null`).</haxe_doc></AccNo>
		<AccNever><haxe_doc>No access (`never`).</haxe_doc></AccNever>
		<AccResolve><haxe_doc>Unused.</haxe_doc></AccResolve>
		<AccCall><haxe_doc>Access through accessor function (`get`, `set`, `dynamic`).</haxe_doc></AccCall>
		<AccInline><haxe_doc>Inline access (`inline`).</haxe_doc></AccInline>
		<AccRequire a="r:?msg">
			<c path="String"/>
			<c path="String"/>
			<haxe_doc>Failed access due to a `@:require` metadata.</haxe_doc>
		</AccRequire>
		<AccCtor><haxe_doc>Access is only allowed from the constructor.</haxe_doc></AccCtor>
		<haxe_doc>Represents the variable accessor.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<enum path="haxe.macro.MethodKind" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<MethNormal><haxe_doc>A normal method.</haxe_doc></MethNormal>
		<MethInline><haxe_doc>An inline method.

		@see https://haxe.org/manual/class-field-inline.html</haxe_doc></MethInline>
		<MethDynamic><haxe_doc>A dynamic, rebindable method.

		@see https://haxe.org/manual/class-field-dynamic.html</haxe_doc></MethDynamic>
		<MethMacro><haxe_doc>A macro method.</haxe_doc></MethMacro>
		<haxe_doc>Represents the method kind.</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="haxe.macro.TConstant" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TInt a="i">
			<x path="Int"/>
			<haxe_doc>An `Int` literal.</haxe_doc>
		</TInt>
		<TFloat a="s">
			<c path="String"/>
			<haxe_doc>A `Float` literal, represented as String to avoid precision loss.</haxe_doc>
		</TFloat>
		<TString a="s">
			<c path="String"/>
			<haxe_doc>A `String` literal.</haxe_doc>
		</TString>
		<TBool a="b">
			<x path="Bool"/>
			<haxe_doc>A `Bool` literal.</haxe_doc>
		</TBool>
		<TNull><haxe_doc>The constant `null`.</haxe_doc></TNull>
		<TThis><haxe_doc>The constant `this`.</haxe_doc></TThis>
		<TSuper><haxe_doc>The constant `super`.</haxe_doc></TSuper>
		<haxe_doc>Represents typed constant.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<typedef path="haxe.macro.TVar" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t set="null">
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the variable.</haxe_doc>
			</t>
			<name set="null">
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<meta set="null">
				<x path="Null"><t path="haxe.macro.MetaAccess"/></x>
				<haxe_doc>The metadata of the variable.</haxe_doc>
			</meta>
			<id set="null">
				<x path="Int"/>
				<haxe_doc>The unique ID of the variable.</haxe_doc>
			</id>
			<extra set="null">
				<x path="Null"><a>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<expr><x path="Null"><t path="haxe.macro.TypedExpr"/></x></expr>
</a></x>
				<haxe_doc>Special information which is internally used to keep track of closure.
		information</haxe_doc>
			</extra>
			<capture set="null">
				<x path="Bool"/>
				<haxe_doc>Whether or not the variable has been captured by a closure.</haxe_doc>
			</capture>
		</a>
		<haxe_doc>Represents a variable in the typed AST.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<enum path="haxe.macro.ModuleType" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TClassDecl a="c">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<haxe_doc>A class.</haxe_doc>
		</TClassDecl>
		<TEnumDecl a="e">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<haxe_doc>An enum.</haxe_doc>
		</TEnumDecl>
		<TTypeDecl a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t>
			<haxe_doc>A typedef.</haxe_doc>
		</TTypeDecl>
		<TAbstract a="a">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<haxe_doc>An abstract.</haxe_doc>
		</TAbstract>
		<haxe_doc>Represents a module type. These are the types that can be declared in a Haxe
	module and which are passed to the generators (except `TTypeDecl`).</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<typedef path="haxe.macro.TFunc" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The return type of the function.</haxe_doc>
			</t>
			<expr>
				<t path="haxe.macro.TypedExpr"/>
				<haxe_doc>The expression of the function body.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><a>
	<value><x path="Null"><t path="haxe.macro.TypedExpr"/></x></value>
	<v><t path="haxe.macro.TVar"/></v>
</a></c>
				<haxe_doc>A list of function arguments identified by an argument variable `v` and
		an optional initialization `value`.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the typed AST.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<enum path="haxe.macro.FieldAccess" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<FInstance a="c:params:cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Access of field `cf` on a class instance `c` with type parameters
		`params`.</haxe_doc>
		</FInstance>
		<FStatic a="c:cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Static access of a field `cf` on a class `c`.</haxe_doc>
		</FStatic>
		<FAnon a="cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Access of field `cf` on an anonymous structure.</haxe_doc>
		</FAnon>
		<FDynamic a="s">
			<c path="String"/>
			<haxe_doc>Dynamic field access of a field named `s`.</haxe_doc>
		</FDynamic>
		<FClosure a="c:cf">
			<x path="Null"><a>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
	<c><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></c>
</a></x>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Closure field access of field `cf` on a class instance `c` with type
		parameters `params`.</haxe_doc>
		</FClosure>
		<FEnum a="e:ef">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<t path="haxe.macro.EnumField"/>
			<haxe_doc>Field access to an enum constructor `ef` of enum `e`.</haxe_doc>
		</FEnum>
		<haxe_doc>Represents the kind of field access in the typed AST.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<enum path="haxe.macro.TypedExprDef" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TConst a="c">
			<e path="haxe.macro.TConstant"/>
			<haxe_doc>A constant.</haxe_doc>
		</TConst>
		<TLocal a="v">
			<t path="haxe.macro.TVar"/>
			<haxe_doc>Reference to a local variable `v`.</haxe_doc>
		</TLocal>
		<TArray a="e1:e2">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Array access `e1[e2]`.</haxe_doc>
		</TArray>
		<TBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Binary operator `e1 op e2`.</haxe_doc>
		</TBinop>
		<TField a="e:fa">
			<t path="haxe.macro.TypedExpr"/>
			<e path="haxe.macro.FieldAccess"/>
			<haxe_doc>Field access on `e` according to `fa`.</haxe_doc>
		</TField>
		<TTypeExpr a="m">
			<e path="haxe.macro.ModuleType"/>
			<haxe_doc>Reference to a module type `m`.</haxe_doc>
		</TTypeExpr>
		<TParenthesis a="e">
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Parentheses `(e)`.</haxe_doc>
		</TParenthesis>
		<TObjectDecl a="fields">
			<c path="Array"><a>
	<name><c path="String"/></name>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
			<haxe_doc>An object declaration.</haxe_doc>
		</TObjectDecl>
		<TArrayDecl a="el">
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc>An array declaration `[el]`.</haxe_doc>
		</TArrayDecl>
		<TCall a="e:el">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc>A call `e(el)`.</haxe_doc>
		</TCall>
		<TNew a="c:params:el">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc><![CDATA[A constructor call `new c<params>(el)`.]]></haxe_doc>
		</TNew>
		<TUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<x path="Bool"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>An unary operator `op` on `e`:

		* e++ (op = OpIncrement, postFix = true)
		* e-- (op = OpDecrement, postFix = true)
		* ++e (op = OpIncrement, postFix = false)
		* --e (op = OpDecrement, postFix = false)
		* -e (op = OpNeg, postFix = false)
		* !e (op = OpNot, postFix = false)
		* ~e (op = OpNegBits, postFix = false)</haxe_doc>
		</TUnop>
		<TFunction a="tfunc">
			<t path="haxe.macro.TFunc"/>
			<haxe_doc>A function declaration.</haxe_doc>
		</TFunction>
		<TVar a="v:expr">
			<t path="haxe.macro.TVar"/>
			<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
			<haxe_doc>A variable declaration `var v` or `var v = expr`.</haxe_doc>
		</TVar>
		<TBlock a="el">
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc>A block declaration `{el}`.</haxe_doc>
		</TBlock>
		<TFor a="v:e1:e2">
			<t path="haxe.macro.TVar"/>
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>A `for` expression.</haxe_doc>
		</TFor>
		<TIf a="econd:eif:eelse">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
			<haxe_doc>An `if(econd) eif` or `if(econd) eif else eelse` expression.</haxe_doc>
		</TIf>
		<TWhile a="econd:e:normalWhile">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<x path="Bool"/>
			<haxe_doc>Represents a `while` expression.
		When `normalWhile` is `true` it is `while (...)`.
		When `normalWhile` is `false` it is `do {...} while (...)`.</haxe_doc>
		</TWhile>
		<TSwitch a="e:cases:edef">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><a>
	<values><c path="Array"><t path="haxe.macro.TypedExpr"/></c></values>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
			<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
			<haxe_doc>Represents a `switch` expression with related cases and an optional
		`default` case if edef != null.</haxe_doc>
		</TSwitch>
		<TTry a="e:catches">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><a>
	<v><t path="haxe.macro.TVar"/></v>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
			<haxe_doc>Represents a `try`-expression with related catches.</haxe_doc>
		</TTry>
		<TReturn a="e">
			<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
			<haxe_doc>A `return` or `return e` expression.</haxe_doc>
		</TReturn>
		<TBreak><haxe_doc>A `break` expression.</haxe_doc></TBreak>
		<TContinue><haxe_doc>A `continue` expression.</haxe_doc></TContinue>
		<TThrow a="e">
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>A `throw e` expression.</haxe_doc>
		</TThrow>
		<TCast a="e:m">
			<t path="haxe.macro.TypedExpr"/>
			<x path="Null"><e path="haxe.macro.ModuleType"/></x>
			<haxe_doc>A `cast e` or `cast (e, m)` expression.</haxe_doc>
		</TCast>
		<TMeta a="m:e1">
			<t path="haxe.macro.MetadataEntry"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>A `@m e1` expression.</haxe_doc>
		</TMeta>
		<TEnumParameter a="e1:ef:index">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.EnumField"/>
			<x path="Int"/>
			<haxe_doc>Access to an enum parameter (generated by the pattern matcher).</haxe_doc>
		</TEnumParameter>
		<TEnumIndex a="e1">
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Access to an enum index (generated by the pattern matcher).</haxe_doc>
		</TEnumIndex>
		<TIdent a="s">
			<c path="String"/>
			<haxe_doc>An unknown identifier.</haxe_doc>
		</TIdent>
		<haxe_doc>Represents kind of a node in the typed AST.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<typedef path="haxe.macro.TypedExpr" params="" file="/home/vsts/work/1/s/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the expression.</haxe_doc>
			</t>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.TypedExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a typed AST node.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<class path="haxe.macro.TypeTools" params="" file="/home/vsts/work/1/s/std/haxe/macro/TypeTools.hx">
		<nullable set="method" line="40" static="1"><f a="complexType">
	<e path="haxe.macro.ComplexType"/>
	<e path="haxe.macro.ComplexType"/>
</f></nullable>
		<toField set="method" line="43" static="1"><f a="cf">
	<t path="haxe.macro.ClassField"/>
	<t path="haxe.macro.Field"/>
</f></toField>
		<toComplexType public="1" set="method" line="101" static="1">
			<f a="type">
				<x path="Null"><e path="haxe.macro.Type"/></x>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
			</f>
			<haxe_doc>Returns a syntax-level type corresponding to Type `t`.

		This function is mostly inverse to `ComplexTypeTools.toType`, but may
		lose some information on types that do not have a corresponding syntax
		version, such as monomorphs. In these cases, the result is null.

		If `t` is null, an internal exception is thrown.</haxe_doc>
		</toComplexType>
		<toTypeParam set="method" line="146" static="1"><f a="type">
	<e path="haxe.macro.Type"/>
	<e path="haxe.macro.TypeParam"/>
</f></toTypeParam>
		<toTypePath set="method" line="154" static="1"><f a="baseType:params">
	<t path="haxe.macro.BaseType"/>
	<c path="Array"><e path="haxe.macro.Type"/></c>
	<t path="haxe.macro.TypePath"/>
</f></toTypePath>
		<findField public="1" set="method" line="380" static="1">
			<f a="c:name:?isStatic" v="::false">
				<t path="haxe.macro.ClassType"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Null"><t path="haxe.macro.ClassField"/></x>
			</f>
			<meta><m n=":value"><e>{ isStatic : false }</e></m></meta>
			<haxe_doc>Resolves the field named `name` on class `c`.

		If `isStatic` is true, the classes' static fields are checked. Otherwise
		the classes' member fields are checked.

		If the field is found, it is returned. Otherwise if `c` has a super
		class, `findField` recursively checks that super class. Otherwise null
		is returned.

		If any argument is null, the result is unspecified.</haxe_doc>
		</findField>
		<haxe_doc>This class provides some utility methods to work with types. It is
	best used through 'using haxe.macro.TypeTools' syntax and then provides
	additional methods on haxe.macro.Type instances.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.macro.TypedExprTools" params="" file="/home/vsts/work/1/s/std/haxe/macro/TypedExprTools.hx">
		<with set="method" line="33" static="1"><f a="e:?edef:?t">
	<t path="haxe.macro.TypedExpr"/>
	<e path="haxe.macro.TypedExprDef"/>
	<e path="haxe.macro.Type"/>
	<a>
		<t><x path="Null"><e path="haxe.macro.Type"/></x></t>
		<pos><t path="haxe.macro.Position"/></pos>
		<expr><x path="Null"><e path="haxe.macro.TypedExprDef"/></x></expr>
	</a>
</f></with>
		<map public="1" set="method" line="48" static="1">
			<f a="e:f">
				<t path="haxe.macro.TypedExpr"/>
				<f a="">
					<t path="haxe.macro.TypedExpr"/>
					<t path="haxe.macro.TypedExpr"/>
				</f>
				<t path="haxe.macro.TypedExpr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of `e` by calling `f` on each of them.

		See `haxe.macro.ExprTools.map` for details on expression mapping in
		general. This function works the same way, but with a different data
		structure.</haxe_doc>
		</map>
		<iter public="1" set="method" line="85" static="1">
			<f a="e:f">
				<t path="haxe.macro.TypedExpr"/>
				<f a="">
					<t path="haxe.macro.TypedExpr"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls function `f` on each sub-expression of `e`.

		See `haxe.macro.ExprTools.iter` for details on iterating expressions in
		general. This function works the same way, but with a different data
		structure.</haxe_doc>
		</iter>
		<mapWithType public="1" set="method" line="138" static="1">
			<f a="e:f:ft:fv">
				<t path="haxe.macro.TypedExpr"/>
				<f a="">
					<t path="haxe.macro.TypedExpr"/>
					<t path="haxe.macro.TypedExpr"/>
				</f>
				<f a="">
					<e path="haxe.macro.Type"/>
					<e path="haxe.macro.Type"/>
				</f>
				<f a="">
					<t path="haxe.macro.TVar"/>
					<t path="haxe.macro.TVar"/>
				</f>
				<t path="haxe.macro.TypedExpr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of `e` by calling `f` on each of them.
		Additionally, types are mapped using `ft` and variables are mapped using
		`fv`.

		See `haxe.macro.ExprTools.map` for details on expression mapping in
		general. This function works the same way, but with a different data
		structure.</haxe_doc>
		</mapWithType>
		<haxe_doc>This class provides some utility methods to work with typed expressions.
	It is best used through 'using haxe.macro.TypedExprTools' syntax and then
	provides additional methods on `haxe.macro.TypedExpr` instances.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<typedef path="haxe.rtti.Path" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="String"/>
		<haxe_doc>The (dot-)path of the runtime type.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.rtti.Platforms" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="Array"><c path="String"/></c>
		<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.rtti.FunctionArgument" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<value>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</value>
			<t><e path="haxe.rtti.CType"/></t>
			<opt><x path="Bool"/></opt>
			<name><c path="String"/></name>
		</a>
		<haxe_doc>The function argument runtime type information.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<enum path="haxe.rtti.CType" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx">
		<CUnknown/>
		<CEnum a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="Array"><e path="haxe.rtti.CType"/></c>
		</CEnum>
		<CClass a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="Array"><e path="haxe.rtti.CType"/></c>
		</CClass>
		<CTypedef a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="Array"><e path="haxe.rtti.CType"/></c>
		</CTypedef>
		<CFunction a="args:ret">
			<c path="Array"><t path="haxe.rtti.FunctionArgument"/></c>
			<e path="haxe.rtti.CType"/>
		</CFunction>
		<CAnonymous a="fields"><c path="Array"><t path="haxe.rtti.ClassField"/></c></CAnonymous>
		<CDynamic a="?t"><e path="haxe.rtti.CType"/></CDynamic>
		<CAbstract a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="Array"><e path="haxe.rtti.CType"/></c>
		</CAbstract>
		<haxe_doc>The runtime member types.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<typedef path="haxe.rtti.PathParams" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The path of the type.</haxe_doc>
			</path>
			<params>
				<c path="Array"><e path="haxe.rtti.CType"/></c>
				<haxe_doc>The array of parameters types.</haxe_doc>
			</params>
		</a>
		<haxe_doc>The type parameters in the runtime type information.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.rtti.TypeParams" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="Array"><c path="String"/></c>
		<haxe_doc>An array of strings representing the names of the type parameters the type
	has. As of Haxe 3.2.0, this does not include the constraints.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<enum path="haxe.rtti.Rights" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<RNormal/>
		<RNo/>
		<RCall a="m"><c path="String"/></RCall>
		<RMethod/>
		<RDynamic/>
		<RInline/>
		<haxe_doc>Represents the runtime rights of a type.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<typedef path="haxe.rtti.MetaData" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="Array"><a>
	<params><c path="Array"><c path="String"/></c></params>
	<name><c path="String"/></name>
</a></c>
		<haxe_doc>The list of runtime metadata.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.rtti.ClassField" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<type>
				<e path="haxe.rtti.CType"/>
				<haxe_doc>The type of the field.</haxe_doc>
			</type>
			<set>
				<e path="haxe.rtti.Rights"/>
				<haxe_doc>The [write access](https://haxe.org/manual/dictionary.html#define-write-access)
		behavior of the field.</haxe_doc>
			</set>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the field is available.</haxe_doc>
			</platforms>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters
		the field has.</haxe_doc>
			</params>
			<overloads>
				<x path="Null"><c path="Array"><t path="haxe.rtti.ClassField"/></c></x>
				<haxe_doc>The list of available overloads for the fields or `null` if no overloads
		exists.</haxe_doc>
			</overloads>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The meta data the field was annotated with.</haxe_doc>
			</meta>
			<line>
				<x path="Null"><x path="Int"/></x>
				<haxe_doc>The line number where the field is defined. This information is only
		available if the field has an expression.
		Otherwise the value is `null`.</haxe_doc>
			</line>
			<isPublic>
				<x path="Bool"/>
				<haxe_doc>Whether or not the field is public.</haxe_doc>
			</isPublic>
			<isOverride>
				<x path="Bool"/>
				<haxe_doc>Whether or not the field overrides another field.</haxe_doc>
			</isOverride>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>Whether or not the field is final.</haxe_doc>
			</isFinal>
			<get>
				<e path="haxe.rtti.Rights"/>
				<haxe_doc>The [read access](https://haxe.org/manual/dictionary.html#define-read-access)
		behavior of the field.</haxe_doc>
			</get>
			<expr>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The actual expression of the field or `null` if there is no expression.</haxe_doc>
			</expr>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the field. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or
		if the field has no documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc><![CDATA[The runtime class field information.

	@see <https://haxe.org/manual/cr-rtti-structure.html#class-field-information>]]></haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.rtti.TypeInfos" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [private](https://haxe.org/manual/dictionary.html#define-private-type).</haxe_doc>
			</isPrivate>
			<file>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The full slash path of the .hx file containing the type.
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The general runtime type information.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.rtti.Classdef" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<tdynamic>
				<x path="Null"><e path="haxe.rtti.CType"/></x>
				<haxe_doc>The type which is dynamically implemented by the class or `null` if no
		such type exists.</haxe_doc>
			</tdynamic>
			<superClass>
				<x path="Null"><t path="haxe.rtti.PathParams"/></x>
				<haxe_doc>The class' parent class defined by its type path and list of type
		parameters.</haxe_doc>
			</superClass>
			<statics>
				<c path="Array"><t path="haxe.rtti.ClassField"/></c>
				<haxe_doc>The list of static class fields.</haxe_doc>
			</statics>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [private](https://haxe.org/manual/dictionary.html#define-private-type).</haxe_doc>
			</isPrivate>
			<isInterface>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class is actually an [interface](https://haxe.org/manual/types-interfaces.html).</haxe_doc>
			</isInterface>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class is [extern](https://haxe.org/manual/lf-externs.html).</haxe_doc>
			</isExtern>
			<interfaces>
				<c path="Array"><t path="haxe.rtti.PathParams"/></c>
				<haxe_doc>The list of interfaces defined by their type path and list of type
		parameters.</haxe_doc>
			</interfaces>
			<file>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The full slash path of the .hx file containing the type.
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<fields>
				<c path="Array"><t path="haxe.rtti.ClassField"/></c>
				<haxe_doc>The list of member [class fields](https://haxe.org/manual/class-field.html).</haxe_doc>
			</fields>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The runtime class definition information.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.rtti.EnumField" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the constructor is
		available.</haxe_doc>
			</platforms>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the constructor.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The meta data the constructor was annotated with.</haxe_doc>
			</meta>
			<doc>
				<c path="String"/>
				<haxe_doc>The documentation of the constructor. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
			<args>
				<x path="Null"><c path="Array"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c></x>
				<haxe_doc>The list of arguments the constructor has or `null` if no arguments are
		available.</haxe_doc>
			</args>
		</a>
		<haxe_doc><![CDATA[The runtime enum constructor information.

	@see <https://haxe.org/manual/cr-rtti-structure.html#enum-constructor-information>]]></haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.rtti.Enumdef" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [private](https://haxe.org/manual/dictionary.html#define-private-type).</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the enum is [extern](https://haxe.org/manual/lf-externs.html).</haxe_doc>
			</isExtern>
			<file>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The full slash path of the .hx file containing the type.
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
			<constructors>
				<c path="Array"><t path="haxe.rtti.EnumField"/></c>
				<haxe_doc>The list of enum constructors.</haxe_doc>
			</constructors>
		</a>
		<haxe_doc><![CDATA[The enum runtime type information.

	@see <https://haxe.org/manual/cr-rtti-structure.html#enum-type-information>]]></haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.rtti.Typedef" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<types>
				<t path="Map">
					<c path="String"/>
					<e path="haxe.rtti.CType"/>
				</t>
				<haxe_doc>The types of the typedef, by platform.</haxe_doc>
			</types>
			<type>
				<e path="haxe.rtti.CType"/>
				<haxe_doc>The type of the typedef.</haxe_doc>
			</type>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [private](https://haxe.org/manual/dictionary.html#define-private-type).</haxe_doc>
			</isPrivate>
			<file>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The full slash path of the .hx file containing the type.
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The typedef runtime information.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<typedef path="haxe.rtti.Abstractdef" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<to><c path="Array"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<field><x path="Null"><c path="String"/></x></field>
</a></c></to>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [private](https://haxe.org/manual/dictionary.html#define-private-type).</haxe_doc>
			</isPrivate>
			<impl><t path="haxe.rtti.Classdef"/></impl>
			<from><c path="Array"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<field><x path="Null"><c path="String"/></x></field>
</a></c></from>
			<file>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The full slash path of the .hx file containing the type.
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
			<athis><e path="haxe.rtti.CType"/></athis>
		</a>
		<haxe_doc><![CDATA[The abstract type runtime information.

	@see <https://haxe.org/manual/cr-rtti-structure.html#abstract-type-information>]]></haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<enum path="haxe.rtti.TypeTree" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<TPackage a="name:full:subs">
			<c path="String"/>
			<c path="String"/>
			<c path="Array"><e path="haxe.rtti.TypeTree"/></c>
		</TPackage>
		<TClassdecl a="c"><t path="haxe.rtti.Classdef"/></TClassdecl>
		<TEnumdecl a="e"><t path="haxe.rtti.Enumdef"/></TEnumdecl>
		<TTypedecl a="t"><t path="haxe.rtti.Typedef"/></TTypedecl>
		<TAbstractdecl a="a"><t path="haxe.rtti.Abstractdef"/></TAbstractdecl>
		<haxe_doc>The tree types of the runtime type.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<typedef path="haxe.rtti.TypeRoot" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="Array"><e path="haxe.rtti.TypeTree"/></c>
		<haxe_doc>Array of `TypeTree`.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<class path="haxe.rtti.TypeApi" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<typeInfos public="1" set="method" line="374" static="1"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<t path="haxe.rtti.TypeInfos"/>
</f></typeInfos>
		<isVar public="1" set="method" line="395" static="1">
			<f a="t">
				<e path="haxe.rtti.CType"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the given `CType` is a variable or `false` if it is a
		function.</haxe_doc>
		</isVar>
		<leq params="T" set="method" line="402" static="1"><f a="f:l1:l2">
	<f a=":">
		<c path="leq.T"/>
		<c path="leq.T"/>
		<x path="Bool"/>
	</f>
	<c path="Array"><c path="leq.T"/></c>
	<c path="Array"><c path="leq.T"/></c>
	<x path="Bool"/>
</f></leq>
		<rightsEq public="1" set="method" line="422" static="1">
			<f a="r1:r2">
				<e path="haxe.rtti.Rights"/>
				<e path="haxe.rtti.Rights"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Unlike `r1 == r2`, this function performs a deep equality check on
		the given `Rights` instances.

		If `r1` or `r2` are `null`, the result is unspecified.</haxe_doc>
		</rightsEq>
		<typeEq public="1" set="method" line="443" static="1">
			<f a="t1:t2">
				<e path="haxe.rtti.CType"/>
				<e path="haxe.rtti.CType"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Unlike `t1 == t2`, this function performs a deep equality check on
		the given `CType` instances.

		If `t1` or `t2` are `null`, the result is unspecified.</haxe_doc>
		</typeEq>
		<fieldEq public="1" set="method" line="503" static="1">
			<f a="f1:f2">
				<t path="haxe.rtti.ClassField"/>
				<t path="haxe.rtti.ClassField"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Unlike `f1 == f2`, this function performs a deep equality check on
		the given `ClassField` instances.

		If `f1` or `f2` are `null`, the result is unspecified.</haxe_doc>
		</fieldEq>
		<constructorEq public="1" set="method" line="529" static="1">
			<f a="c1:c2">
				<t path="haxe.rtti.EnumField"/>
				<t path="haxe.rtti.EnumField"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Unlike `c1 == c2`, this function performs a deep equality check on
		the arguments of the enum constructors, if exists.

		If `c1` or `c2` are `null`, the result is unspecified.</haxe_doc>
		</constructorEq>
		<haxe_doc>Contains type and equality checks functionalities for RTTI.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.rtti.CTypeTools" params="" file="/home/vsts/work/1/s/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<toString public="1" set="method" line="552" static="1">
			<f a="t">
				<e path="haxe.rtti.CType"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the string representation of `CType`.</haxe_doc>
		</toString>
		<nameWithParams set="method" line="575" static="1"><f a="name:params">
	<c path="String"/>
	<c path="Array"><e path="haxe.rtti.CType"/></c>
	<c path="String"/>
</f></nameWithParams>
		<functionArgumentName set="method" line="582" static="1"><f a="arg">
	<t path="haxe.rtti.FunctionArgument"/>
	<c path="String"/>
</f></functionArgumentName>
		<classField set="method" line="589" static="1"><f a="cf">
	<t path="haxe.rtti.ClassField"/>
	<c path="String"/>
</f></classField>
		<haxe_doc>The CTypeTools class contains some extra functionalities for handling
	`CType` instances.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<typedef path="haxe.rtti._Meta.MetaObject" params="" file="/home/vsts/work/1/s/std/haxe/rtti/Meta.hx" private="1" module="haxe.rtti.Meta">
		<a>
			<statics>
				<x path="Null"><d><d><x path="Null"><c path="Array"><d/></c></x></d></d></x>
				<meta><m n=":optional"/></meta>
			</statics>
			<obj>
				<x path="Null"><d><x path="Null"><c path="Array"><d/></c></x></d></x>
				<meta><m n=":optional"/></meta>
			</obj>
			<fields>
				<x path="Null"><d><d><x path="Null"><c path="Array"><d/></c></x></d></d></x>
				<meta><m n=":optional"/></meta>
			</fields>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<class path="haxe.rtti.Meta" params="" file="/home/vsts/work/1/s/std/haxe/rtti/Meta.hx">
		<getType public="1" set="method" line="40" static="1">
			<f a="t">
				<d/>
				<d><c path="Array"><d/></c></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given type (class or enum)</haxe_doc>
		</getType>
		<isInterface set="method" line="46" static="1"><f a="t">
	<d/>
	<x path="Bool"/>
</f></isInterface>
		<getMeta set="method" line="58" static="1"><f a="t">
	<d/>
	<t path="haxe.rtti._Meta.MetaObject"/>
</f></getMeta>
		<getStatics public="1" set="method" line="83" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given class static fields</haxe_doc>
		</getStatics>
		<getFields public="1" set="method" line="91" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given class fields or enum constructors</haxe_doc>
		</getFields>
		<haxe_doc><![CDATA[An API to access classes and enums metadata at runtime.

	@see <https://haxe.org/manual/cr-rtti.html>]]></haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.rtti.Rtti" params="" file="/home/vsts/work/1/s/std/haxe/rtti/Rtti.hx">
		<getRtti public="1" params="T" set="method" line="41" static="1">
			<f a="c">
				<x path="Class"><c path="getRtti.T"/></x>
				<t path="haxe.rtti.Classdef"/>
			</f>
			<haxe_doc>Returns the `haxe.rtti.CType.Classdef` corresponding to class `c`.

		If `c` has no runtime type information, e.g. because no `@:rtti` was
		added, an exception of type `String` is thrown.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getRtti>
		<hasRtti public="1" params="T" set="method" line="61" static="1">
			<f a="c">
				<x path="Class"><c path="hasRtti.T"/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `c` has runtime type information.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</hasRtti>
		<haxe_doc><![CDATA[Rtti is a helper class which supplements the `@:rtti` metadata.

	@see <https://haxe.org/manual/cr-rtti.html>]]></haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.rtti.XmlParser" params="" file="/home/vsts/work/1/s/std/haxe/rtti/XmlParser.hx">
		<root public="1"><t path="haxe.rtti.TypeRoot"/></root>
		<curplatform><c path="String"/></curplatform>
		<sort public="1" set="method" line="43"><f a="?l">
	<t path="haxe.rtti.TypeRoot"/>
	<x path="Void"/>
</f></sort>
		<sortFields set="method" line="72"><f a="a">
	<c path="Array"><t path="haxe.rtti.ClassField"/></c>
	<x path="Void"/>
</f></sortFields>
		<process public="1" set="method" line="90"><f a="x:platform">
	<c path="Xml"/>
	<c path="String"/>
	<x path="Void"/>
</f></process>
		<mergeRights set="method" line="96"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></mergeRights>
		<mergeDoc set="method" line="105"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></mergeDoc>
		<mergeFields set="method" line="113"><f a="f:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></mergeFields>
		<newField public="1" set="dynamic" line="118"><f a="c:f">
	<t path="haxe.rtti.Classdef"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Void"/>
</f></newField>
		<mergeClasses set="method" line="120"><f a="c:c2">
	<t path="haxe.rtti.Classdef"/>
	<t path="haxe.rtti.Classdef"/>
	<x path="Bool"/>
</f></mergeClasses>
		<mergeEnums set="method" line="158"><f a="e:e2">
	<t path="haxe.rtti.Enumdef"/>
	<t path="haxe.rtti.Enumdef"/>
	<x path="Bool"/>
</f></mergeEnums>
		<mergeTypedefs set="method" line="178"><f a="t:t2">
	<t path="haxe.rtti.Typedef"/>
	<t path="haxe.rtti.Typedef"/>
	<x path="Bool"/>
</f></mergeTypedefs>
		<mergeAbstracts set="method" line="186"><f a="a:a2">
	<t path="haxe.rtti.Abstractdef"/>
	<t path="haxe.rtti.Abstractdef"/>
	<x path="Bool"/>
</f></mergeAbstracts>
		<merge set="method" line="203"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<x path="Void"/>
</f></merge>
		<mkPath set="method" line="295"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.Path"/>
</f></mkPath>
		<mkTypeParams set="method" line="299"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.TypeParams"/>
</f></mkTypeParams>
		<mkRights set="method" line="306"><f a="r">
	<c path="String"/>
	<e path="haxe.rtti.Rights"/>
</f></mkRights>
		<xerror set="method" line="316"><f a="c">
	<x path="haxe.xml.Access"/>
	<d/>
</f></xerror>
		<xroot set="method" line="320"><f a="x">
	<x path="haxe.xml.Access"/>
	<x path="Void"/>
</f></xroot>
		<processElement public="1" set="method" line="325"><f a="x">
	<c path="Xml"/>
	<e path="haxe.rtti.TypeTree"/>
</f></processElement>
		<xmeta set="method" line="336"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.MetaData"/>
</f></xmeta>
		<xoverloads set="method" line="347"><f a="x">
	<x path="haxe.xml.Access"/>
	<c path="Array"><t path="haxe.rtti.ClassField"/></c>
</f></xoverloads>
		<xpath set="method" line="355"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.PathParams"/>
</f></xpath>
		<xclass set="method" line="366"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.Classdef"/>
</f></xclass>
		<xclassfield set="method" line="411">
			<f a="x:?defPublic" v=":false">
				<x path="haxe.xml.Access"/>
				<x path="Bool"/>
				<t path="haxe.rtti.ClassField"/>
			</f>
			<meta><m n=":value"><e>{ defPublic : false }</e></m></meta>
		</xclassfield>
		<xenum set="method" line="440"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.Enumdef"/>
</f></xenum>
		<xenumfield set="method" line="465"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.EnumField"/>
</f></xenumfield>
		<xabstract set="method" line="496"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.Abstractdef"/>
</f></xabstract>
		<xtypedef set="method" line="534"><f a="x">
	<x path="haxe.xml.Access"/>
	<t path="haxe.rtti.Typedef"/>
</f></xtypedef>
		<xtype set="method" line="562"><f a="x">
	<x path="haxe.xml.Access"/>
	<e path="haxe.rtti.CType"/>
</f></xtype>
		<xtypeparams set="method" line="618"><f a="x">
	<x path="haxe.xml.Access"/>
	<c path="Array"><e path="haxe.rtti.CType"/></c>
</f></xtypeparams>
		<defplat set="method" line="625"><f a=""><c path="Array"><c path="String"/></c></f></defplat>
		<new public="1" set="method" line="39"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[XmlParser processes the runtime type information (RTTI) which
	is stored as a XML string in a static field `__rtti`.

	@see <https://haxe.org/manual/cr-rtti.html>]]></haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<abstract path="haxe.xml._Access.NodeAccess" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<meta><m n=":hxGen"/></meta>
		<impl><class path="haxe.xml._Access.NodeAccess_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
	<resolve public="1" set="method" line="27" static="1">
		<f a="this:name">
			<c path="Xml"/>
			<c path="String"/>
			<x path="haxe.xml.Access"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>a.b</e></m>
		</meta>
	</resolve>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.xml._Access.NodeAccess_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<resolve public="1" set="method" line="27" static="1">
			<f a="this:name">
				<c path="Xml"/>
				<c path="String"/>
				<x path="haxe.xml.Access"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>a.b</e></m>
			</meta>
		</resolve>
		<meta><m n=":hxGen"/></meta>
	</class>
	<abstract path="haxe.xml._Access.AttribAccess" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<meta><m n=":hxGen"/></meta>
		<impl><class path="haxe.xml._Access.AttribAccess_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
	<resolve public="1" set="method" line="39" static="1">
		<f a="this:name">
			<c path="Xml"/>
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>a.b</e></m>
		</meta>
	</resolve>
	<_hx_set set="method" line="49" static="1">
		<f a="this:name:value">
			<c path="Xml"/>
			<c path="String"/>
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>a.b</e></m>
		</meta>
	</_hx_set>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.xml._Access.AttribAccess_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<resolve public="1" set="method" line="39" static="1">
			<f a="this:name">
				<c path="Xml"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>a.b</e></m>
			</meta>
		</resolve>
		<_hx_set set="method" line="49" static="1">
			<f a="this:name:value">
				<c path="Xml"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>a.b</e></m>
			</meta>
		</_hx_set>
		<meta><m n=":hxGen"/></meta>
	</class>
	<abstract path="haxe.xml._Access.HasAttribAccess" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<meta><m n=":hxGen"/></meta>
		<impl><class path="haxe.xml._Access.HasAttribAccess_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
	<resolve public="1" set="method" line="59" static="1">
		<f a="this:name">
			<c path="Xml"/>
			<c path="String"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>a.b</e></m>
		</meta>
	</resolve>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.xml._Access.HasAttribAccess_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<resolve public="1" set="method" line="59" static="1">
			<f a="this:name">
				<c path="Xml"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>a.b</e></m>
			</meta>
		</resolve>
		<meta><m n=":hxGen"/></meta>
	</class>
	<abstract path="haxe.xml._Access.HasNodeAccess" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<meta><m n=":hxGen"/></meta>
		<impl><class path="haxe.xml._Access.HasNodeAccess_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
	<resolve public="1" set="method" line="68" static="1">
		<f a="this:name">
			<c path="Xml"/>
			<c path="String"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>a.b</e></m>
		</meta>
	</resolve>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.xml._Access.HasNodeAccess_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<resolve public="1" set="method" line="68" static="1">
			<f a="this:name">
				<c path="Xml"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>a.b</e></m>
			</meta>
		</resolve>
		<meta><m n=":hxGen"/></meta>
	</class>
	<abstract path="haxe.xml._Access.NodeListAccess" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<meta><m n=":hxGen"/></meta>
		<impl><class path="haxe.xml._Access.NodeListAccess_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
	<resolve public="1" set="method" line="75" static="1">
		<f a="this:name">
			<c path="Xml"/>
			<c path="String"/>
			<c path="Array"><x path="haxe.xml.Access"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>a.b</e></m>
		</meta>
	</resolve>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.xml._Access.NodeListAccess_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<resolve public="1" set="method" line="75" static="1">
			<f a="this:name">
				<c path="Xml"/>
				<c path="String"/>
				<c path="Array"><x path="haxe.xml.Access"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>a.b</e></m>
			</meta>
		</resolve>
		<meta><m n=":hxGen"/></meta>
	</class>
	<abstract path="haxe.xml.Access" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx">
		<this><c path="Xml"/></this>
		<haxe_doc>The `haxe.xml.Access` API helps providing a fast dot-syntax access to the
	most common `Xml` methods.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
		<impl><class path="haxe.xml._Access.Access_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
	<x public="1" get="accessor" set="null" static="1">
		<c path="Xml"/>
		<meta><m n=":impl"/></meta>
	</x>
	<get_x public="1" get="inline" set="null" line="90" static="1">
		<f a="this">
			<c path="Xml"/>
			<c path="Xml"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_x>
	<name public="1" get="accessor" set="null" static="1">
		<c path="String"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>The name of the current element. This is the same as `Xml.nodeName`.</haxe_doc>
	</name>
	<get_name get="inline" set="null" line="98" static="1">
		<f a="this">
			<c path="Xml"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_name>
	<innerData public="1" get="accessor" set="null" static="1">
		<c path="String"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>The inner PCDATA or CDATA of the node.

		An exception is thrown if there is no data or if there not only data
		but also other nodes.</haxe_doc>
	</innerData>
	<innerHTML public="1" get="accessor" set="null" static="1">
		<c path="String"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>The XML string built with all the sub nodes, excluding the current one.</haxe_doc>
	</innerHTML>
	<node public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.NodeAccess"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Access to the first sub element with the given name.

		An exception is thrown if the element doesn't exists.
		Use `hasNode` to check the existence of a node.

		```haxe
		var access = new haxe.xml.Access(Xml.parse("<user><name>John</name></user>"));
		var user = access.node.user;
		var name = user.node.name;
		trace(name.innerData); // John

		// Uncaught Error: Document is missing element password
		var password = user.node.password;
		```]]></haxe_doc>
	</node>
	<get_node get="inline" set="null" line="133" static="1">
		<f a="this">
			<c path="Xml"/>
			<x path="haxe.xml._Access.NodeAccess"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_node>
	<nodes public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.NodeListAccess"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Access to the List of elements with the given name.
		```haxe
		var fast = new haxe.xml.Access(Xml.parse("
			<users>
				<user name='John'/>
				<user name='Andy'/>
				<user name='Dan'/>
			</users>"
		));

		var users = fast.node.users;
		for (user in users.nodes.user) {
			trace(user.att.name);
		}
		```]]></haxe_doc>
	</nodes>
	<get_nodes get="inline" set="null" line="155" static="1">
		<f a="this">
			<c path="Xml"/>
			<x path="haxe.xml._Access.NodeListAccess"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_nodes>
	<att public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.AttribAccess"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Access to a given attribute.

		An exception is thrown if the attribute doesn't exists.
		Use `has` to check the existence of an attribute.

		```haxe
		var f = new haxe.xml.Access(Xml.parse("<user name='Mark'></user>"));
		var user = f.node.user;
		if (user.has.name) {
			trace(user.att.name); // Mark
		}
		```]]></haxe_doc>
	</att>
	<get_att get="inline" set="null" line="174" static="1">
		<f a="this">
			<c path="Xml"/>
			<x path="haxe.xml._Access.AttribAccess"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_att>
	<has public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.HasAttribAccess"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Check the existence of an attribute with the given name.</haxe_doc>
	</has>
	<get_has get="inline" set="null" line="182" static="1">
		<f a="this">
			<c path="Xml"/>
			<x path="haxe.xml._Access.HasAttribAccess"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_has>
	<hasNode public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.HasNodeAccess"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Check the existence of a sub node with the given name.

		```haxe
		var f = new haxe.xml.Access(Xml.parse("<user><age>31</age></user>"));
		var user = f.node.user;
		if (user.hasNode.age) {
			trace(user.node.age.innerData); // 31
		}
		```]]></haxe_doc>
	</hasNode>
	<get_hasNode get="inline" set="null" line="198" static="1">
		<f a="this">
			<c path="Xml"/>
			<x path="haxe.xml._Access.HasNodeAccess"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_hasNode>
	<elements public="1" get="accessor" set="null" static="1">
		<t path="Iterator"><x path="haxe.xml.Access"/></t>
		<meta><m n=":impl"/></meta>
		<haxe_doc>The list of all sub-elements which are the nodes with type `Xml.Element`.</haxe_doc>
	</elements>
	<get_elements get="inline" set="null" line="206" static="1">
		<f a="this">
			<c path="Xml"/>
			<t path="Iterator"><x path="haxe.xml.Access"/></t>
		</f>
		<meta><m n=":impl"/></meta>
	</get_elements>
	<_new public="1" get="inline" set="null" line="209" static="1">
		<f a="x">
			<c path="Xml"/>
			<x path="haxe.xml.Access"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<get_innerData set="method" line="215" static="1">
		<f a="this">
			<c path="Xml"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_innerData>
	<get_innerHTML set="method" line="237" static="1">
		<f a="this">
			<c path="Xml"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_innerHTML>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.xml._Access.Access_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<x public="1" get="accessor" set="null" static="1">
			<c path="Xml"/>
			<meta><m n=":impl"/></meta>
		</x>
		<get_x public="1" get="inline" set="null" line="90" static="1">
			<f a="this">
				<c path="Xml"/>
				<c path="Xml"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_x>
		<name public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>The name of the current element. This is the same as `Xml.nodeName`.</haxe_doc>
		</name>
		<get_name get="inline" set="null" line="98" static="1">
			<f a="this">
				<c path="Xml"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_name>
		<innerData public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>The inner PCDATA or CDATA of the node.

		An exception is thrown if there is no data or if there not only data
		but also other nodes.</haxe_doc>
		</innerData>
		<innerHTML public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>The XML string built with all the sub nodes, excluding the current one.</haxe_doc>
		</innerHTML>
		<node public="1" get="accessor" set="null" static="1">
			<x path="haxe.xml._Access.NodeAccess"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Access to the first sub element with the given name.

		An exception is thrown if the element doesn't exists.
		Use `hasNode` to check the existence of a node.

		```haxe
		var access = new haxe.xml.Access(Xml.parse("<user><name>John</name></user>"));
		var user = access.node.user;
		var name = user.node.name;
		trace(name.innerData); // John

		// Uncaught Error: Document is missing element password
		var password = user.node.password;
		```]]></haxe_doc>
		</node>
		<get_node get="inline" set="null" line="133" static="1">
			<f a="this">
				<c path="Xml"/>
				<x path="haxe.xml._Access.NodeAccess"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_node>
		<nodes public="1" get="accessor" set="null" static="1">
			<x path="haxe.xml._Access.NodeListAccess"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Access to the List of elements with the given name.
		```haxe
		var fast = new haxe.xml.Access(Xml.parse("
			<users>
				<user name='John'/>
				<user name='Andy'/>
				<user name='Dan'/>
			</users>"
		));

		var users = fast.node.users;
		for (user in users.nodes.user) {
			trace(user.att.name);
		}
		```]]></haxe_doc>
		</nodes>
		<get_nodes get="inline" set="null" line="155" static="1">
			<f a="this">
				<c path="Xml"/>
				<x path="haxe.xml._Access.NodeListAccess"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_nodes>
		<att public="1" get="accessor" set="null" static="1">
			<x path="haxe.xml._Access.AttribAccess"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Access to a given attribute.

		An exception is thrown if the attribute doesn't exists.
		Use `has` to check the existence of an attribute.

		```haxe
		var f = new haxe.xml.Access(Xml.parse("<user name='Mark'></user>"));
		var user = f.node.user;
		if (user.has.name) {
			trace(user.att.name); // Mark
		}
		```]]></haxe_doc>
		</att>
		<get_att get="inline" set="null" line="174" static="1">
			<f a="this">
				<c path="Xml"/>
				<x path="haxe.xml._Access.AttribAccess"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_att>
		<has public="1" get="accessor" set="null" static="1">
			<x path="haxe.xml._Access.HasAttribAccess"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Check the existence of an attribute with the given name.</haxe_doc>
		</has>
		<get_has get="inline" set="null" line="182" static="1">
			<f a="this">
				<c path="Xml"/>
				<x path="haxe.xml._Access.HasAttribAccess"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_has>
		<hasNode public="1" get="accessor" set="null" static="1">
			<x path="haxe.xml._Access.HasNodeAccess"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Check the existence of a sub node with the given name.

		```haxe
		var f = new haxe.xml.Access(Xml.parse("<user><age>31</age></user>"));
		var user = f.node.user;
		if (user.hasNode.age) {
			trace(user.node.age.innerData); // 31
		}
		```]]></haxe_doc>
		</hasNode>
		<get_hasNode get="inline" set="null" line="198" static="1">
			<f a="this">
				<c path="Xml"/>
				<x path="haxe.xml._Access.HasNodeAccess"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_hasNode>
		<elements public="1" get="accessor" set="null" static="1">
			<t path="Iterator"><x path="haxe.xml.Access"/></t>
			<meta><m n=":impl"/></meta>
			<haxe_doc>The list of all sub-elements which are the nodes with type `Xml.Element`.</haxe_doc>
		</elements>
		<get_elements get="inline" set="null" line="206" static="1">
			<f a="this">
				<c path="Xml"/>
				<t path="Iterator"><x path="haxe.xml.Access"/></t>
			</f>
			<meta><m n=":impl"/></meta>
		</get_elements>
		<_new public="1" get="inline" set="null" line="209" static="1">
			<f a="x">
				<c path="Xml"/>
				<x path="haxe.xml.Access"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<get_innerData set="method" line="215" static="1">
			<f a="this">
				<c path="Xml"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_innerData>
		<get_innerHTML set="method" line="237" static="1">
			<f a="this">
				<c path="Xml"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_innerHTML>
		<meta><m n=":hxGen"/></meta>
	</class>
	<enum path="haxe.xml.Filter" params="" file="/home/vsts/work/1/s/std/haxe/xml/Check.hx" module="haxe.xml.Check">
		<FInt/>
		<FBool/>
		<FEnum a="values"><c path="Array"><c path="String"/></c></FEnum>
		<FReg a="matcher"><c path="EReg"/></FReg>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<enum path="haxe.xml.Attrib" params="" file="/home/vsts/work/1/s/std/haxe/xml/Check.hx" module="haxe.xml.Check">
		<Att a="name:?filter:?defvalue">
			<c path="String"/>
			<e path="haxe.xml.Filter"/>
			<c path="String"/>
		</Att>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<enum path="haxe.xml.Rule" params="" file="/home/vsts/work/1/s/std/haxe/xml/Check.hx" module="haxe.xml.Check">
		<RNode a="name:?attribs:?childs">
			<c path="String"/>
			<c path="Array"><e path="haxe.xml.Attrib"/></c>
			<e path="haxe.xml.Rule"/>
		</RNode>
		<RData a="?filter"><e path="haxe.xml.Filter"/></RData>
		<RMulti a="rule:?atLeastOne">
			<e path="haxe.xml.Rule"/>
			<x path="Bool"/>
		</RMulti>
		<RList a="rules:?ordered">
			<c path="Array"><e path="haxe.xml.Rule"/></c>
			<x path="Bool"/>
		</RList>
		<RChoice a="choices"><c path="Array"><e path="haxe.xml.Rule"/></c></RChoice>
		<ROptional a="rule"><e path="haxe.xml.Rule"/></ROptional>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<enum path="haxe.xml._Check.CheckResult" params="" file="/home/vsts/work/1/s/std/haxe/xml/Check.hx" private="1" module="haxe.xml.Check">
		<CMatch/>
		<CMissing a="r"><e path="haxe.xml.Rule"/></CMissing>
		<CExtra a="x"><c path="Xml"/></CExtra>
		<CElementExpected a="name:x">
			<c path="String"/>
			<c path="Xml"/>
		</CElementExpected>
		<CDataExpected a="x"><c path="Xml"/></CDataExpected>
		<CExtraAttrib a="att:x">
			<c path="String"/>
			<c path="Xml"/>
		</CExtraAttrib>
		<CMissingAttrib a="att:x">
			<c path="String"/>
			<c path="Xml"/>
		</CMissingAttrib>
		<CInvalidAttrib a="att:x:f">
			<c path="String"/>
			<c path="Xml"/>
			<e path="haxe.xml.Filter"/>
		</CInvalidAttrib>
		<CInvalidData a="x:f">
			<c path="Xml"/>
			<e path="haxe.xml.Filter"/>
		</CInvalidData>
		<CInElement a="x:r">
			<c path="Xml"/>
			<e path="haxe.xml._Check.CheckResult"/>
		</CInElement>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<class path="haxe.xml.Check" params="" file="/home/vsts/work/1/s/std/haxe/xml/Check.hx">
		<blanks expr="~/^[ 
	]*$/" line="59" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[ 
	]*$/</e></m></meta>
		</blanks>
		<isBlank set="method" line="61" static="1"><f a="x">
	<c path="Xml"/>
	<x path="Bool"/>
</f></isBlank>
		<filterMatch set="method" line="65" static="1"><f a="s:f">
	<c path="String"/>
	<e path="haxe.xml.Filter"/>
	<x path="Bool"/>
</f></filterMatch>
		<isNullable set="method" line="81" static="1"><f a="r">
	<e path="haxe.xml.Rule"/>
	<x path="Bool"/>
</f></isNullable>
		<check set="method" line="104" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<e path="haxe.xml._Check.CheckResult"/>
</f></check>
		<checkList set="method" line="169" static="1"><f a="it:r">
	<t path="Iterator"><c path="Xml"/></t>
	<e path="haxe.xml.Rule"/>
	<e path="haxe.xml._Check.CheckResult"/>
</f></checkList>
		<makeWhere set="method" line="242" static="1"><f a="path">
	<c path="Array"><c path="Xml"/></c>
	<c path="String"/>
</f></makeWhere>
		<makeString set="method" line="257" static="1"><f a="x">
	<c path="Xml"/>
	<c path="String"/>
</f></makeString>
		<makeRule set="method" line="266" static="1"><f a="r">
	<e path="haxe.xml.Rule"/>
	<c path="String"/>
</f></makeRule>
		<makeError set="method" line="283" static="1"><f a="m:?path">
	<e path="haxe.xml._Check.CheckResult"/>
	<c path="Array"><c path="Xml"/></c>
	<c path="String"/>
</f></makeError>
		<checkNode public="1" set="method" line="314" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<x path="Void"/>
</f></checkNode>
		<checkDocument public="1" set="method" line="321" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<x path="Void"/>
</f></checkDocument>
		<meta><m n=":hxGen"/></meta>
	</class>
	<typedef path="haxe.xml.Fast" params="" file="/home/vsts/work/1/s/std/haxe/xml/Fast.hx">
		<x path="haxe.xml.Access"/>
		<meta>
			<m n=":nativeGen"/>
			<m n=":deprecated"/>
		</meta>
	</typedef>
	<abstract path="haxe.xml._Parser.S" params="" file="/home/vsts/work/1/s/std/haxe/xml/Parser.hx" private="1" module="haxe.xml.Parser">
		<this><x path="Int"/></this>
		<meta>
			<m n=":hxGen"/>
			<m n=":enum"/>
		</meta>
		<impl><class path="haxe.xml._Parser.S_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/xml/Parser.hx" private="1" module="haxe.xml.Parser" extern="1">
	<IGNORE_SPACES public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IGNORE_SPACES>
	<BEGIN public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BEGIN>
	<BEGIN_NODE public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BEGIN_NODE>
	<TAG_NAME public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TAG_NAME>
	<BODY public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BODY>
	<ATTRIB_NAME public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ATTRIB_NAME>
	<EQUALS public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EQUALS>
	<ATTVAL_BEGIN public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ATTVAL_BEGIN>
	<ATTRIB_VAL public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ATTRIB_VAL>
	<CHILDS public="1" get="inline" set="null" expr="cast 9" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CHILDS>
	<CLOSE public="1" get="inline" set="null" expr="cast 10" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 10</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CLOSE>
	<WAIT_END public="1" get="inline" set="null" expr="cast 11" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 11</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WAIT_END>
	<WAIT_END_RET public="1" get="inline" set="null" expr="cast 12" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 12</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WAIT_END_RET>
	<PCDATA public="1" get="inline" set="null" expr="cast 13" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 13</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PCDATA>
	<HEADER public="1" get="inline" set="null" expr="cast 14" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 14</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HEADER>
	<COMMENT public="1" get="inline" set="null" expr="cast 15" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 15</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</COMMENT>
	<DOCTYPE public="1" get="inline" set="null" expr="cast 16" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 16</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DOCTYPE>
	<CDATA public="1" get="inline" set="null" expr="cast 17" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 17</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CDATA>
	<ESCAPE public="1" get="inline" set="null" expr="cast 18" line="1" static="1">
		<x path="haxe.xml._Parser.S"/>
		<meta>
			<m n=":value"><e>cast 18</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ESCAPE>
	<meta>
		<m n=":hxGen"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.xml._Parser.S_Impl_" params="" file="/home/vsts/work/1/s/std/haxe/xml/Parser.hx" private="1" module="haxe.xml.Parser" extern="1">
		<IGNORE_SPACES public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IGNORE_SPACES>
		<BEGIN public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BEGIN>
		<BEGIN_NODE public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BEGIN_NODE>
		<TAG_NAME public="1" get="inline" set="null" expr="cast 3" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TAG_NAME>
		<BODY public="1" get="inline" set="null" expr="cast 4" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BODY>
		<ATTRIB_NAME public="1" get="inline" set="null" expr="cast 5" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ATTRIB_NAME>
		<EQUALS public="1" get="inline" set="null" expr="cast 6" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EQUALS>
		<ATTVAL_BEGIN public="1" get="inline" set="null" expr="cast 7" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ATTVAL_BEGIN>
		<ATTRIB_VAL public="1" get="inline" set="null" expr="cast 8" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ATTRIB_VAL>
		<CHILDS public="1" get="inline" set="null" expr="cast 9" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CHILDS>
		<CLOSE public="1" get="inline" set="null" expr="cast 10" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 10</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CLOSE>
		<WAIT_END public="1" get="inline" set="null" expr="cast 11" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 11</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WAIT_END>
		<WAIT_END_RET public="1" get="inline" set="null" expr="cast 12" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 12</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WAIT_END_RET>
		<PCDATA public="1" get="inline" set="null" expr="cast 13" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 13</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PCDATA>
		<HEADER public="1" get="inline" set="null" expr="cast 14" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 14</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HEADER>
		<COMMENT public="1" get="inline" set="null" expr="cast 15" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 15</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</COMMENT>
		<DOCTYPE public="1" get="inline" set="null" expr="cast 16" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 16</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DOCTYPE>
		<CDATA public="1" get="inline" set="null" expr="cast 17" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 17</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CDATA>
		<ESCAPE public="1" get="inline" set="null" expr="cast 18" line="1" static="1">
			<x path="haxe.xml._Parser.S"/>
			<meta>
				<m n=":value"><e>cast 18</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ESCAPE>
		<meta>
			<m n=":hxGen"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="haxe.xml.XmlParserException" params="" file="/home/vsts/work/1/s/std/haxe/xml/Parser.hx" module="haxe.xml.Parser">
		<message public="1">
			<c path="String"/>
			<haxe_doc>the XML parsing error message</haxe_doc>
		</message>
		<lineNumber public="1">
			<x path="Int"/>
			<haxe_doc>the line number at which the XML parsing error occurred</haxe_doc>
		</lineNumber>
		<positionAtLine public="1">
			<x path="Int"/>
			<haxe_doc>the character position in the reported line at which the parsing error occurred</haxe_doc>
		</positionAtLine>
		<position public="1">
			<x path="Int"/>
			<haxe_doc>the character position in the XML string at which the parsing error occurred</haxe_doc>
		</position>
		<xml public="1">
			<c path="String"/>
			<haxe_doc>the invalid XML string</haxe_doc>
		</xml>
		<toString public="1" set="method" line="94"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="75"><f a="message:xml:position">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.xml.Parser" params="" file="/home/vsts/work/1/s/std/haxe/xml/Parser.hx">
		<escapes expr="{
	var h = new haxe.ds.StringMap();
	h.set(&quot;lt&quot;, &quot;&lt;&quot;);
	h.set(&quot;gt&quot;, &quot;&gt;&quot;);
	h.set(&quot;amp&quot;, &quot;&amp;&quot;);
	h.set(&quot;quot&quot;, &quot;\&quot;&quot;);
	h.set(&quot;apos&quot;, &quot;&apos;&quot;);
	h;
}" line="100" static="1">
			<c path="haxe.ds.StringMap"><c path="String"/></c>
			<meta><m n=":value"><e><![CDATA[{
	var h = new haxe.ds.StringMap();
	h.set("lt", "<");
	h.set("gt", ">");
	h.set("amp", "&");
	h.set("quot", "\"");
	h.set("apos", "'");
	h;
}]]></e></m></meta>
		</escapes>
		<parse public="1" set="method" line="115" static="1">
			<f a="str:?strict" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="Xml"/>
			</f>
			<meta><m n=":value"><e>{ strict : false }</e></m></meta>
			<haxe_doc>Parses the String into an XML Document. Set strict parsing to true in order to enable a strict check of XML attributes and entities.

		@throws haxe.xml.XmlParserException</haxe_doc>
		</parse>
		<doParse set="method" line="121" static="1">
			<f a="str:strict:?p:?parent" v="::0:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="Xml"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ p : 0 }</e></m></meta>
		</doParse>
		<isValidChar get="inline" set="null" line="416" static="1"><f a="c">
	<x path="Int"/>
	<x path="Bool"/>
</f></isValidChar>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.xml.Printer" params="" file="/home/vsts/work/1/s/std/haxe/xml/Printer.hx">
		<print public="1" set="method" line="35" static="1">
			<f a="xml:?pretty" v=":false">
				<c path="Xml"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ pretty : false }</e></m></meta>
			<haxe_doc>Convert `Xml` to string representation.

		Set `pretty` to `true` to prettify the result.</haxe_doc>
		</print>
		<output><c path="StringBuf"/></output>
		<pretty><x path="Bool"/></pretty>
		<writeNode set="method" line="49"><f a="value:tabs">
	<c path="Xml"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeNode>
		<write get="inline" set="null" line="104"><f a="input">
	<c path="String"/>
	<x path="Void"/>
</f></write>
		<newline get="inline" set="null" line="108"><f a=""><x path="Void"/></f></newline>
		<hasChildren set="method" line="114"><f a="value">
	<c path="Xml"/>
	<x path="Bool"/>
</f></hasChildren>
		<new set="method" line="44"><f a="pretty">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>This class provides utility methods to convert Xml instances to
	String representation.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.xml.Proxy" params="Const:T" file="/home/vsts/work/1/s/std/haxe/xml/Proxy.hx">
		<__f><f a="">
	<c path="String"/>
	<c path="haxe.xml.Proxy.T"/>
</f></__f>
		<resolve public="1" set="method" line="49"><f a="k">
	<c path="String"/>
	<c path="haxe.xml.Proxy.T"/>
</f></resolve>
		<new public="1" set="method" line="45"><f a="f">
	<f a="">
		<c path="String"/>
		<c path="haxe.xml.Proxy.T"/>
	</f>
	<x path="Void"/>
</f></new>
		<haxe_doc><![CDATA[This proxy can be inherited with an XML file name parameter.
	It will	only allow access to fields which corresponds to an "id" attribute
	value in the XML file :

	```haxe
	class MyXml extends haxe.xml.Proxy<"my.xml", MyStructure> {
	}

	var h = new haxe.ds.StringMap<MyStructure>();
	// ... fill h with "my.xml" content
	var m = new MyXml(h.get);
	trace(m.myNode.structField);
	// Access to "myNode" is only possible if you have an id="myNode" attribute
	// in your XML, and completion works as well.
	```]]></haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.zip.Compress" params="" file="/home/vsts/work/1/s/std/haxe/zip/Compress.hx">
		<run public="1" set="method" line="38" static="1"><f a="s:level">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<execute public="1" set="method" line="30"><f a="src:srcPos:dst:dstPos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></execute>
		<setFlushMode public="1" set="method" line="34"><f a="f">
	<e path="haxe.zip.FlushMode"/>
	<x path="Void"/>
</f></setFlushMode>
		<close public="1" set="method" line="36"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="26"><f a="level">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<enum path="haxe.zip.ExtraField" params="" file="/home/vsts/work/1/s/std/haxe/zip/Entry.hx" module="haxe.zip.Entry">
		<FUnknown a="tag:bytes">
			<x path="Int"/>
			<c path="haxe.io.Bytes"/>
		</FUnknown>
		<FInfoZipUnicodePath a="name:crc">
			<c path="String"/>
			<x path="Int"/>
		</FInfoZipUnicodePath>
		<FUtf8/>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<typedef path="haxe.zip.Entry" params="" file="/home/vsts/work/1/s/std/haxe/zip/Entry.hx">
		<a>
			<fileTime><c path="Date"/></fileTime>
			<fileSize><x path="Int"/></fileSize>
			<fileName><c path="String"/></fileName>
			<extraFields>
				<x path="Null"><c path="haxe.ds.List"><e path="haxe.zip.ExtraField"/></c></x>
				<meta><m n=":optional"/></meta>
			</extraFields>
			<dataSize><x path="Int"/></dataSize>
			<data><x path="Null"><c path="haxe.io.Bytes"/></x></data>
			<crc32><x path="Null"><x path="Int"/></x></crc32>
			<compressed><x path="Bool"/></compressed>
		</a>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<enum path="haxe.zip.FlushMode" params="" file="/home/vsts/work/1/s/std/haxe/zip/FlushMode.hx">
		<NO/>
		<SYNC/>
		<FULL/>
		<FINISH/>
		<BLOCK/>
		<meta>
			<m n=":hxGen"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="haxe.zip.Huffman" params="" file="/home/vsts/work/1/s/std/haxe/zip/Huffman.hx">
		<Found a="i"><x path="Int"/></Found>
		<NeedBit a="left:right">
			<e path="haxe.zip.Huffman"/>
			<e path="haxe.zip.Huffman"/>
		</NeedBit>
		<NeedBits a="n:table">
			<x path="Int"/>
			<c path="Array"><e path="haxe.zip.Huffman"/></c>
		</NeedBits>
		<meta><m n=":hxGen"/></meta>
	</enum>
	<class path="haxe.zip.HuffTools" params="" file="/home/vsts/work/1/s/std/haxe/zip/Huffman.hx" module="haxe.zip.Huffman">
		<treeDepth set="method" line="34"><f a="t">
	<e path="haxe.zip.Huffman"/>
	<x path="Int"/>
</f></treeDepth>
		<treeCompress set="method" line="45"><f a="t">
	<e path="haxe.zip.Huffman"/>
	<e path="haxe.zip.Huffman"/>
</f></treeCompress>
		<treeWalk set="method" line="62"><f a="table:p:cd:d:t">
	<c path="Array"><e path="haxe.zip.Huffman"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
	<x path="Void"/>
</f></treeWalk>
		<treeMake set="method" line="75"><f a="bits:maxbits:v:len">
	<c path="haxe.ds.IntMap"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
</f></treeMake>
		<make public="1" set="method" line="86"><f a="lengths:pos:nlengths:maxbits">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
</f></make>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.zip._InflateImpl.Window" params="" file="/home/vsts/work/1/s/std/haxe/zip/InflateImpl.hx" private="1" module="haxe.zip.InflateImpl">
		<SIZE public="1" get="inline" set="null" expr="1 &lt;&lt; 15" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e><![CDATA[1 << 15]]></e></m></meta>
		</SIZE>
		<BUFSIZE public="1" get="inline" set="null" expr="1 &lt;&lt; 16" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e><![CDATA[1 << 16]]></e></m></meta>
		</BUFSIZE>
		<buffer public="1"><c path="haxe.io.Bytes"/></buffer>
		<pos public="1"><x path="Int"/></pos>
		<crc><c path="haxe.crypto.Adler32"/></crc>
		<slide public="1" set="method" line="44"><f a=""><x path="Void"/></f></slide>
		<addBytes public="1" set="method" line="53"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<addByte public="1" set="method" line="60"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<getLastChar public="1" set="method" line="67"><f a=""><x path="Int"/></f></getLastChar>
		<available public="1" set="method" line="71"><f a=""><x path="Int"/></f></available>
		<checksum public="1" set="method" line="75"><f a=""><c path="haxe.crypto.Adler32"/></f></checksum>
		<new public="1" set="method" line="37"><f a="hasCrc">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<enum path="haxe.zip._InflateImpl.State" params="" file="/home/vsts/work/1/s/std/haxe/zip/InflateImpl.hx" private="1" module="haxe.zip.InflateImpl">
		<Head/>
		<Block/>
		<CData/>
		<Flat/>
		<Crc/>
		<Dist/>
		<DistOne/>
		<Done/>
		<meta>
			<m n=":hxGen"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="haxe.zip.InflateImpl" params="" file="/home/vsts/work/1/s/std/haxe/zip/InflateImpl.hx">
		<LEN_EXTRA_BITS_TBL expr="[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, -1, -1]" line="97" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, -1, -1]</e></m></meta>
		</LEN_EXTRA_BITS_TBL>
		<LEN_BASE_VAL_TBL expr="[3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258]" line="100" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258]</e></m></meta>
		</LEN_BASE_VAL_TBL>
		<DIST_EXTRA_BITS_TBL expr="[0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, -1, -1]" line="103" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, -1, -1]</e></m></meta>
		</DIST_EXTRA_BITS_TBL>
		<DIST_BASE_VAL_TBL expr="[1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]" line="106" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]</e></m></meta>
		</DIST_BASE_VAL_TBL>
		<CODE_LENGTHS_POS expr="[16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]" line="109" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]</e></m></meta>
		</CODE_LENGTHS_POS>
		<FIXED_HUFFMAN expr="null" line="127" static="1">
			<e path="haxe.zip.Huffman"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</FIXED_HUFFMAN>
		<run public="1" set="method" line="388" static="1">
			<f a="i:?bufsize" v=":65536">
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ bufsize : 65536 }</e></m></meta>
		</run>
		<nbits><x path="Int"/></nbits>
		<bits><x path="Int"/></bits>
		<state><e path="haxe.zip._InflateImpl.State"/></state>
		<isFinal><x path="Bool"/></isFinal>
		<huffman><e path="haxe.zip.Huffman"/></huffman>
		<huffdist><x path="Null"><e path="haxe.zip.Huffman"/></x></huffdist>
		<htools><c path="haxe.zip.HuffTools"/></htools>
		<len><x path="Int"/></len>
		<dist><x path="Int"/></dist>
		<needed><x path="Int"/></needed>
		<output><c path="haxe.io.Bytes"/></output>
		<outpos><x path="Int"/></outpos>
		<input><c path="haxe.io.Input"/></input>
		<lengths><c path="Array"><x path="Int"/></c></lengths>
		<window><c path="haxe.zip._InflateImpl.Window"/></window>
		<buildFixedHuffman set="method" line="149"><f a=""><e path="haxe.zip.Huffman"/></f></buildFixedHuffman>
		<readBytes public="1" set="method" line="159"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<getBits set="method" line="168"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getBits>
		<getBit set="method" line="179"><f a=""><x path="Bool"/></f></getBit>
		<getRevBits set="method" line="190"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getRevBits>
		<resetBits set="method" line="199"><f a=""><x path="Void"/></f></resetBits>
		<addBytes set="method" line="204"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<addByte set="method" line="211"><f a="b">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<addDistOne set="method" line="218"><f a="n">
	<x path="Int"/>
	<x path="Void"/>
</f></addDistOne>
		<addDist set="method" line="224"><f a="d:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addDist>
		<applyHuffman set="method" line="228"><f a="h">
	<e path="haxe.zip.Huffman"/>
	<x path="Int"/>
</f></applyHuffman>
		<inflateLengths set="method" line="236"><f a="a:max">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></inflateLengths>
		<inflateLoop set="method" line="268"><f a=""><x path="Bool"/></f></inflateLoop>
		<new public="1" set="method" line="129">
			<f a="i:?header:?crc" v=":true:true">
				<c path="haxe.io.Input"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ crc : true, header : true }</e></m></meta>
		</new>
		<haxe_doc>A pure Haxe implementation of the ZLIB Inflate algorithm which allows reading compressed data without any platform-specific support.</haxe_doc>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.zip.Reader" params="" file="/home/vsts/work/1/s/std/haxe/zip/Reader.hx">
		<readZip public="1" set="method" line="194" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="haxe.ds.List"><t path="haxe.zip.Entry"/></c>
</f></readZip>
		<unzip public="1" set="method" line="199" static="1"><f a="f">
	<t path="haxe.zip.Entry"/>
	<x path="Null"><c path="haxe.io.Bytes"/></x>
</f></unzip>
		<i><c path="haxe.io.Input"/></i>
		<readZipDate set="method" line="36"><f a=""><c path="Date"/></f></readZipDate>
		<readExtraFields set="method" line="48"><f a="length">
	<x path="Int"/>
	<c path="haxe.ds.List"><e path="haxe.zip.ExtraField"/></c>
</f></readExtraFields>
		<readEntryHeader public="1" set="method" line="78"><f a=""><t path="haxe.zip.Entry"/></f></readEntryHeader>
		<read public="1" set="method" line="121"><f a=""><c path="haxe.ds.List"><t path="haxe.zip.Entry"/></c></f></read>
		<new public="1" set="method" line="32"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.zip.Tools" params="" file="/home/vsts/work/1/s/std/haxe/zip/Tools.hx">
		<compress public="1" set="method" line="26" static="1"><f a="f:level">
	<t path="haxe.zip.Entry"/>
	<x path="Int"/>
	<x path="Void"/>
</f></compress>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.zip.Uncompress" params="" file="/home/vsts/work/1/s/std/haxe/zip/Uncompress.hx">
		<run public="1" set="method" line="38" static="1"><f a="src:?bufsize">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<execute public="1" set="method" line="30"><f a="src:srcPos:dst:dstPos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></execute>
		<setFlushMode public="1" set="method" line="34"><f a="f">
	<e path="haxe.zip.FlushMode"/>
	<x path="Void"/>
</f></setFlushMode>
		<close public="1" set="method" line="36"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="26"><f a="?windowBits">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="haxe.zip.Writer" params="" file="/home/vsts/work/1/s/std/haxe/zip/Writer.hx">
		<CENTRAL_DIRECTORY_RECORD_FIELDS_SIZE get="inline" set="null" expr="46" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>46</e></m></meta>
			<haxe_doc>The next constant is required for computing the Central
		Directory Record(CDR) size. CDR consists of some fields
		of constant size and a filename. Constant represents
		total length of all fields with constant size for each
		file in archive</haxe_doc>
		</CENTRAL_DIRECTORY_RECORD_FIELDS_SIZE>
		<LOCAL_FILE_HEADER_FIELDS_SIZE get="inline" set="null" expr="30" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>30</e></m></meta>
			<haxe_doc>The following constant is the total size of all fields
		of Local File Header. It's required for calculating
		offset of start of central directory record</haxe_doc>
		</LOCAL_FILE_HEADER_FIELDS_SIZE>
		<o><c path="haxe.io.Output"/></o>
		<files><c path="haxe.ds.List"><a>
	<size><x path="Int"/></size>
	<name><c path="String"/></name>
	<fields><c path="haxe.io.Bytes"/></fields>
	<date><c path="Date"/></date>
	<crc><x path="Int"/></crc>
	<compressed><x path="Bool"/></compressed>
	<clen><x path="Int"/></clen>
</a></c></files>
		<writeZipDate set="method" line="60"><f a="date">
	<c path="Date"/>
	<x path="Void"/>
</f></writeZipDate>
		<writeEntryHeader public="1" set="method" line="71"><f a="f">
	<t path="haxe.zip.Entry"/>
	<x path="Void"/>
</f></writeEntryHeader>
		<write public="1" set="method" line="141"><f a="files">
	<c path="haxe.ds.List"><t path="haxe.zip.Entry"/></c>
	<x path="Void"/>
</f></write>
		<writeCDR public="1" set="method" line="149"><f a=""><x path="Void"/></f></writeCDR>
		<new public="1" set="method" line="55"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="microsoft.win32.safehandles.SafeHandleZeroOrMinusOneIsInvalid" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ microsoft.win32.safehandles.SafeHandleZeroOrMinusOneIsInvalid" extern="1">
		<extends path="cs.system.runtime.interopservices.SafeHandle"/>
		<implements path="cs.system.IDisposable"/>
		<IsInvalid public="1" get="accessor" set="null" override="1"><x path="Bool"/></IsInvalid>
		<get_IsInvalid set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":overload"/></meta>
		</get_IsInvalid>
		<new final="1" set="method">
			<f a="ownsHandle">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":abstract"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"</e></m>
		</meta>
	</class>
	<class path="microsoft.win32.safehandles.SafeFileHandle" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ microsoft.win32.safehandles.SafeFileHandle" extern="1">
		<extends path="microsoft.win32.safehandles.SafeHandleZeroOrMinusOneIsInvalid"/>
		<ReleaseHandle set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</ReleaseHandle>
		<new final="1" public="1" set="method">
			<f a="preexistingHandle:ownsHandle">
				<c path="cs.system.IntPtr"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"Microsoft.Win32.SafeHandles.SafeFileHandle"</e></m>
		</meta>
	</class>
	<class path="microsoft.win32.safehandles.SafeWaitHandle" params="" file="/home/vsts/work/1/s/extra/.haxelib/hxcs/git/netlib/net-20/mscorlib.dll @ microsoft.win32.safehandles.SafeWaitHandle" extern="1">
		<extends path="microsoft.win32.safehandles.SafeHandleZeroOrMinusOneIsInvalid"/>
		<ReleaseHandle set="method" override="1">
			<f a=""><x path="Bool"/></f>
			<meta>
				<m n=":protected"/>
				<m n=":overload"/>
			</meta>
		</ReleaseHandle>
		<new final="1" public="1" set="method">
			<f a="existingHandle:ownsHandle">
				<c path="cs.system.IntPtr"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":overload"/></meta>
		</new>
		<meta>
			<m n=":nativeGen"/>
			<m n=":libType"/>
			<m n=":csNative"/>
			<m n=":native"><e>"Microsoft.Win32.SafeHandles.SafeWaitHandle"</e></m>
		</meta>
	</class>
	<typedef path="sys.FileStat" params="" file="/home/vsts/work/1/s/std/sys/FileStat.hx">
		<a>
			<uid>
				<x path="Int"/>
				<haxe_doc>The user id for the file owner.</haxe_doc>
			</uid>
			<size>
				<x path="Int"/>
				<haxe_doc>The size of the file, in bytes.</haxe_doc>
			</size>
			<rdev>
				<x path="Int"/>
				<haxe_doc>The device type on which stat resides (special files only).</haxe_doc>
			</rdev>
			<nlink>
				<x path="Int"/>
				<haxe_doc>The number of hard links to stat.</haxe_doc>
			</nlink>
			<mtime>
				<c path="Date"/>
				<haxe_doc>The last modification time for the file.</haxe_doc>
			</mtime>
			<mode>
				<x path="Int"/>
				<haxe_doc>The permission bits of stat. The meaning of the bits is platform dependent.</haxe_doc>
			</mode>
			<ino>
				<x path="Int"/>
				<haxe_doc>The inode number for stat.</haxe_doc>
			</ino>
			<gid>
				<x path="Int"/>
				<haxe_doc>The user group id for the file owner.</haxe_doc>
			</gid>
			<dev>
				<x path="Int"/>
				<haxe_doc>The device on which stat resides.</haxe_doc>
			</dev>
			<ctime>
				<c path="Date"/>
				<haxe_doc>The creation time for the file (not all file systems support this).</haxe_doc>
			</ctime>
			<atime>
				<c path="Date"/>
				<haxe_doc>The last access time for the file (when enabled by the file system).</haxe_doc>
			</atime>
		</a>
		<haxe_doc>File information, as given by `sys.FileSystem.stat`.</haxe_doc>
		<meta><m n=":nativeGen"/></meta>
	</typedef>
	<class path="sys.FileSystem" params="" file="/home/vsts/work/1/s/std/cs/_std/sys/FileSystem.hx">
		<exists public="1" set="method" line="32" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the file or directory specified by `path` exists.</haxe_doc>
		</exists>
		<rename public="1" set="method" line="36" static="1">
			<f a="path:newPath">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renames/moves the file or directory specified by `path` to `newPath`.

		If `path` is not a valid file system entry, or if it is not accessible,
		or if `newPath` is not accessible, an exception is thrown.</haxe_doc>
		</rename>
		<stat public="1" set="method" line="41" static="1">
			<f a="path">
				<c path="String"/>
				<t path="sys.FileStat"/>
			</f>
			<meta><m n=":access"><e>Date.fromNative</e></m></meta>
			<haxe_doc>Returns `FileStat` information for the file or directory specified by
		`path`.</haxe_doc>
		</stat>
		<fullPath public="1" set="method" line="77" static="1">
			<f a="relPath">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the full path of the file or directory specified by `relPath`,
		which is relative to the current working directory. Symlinks will be
		followed and the path will be normalized.</haxe_doc>
		</fullPath>
		<absolutePath public="1" set="method" line="81" static="1">
			<f a="relPath">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the full path of the file or directory specified by `relPath`,
		which is relative to the current working directory. The path doesn't
		have to exist.</haxe_doc>
		</absolutePath>
		<isDirectory public="1" set="method" line="87" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the file or directory specified by `path` is a directory.

		If `path` is not a valid file system entry or if its destination is not
		accessible, an exception is thrown.</haxe_doc>
		</isDirectory>
		<createDirectory public="1" set="method" line="94" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a directory specified by `path`.

		This method is recursive: The parent directories don't have to exist.

		If the directory cannot be created, an exception is thrown.</haxe_doc>
		</createDirectory>
		<deleteFile public="1" set="method" line="98" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes the file specified by `path`.

		If `path` does not denote a valid file, or if that file cannot be
		deleted, an exception is thrown.</haxe_doc>
		</deleteFile>
		<deleteDirectory public="1" set="method" line="104" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes the directory specified by `path`. Only empty directories can
		be deleted.

		If `path` does not denote a valid directory, or if that directory cannot
		be deleted, an exception is thrown.</haxe_doc>
		</deleteDirectory>
		<readDirectory public="1" set="method" line="110" static="1">
			<f a="path">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the names of all files and directories in the directory specified
		by `path`. `"."` and `".."` are not included in the output.

		If `path` does not denote a valid directory, an exception is thrown.</haxe_doc>
		</readDirectory>
		<haxe_doc>This class provides information about files and directories.

	If `null` is passed as a file path to any function in this class, the
	result is unspecified, and may differ from target to target.

	See `sys.io.File` for the complementary file API.</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="sys.Http" params="" file="/home/vsts/work/1/s/std/sys/Http.hx">
		<extends path="haxe.http.HttpBase"/>
		<PROXY public="1" expr="null" line="46" static="1">
			<a>
				<port><x path="Int"/></port>
				<host><c path="String"/></host>
				<auth><a>
	<user><c path="String"/></user>
	<pass><c path="String"/></pass>
</a></auth>
			</a>
			<meta><m n=":value"><e>null</e></m></meta>
		</PROXY>
		<requestUrl public="1" set="method" line="486" static="1">
			<f a="url">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Makes a synchronous request to `url`.

		This creates a new Http instance and makes a GET request by calling its
		`request(false)` method.

		If `url` is null, the result is unspecified.</haxe_doc>
		</requestUrl>
		<noShutdown public="1"><x path="Bool"/></noShutdown>
		<cnxTimeout public="1"><x path="Float"/></cnxTimeout>
		<responseHeaders public="1"><t path="Map">
	<c path="String"/>
	<c path="String"/>
</t></responseHeaders>
		<chunk_size><x path="Null"><x path="Int"/></x></chunk_size>
		<chunk_buf><c path="haxe.io.Bytes"/></chunk_buf>
		<file><a>
	<size><x path="Int"/></size>
	<param><c path="String"/></param>
	<mimeType><c path="String"/></mimeType>
	<io><c path="haxe.io.Input"/></io>
	<filename><c path="String"/></filename>
</a></file>
		<request public="1" set="method" line="56" override="1"><f a="?post">
	<x path="Bool"/>
	<x path="Void"/>
</f></request>
		<fileTransfert public="1" get="inline" set="null" line="76">
			<f a="argname:filename:file:size:?mimeType" v="::::&quot;application/octet-stream&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ mimeType : "application/octet-stream" }</e></m>
				<m n=":noCompletion"/>
				<m n=":deprecated"><e>"Use fileTransfer instead"</e></m>
			</meta>
		</fileTransfert>
		<fileTransfer public="1" set="method" line="80">
			<f a="argname:filename:file:size:?mimeType" v="::::&quot;application/octet-stream&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ mimeType : "application/octet-stream" }</e></m></meta>
		</fileTransfer>
		<customRequest public="1" set="method" line="90"><f a="post:api:?sock:?method">
	<x path="Bool"/>
	<c path="haxe.io.Output"/>
	<c path="sys.net.Socket"/>
	<c path="String"/>
	<x path="Void"/>
</f></customRequest>
		<writeBody set="method" line="253"><f a="body:fileInput:fileSize:boundary:sock">
	<x path="Null"><c path="haxe.io.BytesOutput"/></x>
	<x path="Null"><c path="haxe.io.Input"/></x>
	<x path="Int"/>
	<x path="Null"><c path="String"/></x>
	<c path="sys.net.Socket"/>
	<x path="Void"/>
</f></writeBody>
		<readHttpResponse set="method" line="278"><f a="api:sock">
	<c path="haxe.io.Output"/>
	<c path="sys.net.Socket"/>
	<x path="Void"/>
</f></readHttpResponse>
		<readChunk set="method" line="420"><f a="chunk_re:api:buf:len">
	<c path="EReg"/>
	<c path="haxe.io.Output"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></readChunk>
		<new public="1" set="method" line="48"><f a="url">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
	<enum path="sys.io.FileSeek" params="" file="/home/vsts/work/1/s/std/sys/io/FileSeek.hx">
		<SeekBegin/>
		<SeekCur/>
		<SeekEnd/>
		<meta>
			<m n=":hxGen"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="sys.io.Process" params="" file="/home/vsts/work/1/s/std/cs/_std/sys/io/Process.hx">
		<createNativeProcess set="method" line="51" static="1">
			<f a="cmd:?args">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<t path="cs.system.diagnostics._Process.NativeProcess"/>
			</f>
			<meta><m n=":allow"><e>Sys</e></m></meta>
		</createNativeProcess>
		<buildArgumentsString set="method" line="79" static="1"><f a="args">
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
</f></buildArgumentsString>
		<stdout public="1" set="null">
			<c path="haxe.io.Input"/>
			<haxe_doc>Standard output. The output stream where a process writes its output data.</haxe_doc>
		</stdout>
		<stderr public="1" set="null">
			<c path="haxe.io.Input"/>
			<haxe_doc>Standard error. The output stream to output error messages or diagnostics.</haxe_doc>
		</stderr>
		<stdin public="1" set="null">
			<c path="haxe.io.Output"/>
			<haxe_doc>Standard input. The stream data going into a process.</haxe_doc>
		</stdin>
		<native><t path="cs.system.diagnostics._Process.NativeProcess"/></native>
		<getPid public="1" set="method" line="109">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Return the process ID.</haxe_doc>
		</getPid>
		<exitCode public="1" set="method" line="113">
			<f a="?block" v="true">
				<x path="Bool"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<meta><m n=":value"><e>{ block : true }</e></m></meta>
			<haxe_doc>Query the exit code of the process.
		If `block` is true or not specified, it will block until the process terminates.
		If `block` is false, it will return either the process exit code if it's already terminated or null if it's still running.
		If the process has already exited, return the exit code immediately.</haxe_doc>
		</exitCode>
		<close public="1" set="method" line="120">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the process handle and release the associated resources.
		All `Process` fields should not be used after `close()` is called.</haxe_doc>
		</close>
		<kill public="1" set="method" line="124">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Kill the process.</haxe_doc>
		</kill>
		<new public="1" set="method" line="39">
			<f a="cmd:?args:?detached">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Construct a `Process` object, which run the given command immediately.

		Command arguments can be passed in two ways: 1. using `args`, 2. appending to `cmd` and leaving `args` as `null`.

		 1. When using `args` to pass command arguments, each argument will be automatically quoted, and shell meta-characters will be escaped if needed.
		`cmd` should be an executable name that can be located in the `PATH` environment variable, or a path to an executable.

		 2. When `args` is not given or is `null`, command arguments can be appended to `cmd`. No automatic quoting/escaping will be performed. `cmd` should be formatted exactly as it would be when typed at the command line.
		It can run executables, as well as shell commands that are not executables (e.g. on Windows: `dir`, `cd`, `echo` etc).

		`detached` allows the created process to be standalone. You cannot communicate with it but you can look at its exit code. Not supported on php.

		`close()` should be called when the `Process` is no longer used.</haxe_doc>
		</new>
		<meta>
			<m n=":hxGen"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="sys.net.Host" params="" file="/home/vsts/work/1/s/std/cs/_std/sys/net/Host.hx">
		<localhost public="1" set="method" line="65" static="1"><f a=""><c path="String"/></f></localhost>
		<hostEntry public="1" set="null"><c path="cs.system.net.IPHostEntry"/></hostEntry>
		<ipAddress public="1" set="null"><c path="cs.system.net.IPAddress"/></ipAddress>
		<host public="1" set="null"><c path="String"/></host>
		<ip public="1" get="accessor" set="null"><x path="Int"/></ip>
		<get_ip set="method" line="42"><f a=""><x path="Int"/></f></get_ip>
		<toString public="1" set="method" line="57"><f a=""><c path="String"/></f></toString>
		<reverse public="1" set="method" line="61"><f a=""><c path="String"/></f></reverse>
		<new public="1" set="method" line="46"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":hxGen"/>
			<m n=":coreapi"/>
		</meta>
	</class>
	<class path="sys.net.Socket" params="" file="/home/vsts/work/1/s/std/cs/_std/sys/net/Socket.hx">
		<select public="1" set="method" line="140" static="1">
			<f a="read:write:others:?timeout">
				<c path="Array"><c path="sys.net.Socket"/></c>
				<c path="Array"><c path="sys.net.Socket"/></c>
				<c path="Array"><c path="sys.net.Socket"/></c>
				<x path="Float"/>
				<a>
					<write><c path="Array"><c path="sys.net.Socket"/></c></write>
					<read><c path="Array"><c path="sys.net.Socket"/></c></read>
					<others><c path="Array"><c path="sys.net.Socket"/></c></others>
				</a>
			</f>
			<haxe_doc>Wait until one of the sockets group is ready for the given operation:

		 - `read` contains sockets on which we want to wait for available data to be read,
		 - `write` contains sockets on which we want to wait until we are allowed to write some data to their output buffers,
		 - `others` contains sockets on which we want to wait for exceptional conditions.
		 - `select` will block until one of the condition is met, in which case it will return the sockets for which the condition was true.

		In case a `timeout` (in seconds) is specified, select might wait at worst until the timeout expires.</haxe_doc>
		</select>
		<sock expr="null" line="43">
			<t path="cs.system.net.sockets._Socket.NativeSocket"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</sock>
		<input public="1" set="null">
			<c path="haxe.io.Input"/>
			<haxe_doc>The stream on which you can read available data. By default the stream is blocking until the requested data is available,
		use `setBlocking(false)` or `setTimeout` to prevent infinite waiting.</haxe_doc>
		</input>
		<output public="1" set="null">
			<c path="haxe.io.Output"/>
			<haxe_doc>The stream on which you can send data. Please note that in case the output buffer you will block while writing the data, use `setBlocking(false)` or `setTimeout` to prevent that.</haxe_doc>
		</output>
		<custom public="1">
			<d/>
			<haxe_doc>A custom value that can be associated with the socket. Can be used to retrieve your custom infos after a `select`.
	*</haxe_doc>
		</custom>
		<close public="1" set="method" line="56">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Closes the socket : make sure to properly close all your sockets or you will crash when you run out of file descriptors.</haxe_doc>
		</close>
		<read public="1" set="method" line="62">
			<f a=""><c path="String"/></f>
			<haxe_doc>Read the whole data available on the socket.

		*Note*: this is **not** meant to be used together with `setBlocking(false)`,
		as it will always throw `haxe.io.Error.Blocked`. `input` methods should be used directly instead.</haxe_doc>
		</read>
		<write public="1" set="method" line="66">
			<f a="content">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write the whole data to the socket output.

		*Note*: this is **not** meant to be used together with `setBlocking(false)`, as
		`haxe.io.Error.Blocked` may be thrown mid-write with no indication of how many bytes have been written.
		`output.writeBytes()` should be used instead as it returns this information.</haxe_doc>
		</write>
		<connect public="1" set="method" line="70">
			<f a="host:port">
				<c path="sys.net.Host"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Connect to the given server host/port. Throw an exception in case we couldn't successfully connect.</haxe_doc>
		</connect>
		<listen public="1" set="method" line="80">
			<f a="connections">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allow the socket to listen for incoming questions. The parameter tells how many pending connections we can have until they get refused. Use `accept()` to accept incoming connections.</haxe_doc>
		</listen>
		<shutdown public="1" set="method" line="84">
			<f a="read:write">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Shutdown the socket, either for reading or writing.</haxe_doc>
		</shutdown>
		<bind public="1" set="method" line="98">
			<f a="host:port">
				<c path="sys.net.Host"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Bind the socket to the given host/port so it can afterwards listen for connections there.</haxe_doc>
		</bind>
		<accept public="1" set="method" line="103">
			<f a=""><c path="sys.net.Socket"/></f>
			<haxe_doc>Accept a new connected client. This will return a connected socket on which you can read/write some data.</haxe_doc>
		</accept>
		<peer public="1" set="method" line="111">
			<f a=""><a>
	<port><x path="Int"/></port>
	<host><c path="sys.net.Host"/></host>
</a></f>
			<haxe_doc>Return the information about the other side of a connected socket.</haxe_doc>
		</peer>
		<host public="1" set="method" line="116">
			<f a=""><a>
	<port><x path="Int"/></port>
	<host><c path="sys.net.Host"/></host>
</a></f>
			<haxe_doc>Return the information about our side of a connected socket.</haxe_doc>
		</host>
		<setTimeout public="1" set="method" line="121">
			<f a="timeout">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Gives a timeout (in seconds) after which blocking socket operations (such as reading and writing) will abort and throw an exception.</haxe_doc>
		</setTimeout>
		<waitForRead public="1" set="method" line="125">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Block until some data is available for read on the socket.</haxe_doc>
		</waitForRead>
		<setBlocking public="1" set="method" line="132">
			<f a="b">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Change the blocking mode of the socket. A blocking socket is the default behavior. A non-blocking socket will abort blocking operations immediately by throwing a haxe.io.Error.Blocked value.</haxe_doc>
		</setBlocking>
		<setFastSend public="1" set="method" line="136">
			<f a="b">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allows the socket to immediately send the data when written to its output : this will cause less ping but might increase the number of packets / data size, especially when doing a lot of small writes.</haxe_doc>
		</setFastSend>
		<new public="1" set="method" line="51">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new unconnected socket.</haxe_doc>
		</new>
		<haxe_doc>A TCP socket class : allow you to both connect to a given server and exchange messages or start your own server and wait for connections.</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="sys.thread.Deque" params="T" file="/home/vsts/work/1/s/std/cs/_std/sys/thread/Deque.hx">
		<storage final="1" expr="[]" line="29">
			<c path="Array"><c path="sys.thread.Deque.T"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</storage>
		<lockObj final="1" expr="{ }" line="30">
			<a/>
			<meta><m n=":value"><e>{ }</e></m></meta>
		</lockObj>
		<addEvent final="1" expr="new ManualResetEvent(false)" line="31">
			<c path="cs.system.threading.ManualResetEvent"/>
			<meta><m n=":value"><e>new ManualResetEvent(false)</e></m></meta>
		</addEvent>
		<add public="1" set="method" line="35">
			<f a="i">
				<c path="sys.thread.Deque.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds an element at the end of `this` Deque.</haxe_doc>
		</add>
		<push public="1" set="method" line="42">
			<f a="i">
				<c path="sys.thread.Deque.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds an element at the front of `this` Deque.</haxe_doc>
		</push>
		<pop public="1" set="method" line="49">
			<f a="block">
				<x path="Bool"/>
				<x path="Null"><c path="sys.thread.Deque.T"/></x>
			</f>
			<haxe_doc>Tries to retrieve an element from the front of `this` Deque.

		If an element is available, it is removed from the queue and returned.

		If no element is available and `block` is `false`, `null` is returned.

		Otherwise, execution blocks until an element is available and returns it.</haxe_doc>
		</pop>
		<new public="1" set="method" line="33">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Create a new Deque instance which is initially empty.</haxe_doc>
		</new>
		<haxe_doc>A Deque is a double-ended queue with a `pop` method that can block until
	an element is available. It is commonly used to synchronize threads.</haxe_doc>
		<meta>
			<m n=":hxGen"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="sys.thread.Thread" params="" file="/home/vsts/work/1/s/std/cs/_std/sys/thread/Thread.hx">
		<this><c path="sys.thread._Thread.HaxeThread"/></this>
		<meta><m n=":hxGen"/></meta>
		<impl><class path="sys.thread._Thread.Thread_Impl_" params="" file="/home/vsts/work/1/s/std/cs/_std/sys/thread/Thread.hx" private="1" module="sys.thread.Thread">
	<_new get="inline" set="null" line="30" static="1">
		<f a="thread">
			<c path="sys.thread._Thread.HaxeThread"/>
			<x path="sys.thread.Thread"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<create public="1" set="method" line="34" static="1"><f a="cb">
	<f a=""><x path="Void"/></f>
	<x path="sys.thread.Thread"/>
</f></create>
	<current public="1" get="inline" set="null" line="43" static="1"><f a=""><x path="sys.thread.Thread"/></f></current>
	<readMessage public="1" set="method" line="47" static="1"><f a="block">
	<x path="Bool"/>
	<d/>
</f></readMessage>
	<sendMessage public="1" get="inline" set="null" line="51" static="1">
		<f a="this:msg">
			<c path="sys.thread._Thread.HaxeThread"/>
			<d/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sendMessage>
	<readMessageImpl get="inline" set="null" line="55" static="1">
		<f a="this:block">
			<c path="sys.thread._Thread.HaxeThread"/>
			<x path="Bool"/>
			<d/>
		</f>
		<meta><m n=":impl"/></meta>
	</readMessageImpl>
	<meta><m n=":hxGen"/></meta>
</class></impl>
	</abstract>
	<class path="sys.thread._Thread.Thread_Impl_" params="" file="/home/vsts/work/1/s/std/cs/_std/sys/thread/Thread.hx" private="1" module="sys.thread.Thread">
		<_new get="inline" set="null" line="30" static="1">
			<f a="thread">
				<c path="sys.thread._Thread.HaxeThread"/>
				<x path="sys.thread.Thread"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<create public="1" set="method" line="34" static="1"><f a="cb">
	<f a=""><x path="Void"/></f>
	<x path="sys.thread.Thread"/>
</f></create>
		<current public="1" get="inline" set="null" line="43" static="1"><f a=""><x path="sys.thread.Thread"/></f></current>
		<readMessage public="1" set="method" line="47" static="1"><f a="block">
	<x path="Bool"/>
	<d/>
</f></readMessage>
		<sendMessage public="1" get="inline" set="null" line="51" static="1">
			<f a="this:msg">
				<c path="sys.thread._Thread.HaxeThread"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sendMessage>
		<readMessageImpl get="inline" set="null" line="55" static="1">
			<f a="this:block">
				<c path="sys.thread._Thread.HaxeThread"/>
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":impl"/></meta>
		</readMessageImpl>
		<meta><m n=":hxGen"/></meta>
	</class>
	<class path="sys.thread._Thread.HaxeThread" params="" file="/home/vsts/work/1/s/std/cs/_std/sys/thread/Thread.hx" private="1" module="sys.thread.Thread">
		<threads final="1" set="null" expr="new Map&lt;Int,WeakReference&gt;()" line="61" static="1">
			<x path="haxe.ds.Map">
				<x path="Int"/>
				<c path="cs.system.WeakReference"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new Map<Int,WeakReference>()]]></e></m></meta>
		</threads>
		<allocateCount expr="0" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</allocateCount>
		<get public="1" set="method" line="68" static="1"><f a="native">
	<t path="cs.system.threading._Thread.NativeThread"/>
	<c path="sys.thread._Thread.HaxeThread"/>
</f></get>
		<allocate public="1" set="method" line="81" static="1"><f a="native">
	<t path="cs.system.threading._Thread.NativeThread"/>
	<c path="sys.thread._Thread.HaxeThread"/>
</f></allocate>
		<native final="1" public="1"><t path="cs.system.threading._Thread.NativeThread"/></native>
		<messages final="1" expr="new Deque&lt;Dynamic&gt;()" line="66">
			<c path="sys.thread.Deque"><d/></c>
			<meta><m n=":value"><e><![CDATA[new Deque<Dynamic>()]]></e></m></meta>
		</messages>
		<readMessage public="1" get="inline" set="null" line="105"><f a="block">
	<x path="Bool"/>
	<d/>
</f></readMessage>
		<sendMessage public="1" set="method" line="109"><f a="msg">
	<d/>
	<x path="Void"/>
</f></sendMessage>
		<new public="1" set="method" line="101"><f a="native">
	<t path="cs.system.threading._Thread.NativeThread"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":hxGen"/></meta>
	</class>
</haxe>