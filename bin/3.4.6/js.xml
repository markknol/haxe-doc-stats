<haxe>
	<abstract path="Any" params="" file="/home/travis/build/HaxeFoundation/haxe/std/Any.hx">
		<from><icast field="__cast"><c path="__cast.T"/></icast></from>
		<this><d/></this>
		<to><icast field="__promote"><c path="__promote.T"/></icast></to>
		<haxe_doc>`Any` is a type that is compatible with any other in both ways.

	This means that a value of any type can be assigned to `Any`, and
	vice-versa, a value of `Any` type can be assigned to any other type.

	It's a more type-safe alternative to `Dynamic`, because it doesn't
	support field access or operators and it's bound to monomorphs. So,
	to work with the actual value, it needs to be explicitly promoted
	to another type.</haxe_doc>
		<impl><class path="_Any.Any_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/Any.hx" private="1" module="Any">
	<__promote params="T" get="inline" set="null" line="35" static="1">
		<f a="this">
			<d/>
			<c path="__promote.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":extern"/>
			<m n=":to"/>
		</meta>
	</__promote>
	<__cast params="T" get="inline" set="null" line="36" static="1">
		<f a="value">
			<c path="__cast.T"/>
			<x path="Any"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":extern"/>
			<m n=":from"/>
		</meta>
	</__cast>
	<toString get="inline" set="null" line="37" static="1">
		<f a="this">
			<d/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
			<m n=":extern"/>
		</meta>
	</toString>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="_Any.Any_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/Any.hx" private="1" module="Any">
		<__promote params="T" get="inline" set="null" line="35" static="1">
			<f a="this">
				<d/>
				<c path="__promote.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":extern"/>
				<m n=":to"/>
			</meta>
		</__promote>
		<__cast params="T" get="inline" set="null" line="36" static="1">
			<f a="value">
				<c path="__cast.T"/>
				<x path="Any"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":extern"/>
				<m n=":from"/>
			</meta>
		</__cast>
		<toString get="inline" set="null" line="37" static="1">
			<f a="this">
				<d/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
				<m n=":extern"/>
			</meta>
		</toString>
		<meta><m n=":final"/></meta>
	</class>
	<class path="Array" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` is less than or equals
		`pos`, the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.ArraySort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, an empty Array [] is 
		returned and `this` Array is unchanged.

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use `Std.string()` to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<insert public="1" get="inline" set="null" line="40">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<remove public="1" get="inline" set="null" line="44">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurrence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed accordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurrence of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurrence of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<copy public="1" get="inline" set="null" line="62">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<map public="1" params="S" set="method">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" set="method">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<iterator public="1" get="inline" set="null" line="69">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":runtime"/>
			</meta>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.

	@see https://haxe.org/manual/std-Array.html
	@see https://haxe.org/manual/lf-array-comprehension.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="Class" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/Date.hx" extern="1">
		<now public="1" get="inline" set="null" line="38" static="1">
			<f a=""><c path="Date"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" get="inline" set="null" line="42" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a Date from timestamp `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" get="inline" set="null" line="46" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a Date from a formated string `s`, with the following accepted
		formats:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats are expressed in local time, the third in UTC
		Epoch.</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp (in milliseconds) of the date. It might
		only have a per-second precision depending on the platforms.</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range).</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range).</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range).</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4-digits).</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range).</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range).</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range) where `0` is Sunday.</haxe_doc>
		</getDay>
		<toString public="1" get="inline" set="null" line="34">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a string representation of `this` Date, by using the
		standard format [YYYY-MM-DD HH:MM:SS]. See `DateTools.format` for
		other formating rules.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There are some extra functions available in the `DateTools` class.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="DateTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/DateTools.hx">
		<DAY_SHORT_NAMES expr="[&quot;Sun&quot;, &quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;]" line="36" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]</e></m></meta>
		</DAY_SHORT_NAMES>
		<DAY_NAMES expr="[&quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;]" line="37" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]</e></m></meta>
		</DAY_NAMES>
		<MONTH_SHORT_NAMES expr="[&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;]" line="38" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]</e></m></meta>
		</MONTH_SHORT_NAMES>
		<MONTH_NAMES expr="[&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;]" line="39" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]</e></m></meta>
		</MONTH_NAMES>
		<__format_get set="method" line="41" static="1">
			<f a="d:e">
				<c path="Date"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__format_get>
		<__format set="method" line="104" static="1"><f a="d:f">
	<c path="Date"/>
	<c path="String"/>
	<c path="String"/>
</f></__format>
		<format public="1" set="method" line="143" static="1">
			<f a="d:f">
				<c path="Date"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Format the date `d` according to the format `f`. The format is
		compatible with the `strftime` standard format, except that there is no
		support in Flash and JS for day and months names (due to lack of proper
		internationalization API). On Haxe/Neko/Windows, some formats are not
		supported.

		```haxe
		var t = DateTools.format(Date.now(), "%Y-%m-%d_%H:%M:%S");
		// 2016-07-08_14:44:05

		var t = DateTools.format(Date.now(), "%r");
		// 02:44:05 PM

		var t = DateTools.format(Date.now(), "%T");
		// 14:44:05

		var t = DateTools.format(Date.now(), "%F");
		// 2016-07-08
		```</haxe_doc>
		</format>
		<delta public="1" get="inline" set="null" line="159" static="1">
			<f a="d:t">
				<c path="Date"/>
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns the result of adding timestamp `t` to Date `d`.

		This is a convenience function for calling
		`Date.fromTime(d.getTime() + t)`.</haxe_doc>
		</delta>
		<DAYS_OF_MONTH expr="[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]" line="163" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]</e></m></meta>
		</DAYS_OF_MONTH>
		<getMonthDays public="1" set="method" line="170" static="1">
			<f a="d">
				<c path="Date"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of days in the month of Date `d`.

		This method handles leap years.</haxe_doc>
		</getMonthDays>
		<seconds public="1" get="inline" set="null" line="184" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of seconds to a timestamp.</haxe_doc>
		</seconds>
		<minutes public="1" get="inline" set="null" line="191" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of minutes to a timestamp.</haxe_doc>
		</minutes>
		<hours public="1" get="inline" set="null" line="198" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of hours to a timestamp.</haxe_doc>
		</hours>
		<days public="1" get="inline" set="null" line="205" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of days to a timestamp.</haxe_doc>
		</days>
		<parse public="1" set="method" line="212" static="1">
			<f a="t">
				<x path="Float"/>
				<a>
					<seconds><x path="Int"/></seconds>
					<ms><x path="Float"/></ms>
					<minutes><x path="Int"/></minutes>
					<hours><x path="Int"/></hours>
					<days><x path="Int"/></days>
				</a>
			</f>
			<haxe_doc>Separate a date-time into several components</haxe_doc>
		</parse>
		<make public="1" set="method" line="228" static="1">
			<f a="o">
				<a>
					<seconds><x path="Int"/></seconds>
					<ms><x path="Float"/></ms>
					<minutes><x path="Int"/></minutes>
					<hours><x path="Int"/></hours>
					<days><x path="Int"/></days>
				</a>
				<x path="Float"/>
			</f>
			<haxe_doc>Build a date-time from several components</haxe_doc>
		</make>
		<makeUtc public="1" get="inline" set="null" line="236" static="1">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Retrieve Unix timestamp value from Date components. Takes same argument sequence as the Date constructor.</haxe_doc>
		</makeUtc>
		<haxe_doc>The DateTools class contains some extra functionalities for handling `Date`
	instances and timestamps.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
	</class>
	<class path="EReg" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/EReg.hx">
		<r><c path="_EReg.HaxeRegExp"/></r>
		<match public="1" set="method" line="30">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `this` regular expression matches String `s`.

		This method modifies the internal state.

		If `s` is `null`, the result is unspecified.</haxe_doc>
		</match>
		<matched public="1" set="method" line="37">
			<f a="n">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the matched sub-group `n` of `this` EReg.

		This method should only be called after `this.match` or
		`this.matchSub`, and then operates on the String of that operation.

		The index `n` corresponds to the n-th set of parentheses in the pattern
		of `this` EReg. If no such sub-group exists, an exception is thrown.

		If `n` equals 0, the whole matched substring is returned.</haxe_doc>
		</matched>
		<matchedLeft public="1" set="method" line="41">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the part to the left of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the left of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedLeft>
		<matchedRight public="1" set="method" line="46">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the part to the right of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the right of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedRight>
		<matchedPos public="1" set="method" line="52">
			<f a=""><a>
	<pos><x path="Int"/></pos>
	<len><x path="Int"/></len>
</a></f>
			<haxe_doc>Returns the position and length of the last matched substring, within
		the String which was last used as argument to `this.match` or
		`this.matchSub`.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, the position and
		length of the leftmost substring is returned.</haxe_doc>
		</matchedPos>
		<matchSub public="1" set="method" line="57">
			<f a="s:pos:?len" v="::-1">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ len : -1 }</e></m></meta>
			<haxe_doc>Tells if `this` regular expression matches a substring of String `s`.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.match(s.substr(pos,len))` can be used instead.

		This method modifies the internal state.

		If `s` is null, the result is unspecified.</haxe_doc>
		</matchSub>
		<split public="1" set="method" line="77">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Splits String `s` at all substrings `this` EReg matches.

		If a match is found at the start of `s`, the result contains a leading
		empty String "" entry.

		If a match is found at the end of `s`, the result contains a trailing
		empty String "" entry.

		If two matching substrings appear next to each other, the result
		contains the empty String `""` between them.

		By default, this method splits `s` into two parts at the first matched
		substring. If the global g modifier is in place, `s` is split at each
		matched substring.

		If `s` is null, the result is unspecified.</haxe_doc>
		</split>
		<replace public="1" get="inline" set="null" line="83">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Replaces the first substring of `s` which `this` EReg matches with `by`.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `by` contains `$1` to `$9`, the digit corresponds to number of a
		matched sub-group and its value is used instead. If no such sub-group
		exists, the replacement is unspecified. The string `$$` becomes `$`.

		If `s` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<map public="1" set="method" line="87">
			<f a="s:f">
				<c path="String"/>
				<f a="">
					<c path="EReg"/>
					<c path="String"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>Calls the function `f` for the substring of `s` which `this` EReg matches
		and replaces that substring with the result of `f` call.

		The `f` function takes `this` EReg object as its first argument and should
		return a replacement string for the substring matched.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `s` or `f` are null, the result is unspecified.</haxe_doc>
		</map>
		<new public="1" get="inline" set="null" line="26">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new regular expression with pattern `r` and modifiers `opt`.

		This is equivalent to the shorthand syntax `~/r/opt`

		If `r` or `opt` are null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The EReg class represents regular expressions.

	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.

	EReg instances can be created by calling the constructor, or with the
	special syntax `~/pattern/modifier`

	EReg instances maintain an internal state, which is affected by several of
	its methods.

	A detailed explanation of the supported operations is available at
	<https://haxe.org/manual/std-regex.html>]]></haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="js.RegExp" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/RegExp.hx" extern="1">
		<global public="1" set="null"><x path="Bool"/></global>
		<ignoreCase public="1" set="null"><x path="Bool"/></ignoreCase>
		<multiline public="1" set="null"><x path="Bool"/></multiline>
		<source public="1" set="null"><c path="String"/></source>
		<lastIndex public="1"><x path="Int"/></lastIndex>
		<exec public="1" set="method"><f a="str">
	<c path="String"/>
	<t path="Null"><c path="js.RegExpMatch"/></t>
</f></exec>
		<test public="1" set="method"><f a="str">
	<c path="String"/>
	<x path="Bool"/>
</f></test>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="pattern:?flags">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Native JavaScript regular expressions.

    For cross-platform regular expressions, use Haxe `EReg` class or 
    [regexp literals](https://haxe.org/manual/std-regex.html).</haxe_doc>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
	</class>
	<class path="_EReg.HaxeRegExp" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/EReg.hx" private="1" module="EReg" extern="1">
		<extends path="js.RegExp"/>
		<m public="1"><c path="js.RegExpMatch"/></m>
		<s public="1"><c path="String"/></s>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
	</class>
	<abstract path="Enum" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/home/travis/build/HaxeFoundation/haxe/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<class path="IntIterator" params="" file="/home/travis/build/HaxeFoundation/haxe/std/IntIterator.hx">
		<min><x path="Int"/></min>
		<max><x path="Int"/></max>
		<hasNext public="1" get="inline" set="null" line="54">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns true if the iterator has other items, false otherwise.</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="63">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Moves to the next item of the iterator.

		If this is called while hasNext() is false, the result is unspecified.</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="46">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Iterates from `min` (inclusive) to `max` (exclusive).

		If `max <= min`, the iterator will not act as a countdown.]]></haxe_doc>
		</new>
		<haxe_doc>IntIterator is used for implementing interval iterations.

	It is usually not used explicitly, but through its special syntax:
	`min...max`

	While it is possible to assign an instance of IntIterator to a variable or
	field, it is worth noting that IntIterator does not reset after being used
	in a for-loop. Subsequent uses of the same instance will then have no
	effect.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</class>
	<class path="Lambda" params="" file="/home/travis/build/HaxeFoundation/haxe/std/Lambda.hx">
		<array public="1" params="A" set="method" line="44" static="1">
			<f a="it">
				<t path="Iterable"><c path="array.A"/></t>
				<c path="Array"><c path="array.A"/></c>
			</f>
			<haxe_doc>Creates an Array from Iterable `it`.

		If `it` is an Array, this function returns a copy of it.</haxe_doc>
		</array>
		<list public="1" params="A" set="method" line="56" static="1">
			<f a="it">
				<t path="Iterable"><c path="list.A"/></t>
				<c path="List"><c path="list.A"/></c>
			</f>
			<haxe_doc>Creates a List form Iterable `it`.

		If `it` is a List, this function returns a copy of it.</haxe_doc>
		</list>
		<map public="1" params="A:B" set="method" line="70" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="map.A"/></t>
				<f a="">
					<c path="map.A"/>
					<c path="map.B"/>
				</f>
				<c path="List"><c path="map.B"/></c>
			</f>
			<haxe_doc>Creates a new List by applying function `f` to all elements of `it`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<mapi public="1" params="A:B" set="method" line="84" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="mapi.A"/></t>
				<f a=":">
					<x path="Int"/>
					<c path="mapi.A"/>
					<c path="mapi.B"/>
				</f>
				<c path="List"><c path="mapi.B"/></c>
			</f>
			<haxe_doc>Similar to map, but also passes the index of each element to `f`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</mapi>
		<flatten public="1" params="A" set="method" line="97" static="1">
			<f a="it">
				<t path="Iterable"><t path="Iterable"><c path="flatten.A"/></t></t>
				<c path="List"><c path="flatten.A"/></c>
			</f>
			<haxe_doc>Concatenate a list of lists.

		The order of elements is preserved.</haxe_doc>
		</flatten>
		<flatMap public="1" params="A:B" set="method" line="112" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="flatMap.A"/></t>
				<f a="">
					<c path="flatMap.A"/>
					<t path="Iterable"><c path="flatMap.B"/></t>
				</f>
				<c path="List"><c path="flatMap.B"/></c>
			</f>
			<haxe_doc>A composition of map and flatten.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</flatMap>
		<has public="1" params="A" set="method" line="124" static="1">
			<f a="it:elt">
				<t path="Iterable"><c path="has.A"/></t>
				<c path="has.A"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains `elt`.

		This function returns true as soon as an element is found which is equal
		to `elt` according to the `==` operator.

		If no such element is found, the result is false.</haxe_doc>
		</has>
		<exists public="1" params="A" set="method" line="141" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="exists.A"/></t>
				<f a="">
					<c path="exists.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains an element for which `f` is true.

		This function returns true as soon as an element is found for which a
		call to `f` returns true.

		If no such element is found, the result is false.

		If `f` is null, the result is unspecified.</haxe_doc>
		</exists>
		<foreach public="1" params="A" set="method" line="160" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="foreach.A"/></t>
				<f a="">
					<c path="foreach.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is true for all elements of `it`.

		This function returns false as soon as an element is found for which a
		call to `f` returns false.

		If no such element is found, the result is true.

		In particular, this function always returns true if `it` is empty.

		If `f` is null, the result is unspecified.</haxe_doc>
		</foreach>
		<iter public="1" params="A" set="method" line="172" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="iter.A"/></t>
				<f a="">
					<c path="iter.A"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls `f` on all elements of `it`, in order.

		If `f` is null, the result is unspecified.</haxe_doc>
		</iter>
		<filter public="1" params="A" set="method" line="185" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="filter.A"/></t>
				<f a="">
					<c path="filter.A"/>
					<x path="Bool"/>
				</f>
				<c path="List"><c path="filter.A"/></c>
			</f>
			<haxe_doc>Returns a List containing those elements of `it` for which `f` returned
		true.

		If `it` is empty, the result is the empty List even if `f` is null.

		Otherwise if `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<fold public="1" params="A:B" set="method" line="205" static="1">
			<f a="it:f:first">
				<t path="Iterable"><c path="fold.A"/></t>
				<f a=":">
					<c path="fold.A"/>
					<c path="fold.B"/>
					<c path="fold.B"/>
				</f>
				<c path="fold.B"/>
				<c path="fold.B"/>
			</f>
			<haxe_doc>Functional fold on Iterable `it`, using function `f` with start argument
		`first`.

		If `it` has no elements, the result is `first`.

		Otherwise the first element of `it` is passed to `f` alongside `first`.
		The result of that call is then passed to `f` with the next element of
		`it`, and so on until `it` has no more elements.

		If `it` or `f` are null, the result is unspecified.</haxe_doc>
		</fold>
		<count public="1" params="A" set="method" line="217" static="1">
			<f a="it:?pred">
				<t path="Iterable"><c path="count.A"/></t>
				<f a="">
					<c path="count.A"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of elements in `it` for which `pred` is true, or the
		total number of elements in `it` if `pred` is null.

		This function traverses all elements.</haxe_doc>
		</count>
		<empty public="1" params="T" set="method" line="232" static="1">
			<f a="it">
				<t path="Iterable"><c path="empty.T"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if Iterable `it` does not contain any element.</haxe_doc>
		</empty>
		<indexOf public="1" params="T" set="method" line="243" static="1">
			<f a="it:v">
				<t path="Iterable"><c path="indexOf.T"/></t>
				<c path="indexOf.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of the first element `v` within Iterable `it`.

		This function uses operator `==` to check for equality.

		If `v` does not exist in `it`, the result is -1.</haxe_doc>
		</indexOf>
		<find public="1" params="T" set="method" line="263" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="find.T"/></t>
				<f a="">
					<c path="find.T"/>
					<x path="Bool"/>
				</f>
				<t path="Null"><c path="find.T"/></t>
			</f>
			<haxe_doc>Returns the first element of `it` for which `f` is true.

		This function returns as soon as an element is found for which a call to
		`f` returns true.

		If no such element is found, the result is null.

		If `f` is null, the result is unspecified.</haxe_doc>
		</find>
		<concat public="1" params="T" set="method" line="276" static="1">
			<f a="a:b">
				<t path="Iterable"><c path="concat.T"/></t>
				<t path="Iterable"><c path="concat.T"/></t>
				<c path="List"><c path="concat.T"/></c>
			</f>
			<haxe_doc>Returns a new List containing all elements of Iterable `a` followed by
		all elements of Iterable `b`.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</concat>
		<haxe_doc>The `Lambda` class is a collection of methods to support functional
	programming. It is ideally used with `using Lambda` and then acts as an
	extension to Iterable types.

	On static platforms, working with the Iterable structure might be slower
	than performing the operations directly on known types, such as Array and
	List.

	If the first argument to any of the methods is null, the result is
	unspecified.

	@see https://haxe.org/manual/std-Lambda.html</haxe_doc>
	</class>
	<class path="List" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/List.hx">
		<h><c path="_List.ListNode"><c path="List.T"/></c></h>
		<q><c path="_List.ListNode"><c path="List.T"/></c></q>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` List.</haxe_doc>
		</length>
		<add public="1" set="method" line="52">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the end of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</add>
		<push public="1" set="method" line="67">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the beginning of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<first public="1" set="method" line="80">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		This function does not modify `this` List.</haxe_doc>
		</first>
		<last public="1" set="method" line="89">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the last element of `this` List, or null if no elements exist.

		This function does not modify `this` List.</haxe_doc>
		</last>
		<pop public="1" set="method" line="99">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		The element is removed from `this` List.</haxe_doc>
		</pop>
		<isEmpty public="1" set="method" line="113">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if `this` List is empty.</haxe_doc>
		</isEmpty>
		<clear public="1" set="method" line="123">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Empties `this` List.

		This function does not traverse the elements, but simply sets the
		internal references to null and `this.length` to 0.</haxe_doc>
		</clear>
		<remove public="1" set="method" line="137">
			<f a="v">
				<c path="List.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurrence of `v` in `this` List.

		If `v` is found by checking standard equality, it is removed from `this`
		List and the function returns true.

		Otherwise, false is returned.</haxe_doc>
		</remove>
		<iterator public="1" get="inline" set="null" line="160">
			<f a=""><c path="_List.ListIterator"><c path="List.T"/></c></f>
			<haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="170">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` List.

		The result is enclosed in { } with the individual elements being
		separated by a comma.</haxe_doc>
		</toString>
		<join public="1" set="method" line="191">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` List, with `sep` separating
		each element.</haxe_doc>
		</join>
		<filter public="1" set="method" line="210">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<x path="Bool"/>
				</f>
				<c path="List"><c path="List.T"/></c>
			</f>
			<haxe_doc>Returns a list filtered with `f`. The returned list will contain all
		elements for which `f(x) == true`.</haxe_doc>
		</filter>
		<map public="1" params="X" set="method" line="226">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<c path="map.X"/>
				</f>
				<c path="List"><c path="map.X"/></c>
			</f>
			<haxe_doc>Returns a new list where all elements have been converted by the
		function `f`.</haxe_doc>
		</map>
		<new public="1" set="method" line="43">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of element container objects
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole list content every time.

	@see https://haxe.org/manual/std-List.html</haxe_doc>
	</class>
	<class path="_List.ListNode" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/List.hx" private="1" module="List">
		<create public="1" params="T" get="inline" set="null" line="259" static="1">
			<f a="item:next">
				<c path="create.T"/>
				<c path="_List.ListNode"><c path="create.T"/></c>
				<c path="_List.ListNode"><c path="create.T"/></c>
			</f>
			<meta><m n=":extern"/></meta>
		</create>
		<item public="1"><c path="_List.ListNode.T"/></item>
		<next public="1"><c path="_List.ListNode"><c path="_List.ListNode.T"/></c></next>
		<new public="1" set="method" line="255"><f a="item:next">
	<c path="_List.ListNode.T"/>
	<c path="_List.ListNode"><c path="_List.ListNode.T"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="_List.ListIterator" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/List.hx" private="1" module="List">
		<head><c path="_List.ListNode"><c path="_List.ListIterator.T"/></c></head>
		<hasNext public="1" get="inline" set="null" line="272"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="276"><f a=""><c path="_List.ListIterator.T"/></f></next>
		<new public="1" get="inline" set="null" line="268"><f a="head">
	<c path="_List.ListNode"><c path="_List.ListIterator.T"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="Map" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><t path="IMap">
	<c path="Map.K"/>
	<c path="Map.V"/>
</t></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `key1 => value1, key2 => value2` syntax.

	Map is an abstract type, it is not available at runtime.

	@see https://haxe.org/manual/std-Map.html]]></haxe_doc>
		<meta><m n=":multiType"><e>@:followWithAbstracts K</e></m></meta>
		<impl><class path="_Map.Map_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/Map.hx" private="1" module="Map">
	<_new public="1" set="method" static="1">
		<f a=""><x path="Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></f>
		<meta>
			<m n=":extern"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if K is a `String`, `haxe.ds.StringMap` is used
		2. if K is an `Int`, `haxe.ds.IntMap` is used
		3. if K is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if K is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if K is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on ObjectMap by default.</haxe_doc>
	</_new>
	<set public="1" get="inline" set="null" line="73" static="1">
		<f a="this:key:value">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="Map.K"/>
			<c path="Map.V"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Maps `key` to `value`.

		If `key` already has a mapping, the previous value disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
	</set>
	<get public="1" get="inline" set="null" line="90" static="1">
		<f a="this:key">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="Map.K"/>
			<t path="Null"><c path="Map.V"/></t>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Returns the current mapping of `key`.

		If no such mapping exists, null is returned.

		Note that a check like `map.get(key) == null` can hold for two reasons:

		1. the map has no mapping for `key`
		2. the map has a mapping with a value of `null`

		If it is important to distinguish these cases, `exists()` should be
		used.

		If `key` is null, the result is unspecified.</haxe_doc>
	</get>
	<exists public="1" get="inline" set="null" line="97" static="1">
		<f a="this:key">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="Map.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns true if `key` has a mapping, false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="105" static="1">
		<f a="this:key">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="Map.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Removes the mapping of `key` and returns true if such a mapping existed,
		false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="112" static="1">
		<f a="this">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<t path="Iterator"><c path="Map.K"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an Iterator over the keys of `this` Map.

		The order of keys is undefined.</haxe_doc>
	</keys>
	<iterator public="1" get="inline" set="null" line="121" static="1">
		<f a="this">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<t path="Iterator"><c path="Map.V"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an Iterator over the values of `this` Map.

		The order of values is undefined.</haxe_doc>
	</iterator>
	<toString public="1" get="inline" set="null" line="130" static="1">
		<f a="this">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a String representation of `this` Map.

		The exact representation depends on the platform and key-type.</haxe_doc>
	</toString>
	<arrayWrite public="1" get="inline" set="null" line="134" static="1">
		<f a="this:k:v">
			<t path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</t>
			<c path="Map.K"/>
			<c path="Map.V"/>
			<c path="Map.V"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
			<m n=":noCompletion"/>
		</meta>
	</arrayWrite>
	<toStringMap params="K:V" get="inline" set="null" line="139" static="1">
		<f a="t">
			<t path="IMap">
				<c path="toStringMap.K"/>
				<c path="toStringMap.V"/>
			</t>
			<c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toStringMap>
	<toIntMap params="K:V" get="inline" set="null" line="143" static="1">
		<f a="t">
			<t path="IMap">
				<c path="toIntMap.K"/>
				<c path="toIntMap.V"/>
			</t>
			<c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toIntMap>
	<toEnumValueMapMap params="K:V" get="inline" set="null" line="147" static="1">
		<f a="t">
			<t path="IMap">
				<c path="toEnumValueMapMap.K"/>
				<c path="toEnumValueMapMap.V"/>
			</t>
			<c path="haxe.ds.EnumValueMap">
				<c path="toEnumValueMapMap.K"/>
				<c path="toEnumValueMapMap.V"/>
			</c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toEnumValueMapMap>
	<toObjectMap params="K:V" get="inline" set="null" line="151" static="1">
		<f a="t">
			<t path="IMap">
				<c path="toObjectMap.K"/>
				<c path="toObjectMap.V"/>
			</t>
			<c path="haxe.ds.ObjectMap">
				<c path="toObjectMap.K"/>
				<c path="toObjectMap.V"/>
			</c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toObjectMap>
	<fromStringMap params="V" get="inline" set="null" line="155" static="1">
		<f a="map">
			<c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c>
			<x path="Map">
				<c path="String"/>
				<c path="fromStringMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromStringMap>
	<fromIntMap params="V" get="inline" set="null" line="159" static="1">
		<f a="map">
			<c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c>
			<x path="Map">
				<x path="Int"/>
				<c path="fromIntMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromIntMap>
	<fromObjectMap params="K:V" get="inline" set="null" line="163" static="1">
		<f a="map">
			<c path="haxe.ds.ObjectMap">
				<c path="fromObjectMap.K"/>
				<c path="fromObjectMap.V"/>
			</c>
			<x path="Map">
				<c path="fromObjectMap.K"/>
				<c path="fromObjectMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromObjectMap>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="_Map.Map_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/Map.hx" private="1" module="Map">
		<_new public="1" set="method" static="1">
			<f a=""><x path="Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></f>
			<meta>
				<m n=":extern"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if K is a `String`, `haxe.ds.StringMap` is used
		2. if K is an `Int`, `haxe.ds.IntMap` is used
		3. if K is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if K is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if K is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on ObjectMap by default.</haxe_doc>
		</_new>
		<set public="1" get="inline" set="null" line="73" static="1">
			<f a="this:key:value">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="Map.K"/>
				<c path="Map.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Maps `key` to `value`.

		If `key` already has a mapping, the previous value disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="90" static="1">
			<f a="this:key">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="Map.K"/>
				<t path="Null"><c path="Map.V"/></t>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Returns the current mapping of `key`.

		If no such mapping exists, null is returned.

		Note that a check like `map.get(key) == null` can hold for two reasons:

		1. the map has no mapping for `key`
		2. the map has a mapping with a value of `null`

		If it is important to distinguish these cases, `exists()` should be
		used.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="97" static="1">
			<f a="this:key">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="Map.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns true if `key` has a mapping, false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="105" static="1">
			<f a="this:key">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="Map.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Removes the mapping of `key` and returns true if such a mapping existed,
		false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="112" static="1">
			<f a="this">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<t path="Iterator"><c path="Map.K"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an Iterator over the keys of `this` Map.

		The order of keys is undefined.</haxe_doc>
		</keys>
		<iterator public="1" get="inline" set="null" line="121" static="1">
			<f a="this">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<t path="Iterator"><c path="Map.V"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an Iterator over the values of `this` Map.

		The order of values is undefined.</haxe_doc>
		</iterator>
		<toString public="1" get="inline" set="null" line="130" static="1">
			<f a="this">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a String representation of `this` Map.

		The exact representation depends on the platform and key-type.</haxe_doc>
		</toString>
		<arrayWrite public="1" get="inline" set="null" line="134" static="1">
			<f a="this:k:v">
				<t path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</t>
				<c path="Map.K"/>
				<c path="Map.V"/>
				<c path="Map.V"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
				<m n=":noCompletion"/>
			</meta>
		</arrayWrite>
		<toStringMap params="K:V" get="inline" set="null" line="139" static="1">
			<f a="t">
				<t path="IMap">
					<c path="toStringMap.K"/>
					<c path="toStringMap.V"/>
				</t>
				<c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toStringMap>
		<toIntMap params="K:V" get="inline" set="null" line="143" static="1">
			<f a="t">
				<t path="IMap">
					<c path="toIntMap.K"/>
					<c path="toIntMap.V"/>
				</t>
				<c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toIntMap>
		<toEnumValueMapMap params="K:V" get="inline" set="null" line="147" static="1">
			<f a="t">
				<t path="IMap">
					<c path="toEnumValueMapMap.K"/>
					<c path="toEnumValueMapMap.V"/>
				</t>
				<c path="haxe.ds.EnumValueMap">
					<c path="toEnumValueMapMap.K"/>
					<c path="toEnumValueMapMap.V"/>
				</c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toEnumValueMapMap>
		<toObjectMap params="K:V" get="inline" set="null" line="151" static="1">
			<f a="t">
				<t path="IMap">
					<c path="toObjectMap.K"/>
					<c path="toObjectMap.V"/>
				</t>
				<c path="haxe.ds.ObjectMap">
					<c path="toObjectMap.K"/>
					<c path="toObjectMap.V"/>
				</c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toObjectMap>
		<fromStringMap params="V" get="inline" set="null" line="155" static="1">
			<f a="map">
				<c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c>
				<x path="Map">
					<c path="String"/>
					<c path="fromStringMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromStringMap>
		<fromIntMap params="V" get="inline" set="null" line="159" static="1">
			<f a="map">
				<c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c>
				<x path="Map">
					<x path="Int"/>
					<c path="fromIntMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromIntMap>
		<fromObjectMap params="K:V" get="inline" set="null" line="163" static="1">
			<f a="map">
				<c path="haxe.ds.ObjectMap">
					<c path="fromObjectMap.K"/>
					<c path="fromObjectMap.V"/>
				</c>
				<x path="Map">
					<c path="fromObjectMap.K"/>
					<c path="fromObjectMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromObjectMap>
		<meta><m n=":final"/></meta>
	</class>
	<typedef path="IMap" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":deprecated"/>
		</meta>
	</typedef>
	<class path="Math" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/Math.hx" extern="1">
		<PI public="1" set="null" static="1"><x path="Float"/></PI>
		<NEGATIVE_INFINITY public="1" get="accessor" set="null" static="1"><x path="Float"/></NEGATIVE_INFINITY>
		<get_NEGATIVE_INFINITY get="inline" set="null" line="32" static="1">
			<f a=""><x path="Float"/></f>
			<meta><m n=":has_untyped"/></meta>
		</get_NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" get="accessor" set="null" static="1"><x path="Float"/></POSITIVE_INFINITY>
		<get_POSITIVE_INFINITY get="inline" set="null" line="37" static="1">
			<f a=""><x path="Float"/></f>
			<meta><m n=":has_untyped"/></meta>
		</get_POSITIVE_INFINITY>
		<NaN public="1" get="accessor" set="null" static="1"><x path="Float"/></NaN>
		<get_NaN get="inline" set="null" line="42" static="1">
			<f a=""><x path="Float"/></f>
			<meta><m n=":has_untyped"/></meta>
		</get_NaN>
		<abs public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></abs>
		<acos public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></acos>
		<asin public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></asin>
		<atan public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></atan>
		<atan2 public="1" set="method" static="1"><f a="y:x">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></atan2>
		<ceil public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Int"/>
</f></ceil>
		<cos public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></cos>
		<exp public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></exp>
		<floor public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Int"/>
</f></floor>
		<log public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></log>
		<max public="1" set="method" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></max>
		<min public="1" set="method" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></min>
		<pow public="1" set="method" static="1"><f a="v:exp">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></pow>
		<random public="1" set="method" static="1"><f a=""><x path="Float"/></f></random>
		<round public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Int"/>
</f></round>
		<sin public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></sin>
		<sqrt public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></sqrt>
		<tan public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></tan>
		<ffloor public="1" get="inline" set="null" line="65" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></ffloor>
		<fceil public="1" get="inline" set="null" line="69" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fceil>
		<fround public="1" get="inline" set="null" line="73" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fround>
		<isFinite public="1" get="inline" set="null" line="77" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</isFinite>
		<isNaN public="1" get="inline" set="null" line="81" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</isNaN>
		<meta><m n=":keepInit"/></meta>
	</class>
	<class path="Reflect" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/Reflect.hx">
		<hasField public="1" get="inline" set="null" line="25" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if structure `o` has a field named `field`.

		This is only guaranteed to work for anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</hasField>
		<field public="1" set="method" line="29" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the value of the field named `field` on object `o`.

		If `o` is not an object or has no field named `field`, the result is
		null.

		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.

		If `field` is null, the result is unspecified.

		(As3) If used on a property field, the getter will be invoked. It is
		not possible to obtain the value directly.</haxe_doc>
		</field>
		<setField public="1" get="inline" set="null" line="33" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`.

		If `o` has no field named `field`, this function is only guaranteed to
		work for anonymous structures.

		If `o` or `field` are null, the result is unspecified.

		(As3) If used on a property field, the setter will be invoked. It is
		not possible to set the value directly.</haxe_doc>
		</setField>
		<getProperty public="1" set="method" line="37" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the value of the field named `field` on object `o`, taking
		property getter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.field`, but might be slower.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</getProperty>
		<setProperty public="1" set="method" line="42" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`, taking
		property setter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.setField`, but might be slower.

		If `field` is null, the result is unspecified.</haxe_doc>
		</setProperty>
		<callMethod public="1" get="inline" set="null" line="47" static="1">
			<f a="o:func:args">
				<d/>
				<x path="haxe.Function"/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Call a method with the given object and arguments.</haxe_doc>
		</callMethod>
		<fields public="1" set="method" line="51" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the fields of structure `o`.

		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="62" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns true if `f` is a function, false otherwise.

		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" line="66" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares `a` and `b`.

		If `a` is less than `b`, the result is negative. If `b` is less than
		`a`, the result is positive. If `a` and `b` are equal, the result is 0.

		This function is only defined if `a` and `b` are of the same type.

		If that type is a function, the result is unspecified and
		`Reflect.compareMethods` should be used instead.

		For all other types, the result is 0 if `a` and `b` are equal. If they
		are not equal, the result depends on the type and is negative if:

		- Numeric types: a is less than b
		- String: a is lexicographically less than b
		- Other: unspecified

		If `a` and `b` are null, the result is 0. If only one of them is null,
		the result is unspecified.</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" line="70" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares the functions `f1` and `f2`.

		If `f1` or `f2` are not functions, the result is unspecified.

		Otherwise the result is true if `f1` and the `f2` are physically equal,
		false otherwise.</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" line="78" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Tells if `v` is an object.

		The result is true if `v` is one of the following:

		- class instance
		- structure
		- `Class<T>`
		- `Enum<T>`

		Otherwise, including if `v` is null, the result is false.]]></haxe_doc>
		</isObject>
		<isEnumValue public="1" set="method" line="85" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `v` is an enum value.

		The result is true if `v` is of type EnumValue, i.e. an enum
		constructor.

		Otherwise, including if `v` is null, the result is false.</haxe_doc>
		</isEnumValue>
		<deleteField public="1" set="method" line="89" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Removes the field named `field` from structure `o`.

		This method is only guaranteed to work on anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" line="95" static="1">
			<f a="o">
				<c path="copy.T"/>
				<c path="copy.T"/>
			</f>
			<haxe_doc>Copies the fields of structure `o`.

		This is only guaranteed to work on anonymous structures.

		If `o` is null, the result is unspecified.</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" line="103" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
			<overloads><makeVarArgs public="1" set="method"><f a="f">
	<f a="">
		<c path="Array"><d/></c>
		<x path="Void"/>
	</f>
	<d/>
</f></makeVarArgs></overloads>
		</makeVarArgs>
		<haxe_doc>The Reflect API is a way to manipulate values dynamically through an
	abstract interface in an untyped manner. Use with care.

	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="String" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<charCodeAt public="1" get="inline" set="null" line="35">
			<f a="index">
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<substr public="1" get="inline" set="null" line="39">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.
	
	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="Std" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/Std.hx">
		<is public="1" get="inline" set="null" line="27" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.</haxe_doc>
		</is>
		<instance public="1" params="T:S" get="inline" set="null" line="31" static="1">
			<f a="value:c">
				<c path="instance.T"/>
				<x path="Class"><c path="instance.S"/></x>
				<c path="instance.S"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Checks if object `value` is an instance of class `c`.

		Compiles only if the class specified by `c` can be assigned to the type
		of `value`.

		This method checks if a downcast is possible. That is, if the runtime
		type of `value` is assignable to the class specified by `c`, `value` is
		returned. Otherwise null is returned.

		This method is not guaranteed to work with interfaces or core types such
		as `String`, `Array` and `Date`.

		If `value` is null, the result is null. If `c` is null, the result is
		unspecified.</haxe_doc>
		</instance>
		<string public="1" set="method" line="36" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" get="inline" set="null" line="40" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="45" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If the input cannot be recognized, the result is `null`.</haxe_doc>
		</parseInt>
		<parseFloat public="1" get="inline" set="null" line="55" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a `NaN` value instead of null.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="59" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":keepInit"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="/home/travis/build/HaxeFoundation/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/home/travis/build/HaxeFoundation/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/home/travis/build/HaxeFoundation/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Null" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>`Null` can be useful in two cases. In order to document some methods
	that accept or can return a `null` value, or for the Flash compiler and AS3
	generator to distinguish between base values that can be `null` and others that
	can't.

	@see https://haxe.org/manual/types-nullability.html</haxe_doc>
	</typedef>
	<abstract path="Bool" params="" file="/home/travis/build/HaxeFoundation/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="StringBuf" params="" file="/home/travis/build/HaxeFoundation/haxe/std/StringBuf.hx">
		<b><c path="String"/></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` StringBuf in characters.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="51"><f a=""><x path="Int"/></f></get_length>
		<add public="1" params="T" get="inline" set="null" line="64">
			<f a="x">
				<c path="add.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the representation of `x` to `this` StringBuf.

		The exact representation of `x` may vary per platform. To get more
		consistent behavior, this function should be called with
		Std.string(x).

		If `x` is null, the String "null" is appended.</haxe_doc>
		</add>
		<addChar public="1" get="inline" set="null" line="74">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the character identified by `c` to `this` StringBuf.

		If `c` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</addChar>
		<addSub public="1" get="inline" set="null" line="90">
			<f a="s:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a substring of `s` to `this` StringBuf.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.add(s.substr(pos,len))` can be used instead.

		If `s` or `pos` are null, the result is unspecified.

		If `len` is omitted or null, the substring ranges from `pos` to the end
		of `s`.</haxe_doc>
		</addSub>
		<toString public="1" get="inline" set="null" line="99">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the content of `this` StringBuf as String.

		The buffer is not emptied by this operation.</haxe_doc>
		</toString>
		<new public="1" get="inline" set="null" line="47">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Its cross-platform implementation uses String concatenation internally, but
	StringBuf may be optimized for different targets.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values. However, the internal buffer cannot be modified.</haxe_doc>
	</class>
	<class path="StringTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/StringTools.hx">
		<urlEncode public="1" get="inline" set="null" line="37" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Encode an URL by using the standard format.</haxe_doc>
		</urlEncode>
		<urlDecode public="1" get="inline" set="null" line="107" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Decode an URL using the standard format.</haxe_doc>
		</urlDecode>
		<htmlEscape public="1" set="method" line="153" static="1">
			<f a="s:?quotes">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Escapes HTML special characters of the string `s`.

		The following replacements are made:

		- `&` becomes `&amp`;
		- `<` becomes `&lt`;
		- `>` becomes `&gt`;

		If `quotes` is true, the following characters are also replaced:

		- `"` becomes `&quot`;
		- `'` becomes `&#039`;]]></haxe_doc>
		</htmlEscape>
		<htmlUnescape public="1" set="method" line="172" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Unescapes HTML special characters of the string `s`.

		This is the inverse operation to htmlEscape, i.e. the following always
		holds: `htmlUnescape(htmlEscape(s)) == s`

		The replacements follow:

		- `&amp;` becomes `&`
		- `&lt;` becomes `<`
		- `&gt;` becomes `>`
		- `&quot;` becomes `"`
		- `&#039;` becomes `'`]]></haxe_doc>
		</htmlUnescape>
		<startsWith public="1" set="method" line="183" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` starts with the string `start`.

		If `start` is `null`, the result is unspecified.

		If `start` is the empty String `""`, the result is true.</haxe_doc>
		</startsWith>
		<endsWith public="1" set="method" line="211" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` ends with the string `end`.

		If `end` is `null`, the result is unspecified.

		If `end` is the empty String `""`, the result is true.</haxe_doc>
		</endsWith>
		<isSpace public="1" set="method" line="245" static="1">
			<f a="s:pos">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the character in the string `s` at position `pos` is a space.

		A character is considered to be a space character if its character code
		is 9,10,11,12,13 or 32.

		If `s` is the empty String `""`, or if pos is not a valid position within
		`s`, the result is false.</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="262" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="287" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="309" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading and trailing space characters of `s`.

		This is a convenience function for `ltrim(rtrim(s))`.</haxe_doc>
		</trim>
		<lpad public="1" set="method" line="331" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Concatenates `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String `""` or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</lpad>
		<rpad public="1" set="method" line="353" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Appends `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String `""` or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</rpad>
		<replace public="1" set="method" line="374" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replace all occurrences of the String `sub` in the String `s` by the
		String `by`.

		If `sub` is the empty String `""`, `by` is inserted after each character
		of `s`. If `by` is also the empty String `""`, `s` remains unchanged.

		This is a convenience function for `s.split(sub).join(by)`.

		If `sub` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<hex public="1" set="method" line="396" static="1">
			<f a="n:?digits">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `n` into a hexadecimal representation.

		If `digits` is specified, the resulting String is padded with "0" until
		its `length` equals `digits`.</haxe_doc>
		</hex>
		<fastCodeAt public="1" get="inline" set="null" line="438" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the character code at position `index` of String `s`, or an
		end-of-file indicator at if `position` equals `s.length`.

		This method is faster than `String.charCodeAt()` on some platforms, but
		the result is unspecified if `index` is negative or greater than
		`s.length`.

		End of file status can be checked by calling `StringTools.isEof()` with
		the returned value as argument.

		This operation is not guaranteed to work if `s` contains the `\0`
		character.</haxe_doc>
		</fastCodeAt>
		<isEof public="1" get="inline" set="null" line="465" static="1">
			<f a="c">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</isEof>
		<quoteUnixArg public="1" set="method" line="488" static="1">
			<f a="argument">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Unix.
		The input will be quoted, or escaped if necessary.</haxe_doc>
		</quoteUnixArg>
		<winMetaCharacters public="1" expr="[&quot; &quot;.code, &quot;(&quot;.code, &quot;)&quot;.code, &quot;%&quot;.code, &quot;!&quot;.code, &quot;^&quot;.code, &quot;\&quot;&quot;.code, &quot;&lt;&quot;.code, &quot;&gt;&quot;.code, &quot;&amp;&quot;.code, &quot;|&quot;.code, &quot;\n&quot;.code, &quot;\r&quot;.code, &quot;,&quot;.code, &quot;;&quot;.code]" line="506" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e><![CDATA[[" ".code, "(".code, ")".code, "%".code, "!".code, "^".code, "\"".code, "<".code, ">".code, "&".code, "|".code, "\n".code, "\r".code, ",".code, ";".code]]]></e></m></meta>
			<haxe_doc>Character codes of the characters that will be escaped by `quoteWinArg(_, true)`.</haxe_doc>
		</winMetaCharacters>
		<quoteWinArg public="1" set="method" line="521" static="1">
			<f a="argument:escapeMetaCharacters">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String that can be used as a single command line argument
		on Windows.
		The input will be quoted, or escaped if necessary, such that the output
		will be parsed as a single argument using the rule specified in
		http://msdn.microsoft.com/en-us/library/ms880421

		Examples:
		```
		quoteWinArg("abc") == "abc";
		quoteWinArg("ab c") == '"ab c"';
		```</haxe_doc>
		</quoteWinArg>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	`using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
	to the `String` class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<enum path="ValueType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/Type.hx" module="Type">
		<TNull/>
		<TInt/>
		<TFloat/>
		<TBool/>
		<TObject/>
		<TFunction/>
		<TClass a="c"><x path="Class"><d/></x></TClass>
		<TEnum a="e"><x path="Enum"><d/></x></TEnum>
		<TUnknown/>
	</enum>
	<class path="Type" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/Type.hx">
		<getClass public="1" params="T" get="inline" set="null" line="37" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.

		If `o` is null or of a different type, null is returned.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" line="41" static="1">
			<f a="o">
				<x path="EnumValue"/>
				<x path="Enum"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc><![CDATA[Returns the enum of enum instance `o`.

		An enum instance is the result of using an enum constructor. Given an
		`enum Color { Red; }`, `getEnum(Red)` returns `Enum<Color>`.

		If `o` is null, null is returned.

		In general, type parameter information cannot be obtained at runtime.]]></haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" line="47" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the super-class of class `c`.

		If `c` has no super class, null is returned.

		If `c` is null, the result is unspecified.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" line="52" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the name of class `c`, including its path.

		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `c` has no package, the class name is returned.

		If `c` is null, the result is unspecified.

		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" line="59" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		`pack1.pack2.(...).packN.EnumName`
		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" line="64" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Resolves a class by name.

		If `name` is the path of an existing class, that class is returned.

		Otherwise null is returned.

		If `name` is null or the path to a different type, the result is
		unspecified.

		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="72" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Resolves an enum by name.

		If `name` is the path of an existing enum, that enum is returned.

		Otherwise null is returned.

		If `name` is null the result is unspecified.

		If `name` is the path to a different type, null is returned.

		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" line="80" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates an instance of class `cl`, using `args` as arguments to the
		class constructor.

		This function guarantees that the class constructor is called.

		Default values of constructors arguments are not guaranteed to be
		taken into account.

		If `cl` or `args` are null, or if the number of elements in `args` does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if `cl` has no own constructor, the
		result is unspecified.

		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" line="117" static="1">
			<f a="cl">
				<x path="Class"><c path="createEmptyInstance.T"/></x>
				<c path="createEmptyInstance.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates an instance of class `cl`.

		This function guarantees that the class constructor is not called.

		If `cl` is null, the result is unspecified.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" line="122" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" line="134" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createEnumIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" set="method" line="140" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a list of the instance fields of class `c`.

		This only includes fields which are known at compile-time. In
		particular, using getInstanceFields(getClass(obj)) will not include
		any fields which were added to obj at runtime.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.

		(As3) This method only returns instance fields that are public.</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" line="148" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of static fields of class `c`.

		This does not include static fields of parent classes.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.

		(As3) This method only returns class fields that are public.</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" get="inline" set="null" line="159" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" line="163" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the runtime type of value `v`.

		The result corresponds to the type `v` has at runtime, which may vary
		per platform. Assumptions regarding this should be minimized to avoid
		surprises.</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" line="193" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</enumEq>
		<enumConstructor public="1" get="inline" set="null" line="211" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" get="inline" set="null" line="215" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumParameters>
		<enumIndex public="1" get="inline" set="null" line="219" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumIndex>
		<allEnums public="1" params="T" get="inline" set="null" line="223" static="1">
			<f a="e">
				<x path="Enum"><c path="allEnums.T"/></x>
				<c path="Array"><c path="allEnums.T"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</allEnums>
		<haxe_doc>The Haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.

	@see https://haxe.org/manual/types.html
	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="UInt" params="" file="/home/travis/build/HaxeFoundation/haxe/std/UInt.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>The unsigned `Int` type is only defined for Flash and C#.
	Simulate it for other platforms.

	@see https://haxe.org/manual/types-basic-types.html</haxe_doc>
		<impl><class path="_UInt.UInt_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/UInt.hx" private="1" module="UInt">
	<add get="inline" set="null" line="104" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</add>
	<div get="inline" set="null" line="108" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</div>
	<mul get="inline" set="null" line="112" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</mul>
	<sub get="inline" set="null" line="116" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</sub>
	<gt set="method" line="120" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gt>
	<gte set="method" line="128" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gte>
	<lt get="inline" set="null" line="136" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</lt>
	<lte get="inline" set="null" line="140" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lte>
	<and get="inline" set="null" line="144" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
	</and>
	<or get="inline" set="null" line="148" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A | B</e></m></meta>
	</or>
	<xor get="inline" set="null" line="152" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A ^ B</e></m></meta>
	</xor>
	<shl get="inline" set="null" line="156" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
	</shl>
	<shr get="inline" set="null" line="160" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
	</shr>
	<ushr get="inline" set="null" line="164" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
	</ushr>
	<mod get="inline" set="null" line="168" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</mod>
	<addWithFloat get="inline" set="null" line="172" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A + B</e></m>
		</meta>
	</addWithFloat>
	<mulWithFloat get="inline" set="null" line="176" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A * B</e></m>
		</meta>
	</mulWithFloat>
	<divFloat get="inline" set="null" line="180" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divFloat>
	<floatDiv get="inline" set="null" line="184" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</floatDiv>
	<subFloat get="inline" set="null" line="188" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subFloat>
	<floatSub get="inline" set="null" line="192" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</floatSub>
	<gtFloat get="inline" set="null" line="196" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gtFloat>
	<equalsInt params="T" get="inline" set="null" line="200" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="equalsInt.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A == B</e></m>
		</meta>
	</equalsInt>
	<notEqualsInt params="T" get="inline" set="null" line="204" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="notEqualsInt.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A != B</e></m>
		</meta>
	</notEqualsInt>
	<equalsFloat params="T" get="inline" set="null" line="208" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="equalsFloat.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A == B</e></m>
		</meta>
	</equalsFloat>
	<notEqualsFloat params="T" get="inline" set="null" line="212" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<c path="notEqualsFloat.T"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":commutative"/>
			<m n=":op"><e>A != B</e></m>
		</meta>
	</notEqualsFloat>
	<gteFloat get="inline" set="null" line="216" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gteFloat>
	<floatGt get="inline" set="null" line="221" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</floatGt>
	<floatGte get="inline" set="null" line="225" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</floatGte>
	<ltFloat get="inline" set="null" line="229" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</ltFloat>
	<lteFloat get="inline" set="null" line="233" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lteFloat>
	<floatLt get="inline" set="null" line="237" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</floatLt>
	<floatLte get="inline" set="null" line="241" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</floatLte>
	<modFloat get="inline" set="null" line="245" static="1">
		<f a="a:b">
			<x path="UInt"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</modFloat>
	<floatMod get="inline" set="null" line="249" static="1">
		<f a="a:b">
			<x path="Float"/>
			<x path="UInt"/>
			<x path="Float"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</floatMod>
	<negBits get="inline" set="null" line="253" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>~A</e></m>
		</meta>
	</negBits>
	<prefixIncrement get="inline" set="null" line="257" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>++A</e></m>
		</meta>
	</prefixIncrement>
	<postfixIncrement get="inline" set="null" line="261" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</postfixIncrement>
	<prefixDecrement get="inline" set="null" line="265" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>--A</e></m>
		</meta>
	</prefixDecrement>
	<postfixDecrement get="inline" set="null" line="269" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A--</e></m>
		</meta>
	</postfixDecrement>
	<toString get="inline" set="null" line="274" static="1">
		<f a="this:?radix">
			<x path="Int"/>
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
	<toInt get="inline" set="null" line="278" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toInt>
	<toFloat set="method" line="282" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toFloat>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="_UInt.UInt_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/UInt.hx" private="1" module="UInt">
		<add get="inline" set="null" line="104" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</add>
		<div get="inline" set="null" line="108" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</div>
		<mul get="inline" set="null" line="112" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</mul>
		<sub get="inline" set="null" line="116" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</sub>
		<gt set="method" line="120" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gt>
		<gte set="method" line="128" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gte>
		<lt get="inline" set="null" line="136" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</lt>
		<lte get="inline" set="null" line="140" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lte>
		<and get="inline" set="null" line="144" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
		</and>
		<or get="inline" set="null" line="148" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A | B</e></m></meta>
		</or>
		<xor get="inline" set="null" line="152" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A ^ B</e></m></meta>
		</xor>
		<shl get="inline" set="null" line="156" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
		</shl>
		<shr get="inline" set="null" line="160" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
		</shr>
		<ushr get="inline" set="null" line="164" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
		</ushr>
		<mod get="inline" set="null" line="168" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</mod>
		<addWithFloat get="inline" set="null" line="172" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A + B</e></m>
			</meta>
		</addWithFloat>
		<mulWithFloat get="inline" set="null" line="176" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A * B</e></m>
			</meta>
		</mulWithFloat>
		<divFloat get="inline" set="null" line="180" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divFloat>
		<floatDiv get="inline" set="null" line="184" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</floatDiv>
		<subFloat get="inline" set="null" line="188" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subFloat>
		<floatSub get="inline" set="null" line="192" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</floatSub>
		<gtFloat get="inline" set="null" line="196" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gtFloat>
		<equalsInt params="T" get="inline" set="null" line="200" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="equalsInt.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A == B</e></m>
			</meta>
		</equalsInt>
		<notEqualsInt params="T" get="inline" set="null" line="204" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="notEqualsInt.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A != B</e></m>
			</meta>
		</notEqualsInt>
		<equalsFloat params="T" get="inline" set="null" line="208" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="equalsFloat.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A == B</e></m>
			</meta>
		</equalsFloat>
		<notEqualsFloat params="T" get="inline" set="null" line="212" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<c path="notEqualsFloat.T"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":commutative"/>
				<m n=":op"><e>A != B</e></m>
			</meta>
		</notEqualsFloat>
		<gteFloat get="inline" set="null" line="216" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gteFloat>
		<floatGt get="inline" set="null" line="221" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</floatGt>
		<floatGte get="inline" set="null" line="225" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</floatGte>
		<ltFloat get="inline" set="null" line="229" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</ltFloat>
		<lteFloat get="inline" set="null" line="233" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lteFloat>
		<floatLt get="inline" set="null" line="237" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</floatLt>
		<floatLte get="inline" set="null" line="241" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</floatLte>
		<modFloat get="inline" set="null" line="245" static="1">
			<f a="a:b">
				<x path="UInt"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</modFloat>
		<floatMod get="inline" set="null" line="249" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="UInt"/>
				<x path="Float"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</floatMod>
		<negBits get="inline" set="null" line="253" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>~A</e></m>
			</meta>
		</negBits>
		<prefixIncrement get="inline" set="null" line="257" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>++A</e></m>
			</meta>
		</prefixIncrement>
		<postfixIncrement get="inline" set="null" line="261" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</postfixIncrement>
		<prefixDecrement get="inline" set="null" line="265" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>--A</e></m>
			</meta>
		</prefixDecrement>
		<postfixDecrement get="inline" set="null" line="269" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A--</e></m>
			</meta>
		</postfixDecrement>
		<toString get="inline" set="null" line="274" static="1">
			<f a="this:?radix">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
		<toInt get="inline" set="null" line="278" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toInt>
		<toFloat set="method" line="282" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toFloat>
		<meta><m n=":final"/></meta>
	</class>
	<abstract path="XmlType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/Xml.hx" module="Xml">
		<this><x path="Int"/></this>
		<haxe_doc>Xml node types.

	@see https://haxe.org/manual/std-Xml.html</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="_Xml.XmlType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/Xml.hx" private="1" module="Xml" extern="1">
	<Element public="1" get="inline" set="null" expr="cast 0" line="32" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents an XML element type.</haxe_doc>
	</Element>
	<PCData public="1" get="inline" set="null" expr="cast 1" line="36" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents XML parsed character data type.</haxe_doc>
	</PCData>
	<CData public="1" get="inline" set="null" expr="cast 2" line="40" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents XML character data type.</haxe_doc>
	</CData>
	<Comment public="1" get="inline" set="null" expr="cast 3" line="44" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents an XML comment type.</haxe_doc>
	</Comment>
	<DocType public="1" get="inline" set="null" expr="cast 4" line="48" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents an XML doctype element type.</haxe_doc>
	</DocType>
	<ProcessingInstruction public="1" get="inline" set="null" expr="cast 5" line="52" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents an XML processing instruction type.</haxe_doc>
	</ProcessingInstruction>
	<Document public="1" get="inline" set="null" expr="cast 6" line="56" static="1">
		<x path="XmlType"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Represents an XML document type.</haxe_doc>
	</Document>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="_Xml.XmlType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/Xml.hx" private="1" module="Xml" extern="1">
		<Element public="1" get="inline" set="null" expr="cast 0" line="32" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents an XML element type.</haxe_doc>
		</Element>
		<PCData public="1" get="inline" set="null" expr="cast 1" line="36" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents XML parsed character data type.</haxe_doc>
		</PCData>
		<CData public="1" get="inline" set="null" expr="cast 2" line="40" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents XML character data type.</haxe_doc>
		</CData>
		<Comment public="1" get="inline" set="null" expr="cast 3" line="44" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents an XML comment type.</haxe_doc>
		</Comment>
		<DocType public="1" get="inline" set="null" expr="cast 4" line="48" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents an XML doctype element type.</haxe_doc>
		</DocType>
		<ProcessingInstruction public="1" get="inline" set="null" expr="cast 5" line="52" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents an XML processing instruction type.</haxe_doc>
		</ProcessingInstruction>
		<Document public="1" get="inline" set="null" expr="cast 6" line="56" static="1">
			<x path="XmlType"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Represents an XML document type.</haxe_doc>
		</Document>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="Xml" params="" file="/home/travis/build/HaxeFoundation/haxe/std/Xml.hx">
		<Element public="1" set="null" expr="XmlType.Element" line="68" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Element</e></m></meta>
			<haxe_doc>XML element type.</haxe_doc>
		</Element>
		<PCData public="1" set="null" expr="XmlType.PCData" line="72" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.PCData</e></m></meta>
			<haxe_doc>XML parsed character data type.</haxe_doc>
		</PCData>
		<CData public="1" set="null" expr="XmlType.CData" line="76" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.CData</e></m></meta>
			<haxe_doc>XML character data type.</haxe_doc>
		</CData>
		<Comment public="1" set="null" expr="XmlType.Comment" line="80" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Comment</e></m></meta>
			<haxe_doc>XML comment type.</haxe_doc>
		</Comment>
		<DocType public="1" set="null" expr="XmlType.DocType" line="84" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.DocType</e></m></meta>
			<haxe_doc>XML doctype element type.</haxe_doc>
		</DocType>
		<ProcessingInstruction public="1" set="null" expr="XmlType.ProcessingInstruction" line="88" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.ProcessingInstruction</e></m></meta>
			<haxe_doc>XML processing instruction type.</haxe_doc>
		</ProcessingInstruction>
		<Document public="1" set="null" expr="XmlType.Document" line="92" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Document</e></m></meta>
			<haxe_doc>XML document type.</haxe_doc>
		</Document>
		<parse public="1" set="method" line="97" static="1">
			<f a="str">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Parses the String into an Xml document.</haxe_doc>
		</parse>
		<createElement public="1" set="method" line="158" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createElement>
		<createPCData public="1" set="method" line="167" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createPCData>
		<createCData public="1" set="method" line="176" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createCData>
		<createComment public="1" set="method" line="185" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createComment>
		<createDocType public="1" set="method" line="194" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocType>
		<createProcessingInstruction public="1" set="method" line="203" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createProcessingInstruction>
		<createDocument public="1" set="method" line="212" static="1">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocument>
		<nodeType public="1" set="null">
			<x path="XmlType"/>
			<haxe_doc>Returns the type of the Xml Node. This should be used before
		accessing other functions since some might raise an exception
		if the node type is not correct.</haxe_doc>
		</nodeType>
		<nodeName public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>Returns the node name of an Element.</haxe_doc>
		</nodeName>
		<nodeValue public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>Returns the node value. Only works if the Xml node is not an Element or a Document.</haxe_doc>
		</nodeValue>
		<parent public="1" set="null">
			<c path="Xml"/>
			<haxe_doc>Returns the parent object in the Xml hierarchy.
		The parent can be `null`, an Element or a Document.</haxe_doc>
		</parent>
		<children><c path="Array"><c path="Xml"/></c></children>
		<attributeMap><x path="Map">
	<c path="String"/>
	<c path="String"/>
</x></attributeMap>
		<get_nodeName get="inline" set="null" line="127"><f a=""><c path="String"/></f></get_nodeName>
		<set_nodeName get="inline" set="null" line="134"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></set_nodeName>
		<get_nodeValue get="inline" set="null" line="141"><f a=""><c path="String"/></f></get_nodeValue>
		<set_nodeValue get="inline" set="null" line="148"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></set_nodeValue>
		<get public="1" set="method" line="220">
			<f a="att">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the given attribute of an Element node. Returns `null` if not found.
		Attributes are case-sensitive.</haxe_doc>
		</get>
		<set public="1" set="method" line="231">
			<f a="att:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the given attribute value for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</set>
		<remove public="1" set="method" line="242">
			<f a="att">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an attribute for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="253">
			<f a="att">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the Element node has a given attribute.
		Attributes are case-sensitive.</haxe_doc>
		</exists>
		<attributes public="1" set="method" line="263">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>Returns an `Iterator` on all the attribute names.</haxe_doc>
		</attributes>
		<iterator public="1" get="inline" set="null" line="274">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</iterator>
		<elements public="1" set="method" line="283">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elements>
		<elementsNamed public="1" set="method" line="293">
			<f a="name">
				<c path="String"/>
				<t path="Iterator"><c path="Xml"/></t>
			</f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements with the given nodeName.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elementsNamed>
		<firstChild public="1" get="inline" set="null" line="302">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node.</haxe_doc>
		</firstChild>
		<firstElement public="1" set="method" line="310">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node which is an Element.</haxe_doc>
		</firstElement>
		<addChild public="1" set="method" line="326">
			<f a="x">
				<c path="Xml"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a child node to the Document or Element.
		A child node can only be inside one given parent node, which is indicated by the `parent` property.
		If the child is already inside this Document or Element, it will be moved to the last position among the Document or Element's children.
		If the child node was previously inside a different node, it will be moved to this Document or Element.</haxe_doc>
		</addChild>
		<removeChild public="1" set="method" line="339">
			<f a="x">
				<c path="Xml"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes a child from the Document or Element.
		Returns true if the child was successfuly removed.</haxe_doc>
		</removeChild>
		<insertChild public="1" set="method" line="354">
			<f a="x:pos">
				<c path="Xml"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts a child at the given position among the other childs.
		A child node can only be inside one given parent node, which is indicated by the [parent] property.
		If the child is already inside this Document or Element, it will be moved to the new position among the Document or Element's children.
		If the child node was previously inside a different node, it will be moved to this Document or Element.</haxe_doc>
		</insertChild>
		<toString public="1" get="inline" set="null" line="366">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of the Xml node.</haxe_doc>
		</toString>
		<ensureElementType get="inline" set="null" line="376"><f a=""><x path="Void"/></f></ensureElementType>
		<new set="method" line="370"><f a="nodeType">
	<x path="XmlType"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Cross-platform Xml API.

	@see https://haxe.org/manual/std-Xml.html</haxe_doc>
	</class>
	<enum path="haxe.StackItem" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/CallStack.hx" module="haxe.CallStack">
		<CFunction/>
		<Module a="m"><c path="String"/></Module>
		<FilePos a="s:file:line">
			<t path="Null"><e path="haxe.StackItem"/></t>
			<c path="String"/>
			<x path="Int"/>
		</FilePos>
		<Method a="classname:method">
			<c path="String"/>
			<c path="String"/>
		</Method>
		<LocalFunction a="?v"><x path="Int"/></LocalFunction>
		<haxe_doc>Elements return by `CallStack` methods.</haxe_doc>
	</enum>
	<class path="haxe.CallStack" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/CallStack.hx">
		<lastException static="1"><c path="js.Error"/></lastException>
		<getStack set="method" line="42" static="1">
			<f a="e">
				<c path="js.Error"/>
				<c path="Array"><e path="haxe.StackItem"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getStack>
		<wrapCallSite public="1" static="1">
			<f a="">
				<d/>
				<d/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</wrapCallSite>
		<callStack public="1" set="method" line="77" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>Return the call stack elements, or an empty array if not available.</haxe_doc>
		</callStack>
		<exceptionStack public="1" set="method" line="163" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Return the exception stack : this is the stack elements between
		the place the last exception was thrown and the place it was
		caught, or an empty array if not available.</haxe_doc>
		</exceptionStack>
		<toString public="1" set="method" line="231" static="1">
			<f a="stack">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a representation of the stack as a printable string.</haxe_doc>
		</toString>
		<itemToString set="method" line="240" static="1"><f a="b:s">
	<c path="StringBuf"/>
	<e path="haxe.StackItem"/>
	<x path="Void"/>
</f></itemToString>
		<makeStack set="method" line="267" static="1">
			<f a="s">
				<a><split set="null"><f a="">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</f></split></a>
				<c path="Array"><e path="haxe.StackItem"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</makeStack>
		<haxe_doc>Get information about the call stack.</haxe_doc>
	</class>
	<abstract path="haxe.Function" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"><meta><m n=":final"/></meta></class></impl>
	</abstract>
	<class path="haxe._Constraints.Function_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"><meta><m n=":final"/></meta></class>
	<abstract path="haxe.FlatEnum" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"><meta><m n=":final"/></meta></class></impl>
	</abstract>
	<class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"><meta><m n=":final"/></meta></class>
	<abstract path="haxe.Constructible" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which
		* is public and
		* unifies with the type used for type parameter `T`.

	If a type parameter A is assigned to a type parameter B which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"><meta><m n=":final"/></meta></class></impl>
	</abstract>
	<class path="haxe._Constraints.Constructible_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" extern="1"><meta><m n=":final"/></meta></class>
	<class path="haxe.IMap" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Constraints.hx" module="haxe.Constraints" interface="1">
		<get public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<t path="Null"><c path="haxe.IMap.V"/></t>
</f></get>
		<set public="1" set="method"><f a="k:v">
	<c path="haxe.IMap.K"/>
	<c path="haxe.IMap.V"/>
	<x path="Void"/>
</f></set>
		<exists public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Bool"/>
</f></exists>
		<remove public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Bool"/>
</f></remove>
		<keys public="1" set="method"><f a=""><t path="Iterator"><c path="haxe.IMap.K"/></t></f></keys>
		<iterator public="1" set="method"><f a=""><t path="Iterator"><c path="haxe.IMap.V"/></t></f></iterator>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
	</class>
	<abstract path="haxe.DynamicAccess" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/DynamicAccess.hx">
		<from><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></from>
		<this><d><c path="haxe.DynamicAccess.T"/></d></this>
		<to><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></to>
		<haxe_doc>DynamicAccess is an abstract type for working with anonymous structures
	that are intended to hold collections of objects by the string key.

	For example, these types of structures are often created from JSON.

	Basically, it wraps `Reflect` calls in a `Map`-like interface.</haxe_doc>
		<impl><class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess">
	<_new public="1" get="inline" set="null" line="37" static="1">
		<f a=""><x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x></f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new structure.</haxe_doc>
	</_new>
	<get public="1" get="inline" set="null" line="47" static="1">
		<f a="this:key">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<t path="Null"><c path="haxe.DynamicAccess.T"/></t>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Returns a value by specified `key`.

		If the structure does not contain the given key, null is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
	</get>
	<set public="1" get="inline" set="null" line="65" static="1">
		<f a="this:key:value">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<c path="haxe.DynamicAccess.T"/>
			<c path="haxe.DynamicAccess.T"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Sets a `value` for a specified `key`.

		If the structure contains the given key, its value will be overwritten.

		Returns the given value.

		If `key` is null, the result is unspecified.</haxe_doc>
	</set>
	<exists public="1" get="inline" set="null" line="79" static="1">
		<f a="this:key">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Tells if the structure contains a specified `key`.

		If `key` is null, the result is unspecified.</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="88" static="1">
		<f a="this:key">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="String"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Removes a specified `key` from the structure.

		Returns true, if `key` was present in structure, or false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="93" static="1">
		<f a="this">
			<d><c path="haxe.DynamicAccess.T"/></d>
			<c path="Array"><c path="String"/></c>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an array of `keys` in a structure.</haxe_doc>
	</keys>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess">
		<_new public="1" get="inline" set="null" line="37" static="1">
			<f a=""><x path="haxe.DynamicAccess"><c path="haxe.DynamicAccess.T"/></x></f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new structure.</haxe_doc>
		</_new>
		<get public="1" get="inline" set="null" line="47" static="1">
			<f a="this:key">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<t path="Null"><c path="haxe.DynamicAccess.T"/></t>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Returns a value by specified `key`.

		If the structure does not contain the given key, null is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="65" static="1">
			<f a="this:key:value">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<c path="haxe.DynamicAccess.T"/>
				<c path="haxe.DynamicAccess.T"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Sets a `value` for a specified `key`.

		If the structure contains the given key, its value will be overwritten.

		Returns the given value.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<exists public="1" get="inline" set="null" line="79" static="1">
			<f a="this:key">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Tells if the structure contains a specified `key`.

		If `key` is null, the result is unspecified.</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="88" static="1">
			<f a="this:key">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Removes a specified `key` from the structure.

		Returns true, if `key` was present in structure, or false otherwise.

		If `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="93" static="1">
			<f a="this">
				<d><c path="haxe.DynamicAccess.T"/></d>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an array of `keys` in a structure.</haxe_doc>
		</keys>
		<meta><m n=":final"/></meta>
	</class>
	<class path="haxe.EntryPoint" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/EntryPoint.hx">
		<pending expr="new Array&lt;Void&gt;()" line="49" static="1">
			<c path="Array"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e><![CDATA[new Array<Void>()]]></e></m></meta>
		</pending>
		<threadCount public="1" set="null" expr="0" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</threadCount>
		<wakeup public="1" set="method" line="56" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Wakeup a sleeping run()</haxe_doc>
		</wakeup>
		<runInMainThread public="1" set="method" line="62" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></runInMainThread>
		<addThread public="1" set="method" line="73" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></addThread>
		<processEvents set="method" line="91" static="1"><f a=""><x path="Float"/></f></processEvents>
		<run public="1" set="method" line="112" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>Start the main loop. Depending on the platform, this can return immediately or will only return when the application exits.</haxe_doc>
		</run>
		<haxe_doc>If haxe.MainLoop is kept from DCE, then we will insert an haxe.EntryPoint.run() call just at then end of main().
	This class can be redefined by custom frameworks so they can handle their own main loop logic.</haxe_doc>
	</class>
	<abstract path="haxe.EnumFlags" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/EnumFlags.hx">
		<this><x path="Int"/></this>
		<haxe_doc>A typed interface for bit flags. This is not a real object, only a typed
	interface for an actual Int. Each flag can be tested/set with the
	corresponding enum instance. Up to 32 flags can be stored that way.

	Enum constructor indices are preserved from Haxe syntax, so the first
	declared is index 0, the next index 1 etc. The methods are optimized if the
	enum instance is passed directly, e.g. as has(EnumCtor). Otherwise
	Type.enumIndex() reflection is used.</haxe_doc>
		<impl><class path="haxe._EnumFlags.EnumFlags_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/EnumFlags.hx" private="1" module="haxe.EnumFlags">
	<_new public="1" get="inline" set="null" line="39" static="1">
		<f a="?i" v="0">
			<x path="Int"/>
			<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
		</f>
		<meta>
			<m n=":value"><e>{ i : 0 }</e></m>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Initializes the bitflags to `i`.</haxe_doc>
	</_new>
	<has public="1" get="inline" set="null" line="51" static="1">
		<f a="this:v">
			<x path="Int"/>
			<c path="haxe.EnumFlags.T"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Checks if the index of enum instance `v` is set.

		This method is optimized if `v` is an enum instance expression such as
		SomeEnum.SomeCtor.

		If `v` is null, the result is unspecified.</haxe_doc>
	</has>
	<set public="1" get="inline" set="null" line="63" static="1">
		<f a="this:v">
			<x path="Int"/>
			<c path="haxe.EnumFlags.T"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Sets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		SomeEnum.SomeCtor.

		If `v` is null, the result is unspecified.</haxe_doc>
	</set>
	<unset public="1" get="inline" set="null" line="75" static="1">
		<f a="this:v">
			<x path="Int"/>
			<c path="haxe.EnumFlags.T"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Unsets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		SomeEnum.SomeCtor.

		If `v` is null, the result is unspecified.</haxe_doc>
	</unset>
	<ofInt public="1" params="T" get="inline" set="null" line="83" static="1">
		<f a="i">
			<x path="Int"/>
			<x path="haxe.EnumFlags"><c path="ofInt.T"/></x>
		</f>
		<haxe_doc>Convert a integer bitflag into a typed one (this is a no-op, it does not
		have any impact on speed).</haxe_doc>
	</ofInt>
	<toInt public="1" get="inline" set="null" line="91" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Convert the typed bitflag into the corresponding int value (this is a
		no-op, it doesn't have any impact on speed).</haxe_doc>
	</toInt>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="haxe._EnumFlags.EnumFlags_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/EnumFlags.hx" private="1" module="haxe.EnumFlags">
		<_new public="1" get="inline" set="null" line="39" static="1">
			<f a="?i" v="0">
				<x path="Int"/>
				<x path="haxe.EnumFlags"><c path="haxe.EnumFlags.T"/></x>
			</f>
			<meta>
				<m n=":value"><e>{ i : 0 }</e></m>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Initializes the bitflags to `i`.</haxe_doc>
		</_new>
		<has public="1" get="inline" set="null" line="51" static="1">
			<f a="this:v">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Checks if the index of enum instance `v` is set.

		This method is optimized if `v` is an enum instance expression such as
		SomeEnum.SomeCtor.

		If `v` is null, the result is unspecified.</haxe_doc>
		</has>
		<set public="1" get="inline" set="null" line="63" static="1">
			<f a="this:v">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Sets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		SomeEnum.SomeCtor.

		If `v` is null, the result is unspecified.</haxe_doc>
		</set>
		<unset public="1" get="inline" set="null" line="75" static="1">
			<f a="this:v">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Unsets the index of enum instance `v`.

		This method is optimized if `v` is an enum instance expression such as
		SomeEnum.SomeCtor.

		If `v` is null, the result is unspecified.</haxe_doc>
		</unset>
		<ofInt public="1" params="T" get="inline" set="null" line="83" static="1">
			<f a="i">
				<x path="Int"/>
				<x path="haxe.EnumFlags"><c path="ofInt.T"/></x>
			</f>
			<haxe_doc>Convert a integer bitflag into a typed one (this is a no-op, it does not
		have any impact on speed).</haxe_doc>
		</ofInt>
		<toInt public="1" get="inline" set="null" line="91" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Convert the typed bitflag into the corresponding int value (this is a
		no-op, it doesn't have any impact on speed).</haxe_doc>
		</toInt>
		<meta><m n=":final"/></meta>
	</class>
	<class path="haxe.EnumTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="50" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
			pack1.pack2.(...).packN.EnumName
		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="63" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="79" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="96" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="108" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an 
  [extension](https://haxe.org/manual/lf-static-extension.html) to the 
  `enum` types.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="132" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="143" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="157" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="169" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<match public="1" set="method" static="1">
			<f a="e:pattern">
				<x path="EnumValue"/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Matches enum instance `e` against pattern `pattern`, returning `true` if
		matching succeeded and `false` otherwise.

		Example usage:

		```haxe
		if (e.match(pattern)) {
			// codeIfTrue
		} else {
			// codeIfFalse
		}
		```

		This is equivalent to the following code:

		```haxe
		switch (e) {
			case pattern:
				// codeIfTrue
			case _:
				// codeIfFalse
		}
		```

		This method is implemented in the compiler. This definition exists only
		for documentation.</haxe_doc>
		</match>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an 
  [extension](https://haxe.org/manual/lf-static-extension.html) to the 
  `EnumValue` types.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.Http" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Http.hx">
		<requestUrl public="1" set="method" line="825" static="1">
			<f a="url">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Makes a synchronous request to `url`.

		This creates a new Http instance and makes a GET request by calling its
		`request(false)` method.

		If `url` is null, the result is unspecified.</haxe_doc>
		</requestUrl>
		<url public="1">
			<c path="String"/>
			<haxe_doc>The url of `this` request. It is used only by the `request()` method and
		can be changed in order to send the same request to different target
		Urls.</haxe_doc>
		</url>
		<responseData public="1" set="null"><t path="Null"><c path="String"/></t></responseData>
		<async public="1"><x path="Bool"/></async>
		<withCredentials public="1"><x path="Bool"/></withCredentials>
		<postData><c path="String"/></postData>
		<headers><c path="List"><a>
	<value><c path="String"/></value>
	<header><c path="String"/></header>
</a></c></headers>
		<params><c path="List"><a>
	<value><c path="String"/></value>
	<param><c path="String"/></param>
</a></c></params>
		<setHeader public="1" set="method" line="102">
			<f a="header:value">
				<c path="String"/>
				<c path="String"/>
				<c path="haxe.Http"/>
			</f>
			<haxe_doc>Sets the header identified as `header` to value `value`.

		If `header` or `value` are null, the result is unspecified.

		This method provides a fluent interface.</haxe_doc>
		</setHeader>
		<addHeader public="1" set="method" line="108"><f a="header:value">
	<c path="String"/>
	<c path="String"/>
	<c path="haxe.Http"/>
</f></addHeader>
		<setParameter public="1" set="method" line="120">
			<f a="param:value">
				<c path="String"/>
				<c path="String"/>
				<c path="haxe.Http"/>
			</f>
			<haxe_doc>Sets the parameter identified as `param` to value `value`.

		If `header` or `value` are null, the result is unspecified.

		This method provides a fluent interface.</haxe_doc>
		</setParameter>
		<addParameter public="1" set="method" line="126"><f a="param:value">
	<c path="String"/>
	<c path="String"/>
	<c path="haxe.Http"/>
</f></addParameter>
		<setPostData public="1" set="method" line="141">
			<f a="data">
				<c path="String"/>
				<c path="haxe.Http"/>
			</f>
			<haxe_doc>Sets the post data of `this` Http request to `data`.

		There can only be one post data per request. Subsequent calls overwrite
		the previously set value.

		If `data` is null, the post data is considered to be absent.

		This method provides a fluent interface.</haxe_doc>
		</setPostData>
		<req><c path="js.html.XMLHttpRequest"/></req>
		<cancel public="1" set="method" line="160">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Cancels `this` Http request if `request` has been called and a response
		has not yet been received.</haxe_doc>
		</cancel>
		<request public="1" set="method" line="189">
			<f a="?post">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Sends `this` Http request to the Url specified by `this.url`.

		If `post` is true, the request is sent as POST request, otherwise it is
		sent as GET request.

		Depending on the outcome of the request, this method calls the
		`onStatus()`, `onError()` or `onData()` callback functions.

		If `this.url` is null, the result is unspecified.

		If `this.url` is an invalid or inaccessible Url, the `onError()` callback
		function is called.

		[js] If `this.async` is false, the callback functions are called before
		this method returns.</haxe_doc>
		</request>
		<onData public="1" set="dynamic" line="793">
			<f a="data">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a successful request, with `data` containing
		the result String.

		The intended usage is to bind it to a custom function:  
		`httpInstance.onData = function(data) { // handle result }`</haxe_doc>
		</onData>
		<onError public="1" set="dynamic" line="803">
			<f a="msg">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a request error, with `msg` containing the
		error description.

		The intended usage is to bind it to a custom function:  
		`httpInstance.onError = function(msg) { // handle error }`</haxe_doc>
		</onError>
		<onStatus public="1" set="dynamic" line="813">
			<f a="status">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a Http status change, with `status` being the
		new status.

		The intended usage is to bind it to a custom function:  
		`httpInstance.onStatus = function(status) { // handle status }`</haxe_doc>
		</onStatus>
		<new public="1" set="method" line="79">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Http instance with `url` as parameter.

		This does not do a request until `request()` is called.

		If `url` is null, the field url must be set to a value before making the
		call to `request()`, or the result is unspecified.

		(Php) Https (SSL) connections are allowed only if the OpenSSL extension
		is enabled.</haxe_doc>
		</new>
		<haxe_doc>This class can be used to handle Http requests consistently across
	platforms. There are two intended usages:

	- call `haxe.Http.requestUrl(url)` and receive the result as a `String`
	(not available on flash)
	- create a `new haxe.Http(url)`, register your callbacks for `onData`, 
	`onError` and `onStatus`, then call `request()`.</haxe_doc>
	</class>
	<abstract path="haxe.Int32" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
 	all platforms.</haxe_doc>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Int32.hx" private="1" module="haxe.Int32">
	<preIncrement get="inline" set="null" line="31" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>++A</e></m>
		</meta>
	</preIncrement>
	<postIncrement get="inline" set="null" line="34" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</postIncrement>
	<preDecrement get="inline" set="null" line="40" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>--A</e></m>
		</meta>
	</preDecrement>
	<postDecrement get="inline" set="null" line="43" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A--</e></m>
		</meta>
	</postDecrement>
	<add get="inline" set="null" line="49" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</add>
	<addInt get="inline" set="null" line="52" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":op"><e>A + B</e></m>
			<m n=":commutative"/>
		</meta>
	</addInt>
	<sub get="inline" set="null" line="57" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</sub>
	<subInt get="inline" set="null" line="60" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subInt>
	<intSub get="inline" set="null" line="63" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</intSub>
	<mul get="inline" set="null" line="76" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</mul>
	<_mul expr="untyped if (Math.imul != null) Math.imul else function(a:Int32, b:Int32):Int32 return clamp(((a : Int)) * (((b : Int)) &amp; 0xFFFF) + clamp(((a : Int)) * (((b : Int)) &gt;&gt;&gt; 16) &lt;&lt; 16))" line="80" static="1">
		<f a=":">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":value"><e><![CDATA[untyped if (Math.imul != null) Math.imul else function(a:Int32, b:Int32):Int32 return clamp(((a : Int)) * (((b : Int)) & 0xFFFF) + clamp(((a : Int)) * (((b : Int)) >>> 16) << 16))]]></e></m>
		</meta>
	</_mul>
	<mulInt get="inline" set="null" line="91" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="Int"/>
			<x path="haxe.Int32"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
	</mulInt>
	<toFloat get="inline" set="null" line="216" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toFloat>
	<ucompare public="1" set="method" line="222" static="1">
		<f a="a:b">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
	</ucompare>
	<clamp get="inline" set="null" line="233" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></clamp>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="haxe._Int32.Int32_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Int32.hx" private="1" module="haxe.Int32">
		<preIncrement get="inline" set="null" line="31" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>++A</e></m>
			</meta>
		</preIncrement>
		<postIncrement get="inline" set="null" line="34" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</postIncrement>
		<preDecrement get="inline" set="null" line="40" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>--A</e></m>
			</meta>
		</preDecrement>
		<postDecrement get="inline" set="null" line="43" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A--</e></m>
			</meta>
		</postDecrement>
		<add get="inline" set="null" line="49" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</add>
		<addInt get="inline" set="null" line="52" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":op"><e>A + B</e></m>
				<m n=":commutative"/>
			</meta>
		</addInt>
		<sub get="inline" set="null" line="57" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</sub>
		<subInt get="inline" set="null" line="60" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subInt>
		<intSub get="inline" set="null" line="63" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</intSub>
		<mul get="inline" set="null" line="76" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</mul>
		<_mul expr="untyped if (Math.imul != null) Math.imul else function(a:Int32, b:Int32):Int32 return clamp(((a : Int)) * (((b : Int)) &amp; 0xFFFF) + clamp(((a : Int)) * (((b : Int)) &gt;&gt;&gt; 16) &lt;&lt; 16))" line="80" static="1">
			<f a=":">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e><![CDATA[untyped if (Math.imul != null) Math.imul else function(a:Int32, b:Int32):Int32 return clamp(((a : Int)) * (((b : Int)) & 0xFFFF) + clamp(((a : Int)) * (((b : Int)) >>> 16) << 16))]]></e></m>
			</meta>
		</_mul>
		<mulInt get="inline" set="null" line="91" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="Int"/>
				<x path="haxe.Int32"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
		</mulInt>
		<toFloat get="inline" set="null" line="216" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toFloat>
		<ucompare public="1" set="method" line="222" static="1">
			<f a="a:b">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compare `a` and `b` in unsigned mode.</haxe_doc>
		</ucompare>
		<clamp get="inline" set="null" line="233" static="1"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></clamp>
		<meta><m n=":final"/></meta>
	</class>
	<abstract path="haxe.Int64" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<haxe_doc>A cross-platform signed 64-bit integer.
	Int64 instances can be created from two 32-bit words using `Int64.make()`.</haxe_doc>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
	<_new get="inline" set="null" line="35" static="1">
		<f a="x">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<copy public="1" get="inline" set="null" line="41" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Makes a copy of `this` Int64.</haxe_doc>
	</copy>
	<make public="1" get="inline" set="null" line="47" static="1">
		<f a="high:low">
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int64"/>
		</f>
		<haxe_doc>Construct an Int64 from two 32-bit words `high` and `low`.</haxe_doc>
	</make>
	<ofInt public="1" get="inline" set="null" line="54" static="1">
		<f a="x">
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>Returns an Int64 with the value of the Int `x`.
		`x` is sign-extended to fill 64 bits.</haxe_doc>
	</ofInt>
	<toInt public="1" get="inline" set="null" line="65" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc>Returns an Int with the value of the Int64 `x`.
		Throws an exception  if `x` cannot be represented in 32 bits.</haxe_doc>
	</toInt>
	<is public="1" get="inline" set="null" line="75" static="1">
		<f a="val">
			<d/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns whether the value `val` is of type `haxe.Int64`</haxe_doc>
	</is>
	<getHigh public="1" get="inline" set="null" line="82" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":deprecated"><e>"Use high instead"</e></m></meta>
		<haxe_doc>Returns the high 32-bit word of `x`.</haxe_doc>
	</getHigh>
	<getLow public="1" get="inline" set="null" line="89" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":deprecated"><e>"Use low instead"</e></m></meta>
		<haxe_doc>Returns the low 32-bit word of `x`.</haxe_doc>
	</getLow>
	<isNeg public="1" get="inline" set="null" line="95" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns `true` if `x` is less than zero.</haxe_doc>
	</isNeg>
	<isZero public="1" get="inline" set="null" line="101" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>Returns `true` if `x` is exactly zero.</haxe_doc>
	</isZero>
	<compare public="1" get="inline" set="null" line="109" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc><![CDATA[Compares `a` and `b` in signed mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
	</compare>
	<ucompare public="1" get="inline" set="null" line="120" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Int"/>
		</f>
		<haxe_doc><![CDATA[Compares `a` and `b` in unsigned mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
	</ucompare>
	<toStr public="1" get="inline" set="null" line="128" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<c path="String"/>
		</f>
		<haxe_doc>Returns a signed decimal `String` representation of `x`.</haxe_doc>
	</toStr>
	<toString set="method" line="131" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
	<parseString public="1" get="inline" set="null" line="157" static="1"><f a="sParam">
	<c path="String"/>
	<x path="haxe.Int64"/>
</f></parseString>
	<fromFloat public="1" get="inline" set="null" line="161" static="1"><f a="f">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></fromFloat>
	<divMod public="1" set="method" line="169" static="1">
		<f a="dividend:divisor">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<a>
				<quotient><x path="haxe.Int64"/></quotient>
				<modulus><x path="haxe.Int64"/></modulus>
			</a>
		</f>
		<haxe_doc>Performs signed integer divison of `dividend` by `divisor`.
		Returns `{ quotient : Int64, modulus : Int64 }`.</haxe_doc>
	</divMod>
	<neg public="1" get="inline" set="null" line="216" static="1">
		<f a="x">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc>Returns the negative of `x`.</haxe_doc>
	</neg>
	<preIncrement get="inline" set="null" line="224" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>++A</e></m>
		</meta>
	</preIncrement>
	<postIncrement get="inline" set="null" line="231" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A++</e></m>
		</meta>
	</postIncrement>
	<preDecrement get="inline" set="null" line="237" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>--A</e></m>
		</meta>
	</preDecrement>
	<postDecrement get="inline" set="null" line="244" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A--</e></m>
		</meta>
	</postDecrement>
	<add public="1" get="inline" set="null" line="253" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc>Returns the sum of `a` and `b`.</haxe_doc>
	</add>
	<addInt get="inline" set="null" line="260" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":op"><e>A + B</e></m>
			<m n=":commutative"/>
		</meta>
	</addInt>
	<sub public="1" get="inline" set="null" line="266" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc>Returns `a` minus `b`.</haxe_doc>
	</sub>
	<subInt get="inline" set="null" line="273" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subInt>
	<intSub get="inline" set="null" line="276" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</intSub>
	<mul public="1" get="inline" set="null" line="282" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
		<haxe_doc>Returns the product of `a` and `b`.</haxe_doc>
	</mul>
	<mulInt get="inline" set="null" line="302" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
	</mulInt>
	<div public="1" get="inline" set="null" line="308" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
		<haxe_doc>Returns the quotient of `a` divided by `b`.</haxe_doc>
	</div>
	<divInt get="inline" set="null" line="311" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divInt>
	<intDiv get="inline" set="null" line="314" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</intDiv>
	<mod public="1" get="inline" set="null" line="320" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
		<haxe_doc>Returns the modulus of `a` divided by `b`.</haxe_doc>
	</mod>
	<modInt get="inline" set="null" line="323" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</modInt>
	<intMod get="inline" set="null" line="326" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A % B</e></m></meta>
	</intMod>
	<eq public="1" get="inline" set="null" line="332" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc>Returns `true` if `a` is equal to `b`.</haxe_doc>
	</eq>
	<eqInt get="inline" set="null" line="335" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":op"><e>A == B</e></m>
			<m n=":commutative"/>
		</meta>
	</eqInt>
	<neq public="1" get="inline" set="null" line="341" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc>Returns `true` if `a` is not equal to `b`.</haxe_doc>
	</neq>
	<neqInt get="inline" set="null" line="344" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":op"><e>A != B</e></m>
			<m n=":commutative"/>
		</meta>
	</neqInt>
	<lt get="inline" set="null" line="347" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</lt>
	<ltInt get="inline" set="null" line="350" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</ltInt>
	<intLt get="inline" set="null" line="353" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
	</intLt>
	<lte get="inline" set="null" line="356" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lte>
	<lteInt get="inline" set="null" line="359" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</lteInt>
	<intLte get="inline" set="null" line="362" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
	</intLte>
	<gt get="inline" set="null" line="365" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gt>
	<gtInt get="inline" set="null" line="368" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</gtInt>
	<intGt get="inline" set="null" line="371" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
	</intGt>
	<gte get="inline" set="null" line="374" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gte>
	<gteInt get="inline" set="null" line="377" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</gteInt>
	<intGte get="inline" set="null" line="380" static="1">
		<f a="a:b">
			<x path="Int"/>
			<x path="haxe.Int64"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
	</intGte>
	<complement get="inline" set="null" line="386" static="1">
		<f a="a">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>~A</e></m></meta>
		<haxe_doc>Returns the bitwise NOT of `a`.</haxe_doc>
	</complement>
	<and public="1" get="inline" set="null" line="392" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
		<haxe_doc>Returns the bitwise AND of `a` and `b`.</haxe_doc>
	</and>
	<or public="1" get="inline" set="null" line="398" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A | B</e></m></meta>
		<haxe_doc>Returns the bitwise OR of `a` and `b`.</haxe_doc>
	</or>
	<xor public="1" get="inline" set="null" line="404" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e>A ^ B</e></m></meta>
		<haxe_doc>Returns the bitwise XOR of `a` and `b`.</haxe_doc>
	</xor>
	<shl public="1" get="inline" set="null" line="410" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
		<haxe_doc>Returns `a` left-shifted by `b` bits.</haxe_doc>
	</shl>
	<shr public="1" get="inline" set="null" line="421" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
		<haxe_doc>Returns `a` right-shifted by `b` bits in signed mode.
		`a` is sign-extended.</haxe_doc>
	</shr>
	<ushr public="1" get="inline" set="null" line="432" static="1">
		<f a="a:b">
			<x path="haxe.Int64"/>
			<x path="Int"/>
			<x path="haxe.Int64"/>
		</f>
		<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
		<haxe_doc>Returns `a` right-shifted by `b` bits in unsigned mode.
		`a` is padded with zeroes.</haxe_doc>
	</ushr>
	<high public="1" get="accessor" set="null" static="1">
		<x path="haxe.Int32"/>
		<meta><m n=":impl"/></meta>
	</high>
	<get_high get="inline" set="null" line="440" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_high>
	<set_high get="inline" set="null" line="441" static="1">
		<f a="this:x">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_high>
	<low public="1" get="accessor" set="null" static="1">
		<x path="haxe.Int32"/>
		<meta><m n=":impl"/></meta>
	</low>
	<get_low get="inline" set="null" line="444" static="1">
		<f a="this">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_low>
	<set_low get="inline" set="null" line="445" static="1">
		<f a="this:x">
			<t path="haxe._Int64.__Int64"/>
			<x path="haxe.Int32"/>
			<x path="haxe.Int32"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_low>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="haxe._Int64.Int64_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<_new get="inline" set="null" line="35" static="1">
			<f a="x">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<copy public="1" get="inline" set="null" line="41" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Makes a copy of `this` Int64.</haxe_doc>
		</copy>
		<make public="1" get="inline" set="null" line="47" static="1">
			<f a="high:low">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Construct an Int64 from two 32-bit words `high` and `low`.</haxe_doc>
		</make>
		<ofInt public="1" get="inline" set="null" line="54" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>Returns an Int64 with the value of the Int `x`.
		`x` is sign-extended to fill 64 bits.</haxe_doc>
		</ofInt>
		<toInt public="1" get="inline" set="null" line="65" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns an Int with the value of the Int64 `x`.
		Throws an exception  if `x` cannot be represented in 32 bits.</haxe_doc>
		</toInt>
		<is public="1" get="inline" set="null" line="75" static="1">
			<f a="val">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns whether the value `val` is of type `haxe.Int64`</haxe_doc>
		</is>
		<getHigh public="1" get="inline" set="null" line="82" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":deprecated"><e>"Use high instead"</e></m></meta>
			<haxe_doc>Returns the high 32-bit word of `x`.</haxe_doc>
		</getHigh>
		<getLow public="1" get="inline" set="null" line="89" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":deprecated"><e>"Use low instead"</e></m></meta>
			<haxe_doc>Returns the low 32-bit word of `x`.</haxe_doc>
		</getLow>
		<isNeg public="1" get="inline" set="null" line="95" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `x` is less than zero.</haxe_doc>
		</isNeg>
		<isZero public="1" get="inline" set="null" line="101" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `x` is exactly zero.</haxe_doc>
		</isZero>
		<compare public="1" get="inline" set="null" line="109" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Compares `a` and `b` in signed mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
		</compare>
		<ucompare public="1" get="inline" set="null" line="120" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Compares `a` and `b` in unsigned mode.
		Returns a negative value if `a < b`, positive if `a > b`,
		or 0 if `a == b`.]]></haxe_doc>
		</ucompare>
		<toStr public="1" get="inline" set="null" line="128" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a signed decimal `String` representation of `x`.</haxe_doc>
		</toStr>
		<toString set="method" line="131" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
		<parseString public="1" get="inline" set="null" line="157" static="1"><f a="sParam">
	<c path="String"/>
	<x path="haxe.Int64"/>
</f></parseString>
		<fromFloat public="1" get="inline" set="null" line="161" static="1"><f a="f">
	<x path="Float"/>
	<x path="haxe.Int64"/>
</f></fromFloat>
		<divMod public="1" set="method" line="169" static="1">
			<f a="dividend:divisor">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<a>
					<quotient><x path="haxe.Int64"/></quotient>
					<modulus><x path="haxe.Int64"/></modulus>
				</a>
			</f>
			<haxe_doc>Performs signed integer divison of `dividend` by `divisor`.
		Returns `{ quotient : Int64, modulus : Int64 }`.</haxe_doc>
		</divMod>
		<neg public="1" get="inline" set="null" line="216" static="1">
			<f a="x">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc>Returns the negative of `x`.</haxe_doc>
		</neg>
		<preIncrement get="inline" set="null" line="224" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>++A</e></m>
			</meta>
		</preIncrement>
		<postIncrement get="inline" set="null" line="231" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A++</e></m>
			</meta>
		</postIncrement>
		<preDecrement get="inline" set="null" line="237" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>--A</e></m>
			</meta>
		</preDecrement>
		<postDecrement get="inline" set="null" line="244" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A--</e></m>
			</meta>
		</postDecrement>
		<add public="1" get="inline" set="null" line="253" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc>Returns the sum of `a` and `b`.</haxe_doc>
		</add>
		<addInt get="inline" set="null" line="260" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":op"><e>A + B</e></m>
				<m n=":commutative"/>
			</meta>
		</addInt>
		<sub public="1" get="inline" set="null" line="266" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc>Returns `a` minus `b`.</haxe_doc>
		</sub>
		<subInt get="inline" set="null" line="273" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subInt>
		<intSub get="inline" set="null" line="276" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</intSub>
		<mul public="1" get="inline" set="null" line="282" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
			<haxe_doc>Returns the product of `a` and `b`.</haxe_doc>
		</mul>
		<mulInt get="inline" set="null" line="302" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
		</mulInt>
		<div public="1" get="inline" set="null" line="308" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
			<haxe_doc>Returns the quotient of `a` divided by `b`.</haxe_doc>
		</div>
		<divInt get="inline" set="null" line="311" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divInt>
		<intDiv get="inline" set="null" line="314" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</intDiv>
		<mod public="1" get="inline" set="null" line="320" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
			<haxe_doc>Returns the modulus of `a` divided by `b`.</haxe_doc>
		</mod>
		<modInt get="inline" set="null" line="323" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</modInt>
		<intMod get="inline" set="null" line="326" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A % B</e></m></meta>
		</intMod>
		<eq public="1" get="inline" set="null" line="332" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc>Returns `true` if `a` is equal to `b`.</haxe_doc>
		</eq>
		<eqInt get="inline" set="null" line="335" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":op"><e>A == B</e></m>
				<m n=":commutative"/>
			</meta>
		</eqInt>
		<neq public="1" get="inline" set="null" line="341" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc>Returns `true` if `a` is not equal to `b`.</haxe_doc>
		</neq>
		<neqInt get="inline" set="null" line="344" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":op"><e>A != B</e></m>
				<m n=":commutative"/>
			</meta>
		</neqInt>
		<lt get="inline" set="null" line="347" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</lt>
		<ltInt get="inline" set="null" line="350" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</ltInt>
		<intLt get="inline" set="null" line="353" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A < B]]></e></m></meta>
		</intLt>
		<lte get="inline" set="null" line="356" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lte>
		<lteInt get="inline" set="null" line="359" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</lteInt>
		<intLte get="inline" set="null" line="362" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A <= B]]></e></m></meta>
		</intLte>
		<gt get="inline" set="null" line="365" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gt>
		<gtInt get="inline" set="null" line="368" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</gtInt>
		<intGt get="inline" set="null" line="371" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A > B]]></e></m></meta>
		</intGt>
		<gte get="inline" set="null" line="374" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gte>
		<gteInt get="inline" set="null" line="377" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</gteInt>
		<intGte get="inline" set="null" line="380" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >= B]]></e></m></meta>
		</intGte>
		<complement get="inline" set="null" line="386" static="1">
			<f a="a">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>~A</e></m></meta>
			<haxe_doc>Returns the bitwise NOT of `a`.</haxe_doc>
		</complement>
		<and public="1" get="inline" set="null" line="392" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A & B]]></e></m></meta>
			<haxe_doc>Returns the bitwise AND of `a` and `b`.</haxe_doc>
		</and>
		<or public="1" get="inline" set="null" line="398" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A | B</e></m></meta>
			<haxe_doc>Returns the bitwise OR of `a` and `b`.</haxe_doc>
		</or>
		<xor public="1" get="inline" set="null" line="404" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e>A ^ B</e></m></meta>
			<haxe_doc>Returns the bitwise XOR of `a` and `b`.</haxe_doc>
		</xor>
		<shl public="1" get="inline" set="null" line="410" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A << B]]></e></m></meta>
			<haxe_doc>Returns `a` left-shifted by `b` bits.</haxe_doc>
		</shl>
		<shr public="1" get="inline" set="null" line="421" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >> B]]></e></m></meta>
			<haxe_doc>Returns `a` right-shifted by `b` bits in signed mode.
		`a` is sign-extended.</haxe_doc>
		</shr>
		<ushr public="1" get="inline" set="null" line="432" static="1">
			<f a="a:b">
				<x path="haxe.Int64"/>
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A >>> B]]></e></m></meta>
			<haxe_doc>Returns `a` right-shifted by `b` bits in unsigned mode.
		`a` is padded with zeroes.</haxe_doc>
		</ushr>
		<high public="1" get="accessor" set="null" static="1">
			<x path="haxe.Int32"/>
			<meta><m n=":impl"/></meta>
		</high>
		<get_high get="inline" set="null" line="440" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_high>
		<set_high get="inline" set="null" line="441" static="1">
			<f a="this:x">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_high>
		<low public="1" get="accessor" set="null" static="1">
			<x path="haxe.Int32"/>
			<meta><m n=":impl"/></meta>
		</low>
		<get_low get="inline" set="null" line="444" static="1">
			<f a="this">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_low>
		<set_low get="inline" set="null" line="445" static="1">
			<f a="this:x">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_low>
		<meta><m n=":final"/></meta>
	</class>
	<typedef path="haxe._Int64.__Int64" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<c path="haxe._Int64.___Int64"/>
		<haxe_doc>* This typedef will fool @:coreApi into thinking that we are using
  * the same underlying type, even though it might be different on
  * specific platforms.</haxe_doc>
	</typedef>
	<class path="haxe._Int64.___Int64" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<high public="1"><x path="haxe.Int32"/></high>
		<low public="1"><x path="haxe.Int32"/></low>
		<toString public="1" set="method" line="469">
			<f a=""><c path="String"/></f>
			<haxe_doc>We also define toString here to ensure we always get a pretty string
		when tracing or calling Std.string. This tends not to happen when
		toString is only in the abstract.</haxe_doc>
		</toString>
		<new public="1" get="inline" set="null" line="459"><f a="high:low">
	<x path="haxe.Int32"/>
	<x path="haxe.Int32"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.Int64Helper" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Int64Helper.hx">
		<parseString public="1" set="method" line="35" static="1">
			<f a="sParam">
				<c path="String"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Create `Int64` from given string.</haxe_doc>
		</parseString>
		<fromFloat public="1" set="method" line="75" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Create `Int64` from given float.</haxe_doc>
		</fromFloat>
		<haxe_doc>Helper for parsing to `Int64` instances.</haxe_doc>
	</class>
	<class path="haxe.Json" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/Json.hx" extern="1">
		<parse public="1" set="method" static="1">
			<f a="text">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Parses given JSON-encoded `text` and returns the resulting object.

		JSON objects are parsed into anonymous structures and JSON arrays
		are parsed into `Array<Dynamic>`.

		If given `text` is not valid JSON, an exception will be thrown.

		@see https://haxe.org/manual/std-Json-parsing.html]]></haxe_doc>
		</parse>
		<stringify public="1" set="method" static="1">
			<f a="value:?replacer:?space">
				<d/>
				<f a=":">
					<d/>
					<d/>
					<d/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes the given `value` and returns the resulting JSON string.

		If `replacer` is given and is not null, it is used to retrieve the
		actual object to be encoded. The `replacer` function takes two parameters,
		the key and the value being encoded. Initial key value is an empty string.
		
		If `space` is given and is not null, the result will be pretty-printed.
		Successive levels will be indented by this string.

		@see https://haxe.org/manual/std-Json-encoding.html</haxe_doc>
		</stringify>
		<haxe_doc>Cross-platform JSON API: it will automatically use the optimized native API if available.
	Use `-D haxeJSON` to force usage of the Haxe implementation even if a native API is found:
	This will provide extra encoding features such as enums (replaced by their index) and StringMaps.

	@see https://haxe.org/manual/std-Json.html</haxe_doc>
		<meta>
			<m n=":coreApi"/>
			<m n=":native"><e>"JSON"</e></m>
		</meta>
	</class>
	<class path="haxe.Log" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Log.hx">
		<trace public="1" set="dynamic" line="47" static="1">
			<f a="v:?infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the `trace()` call was made.

		This method can be rebound to a custom function:
			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v, ?infos) {
			  // handle trace
			}
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to `trace()` will cause an
		exception.</haxe_doc>
		</trace>
		<clear public="1" set="dynamic" line="127" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Clears the trace output.</haxe_doc>
		</clear>
		<haxe_doc>Log primarily provides the `trace()` method, which is invoked upon a call to
	`trace()` in Haxe code.</haxe_doc>
	</class>
	<class path="haxe.MainEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/MainLoop.hx" module="haxe.MainLoop">
		<f><f a=""><x path="Void"/></f></f>
		<prev><c path="haxe.MainEvent"/></prev>
		<next><c path="haxe.MainEvent"/></next>
		<nextRun public="1" set="null"><x path="Float"/></nextRun>
		<priority public="1" set="null"><x path="Int"/></priority>
		<delay public="1" set="method" line="22">
			<f a="t">
				<t path="Null"><x path="Float"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Delay the execution of the event for the given time, in seconds.
		If t is null, the event will be run at tick() time.</haxe_doc>
		</delay>
		<call public="1" get="inline" set="null" line="29">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Call the event. Will do nothing is the event has been stopped.</haxe_doc>
		</call>
		<stop public="1" set="method" line="36">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stop the event from firing anymore.</haxe_doc>
		</stop>
		<new set="method" line="12"><f a="f:p">
	<f a=""><x path="Void"/></f>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.MainLoop" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/MainLoop.hx">
		<pending expr="null" line="53" static="1">
			<c path="haxe.MainEvent"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</pending>
		<threadCount public="1" get="accessor" set="null" static="1"><x path="Int"/></threadCount>
		<get_threadCount get="inline" set="null" line="57" static="1"><f a=""><x path="Int"/></f></get_threadCount>
		<hasEvents public="1" get="inline" set="null" line="59" static="1"><f a=""><x path="Bool"/></f></hasEvents>
		<addThread public="1" set="method" line="63" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></addThread>
		<runInMainThread public="1" set="method" line="67" static="1"><f a="f">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></runInMainThread>
		<add public="1" set="method" line="74" static="1">
			<f a="f:?priority" v=":0">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<c path="haxe.MainEvent"/>
			</f>
			<meta><m n=":value"><e>{ priority : 0 }</e></m></meta>
			<haxe_doc>Add a pending event to be run into the main loop.</haxe_doc>
		</add>
		<sortEvents set="method" line="85" static="1"><f a=""><x path="Void"/></f></sortEvents>
		<tick set="method" line="146" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Run the pending events. Return the time for next event.</haxe_doc>
		</tick>
		<meta><m n=":access"><e>haxe.MainEvent</e></m></meta>
	</class>
	<typedef path="haxe.PosInfos" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<t path="Null"><c path="Array"><d/></c></t>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>PosInfos is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	(..., ?pos:haxe.PosInfos), each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe.Resource" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Resource.hx">
		<content static="1"><c path="Array"><a>
	<str><c path="String"/></str>
	<name><c path="String"/></name>
	<data><c path="String"/></data>
</a></c></content>
		<listNames public="1" set="method" line="41" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Lists all available resource names. The resource name is the name part
		of the -resource file@name command line parameter.</haxe_doc>
		</listNames>
		<getString public="1" set="method" line="50" static="1">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the resource identified by `name` as a String.

		If `name` does not match any resource name, null is returned.</haxe_doc>
		</getString>
		<getBytes public="1" set="method" line="70" static="1">
			<f a="name">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Retrieves the resource identified by `name` as an instance of
		haxe.io.Bytes.

		If `name` does not match any resource name, null is returned.</haxe_doc>
		</getBytes>
		<haxe_doc>Resource can be used to access resources that were added through the
	-resource file@name command line parameter.

	Depending on their type they can be obtained as String through
	getString(name), or as binary data through getBytes(name).

	A list of all available resource names can be obtained from listNames().</haxe_doc>
	</class>
	<class path="haxe.Serializer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Serializer.hx">
		<USE_CACHE public="1" expr="false" line="55" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>If the values you are serializing can contain circular references or
		objects repetitions, you should set `USE_CACHE` to true to prevent
		infinite loops.

		This may also reduce the size of serialization Strings at the expense of
		performance.

		This value can be changed for individual instances of Serializer by
		setting their useCache field.</haxe_doc>
		</USE_CACHE>
		<USE_ENUM_INDEX public="1" expr="false" line="67" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
			<haxe_doc>Use constructor indexes for enums instead of names.

		This may reduce the size of serialization Strings, but makes them less
		suited for long-term storage: If constructors are removed or added from
		the enum, the indices may no longer match.

		This value can be changed for individual instances of Serializer by
		setting their useEnumIndex field.</haxe_doc>
		</USE_ENUM_INDEX>
		<BASE64 expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:&quot;" line="69" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:"</e></m></meta>
		</BASE64>
		<BASE64_CODES expr="null" line="70" static="1">
			<x path="haxe.ds.Vector"><t path="Null"><x path="Int"/></t></x>
			<meta><m n=":value"><e>null</e></m></meta>
		</BASE64_CODES>
		<run public="1" set="method" line="556" static="1">
			<f a="v">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Serializes `v` and returns the String representation.

		This is a convenience function for creating a new instance of
		Serializer, serialize `v` into it and obtain the result through a call
		to toString().</haxe_doc>
		</run>
		<buf><c path="StringBuf"/></buf>
		<cache><c path="Array"><d/></c></cache>
		<shash><c path="haxe.ds.StringMap"><x path="Int"/></c></shash>
		<scount><x path="Int"/></scount>
		<useCache public="1">
			<x path="Bool"/>
			<haxe_doc>The individual cache setting for `this` Serializer instance.

		See USE_CACHE for a complete description.</haxe_doc>
		</useCache>
		<useEnumIndex public="1">
			<x path="Bool"/>
			<haxe_doc>The individual enum index setting for `this` Serializer instance.

		See USE_ENUM_INDEX for a complete description.</haxe_doc>
		</useEnumIndex>
		<toString public="1" set="method" line="116">
			<f a=""><c path="String"/></f>
			<haxe_doc>Return the String representation of `this` Serializer.

		The exact format specification can be found here:
		https://haxe.org/manual/serialization/format</haxe_doc>
		</toString>
		<serializeString set="method" line="153"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></serializeString>
		<serializeRef set="method" line="172">
			<f a="v">
				<unknown/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</serializeRef>
		<serializeFields set="method" line="209"><f a="v">
	<unknown/>
	<x path="Void"/>
</f></serializeFields>
		<serialize public="1" set="method" line="227">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Serializes `v`.

		All haxe-defined values and objects with the exception of functions can
		be serialized. Serialization of external/native objects is not
		guaranteed to work.

		The values of `this.useCache` and `this.useEnumIndex` may affect
		serialization output.</haxe_doc>
		</serialize>
		<__getField get="inline" set="null" line="531">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</__getField>
		<serializeException public="1" set="method" line="533"><f a="e">
	<d/>
	<x path="Void"/>
</f></serializeException>
		<new public="1" set="method" line="101">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Serializer instance.

		Subsequent calls to `this.serialize` will append values to the
		internal buffer of this String. Once complete, the contents can be
		retrieved through a call to `this.toString`.

		Each Serializer instance maintains its own cache if this.useCache` is
		true.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The Serializer class can be used to encode values and objects into a `String`,
	from which the `Unserializer` class can recreate the original representation.

	This class can be used in two ways:

	- create a `new Serializer()` instance, call its `serialize()` method with
		any argument and finally retrieve the String representation from
		`toString()`
	- call `Serializer.run()` to obtain the serialized representation of a
		single argument

	Serialization is guaranteed to work for all haxe-defined classes, but may
	or may not work for instances of external/native classes.

	The specification of the serialization format can be found here:
	<https://haxe.org/manual/serialization/format>]]></haxe_doc>
	</class>
	<enum path="haxe._Template.TemplateExpr" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Template.hx" private="1" module="haxe.Template">
		<OpVar a="v"><c path="String"/></OpVar>
		<OpExpr a="expr"><f a=""><d/></f></OpExpr>
		<OpIf a="expr:eif:eelse">
			<f a=""><d/></f>
			<e path="haxe._Template.TemplateExpr"/>
			<e path="haxe._Template.TemplateExpr"/>
		</OpIf>
		<OpStr a="str"><c path="String"/></OpStr>
		<OpBlock a="l"><c path="List"><e path="haxe._Template.TemplateExpr"/></c></OpBlock>
		<OpForeach a="expr:loop">
			<f a=""><d/></f>
			<e path="haxe._Template.TemplateExpr"/>
		</OpForeach>
		<OpMacro a="name:params">
			<c path="String"/>
			<c path="List"><e path="haxe._Template.TemplateExpr"/></c>
		</OpMacro>
	</enum>
	<typedef path="haxe._Template.Token" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Template.hx" private="1" module="haxe.Template"><a>
	<s><x path="Bool"/></s>
	<p><c path="String"/></p>
	<l><c path="Array"><c path="String"/></c></l>
</a></typedef>
	<typedef path="haxe._Template.ExprToken" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Template.hx" private="1" module="haxe.Template"><a>
	<s><x path="Bool"/></s>
	<p><c path="String"/></p>
</a></typedef>
	<class path="haxe.Template" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Template.hx">
		<splitter expr="~/(::[A-Za-z0-9_ ()&amp;|!+=/&gt;&lt;*.&quot;-]+::|\$\$([A-Za-z0-9_-]+)\()/" line="54" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e><![CDATA[~/(::[A-Za-z0-9_ ()&|!+=/><*."-]+::|\$\$([A-Za-z0-9_-]+)\()/]]></e></m></meta>
		</splitter>
		<expr_splitter expr="~/(\(|\)|[ 
	]*&quot;[^&quot;]*&quot;[ 
	]*|[!+=/&gt;&lt;*.&amp;|-]+)/" line="55" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e><![CDATA[~/(\(|\)|[ 
	]*"[^"]*"[ 
	]*|[!+=/><*.&|-]+)/]]></e></m></meta>
		</expr_splitter>
		<expr_trim expr="~/^[ ]*([^ ]+)[ ]*$/" line="56" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[ ]*([^ ]+)[ ]*$/</e></m></meta>
		</expr_trim>
		<expr_int expr="~/^[0-9]+$/" line="57" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[0-9]+$/</e></m></meta>
		</expr_int>
		<expr_float expr="~/^([+-]?)(?=\d|,\d)\d*(,\d*)?([Ee]([+-]?\d+))?$/" line="58" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^([+-]?)(?=\d|,\d)\d*(,\d*)?([Ee]([+-]?\d+))?$/</e></m></meta>
		</expr_float>
		<globals public="1" expr="{ }" line="64" static="1">
			<d/>
			<meta><m n=":value"><e>{ }</e></m></meta>
			<haxe_doc>Global replacements which are used across all Template instances. This
		has lower priority than the context argument of execute().</haxe_doc>
		</globals>
		<expr><e path="haxe._Template.TemplateExpr"/></expr>
		<context><d/></context>
		<macros><d/></macros>
		<stack><c path="List"><d/></c></stack>
		<buf><c path="StringBuf"/></buf>
		<execute public="1" set="method" line="105">
			<f a="context:?macros">
				<d/>
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Executes `this` Template, taking into account `context` for
		replacements and `macros` for callback functions.

		If `context` has a field 'name', its value replaces all occurrences of
		::name:: in the Template. Otherwise Template.globals is checked instead,
		If 'name' is not a field of that either, ::name:: is replaced with null.

		If `macros` has a field 'name', all occurrences of $$name(args) are
		replaced with the result of calling that field. The first argument is
		always the resolve() method, followed by the given arguments.
		If `macros` has no such field, the result is unspecified.

		If `context` is null, the result is unspecified. If `macros` is null,
		no macros are used.</haxe_doc>
		</execute>
		<resolve set="method" line="114"><f a="v">
	<c path="String"/>
	<d/>
</f></resolve>
		<parseTokens set="method" line="128"><f a="data">
	<c path="String"/>
	<c path="List"><t path="haxe._Template.Token"/></c>
</f></parseTokens>
		<parseBlock set="method" line="174"><f a="tokens">
	<c path="List"><t path="haxe._Template.Token"/></c>
	<e path="haxe._Template.TemplateExpr"/>
</f></parseBlock>
		<parse set="method" line="189"><f a="tokens">
	<c path="List"><t path="haxe._Template.Token"/></c>
	<e path="haxe._Template.TemplateExpr"/>
</f></parse>
		<parseExpr set="method" line="239"><f a="data">
	<c path="String"/>
	<f a=""><unknown/></f>
</f></parseExpr>
		<makeConst set="method" line="270"><f a="v">
	<c path="String"/>
	<f a=""><d/></f>
</f></makeConst>
		<makePath set="method" line="289"><f a="e:l">
	<f a=""><d/></f>
	<c path="List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makePath>
		<makeExpr set="method" line="303"><f a="l">
	<c path="List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makeExpr>
		<makeExpr2 set="method" line="307"><f a="l">
	<c path="List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makeExpr2>
		<run set="method" line="353"><f a="e">
	<e path="haxe._Template.TemplateExpr"/>
	<x path="Void"/>
</f></run>
		<new public="1" set="method" line="82">
			<f a="str">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Template instance from `str`.

		`str` is parsed into tokens, which are stored for internal use. This
		means that multiple execute() operations on a single Template instance
		are more efficient than one execute() operations on multiple Template
		instances.

		If `str` is null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Template provides a basic templating mechanism to replace values in a source
	String, and to have some basic logic.

	A complete documentation of the supported syntax is available at:
	<https://haxe.org/manual/std-template.html>]]></haxe_doc>
	</class>
	<class path="haxe.Timer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Timer.hx">
		<delay public="1" set="method" line="136" static="1">
			<f a="f:time_ms">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<c path="haxe.Timer"/>
			</f>
			<haxe_doc>Invokes `f` after `time_ms` milliseconds.

		This is a convenience function for creating a new Timer instance with
		`time_ms` as argument, binding its run() method to `f` and then stopping
		`this` Timer upon the first invocation.

		If `f` is null, the result is unspecified.</haxe_doc>
		</delay>
		<measure public="1" params="T" set="method" line="156" static="1">
			<f a="f:?pos">
				<f a=""><c path="measure.T"/></f>
				<t path="haxe.PosInfos"/>
				<c path="measure.T"/>
			</f>
			<haxe_doc>Measures the time it takes to execute `f`, in seconds with fractions.

		This is a convenience function for calculating the difference between
		Timer.stamp() before and after the invocation of `f`.

		The difference is passed as argument to Log.trace(), with "s" appended
		to denote the unit. The optional `pos` argument is passed through.

		If `f` is null, the result is unspecified.</haxe_doc>
		</measure>
		<stamp public="1" get="inline" set="null" line="169" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a timestamp, in seconds with fractions.

		The value itself might differ depending on platforms, only differences
		between two values make sense.</haxe_doc>
		</stamp>
		<id><t path="Null"><x path="Int"/></t></id>
		<stop public="1" set="method" line="88">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Stops `this` Timer.

		After calling this method, no additional invocations of `this.run`
		will occur.

		It is not possible to restart `this` Timer once stopped.</haxe_doc>
		</stop>
		<run public="1" set="dynamic" line="123">
			<f a=""><x path="Void"/></f>
			<haxe_doc>This method is invoked repeatedly on `this` Timer.

		It can be overridden in a subclass, or rebound directly to a custom
		function:
			var timer = new haxe.Timer(1000); // 1000ms delay
			timer.run = function() { ... }

		Once bound, it can still be rebound to different functions until `this`
		Timer is stopped through a call to `this.stop`.</haxe_doc>
		</run>
		<new public="1" set="method" line="60">
			<f a="time_ms">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates a new timer that will run every `time_ms` milliseconds.

		After creating the Timer instance, it calls `this.run` repeatedly,
		with delays of `time_ms` milliseconds, until `this.stop` is called.

		The first invocation occurs after `time_ms` milliseconds, not
		immediately.

		The accuracy of this may be platform-dependent.</haxe_doc>
		</new>
		<haxe_doc>The Timer class allows you to create asynchronous timers on platforms that
	support events.

	The intended usage is to create an instance of the Timer class with a given
	interval, set its run() method to a custom function to be invoked and
	eventually call stop() to stop the Timer.

	Note that a running Timer may or may not prevent the program to exit
	automatically when main() returns.

	It is also possible to extend this class and override its run() method in
	the child class.</haxe_doc>
	</class>
	<abstract path="haxe.Ucs2" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Ucs2.hx">
		<this><c path="String"/></this>
		<haxe_doc>Cross platform UCS2 string API.</haxe_doc>
		<impl><class path="haxe._Ucs2.Ucs2_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Ucs2.hx" private="1" module="haxe.Ucs2">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
	</length>
	<_new get="inline" set="null" line="31" static="1">
		<f a="str">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
	</_new>
	<get_length get="inline" set="null" line="40" static="1">
		<f a="this">
			<c path="String"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
	</get_length>
	<toUpperCase public="1" get="inline" set="null" line="49" static="1">
		<f a="this">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
	</toUpperCase>
	<toLowerCase public="1" get="inline" set="null" line="58" static="1">
		<f a="this">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
	</toLowerCase>
	<charAt public="1" get="inline" set="null" line="68" static="1">
		<f a="this:index">
			<c path="String"/>
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns the character at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, the empty Ucs2 ""
		is returned.</haxe_doc>
	</charAt>
	<charCodeAt public="1" get="inline" set="null" line="81" static="1">
		<f a="this:index">
			<c path="String"/>
			<x path="Int"/>
			<t path="Null"><x path="Int"/></t>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns the character code at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, null is returned.

		To obtain the character code of a single character, "x".code can be used
		instead to @:extern public inline the character code at compile time. Note that this
		only works on Ucs2 literals of length 1.</haxe_doc>
	</charCodeAt>
	<indexOf public="1" get="inline" set="null" line="96" static="1">
		<f a="this:str:?startIndex">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 starting from `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
	</indexOf>
	<lastIndexOf public="1" get="inline" set="null" line="111" static="1">
		<f a="this:str:?startIndex">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 from 0 to `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
	</lastIndexOf>
	<split public="1" get="inline" set="null" line="135" static="1">
		<f a="this:delimiter">
			<c path="String"/>
			<x path="haxe.Ucs2"/>
			<c path="Array"><x path="haxe.Ucs2"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Splits `this` Ucs2 at each occurrence of `delimiter`.

		If `this` Ucs2 is the empty Ucs2 "", the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty Ucs2 "", `this` Ucs2 is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` Ucs2.

		If `delimiter` is not found within `this` Ucs2, the result is an Array
		with one element, which equals `this` Ucs2.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` Ucs2 is split into parts at each occurrence of
		`delimiter`. If `this` Ucs2 starts (or ends) with `delimiter`, the
		result Array contains a leading (or trailing) empty Ucs2 "" element.
		Two subsequent delimiters also result in an empty Ucs2 "" element.</haxe_doc>
	</split>
	<substr public="1" get="inline" set="null" line="154" static="1">
		<f a="this:pos:?len">
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns `len` characters of `this` Ucs2, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` Ucs2 are included.

		If `pos` is negative, its value is calculated from the end of `this`
		Ucs2 by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` Ucs2 are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
	</substr>
	<substring public="1" get="inline" set="null" line="171" static="1">
		<f a="this:startIndex:?endIndex">
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns the part of `this` Ucs2 from `startIndex` to `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		Ucs2 "" is returned.</haxe_doc>
	</substring>
	<toNativeString public="1" get="inline" set="null" line="178" static="1">
		<f a="this">
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":extern"/>
		</meta>
		<haxe_doc>Returns the native underlying String.</haxe_doc>
	</toNativeString>
	<fromCharCode public="1" get="inline" set="null" line="188" static="1">
		<f a="code">
			<x path="Int"/>
			<x path="haxe.Ucs2"/>
		</f>
		<meta><m n=":extern"/></meta>
		<haxe_doc>Returns the Ucs2 corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
	</fromCharCode>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="haxe._Ucs2.Ucs2_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Ucs2.hx" private="1" module="haxe.Ucs2">
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
		</length>
		<_new get="inline" set="null" line="31" static="1">
			<f a="str">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
		</_new>
		<get_length get="inline" set="null" line="40" static="1">
			<f a="this">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
		</get_length>
		<toUpperCase public="1" get="inline" set="null" line="49" static="1">
			<f a="this">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" get="inline" set="null" line="58" static="1">
			<f a="this">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns a Ucs2 where all characters of `this` Ucs2 are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<charAt public="1" get="inline" set="null" line="68" static="1">
			<f a="this:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns the character at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, the empty Ucs2 ""
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" get="inline" set="null" line="81" static="1">
			<f a="this:index">
				<c path="String"/>
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns the character code at position `index` of `this` Ucs2.

		If `index` is negative or exceeds `this.length`, null is returned.

		To obtain the character code of a single character, "x".code can be used
		instead to @:extern public inline the character code at compile time. Note that this
		only works on Ucs2 literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" get="inline" set="null" line="96" static="1">
			<f a="this:str:?startIndex">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 starting from `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" get="inline" set="null" line="111" static="1">
			<f a="this:str:?startIndex">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		Ucs2.

		If `startIndex` is given, the search is performed within the substring
		of `this` Ucs2 from 0 to `startIndex`. Otherwise the search is
		performed within `this` Ucs2. In either case, the returned position
		is relative to the beginning of `this` Ucs2.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" get="inline" set="null" line="135" static="1">
			<f a="this:delimiter">
				<c path="String"/>
				<x path="haxe.Ucs2"/>
				<c path="Array"><x path="haxe.Ucs2"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Splits `this` Ucs2 at each occurrence of `delimiter`.

		If `this` Ucs2 is the empty Ucs2 "", the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty Ucs2 "", `this` Ucs2 is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` Ucs2.

		If `delimiter` is not found within `this` Ucs2, the result is an Array
		with one element, which equals `this` Ucs2.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` Ucs2 is split into parts at each occurrence of
		`delimiter`. If `this` Ucs2 starts (or ends) with `delimiter`, the
		result Array contains a leading (or trailing) empty Ucs2 "" element.
		Two subsequent delimiters also result in an empty Ucs2 "" element.</haxe_doc>
		</split>
		<substr public="1" get="inline" set="null" line="154" static="1">
			<f a="this:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns `len` characters of `this` Ucs2, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` Ucs2 are included.

		If `pos` is negative, its value is calculated from the end of `this`
		Ucs2 by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` Ucs2 are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" get="inline" set="null" line="171" static="1">
			<f a="this:startIndex:?endIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns the part of `this` Ucs2 from `startIndex` to `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		Ucs2 "" is returned.</haxe_doc>
		</substring>
		<toNativeString public="1" get="inline" set="null" line="178" static="1">
			<f a="this">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Returns the native underlying String.</haxe_doc>
		</toNativeString>
		<fromCharCode public="1" get="inline" set="null" line="188" static="1">
			<f a="code">
				<x path="Int"/>
				<x path="haxe.Ucs2"/>
			</f>
			<meta><m n=":extern"/></meta>
			<haxe_doc>Returns the Ucs2 corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<meta><m n=":final"/></meta>
	</class>
	<class path="haxe._Unserializer.DefaultResolver" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Unserializer.hx" private="1" module="haxe.Unserializer">
		<resolveClass public="1" get="inline" set="null" line="477">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<meta><m n=":final"/></meta>
		</resolveClass>
		<resolveEnum public="1" get="inline" set="null" line="478">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<meta><m n=":final"/></meta>
		</resolveEnum>
		<new public="1" set="method" line="476"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.Unserializer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Unserializer.hx">
		<DEFAULT_RESOLVER public="1" expr="new DefaultResolver()" line="63" static="1">
			<t path="haxe.TypeResolver"/>
			<meta><m n=":value"><e>new DefaultResolver()</e></m></meta>
			<haxe_doc><![CDATA[This value can be set to use custom type resolvers.

		A type resolver finds a `Class` or `Enum` instance from a given `String`. 
		By default, the Haxe `Type` Api is used.

		A type resolver must provide two methods:

		1. `resolveClass(name:String):Class<Dynamic>` is called to determine a
				`Class` from a class name
		2. `resolveEnum(name:String):Enum<Dynamic>` is called to determine an
				`Enum` from an enum name

		This value is applied when a new `Unserializer` instance is created.
		Changing it afterwards has no effect on previously created instances.]]></haxe_doc>
		</DEFAULT_RESOLVER>
		<BASE64 expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:&quot;" line="65" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:"</e></m></meta>
		</BASE64>
		<CODES expr="null" line="68" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>null</e></m></meta>
		</CODES>
		<initCodes set="method" line="70" static="1"><f a=""><c path="Array"><x path="Int"/></c></f></initCodes>
		<run public="1" set="method" line="465" static="1">
			<f a="v">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Unserializes `v` and returns the according value.

		This is a convenience function for creating a new instance of
		Unserializer with `v` as buffer and calling its unserialize() method
		once.</haxe_doc>
		</run>
		<buf><c path="String"/></buf>
		<pos><x path="Int"/></pos>
		<length><x path="Int"/></length>
		<cache><c path="Array"><d/></c></cache>
		<scache><c path="Array"><c path="String"/></c></scache>
		<resolver><t path="haxe.TypeResolver"/></resolver>
		<setResolver public="1" set="method" line="127">
			<f a="r">
				<t path="haxe.TypeResolver"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the type resolver of `this` Unserializer instance to `r`.

		If `r` is null, a special resolver is used which returns null for all
		input values.

		See `DEFAULT_RESOLVER` for more information on type resolvers.</haxe_doc>
		</setResolver>
		<getResolver public="1" set="method" line="139">
			<f a=""><t path="haxe.TypeResolver"/></f>
			<haxe_doc>Gets the type resolver of `this` Unserializer instance.

		See `DEFAULT_RESOLVER` for more information on type resolvers.</haxe_doc>
		</getResolver>
		<get get="inline" set="null" line="143"><f a="p">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<readDigits set="method" line="147"><f a=""><x path="Int"/></f></readDigits>
		<readFloat set="method" line="172"><f a=""><x path="Float"/></f></readFloat>
		<unserializeObject set="method" line="186"><f a="o">
	<a/>
	<x path="Void"/>
</f></unserializeObject>
		<unserializeEnum set="method" line="201"><f a="edecl:tag">
	<x path="Enum"><unknown/></x>
	<c path="String"/>
	<unknown/>
</f></unserializeEnum>
		<unserialize public="1" set="method" line="233">
			<f a=""><d/></f>
			<haxe_doc>Unserializes the next part of `this` Unserializer instance and returns
		the according value.

		This function may call `this.resolver.resolveClass` to determine a
		Class from a String, and `this.resolver.resolveEnum` to determine an
		Enum from a String.

		If `this` Unserializer instance contains no more or invalid data, an
		exception is thrown.

		This operation may fail on structurally valid data if a type cannot be
		resolved or if a field cannot be set. This can happen when unserializing
		Strings that were serialized on a different Haxe target, in which the
		serialization side has to make sure not to include platform-specific
		data.

		Classes are created from `Type.createEmptyInstance`, which means their
		constructors are not called.</haxe_doc>
		</unserialize>
		<new public="1" set="method" line="102">
			<f a="buf">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Unserializer instance, with its internal buffer
		initialized to `buf`.

		This does not parse `buf` immediately. It is parsed only when calls to
		`this.unserialize` are made.

		Each Unserializer instance maintains its own cache.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Unserializer` class is the complement to the `Serializer` class. It parses
	a serialization `String` and creates objects from the contained data.

	This class can be used in two ways:

	- create a `new Unserializer()` instance with a given serialization
		String, then call its `unserialize()` method until all values are
		extracted
	- call `Unserializer.run()`  to unserialize a single value from a given
		String

	The specification of the serialization format can be found here:
	<https://haxe.org/manual/serialization/format>]]></haxe_doc>
	</class>
	<class path="haxe._Unserializer.NullResolver" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Unserializer.hx" private="1" module="haxe.Unserializer">
		<instance public="1" get="accessor" set="null" static="1"><c path="haxe._Unserializer.NullResolver"/></instance>
		<get_instance get="inline" set="null" line="486" static="1"><f a=""><c path="haxe._Unserializer.NullResolver"/></f></get_instance>
		<resolveClass public="1" get="inline" set="null" line="483">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<meta><m n=":final"/></meta>
		</resolveClass>
		<resolveEnum public="1" get="inline" set="null" line="484">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<meta><m n=":final"/></meta>
		</resolveEnum>
		<new set="method" line="482"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.Utf8" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/Utf8.hx">
		<iter public="1" set="method" line="56" static="1">
			<f a="s:chars">
				<c path="String"/>
				<f a="">
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Call the `chars` function for each UTF8 char of the string.</haxe_doc>
		</iter>
		<encode public="1" set="method" line="64" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encode the input ISO string into the corresponding UTF8 one.</haxe_doc>
		</encode>
		<decode public="1" set="method" line="72" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Decode an UTF8 string back to an ISO string.
		Throw an exception if a given UTF8 character is not supported by the decoder.</haxe_doc>
		</decode>
		<charCodeAt public="1" get="inline" set="null" line="79" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Similar to `String.charCodeAt` but uses the UTF8 character position.</haxe_doc>
		</charCodeAt>
		<validate public="1" get="inline" set="null" line="86" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the String is correctly encoded as UTF8.</haxe_doc>
		</validate>
		<length public="1" get="inline" set="null" line="94" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":extern"/></meta>
			<haxe_doc>Returns the number of UTF8 chars of the String.</haxe_doc>
		</length>
		<compare public="1" set="method" line="101" static="1">
			<f a="a:b">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compare two UTF8 strings, character by character.</haxe_doc>
		</compare>
		<sub public="1" get="inline" set="null" line="108" static="1">
			<f a="s:pos:len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>This is similar to `String.substr` but the `pos` and `len` parts are considering UTF8 characters.</haxe_doc>
		</sub>
		<__b><c path="String"/></__b>
		<addChar public="1" get="inline" set="null" line="42">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Add the given UTF8 character code to the buffer.</haxe_doc>
		</addChar>
		<toString public="1" get="inline" set="null" line="49">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the buffer converted to a String.</haxe_doc>
		</toString>
		<new public="1" set="method" line="35">
			<f a="?size">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allocate a new Utf8 buffer using an optional bytes size.</haxe_doc>
		</new>
		<haxe_doc>Since not all platforms guarantee that `String` always uses UTF-8 encoding, you
	can use this cross-platform API to perform operations on such strings.</haxe_doc>
	</class>
	<class path="haxe.crypto.Adler32" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/crypto/Adler32.hx">
		<read public="1" set="method" line="60" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="haxe.crypto.Adler32"/>
</f></read>
		<make public="1" set="method" line="71" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></make>
		<a1><x path="Int"/></a1>
		<a2><x path="Int"/></a2>
		<get public="1" set="method" line="37"><f a=""><x path="Int"/></f></get>
		<update public="1" set="method" line="41"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update>
		<equals public="1" set="method" line="52"><f a="a">
	<c path="haxe.crypto.Adler32"/>
	<x path="Bool"/>
</f></equals>
		<toString public="1" set="method" line="56"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Calculates the Adler32 of the given Bytes.</haxe_doc>
	</class>
	<class path="haxe.io.Bytes" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/io/Bytes.hx">
		<alloc public="1" get="inline" set="null" line="193" static="1"><f a="length">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></alloc>
		<ofString public="1" set="method" line="197" static="1"><f a="s">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></ofString>
		<ofData public="1" set="method" line="225" static="1">
			<f a="b">
				<t path="haxe.io.BytesData"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</ofData>
		<fastGet public="1" get="inline" set="null" line="231" static="1">
			<f a="b:pos">
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Read the most efficiently possible the n-th byte of the data.
		Behavior when reading outside of the available data is unspecified.</haxe_doc>
		</fastGet>
		<length public="1" set="null"><x path="Int"/></length>
		<b><c path="js.html.Uint8Array"/></b>
		<data><c path="js.html.DataView"/></data>
		<get public="1" get="inline" set="null" line="46"><f a="pos">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<set public="1" get="inline" set="null" line="50"><f a="pos:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<blit public="1" set="method" line="54"><f a="pos:src:srcpos:len">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blit>
		<fill public="1" set="method" line="62"><f a="pos:len:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></fill>
		<sub public="1" set="method" line="67"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></sub>
		<compare public="1" set="method" line="72"><f a="other">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></compare>
		<initData get="inline" set="null" line="82"><f a=""><x path="Void"/></f></initData>
		<getDouble public="1" set="method" line="86">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the IEEE double precision value at given position (in low endian encoding).
		Result is unspecified if reading outside of the bounds</haxe_doc>
		</getDouble>
		<getFloat public="1" set="method" line="91">
			<f a="pos">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the IEEE single precision value at given position (in low endian encoding).
		Result is unspecified if reading outside of the bounds</haxe_doc>
		</getFloat>
		<setDouble public="1" set="method" line="96">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the IEEE double precision value at given position in low endian encoding.
		Result is unspecified if writing outside of the bounds.</haxe_doc>
		</setDouble>
		<setFloat public="1" set="method" line="101">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the IEEE single precision value at given position in low endian encoding.
		Result is unspecified if writing outside of the bounds.</haxe_doc>
		</setFloat>
		<getUInt16 public="1" set="method" line="106">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 16 bit unsigned integer at given position (in low endian encoding).</haxe_doc>
		</getUInt16>
		<setUInt16 public="1" set="method" line="111">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the 16 bit unsigned integer at given position (in low endian encoding).</haxe_doc>
		</setUInt16>
		<getInt32 public="1" set="method" line="116">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the 32 bit integer at given position (in low endian encoding).</haxe_doc>
		</getInt32>
		<setInt32 public="1" set="method" line="121">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the 32 bit integer at given position (in low endian encoding).</haxe_doc>
		</setInt32>
		<getInt64 public="1" set="method" line="126">
			<f a="pos">
				<x path="Int"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Returns the 64 bit integer at given position (in low endian encoding).</haxe_doc>
		</getInt64>
		<setInt64 public="1" set="method" line="130">
			<f a="pos:v">
				<x path="Int"/>
				<x path="haxe.Int64"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store the 64 bit integer at given position (in low endian encoding).</haxe_doc>
		</setInt64>
		<getString public="1" set="method" line="135"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></getString>
		<readString public="1" get="inline" set="null" line="167">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":deprecated"><e>"readString is deprecated, use getString instead"</e></m>
				<m n=":noCompletion"/>
			</meta>
		</readString>
		<toString public="1" set="method" line="171"><f a=""><c path="String"/></f></toString>
		<toHex public="1" set="method" line="175"><f a=""><c path="String"/></f></toHex>
		<getData public="1" get="inline" set="null" line="189">
			<f a=""><t path="haxe.io.BytesData"/></f>
			<meta><m n=":has_untyped"/></meta>
		</getData>
		<new set="method" line="36">
			<f a="data">
				<t path="haxe.io.BytesData"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</new>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="js.html.ArrayBufferView" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ArrayBufferView.hx" extern="1">
		<buffer public="1" set="null"><c path="js.html.ArrayBuffer"/></buffer>
		<byteOffset public="1" set="null"><x path="Int"/></byteOffset>
		<byteLength public="1" set="null"><x path="Int"/></byteLength>
		<haxe_doc><![CDATA[`ArrayBufferView` is a helper type representing any of the following JavaScript `TypedArray` types:

	Documentation [ArrayBufferView](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView>]]></haxe_doc>
		<meta><m n=":native"><e>"ArrayBufferView"</e></m></meta>
	</class>
	<class path="js.html.Uint8Array" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Uint8Array.hx" extern="1">
		<extends path="js.html.ArrayBufferView"/>
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" set="null"><x path="Int"/></length>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><set public="1" set="method"><f a="array:?offset">
	<c path="js.html.Uint8Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set></overloads>
		</set>
		<subarray public="1" set="method"><f a="start:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.Uint8Array"/>
</f></subarray>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.html.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array">
						<c path="js.html.Uint8Array"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array">
						<c path="Array"><x path="Int"/></c>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<meta><m n=":native"><e>"Uint8Array"</e></m></meta>
	</class>
	<class path="haxe.crypto.Base64" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/crypto/Base64.hx">
		<CHARS public="1" set="null" expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;" line="29" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</e></m></meta>
		</CHARS>
		<BYTES public="1" set="null" expr="haxe.io.Bytes.ofString(CHARS)" line="30" static="1">
			<c path="haxe.io.Bytes"/>
			<meta><m n=":value"><e>haxe.io.Bytes.ofString(CHARS)</e></m></meta>
		</BYTES>
		<encode public="1" set="method" line="32" static="1">
			<f a="bytes:?complement" v=":true">
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ complement : true }</e></m></meta>
		</encode>
		<decode public="1" set="method" line="45" static="1">
			<f a="str:?complement" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ complement : true }</e></m></meta>
		</decode>
		<haxe_doc>Allows to encode/decode String and bytes using Base64 encoding.</haxe_doc>
	</class>
	<class path="haxe.crypto.BaseCode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/crypto/BaseCode.hx">
		<encode public="1" set="method" line="127" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<decode public="1" set="method" line="132" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></decode>
		<base><c path="haxe.io.Bytes"/></base>
		<nbits><x path="Int"/></nbits>
		<tbl><c path="Array"><x path="Int"/></c></tbl>
		<encodeBytes public="1" set="method" line="44"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></encodeBytes>
		<initTable set="method" line="72"><f a=""><x path="Void"/></f></initTable>
		<decodeBytes public="1" set="method" line="81"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></decodeBytes>
		<encodeString public="1" set="method" line="111"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encodeString>
		<decodeString public="1" set="method" line="119"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></decodeString>
		<new public="1" set="method" line="33"><f a="base">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Allows to encode/decode String and bytes using a power of two base dictionary.</haxe_doc>
	</class>
	<class path="haxe.crypto.Crc32" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/crypto/Crc32.hx">
		<make public="1" set="method" line="67" static="1">
			<f a="data">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Calculates the CRC32 of the given data bytes</haxe_doc>
		</make>
		<crc><x path="Int"/></crc>
		<byte public="1" set="method" line="35"><f a="b">
	<x path="Int"/>
	<x path="Void"/>
</f></byte>
		<update public="1" set="method" line="46"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update>
		<get public="1" set="method" line="60"><f a=""><x path="Int"/></f></get>
		<new public="1" set="method" line="31"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Calculates the Crc32 of the given Bytes.</haxe_doc>
	</class>
	<enum path="haxe.crypto.HashMethod" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/crypto/Hmac.hx" module="haxe.crypto.Hmac">
		<MD5/>
		<SHA1/>
		<SHA256/>
		<haxe_doc>Hash methods for Hmac calculation.</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="haxe.crypto.Hmac" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/crypto/Hmac.hx">
		<method><e path="haxe.crypto.HashMethod"/></method>
		<blockSize><x path="Int"/></blockSize>
		<length><x path="Int"/></length>
		<doHash get="inline" set="null" line="54"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></doHash>
		<nullPad set="method" line="62"><f a="s:chunkLen">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></nullPad>
		<make public="1" set="method" line="73"><f a="key:msg">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<new public="1" set="method" line="42"><f a="hashMethod">
	<e path="haxe.crypto.HashMethod"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Calculates a Hmac of the given Bytes using a HashMethod.</haxe_doc>
	</class>
	<class path="haxe.crypto.Md5" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/crypto/Md5.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="41" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<bytes2blks set="method" line="110" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><x path="Int"/></c>
</f></bytes2blks>
		<str2blks set="method" line="139" static="1"><f a="str">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<bitOR set="method" line="76"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitOR>
		<bitXOR set="method" line="82"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitXOR>
		<bitAND set="method" line="88"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitAND>
		<addme set="method" line="94"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></addme>
		<hex set="method" line="100"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<rol set="method" line="172"><f a="num:cnt">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></rol>
		<cmn set="method" line="176"><f a="q:a:b:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></cmn>
		<ff set="method" line="180"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ff>
		<gg set="method" line="184"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></gg>
		<hh set="method" line="188"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></hh>
		<ii set="method" line="192"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ii>
		<doEncode set="method" line="196"><f a="x">
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<new set="method" line="73"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a MD5 of a String.</haxe_doc>
	</class>
	<class path="haxe.crypto.Sha1" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/crypto/Sha1.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="39" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<str2blks set="method" line="107" static="1"><f a="s">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<bytes2blks set="method" line="127" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><x path="Int"/></c>
</f></bytes2blks>
		<doEncode set="method" line="61"><f a="x">
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<rol get="inline" set="null" line="147">
			<f a="num:cnt">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Bitwise rotate a 32-bit number to the left</haxe_doc>
		</rol>
		<ft set="method" line="154">
			<f a="t:b:c:d">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Perform the appropriate triplet combination function for the current iteration</haxe_doc>
		</ft>
		<kt set="method" line="164">
			<f a="t">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Determine the appropriate additive constant for the current iteration</haxe_doc>
		</kt>
		<hex set="method" line="174"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<new set="method" line="58"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a Sha1 of a String.</haxe_doc>
	</class>
	<class path="haxe.crypto.Sha224" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/crypto/Sha224.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="39" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<str2blks set="method" line="135" static="1"><f a="s">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<safeAdd set="method" line="151" static="1"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></safeAdd>
		<doEncode set="method" line="59"><f a="str:strlen">
	<c path="String"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<ROTR set="method" line="158"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ROTR>
		<SHR set="method" line="163"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></SHR>
		<Ch set="method" line="168"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Ch>
		<Maj set="method" line="173"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Maj>
		<Sigma0 set="method" line="177"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma0>
		<Sigma1 set="method" line="181"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma1>
		<Gamma0 set="method" line="185"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma0>
		<Gamma1 set="method" line="189"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma1>
		<hex set="method" line="193"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<new public="1" set="method" line="56"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a Sha224 of a String.</haxe_doc>
	</class>
	<class path="haxe.crypto.Sha256" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/crypto/Sha256.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="39" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<str2blks set="method" line="115" static="1"><f a="s">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<bytes2blks set="method" line="135" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><x path="Int"/></c>
</f></bytes2blks>
		<doEncode set="method" line="59"><f a="m:l">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<S set="method" line="152"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></S>
		<R set="method" line="156"><f a="X:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></R>
		<Ch set="method" line="160"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Ch>
		<Maj set="method" line="164"><f a="x:y:z">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></Maj>
		<Sigma0256 set="method" line="168"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma0256>
		<Sigma1256 set="method" line="172"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Sigma1256>
		<Gamma0256 set="method" line="176"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma0256>
		<Gamma1256 set="method" line="180"><f a="x">
	<x path="Int"/>
	<x path="Int"/>
</f></Gamma1256>
		<safeAdd set="method" line="184"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></safeAdd>
		<hex set="method" line="190"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<new public="1" set="method" line="56"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a Sha256 of a String.</haxe_doc>
	</class>
	<class path="haxe.ds.ArraySort" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/ArraySort.hx">
		<sort public="1" params="T" set="method" line="43" static="1">
			<f a="a:cmp">
				<c path="Array"><c path="sort.T"/></c>
				<f a=":">
					<c path="sort.T"/>
					<c path="sort.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts Array `a` according to the comparison function `cmp`, where
		`cmp(x,y)` returns 0 if `x == y`, a positive Int if `x > y` and a
		negative Int if `x < y`.

		This operation modifies Array `a` in place.

		This operation is stable: The order of equal elements is preserved.

		If `a` or `cmp` are null, the result is unspecified.]]></haxe_doc>
		</sort>
		<rec params="T" set="method" line="47" static="1"><f a="a:cmp:from:to">
	<c path="Array"><c path="rec.T"/></c>
	<f a=":">
		<c path="rec.T"/>
		<c path="rec.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rec>
		<doMerge params="T" set="method" line="68" static="1"><f a="a:cmp:from:pivot:to:len1:len2">
	<c path="Array"><c path="doMerge.T"/></c>
	<f a=":">
		<c path="doMerge.T"/>
		<c path="doMerge.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></doMerge>
		<rotate params="T" set="method" line="94" static="1"><f a="a:cmp:from:mid:to">
	<c path="Array"><c path="rotate.T"/></c>
	<f a=":">
		<c path="doMerge.T"/>
		<c path="doMerge.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rotate>
		<gcd set="method" line="112" static="1"><f a="m:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></gcd>
		<upper params="T" set="method" line="121" static="1"><f a="a:cmp:from:to:val">
	<c path="Array"><c path="upper.T"/></c>
	<f a=":">
		<c path="upper.T"/>
		<c path="upper.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></upper>
		<lower params="T" set="method" line="136" static="1"><f a="a:cmp:from:to:val">
	<c path="Array"><c path="lower.T"/></c>
	<f a=":">
		<c path="lower.T"/>
		<c path="lower.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lower>
		<swap params="T" set="method" line="150" static="1"><f a="a:i:j">
	<c path="Array"><c path="swap.T"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></swap>
		<compare params="T" get="inline" set="null" line="156" static="1"><f a="a:cmp:i:j">
	<c path="Array"><c path="compare.T"/></c>
	<f a=":">
		<c path="compare.T"/>
		<c path="compare.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></compare>
		<haxe_doc>ArraySort provides a stable implementation of merge sort through its `sort`
	method. It should be used instead of `Array.sort` in cases where the order
	of equal elements has to be retained on all targets.</haxe_doc>
	</class>
	<class path="haxe.ds.BalancedTree" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/BalancedTree.hx">
		<root><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></root>
		<set public="1" set="method" line="50">
			<f a="key:value">
				<c path="haxe.ds.BalancedTree.K"/>
				<c path="haxe.ds.BalancedTree.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds `key` to `value`.

		If `key` is already bound to a value, that binding disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" set="method" line="61">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<t path="Null"><c path="haxe.ds.BalancedTree.V"/></t>
			</f>
			<haxe_doc>Returns the value `key` is bound to.

		If `key` is not bound to any value, `null` is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<remove public="1" set="method" line="82">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the current binding of `key`.

		If `key` has no binding, `this` BalancedTree is unchanged and false is
		returned.

		Otherwise the binding of `key` is removed and true is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="99">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `key` is bound to a value.

		This method returns true even if `key` is bound to null.

		If `key` is null, the result is unspecified.</haxe_doc>
		</exists>
		<iterator public="1" set="method" line="115">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.V"/></t></f>
			<haxe_doc>Iterates over the bound values of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</iterator>
		<keys public="1" set="method" line="126">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.K"/></t></f>
			<haxe_doc>Iterates over the keys of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</keys>
		<setLoop set="method" line="132"><f a="k:v:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></setLoop>
		<removeLoop set="method" line="145"><f a="k:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeLoop>
		<iteratorLoop set="method" line="153"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="Array"><c path="haxe.ds.BalancedTree.V"/></c>
	<x path="Void"/>
</f></iteratorLoop>
		<keysLoop set="method" line="161"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="Array"><c path="haxe.ds.BalancedTree.K"/></c>
	<x path="Void"/>
</f></keysLoop>
		<merge set="method" line="169"><f a="t1:t2">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></merge>
		<minBinding set="method" line="176"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></minBinding>
		<removeMinBinding set="method" line="182"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeMinBinding>
		<balance set="method" line="187"><f a="l:k:v:r">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></balance>
		<compare set="method" line="201"><f a="k1:k2">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.K"/>
	<x path="Int"/>
</f></compare>
		<toString public="1" set="method" line="205"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="41">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new BalancedTree, which is initially empty.</haxe_doc>
		</new>
		<haxe_doc>BalancedTree allows key-value mapping with arbitrary keys, as long as they
	can be ordered. By default, `Reflect.compare` is used in the `compare`
	method, which can be overridden in subclasses.

	Operations have a logarithmic average and worst-case cost.

	Iteration over keys and values, using `keys` and `iterator` respectively,
	are in-order.</haxe_doc>
	</class>
	<class path="haxe.ds.TreeNode" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/BalancedTree.hx" module="haxe.ds.BalancedTree">
		<left public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></left>
		<right public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></right>
		<key public="1"><c path="haxe.ds.TreeNode.K"/></key>
		<value public="1"><c path="haxe.ds.TreeNode.V"/></value>
		<_height><x path="Int"/></_height>
		<get_height public="1" get="inline" set="null" line="234">
			<f a=""><x path="Int"/></f>
			<meta><m n=":extern"/></meta>
		</get_height>
		<toString public="1" set="method" line="236"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="223">
			<f a="l:k:v:r:?h" v="::::-1">
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<c path="haxe.ds.TreeNode.K"/>
				<c path="haxe.ds.TreeNode.V"/>
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ h : -1 }</e></m></meta>
		</new>
		<haxe_doc>A tree node of `haxe.ds.BalancedTree`.</haxe_doc>
	</class>
	<enum path="haxe.ds.Either" params="L:R" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/Either.hx">
		<Left a="v"><c path="haxe.ds.Either.L"/></Left>
		<Right a="v"><c path="haxe.ds.Either.R"/></Right>
		<haxe_doc>Either represents values which are either of type `L` (Left) or type `R`
	(Right).</haxe_doc>
	</enum>
	<class path="haxe.ds.EnumValueMap" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/EnumValueMap.hx">
		<extends path="haxe.ds.BalancedTree">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</extends>
		<implements path="haxe.IMap">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</implements>
		<compare set="method" line="33" override="1"><f a="k1:k2">
	<x path="EnumValue"/>
	<x path="EnumValue"/>
	<x path="Int"/>
</f></compare>
		<compareArgs set="method" line="42"><f a="a1:a2">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<x path="Int"/>
</f></compareArgs>
		<compareArg set="method" line="52"><f a="v1:v2">
	<d/>
	<d/>
	<x path="Int"/>
</f></compareArg>
		<new public="1" set="method" line="31"><f a=""><x path="Void"/></f></new>
		<haxe_doc>EnumValueMap allows mapping of enum value keys to arbitrary values.

	Keys are compared by value and recursively over their parameters. If any
	parameter is not an enum value, `Reflect.compare` is used to compare them.</haxe_doc>
	</class>
	<class path="haxe.ds.GenericCell" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/GenericStack.hx" module="haxe.ds.GenericStack">
		<elt public="1"><c path="haxe.ds.GenericCell.T"/></elt>
		<next public="1"><c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericCell.T"/></c></next>
		<new public="1" set="method" line="35"><f a="elt:next">
	<c path="haxe.ds.GenericCell.T"/>
	<c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericCell.T"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>A cell of `haxe.ds.GenericStack`.
  
	@see https://haxe.org/manual/std-GenericStack.html</haxe_doc>
	</class>
	<class path="haxe.ds.GenericStack" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/GenericStack.hx">
		<head public="1"><c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericStack.T"/></c></head>
		<add public="1" get="inline" set="null" line="80">
			<f a="item">
				<c path="haxe.ds.GenericStack.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Pushes element `item` onto the stack.</haxe_doc>
		</add>
		<first public="1" get="inline" set="null" line="89">
			<f a=""><t path="Null"><c path="haxe.ds.GenericStack.T"/></t></f>
			<haxe_doc>Returns the topmost stack element without removing it.

		If the stack is empty, null is returned.</haxe_doc>
		</first>
		<pop public="1" get="inline" set="null" line="98">
			<f a=""><t path="Null"><c path="haxe.ds.GenericStack.T"/></t></f>
			<haxe_doc>Returns the topmost stack element and removes it.

		If the stack is empty, null is returned.</haxe_doc>
		</pop>
		<isEmpty public="1" get="inline" set="null" line="111">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if the stack is empty.</haxe_doc>
		</isEmpty>
		<remove public="1" set="method" line="124">
			<f a="v">
				<c path="haxe.ds.GenericStack.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first element which is equal to `v` according to the `==`
		operator.

		This method traverses the stack until it finds a matching element and
		unlinks it, returning true.

		If no matching element is found, false is returned.</haxe_doc>
		</remove>
		<iterator public="1" set="method" line="155">
			<f a=""><t path="Iterator"><c path="haxe.ds.GenericStack.T"/></t></f>
			<haxe_doc>Returns an iterator over the elements of `this` GenericStack.</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="173">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of `this` GenericStack.</haxe_doc>
		</toString>
		<new public="1" set="method" line="74">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty GenericStack.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A stack of elements.

	This class is generic, which means one type is generated for each type
	parameter T on static targets. For example:

	- `new GenericStack<Int>()` generates `GenericStack_Int`
	- `new GenericStack<String>()` generates `GenericStack_String`

	The generated name is an implementation detail and should not be relied
	upon.

	@see https://haxe.org/manual/std-GenericStack.html]]></haxe_doc>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/HashMap.hx">
		<this><c path="haxe.ds._HashMap.HashMapData">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</c></this>
		<haxe_doc>HashMap allows mapping of hashable objects to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
	<_new public="1" get="inline" set="null" line="35" static="1">
		<f a=""><x path="haxe.ds.HashMap">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</x></f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new HashMap.</haxe_doc>
	</_new>
	<set public="1" get="inline" set="null" line="42" static="1">
		<f a="this:k:v">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<c path="haxe.ds.HashMap.V"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.set`</haxe_doc>
	</set>
	<get public="1" get="inline" set="null" line="50" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<t path="Null"><c path="haxe.ds.HashMap.V"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.get`</haxe_doc>
	</get>
	<exists public="1" get="inline" set="null" line="57" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.exists`</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="64" static="1">
		<f a="this:k">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.remove`</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="72" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.HashMap.K"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.keys`</haxe_doc>
	</keys>
	<iterator public="1" get="inline" set="null" line="79" static="1">
		<f a="this">
			<c path="haxe.ds._HashMap.HashMapData">
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
			</c>
			<t path="Iterator"><c path="haxe.ds.HashMap.V"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See `Map.iterator`</haxe_doc>
	</iterator>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
		<_new public="1" get="inline" set="null" line="35" static="1">
			<f a=""><x path="haxe.ds.HashMap">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</x></f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new HashMap.</haxe_doc>
		</_new>
		<set public="1" get="inline" set="null" line="42" static="1">
			<f a="this:k:v">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="50" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<t path="Null"><c path="haxe.ds.HashMap.V"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="57" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="64" static="1">
			<f a="this:k">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="72" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.HashMap.K"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" get="inline" set="null" line="79" static="1">
			<f a="this">
				<c path="haxe.ds._HashMap.HashMapData">
					<c path="haxe.ds.HashMap.K"/>
					<c path="haxe.ds.HashMap.V"/>
				</c>
				<t path="Iterator"><c path="haxe.ds.HashMap.V"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<meta><m n=":final"/></meta>
	</class>
	<class path="haxe.ds._HashMap.HashMapData" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
		<keys public="1"><c path="haxe.ds.IntMap"><c path="haxe.ds._HashMap.HashMapData.K"/></c></keys>
		<values public="1"><c path="haxe.ds.IntMap"><c path="haxe.ds._HashMap.HashMapData.V"/></c></values>
		<new public="1" get="inline" set="null" line="87"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ds.IntMap" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/ds/IntMap.hx">
		<implements path="haxe.IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<h><d/></h>
		<set public="1" get="inline" set="null" line="32">
			<f a="key:value">
				<x path="Int"/>
				<c path="haxe.ds.IntMap.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="36">
			<f a="key">
				<x path="Int"/>
				<t path="Null"><c path="haxe.ds.IntMap.T"/></t>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="40">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="44">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="50">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="56">
			<f a=""><t path="Iterator"><c path="haxe.ds.IntMap.T"/></t></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="65">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" get="inline" set="null" line="28">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new IntMap.</haxe_doc>
		</new>
		<haxe_doc>IntMap allows mapping of Int keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.ds.ListSort" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/ListSort.hx">
		<sort public="1" params="T" get="inline" set="null" line="43" static="1">
			<f a="list:cmp">
				<c path="sort.T"/>
				<f a=":">
					<c path="sort.T"/>
					<c path="sort.T"/>
					<x path="Int"/>
				</f>
				<c path="sort.T"/>
			</f>
			<haxe_doc><![CDATA[Sorts List `lst` according to the comparison function `cmp`, where
		`cmp(x,y)` returns 0 if `x == y`, a positive Int if `x > y` and a
		negative Int if `x < y`.

		This operation modifies List `a` in place and returns its head once modified.
		The `prev` of the head is set to the tail of the sorted list.

		If `list` or `cmp` are null, the result is unspecified.]]></haxe_doc>
		</sort>
		<sortSingleLinked public="1" params="T" get="inline" set="null" line="100" static="1">
			<f a="list:cmp">
				<c path="sortSingleLinked.T"/>
				<f a=":">
					<c path="sortSingleLinked.T"/>
					<c path="sortSingleLinked.T"/>
					<x path="Int"/>
				</f>
				<c path="sortSingleLinked.T"/>
			</f>
			<haxe_doc>Same as `sort` but on single linked list.</haxe_doc>
		</sortSingleLinked>
		<haxe_doc>ListSort provides a stable implementation of merge sort through its `sort`
	method. It has a O(N.log(N)) complexity and does not require additional memory allocation.</haxe_doc>
	</class>
	<class path="haxe.ds.ObjectMap" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/ds/ObjectMap.hx">
		<implements path="haxe.IMap">
			<c path="haxe.ds.ObjectMap.K"/>
			<c path="haxe.ds.ObjectMap.V"/>
		</implements>
		<count expr="0" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</count>
		<assignId get="inline" set="null" line="30" static="1">
			<f a="obj">
				<a/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</assignId>
		<getId get="inline" set="null" line="34" static="1">
			<f a="obj">
				<a/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getId>
		<h><a/></h>
		<set public="1" set="method" line="44">
			<f a="key:value">
				<c path="haxe.ds.ObjectMap.K"/>
				<c path="haxe.ds.ObjectMap.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="50">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<t path="Null"><c path="haxe.ds.ObjectMap.V"/></t>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="54">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="58">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="66">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.K"/></t></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="77">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.V"/></t></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="86">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" set="method" line="40">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new ObjectMap.</haxe_doc>
		</new>
		<haxe_doc>ObjectMap allows mapping of object keys to arbitrary values.

	On static targets, the keys are considered to be strong references. Refer
	to `haxe.ds.WeakMap` for a weak reference version.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<enum path="haxe.ds.Option" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/Option.hx">
		<Some a="v"><c path="haxe.ds.Option.T"/></Some>
		<None/>
		<haxe_doc>An Option is a wrapper type which can either have a value (Some) or not a
	value (None).

	@see https://haxe.org/manual/std-Option.html</haxe_doc>
	</enum>
	<class path="haxe.ds._StringMap.StringMapIterator" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/ds/StringMap.hx" private="1" module="haxe.ds.StringMap">
		<map><c path="haxe.ds.StringMap"><c path="haxe.ds._StringMap.StringMapIterator.T"/></c></map>
		<keys><c path="Array"><c path="String"/></c></keys>
		<index><x path="Int"/></index>
		<count><x path="Int"/></count>
		<hasNext public="1" get="inline" set="null" line="35"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="38"><f a=""><t path="Null"><c path="haxe.ds._StringMap.StringMapIterator.T"/></t></f></next>
		<new public="1" get="inline" set="null" line="29"><f a="map:keys">
	<c path="haxe.ds.StringMap"><c path="haxe.ds._StringMap.StringMapIterator.T"/></c>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ds.StringMap" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/ds/StringMap.hx">
		<implements path="haxe.IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<h><d/></h>
		<rh><d/></rh>
		<isReserved get="inline" set="null" line="52">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</isReserved>
		<set public="1" get="inline" set="null" line="56">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="63">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="haxe.ds.StringMap.T"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="69">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<setReserved set="method" line="75"><f a="key:value">
	<c path="String"/>
	<c path="haxe.ds.StringMap.T"/>
	<x path="Void"/>
</f></setReserved>
		<getReserved set="method" line="80"><f a="key">
	<c path="String"/>
	<t path="Null"><c path="haxe.ds.StringMap.T"/></t>
</f></getReserved>
		<existsReserved set="method" line="84">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</existsReserved>
		<remove public="1" set="method" line="89">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="103">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<arrayKeys set="method" line="107">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<meta><m n=":has_untyped"/></meta>
		</arrayKeys>
		<iterator public="1" get="inline" set="null" line="124">
			<f a=""><t path="Iterator"><c path="haxe.ds.StringMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="128">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" get="inline" set="null" line="48">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<typedef path="haxe.ds._Vector.VectorData" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector"><c path="Array"><c path="haxe.ds._Vector.VectorData.T"/></c></typedef>
	<abstract path="haxe.ds.Vector" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/Vector.hx">
		<this><t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t></this>
		<haxe_doc>A Vector is a storage of fixed size. It can be faster than Array on some
	targets, and is never slower.

	@see https://haxe.org/manual/std-vector.html</haxe_doc>
		<impl><class path="haxe.ds._Vector.Vector_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector">
	<_new public="1" get="inline" set="null" line="60" static="1">
		<f a="length">
			<x path="Int"/>
			<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Creates a new Vector of length `length`.

		Initially `this` Vector contains `length` neutral elements:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
	</_new>
	<get public="1" get="inline" set="null" line="89" static="1">
		<f a="this:index">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
			<c path="haxe.ds.Vector.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
		<haxe_doc>Returns the value at index `index`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
	</get>
	<set public="1" get="inline" set="null" line="105" static="1">
		<f a="this:index:val">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
			<c path="haxe.ds.Vector.T"/>
			<c path="haxe.ds.Vector.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>[]</e></m>
		</meta>
		<haxe_doc>Sets the value at index `index` to `val`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
	</set>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the length of `this` Vector.</haxe_doc>
	</length>
	<get_length get="inline" set="null" line="120" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":impl"/>
		</meta>
	</get_length>
	<blit public="1" params="T" set="method" line="141" static="1">
		<f a="src:srcPos:dest:destPos:len">
			<x path="haxe.ds.Vector"><c path="blit.T"/></x>
			<x path="Int"/>
			<x path="haxe.ds.Vector"><c path="blit.T"/></x>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<haxe_doc>Copies `length` of elements from `src` Vector, beginning at `srcPos` to
		`dest` Vector, beginning at `destPos`

		The results are unspecified if `length` results in out-of-bounds access,
		or if `src` or `dest` are null</haxe_doc>
	</blit>
	<toArray public="1" get="inline" set="null" line="181" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<c path="Array"><c path="haxe.ds.Vector.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Array, copy the content from the Vector to it, and returns it.</haxe_doc>
	</toArray>
	<toData public="1" get="inline" set="null" line="206" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Extracts the data of `this` Vector.

		This returns the internal representation type.</haxe_doc>
	</toData>
	<fromData public="1" params="T" get="inline" set="null" line="216" static="1">
		<f a="data">
			<t path="haxe.ds._Vector.VectorData"><c path="fromData.T"/></t>
			<x path="haxe.ds.Vector"><c path="fromData.T"/></x>
		</f>
		<haxe_doc>Initializes a new Vector from `data`.

		Since `data` is the internal representation of Vector, this is a no-op.

		If `data` is null, the corresponding Vector is also `null`.</haxe_doc>
	</fromData>
	<fromArrayCopy public="1" params="T" get="inline" set="null" line="231" static="1">
		<f a="array">
			<c path="Array"><c path="fromArrayCopy.T"/></c>
			<x path="haxe.ds.Vector"><c path="fromArrayCopy.T"/></x>
		</f>
		<haxe_doc>Creates a new Vector by copying the elements of `array`.

		This always creates a copy, even on platforms where the internal
		representation is Array.

		The elements are not copied and retain their identity, so
		`a[i] == Vector.fromArrayCopy(a).get(i)` is true for any valid i.

		If `array` is null, the result is unspecified.</haxe_doc>
	</fromArrayCopy>
	<copy public="1" params="T" get="inline" set="null" line="260" static="1">
		<f a="this">
			<t path="haxe.ds._Vector.VectorData"><c path="copy.T"/></t>
			<x path="haxe.ds.Vector"><c path="copy.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a shallow copy of `this` Vector.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
	</copy>
	<join public="1" params="T" get="inline" set="null" line="279" static="1">
		<f a="this:sep">
			<t path="haxe.ds._Vector.VectorData"><c path="join.T"/></t>
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a string representation of `this` Vector, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` Vector has length 0, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
	</join>
	<map public="1" params="S" get="inline" set="null" line="303" static="1">
		<f a="this:f">
			<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			<f a="">
				<c path="haxe.ds.Vector.T"/>
				<c path="map.S"/>
			</f>
			<x path="haxe.ds.Vector"><c path="map.S"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Vector by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
	</map>
	<sort public="1" params="T" get="inline" set="null" line="327" static="1">
		<f a="this:f">
			<t path="haxe.ds._Vector.VectorData"><c path="sort.T"/></t>
			<f a=":">
				<c path="sort.T"/>
				<c path="sort.T"/>
				<x path="Int"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Sorts `this` Vector according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Vector in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained.

		If `f` is null, the result is unspecified.]]></haxe_doc>
	</sort>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.ds._Vector.Vector_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector">
		<_new public="1" get="inline" set="null" line="60" static="1">
			<f a="length">
				<x path="Int"/>
				<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Creates a new Vector of length `length`.

		Initially `this` Vector contains `length` neutral elements:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
		</_new>
		<get public="1" get="inline" set="null" line="89" static="1">
			<f a="this:index">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
				<c path="haxe.ds.Vector.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
			<haxe_doc>Returns the value at index `index`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="105" static="1">
			<f a="this:index:val">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
				<c path="haxe.ds.Vector.T"/>
				<c path="haxe.ds.Vector.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>[]</e></m>
			</meta>
			<haxe_doc>Sets the value at index `index` to `val`.

		If `index` is negative or exceeds `this.length`, the result is
		unspecified.</haxe_doc>
		</set>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the length of `this` Vector.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="120" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":impl"/>
			</meta>
		</get_length>
		<blit public="1" params="T" set="method" line="141" static="1">
			<f a="src:srcPos:dest:destPos:len">
				<x path="haxe.ds.Vector"><c path="blit.T"/></x>
				<x path="Int"/>
				<x path="haxe.ds.Vector"><c path="blit.T"/></x>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies `length` of elements from `src` Vector, beginning at `srcPos` to
		`dest` Vector, beginning at `destPos`

		The results are unspecified if `length` results in out-of-bounds access,
		or if `src` or `dest` are null</haxe_doc>
		</blit>
		<toArray public="1" get="inline" set="null" line="181" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<c path="Array"><c path="haxe.ds.Vector.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Array, copy the content from the Vector to it, and returns it.</haxe_doc>
		</toArray>
		<toData public="1" get="inline" set="null" line="206" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Extracts the data of `this` Vector.

		This returns the internal representation type.</haxe_doc>
		</toData>
		<fromData public="1" params="T" get="inline" set="null" line="216" static="1">
			<f a="data">
				<t path="haxe.ds._Vector.VectorData"><c path="fromData.T"/></t>
				<x path="haxe.ds.Vector"><c path="fromData.T"/></x>
			</f>
			<haxe_doc>Initializes a new Vector from `data`.

		Since `data` is the internal representation of Vector, this is a no-op.

		If `data` is null, the corresponding Vector is also `null`.</haxe_doc>
		</fromData>
		<fromArrayCopy public="1" params="T" get="inline" set="null" line="231" static="1">
			<f a="array">
				<c path="Array"><c path="fromArrayCopy.T"/></c>
				<x path="haxe.ds.Vector"><c path="fromArrayCopy.T"/></x>
			</f>
			<haxe_doc>Creates a new Vector by copying the elements of `array`.

		This always creates a copy, even on platforms where the internal
		representation is Array.

		The elements are not copied and retain their identity, so
		`a[i] == Vector.fromArrayCopy(a).get(i)` is true for any valid i.

		If `array` is null, the result is unspecified.</haxe_doc>
		</fromArrayCopy>
		<copy public="1" params="T" get="inline" set="null" line="260" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="copy.T"/></t>
				<x path="haxe.ds.Vector"><c path="copy.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a shallow copy of `this` Vector.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<join public="1" params="T" get="inline" set="null" line="279" static="1">
			<f a="this:sep">
				<t path="haxe.ds._Vector.VectorData"><c path="join.T"/></t>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a string representation of `this` Vector, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` Vector has length 0, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<map public="1" params="S" get="inline" set="null" line="303" static="1">
			<f a="this:f">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<f a="">
					<c path="haxe.ds.Vector.T"/>
					<c path="map.S"/>
				</f>
				<x path="haxe.ds.Vector"><c path="map.S"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Vector by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<sort public="1" params="T" get="inline" set="null" line="327" static="1">
			<f a="this:f">
				<t path="haxe.ds._Vector.VectorData"><c path="sort.T"/></t>
				<f a=":">
					<c path="sort.T"/>
					<c path="sort.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Sorts `this` Vector according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Vector in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<meta><m n=":final"/></meta>
	</class>
	<class path="haxe.ds.WeakMap" params="K:V" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/ds/WeakMap.hx">
		<implements path="haxe.IMap">
			<c path="haxe.ds.WeakMap.K"/>
			<c path="haxe.ds.WeakMap.V"/>
		</implements>
		<set public="1" set="method" line="46">
			<f a="key:value">
				<c path="haxe.ds.WeakMap.K"/>
				<c path="haxe.ds.WeakMap.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method" line="52">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<t path="Null"><c path="haxe.ds.WeakMap.V"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method" line="59">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="66">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="73">
			<f a=""><t path="Iterator"><c path="haxe.ds.WeakMap.K"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="80">
			<f a=""><t path="Iterator"><c path="haxe.ds.WeakMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="87">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" set="method" line="39">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new WeakMap.</haxe_doc>
		</new>
		<haxe_doc>WeakMap allows mapping of object keys to arbitrary values.

	The keys are considered to be weak references on static targets.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
	</class>
	<abstract path="haxe.extern.AsVar" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/extern/AsVar.hx">
		<from><icast><c path="haxe.extern.AsVar.T"/></icast></from>
		<this><c path="haxe.extern.AsVar.T"/></this>
		<to><icast><c path="haxe.extern.AsVar.T"/></icast></to>
		<haxe_doc>If this type is used as an argument type, the compiler ensures that
	argument expressions are bound to a local variable.</haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":analyzer"><e>as_var</e></m>
		</meta>
		<impl><class path="haxe.extern._AsVar.AsVar_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/extern/AsVar.hx" private="1" module="haxe.extern.AsVar" extern="1"><meta><m n=":final"/></meta></class></impl>
	</abstract>
	<class path="haxe.extern._AsVar.AsVar_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/extern/AsVar.hx" private="1" module="haxe.extern.AsVar" extern="1"><meta><m n=":final"/></meta></class>
	<abstract path="haxe.extern.EitherType" params="T1:T2" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/extern/EitherType.hx">
		<from>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
		</from>
		<this><d/></this>
		<to>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
		</to>
		<haxe_doc><![CDATA[An abstract type allowing values to be either of `T1` or `T2` type.
	Supports implicit casts from/to either types.

	It is useful for interfacing with external code on dynamic platforms
	such as JavaScript or Python.

	Otherwise, use of this type is discouraged.
	
	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<impl><class path="haxe.extern._EitherType.EitherType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/extern/EitherType.hx" private="1" module="haxe.extern.EitherType" extern="1"><meta><m n=":final"/></meta></class></impl>
	</abstract>
	<class path="haxe.extern._EitherType.EitherType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/extern/EitherType.hx" private="1" module="haxe.extern.EitherType" extern="1"><meta><m n=":final"/></meta></class>
	<abstract path="haxe.extern.Rest" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/extern/Rest.hx">
		<this><c path="Array"><c path="haxe.extern.Rest.T"/></c></this>
		<haxe_doc><![CDATA[A special abstract type that represents "rest" function argument.

	Should be used as a type for the last argument of an extern method,
	representing that arbitrary number of arguments of given type can be
	passed to that method.
	
	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<impl><class path="haxe.extern._Rest.Rest_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/extern/Rest.hx" private="1" module="haxe.extern.Rest" extern="1"><meta><m n=":final"/></meta></class></impl>
	</abstract>
	<class path="haxe.extern._Rest.Rest_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/extern/Rest.hx" private="1" module="haxe.extern.Rest" extern="1"><meta><m n=":final"/></meta></class>
	<class path="haxe.format.JsonParser" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/format/JsonParser.hx">
		<parse public="1" get="inline" set="null" line="44" static="1">
			<f a="str">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Parses given JSON-encoded `str` and returns the resulting object.

		JSON objects are parsed into anonymous structures and JSON arrays
		are parsed into `Array<Dynamic>`.

		If given `str` is not valid JSON, an exception will be thrown.

		If `str` is null, the result is unspecified.]]></haxe_doc>
		</parse>
		<str><c path="String"/></str>
		<pos><x path="Int"/></pos>
		<parseRec set="method" line="56"><f a=""><d/></f></parseRec>
		<parseString set="method" line="138"><f a=""><c path="String"/></f></parseString>
		<parseNumber get="inline" set="null" line="207"><f a="c">
	<x path="Int"/>
	<d/>
</f></parseNumber>
		<nextChar get="inline" set="null" line="245"><f a=""><x path="Int"/></f></nextChar>
		<invalidChar set="method" line="249"><f a=""><x path="Void"/></f></invalidChar>
		<invalidNumber set="method" line="254"><f a="start">
	<x path="Int"/>
	<x path="Void"/>
</f></invalidNumber>
		<new set="method" line="51"><f a="str">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An implementation of JSON parser in Haxe.

	This class is used by `haxe.Json` when native JSON implementation
	is not available.

	@see https://haxe.org/manual/std-Json-parsing.html</haxe_doc>
	</class>
	<class path="haxe.format.JsonPrinter" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/format/JsonPrinter.hx">
		<print public="1" set="method" line="44" static="1">
			<f a="o:?replacer:?space">
				<d/>
				<f a=":">
					<d/>
					<d/>
					<d/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `o`'s value and returns the resulting JSON string.

		If `replacer` is given and is not null, it is used to retrieve
		actual object to be encoded. The `replacer` function takes two parameters,
		the key and the value being encoded. Initial key value is an empty string.

		If `space` is given and is not null, the result will be pretty-printed.
		Successive levels will be indented by this string.</haxe_doc>
		</print>
		<buf><c path="StringBuf"/></buf>
		<replacer><f a=":">
	<d/>
	<d/>
	<d/>
</f></replacer>
		<indent><c path="String"/></indent>
		<pretty><x path="Bool"/></pretty>
		<nind><x path="Int"/></nind>
		<ipad get="inline" set="null" line="71"><f a=""><x path="Void"/></f></ipad>
		<newl get="inline" set="null" line="75"><f a=""><x path="Void"/></f></newl>
		<write set="method" line="79"><f a="k:v">
	<d/>
	<d/>
	<x path="Void"/>
</f></write>
		<addChar get="inline" set="null" line="140">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</addChar>
		<add get="inline" set="null" line="148">
			<f a="v">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</add>
		<objString get="inline" set="null" line="163"><f a="v">
	<d/>
	<x path="Void"/>
</f></objString>
		<fieldsString set="method" line="167"><f a="v:fields">
	<d/>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></fieldsString>
		<quote set="method" line="193"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></quote>
		<new set="method" line="56"><f a="replacer:space">
	<f a=":">
		<d/>
		<d/>
		<d/>
	</f>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An implementation of JSON printer in Haxe.

	This class is used by `haxe.Json` when native JSON implementation
	is not available.

	@see https://haxe.org/manual/std-Json-encoding.html</haxe_doc>
	</class>
	<typedef path="haxe.io.ArrayBufferViewData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/io/ArrayBufferView.hx" module="haxe.io.ArrayBufferView"><c path="js.html.ArrayBufferView"/></typedef>
	<abstract path="haxe.io.ArrayBufferView" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/io/ArrayBufferView.hx">
		<this><t path="haxe.io.ArrayBufferViewData"/></this>
		<impl><class path="haxe.io._ArrayBufferView.ArrayBufferView_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/io/ArrayBufferView.hx" private="1" module="haxe.io.ArrayBufferView">
	<EMULATED public="1" get="accessor" set="null" static="1"><x path="Bool"/></EMULATED>
	<get_EMULATED get="inline" set="null" line="29" static="1"><f a=""><x path="Bool"/></f></get_EMULATED>
	<buffer public="1" get="accessor" set="null" static="1">
		<c path="haxe.io.Bytes"/>
		<meta><m n=":impl"/></meta>
	</buffer>
	<byteOffset public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</byteOffset>
	<byteLength public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</byteLength>
	<_new public="1" get="inline" set="null" line="41" static="1">
		<f a="size">
			<x path="Int"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_byteOffset get="inline" set="null" line="45" static="1">
		<f a="this">
			<t path="haxe.io.ArrayBufferViewData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_byteOffset>
	<get_byteLength get="inline" set="null" line="46" static="1">
		<f a="this">
			<t path="haxe.io.ArrayBufferViewData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_byteLength>
	<get_buffer get="inline" set="null" line="47" static="1">
		<f a="this">
			<t path="haxe.io.ArrayBufferViewData"/>
			<c path="haxe.io.Bytes"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_buffer>
	<sub public="1" get="inline" set="null" line="51" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.ArrayBufferViewData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<getData public="1" get="inline" set="null" line="55" static="1">
		<f a="this">
			<t path="haxe.io.ArrayBufferViewData"/>
			<t path="haxe.io.ArrayBufferViewData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" get="inline" set="null" line="59" static="1"><f a="a">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></fromData>
	<meta><m n=":final"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io._ArrayBufferView.ArrayBufferView_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/io/ArrayBufferView.hx" private="1" module="haxe.io.ArrayBufferView">
		<EMULATED public="1" get="accessor" set="null" static="1"><x path="Bool"/></EMULATED>
		<get_EMULATED get="inline" set="null" line="29" static="1"><f a=""><x path="Bool"/></f></get_EMULATED>
		<buffer public="1" get="accessor" set="null" static="1">
			<c path="haxe.io.Bytes"/>
			<meta><m n=":impl"/></meta>
		</buffer>
		<byteOffset public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</byteOffset>
		<byteLength public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</byteLength>
		<_new public="1" get="inline" set="null" line="41" static="1">
			<f a="size">
				<x path="Int"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_byteOffset get="inline" set="null" line="45" static="1">
			<f a="this">
				<t path="haxe.io.ArrayBufferViewData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_byteOffset>
		<get_byteLength get="inline" set="null" line="46" static="1">
			<f a="this">
				<t path="haxe.io.ArrayBufferViewData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_byteLength>
		<get_buffer get="inline" set="null" line="47" static="1">
			<f a="this">
				<t path="haxe.io.ArrayBufferViewData"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_buffer>
		<sub public="1" get="inline" set="null" line="51" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.ArrayBufferViewData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<getData public="1" get="inline" set="null" line="55" static="1">
			<f a="this">
				<t path="haxe.io.ArrayBufferViewData"/>
				<t path="haxe.io.ArrayBufferViewData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" get="inline" set="null" line="59" static="1"><f a="a">
	<t path="haxe.io.ArrayBufferViewData"/>
	<x path="haxe.io.ArrayBufferView"/>
</f></fromData>
		<meta><m n=":final"/></meta>
	</class>
	<class path="haxe.io.Input" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Input.hx">
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when reading numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<readByte public="1" set="method" line="49">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read and return one byte.</haxe_doc>
		</readByte>
		<readBytes public="1" set="method" line="64">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Returns the actual length of read data that can be smaller than `len`.

		See `readFullBytes` that tries to read the exact amount of specified bytes.</haxe_doc>
		</readBytes>
		<close public="1" set="method" line="92">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the input source.

		Behaviour while reading after calling this method is unspecified.</haxe_doc>
		</close>
		<set_bigEndian set="method" line="95"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<readAll public="1" set="method" line="108">
			<f a="?bufsize">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Read and return all available data.

		The `bufsize` optional argument specifies the size of chunks by
		which data is read. Its default value is target-specific.</haxe_doc>
		</readAll>
		<readFullBytes public="1" set="method" line="134">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Unlike `readBytes`, this method tries to read the exact `len` amount of bytes.</haxe_doc>
		</readFullBytes>
		<read public="1" set="method" line="147">
			<f a="nbytes">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Read and return `nbytes` bytes.</haxe_doc>
		</read>
		<readUntil public="1" set="method" line="164">
			<f a="end">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Read a string until a character code specified by `end` is occurred.

		The final character is not included in the resulting string.</haxe_doc>
		</readUntil>
		<readLine public="1" set="method" line="177">
			<f a=""><c path="String"/></f>
			<haxe_doc>Read a line of text separated by CR and/or LF bytes.

		The CR/LF characters are not included in the resulting string.</haxe_doc>
		</readLine>
		<readFloat public="1" set="method" line="199">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Read a 32-bit floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readFloat>
		<readDouble public="1" set="method" line="208">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Read a 64-bit double-precision floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readDouble>
		<readInt8 public="1" set="method" line="217">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 8-bit signed integer.</haxe_doc>
		</readInt8>
		<readInt16 public="1" set="method" line="229">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 16-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt16>
		<readUInt16 public="1" set="method" line="243">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 16-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readUInt16>
		<readInt24 public="1" set="method" line="254">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 24-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt24>
		<readUInt24 public="1" set="method" line="269">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 24-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readUInt24>
		<readInt32 public="1" set="method" line="281">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt32>
		<readString public="1" set="method" line="303">
			<f a="len">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Read and `len` bytes as a string.</haxe_doc>
		</readString>
		<getDoubleSig set="method" line="322"><f a="bytes">
	<c path="Array"><x path="Int"/></c>
	<x path="Float"/>
</f></getDoubleSig>
		<haxe_doc>An Input is an abstract reader. See other classes in the `haxe.io` package
	for several possible implementations.

	All functions which read data throw `Eof` when the end of the stream
	is reached.</haxe_doc>
	</class>
	<class path="haxe.io.BufferInput" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/BufferInput.hx">
		<extends path="haxe.io.Input"/>
		<i public="1"><c path="haxe.io.Input"/></i>
		<buf public="1"><c path="haxe.io.Bytes"/></buf>
		<available public="1"><x path="Int"/></available>
		<pos public="1"><x path="Int"/></pos>
		<refill public="1" set="method" line="38"><f a=""><x path="Void"/></f></refill>
		<readByte public="1" set="method" line="46" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="54" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="31">
			<f a="i:buf:?pos:?available" v="::0:0">
				<c path="haxe.io.Input"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ available : 0, pos : 0 }</e></m></meta>
		</new>
	</class>
	<class path="haxe.io.BytesBuffer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/BytesBuffer.hx">
		<b><c path="Array"><x path="Int"/></c></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the buffer in bytes.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="64"><f a=""><x path="Int"/></f></get_length>
		<addByte public="1" get="inline" set="null" line="76"><f a="byte">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<add public="1" get="inline" set="null" line="94"><f a="src">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></add>
		<addString public="1" get="inline" set="null" line="118"><f a="v">
	<c path="String"/>
	<x path="Void"/>
</f></addString>
		<addInt32 public="1" set="method" line="128"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></addInt32>
		<addInt64 public="1" set="method" line="139"><f a="v">
	<x path="haxe.Int64"/>
	<x path="Void"/>
</f></addInt64>
		<addFloat public="1" get="inline" set="null" line="144"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></addFloat>
		<addDouble public="1" get="inline" set="null" line="152"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></addDouble>
		<addBytes public="1" get="inline" set="null" line="160"><f a="src:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<getBytes public="1" set="method" line="191">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns either a copy or a reference of the current bytes.
		Once called, the buffer can no longer be used.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="45"><f a=""><x path="Void"/></f></new>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/BytesData.hx"><c path="js.html.ArrayBuffer"/></typedef>
	<class path="haxe.io.BytesInput" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/BytesInput.hx">
		<extends path="haxe.io.Input"/>
		<b><c path="js.html.Uint8Array"/></b>
		<pos><x path="Int"/></pos>
		<len><x path="Int"/></len>
		<totlen><x path="Int"/></totlen>
		<position public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<haxe_doc>The current position in the stream in bytes.</haxe_doc>
		</position>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the stream in bytes.</haxe_doc>
		</length>
		<get_position get="inline" set="null" line="63"><f a=""><x path="Int"/></f></get_position>
		<get_length get="inline" set="null" line="71"><f a=""><x path="Int"/></f></get_length>
		<set_position set="method" line="79"><f a="p">
	<x path="Int"/>
	<x path="Int"/>
</f></set_position>
		<readByte public="1" set="method" line="90" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="111" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="38"><f a="b:?pos:?len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.io.Output" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Output.hx">
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when writing numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<writeByte public="1" set="method" line="46">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write one byte.</haxe_doc>
		</writeByte>
		<writeBytes public="1" set="method" line="57">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Returns the actual length of written data that can differ from `len`.

		See `writeFullBytes` that tries to write the exact amount of specified bytes.</haxe_doc>
		</writeBytes>
		<flush public="1" set="method" line="85">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Flush any buffered data.</haxe_doc>
		</flush>
		<close public="1" set="method" line="93">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the output.

		Behaviour while writing after calling this method is unspecified.</haxe_doc>
		</close>
		<set_bigEndian set="method" line="96"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<write public="1" set="method" line="106">
			<f a="s">
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write all bytes stored in `s`.</haxe_doc>
		</write>
		<writeFullBytes public="1" set="method" line="122">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Unlike `writeBytes`, this method tries to write the exact `len` amount of bytes.</haxe_doc>
		</writeFullBytes>
		<writeFloat public="1" set="method" line="135">
			<f a="x">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeFloat>
		<writeDouble public="1" set="method" line="144">
			<f a="x">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 64-bit double-precision floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeDouble>
		<writeInt8 public="1" set="method" line="158">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 8-bit signed integer.</haxe_doc>
		</writeInt8>
		<writeInt16 public="1" set="method" line="169">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 16-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt16>
		<writeUInt16 public="1" set="method" line="179">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 16-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeUInt16>
		<writeInt24 public="1" set="method" line="195">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 24-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt24>
		<writeUInt24 public="1" set="method" line="205">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 24-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeUInt24>
		<writeInt32 public="1" set="method" line="223">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt32>
		<prepare public="1" set="method" line="244">
			<f a="nbytes">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inform that we are about to write at least `nbytes` bytes.

		The underlying implementation can allocate proper working space depending
		on this information, or simply ignore it. This is not a mandatory call
		but a tip and is only used in some specific cases.</haxe_doc>
		</prepare>
		<writeInput public="1" set="method" line="253">
			<f a="i:?bufsize">
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Read all available data from `i` and write it.

		The `bufsize` optional argument specifies the size of chunks by
		which data is read and written. Its default value is 4096.</haxe_doc>
		</writeInput>
		<writeString public="1" set="method" line="278">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `s` string.</haxe_doc>
		</writeString>
		<haxe_doc>An Output is an abstract write. A specific output implementation will only
	have to override the `writeByte` and maybe the `write`, `flush` and `close`
	methods. See `File.write` and `String.write` for two ways of creating an
	Output.</haxe_doc>
	</class>
	<class path="haxe.io.BytesOutput" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/BytesOutput.hx">
		<extends path="haxe.io.Output"/>
		<b><c path="haxe.io.BytesBuffer"/></b>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the stream in bytes.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="47"><f a=""><x path="Int"/></f></get_length>
		<writeByte public="1" set="method" line="51" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="59" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<getBytes public="1" set="method" line="131">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>Returns the `Bytes` of this output.

		This function should not be called more than once on a given
		`BytesOutput` instance.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="35"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.io.Eof" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Eof.hx">
		<toString set="method" line="30">
			<f a=""><c path="String"/></f>
			<meta><m n=":keep"/></meta>
		</toString>
		<new public="1" set="method" line="28"><f a=""><x path="Void"/></f></new>
		<haxe_doc>This exception is raised when reading while data is no longer available in the `haxe.io.Input`.</haxe_doc>
	</class>
	<enum path="haxe.io.Error" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
	</enum>
	<class path="haxe.io.FPHelper" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/FPHelper.hx">
		<i64tmp expr="Int64.ofInt(0)" line="35" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":value"><e>Int64.ofInt(0)</e></m></meta>
		</i64tmp>
		<LN2 get="inline" set="null" expr="0.6931471805599453" line="58" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.6931471805599453</e></m></meta>
		</LN2>
		<i32ToFloat public="1" set="method" line="62" static="1"><f a="i">
	<x path="Int"/>
	<x path="Float"/>
</f></i32ToFloat>
		<floatToI32 public="1" set="method" line="109" static="1"><f a="f">
	<x path="Float"/>
	<x path="Int"/>
</f></floatToI32>
		<i64ToDouble public="1" set="method" line="153" static="1"><f a="low:high">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></i64ToDouble>
		<doubleToI64 public="1" set="method" line="219" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Returns an Int64 representing the bytes representation of the double precision IEEE float value.
		WARNING : for performance reason, the same Int64 value might be reused every time. Copy its low/high values before calling again.
		We still ensure that this is safe to use in a multithread environment</haxe_doc>
		</doubleToI64>
		<haxe_doc>Helper that converts between floating point and binary representation.
	Always works in low-endian encoding.</haxe_doc>
	</class>
	<typedef path="haxe.io.Float32ArrayData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/io/Float32Array.hx" module="haxe.io.Float32Array"><c path="js.html.Float32Array"/></typedef>
	<abstract path="haxe.io.Float32Array" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/io/Float32Array.hx">
		<this><t path="haxe.io.Float32ArrayData"/></this>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe.io._Float32Array.Float32Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/io/Float32Array.hx" private="1" module="haxe.io.Float32Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="33" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="37" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_length get="inline" set="null" line="41" static="1">
		<f a="this">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="45" static="1">
		<f a="this">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="49" static="1">
		<f a="this:index">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="53" static="1">
		<f a="this:index:value">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="57" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="61" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.Float32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="65" static="1">
		<f a="this">
			<t path="haxe.io.Float32ArrayData"/>
			<t path="haxe.io.Float32ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" get="inline" set="null" line="69" static="1"><f a="d">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="haxe.io.Float32Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="73" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="84" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float32Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
	<meta>
		<m n=":final"/>
		<m n=":coreApi"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.io._Float32Array.Float32Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/io/Float32Array.hx" private="1" module="haxe.io.Float32Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="37" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_length get="inline" set="null" line="41" static="1">
			<f a="this">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="45" static="1">
			<f a="this">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="49" static="1">
			<f a="this:index">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="53" static="1">
			<f a="this:index:value">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="57" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="61" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.Float32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="65" static="1">
			<f a="this">
				<t path="haxe.io.Float32ArrayData"/>
				<t path="haxe.io.Float32ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" get="inline" set="null" line="69" static="1"><f a="d">
	<t path="haxe.io.Float32ArrayData"/>
	<x path="haxe.io.Float32Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="73" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="84" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float32Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
		<meta>
			<m n=":final"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="haxe.io.Float64ArrayData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/io/Float64Array.hx" module="haxe.io.Float64Array"><c path="js.html.Float64Array"/></typedef>
	<abstract path="haxe.io.Float64Array" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/io/Float64Array.hx">
		<this><t path="haxe.io.Float64ArrayData"/></this>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe.io._Float64Array.Float64Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/io/Float64Array.hx" private="1" module="haxe.io.Float64Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="33" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="37" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_length get="inline" set="null" line="41" static="1">
		<f a="this">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="45" static="1">
		<f a="this">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="49" static="1">
		<f a="this:index">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="53" static="1">
		<f a="this:index:value">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="57" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="61" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.Float64ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="65" static="1">
		<f a="this">
			<t path="haxe.io.Float64ArrayData"/>
			<t path="haxe.io.Float64ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" get="inline" set="null" line="69" static="1"><f a="d">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="haxe.io.Float64Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="73" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="84" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Float64Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
	<meta>
		<m n=":final"/>
		<m n=":coreApi"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.io._Float64Array.Float64Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/io/Float64Array.hx" private="1" module="haxe.io.Float64Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="37" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_length get="inline" set="null" line="41" static="1">
			<f a="this">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="45" static="1">
			<f a="this">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="49" static="1">
			<f a="this:index">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="53" static="1">
			<f a="this:index:value">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="57" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="61" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.Float64ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="65" static="1">
			<f a="this">
				<t path="haxe.io.Float64ArrayData"/>
				<t path="haxe.io.Float64ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" get="inline" set="null" line="69" static="1"><f a="d">
	<t path="haxe.io.Float64ArrayData"/>
	<x path="haxe.io.Float64Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="73" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="84" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Float64Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
		<meta>
			<m n=":final"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="haxe.io.Int32ArrayData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/io/Int32Array.hx" module="haxe.io.Int32Array"><c path="js.html.Int32Array"/></typedef>
	<abstract path="haxe.io.Int32Array" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/io/Int32Array.hx">
		<this><t path="haxe.io.Int32ArrayData"/></this>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe.io._Int32Array.Int32Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/io/Int32Array.hx" private="1" module="haxe.io.Int32Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="29" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>1</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="33" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_length get="inline" set="null" line="37" static="1">
		<f a="this">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="41" static="1">
		<f a="this">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="45" static="1">
		<f a="this:index">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="49" static="1">
		<f a="this:index:value">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="53" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="57" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.Int32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="61" static="1">
		<f a="this">
			<t path="haxe.io.Int32ArrayData"/>
			<t path="haxe.io.Int32ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" get="inline" set="null" line="65" static="1"><f a="d">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="haxe.io.Int32Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="69" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="80" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.Int32Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
	<meta>
		<m n=":final"/>
		<m n=":coreApi"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.io._Int32Array.Int32Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/io/Int32Array.hx" private="1" module="haxe.io.Int32Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="33" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_length get="inline" set="null" line="37" static="1">
			<f a="this">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="41" static="1">
			<f a="this">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="45" static="1">
			<f a="this:index">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="49" static="1">
			<f a="this:index:value">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="53" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="57" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.Int32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="61" static="1">
			<f a="this">
				<t path="haxe.io.Int32ArrayData"/>
				<t path="haxe.io.Int32ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" get="inline" set="null" line="65" static="1"><f a="d">
	<t path="haxe.io.Int32ArrayData"/>
	<x path="haxe.io.Int32Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="69" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="80" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.Int32Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
		<meta>
			<m n=":final"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.io.Path" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/Path.hx">
		<withoutExtension public="1" set="method" line="123" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String representation of `path` without the file extension.

		If `path` is null, the result is unspecified.</haxe_doc>
		</withoutExtension>
		<withoutDirectory public="1" set="method" line="134" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String representation of `path` without the directory.

		If `path` is null, the result is unspecified.</haxe_doc>
		</withoutDirectory>
		<directory public="1" set="method" line="147" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the directory of `path`.

		If the directory is null, the empty String `""` is returned.

		If `path` is null, the result is unspecified.</haxe_doc>
		</directory>
		<extension public="1" set="method" line="161" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the extension of `path`.

		If the extension is null, the empty String `""` is returned.

		If `path` is null, the result is unspecified.</haxe_doc>
		</extension>
		<withExtension public="1" set="method" line="175" static="1">
			<f a="path:ext">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String representation of `path` where the extension is `ext`.

		If `path` has no extension, `ext` is added as extension.

		If `path` or `ext` are null, the result is unspecified.</haxe_doc>
		</withExtension>
		<join public="1" set="method" line="189" static="1">
			<f a="paths">
				<c path="Array"><c path="String"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all paths in `paths` together.

		If `paths` is empty, the empty String `""` is returned. Otherwise the
		paths are joined with a slash between them.

		If `paths` is null, the result is unspecified.</haxe_doc>
		</join>
		<normalize public="1" set="method" line="210" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Normalize a given `path` (e.g. make '/usr/local/../lib' to '/usr/lib').

		Also replaces backslashes \ with slashes / and afterwards turns
		multiple slashes into a single one.

		If `path` is null, the result is unspecified.</haxe_doc>
		</normalize>
		<addTrailingSlash public="1" set="method" line="262" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Adds a trailing slash to `path`, if it does not have one already.

		If the last slash in `path` is a backslash, a backslash is appended to
		`path`.

		If the last slash in `path` is a slash, or if no slash is found, a slash
		is appended to `path`. In particular, this applies to the empty String
		`""`.

		If `path` is null, the result is unspecified.</haxe_doc>
		</addTrailingSlash>
		<removeTrailingSlashes public="1" set="method" line="287" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":require"><e><![CDATA[haxe_ver >= 3.1]]></e></m></meta>
			<haxe_doc>Removes trailing slashes from `path`.

		If `path` does not end with a `/` or `\`, `path` is returned unchanged.

		Otherwise the substring of `path` excluding the trailing slashes or
		backslashes is returned.

		If `path` is null, the result is unspecified.</haxe_doc>
		</removeTrailingSlashes>
		<isAbsolute public="1" set="method" line="301" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":require"><e><![CDATA[haxe_ver >= 3.2]]></e></m></meta>
			<haxe_doc>Returns true if the path is an absolute path, and false otherwise.</haxe_doc>
		</isAbsolute>
		<unescape set="method" line="308" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></unescape>
		<escape set="method" line="313" static="1">
			<f a="path:?allowSlashes" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ allowSlashes : false }</e></m></meta>
		</escape>
		<dir public="1">
			<c path="String"/>
			<haxe_doc>The directory.

		This is the leading part of the path that is not part of the file name
		and the extension.

		Does not end with a `/` or `\` separator.

		If the path has no directory, the value is null.</haxe_doc>
		</dir>
		<file public="1">
			<c path="String"/>
			<haxe_doc>The file name.

		This is the part of the part between the directory and the extension.

		If there is no file name, e.g. for ".htaccess" or "/dir/", the value
		is the empty String "".</haxe_doc>
		</file>
		<ext public="1">
			<c path="String"/>
			<haxe_doc>The file extension.

		It is separated from the file name by a dot. This dot is not part of
		the extension.

		If the path has no extension, the value is null.</haxe_doc>
		</ext>
		<backslash public="1">
			<x path="Bool"/>
			<haxe_doc>True if the last directory separator is a backslash, false otherwise.</haxe_doc>
		</backslash>
		<toString public="1" set="method" line="114">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of `this` path.

		If `this.backslash` is true, backslash is used as directory separator,
		otherwise slash is used. This only affects the separator between
		`this.dir` and `this.file`.

		If `this.directory` or `this.extension` is null, their representation
		is the empty String "".</haxe_doc>
		</toString>
		<new public="1" set="method" line="76">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Path instance by parsing `path`.

		Path information can be retrieved by accessing the dir, file and ext
		properties.</haxe_doc>
		</new>
		<haxe_doc>This class provides a convenient way of working with paths. It supports the
	common path formats:

	- directory1/directory2/filename.extension
	- directory1\directory2\filename.extension</haxe_doc>
	</class>
	<class path="haxe.io.StringInput" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/io/StringInput.hx">
		<extends path="haxe.io.BytesInput"/>
		<new public="1" set="method" line="26"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="haxe.io.UInt16ArrayData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/io/UInt16Array.hx" module="haxe.io.UInt16Array"><c path="js.html.Uint16Array"/></typedef>
	<abstract path="haxe.io.UInt16Array" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/io/UInt16Array.hx">
		<this><t path="haxe.io.UInt16ArrayData"/></this>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe.io._UInt16Array.UInt16Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/io/UInt16Array.hx" private="1" module="haxe.io.UInt16Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="29" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>2</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="33" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_length get="inline" set="null" line="37" static="1">
		<f a="this">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="41" static="1">
		<f a="this">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="45" static="1">
		<f a="this:index">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="49" static="1">
		<f a="this:index:value">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="53" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="57" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.UInt16ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="61" static="1">
		<f a="this">
			<t path="haxe.io.UInt16ArrayData"/>
			<t path="haxe.io.UInt16ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" get="inline" set="null" line="65" static="1"><f a="d">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="haxe.io.UInt16Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="69" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="80" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt16Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
	<meta>
		<m n=":final"/>
		<m n=":coreApi"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.io._UInt16Array.UInt16Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/io/UInt16Array.hx" private="1" module="haxe.io.UInt16Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="33" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_length get="inline" set="null" line="37" static="1">
			<f a="this">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="41" static="1">
			<f a="this">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="45" static="1">
			<f a="this:index">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="49" static="1">
			<f a="this:index:value">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="53" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="57" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.UInt16ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="61" static="1">
			<f a="this">
				<t path="haxe.io.UInt16ArrayData"/>
				<t path="haxe.io.UInt16ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" get="inline" set="null" line="65" static="1"><f a="d">
	<t path="haxe.io.UInt16ArrayData"/>
	<x path="haxe.io.UInt16Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="69" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="80" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt16Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
		<meta>
			<m n=":final"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="haxe.io.UInt32ArrayData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/io/UInt32Array.hx" module="haxe.io.UInt32Array"><c path="js.html.Uint32Array"/></typedef>
	<abstract path="haxe.io.UInt32Array" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/io/UInt32Array.hx">
		<this><t path="haxe.io.UInt32ArrayData"/></this>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe.io._UInt32Array.UInt32Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/io/UInt32Array.hx" private="1" module="haxe.io.UInt32Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="29" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>4</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="33" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_length get="inline" set="null" line="37" static="1">
		<f a="this">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="41" static="1">
		<f a="this">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="45" static="1">
		<f a="this:index">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="49" static="1">
		<f a="this:index:value">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="UInt"/>
			<x path="UInt"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="53" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="57" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.UInt32ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="61" static="1">
		<f a="this">
			<t path="haxe.io.UInt32ArrayData"/>
			<t path="haxe.io.UInt32ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" get="inline" set="null" line="65" static="1"><f a="d">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="haxe.io.UInt32Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="69" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="UInt"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="80" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt32Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
	<meta>
		<m n=":final"/>
		<m n=":coreApi"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.io._UInt32Array.UInt32Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/io/UInt32Array.hx" private="1" module="haxe.io.UInt32Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="33" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_length get="inline" set="null" line="37" static="1">
			<f a="this">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="41" static="1">
			<f a="this">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="45" static="1">
			<f a="this:index">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="49" static="1">
			<f a="this:index:value">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="53" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="57" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.UInt32ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="61" static="1">
			<f a="this">
				<t path="haxe.io.UInt32ArrayData"/>
				<t path="haxe.io.UInt32ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" get="inline" set="null" line="65" static="1"><f a="d">
	<t path="haxe.io.UInt32ArrayData"/>
	<x path="haxe.io.UInt32Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="69" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="UInt"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="80" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt32Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
		<meta>
			<m n=":final"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="haxe.io.UInt8ArrayData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/io/UInt8Array.hx" module="haxe.io.UInt8Array"><c path="js.html.Uint8Array"/></typedef>
	<abstract path="haxe.io.UInt8Array" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/io/UInt8Array.hx">
		<this><t path="haxe.io.UInt8ArrayData"/></this>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe.io._UInt8Array.UInt8Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/io/UInt8Array.hx" private="1" module="haxe.io.UInt8Array">
	<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="29" static="1">
		<x path="Int"/>
		<meta><m n=":value"><e>1</e></m></meta>
	</BYTES_PER_ELEMENT>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<_new public="1" get="inline" set="null" line="33" static="1">
		<f a="elements">
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_length get="inline" set="null" line="37" static="1">
		<f a="this">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_view public="1" get="inline" set="null" line="41" static="1">
		<f a="this">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="haxe.io.ArrayBufferView"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_view>
	<get public="1" get="inline" set="null" line="45" static="1">
		<f a="this:index">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="49" static="1">
		<f a="this:index:value">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<sub public="1" get="inline" set="null" line="53" static="1">
		<f a="this:begin:?length">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sub>
	<subarray public="1" get="inline" set="null" line="57" static="1">
		<f a="this:?begin:?end">
			<t path="haxe.io.UInt8ArrayData"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</subarray>
	<getData public="1" get="inline" set="null" line="61" static="1">
		<f a="this">
			<t path="haxe.io.UInt8ArrayData"/>
			<t path="haxe.io.UInt8ArrayData"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getData>
	<fromData public="1" get="inline" set="null" line="65" static="1"><f a="d">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="haxe.io.UInt8Array"/>
</f></fromData>
	<fromArray public="1" set="method" line="69" static="1">
		<f a="a:?pos:?length" v=":0:">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
	</fromArray>
	<fromBytes public="1" set="method" line="80" static="1">
		<f a="bytes:?bytePos:?length" v=":0:">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="haxe.io.UInt8Array"/>
		</f>
		<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
	</fromBytes>
	<meta>
		<m n=":final"/>
		<m n=":coreApi"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.io._UInt8Array.UInt8Array_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/_std/haxe/io/UInt8Array.hx" private="1" module="haxe.io.UInt8Array">
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<view public="1" get="accessor" set="null" static="1">
			<x path="haxe.io.ArrayBufferView"/>
			<meta><m n=":impl"/></meta>
		</view>
		<_new public="1" get="inline" set="null" line="33" static="1">
			<f a="elements">
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_length get="inline" set="null" line="37" static="1">
			<f a="this">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_view public="1" get="inline" set="null" line="41" static="1">
			<f a="this">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="haxe.io.ArrayBufferView"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_view>
		<get public="1" get="inline" set="null" line="45" static="1">
			<f a="this:index">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="49" static="1">
			<f a="this:index:value">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<sub public="1" get="inline" set="null" line="53" static="1">
			<f a="this:begin:?length">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sub>
		<subarray public="1" get="inline" set="null" line="57" static="1">
			<f a="this:?begin:?end">
				<t path="haxe.io.UInt8ArrayData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</subarray>
		<getData public="1" get="inline" set="null" line="61" static="1">
			<f a="this">
				<t path="haxe.io.UInt8ArrayData"/>
				<t path="haxe.io.UInt8ArrayData"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getData>
		<fromData public="1" get="inline" set="null" line="65" static="1"><f a="d">
	<t path="haxe.io.UInt8ArrayData"/>
	<x path="haxe.io.UInt8Array"/>
</f></fromData>
		<fromArray public="1" set="method" line="69" static="1">
			<f a="a:?pos:?length" v=":0:">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</fromArray>
		<fromBytes public="1" set="method" line="80" static="1">
			<f a="bytes:?bytePos:?length" v=":0:">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="haxe.io.UInt8Array"/>
			</f>
			<meta><m n=":value"><e>{ bytePos : 0 }</e></m></meta>
		</fromBytes>
		<meta>
			<m n=":final"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="haxe.macro.ModuleCheckPolicy" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/CompilationServer.hx" module="haxe.macro.CompilationServer">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.macro._CompilationServer.ModuleCheckPolicy_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/CompilationServer.hx" private="1" module="haxe.macro.CompilationServer" extern="1">
	<NoCheckFileTimeModification public="1" get="inline" set="null" expr="cast 0" line="10" static="1">
		<x path="haxe.macro.ModuleCheckPolicy"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Disables file modification checks, avoiding some filesystem operations.</haxe_doc>
	</NoCheckFileTimeModification>
	<CheckFileContentModification public="1" get="inline" set="null" expr="cast 1" line="16" static="1">
		<x path="haxe.macro.ModuleCheckPolicy"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>If a file is modified, also checks if its content changed. This check
		is not free, but useful when .hx files are auto-generated.</haxe_doc>
	</CheckFileContentModification>
	<NoCheckDependencies public="1" get="inline" set="null" expr="cast 2" line="21" static="1">
		<x path="haxe.macro.ModuleCheckPolicy"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Disables dependency checks of the module.</haxe_doc>
	</NoCheckDependencies>
	<NoCheckShadowing public="1" get="inline" set="null" expr="cast 3" line="28" static="1">
		<x path="haxe.macro.ModuleCheckPolicy"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Disables file shadowing checks. Shadowing can occur when a new file
		is added to a class-path that has higher priority than the class-path
		of the current module file.</haxe_doc>
	</NoCheckShadowing>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.macro._CompilationServer.ModuleCheckPolicy_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/CompilationServer.hx" private="1" module="haxe.macro.CompilationServer" extern="1">
		<NoCheckFileTimeModification public="1" get="inline" set="null" expr="cast 0" line="10" static="1">
			<x path="haxe.macro.ModuleCheckPolicy"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Disables file modification checks, avoiding some filesystem operations.</haxe_doc>
		</NoCheckFileTimeModification>
		<CheckFileContentModification public="1" get="inline" set="null" expr="cast 1" line="16" static="1">
			<x path="haxe.macro.ModuleCheckPolicy"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>If a file is modified, also checks if its content changed. This check
		is not free, but useful when .hx files are auto-generated.</haxe_doc>
		</CheckFileContentModification>
		<NoCheckDependencies public="1" get="inline" set="null" expr="cast 2" line="21" static="1">
			<x path="haxe.macro.ModuleCheckPolicy"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Disables dependency checks of the module.</haxe_doc>
		</NoCheckDependencies>
		<NoCheckShadowing public="1" get="inline" set="null" expr="cast 3" line="28" static="1">
			<x path="haxe.macro.ModuleCheckPolicy"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Disables file shadowing checks. Shadowing can occur when a new file
		is added to a class-path that has higher priority than the class-path
		of the current module file.</haxe_doc>
		</NoCheckShadowing>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="haxe.macro.ContextOptions" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/CompilationServer.hx" module="haxe.macro.CompilationServer">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.macro._CompilationServer.ContextOptions_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/CompilationServer.hx" private="1" module="haxe.macro.CompilationServer" extern="1">
	<NormalContext public="1" get="inline" set="null" expr="cast 0" line="35" static="1">
		<x path="haxe.macro.ContextOptions"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Affects only the normal context.</haxe_doc>
	</NormalContext>
	<MacroContext public="1" get="inline" set="null" expr="cast 1" line="40" static="1">
		<x path="haxe.macro.ContextOptions"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Affects only the macro context.</haxe_doc>
	</MacroContext>
	<NormalAndMacroContext public="1" get="inline" set="null" expr="cast 2" line="45" static="1">
		<x path="haxe.macro.ContextOptions"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Affects the normal and macro contexts.</haxe_doc>
	</NormalAndMacroContext>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.macro._CompilationServer.ContextOptions_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/CompilationServer.hx" private="1" module="haxe.macro.CompilationServer" extern="1">
		<NormalContext public="1" get="inline" set="null" expr="cast 0" line="35" static="1">
			<x path="haxe.macro.ContextOptions"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Affects only the normal context.</haxe_doc>
		</NormalContext>
		<MacroContext public="1" get="inline" set="null" expr="cast 1" line="40" static="1">
			<x path="haxe.macro.ContextOptions"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Affects only the macro context.</haxe_doc>
		</MacroContext>
		<NormalAndMacroContext public="1" get="inline" set="null" expr="cast 2" line="45" static="1">
			<x path="haxe.macro.ContextOptions"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Affects the normal and macro contexts.</haxe_doc>
		</NormalAndMacroContext>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="haxe.macro.CompilationServer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/CompilationServer.hx"><haxe_doc>This class provides some methods which can be invoked from command line using
	`--macro server.field(args)`.</haxe_doc></class>
	<class path="haxe.macro.Compiler" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Compiler.hx">
		<getDefine public="1" set="method" static="1">
			<f a="key">
				<d/>
				<d/>
			</f>
			<haxe_doc>A conditional compiler flag can be set command line using
		`-D key=value`.

		Returns the value of a compiler flag.

		If the compiler flag is defined but no value is set,
		`Compiler.getDefine` returns `"1"` (e.g. `-D key`).

		If the compiler flag is not defined, `Compiler.getDefine` returns
		`null`.

		@see https://haxe.org/manual/lf-condition-compilation.html</haxe_doc>
		</getDefine>
		<includeFile public="1" set="method" static="1">
			<f a="file:position">
				<d/>
				<d/>
				<d/>
			</f>
			<haxe_doc>Embed a JavaScript file at compile time (can be called by `--macro` or within an `__init__` method).</haxe_doc>
		</includeFile>
		<haxe_doc>All these methods can be called for compiler configuration macros.</haxe_doc>
	</class>
	<abstract path="haxe.macro.IncludePosition" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.macro._Compiler.IncludePosition_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Compiler.hx" private="1" module="haxe.macro.Compiler" extern="1">
	<Top public="1" get="inline" set="null" expr="cast &quot;top&quot;" line="440" static="1">
		<x path="haxe.macro.IncludePosition"/>
		<meta>
			<m n=":value"><e>cast "top"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Prepend the file content to the output file.</haxe_doc>
	</Top>
	<Closure public="1" get="inline" set="null" expr="cast &quot;closure&quot;" line="446" static="1">
		<x path="haxe.macro.IncludePosition"/>
		<meta>
			<m n=":value"><e>cast "closure"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Prepend the file content to the body of the top-level closure.

		Since the closure is in strict-mode, there may be run-time error if the input is not strict-mode-compatible.</haxe_doc>
	</Closure>
	<Inline public="1" get="inline" set="null" expr="cast &quot;inline&quot;" line="450" static="1">
		<x path="haxe.macro.IncludePosition"/>
		<meta>
			<m n=":value"><e>cast "inline"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>Directly inject the file content at the call site.</haxe_doc>
	</Inline>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.macro._Compiler.IncludePosition_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Compiler.hx" private="1" module="haxe.macro.Compiler" extern="1">
		<Top public="1" get="inline" set="null" expr="cast &quot;top&quot;" line="440" static="1">
			<x path="haxe.macro.IncludePosition"/>
			<meta>
				<m n=":value"><e>cast "top"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Prepend the file content to the output file.</haxe_doc>
		</Top>
		<Closure public="1" get="inline" set="null" expr="cast &quot;closure&quot;" line="446" static="1">
			<x path="haxe.macro.IncludePosition"/>
			<meta>
				<m n=":value"><e>cast "closure"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Prepend the file content to the body of the top-level closure.

		Since the closure is in strict-mode, there may be run-time error if the input is not strict-mode-compatible.</haxe_doc>
		</Closure>
		<Inline public="1" get="inline" set="null" expr="cast &quot;inline&quot;" line="450" static="1">
			<x path="haxe.macro.IncludePosition"/>
			<meta>
				<m n=":value"><e>cast "inline"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>Directly inject the file content at the call site.</haxe_doc>
		</Inline>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="haxe.macro.ComplexTypeTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/ComplexTypeTools.hx">
		<toString public="1" set="method" line="40" static="1">
			<f a="c">
				<e path="haxe.macro.ComplexType"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts type `c` to a human-readable `String` representation.

		The result is guaranteed to be valid Haxe code, but there may be
		differences from the original lexical syntax.</haxe_doc>
		</toString>
		<haxe_doc>This class provides some utility methods to work with AST-level types. It is
	best used through `using haxe.macro.ComplexTypeTools` syntax and then provides
	additional methods on `haxe.macro.ComplexType` instances.</haxe_doc>
	</class>
	<typedef path="haxe.macro.Position" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<min>
				<x path="Int"/>
				<haxe_doc>Position of the first character.</haxe_doc>
			</min>
			<max>
				<x path="Int"/>
				<haxe_doc>Position of the last character.</haxe_doc>
			</max>
			<file>
				<c path="String"/>
				<haxe_doc>Reference to the filename.</haxe_doc>
			</file>
		</a>
		<haxe_doc>Represents a position in a file.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.Constant" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<CInt a="v">
			<c path="String"/>
			<haxe_doc>Represents an integer literal.</haxe_doc>
		</CInt>
		<CFloat a="f">
			<c path="String"/>
			<haxe_doc>Represents a float literal.</haxe_doc>
		</CFloat>
		<CString a="s">
			<c path="String"/>
			<haxe_doc>Represents a string literal.</haxe_doc>
		</CString>
		<CIdent a="s">
			<c path="String"/>
			<haxe_doc>Represents an identifier.</haxe_doc>
		</CIdent>
		<CRegexp a="r:opt">
			<c path="String"/>
			<c path="String"/>
			<haxe_doc>Represents a regular expression literal.

		Example: `~/haxe/i`
		 * The first argument _haxe_ is a string with regular expression pattern.
		 * The second argument _i_ is a string with regular expression flags.

		@see https://haxe.org/manual/std-regex.html</haxe_doc>
		</CRegexp>
		<haxe_doc>Represents a constant.
	@see https://haxe.org/manual/expression-constants.html</haxe_doc>
	</enum>
	<enum path="haxe.macro.Binop" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpAdd><haxe_doc>`+`</haxe_doc></OpAdd>
		<OpMult><haxe_doc>`*`</haxe_doc></OpMult>
		<OpDiv><haxe_doc>`/`</haxe_doc></OpDiv>
		<OpSub><haxe_doc>`-`</haxe_doc></OpSub>
		<OpAssign><haxe_doc>`=`</haxe_doc></OpAssign>
		<OpEq><haxe_doc>`==`</haxe_doc></OpEq>
		<OpNotEq><haxe_doc>`!=`</haxe_doc></OpNotEq>
		<OpGt><haxe_doc><![CDATA[`>`]]></haxe_doc></OpGt>
		<OpGte><haxe_doc><![CDATA[`>=`]]></haxe_doc></OpGte>
		<OpLt><haxe_doc><![CDATA[`<`]]></haxe_doc></OpLt>
		<OpLte><haxe_doc><![CDATA[`<=`]]></haxe_doc></OpLte>
		<OpAnd><haxe_doc><![CDATA[`&`]]></haxe_doc></OpAnd>
		<OpOr><haxe_doc>`|`</haxe_doc></OpOr>
		<OpXor><haxe_doc>`^`</haxe_doc></OpXor>
		<OpBoolAnd><haxe_doc><![CDATA[`&&`]]></haxe_doc></OpBoolAnd>
		<OpBoolOr><haxe_doc>`||`</haxe_doc></OpBoolOr>
		<OpShl><haxe_doc><![CDATA[`<<`]]></haxe_doc></OpShl>
		<OpShr><haxe_doc><![CDATA[`>>`]]></haxe_doc></OpShr>
		<OpUShr><haxe_doc><![CDATA[`>>>`]]></haxe_doc></OpUShr>
		<OpMod><haxe_doc>`%`</haxe_doc></OpMod>
		<OpAssignOp a="op">
			<e path="haxe.macro.Binop"/>
			<haxe_doc><![CDATA[`+=`
		`-=`
		`/=`
		`*=`
		`<<=`
		`>>=`
		`>>>=`
		`|=`
		`&=`
		`^=`
		`%=`]]></haxe_doc>
		</OpAssignOp>
		<OpInterval><haxe_doc>`...`</haxe_doc></OpInterval>
		<OpArrow><haxe_doc><![CDATA[`=>`]]></haxe_doc></OpArrow>
		<haxe_doc>A binary operator.
	@see https://haxe.org/manual/types-numeric-operators.html</haxe_doc>
	</enum>
	<enum path="haxe.macro.Unop" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpIncrement><haxe_doc>`++`</haxe_doc></OpIncrement>
		<OpDecrement><haxe_doc>`--`</haxe_doc></OpDecrement>
		<OpNot><haxe_doc>`!`</haxe_doc></OpNot>
		<OpNeg><haxe_doc>`-`</haxe_doc></OpNeg>
		<OpNegBits><haxe_doc>`~`</haxe_doc></OpNegBits>
		<haxe_doc>A unary operator.
	@see https://haxe.org/manual/types-numeric-operators.html</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="haxe.macro.Expr" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.ExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a node in the AST.
	@see https://haxe.org/manual/macro-reification-expression.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<t path="haxe.macro.Expr"/>
		<haxe_doc>Represents a AST node identical to `Expr`, but it allows constraining the
	type of accepted expressions.
	@see https://haxe.org/manual/macro-ExprOf.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Case" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<values>
				<c path="Array"><t path="haxe.macro.Expr"/></c>
				<haxe_doc>The value expressions of the case.</haxe_doc>
			</values>
			<guard>
				<t path="Null"><t path="Null"><t path="haxe.macro.Expr"/></t></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional guard expressions of the case, if available.</haxe_doc>
			</guard>
			<expr>
				<t path="Null"><t path="haxe.macro.Expr"/></t>
				<haxe_doc>The expression of the case, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a switch case.
	@see https://haxe.org/manual/expression-switch.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Var" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<t path="Null"><e path="haxe.macro.ComplexType"/></t>
				<haxe_doc>The type-hint of the variable, if available.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<expr>
				<t path="Null"><t path="haxe.macro.Expr"/></t>
				<haxe_doc>The expression of the variable, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a variable in the AST.
	@see https://haxe.org/manual/expression-var.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Catch" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<e path="haxe.macro.ComplexType"/>
				<haxe_doc>The type of the catch.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the catch variable.</haxe_doc>
			</name>
			<expr>
				<t path="haxe.macro.Expr"/>
				<haxe_doc>The expression of the catch.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a catch in the AST.
	@https://haxe.org/manual/expression-try-catch.html</haxe_doc>
	</typedef>
	<enum path="haxe.macro.ExprDef" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<EConst a="c">
			<e path="haxe.macro.Constant"/>
			<haxe_doc>A constant.</haxe_doc>
		</EConst>
		<EArray a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Array access `e1[e2]`.</haxe_doc>
		</EArray>
		<EBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Binary operator `e1 op e2`.</haxe_doc>
		</EBinop>
		<EField a="e:field">
			<t path="haxe.macro.Expr"/>
			<c path="String"/>
			<haxe_doc>Field access on `e.field`.</haxe_doc>
		</EField>
		<EParenthesis a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Parentheses `(e)`.</haxe_doc>
		</EParenthesis>
		<EObjectDecl a="fields">
			<c path="Array"><a>
	<field><c path="String"/></field>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></c>
			<haxe_doc>An object declaration.</haxe_doc>
		</EObjectDecl>
		<EArrayDecl a="values">
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>An array declaration `[el]`.</haxe_doc>
		</EArrayDecl>
		<ECall a="e:params">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>A call `e(params)`.</haxe_doc>
		</ECall>
		<ENew a="t:params">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>A constructor call `new t(params)`.</haxe_doc>
		</ENew>
		<EUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<x path="Bool"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>An unary operator `op` on `e`:

		* e++ (op = OpIncrement, postFix = true)
		* e-- (op = OpDecrement, postFix = true)
		* ++e (op = OpIncrement, postFix = false)
		* --e (op = OpDecrement, postFix = false)
		* -e (op = OpNeg, postFix = false)
		* !e (op = OpNot, postFix = false)
		* ~e (op = OpNegBits, postFix = false)</haxe_doc>
		</EUnop>
		<EVars a="vars">
			<c path="Array"><t path="haxe.macro.Var"/></c>
			<haxe_doc>Variable declarations.</haxe_doc>
		</EVars>
		<EFunction a="name:f">
			<t path="Null"><c path="String"/></t>
			<t path="haxe.macro.Function"/>
			<haxe_doc>A function declaration.</haxe_doc>
		</EFunction>
		<EBlock a="exprs">
			<c path="Array"><t path="haxe.macro.Expr"/></c>
			<haxe_doc>A block of expressions `{exprs}`.</haxe_doc>
		</EBlock>
		<EFor a="it:expr">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `for` expression.</haxe_doc>
		</EFor>
		<EIn a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `(e1 in e2)` expression.</haxe_doc>
		</EIn>
		<EIf a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="Null"><t path="haxe.macro.Expr"/></t>
			<haxe_doc>An `if(econd) eif` or `if(econd) eif else eelse` expression.</haxe_doc>
		</EIf>
		<EWhile a="econd:e:normalWhile">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<x path="Bool"/>
			<haxe_doc>Represents a `while` expression.
		When `normalWhile` is `true` it is `while (...)`.
		When `normalWhile` is `false` it is `do {...} while (...)`.</haxe_doc>
		</EWhile>
		<ESwitch a="e:cases:edef">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Case"/></c>
			<t path="Null"><t path="haxe.macro.Expr"/></t>
			<haxe_doc>Represents a `switch` expression with related cases and an optional.
		`default` case if edef != null.</haxe_doc>
		</ESwitch>
		<ETry a="e:catches">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Catch"/></c>
			<haxe_doc>Represents a `try`-expression with related catches.</haxe_doc>
		</ETry>
		<EReturn a="?e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `return` or `return e` expression.</haxe_doc>
		</EReturn>
		<EBreak><haxe_doc>A `break` expression.</haxe_doc></EBreak>
		<EContinue><haxe_doc>A `continue` expression.</haxe_doc></EContinue>
		<EUntyped a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>An `untyped e` source code.</haxe_doc>
		</EUntyped>
		<EThrow a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `throw e` expression.</haxe_doc>
		</EThrow>
		<ECast a="e:t">
			<t path="haxe.macro.Expr"/>
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			<haxe_doc>A `cast e` or `cast (e, m)` expression.</haxe_doc>
		</ECast>
		<EDisplay a="e:isCall">
			<t path="haxe.macro.Expr"/>
			<x path="Bool"/>
			<haxe_doc>Internally used to provide completion.</haxe_doc>
		</EDisplay>
		<EDisplayNew a="t">
			<t path="haxe.macro.TypePath"/>
			<haxe_doc>Internally used to provide completion.</haxe_doc>
		</EDisplayNew>
		<ETernary a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `(econd) ? eif : eelse` expression.</haxe_doc>
		</ETernary>
		<ECheckType a="e:t">
			<t path="haxe.macro.Expr"/>
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>A `(e:t)` expression.</haxe_doc>
		</ECheckType>
		<EMeta a="s:e">
			<t path="haxe.macro.MetadataEntry"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A `@m e` expression.</haxe_doc>
		</EMeta>
		<haxe_doc>Represents the kind of a node in the AST.</haxe_doc>
	</enum>
	<enum path="haxe.macro.ComplexType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPath a="p">
			<t path="haxe.macro.TypePath"/>
			<haxe_doc>Represents the type path.</haxe_doc>
		</TPath>
		<TFunction a="args:ret">
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents a function type.
		@see https://haxe.org/manual/types-function.html</haxe_doc>
		</TFunction>
		<TAnonymous a="fields">
			<c path="Array"><t path="haxe.macro.Field"/></c>
			<haxe_doc>Represents an anonymous structure type.
		@see https://haxe.org/manual/types-anonymous-structure.html</haxe_doc>
		</TAnonymous>
		<TParent a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc><![CDATA[Represents parentheses around a type, e.g. the `(Int -> Void)` part in
		`(Int -> Void) -> String`.]]></haxe_doc>
		</TParent>
		<TExtend a="p:fields">
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<c path="Array"><t path="haxe.macro.Field"/></c>
			<haxe_doc><![CDATA[Represents typedef extensions `> Iterable<T>`.
		The array `p` holds the type paths to the given types.
		@see https://haxe.org/manual/type-system-extensions.html]]></haxe_doc>
		</TExtend>
		<TOptional a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents an optional type.</haxe_doc>
		</TOptional>
		<haxe_doc>Represents a type syntax in the AST.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypePath" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<sub>
				<t path="Null"><t path="Null"><c path="String"/></t></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sub is set on module sub-type access:
		`pack.Module.Type` has name = Module, sub = Type, if available.</haxe_doc>
			</sub>
			<params>
				<t path="Null"><c path="Array"><e path="haxe.macro.TypeParam"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Optional parameters of the type path.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>Represents the package of the type path.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type path.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a type path in the AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.TypeParam" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPType a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc></haxe_doc>
		</TPType>
		<TPExpr a="e">
			<t path="haxe.macro.Expr"/>
			<haxe_doc></haxe_doc>
		</TPExpr>
		<haxe_doc><![CDATA[Represents a concrete type parameter in the AST.

	Haxe allows expressions in concrete type parameters, e.g.
	`new YourType<["hello", "world"]>`. In that case the value is `TPExpr` while
	in the normal case it's `TPType`.]]></haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypeParamDecl" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<params>
				<t path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the type parameter.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
			<meta>
				<t path="Null"><t path="haxe.macro.Metadata"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the type parameter.</haxe_doc>
			</meta>
			<constraints>
				<t path="Null"><c path="Array"><e path="haxe.macro.ComplexType"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional constraints of the type parameter.</haxe_doc>
			</constraints>
		</a>
		<haxe_doc>Represents a type parameter declaration in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Function" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<ret>
				<t path="Null"><e path="haxe.macro.ComplexType"/></t>
				<haxe_doc>The return type-hint of the function, if available.</haxe_doc>
			</ret>
			<params>
				<t path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An optional list of function parameter type declarations.</haxe_doc>
			</params>
			<expr>
				<t path="Null"><t path="haxe.macro.Expr"/></t>
				<haxe_doc>The expression of the function body, if available.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><t path="haxe.macro.FunctionArg"/></c>
				<haxe_doc>A list of function arguments.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<value>
				<t path="Null"><t path="Null"><t path="haxe.macro.Expr"/></t></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional value of the function argument, if available.</haxe_doc>
			</value>
			<type>
				<t path="Null"><e path="haxe.macro.ComplexType"/></t>
				<haxe_doc>The type-hint of the function argument, if available.</haxe_doc>
			</type>
			<opt>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the function argument is optional.</haxe_doc>
			</opt>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the function argument.</haxe_doc>
			</name>
			<meta>
				<t path="Null"><t path="haxe.macro.Metadata"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the function argument.</haxe_doc>
			</meta>
		</a>
		<haxe_doc>Represents a function argument in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetadataEntry" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the metadata entry.</haxe_doc>
			</pos>
			<params>
				<t path="Null"><c path="Array"><t path="haxe.macro.Expr"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the metadata entry.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the metadata entry.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a metadata entry in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Metadata" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
		<haxe_doc>Represents metadata in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Field" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the field.</haxe_doc>
			</pos>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</name>
			<meta>
				<t path="Null"><t path="haxe.macro.Metadata"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldType"/>
				<haxe_doc>The kind of the field.</haxe_doc>
			</kind>
			<doc>
				<t path="Null"><t path="Null"><c path="String"/></t></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the field, if available. If the field has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
			<access>
				<t path="Null"><c path="Array"><e path="haxe.macro.Access"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The access modifiers of the field. By default fields have private access.
		@see https://haxe.org/manual/class-field-access-modifier.html</haxe_doc>
			</access>
		</a>
		<haxe_doc>Represents a field in the AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.Access" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<APublic><haxe_doc>Public access modifier, grants access from anywhere.
		@see https://haxe.org/manual/class-field-visibility.html</haxe_doc></APublic>
		<APrivate><haxe_doc>Private access modifier, grants access to class and its sub-classes
		only.
		@see https://haxe.org/manual/class-field-visibility.html</haxe_doc></APrivate>
		<AStatic><haxe_doc>Static access modifier.</haxe_doc></AStatic>
		<AOverride><haxe_doc>Override access modifier.
		@see https://haxe.org/manual/class-field-override.html</haxe_doc></AOverride>
		<ADynamic><haxe_doc>Dynamic (re-)bindable access modifier.
		@see https://haxe.org/manual/class-field-dynamic.html</haxe_doc></ADynamic>
		<AInline><haxe_doc>Inline access modifier. Allows expressions to be directly inserted in
		place of calls to them.
		@see https://haxe.org/manual/class-field-inline.html</haxe_doc></AInline>
		<AMacro><haxe_doc>Macros access modifier. Allows expression macro functions. These are
		normal functions which are executed as soon as they are typed.</haxe_doc></AMacro>
		<haxe_doc>Represents an access modifier.
	@see https://haxe.org/manual/class-field-access-modifier.html</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.FieldType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<FVar a="t:?e">
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Represents a variable field type.</haxe_doc>
		</FVar>
		<FFun a="f">
			<t path="haxe.macro.Function"/>
			<haxe_doc>Represents a function field type.</haxe_doc>
		</FFun>
		<FProp a="get:set:?t:?e">
			<c path="String"/>
			<c path="String"/>
			<e path="haxe.macro.ComplexType"/>
			<t path="haxe.macro.Expr"/>
			<haxe_doc>Represents a property with getter and setter field type.</haxe_doc>
		</FProp>
		<haxe_doc>Represents the field type in the AST.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypeDefinition" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position to the type definition.</haxe_doc>
			</pos>
			<params>
				<t path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The parameter type declarations of the type definition.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type definition.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type definition.</haxe_doc>
			</name>
			<meta>
				<t path="Null"><t path="haxe.macro.Metadata"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the type definition.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.TypeDefKind"/>
				<haxe_doc>The kind of the type definition.</haxe_doc>
			</kind>
			<isExtern>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<fields>
				<c path="Array"><t path="haxe.macro.Field"/></c>
				<haxe_doc>The fields of the type definition.</haxe_doc>
			</fields>
		</a>
		<haxe_doc>Represents a type definition.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.TypeDefKind" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TDEnum><haxe_doc>Represents an enum kind.</haxe_doc></TDEnum>
		<TDStructure><haxe_doc>Represents a structure kind.</haxe_doc></TDStructure>
		<TDClass a="?superClass:?interfaces:?isInterface">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<x path="Bool"/>
			<haxe_doc>Represents a class kind.</haxe_doc>
		</TDClass>
		<TDAlias a="t">
			<e path="haxe.macro.ComplexType"/>
			<haxe_doc>Represents an alias/typedef kind.</haxe_doc>
		</TDAlias>
		<TDAbstract a="tthis:?from:?to">
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<haxe_doc>Represents an abstract kind.</haxe_doc>
		</TDAbstract>
		<haxe_doc>Represents a type definition kind.</haxe_doc>
	</enum>
	<class path="haxe.macro.Error" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<message public="1">
			<c path="String"/>
			<haxe_doc>The error message.</haxe_doc>
		</message>
		<pos public="1">
			<t path="haxe.macro.Position"/>
			<haxe_doc>The position of the error.</haxe_doc>
		</pos>
		<toString set="method" line="898">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the string representation of the error.</haxe_doc>
		</toString>
		<new public="1" set="method" line="890">
			<f a="m:p">
				<c path="String"/>
				<t path="haxe.macro.Position"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Instantiates an error with given message and position.</haxe_doc>
		</new>
		<haxe_doc>This error can be used to handle or produce compilation errors in macros.</haxe_doc>
	</class>
	<enum path="haxe.macro.ImportMode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<INormal><haxe_doc>Represents a default import `import c`.</haxe_doc></INormal>
		<IAsName a="alias">
			<c path="String"/>
			<haxe_doc>Represents the alias import `import c as alias`.</haxe_doc>
		</IAsName>
		<IAll><haxe_doc>Represents the wildcard import `import *`.</haxe_doc></IAll>
		<haxe_doc>Represents the import mode.
	@see https://haxe.org/manual/type-system-import.html</haxe_doc>
	</enum>
	<typedef path="haxe.macro.ImportExpr" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<path>
				<c path="Array"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
</a></c>
				<haxe_doc>The path to the import expression.</haxe_doc>
			</path>
			<mode>
				<e path="haxe.macro.ImportMode"/>
				<haxe_doc>The mode of the import expression.</haxe_doc>
			</mode>
		</a>
		<haxe_doc>Represents the import expression.</haxe_doc>
	</typedef>
	<class path="haxe.macro.ExprTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/ExprTools.hx">
		<toString public="1" set="method" line="44" static="1">
			<f a="e">
				<t path="haxe.macro.Expr"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts expression `e` to a human-readable String representation.

		The result is guaranteed to be valid Haxe code, but there may be
		differences from the original lexical syntax.</haxe_doc>
		</toString>
		<iter public="1" set="method" line="71" static="1">
			<f a="e:f">
				<t path="haxe.macro.Expr"/>
				<f a="">
					<t path="haxe.macro.Expr"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls function `f` on each sub-expression of `e`.

		If `e` has no sub-expressions, this operation has no effect.

		Otherwise `f` is called once per sub-expression of `e`, with the
		sub-expression as argument. These calls are done in order of the
		sub-expression declarations.

		This method does not call itself recursively. It should instead be used
		in a recursive function which handles the expression nodes of interest.

		Usage example:
		```haxe
		function findStrings(e:Expr) {
			switch(e.expr) {
				case EConst(CString(s)):
					// handle s
				case _:
					ExprTools.iter(e, findStrings);
			}
		}
		```</haxe_doc>
		</iter>
		<map public="1" set="method" line="158" static="1">
			<f a="e:f">
				<t path="haxe.macro.Expr"/>
				<f a="">
					<t path="haxe.macro.Expr"/>
					<t path="haxe.macro.Expr"/>
				</f>
				<t path="haxe.macro.Expr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of `e` by calling `f` on each of them.

		If `e` has no sub-expressions, this operation returns `e` unchanged.

		Otherwise `f` is called once per sub-expression of `e`, with the
		sub-expression as argument. These calls are done in order of the
		sub-expression declarations.

		This method does not call itself recursively. It should instead be used
		in a recursive function which handles the expression nodes of interest.

		Usage example:
		```haxe
		function capitalizeStrings(e:Expr) {
			return switch(e.expr) {
				case EConst(CString(s)):
					{ expr: EConst(CString(s.toUpperCase())), pos: e.pos };
				case _:
					ExprTools.map(e, capitalizeStrings);
			}
		}
		```haxe</haxe_doc>
		</map>
		<getValue public="1" set="method" line="233" static="1">
			<f a="e">
				<t path="haxe.macro.Expr"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Returns the value `e` represents.

		Supported expressions are:

		 - `Int`, `Float` and `String` literals
		 - identifiers `true`, `false` and `null`
		 - structure declarations if all their fields are values
		 - array declarations if all their elements are values
		 - unary operators `-`, `!` and `~` if the operand is a value
		 - binary operators except `=>`, `...` and assignments

		Parentheses, metadata and the `untyped` keyword are ignored.

		If any non-value is encountered, an exception of type `String` is
		thrown.

		If `e` is null, the result is unspecified.]]></haxe_doc>
		</getValue>
		<opt get="inline" set="null" line="293" static="1"><f a="e:f">
	<t path="Null"><t path="haxe.macro.Expr"/></t>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<t path="haxe.macro.Expr"/>
	</f>
	<t path="haxe.macro.Expr"/>
</f></opt>
		<opt2 get="inline" set="null" line="296" static="1"><f a="e:f">
	<t path="Null"><t path="haxe.macro.Expr"/></t>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></opt2>
		<haxe_doc>This class provides some utility methods to work with expressions. It is
	best used through 'using haxe.macro.ExprTools' syntax and then provides
	additional methods on haxe.macro.Expr instances.

	While mainly intended to be used in macros, it works in non-macro code as
	well.</haxe_doc>
	</class>
	<class path="haxe.macro.ExprArrayTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/ExprTools.hx" module="haxe.macro.ExprTools">
		<map public="1" set="method" line="305" static="1"><f a="el:f">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<t path="haxe.macro.Expr"/>
	</f>
	<c path="Array"><t path="haxe.macro.Expr"/></c>
</f></map>
		<iter public="1" set="method" line="312" static="1"><f a="el:f">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></iter>
		<haxe_doc>This class provides functions on expression arrays for convenience. For a
	detailed reference on each method, see the documentation of ExprTools.</haxe_doc>
	</class>
	<class path="haxe.macro.Format" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Format.hx"><haxe_doc>The actual macro implemented for Std.format</haxe_doc></class>
	<typedef path="haxe.macro.JSGenApi" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/JSGenApi.hx">
		<a>
			<types>
				<c path="Array"><e path="haxe.macro.Type"/></c>
				<haxe_doc>all the types that were compiled by Haxe</haxe_doc>
			</types>
			<setTypeAccessor set="method">
				<f a="callb">
					<f a="">
						<e path="haxe.macro.Type"/>
						<c path="String"/>
					</f>
					<x path="Void"/>
				</f>
				<haxe_doc>define the JS code that gets generated when a class or enum is accessed in a typed expression</haxe_doc>
			</setTypeAccessor>
			<setCurrentClass set="method">
				<f a="c">
					<t path="haxe.macro.ClassType"/>
					<x path="Void"/>
				</f>
				<haxe_doc>select the current classe</haxe_doc>
			</setCurrentClass>
			<quoteString set="method">
				<f a="s">
					<c path="String"/>
					<c path="String"/>
				</f>
				<haxe_doc>quote and escape the given string constant</haxe_doc>
			</quoteString>
			<outputFile>
				<c path="String"/>
				<haxe_doc>the file in which the JS code can be generated</haxe_doc>
			</outputFile>
			<main>
				<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
				<haxe_doc>the main call expression, if a -main class is defined</haxe_doc>
			</main>
			<isKeyword set="method">
				<f a="ident">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>tells if the given identifier is a JS keyword</haxe_doc>
			</isKeyword>
			<hasFeature set="method">
				<f a="f">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>check if a feature is used</haxe_doc>
			</hasFeature>
			<generateValue set="method">
				<f a="e">
					<t path="haxe.macro.TypedExpr"/>
					<c path="String"/>
				</f>
				<haxe_doc>generate the JS code for a given typed expression-value</haxe_doc>
			</generateValue>
			<generateStatement set="method">
				<f a="e">
					<t path="haxe.macro.TypedExpr"/>
					<c path="String"/>
				</f>
				<haxe_doc>generate the JS code for any given typed expression</haxe_doc>
			</generateStatement>
			<buildMetaData set="method">
				<f a="t">
					<t path="haxe.macro.BaseType"/>
					<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
				</f>
				<haxe_doc>create the metadata expression for the given type</haxe_doc>
			</buildMetaData>
			<addFeature set="method">
				<f a="f">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>add a feature</haxe_doc>
			</addFeature>
		</a>
		<haxe_doc>This is the api that is passed to the custom JS generator.</haxe_doc>
	</typedef>
	<class path="haxe.macro.MacroStringTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/MacroStringTools.hx">
		<toFieldExpr public="1" set="method" line="85" static="1">
			<f a="sl">
				<c path="Array"><c path="String"/></c>
				<t path="haxe.macro.Expr"/>
			</f>
			<haxe_doc>Converts an array of Strings `sl` to a field expression.

		If `sl` has no elements, the result is null.

		If `sl` has one element, the result is `EConst(CIdent(sl[0])`.

		Otherwise the result is a chain of `EField` nodes.

		If `sl` is null, the result is unspecified.</haxe_doc>
		</toFieldExpr>
		<toDotPath public="1" set="method" line="100" static="1">
			<f a="pack:name">
				<c path="Array"><c path="String"/></c>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts a path given by package `pack` and name `name` to a `String`
		separated by dots.

		If `pack` has no elements, the result is `name`.

		If `pack` is null, the result is unspecified.

		Otherwise the elements of `pack` are joined with a separating dot, with
		an appended dot separating the result from `name`.</haxe_doc>
		</toDotPath>
		<toComplex public="1" set="method" line="104" static="1"><f a="path">
	<c path="String"/>
	<e path="haxe.macro.ComplexType"/>
</f></toComplex>
		<haxe_doc>This class provides some utility methods to work with strings in macro
	context.</haxe_doc>
	</class>
	<class path="haxe.macro.MacroType" params="Const" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/MacroType.hx" extern="1"><haxe_doc><![CDATA[This type is meant to be used to generate custom types using a macro.
	For instance by doing MacroType<[my.Class.myMacro(55)]>]]></haxe_doc></class>
	<class path="haxe.macro.PositionTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/PositionTools.hx">
		<here public="1" set="method" static="1">
			<f a=""><t path="haxe.macro.Position"/></f>
			<haxe_doc>Returns the `Position` where the caller of `here` is.</haxe_doc>
		</here>
		<getInfos public="1" set="method" line="43" static="1">
			<f a="p">
				<t path="haxe.macro.Position"/>
				<a>
					<min><x path="Int"/></min>
					<max><x path="Int"/></max>
					<file><c path="String"/></file>
				</a>
			</f>
			<haxe_doc>Like `Context.getPosInfos`, except this method is available on all platforms.</haxe_doc>
		</getInfos>
		<make public="1" set="method" line="54" static="1">
			<f a="inf">
				<a>
					<min><x path="Int"/></min>
					<max><x path="Int"/></max>
					<file><c path="String"/></file>
				</a>
				<t path="haxe.macro.Position"/>
			</f>
			<haxe_doc>Like `Context.makePosition`, except this method is available on all platforms.</haxe_doc>
		</make>
	</class>
	<class path="haxe.macro.Printer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Printer.hx">
		<tabs><c path="String"/></tabs>
		<tabString><c path="String"/></tabString>
		<printUnop public="1" set="method" line="42"><f a="op">
	<e path="haxe.macro.Unop"/>
	<c path="String"/>
</f></printUnop>
		<printBinop public="1" set="method" line="50"><f a="op">
	<e path="haxe.macro.Binop"/>
	<c path="String"/>
</f></printBinop>
		<escapeString set="method" line="78"><f a="s:delim">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></escapeString>
		<printFormatString public="1" set="method" line="82"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></printFormatString>
		<printString public="1" set="method" line="86"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></printString>
		<printConstant public="1" set="method" line="90"><f a="c">
	<e path="haxe.macro.Constant"/>
	<c path="String"/>
</f></printConstant>
		<printTypeParam public="1" set="method" line="99"><f a="param">
	<e path="haxe.macro.TypeParam"/>
	<c path="String"/>
</f></printTypeParam>
		<printTypePath public="1" set="method" line="104"><f a="tp">
	<t path="haxe.macro.TypePath"/>
	<c path="String"/>
</f></printTypePath>
		<printComplexType public="1" set="method" line="111"><f a="ct">
	<e path="haxe.macro.ComplexType"/>
	<c path="String"/>
</f></printComplexType>
		<printMetadata public="1" set="method" line="125"><f a="meta">
	<t path="haxe.macro.MetadataEntry"/>
	<c path="String"/>
</f></printMetadata>
		<printAccess public="1" set="method" line="129"><f a="access">
	<e path="haxe.macro.Access"/>
	<c path="String"/>
</f></printAccess>
		<printField public="1" set="method" line="139"><f a="field">
	<t path="haxe.macro.Field"/>
	<c path="String"/>
</f></printField>
		<printTypeParamDecl public="1" set="method" line="149"><f a="tpd">
	<t path="haxe.macro.TypeParamDecl"/>
	<c path="String"/>
</f></printTypeParamDecl>
		<printFunctionArg public="1" set="method" line="154"><f a="arg">
	<t path="haxe.macro.FunctionArg"/>
	<c path="String"/>
</f></printFunctionArg>
		<printFunction public="1" set="method" line="160"><f a="func">
	<t path="haxe.macro.Function"/>
	<c path="String"/>
</f></printFunction>
		<printVar public="1" set="method" line="166"><f a="v">
	<t path="haxe.macro.Var"/>
	<c path="String"/>
</f></printVar>
		<printExpr public="1" set="method" line="172"><f a="e">
	<t path="haxe.macro.Expr"/>
	<c path="String"/>
</f></printExpr>
		<printExprs public="1" set="method" line="234"><f a="el:sep">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<c path="String"/>
	<c path="String"/>
</f></printExprs>
		<printExtension set="method" line="238"><f a="tpl:fields">
	<c path="Array"><t path="haxe.macro.TypePath"/></c>
	<c path="Array"><t path="haxe.macro.Field"/></c>
	<c path="String"/>
</f></printExtension>
		<printStructure set="method" line="243"><f a="fields">
	<c path="Array"><t path="haxe.macro.Field"/></c>
	<c path="String"/>
</f></printStructure>
		<printTypeDefinition public="1" set="method" line="248">
			<f a="t:?printPackage" v=":true">
				<t path="haxe.macro.TypeDefinition"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ printPackage : true }</e></m></meta>
		</printTypeDefinition>
		<printFieldWithDelimiter set="method" line="307"><f a="f">
	<t path="haxe.macro.Field"/>
	<c path="String"/>
</f></printFieldWithDelimiter>
		<opt params="T" set="method" line="318">
			<f a="v:f:?prefix" v="::&quot;&quot;">
				<c path="opt.T"/>
				<f a="">
					<c path="opt.T"/>
					<c path="String"/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ prefix : "" }</e></m></meta>
		</opt>
		<new public="1" set="method" line="37">
			<f a="?tabString" v="&quot;\t&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ tabString : "\t" }</e></m></meta>
		</new>
		<haxe_doc>This class provides some utility methods to convert elements from the
	macro context to a human-readable String representation.</haxe_doc>
	</class>
	<typedef path="haxe.macro.TExprTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.ExprTools"/>
		<haxe_doc><![CDATA[This class can be added via `using haxe.macro.Tools` in order to enable
	`using` functionality on these macro tool classes:

	- `haxe.macro.ExprTools`
	- `haxe.macro.ComplexTypeTools`
	- `haxe.macro.TypeTools`
	- `haxe.macro.MacroStringTools`
	- `haxe.macro.TypedExprTools`
	- `haxe.macro.PositionTools`
  
  @see <https://haxe.org/manual/lf-static-extension.html>]]></haxe_doc>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TComplexTypeTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.ComplexTypeTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TTypeTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.TypeTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TMacroStringTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.MacroStringTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TTypedExprTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.TypedExprTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TPositionTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.PositionTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.Ref" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<toString set="method"><f a=""><c path="String"/></f></toString>
			<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
		</a>
		<haxe_doc>Represents a reference to internal compiler structure. It exists to avoid
	expensive encoding if it is not required and to ensure that physical
	equality remains intact.

	A structure is only encoded when user requests it through `ref.get()`.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.Type" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx">
		<TMono a="t">
			<t path="haxe.macro.Ref"><t path="Null"><e path="haxe.macro.Type"/></t></t>
			<haxe_doc>Represents a monomorph.

		@see https://haxe.org/manual/types-monomorph.html</haxe_doc>
		</TMono>
		<TEnum a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents an enum instance.

		@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		</TEnum>
		<TInst a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents a class instance.

		@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		</TInst>
		<TType a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents a typedef.

		@see https://haxe.org/manual/type-system-typedef.html</haxe_doc>
		</TType>
		<TFun a="args:ret">
			<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<e path="haxe.macro.Type"/>
			<haxe_doc>Represents a function type.

		@see https://haxe.org/manual/types-function.html</haxe_doc>
		</TFun>
		<TAnonymous a="a">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AnonType"/></t>
			<haxe_doc>Represents an anonymous structure type.

		@see https://haxe.org/manual/types-anonymous-structure.html</haxe_doc>
		</TAnonymous>
		<TDynamic a="t">
			<t path="Null"><e path="haxe.macro.Type"/></t>
			<haxe_doc>Represents Dynamic.

		@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		</TDynamic>
		<TLazy a="f">
			<f a=""><e path="haxe.macro.Type"/></f>
			<haxe_doc>Used internally by the compiler to delay some typing.</haxe_doc>
		</TLazy>
		<TAbstract a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>Represents an abstract type.

		@see https://haxe.org/manual/types-abstract.html</haxe_doc>
		</TAbstract>
		<haxe_doc>Represents a type.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.AnonType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<status>
				<e path="haxe.macro.AnonStatus"/>
				<haxe_doc>The status/kind of the structure.</haxe_doc>
			</status>
			<fields>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The class fields of the structure.</haxe_doc>
			</fields>
		</a>
		<haxe_doc>Represents information for anonymous structure types.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.AnonStatus" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<AClosed><haxe_doc>A closed structure is considered complete. That is, no further fields
		can be added to it.</haxe_doc></AClosed>
		<AOpened><haxe_doc>An open structure allows having additional fields added to it, which is
		used during type inference. It is closed upon unification.</haxe_doc></AOpened>
		<AConst><haxe_doc>A const structure is one that appears directly in syntax. It cannot be
		assigned to a smaller structure type (that is, it does not allow
		structural sub-typing).</haxe_doc></AConst>
		<AExtend a="tl">
			<t path="haxe.macro.Ref"><c path="Array"><e path="haxe.macro.Type"/></c></t>
			<haxe_doc>Represents a structure which extends one or multiple structures defined
		in `tl`.

		@see https://haxe.org/manual/type-system-extensions.html</haxe_doc>
		</AExtend>
		<AClassStatics a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<haxe_doc>A structure that represents the static fields of a class.</haxe_doc>
		</AClassStatics>
		<AEnumStatics a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<haxe_doc>A structure that represents the constructors of an enum.</haxe_doc>
		</AEnumStatics>
		<AAbstractStatics a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<haxe_doc>A structure that represents the static fields of an abstract.</haxe_doc>
		</AAbstractStatics>
		<haxe_doc>Represents the kind of the anonymous structure type.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypeParameter" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the type parameter. It is guaranteed to be a `TInst` with a
		`KTypeParameter` kind.</haxe_doc>
			</t>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents the declaration of type parameters.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassField" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the class field.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the class field.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the class field.</haxe_doc>
			</params>
			<overloads>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The overload fields of the class field.</haxe_doc>
			</overloads>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the class field.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the class field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldKind"/>
				<haxe_doc>The class field kind.</haxe_doc>
			</kind>
			<isPublic>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is public.</haxe_doc>
			</isPublic>
			<expr set="method">
				<f a=""><t path="Null"><t path="haxe.macro.TypedExpr"/></t></f>
				<haxe_doc>Returns the typed expression of the class field.</haxe_doc>
			</expr>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a class field.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumField" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the enum constructor.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the enum constructor.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the enum constructor.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the enum constructor.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the enum constructor.</haxe_doc>
			</meta>
			<index>
				<x path="Int"/>
				<haxe_doc>The index of the enum constructor, i.e. in which position it appears
		in the syntax.</haxe_doc>
			</index>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the enum constructor.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents an enum constructor.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.ClassKind" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<KNormal><haxe_doc>A normal class.</haxe_doc></KNormal>
		<KTypeParameter a="constraints">
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>A type parameter class with a set of constraints.</haxe_doc>
		</KTypeParameter>
		<KExtension a="cl:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>A structurally extended class.

		@deprecated</haxe_doc>
		</KExtension>
		<KExpr a="expr">
			<t path="haxe.macro.Expr"/>
			<haxe_doc>A special kind of class to encode expressions into type parameters.</haxe_doc>
		</KExpr>
		<KGeneric><haxe_doc>A `@:generic` base class.</haxe_doc></KGeneric>
		<KGenericInstance a="cl:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<haxe_doc>A concrete `@:generic` instance, referencing the original class and the
		applied type parameters.</haxe_doc>
		</KGenericInstance>
		<KMacroType><haxe_doc>A special class for `haxe.macro.MacroType`.

		@deprecated</haxe_doc></KMacroType>
		<KAbstractImpl a="a">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<haxe_doc>An implementation class of an abstract, i.e. where all its run-time code
		is.</haxe_doc>
		</KAbstractImpl>
		<KGenericBuild><haxe_doc>A `@:genericBuild` class</haxe_doc></KGenericBuild>
		<haxe_doc>Represents the kind of a class.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.BaseType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The information that all types (`ClassType`, `EnumType`, `DefType`,
	`AbstractType`) have in common.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<superClass>
				<t path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></t>
				<haxe_doc>The parent class and its type parameters, if available.</haxe_doc>
			</superClass>
			<statics>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The static fields of the class.</haxe_doc>
			</statics>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<overrides>
				<c path="Array"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></c>
				<haxe_doc>The list of fields that have override status.</haxe_doc>
			</overrides>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.ClassKind"/>
				<haxe_doc>The kind of the class.</haxe_doc>
			</kind>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isInterface>
				<x path="Bool"/>
				<haxe_doc>If true the type is an interface, otherwise it is a class.</haxe_doc>
			</isInterface>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<interfaces>
				<c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c>
				<haxe_doc>The implemented interfaces and their type parameters.</haxe_doc>
			</interfaces>
			<init>
				<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
				<haxe_doc>The `__init__` expression of the class, if available.</haxe_doc>
			</init>
			<fields>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The member fields of the class.</haxe_doc>
			</fields>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructor>
				<t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></t>
				<haxe_doc>The constructor of the class, if available.</haxe_doc>
			</constructor>
		</a>
		<haxe_doc>Represents a class type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<names>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>An ordered list of enum constructor names.</haxe_doc>
			</names>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructs>
				<x path="Map">
					<c path="String"/>
					<t path="haxe.macro.EnumField"/>
				</x>
				<haxe_doc>The available enum constructors.</haxe_doc>
			</constructs>
		</a>
		<haxe_doc>Represents an enum type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.DefType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The target type of the typedef.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a typedef.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.AbstractType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<unops>
				<c path="Array"><a>
	<postFix><x path="Bool"/></postFix>
	<op><e path="haxe.macro.Unop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined unary operators of the abstract.</haxe_doc>
			</unops>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The underlying type of the abstract.</haxe_doc>
			</type>
			<to>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c>
				<haxe_doc>The available implicit to-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</to>
			<resolve>
				<t path="Null"><t path="haxe.macro.ClassField"/></t>
				<meta><m n=":require"><e><![CDATA[haxe_ver >= 3.3]]></e></m></meta>
				<haxe_doc>The method used for resolving unknown field access, if available.</haxe_doc>
			</resolve>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<impl>
				<t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
				<haxe_doc>The implementation class of the abstract, if available.</haxe_doc>
			</impl>
			<from>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c>
				<haxe_doc>The available implicit from-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</from>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<binops>
				<c path="Array"><a>
	<op><e path="haxe.macro.Binop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined binary operators of the abstract.</haxe_doc>
			</binops>
			<array>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The defined array-access fields of the abstract.</haxe_doc>
			</array>
		</a>
		<haxe_doc>Represents an abstract type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetaAccess" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<remove set="method">
				<f a="name">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Removes all `name` metadata entries from the origin of `this`
		MetaAccess.

		This method might clear several metadata entries of the same name.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `remove` has no effect on that array.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</remove>
			<has set="method">
				<f a="name">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>Tells if the origin of `this` MetaAccess has a `name` metadata entry.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</has>
			<get set="method">
				<f a=""><t path="haxe.macro.Metadata"/></f>
				<haxe_doc>Return the wrapped `Metadata` array.

		Modifying this array has no effect on the origin of `this` MetaAccess.
		The `add` and `remove` methods can be used for that.</haxe_doc>
			</get>
			<extract set="method">
				<f a="name">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
				</f>
				<haxe_doc>Extract metadata entries by given `name`.

		If there's no metadata with such name, empty array `[]` is returned.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</extract>
			<add set="method">
				<f a="name:params:pos">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.Expr"/></c>
					<t path="haxe.macro.Position"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Adds the metadata specified by `name`, `params` and `pos` to the origin
		of `this` MetaAccess.

		Metadata names are not unique during compilation, so this method never
		overwrites a previous metadata.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `add` has no effect on that array.

		If any argument is null, compilation fails with an error.</haxe_doc>
			</add>
		</a>
		<haxe_doc>MetaAccess is a wrapper for the `Metadata` array. It can be used to add
	metadata to and remove metadata from its origin.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.FieldKind" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<FVar a="read:write">
			<e path="haxe.macro.VarAccess"/>
			<e path="haxe.macro.VarAccess"/>
			<haxe_doc>A variable of property, depending on the `read` and `write` values.</haxe_doc>
		</FVar>
		<FMethod a="k">
			<e path="haxe.macro.MethodKind"/>
			<haxe_doc>A method</haxe_doc>
		</FMethod>
		<haxe_doc>Represents a field kind.</haxe_doc>
	</enum>
	<enum path="haxe.macro.VarAccess" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<AccNormal><haxe_doc>Normal access (`default`).</haxe_doc></AccNormal>
		<AccNo><haxe_doc>Private access (`null`).</haxe_doc></AccNo>
		<AccNever><haxe_doc>No access (`never`).</haxe_doc></AccNever>
		<AccResolve><haxe_doc>Unused.</haxe_doc></AccResolve>
		<AccCall><haxe_doc>Access through accessor function (`get`, `set`, `dynamic`).</haxe_doc></AccCall>
		<AccInline><haxe_doc>Inline access (`inline`).</haxe_doc></AccInline>
		<AccRequire a="r:?msg">
			<c path="String"/>
			<c path="String"/>
			<haxe_doc>Failed access due to a `@:require` metadata.</haxe_doc>
		</AccRequire>
		<haxe_doc>Represents the variable accessor.</haxe_doc>
	</enum>
	<enum path="haxe.macro.MethodKind" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<MethNormal><haxe_doc>A normal method.</haxe_doc></MethNormal>
		<MethInline><haxe_doc>An inline method.

		@see https://haxe.org/manual/class-field-inline.html</haxe_doc></MethInline>
		<MethDynamic><haxe_doc>A dynamic, rebindable method.

		@see https://haxe.org/manual/class-field-dynamic.html</haxe_doc></MethDynamic>
		<MethMacro><haxe_doc>A macro method.</haxe_doc></MethMacro>
		<haxe_doc>Represents the method kind.</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.TConstant" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TInt a="i">
			<x path="Int"/>
			<haxe_doc>An `Int` literal.</haxe_doc>
		</TInt>
		<TFloat a="s">
			<c path="String"/>
			<haxe_doc>A `Float` literal, represented as String to avoid precision loss.</haxe_doc>
		</TFloat>
		<TString a="s">
			<c path="String"/>
			<haxe_doc>A `String` literal.</haxe_doc>
		</TString>
		<TBool a="b">
			<x path="Bool"/>
			<haxe_doc>A `Bool` literal.</haxe_doc>
		</TBool>
		<TNull><haxe_doc>The constant `null`.</haxe_doc></TNull>
		<TThis><haxe_doc>The constant `this`.</haxe_doc></TThis>
		<TSuper><haxe_doc>The constant `super`.</haxe_doc></TSuper>
		<haxe_doc>Represents typed constant.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TVar" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t set="null">
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the variable.</haxe_doc>
			</t>
			<name set="null">
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<meta set="null">
				<t path="Null"><t path="haxe.macro.MetaAccess"/></t>
				<haxe_doc>The metadata of the variable.</haxe_doc>
			</meta>
			<id set="null">
				<x path="Int"/>
				<haxe_doc>The unique ID of the variable.</haxe_doc>
			</id>
			<extra set="null">
				<t path="Null"><a>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<expr><t path="Null"><t path="haxe.macro.TypedExpr"/></t></expr>
</a></t>
				<haxe_doc>Special information which is internally used to keep track of closure.
		information</haxe_doc>
			</extra>
			<capture set="null">
				<x path="Bool"/>
				<haxe_doc>Whether or not the variable has been captured by a closure.</haxe_doc>
			</capture>
		</a>
		<haxe_doc>Represents a variable in the typed AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.ModuleType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TClassDecl a="c">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<haxe_doc>A class.</haxe_doc>
		</TClassDecl>
		<TEnumDecl a="e">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<haxe_doc>An enum.</haxe_doc>
		</TEnumDecl>
		<TTypeDecl a="t">
			<t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t>
			<haxe_doc>A typedef.</haxe_doc>
		</TTypeDecl>
		<TAbstract a="a">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<haxe_doc>An abstract.</haxe_doc>
		</TAbstract>
		<haxe_doc>Represents a module type. These are the types that can be declared in a Haxe
	module and which are passed to the generators (except `TTypeDecl`).</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TFunc" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The return type of the function.</haxe_doc>
			</t>
			<expr>
				<t path="haxe.macro.TypedExpr"/>
				<haxe_doc>The expression of the function body.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><a>
	<value><t path="Null"><e path="haxe.macro.TConstant"/></t></value>
	<v><t path="haxe.macro.TVar"/></v>
</a></c>
				<haxe_doc>A list of function arguments identified by an argument variable `v` and
		an optional initialization `value`.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the typed AST.</haxe_doc>
	</typedef>
	<enum path="haxe.macro.FieldAccess" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<FInstance a="c:params:cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Access of field `cf` on a class instance `c` with type parameters
		`params`.</haxe_doc>
		</FInstance>
		<FStatic a="c:cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Static access of a field `cf` on a class `c`.</haxe_doc>
		</FStatic>
		<FAnon a="cf">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Access of field `cf` on an anonymous structure.</haxe_doc>
		</FAnon>
		<FDynamic a="s">
			<c path="String"/>
			<haxe_doc>Dynamic field access of a field named `s`.</haxe_doc>
		</FDynamic>
		<FClosure a="c:cf">
			<t path="Null"><a>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
	<c><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></c>
</a></t>
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t>
			<haxe_doc>Closure field access of field `cf` on a class instance `c` with type
		parameters `params`.</haxe_doc>
		</FClosure>
		<FEnum a="e:ef">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<t path="haxe.macro.EnumField"/>
			<haxe_doc>Field access to an enum constructor `ef` of enum `e`.</haxe_doc>
		</FEnum>
		<haxe_doc>Represents the kind of field access in the typed AST.</haxe_doc>
	</enum>
	<enum path="haxe.macro.TypedExprDef" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<TConst a="c">
			<e path="haxe.macro.TConstant"/>
			<haxe_doc>A constant.</haxe_doc>
		</TConst>
		<TLocal a="v">
			<t path="haxe.macro.TVar"/>
			<haxe_doc>Reference to a local variable `v`.</haxe_doc>
		</TLocal>
		<TArray a="e1:e2">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Array access `e1[e2]`.</haxe_doc>
		</TArray>
		<TBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Binary operator `e1 op e2`.</haxe_doc>
		</TBinop>
		<TField a="e:fa">
			<t path="haxe.macro.TypedExpr"/>
			<e path="haxe.macro.FieldAccess"/>
			<haxe_doc>Field access on `e` according to `fa`.</haxe_doc>
		</TField>
		<TTypeExpr a="m">
			<e path="haxe.macro.ModuleType"/>
			<haxe_doc>Reference to a module type `m`.</haxe_doc>
		</TTypeExpr>
		<TParenthesis a="e">
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>Parentheses `(e)`.</haxe_doc>
		</TParenthesis>
		<TObjectDecl a="fields">
			<c path="Array"><a>
	<name><c path="String"/></name>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
			<haxe_doc>An object declaration.</haxe_doc>
		</TObjectDecl>
		<TArrayDecl a="el">
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc>An array declaration `[el]`.</haxe_doc>
		</TArrayDecl>
		<TCall a="e:el">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc>A call `e(el)`.</haxe_doc>
		</TCall>
		<TNew a="c:params:el">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc><![CDATA[A constructor call `new c<params>(el)`.]]></haxe_doc>
		</TNew>
		<TUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<x path="Bool"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>An unary operator `op` on `e`:

		* e++ (op = OpIncrement, postFix = true)
		* e-- (op = OpDecrement, postFix = true)
		* ++e (op = OpIncrement, postFix = false)
		* --e (op = OpDecrement, postFix = false)
		* -e (op = OpNeg, postFix = false)
		* !e (op = OpNot, postFix = false)
		* ~e (op = OpNegBits, postFix = false)</haxe_doc>
		</TUnop>
		<TFunction a="tfunc">
			<t path="haxe.macro.TFunc"/>
			<haxe_doc>A function declaration.</haxe_doc>
		</TFunction>
		<TVar a="v:expr">
			<t path="haxe.macro.TVar"/>
			<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
			<haxe_doc>A variable declaration `var v` or `var v = expr`.</haxe_doc>
		</TVar>
		<TBlock a="el">
			<c path="Array"><t path="haxe.macro.TypedExpr"/></c>
			<haxe_doc>A block declaration `{el}`.</haxe_doc>
		</TBlock>
		<TFor a="v:e1:e2">
			<t path="haxe.macro.TVar"/>
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>A `for` expression.</haxe_doc>
		</TFor>
		<TIf a="econd:eif:eelse">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
			<haxe_doc>An `if(econd) eif` or `if(econd) eif else eelse` expression.</haxe_doc>
		</TIf>
		<TWhile a="econd:e:normalWhile">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.TypedExpr"/>
			<x path="Bool"/>
			<haxe_doc>Represents a `while` expression.
		When `normalWhile` is `true` it is `while (...)`.
		When `normalWhile` is `false` it is `do {...} while (...)`.</haxe_doc>
		</TWhile>
		<TSwitch a="e:cases:edef">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><a>
	<values><c path="Array"><t path="haxe.macro.TypedExpr"/></c></values>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
			<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
			<haxe_doc>Represents a `switch` expression with related cases and an optional
		`default` case if edef != null.</haxe_doc>
		</TSwitch>
		<TTry a="e:catches">
			<t path="haxe.macro.TypedExpr"/>
			<c path="Array"><a>
	<v><t path="haxe.macro.TVar"/></v>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
</a></c>
			<haxe_doc>Represents a `try`-expression with related catches.</haxe_doc>
		</TTry>
		<TReturn a="e">
			<t path="Null"><t path="haxe.macro.TypedExpr"/></t>
			<haxe_doc>A `return` or `return e` expression.</haxe_doc>
		</TReturn>
		<TBreak><haxe_doc>A `break` expression.</haxe_doc></TBreak>
		<TContinue><haxe_doc>A `continue` expression.</haxe_doc></TContinue>
		<TThrow a="e">
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>A `throw e` expression.</haxe_doc>
		</TThrow>
		<TCast a="e:m">
			<t path="haxe.macro.TypedExpr"/>
			<t path="Null"><e path="haxe.macro.ModuleType"/></t>
			<haxe_doc>A `cast e` or `cast (e, m)` expression.</haxe_doc>
		</TCast>
		<TMeta a="m:e1">
			<t path="haxe.macro.MetadataEntry"/>
			<t path="haxe.macro.TypedExpr"/>
			<haxe_doc>A `@m e1` expression.</haxe_doc>
		</TMeta>
		<TEnumParameter a="e1:ef:index">
			<t path="haxe.macro.TypedExpr"/>
			<t path="haxe.macro.EnumField"/>
			<x path="Int"/>
			<haxe_doc>Access to an enum parameter (generated by the pattern matcher).</haxe_doc>
		</TEnumParameter>
		<haxe_doc>Represents kind of a node in the typed AST.</haxe_doc>
	</enum>
	<typedef path="haxe.macro.TypedExpr" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the expression.</haxe_doc>
			</t>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.TypedExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a typed AST node.</haxe_doc>
	</typedef>
	<class path="haxe.macro.TypeTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/TypeTools.hx">
		<nullable set="method" line="41" static="1"><f a="complexType">
	<e path="haxe.macro.ComplexType"/>
	<e path="haxe.macro.ComplexType"/>
</f></nullable>
		<toField set="method" line="43" static="1"><f a="cf">
	<t path="haxe.macro.ClassField"/>
	<t path="haxe.macro.Field"/>
</f></toField>
		<toComplexType public="1" set="method" line="98" static="1">
			<f a="type">
				<t path="Null"><e path="haxe.macro.Type"/></t>
				<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			</f>
			<haxe_doc>Returns a syntax-level type corresponding to Type `t`.

		This function is mostly inverse to `ComplexTypeTools.toType`, but may
		lose some information on types that do not have a corresponding syntax
		version, such as monomorphs. In these cases, the result is null.

		If `t` is null, an internal exception is thrown.</haxe_doc>
		</toComplexType>
		<toTypePath set="method" line="145" static="1"><f a="baseType:params">
	<t path="haxe.macro.BaseType"/>
	<c path="Array"><e path="haxe.macro.Type"/></c>
	<t path="haxe.macro.TypePath"/>
</f></toTypePath>
		<findField public="1" set="method" line="367" static="1">
			<f a="c:name:?isStatic" v="::false">
				<t path="haxe.macro.ClassType"/>
				<c path="String"/>
				<x path="Bool"/>
				<t path="Null"><t path="haxe.macro.ClassField"/></t>
			</f>
			<meta><m n=":value"><e>{ isStatic : false }</e></m></meta>
			<haxe_doc>Resolves the field named `name` on class `c`.

		If `isStatic` is true, the classes' static fields are checked. Otherwise
		the classes' member fields are checked.

		If the field is found, it is returned. Otherwise if `c` has a super
		class, `findField` recursively checks that super class. Otherwise null
		is returned.

		If any argument is null, the result is unspecified.</haxe_doc>
		</findField>
		<haxe_doc>This class provides some utility methods to work with types. It is
	best used through 'using haxe.macro.TypeTools' syntax and then provides
	additional methods on haxe.macro.Type instances.</haxe_doc>
	</class>
	<class path="haxe.macro.TypedExprTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/macro/TypedExprTools.hx">
		<with set="method" line="33" static="1"><f a="e:?edef:?t">
	<t path="haxe.macro.TypedExpr"/>
	<e path="haxe.macro.TypedExprDef"/>
	<e path="haxe.macro.Type"/>
	<a>
		<t><e path="haxe.macro.Type"/></t>
		<pos><t path="haxe.macro.Position"/></pos>
		<expr><e path="haxe.macro.TypedExprDef"/></expr>
	</a>
</f></with>
		<map public="1" set="method" line="48" static="1">
			<f a="e:f">
				<t path="haxe.macro.TypedExpr"/>
				<f a="">
					<t path="haxe.macro.TypedExpr"/>
					<t path="haxe.macro.TypedExpr"/>
				</f>
				<t path="haxe.macro.TypedExpr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of `e` by calling `f` on each of them.

		See `haxe.macro.ExprTools.map` for details on expression mapping in
		general. This function works the same way, but with a different data
		structure.</haxe_doc>
		</map>
		<iter public="1" set="method" line="83" static="1">
			<f a="e:f">
				<t path="haxe.macro.TypedExpr"/>
				<f a="">
					<t path="haxe.macro.TypedExpr"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls function `f` on each sub-expression of `e`.

		See `haxe.macro.ExprTools.iter` for details on iterating expressions in
		general. This function works the same way, but with a different data
		structure.</haxe_doc>
		</iter>
		<mapWithType public="1" set="method" line="128" static="1">
			<f a="e:f:ft:fv">
				<t path="haxe.macro.TypedExpr"/>
				<f a="">
					<t path="haxe.macro.TypedExpr"/>
					<t path="haxe.macro.TypedExpr"/>
				</f>
				<f a="">
					<e path="haxe.macro.Type"/>
					<e path="haxe.macro.Type"/>
				</f>
				<f a="">
					<t path="haxe.macro.TVar"/>
					<t path="haxe.macro.TVar"/>
				</f>
				<t path="haxe.macro.TypedExpr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of `e` by calling `f` on each of them.
		Additionally, types are mapped using `ft` and variables are mapped using
		`fv`.

		See `haxe.macro.ExprTools.map` for details on expression mapping in
		general. This function works the same way, but with a different data
		structure.</haxe_doc>
		</mapWithType>
		<haxe_doc>This class provides some utility methods to work with typed expressions.
	It is best used through 'using haxe.macro.TypedExprTools' syntax and then
	provides additional methods on `haxe.macro.TypedExpr` instances.</haxe_doc>
	</class>
	<class path="haxe.remoting.AsyncConnection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/AsyncConnection.hx" interface="1">
		<resolve public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<call public="1" set="method"><f a="params:?result">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<setErrorHandler public="1" set="method"><f a="error">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<haxe_doc>For asynchronous connections, where the results are events that will be resolved later in the execution process.</haxe_doc>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.AMFConnection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/AMFConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<__data><a>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
	<cnx><d/></cnx>
</a></__data>
		<__path><c path="Array"><c path="String"/></c></__path>
		<resolve public="1" set="method" line="44"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="50"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<close public="1" set="method" line="54"><f a=""><x path="Void"/></f></close>
		<call public="1" set="method" line="58">
			<f a="params:?onResult">
				<c path="Array"><d/></c>
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</call>
		<new set="method" line="39"><f a="data:path">
	<a>
		<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
		<cnx><d/></cnx>
	</a>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>Allows a connection to an AMF Remoting server such as Flash Media Server or AMFPHP.</haxe_doc>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.AsyncAdapter" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/AsyncAdapter.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<create public="1" set="method" line="56" static="1"><f a="cnx">
	<c path="haxe.remoting.Connection"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></create>
		<__cnx><c path="haxe.remoting.Connection"/></__cnx>
		<__error><a><ref><f a="">
	<d/>
	<x path="Void"/>
</f></ref></a></__error>
		<resolve public="1" set="method" line="37"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="41"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<call public="1" set="method" line="45"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<new set="method" line="32"><f a="cnx:error">
	<c path="haxe.remoting.Connection"/>
	<a><ref><f a="">
	<d/>
	<x path="Void"/>
</f></ref></a>
	<x path="Void"/>
</f></new>
		<haxe_doc>Build an AsyncConnection from a synchronized Connection.</haxe_doc>
	</class>
	<class path="haxe.remoting.AsyncDebugConnection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/AsyncDebugConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<create public="1" set="method" line="76" static="1"><f a="cnx">
	<c path="haxe.remoting.AsyncConnection"/>
	<c path="haxe.remoting.AsyncDebugConnection"/>
</f></create>
		<__path><c path="Array"><c path="String"/></c></__path>
		<__cnx><c path="haxe.remoting.AsyncConnection"/></__cnx>
		<__data><a>
	<onresult><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<x path="Void"/>
</f></onresult>
	<onerror><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<x path="Void"/>
</f></onerror>
	<oncall><f a=":">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></oncall>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
</a></__data>
		<resolve public="1" set="method" line="41"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="47"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<setErrorDebug public="1" set="method" line="51"><f a="h">
	<f a="::">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorDebug>
		<setResultDebug public="1" set="method" line="55"><f a="h">
	<f a="::">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setResultDebug>
		<setCallDebug public="1" set="method" line="59"><f a="h">
	<f a=":">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setCallDebug>
		<call public="1" set="method" line="63"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<new set="method" line="35"><f a="path:cnx:data">
	<c path="Array"><c path="String"/></c>
	<c path="haxe.remoting.AsyncConnection"/>
	<a>
		<onresult><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<x path="Void"/>
</f></onresult>
		<onerror><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<x path="Void"/>
</f></onerror>
		<oncall><f a=":">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></oncall>
		<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
	</a>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncDebugConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.AsyncProxy" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/AsyncProxy.hx">
		<__cnx><c path="haxe.remoting.AsyncConnection"/></__cnx>
		<new set="method" line="33"><f a="c">
	<c path="haxe.remoting.AsyncConnection"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>This class is magic. When you extend it with a class C, it will automaticaly
	create a stub class with all public methods forwarding remoting messages over
	the connection.</haxe_doc>
	</class>
	<class path="haxe.remoting.Connection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/Connection.hx" interface="1">
		<resolve public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.Connection"/>
</f></resolve>
		<call public="1" set="method"><f a="params">
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<haxe_dynamic><c path="haxe.remoting.Connection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.Context" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/Context.hx">
		<share public="1" set="method" line="58" static="1"><f a="name:obj">
	<c path="String"/>
	<a/>
	<c path="haxe.remoting.Context"/>
</f></share>
		<objects><c path="haxe.ds.StringMap"><a>
	<rec><x path="Bool"/></rec>
	<obj><d/></obj>
</a></c></objects>
		<addObject public="1" set="method" line="35"><f a="name:obj:?recursive">
	<c path="String"/>
	<a/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addObject>
		<call public="1" set="method" line="39"><f a="path:params">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<new public="1" set="method" line="31"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Allows communication between platforms. This is a shared API that can be called on the connection at the client code.</haxe_doc>
	</class>
	<class path="haxe.remoting.ContextAll" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/ContextAll.hx">
		<extends path="haxe.remoting.Context"/>
		<call public="1" set="method" line="26" override="1"><f a="path:params">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<new public="1" set="method" line="24"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.remoting.DelayedConnection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/DelayedConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<process set="method" line="70" static="1"><f a="d">
	<c path="haxe.remoting.DelayedConnection"/>
	<x path="Void"/>
</f></process>
		<create public="1" set="method" line="86" static="1"><f a=""><c path="haxe.remoting.DelayedConnection"/></f></create>
		<connection public="1" get="accessor" set="accessor"><c path="haxe.remoting.AsyncConnection"/></connection>
		<__path><c path="Array"><c path="String"/></c></__path>
		<__data><a>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
	<cnx><c path="haxe.remoting.AsyncConnection"/></cnx>
	<cache><c path="Array"><a>
	<path><c path="Array"><c path="String"/></c></path>
	<params><c path="Array"><d/></c></params>
	<onResult><f a="">
	<d/>
	<x path="Void"/>
</f></onResult>
	<onError><f a="">
	<d/>
	<x path="Void"/>
</f></onError>
</a></c></cache>
</a></__data>
		<setErrorHandler public="1" set="method" line="45"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<resolve public="1" set="method" line="49"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<get_connection set="method" line="55"><f a=""><c path="haxe.remoting.AsyncConnection"/></f></get_connection>
		<set_connection set="method" line="59"><f a="cnx">
	<c path="haxe.remoting.AsyncConnection"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></set_connection>
		<call public="1" set="method" line="65"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<new set="method" line="40"><f a="data:path">
	<a>
		<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
		<cnx><c path="haxe.remoting.AsyncConnection"/></cnx>
		<cache><c path="Array"><a>
	<path><c path="Array"><c path="String"/></c></path>
	<params><c path="Array"><d/></c></params>
	<onResult><f a="">
	<d/>
	<x path="Void"/>
</f></onResult>
	<onError><f a="">
	<d/>
	<x path="Void"/>
</f></onError>
</a></c></cache>
	</a>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.ExternalConnection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/ExternalConnection.hx">
		<implements path="haxe.remoting.Connection"/>
		<escapeString get="inline" set="null" line="53" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></escapeString>
		<connections expr="new haxe.ds.StringMap&lt;ExternalConnection&gt;()" line="94" static="1">
			<c path="haxe.ds.StringMap"><c path="haxe.remoting.ExternalConnection"/></c>
			<meta><m n=":value"><e><![CDATA[new haxe.ds.StringMap<ExternalConnection>()]]></e></m></meta>
		</connections>
		<doCall set="method" line="97" static="1">
			<f a="name:path:params">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":keep"/></meta>
		</doCall>
		<flashConnect public="1" set="method" line="134" static="1"><f a="name:flashObjectID:?ctx">
	<c path="String"/>
	<c path="String"/>
	<c path="haxe.remoting.Context"/>
	<c path="haxe.remoting.ExternalConnection"/>
</f></flashConnect>
		<__data><a>
	<name><c path="String"/></name>
	<flash><c path="String"/></flash>
	<ctx><c path="haxe.remoting.Context"/></ctx>
</a></__data>
		<__path><c path="Array"><c path="String"/></c></__path>
		<resolve public="1" set="method" line="38"><f a="field">
	<c path="String"/>
	<c path="haxe.remoting.Connection"/>
</f></resolve>
		<close public="1" set="method" line="44"><f a=""><x path="Void"/></f></close>
		<call public="1" set="method" line="58">
			<f a="params">
				<c path="Array"><d/></c>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</call>
		<new set="method" line="33"><f a="data:path">
	<a>
		<name><c path="String"/></name>
		<flash><c path="String"/></flash>
		<ctx><c path="haxe.remoting.Context"/></ctx>
	</a>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>Synchronous communications between Flash and Javascript.</haxe_doc>
		<meta><m n=":expose"/></meta>
		<haxe_dynamic><c path="haxe.remoting.Connection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.FlashJsConnection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/FlashJsConnection.hx"><flashCall set="method" line="138" static="1">
	<f a="flashObj:name:path:params">
		<c path="String"/>
		<c path="String"/>
		<c path="String"/>
		<c path="String"/>
		<c path="String"/>
	</f>
	<meta><m n=":has_untyped"/></meta>
</flashCall></class>
	<class path="haxe.remoting.HttpAsyncConnection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/HttpAsyncConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<urlConnect public="1" set="method" line="76" static="1"><f a="url">
	<c path="String"/>
	<c path="haxe.remoting.HttpAsyncConnection"/>
</f></urlConnect>
		<__data><a>
	<url><c path="String"/></url>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
</a></__data>
		<__path><c path="Array"><c path="String"/></c></__path>
		<resolve public="1" set="method" line="37"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="43"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<call public="1" set="method" line="47"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<new set="method" line="32"><f a="data:path">
	<a>
		<url><c path="String"/></url>
		<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
	</a>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>Allows an asynchronous connection to the given URL which should link to a Haxe server application.</haxe_doc>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.HttpConnection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/HttpConnection.hx">
		<implements path="haxe.remoting.Connection"/>
		<TIMEOUT public="1" expr="10." line="29" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>10.</e></m></meta>
		</TIMEOUT>
		<urlConnect public="1" set="method" line="73" static="1"><f a="url">
	<c path="String"/>
	<c path="haxe.remoting.HttpConnection"/>
</f></urlConnect>
		<processRequest public="1" set="method" line="97" static="1"><f a="requestData:ctx">
	<c path="String"/>
	<c path="haxe.remoting.Context"/>
	<c path="String"/>
</f></processRequest>
		<__url><c path="String"/></__url>
		<__path><c path="Array"><c path="String"/></c></__path>
		<resolve public="1" set="method" line="39"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.Connection"/>
</f></resolve>
		<call public="1" set="method" line="45"><f a="params">
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<new set="method" line="34"><f a="url:path">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>Allows a synchronous connection to the given URL which should link to a Haxe server application.</haxe_doc>
		<haxe_dynamic><c path="haxe.remoting.Connection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.LocalConnection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/LocalConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<ID expr="0" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</ID>
		<remotingCall set="method" line="78" static="1"><f a="c:id:path:args">
	<c path="haxe.remoting.LocalConnection"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></remotingCall>
		<remotingResult set="method" line="93" static="1"><f a="c:id:result">
	<c path="haxe.remoting.LocalConnection"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></remotingResult>
		<__path><c path="Array"><c path="String"/></c></__path>
		<__data><a>
	<target><c path="String"/></target>
	<results><c path="haxe.ds.IntMap"><a>
	<result><f a="">
	<d/>
	<x path="Void"/>
</f></result>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
</a></c></results>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
	<ctx><c path="haxe.remoting.Context"/></ctx>
	<cnx><d/></cnx>
</a></__data>
		<resolve public="1" set="method" line="49"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="55"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<call public="1" set="method" line="59"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<close public="1" set="method" line="74"><f a=""><x path="Void"/></f></close>
		<new set="method" line="44"><f a="data:path">
	<a>
		<target><c path="String"/></target>
		<results><c path="haxe.ds.IntMap"><a>
	<result><f a="">
	<d/>
	<x path="Void"/>
</f></result>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
</a></c></results>
		<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
		<ctx><c path="haxe.remoting.Context"/></ctx>
		<cnx><d/></cnx>
	</a>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>Allows communications to a different application that runs on the same client device</haxe_doc>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.Proxy" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/Proxy.hx">
		<__cnx><c path="haxe.remoting.Connection"/></__cnx>
		<new set="method" line="33"><f a="c">
	<c path="haxe.remoting.Connection"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>When you extend it with a class C, it will automatically
	create a stub class with all public methods forwarding remoting messages over
	the connection.</haxe_doc>
	</class>
	<class path="haxe.remoting.SocketConnection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/SocketConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<create public="1" set="method" line="123" static="1"><f a="s:?ctx">
	<t path="haxe.remoting.Socket"/>
	<c path="haxe.remoting.Context"/>
	<c path="haxe.remoting.SocketConnection"/>
</f></create>
		<__path><c path="Array"><c path="String"/></c></__path>
		<__data><a>
	<timer><c path="haxe.Timer"/></timer>
	<results><c path="List"><a>
	<onResult><f a="">
	<d/>
	<x path="Void"/>
</f></onResult>
	<onError><f a="">
	<d/>
	<x path="Void"/>
</f></onError>
</a></c></results>
	<queue><c path="Array"><f a=""><x path="Void"/></f></c></queue>
	<protocol><c path="haxe.remoting.SocketProtocol"/></protocol>
	<log><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<x path="Void"/>
</f></log>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
</a></__data>
		<resolve public="1" set="method" line="47"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<call public="1" set="method" line="53"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<setErrorHandler public="1" set="method" line="62"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<setErrorLogger public="1" set="method" line="66"><f a="h">
	<f a="::">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorLogger>
		<setProtocol public="1" set="method" line="70"><f a="p">
	<c path="haxe.remoting.SocketProtocol"/>
	<x path="Void"/>
</f></setProtocol>
		<getProtocol public="1" set="method" line="74"><f a=""><c path="haxe.remoting.SocketProtocol"/></f></getProtocol>
		<close public="1" set="method" line="78"><f a=""><x path="Void"/></f></close>
		<processMessage public="1" set="method" line="82"><f a="data">
	<c path="String"/>
	<x path="Void"/>
</f></processMessage>
		<defaultLog set="method" line="114"><f a="path:args:e">
	<a><join set="null"><f a="">
	<c path="String"/>
	<c path="String"/>
</f></join></a>
	<a><join set="null"><f a="">
	<c path="String"/>
	<c path="String"/>
</f></join></a>
	<unknown/>
	<x path="Void"/>
</f></defaultLog>
		<new set="method" line="42"><f a="data:path">
	<a>
		<timer><c path="haxe.Timer"/></timer>
		<results><c path="List"><a>
	<onResult><f a="">
	<d/>
	<x path="Void"/>
</f></onResult>
	<onError><f a="">
	<d/>
	<x path="Void"/>
</f></onError>
</a></c></results>
		<queue><c path="Array"><f a=""><x path="Void"/></f></c></queue>
		<protocol><c path="haxe.remoting.SocketProtocol"/></protocol>
		<log><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<x path="Void"/>
</f></log>
		<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
	</a>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>Allows remoting communications over a socket connection</haxe_doc>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<typedef path="haxe.remoting.Socket" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/SocketProtocol.hx" module="haxe.remoting.SocketProtocol"><c path="js.XMLSocket"/></typedef>
	<class path="haxe.remoting.SocketProtocol" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/remoting/SocketProtocol.hx">
		<socket public="1"><t path="haxe.remoting.Socket"/></socket>
		<context public="1"><c path="haxe.remoting.Context"/></context>
		<decodeChar set="method" line="64"><f a="c">
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
</f></decodeChar>
		<encodeChar set="method" line="83"><f a="c">
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
</f></encodeChar>
		<messageLength public="1" set="method" line="104"><f a="c1:c2">
	<x path="Int"/>
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
</f></messageLength>
		<encodeMessageLength public="1" set="method" line="112"><f a="len">
	<x path="Int"/>
	<a>
		<c2><t path="Null"><x path="Int"/></t></c2>
		<c1><t path="Null"><x path="Int"/></t></c1>
	</a>
</f></encodeMessageLength>
		<sendRequest public="1" set="method" line="120"><f a="path:params">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></sendRequest>
		<sendAnswer public="1" set="method" line="128"><f a="answer:?isException">
	<d/>
	<x path="Bool"/>
	<x path="Void"/>
</f></sendAnswer>
		<sendMessage public="1" set="method" line="138"><f a="msg">
	<c path="String"/>
	<x path="Void"/>
</f></sendMessage>
		<decodeData public="1" set="dynamic" line="151"><f a="data">
	<c path="String"/>
	<c path="String"/>
</f></decodeData>
		<isRequest public="1" set="method" line="155"><f a="data">
	<c path="String"/>
	<x path="Bool"/>
</f></isRequest>
		<processRequest public="1" set="method" line="163"><f a="data:?onError">
	<c path="String"/>
	<f a="::">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></processRequest>
		<processAnswer public="1" set="method" line="185"><f a="data">
	<c path="String"/>
	<d/>
</f></processAnswer>
		<new public="1" set="method" line="59"><f a="sock:ctx">
	<t path="haxe.remoting.Socket"/>
	<c path="haxe.remoting.Context"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>The Haxe Remoting Socket Protocol is composed of serialized string exchanges.
	Each string is prefixed with a 2-chars header encoding the string size (up to 4KB)
	and postfixed with the `\0` message delimiting char.

	A request string is composed of the following serialized values :

	 - the boolean true for a request
	 - an array of strings representing the object+method path
	 - an array of parameters

	A response string is composed of the following serialized values :

	 - the boolean false for a response
	 - a serialized value representing the result

	Exceptions are serialized with `serializeException` so they will be thrown immediately
	when they are unserialized.</haxe_doc>
	</class>
	<typedef path="haxe.rtti.Path" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="String"/>
		<haxe_doc>The (dot-)path of the runtime type.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Platforms" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="List"><c path="String"/></c>
		<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.FunctionArgument" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<value>
				<t path="Null"><c path="String"/></t>
				<meta><m n=":optional"/></meta>
			</value>
			<t><e path="haxe.rtti.CType"/></t>
			<opt><x path="Bool"/></opt>
			<name><c path="String"/></name>
		</a>
		<haxe_doc>The function argument runtime type information.</haxe_doc>
	</typedef>
	<enum path="haxe.rtti.CType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx">
		<CUnknown/>
		<CEnum a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CEnum>
		<CClass a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CClass>
		<CTypedef a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CTypedef>
		<CFunction a="args:ret">
			<c path="List"><t path="haxe.rtti.FunctionArgument"/></c>
			<e path="haxe.rtti.CType"/>
		</CFunction>
		<CAnonymous a="fields"><c path="List"><t path="haxe.rtti.ClassField"/></c></CAnonymous>
		<CDynamic a="?t"><e path="haxe.rtti.CType"/></CDynamic>
		<CAbstract a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CAbstract>
		<haxe_doc>The runtime member types.</haxe_doc>
	</enum>
	<typedef path="haxe.rtti.PathParams" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The path of the type.</haxe_doc>
			</path>
			<params>
				<c path="List"><e path="haxe.rtti.CType"/></c>
				<haxe_doc>The list of parameters types.</haxe_doc>
			</params>
		</a>
		<haxe_doc>The type parameters in the runtime type information.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.TypeParams" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="Array"><c path="String"/></c>
		<haxe_doc>An array of strings representing the names of the type parameters the type 
	has. As of Haxe 3.2.0, this does not include the constraints.</haxe_doc>
	</typedef>
	<enum path="haxe.rtti.Rights" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<RNormal/>
		<RNo/>
		<RCall a="m"><c path="String"/></RCall>
		<RMethod/>
		<RDynamic/>
		<RInline/>
		<haxe_doc>Represents the runtime rights of a type.</haxe_doc>
	</enum>
	<typedef path="haxe.rtti.MetaData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="Array"><a>
	<params><c path="Array"><c path="String"/></c></params>
	<name><c path="String"/></name>
</a></c>
		<haxe_doc>The list of runtime metadata.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.ClassField" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<type>
				<e path="haxe.rtti.CType"/>
				<haxe_doc>The type of the field.</haxe_doc>
			</type>
			<set>
				<e path="haxe.rtti.Rights"/>
				<haxe_doc>The [write access](https://haxe.org/manual/dictionary.html#define-write-access)
		behavior of the field.</haxe_doc>
			</set>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the field is available.</haxe_doc>
			</platforms>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters 
		the field has.</haxe_doc>
			</params>
			<overloads>
				<t path="Null"><c path="List"><t path="haxe.rtti.ClassField"/></c></t>
				<haxe_doc>The list of available overloads for the fields or `null` if no overloads 
		exists.</haxe_doc>
			</overloads>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The meta data the field was annotated with.</haxe_doc>
			</meta>
			<line>
				<t path="Null"><x path="Int"/></t>
				<haxe_doc>The line number where the field is defined. This information is only 
		available if the field has an expression. 
		Otherwise the value is `null`.</haxe_doc>
			</line>
			<isPublic>
				<x path="Bool"/>
				<haxe_doc>Whether or not the field is public.</haxe_doc>
			</isPublic>
			<isOverride>
				<x path="Bool"/>
				<haxe_doc>Whether or not the field overrides another field.</haxe_doc>
			</isOverride>
			<get>
				<e path="haxe.rtti.Rights"/>
				<haxe_doc>The [read access](https://haxe.org/manual/dictionary.html#define-read-access) 
		behavior of the field.</haxe_doc>
			</get>
			<expr>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The actual expression of the field or `null` if there is no expression.</haxe_doc>
			</expr>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The documentation of the field. This information is only available 
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or 
		if the field has no documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc><![CDATA[The runtime class field information.
	
	@see <https://haxe.org/manual/cr-rtti-structure.html#class-field-information>]]></haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.TypeInfos" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the 
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was 
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [private](https://haxe.org/manual/dictionary.html#define-private-type).</haxe_doc>
			</isPrivate>
			<file>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The full slash path of the .hx file containing the type. 
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The general runtime type information.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Classdef" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<tdynamic>
				<t path="Null"><e path="haxe.rtti.CType"/></t>
				<haxe_doc>The type which is dynamically implemented by the class or `null` if no
		such type exists.</haxe_doc>
			</tdynamic>
			<superClass>
				<t path="Null"><t path="haxe.rtti.PathParams"/></t>
				<haxe_doc>The class' parent class defined by its type path and list of type 
		parameters.</haxe_doc>
			</superClass>
			<statics>
				<c path="List"><t path="haxe.rtti.ClassField"/></c>
				<haxe_doc>The list of static class fields.</haxe_doc>
			</statics>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the 
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was 
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [private](https://haxe.org/manual/dictionary.html#define-private-type).</haxe_doc>
			</isPrivate>
			<isInterface>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class is actually an [interface](https://haxe.org/manual/types-interfaces.html).</haxe_doc>
			</isInterface>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class is [extern](https://haxe.org/manual/lf-externs.html).</haxe_doc>
			</isExtern>
			<interfaces>
				<c path="List"><t path="haxe.rtti.PathParams"/></c>
				<haxe_doc>The list of interfaces defined by their type path and list of type 
		parameters.</haxe_doc>
			</interfaces>
			<file>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The full slash path of the .hx file containing the type. 
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<fields>
				<c path="List"><t path="haxe.rtti.ClassField"/></c>
				<haxe_doc>The list of member [class fields](https://haxe.org/manual/class-field.html).</haxe_doc>
			</fields>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The runtime class definition information.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.EnumField" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the constructor is
		available.</haxe_doc>
			</platforms>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the constructor.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The meta data the constructor was annotated with.</haxe_doc>
			</meta>
			<doc>
				<c path="String"/>
				<haxe_doc>The documentation of the constructor. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
			<args>
				<t path="Null"><c path="List"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c></t>
				<haxe_doc>The list of arguments the constructor has or `null` if no arguments are 
		available.</haxe_doc>
			</args>
		</a>
		<haxe_doc><![CDATA[The runtime enum constructor information.
	
	@see <https://haxe.org/manual/cr-rtti-structure.html#enum-constructor-information>]]></haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Enumdef" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the 
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was 
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [private](https://haxe.org/manual/dictionary.html#define-private-type).</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the enum is [extern](https://haxe.org/manual/lf-externs.html).</haxe_doc>
			</isExtern>
			<file>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The full slash path of the .hx file containing the type. 
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
			<constructors>
				<c path="List"><t path="haxe.rtti.EnumField"/></c>
				<haxe_doc>The list of enum constructors.</haxe_doc>
			</constructors>
		</a>
		<haxe_doc><![CDATA[The enum runtime type information.
	
	@see <https://haxe.org/manual/cr-rtti-structure.html#enum-type-information>]]></haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Typedef" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<types>
				<x path="Map">
					<c path="String"/>
					<e path="haxe.rtti.CType"/>
				</x>
				<haxe_doc>The types of the typedef, by platform.</haxe_doc>
			</types>
			<type>
				<e path="haxe.rtti.CType"/>
				<haxe_doc>The type of the typedef.</haxe_doc>
			</type>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the 
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was 
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [private](https://haxe.org/manual/dictionary.html#define-private-type).</haxe_doc>
			</isPrivate>
			<file>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The full slash path of the .hx file containing the type. 
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The typedef runtime information.</haxe_doc>
	</typedef>
	<typedef path="haxe.rtti.Abstractdef" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<a>
			<to><c path="Array"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<field><t path="Null"><c path="String"/></t></field>
</a></c></to>
			<platforms>
				<t path="haxe.rtti.Platforms"/>
				<haxe_doc>A list of strings representing the targets where the type is available.</haxe_doc>
			</platforms>
			<path>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the type.</haxe_doc>
			</path>
			<params>
				<t path="haxe.rtti.TypeParams"/>
				<haxe_doc>An array of strings representing the names of the type parameters the 
		type has.</haxe_doc>
			</params>
			<module>
				<t path="haxe.rtti.Path"/>
				<haxe_doc>The type path of the module containing the type.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.rtti.MetaData"/>
				<haxe_doc>The [metadata](https://haxe.org/manual/lf-metadata.html) the type was 
		annotated with.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is [private](https://haxe.org/manual/dictionary.html#define-private-type).</haxe_doc>
			</isPrivate>
			<impl><t path="haxe.rtti.Classdef"/></impl>
			<from><c path="Array"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<field><t path="Null"><c path="String"/></t></field>
</a></c></from>
			<file>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The full slash path of the .hx file containing the type. 
		This might be `null` in case there is no such file, e.g. if the
		type is defined through a macro.</haxe_doc>
			</file>
			<doc>
				<t path="Null"><c path="String"/></t>
				<haxe_doc>The documentation of the type. This information is only available
		if the compiler flag `-D use_rtti_doc` was in place. Otherwise, or if
		the constructor has no documentation, the value is `null`.</haxe_doc>
			</doc>
			<athis><e path="haxe.rtti.CType"/></athis>
		</a>
		<haxe_doc><![CDATA[The abstract type runtime information.
	
	@see <https://haxe.org/manual/cr-rtti-structure.html#abstract-type-information>]]></haxe_doc>
	</typedef>
	<enum path="haxe.rtti.TypeTree" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<TPackage a="name:full:subs">
			<c path="String"/>
			<c path="String"/>
			<c path="Array"><e path="haxe.rtti.TypeTree"/></c>
		</TPackage>
		<TClassdecl a="c"><t path="haxe.rtti.Classdef"/></TClassdecl>
		<TEnumdecl a="e"><t path="haxe.rtti.Enumdef"/></TEnumdecl>
		<TTypedecl a="t"><t path="haxe.rtti.Typedef"/></TTypedecl>
		<TAbstractdecl a="a"><t path="haxe.rtti.Abstractdef"/></TAbstractdecl>
		<haxe_doc>The tree types of the runtime type.</haxe_doc>
	</enum>
	<typedef path="haxe.rtti.TypeRoot" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<c path="Array"><e path="haxe.rtti.TypeTree"/></c>
		<haxe_doc>List of `TypeTree`.</haxe_doc>
	</typedef>
	<class path="haxe.rtti.TypeApi" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<typeInfos public="1" set="method" line="366" static="1"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<t path="haxe.rtti.TypeInfos"/>
</f></typeInfos>
		<isVar public="1" set="method" line="382" static="1">
			<f a="t">
				<e path="haxe.rtti.CType"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the given `CType` is a variable or `false` if it is a
		function.</haxe_doc>
		</isVar>
		<leq params="T" set="method" line="389" static="1"><f a="f:l1:l2">
	<f a=":">
		<c path="leq.T"/>
		<c path="leq.T"/>
		<x path="Bool"/>
	</f>
	<c path="List"><c path="leq.T"/></c>
	<c path="List"><c path="leq.T"/></c>
	<x path="Bool"/>
</f></leq>
		<rightsEq public="1" set="method" line="409" static="1">
			<f a="r1:r2">
				<e path="haxe.rtti.Rights"/>
				<e path="haxe.rtti.Rights"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Unlike `r1 == r2`, this function performs a deep equality check on 
		the given `Rights` instances.

		If `r1` or `r2` are `null`, the result is unspecified.</haxe_doc>
		</rightsEq>
		<typeEq public="1" set="method" line="430" static="1">
			<f a="t1:t2">
				<e path="haxe.rtti.CType"/>
				<e path="haxe.rtti.CType"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Unlike `t1 == t2`, this function performs a deep equality check on 
		the given `CType` instances.

		If `t1` or `t2` are `null`, the result is unspecified.</haxe_doc>
		</typeEq>
		<fieldEq public="1" set="method" line="489" static="1">
			<f a="f1:f2">
				<t path="haxe.rtti.ClassField"/>
				<t path="haxe.rtti.ClassField"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Unlike `f1 == f2`, this function performs a deep equality check on 
		the given `ClassField` instances.

		If `f1` or `f2` are `null`, the result is unspecified.</haxe_doc>
		</fieldEq>
		<constructorEq public="1" set="method" line="515" static="1">
			<f a="c1:c2">
				<t path="haxe.rtti.EnumField"/>
				<t path="haxe.rtti.EnumField"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Unlike `c1 == c2`, this function performs a deep equality check on 
		the arguments of the enum constructors, if exists.

		If `c1` or `c2` are `null`, the result is unspecified.</haxe_doc>
		</constructorEq>
		<haxe_doc>Contains type and equality checks functionalities for RTTI.</haxe_doc>
	</class>
	<class path="haxe.rtti.CTypeTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<toString public="1" set="method" line="537" static="1">
			<f a="t">
				<e path="haxe.rtti.CType"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the string representation of `CType`.</haxe_doc>
		</toString>
		<nameWithParams set="method" line="560" static="1"><f a="name:params">
	<c path="String"/>
	<c path="List"><e path="haxe.rtti.CType"/></c>
	<c path="String"/>
</f></nameWithParams>
		<functionArgumentName set="method" line="567" static="1"><f a="arg">
	<t path="haxe.rtti.FunctionArgument"/>
	<c path="String"/>
</f></functionArgumentName>
		<classField set="method" line="571" static="1"><f a="cf">
	<t path="haxe.rtti.ClassField"/>
	<c path="String"/>
</f></classField>
		<haxe_doc>The CTypeTools class contains some extra functionalities for handling
	`CType` instances.</haxe_doc>
	</class>
	<typedef path="haxe.rtti._Meta.MetaObject" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/Meta.hx" private="1" module="haxe.rtti.Meta"><a>
	<statics>
		<t path="Null"><d><d><t path="Null"><c path="Array"><d/></c></t></d></d></t>
		<meta><m n=":optional"/></meta>
	</statics>
	<obj>
		<t path="Null"><d><t path="Null"><c path="Array"><d/></c></t></d></t>
		<meta><m n=":optional"/></meta>
	</obj>
	<fields>
		<t path="Null"><d><d><t path="Null"><c path="Array"><d/></c></t></d></d></t>
		<meta><m n=":optional"/></meta>
	</fields>
</a></typedef>
	<class path="haxe.rtti.Meta" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/Meta.hx">
		<getType public="1" set="method" line="40" static="1">
			<f a="t">
				<d/>
				<d><c path="Array"><d/></c></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given type (class or enum)</haxe_doc>
		</getType>
		<isInterface set="method" line="46" static="1"><f a="t">
	<d/>
	<x path="Bool"/>
</f></isInterface>
		<getMeta set="method" line="60" static="1">
			<f a="t">
				<d/>
				<t path="haxe.rtti._Meta.MetaObject"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getMeta>
		<getStatics public="1" set="method" line="91" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given class static fields</haxe_doc>
		</getStatics>
		<getFields public="1" set="method" line="99" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given class fields or enum constructors</haxe_doc>
		</getFields>
		<haxe_doc><![CDATA[An API to access classes and enums metadata at runtime.

	@see <https://haxe.org/manual/cr-rtti.html>]]></haxe_doc>
	</class>
	<class path="haxe.rtti.Rtti" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/Rtti.hx">
		<getRtti public="1" params="T" set="method" line="41" static="1">
			<f a="c">
				<x path="Class"><c path="getRtti.T"/></x>
				<t path="haxe.rtti.Classdef"/>
			</f>
			<haxe_doc>Returns the `haxe.rtti.CType.Classdef` corresponding to class `c`.

		If `c` has no runtime type information, e.g. because no `@:rtti@` was
		added, `null` is returned.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getRtti>
		<hasRtti public="1" params="T" set="method" line="59" static="1">
			<f a="c">
				<x path="Class"><c path="hasRtti.T"/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `c` has runtime type information.

		If `c` is null, the result is unspecified.</haxe_doc>
		</hasRtti>
		<haxe_doc><![CDATA[Rtti is a helper class which supplements the `@:rtti` metadata.
	
	@see <https://haxe.org/manual/cr-rtti.html>]]></haxe_doc>
	</class>
	<class path="haxe.rtti.XmlParser" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/rtti/XmlParser.hx">
		<root public="1"><t path="haxe.rtti.TypeRoot"/></root>
		<curplatform><c path="String"/></curplatform>
		<sort public="1" set="method" line="41"><f a="?l">
	<t path="haxe.rtti.TypeRoot"/>
	<x path="Void"/>
</f></sort>
		<sortFields set="method" line="68"><f a="fl">
	<t path="Iterable"><t path="haxe.rtti.ClassField"/></t>
	<c path="List"><t path="haxe.rtti.ClassField"/></c>
</f></sortFields>
		<process public="1" set="method" line="88"><f a="x:platform">
	<c path="Xml"/>
	<c path="String"/>
	<x path="Void"/>
</f></process>
		<mergeRights set="method" line="94"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></mergeRights>
		<mergeDoc set="method" line="103"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></mergeDoc>
		<mergeFields set="method" line="111"><f a="f:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></mergeFields>
		<newField public="1" set="dynamic" line="115"><f a="c:f">
	<t path="haxe.rtti.Classdef"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Void"/>
</f></newField>
		<mergeClasses set="method" line="118"><f a="c:c2">
	<t path="haxe.rtti.Classdef"/>
	<t path="haxe.rtti.Classdef"/>
	<x path="Bool"/>
</f></mergeClasses>
		<mergeEnums set="method" line="156"><f a="e:e2">
	<t path="haxe.rtti.Enumdef"/>
	<t path="haxe.rtti.Enumdef"/>
	<x path="Bool"/>
</f></mergeEnums>
		<mergeTypedefs set="method" line="176"><f a="t:t2">
	<t path="haxe.rtti.Typedef"/>
	<t path="haxe.rtti.Typedef"/>
	<x path="Bool"/>
</f></mergeTypedefs>
		<mergeAbstracts set="method" line="184"><f a="a:a2">
	<t path="haxe.rtti.Abstractdef"/>
	<t path="haxe.rtti.Abstractdef"/>
	<x path="Bool"/>
</f></mergeAbstracts>
		<merge set="method" line="200"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<x path="Void"/>
</f></merge>
		<mkPath set="method" line="290"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.Path"/>
</f></mkPath>
		<mkTypeParams set="method" line="294"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.TypeParams"/>
</f></mkTypeParams>
		<mkRights set="method" line="301"><f a="r">
	<c path="String"/>
	<e path="haxe.rtti.Rights"/>
</f></mkRights>
		<xerror set="method" line="311"><f a="c">
	<c path="haxe.xml.Fast"/>
	<d/>
</f></xerror>
		<xroot set="method" line="315"><f a="x">
	<c path="haxe.xml.Fast"/>
	<x path="Void"/>
</f></xroot>
		<processElement public="1" set="method" line="321"><f a="x">
	<c path="Xml"/>
	<e path="haxe.rtti.TypeTree"/>
</f></processElement>
		<xmeta set="method" line="332"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.MetaData"/>
</f></xmeta>
		<xoverloads set="method" line="343"><f a="x">
	<c path="haxe.xml.Fast"/>
	<c path="List"><t path="haxe.rtti.ClassField"/></c>
</f></xoverloads>
		<xpath set="method" line="351"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.PathParams"/>
</f></xpath>
		<xclass set="method" line="362"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Classdef"/>
</f></xclass>
		<xclassfield set="method" line="402">
			<f a="x:?defPublic" v=":false">
				<c path="haxe.xml.Fast"/>
				<x path="Bool"/>
				<t path="haxe.rtti.ClassField"/>
			</f>
			<meta><m n=":value"><e>{ defPublic : false }</e></m></meta>
		</xclassfield>
		<xenum set="method" line="432"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Enumdef"/>
</f></xenum>
		<xenumfield set="method" line="457"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.EnumField"/>
</f></xenumfield>
		<xabstract set="method" line="487"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Abstractdef"/>
</f></xabstract>
		<xtypedef set="method" line="526"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Typedef"/>
</f></xtypedef>
		<xtype set="method" line="554"><f a="x">
	<c path="haxe.xml.Fast"/>
	<e path="haxe.rtti.CType"/>
</f></xtype>
		<xtypeparams set="method" line="610"><f a="x">
	<c path="haxe.xml.Fast"/>
	<c path="List"><e path="haxe.rtti.CType"/></c>
</f></xtypeparams>
		<defplat set="method" line="617"><f a=""><c path="List"><c path="String"/></c></f></defplat>
		<new public="1" set="method" line="37"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[XmlParser processes the runtime type information (RTTI) which
	is stored as a XML string in a static field `__rtti`.
	
	@see <https://haxe.org/manual/cr-rtti.html>]]></haxe_doc>
	</class>
	<class path="haxe.unit.TestCase" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/unit/TestCase.hx">
		<currentTest public="1">
			<c path="haxe.unit.TestStatus"/>
			<haxe_doc>The current test status of the TestRunner.</haxe_doc>
		</currentTest>
		<setup public="1" set="method" line="65">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Override this method to execute code before the test runs.</haxe_doc>
		</setup>
		<tearDown public="1" set="method" line="71">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Override this method to execute code after the test ran.</haxe_doc>
		</tearDown>
		<print public="1" set="method" line="74"><f a="v">
	<d/>
	<x path="Void"/>
</f></print>
		<assertTrue public="1" set="method" line="81">
			<f a="b:?c">
				<x path="Bool"/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Succeeds if `b` is `true`.</haxe_doc>
		</assertTrue>
		<assertFalse public="1" set="method" line="94">
			<f a="b:?c">
				<x path="Bool"/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Succeeds if `b` is `false`.</haxe_doc>
		</assertFalse>
		<assertEquals public="1" params="T" set="method" line="107">
			<f a="expected:actual:?c">
				<c path="assertEquals.T"/>
				<c path="assertEquals.T"/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Succeeds if `expected` and `actual` are equal.</haxe_doc>
		</assertEquals>
		<new public="1" set="method" line="59"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[This unit test class should be extended to create test cases. Each test 
	method created in this extended class should start with the name "test".

	These test methods should call the assertion methods:

	 * `assertTrue(a)`: Succeeds if `a` is `true`.
	 * `assertFalse(a)`: Succeeds if `a` is `false`.
	 * `assertEquals(expected, actual)`: Succeeds if `expected` and `actual`
	   are equal.

	```haxe
	class MyTestCase extends haxe.unit.TestCase {
		function testBasic() {
			assertEquals("A", "A");
		}
	}
	```

	The TestCase can be tested using `TestRunner`. 

	To run code before or after the test, override the functions `setup` 
	and `tearDown`.

	@see <https://haxe.org/manual/std-unit-testing.html>]]></haxe_doc>
		<meta>
			<m n=":keepSub"/>
			<m n=":publicFields"/>
		</meta>
	</class>
	<class path="haxe.unit.TestResult" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/unit/TestResult.hx">
		<m_tests><c path="List"><c path="haxe.unit.TestStatus"/></c></m_tests>
		<success public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>`true` if the unit test succesfully executed the test cases.</haxe_doc>
		</success>
		<add public="1" set="method" line="40"><f a="t">
	<c path="haxe.unit.TestStatus"/>
	<x path="Void"/>
</f></add>
		<toString public="1" set="method" line="49">
			<f a=""><c path="String"/></f>
			<haxe_doc>String representation from the result of the unit test.</haxe_doc>
		</toString>
		<new public="1" set="method" line="35"><f a=""><x path="Void"/></f></new>
		<haxe_doc>TestResult contains the result of the executed unit tests.</haxe_doc>
	</class>
	<class path="haxe.unit.TestRunner" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/unit/TestRunner.hx">
		<print public="1" set="dynamic" line="60" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Prints the given object/value.
		
		 * Flash outputs the result in a new `TextField` on stage.
		 * JavaScript outputs the result using `console.log`.
		 * Other targets use native `print` to output the result.

		This function is `dynamic` so it can be overriden in custom setups.</haxe_doc>
		</print>
		<customTrace set="method" line="104" static="1"><f a="v:?p">
	<unknown/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></customTrace>
		<result public="1" set="null">
			<c path="haxe.unit.TestResult"/>
			<haxe_doc>The unit test results. Available after the `run()` is called.</haxe_doc>
		</result>
		<cases><c path="List"><c path="haxe.unit.TestCase"/></c></cases>
		<add public="1" set="method" line="116">
			<f a="c">
				<c path="haxe.unit.TestCase"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Add TestCase instances to the unit test.</haxe_doc>
		</add>
		<run public="1" set="method" line="125">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Runs the unit tests and prints the results.
		
		@return `true` if the unit test succesfully executed the test cases.</haxe_doc>
		</run>
		<runCase set="method" line="134"><f a="t">
	<c path="haxe.unit.TestCase"/>
	<x path="Void"/>
</f></runCase>
		<new public="1" set="method" line="108"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[This class runs unit test cases and prints the result.
	
	```haxe
	var r = new haxe.unit.TestRunner();
	r.add(new MyTestCase());
	// add other TestCases here
	
	// finally, run the tests
	r.run();
	```
	
	@see <https://haxe.org/manual/std-unit-testing.html>]]></haxe_doc>
	</class>
	<class path="haxe.unit.TestStatus" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/unit/TestStatus.hx">
		<done public="1">
			<x path="Bool"/>
			<haxe_doc>`true` when the unit test is executed.</haxe_doc>
		</done>
		<success public="1">
			<x path="Bool"/>
			<haxe_doc>`true` when succesfully unit tested.</haxe_doc>
		</success>
		<error public="1">
			<c path="String"/>
			<haxe_doc>The error message of the unit test method.</haxe_doc>
		</error>
		<method public="1">
			<c path="String"/>
			<haxe_doc>The method name of the unit test.</haxe_doc>
		</method>
		<classname public="1">
			<c path="String"/>
			<haxe_doc>The class name of the unit test.</haxe_doc>
		</classname>
		<posInfos public="1">
			<t path="haxe.PosInfos"/>
			<haxe_doc>The position information of the unit test.</haxe_doc>
		</posInfos>
		<backtrace public="1">
			<c path="String"/>
			<haxe_doc>The representation of the stack exception.</haxe_doc>
		</backtrace>
		<new public="1" set="method" line="68"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[The status information of a unit test case method.

	@see <https://haxe.org/manual/std-unit-testing.html>]]></haxe_doc>
	</class>
	<typedef path="haxe.web.DispatchConfig" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch"><a>
	<rules><d/></rules>
	<obj><d/></obj>
</a></typedef>
	<typedef path="haxe.web.Lock" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch"><c path="haxe.web.Lock.T"/></typedef>
	<enum path="haxe.web.MatchRule" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch">
		<MRInt/>
		<MRBool/>
		<MRFloat/>
		<MRString/>
		<MRDate/>
		<MREnum a="e"><c path="String"/></MREnum>
		<MRDispatch/>
		<MRSpod a="c:lock">
			<c path="String"/>
			<x path="Bool"/>
		</MRSpod>
		<MROpt a="r"><e path="haxe.web.MatchRule"/></MROpt>
	</enum>
	<enum path="haxe.web.DispatchRule" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch">
		<DRMatch a="r"><e path="haxe.web.MatchRule"/></DRMatch>
		<DRMult a="r"><c path="Array"><e path="haxe.web.MatchRule"/></c></DRMult>
		<DRArgs a="r:args:opt">
			<e path="haxe.web.DispatchRule"/>
			<c path="Array"><a>
	<rule><e path="haxe.web.MatchRule"/></rule>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<x path="Bool"/>
		</DRArgs>
		<DRMeta a="r"><e path="haxe.web.DispatchRule"/></DRMeta>
	</enum>
	<enum path="haxe.web.DispatchError" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch">
		<DENotFound a="part"><c path="String"/></DENotFound>
		<DEInvalidValue/>
		<DEMissing/>
		<DEMissingParam a="p"><c path="String"/></DEMissingParam>
		<DETooManyValues/>
	</enum>
	<class path="haxe.web.Redirect" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch"><new public="1" set="method" line="65"><f a=""><x path="Void"/></f></new></class>
	<class path="haxe.web.Dispatch" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/web/Dispatch.hx">
		<GET_RULES static="1"><c path="Array"><c path="Array"><a>
	<rule><e path="haxe.web.MatchRule"/></rule>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c></c></GET_RULES>
		<make public="1" set="method" static="1"><f a="obj">
	<a/>
	<t path="haxe.web.DispatchConfig"/>
</f></make>
		<run public="1" set="method" static="1"><f a="url:params:obj">
	<c path="String"/>
	<x path="Map">
		<c path="String"/>
		<c path="String"/>
	</x>
	<a/>
	<x path="Void"/>
</f></run>
		<extractConfig set="method" line="468" static="1"><f a="obj">
	<d/>
	<t path="haxe.web.DispatchConfig"/>
</f></extractConfig>
		<parts public="1"><c path="Array"><c path="String"/></c></parts>
		<params public="1"><x path="Map">
	<c path="String"/>
	<c path="String"/>
</x></params>
		<name public="1"><c path="String"/></name>
		<cfg public="1"><t path="haxe.web.DispatchConfig"/></cfg>
		<subDispatch><x path="Bool"/></subDispatch>
		<dispatch public="1" set="method"><f a="obj">
	<a/>
	<x path="Void"/>
</f></dispatch>
		<getParams public="1" set="method"><f a=""><d/></f></getParams>
		<onMeta public="1" set="dynamic" line="103"><f a="v:args">
	<c path="String"/>
	<t path="Null"><c path="Array"><d/></c></t>
	<x path="Void"/>
</f></onMeta>
		<resolveName set="method" line="106"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></resolveName>
		<runtimeDispatch public="1" set="method" line="110"><f a="cfg">
	<t path="haxe.web.DispatchConfig"/>
	<x path="Void"/>
</f></runtimeDispatch>
		<redirect public="1" set="method" line="138"><f a="url:?params">
	<c path="String"/>
	<x path="Map">
		<c path="String"/>
		<c path="String"/>
	</x>
	<x path="Void"/>
</f></redirect>
		<runtimeGetParams public="1" set="method" line="146"><f a="cfgIndex">
	<x path="Int"/>
	<d/>
</f></runtimeGetParams>
		<match set="method" line="152"><f a="v:r:opt">
	<c path="String"/>
	<e path="haxe.web.MatchRule"/>
	<x path="Bool"/>
	<d/>
</f></match>
		<checkParams set="method" line="217"><f a="params:opt">
	<c path="Array"><a>
	<rule><e path="haxe.web.MatchRule"/></rule>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
	<x path="Bool"/>
	<a/>
</f></checkParams>
		<loop set="method" line="231"><f a="args:r">
	<c path="Array"><d/></c>
	<e path="haxe.web.DispatchRule"/>
	<x path="Void"/>
</f></loop>
		<new public="1" set="method" line="77"><f a="url:params">
	<c path="String"/>
	<x path="Map">
		<c path="String"/>
		<c path="String"/>
	</x>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.web.Request" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/web/Request.hx">
		<getParams public="1" set="method" line="33" static="1">
			<f a=""><x path="Map">
	<c path="String"/>
	<c path="String"/>
</x></f>
			<haxe_doc>Returns the current page GET and POST parameters (only GET parameters for Javascript)</haxe_doc>
		</getParams>
		<getHostName public="1" set="method" line="54" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the local server host name</haxe_doc>
		</getHostName>
		<getURI public="1" set="method" line="67" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the original request URL (before any server internal redirections)</haxe_doc>
		</getURI>
	</class>
	<enum path="haxe.xml.Filter" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Check.hx" module="haxe.xml.Check">
		<FInt/>
		<FBool/>
		<FEnum a="values"><c path="Array"><c path="String"/></c></FEnum>
		<FReg a="matcher"><c path="EReg"/></FReg>
	</enum>
	<enum path="haxe.xml.Attrib" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Check.hx" module="haxe.xml.Check"><Att a="name:?filter:?defvalue">
	<c path="String"/>
	<e path="haxe.xml.Filter"/>
	<c path="String"/>
</Att></enum>
	<enum path="haxe.xml.Rule" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Check.hx" module="haxe.xml.Check">
		<RNode a="name:?attribs:?childs">
			<c path="String"/>
			<c path="Array"><e path="haxe.xml.Attrib"/></c>
			<e path="haxe.xml.Rule"/>
		</RNode>
		<RData a="?filter"><e path="haxe.xml.Filter"/></RData>
		<RMulti a="rule:?atLeastOne">
			<e path="haxe.xml.Rule"/>
			<x path="Bool"/>
		</RMulti>
		<RList a="rules:?ordered">
			<c path="Array"><e path="haxe.xml.Rule"/></c>
			<x path="Bool"/>
		</RList>
		<RChoice a="choices"><c path="Array"><e path="haxe.xml.Rule"/></c></RChoice>
		<ROptional a="rule"><e path="haxe.xml.Rule"/></ROptional>
	</enum>
	<enum path="haxe.xml._Check.CheckResult" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Check.hx" private="1" module="haxe.xml.Check">
		<CMatch/>
		<CMissing a="r"><e path="haxe.xml.Rule"/></CMissing>
		<CExtra a="x"><c path="Xml"/></CExtra>
		<CElementExpected a="name:x">
			<c path="String"/>
			<c path="Xml"/>
		</CElementExpected>
		<CDataExpected a="x"><c path="Xml"/></CDataExpected>
		<CExtraAttrib a="att:x">
			<c path="String"/>
			<c path="Xml"/>
		</CExtraAttrib>
		<CMissingAttrib a="att:x">
			<c path="String"/>
			<c path="Xml"/>
		</CMissingAttrib>
		<CInvalidAttrib a="att:x:f">
			<c path="String"/>
			<c path="Xml"/>
			<e path="haxe.xml.Filter"/>
		</CInvalidAttrib>
		<CInvalidData a="x:f">
			<c path="Xml"/>
			<e path="haxe.xml.Filter"/>
		</CInvalidData>
		<CInElement a="x:r">
			<c path="Xml"/>
			<e path="haxe.xml._Check.CheckResult"/>
		</CInElement>
	</enum>
	<class path="haxe.xml.Check" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Check.hx">
		<blanks expr="~/^[ 
	]*$/" line="59" static="1">
			<c path="EReg"/>
			<meta><m n=":value"><e>~/^[ 
	]*$/</e></m></meta>
		</blanks>
		<isBlank set="method" line="61" static="1"><f a="x">
	<c path="Xml"/>
	<x path="Bool"/>
</f></isBlank>
		<filterMatch set="method" line="65" static="1"><f a="s:f">
	<c path="String"/>
	<e path="haxe.xml.Filter"/>
	<x path="Bool"/>
</f></filterMatch>
		<isNullable set="method" line="79" static="1"><f a="r">
	<e path="haxe.xml.Rule"/>
	<x path="Bool"/>
</f></isNullable>
		<check set="method" line="102" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<e path="haxe.xml._Check.CheckResult"/>
</f></check>
		<checkList set="method" line="167" static="1"><f a="it:r">
	<t path="Iterator"><c path="Xml"/></t>
	<e path="haxe.xml.Rule"/>
	<e path="haxe.xml._Check.CheckResult"/>
</f></checkList>
		<makeWhere set="method" line="240" static="1"><f a="path">
	<c path="Array"><c path="Xml"/></c>
	<c path="String"/>
</f></makeWhere>
		<makeString set="method" line="255" static="1"><f a="x">
	<c path="Xml"/>
	<c path="String"/>
</f></makeString>
		<makeRule set="method" line="264" static="1"><f a="r">
	<e path="haxe.xml.Rule"/>
	<c path="String"/>
</f></makeRule>
		<makeError set="method" line="275" static="1"><f a="m:?path">
	<e path="haxe.xml._Check.CheckResult"/>
	<c path="Array"><c path="Xml"/></c>
	<c path="String"/>
</f></makeError>
		<checkNode public="1" set="method" line="305" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<x path="Void"/>
</f></checkNode>
		<checkDocument public="1" set="method" line="312" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<x path="Void"/>
</f></checkDocument>
	</class>
	<class path="haxe.xml._Fast.NodeAccess" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="32"><f a="name">
	<c path="String"/>
	<c path="haxe.xml.Fast"/>
</f></resolve>
		<new public="1" set="method" line="28"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.xml.Fast"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.AttribAccess" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="51"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></resolve>
		<new public="1" set="method" line="47"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="String"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.HasAttribAccess" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="70"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></resolve>
		<new public="1" set="method" line="66"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><x path="Bool"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.HasNodeAccess" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="86"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></resolve>
		<new public="1" set="method" line="82"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><x path="Bool"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.NodeListAccess" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<__x><c path="Xml"/></__x>
		<resolve public="1" set="method" line="100"><f a="name">
	<c path="String"/>
	<c path="List"><c path="haxe.xml.Fast"/></c>
</f></resolve>
		<new public="1" set="method" line="96"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="List"><c path="haxe.xml.Fast"/></c></haxe_dynamic>
	</class>
	<class path="haxe.xml.Fast" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Fast.hx">
		<x public="1" set="null">
			<c path="Xml"/>
			<haxe_doc>The current corresponding `Xml` node.</haxe_doc>
		</x>
		<name public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>The name of the current element. This is the same as `Xml.nodeName`.</haxe_doc>
		</name>
		<innerData public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>The inner PCDATA or CDATA of the node.

		An exception is thrown if there is no data or if there not only data
		but also other nodes.</haxe_doc>
		</innerData>
		<innerHTML public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>The XML string built with all the sub nodes, excluding the current one.</haxe_doc>
		</innerHTML>
		<node public="1" set="null">
			<c path="haxe.xml._Fast.NodeAccess"/>
			<haxe_doc><![CDATA[Access to the first sub element with the given name.

		An exception is thrown if the element doesn't exists.
		Use `hasNode` to check the existence of a node.

		```haxe
		var fast = new haxe.xml.Fast(Xml.parse("<user><name>John</name></user>"));
		var user = fast.node.user;
		var name = user.node.name;
		trace(name.innerData); // John

		// Uncaught Error: Document is missing element password
		var password = user.node.password;
		```]]></haxe_doc>
		</node>
		<nodes public="1" set="null">
			<c path="haxe.xml._Fast.NodeListAccess"/>
			<haxe_doc><![CDATA[Access to the List of elements with the given name.
		```haxe
		var fast = new haxe.xml.Fast(Xml.parse("<users>
				<user name='John'/>
				<user name='Andy'/>
				<user name='Dan'/>
		</users>"));

		var users = fast.node.users;
		for(user in users.nodes.user) {
				trace(user.att.name);
		}
		```]]></haxe_doc>
		</nodes>
		<att public="1" set="null">
			<c path="haxe.xml._Fast.AttribAccess"/>
			<haxe_doc><![CDATA[Access to a given attribute.

		An exception is thrown if the attribute doesn't exists.
		Use `has` to check the existence of an attribute.

		```haxe
		var f = new haxe.xml.Fast(Xml.parse("<user name='Mark'></user>"));
		var user = f.node.user;
		if (user.has.name) {
			trace(user.att.name); // Mark
		}
		```]]></haxe_doc>
		</att>
		<has public="1" set="null">
			<c path="haxe.xml._Fast.HasAttribAccess"/>
			<haxe_doc>Check the existence of an attribute with the given name.</haxe_doc>
		</has>
		<hasNode public="1" set="null">
			<c path="haxe.xml._Fast.HasNodeAccess"/>
			<haxe_doc><![CDATA[Check the existence of a sub node with the given name.

		```haxe
		var f = new haxe.xml.Fast(Xml.parse("<user><age>31</age></user>"));
		var user = f.node.user;
		if (user.hasNode.age) {
			trace(user.node.age.innerData); // 31
		}
		```]]></haxe_doc>
		</hasNode>
		<elements public="1" get="accessor" set="null">
			<t path="Iterator"><c path="haxe.xml.Fast"/></t>
			<haxe_doc>The list of all sub-elements which are the nodes with type `Xml.Element`.</haxe_doc>
		</elements>
		<get_name set="method" line="222"><f a=""><c path="String"/></f></get_name>
		<get_innerData set="method" line="226"><f a=""><c path="String"/></f></get_innerData>
		<get_innerHTML set="method" line="248"><f a=""><c path="String"/></f></get_innerHTML>
		<get_elements set="method" line="255"><f a=""><a>
	<next><f a=""><c path="haxe.xml.Fast"/></f></next>
	<hasNext><f a=""><x path="Bool"/></f></hasNext>
</a></f></get_elements>
		<new public="1" set="method" line="211"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>The `haxe.xml.Fast` API helps providing a fast dot-syntax access to the
	most common `Xml` methods.</haxe_doc>
	</class>
	<class path="haxe.xml._Parser.S" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Parser.hx" private="1" module="haxe.xml.Parser" extern="1">
		<IGNORE_SPACES public="1" get="inline" set="null" expr="0" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</IGNORE_SPACES>
		<BEGIN public="1" get="inline" set="null" expr="1" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</BEGIN>
		<BEGIN_NODE public="1" get="inline" set="null" expr="2" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</BEGIN_NODE>
		<TAG_NAME public="1" get="inline" set="null" expr="3" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</TAG_NAME>
		<BODY public="1" get="inline" set="null" expr="4" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BODY>
		<ATTRIB_NAME public="1" get="inline" set="null" expr="5" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</ATTRIB_NAME>
		<EQUALS public="1" get="inline" set="null" expr="6" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</EQUALS>
		<ATTVAL_BEGIN public="1" get="inline" set="null" expr="7" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</ATTVAL_BEGIN>
		<ATTRIB_VAL public="1" get="inline" set="null" expr="8" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</ATTRIB_VAL>
		<CHILDS public="1" get="inline" set="null" expr="9" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</CHILDS>
		<CLOSE public="1" get="inline" set="null" expr="10" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</CLOSE>
		<WAIT_END public="1" get="inline" set="null" expr="11" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>11</e></m></meta>
		</WAIT_END>
		<WAIT_END_RET public="1" get="inline" set="null" expr="12" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</WAIT_END_RET>
		<PCDATA public="1" get="inline" set="null" expr="13" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>13</e></m></meta>
		</PCDATA>
		<HEADER public="1" get="inline" set="null" expr="14" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>14</e></m></meta>
		</HEADER>
		<COMMENT public="1" get="inline" set="null" expr="15" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>15</e></m></meta>
		</COMMENT>
		<DOCTYPE public="1" get="inline" set="null" expr="16" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</DOCTYPE>
		<CDATA public="1" get="inline" set="null" expr="17" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>17</e></m></meta>
		</CDATA>
		<ESCAPE public="1" get="inline" set="null" expr="18" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>18</e></m></meta>
		</ESCAPE>
	</class>
	<class path="haxe.xml.XmlParserException" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Parser.hx" module="haxe.xml.Parser">
		<message public="1">
			<c path="String"/>
			<haxe_doc>* the XML parsing error message</haxe_doc>
		</message>
		<lineNumber public="1">
			<x path="Int"/>
			<haxe_doc>* the line number at which the XML parsing error occurred</haxe_doc>
		</lineNumber>
		<positionAtLine public="1">
			<x path="Int"/>
			<haxe_doc>* the character position in the reported line at which the parsing error occurred</haxe_doc>
		</positionAtLine>
		<position public="1">
			<x path="Int"/>
			<haxe_doc>* the character position in the XML string at which the parsing error occurred</haxe_doc>
		</position>
		<xml public="1">
			<c path="String"/>
			<haxe_doc>* the invalid XML string</haxe_doc>
		</xml>
		<toString public="1" set="method" line="96"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="76"><f a="message:xml:position">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.xml.Parser" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Parser.hx">
		<escapes expr="{
	var h = new haxe.ds.StringMap();
	h.set(&quot;lt&quot;, &quot;&lt;&quot;);
	h.set(&quot;gt&quot;, &quot;&gt;&quot;);
	h.set(&quot;amp&quot;, &quot;&amp;&quot;);
	h.set(&quot;quot&quot;, &quot;\&quot;&quot;);
	h.set(&quot;apos&quot;, &quot;&apos;&quot;);
	h;
}" line="104" static="1">
			<c path="haxe.ds.StringMap"><c path="String"/></c>
			<meta><m n=":value"><e><![CDATA[{
	var h = new haxe.ds.StringMap();
	h.set("lt", "<");
	h.set("gt", ">");
	h.set("amp", "&");
	h.set("quot", "\"");
	h.set("apos", "'");
	h;
}]]></e></m></meta>
		</escapes>
		<parse public="1" set="method" line="119" static="1">
			<f a="str:?strict" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="Xml"/>
			</f>
			<meta><m n=":value"><e>{ strict : false }</e></m></meta>
			<haxe_doc>* Parses the String into an XML Document. Set strict parsing to true in order to enable a strict check of XML attributes and entities.
	 *
	 * @throws haxe.xml.XmlParserException</haxe_doc>
		</parse>
		<doParse set="method" line="126" static="1">
			<f a="str:strict:?p:?parent" v="::0:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="Xml"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ p : 0 }</e></m></meta>
		</doParse>
		<isValidChar get="inline" set="null" line="448" static="1"><f a="c">
	<x path="Int"/>
	<x path="Bool"/>
</f></isValidChar>
	</class>
	<class path="haxe.xml.Printer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Printer.hx">
		<print public="1" set="method" line="35" static="1">
			<f a="xml:?pretty" v=":false">
				<c path="Xml"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ pretty : false }</e></m></meta>
			<haxe_doc>Convert `Xml` to string representation.
		
		Set `pretty` to `true` to prettify the result.</haxe_doc>
		</print>
		<output><c path="StringBuf"/></output>
		<pretty><x path="Bool"/></pretty>
		<writeNode set="method" line="49"><f a="value:tabs">
	<c path="Xml"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeNode>
		<write get="inline" set="null" line="104"><f a="input">
	<c path="String"/>
	<x path="Void"/>
</f></write>
		<newline get="inline" set="null" line="108"><f a=""><x path="Void"/></f></newline>
		<hasChildren set="method" line="114"><f a="value">
	<c path="Xml"/>
	<x path="Bool"/>
</f></hasChildren>
		<new set="method" line="44"><f a="pretty">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>This class provides utility methods to convert Xml instances to 
	String representation.</haxe_doc>
	</class>
	<class path="haxe.xml.Proxy" params="Const:T" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/xml/Proxy.hx">
		<__f><f a="">
	<c path="String"/>
	<c path="haxe.xml.Proxy.T"/>
</f></__f>
		<resolve public="1" set="method" line="49"><f a="k">
	<c path="String"/>
	<c path="haxe.xml.Proxy.T"/>
</f></resolve>
		<new public="1" set="method" line="45"><f a="f">
	<f a="">
		<c path="String"/>
		<c path="haxe.xml.Proxy.T"/>
	</f>
	<x path="Void"/>
</f></new>
		<haxe_doc><![CDATA[This proxy can be inherited with an XML file name parameter.
	It will	only allow access to fields which corresponds to an "id" attribute
	value in the XML file :

	```haxe
	class MyXml extends haxe.xml.Proxy<"my.xml", MyStructure> {
	}
	
	var h = new haxe.ds.StringMap<MyStructure>();
	// ... fill h with "my.xml" content
	var m = new MyXml(h.get);
	trace(m.myNode.structField);
	// Access to "myNode" is only possible if you have an id="myNode" attribute
	// in your XML, and completion works as well.
	```]]></haxe_doc>
	</class>
	<class path="haxe.zip.Compress" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/Compress.hx">
		<run public="1" set="method" line="40" static="1"><f a="s:level">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<execute public="1" set="method" line="30"><f a="src:srcPos:dst:dstPos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></execute>
		<setFlushMode public="1" set="method" line="34"><f a="f">
	<e path="haxe.zip.FlushMode"/>
	<x path="Void"/>
</f></setFlushMode>
		<close public="1" set="method" line="37"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="26"><f a="level">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="haxe.zip.ExtraField" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/Entry.hx" module="haxe.zip.Entry">
		<FUnknown a="tag:bytes">
			<x path="Int"/>
			<c path="haxe.io.Bytes"/>
		</FUnknown>
		<FInfoZipUnicodePath a="name:crc">
			<c path="String"/>
			<x path="Int"/>
		</FInfoZipUnicodePath>
		<FUtf8/>
	</enum>
	<typedef path="haxe.zip.Entry" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/Entry.hx"><a>
	<fileTime><c path="Date"/></fileTime>
	<fileSize><x path="Int"/></fileSize>
	<fileName><c path="String"/></fileName>
	<extraFields>
		<t path="Null"><t path="Null"><c path="List"><e path="haxe.zip.ExtraField"/></c></t></t>
		<meta><m n=":optional"/></meta>
	</extraFields>
	<dataSize><x path="Int"/></dataSize>
	<data><t path="Null"><c path="haxe.io.Bytes"/></t></data>
	<crc32><t path="Null"><x path="Int"/></t></crc32>
	<compressed><x path="Bool"/></compressed>
</a></typedef>
	<enum path="haxe.zip.FlushMode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/FlushMode.hx">
		<NO/>
		<SYNC/>
		<FULL/>
		<FINISH/>
		<BLOCK/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.zip.Huffman" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/Huffman.hx">
		<Found a="i"><x path="Int"/></Found>
		<NeedBit a="left:right">
			<e path="haxe.zip.Huffman"/>
			<e path="haxe.zip.Huffman"/>
		</NeedBit>
		<NeedBits a="n:table">
			<x path="Int"/>
			<c path="Array"><e path="haxe.zip.Huffman"/></c>
		</NeedBits>
	</enum>
	<class path="haxe.zip.HuffTools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/Huffman.hx" module="haxe.zip.Huffman">
		<treeDepth set="method" line="35"><f a="t">
	<e path="haxe.zip.Huffman"/>
	<x path="Int"/>
</f></treeDepth>
		<treeCompress set="method" line="46"><f a="t">
	<e path="haxe.zip.Huffman"/>
	<e path="haxe.zip.Huffman"/>
</f></treeCompress>
		<treeWalk set="method" line="63"><f a="table:p:cd:d:t">
	<c path="Array"><e path="haxe.zip.Huffman"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
	<x path="Void"/>
</f></treeWalk>
		<treeMake set="method" line="76"><f a="bits:maxbits:v:len">
	<c path="haxe.ds.IntMap"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
</f></treeMake>
		<make public="1" set="method" line="86"><f a="lengths:pos:nlengths:maxbits">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
</f></make>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.zip._InflateImpl.Window" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/InflateImpl.hx" private="1" module="haxe.zip.InflateImpl">
		<SIZE public="1" get="inline" set="null" expr="1 &lt;&lt; 15" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e><![CDATA[1 << 15]]></e></m></meta>
		</SIZE>
		<BUFSIZE public="1" get="inline" set="null" expr="1 &lt;&lt; 16" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e><![CDATA[1 << 16]]></e></m></meta>
		</BUFSIZE>
		<buffer public="1"><c path="haxe.io.Bytes"/></buffer>
		<pos public="1"><x path="Int"/></pos>
		<crc><c path="haxe.crypto.Adler32"/></crc>
		<slide public="1" set="method" line="41"><f a=""><x path="Void"/></f></slide>
		<addBytes public="1" set="method" line="49"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<addByte public="1" set="method" line="55"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<getLastChar public="1" set="method" line="61"><f a=""><x path="Int"/></f></getLastChar>
		<available public="1" set="method" line="65"><f a=""><x path="Int"/></f></available>
		<checksum public="1" set="method" line="69"><f a=""><c path="haxe.crypto.Adler32"/></f></checksum>
		<new public="1" set="method" line="35"><f a="hasCrc">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="haxe.zip._InflateImpl.State" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/InflateImpl.hx" private="1" module="haxe.zip.InflateImpl">
		<Head/>
		<Block/>
		<CData/>
		<Flat/>
		<Crc/>
		<Dist/>
		<DistOne/>
		<Done/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="haxe.zip.InflateImpl" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/InflateImpl.hx">
		<LEN_EXTRA_BITS_TBL expr="[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, -1, -1]" line="92" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, -1, -1]</e></m></meta>
		</LEN_EXTRA_BITS_TBL>
		<LEN_BASE_VAL_TBL expr="[3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258]" line="93" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258]</e></m></meta>
		</LEN_BASE_VAL_TBL>
		<DIST_EXTRA_BITS_TBL expr="[0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, -1, -1]" line="94" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, -1, -1]</e></m></meta>
		</DIST_EXTRA_BITS_TBL>
		<DIST_BASE_VAL_TBL expr="[1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]" line="95" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]</e></m></meta>
		</DIST_BASE_VAL_TBL>
		<CODE_LENGTHS_POS expr="[16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]" line="96" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]</e></m></meta>
		</CODE_LENGTHS_POS>
		<FIXED_HUFFMAN expr="null" line="114" static="1">
			<e path="haxe.zip.Huffman"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</FIXED_HUFFMAN>
		<run public="1" set="method" line="363" static="1">
			<f a="i:?bufsize" v=":65536">
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ bufsize : 65536 }</e></m></meta>
		</run>
		<nbits><x path="Int"/></nbits>
		<bits><x path="Int"/></bits>
		<state><e path="haxe.zip._InflateImpl.State"/></state>
		<final><x path="Bool"/></final>
		<huffman><e path="haxe.zip.Huffman"/></huffman>
		<huffdist><t path="Null"><e path="haxe.zip.Huffman"/></t></huffdist>
		<htools><c path="haxe.zip.HuffTools"/></htools>
		<len><x path="Int"/></len>
		<dist><x path="Int"/></dist>
		<needed><x path="Int"/></needed>
		<output><c path="haxe.io.Bytes"/></output>
		<outpos><x path="Int"/></outpos>
		<input><c path="haxe.io.Input"/></input>
		<lengths><c path="Array"><x path="Int"/></c></lengths>
		<window><c path="haxe.zip._InflateImpl.Window"/></window>
		<buildFixedHuffman set="method" line="136"><f a=""><e path="haxe.zip.Huffman"/></f></buildFixedHuffman>
		<readBytes public="1" set="method" line="146"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<getBits set="method" line="156"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getBits>
		<getBit set="method" line="167"><f a=""><x path="Bool"/></f></getBit>
		<getRevBits set="method" line="178"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getRevBits>
		<resetBits set="method" line="187"><f a=""><x path="Void"/></f></resetBits>
		<addBytes set="method" line="192"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<addByte set="method" line="199"><f a="b">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<addDistOne set="method" line="206"><f a="n">
	<x path="Int"/>
	<x path="Void"/>
</f></addDistOne>
		<addDist set="method" line="212"><f a="d:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addDist>
		<applyHuffman set="method" line="216"><f a="h">
	<e path="haxe.zip.Huffman"/>
	<x path="Int"/>
</f></applyHuffman>
		<inflateLengths set="method" line="224"><f a="a:max">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></inflateLengths>
		<inflateLoop set="method" line="253"><f a=""><x path="Bool"/></f></inflateLoop>
		<new public="1" set="method" line="116">
			<f a="i:?header:?crc" v=":true:true">
				<c path="haxe.io.Input"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ crc : true, header : true }</e></m></meta>
		</new>
		<haxe_doc>A pure Haxe implementation of the ZLIB Inflate algorithm which allows reading compressed data without any platform-specific support.</haxe_doc>
	</class>
	<class path="haxe.zip.Reader" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/Reader.hx">
		<readZip public="1" set="method" line="190" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="List"><t path="haxe.zip.Entry"/></c>
</f></readZip>
		<unzip public="1" set="method" line="195" static="1"><f a="f">
	<t path="haxe.zip.Entry"/>
	<t path="Null"><c path="haxe.io.Bytes"/></t>
</f></unzip>
		<i><c path="haxe.io.Input"/></i>
		<readZipDate set="method" line="35"><f a=""><c path="Date"/></f></readZipDate>
		<readExtraFields set="method" line="47"><f a="length">
	<x path="Int"/>
	<c path="List"><e path="haxe.zip.ExtraField"/></c>
</f></readExtraFields>
		<readEntryHeader public="1" set="method" line="75"><f a=""><t path="haxe.zip.Entry"/></f></readEntryHeader>
		<read public="1" set="method" line="118"><f a=""><c path="List"><t path="haxe.zip.Entry"/></c></f></read>
		<new public="1" set="method" line="31"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.zip.Tools" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/Tools.hx"><compress public="1" set="method" line="26" static="1"><f a="f:level">
	<t path="haxe.zip.Entry"/>
	<x path="Int"/>
	<x path="Void"/>
</f></compress></class>
	<class path="haxe.zip.Uncompress" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/Uncompress.hx">
		<run public="1" set="method" line="40" static="1"><f a="src:?bufsize">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<execute public="1" set="method" line="30"><f a="src:srcPos:dst:dstPos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></execute>
		<setFlushMode public="1" set="method" line="34"><f a="f">
	<e path="haxe.zip.FlushMode"/>
	<x path="Void"/>
</f></setFlushMode>
		<close public="1" set="method" line="37"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="26"><f a="?windowBits">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.zip.Writer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/haxe/zip/Writer.hx">
		<CENTRAL_DIRECTORY_RECORD_FIELDS_SIZE get="inline" set="null" expr="46" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>46</e></m></meta>
		</CENTRAL_DIRECTORY_RECORD_FIELDS_SIZE>
		<LOCAL_FILE_HEADER_FIELDS_SIZE get="inline" set="null" expr="30" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>30</e></m></meta>
		</LOCAL_FILE_HEADER_FIELDS_SIZE>
		<o><c path="haxe.io.Output"/></o>
		<files><c path="List"><a>
	<size><x path="Int"/></size>
	<name><c path="String"/></name>
	<fields><c path="haxe.io.Bytes"/></fields>
	<date><c path="Date"/></date>
	<crc><x path="Int"/></crc>
	<compressed><x path="Bool"/></compressed>
	<clen><x path="Int"/></clen>
</a></c></files>
		<writeZipDate set="method" line="50"><f a="date">
	<c path="Date"/>
	<x path="Void"/>
</f></writeZipDate>
		<writeEntryHeader public="1" set="method" line="61"><f a="f">
	<t path="haxe.zip.Entry"/>
	<x path="Void"/>
</f></writeEntryHeader>
		<write public="1" set="method" line="121"><f a="files">
	<c path="List"><t path="haxe.zip.Entry"/></c>
	<x path="Void"/>
</f></write>
		<writeCDR public="1" set="method" line="129"><f a=""><x path="Void"/></f></writeCDR>
		<new public="1" set="method" line="45"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="js.Error" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/Error.hx" extern="1">
		<message public="1"><c path="String"/></message>
		<name public="1"><c path="String"/></name>
		<stack public="1" set="null"><c path="String"/></stack>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"Error"</e></m></meta>
	</class>
	<class path="js._Boot.HaxeError" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/Boot.hx" private="1" module="js.Boot">
		<extends path="js.Error"/>
		<wrap public="1" set="method" line="35" static="1">
			<f a="val">
				<d/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</wrap>
		<val><d/></val>
		<new public="1" set="method" line="28">
			<f a="val">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</new>
	</class>
	<class path="js.Boot" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/Boot.hx">
		<__unhtml set="method" line="43" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></__unhtml>
		<__trace set="method" line="47" static="1">
			<f a="v:i">
				<a>
					<toString set="null"><f a=""><c path="String"/></f></toString>
					<length set="null"><x path="Int"/></length>
					<hasOwnProperty set="null"><f a="">
	<c path="String"/>
	<x path="Bool"/>
</f></hasOwnProperty>
					<__enum__ set="null"><x path="Bool"/></__enum__>
				</a>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__trace>
		<__clear_trace set="method" line="67" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</__clear_trace>
		<isClass get="inline" set="null" line="79" static="1">
			<f a="o">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</isClass>
		<isEnum get="inline" set="null" line="83" static="1">
			<f a="e">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</isEnum>
		<getClass set="method" line="87" static="1">
			<f a="o">
				<d/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getClass>
		<__string_rec set="method" line="102" static="1">
			<f a="o:s">
				<a>
					<toString set="null"><f a=""><c path="String"/></f></toString>
					<length set="null"><x path="Int"/></length>
					<hasOwnProperty set="null"><f a="">
	<c path="String"/>
	<x path="Bool"/>
</f></hasOwnProperty>
					<__enum__ set="null"><x path="Bool"/></__enum__>
				</a>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":ifFeature"><e>"has_enum"</e></m>
			</meta>
		</__string_rec>
		<__interfLoop set="method" line="174" static="1"><f a="cc:cl">
	<d/>
	<d/>
	<x path="Bool"/>
</f></__interfLoop>
		<__instanceof set="method" line="189" static="1">
			<f a="o:cl">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":ifFeature"><e>"typed_catch"</e></m>
			</meta>
		</__instanceof>
		<__cast set="method" line="228" static="1">
			<f a="o:t">
				<d/>
				<d/>
				<unknown/>
			</f>
			<meta><m n=":ifFeature"><e>"typed_cast"</e></m></meta>
		</__cast>
		<__toStr expr="untyped ({ }).toString" line="233" static="1">
			<a><call set="null"><f a="">
	<d/>
	<a><slice set="null"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></slice></a>
</f></call></a>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e>untyped ({ }).toString</e></m>
			</meta>
		</__toStr>
		<__nativeClassName set="method" line="235" static="1">
			<f a="o">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__nativeClassName>
		<__isNativeObj set="method" line="245" static="1"><f a="o">
	<d/>
	<x path="Bool"/>
</f></__isNativeObj>
		<__resolveNativeClass set="method" line="250" static="1">
			<f a="name">
				<c path="String"/>
				<unknown/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__resolveNativeClass>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</class>
	<class path="js.Browser" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/Browser.hx">
		<window public="1" get="accessor" set="null" static="1">
			<c path="js.html.Window"/>
			<haxe_doc>The global window object.</haxe_doc>
		</window>
		<get_window get="inline" set="null" line="30" static="1">
			<f a=""><c path="js.html.Window"/></f>
			<meta><m n=":has_untyped"/></meta>
		</get_window>
		<document public="1" get="accessor" set="null" static="1">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Shortcut to Window.document.</haxe_doc>
		</document>
		<get_document get="inline" set="null" line="34" static="1">
			<f a=""><c path="js.html.HTMLDocument"/></f>
			<meta><m n=":has_untyped"/></meta>
		</get_document>
		<location public="1" get="accessor" set="null" static="1">
			<c path="js.html.Location"/>
			<haxe_doc>Shortcut to Window.location.</haxe_doc>
		</location>
		<get_location get="inline" set="null" line="38" static="1">
			<f a=""><c path="js.html.Location"/></f>
			<meta><m n=":has_untyped"/></meta>
		</get_location>
		<navigator public="1" get="accessor" set="null" static="1">
			<c path="js.html.Navigator"/>
			<haxe_doc>Shortcut to Window.navigator.</haxe_doc>
		</navigator>
		<get_navigator get="inline" set="null" line="42" static="1">
			<f a=""><c path="js.html.Navigator"/></f>
			<meta><m n=":has_untyped"/></meta>
		</get_navigator>
		<console public="1" get="accessor" set="null" static="1">
			<c path="js.html.Console"/>
			<haxe_doc>Shortcut to Window.console.</haxe_doc>
		</console>
		<get_console get="inline" set="null" line="46" static="1">
			<f a=""><c path="js.html.Console"/></f>
			<meta><m n=":has_untyped"/></meta>
		</get_console>
		<supported public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<haxe_doc>* True if a window object exists, false otherwise.
	 *
	 * This can be used to check if the code is being executed in a non-browser
	 * environment such as node.js.</haxe_doc>
		</supported>
		<get_supported get="inline" set="null" line="55" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":has_untyped"/></meta>
		</get_supported>
		<getLocalStorage public="1" set="method" line="61" static="1">
			<f a=""><c path="js.html.Storage"/></f>
			<haxe_doc>* Safely gets the browser's local storage, or returns null if localStorage is unsupported or
	 * disabled.</haxe_doc>
		</getLocalStorage>
		<getSessionStorage public="1" set="method" line="76" static="1">
			<f a=""><c path="js.html.Storage"/></f>
			<haxe_doc>* Safely gets the browser's session storage, or returns null if sessionStorage is unsupported
	 * or disabled.</haxe_doc>
		</getSessionStorage>
		<createXMLHttpRequest public="1" set="method" line="91" static="1">
			<f a=""><c path="js.html.XMLHttpRequest"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>* Creates an XMLHttpRequest, with a fallback to ActiveXObject for ancient versions of Internet
	 * Explorer.</haxe_doc>
		</createXMLHttpRequest>
		<alert public="1" set="method" line="105" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Display an alert message box containing the given message. See also `Window.alert()`.</haxe_doc>
		</alert>
	</class>
	<class path="js.Cookie" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/Cookie.hx">
		<set public="1" set="method" line="29" static="1">
			<f a="name:value:?expireDelay:?path:?domain">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Create or update a cookie.
		@param  expireDelay  In seconds. If null, the cookie expires at end of session.</haxe_doc>
		</set>
		<all public="1" set="method" line="47" static="1">
			<f a=""><c path="haxe.ds.StringMap"><c path="String"/></c></f>
			<haxe_doc>Returns all cookies.</haxe_doc>
		</all>
		<get public="1" set="method" line="63" static="1">
			<f a="name">
				<c path="String"/>
				<t path="Null"><c path="String"/></t>
			</f>
			<haxe_doc>Returns value of a cookie.</haxe_doc>
		</get>
		<exists public="1" set="method" line="70" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if a cookie `name` exists.</haxe_doc>
		</exists>
		<remove public="1" set="method" line="77" static="1">
			<f a="name:?path:?domain">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Remove a cookie.</haxe_doc>
		</remove>
	</class>
	<class path="js.EvalError" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/Error.hx" module="js.Error" extern="1">
		<extends path="js.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"EvalError"</e></m></meta>
	</class>
	<class path="js.RangeError" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/Error.hx" module="js.Error" extern="1">
		<extends path="js.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"RangeError"</e></m></meta>
	</class>
	<class path="js.ReferenceError" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/Error.hx" module="js.Error" extern="1">
		<extends path="js.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"ReferenceError"</e></m></meta>
	</class>
	<class path="js.SyntaxError" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/Error.hx" module="js.Error" extern="1">
		<extends path="js.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"SyntaxError"</e></m></meta>
	</class>
	<class path="js.TypeError" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/Error.hx" module="js.Error" extern="1">
		<extends path="js.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"TypeError"</e></m></meta>
	</class>
	<class path="js.URIError" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/Error.hx" module="js.Error" extern="1">
		<extends path="js.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"URIError"</e></m></meta>
	</class>
	<typedef path="js.JqEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/JQuery.hx" module="js.JQuery">
		<a>
			<which><x path="Int"/></which>
			<wheelDelta><x path="Int"/></wheelDelta>
			<type><c path="String"/></type>
			<timeStamp><x path="Int"/></timeStamp>
			<target><c path="js.html.Element"/></target>
			<stopPropagation set="method"><f a=""><x path="Void"/></f></stopPropagation>
			<stopImmediatePropagation set="method"><f a=""><x path="Void"/></f></stopImmediatePropagation>
			<shiftKey><x path="Bool"/></shiftKey>
			<relatedTarget><c path="js.html.Element"/></relatedTarget>
			<preventDefault set="method"><f a=""><x path="Void"/></f></preventDefault>
			<pageY><x path="Int"/></pageY>
			<pageX><x path="Int"/></pageX>
			<metaKey><x path="Bool"/></metaKey>
			<keyCode><x path="Int"/></keyCode>
			<isPropagationStopped set="method"><f a=""><x path="Bool"/></f></isPropagationStopped>
			<isImmediatePropagationStopped set="method"><f a=""><x path="Bool"/></f></isImmediatePropagationStopped>
			<isDefaultPrevented set="method"><f a=""><x path="Bool"/></f></isDefaultPrevented>
			<delegateTarget><c path="js.html.Element"/></delegateTarget>
			<currentTarget><c path="js.html.Element"/></currentTarget>
			<ctrlKey><x path="Bool"/></ctrlKey>
			<charCode><x path="Int"/></charCode>
			<altKey><x path="Bool"/></altKey>
		</a>
		<meta><m n=":deprecated"><e>"Use js.jquery.Event instead."</e></m></meta>
	</typedef>
	<class path="js.JQueryHelper" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/JQuery.hx" module="js.JQuery" extern="1">
		<J public="1" get="inline" set="null" line="72" static="1">
			<f a="html">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<x path="haxe.extern.EitherType">
						<c path="js.JQuery"/>
						<x path="haxe.extern.EitherType">
							<c path="js.html.Window"/>
							<c path="js.html.Element"/>
						</x>
					</x>
				</x>
				<c path="js.JQuery"/>
			</f>
			<overloads>
				<J public="1" get="inline" set="null"><f a="j">
	<c path="js.JQuery"/>
	<c path="js.JQuery"/>
</f></J>
				<J public="1" get="inline" set="null"><f a="j">
	<c path="js.html.Window"/>
	<c path="js.JQuery"/>
</f></J>
				<J public="1" get="inline" set="null"><f a="j">
	<c path="js.html.Element"/>
	<c path="js.JQuery"/>
</f></J>
			</overloads>
		</J>
		<JTHIS public="1" get="accessor" set="null" static="1"><c path="js.JQuery"/></JTHIS>
		<get_JTHIS public="1" get="inline" set="null" line="78" static="1"><f a=""><c path="js.JQuery"/></f></get_JTHIS>
		<meta><m n=":deprecated"><e>"Use js.jquery.Helper instead."</e></m></meta>
	</class>
	<class path="js.JQuery" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/JQuery.hx" extern="1">
		<cur public="1" get="accessor" set="null" static="1">
			<c path="js.JQuery"/>
			<haxe_doc>Return the current JQuery element (in a callback), similar to $(this) in JS.</haxe_doc>
		</cur>
		<fx public="1" set="null" static="1"><a>
	<off><x path="Bool"/></off>
	<interval><x path="Int"/></interval>
</a></fx>
		<browser public="1" set="null" static="1"><a>
	<webkit><x path="Bool"/></webkit>
	<version><c path="String"/></version>
	<opera><x path="Bool"/></opera>
	<msie><x path="Bool"/></msie>
	<mozilla><x path="Bool"/></mozilla>
</a></browser>
		<contains public="1" set="method" static="1"><f a="parent:child">
	<c path="js.html.Element"/>
	<c path="js.html.Element"/>
	<x path="Bool"/>
</f></contains>
		<noConflict public="1" set="method" static="1"><f a="?removeAll">
	<x path="Bool"/>
	<x path="Void"/>
</f></noConflict>
		<parseJSON public="1" set="method" static="1"><f a="json">
	<c path="String"/>
	<d/>
</f></parseJSON>
		<globalEval public="1" set="method" static="1"><f a="js">
	<c path="String"/>
	<x path="Void"/>
</f></globalEval>
		<get_cur get="inline" set="null" line="398" static="1"><f a=""><c path="js.JQuery"/></f></get_cur>
		<context public="1" set="null"><c path="js.html.Element"/></context>
		<length public="1" set="null"><x path="Int"/></length>
		<addClass public="1" set="method"><f a="className">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></addClass>
		<removeClass public="1" set="method"><f a="?className">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></removeClass>
		<hasClass public="1" set="method"><f a="className">
	<c path="String"/>
	<x path="Bool"/>
</f></hasClass>
		<toggleClass public="1" set="method"><f a="className:?addRemove">
	<c path="String"/>
	<x path="Bool"/>
	<c path="js.JQuery"/>
</f></toggleClass>
		<attr public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<overloads><attr public="1" set="method"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<c path="js.JQuery"/>
</f></attr></overloads>
		</attr>
		<removeAttr public="1" set="method"><f a="attr">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></removeAttr>
		<prop public="1" set="method">
			<f a="name">
				<c path="String"/>
				<d/>
			</f>
			<overloads><prop public="1" set="method"><f a="name:value">
	<c path="String"/>
	<d/>
	<c path="js.JQuery"/>
</f></prop></overloads>
		</prop>
		<css public="1" set="method">
			<f a="prop">
				<c path="String"/>
				<c path="String"/>
			</f>
			<overloads>
				<css public="1" set="method"><f a="prop:value">
	<c path="String"/>
	<c path="String"/>
	<c path="js.JQuery"/>
</f></css>
				<css public="1" set="method"><f a="map">
	<a/>
	<c path="js.JQuery"/>
</f></css>
			</overloads>
		</css>
		<html public="1" set="method">
			<f a=""><c path="String"/></f>
			<overloads>
				<html public="1" set="method"><f a="html">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></html>
				<html public="1" set="method"><f a="html">
	<c path="js.JQuery"/>
	<c path="js.JQuery"/>
</f></html>
			</overloads>
		</html>
		<val public="1" set="method">
			<f a=""><c path="String"/></f>
			<overloads><val public="1" set="method"><f a="value">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></val></overloads>
		</val>
		<text public="1" set="method">
			<f a=""><c path="String"/></f>
			<overloads><text public="1" set="method"><f a="text">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></text></overloads>
		</text>
		<width public="1" set="method">
			<f a=""><x path="Int"/></f>
			<overloads><width public="1" set="method"><f a="value">
	<x path="Int"/>
	<c path="js.JQuery"/>
</f></width></overloads>
		</width>
		<height public="1" set="method">
			<f a=""><x path="Int"/></f>
			<overloads><height public="1" set="method"><f a="value">
	<x path="Int"/>
	<c path="js.JQuery"/>
</f></height></overloads>
		</height>
		<innerWidth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<overloads><innerWidth public="1" set="method"><f a="value">
	<x path="Int"/>
	<c path="js.JQuery"/>
</f></innerWidth></overloads>
		</innerWidth>
		<innerHeight public="1" set="method">
			<f a=""><x path="Int"/></f>
			<overloads><innerHeight public="1" set="method"><f a="value">
	<x path="Int"/>
	<c path="js.JQuery"/>
</f></innerHeight></overloads>
		</innerHeight>
		<outerWidth public="1" set="method"><f a="?includeMargin">
	<x path="Bool"/>
	<x path="Int"/>
</f></outerWidth>
		<outerHeight public="1" set="method"><f a="?includeMargin">
	<x path="Bool"/>
	<x path="Int"/>
</f></outerHeight>
		<scrollLeft public="1" set="method">
			<f a=""><x path="Int"/></f>
			<overloads><scrollLeft public="1" set="method"><f a="value">
	<x path="Int"/>
	<c path="js.JQuery"/>
</f></scrollLeft></overloads>
		</scrollLeft>
		<scrollTop public="1" set="method">
			<f a=""><x path="Int"/></f>
			<overloads><scrollTop public="1" set="method"><f a="value">
	<x path="Int"/>
	<c path="js.JQuery"/>
</f></scrollTop></overloads>
		</scrollTop>
		<offset public="1" set="method">
			<f a=""><a>
	<top><x path="Int"/></top>
	<left><x path="Int"/></left>
</a></f>
			<overloads><offset public="1" set="method"><f a="value">
	<a>
		<top><x path="Int"/></top>
		<left><x path="Int"/></left>
	</a>
	<c path="js.JQuery"/>
</f></offset></overloads>
		</offset>
		<offsetParent public="1" set="method"><f a=""><c path="js.JQuery"/></f></offsetParent>
		<position public="1" set="method">
			<f a=""><a>
	<top><x path="Int"/></top>
	<left><x path="Int"/></left>
</a></f>
			<overloads><position public="1" set="method"><f a="value">
	<a>
		<top><x path="Int"/></top>
		<left><x path="Int"/></left>
	</a>
	<c path="js.JQuery"/>
</f></position></overloads>
		</position>
		<add public="1" set="method">
			<f a="selector:?context">
				<c path="String"/>
				<c path="js.JQuery"/>
				<c path="js.JQuery"/>
			</f>
			<overloads>
				<add public="1" set="method"><f a="value">
	<c path="js.JQuery"/>
	<c path="js.JQuery"/>
</f></add>
				<add public="1" set="method"><f a="value">
	<c path="js.html.Element"/>
	<c path="js.JQuery"/>
</f></add>
				<add public="1" set="method"><f a="value">
	<c path="Array"><c path="js.html.Element"/></c>
	<c path="js.JQuery"/>
</f></add>
			</overloads>
		</add>
		<andSelf public="1" set="method"><f a=""><c path="js.JQuery"/></f></andSelf>
		<children public="1" set="method"><f a="?selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></children>
		<clone public="1" set="method"><f a="?withDataAndEvents">
	<x path="Bool"/>
	<c path="js.JQuery"/>
</f></clone>
		<closest public="1" set="method"><f a="selector:?context">
	<c path="String"/>
	<c path="js.JQuery"/>
	<c path="js.JQuery"/>
</f></closest>
		<contents public="1" set="method"><f a=""><c path="js.JQuery"/></f></contents>
		<each public="1" set="method">
			<f a="f">
				<f a=""><x path="Void"/></f>
				<c path="js.JQuery"/>
			</f>
			<overloads><each public="1" set="method"><f a="f">
	<f a=":">
		<x path="Int"/>
		<c path="js.html.Element"/>
		<x path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></each></overloads>
		</each>
		<end public="1" set="method"><f a=""><c path="js.JQuery"/></f></end>
		<eq public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.JQuery"/>
</f></eq>
		<filter public="1" set="method"><f a="selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></filter>
		<find public="1" set="method"><f a="selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></find>
		<first public="1" set="method"><f a=""><c path="js.JQuery"/></f></first>
		<index public="1" set="method"><f a="?selector">
	<c path="String"/>
	<x path="Int"/>
</f></index>
		<last public="1" set="method"><f a="?selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></last>
		<has public="1" set="method"><f a="selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></has>
		<next public="1" set="method"><f a="?selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></next>
		<nextAll public="1" set="method"><f a="?selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></nextAll>
		<nextUntil public="1" set="method"><f a="?selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></nextUntil>
		<parent public="1" set="method"><f a="?selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></parent>
		<parents public="1" set="method"><f a="?selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></parents>
		<parentsUntil public="1" set="method"><f a="?selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></parentsUntil>
		<not public="1" set="method">
			<f a="selector">
				<c path="String"/>
				<c path="js.JQuery"/>
			</f>
			<overloads><not public="1" set="method"><f a="value">
	<c path="js.html.Element"/>
	<c path="js.JQuery"/>
</f></not></overloads>
		</not>
		<prev public="1" set="method"><f a="?selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></prev>
		<prevAll public="1" set="method"><f a="?selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></prevAll>
		<prevUntil public="1" set="method"><f a="?selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></prevUntil>
		<pushStack public="1" set="method"><f a="elements">
	<c path="Array"><c path="js.html.Element"/></c>
	<c path="js.JQuery"/>
</f></pushStack>
		<siblings public="1" set="method"><f a="?selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></siblings>
		<size public="1" set="method"><f a=""><x path="Int"/></f></size>
		<slice public="1" set="method"><f a="start:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.JQuery"/>
</f></slice>
		<toArray public="1" set="method"><f a=""><c path="Array"><c path="js.html.Element"/></c></f></toArray>
		<before public="1" set="method">
			<f a="html">
				<c path="String"/>
				<c path="js.JQuery"/>
			</f>
			<overloads>
				<before public="1" set="method"><f a="value">
	<c path="js.JQuery"/>
	<c path="js.JQuery"/>
</f></before>
				<before public="1" set="method"><f a="value">
	<c path="js.html.Element"/>
	<c path="js.JQuery"/>
</f></before>
			</overloads>
		</before>
		<after public="1" set="method">
			<f a="html">
				<c path="String"/>
				<c path="js.JQuery"/>
			</f>
			<overloads>
				<after public="1" set="method"><f a="value">
	<c path="js.JQuery"/>
	<c path="js.JQuery"/>
</f></after>
				<after public="1" set="method"><f a="value">
	<c path="js.html.Element"/>
	<c path="js.JQuery"/>
</f></after>
			</overloads>
		</after>
		<append public="1" set="method">
			<f a="html">
				<c path="String"/>
				<c path="js.JQuery"/>
			</f>
			<overloads>
				<append public="1" set="method"><f a="value">
	<c path="js.JQuery"/>
	<c path="js.JQuery"/>
</f></append>
				<append public="1" set="method"><f a="value">
	<c path="js.html.Element"/>
	<c path="js.JQuery"/>
</f></append>
			</overloads>
		</append>
		<appendTo public="1" set="method">
			<f a="html">
				<c path="String"/>
				<c path="js.JQuery"/>
			</f>
			<overloads>
				<appendTo public="1" set="method"><f a="value">
	<c path="js.JQuery"/>
	<c path="js.JQuery"/>
</f></appendTo>
				<appendTo public="1" set="method"><f a="value">
	<c path="js.html.Element"/>
	<c path="js.JQuery"/>
</f></appendTo>
			</overloads>
		</appendTo>
		<detach public="1" set="method"><f a="?selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></detach>
		<empty public="1" set="method"><f a=""><c path="js.JQuery"/></f></empty>
		<insertBefore public="1" set="method">
			<f a="html">
				<c path="String"/>
				<c path="js.JQuery"/>
			</f>
			<overloads>
				<insertBefore public="1" set="method"><f a="value">
	<c path="js.JQuery"/>
	<c path="js.JQuery"/>
</f></insertBefore>
				<insertBefore public="1" set="method"><f a="value">
	<c path="js.html.Element"/>
	<c path="js.JQuery"/>
</f></insertBefore>
			</overloads>
		</insertBefore>
		<insertAfter public="1" set="method">
			<f a="html">
				<c path="String"/>
				<c path="js.JQuery"/>
			</f>
			<overloads>
				<insertAfter public="1" set="method"><f a="value">
	<c path="js.JQuery"/>
	<c path="js.JQuery"/>
</f></insertAfter>
				<insertAfter public="1" set="method"><f a="value">
	<c path="js.html.Element"/>
	<c path="js.JQuery"/>
</f></insertAfter>
			</overloads>
		</insertAfter>
		<prepend public="1" set="method">
			<f a="html">
				<c path="String"/>
				<c path="js.JQuery"/>
			</f>
			<overloads>
				<prepend public="1" set="method"><f a="value">
	<c path="js.JQuery"/>
	<c path="js.JQuery"/>
</f></prepend>
				<prepend public="1" set="method"><f a="value">
	<c path="js.html.Element"/>
	<c path="js.JQuery"/>
</f></prepend>
			</overloads>
		</prepend>
		<prependTo public="1" set="method">
			<f a="html">
				<c path="String"/>
				<c path="js.JQuery"/>
			</f>
			<overloads>
				<prependTo public="1" set="method"><f a="value">
	<c path="js.JQuery"/>
	<c path="js.JQuery"/>
</f></prependTo>
				<prependTo public="1" set="method"><f a="value">
	<c path="js.html.Element"/>
	<c path="js.JQuery"/>
</f></prependTo>
			</overloads>
		</prependTo>
		<remove public="1" set="method"><f a="?selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></remove>
		<replaceAll public="1" set="method"><f a="selector">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></replaceAll>
		<replaceWith public="1" set="method">
			<f a="html">
				<c path="String"/>
				<c path="js.JQuery"/>
			</f>
			<overloads>
				<replaceWith public="1" set="method"><f a="value">
	<c path="js.JQuery"/>
	<c path="js.JQuery"/>
</f></replaceWith>
				<replaceWith public="1" set="method"><f a="value">
	<c path="js.html.Element"/>
	<c path="js.JQuery"/>
</f></replaceWith>
			</overloads>
		</replaceWith>
		<unwrap public="1" set="method"><f a=""><c path="js.JQuery"/></f></unwrap>
		<wrap public="1" set="method">
			<f a="html">
				<c path="String"/>
				<c path="js.JQuery"/>
			</f>
			<overloads>
				<wrap public="1" set="method"><f a="value">
	<c path="js.JQuery"/>
	<c path="js.JQuery"/>
</f></wrap>
				<wrap public="1" set="method"><f a="value">
	<c path="js.html.Element"/>
	<c path="js.JQuery"/>
</f></wrap>
			</overloads>
		</wrap>
		<wrapAll public="1" set="method">
			<f a="html">
				<c path="String"/>
				<c path="js.JQuery"/>
			</f>
			<overloads>
				<wrapAll public="1" set="method"><f a="value">
	<c path="js.JQuery"/>
	<c path="js.JQuery"/>
</f></wrapAll>
				<wrapAll public="1" set="method"><f a="value">
	<c path="js.html.Element"/>
	<c path="js.JQuery"/>
</f></wrapAll>
			</overloads>
		</wrapAll>
		<wrapInner public="1" set="method">
			<f a="html">
				<c path="String"/>
				<c path="js.JQuery"/>
			</f>
			<overloads>
				<wrapInner public="1" set="method"><f a="value">
	<c path="js.JQuery"/>
	<c path="js.JQuery"/>
</f></wrapInner>
				<wrapInner public="1" set="method"><f a="value">
	<c path="js.html.Element"/>
	<c path="js.JQuery"/>
</f></wrapInner>
			</overloads>
		</wrapInner>
		<animate public="1" set="method">
			<f a="properties:?duration:?callb">
				<a/>
				<x path="Int"/>
				<f a=""><x path="Void"/></f>
				<c path="js.JQuery"/>
			</f>
			<overloads><animate public="1" set="method"><f a="properties:?duration:?easing:?call">
	<a/>
	<x path="Int"/>
	<c path="String"/>
	<f a=""><x path="Void"/></f>
	<c path="js.JQuery"/>
</f></animate></overloads>
		</animate>
		<delay public="1" set="method"><f a="duration:?queueName">
	<x path="Int"/>
	<c path="String"/>
	<c path="js.JQuery"/>
</f></delay>
		<hide public="1" set="method">
			<f a="?duration:?call">
				<x path="Int"/>
				<f a=""><x path="Void"/></f>
				<c path="js.JQuery"/>
			</f>
			<overloads><hide public="1" set="method"><f a="?duration:?easing:?call">
	<x path="Int"/>
	<c path="String"/>
	<f a=""><x path="Void"/></f>
	<c path="js.JQuery"/>
</f></hide></overloads>
		</hide>
		<fadeIn public="1" set="method">
			<f a="?duration:?call">
				<x path="Int"/>
				<f a=""><x path="Void"/></f>
				<c path="js.JQuery"/>
			</f>
			<overloads><fadeIn public="1" set="method"><f a="?duration:?easing:?call">
	<x path="Int"/>
	<c path="String"/>
	<f a=""><x path="Void"/></f>
	<c path="js.JQuery"/>
</f></fadeIn></overloads>
		</fadeIn>
		<fadeOut public="1" set="method">
			<f a="?duration:?call">
				<x path="Int"/>
				<f a=""><x path="Void"/></f>
				<c path="js.JQuery"/>
			</f>
			<overloads><fadeOut public="1" set="method"><f a="?duration:?easing:?call">
	<x path="Int"/>
	<c path="String"/>
	<f a=""><x path="Void"/></f>
	<c path="js.JQuery"/>
</f></fadeOut></overloads>
		</fadeOut>
		<fadeTo public="1" set="method">
			<f a="duration:opacity:?call">
				<x path="Int"/>
				<x path="Float"/>
				<f a=""><x path="Void"/></f>
				<c path="js.JQuery"/>
			</f>
			<overloads><fadeTo public="1" set="method"><f a="duration:opacity:?easing:?call">
	<x path="Int"/>
	<x path="Float"/>
	<c path="String"/>
	<f a=""><x path="Void"/></f>
	<c path="js.JQuery"/>
</f></fadeTo></overloads>
		</fadeTo>
		<fadeToggle public="1" set="method">
			<f a="?duration:?call">
				<x path="Int"/>
				<f a=""><x path="Void"/></f>
				<c path="js.JQuery"/>
			</f>
			<overloads><fadeToggle public="1" set="method"><f a="?duration:?easing:?call">
	<x path="Int"/>
	<c path="String"/>
	<f a=""><x path="Void"/></f>
	<c path="js.JQuery"/>
</f></fadeToggle></overloads>
		</fadeToggle>
		<show public="1" set="method">
			<f a="?duration:?call">
				<x path="Int"/>
				<f a=""><x path="Void"/></f>
				<c path="js.JQuery"/>
			</f>
			<overloads><show public="1" set="method"><f a="?duration:?easing:?call">
	<x path="Int"/>
	<c path="String"/>
	<f a=""><x path="Void"/></f>
	<c path="js.JQuery"/>
</f></show></overloads>
		</show>
		<slideDown public="1" set="method">
			<f a="?duration:?call">
				<x path="Int"/>
				<f a=""><x path="Void"/></f>
				<c path="js.JQuery"/>
			</f>
			<overloads><slideDown public="1" set="method"><f a="?duration:?easing:?call">
	<x path="Int"/>
	<c path="String"/>
	<f a=""><x path="Void"/></f>
	<c path="js.JQuery"/>
</f></slideDown></overloads>
		</slideDown>
		<slideToggle public="1" set="method">
			<f a="?duration:?call">
				<x path="Int"/>
				<f a=""><x path="Void"/></f>
				<c path="js.JQuery"/>
			</f>
			<overloads><slideToggle public="1" set="method"><f a="?duration:?easing:?call">
	<x path="Int"/>
	<c path="String"/>
	<f a=""><x path="Void"/></f>
	<c path="js.JQuery"/>
</f></slideToggle></overloads>
		</slideToggle>
		<slideUp public="1" set="method">
			<f a="?duration:?call">
				<x path="Int"/>
				<f a=""><x path="Void"/></f>
				<c path="js.JQuery"/>
			</f>
			<overloads><slideUp public="1" set="method"><f a="?duration:?easing:?call">
	<x path="Int"/>
	<c path="String"/>
	<f a=""><x path="Void"/></f>
	<c path="js.JQuery"/>
</f></slideUp></overloads>
		</slideUp>
		<stop public="1" set="method"><f a="?clearQueue:?jumpToEnd">
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="js.JQuery"/>
</f></stop>
		<toggle public="1" set="method">
			<f a="?duration:?call">
				<x path="Int"/>
				<f a=""><x path="Void"/></f>
				<c path="js.JQuery"/>
			</f>
			<overloads><toggle public="1" set="method"><f a="?duration:?easing:?call">
	<x path="Int"/>
	<c path="String"/>
	<f a=""><x path="Void"/></f>
	<c path="js.JQuery"/>
</f></toggle></overloads>
		</toggle>
		<blur public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<x path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></blur>
		<change public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<x path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></change>
		<click public="1" set="method">
			<f a="?callb">
				<f a="">
					<t path="js.JqEvent"/>
					<x path="Void"/>
				</f>
				<c path="js.JQuery"/>
			</f>
			<overloads>
				<click public="1" set="method"><f a="callb">
	<f a=""><x path="Void"/></f>
	<c path="js.JQuery"/>
</f></click>
				<click public="1" set="method"><f a="callb">
	<f a="">
		<t path="js.JqEvent"/>
		<x path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></click>
				<click public="1" set="method"><f a="callb">
	<f a=""><x path="Bool"/></f>
	<c path="js.JQuery"/>
</f></click>
			</overloads>
		</click>
		<dblclick public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<x path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></dblclick>
		<error public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<x path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></error>
		<focus public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<x path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></focus>
		<focusin public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<x path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></focusin>
		<focusout public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<x path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></focusout>
		<hover public="1" set="method">
			<f a="onIn:?onOut">
				<f a="">
					<t path="js.JqEvent"/>
					<x path="Void"/>
				</f>
				<f a="">
					<t path="js.JqEvent"/>
					<x path="Void"/>
				</f>
				<c path="js.JQuery"/>
			</f>
			<overloads><hover public="1" set="method"><f a="onInOut">
	<f a="">
		<t path="js.JqEvent"/>
		<x path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></hover></overloads>
		</hover>
		<keydown public="1" set="method">
			<f a="?callb">
				<f a="">
					<t path="js.JqEvent"/>
					<x path="Void"/>
				</f>
				<c path="js.JQuery"/>
			</f>
			<overloads><keydown public="1" set="method"><f a="callb">
	<f a="">
		<t path="js.JqEvent"/>
		<x path="Bool"/>
	</f>
	<c path="js.JQuery"/>
</f></keydown></overloads>
		</keydown>
		<keypress public="1" set="method">
			<f a="?callb">
				<f a="">
					<t path="js.JqEvent"/>
					<x path="Void"/>
				</f>
				<c path="js.JQuery"/>
			</f>
			<overloads><keypress public="1" set="method"><f a="callb">
	<f a="">
		<t path="js.JqEvent"/>
		<x path="Bool"/>
	</f>
	<c path="js.JQuery"/>
</f></keypress></overloads>
		</keypress>
		<keyup public="1" set="method">
			<f a="?callb">
				<f a="">
					<t path="js.JqEvent"/>
					<x path="Void"/>
				</f>
				<c path="js.JQuery"/>
			</f>
			<overloads><keyup public="1" set="method"><f a="callb">
	<f a="">
		<t path="js.JqEvent"/>
		<x path="Bool"/>
	</f>
	<c path="js.JQuery"/>
</f></keyup></overloads>
		</keyup>
		<mousedown public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<x path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></mousedown>
		<mouseenter public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<x path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></mouseenter>
		<mouseleave public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<x path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></mouseleave>
		<mouseout public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<x path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></mouseout>
		<mouseover public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<x path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></mouseover>
		<mousemove public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<x path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></mousemove>
		<mouseup public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<x path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></mouseup>
		<load public="1" set="method">
			<f a="?callb">
				<f a="">
					<t path="js.JqEvent"/>
					<x path="Void"/>
				</f>
				<c path="js.JQuery"/>
			</f>
			<overloads>
				<load public="1" set="method"><f a="url:?data:?callb">
	<c path="String"/>
	<a/>
	<f a=":">
		<c path="String"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></load>
				<load public="1" set="method"><f a="url:?data:?callb">
	<c path="String"/>
	<a/>
	<f a="">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></load>
				<load public="1" set="method"><f a="url:?data:?callb">
	<c path="String"/>
	<a/>
	<f a=""><x path="Void"/></f>
	<c path="js.JQuery"/>
</f></load>
			</overloads>
		</load>
		<ready public="1" set="method"><f a="callb">
	<f a="">
		<t path="js.JqEvent"/>
		<x path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></ready>
		<resize public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<x path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></resize>
		<scroll public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<x path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></scroll>
		<select public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<x path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></select>
		<submit public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<x path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></submit>
		<unload public="1" set="method"><f a="?callb">
	<f a="">
		<t path="js.JqEvent"/>
		<x path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></unload>
		<bind public="1" set="method"><f a="events:callb">
	<c path="String"/>
	<f a="">
		<t path="js.JqEvent"/>
		<x path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></bind>
		<delegate public="1" set="method"><f a="selector:events:callb">
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<t path="js.JqEvent"/>
		<x path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></delegate>
		<die public="1" set="method"><f a="?events:?callb">
	<c path="String"/>
	<f a="">
		<t path="js.JqEvent"/>
		<x path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></die>
		<one public="1" set="method"><f a="events:callb">
	<c path="String"/>
	<f a="">
		<t path="js.JqEvent"/>
		<x path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></one>
		<live public="1" set="method"><f a="events:callb">
	<c path="String"/>
	<f a="">
		<t path="js.JqEvent"/>
		<x path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></live>
		<trigger public="1" set="method"><f a="events">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></trigger>
		<triggerHandler public="1" set="method"><f a="events">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></triggerHandler>
		<unbind public="1" set="method"><f a="?events:?callb">
	<c path="String"/>
	<f a="">
		<t path="js.JqEvent"/>
		<x path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></unbind>
		<undelegate public="1" set="method"><f a="?selector:?events:?callb">
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<t path="js.JqEvent"/>
		<x path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></undelegate>
		<on public="1" set="method">
			<f a="events:callb">
				<c path="String"/>
				<f a="">
					<t path="js.JqEvent"/>
					<x path="Void"/>
				</f>
				<c path="js.JQuery"/>
			</f>
			<overloads>
				<on public="1" set="method"><f a="events">
	<d><f a="">
	<t path="js.JqEvent"/>
	<x path="Void"/>
</f></d>
	<c path="js.JQuery"/>
</f></on>
				<on public="1" set="method"><f a="events:selector:callb">
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<t path="js.JqEvent"/>
		<x path="Void"/>
	</f>
	<c path="js.JQuery"/>
</f></on>
			</overloads>
		</on>
		<clearQueue public="1" set="method"><f a="?queueName">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></clearQueue>
		<dequeue public="1" set="method"><f a="?queueName">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></dequeue>
		<queue public="1" set="method"><f a="?queueName:?callb">
	<c path="String"/>
	<f a="">
		<f a=""><x path="Void"/></f>
		<x path="Void"/>
	</f>
	<a><length><x path="Int"/></length></a>
</f></queue>
		<get public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.Element"/></c></f>
			<overloads><get public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.Element"/>
</f></get></overloads>
		</get>
		<is public="1" set="method">
			<f a="selector">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<overloads><is public="1" set="method"><f a="j">
	<c path="js.JQuery"/>
	<x path="Bool"/>
</f></is></overloads>
		</is>
		<data public="1" set="method">
			<f a="key:value">
				<c path="String"/>
				<d/>
				<c path="js.JQuery"/>
			</f>
			<overloads>
				<data public="1" set="method"><f a=""><d/></f></data>
				<data public="1" set="method"><f a="key">
	<c path="String"/>
	<d/>
</f></data>
			</overloads>
		</data>
		<removeData public="1" set="method"><f a="?key">
	<c path="String"/>
	<c path="js.JQuery"/>
</f></removeData>
		<serialize public="1" set="method"><f a=""><c path="String"/></f></serialize>
		<serializeArray public="1" set="method"><f a=""><c path="Array"><a>
	<value><c path="String"/></value>
	<name><c path="String"/></name>
</a></c></f></serializeArray>
		<iterator public="1" get="inline" set="null" line="375">
			<f a=""><t path="Iterator"><c path="js.JQuery"/></t></f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":runtime"/>
			</meta>
		</iterator>
		<new public="1" set="method">
			<f a="html">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":selfCall"/></meta>
			<overloads>
				<new public="1" set="method">
					<f a="j">
						<c path="js.JQuery"/>
						<x path="Void"/>
					</f>
					<meta><m n=":selfCall"/></meta>
				</new>
				<new public="1" set="method">
					<f a="j">
						<c path="js.html.Window"/>
						<x path="Void"/>
					</f>
					<meta><m n=":selfCall"/></meta>
				</new>
				<new public="1" set="method">
					<f a="j">
						<c path="js.html.Element"/>
						<x path="Void"/>
					</f>
					<meta><m n=":selfCall"/></meta>
				</new>
			</overloads>
		</new>
		<meta>
			<m n=":deprecated"><e>"Use js.jquery.JQuery instead."</e></m>
			<m n=":initPackage"/>
		</meta>
	</class>
	<class path="js.Lib" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/Lib.hx">
		<debug public="1" get="inline" set="null" line="33" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Inserts a 'debugger' statement that will make a breakpoint if a debugger is available.</haxe_doc>
		</debug>
		<alert public="1" set="method" line="42" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":deprecated"><e>"Lib.alert() is deprecated, use Browser.alert() instead"</e></m>
			</meta>
			<haxe_doc>Display an alert message box containing the given message.
		@deprecated Use Browser.alert() instead.</haxe_doc>
		</alert>
		<eval public="1" get="inline" set="null" line="46" static="1">
			<f a="code">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</eval>
		<require public="1" get="inline" set="null" line="57" static="1">
			<f a="module">
				<c path="String"/>
				<d/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Inserts a `require` expression that loads JavaScript object from
		a module or file specified in the `module` argument.

		This is only supported in environments where `require` function
		is available, such as Node.js or RequireJS.</haxe_doc>
		</require>
		<undefined public="1" get="accessor" set="null" static="1">
			<d/>
			<haxe_doc>Returns JavaScript `undefined` value.

		Note that this is only needed in very rare cases when working with external JavaScript code.

		In Haxe, `null` is used to represent the absence of a value.</haxe_doc>
		</undefined>
		<get_undefined get="inline" set="null" line="69" static="1">
			<f a=""><d/></f>
			<meta><m n=":has_untyped"/></meta>
		</get_undefined>
		<nativeThis public="1" get="accessor" set="null" static="1">
			<d/>
			<haxe_doc>`nativeThis` is the JavaScript `this`, which is semantically different
		from the Haxe `this`. Use `nativeThis` only when working with external
		JavaScript code.

		In Haxe, `this` is always bound to a class instance.
		In JavaScript, `this` in a function can be bound to an arbitrary
		variable when the function is called using `func.call(thisObj, ...)` or
		`func.apply(thisObj, [...])`.

		Read more at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this</haxe_doc>
		</nativeThis>
		<get_nativeThis get="inline" set="null" line="86" static="1">
			<f a=""><d/></f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</get_nativeThis>
		<global public="1" get="accessor" set="null" static="1">
			<d/>
			<haxe_doc>An alias of the JS "global" object.

		Concretely, it is set as the first defined value in the list of
		`window`, `global`, `self`, and `this` in the top-level of the compiled output.</haxe_doc>
		</global>
		<get_global get="inline" set="null" line="104" static="1">
			<f a=""><d/></f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
		</get_global>
		<rethrow public="1" get="inline" set="null" line="113" static="1">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":extern"/>
			</meta>
			<haxe_doc>Re-throw last cathed exception, preserving original stack information.

		Calling this only makes sense inside a catch statement.</haxe_doc>
		</rethrow>
		<haxe_doc>Platform-specific JavaScript Library. Provides some platform-specific functions 
	for the JavaScript target.</haxe_doc>
	</class>
	<class path="js.Promise" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/js/Promise.hx" extern="1">
		<resolve public="1" params="T" set="method" static="1">
			<f a="?value">
				<c path="resolve.T"/>
				<c path="js.Promise"><c path="resolve.T"/></c>
			</f>
			<overloads>
				<resolve public="1" params="T" set="method"><f a="promise">
	<c path="js.Promise"><c path="resolve.T"/></c>
	<c path="js.Promise"><c path="resolve.T"/></c>
</f></resolve>
				<resolve public="1" params="T" set="method"><f a="thenable">
	<t path="js.Thenable"><c path="resolve.T"/></t>
	<c path="js.Promise"><c path="resolve.T"/></c>
</f></resolve>
			</overloads>
		</resolve>
		<reject public="1" params="T" set="method" static="1"><f a="?value">
	<d/>
	<c path="js.Promise"><c path="reject.T"/></c>
</f></reject>
		<all public="1" set="method" static="1"><f a="iterable">
	<c path="Array"><d/></c>
	<c path="js.Promise"><c path="Array"><d/></c></c>
</f></all>
		<race public="1" set="method" static="1"><f a="iterable">
	<c path="Array"><d/></c>
	<c path="js.Promise"><d/></c>
</f></race>
		<then public="1" params="TOut" set="method"><f a="fulfillCallback:?rejectCallback">
	<t path="Null"><t path="js.PromiseCallback">
	<c path="js.Promise.T"/>
	<c path="then.TOut"/>
</t></t>
	<x path="haxe.extern.EitherType">
		<f a="">
			<d/>
			<x path="Void"/>
		</f>
		<t path="js.PromiseCallback">
			<d/>
			<c path="then.TOut"/>
		</t>
	</x>
	<c path="js.Promise"><c path="then.TOut"/></c>
</f></then>
		<catchError public="1" params="TOut" set="method">
			<f a="rejectCallback">
				<x path="haxe.extern.EitherType">
					<f a="">
						<d/>
						<x path="Void"/>
					</f>
					<t path="js.PromiseCallback">
						<d/>
						<c path="catchError.TOut"/>
					</t>
				</x>
				<c path="js.Promise"><c path="catchError.TOut"/></c>
			</f>
			<meta><m n=":native"><e>"catch"</e></m></meta>
		</catchError>
		<new public="1" set="method">
			<f a="init">
				<f a=":">
					<f a="">
						<c path="js.Promise.T"/>
						<x path="Void"/>
					</f>
					<f a="">
						<d/>
						<x path="Void"/>
					</f>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Promise"</e></m></meta>
	</class>
	<typedef path="js.PromiseCallback" params="T:TOut" file="/home/travis/build/HaxeFoundation/haxe/std/js/Promise.hx" module="js.Promise"><x path="haxe.extern.EitherType">
	<f a="">
		<c path="js.PromiseCallback.T"/>
		<c path="js.PromiseCallback.TOut"/>
	</f>
	<f a="">
		<c path="js.PromiseCallback.T"/>
		<c path="js.Promise"><c path="js.PromiseCallback.TOut"/></c>
	</f>
</x></typedef>
	<typedef path="js.Thenable" params="T" file="/home/travis/build/HaxeFoundation/haxe/std/js/Promise.hx" module="js.Promise"><a><then set="method"><f a="resolve:?reject">
	<f a="">
		<c path="js.Thenable.T"/>
		<x path="Void"/>
	</f>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></then></a></typedef>
	<class path="js.RegExpMatch" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/RegExp.hx" module="js.RegExp" extern="1">
		<extends path="Array"><c path="String"/></extends>
		<index public="1"><x path="Int"/></index>
		<input public="1"><c path="String"/></input>
	</class>
	<class path="js.SWFObject" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/SWFObject.hx" extern="1">
		<addParam public="1" set="method"><f a="param:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></addParam>
		<getSWFHTML public="1" set="method"><f a=""><c path="String"/></f></getSWFHTML>
		<write public="1" set="method"><f a="elementId">
	<c path="String"/>
	<x path="Bool"/>
</f></write>
		<addVariable public="1" set="method"><f a="param:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></addVariable>
		<setAttribute public="1" set="method"><f a="id:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setAttribute>
		<new public="1" set="method"><f a="swf:id:width:height:ver:color">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":deprecated"><e>"Use js.swfobject.SWFObject instead."</e></m>
			<m n=":initPackage"/>
		</meta>
	</class>
	<class path="js.Selection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/Selection.hx">
		<doc><d/></doc>
		<get public="1" set="method" line="34">
			<f a=""><c path="String"/></f>
			<meta><m n=":has_untyped"/></meta>
		</get>
		<select public="1" set="method" line="45"><f a="start:end">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></select>
		<insert public="1" set="method" line="79">
			<f a="left:text:right">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</insert>
		<new public="1" set="method" line="30"><f a="doc">
	<c path="js.html.TextAreaElement"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="js.XMLSocket" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/XMLSocket.hx">
		<cnx><c path="haxe.remoting.ExternalConnection"/></cnx>
		<connect public="1" set="method" line="41"><f a="host:port">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></connect>
		<send public="1" set="method" line="45"><f a="data">
	<c path="String"/>
	<x path="Void"/>
</f></send>
		<close public="1" set="method" line="49"><f a=""><x path="Void"/></f></close>
		<onData public="1" set="dynamic" line="55"><f a="data">
	<c path="String"/>
	<x path="Void"/>
</f></onData>
		<onClose public="1" set="dynamic" line="58"><f a=""><x path="Void"/></f></onClose>
		<onConnect public="1" set="dynamic" line="61"><f a="b">
	<x path="Bool"/>
	<x path="Void"/>
</f></onConnect>
		<new public="1" set="method" line="32"><f a="flashObject">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>By compiling the `haxe.remoting.SocketWrapper` into a SWF, you can create 
	and use XMLSockets directly from Javascript.</haxe_doc>
	</class>
	<abstract path="js.html.AlignSetting" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/AlignSetting.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._AlignSetting.AlignSetting_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/AlignSetting.hx" private="1" module="js.html.AlignSetting" extern="1">
	<START public="1" get="inline" set="null" expr="cast &quot;start&quot;" line="29" static="1">
		<x path="js.html.AlignSetting"/>
		<meta>
			<m n=":value"><e>cast "start"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</START>
	<MIDDLE public="1" get="inline" set="null" expr="cast &quot;middle&quot;" line="30" static="1">
		<x path="js.html.AlignSetting"/>
		<meta>
			<m n=":value"><e>cast "middle"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MIDDLE>
	<END public="1" get="inline" set="null" expr="cast &quot;end&quot;" line="31" static="1">
		<x path="js.html.AlignSetting"/>
		<meta>
			<m n=":value"><e>cast "end"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</END>
	<LEFT public="1" get="inline" set="null" expr="cast &quot;left&quot;" line="32" static="1">
		<x path="js.html.AlignSetting"/>
		<meta>
			<m n=":value"><e>cast "left"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LEFT>
	<RIGHT public="1" get="inline" set="null" expr="cast &quot;right&quot;" line="33" static="1">
		<x path="js.html.AlignSetting"/>
		<meta>
			<m n=":value"><e>cast "right"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RIGHT>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._AlignSetting.AlignSetting_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/AlignSetting.hx" private="1" module="js.html.AlignSetting" extern="1">
		<START public="1" get="inline" set="null" expr="cast &quot;start&quot;" line="29" static="1">
			<x path="js.html.AlignSetting"/>
			<meta>
				<m n=":value"><e>cast "start"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</START>
		<MIDDLE public="1" get="inline" set="null" expr="cast &quot;middle&quot;" line="30" static="1">
			<x path="js.html.AlignSetting"/>
			<meta>
				<m n=":value"><e>cast "middle"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MIDDLE>
		<END public="1" get="inline" set="null" expr="cast &quot;end&quot;" line="31" static="1">
			<x path="js.html.AlignSetting"/>
			<meta>
				<m n=":value"><e>cast "end"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</END>
		<LEFT public="1" get="inline" set="null" expr="cast &quot;left&quot;" line="32" static="1">
			<x path="js.html.AlignSetting"/>
			<meta>
				<m n=":value"><e>cast "left"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LEFT>
		<RIGHT public="1" get="inline" set="null" expr="cast &quot;right&quot;" line="33" static="1">
			<x path="js.html.AlignSetting"/>
			<meta>
				<m n=":value"><e>cast "right"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RIGHT>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.EventTarget" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/EventTarget.hx" extern="1">
		<addEventListener public="1" set="method">
			<f a="type:listener:?capture" v="::false">
				<c path="String"/>
				<x path="haxe.Function"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ capture : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><addEventListener public="1" set="method">
	<f a="type:listener:?capture:?wantsUntrusted" v="::false:">
		<c path="String"/>
		<c path="js.html.EventListener"/>
		<x path="Bool"/>
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ capture : false }</e></m></meta>
	<haxe_doc>@throws DOMError</haxe_doc>
</addEventListener></overloads>
		</addEventListener>
		<removeEventListener public="1" set="method">
			<f a="type:listener:?capture" v="::false">
				<c path="String"/>
				<x path="haxe.Function"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ capture : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><removeEventListener public="1" set="method">
	<f a="type:listener:?capture" v="::false">
		<c path="String"/>
		<c path="js.html.EventListener"/>
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ capture : false }</e></m></meta>
	<haxe_doc>@throws DOMError</haxe_doc>
</removeEventListener></overloads>
		</removeEventListener>
		<dispatchEvent public="1" set="method">
			<f a="event">
				<c path="js.html.Event"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</dispatchEvent>
		<haxe_doc><![CDATA[`EventTarget` is an interface implemented by objects that can receive events and may have listeners for them.

	Documentation [EventTarget](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EventTarget>]]></haxe_doc>
		<meta><m n=":native"><e>"EventTarget"</e></m></meta>
	</class>
	<class path="js.html.Node" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Node.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<ELEMENT_NODE public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</ELEMENT_NODE>
		<ATTRIBUTE_NODE public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</ATTRIBUTE_NODE>
		<TEXT_NODE public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</TEXT_NODE>
		<CDATA_SECTION_NODE public="1" get="inline" set="null" expr="4" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</CDATA_SECTION_NODE>
		<ENTITY_REFERENCE_NODE public="1" get="inline" set="null" expr="5" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</ENTITY_REFERENCE_NODE>
		<ENTITY_NODE public="1" get="inline" set="null" expr="6" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</ENTITY_NODE>
		<PROCESSING_INSTRUCTION_NODE public="1" get="inline" set="null" expr="7" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</PROCESSING_INSTRUCTION_NODE>
		<COMMENT_NODE public="1" get="inline" set="null" expr="8" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</COMMENT_NODE>
		<DOCUMENT_NODE public="1" get="inline" set="null" expr="9" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</DOCUMENT_NODE>
		<DOCUMENT_TYPE_NODE public="1" get="inline" set="null" expr="10" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</DOCUMENT_TYPE_NODE>
		<DOCUMENT_FRAGMENT_NODE public="1" get="inline" set="null" expr="11" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>11</e></m></meta>
		</DOCUMENT_FRAGMENT_NODE>
		<NOTATION_NODE public="1" get="inline" set="null" expr="12" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</NOTATION_NODE>
		<DOCUMENT_POSITION_DISCONNECTED public="1" get="inline" set="null" expr="1" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</DOCUMENT_POSITION_DISCONNECTED>
		<DOCUMENT_POSITION_PRECEDING public="1" get="inline" set="null" expr="2" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</DOCUMENT_POSITION_PRECEDING>
		<DOCUMENT_POSITION_FOLLOWING public="1" get="inline" set="null" expr="4" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</DOCUMENT_POSITION_FOLLOWING>
		<DOCUMENT_POSITION_CONTAINS public="1" get="inline" set="null" expr="8" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</DOCUMENT_POSITION_CONTAINS>
		<DOCUMENT_POSITION_CONTAINED_BY public="1" get="inline" set="null" expr="16" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</DOCUMENT_POSITION_CONTAINED_BY>
		<DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC public="1" get="inline" set="null" expr="32" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32</e></m></meta>
		</DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC>
		<nodeType public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns an <code>unsigned short</code> representing the type of the node. Possible values are:
		 <table class="standard-table">
		  
		   <tr>
		    Name
		    Value
		   </tr>
		   <tr>
		    <td><code>ELEMENT_NODE</code></td>
		    <td><code>1</code></td>
		   </tr>
		   <tr>
		    <td><code>ATTRIBUTE_NODE</code> <em>(deprecated)</em></td>
		    <td><code>2</code></td>
		   </tr>
		   <tr>
		    <td><code>TEXT_NODE</code></td>
		    <td><code>3</code></td>
		   </tr>
		   <tr>
		    <td><code>CDATA_SECTION_NODE</code> <em>(deprecated)</em></td>
		    <td><code>4</code></td>
		   </tr>
		   <tr>
		    <td><code>ENTITY_REFERENCE_NODE</code> <em>(deprecated)</em></td>
		    <td><code>5</code></td>
		   </tr>
		   <tr>
		    <td><code>ENTITY_NODE</code> <em>(deprecated)</em></td>
		    <td><code>6</code></td>
		   </tr>
		   <tr>
		    <td><code>PROCESSING_INSTRUCTION_NODE</code></td>
		    <td><code>7</code></td>
		   </tr>
		   <tr>
		    <td><code>COMMENT_NODE</code></td>
		    <td><code>8</code></td>
		   </tr>
		   <tr>
		    <td><code>DOCUMENT_NODE</code></td>
		    <td><code>9</code></td>
		   </tr>
		   <tr>
		    <td><code>DOCUMENT_TYPE_NODE</code></td>
		    <td><code>10</code></td>
		   </tr>
		   <tr>
		    <td><code>DOCUMENT_FRAGMENT_NODE</code></td>
		    <td><code>11</code></td>
		   </tr>
		   <tr>
		    <td><code>NOTATION_NODE</code> <em>(deprecated)</em></td>
		    <td><code>12</code></td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</nodeType>
		<nodeName public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing the name of the `Node`. The structure of the name will differ with the name type. E.g. An `HTMLElement` will contain the name of the corresponding tag, like `'audio'` for an `HTMLAudioElement`, a `Text` node will have the `'#text'` string, or a `Document` node will have the `'#document'` string.</haxe_doc>
		</nodeName>
		<baseURI public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the base URL. The concept of base URL changes from one language to another; in HTML, it corresponds to the protocol, the domain name and the directory structure, that is all until the last `'/'`.</haxe_doc>
		</baseURI>
		<ownerDocument public="1" set="null">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Returns the `Document` that this node belongs to. If no document is associated with it, returns `null`.</haxe_doc>
		</ownerDocument>
		<parentNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` that is the parent of this node. If there is no such node, like if this node is the top of the tree or if doesn't participate in a tree, this property returns `null`.</haxe_doc>
		</parentNode>
		<parentElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Returns an `Element` that is the parent of this node. If the node has no parent, or if that parent is not an `Element`, this property returns `null`.</haxe_doc>
		</parentElement>
		<childNodes public="1" set="null">
			<c path="js.html.NodeList"/>
			<haxe_doc>Returns a live `NodeList` containing all the children of this node. `NodeList` being live means that if the children of the `Node` change, the `NodeList` object is automatically updated.</haxe_doc>
		</childNodes>
		<firstChild public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the first direct child node of the node, or `null` if the node has no child.</haxe_doc>
		</firstChild>
		<lastChild public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the last direct child node of the node, or `null` if the node has no child.</haxe_doc>
		</lastChild>
		<previousSibling public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the previous node in the tree, or `null` if there isn't such node.</haxe_doc>
		</previousSibling>
		<nextSibling public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the next node in the tree, or `null` if there isn't such node.</haxe_doc>
		</nextSibling>
		<nodeValue public="1">
			<c path="String"/>
			<haxe_doc>Returns / Sets the value of the current node</haxe_doc>
		</nodeValue>
		<textContent public="1">
			<c path="String"/>
			<haxe_doc>Returns / Sets the textual content of an element and all its descendants.</haxe_doc>
		</textContent>
		<namespaceURI public="1" set="null">
			<c path="String"/>
			<haxe_doc>The namespace URI of this node, or `null` if it is no namespace.
		 
		 Note: In Firefox 3.5 and earlier, HTML elements are in no namespace. In later versions, HTML elements are in the `https://www.w3.org/1999/xhtml/` namespace in both HTML and XML trees. `1.9.2`</haxe_doc>
		</namespaceURI>
		<prefix public="1" set="null">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the namespace prefix of the node, or `null` if no prefix is specified.</haxe_doc>
		</prefix>
		<localName public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the local part of the qualified name of an element.
		 
		 Note: In Firefox 3.5 and earlier, the property upper-cases the local name for HTML elements (but not XHTML elements). In later versions, this does not happen, so the property is in lower case for both HTML and XHTML. `1.9.2`</haxe_doc>
		</localName>
		<hasChildNodes public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns a `Boolean` indicating if the element has any child nodes, or not.</haxe_doc>
		</hasChildNodes>
		<insertBefore public="1" set="method">
			<f a="node:child">
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</insertBefore>
		<appendChild public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</appendChild>
		<replaceChild public="1" set="method">
			<f a="node:child">
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</replaceChild>
		<removeChild public="1" set="method">
			<f a="child">
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeChild>
		<normalize public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clean up all the text nodes under this element (merge adjacent, remove empty).</haxe_doc>
		</normalize>
		<cloneNode public="1" set="method">
			<f a="?deep" v="false">
				<x path="Bool"/>
				<c path="js.html.Node"/>
			</f>
			<meta><m n=":value"><e>{ deep : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</cloneNode>
		<isEqualNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` which indicates whether or not two nodes are of the same type and all their defining data points match.</haxe_doc>
		</isEqualNode>
		<compareDocumentPosition public="1" set="method">
			<f a="other">
				<c path="js.html.Node"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the context objects root which optionally includes the shadow root if it is available. </haxe_doc>
		</compareDocumentPosition>
		<contains public="1" set="method">
			<f a="other">
				<c path="js.html.Node"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns the context objects root which optionally includes the shadow root if it is available. </haxe_doc>
		</contains>
		<lookupPrefix public="1" set="method">
			<f a="namespace_">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Clean up all the text nodes under this element (merge adjacent, remove empty).</haxe_doc>
		</lookupPrefix>
		<lookupNamespaceURI public="1" set="method">
			<f a="prefix">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Clean up all the text nodes under this element (merge adjacent, remove empty).</haxe_doc>
		</lookupNamespaceURI>
		<isDefaultNamespace public="1" set="method">
			<f a="namespace_">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` which indicates whether or not two nodes are of the same type and all their defining data points match.</haxe_doc>
		</isDefaultNamespace>
		<haxe_doc><![CDATA[A `Node` is an interface from which a number of DOM types inherit, and allows these various types to be treated (or tested) similarly.

	Documentation [Node](https://developer.mozilla.org/en-US/docs/Web/API/Node) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Node$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Node>]]></haxe_doc>
		<meta><m n=":native"><e>"Node"</e></m></meta>
	</class>
	<class path="js.html.DOMElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DOMElement.hx" extern="1">
		<extends path="js.html.Node"/>
		<tagName public="1" set="null"><c path="String"/></tagName>
		<id public="1"><c path="String"/></id>
		<className public="1"><c path="String"/></className>
		<classList public="1" set="null"><c path="js.html.DOMTokenList"/></classList>
		<attributes public="1" set="null"><c path="js.html.NamedNodeMap"/></attributes>
		<onwheel public="1"><x path="haxe.Function"/></onwheel>
		<title public="1"><c path="String"/></title>
		<lang public="1"><c path="String"/></lang>
		<dir public="1"><c path="String"/></dir>
		<dataset public="1" set="null"><c path="js.html.DOMStringMap"/></dataset>
		<innerText public="1"><c path="String"/></innerText>
		<itemScope public="1"><x path="Bool"/></itemScope>
		<itemType public="1" set="null"><c path="js.html.DOMTokenList"/></itemType>
		<itemId public="1"><c path="String"/></itemId>
		<itemRef public="1" set="null"><c path="js.html.DOMTokenList"/></itemRef>
		<itemProp public="1" set="null"><c path="js.html.DOMTokenList"/></itemProp>
		<properties public="1" set="null"><c path="js.html.HTMLPropertiesCollection"/></properties>
		<itemValue public="1"><d/></itemValue>
		<hidden public="1"><x path="Bool"/></hidden>
		<tabIndex public="1"><x path="Int"/></tabIndex>
		<accessKey public="1"><c path="String"/></accessKey>
		<accessKeyLabel public="1" set="null"><c path="String"/></accessKeyLabel>
		<draggable public="1"><x path="Bool"/></draggable>
		<contentEditable public="1"><c path="String"/></contentEditable>
		<isContentEditable public="1" set="null"><x path="Bool"/></isContentEditable>
		<contextMenu public="1" set="null"><c path="js.html.MenuElement"/></contextMenu>
		<spellcheck public="1"><x path="Bool"/></spellcheck>
		<style public="1" set="null"><c path="js.html.CSSStyleDeclaration"/></style>
		<oncopy public="1"><x path="haxe.Function"/></oncopy>
		<oncut public="1"><x path="haxe.Function"/></oncut>
		<onpaste public="1"><x path="haxe.Function"/></onpaste>
		<offsetParent public="1" set="null"><c path="js.html.Element"/></offsetParent>
		<offsetTop public="1" set="null"><x path="Int"/></offsetTop>
		<offsetLeft public="1" set="null"><x path="Int"/></offsetLeft>
		<offsetWidth public="1" set="null"><x path="Int"/></offsetWidth>
		<offsetHeight public="1" set="null"><x path="Int"/></offsetHeight>
		<scrollTop public="1"><x path="Int"/></scrollTop>
		<scrollLeft public="1"><x path="Int"/></scrollLeft>
		<scrollWidth public="1" set="null"><x path="Int"/></scrollWidth>
		<scrollHeight public="1" set="null"><x path="Int"/></scrollHeight>
		<clientTop public="1" set="null"><x path="Int"/></clientTop>
		<clientLeft public="1" set="null"><x path="Int"/></clientLeft>
		<clientWidth public="1" set="null"><x path="Int"/></clientWidth>
		<clientHeight public="1" set="null"><x path="Int"/></clientHeight>
		<scrollTopMax public="1" set="null"><x path="Int"/></scrollTopMax>
		<scrollLeftMax public="1" set="null"><x path="Int"/></scrollLeftMax>
		<innerHTML public="1"><c path="String"/></innerHTML>
		<outerHTML public="1"><c path="String"/></outerHTML>
		<shadowRoot public="1" set="null"><c path="js.html.ShadowRoot"/></shadowRoot>
		<onabort public="1"><x path="haxe.Function"/></onabort>
		<onblur public="1"><x path="haxe.Function"/></onblur>
		<onfocus public="1"><x path="haxe.Function"/></onfocus>
		<oncanplay public="1"><x path="haxe.Function"/></oncanplay>
		<oncanplaythrough public="1"><x path="haxe.Function"/></oncanplaythrough>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onclick public="1"><x path="haxe.Function"/></onclick>
		<oncontextmenu public="1"><x path="haxe.Function"/></oncontextmenu>
		<ondblclick public="1"><x path="haxe.Function"/></ondblclick>
		<ondrag public="1"><x path="haxe.Function"/></ondrag>
		<ondragend public="1"><x path="haxe.Function"/></ondragend>
		<ondragenter public="1"><x path="haxe.Function"/></ondragenter>
		<ondragleave public="1"><x path="haxe.Function"/></ondragleave>
		<ondragover public="1"><x path="haxe.Function"/></ondragover>
		<ondragstart public="1"><x path="haxe.Function"/></ondragstart>
		<ondrop public="1"><x path="haxe.Function"/></ondrop>
		<ondurationchange public="1"><x path="haxe.Function"/></ondurationchange>
		<onemptied public="1"><x path="haxe.Function"/></onemptied>
		<onended public="1"><x path="haxe.Function"/></onended>
		<oninput public="1"><x path="haxe.Function"/></oninput>
		<oninvalid public="1"><x path="haxe.Function"/></oninvalid>
		<onkeydown public="1"><x path="haxe.Function"/></onkeydown>
		<onkeypress public="1"><x path="haxe.Function"/></onkeypress>
		<onkeyup public="1"><x path="haxe.Function"/></onkeyup>
		<onload public="1"><x path="haxe.Function"/></onload>
		<onloadeddata public="1"><x path="haxe.Function"/></onloadeddata>
		<onloadedmetadata public="1"><x path="haxe.Function"/></onloadedmetadata>
		<onloadstart public="1"><x path="haxe.Function"/></onloadstart>
		<onmousedown public="1"><x path="haxe.Function"/></onmousedown>
		<onmouseenter public="1"><x path="haxe.Function"/></onmouseenter>
		<onmouseleave public="1"><x path="haxe.Function"/></onmouseleave>
		<onmousemove public="1"><x path="haxe.Function"/></onmousemove>
		<onmouseout public="1"><x path="haxe.Function"/></onmouseout>
		<onmouseover public="1"><x path="haxe.Function"/></onmouseover>
		<onmouseup public="1"><x path="haxe.Function"/></onmouseup>
		<onpause public="1"><x path="haxe.Function"/></onpause>
		<onplay public="1"><x path="haxe.Function"/></onplay>
		<onplaying public="1"><x path="haxe.Function"/></onplaying>
		<onprogress public="1"><x path="haxe.Function"/></onprogress>
		<onratechange public="1"><x path="haxe.Function"/></onratechange>
		<onreset public="1"><x path="haxe.Function"/></onreset>
		<onresize public="1"><x path="haxe.Function"/></onresize>
		<onscroll public="1"><x path="haxe.Function"/></onscroll>
		<onseeked public="1"><x path="haxe.Function"/></onseeked>
		<onseeking public="1"><x path="haxe.Function"/></onseeking>
		<onselect public="1"><x path="haxe.Function"/></onselect>
		<onshow public="1"><x path="haxe.Function"/></onshow>
		<onstalled public="1"><x path="haxe.Function"/></onstalled>
		<onsubmit public="1"><x path="haxe.Function"/></onsubmit>
		<onsuspend public="1"><x path="haxe.Function"/></onsuspend>
		<ontimeupdate public="1"><x path="haxe.Function"/></ontimeupdate>
		<onvolumechange public="1"><x path="haxe.Function"/></onvolumechange>
		<onwaiting public="1"><x path="haxe.Function"/></onwaiting>
		<onpointercancel public="1"><x path="haxe.Function"/></onpointercancel>
		<onpointerdown public="1"><x path="haxe.Function"/></onpointerdown>
		<onpointerup public="1"><x path="haxe.Function"/></onpointerup>
		<onpointermove public="1"><x path="haxe.Function"/></onpointermove>
		<onpointerout public="1"><x path="haxe.Function"/></onpointerout>
		<onpointerover public="1"><x path="haxe.Function"/></onpointerover>
		<onpointerenter public="1"><x path="haxe.Function"/></onpointerenter>
		<onpointerleave public="1"><x path="haxe.Function"/></onpointerleave>
		<ongotpointercapture public="1"><x path="haxe.Function"/></ongotpointercapture>
		<onlostpointercapture public="1"><x path="haxe.Function"/></onlostpointercapture>
		<onfullscreenchange public="1"><x path="haxe.Function"/></onfullscreenchange>
		<onfullscreenerror public="1"><x path="haxe.Function"/></onfullscreenerror>
		<onpointerlockchange public="1"><x path="haxe.Function"/></onpointerlockchange>
		<onpointerlockerror public="1"><x path="haxe.Function"/></onpointerlockerror>
		<previousElementSibling public="1" set="null"><c path="js.html.Element"/></previousElementSibling>
		<nextElementSibling public="1" set="null"><c path="js.html.Element"/></nextElementSibling>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<children public="1" set="null"><c path="js.html.HTMLCollection"/></children>
		<firstElementChild public="1" set="null"><c path="js.html.Element"/></firstElementChild>
		<lastElementChild public="1" set="null"><c path="js.html.Element"/></lastElementChild>
		<childElementCount public="1" set="null"><x path="Int"/></childElementCount>
		<ontouchstart public="1"><x path="haxe.Function"/></ontouchstart>
		<ontouchend public="1"><x path="haxe.Function"/></ontouchend>
		<ontouchmove public="1"><x path="haxe.Function"/></ontouchmove>
		<ontouchcancel public="1"><x path="haxe.Function"/></ontouchcancel>
		<getAttributeNames public="1" set="method"><f a=""><c path="Array"><c path="String"/></c></f></getAttributeNames>
		<getAttribute public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></getAttribute>
		<getAttributeNS public="1" set="method"><f a="namespace_:localName">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></getAttributeNS>
		<setAttribute public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setAttribute>
		<setAttributeNS public="1" set="method">
			<f a="namespace_:name:value">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setAttributeNS>
		<removeAttribute public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeAttribute>
		<removeAttributeNS public="1" set="method">
			<f a="namespace_:localName">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeAttributeNS>
		<hasAttribute public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></hasAttribute>
		<hasAttributeNS public="1" set="method"><f a="namespace_:localName">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
</f></hasAttributeNS>
		<hasAttributes public="1" set="method"><f a=""><x path="Bool"/></f></hasAttributes>
		<closest public="1" set="method">
			<f a="selector">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</closest>
		<matches public="1" set="method">
			<f a="selector">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</matches>
		<webkitMatchesSelector public="1" set="method">
			<f a="selector">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</webkitMatchesSelector>
		<getElementsByTagName public="1" set="method"><f a="localName">
	<c path="String"/>
	<c path="js.html.HTMLCollection"/>
</f></getElementsByTagName>
		<getElementsByTagNameNS public="1" set="method">
			<f a="namespace_:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getElementsByTagNameNS>
		<getElementsByClassName public="1" set="method"><f a="classNames">
	<c path="String"/>
	<c path="js.html.HTMLCollection"/>
</f></getElementsByClassName>
		<setPointerCapture public="1" set="method">
			<f a="pointerId">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setPointerCapture>
		<releasePointerCapture public="1" set="method">
			<f a="pointerId">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</releasePointerCapture>
		<setCapture public="1" set="method">
			<f a="?retargetToElement" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ retargetToElement : false }</e></m></meta>
		</setCapture>
		<releaseCapture public="1" set="method"><f a=""><x path="Void"/></f></releaseCapture>
		<requestPointerLock public="1" set="method"><f a=""><x path="Void"/></f></requestPointerLock>
		<getAttributeNode public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="js.html.Attr"/>
</f></getAttributeNode>
		<setAttributeNode public="1" set="method">
			<f a="newAttr">
				<c path="js.html.Attr"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setAttributeNode>
		<removeAttributeNode public="1" set="method">
			<f a="oldAttr">
				<c path="js.html.Attr"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeAttributeNode>
		<getAttributeNodeNS public="1" set="method"><f a="namespaceURI:localName">
	<c path="String"/>
	<c path="String"/>
	<c path="js.html.Attr"/>
</f></getAttributeNodeNS>
		<setAttributeNodeNS public="1" set="method">
			<f a="newAttr">
				<c path="js.html.Attr"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setAttributeNodeNS>
		<click public="1" set="method"><f a=""><x path="Void"/></f></click>
		<focus public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</focus>
		<blur public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</blur>
		<getClientRects public="1" set="method"><f a=""><c path="js.html.DOMRectList"/></f></getClientRects>
		<getBoundingClientRect public="1" set="method"><f a=""><c path="js.html.DOMRect"/></f></getBoundingClientRect>
		<scrollIntoView public="1" set="method">
			<f a="?options">
				<t path="js.html.ScrollIntoViewOptions"/>
				<x path="Void"/>
			</f>
			<overloads><scrollIntoView public="1" set="method"><f a="top">
	<x path="Bool"/>
	<x path="Void"/>
</f></scrollIntoView></overloads>
		</scrollIntoView>
		<scroll public="1" set="method">
			<f a="?options">
				<t path="js.html.ScrollToOptions"/>
				<x path="Void"/>
			</f>
			<overloads><scroll public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scroll></overloads>
		</scroll>
		<scrollTo public="1" set="method">
			<f a="?options">
				<t path="js.html.ScrollToOptions"/>
				<x path="Void"/>
			</f>
			<overloads><scrollTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scrollTo></overloads>
		</scrollTo>
		<scrollBy public="1" set="method">
			<f a="?options">
				<t path="js.html.ScrollToOptions"/>
				<x path="Void"/>
			</f>
			<overloads><scrollBy public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scrollBy></overloads>
		</scrollBy>
		<insertAdjacentHTML public="1" set="method">
			<f a="position:text">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</insertAdjacentHTML>
		<querySelector public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</querySelector>
		<querySelectorAll public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.NodeList"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</querySelectorAll>
		<createShadowRoot public="1" set="method">
			<f a=""><c path="js.html.ShadowRoot"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createShadowRoot>
		<getDestinationInsertionPoints public="1" set="method">
			<f a=""><c path="js.html.NodeList"/></f>
			<haxe_doc>…</haxe_doc>
		</getDestinationInsertionPoints>
		<requestFullscreen public="1" set="method">
			<f a="?options">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</requestFullscreen>
		<animate public="1" set="method">
			<f a="frames:?options">
				<d/>
				<x path="haxe.extern.EitherType">
					<x path="Float"/>
					<d/>
				</x>
				<c path="js.html.Animation"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</animate>
		<getAnimations public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.Animation"/></c></f>
			<haxe_doc>Returns an array of Animation objects currently active on the element.</haxe_doc>
		</getAnimations>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<convertQuadFromNode public="1" set="method">
			<f a="quad:from:?options">
				<c path="js.html.DOMQuad"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Text"/>
					<x path="haxe.extern.EitherType">
						<c path="js.html.Element"/>
						<c path="js.html.HTMLDocument"/>
					</x>
				</x>
				<t path="js.html.ConvertCoordinateOptions"/>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</convertQuadFromNode>
		<convertRectFromNode public="1" set="method">
			<f a="rect:from:?options">
				<c path="js.html.DOMRectReadOnly"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Text"/>
					<x path="haxe.extern.EitherType">
						<c path="js.html.Element"/>
						<c path="js.html.HTMLDocument"/>
					</x>
				</x>
				<t path="js.html.ConvertCoordinateOptions"/>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</convertRectFromNode>
		<convertPointFromNode public="1" set="method">
			<f a="point:from:?options">
				<t path="js.html.DOMPointInit"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Text"/>
					<x path="haxe.extern.EitherType">
						<c path="js.html.Element"/>
						<c path="js.html.HTMLDocument"/>
					</x>
				</x>
				<t path="js.html.ConvertCoordinateOptions"/>
				<c path="js.html.DOMPoint"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</convertPointFromNode>
		<haxe_doc><![CDATA[The `Element` interface represents an object of a `Document`. This interface describes methods and properties common to all kinds of elements. Specific behaviors are described in interfaces which inherit from `Element` but add additional functionality.

	Documentation [Element](https://developer.mozilla.org/en-US/docs/Web/API/Element) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Element$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Element>]]></haxe_doc>
		<meta><m n=":native"><e>"Element"</e></m></meta>
	</class>
	<class path="js.html.Element" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Element.hx" extern="1">
		<extends path="js.html.DOMElement"/>
		<haxe_doc><![CDATA[The `HTMLElement` interface represents any HTML element. Some elements directly implement this interface, others implement it via an interface that inherits it.

	Documentation [HTMLElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLElement"</e></m></meta>
	</class>
	<class path="js.html.AnchorElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/AnchorElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<target public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `target` HTML attribute, indicating where to display the linked resource.</haxe_doc>
		</target>
		<download public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` indicating that the linked resource is intended to be downloaded rather than displayed in the browser. The value represent the proposed name of the file. If the name is not a valid filename of the underlying OS, browser will adapt it. The value is a URL with a scheme like `http:`, `file:`, `data:` or even `blob:` (created with `URL.createObjectURL`).</haxe_doc>
		</download>
		<ping public="1"><c path="String"/></ping>
		<rel public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `rel` HTML attribute, specifying the relationship of the target object to the linked object.</haxe_doc>
		</rel>
		<relList public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Returns a `DOMTokenList` that reflects the `rel` HTML attribute, as a list of tokens.</haxe_doc>
		</relList>
		<hreflang public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `hreflang` HTML attribute, indicating the language of the linked resource.</haxe_doc>
		</hreflang>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `type` HTML attribute, indicating the MIME type of the linked resource.</haxe_doc>
		</type>
		<text public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` being a synonym for the `Node.textContent` property.</haxe_doc>
		</text>
		<coords public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing a comma-separated list of coordinates.</haxe_doc>
		</coords>
		<charset public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the character encoding of the linked resource.</haxe_doc>
		</charset>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the anchor name.</haxe_doc>
		</name>
		<rev public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing that the `rev` HTML attribute, specifying the relationship of the link object to the target object.</haxe_doc>
		</rev>
		<shape public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the shape of the active area.</haxe_doc>
		</shape>
		<href public="1"><c path="String"/></href>
		<origin public="1" set="null"><c path="String"/></origin>
		<protocol public="1"><c path="String"/></protocol>
		<username public="1"><c path="String"/></username>
		<password public="1"><c path="String"/></password>
		<host public="1"><c path="String"/></host>
		<hostname public="1"><c path="String"/></hostname>
		<port public="1"><c path="String"/></port>
		<pathname public="1"><c path="String"/></pathname>
		<search public="1"><c path="String"/></search>
		<hash public="1"><c path="String"/></hash>
		<haxe_doc><![CDATA[The `HTMLAnchorElement` interface represents hyperlink elements and provides special properties and methods (beyond those of the regular `HTMLElement` object interface they also have available to them by inheritance) for manipulating the layout and presentation of such elements.

	Documentation [HTMLAnchorElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLAnchorElement"</e></m></meta>
	</class>
	<class path="js.html.Animation" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Animation.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<id public="1">
			<c path="String"/>
			<haxe_doc>Gets and sets the `String` used to identify the animation.</haxe_doc>
		</id>
		<effect public="1" set="null">
			<c path="js.html.AnimationEffectReadOnly"/>
			<haxe_doc>Gets and sets the `AnimationEffectReadOnly` associated with this animation. This will usually be a `KeyframeEffect` object.</haxe_doc>
		</effect>
		<timeline public="1" set="null">
			<c path="js.html.AnimationTimeline"/>
			<haxe_doc>Gets or sets the `AnimationTimeline` associated with this animation.</haxe_doc>
		</timeline>
		<startTime public="1">
			<x path="Float"/>
			<haxe_doc>Gets or sets the scheduled time when an animation's playback should begin.</haxe_doc>
		</startTime>
		<currentTime public="1">
			<x path="Float"/>
			<haxe_doc>The current time value of the animation in milliseconds, whether running or paused. If the animation lacks a `AnimationTimeline`, is inactive or hasn't been played yet, its value is `null`.</haxe_doc>
		</currentTime>
		<playbackRate public="1">
			<x path="Float"/>
			<haxe_doc>Gets or sets the playback rate of the animation.</haxe_doc>
		</playbackRate>
		<playState public="1" set="null">
			<x path="js.html.AnimationPlayState"/>
			<haxe_doc>Returns an enumerated value describing the playback state of an animation.</haxe_doc>
		</playState>
		<ready public="1" set="null">
			<c path="js.Promise"><c path="js.html.Animation"/></c>
			<haxe_doc>Returns the current ready Promise for this animation.</haxe_doc>
		</ready>
		<finished public="1" set="null">
			<c path="js.Promise"><c path="js.html.Animation"/></c>
			<haxe_doc>Returns the current finished Promise for this animation.</haxe_doc>
		</finished>
		<onfinish public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Gets and sets the event handler for the `finish` event.</haxe_doc>
		</onfinish>
		<oncancel public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Gets and sets the event handler for the `cancel` event.</haxe_doc>
		</oncancel>
		<cancel public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clears all `KeyframeEffect` caused by this animation and aborts its playback.</haxe_doc>
		</cancel>
		<finish public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</finish>
		<play public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</play>
		<pause public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</pause>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</reverse>
		<new public="1" set="method">
			<f a="?effect:?timeline">
				<c path="js.html.KeyframeEffectReadOnly"/>
				<c path="js.html.AnimationTimeline"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Animation` interface of the Web Animations API represents a single animation player and provides playback controls and a timeline for an animation node or source.

	Documentation [Animation](https://developer.mozilla.org/en-US/docs/Web/API/Animation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Animation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Animation>]]></haxe_doc>
		<meta><m n=":native"><e>"Animation"</e></m></meta>
	</class>
	<class path="js.html.AnimationEffectReadOnly" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/AnimationEffectReadOnly.hx" extern="1">
		<timing public="1" set="null">
			<c path="js.html.AnimationEffectTimingReadOnly"/>
			<haxe_doc>The `AnimationEffectTimingReadOnly` object associated with the animation containing all the animation's timing values.</haxe_doc>
		</timing>
		<getComputedTiming public="1" set="method">
			<f a=""><t path="js.html.ComputedTimingProperties"/></f>
			<haxe_doc>Returns the calculated timing properties for this Animation Effect.</haxe_doc>
		</getComputedTiming>
		<haxe_doc><![CDATA[The `AnimationEffectReadOnly` interface of the Web Animations API defines current and future animation effects like `KeyframeEffect`, which can be passed to `Animation` objects for playing, and `KeyframeEffectReadOnly` (which is used by CSS Animations and Transitions).

	Documentation [AnimationEffectReadOnly](https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectReadOnly) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectReadOnly$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectReadOnly>]]></haxe_doc>
		<meta><m n=":native"><e>"AnimationEffectReadOnly"</e></m></meta>
	</class>
	<class path="js.html.AnimationEffectTimingReadOnly" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/AnimationEffectTimingReadOnly.hx" extern="1">
		<delay public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The number of milliseconds to delay the start of the animation. Defaults to `0`.</haxe_doc>
		</delay>
		<endDelay public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The number of milliseconds to delay after the end of an animation. This is primarily of use when sequencing animations based on the end time of another animation. Defaults to `0`.</haxe_doc>
		</endDelay>
		<fill public="1" set="null">
			<x path="js.html.FillMode"/>
			<haxe_doc>Dictates whether the animation's effects should be reflected by the element(s) state prior to playing (`backwards`), retained after the animation has completed playing (`forwards`), or `both`. Defaults to `none`.</haxe_doc>
		</fill>
		<iterationStart public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A number representing which repetition the animation begins at and its progress through it.</haxe_doc>
		</iterationStart>
		<iterations public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The number of times the animation should repeat. Defaults to `1`, and can also take a value of infinity to make it repeat infinitely.</haxe_doc>
		</iterations>
		<duration public="1" set="null">
			<x path="haxe.extern.EitherType">
				<x path="Float"/>
				<c path="String"/>
			</x>
			<haxe_doc>The number of milliseconds each iteration of the animation takes to complete. Defaults to `0`.</haxe_doc>
		</duration>
		<direction public="1" set="null">
			<x path="js.html.PlaybackDirection"/>
			<haxe_doc>Whether the animation runs forwards (`normal`), backwards (`reverse`), switches direction after each iteration (`alternate`), or runs backwards and switches direction after each iteration (`alternate-reverse`). Defaults to `normal`.</haxe_doc>
		</direction>
		<easing public="1" set="null">
			<c path="String"/>
			<haxe_doc>The rate of the animation's change over time. Accepts the pre-defined values `linear`, `ease`, `ease-in`, `ease-out`, and `ease-in-out`, or a custom cubic-bezier value like `cubic-bezier(0.42, 0, 0.58, 1)`. Defaults to `linear`.</haxe_doc>
		</easing>
		<haxe_doc><![CDATA[The `AnimationEffectTimingReadOnly` interface of the Web Animations API is comprised of timing properties.

	Documentation [AnimationEffectTimingReadOnly](https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectTimingReadOnly) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectTimingReadOnly$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectTimingReadOnly>]]></haxe_doc>
		<meta><m n=":native"><e>"AnimationEffectTimingReadOnly"</e></m></meta>
	</class>
	<class path="js.html.AnimationEffectTiming" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/AnimationEffectTiming.hx" extern="1">
		<extends path="js.html.AnimationEffectTimingReadOnly"/>
		<haxe_doc><![CDATA[The `AnimationEffectTiming` interface of the Web Animations API is comprised of timing properties. It is returned by the `timing` attribute of a `KeyframeEffect`.

	Documentation [AnimationEffectTiming](https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectTiming) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectTiming$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectTiming>]]></haxe_doc>
		<meta><m n=":native"><e>"AnimationEffectTiming"</e></m></meta>
	</class>
	<typedef path="js.html.AnimationEffectTimingProperties" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/AnimationEffectTimingProperties.hx"><a>
	<iterations>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</iterations>
	<iterationStart>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</iterationStart>
	<fill>
		<t path="Null"><x path="js.html.FillMode"/></t>
		<meta><m n=":optional"/></meta>
	</fill>
	<endDelay>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</endDelay>
	<easing>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</easing>
	<duration>
		<t path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<c path="String"/>
</x></t>
		<meta><m n=":optional"/></meta>
	</duration>
	<direction>
		<t path="Null"><x path="js.html.PlaybackDirection"/></t>
		<meta><m n=":optional"/></meta>
	</direction>
	<delay>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</delay>
</a></typedef>
	<class path="js.html.Event" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Event.hx" extern="1">
		<NONE public="1" get="inline" set="null" expr="0" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NONE>
		<CAPTURING_PHASE public="1" get="inline" set="null" expr="1" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</CAPTURING_PHASE>
		<AT_TARGET public="1" get="inline" set="null" expr="2" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</AT_TARGET>
		<BUBBLING_PHASE public="1" get="inline" set="null" expr="3" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</BUBBLING_PHASE>
		<ALT_MASK public="1" get="inline" set="null" expr="1" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</ALT_MASK>
		<CONTROL_MASK public="1" get="inline" set="null" expr="2" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</CONTROL_MASK>
		<SHIFT_MASK public="1" get="inline" set="null" expr="4" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SHIFT_MASK>
		<META_MASK public="1" get="inline" set="null" expr="8" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</META_MASK>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>The name of the event (case-insensitive).</haxe_doc>
		</type>
		<target public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>A reference to the target to which the event was originally dispatched.</haxe_doc>
		</target>
		<currentTarget public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>A reference to the currently registered target for the event. This is the object to which the event is currently slated to be sent to; it's possible this has been changed along the way through retargeting.</haxe_doc>
		</currentTarget>
		<eventPhase public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Indicates which phase of the event flow is being processed.</haxe_doc>
		</eventPhase>
		<bubbles public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean indicating whether the event bubbles up through the DOM or not.</haxe_doc>
		</bubbles>
		<cancelable public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean indicating whether the event is cancelable.</haxe_doc>
		</cancelable>
		<defaultPrevented public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not `event.preventDefault()` has been called on the event.</haxe_doc>
		</defaultPrevented>
		<isTrusted public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the event was initiated by the browser (after a user click for instance) or by a script (using an event creation method, like event.initEvent)</haxe_doc>
		</isTrusted>
		<timeStamp public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The time at which the event was created, in milliseconds. By specification, this value is time since epoch, but in reality browsers' definitions vary; in addition, work is underway to change this to be a `DOMHighResTimeStamp` instead.</haxe_doc>
		</timeStamp>
		<originalTarget public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>The original target of the event, before any retargetings (Mozilla-specific).</haxe_doc>
		</originalTarget>
		<explicitOriginalTarget public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>The explicit original target of the event (Mozilla-specific).</haxe_doc>
		</explicitOriginalTarget>
		<stopPropagation public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stops the propagation of events further along in the DOM.</haxe_doc>
		</stopPropagation>
		<stopImmediatePropagation public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>For this particular event, no other listener will be called. Neither those attached on the same element, nor those attached on elements which will be traversed later (in capture phase, for instance)</haxe_doc>
		</stopImmediatePropagation>
		<preventDefault public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Cancels the event (if it is cancelable).</haxe_doc>
		</preventDefault>
		<initEvent public="1" set="method">
			<f a="type:bubbles:cancelable">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Initializes the value of an Event created. If the event has already being dispatched, this method does nothing.</haxe_doc>
		</initEvent>
		<getPreventDefault public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Non-standard. Returns the value of `Event.defaultPrevented`. Use `Event.defaultPrevented` instead.</haxe_doc>
		</getPreventDefault>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<t path="js.html.EventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Event` interface represents any event which takes place in the DOM; some are user-generated (such as mouse or keyboard events), while others are generated by APIs (such as events that indicate an animation has finished running, a video has been paused, and so forth). There are many types of event, some of which use are other interfaces based on the main `Event` interface. `Event` itself contains the properties and methods which are common to all events.

	Documentation [Event](https://developer.mozilla.org/en-US/docs/Web/API/Event) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Event$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Event>]]></haxe_doc>
		<meta><m n=":native"><e>"Event"</e></m></meta>
	</class>
	<class path="js.html.AnimationEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/AnimationEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<animationName public="1" set="null">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the value of the `animation-name` CSS property associated with the transition.</haxe_doc>
		</animationName>
		<elapsedTime public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Is a `float` giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused. For an `"animationstart"` event, `elapsedTime` is `0.0` unless there was a negative value for `animation-delay`, in which case the event will be fired with `elapsedTime` containing  `(-1 * `delay`)`.</haxe_doc>
		</elapsedTime>
		<pseudoElement public="1" set="null">
			<c path="String"/>
			<haxe_doc>Is a `DOMString`, starting with `'::'`, containing the name of the pseudo-element the animation runs on. If the animation doesn't run on a pseudo-element but on the element, an empty string: `''``.`</haxe_doc>
		</pseudoElement>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<t path="js.html.AnimationEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `AnimationEvent` interface represents events providing information related to animations.

	Documentation [AnimationEvent](https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"AnimationEvent"</e></m></meta>
	</class>
	<typedef path="js.html.AnimationEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/AnimationEventInit.hx"><a>
	<pseudoElement>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</pseudoElement>
	<elapsedTime>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</elapsedTime>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
	<animationName>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</animationName>
</a></typedef>
	<abstract path="js.html.AnimationPlayState" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/AnimationPlayState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._AnimationPlayState.AnimationPlayState_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/AnimationPlayState.hx" private="1" module="js.html.AnimationPlayState" extern="1">
	<IDLE public="1" get="inline" set="null" expr="cast &quot;idle&quot;" line="29" static="1">
		<x path="js.html.AnimationPlayState"/>
		<meta>
			<m n=":value"><e>cast "idle"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IDLE>
	<PENDING public="1" get="inline" set="null" expr="cast &quot;pending&quot;" line="30" static="1">
		<x path="js.html.AnimationPlayState"/>
		<meta>
			<m n=":value"><e>cast "pending"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PENDING>
	<RUNNING public="1" get="inline" set="null" expr="cast &quot;running&quot;" line="31" static="1">
		<x path="js.html.AnimationPlayState"/>
		<meta>
			<m n=":value"><e>cast "running"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RUNNING>
	<PAUSED public="1" get="inline" set="null" expr="cast &quot;paused&quot;" line="32" static="1">
		<x path="js.html.AnimationPlayState"/>
		<meta>
			<m n=":value"><e>cast "paused"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PAUSED>
	<FINISHED public="1" get="inline" set="null" expr="cast &quot;finished&quot;" line="33" static="1">
		<x path="js.html.AnimationPlayState"/>
		<meta>
			<m n=":value"><e>cast "finished"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FINISHED>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._AnimationPlayState.AnimationPlayState_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/AnimationPlayState.hx" private="1" module="js.html.AnimationPlayState" extern="1">
		<IDLE public="1" get="inline" set="null" expr="cast &quot;idle&quot;" line="29" static="1">
			<x path="js.html.AnimationPlayState"/>
			<meta>
				<m n=":value"><e>cast "idle"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IDLE>
		<PENDING public="1" get="inline" set="null" expr="cast &quot;pending&quot;" line="30" static="1">
			<x path="js.html.AnimationPlayState"/>
			<meta>
				<m n=":value"><e>cast "pending"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PENDING>
		<RUNNING public="1" get="inline" set="null" expr="cast &quot;running&quot;" line="31" static="1">
			<x path="js.html.AnimationPlayState"/>
			<meta>
				<m n=":value"><e>cast "running"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RUNNING>
		<PAUSED public="1" get="inline" set="null" expr="cast &quot;paused&quot;" line="32" static="1">
			<x path="js.html.AnimationPlayState"/>
			<meta>
				<m n=":value"><e>cast "paused"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PAUSED>
		<FINISHED public="1" get="inline" set="null" expr="cast &quot;finished&quot;" line="33" static="1">
			<x path="js.html.AnimationPlayState"/>
			<meta>
				<m n=":value"><e>cast "finished"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FINISHED>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.AnimationTimeline" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/AnimationTimeline.hx" extern="1">
		<currentTime public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the time value in milliseconds for this timeline or `null` if this timeline is inactive.</haxe_doc>
		</currentTime>
		<haxe_doc><![CDATA[The `AnimationTimeline` interface of the Web Animations API represents the timeline of an animation. This interface exists to define timeline features (inherited by `DocumentTimeline` and future timeline types) and is not itself directly used by developers. Anywhere you see `AnimationTimeline`, you should use `DocumentTimeline` or any other timeline type instead.

	Documentation [AnimationTimeline](https://developer.mozilla.org/en-US/docs/Web/API/AnimationTimeline) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AnimationTimeline$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AnimationTimeline>]]></haxe_doc>
		<meta><m n=":native"><e>"AnimationTimeline"</e></m></meta>
	</class>
	<class path="js.html.AppletElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/AppletElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1"><c path="String"/></align>
		<alt public="1"><c path="String"/></alt>
		<archive public="1"><c path="String"/></archive>
		<code public="1"><c path="String"/></code>
		<codeBase public="1"><c path="String"/></codeBase>
		<height public="1"><c path="String"/></height>
		<hspace public="1"><x path="Int"/></hspace>
		<name public="1"><c path="String"/></name>
		<object public="1"><c path="String"/></object>
		<vspace public="1"><x path="Int"/></vspace>
		<width public="1"><c path="String"/></width>
		<meta><m n=":native"><e>"HTMLAppletElement"</e></m></meta>
	</class>
	<class path="js.html.ApplicationCache" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ApplicationCache.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<UNCACHED public="1" get="inline" set="null" expr="0" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</UNCACHED>
		<IDLE public="1" get="inline" set="null" expr="1" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</IDLE>
		<CHECKING public="1" get="inline" set="null" expr="2" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</CHECKING>
		<DOWNLOADING public="1" get="inline" set="null" expr="3" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</DOWNLOADING>
		<UPDATEREADY public="1" get="inline" set="null" expr="4" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</UPDATEREADY>
		<OBSOLETE public="1" get="inline" set="null" expr="5" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</OBSOLETE>
		<status public="1" set="null"><x path="Int"/></status>
		<onchecking public="1"><x path="haxe.Function"/></onchecking>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<onnoupdate public="1"><x path="haxe.Function"/></onnoupdate>
		<ondownloading public="1"><x path="haxe.Function"/></ondownloading>
		<onprogress public="1"><x path="haxe.Function"/></onprogress>
		<onupdateready public="1"><x path="haxe.Function"/></onupdateready>
		<oncached public="1"><x path="haxe.Function"/></oncached>
		<onobsolete public="1"><x path="haxe.Function"/></onobsolete>
		<update public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</update>
		<swapCache public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</swapCache>
		<meta><m n=":native"><e>"ApplicationCache"</e></m></meta>
	</class>
	<class path="js.html.AreaElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/AreaElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<alt public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `alt` HTML attribute, containing alternative text for the element.</haxe_doc>
		</alt>
		<coords public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `coords` HTML attribute, containing coordinates to define the hot-spot region.</haxe_doc>
		</coords>
		<shape public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `shape` HTML attribute, indicating the shape of the hot-spot, limited to known values.</haxe_doc>
		</shape>
		<target public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `target` HTML attribute, indicating the browsing context in which to open the linked resource.</haxe_doc>
		</target>
		<download public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` indicating that the linked resource is intended to be downloaded rather than displayed in the browser. The value represent the proposed name of the file. If the name is not a valid filename of the underlying OS, browser will adapt it.</haxe_doc>
		</download>
		<ping public="1"><c path="String"/></ping>
		<rel public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `rel` HTML attribute, indicating relationships of the current document to the linked resource.</haxe_doc>
		</rel>
		<relList public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Returns a `DOMTokenList` that reflects the `rel` HTML attribute, indicating relationships of the current document to the linked resource, as a list of tokens.</haxe_doc>
		</relList>
		<noHref public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` flag indicating if the area is inactive (`true`) or active (`false`).</haxe_doc>
		</noHref>
		<href public="1"><c path="String"/></href>
		<origin public="1" set="null"><c path="String"/></origin>
		<protocol public="1"><c path="String"/></protocol>
		<username public="1"><c path="String"/></username>
		<password public="1"><c path="String"/></password>
		<host public="1"><c path="String"/></host>
		<hostname public="1"><c path="String"/></hostname>
		<port public="1"><c path="String"/></port>
		<pathname public="1"><c path="String"/></pathname>
		<search public="1"><c path="String"/></search>
		<hash public="1"><c path="String"/></hash>
		<haxe_doc><![CDATA[The `HTMLAreaElement` interface provides special properties and methods (beyond those of the regular object `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of area elements.

	Documentation [HTMLAreaElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLAreaElement"</e></m></meta>
	</class>
	<class path="js.html.ArrayBuffer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ArrayBuffer.hx" extern="1">
		<isView public="1" set="method" static="1"><f a="value">
	<d/>
	<x path="Bool"/>
</f></isView>
		<byteLength public="1" set="null"><x path="Int"/></byteLength>
		<slice public="1" set="method"><f a="begin:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.ArrayBuffer"/>
</f></slice>
		<new public="1" set="method">
			<f a="length">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"ArrayBuffer"</e></m></meta>
	</class>
	<class path="js.html.Attr" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Attr.hx" extern="1">
		<extends path="js.html.Node"/>
		<value public="1"><c path="String"/></value>
		<name public="1" set="null"><c path="String"/></name>
		<specified public="1" set="null"><x path="Bool"/></specified>
		<ownerElement public="1" set="null"><c path="js.html.Element"/></ownerElement>
		<haxe_doc><![CDATA[This type represents a DOM element's attribute as an object. In most DOM methods, you will probably directly retrieve the attribute as a string (e.g., `Element.getAttribute()`, but certain functions (e.g., `Element.getAttributeNode()`) or means of iterating give `Attr` types.

	Documentation [Attr](https://developer.mozilla.org/en-US/docs/Web/API/Attr) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Attr$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Attr>]]></haxe_doc>
		<meta><m n=":native"><e>"Attr"</e></m></meta>
	</class>
	<class path="js.html.MediaElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MediaElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<NETWORK_EMPTY public="1" get="inline" set="null" expr="0" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NETWORK_EMPTY>
		<NETWORK_IDLE public="1" get="inline" set="null" expr="1" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</NETWORK_IDLE>
		<NETWORK_LOADING public="1" get="inline" set="null" expr="2" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</NETWORK_LOADING>
		<NETWORK_NO_SOURCE public="1" get="inline" set="null" expr="3" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</NETWORK_NO_SOURCE>
		<HAVE_NOTHING public="1" get="inline" set="null" expr="0" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</HAVE_NOTHING>
		<HAVE_METADATA public="1" get="inline" set="null" expr="1" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</HAVE_METADATA>
		<HAVE_CURRENT_DATA public="1" get="inline" set="null" expr="2" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</HAVE_CURRENT_DATA>
		<HAVE_FUTURE_DATA public="1" get="inline" set="null" expr="3" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</HAVE_FUTURE_DATA>
		<HAVE_ENOUGH_DATA public="1" get="inline" set="null" expr="4" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</HAVE_ENOUGH_DATA>
		<error public="1" set="null">
			<c path="js.html.MediaError"/>
			<haxe_doc>Returns a `MediaError` object for the most recent error, or `null` if there has not been an error.</haxe_doc>
		</error>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `src` HTML attribute, which contains the URL of a media resource to use.</haxe_doc>
		</src>
		<currentSrc public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` with the absolute URL of the chosen media resource.</haxe_doc>
		</currentSrc>
		<crossOrigin public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` indicating the CORS setting for this media element.</haxe_doc>
		</crossOrigin>
		<networkState public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `unsigned short` (enumeration) indicating the current state of fetching the media over the network.</haxe_doc>
		</networkState>
		<preload public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `preload` HTML attribute, indicating what data should be preloaded, if any. Possible values are: `none`, `metadata`, `auto`.</haxe_doc>
		</preload>
		<buffered public="1" set="null">
			<c path="js.html.TimeRanges"/>
			<haxe_doc>Returns a `TimeRanges` object that indicates the ranges of the media source that the browser has buffered (if any) at the moment the `buffered` property is accessed.</haxe_doc>
		</buffered>
		<readyState public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `unsigned short` (enumeration) indicating the readiness state of the media.</haxe_doc>
		</readyState>
		<seeking public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that indicates whether the media is in the process of seeking to a new position.</haxe_doc>
		</seeking>
		<currentTime public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` indicating the current playback time in seconds. Setting this value seeks the media to the new time.</haxe_doc>
		</currentTime>
		<duration public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a `double` indicating the length of the media in seconds, or 0 if no media data is available.</haxe_doc>
		</duration>
		<paused public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that indicates whether the media element is paused.</haxe_doc>
		</paused>
		<defaultPlaybackRate public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` indicating the default playback rate for the media.</haxe_doc>
		</defaultPlaybackRate>
		<playbackRate public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` that indicates the rate at which the media is being played back. </haxe_doc>
		</playbackRate>
		<played public="1" set="null">
			<c path="js.html.TimeRanges"/>
			<haxe_doc>Returns a `TimeRanges` object that contains the ranges of the media source that the browser has played, if any.</haxe_doc>
		</played>
		<seekable public="1" set="null">
			<c path="js.html.TimeRanges"/>
			<haxe_doc>Returns a `TimeRanges` object that contains the time ranges that the user is able to seek to, if any.</haxe_doc>
		</seekable>
		<ended public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that indicates whether the media element has finished playing.</haxe_doc>
		</ended>
		<autoplay public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `autoplay` HTML attribute, indicating whether playback should automatically begin as soon as enough media is available to do so without interruption.</haxe_doc>
		</autoplay>
		<loop public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `loop` HTML attribute, which indicates whether the media element should start over when it reaches the end.</haxe_doc>
		</loop>
		<controls public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `controls` HTML attribute, indicating whether user interface items for controlling the resource should be displayed.</haxe_doc>
		</controls>
		<volume public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` indicating the audio volume, from 0.0 (silent) to 1.0 (loudest).</haxe_doc>
		</volume>
		<muted public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that determines whether audio is muted. `true` if the audio is muted and `false` otherwise.</haxe_doc>
		</muted>
		<defaultMuted public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `muted` HTML attribute, which indicates whether the media element's audio output should be muted by default.</haxe_doc>
		</defaultMuted>
		<audioTracks public="1" set="null">
			<c path="js.html.AudioTrackList"/>
			<haxe_doc>Is a `AudioTrackList` that lists the `AudioTrack` objects contained in the element.</haxe_doc>
		</audioTracks>
		<videoTracks public="1" set="null">
			<c path="js.html.VideoTrackList"/>
			<haxe_doc>Returns the list of `VideoTrack` objects contained in the element.
		 
		 Note: Gecko supports only single track playback, and the parsing of tracks' metadata is only available for media with the Ogg container format.</haxe_doc>
		</videoTracks>
		<textTracks public="1" set="null">
			<c path="js.html.TextTrackList"/>
			<haxe_doc>Returns the list of `TextTrack` objects contained in the element.</haxe_doc>
		</textTracks>
		<srcObject public="1">
			<c path="js.html.MediaStream"/>
			<haxe_doc>Is a `MediaStream` representing the media to play or that has played in the current `HTMLMediaElement`.</haxe_doc>
		</srcObject>
		<load public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Resets the media element and restarts the media resource. Any pending events are discarded. How much media data is fetched is still affected by the `preload` attribute. This method can be useful for releasing resources after any `src` attribute and `source` element descendants have been removed. Otherwise, it is usually unnecessary to use this method, unless required to rescan `source` element children after dynamic changes.</haxe_doc>
		</load>
		<canPlayType public="1" set="method">
			<f a="type">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Determines whether the specified media type can be played back.</haxe_doc>
		</canPlayType>
		<fastSeek public="1" set="method">
			<f a="time">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</fastSeek>
		<play public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</play>
		<pause public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</pause>
		<addTextTrack public="1" set="method">
			<f a="kind:?label:?language" v=":&quot;&quot;:&quot;&quot;">
				<x path="js.html.TextTrackKind"/>
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.TextTrack"/>
			</f>
			<meta><m n=":value"><e>{ language : "", label : "" }</e></m></meta>
			<haxe_doc>Adds a text track (such as a track for subtitles) to a media element.</haxe_doc>
		</addTextTrack>
		<haxe_doc><![CDATA[The `HTMLMediaElement` interface adds to `HTMLElement` the properties and methods needed to support basic media-related capabilities that are common to audio and video. The `HTMLVideoElement` and `HTMLAudioElement` elements both inherit this interface.

	Documentation [HTMLMediaElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLMediaElement"</e></m></meta>
	</class>
	<class path="js.html.AudioElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/AudioElement.hx" extern="1">
		<extends path="js.html.MediaElement"/>
		<haxe_doc><![CDATA[The `HTMLAudioElement` interface provides access to the properties of `audio` elements, as well as methods to manipulate them. It derives from the `HTMLMediaElement` interface.

	Documentation [HTMLAudioElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLAudioElement"</e></m></meta>
	</class>
	<class path="js.html.Audio" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Audio.hx" extern="1">
		<extends path="js.html.AudioElement"/>
		<new public="1" set="method">
			<f a="?src">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Audio"</e></m></meta>
	</class>
	<abstract path="js.html.AudioChannel" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/AudioChannel.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._AudioChannel.AudioChannel_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/AudioChannel.hx" private="1" module="js.html.AudioChannel" extern="1">
	<NORMAL public="1" get="inline" set="null" expr="cast &quot;normal&quot;" line="29" static="1">
		<x path="js.html.AudioChannel"/>
		<meta>
			<m n=":value"><e>cast "normal"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NORMAL>
	<CONTENT public="1" get="inline" set="null" expr="cast &quot;content&quot;" line="30" static="1">
		<x path="js.html.AudioChannel"/>
		<meta>
			<m n=":value"><e>cast "content"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CONTENT>
	<NOTIFICATION public="1" get="inline" set="null" expr="cast &quot;notification&quot;" line="31" static="1">
		<x path="js.html.AudioChannel"/>
		<meta>
			<m n=":value"><e>cast "notification"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NOTIFICATION>
	<ALARM public="1" get="inline" set="null" expr="cast &quot;alarm&quot;" line="32" static="1">
		<x path="js.html.AudioChannel"/>
		<meta>
			<m n=":value"><e>cast "alarm"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ALARM>
	<TELEPHONY public="1" get="inline" set="null" expr="cast &quot;telephony&quot;" line="33" static="1">
		<x path="js.html.AudioChannel"/>
		<meta>
			<m n=":value"><e>cast "telephony"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TELEPHONY>
	<RINGER public="1" get="inline" set="null" expr="cast &quot;ringer&quot;" line="34" static="1">
		<x path="js.html.AudioChannel"/>
		<meta>
			<m n=":value"><e>cast "ringer"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RINGER>
	<PUBLICNOTIFICATION public="1" get="inline" set="null" expr="cast &quot;publicnotification&quot;" line="35" static="1">
		<x path="js.html.AudioChannel"/>
		<meta>
			<m n=":value"><e>cast "publicnotification"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PUBLICNOTIFICATION>
	<SYSTEM public="1" get="inline" set="null" expr="cast &quot;system&quot;" line="36" static="1">
		<x path="js.html.AudioChannel"/>
		<meta>
			<m n=":value"><e>cast "system"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SYSTEM>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._AudioChannel.AudioChannel_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/AudioChannel.hx" private="1" module="js.html.AudioChannel" extern="1">
		<NORMAL public="1" get="inline" set="null" expr="cast &quot;normal&quot;" line="29" static="1">
			<x path="js.html.AudioChannel"/>
			<meta>
				<m n=":value"><e>cast "normal"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NORMAL>
		<CONTENT public="1" get="inline" set="null" expr="cast &quot;content&quot;" line="30" static="1">
			<x path="js.html.AudioChannel"/>
			<meta>
				<m n=":value"><e>cast "content"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CONTENT>
		<NOTIFICATION public="1" get="inline" set="null" expr="cast &quot;notification&quot;" line="31" static="1">
			<x path="js.html.AudioChannel"/>
			<meta>
				<m n=":value"><e>cast "notification"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NOTIFICATION>
		<ALARM public="1" get="inline" set="null" expr="cast &quot;alarm&quot;" line="32" static="1">
			<x path="js.html.AudioChannel"/>
			<meta>
				<m n=":value"><e>cast "alarm"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ALARM>
		<TELEPHONY public="1" get="inline" set="null" expr="cast &quot;telephony&quot;" line="33" static="1">
			<x path="js.html.AudioChannel"/>
			<meta>
				<m n=":value"><e>cast "telephony"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TELEPHONY>
		<RINGER public="1" get="inline" set="null" expr="cast &quot;ringer&quot;" line="34" static="1">
			<x path="js.html.AudioChannel"/>
			<meta>
				<m n=":value"><e>cast "ringer"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RINGER>
		<PUBLICNOTIFICATION public="1" get="inline" set="null" expr="cast &quot;publicnotification&quot;" line="35" static="1">
			<x path="js.html.AudioChannel"/>
			<meta>
				<m n=":value"><e>cast "publicnotification"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PUBLICNOTIFICATION>
		<SYSTEM public="1" get="inline" set="null" expr="cast &quot;system&quot;" line="36" static="1">
			<x path="js.html.AudioChannel"/>
			<meta>
				<m n=":value"><e>cast "system"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SYSTEM>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="js.html.AudioContextState" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/AudioContextState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._AudioContextState.AudioContextState_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/AudioContextState.hx" private="1" module="js.html.AudioContextState" extern="1">
	<SUSPENDED public="1" get="inline" set="null" expr="cast &quot;suspended&quot;" line="29" static="1">
		<x path="js.html.AudioContextState"/>
		<meta>
			<m n=":value"><e>cast "suspended"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SUSPENDED>
	<RUNNING public="1" get="inline" set="null" expr="cast &quot;running&quot;" line="30" static="1">
		<x path="js.html.AudioContextState"/>
		<meta>
			<m n=":value"><e>cast "running"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RUNNING>
	<CLOSED public="1" get="inline" set="null" expr="cast &quot;closed&quot;" line="31" static="1">
		<x path="js.html.AudioContextState"/>
		<meta>
			<m n=":value"><e>cast "closed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CLOSED>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._AudioContextState.AudioContextState_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/AudioContextState.hx" private="1" module="js.html.AudioContextState" extern="1">
		<SUSPENDED public="1" get="inline" set="null" expr="cast &quot;suspended&quot;" line="29" static="1">
			<x path="js.html.AudioContextState"/>
			<meta>
				<m n=":value"><e>cast "suspended"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SUSPENDED>
		<RUNNING public="1" get="inline" set="null" expr="cast &quot;running&quot;" line="30" static="1">
			<x path="js.html.AudioContextState"/>
			<meta>
				<m n=":value"><e>cast "running"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RUNNING>
		<CLOSED public="1" get="inline" set="null" expr="cast &quot;closed&quot;" line="31" static="1">
			<x path="js.html.AudioContextState"/>
			<meta>
				<m n=":value"><e>cast "closed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CLOSED>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.MediaStreamTrack" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MediaStreamTrack.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<kind public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` set to `"audio"` if the track is an audio track and to `"video"`, if it is a video track. It doesn't change if the track is deassociated from its source.</haxe_doc>
		</kind>
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing a unique identifier (GUID) for the track; it is generated by the browser.</haxe_doc>
		</id>
		<label public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing a user agent-assigned label that identifies the track source, as in `"internal microphone"`. The string may be left empty and is empty as long as no source has been connected. When the track is deassociated from its source, the label is not changed.</haxe_doc>
		</label>
		<enabled public="1">
			<x path="Bool"/>
			<haxe_doc>A Boolean value with a value of `true` if the track is enabled, that is allowed to render the media source stream; or `false` if it is disabled, that is not rendering the media source stream but silence and blackness. If the track has been disconnected, this value can be changed but has no more effect.</haxe_doc>
		</enabled>
		<stop public="1" set="method"><f a=""><x path="Void"/></f></stop>
		<applyConstraints public="1" set="method">
			<f a="?constraints">
				<t path="js.html.MediaTrackConstraints"/>
				<c path="js.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</applyConstraints>
		<haxe_doc><![CDATA[The `MediaStreamTrack` interface represents a single media track within a stream; typically, these are audio or video tracks, but other track types may exist as well.

	Documentation [MediaStreamTrack](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaStreamTrack"</e></m></meta>
	</class>
	<class path="js.html.AudioStreamTrack" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/AudioStreamTrack.hx" extern="1">
		<extends path="js.html.MediaStreamTrack"/>
		<meta><m n=":native"><e>"AudioStreamTrack"</e></m></meta>
	</class>
	<class path="js.html.AudioTrack" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/AudioTrack.hx" extern="1">
		<id public="1" set="null"><c path="String"/></id>
		<kind public="1" set="null"><c path="String"/></kind>
		<label public="1" set="null"><c path="String"/></label>
		<language public="1" set="null"><c path="String"/></language>
		<enabled public="1"><x path="Bool"/></enabled>
		<meta><m n=":native"><e>"AudioTrack"</e></m></meta>
	</class>
	<class path="js.html.AudioTrackList" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/AudioTrackList.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<length public="1" set="null"><x path="Int"/></length>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onaddtrack public="1"><x path="haxe.Function"/></onaddtrack>
		<onremovetrack public="1"><x path="haxe.Function"/></onremovetrack>
		<getTrackById public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="js.html.AudioTrack"/>
</f></getTrackById>
		<meta><m n=":native"><e>"AudioTrackList"</e></m></meta>
	</class>
	<class path="js.html.BRElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/BRElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<clear public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` indicating the flow of text around floating objects.</haxe_doc>
		</clear>
		<haxe_doc><![CDATA[The `HTMLBRElement` interface represents a HTML line break element (`br`). It inherits from `HTMLElement`.

	Documentation [HTMLBRElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBRElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBRElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLBRElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLBRElement"</e></m></meta>
	</class>
	<class path="js.html.BarProp" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/BarProp.hx" extern="1">
		<visible public="1"><x path="Bool"/></visible>
		<meta><m n=":native"><e>"BarProp"</e></m></meta>
	</class>
	<class path="js.html.BaseElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/BaseElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<href public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `href` HTML attribute, containing a base URL for relative URLs in the document.</haxe_doc>
		</href>
		<target public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `target` HTML attribute, containing a default target browsing context or frame for elements that do not have a target reference specified.</haxe_doc>
		</target>
		<haxe_doc><![CDATA[The `HTMLBaseElement` interface contains the base URI for a document. This object inherits all of the properties and methods as described in the `HTMLElement` interface.

	Documentation [HTMLBaseElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLBaseElement"</e></m></meta>
	</class>
	<class path="js.html.BatteryManager" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/BatteryManager.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<charging public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A Boolean value indicating whether or not the battery is currently being charged.</haxe_doc>
		</charging>
		<chargingTime public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A number representing the remaining time in seconds until the battery is fully charged, or 0 if the battery is already fully charged.</haxe_doc>
		</chargingTime>
		<dischargingTime public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A number representing the remaining time in seconds until the battery is completely discharged and the system will suspend.</haxe_doc>
		</dischargingTime>
		<level public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A number representing the system's battery charge level scaled to a value between 0.0 and 1.0.</haxe_doc>
		</level>
		<onchargingchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `chargingchange` event; This event is sent when the battery charging state is updated.</haxe_doc>
		</onchargingchange>
		<onchargingtimechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `chargingtimechange` event; This event is sent when the battery charging time is updated</haxe_doc>
		</onchargingtimechange>
		<ondischargingtimechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `dischargingtimechange` event; This event is sent when the battery discharging time is updated.</haxe_doc>
		</ondischargingtimechange>
		<onlevelchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `levelchange` event; This event is sent when the battery level is updated.</haxe_doc>
		</onlevelchange>
		<haxe_doc><![CDATA[The `BatteryManager` interface provides ways to get information about the system's battery charge level.

	Documentation [BatteryManager](https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager>]]></haxe_doc>
		<meta><m n=":native"><e>"BatteryManager"</e></m></meta>
	</class>
	<class path="js.html.BeforeUnloadEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/BeforeUnloadEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<returnValue public="1"><c path="String"/></returnValue>
		<haxe_doc><![CDATA[The `beforeunload` event is fired when the window, the document and its resources are about to be unloaded.

	Documentation [BeforeUnloadEvent](https://developer.mozilla.org/en-US/docs/Web/API/BeforeUnloadEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/BeforeUnloadEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/BeforeUnloadEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"BeforeUnloadEvent"</e></m></meta>
	</class>
	<abstract path="js.html.BinaryType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/BinaryType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._BinaryType.BinaryType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/BinaryType.hx" private="1" module="js.html.BinaryType" extern="1">
	<BLOB public="1" get="inline" set="null" expr="cast &quot;blob&quot;" line="29" static="1">
		<x path="js.html.BinaryType"/>
		<meta>
			<m n=":value"><e>cast "blob"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BLOB>
	<ARRAYBUFFER public="1" get="inline" set="null" expr="cast &quot;arraybuffer&quot;" line="30" static="1">
		<x path="js.html.BinaryType"/>
		<meta>
			<m n=":value"><e>cast "arraybuffer"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ARRAYBUFFER>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._BinaryType.BinaryType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/BinaryType.hx" private="1" module="js.html.BinaryType" extern="1">
		<BLOB public="1" get="inline" set="null" expr="cast &quot;blob&quot;" line="29" static="1">
			<x path="js.html.BinaryType"/>
			<meta>
				<m n=":value"><e>cast "blob"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BLOB>
		<ARRAYBUFFER public="1" get="inline" set="null" expr="cast &quot;arraybuffer&quot;" line="30" static="1">
			<x path="js.html.BinaryType"/>
			<meta>
				<m n=":value"><e>cast "arraybuffer"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ARRAYBUFFER>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.Blob" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Blob.hx" extern="1">
		<size public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The size, in bytes, of the data contained in the `Blob` object.</haxe_doc>
		</size>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>A string indicating the MIME type of the data contained in the `Blob`. If the type is unknown, this string is empty.</haxe_doc>
		</type>
		<slice public="1" set="method">
			<f a="?start:?end:?contentType" v="::&quot;&quot;">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="js.html.Blob"/>
			</f>
			<meta><m n=":value"><e>{ contentType : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</slice>
		<new public="1" set="method">
			<f a="blobParts:?options">
				<c path="Array"><x path="haxe.extern.EitherType">
	<c path="js.html.ArrayBuffer"/>
	<x path="haxe.extern.EitherType">
		<c path="js.html.ArrayBufferView"/>
		<x path="haxe.extern.EitherType">
			<c path="js.html.Blob"/>
			<c path="String"/>
		</x>
	</x>
</x></c>
				<t path="js.html.BlobPropertyBag"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[A `Blob` object represents a file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The `File` interface is based on `Blob`, inheriting blob functionality and expanding it to support files on the user's system.

	Documentation [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Blob$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Blob>]]></haxe_doc>
		<meta><m n=":native"><e>"Blob"</e></m></meta>
	</class>
	<typedef path="js.html.BlobPropertyBag" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/BlobPropertyBag.hx"><a>
	<type>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</type>
	<endings>
		<t path="Null"><d/></t>
		<meta><m n=":optional"/></meta>
	</endings>
</a></typedef>
	<class path="js.html.BodyElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/BodyElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<text public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the foreground color of text.</haxe_doc>
		</text>
		<link public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the color of unvisited links.</haxe_doc>
		</link>
		<vLink public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the color of visited links.</haxe_doc>
		</vLink>
		<aLink public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the color of active hyperlinks.</haxe_doc>
		</aLink>
		<bgColor public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the background color for the document.</haxe_doc>
		</bgColor>
		<background public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the description of the location of the background image resource. Note that this is not an URI, though some older version of some browsers do expect it.</haxe_doc>
		</background>
		<onafterprint public="1"><x path="haxe.Function"/></onafterprint>
		<onbeforeprint public="1"><x path="haxe.Function"/></onbeforeprint>
		<onbeforeunload public="1"><f a="">
	<c path="js.html.Event"/>
	<c path="String"/>
</f></onbeforeunload>
		<onhashchange public="1"><x path="haxe.Function"/></onhashchange>
		<onlanguagechange public="1"><x path="haxe.Function"/></onlanguagechange>
		<onmessage public="1"><x path="haxe.Function"/></onmessage>
		<onoffline public="1"><x path="haxe.Function"/></onoffline>
		<ononline public="1"><x path="haxe.Function"/></ononline>
		<onpagehide public="1"><x path="haxe.Function"/></onpagehide>
		<onpageshow public="1"><x path="haxe.Function"/></onpageshow>
		<onpopstate public="1"><x path="haxe.Function"/></onpopstate>
		<onstorage public="1"><x path="haxe.Function"/></onstorage>
		<onunload public="1"><x path="haxe.Function"/></onunload>
		<haxe_doc><![CDATA[The `HTMLBodyElement` interface provides special properties (beyond those of the regular `HTMLElement` interface they also inherit) for manipulating body elements.

	Documentation [HTMLBodyElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLBodyElement"</e></m></meta>
	</class>
	<class path="js.html.BroadcastChannel" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/BroadcastChannel.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString`, the name of the channel.</haxe_doc>
		</name>
		<onmessage public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` property that specifies the function to execute when a `message` event is fired on this object.</haxe_doc>
		</onmessage>
		<postMessage public="1" set="method">
			<f a="message">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</postMessage>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Closes the channel object, indicating it won't get any new messages, and allowing it to be, eventually, garbage collected.</haxe_doc>
		</close>
		<new public="1" set="method">
			<f a="channel">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `BroadcastChannel` interface represents a named channel that any browsing context of a given origin can subscribe to. It allows communication between different documents (in different windows, tabs, frames or iframes) of the same origin. Messages are broadcasted via a `message` event fired at all `BroadcastChannel` objects listening to the channel.

	Documentation [BroadcastChannel](https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel>]]></haxe_doc>
		<meta><m n=":native"><e>"BroadcastChannel"</e></m></meta>
	</class>
	<class path="js.html.ButtonElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ButtonElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<autofocus public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating whether or not the control should have input focus when the page loads, unless the user overrides it, for example by typing in a different control. Only one form-associated element in a document can have this attribute specified.</haxe_doc>
		</autofocus>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating whether or not the control is disabled, meaning that it does not accept any clicks.</haxe_doc>
		</disabled>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>Is a `HTMLFormElement` reflecting the form that this button is associated with. If the button is a descendant of a form element, then this attribute is the ID of that form element.
		
		 If the button is not a descendant of a form element, then the attribute can be the ID of any form element in the same document it is related to, or the `null` value if none matches.</haxe_doc>
		</form>
		<formAction public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the URI of a resource that processes information submitted by the button. If specified, this attribute overrides the `action` attribute of the `form` element that owns this element.</haxe_doc>
		</formAction>
		<formEnctype public="1"><c path="String"/></formEnctype>
		<formMethod public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the HTTP method that the browser uses to submit the form. If specified, this attribute overrides the `method` attribute of the `form` element that owns this element.</haxe_doc>
		</formMethod>
		<formNoValidate public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating that the form is not to be validated when it is submitted. If specified, this attribute overrides the `novalidate` attribute of the `form` element that owns this element.</haxe_doc>
		</formNoValidate>
		<formTarget public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting a name or keyword indicating where to display the response that is received after submitting the form. If specified, this attribute overrides the `target` attribute of the `form` element that owns this element.</haxe_doc>
		</formTarget>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of the object when submitted with a form. {{HTMLVersionInline(5)}} If specified, it must not be the empty string.</haxe_doc>
		</name>
		<type public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[Is a `DOMString` indicating the behavior of the button. This is an enumerated attribute with the following possible values:
		 
		  `"submit"`: The button submits the form. This is the default value if the attribute is not specified, {{HTMLVersionInline(5)}} or if it is dynamically changed to an empty or invalid value.
		  `"reset"`: The button resets the form.
		  `"button"`: The button does nothing.
		  `"menu"`: The button displays a menu. <em>(experimental)</em>]]></haxe_doc>
		</type>
		<value public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the current form control value of the button.</haxe_doc>
		</value>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating whether the button is a candidate for constraint validation. It is `false` if any conditions bar it from constraint validation.</haxe_doc>
		</willValidate>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>Is a `ValidityState` representing the validity states that this button is in.</haxe_doc>
		</validity>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the localized message that describes the validation constraints that the control does not satisfy (if any). This attribute is the empty string if the control is not a candidate for constraint validation (`willValidate` is `false`), or it satisfies its constraints.</haxe_doc>
		</validationMessage>
		<checkValidity public="1" set="method"><f a=""><x path="Bool"/></f></checkValidity>
		<setCustomValidity public="1" set="method"><f a="error">
	<c path="String"/>
	<x path="Void"/>
</f></setCustomValidity>
		<haxe_doc><![CDATA[The `HTMLButtonElement` interface provides properties and methods (beyond the `button` object interface it also has available to them by inheritance) for manipulating the layout and presentation of button elements.

	Documentation [HTMLButtonElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLButtonElement"</e></m></meta>
	</class>
	<class path="js.html.CharacterData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CharacterData.hx" extern="1">
		<extends path="js.html.Node"/>
		<data public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the textual data contained in this object.</haxe_doc>
		</data>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `unsigned long` representing the size of the string contained in `CharacterData.data`.</haxe_doc>
		</length>
		<previousElementSibling public="1" set="null"><c path="js.html.Element"/></previousElementSibling>
		<nextElementSibling public="1" set="null"><c path="js.html.Element"/></nextElementSibling>
		<substringData public="1" set="method">
			<f a="offset:count">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</substringData>
		<appendData public="1" set="method">
			<f a="data">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</appendData>
		<insertData public="1" set="method">
			<f a="offset:data">
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</insertData>
		<deleteData public="1" set="method">
			<f a="offset:count">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</deleteData>
		<replaceData public="1" set="method">
			<f a="offset:count:data">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</replaceData>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<haxe_doc><![CDATA[The `CharacterData` abstract interface represents a `Node` object that contains characters. This is an abstract interface, meaning there aren't any object of type `CharacterData`: it is implemented by other interfaces, like `Text`, `Comment`, or `ProcessingInstruction` which aren't abstract.

	Documentation [CharacterData](https://developer.mozilla.org/en-US/docs/Web/API/CharacterData) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CharacterData$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CharacterData>]]></haxe_doc>
		<meta><m n=":native"><e>"CharacterData"</e></m></meta>
	</class>
	<class path="js.html.Text" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Text.hx" extern="1">
		<extends path="js.html.CharacterData"/>
		<wholeText public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing the text of all `Text` nodes logically adjacent to this `Node`, concatenated in document order.</haxe_doc>
		</wholeText>
		<splitText public="1" set="method">
			<f a="offset">
				<x path="Int"/>
				<c path="js.html.Text"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</splitText>
		<convertQuadFromNode public="1" set="method">
			<f a="quad:from:?options">
				<c path="js.html.DOMQuad"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Text"/>
					<x path="haxe.extern.EitherType">
						<c path="js.html.Element"/>
						<c path="js.html.HTMLDocument"/>
					</x>
				</x>
				<t path="js.html.ConvertCoordinateOptions"/>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</convertQuadFromNode>
		<convertRectFromNode public="1" set="method">
			<f a="rect:from:?options">
				<c path="js.html.DOMRectReadOnly"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Text"/>
					<x path="haxe.extern.EitherType">
						<c path="js.html.Element"/>
						<c path="js.html.HTMLDocument"/>
					</x>
				</x>
				<t path="js.html.ConvertCoordinateOptions"/>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</convertRectFromNode>
		<convertPointFromNode public="1" set="method">
			<f a="point:from:?options">
				<t path="js.html.DOMPointInit"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Text"/>
					<x path="haxe.extern.EitherType">
						<c path="js.html.Element"/>
						<c path="js.html.HTMLDocument"/>
					</x>
				</x>
				<t path="js.html.ConvertCoordinateOptions"/>
				<c path="js.html.DOMPoint"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</convertPointFromNode>
		<new public="1" set="method">
			<f a="?data" v="&quot;&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ data : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Text` interface represents the textual content of `Element` or `Attr`.  If an element has no markup within its content, it has a single child implementing `Text` that contains the element's text.  However, if the element contains markup, it is parsed into information items and `Text` nodes that form its children.

	Documentation [Text](https://developer.mozilla.org/en-US/docs/Web/API/Text) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Text$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Text>]]></haxe_doc>
		<meta><m n=":native"><e>"Text"</e></m></meta>
	</class>
	<class path="js.html.CDATASection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CDATASection.hx" extern="1">
		<extends path="js.html.Text"/>
		<haxe_doc><![CDATA[The `CDATASection` interface represents a CDATA section that can be used within XML to include extended portions of unescaped text, such that the symbols  and &amp; do not need escaping as they normally do within XML when used as text.

	Documentation [CDATASection](https://developer.mozilla.org/en-US/docs/Web/API/CDATASection) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CDATASection$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CDATASection>]]></haxe_doc>
		<meta><m n=":native"><e>"CDATASection"</e></m></meta>
	</class>
	<class path="js.html.CSS" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CSS.hx" extern="1">
		<supports public="1" set="method" static="1">
			<f a="conditionText">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><supports public="1" set="method">
	<f a="property:value">
		<c path="String"/>
		<c path="String"/>
		<x path="Bool"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</supports></overloads>
		</supports>
		<escape public="1" set="method" static="1"><f a="ident">
	<c path="String"/>
	<c path="String"/>
</f></escape>
		<haxe_doc><![CDATA[The `CSS` interface holds useful CSS-related methods. No object with this interface are implemented: it contains only static methods and therefore is a utilitarian interface.

	Documentation [CSS](https://developer.mozilla.org/en-US/docs/Web/API/CSS) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSS$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSS>]]></haxe_doc>
		<meta><m n=":native"><e>"CSS"</e></m></meta>
	</class>
	<class path="js.html.CSSAnimation" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CSSAnimation.hx" extern="1">
		<extends path="js.html.Animation"/>
		<animationName public="1" set="null"><c path="String"/></animationName>
		<meta><m n=":native"><e>"CSSAnimation"</e></m></meta>
	</class>
	<class path="js.html.CSSRule" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CSSRule.hx" extern="1">
		<UNKNOWN_RULE public="1" get="inline" set="null" expr="0" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</UNKNOWN_RULE>
		<STYLE_RULE public="1" get="inline" set="null" expr="1" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</STYLE_RULE>
		<CHARSET_RULE public="1" get="inline" set="null" expr="2" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</CHARSET_RULE>
		<IMPORT_RULE public="1" get="inline" set="null" expr="3" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</IMPORT_RULE>
		<MEDIA_RULE public="1" get="inline" set="null" expr="4" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</MEDIA_RULE>
		<FONT_FACE_RULE public="1" get="inline" set="null" expr="5" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</FONT_FACE_RULE>
		<PAGE_RULE public="1" get="inline" set="null" expr="6" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</PAGE_RULE>
		<type public="1" set="null"><x path="Int"/></type>
		<cssText public="1"><c path="String"/></cssText>
		<parentStyleSheet public="1" set="null"><c path="js.html.CSSStyleSheet"/></parentStyleSheet>
		<parentRule public="1" set="null"><c path="js.html.CSSRule"/></parentRule>
		<haxe_doc><![CDATA[The `CSSRule` interface represents a single CSS rule. There are several types of rules, listed in the Type constants section below.

	Documentation [CSSRule](https://developer.mozilla.org/en-US/docs/Web/API/CSSRule) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSRule$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSRule>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSRule"</e></m></meta>
	</class>
	<class path="js.html.CSSCharsetRule" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CSSCharsetRule.hx" extern="1">
		<extends path="js.html.CSSRule"/>
		<encoding public="1"><c path="String"/></encoding>
		<meta><m n=":native"><e>"CSSCharsetRule"</e></m></meta>
	</class>
	<class path="js.html.CSSFontFaceRule" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CSSFontFaceRule.hx" extern="1">
		<extends path="js.html.CSSRule"/>
		<style public="1" set="null"><c path="js.html.CSSStyleDeclaration"/></style>
		<meta><m n=":native"><e>"CSSFontFaceRule"</e></m></meta>
	</class>
	<class path="js.html.CSSImportRule" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CSSImportRule.hx" extern="1">
		<extends path="js.html.CSSRule"/>
		<href public="1" set="null"><c path="String"/></href>
		<media public="1" set="null"><c path="js.html.MediaList"/></media>
		<styleSheet public="1" set="null"><c path="js.html.CSSStyleSheet"/></styleSheet>
		<meta><m n=":native"><e>"CSSImportRule"</e></m></meta>
	</class>
	<class path="js.html.CSSMediaRule" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CSSMediaRule.hx" extern="1">
		<extends path="js.html.CSSRule"/>
		<media public="1" set="null">
			<c path="js.html.MediaList"/>
			<haxe_doc>Specifies a `MediaList` representing the intended destination medium for style information.</haxe_doc>
		</media>
		<cssRules public="1" set="null"><c path="js.html.CSSRuleList"/></cssRules>
		<insertRule public="1" set="method"><f a="rule:index">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
</f></insertRule>
		<deleteRule public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></deleteRule>
		<haxe_doc><![CDATA[The `CSSMediaRule` is an interface representing a single CSS `@media` rule. It implements the `CSSConditionRule` interface, and therefore the `CSSGroupingRule` and the `CSSRule` interface with a type value of `4` (`CSSRule.MEDIA_RULE`).

	Documentation [CSSMediaRule](https://developer.mozilla.org/en-US/docs/Web/API/CSSMediaRule) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSMediaRule$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSMediaRule>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSMediaRule"</e></m></meta>
	</class>
	<class path="js.html.CSSPageRule" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CSSPageRule.hx" extern="1">
		<extends path="js.html.CSSRule"/>
		<selectorText public="1">
			<c path="String"/>
			<haxe_doc>Represents the text of the page selector associated with the at-rule.</haxe_doc>
		</selectorText>
		<style public="1" set="null">
			<c path="js.html.CSSStyleDeclaration"/>
			<haxe_doc>Returns the declaration block associated with the at-rule.</haxe_doc>
		</style>
		<haxe_doc><![CDATA[`CSSPageRule` is an interface representing a single CSS `@page` rule. It implements the `CSSRule` interface with a type value of `6` (`CSSRule.PAGE_RULE`).

	Documentation [CSSPageRule](https://developer.mozilla.org/en-US/docs/Web/API/CSSPageRule) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSPageRule$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSPageRule>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSPageRule"</e></m></meta>
	</class>
	<class path="js.html.CSSValue" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CSSValue.hx" extern="1">
		<CSS_INHERIT public="1" get="inline" set="null" expr="0" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</CSS_INHERIT>
		<CSS_PRIMITIVE_VALUE public="1" get="inline" set="null" expr="1" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</CSS_PRIMITIVE_VALUE>
		<CSS_VALUE_LIST public="1" get="inline" set="null" expr="2" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</CSS_VALUE_LIST>
		<CSS_CUSTOM public="1" get="inline" set="null" expr="3" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</CSS_CUSTOM>
		<cssText public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the current value.</haxe_doc>
		</cssText>
		<cssValueType public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[An <code>unsigned short</code> representing a code defining the type of the value. Possible values are:
		 <table class="standard-table">
		  
		   <tr>
		    <td class="header">Constant</td>
		    <td class="header">Description</td>
		   </tr>
		   <tr>
		    <td><code>CSS_CUSTOM</code></td>
		    <td>The value is a custom value.</td>
		   </tr>
		   <tr>
		    <td><code>CSS_INHERIT</code></td>
		    <td>The value is inherited and the <code>cssText</code> contains <code>"inherit"</code>.</td>
		   </tr>
		   <tr>
		    <td><code>CSS_PRIMITIVE_VALUE</code></td>
		    <td>The value is a primitive value and an instance of the <code>CSSPrimitiveValue</code> interface can be obtained by using binding-specific casting methods on this instance of the <code>CSSValue</code> interface.</td>
		   </tr>
		   <tr>
		    <td><code>CSS_VALUE_LIST</code></td>
		    <td>The value is a <code>CSSValue</code> list and an instance of the <code>CSSValueList</code> interface can be obtained by using binding-specific casting methods on this instance of the <code>CSSValue</code> interface.</td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</cssValueType>
		<haxe_doc><![CDATA[The `CSSValue` interface represents the current computed value of a CSS property.

	Documentation [CSSValue](https://developer.mozilla.org/en-US/docs/Web/API/CSSValue) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSValue$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSValue>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSValue"</e></m></meta>
	</class>
	<class path="js.html.CSSPrimitiveValue" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CSSPrimitiveValue.hx" extern="1">
		<extends path="js.html.CSSValue"/>
		<CSS_UNKNOWN public="1" get="inline" set="null" expr="0" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</CSS_UNKNOWN>
		<CSS_NUMBER public="1" get="inline" set="null" expr="1" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</CSS_NUMBER>
		<CSS_PERCENTAGE public="1" get="inline" set="null" expr="2" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</CSS_PERCENTAGE>
		<CSS_EMS public="1" get="inline" set="null" expr="3" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</CSS_EMS>
		<CSS_EXS public="1" get="inline" set="null" expr="4" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</CSS_EXS>
		<CSS_PX public="1" get="inline" set="null" expr="5" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</CSS_PX>
		<CSS_CM public="1" get="inline" set="null" expr="6" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</CSS_CM>
		<CSS_MM public="1" get="inline" set="null" expr="7" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</CSS_MM>
		<CSS_IN public="1" get="inline" set="null" expr="8" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</CSS_IN>
		<CSS_PT public="1" get="inline" set="null" expr="9" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</CSS_PT>
		<CSS_PC public="1" get="inline" set="null" expr="10" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</CSS_PC>
		<CSS_DEG public="1" get="inline" set="null" expr="11" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>11</e></m></meta>
		</CSS_DEG>
		<CSS_RAD public="1" get="inline" set="null" expr="12" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</CSS_RAD>
		<CSS_GRAD public="1" get="inline" set="null" expr="13" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>13</e></m></meta>
		</CSS_GRAD>
		<CSS_MS public="1" get="inline" set="null" expr="14" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>14</e></m></meta>
		</CSS_MS>
		<CSS_S public="1" get="inline" set="null" expr="15" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>15</e></m></meta>
		</CSS_S>
		<CSS_HZ public="1" get="inline" set="null" expr="16" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</CSS_HZ>
		<CSS_KHZ public="1" get="inline" set="null" expr="17" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>17</e></m></meta>
		</CSS_KHZ>
		<CSS_DIMENSION public="1" get="inline" set="null" expr="18" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>18</e></m></meta>
		</CSS_DIMENSION>
		<CSS_STRING public="1" get="inline" set="null" expr="19" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>19</e></m></meta>
		</CSS_STRING>
		<CSS_URI public="1" get="inline" set="null" expr="20" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>20</e></m></meta>
		</CSS_URI>
		<CSS_IDENT public="1" get="inline" set="null" expr="21" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>21</e></m></meta>
		</CSS_IDENT>
		<CSS_ATTR public="1" get="inline" set="null" expr="22" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>22</e></m></meta>
		</CSS_ATTR>
		<CSS_COUNTER public="1" get="inline" set="null" expr="23" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>23</e></m></meta>
		</CSS_COUNTER>
		<CSS_RECT public="1" get="inline" set="null" expr="24" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>24</e></m></meta>
		</CSS_RECT>
		<CSS_RGBCOLOR public="1" get="inline" set="null" expr="25" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>25</e></m></meta>
		</CSS_RGBCOLOR>
		<primitiveType public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[An <code>unsigned short</code> representing the type of the value. Possible values are:
		 <table class="standard-table">
		  
		   <tr>
		    <td class="header">Constant</td>
		    <td class="header">Description</td>
		   </tr>
		   <tr>
		    <td><code>CSS_ATTR</code></td>
		    <td>The value is an <code>attr()</code> function. The value can be obtained by using the <code>getStringValue()</code> method.</td>
		   </tr>
		   <tr>
		    <td><code>CSS_CM</code></td>
		    <td>The value is a <code>length</code> in centimeters. The value can be obtained by using the <code>getFloatValue()</code> method.</td>
		   </tr>
		   <tr>
		    <td><code>CSS_COUNTER</code></td>
		    <td>The value is a counter or counters function. The value can be obtained by using the <code>getCounterValue()</code> method.</td>
		   </tr>
		   <tr>
		    <td><code>CSS_DEG</code></td>
		    <td>The value is an <code>angle</code> in degrees. The value can be obtained by using the <code>getFloatValue()</code> method.</td>
		   </tr>
		   <tr>
		    <td><code>CSS_DIMENSION</code></td>
		    <td>The value is a <code>number</code> with an unknown dimension. The value can be obtained by using the <code>getFloatValue()</code> method.</td>
		   </tr>
		   <tr>
		    <td><code>CSS_EMS</code></td>
		    <td>The value is a <code>length</code> in em units. The value can be obtained by using the <code>getFloatValue()</code> method.</td>
		   </tr>
		   <tr>
		    <td><code>CSS_EXS</code></td>
		    <td>The value is a <code>length</code> in ex units. The value can be obtained by using the <code>getFloatValue()</code> method.</td>
		   </tr>
		   <tr>
		    <td><code>CSS_GRAD</code></td>
		    <td>The value is an <code>angle</code> in grads. The value can be obtained by using the <code>getFloatValue()</code> method.</td>
		   </tr>
		   <tr>
		    <td><code>CSS_HZ</code></td>
		    <td>The value is a <code>frequency</code> in Hertz. The value can be obtained by using the getFloatValue method.</td>
		   </tr>
		   <tr>
		    <td><code>CSS_IDENT</code></td>
		    <td>The value is an identifier. The value can be obtained by using the <code>getStringValue()</code> method.</td>
		   </tr>
		   <tr>
		    <td><code>CSS_IN</code></td>
		    <td>The value is a <code>length</code> in inches. The value can be obtained by using the <code>getFloatValue()</code> method.</td>
		   </tr>
		   <tr>
		    <td><code>CSS_KHZ</code></td>
		    <td>The value is a <code>frequency</code> in Kilohertz. The value can be obtained by using the <code>getFloatValue()</code> method.</td>
		   </tr>
		   <tr>
		    <td><code>CSS_MM</code></td>
		    <td>The value is a <code>length</code> in millimeters. The value can be obtained by using the <code>getFloatValue()</code> method.</td>
		   </tr>
		   <tr>
		    <td><code>CSS_MS</code></td>
		    <td>The value is a <code>time</code> in milliseconds. The value can be obtained by using the <code>getFloatValue()</code> method.</td>
		   </tr>
		   <tr>
		    <td><code>CSS_NUMBER</code></td>
		    <td>The value is a simple <code>number</code>. The value can be obtained by using the <code>getFloatValue()</code> method.</td>
		   </tr>
		   <tr>
		    <td><code>CSS_PC</code></td>
		    <td>The value is a <code>length</code> in picas. The value can be obtained by using the <code>getFloatValue()</code> method.</td>
		   </tr>
		   <tr>
		    <td><code>CSS_PERCENTAGE</code></td>
		    <td>The value is a <code>percentage</code>. The value can be obtained by using the <code>getFloatValue()</code> method.</td>
		   </tr>
		   <tr>
		    <td><code>CSS_PT</code></td>
		    <td>The value is a <code>length</code> in points. The value can be obtained by using the <code>getFloatValue()</code> method.</td>
		   </tr>
		   <tr>
		    <td><code>CSS_PX</code></td>
		    <td>The value is a <code>length</code> in pixels. The value can be obtained by using the <code>getFloatValue()</code> method.</td>
		   </tr>
		   <tr>
		    <td><code>CSS_RAD</code></td>
		    <td>The value is an <code>angle</code> in radians. The value can be obtained by using the <code>getFloatValue()</code> method.</td>
		   </tr>
		   <tr>
		    <td><code>CSS_RECT</code></td>
		    <td>The value is a <code>shape</code> function. The value can be obtained by using the <code>getRectValue()</code> method.</td>
		   </tr>
		   <tr>
		    <td><code>CSS_RGBCOLOR</code></td>
		    <td>The value is an <code>color</code>. The value can be obtained by using the <code>getRGBColorValue()</code> method.</td>
		   </tr>
		   <tr>
		    <td><code>CSS_S</code></td>
		    <td>The value is a <code>time</code> in seconds. The value can be obtained by using the <code>getFloatValue()</code> method.</td>
		   </tr>
		   <tr>
		    <td><code>CSS_STRING</code></td>
		    <td>The value is a <code>string</code>. The value can be obtained by using the <code>getStringValue()</code> method.</td>
		   </tr>
		   <tr>
		    <td><code>CSS_UNKNOWN</code></td>
		    <td>The value is not a recognized CSS2 value. The value can only be obtained by using the <code>CSSValue.cssText</code> attribute.</td>
		   </tr>
		   <tr>
		    <td><code>CSS_URI</code></td>
		    <td>The value is a <code>uri</code>. The value can be obtained by using the <code>getStringValue()</code> method.</td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</primitiveType>
		<setFloatValue public="1" set="method">
			<f a="unitType:floatValue">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setFloatValue>
		<getFloatValue public="1" set="method">
			<f a="unitType">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getFloatValue>
		<setStringValue public="1" set="method">
			<f a="stringType:stringValue">
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setStringValue>
		<getStringValue public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getStringValue>
		<getCounterValue public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getCounterValue>
		<getRectValue public="1" set="method">
			<f a=""><c path="js.html.Rect"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getRectValue>
		<getRGBColorValue public="1" set="method">
			<f a=""><c path="js.html.RGBColor"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getRGBColorValue>
		<haxe_doc><![CDATA[The `CSSPrimitiveValue` interface derives from the `CSSValue` interface and represents the current computed value of a CSS property.

	Documentation [CSSPrimitiveValue](https://developer.mozilla.org/en-US/docs/Web/API/CSSPrimitiveValue) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSPrimitiveValue$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSPrimitiveValue>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSPrimitiveValue"</e></m></meta>
	</class>
	<class path="js.html.CSSPseudoElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CSSPseudoElement.hx" extern="1">
		<type public="1" set="null"><c path="String"/></type>
		<parentElement public="1" set="null"><c path="js.html.Element"/></parentElement>
		<animate public="1" set="method">
			<f a="frames:?options">
				<d/>
				<x path="haxe.extern.EitherType">
					<x path="Float"/>
					<d/>
				</x>
				<c path="js.html.Animation"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</animate>
		<getAnimations public="1" set="method"><f a=""><c path="Array"><c path="js.html.Animation"/></c></f></getAnimations>
		<meta><m n=":native"><e>"CSSPseudoElement"</e></m></meta>
	</class>
	<class path="js.html.CSSRuleList" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CSSRuleList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.CSSRule"/>
</f></item>
		<haxe_doc><![CDATA[A `CSSRuleList` is an (indirect-modify only) array-like object containing an ordered collection of `CSSRule` objects.

	Documentation [CSSRuleList](https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSRuleList"</e></m></meta>
	</class>
	<class path="js.html.CSSStyleDeclaration" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CSSStyleDeclaration.hx" extern="1">
		<cssText public="1"><c path="String"/></cssText>
		<length public="1" set="null"><x path="Int"/></length>
		<parentRule public="1" set="null"><c path="js.html.CSSRule"/></parentRule>
		<alignContent public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "align-content" CSS property.</haxe_doc>
		</alignContent>
		<alignItems public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "align-items" CSS property.</haxe_doc>
		</alignItems>
		<alignSelf public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "align-self" CSS property.</haxe_doc>
		</alignSelf>
		<alignmentAdjust public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "alignment-adjust" CSS property.</haxe_doc>
		</alignmentAdjust>
		<alignmentBaseline public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "alignment-baseline" CSS property.</haxe_doc>
		</alignmentBaseline>
		<all public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "all" CSS property.</haxe_doc>
		</all>
		<anchorPoint public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "anchor-point" CSS property.</haxe_doc>
		</anchorPoint>
		<animation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation" CSS property.</haxe_doc>
		</animation>
		<animationDelay public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-delay" CSS property.</haxe_doc>
		</animationDelay>
		<animationDirection public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-direction" CSS property.</haxe_doc>
		</animationDirection>
		<animationDuration public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-duration" CSS property.</haxe_doc>
		</animationDuration>
		<animationFillMode public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-fill-mode" CSS property.</haxe_doc>
		</animationFillMode>
		<animationIterationCount public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-iteration-count" CSS property.</haxe_doc>
		</animationIterationCount>
		<animationName public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-name" CSS property.</haxe_doc>
		</animationName>
		<animationPlayState public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-play-state" CSS property.</haxe_doc>
		</animationPlayState>
		<animationTimingFunction public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "animation-timing-function" CSS property.</haxe_doc>
		</animationTimingFunction>
		<azimuth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "azimuth" CSS property.</haxe_doc>
		</azimuth>
		<backfaceVisibility public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "backface-visibility" CSS property.</haxe_doc>
		</backfaceVisibility>
		<background public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background" CSS property.</haxe_doc>
		</background>
		<backgroundAttachment public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-attachment" CSS property.</haxe_doc>
		</backgroundAttachment>
		<backgroundClip public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-clip" CSS property.</haxe_doc>
		</backgroundClip>
		<backgroundColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-color" CSS property.</haxe_doc>
		</backgroundColor>
		<backgroundImage public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-image" CSS property.</haxe_doc>
		</backgroundImage>
		<backgroundOrigin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-origin" CSS property.</haxe_doc>
		</backgroundOrigin>
		<backgroundPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-position" CSS property.</haxe_doc>
		</backgroundPosition>
		<backgroundRepeat public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-repeat" CSS property.</haxe_doc>
		</backgroundRepeat>
		<backgroundSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "background-size" CSS property.</haxe_doc>
		</backgroundSize>
		<baselineShift public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "baseline-shift" CSS property.</haxe_doc>
		</baselineShift>
		<binding public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "binding" CSS property.</haxe_doc>
		</binding>
		<bleed public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "bleed" CSS property.</haxe_doc>
		</bleed>
		<bookmarkLabel public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "bookmark-label" CSS property.</haxe_doc>
		</bookmarkLabel>
		<bookmarkLevel public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "bookmark-level" CSS property.</haxe_doc>
		</bookmarkLevel>
		<bookmarkState public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "bookmark-state" CSS property.</haxe_doc>
		</bookmarkState>
		<border public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border" CSS property.</haxe_doc>
		</border>
		<borderBottom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom" CSS property.</haxe_doc>
		</borderBottom>
		<borderBottomColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom-color" CSS property.</haxe_doc>
		</borderBottomColor>
		<borderBottomLeftRadius public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom-left-radius" CSS property.</haxe_doc>
		</borderBottomLeftRadius>
		<borderBottomRightRadius public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom-right-radius" CSS property.</haxe_doc>
		</borderBottomRightRadius>
		<borderBottomStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom-style" CSS property.</haxe_doc>
		</borderBottomStyle>
		<borderBottomWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-bottom-width" CSS property.</haxe_doc>
		</borderBottomWidth>
		<borderCollapse public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-collapse" CSS property.</haxe_doc>
		</borderCollapse>
		<borderColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-color" CSS property.</haxe_doc>
		</borderColor>
		<borderImage public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image" CSS property.</haxe_doc>
		</borderImage>
		<borderImageOutset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image-outset" CSS property.</haxe_doc>
		</borderImageOutset>
		<borderImageRepeat public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image-repeat" CSS property.</haxe_doc>
		</borderImageRepeat>
		<borderImageSlice public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image-slice" CSS property.</haxe_doc>
		</borderImageSlice>
		<borderImageSource public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image-source" CSS property.</haxe_doc>
		</borderImageSource>
		<borderImageWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-image-width" CSS property.</haxe_doc>
		</borderImageWidth>
		<borderLeft public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-left" CSS property.</haxe_doc>
		</borderLeft>
		<borderLeftColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-left-color" CSS property.</haxe_doc>
		</borderLeftColor>
		<borderLeftStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-left-style" CSS property.</haxe_doc>
		</borderLeftStyle>
		<borderLeftWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-left-width" CSS property.</haxe_doc>
		</borderLeftWidth>
		<borderRadius public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-radius" CSS property.</haxe_doc>
		</borderRadius>
		<borderRight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-right" CSS property.</haxe_doc>
		</borderRight>
		<borderRightColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-right-color" CSS property.</haxe_doc>
		</borderRightColor>
		<borderRightStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-right-style" CSS property.</haxe_doc>
		</borderRightStyle>
		<borderRightWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-right-width" CSS property.</haxe_doc>
		</borderRightWidth>
		<borderSpacing public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-spacing" CSS property.</haxe_doc>
		</borderSpacing>
		<borderStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-style" CSS property.</haxe_doc>
		</borderStyle>
		<borderTop public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top" CSS property.</haxe_doc>
		</borderTop>
		<borderTopColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top-color" CSS property.</haxe_doc>
		</borderTopColor>
		<borderTopLeftRadius public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top-left-radius" CSS property.</haxe_doc>
		</borderTopLeftRadius>
		<borderTopRightRadius public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top-right-radius" CSS property.</haxe_doc>
		</borderTopRightRadius>
		<borderTopStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top-style" CSS property.</haxe_doc>
		</borderTopStyle>
		<borderTopWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-top-width" CSS property.</haxe_doc>
		</borderTopWidth>
		<borderWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "border-width" CSS property.</haxe_doc>
		</borderWidth>
		<bottom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "bottom" CSS property.</haxe_doc>
		</bottom>
		<boxDecorationBreak public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "box-decoration-break" CSS property.</haxe_doc>
		</boxDecorationBreak>
		<boxShadow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "box-shadow" CSS property.</haxe_doc>
		</boxShadow>
		<boxSizing public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "box-sizing" CSS property.</haxe_doc>
		</boxSizing>
		<boxSnap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "box-snap" CSS property.</haxe_doc>
		</boxSnap>
		<boxSuppress public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "box-suppress" CSS property.</haxe_doc>
		</boxSuppress>
		<breakAfter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "break-after" CSS property.</haxe_doc>
		</breakAfter>
		<breakBefore public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "break-before" CSS property.</haxe_doc>
		</breakBefore>
		<breakInside public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "break-inside" CSS property.</haxe_doc>
		</breakInside>
		<captionSide public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "caption-side" CSS property.</haxe_doc>
		</captionSide>
		<chains public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "chains" CSS property.</haxe_doc>
		</chains>
		<clear public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "clear" CSS property.</haxe_doc>
		</clear>
		<clip public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "clip" CSS property.</haxe_doc>
		</clip>
		<clipPath public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "clip-path" CSS property.</haxe_doc>
		</clipPath>
		<clipRule public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "clip-rule" CSS property.</haxe_doc>
		</clipRule>
		<color public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "color" CSS property.</haxe_doc>
		</color>
		<colorInterpolationFilters public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "color-interpolation-filters" CSS property.</haxe_doc>
		</colorInterpolationFilters>
		<columnCount public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-count" CSS property.</haxe_doc>
		</columnCount>
		<columnFill public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-fill" CSS property.</haxe_doc>
		</columnFill>
		<columnGap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-gap" CSS property.</haxe_doc>
		</columnGap>
		<columnRule public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-rule" CSS property.</haxe_doc>
		</columnRule>
		<columnRuleColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-rule-color" CSS property.</haxe_doc>
		</columnRuleColor>
		<columnRuleStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-rule-style" CSS property.</haxe_doc>
		</columnRuleStyle>
		<columnRuleWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-rule-width" CSS property.</haxe_doc>
		</columnRuleWidth>
		<columnSpan public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-span" CSS property.</haxe_doc>
		</columnSpan>
		<columnWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "column-width" CSS property.</haxe_doc>
		</columnWidth>
		<columns public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "columns" CSS property.</haxe_doc>
		</columns>
		<contain public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "contain" CSS property.</haxe_doc>
		</contain>
		<content public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "content" CSS property.</haxe_doc>
		</content>
		<counterIncrement public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "counter-increment" CSS property.</haxe_doc>
		</counterIncrement>
		<counterReset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "counter-reset" CSS property.</haxe_doc>
		</counterReset>
		<counterSet public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "counter-set" CSS property.</haxe_doc>
		</counterSet>
		<crop public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "crop" CSS property.</haxe_doc>
		</crop>
		<cue public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cue" CSS property.</haxe_doc>
		</cue>
		<cueAfter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cue-after" CSS property.</haxe_doc>
		</cueAfter>
		<cueBefore public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cue-before" CSS property.</haxe_doc>
		</cueBefore>
		<cursor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "cursor" CSS property.</haxe_doc>
		</cursor>
		<direction public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "direction" CSS property.</haxe_doc>
		</direction>
		<display public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "display" CSS property.</haxe_doc>
		</display>
		<displayInside public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "display-inside" CSS property.</haxe_doc>
		</displayInside>
		<displayList public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "display-list" CSS property.</haxe_doc>
		</displayList>
		<displayOutside public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "display-outside" CSS property.</haxe_doc>
		</displayOutside>
		<dominantBaseline public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "dominant-baseline" CSS property.</haxe_doc>
		</dominantBaseline>
		<elevation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "elevation" CSS property.</haxe_doc>
		</elevation>
		<emptyCells public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "empty-cells" CSS property.</haxe_doc>
		</emptyCells>
		<filter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "filter" CSS property.</haxe_doc>
		</filter>
		<flex public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex" CSS property.</haxe_doc>
		</flex>
		<flexBasis public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-basis" CSS property.</haxe_doc>
		</flexBasis>
		<flexDirection public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-direction" CSS property.</haxe_doc>
		</flexDirection>
		<flexFlow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-flow" CSS property.</haxe_doc>
		</flexFlow>
		<flexGrow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-grow" CSS property.</haxe_doc>
		</flexGrow>
		<flexShrink public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-shrink" CSS property.</haxe_doc>
		</flexShrink>
		<flexWrap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flex-wrap" CSS property.</haxe_doc>
		</flexWrap>
		<float public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "float" CSS property.</haxe_doc>
		</float>
		<floatOffset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "float-offset" CSS property.</haxe_doc>
		</floatOffset>
		<floodColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flood-color" CSS property.</haxe_doc>
		</floodColor>
		<floodOpacity public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flood-opacity" CSS property.</haxe_doc>
		</floodOpacity>
		<flowFrom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flow-from" CSS property.</haxe_doc>
		</flowFrom>
		<flowInto public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "flow-into" CSS property.</haxe_doc>
		</flowInto>
		<font public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font" CSS property.</haxe_doc>
		</font>
		<fontFamily public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-family" CSS property.</haxe_doc>
		</fontFamily>
		<fontFeatureSettings public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-feature-settings" CSS property.</haxe_doc>
		</fontFeatureSettings>
		<fontKerning public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-kerning" CSS property.</haxe_doc>
		</fontKerning>
		<fontLanguageOverride public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-language-override" CSS property.</haxe_doc>
		</fontLanguageOverride>
		<fontSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-size" CSS property.</haxe_doc>
		</fontSize>
		<fontSizeAdjust public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-size-adjust" CSS property.</haxe_doc>
		</fontSizeAdjust>
		<fontStretch public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-stretch" CSS property.</haxe_doc>
		</fontStretch>
		<fontStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-style" CSS property.</haxe_doc>
		</fontStyle>
		<fontSynthesis public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-synthesis" CSS property.</haxe_doc>
		</fontSynthesis>
		<fontVariant public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant" CSS property.</haxe_doc>
		</fontVariant>
		<fontVariantAlternates public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-alternates" CSS property.</haxe_doc>
		</fontVariantAlternates>
		<fontVariantCaps public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-caps" CSS property.</haxe_doc>
		</fontVariantCaps>
		<fontVariantEastAsian public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-east-asian" CSS property.</haxe_doc>
		</fontVariantEastAsian>
		<fontVariantLigatures public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-ligatures" CSS property.</haxe_doc>
		</fontVariantLigatures>
		<fontVariantNumeric public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-numeric" CSS property.</haxe_doc>
		</fontVariantNumeric>
		<fontVariantPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-variant-position" CSS property.</haxe_doc>
		</fontVariantPosition>
		<fontWeight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "font-weight" CSS property.</haxe_doc>
		</fontWeight>
		<grid public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid" CSS property.</haxe_doc>
		</grid>
		<gridArea public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-area" CSS property.</haxe_doc>
		</gridArea>
		<gridAutoColumns public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-auto-columns" CSS property.</haxe_doc>
		</gridAutoColumns>
		<gridAutoFlow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-auto-flow" CSS property.</haxe_doc>
		</gridAutoFlow>
		<gridAutoRows public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-auto-rows" CSS property.</haxe_doc>
		</gridAutoRows>
		<gridColumn public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-column" CSS property.</haxe_doc>
		</gridColumn>
		<gridColumnEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-column-end" CSS property.</haxe_doc>
		</gridColumnEnd>
		<gridColumnStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-column-start" CSS property.</haxe_doc>
		</gridColumnStart>
		<gridRow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-row" CSS property.</haxe_doc>
		</gridRow>
		<gridRowEnd public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-row-end" CSS property.</haxe_doc>
		</gridRowEnd>
		<gridRowStart public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-row-start" CSS property.</haxe_doc>
		</gridRowStart>
		<gridTemplate public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-template" CSS property.</haxe_doc>
		</gridTemplate>
		<gridTemplateAreas public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-template-areas" CSS property.</haxe_doc>
		</gridTemplateAreas>
		<gridTemplateColumns public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-template-columns" CSS property.</haxe_doc>
		</gridTemplateColumns>
		<gridTemplateRows public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "grid-template-rows" CSS property.</haxe_doc>
		</gridTemplateRows>
		<hangingPunctuation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "hanging-punctuation" CSS property.</haxe_doc>
		</hangingPunctuation>
		<height public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "height" CSS property.</haxe_doc>
		</height>
		<hyphens public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "hyphens" CSS property.</haxe_doc>
		</hyphens>
		<icon public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "icon" CSS property.</haxe_doc>
		</icon>
		<imageOrientation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "image-orientation" CSS property.</haxe_doc>
		</imageOrientation>
		<imageResolution public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "image-resolution" CSS property.</haxe_doc>
		</imageResolution>
		<imeMode public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "ime-mode" CSS property.</haxe_doc>
		</imeMode>
		<initialLetters public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "initial-letters" CSS property.</haxe_doc>
		</initialLetters>
		<inlineBoxAlign public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "inline-box-align" CSS property.</haxe_doc>
		</inlineBoxAlign>
		<justifyContent public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "justify-content" CSS property.</haxe_doc>
		</justifyContent>
		<justifyItems public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "justify-items" CSS property.</haxe_doc>
		</justifyItems>
		<justifySelf public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "justify-self" CSS property.</haxe_doc>
		</justifySelf>
		<left public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "left" CSS property.</haxe_doc>
		</left>
		<letterSpacing public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "letter-spacing" CSS property.</haxe_doc>
		</letterSpacing>
		<lightingColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "lighting-color" CSS property.</haxe_doc>
		</lightingColor>
		<lineBoxContain public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-box-contain" CSS property.</haxe_doc>
		</lineBoxContain>
		<lineBreak public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-break" CSS property.</haxe_doc>
		</lineBreak>
		<lineGrid public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-grid" CSS property.</haxe_doc>
		</lineGrid>
		<lineHeight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-height" CSS property.</haxe_doc>
		</lineHeight>
		<lineSnap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-snap" CSS property.</haxe_doc>
		</lineSnap>
		<lineStacking public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-stacking" CSS property.</haxe_doc>
		</lineStacking>
		<lineStackingRuby public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-stacking-ruby" CSS property.</haxe_doc>
		</lineStackingRuby>
		<lineStackingShift public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-stacking-shift" CSS property.</haxe_doc>
		</lineStackingShift>
		<lineStackingStrategy public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "line-stacking-strategy" CSS property.</haxe_doc>
		</lineStackingStrategy>
		<listStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "list-style" CSS property.</haxe_doc>
		</listStyle>
		<listStyleImage public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "list-style-image" CSS property.</haxe_doc>
		</listStyleImage>
		<listStylePosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "list-style-position" CSS property.</haxe_doc>
		</listStylePosition>
		<listStyleType public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "list-style-type" CSS property.</haxe_doc>
		</listStyleType>
		<margin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin" CSS property.</haxe_doc>
		</margin>
		<marginBottom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-bottom" CSS property.</haxe_doc>
		</marginBottom>
		<marginLeft public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-left" CSS property.</haxe_doc>
		</marginLeft>
		<marginRight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-right" CSS property.</haxe_doc>
		</marginRight>
		<marginTop public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "margin-top" CSS property.</haxe_doc>
		</marginTop>
		<markerOffset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marker-offset" CSS property.</haxe_doc>
		</markerOffset>
		<markerSide public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marker-side" CSS property.</haxe_doc>
		</markerSide>
		<marks public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "marks" CSS property.</haxe_doc>
		</marks>
		<mask public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask" CSS property.</haxe_doc>
		</mask>
		<maskBox public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box" CSS property.</haxe_doc>
		</maskBox>
		<maskBoxOutset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box-outset" CSS property.</haxe_doc>
		</maskBoxOutset>
		<maskBoxRepeat public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box-repeat" CSS property.</haxe_doc>
		</maskBoxRepeat>
		<maskBoxSlice public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box-slice" CSS property.</haxe_doc>
		</maskBoxSlice>
		<maskBoxSource public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box-source" CSS property.</haxe_doc>
		</maskBoxSource>
		<maskBoxWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-box-width" CSS property.</haxe_doc>
		</maskBoxWidth>
		<maskClip public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-clip" CSS property.</haxe_doc>
		</maskClip>
		<maskImage public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-image" CSS property.</haxe_doc>
		</maskImage>
		<maskOrigin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-origin" CSS property.</haxe_doc>
		</maskOrigin>
		<maskPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-position" CSS property.</haxe_doc>
		</maskPosition>
		<maskRepeat public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-repeat" CSS property.</haxe_doc>
		</maskRepeat>
		<maskSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-size" CSS property.</haxe_doc>
		</maskSize>
		<maskSourceType public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-source-type" CSS property.</haxe_doc>
		</maskSourceType>
		<maskType public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "mask-type" CSS property.</haxe_doc>
		</maskType>
		<maxHeight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "max-height" CSS property.</haxe_doc>
		</maxHeight>
		<maxLines public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "max-lines" CSS property.</haxe_doc>
		</maxLines>
		<maxWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "max-width" CSS property.</haxe_doc>
		</maxWidth>
		<minHeight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "min-height" CSS property.</haxe_doc>
		</minHeight>
		<minWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "min-width" CSS property.</haxe_doc>
		</minWidth>
		<moveTo public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "move-to" CSS property.</haxe_doc>
		</moveTo>
		<navDown public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "nav-down" CSS property.</haxe_doc>
		</navDown>
		<navIndex public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "nav-index" CSS property.</haxe_doc>
		</navIndex>
		<navLeft public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "nav-left" CSS property.</haxe_doc>
		</navLeft>
		<navRight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "nav-right" CSS property.</haxe_doc>
		</navRight>
		<navUp public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "nav-up" CSS property.</haxe_doc>
		</navUp>
		<objectFit public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "object-fit" CSS property.</haxe_doc>
		</objectFit>
		<objectPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "object-position" CSS property.</haxe_doc>
		</objectPosition>
		<opacity public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "opacity" CSS property.</haxe_doc>
		</opacity>
		<order public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "order" CSS property.</haxe_doc>
		</order>
		<orphans public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "orphans" CSS property.</haxe_doc>
		</orphans>
		<outline public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "outline" CSS property.</haxe_doc>
		</outline>
		<outlineColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "outline-color" CSS property.</haxe_doc>
		</outlineColor>
		<outlineOffset public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "outline-offset" CSS property.</haxe_doc>
		</outlineOffset>
		<outlineStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "outline-style" CSS property.</haxe_doc>
		</outlineStyle>
		<outlineWidth public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "outline-width" CSS property.</haxe_doc>
		</outlineWidth>
		<overflow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overflow" CSS property.</haxe_doc>
		</overflow>
		<overflowWrap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overflow-wrap" CSS property.</haxe_doc>
		</overflowWrap>
		<overflowX public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overflow-x" CSS property.</haxe_doc>
		</overflowX>
		<overflowY public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "overflow-y" CSS property.</haxe_doc>
		</overflowY>
		<padding public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding" CSS property.</haxe_doc>
		</padding>
		<paddingBottom public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-bottom" CSS property.</haxe_doc>
		</paddingBottom>
		<paddingLeft public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-left" CSS property.</haxe_doc>
		</paddingLeft>
		<paddingRight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-right" CSS property.</haxe_doc>
		</paddingRight>
		<paddingTop public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "padding-top" CSS property.</haxe_doc>
		</paddingTop>
		<page public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "page" CSS property.</haxe_doc>
		</page>
		<pageBreakAfter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "page-break-after" CSS property.</haxe_doc>
		</pageBreakAfter>
		<pageBreakBefore public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "page-break-before" CSS property.</haxe_doc>
		</pageBreakBefore>
		<pageBreakInside public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "page-break-inside" CSS property.</haxe_doc>
		</pageBreakInside>
		<pagePolicy public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "page-policy" CSS property.</haxe_doc>
		</pagePolicy>
		<pause public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pause" CSS property.</haxe_doc>
		</pause>
		<pauseAfter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pause-after" CSS property.</haxe_doc>
		</pauseAfter>
		<pauseBefore public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pause-before" CSS property.</haxe_doc>
		</pauseBefore>
		<perspective public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "perspective" CSS property.</haxe_doc>
		</perspective>
		<perspectiveOrigin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "perspective-origin" CSS property.</haxe_doc>
		</perspectiveOrigin>
		<pitch public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pitch" CSS property.</haxe_doc>
		</pitch>
		<pitchRange public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "pitch-range" CSS property.</haxe_doc>
		</pitchRange>
		<playDuring public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "play-during" CSS property.</haxe_doc>
		</playDuring>
		<position public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "position" CSS property.</haxe_doc>
		</position>
		<presentationLevel public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "presentation-level" CSS property.</haxe_doc>
		</presentationLevel>
		<quotes public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "quotes" CSS property.</haxe_doc>
		</quotes>
		<regionFragment public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "region-fragment" CSS property.</haxe_doc>
		</regionFragment>
		<resize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "resize" CSS property.</haxe_doc>
		</resize>
		<rest public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rest" CSS property.</haxe_doc>
		</rest>
		<restAfter public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rest-after" CSS property.</haxe_doc>
		</restAfter>
		<restBefore public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rest-before" CSS property.</haxe_doc>
		</restBefore>
		<richness public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "richness" CSS property.</haxe_doc>
		</richness>
		<right public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "right" CSS property.</haxe_doc>
		</right>
		<rotation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rotation" CSS property.</haxe_doc>
		</rotation>
		<rotationPoint public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "rotation-point" CSS property.</haxe_doc>
		</rotationPoint>
		<rubyAlign public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "ruby-align" CSS property.</haxe_doc>
		</rubyAlign>
		<rubyMerge public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "ruby-merge" CSS property.</haxe_doc>
		</rubyMerge>
		<rubyPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "ruby-position" CSS property.</haxe_doc>
		</rubyPosition>
		<shapeImageThreshold public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "shape-image-threshold" CSS property.</haxe_doc>
		</shapeImageThreshold>
		<shapeOutside public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "shape-outside" CSS property.</haxe_doc>
		</shapeOutside>
		<shapeMargin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "shape-margin" CSS property.</haxe_doc>
		</shapeMargin>
		<size public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "size" CSS property.</haxe_doc>
		</size>
		<speak public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speak" CSS property.</haxe_doc>
		</speak>
		<speakAs public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speak-as" CSS property.</haxe_doc>
		</speakAs>
		<speakHeader public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speak-header" CSS property.</haxe_doc>
		</speakHeader>
		<speakNumeral public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speak-numeral" CSS property.</haxe_doc>
		</speakNumeral>
		<speakPunctuation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speak-punctuation" CSS property.</haxe_doc>
		</speakPunctuation>
		<speechRate public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "speech-rate" CSS property.</haxe_doc>
		</speechRate>
		<stress public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "stress" CSS property.</haxe_doc>
		</stress>
		<stringSet public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "string-set" CSS property.</haxe_doc>
		</stringSet>
		<tabSize public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "tab-size" CSS property.</haxe_doc>
		</tabSize>
		<tableLayout public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "table-layout" CSS property.</haxe_doc>
		</tableLayout>
		<textAlign public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-align" CSS property.</haxe_doc>
		</textAlign>
		<textAlignLast public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-align-last" CSS property.</haxe_doc>
		</textAlignLast>
		<textCombineUpright public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-combine-upright" CSS property.</haxe_doc>
		</textCombineUpright>
		<textDecoration public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration" CSS property.</haxe_doc>
		</textDecoration>
		<textDecorationColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration-color" CSS property.</haxe_doc>
		</textDecorationColor>
		<textDecorationLine public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration-line" CSS property.</haxe_doc>
		</textDecorationLine>
		<textDecorationSkip public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration-skip" CSS property.</haxe_doc>
		</textDecorationSkip>
		<textDecorationStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-decoration-style" CSS property.</haxe_doc>
		</textDecorationStyle>
		<textEmphasis public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-emphasis" CSS property.</haxe_doc>
		</textEmphasis>
		<textEmphasisColor public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-emphasis-color" CSS property.</haxe_doc>
		</textEmphasisColor>
		<textEmphasisPosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-emphasis-position" CSS property.</haxe_doc>
		</textEmphasisPosition>
		<textEmphasisStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-emphasis-style" CSS property.</haxe_doc>
		</textEmphasisStyle>
		<textHeight public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-height" CSS property.</haxe_doc>
		</textHeight>
		<textIndent public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-indent" CSS property.</haxe_doc>
		</textIndent>
		<textJustify public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-justify" CSS property.</haxe_doc>
		</textJustify>
		<textOrientation public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-orientation" CSS property.</haxe_doc>
		</textOrientation>
		<textOverflow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-overflow" CSS property.</haxe_doc>
		</textOverflow>
		<textShadow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-shadow" CSS property.</haxe_doc>
		</textShadow>
		<textSpaceCollapse public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-space-collapse" CSS property.</haxe_doc>
		</textSpaceCollapse>
		<textTransform public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-transform" CSS property.</haxe_doc>
		</textTransform>
		<textUnderlinePosition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-underline-position" CSS property.</haxe_doc>
		</textUnderlinePosition>
		<textWrap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "text-wrap" CSS property.</haxe_doc>
		</textWrap>
		<top public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "top" CSS property.</haxe_doc>
		</top>
		<transform public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transform" CSS property.</haxe_doc>
		</transform>
		<transformOrigin public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transform-origin" CSS property.</haxe_doc>
		</transformOrigin>
		<transformStyle public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transform-style" CSS property.</haxe_doc>
		</transformStyle>
		<transition public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transition" CSS property.</haxe_doc>
		</transition>
		<transitionDelay public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transition-delay" CSS property.</haxe_doc>
		</transitionDelay>
		<transitionDuration public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transition-duration" CSS property.</haxe_doc>
		</transitionDuration>
		<transitionProperty public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transition-property" CSS property.</haxe_doc>
		</transitionProperty>
		<transitionTimingFunction public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "transition-timing-function" CSS property.</haxe_doc>
		</transitionTimingFunction>
		<unicodeBidi public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "unicode-bidi" CSS property.</haxe_doc>
		</unicodeBidi>
		<verticalAlign public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "vertical-align" CSS property.</haxe_doc>
		</verticalAlign>
		<visibility public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "visibility" CSS property.</haxe_doc>
		</visibility>
		<voiceBalance public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-balance" CSS property.</haxe_doc>
		</voiceBalance>
		<voiceDuration public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-duration" CSS property.</haxe_doc>
		</voiceDuration>
		<voiceFamily public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-family" CSS property.</haxe_doc>
		</voiceFamily>
		<voicePitch public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-pitch" CSS property.</haxe_doc>
		</voicePitch>
		<voiceRange public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-range" CSS property.</haxe_doc>
		</voiceRange>
		<voiceRate public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-rate" CSS property.</haxe_doc>
		</voiceRate>
		<voiceStress public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-stress" CSS property.</haxe_doc>
		</voiceStress>
		<voiceVolume public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "voice-volume" CSS property.</haxe_doc>
		</voiceVolume>
		<volume public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "volume" CSS property.</haxe_doc>
		</volume>
		<whiteSpace public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "white-space" CSS property.</haxe_doc>
		</whiteSpace>
		<widows public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "widows" CSS property.</haxe_doc>
		</widows>
		<width public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "width" CSS property.</haxe_doc>
		</width>
		<willChange public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "will-change" CSS property.</haxe_doc>
		</willChange>
		<wordBreak public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "word-break" CSS property.</haxe_doc>
		</wordBreak>
		<wordSpacing public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "word-spacing" CSS property.</haxe_doc>
		</wordSpacing>
		<wordWrap public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "word-wrap" CSS property.</haxe_doc>
		</wordWrap>
		<wrapFlow public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "wrap-flow" CSS property.</haxe_doc>
		</wrapFlow>
		<wrapThrough public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "wrap-through" CSS property.</haxe_doc>
		</wrapThrough>
		<writingMode public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "writing-mode" CSS property.</haxe_doc>
		</writingMode>
		<zIndex public="1">
			<c path="String"/>
			<haxe_doc>Shorthand for the "z-index" CSS property.</haxe_doc>
		</zIndex>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="String"/>
</f></item>
		<getPropertyValue public="1" set="method">
			<f a="property">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getPropertyValue>
		<getPropertyCSSValue public="1" set="method">
			<f a="property">
				<c path="String"/>
				<c path="js.html.CSSValue"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getPropertyCSSValue>
		<getPropertyPriority public="1" set="method"><f a="property">
	<c path="String"/>
	<c path="String"/>
</f></getPropertyPriority>
		<setProperty public="1" set="method">
			<f a="property:value:?priority" v="::&quot;&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ priority : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setProperty>
		<removeProperty public="1" set="method">
			<f a="property">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeProperty>
		<haxe_doc><![CDATA[`CSSStyleDeclaration` represents a collection of CSS property-value pairs. It is used in a few APIs:

	Documentation [CSSStyleDeclaration](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSStyleDeclaration"</e></m></meta>
	</class>
	<class path="js.html.CSSStyleRule" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CSSStyleRule.hx" extern="1">
		<extends path="js.html.CSSRule"/>
		<selectorText public="1"><c path="String"/></selectorText>
		<style public="1" set="null"><c path="js.html.CSSStyleDeclaration"/></style>
		<haxe_doc><![CDATA[`CSSStyleRule` represents a single CSS style rule. It implements the `CSSRule` interface with a type value of `1` (`CSSRule.STYLE_RULE`).

	Documentation [CSSStyleRule](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleRule) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleRule$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleRule>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSStyleRule"</e></m></meta>
	</class>
	<class path="js.html.StyleSheet" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/StyleSheet.hx" extern="1">
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the style sheet language for this style sheet.</haxe_doc>
		</type>
		<href public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the location of the stylesheet.</haxe_doc>
		</href>
		<ownerNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` associating this style sheet with the current document.</haxe_doc>
		</ownerNode>
		<parentStyleSheet public="1" set="null">
			<c path="js.html.StyleSheet"/>
			<haxe_doc>Returns a `StyleSheet` including this one, if any; returns `null` if there aren't any.</haxe_doc>
		</parentStyleSheet>
		<title public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the advisory title of the current style sheet.</haxe_doc>
		</title>
		<media public="1" set="null">
			<c path="js.html.MediaList"/>
			<haxe_doc>Returns a `MediaList` representing the intended destination medium for style information.</haxe_doc>
		</media>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` representing whether the current stylesheet has been applied or not.</haxe_doc>
		</disabled>
		<haxe_doc><![CDATA[An object implementing the `StyleSheet` interface represents a single style sheet. CSS style sheets will further implement the more specialized `CSSStyleSheet` interface.

	Documentation [StyleSheet](https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet>]]></haxe_doc>
		<meta><m n=":native"><e>"StyleSheet"</e></m></meta>
	</class>
	<class path="js.html.CSSStyleSheet" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CSSStyleSheet.hx" extern="1">
		<extends path="js.html.StyleSheet"/>
		<ownerRule public="1" set="null"><c path="js.html.CSSRule"/></ownerRule>
		<cssRules public="1" set="null"><c path="js.html.CSSRuleList"/></cssRules>
		<insertRule public="1" set="method">
			<f a="rule:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</insertRule>
		<deleteRule public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</deleteRule>
		<haxe_doc><![CDATA[The `CSSStyleSheet` interface represents a single CSS style sheet. It inherits properties and methods from its parent, `StyleSheet`.

	Documentation [CSSStyleSheet](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSStyleSheet"</e></m></meta>
	</class>
	<class path="js.html.CSSTransition" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CSSTransition.hx" extern="1">
		<extends path="js.html.Animation"/>
		<transitionProperty public="1" set="null"><c path="String"/></transitionProperty>
		<meta><m n=":native"><e>"CSSTransition"</e></m></meta>
	</class>
	<class path="js.html.CSSUnknownRule" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CSSUnknownRule.hx" extern="1">
		<extends path="js.html.CSSRule"/>
		<meta><m n=":native"><e>"CSSUnknownRule"</e></m></meta>
	</class>
	<class path="js.html.CSSValueList" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CSSValueList.hx" extern="1">
		<extends path="js.html.CSSValue"/>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An `unsigned long` representing the number of `CSSValues` in the list.</haxe_doc>
		</length>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.CSSValue"/>
			</f>
			<haxe_doc>This method is used to retrieve a `CSSValue` by ordinal index. The order in this collection represents the order of the values in the CSS style property. If index is greater than or equal to the number of values in the list, this returns `null`.</haxe_doc>
		</item>
		<haxe_doc><![CDATA[The `CSSValueList` interface derives from the `CSSValue` interface and provides the abstraction of an ordered collection of CSS values.

	Documentation [CSSValueList](https://developer.mozilla.org/en-US/docs/Web/API/CSSValueList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CSSValueList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CSSValueList>]]></haxe_doc>
		<meta><m n=":native"><e>"CSSValueList"</e></m></meta>
	</class>
	<class path="js.html.CanvasElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CanvasElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<width public="1">
			<x path="Int"/>
			<haxe_doc>Is a positive `integer` reflecting the `width` HTML attribute of the `canvas` element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of `300` is used.</haxe_doc>
		</width>
		<height public="1">
			<x path="Int"/>
			<haxe_doc>Is a positive `integer` reflecting the `height` HTML attribute of the `canvas` element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of `150` is used.</haxe_doc>
		</height>
		<getContext public="1" set="method">
			<f a="contextId:?contextOptions">
				<c path="String"/>
				<d/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getContext>
		<toDataURL public="1" set="method">
			<f a="?type:?encoderOptions" v="&quot;&quot;:">
				<c path="String"/>
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ type : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</toDataURL>
		<toBlob public="1" set="method">
			<f a="callback:?type:?encoderOptions" v=":&quot;&quot;:">
				<f a="">
					<c path="js.html.Blob"/>
					<x path="Void"/>
				</f>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ type : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</toBlob>
		<getContext2d public="1" get="inline" set="null" line="68">
			<f a="?attribs">
				<a/>
				<c path="js.html.CanvasRenderingContext2D"/>
			</f>
			<haxe_doc>Shorthand for getting a CanvasRenderingContext2D.</haxe_doc>
		</getContext2d>
		<getContextWebGL public="1" get="inline" set="null" line="72">
			<f a="?attribs">
				<t path="js.html.webgl.ContextAttributes"/>
				<c path="js.html.webgl.RenderingContext"/>
			</f>
			<haxe_doc>Shorthand for getting a js.html.webgl.RenderingContext.</haxe_doc>
		</getContextWebGL>
		<haxe_doc><![CDATA[The `HTMLCanvasElement` interface provides properties and methods for manipulating the layout and presentation of canvas elements. The `HTMLCanvasElement` interface also inherits the properties and methods of the `HTMLElement` interface.

	Documentation [HTMLCanvasElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLCanvasElement"</e></m></meta>
	</class>
	<class path="js.html._CanvasElement.CanvasUtil" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CanvasElement.hx" private="1" module="js.html.CanvasElement"><getContextWebGL public="1" set="method" line="78" static="1"><f a="canvas:attribs">
	<c path="js.html.CanvasElement"/>
	<a/>
	<c path="js.html.webgl.RenderingContext"/>
</f></getContextWebGL></class>
	<class path="js.html.CanvasGradient" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CanvasGradient.hx" extern="1">
		<addColorStop public="1" set="method">
			<f a="offset:color">
				<x path="Float"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</addColorStop>
		<haxe_doc><![CDATA[The `CanvasGradient` interface represents an opaque object describing a gradient. It is returned by the methods `CanvasRenderingContext2D.createLinearGradient()` or `CanvasRenderingContext2D.createRadialGradient()`.

	Documentation [CanvasGradient](https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient>]]></haxe_doc>
		<meta><m n=":native"><e>"CanvasGradient"</e></m></meta>
	</class>
	<class path="js.html.CanvasPattern" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CanvasPattern.hx" extern="1">
		<setTransform public="1" set="method">
			<f a="matrix">
				<c path="js.html.svg.Matrix"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Applies an `SVGMatrix` representing a linear transform to the pattern.</haxe_doc>
		</setTransform>
		<haxe_doc><![CDATA[The `CanvasPattern` interface represents an opaque object describing a pattern, based on an image, a canvas or a video, created by the `CanvasRenderingContext2D.createPattern()` method.

	Documentation [CanvasPattern](https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern>]]></haxe_doc>
		<meta><m n=":native"><e>"CanvasPattern"</e></m></meta>
	</class>
	<class path="js.html.CanvasRenderingContext2D" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CanvasRenderingContext2D.hx" extern="1">
		<canvas public="1" set="null"><c path="js.html.CanvasElement"/></canvas>
		<globalAlpha public="1"><x path="Float"/></globalAlpha>
		<globalCompositeOperation public="1"><c path="String"/></globalCompositeOperation>
		<strokeStyle public="1"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="js.html.CanvasGradient"/>
		<c path="js.html.CanvasPattern"/>
	</x>
</x></strokeStyle>
		<fillStyle public="1"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="js.html.CanvasGradient"/>
		<c path="js.html.CanvasPattern"/>
	</x>
</x></fillStyle>
		<shadowOffsetX public="1"><x path="Float"/></shadowOffsetX>
		<shadowOffsetY public="1"><x path="Float"/></shadowOffsetY>
		<shadowBlur public="1"><x path="Float"/></shadowBlur>
		<shadowColor public="1"><c path="String"/></shadowColor>
		<filter public="1"><c path="String"/></filter>
		<imageSmoothingEnabled public="1"><x path="Bool"/></imageSmoothingEnabled>
		<lineWidth public="1"><x path="Float"/></lineWidth>
		<lineCap public="1"><c path="String"/></lineCap>
		<lineJoin public="1"><c path="String"/></lineJoin>
		<miterLimit public="1"><x path="Float"/></miterLimit>
		<lineDashOffset public="1"><x path="Float"/></lineDashOffset>
		<font public="1"><c path="String"/></font>
		<textAlign public="1"><c path="String"/></textAlign>
		<textBaseline public="1"><c path="String"/></textBaseline>
		<save public="1" set="method"><f a=""><x path="Void"/></f></save>
		<restore public="1" set="method"><f a=""><x path="Void"/></f></restore>
		<scale public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</scale>
		<rotate public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</rotate>
		<translate public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</translate>
		<transform public="1" set="method">
			<f a="a:b:c:d:e:f">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</transform>
		<setTransform public="1" set="method">
			<f a="a:b:c:d:e:f">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setTransform>
		<resetTransform public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</resetTransform>
		<createLinearGradient public="1" set="method"><f a="x0:y0:x1:y1">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.CanvasGradient"/>
</f></createLinearGradient>
		<createRadialGradient public="1" set="method">
			<f a="x0:y0:r0:x1:y1:r1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.CanvasGradient"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createRadialGradient>
		<createPattern public="1" set="method">
			<f a="image:repetition">
				<x path="haxe.extern.EitherType">
					<c path="js.html.ImageElement"/>
					<x path="haxe.extern.EitherType">
						<c path="js.html.CanvasElement"/>
						<x path="haxe.extern.EitherType">
							<c path="js.html.VideoElement"/>
							<c path="js.html.ImageBitmap"/>
						</x>
					</x>
				</x>
				<c path="String"/>
				<c path="js.html.CanvasPattern"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createPattern>
		<clearRect public="1" set="method"><f a="x:y:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></clearRect>
		<fillRect public="1" set="method"><f a="x:y:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fillRect>
		<strokeRect public="1" set="method"><f a="x:y:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></strokeRect>
		<beginPath public="1" set="method"><f a=""><x path="Void"/></f></beginPath>
		<fill public="1" set="method">
			<f a="path:?winding" v=":&quot;nonzero&quot;">
				<c path="js.html.Path2D"/>
				<x path="js.html.CanvasWindingRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ winding : "nonzero" }</e></m></meta>
			<overloads><fill public="1" set="method">
	<f a="?winding" v="&quot;nonzero&quot;">
		<x path="js.html.CanvasWindingRule"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ winding : "nonzero" }</e></m></meta>
</fill></overloads>
		</fill>
		<stroke public="1" set="method">
			<f a="path">
				<c path="js.html.Path2D"/>
				<x path="Void"/>
			</f>
			<overloads><stroke public="1" set="method"><f a=""><x path="Void"/></f></stroke></overloads>
		</stroke>
		<drawFocusIfNeeded public="1" set="method">
			<f a="element">
				<c path="js.html.Element"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</drawFocusIfNeeded>
		<drawCustomFocusRing public="1" set="method"><f a="element">
	<c path="js.html.Element"/>
	<x path="Bool"/>
</f></drawCustomFocusRing>
		<clip public="1" set="method">
			<f a="path:?winding" v=":&quot;nonzero&quot;">
				<c path="js.html.Path2D"/>
				<x path="js.html.CanvasWindingRule"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ winding : "nonzero" }</e></m></meta>
			<overloads><clip public="1" set="method">
	<f a="?winding" v="&quot;nonzero&quot;">
		<x path="js.html.CanvasWindingRule"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ winding : "nonzero" }</e></m></meta>
</clip></overloads>
		</clip>
		<isPointInPath public="1" set="method">
			<f a="path:x:y:?winding" v=":::&quot;nonzero&quot;">
				<c path="js.html.Path2D"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="js.html.CanvasWindingRule"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ winding : "nonzero" }</e></m></meta>
			<overloads><isPointInPath public="1" set="method">
	<f a="x:y:?winding" v="::&quot;nonzero&quot;">
		<x path="Float"/>
		<x path="Float"/>
		<x path="js.html.CanvasWindingRule"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":value"><e>{ winding : "nonzero" }</e></m></meta>
</isPointInPath></overloads>
		</isPointInPath>
		<isPointInStroke public="1" set="method">
			<f a="path:x:y">
				<c path="js.html.Path2D"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<overloads><isPointInStroke public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></isPointInStroke></overloads>
		</isPointInStroke>
		<fillText public="1" set="method">
			<f a="text:x:y:?maxWidth">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</fillText>
		<strokeText public="1" set="method">
			<f a="text:x:y:?maxWidth">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</strokeText>
		<measureText public="1" set="method">
			<f a="text">
				<c path="String"/>
				<c path="js.html.TextMetrics"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</measureText>
		<drawImage public="1" set="method">
			<f a="image:sx:sy:sw:sh:dx:dy:dw:dh">
				<x path="haxe.extern.EitherType">
					<c path="js.html.ImageElement"/>
					<x path="haxe.extern.EitherType">
						<c path="js.html.CanvasElement"/>
						<x path="haxe.extern.EitherType">
							<c path="js.html.VideoElement"/>
							<c path="js.html.ImageBitmap"/>
						</x>
					</x>
				</x>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<drawImage public="1" set="method">
					<f a="image:dx:dy">
						<x path="haxe.extern.EitherType">
							<c path="js.html.ImageElement"/>
							<x path="haxe.extern.EitherType">
								<c path="js.html.CanvasElement"/>
								<x path="haxe.extern.EitherType">
									<c path="js.html.VideoElement"/>
									<c path="js.html.ImageBitmap"/>
								</x>
							</x>
						</x>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
				<drawImage public="1" set="method">
					<f a="image:dx:dy:dw:dh">
						<x path="haxe.extern.EitherType">
							<c path="js.html.ImageElement"/>
							<x path="haxe.extern.EitherType">
								<c path="js.html.CanvasElement"/>
								<x path="haxe.extern.EitherType">
									<c path="js.html.VideoElement"/>
									<c path="js.html.ImageBitmap"/>
								</x>
							</x>
						</x>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Float"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</drawImage>
			</overloads>
		</drawImage>
		<addHitRegion public="1" set="method">
			<f a="?options">
				<t path="js.html.HitRegionOptions"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</addHitRegion>
		<removeHitRegion public="1" set="method"><f a="id">
	<c path="String"/>
	<x path="Void"/>
</f></removeHitRegion>
		<clearHitRegions public="1" set="method"><f a=""><x path="Void"/></f></clearHitRegions>
		<createImageData public="1" set="method">
			<f a="imagedata">
				<c path="js.html.ImageData"/>
				<c path="js.html.ImageData"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><createImageData public="1" set="method">
	<f a="sw:sh">
		<x path="Float"/>
		<x path="Float"/>
		<c path="js.html.ImageData"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</createImageData></overloads>
		</createImageData>
		<getImageData public="1" set="method">
			<f a="sx:sy:sw:sh">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.ImageData"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getImageData>
		<putImageData public="1" set="method">
			<f a="imagedata:dx:dy:dirtyX:dirtyY:dirtyWidth:dirtyHeight">
				<c path="js.html.ImageData"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><putImageData public="1" set="method">
	<f a="imagedata:dx:dy">
		<c path="js.html.ImageData"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</putImageData></overloads>
		</putImageData>
		<setLineDash public="1" set="method">
			<f a="segments">
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setLineDash>
		<getLineDash public="1" set="method"><f a=""><c path="Array"><x path="Float"/></c></f></getLineDash>
		<closePath public="1" set="method"><f a=""><x path="Void"/></f></closePath>
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadraticCurveTo public="1" set="method"><f a="cpx:cpy:x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadraticCurveTo>
		<bezierCurveTo public="1" set="method"><f a="cp1x:cp1y:cp2x:cp2y:x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></bezierCurveTo>
		<arcTo public="1" set="method">
			<f a="x1:y1:x2:y2:radius">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arcTo>
		<rect public="1" set="method"><f a="x:y:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rect>
		<arc public="1" set="method">
			<f a="x:y:radius:startAngle:endAngle:?anticlockwise" v=":::::false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ anticlockwise : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arc>
		<ellipse public="1" set="method">
			<f a="x:y:radiusX:radiusY:rotation:startAngle:endAngle:?anticlockwise" v=":::::::false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ anticlockwise : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</ellipse>
		<haxe_doc><![CDATA[To get an object of this interface, call `getContext()` on a `canvas element`, supplying "2d" as the argument:

	Documentation [CanvasRenderingContext2D](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D>]]></haxe_doc>
		<meta><m n=":native"><e>"CanvasRenderingContext2D"</e></m></meta>
	</class>
	<abstract path="js.html.CanvasWindingRule" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CanvasWindingRule.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._CanvasWindingRule.CanvasWindingRule_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CanvasWindingRule.hx" private="1" module="js.html.CanvasWindingRule" extern="1">
	<NONZERO public="1" get="inline" set="null" expr="cast &quot;nonzero&quot;" line="29" static="1">
		<x path="js.html.CanvasWindingRule"/>
		<meta>
			<m n=":value"><e>cast "nonzero"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NONZERO>
	<EVENODD public="1" get="inline" set="null" expr="cast &quot;evenodd&quot;" line="30" static="1">
		<x path="js.html.CanvasWindingRule"/>
		<meta>
			<m n=":value"><e>cast "evenodd"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EVENODD>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._CanvasWindingRule.CanvasWindingRule_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CanvasWindingRule.hx" private="1" module="js.html.CanvasWindingRule" extern="1">
		<NONZERO public="1" get="inline" set="null" expr="cast &quot;nonzero&quot;" line="29" static="1">
			<x path="js.html.CanvasWindingRule"/>
			<meta>
				<m n=":value"><e>cast "nonzero"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NONZERO>
		<EVENODD public="1" get="inline" set="null" expr="cast &quot;evenodd&quot;" line="30" static="1">
			<x path="js.html.CanvasWindingRule"/>
			<meta>
				<m n=":value"><e>cast "evenodd"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EVENODD>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.CaretPosition" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CaretPosition.hx" extern="1">
		<offsetNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` containing the found node at the caret's position.</haxe_doc>
		</offsetNode>
		<offset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` representing the character offset in the caret position node.</haxe_doc>
		</offset>
		<getClientRect public="1" set="method"><f a=""><c path="js.html.DOMRect"/></f></getClientRect>
		<haxe_doc><![CDATA[The `CaretPosition` interface represents the caret postion, an indicator for the text insertion point. You can get a `CaretPosition` using the `document.caretPositionFromPoint` method.

	Documentation [CaretPosition](https://developer.mozilla.org/en-US/docs/Web/API/CaretPosition) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CaretPosition$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CaretPosition>]]></haxe_doc>
		<meta><m n=":native"><e>"CaretPosition"</e></m></meta>
	</class>
	<typedef path="js.html.ChromeFilePropertyBag" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ChromeFilePropertyBag.hx"><a>
	<type>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</type>
	<temporary>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</temporary>
	<name>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</name>
	<lastModified>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</lastModified>
</a></typedef>
	<class path="js.html.Client" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Client.hx" extern="1">
		<url public="1" set="null">
			<c path="String"/>
			<haxe_doc>The URL of the current service worker client.</haxe_doc>
		</url>
		<frameType public="1" set="null">
			<x path="js.html.FrameType"/>
			<haxe_doc>Indicates the type of browsing context of the current client. This value can be one of `auxiliary`, `top-level`, `nested`, or `none`.</haxe_doc>
		</frameType>
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the universally unique identifier of the `Client` object.</haxe_doc>
		</id>
		<postMessage public="1" set="method">
			<f a="message:?transfer">
				<d/>
				<c path="Array"><d/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</postMessage>
		<haxe_doc><![CDATA[The `Client` interface of the ServiceWorker API represents the scope of a service worker client. A service worker client is either a document in a browser context or a `SharedWorker`, which is controlled by an active worker. A client object acts as a snapshot representation of its associated service worker client in the scope of a service worker.

	Documentation [Client](https://developer.mozilla.org/en-US/docs/Web/API/Client) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Client$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Client>]]></haxe_doc>
		<meta><m n=":native"><e>"Client"</e></m></meta>
	</class>
	<typedef path="js.html.ClientQueryOptions" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ClientQueryOptions.hx"><a>
	<type>
		<t path="Null"><d/></t>
		<meta><m n=":optional"/></meta>
	</type>
	<includeUncontrolled>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</includeUncontrolled>
</a></typedef>
	<class path="js.html.Clients" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Clients.hx" extern="1">
		<get public="1" set="method">
			<f a="id">
				<c path="String"/>
				<c path="js.Promise"><d/></c>
			</f>
			<haxe_doc>Gets a service worker client matching a given `id` and returns it in a `Promise`.</haxe_doc>
		</get>
		<matchAll public="1" set="method">
			<f a="?options">
				<t path="js.html.ClientQueryOptions"/>
				<c path="js.Promise"><c path="Array"><c path="js.html.Client"/></c></c>
			</f>
			<haxe_doc>Gets a list of service worker clients and returns them in a `Promise`. Include the `options` parameter to return all service worker clients whose origin is the same as the associated service worker's origin. If `options` are not included, the method returns only the service worker clients controlled by the service worker. </haxe_doc>
		</matchAll>
		<claim public="1" set="method">
			<f a=""><c path="js.Promise"><x path="Void"/></c></f>
			<haxe_doc>Allows an active Service Worker to set itself as the active worker for a client page when the worker and the page are in the same scope. </haxe_doc>
		</claim>
		<haxe_doc><![CDATA[The `Clients` interface of the Service Workers API represents a container for a list of `Client` objects.

	Documentation [Clients](https://developer.mozilla.org/en-US/docs/Web/API/Clients) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Clients$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Clients>]]></haxe_doc>
		<meta><m n=":native"><e>"Clients"</e></m></meta>
	</class>
	<class path="js.html.ClipboardEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ClipboardEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<clipboardData public="1" set="null">
			<c path="js.html.DataTransfer"/>
			<haxe_doc>Is a `DataTransfer` object containing the data affected by the user-initiated `cut`, `copy`, or `paste` operation, along with its MIME type.</haxe_doc>
		</clipboardData>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<t path="js.html.ClipboardEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `ClipboardEvent` interface represents events providing information related to modification of the clipboard, that is `cut`, `copy`, and `paste` events.

	Documentation [ClipboardEvent](https://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"ClipboardEvent"</e></m></meta>
	</class>
	<typedef path="js.html.ClipboardEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ClipboardEventInit.hx"><a>
	<dataType>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</dataType>
	<data>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</data>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.CloseEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CloseEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<wasClean public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that Indicates whether or not the connection was cleanly closed.</haxe_doc>
		</wasClean>
		<code public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns an <code>unsigned short</code> containing the close code send by the server. The following values are permitted status codes.
		 <table id="Status_codes" class="standard-table">
		  
		   <tr>
		    <td class="header">Status code</td>
		    <td class="header">Name</td>
		    <td class="header">Description</td>
		   </tr>
		   <tr>
		    <td><code>0</code>–<code>999</code></td>
		    <td> </td>
		    <td>Reserved and not used.</td>
		   </tr>
		   <tr>
		    <td><code>1000</code></td>
		    <td><code>CLOSE_NORMAL</code></td>
		    <td>Normal closure; the connection successfully completed whatever purpose for which it was created.</td>
		   </tr>
		   <tr>
		    <td><code>1001</code></td>
		    <td><code>CLOSE_GOING_AWAY</code></td>
		    <td>The endpoint is going away, either because of a server failure or because the browser is navigating away from the page that opened the connection.</td>
		   </tr>
		   <tr>
		    <td><code>1002</code></td>
		    <td><code>CLOSE_PROTOCOL_ERROR</code></td>
		    <td>The endpoint is terminating the connection due to a protocol error.</td>
		   </tr>
		   <tr>
		    <td><code>1003</code></td>
		    <td><code>CLOSE_UNSUPPORTED</code></td>
		    <td>The connection is being terminated because the endpoint received data of a type it cannot accept (for example, a text-only endpoint received binary data).</td>
		   </tr>
		   <tr>
		    <td><code>1004</code></td>
		    <td> </td>
		    <td>Reserved. A meaning might be defined in the future.</td>
		   </tr>
		   <tr>
		    <td><code>1005</code></td>
		    <td><code>CLOSE_NO_STATUS</code></td>
		    <td>Reserved.  Indicates that no status code was provided even though one was expected.</td>
		   </tr>
		   <tr>
		    <td><code>1006</code></td>
		    <td><code>CLOSE_ABNORMAL</code></td>
		    <td>Reserved. Used to indicate that a connection was closed abnormally (that is, with no close frame being sent) when a status code is expected.</td>
		   </tr>
		   <tr>
		    <td><code>1007</code></td>
		    <td>Unsupported Data</td>
		    <td>The endpoint is terminating the connection because a message was received that contained inconsistent data (e.g., non-UTF-8 data within a text message).</td>
		   </tr>
		   <tr>
		    <td><code>1008</code></td>
		    <td>Policy Violation</td>
		    <td>The endpoint is terminating the connection because it received a message that violates its policy. This is a generic status code, used when codes 1003 and 1009 are not suitable.</td>
		   </tr>
		   <tr>
		    <td><code>1009</code></td>
		    <td><code>CLOSE_TOO_LARGE</code></td>
		    <td>The endpoint is terminating the connection because a data frame was received that is too large.</td>
		   </tr>
		   <tr>
		    <td><code>1010</code></td>
		    <td>Missing Extension</td>
		    <td>The client is terminating the connection because it expected the server to negotiate one or more extension, but the server didn't.</td>
		   </tr>
		   <tr>
		    <td><code>1011</code></td>
		    <td>Internal Error</td>
		    <td>The server is terminating the connection because it encountered an unexpected condition that prevented it from fulfilling the request.</td>
		   </tr>
		   <tr>
		    <td><code>1012</code></td>
		    <td>Service Restart</td>
		    <td>The server is terminating the connection because it is restarting. [Ref]</td>
		   </tr>
		   <tr>
		    <td><code>1013</code></td>
		    <td>Try Again Later</td>
		    <td>The server is terminating the connection due to a temporary condition, e.g. it is overloaded and is casting off some of its clients. [Ref]</td>
		   </tr>
		   <tr>
		    <td><code>1014</code></td>
		    <td> </td>
		    <td>Reserved for future use by the WebSocket standard.</td>
		   </tr>
		   <tr>
		    <td><code>1015</code></td>
		    <td>TLS Handshake</td>
		    <td>Reserved. Indicates that the connection was closed due to a failure to perform a TLS handshake (e.g., the server certificate can't be verified).</td>
		   </tr>
		   <tr>
		    <td><code>1016</code>–<code>1999</code></td>
		    <td> </td>
		    <td>Reserved for future use by the WebSocket standard.</td>
		   </tr>
		   <tr>
		    <td><code>2000</code>–<code>2999</code></td>
		    <td> </td>
		    <td>Reserved for use by WebSocket extensions.</td>
		   </tr>
		   <tr>
		    <td><code>3000</code>–<code>3999</code></td>
		    <td> </td>
		    <td>Available for use by libraries and frameworks. May not be used by applications. Available for registration at the IANA via first-come, first-serve.</td>
		   </tr>
		   <tr>
		    <td><code>4000</code>–<code>4999</code></td>
		    <td> </td>
		    <td>Available for use by applications.</td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</code>
		<reason public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` indicating the reason the server closed the connection. This is specific to the particular server and sub-protocol.</haxe_doc>
		</reason>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<t path="js.html.CloseEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A `CloseEvent` is sent to clients using WebSockets when the connection is closed. This is delivered to the listener indicated by the `WebSocket` object's `onclose` attribute.

	Documentation [CloseEvent](https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"CloseEvent"</e></m></meta>
	</class>
	<typedef path="js.html.CloseEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CloseEventInit.hx"><a>
	<wasClean>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</wasClean>
	<reason>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</reason>
	<code>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</code>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.CommandEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CommandEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<command public="1" set="null"><c path="String"/></command>
		<initCommandEvent public="1" set="method"><f a="type:canBubble:cancelable:command">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="String"/>
	<x path="Void"/>
</f></initCommandEvent>
		<meta><m n=":native"><e>"CommandEvent"</e></m></meta>
	</class>
	<class path="js.html.Comment" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Comment.hx" extern="1">
		<extends path="js.html.CharacterData"/>
		<new public="1" set="method">
			<f a="?data" v="&quot;&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ data : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Comment` interface represents textual notations within markup; although it is generally not visually shown, such comments are available to be read in the source view. Comments are represented in HTML and XML as content between '`!--`' and '`--`'. In XML, the character sequence '`--`' cannot be used within a comment.

	Documentation [Comment](https://developer.mozilla.org/en-US/docs/Web/API/Comment) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Comment$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Comment>]]></haxe_doc>
		<meta><m n=":native"><e>"Comment"</e></m></meta>
	</class>
	<abstract path="js.html.CompositeOperation" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CompositeOperation.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._CompositeOperation.CompositeOperation_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CompositeOperation.hx" private="1" module="js.html.CompositeOperation" extern="1">
	<REPLACE public="1" get="inline" set="null" expr="cast &quot;replace&quot;" line="29" static="1">
		<x path="js.html.CompositeOperation"/>
		<meta>
			<m n=":value"><e>cast "replace"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</REPLACE>
	<ADD public="1" get="inline" set="null" expr="cast &quot;add&quot;" line="30" static="1">
		<x path="js.html.CompositeOperation"/>
		<meta>
			<m n=":value"><e>cast "add"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ADD>
	<ACCUMULATE public="1" get="inline" set="null" expr="cast &quot;accumulate&quot;" line="31" static="1">
		<x path="js.html.CompositeOperation"/>
		<meta>
			<m n=":value"><e>cast "accumulate"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ACCUMULATE>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._CompositeOperation.CompositeOperation_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CompositeOperation.hx" private="1" module="js.html.CompositeOperation" extern="1">
		<REPLACE public="1" get="inline" set="null" expr="cast &quot;replace&quot;" line="29" static="1">
			<x path="js.html.CompositeOperation"/>
			<meta>
				<m n=":value"><e>cast "replace"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</REPLACE>
		<ADD public="1" get="inline" set="null" expr="cast &quot;add&quot;" line="30" static="1">
			<x path="js.html.CompositeOperation"/>
			<meta>
				<m n=":value"><e>cast "add"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ADD>
		<ACCUMULATE public="1" get="inline" set="null" expr="cast &quot;accumulate&quot;" line="31" static="1">
			<x path="js.html.CompositeOperation"/>
			<meta>
				<m n=":value"><e>cast "accumulate"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ACCUMULATE>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.UIEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/UIEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<SCROLL_PAGE_UP public="1" get="inline" set="null" expr="-32768" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-32768</e></m></meta>
		</SCROLL_PAGE_UP>
		<SCROLL_PAGE_DOWN public="1" get="inline" set="null" expr="32768" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32768</e></m></meta>
		</SCROLL_PAGE_DOWN>
		<view public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a `WindowProxy` that contains the view that generated the event.</haxe_doc>
		</view>
		<detail public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` with details about the event, depending on the event type.</haxe_doc>
		</detail>
		<layerX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the horizontal coordinate of the event relative to the current layer.</haxe_doc>
		</layerX>
		<layerY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the vertical coordinate of the event relative to the current layer.</haxe_doc>
		</layerY>
		<pageX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the horizontal coordinate of the event relative to the whole document.</haxe_doc>
		</pageX>
		<pageY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the vertical coordinate of the event relative to the whole document.</haxe_doc>
		</pageY>
		<which public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the numeric `keyCode` of the key pressed, or the character code (`charCode`) for an alphanumeric key pressed.</haxe_doc>
		</which>
		<rangeParent public="1" set="null"><c path="js.html.Node"/></rangeParent>
		<rangeOffset public="1" set="null"><x path="Int"/></rangeOffset>
		<cancelBubble public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating whether the bubbling of the event has been canceled or not.</haxe_doc>
		</cancelBubble>
		<isChar public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` indicating whether the event produced a key character or not.</haxe_doc>
		</isChar>
		<initUIEvent public="1" set="method">
			<f a="aType:aCanBubble:aCancelable:aView:aDetail">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.html.Window"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Initializes a `UIEvent` object. If the event has already being dispatched, this method does nothing.</haxe_doc>
		</initUIEvent>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<t path="js.html.UIEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `UIEvent` interface represents simple user interface events.

	Documentation [UIEvent](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/UIEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"UIEvent"</e></m></meta>
	</class>
	<class path="js.html.CompositionEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CompositionEvent.hx" extern="1">
		<extends path="js.html.UIEvent"/>
		<data public="1" set="null"><c path="String"/></data>
		<locale public="1" set="null"><c path="String"/></locale>
		<initCompositionEvent public="1" set="method"><f a="typeArg:canBubbleArg:cancelableArg:viewArg:dataArg:localeArg">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="js.html.Window"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></initCompositionEvent>
		<haxe_doc><![CDATA[The DOM `CompositionEvent` represents events that occur due to the user indirectly entering text.

	Documentation [CompositionEvent](https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"CompositionEvent"</e></m></meta>
	</class>
	<typedef path="js.html.ComputedTimingProperties" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ComputedTimingProperties.hx"><a>
	<progress>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</progress>
	<localTime>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</localTime>
	<iterations>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</iterations>
	<iterationStart>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</iterationStart>
	<fill>
		<t path="Null"><x path="js.html.FillMode"/></t>
		<meta><m n=":optional"/></meta>
	</fill>
	<endTime>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</endTime>
	<endDelay>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</endDelay>
	<easing>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</easing>
	<duration>
		<t path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<c path="String"/>
</x></t>
		<meta><m n=":optional"/></meta>
	</duration>
	<direction>
		<t path="Null"><x path="js.html.PlaybackDirection"/></t>
		<meta><m n=":optional"/></meta>
	</direction>
	<delay>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</delay>
	<currentIteration>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</currentIteration>
	<activeDuration>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</activeDuration>
</a></typedef>
	<class path="js.html.Console" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Console.hx" extern="1">
		<log public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>For general output of logging information. You may use string substitution and additional arguments with this method.</haxe_doc>
		</log>
		<info public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Informative logging information. You may use string substitution and additional arguments with this method.</haxe_doc>
		</info>
		<warn public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs a warning message. You may use string substitution and additional arguments with this method.</haxe_doc>
		</warn>
		<error public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs an error message. You may use string substitution and additional arguments with this method.</haxe_doc>
		</error>
		<exception public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>An alias for `error()`</haxe_doc>
		</exception>
		<debug public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>An alias for `log()`</haxe_doc>
		</debug>
		<table public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Displays tabular data as a table.</haxe_doc>
		</table>
		<trace public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Outputs a stack trace.</haxe_doc>
		</trace>
		<dir public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Displays an interactive listing of the properties of a specified JavaScript object. This listing lets you use disclosure triangles to examine the contents of child objects.</haxe_doc>
		</dir>
		<dirxml public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Displays an XML/HTML Element representation of the specified object if possible or the JavaScript Object view if it is not.</haxe_doc>
		</dirxml>
		<group public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new inline group, indenting all following output by another level. To move back out a level, call `groupEnd()`.</haxe_doc>
		</group>
		<groupCollapsed public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new inline group, indenting all following output by another level; unlike `group()`, this starts with the inline group collapsed, requiring the use of a disclosure button to expand it. To move back out a level, call `groupEnd()`.</haxe_doc>
		</groupCollapsed>
		<groupEnd public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Exits the current inline group.</haxe_doc>
		</groupEnd>
		<time public="1" set="method">
			<f a="?time">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Starts a timer with a name specified as an input parameter. Up to 10,000 simultaneous timers can run on a given page.</haxe_doc>
		</time>
		<timeEnd public="1" set="method">
			<f a="?time">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stops the specified timer and logs the elapsed time in seconds since its start.</haxe_doc>
		</timeEnd>
		<timeStamp public="1" set="method">
			<f a="?data">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a marker to the browser's Timeline or Waterfall tool.</haxe_doc>
		</timeStamp>
		<profile public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Starts the browser's build-in profiler (for example, the Firefox performance tool). You can specify an optional name for the profile.</haxe_doc>
		</profile>
		<profileEnd public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Stops the profiler. You can see the resulting profile in the browser's performance tool (for example, the Firefox performance tool).</haxe_doc>
		</profileEnd>
		<assert public="1" set="method">
			<f a="condition:data">
				<x path="Bool"/>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Log a message and stack trace to console if first argument is `false`.</haxe_doc>
		</assert>
		<count public="1" set="method">
			<f a="data">
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Log the number of times this line has been called with the given label.</haxe_doc>
		</count>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clear the console.</haxe_doc>
		</clear>
		<markTimeline public="1" set="method"><f a=""><x path="Void"/></f></markTimeline>
		<timeline public="1" set="method"><f a=""><x path="Void"/></f></timeline>
		<timelineEnd public="1" set="method"><f a=""><x path="Void"/></f></timelineEnd>
		<haxe_doc><![CDATA[The `Console` object provides access to the browser's debugging console (e.g., the Web Console in Firefox). The specifics of how it works vary from browser to browser, but there is a de facto set of features that are typically provided.

	Documentation [Console](https://developer.mozilla.org/en-US/docs/Web/API/Console) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Console$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Console>]]></haxe_doc>
		<meta><m n=":native"><e>"Console"</e></m></meta>
	</class>
	<class path="js.html.ContentElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ContentElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<select public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `select` HTML attribute. The value is a comma-separated list of CSS selectors that select the content to insert in place of the `content` element.</haxe_doc>
		</select>
		<getDistributedNodes public="1" set="method">
			<f a=""><c path="js.html.NodeList"/></f>
			<haxe_doc>Returns a static `NodeList` of the `distributed nodes` associated with this `content` element. </haxe_doc>
		</getDistributedNodes>
		<haxe_doc><![CDATA[The `HTMLContentElement` interface represents a `content` HTML Element, which is used in Shadow DOM.

	Documentation [HTMLContentElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLContentElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLContentElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLContentElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLContentElement"</e></m></meta>
	</class>
	<typedef path="js.html.ConvertCoordinateOptions" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ConvertCoordinateOptions.hx"><a>
	<toBox>
		<t path="Null"><d/></t>
		<meta><m n=":optional"/></meta>
	</toBox>
	<fromBox>
		<t path="Null"><d/></t>
		<meta><m n=":optional"/></meta>
	</fromBox>
</a></typedef>
	<class path="js.html.Coordinates" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Coordinates.hx" extern="1">
		<latitude public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a `double` representing the position's latitude in decimal degrees.</haxe_doc>
		</latitude>
		<longitude public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a `double` representing the position's longitude in decimal degrees.</haxe_doc>
		</longitude>
		<altitude public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a `double` representing the position's altitude in metres, relative to sea level. This value can be `null` if the implementation cannot provide the data.</haxe_doc>
		</altitude>
		<accuracy public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a `double` representing the accuracy of the `latitude` and `longitude` properties, expressed in meters.</haxe_doc>
		</accuracy>
		<altitudeAccuracy public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a `double` representing the accuracy of the `altitude` expressed in meters. This value can be `null`.</haxe_doc>
		</altitudeAccuracy>
		<heading public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a `double` representing the direction in which the device is traveling. This value, specified in degrees, indicates how far off from heading true north the device is. `0` degrees represents true north, and the direction is determined clockwise (which means that east is `90` degrees and west is `270` degrees). If `speed` is `0`, `heading` is `NaN`. If the device is unable to provide `heading` information, this value is `null`.</haxe_doc>
		</heading>
		<speed public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a `double` representing the velocity of the device in meters per second. This value can be `null`.</haxe_doc>
		</speed>
		<haxe_doc><![CDATA[The `Coordinates` interface represents the position and altitude of the device on Earth, as well as the accuracy with which these properties are calculated.

	Documentation [Coordinates](https://developer.mozilla.org/en-US/docs/Web/API/Coordinates) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Coordinates$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Coordinates>]]></haxe_doc>
		<meta><m n=":native"><e>"Coordinates"</e></m></meta>
	</class>
	<class path="js.html.Crypto" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Crypto.hx" extern="1">
		<subtle public="1" set="null">
			<c path="js.html.SubtleCrypto"/>
			<haxe_doc>Returns a `SubtleCrypto` object providing access to common cryptographic primitives, like hashing, signing, encryption or decryption.</haxe_doc>
		</subtle>
		<getRandomValues public="1" set="method">
			<f a="array">
				<c path="js.html.ArrayBufferView"/>
				<c path="js.html.ArrayBufferView"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getRandomValues>
		<haxe_doc><![CDATA[The `Crypto` interface represents basic cryptography features available in the current context. It allows access to a cryptographically strong random number generator and to cryptographic primitives.

	Documentation [Crypto](https://developer.mozilla.org/en-US/docs/Web/API/Crypto) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Crypto$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Crypto>]]></haxe_doc>
		<meta><m n=":native"><e>"Crypto"</e></m></meta>
	</class>
	<class path="js.html.CryptoKey" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CryptoKey.hx" extern="1">
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns an enumerated value representing the type of the key, a secret key (for symmetric algorithm), a public or a private key (for an asymmetric algorithm)</haxe_doc>
		</type>
		<extractable public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` indicating if the raw information may be exported to the application or not.</haxe_doc>
		</extractable>
		<algorithm public="1" set="null">
			<d/>
			<haxe_doc>Returns an opaque object representing a particular cipher the key has to be used with.</haxe_doc>
		</algorithm>
		<usages public="1" set="null">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>Returns an array of enumerated values indicating what the key can be used for.</haxe_doc>
		</usages>
		<haxe_doc><![CDATA[The `CryptoKey` interface represents a cryptographic key derived from a specific key algorithm.

	Documentation [CryptoKey](https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey>]]></haxe_doc>
		<meta><m n=":native"><e>"CryptoKey"</e></m></meta>
	</class>
	<class path="js.html.CustomEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CustomEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<detail public="1" set="null">
			<d/>
			<haxe_doc>Any data passed when initializing the event.</haxe_doc>
		</detail>
		<initCustomEvent public="1" set="method">
			<f a="type:canBubble:cancelable:detail">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</initCustomEvent>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<t path="js.html.CustomEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[This interface inherits properties from its parent, `Event`:

	Documentation [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"CustomEvent"</e></m></meta>
	</class>
	<typedef path="js.html.CustomEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/CustomEventInit.hx"><a>
	<detail>
		<t path="Null"><d/></t>
		<meta><m n=":optional"/></meta>
	</detail>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.DListElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DListElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<compact public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating that spacing between list items should be reduced.</haxe_doc>
		</compact>
		<haxe_doc><![CDATA[The `HTMLDListElement` interface provides special properties (beyond those of the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating definition list elements.

	Documentation [HTMLDListElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDListElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDListElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLDListElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDListElement"</e></m></meta>
	</class>
	<class path="js.html.DOMCursor" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DOMCursor.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<done public="1" set="null"><x path="Bool"/></done>
		<readyState public="1" set="null"><x path="js.html.DOMRequestReadyState"/></readyState>
		<result public="1" set="null"><d/></result>
		<error public="1" set="null"><c path="js.html.DOMError"/></error>
		<onsuccess public="1"><x path="haxe.Function"/></onsuccess>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<continue_ public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":native"><e>"continue"</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</continue_>
		<meta><m n=":native"><e>"DOMCursor"</e></m></meta>
	</class>
	<class path="js.html.DOMError" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DOMError.hx" extern="1">
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing one of the error type names (see below).</haxe_doc>
		</name>
		<message public="1" set="null"><c path="String"/></message>
		<new public="1" set="method">
			<f a="name:?message" v=":&quot;&quot;">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ message : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DOMError` interface describes an error object that contains an error name.

	Documentation [DOMError](https://developer.mozilla.org/en-US/docs/Web/API/DOMError) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMError$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMError>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMError"</e></m></meta>
	</class>
	<class path="js.html.DOMException" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DOMException.hx" extern="1">
		<INDEX_SIZE_ERR public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</INDEX_SIZE_ERR>
		<DOMSTRING_SIZE_ERR public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</DOMSTRING_SIZE_ERR>
		<HIERARCHY_REQUEST_ERR public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</HIERARCHY_REQUEST_ERR>
		<WRONG_DOCUMENT_ERR public="1" get="inline" set="null" expr="4" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</WRONG_DOCUMENT_ERR>
		<INVALID_CHARACTER_ERR public="1" get="inline" set="null" expr="5" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</INVALID_CHARACTER_ERR>
		<NO_DATA_ALLOWED_ERR public="1" get="inline" set="null" expr="6" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</NO_DATA_ALLOWED_ERR>
		<NO_MODIFICATION_ALLOWED_ERR public="1" get="inline" set="null" expr="7" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</NO_MODIFICATION_ALLOWED_ERR>
		<NOT_FOUND_ERR public="1" get="inline" set="null" expr="8" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</NOT_FOUND_ERR>
		<NOT_SUPPORTED_ERR public="1" get="inline" set="null" expr="9" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</NOT_SUPPORTED_ERR>
		<INUSE_ATTRIBUTE_ERR public="1" get="inline" set="null" expr="10" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</INUSE_ATTRIBUTE_ERR>
		<INVALID_STATE_ERR public="1" get="inline" set="null" expr="11" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>11</e></m></meta>
		</INVALID_STATE_ERR>
		<SYNTAX_ERR public="1" get="inline" set="null" expr="12" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</SYNTAX_ERR>
		<INVALID_MODIFICATION_ERR public="1" get="inline" set="null" expr="13" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>13</e></m></meta>
		</INVALID_MODIFICATION_ERR>
		<NAMESPACE_ERR public="1" get="inline" set="null" expr="14" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>14</e></m></meta>
		</NAMESPACE_ERR>
		<INVALID_ACCESS_ERR public="1" get="inline" set="null" expr="15" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>15</e></m></meta>
		</INVALID_ACCESS_ERR>
		<VALIDATION_ERR public="1" get="inline" set="null" expr="16" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</VALIDATION_ERR>
		<TYPE_MISMATCH_ERR public="1" get="inline" set="null" expr="17" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>17</e></m></meta>
		</TYPE_MISMATCH_ERR>
		<SECURITY_ERR public="1" get="inline" set="null" expr="18" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>18</e></m></meta>
		</SECURITY_ERR>
		<NETWORK_ERR public="1" get="inline" set="null" expr="19" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>19</e></m></meta>
		</NETWORK_ERR>
		<ABORT_ERR public="1" get="inline" set="null" expr="20" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>20</e></m></meta>
		</ABORT_ERR>
		<URL_MISMATCH_ERR public="1" get="inline" set="null" expr="21" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>21</e></m></meta>
		</URL_MISMATCH_ERR>
		<QUOTA_EXCEEDED_ERR public="1" get="inline" set="null" expr="22" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>22</e></m></meta>
		</QUOTA_EXCEEDED_ERR>
		<TIMEOUT_ERR public="1" get="inline" set="null" expr="23" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>23</e></m></meta>
		</TIMEOUT_ERR>
		<INVALID_NODE_TYPE_ERR public="1" get="inline" set="null" expr="24" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>24</e></m></meta>
		</INVALID_NODE_TYPE_ERR>
		<DATA_CLONE_ERR public="1" get="inline" set="null" expr="25" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>25</e></m></meta>
		</DATA_CLONE_ERR>
		<code public="1" set="null"><x path="Int"/></code>
		<message public="1" set="null"><c path="String"/></message>
		<result public="1" set="null"><x path="Int"/></result>
		<name public="1" set="null"><c path="String"/></name>
		<filename public="1" set="null"><c path="String"/></filename>
		<lineNumber public="1" set="null"><x path="Int"/></lineNumber>
		<columnNumber public="1" set="null"><x path="Int"/></columnNumber>
		<data public="1" set="null"><d/></data>
		<stack public="1" set="null"><c path="String"/></stack>
		<new public="1" set="method">
			<f a="?message:?name" v="&quot;&quot;:">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ message : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DOMException` interface represents an abnormal event (called an exception) which occurs as a result of calling a method or accessing a property of a web API. This is basically how error conditions are described in web APIs.

	Documentation [DOMException](https://developer.mozilla.org/en-US/docs/Web/API/DOMException) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMException$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMException>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMException"</e></m></meta>
	</class>
	<class path="js.html.DOMImplementation" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DOMImplementation.hx" extern="1">
		<hasFeature public="1" set="method">
			<f a="feature:version">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` indicating if a given feature is supported or not. This function is unreliable and kept for compatibility purpose alone: except for SVG-related queries, it always returns `true`. Old browsers are very inconsistent in their behavior.</haxe_doc>
		</hasFeature>
		<createDocumentType public="1" set="method">
			<f a="qualifiedName:publicId:systemId">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.DocumentType"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createDocumentType>
		<createDocument public="1" set="method">
			<f a="namespace_:qualifiedName:?doctype">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.DocumentType"/>
				<c path="js.html.HTMLDocument"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createDocument>
		<createHTMLDocument public="1" set="method">
			<f a="?title">
				<c path="String"/>
				<c path="js.html.HTMLDocument"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createHTMLDocument>
		<haxe_doc><![CDATA[The `DOMImplementation` interface represent an object providing methods which are not dependent on any particular document. Such an object is returned by the `Document.implementation` property.

	Documentation [DOMImplementation](https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMImplementation"</e></m></meta>
	</class>
	<class path="js.html.DOMMatrixReadOnly" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DOMMatrixReadOnly.hx" extern="1">
		<a public="1" set="null">
			<x path="Float"/>
			<haxe_doc><![CDATA[Are <code>double</code> representing each component of a 4x4 matrix needed for 2D rotations and translations. They are aliases for some components of the 4x4 matrix:
		 <table class="standard-table">
		  
		   <tr>
		    2D
		    3D equivalent
		   </tr>
		  
		  
		   <tr>
		    <td><code>a</code></td>
		    <td><code>m11</code></td>
		   </tr>
		   <tr>
		    <td><code>b</code></td>
		    <td><code>m12</code></td>
		   </tr>
		   <tr>
		    <td><code>c</code></td>
		    <td><code>m21</code></td>
		   </tr>
		   <tr>
		    <td><code>d</code></td>
		    <td><code>m22</code></td>
		   </tr>
		   <tr>
		    <td><code>e</code></td>
		    <td><code>m41</code></td>
		   </tr>
		   <tr>
		    <td><code>f</code></td>
		    <td><code>m42</code></td>
		   </tr>
		  
		 </table>
		 They are read-only, but their counterpart, with the same name, in <code>DOMMatrix</code> aren't.]]></haxe_doc>
		</a>
		<b public="1" set="null"><x path="Float"/></b>
		<c public="1" set="null"><x path="Float"/></c>
		<d public="1" set="null"><x path="Float"/></d>
		<e public="1" set="null"><x path="Float"/></e>
		<f public="1" set="null"><x path="Float"/></f>
		<m11 public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Are `double` representing each component of a 4x4 matrix. They are read-only, but their counterpart, with the same name, in `DOMMatrix` aren't.</haxe_doc>
		</m11>
		<m12 public="1" set="null"><x path="Float"/></m12>
		<m13 public="1" set="null"><x path="Float"/></m13>
		<m14 public="1" set="null"><x path="Float"/></m14>
		<m21 public="1" set="null"><x path="Float"/></m21>
		<m22 public="1" set="null"><x path="Float"/></m22>
		<m23 public="1" set="null"><x path="Float"/></m23>
		<m24 public="1" set="null"><x path="Float"/></m24>
		<m31 public="1" set="null"><x path="Float"/></m31>
		<m32 public="1" set="null"><x path="Float"/></m32>
		<m33 public="1" set="null"><x path="Float"/></m33>
		<m34 public="1" set="null"><x path="Float"/></m34>
		<m41 public="1" set="null"><x path="Float"/></m41>
		<m42 public="1" set="null"><x path="Float"/></m42>
		<m43 public="1" set="null"><x path="Float"/></m43>
		<m44 public="1" set="null"><x path="Float"/></m44>
		<is2D public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating if the matrix contains a 2D matrix and only accept 2D transformations.</haxe_doc>
		</is2D>
		<identity public="1" set="null"><x path="Bool"/></identity>
		<translate public="1" set="method">
			<f a="tx:ty:?tz" v="::0.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<meta><m n=":value"><e>{ tz : 0.0 }</e></m></meta>
			<haxe_doc>Returns a `DOMMatrix` containing a new matrix being the result of the matrix being translated by the given vector. The original matrix is not modified.</haxe_doc>
		</translate>
		<scale public="1" set="method">
			<f a="scale:?originX:?originY" v=":0.0:0.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<meta><m n=":value"><e>{ originY : 0.0, originX : 0.0 }</e></m></meta>
			<haxe_doc>Returns a `DOMMatrix` containing a new matrix being the result of the matrix x and y dimensions being scaled by the given factor, centered on the origin given. The original matrix is not modified.</haxe_doc>
		</scale>
		<scale3d public="1" set="method">
			<f a="scale:?originX:?originY:?originZ" v=":0.0:0.0:0.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<meta><m n=":value"><e>{ originZ : 0.0, originY : 0.0, originX : 0.0 }</e></m></meta>
			<haxe_doc>Returns a `DOMMatrix` containing a new matrix being the result of the matrix x, y and z dimension being scaled by the given factor, centered on the origin given. The original matrix is not modified.</haxe_doc>
		</scale3d>
		<scaleNonUniform public="1" set="method">
			<f a="scaleX:?scaleY:?scaleZ:?originX:?originY:?originZ" v=":1.0:1.0:0.0:0.0:0.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<meta><m n=":value"><e>{ originZ : 0.0, originY : 0.0, originX : 0.0, scaleZ : 1.0, scaleY : 1.0 }</e></m></meta>
			<haxe_doc>Returns a `DOMMatrix` containing a new matrix being the result of the matrix x, y and z dimension being scaled by the given factor for each dimension, centered on the origin given. The original matrix is not modified.</haxe_doc>
		</scaleNonUniform>
		<rotate public="1" set="method">
			<f a="angle:?originX:?originY" v=":0.0:0.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<meta><m n=":value"><e>{ originY : 0.0, originX : 0.0 }</e></m></meta>
			<haxe_doc>Returns a `DOMMatrix` containing a new matrix being the result of the original matrix being rotated by the given angle, with the rotation centered on the origin given. The original matrix is not modified.</haxe_doc>
		</rotate>
		<rotateFromVector public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<haxe_doc>Returns a `DOMMatrix` containing a new matrix being the result of the original matrix being rotated by the angle between the given vector and (1,0), centered on the origin given. The original matrix is not modified.</haxe_doc>
		</rotateFromVector>
		<rotateAxisAngle public="1" set="method">
			<f a="x:y:z:angle">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<haxe_doc>Returns a `DOMMatrix` containing a new matrix being the result of the original matrix being rotated by the given angle and the give vector. The original matrix is not modified.</haxe_doc>
		</rotateAxisAngle>
		<skewX public="1" set="method">
			<f a="sx">
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<haxe_doc>Returns a `DOMMatrix` containing a new matrix being the result of the original matrix being skewed along the x-axis by the given factor. The original matrix is not modified.</haxe_doc>
		</skewX>
		<skewY public="1" set="method">
			<f a="sy">
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<haxe_doc>Returns a `DOMMatrix` containing a new matrix being the result of the original matrix being skewed along the y-axis by the given factor. The original matrix is not modified.</haxe_doc>
		</skewY>
		<multiply public="1" set="method">
			<f a="other">
				<c path="js.html.DOMMatrix"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<haxe_doc>Returns a `DOMMatrix` containing a new matrix being the result of the original matrix being multiplied by the given `DOMMatrix`. The original matrix is not modified.</haxe_doc>
		</multiply>
		<flipX public="1" set="method">
			<f a=""><c path="js.html.DOMMatrix"/></f>
			<haxe_doc>Returns a `DOMMatrix` containing a new matrix being the result of the original matrix being flipped around the x-axis, that is multiplied by the `DOMMatrix(-1, 0, 0, 1, 0, 0)`. The original matrix is not modified.</haxe_doc>
		</flipX>
		<flipY public="1" set="method">
			<f a=""><c path="js.html.DOMMatrix"/></f>
			<haxe_doc>Returns a `DOMMatrix` containing a new matrix being the result of the original matrix being flipped around the y-axis, that is multiplied by the `DOMMatrix(1, 0, 0, -1, 0, 0)`. The original matrix is not modified.</haxe_doc>
		</flipY>
		<inverse public="1" set="method"><f a=""><c path="js.html.DOMMatrix"/></f></inverse>
		<transformPoint public="1" set="method">
			<f a="?point">
				<t path="js.html.DOMPointInit"/>
				<c path="js.html.DOMPoint"/>
			</f>
			<haxe_doc>Returns a `DOMPoint` that is the point given in parameter multiplied by the matrix. Bot the original point and the matrix aren't modified.</haxe_doc>
		</transformPoint>
		<toFloat32Array public="1" set="method">
			<f a=""><c path="js.html.Float32Array"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</toFloat32Array>
		<toFloat64Array public="1" set="method">
			<f a=""><c path="js.html.Float64Array"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</toFloat64Array>
		<haxe_doc><![CDATA[The `DOMMatrixReadOnly` interface represents 4x4 matrices, suitable for 2D and 3D operations. If this interface defines only read-only matrices, the `DOMMatrix` interface which inherits from it, add all the properties and the methods to allow to have modifiable matrices.

	Documentation [DOMMatrixReadOnly](https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMMatrixReadOnly"</e></m></meta>
	</class>
	<class path="js.html.DOMMatrix" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DOMMatrix.hx" extern="1">
		<extends path="js.html.DOMMatrixReadOnly"/>
		<multiplySelf public="1" set="method"><f a="other">
	<c path="js.html.DOMMatrix"/>
	<c path="js.html.DOMMatrix"/>
</f></multiplySelf>
		<preMultiplySelf public="1" set="method"><f a="other">
	<c path="js.html.DOMMatrix"/>
	<c path="js.html.DOMMatrix"/>
</f></preMultiplySelf>
		<translateSelf public="1" set="method">
			<f a="tx:ty:?tz" v="::0.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<meta><m n=":value"><e>{ tz : 0.0 }</e></m></meta>
			<haxe_doc>Returns itself, a `DOMMatrix`, with its new content being the result of the matrix being translated by the given vector.</haxe_doc>
		</translateSelf>
		<scaleSelf public="1" set="method">
			<f a="scale:?originX:?originY" v=":0.0:0.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<meta><m n=":value"><e>{ originY : 0.0, originX : 0.0 }</e></m></meta>
			<haxe_doc>Returns itself, a `DOMMatrix`, with its new content being the result of the matrix x and y dimensions being scaled by the given factor, centered on the origin given.</haxe_doc>
		</scaleSelf>
		<scale3dSelf public="1" set="method">
			<f a="scale:?originX:?originY:?originZ" v=":0.0:0.0:0.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<meta><m n=":value"><e>{ originZ : 0.0, originY : 0.0, originX : 0.0 }</e></m></meta>
			<haxe_doc>Returns itself, a `DOMMatrix`, with its new content being the result of the matrix x, y and z dimension being scaled by the given factor, centered on the origin given.</haxe_doc>
		</scale3dSelf>
		<scaleNonUniformSelf public="1" set="method">
			<f a="scaleX:?scaleY:?scaleZ:?originX:?originY:?originZ" v=":1.0:1.0:0.0:0.0:0.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<meta><m n=":value"><e>{ originZ : 0.0, originY : 0.0, originX : 0.0, scaleZ : 1.0, scaleY : 1.0 }</e></m></meta>
			<haxe_doc>Returns itself, a `DOMMatrix`, with its new content being the result of the matrix x, y and z dimension being scaled by the given factor for each dimension, centered on the origin given.</haxe_doc>
		</scaleNonUniformSelf>
		<rotateSelf public="1" set="method">
			<f a="angle:?originX:?originY" v=":0.0:0.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<meta><m n=":value"><e>{ originY : 0.0, originX : 0.0 }</e></m></meta>
			<haxe_doc>Returns itself, a `DOMMatrix`, with its new content being the result of the original matrix being rotated by the given angle, with the rotation centered on the origin given.</haxe_doc>
		</rotateSelf>
		<rotateFromVectorSelf public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<haxe_doc>Returns itself, a `DOMMatrix`, with its new content being the result of the original matrix being rotated by the angle between the given vector and (1,0), centered on the origin given.</haxe_doc>
		</rotateFromVectorSelf>
		<rotateAxisAngleSelf public="1" set="method">
			<f a="x:y:z:angle">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<haxe_doc>Returns itself, a `DOMMatrix`, with its new content being the result of the original matrix being rotated by the given angle and the give vector.</haxe_doc>
		</rotateAxisAngleSelf>
		<skewXSelf public="1" set="method">
			<f a="sx">
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<haxe_doc>Returns itself, a `DOMMatrix`, with its new content being the result of the original matrix being skewed along the x-axis by the given factor.</haxe_doc>
		</skewXSelf>
		<skewYSelf public="1" set="method">
			<f a="sy">
				<x path="Float"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<haxe_doc>Returns itself, a `DOMMatrix`, with its new content being the result of the original matrix being skewed along the y-axis by the given factor.</haxe_doc>
		</skewYSelf>
		<invertSelf public="1" set="method">
			<f a=""><c path="js.html.DOMMatrix"/></f>
			<haxe_doc>Returns itself,  a `DOMMatrix`, with its new content being the result of the original matrix being inverted. If the matrix cannot be inverted, all its components are set to `NaN` and `is2D()` returns `false`.</haxe_doc>
		</invertSelf>
		<setMatrixValue public="1" set="method">
			<f a="transformList">
				<c path="String"/>
				<c path="js.html.DOMMatrix"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setMatrixValue>
		<new public="1" set="method">
			<f a="numberSequence">
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="transformList">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="other">
						<c path="js.html.DOMMatrixReadOnly"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array32">
						<c path="js.html.Float32Array"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array64">
						<c path="js.html.Float64Array"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `DOMMatrix` interface represents 4x4 matrices, suitable for 2D and 3D operations.

	Documentation [DOMMatrix](https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMMatrix"</e></m></meta>
	</class>
	<class path="js.html.DOMParser" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DOMParser.hx" extern="1">
		<parseFromString public="1" set="method">
			<f a="str:type">
				<c path="String"/>
				<x path="js.html.SupportedType"/>
				<c path="js.html.HTMLDocument"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</parseFromString>
		<new public="1" set="method">
			<f a="prin:?documentURI:?baseURI">
				<d/>
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[`DOMParser` can parse XML or HTML source stored in a string into a DOM Document. `DOMParser` is specified in DOM Parsing and Serialization.

	Documentation [DOMParser](https://developer.mozilla.org/en-US/docs/Web/API/DOMParser) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMParser$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMParser>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMParser"</e></m></meta>
	</class>
	<class path="js.html.DOMPointReadOnly" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DOMPointReadOnly.hx" extern="1">
		<x public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The x coordinate of the `DOMPoint`.</haxe_doc>
		</x>
		<y public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The y coordinate of the `DOMPoint`.</haxe_doc>
		</y>
		<z public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The z coordinate of the `DOMPoint`.</haxe_doc>
		</z>
		<w public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The perspective value of the `DOMPoint`.</haxe_doc>
		</w>
		<haxe_doc><![CDATA[The `DOMPointReadOnly` interface specifies the standard properties used by `DOMPoint` to define a 2D or 3D point in a coordinate system.

	Documentation [DOMPointReadOnly](https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMPointReadOnly"</e></m></meta>
	</class>
	<class path="js.html.DOMPoint" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DOMPoint.hx" extern="1">
		<extends path="js.html.DOMPointReadOnly"/>
		<new public="1" set="method">
			<f a="x:y:?z:?w" v="::0.0:1.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ w : 1.0, z : 0.0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="?point">
		<t path="js.html.DOMPointInit"/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[A `DOMPoint` represents a 2D or 3D point in a coordinate system.

	Documentation [DOMPoint](https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMPoint"</e></m></meta>
	</class>
	<typedef path="js.html.DOMPointInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DOMPointInit.hx"><a>
	<z>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</z>
	<y>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</y>
	<x>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</x>
	<w>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</w>
</a></typedef>
	<class path="js.html.DOMQuad" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DOMQuad.hx" extern="1">
		<p1 public="1" set="null"><c path="js.html.DOMPoint"/></p1>
		<p2 public="1" set="null"><c path="js.html.DOMPoint"/></p2>
		<p3 public="1" set="null"><c path="js.html.DOMPoint"/></p3>
		<p4 public="1" set="null"><c path="js.html.DOMPoint"/></p4>
		<bounds public="1" set="null"><c path="js.html.DOMRectReadOnly"/></bounds>
		<new public="1" set="method">
			<f a="rect">
				<c path="js.html.DOMRectReadOnly"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="?p1:?p2:?p3:?p4">
		<t path="js.html.DOMPointInit"/>
		<t path="js.html.DOMPointInit"/>
		<t path="js.html.DOMPointInit"/>
		<t path="js.html.DOMPointInit"/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<meta><m n=":native"><e>"DOMQuad"</e></m></meta>
	</class>
	<class path="js.html.DOMRectReadOnly" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DOMRectReadOnly.hx" extern="1">
		<x public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The x coordinate of the `DOMRect`'s origin.</haxe_doc>
		</x>
		<y public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The y coordinate of the `DOMRect`'s origin.</haxe_doc>
		</y>
		<width public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The width of the `DOMRect`.</haxe_doc>
		</width>
		<height public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The height of the `DOMRect`.</haxe_doc>
		</height>
		<top public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the top coordinate value of the `DOMRect` (usually the same as `y`.)</haxe_doc>
		</top>
		<right public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the right coordinate value of the `DOMRect` (usually the same as `x + width`).</haxe_doc>
		</right>
		<bottom public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the bottom coordinate value of the `DOMRect` (usually the same as y + height).</haxe_doc>
		</bottom>
		<left public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the left coordinate value of the `DOMRect` (usually the same as `x`).</haxe_doc>
		</left>
		<haxe_doc><![CDATA[The `DOMRectReadOnly` interface specifies the standard properties used by `DOMRect` to define a rectangle.

	Documentation [DOMRectReadOnly](https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMRectReadOnly"</e></m></meta>
	</class>
	<class path="js.html.DOMRect" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DOMRect.hx" extern="1">
		<extends path="js.html.DOMRectReadOnly"/>
		<new public="1" set="method">
			<f a="x:y:width:height">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[A `DOMRect` represents a rectangle.

	Documentation [DOMRect](https://developer.mozilla.org/en-US/docs/Web/API/DOMRect) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMRect$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMRect>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMRect"</e></m></meta>
	</class>
	<class path="js.html.DOMRectList" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DOMRectList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.DOMRect"/>
</f></item>
		<meta><m n=":native"><e>"DOMRectList"</e></m></meta>
	</class>
	<class path="js.html.DOMRequest" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DOMRequest.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<readyState public="1" set="null"><x path="js.html.DOMRequestReadyState"/></readyState>
		<result public="1" set="null"><d/></result>
		<error public="1" set="null"><c path="js.html.DOMError"/></error>
		<onsuccess public="1"><x path="haxe.Function"/></onsuccess>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<then public="1" set="method">
			<f a="?fulfillCallback:?rejectCallback">
				<x path="haxe.Function"/>
				<x path="haxe.Function"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</then>
		<meta><m n=":native"><e>"DOMRequest"</e></m></meta>
	</class>
	<abstract path="js.html.DOMRequestReadyState" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DOMRequestReadyState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._DOMRequestReadyState.DOMRequestReadyState_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DOMRequestReadyState.hx" private="1" module="js.html.DOMRequestReadyState" extern="1">
	<PENDING public="1" get="inline" set="null" expr="cast &quot;pending&quot;" line="29" static="1">
		<x path="js.html.DOMRequestReadyState"/>
		<meta>
			<m n=":value"><e>cast "pending"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PENDING>
	<DONE public="1" get="inline" set="null" expr="cast &quot;done&quot;" line="30" static="1">
		<x path="js.html.DOMRequestReadyState"/>
		<meta>
			<m n=":value"><e>cast "done"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DONE>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._DOMRequestReadyState.DOMRequestReadyState_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DOMRequestReadyState.hx" private="1" module="js.html.DOMRequestReadyState" extern="1">
		<PENDING public="1" get="inline" set="null" expr="cast &quot;pending&quot;" line="29" static="1">
			<x path="js.html.DOMRequestReadyState"/>
			<meta>
				<m n=":value"><e>cast "pending"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PENDING>
		<DONE public="1" get="inline" set="null" expr="cast &quot;done&quot;" line="30" static="1">
			<x path="js.html.DOMRequestReadyState"/>
			<meta>
				<m n=":value"><e>cast "done"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DONE>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.DOMStringList" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DOMStringList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the length of the list,</haxe_doc>
		</length>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a `DOMString`.</haxe_doc>
		</item>
		<contains public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `Boolean` indicating if the given string is in the list</haxe_doc>
		</contains>
		<haxe_doc><![CDATA[A type returned by some APIs which contains a list of DOMString (strings).

	Documentation [DOMStringList](https://developer.mozilla.org/en-US/docs/Web/API/DOMStringList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMStringList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMStringList>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMStringList"</e></m></meta>
	</class>
	<class path="js.html.DOMStringMap" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DOMStringMap.hx" extern="1">
		<haxe_doc><![CDATA[Used by the `dataset` HTML attribute to represent data for custom attributes added to elements.

	Documentation [DOMStringMap](https://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMStringMap"</e></m></meta>
		<haxe_dynamic><c path="String"/></haxe_dynamic>
	</class>
	<class path="js.html.DOMTokenList" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DOMTokenList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `integer` representing the number of objects stored in the object.</haxe_doc>
		</length>
		<value public="1"><c path="String"/></value>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns an item in the list by its index (or undefined if the number is greater than or equal to the length of the list, prior to `7.0` returned null)</haxe_doc>
		</item>
		<contains public="1" set="method">
			<f a="token">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</contains>
		<add public="1" set="method">
			<f a="tokens">
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</add>
		<remove public="1" set="method">
			<f a="tokens">
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</remove>
		<toggle public="1" set="method">
			<f a="token:?force">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</toggle>
		<haxe_doc><![CDATA[The `DOMTokenList` interface represents a set of space-separated tokens. Such a set is returned by `Element.classList`, `HTMLLinkElement.relList`, `HTMLAnchorElement.relList` or `HTMLAreaElement.relList`. It is indexed beginning with `0` as with JavaScript `Array` objects. `DOMTokenList` is always case-sensitive.

	Documentation [DOMTokenList](https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList>]]></haxe_doc>
		<meta><m n=":native"><e>"DOMTokenList"</e></m></meta>
	</class>
	<class path="js.html.DOMTransaction" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DOMTransaction.hx" extern="1">
		<label public="1" set="null"><c path="String"/></label>
		<executeAutomatic public="1" set="null"><f a=""><x path="Void"/></f></executeAutomatic>
		<execute public="1" set="null"><f a=""><x path="Void"/></f></execute>
		<undo public="1" set="null"><f a=""><x path="Void"/></f></undo>
		<redo public="1" set="null"><f a=""><x path="Void"/></f></redo>
		<meta><m n=":native"><e>"DOMTransaction"</e></m></meta>
	</class>
	<class path="js.html.DOMTransactionEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DOMTransactionEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<transactions public="1" set="null"><d/></transactions>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<t path="js.html.DOMTransactionEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"DOMTransactionEvent"</e></m></meta>
	</class>
	<typedef path="js.html.DOMTransactionEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DOMTransactionEventInit.hx"><a>
	<transactions>
		<t path="Null"><d/></t>
		<meta><m n=":optional"/></meta>
	</transactions>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.DataElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DataElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<value public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `value` HTML attribute, containing a machine-readable form of the element's value.</haxe_doc>
		</value>
		<haxe_doc><![CDATA[The `HTMLDataElement` interface provides special properties (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating `data` elements.

	Documentation [HTMLDataElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDataElement"</e></m></meta>
	</class>
	<class path="js.html.DataListElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DataListElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<options public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Is a `HTMLCollection` representing a collection of the contained option elements.</haxe_doc>
		</options>
		<haxe_doc><![CDATA[The `HTMLDataListElement` interface provides special properties (beyond the `HTMLElement` object interface it also has available to it by inheritance) to manipulate `datalist` elements and their content.

	Documentation [HTMLDataListElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataListElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataListElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataListElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDataListElement"</e></m></meta>
	</class>
	<class path="js.html.DataTransfer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DataTransfer.hx" extern="1">
		<dropEffect public="1">
			<c path="String"/>
			<haxe_doc>Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be `none`, `copy`, `link` or `move`.</haxe_doc>
		</dropEffect>
		<effectAllowed public="1">
			<c path="String"/>
			<haxe_doc>Provides all of the types of operations that are possible. Must be one of `none`, `copy`, `copyLink`, `copyMove`, `link`, `linkMove`, `move`, `all` or `uninitialized`.</haxe_doc>
		</effectAllowed>
		<types public="1" set="null">
			<c path="js.html.DOMStringList"/>
			<haxe_doc>An array of `DOMString` giving the formats that were set in the `dragstart` event.</haxe_doc>
		</types>
		<files public="1" set="null">
			<c path="js.html.FileList"/>
			<haxe_doc>Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.</haxe_doc>
		</files>
		<setDragImage public="1" set="method">
			<f a="image:x:y">
				<c path="js.html.Element"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setDragImage>
		<getData public="1" set="method">
			<f a="format">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getData>
		<setData public="1" set="method">
			<f a="format:data">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setData>
		<clearData public="1" set="method">
			<f a="?format">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</clearData>
		<addElement public="1" set="method">
			<f a="element">
				<c path="js.html.Element"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</addElement>
		<new public="1" set="method">
			<f a="eventType:isExternal">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DataTransfer` object is used to hold the data that is being dragged during a drag and drop operation. It may hold one or more data items, each of one or more data types. For more information about drag and drop, see HTML Drag and Drop API.

	Documentation [DataTransfer](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer>]]></haxe_doc>
		<meta><m n=":native"><e>"DataTransfer"</e></m></meta>
	</class>
	<class path="js.html.DataView" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DataView.hx" extern="1">
		<extends path="js.html.ArrayBufferView"/>
		<getInt8 public="1" set="method"><f a="byteOffset">
	<x path="Int"/>
	<x path="Int"/>
</f></getInt8>
		<getUint8 public="1" set="method"><f a="byteOffset">
	<x path="Int"/>
	<x path="Int"/>
</f></getUint8>
		<getInt16 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getInt16>
		<getUint16 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getUint16>
		<getInt32 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getInt32>
		<getUint32 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getUint32>
		<getFloat32 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></getFloat32>
		<getFloat64 public="1" set="method"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></getFloat64>
		<setInt8 public="1" set="method"><f a="byteOffset:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setInt8>
		<setUint8 public="1" set="method"><f a="byteOffset:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setUint8>
		<setInt16 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setInt16>
		<setUint16 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setUint16>
		<setInt32 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setInt32>
		<setUint32 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setUint32>
		<setFloat32 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setFloat32>
		<setFloat64 public="1" set="method"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setFloat64>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?byteLength">
				<c path="js.html.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"DataView"</e></m></meta>
	</class>
	<class path="js.html.WorkerGlobalScope" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/WorkerGlobalScope.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<self public="1" set="null">
			<c path="js.html.WorkerGlobalScope"/>
			<haxe_doc>Returns a reference to the `WorkerGlobalScope` itself. Most of the time it is a specific scope like `DedicatedWorkerGlobalScope`,  `SharedWorkerGlobalScope` or `ServiceWorkerGlobalScope`.</haxe_doc>
		</self>
		<console public="1" set="null">
			<c path="js.html.Console"/>
			<haxe_doc>Returns the `Console` associated with the worker.</haxe_doc>
		</console>
		<location public="1" set="null">
			<c path="js.html.WorkerLocation"/>
			<haxe_doc>Returns the `WorkerLocation` associated with the worker. It is a specific location object, mostly a subset of the `Location` for browsing scopes, but adapted to workers.</haxe_doc>
		</location>
		<onerror public="1">
			<f a="::::">
				<x path="haxe.extern.EitherType">
					<c path="js.html.Event"/>
					<c path="String"/>
				</x>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `error` event is raised.</haxe_doc>
		</onerror>
		<onoffline public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `offline` event is raised.</haxe_doc>
		</onoffline>
		<ononline public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `online` event is raised.</haxe_doc>
		</ononline>
		<navigator public="1" set="null">
			<c path="js.html.WorkerNavigator"/>
			<haxe_doc>Returns the `WorkerNavigator` associated with the worker. It is a specific navigator object, mostly a subset of the `Navigator` for browsing scopes, but adapted to workers.</haxe_doc>
		</navigator>
		<onclose public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `close` event is raised.</haxe_doc>
		</onclose>
		<performance public="1" set="null">
			<c path="js.html.Performance"/>
			<haxe_doc>Returns the `Performance` associated with the worker. It is a regular performance object, except that only a subset of its property and methods are available to workers.</haxe_doc>
		</performance>
		<indexedDB public="1" set="null"><c path="js.html.idb.Factory"/></indexedDB>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</close>
		<importScripts public="1" set="method">
			<f a="urls">
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</importScripts>
		<dump public="1" set="method">
			<f a="?str">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allows you to write a message to stdout — i.e. in your terminal. This is the same as Firefox's `window.dump`, but for workers.</haxe_doc>
		</dump>
		<fetch public="1" set="method">
			<f a="input:?init">
				<x path="haxe.extern.EitherType">
					<c path="js.html.Request"/>
					<c path="String"/>
				</x>
				<t path="js.html.RequestInit"/>
				<c path="js.Promise"><c path="js.html.Response"/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</fetch>
		<createImageBitmap public="1" set="method">
			<f a="aImage:aSx:aSy:aSw:aSh">
				<x path="haxe.extern.EitherType">
					<c path="js.html.ImageElement"/>
					<x path="haxe.extern.EitherType">
						<c path="js.html.VideoElement"/>
						<x path="haxe.extern.EitherType">
							<c path="js.html.CanvasElement"/>
							<x path="haxe.extern.EitherType">
								<c path="js.html.Blob"/>
								<x path="haxe.extern.EitherType">
									<c path="js.html.ImageData"/>
									<x path="haxe.extern.EitherType">
										<c path="js.html.CanvasRenderingContext2D"/>
										<c path="js.html.ImageBitmap"/>
									</x>
								</x>
							</x>
						</x>
					</x>
				</x>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.Promise"><c path="js.html.ImageBitmap"/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><createImageBitmap public="1" set="method">
	<f a="aImage">
		<x path="haxe.extern.EitherType">
			<c path="js.html.ImageElement"/>
			<x path="haxe.extern.EitherType">
				<c path="js.html.VideoElement"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.CanvasElement"/>
					<x path="haxe.extern.EitherType">
						<c path="js.html.Blob"/>
						<x path="haxe.extern.EitherType">
							<c path="js.html.ImageData"/>
							<x path="haxe.extern.EitherType">
								<c path="js.html.CanvasRenderingContext2D"/>
								<c path="js.html.ImageBitmap"/>
							</x>
						</x>
					</x>
				</x>
			</x>
		</x>
		<c path="js.Promise"><c path="js.html.ImageBitmap"/></c>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</createImageBitmap></overloads>
		</createImageBitmap>
		<btoa public="1" set="method">
			<f a="btoa">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</btoa>
		<atob public="1" set="method">
			<f a="atob">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</atob>
		<setTimeout public="1" set="method">
			<f a="handler:?timeout:unused" v=":0:">
				<c path="String"/>
				<x path="Int"/>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setTimeout public="1" set="method">
	<f a="handler:?timeout:arguments" v=":0:">
		<x path="haxe.Function"/>
		<x path="Int"/>
		<x path="haxe.extern.Rest"><d/></x>
		<x path="Int"/>
	</f>
	<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
	<haxe_doc>@throws DOMError</haxe_doc>
</setTimeout></overloads>
		</setTimeout>
		<clearTimeout public="1" set="method">
			<f a="?handle" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ handle : 0 }</e></m></meta>
		</clearTimeout>
		<setInterval public="1" set="method">
			<f a="handler:?timeout:unused">
				<c path="String"/>
				<x path="Int"/>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Int"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setInterval public="1" set="method">
	<f a="handler:?timeout:arguments">
		<x path="haxe.Function"/>
		<x path="Int"/>
		<x path="haxe.extern.Rest"><d/></x>
		<x path="Int"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</setInterval></overloads>
		</setInterval>
		<clearInterval public="1" set="method">
			<f a="?handle" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ handle : 0 }</e></m></meta>
		</clearInterval>
		<haxe_doc><![CDATA[The `WorkerGlobalScope` interface of the Web Workers API is an interface representing the scope of any worker. Workers have no browsing context; this scope contains the information usually conveyed by `Window` objects — in this case event handlers, the console or the associated `WorkerNavigator` object. Each `WorkerGlobalScope` has its own event loop.

	Documentation [WorkerGlobalScope](https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope>]]></haxe_doc>
		<meta><m n=":native"><e>"WorkerGlobalScope"</e></m></meta>
	</class>
	<class path="js.html.DedicatedWorkerGlobalScope" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DedicatedWorkerGlobalScope.hx" extern="1">
		<extends path="js.html.WorkerGlobalScope"/>
		<onmessage public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `message` event is raised. These events are of type `MessageEvent` and will be called when the worker receives a message from the document that started it (i.e. from the `Worker.postMessage` method.)</haxe_doc>
		</onmessage>
		<postMessage public="1" set="method">
			<f a="message:?transfer">
				<d/>
				<c path="Array"><d/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</postMessage>
		<haxe_doc><![CDATA[The `DedicatedWorkerGlobalScope` object (the `Worker` global scope) is accessible through the `self` keyword. Some additional global functions, namespaces objects, and constructors, not typically associated with the worker global scope, but available on it, are listed in the JavaScript Reference. See also: Functions available to workers.

	Documentation [DedicatedWorkerGlobalScope](https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope>]]></haxe_doc>
		<meta><m n=":native"><e>"DedicatedWorkerGlobalScope"</e></m></meta>
	</class>
	<class path="js.html.DesktopNotification" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DesktopNotification.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<onclick public="1"><x path="haxe.Function"/></onclick>
		<onclose public="1"><x path="haxe.Function"/></onclose>
		<show public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</show>
		<meta><m n=":native"><e>"DesktopNotification"</e></m></meta>
	</class>
	<class path="js.html.DesktopNotificationCenter" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DesktopNotificationCenter.hx" extern="1">
		<createNotification public="1" set="method">
			<f a="title:description:?iconURL" v="::&quot;&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.DesktopNotification"/>
			</f>
			<meta><m n=":value"><e>{ iconURL : "" }</e></m></meta>
		</createNotification>
		<meta><m n=":native"><e>"DesktopNotificationCenter"</e></m></meta>
	</class>
	<class path="js.html.DeviceAcceleration" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DeviceAcceleration.hx" extern="1">
		<x public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The amount of acceleration along the X axis. Read only.</haxe_doc>
		</x>
		<y public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The amount of acceleration along the Y axis. Read only.</haxe_doc>
		</y>
		<z public="1" set="null">
			<x path="Float"/>
			<haxe_doc>The amount of acceleration along the Z axis. Read only.</haxe_doc>
		</z>
		<haxe_doc><![CDATA[A `DeviceAcceleration` object provides information about the amount of acceleration the device is experiencing along all three axes.

	Documentation [DeviceAcceleration](https://developer.mozilla.org/en-US/docs/Web/API/DeviceAcceleration) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DeviceAcceleration$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DeviceAcceleration>]]></haxe_doc>
		<meta><m n=":native"><e>"DeviceAcceleration"</e></m></meta>
	</class>
	<typedef path="js.html.DeviceAccelerationInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DeviceAccelerationInit.hx"><a>
	<z>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</z>
	<y>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</y>
	<x>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</x>
</a></typedef>
	<class path="js.html.DeviceMotionEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DeviceMotionEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<acceleration public="1" set="null">
			<c path="js.html.DeviceAcceleration"/>
			<haxe_doc>An object giving the acceleration of the device on the three axis X, Y and Z. Acceleration is expressed in m/s2.</haxe_doc>
		</acceleration>
		<accelerationIncludingGravity public="1" set="null">
			<c path="js.html.DeviceAcceleration"/>
			<haxe_doc>An object giving the acceleration of the device on the three axis X, Y and Z with the effect of gravity. Acceleration is expressed in m/s2.</haxe_doc>
		</accelerationIncludingGravity>
		<rotationRate public="1" set="null">
			<c path="js.html.DeviceRotationRate"/>
			<haxe_doc>An object giving the rate of change of the device's orientation on the three orientation axis alpha, beta and gamma. Rotation rate is express in degrees per seconds.</haxe_doc>
		</rotationRate>
		<interval public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A number representing the interval of time, in milliseconds, at which data is obtained from the device.</haxe_doc>
		</interval>
		<initDeviceMotionEvent public="1" set="method"><f a="type:canBubble:cancelable:acceleration:accelerationIncludingGravity:rotationRate:interval">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<t path="js.html.DeviceAccelerationInit"/>
	<t path="js.html.DeviceAccelerationInit"/>
	<t path="js.html.DeviceRotationRateInit"/>
	<x path="Float"/>
	<x path="Void"/>
</f></initDeviceMotionEvent>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<t path="js.html.DeviceMotionEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DeviceMotionEvent` provides web developers with information about the speed of changes for the device's position and orientation.

	Documentation [DeviceMotionEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"DeviceMotionEvent"</e></m></meta>
	</class>
	<typedef path="js.html.DeviceMotionEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DeviceMotionEventInit.hx"><a>
	<rotationRate>
		<t path="Null"><t path="js.html.DeviceRotationRateInit"/></t>
		<meta><m n=":optional"/></meta>
	</rotationRate>
	<interval>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</interval>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
	<accelerationIncludingGravity>
		<t path="Null"><t path="js.html.DeviceAccelerationInit"/></t>
		<meta><m n=":optional"/></meta>
	</accelerationIncludingGravity>
	<acceleration>
		<t path="Null"><t path="js.html.DeviceAccelerationInit"/></t>
		<meta><m n=":optional"/></meta>
	</acceleration>
</a></typedef>
	<class path="js.html.DeviceOrientationEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DeviceOrientationEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<alpha public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A number representing the motion of the device around the z axis, express in degrees with values ranging from 0 to 360</haxe_doc>
		</alpha>
		<beta public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A number representing the motion of the device around the x axis, express in degrees with values ranging from -180 to 180. This represents a front to back motion of the device.</haxe_doc>
		</beta>
		<gamma public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A number representing the motion of the device around the y axis, express in degrees with values ranging from -90 to 90. This represents a left to right motion of the device.</haxe_doc>
		</gamma>
		<absolute public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A boolean that indicates whether or not the device is providing orientation data absolutely.</haxe_doc>
		</absolute>
		<initDeviceOrientationEvent public="1" set="method"><f a="type:canBubble:cancelable:alpha:beta:gamma:absolute">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></initDeviceOrientationEvent>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<t path="js.html.DeviceOrientationEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DeviceOrientationEvent` provides web developers with information from the physical orientation of the device running the web page.

	Documentation [DeviceOrientationEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"DeviceOrientationEvent"</e></m></meta>
	</class>
	<typedef path="js.html.DeviceOrientationEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DeviceOrientationEventInit.hx"><a>
	<gamma>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</gamma>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
	<beta>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</beta>
	<alpha>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</alpha>
	<absolute>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</absolute>
</a></typedef>
	<class path="js.html.DeviceRotationRate" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DeviceRotationRate.hx" extern="1">
		<alpha public="1" set="null"><x path="Float"/></alpha>
		<beta public="1" set="null"><x path="Float"/></beta>
		<gamma public="1" set="null"><x path="Float"/></gamma>
		<haxe_doc><![CDATA[A `DeviceRotationRate` object provides information about the rate at which the device is rotating around all three axes.

	Documentation [DeviceRotationRate](https://developer.mozilla.org/en-US/docs/Web/API/DeviceRotationRate) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DeviceRotationRate$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DeviceRotationRate>]]></haxe_doc>
		<meta><m n=":native"><e>"DeviceRotationRate"</e></m></meta>
	</class>
	<typedef path="js.html.DeviceRotationRateInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DeviceRotationRateInit.hx"><a>
	<gamma>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</gamma>
	<beta>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</beta>
	<alpha>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</alpha>
</a></typedef>
	<abstract path="js.html.DirectionSetting" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DirectionSetting.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._DirectionSetting.DirectionSetting_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DirectionSetting.hx" private="1" module="js.html.DirectionSetting" extern="1">
	<NONE public="1" get="inline" set="null" expr="cast &quot;&quot;" line="29" static="1">
		<x path="js.html.DirectionSetting"/>
		<meta>
			<m n=":value"><e>cast ""</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NONE>
	<RL public="1" get="inline" set="null" expr="cast &quot;rl&quot;" line="30" static="1">
		<x path="js.html.DirectionSetting"/>
		<meta>
			<m n=":value"><e>cast "rl"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RL>
	<LR public="1" get="inline" set="null" expr="cast &quot;lr&quot;" line="31" static="1">
		<x path="js.html.DirectionSetting"/>
		<meta>
			<m n=":value"><e>cast "lr"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LR>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._DirectionSetting.DirectionSetting_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DirectionSetting.hx" private="1" module="js.html.DirectionSetting" extern="1">
		<NONE public="1" get="inline" set="null" expr="cast &quot;&quot;" line="29" static="1">
			<x path="js.html.DirectionSetting"/>
			<meta>
				<m n=":value"><e>cast ""</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NONE>
		<RL public="1" get="inline" set="null" expr="cast &quot;rl&quot;" line="30" static="1">
			<x path="js.html.DirectionSetting"/>
			<meta>
				<m n=":value"><e>cast "rl"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RL>
		<LR public="1" get="inline" set="null" expr="cast &quot;lr&quot;" line="31" static="1">
			<x path="js.html.DirectionSetting"/>
			<meta>
				<m n=":value"><e>cast "lr"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LR>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.Directory" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Directory.hx" extern="1">
		<name public="1" set="null"><c path="String"/></name>
		<path public="1" set="null"><c path="String"/></path>
		<getFilesAndDirectories public="1" set="method"><f a=""><c path="js.Promise"><c path="Array"><x path="haxe.extern.EitherType">
	<c path="js.html.File"/>
	<c path="js.html.Directory"/>
</x></c></c></f></getFilesAndDirectories>
		<meta><m n=":native"><e>"Directory"</e></m></meta>
	</class>
	<class path="js.html.DirectoryElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DirectoryElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<compact public="1"><x path="Bool"/></compact>
		<meta><m n=":native"><e>"HTMLDirectoryElement"</e></m></meta>
	</class>
	<class path="js.html.DivElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DivElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, `"justify"`, and `"center"`.</haxe_doc>
		</align>
		<haxe_doc><![CDATA[The `HTMLDivElement` interface provides special properties (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating div elements.

	Documentation [HTMLDivElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDivElement"</e></m></meta>
	</class>
	<class path="js.html.Document" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Document.hx" extern="1">
		<extends path="js.html.Node"/>
		<implementation public="1" set="null">
			<c path="js.html.DOMImplementation"/>
			<haxe_doc>Returns the DOM implementation associated with the current document.</haxe_doc>
		</implementation>
		<URL public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the document location as a string.</haxe_doc>
		</URL>
		<documentURI public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the document location as a string.</haxe_doc>
		</documentURI>
		<compatMode public="1" set="null">
			<c path="String"/>
			<haxe_doc>Indicates whether the document is rendered in quirks or strict mode.</haxe_doc>
		</compatMode>
		<characterSet public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the character set being used by the document.</haxe_doc>
		</characterSet>
		<charset public="1" set="null">
			<c path="String"/>
			<haxe_doc>Alias of `Document.characterSet`. Use this property instead.</haxe_doc>
		</charset>
		<inputEncoding public="1" set="null">
			<c path="String"/>
			<haxe_doc>Alias of `Document.characterSet`. Use this property instead.</haxe_doc>
		</inputEncoding>
		<contentType public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the Content-Type from the MIME Header of the current document.</haxe_doc>
		</contentType>
		<doctype public="1" set="null">
			<c path="js.html.DocumentType"/>
			<haxe_doc>Returns the Document Type Definition (DTD) of the current document.</haxe_doc>
		</doctype>
		<documentElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Returns the `Element` that is a direct child of the document. For HTML documents, this is normally the `html` element.</haxe_doc>
		</documentElement>
		<location public="1" set="null">
			<c path="js.html.Location"/>
			<haxe_doc>Returns the URI of the current document.</haxe_doc>
		</location>
		<referrer public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the URI of the page that linked to this page.</haxe_doc>
		</referrer>
		<lastModified public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the date on which the document was last modified.</haxe_doc>
		</lastModified>
		<readyState public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns loading status of the document.</haxe_doc>
		</readyState>
		<title public="1">
			<c path="String"/>
			<haxe_doc>Sets or gets title of the current document.</haxe_doc>
		</title>
		<dir public="1">
			<c path="String"/>
			<haxe_doc>Gets/sets directionality (rtl/ltr) of the document.</haxe_doc>
		</dir>
		<defaultView public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a reference to the window object.</haxe_doc>
		</defaultView>
		<activeElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Returns the currently focused element.</haxe_doc>
		</activeElement>
		<onreadystatechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `readystatechange` event.</haxe_doc>
		</onreadystatechange>
		<onwheel public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `wheel` event.</haxe_doc>
		</onwheel>
		<oncopy public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `copy` event.</haxe_doc>
		</oncopy>
		<oncut public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `cut` event.</haxe_doc>
		</oncut>
		<onpaste public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `paste` event.</haxe_doc>
		</onpaste>
		<onbeforescriptexecute public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `beforescriptexecute` event.</haxe_doc>
		</onbeforescriptexecute>
		<onafterscriptexecute public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `afterscriptexecute` event.</haxe_doc>
		</onafterscriptexecute>
		<currentScript public="1" set="null"><c path="js.html.Element"/></currentScript>
		<fullscreenEnabled public="1" set="null"><x path="Bool"/></fullscreenEnabled>
		<fullscreenElement public="1" set="null"><c path="js.html.Element"/></fullscreenElement>
		<pointerLockElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Returns the element set as the target for mouse events while the pointer is locked. `null` if lock is pending, pointer is unlocked, or if the target is in another document.</haxe_doc>
		</pointerLockElement>
		<hidden public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>…</haxe_doc>
		</hidden>
		<visibilityState public="1" set="null">
			<x path="js.html.VisibilityState"/>
			<haxe_doc>Returns a `string` denoting the visibility state of the document. Possible values are `visible`,  `hidden`,  `prerender`, and `unloaded`.</haxe_doc>
		</visibilityState>
		<styleSheets public="1" set="null">
			<c path="js.html.StyleSheetList"/>
			<haxe_doc>Returns a list of the style sheet objects on the current document.</haxe_doc>
		</styleSheets>
		<selectedStyleSheetSet public="1">
			<c path="String"/>
			<haxe_doc>Returns which style sheet set is currently in use.</haxe_doc>
		</selectedStyleSheetSet>
		<lastStyleSheetSet public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the name of the style sheet set that was last enabled. Has the value `null` until the style sheet is changed by setting the value of `document.selectedStyleSheetSet`.</haxe_doc>
		</lastStyleSheetSet>
		<preferredStyleSheetSet public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the preferred style sheet set as specified by the page author.</haxe_doc>
		</preferredStyleSheetSet>
		<styleSheetSets public="1" set="null">
			<c path="js.html.DOMStringList"/>
			<haxe_doc>Returns a list of the style sheet sets available on the document.</haxe_doc>
		</styleSheetSets>
		<timeline public="1" set="null">
			<c path="js.html.DocumentTimeline"/>
			<haxe_doc>…</haxe_doc>
		</timeline>
		<fonts public="1" set="null"><c path="js.html.FontFaceSet"/></fonts>
		<onabort public="1"><x path="haxe.Function"/></onabort>
		<onblur public="1"><x path="haxe.Function"/></onblur>
		<onfocus public="1"><x path="haxe.Function"/></onfocus>
		<oncanplay public="1"><x path="haxe.Function"/></oncanplay>
		<oncanplaythrough public="1"><x path="haxe.Function"/></oncanplaythrough>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onclick public="1"><x path="haxe.Function"/></onclick>
		<oncontextmenu public="1"><x path="haxe.Function"/></oncontextmenu>
		<ondblclick public="1"><x path="haxe.Function"/></ondblclick>
		<ondrag public="1"><x path="haxe.Function"/></ondrag>
		<ondragend public="1"><x path="haxe.Function"/></ondragend>
		<ondragenter public="1"><x path="haxe.Function"/></ondragenter>
		<ondragleave public="1"><x path="haxe.Function"/></ondragleave>
		<ondragover public="1"><x path="haxe.Function"/></ondragover>
		<ondragstart public="1"><x path="haxe.Function"/></ondragstart>
		<ondrop public="1"><x path="haxe.Function"/></ondrop>
		<ondurationchange public="1"><x path="haxe.Function"/></ondurationchange>
		<onemptied public="1"><x path="haxe.Function"/></onemptied>
		<onended public="1"><x path="haxe.Function"/></onended>
		<oninput public="1"><x path="haxe.Function"/></oninput>
		<oninvalid public="1"><x path="haxe.Function"/></oninvalid>
		<onkeydown public="1"><x path="haxe.Function"/></onkeydown>
		<onkeypress public="1"><x path="haxe.Function"/></onkeypress>
		<onkeyup public="1"><x path="haxe.Function"/></onkeyup>
		<onload public="1"><x path="haxe.Function"/></onload>
		<onloadeddata public="1"><x path="haxe.Function"/></onloadeddata>
		<onloadedmetadata public="1"><x path="haxe.Function"/></onloadedmetadata>
		<onloadstart public="1"><x path="haxe.Function"/></onloadstart>
		<onmousedown public="1"><x path="haxe.Function"/></onmousedown>
		<onmouseenter public="1"><x path="haxe.Function"/></onmouseenter>
		<onmouseleave public="1"><x path="haxe.Function"/></onmouseleave>
		<onmousemove public="1"><x path="haxe.Function"/></onmousemove>
		<onmouseout public="1"><x path="haxe.Function"/></onmouseout>
		<onmouseover public="1"><x path="haxe.Function"/></onmouseover>
		<onmouseup public="1"><x path="haxe.Function"/></onmouseup>
		<onpause public="1"><x path="haxe.Function"/></onpause>
		<onplay public="1"><x path="haxe.Function"/></onplay>
		<onplaying public="1"><x path="haxe.Function"/></onplaying>
		<onprogress public="1"><x path="haxe.Function"/></onprogress>
		<onratechange public="1"><x path="haxe.Function"/></onratechange>
		<onreset public="1"><x path="haxe.Function"/></onreset>
		<onresize public="1"><x path="haxe.Function"/></onresize>
		<onscroll public="1"><x path="haxe.Function"/></onscroll>
		<onseeked public="1"><x path="haxe.Function"/></onseeked>
		<onseeking public="1"><x path="haxe.Function"/></onseeking>
		<onselect public="1"><x path="haxe.Function"/></onselect>
		<onshow public="1"><x path="haxe.Function"/></onshow>
		<onstalled public="1"><x path="haxe.Function"/></onstalled>
		<onsubmit public="1"><x path="haxe.Function"/></onsubmit>
		<onsuspend public="1"><x path="haxe.Function"/></onsuspend>
		<ontimeupdate public="1"><x path="haxe.Function"/></ontimeupdate>
		<onvolumechange public="1"><x path="haxe.Function"/></onvolumechange>
		<onwaiting public="1"><x path="haxe.Function"/></onwaiting>
		<onpointercancel public="1"><x path="haxe.Function"/></onpointercancel>
		<onpointerdown public="1"><x path="haxe.Function"/></onpointerdown>
		<onpointerup public="1"><x path="haxe.Function"/></onpointerup>
		<onpointermove public="1"><x path="haxe.Function"/></onpointermove>
		<onpointerout public="1"><x path="haxe.Function"/></onpointerout>
		<onpointerover public="1"><x path="haxe.Function"/></onpointerover>
		<onpointerenter public="1"><x path="haxe.Function"/></onpointerenter>
		<onpointerleave public="1"><x path="haxe.Function"/></onpointerleave>
		<ongotpointercapture public="1"><x path="haxe.Function"/></ongotpointercapture>
		<onlostpointercapture public="1"><x path="haxe.Function"/></onlostpointercapture>
		<onfullscreenchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `fullscreenchange` event is raised.</haxe_doc>
		</onfullscreenchange>
		<onfullscreenerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `fullscreenerror` event is raised.</haxe_doc>
		</onfullscreenerror>
		<onpointerlockchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the event handling code for the `pointerlockchange` event.</haxe_doc>
		</onpointerlockchange>
		<onpointerlockerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represetnts the event handling code for the `pointerlockerror` event.</haxe_doc>
		</onpointerlockerror>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<children public="1" set="null"><c path="js.html.HTMLCollection"/></children>
		<firstElementChild public="1" set="null"><c path="js.html.Element"/></firstElementChild>
		<lastElementChild public="1" set="null"><c path="js.html.Element"/></lastElementChild>
		<childElementCount public="1" set="null"><x path="Int"/></childElementCount>
		<ontouchstart public="1"><x path="haxe.Function"/></ontouchstart>
		<ontouchend public="1"><x path="haxe.Function"/></ontouchend>
		<ontouchmove public="1"><x path="haxe.Function"/></ontouchmove>
		<ontouchcancel public="1"><x path="haxe.Function"/></ontouchcancel>
		<getElementsByTagName public="1" set="method">
			<f a="localName">
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>Returns a list of elements with the given tag name.</haxe_doc>
		</getElementsByTagName>
		<getElementsByTagNameNS public="1" set="method">
			<f a="namespace_:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getElementsByTagNameNS>
		<getElementsByClassName public="1" set="method">
			<f a="classNames">
				<c path="String"/>
				<c path="js.html.HTMLCollection"/>
			</f>
			<haxe_doc>Returns a list of elements with the given class name.</haxe_doc>
		</getElementsByClassName>
		<getElementById public="1" set="method"><f a="elementId">
	<c path="String"/>
	<c path="js.html.Element"/>
</f></getElementById>
		<createElement public="1" set="method">
			<f a="localName:typeExtension">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><createElement public="1" set="method">
	<f a="localName">
		<c path="String"/>
		<c path="js.html.Element"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</createElement></overloads>
		</createElement>
		<createElementNS public="1" set="method">
			<f a="namespace_:qualifiedName:typeExtension">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><createElementNS public="1" set="method">
	<f a="namespace_:qualifiedName">
		<c path="String"/>
		<c path="String"/>
		<c path="js.html.Element"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</createElementNS></overloads>
		</createElementNS>
		<createDocumentFragment public="1" set="method">
			<f a=""><c path="js.html.DocumentFragment"/></f>
			<haxe_doc>Creates a new document fragment.</haxe_doc>
		</createDocumentFragment>
		<createTextNode public="1" set="method">
			<f a="data">
				<c path="String"/>
				<c path="js.html.Text"/>
			</f>
			<haxe_doc>Creates a text node.</haxe_doc>
		</createTextNode>
		<createComment public="1" set="method">
			<f a="data">
				<c path="String"/>
				<c path="js.html.Comment"/>
			</f>
			<haxe_doc>Creates a new comment node and returns it.</haxe_doc>
		</createComment>
		<createProcessingInstruction public="1" set="method">
			<f a="target:data">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.ProcessingInstruction"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createProcessingInstruction>
		<importNode public="1" set="method">
			<f a="node:?deep" v=":false">
				<c path="js.html.Node"/>
				<x path="Bool"/>
				<c path="js.html.Node"/>
			</f>
			<meta><m n=":value"><e>{ deep : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</importNode>
		<adoptNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</adoptNode>
		<createEvent public="1" set="method">
			<f a="interface_">
				<c path="String"/>
				<c path="js.html.Event"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createEvent>
		<createRange public="1" set="method">
			<f a=""><c path="js.html.Range"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createRange>
		<createNodeIterator public="1" set="method">
			<f a="root:?whatToShow:?filter" v=":cast 4294967295:">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<c path="js.html.NodeFilter"/>
				<c path="js.html.NodeIterator"/>
			</f>
			<meta><m n=":value"><e>{ whatToShow : cast 4294967295 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createNodeIterator>
		<createTreeWalker public="1" set="method">
			<f a="root:?whatToShow:?filter" v=":cast 4294967295:">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<c path="js.html.NodeFilter"/>
				<c path="js.html.TreeWalker"/>
			</f>
			<meta><m n=":value"><e>{ whatToShow : cast 4294967295 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createTreeWalker>
		<createCDATASection public="1" set="method">
			<f a="data">
				<c path="String"/>
				<c path="js.html.CDATASection"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createCDATASection>
		<createAttribute public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createAttribute>
		<createAttributeNS public="1" set="method">
			<f a="namespace_:name">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createAttributeNS>
		<hasFocus public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</hasFocus>
		<releaseCapture public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Releases the current mouse capture if it's on an element in this document.</haxe_doc>
		</releaseCapture>
		<exitFullscreen public="1" set="method"><f a=""><x path="Void"/></f></exitFullscreen>
		<exitPointerLock public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Release the pointer lock.</haxe_doc>
		</exitPointerLock>
		<registerElement public="1" set="method">
			<f a="name:?options">
				<c path="String"/>
				<t path="js.html.ElementRegistrationOptions"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</registerElement>
		<enableStyleSheetsForSet public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Enables the style sheets for the specified style sheet set.</haxe_doc>
		</enableStyleSheetsForSet>
		<elementFromPoint public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the topmost element at the specified coordinates. </haxe_doc>
		</elementFromPoint>
		<elementsFromPoint public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><c path="js.html.Element"/></c>
			</f>
			<haxe_doc>Returns an array of all elements at the specified coordinates.</haxe_doc>
		</elementsFromPoint>
		<caretPositionFromPoint public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.CaretPosition"/>
			</f>
			<haxe_doc>Gets the `CaretPosition` at or near the specified coordinates.</haxe_doc>
		</caretPositionFromPoint>
		<querySelector public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</querySelector>
		<querySelectorAll public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.NodeList"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</querySelectorAll>
		<getAnimations public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.Animation"/></c></f>
			<haxe_doc>Returns an array of all `Animation` objects currently in effect whose target elements are descendants of the `document`.</haxe_doc>
		</getAnimations>
		<createTouch public="1" set="method">
			<f a="?view:?target:?identifier:?pageX:?pageY:?screenX:?screenY:?clientX:?clientY:?radiusX:?radiusY:?rotationAngle:?force" v="::0:0:0:0:0:0:0:0:0:0.0:0.0">
				<c path="js.html.Window"/>
				<c path="js.html.EventTarget"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.Touch"/>
			</f>
			<meta><m n=":value"><e>{ force : 0.0, rotationAngle : 0.0, radiusY : 0, radiusX : 0, clientY : 0, clientX : 0, screenY : 0, screenX : 0, pageY : 0, pageX : 0, identifier : 0 }</e></m></meta>
			<haxe_doc>Creates a `Touch` object.</haxe_doc>
		</createTouch>
		<createTouchList public="1" set="method">
			<f a="touches">
				<c path="Array"><c path="js.html.Touch"/></c>
				<c path="js.html.TouchList"/>
			</f>
			<overloads>
				<createTouchList public="1" set="method"><f a="touch:touches">
	<c path="js.html.Touch"/>
	<x path="haxe.extern.Rest"><c path="js.html.Touch"/></x>
	<c path="js.html.TouchList"/>
</f></createTouchList>
				<createTouchList public="1" set="method"><f a=""><c path="js.html.TouchList"/></f></createTouchList>
			</overloads>
		</createTouchList>
		<convertQuadFromNode public="1" set="method">
			<f a="quad:from:?options">
				<c path="js.html.DOMQuad"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Text"/>
					<x path="haxe.extern.EitherType">
						<c path="js.html.Element"/>
						<c path="js.html.HTMLDocument"/>
					</x>
				</x>
				<t path="js.html.ConvertCoordinateOptions"/>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</convertQuadFromNode>
		<convertRectFromNode public="1" set="method">
			<f a="rect:from:?options">
				<c path="js.html.DOMRectReadOnly"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Text"/>
					<x path="haxe.extern.EitherType">
						<c path="js.html.Element"/>
						<c path="js.html.HTMLDocument"/>
					</x>
				</x>
				<t path="js.html.ConvertCoordinateOptions"/>
				<c path="js.html.DOMQuad"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</convertRectFromNode>
		<convertPointFromNode public="1" set="method">
			<f a="point:from:?options">
				<t path="js.html.DOMPointInit"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Text"/>
					<x path="haxe.extern.EitherType">
						<c path="js.html.Element"/>
						<c path="js.html.HTMLDocument"/>
					</x>
				</x>
				<t path="js.html.ConvertCoordinateOptions"/>
				<c path="js.html.DOMPoint"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</convertPointFromNode>
		<createExpression public="1" set="method">
			<f a="expression:resolver">
				<c path="String"/>
				<c path="js.html.XPathNSResolver"/>
				<c path="js.html.XPathExpression"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createExpression>
		<createNSResolver public="1" set="method"><f a="nodeResolver">
	<c path="js.html.Node"/>
	<c path="js.html.Node"/>
</f></createNSResolver>
		<evaluate public="1" set="method">
			<f a="expression:contextNode:resolver:type:result">
				<c path="String"/>
				<c path="js.html.Node"/>
				<c path="js.html.XPathNSResolver"/>
				<x path="Int"/>
				<d/>
				<c path="js.html.XPathResult"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</evaluate>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Document` interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree. The DOM tree includes elements such as `body` and `table`, among many others. It provides functionality global to the document, like how to obtain the page's URL and create new elements in the document.

	Documentation [Document](https://developer.mozilla.org/en-US/docs/Web/API/Document) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Document$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Document>]]></haxe_doc>
		<meta><m n=":native"><e>"Document"</e></m></meta>
	</class>
	<class path="js.html.DocumentFragment" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DocumentFragment.hx" extern="1">
		<extends path="js.html.Node"/>
		<children public="1" set="null"><c path="js.html.HTMLCollection"/></children>
		<firstElementChild public="1" set="null"><c path="js.html.Element"/></firstElementChild>
		<lastElementChild public="1" set="null"><c path="js.html.Element"/></lastElementChild>
		<childElementCount public="1" set="null"><x path="Int"/></childElementCount>
		<getElementById public="1" set="method">
			<f a="elementId">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the first `Element` node within the DocumentFragment`, in document order, that matches the specified ID.</haxe_doc>
		</getElementById>
		<querySelector public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</querySelector>
		<querySelectorAll public="1" set="method">
			<f a="selectors">
				<c path="String"/>
				<c path="js.html.NodeList"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</querySelectorAll>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DocumentFragment` interface represents a minimal document object that has no parent. It is used as a light-weight version of `Document` to store well-formed or potentially non-well-formed fragments of XML.

	Documentation [DocumentFragment](https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment>]]></haxe_doc>
		<meta><m n=":native"><e>"DocumentFragment"</e></m></meta>
	</class>
	<class path="js.html.DocumentTimeline" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DocumentTimeline.hx" extern="1">
		<extends path="js.html.AnimationTimeline"/>
		<haxe_doc><![CDATA[The `DocumentTimeline` interface of the the Web Animations API represents animation timelines, including the default document timeline (accessed via `Document.timeline`).

	Documentation [DocumentTimeline](https://developer.mozilla.org/en-US/docs/Web/API/DocumentTimeline) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DocumentTimeline$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DocumentTimeline>]]></haxe_doc>
		<meta><m n=":native"><e>"DocumentTimeline"</e></m></meta>
	</class>
	<class path="js.html.DocumentType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DocumentType.hx" extern="1">
		<extends path="js.html.Node"/>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>...</haxe_doc>
		</name>
		<publicId public="1" set="null">
			<c path="String"/>
			<haxe_doc>...</haxe_doc>
		</publicId>
		<systemId public="1" set="null">
			<c path="String"/>
			<haxe_doc>...</haxe_doc>
		</systemId>
		<remove public="1" set="method"><f a=""><x path="Void"/></f></remove>
		<haxe_doc><![CDATA[The `DocumentType` interface represents a `Node` containing a doctype.

	Documentation [DocumentType](https://developer.mozilla.org/en-US/docs/Web/API/DocumentType) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DocumentType$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DocumentType>]]></haxe_doc>
		<meta><m n=":native"><e>"DocumentType"</e></m></meta>
	</class>
	<class path="js.html.MouseEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MouseEvent.hx" extern="1">
		<extends path="js.html.UIEvent"/>
		<screenX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The X coordinate of the mouse pointer in global (screen) coordinates.</haxe_doc>
		</screenX>
		<screenY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The Y coordinate of the mouse pointer in global (screen) coordinates.</haxe_doc>
		</screenY>
		<clientX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The X coordinate of the mouse pointer in local (DOM content) coordinates.</haxe_doc>
		</clientX>
		<clientY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The Y coordinate of the mouse pointer in local (DOM content) coordinates.</haxe_doc>
		</clientY>
		<offsetX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The X coordinate of the mouse pointer relative to the position of the padding edge of the target node.</haxe_doc>
		</offsetX>
		<offsetY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The Y coordinate of the mouse pointer relative to the position of the padding edge of the target node.</haxe_doc>
		</offsetY>
		<ctrlKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns `true` if the control key was down when the mouse event was fired.</haxe_doc>
		</ctrlKey>
		<shiftKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns `true` if the shift key was down when the mouse event was fired.</haxe_doc>
		</shiftKey>
		<altKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns `true` if the alt key was down when the mouse event was fired.</haxe_doc>
		</altKey>
		<metaKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns `true` if the meta key was down when the mouse event was fired.</haxe_doc>
		</metaKey>
		<button public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The button number that was pressed when the mouse event was fired. </haxe_doc>
		</button>
		<buttons public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The buttons being pressed when the mouse event was fired</haxe_doc>
		</buttons>
		<relatedTarget public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>The secondary target for the event, if there is one.</haxe_doc>
		</relatedTarget>
		<region public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the id of the hit region affected by the event. If no hit region is affected, `null` is returned.</haxe_doc>
		</region>
		<movementX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The X coordinate of the mouse pointer relative to the position of the last `mousemove` event.</haxe_doc>
		</movementX>
		<movementY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The Y coordinate of the mouse pointer relative to the position of the last `mousemove` event.</haxe_doc>
		</movementY>
		<initMouseEvent public="1" set="method">
			<f a="typeArg:canBubbleArg:cancelableArg:viewArg:detailArg:screenXArg:screenYArg:clientXArg:clientYArg:ctrlKeyArg:altKeyArg:shiftKeyArg:metaKeyArg:buttonArg:relatedTargetArg">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.html.Window"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="js.html.EventTarget"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Initializes the value of a `MouseEvent` created. If the event has already being dispatched, this method does nothing.</haxe_doc>
		</initMouseEvent>
		<getModifierState public="1" set="method">
			<f a="keyArg">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns the current state of the specified modifier key. See the `KeyboardEvent.getModifierState`() for details.</haxe_doc>
		</getModifierState>
		<initNSMouseEvent public="1" set="method"><f a="typeArg:canBubbleArg:cancelableArg:viewArg:detailArg:screenXArg:screenYArg:clientXArg:clientYArg:ctrlKeyArg:altKeyArg:shiftKeyArg:metaKeyArg:buttonArg:relatedTargetArg:pressure:inputSourceArg">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="js.html.Window"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Int"/>
	<c path="js.html.EventTarget"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></initNSMouseEvent>
		<new public="1" set="method">
			<f a="typeArg:?mouseEventInitDict">
				<c path="String"/>
				<t path="js.html.MouseEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `MouseEvent` interface represents events that occur due to the user interacting with a pointing device (such as a mouse). Common events using this interface include `click`, `dblclick`, `mouseup`, `mousedown`.

	Documentation [MouseEvent](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"MouseEvent"</e></m></meta>
	</class>
	<class path="js.html.DragEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DragEvent.hx" extern="1">
		<extends path="js.html.MouseEvent"/>
		<dataTransfer public="1" set="null"><c path="js.html.DataTransfer"/></dataTransfer>
		<initDragEvent public="1" set="method"><f a="type:canBubble:cancelable:aView:aDetail:aScreenX:aScreenY:aClientX:aClientY:aCtrlKey:aAltKey:aShiftKey:aMetaKey:aButton:aRelatedTarget:aDataTransfer">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="js.html.Window"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Int"/>
	<c path="js.html.EventTarget"/>
	<c path="js.html.DataTransfer"/>
	<x path="Void"/>
</f></initDragEvent>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<t path="js.html.DragEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `DragEvent` interface is a `DOM event` that represents a drag and drop interaction. The user initiates a drag by placing a pointer device (such as a mouse) on the touch surface and then dragging the pointer to a new location (such as another DOM element). Applications are free to interpret a drag and drop interaction in an application-specific way.

	Documentation [DragEvent](https://developer.mozilla.org/en-US/docs/Web/API/DragEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DragEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DragEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"DragEvent"</e></m></meta>
	</class>
	<typedef path="js.html.DragEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DragEventInit.hx"><a>
	<view>
		<t path="Null"><c path="js.html.Window"/></t>
		<meta><m n=":optional"/></meta>
	</view>
	<shiftKey>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</shiftKey>
	<screenY>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</screenY>
	<screenX>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</screenX>
	<relatedTarget>
		<t path="Null"><c path="js.html.EventTarget"/></t>
		<meta><m n=":optional"/></meta>
	</relatedTarget>
	<movementY>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</movementY>
	<movementX>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</movementX>
	<modifierSymbolLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierSymbolLock>
	<modifierSymbol>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierSymbol>
	<modifierScrollLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierScrollLock>
	<modifierOS>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierOS>
	<modifierNumLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierNumLock>
	<modifierFnLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierFnLock>
	<modifierFn>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierFn>
	<modifierCapsLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierCapsLock>
	<modifierAltGraph>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierAltGraph>
	<metaKey>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</metaKey>
	<detail>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</detail>
	<dataTransfer>
		<t path="Null"><c path="js.html.DataTransfer"/></t>
		<meta><m n=":optional"/></meta>
	</dataTransfer>
	<ctrlKey>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</ctrlKey>
	<clientY>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</clientY>
	<clientX>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</clientX>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<buttons>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</buttons>
	<button>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</button>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
	<altKey>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</altKey>
</a></typedef>
	<class path="js.html.DummyInterface" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DummyInterface.hx" extern="1">
		<lifecycleCallbacks public="1" set="method"><f a="?arg">
	<t path="js.html.LifecycleCallbacks"/>
	<x path="Void"/>
</f></lifecycleCallbacks>
		<promiseJobCallback public="1" set="method"><f a="arg">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></promiseJobCallback>
		<meta><m n=":native"><e>"DummyInterface"</e></m></meta>
	</class>
	<class path="js.html.DummyInterfaceWorkers" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/DummyInterfaceWorkers.hx" extern="1"><meta><m n=":native"><e>"DummyInterfaceWorkers"</e></m></meta></class>
	<typedef path="js.html.ElementRegistrationOptions" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ElementRegistrationOptions.hx"><a>
	<prototype>
		<t path="Null"><d/></t>
		<meta><m n=":optional"/></meta>
	</prototype>
	<extends_>
		<t path="Null"><c path="String"/></t>
		<meta>
			<m n=":native"><e>"extends"</e></m>
			<m n=":optional"/>
		</meta>
	</extends_>
</a></typedef>
	<class path="js.html.EmbedElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/EmbedElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `src` HTML attribute, containing the address of the resource.</haxe_doc>
		</src>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `type` HTML attribute, containing the type of the resource.</haxe_doc>
		</type>
		<width public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `width` HTML attribute, containing the displayed width of the resource.</haxe_doc>
		</width>
		<height public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, `"center"`, and `"justify"`.</haxe_doc>
		</height>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `height` HTML attribute, containing the displayed height of the resource.</haxe_doc>
		</align>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of the embedded object.</haxe_doc>
		</name>
		<getSVGDocument public="1" set="method"><f a=""><c path="js.html.HTMLDocument"/></f></getSVGDocument>
		<haxe_doc><![CDATA[The `HTMLEmbedElement` interface, which provides special properties (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating `embed` elements.

	Documentation [HTMLEmbedElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLEmbedElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLEmbedElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLEmbedElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLEmbedElement"</e></m></meta>
	</class>
	<class path="js.html.ErrorEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ErrorEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<message public="1" set="null">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a human-readable error message describing the problem.</haxe_doc>
		</message>
		<filename public="1" set="null">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the name of the script file in which the error occurred.</haxe_doc>
		</filename>
		<lineno public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `integer` containing the line number of the script file on which the error occurred.</haxe_doc>
		</lineno>
		<colno public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `integer` containing the column number of the script file on which the error occurred.</haxe_doc>
		</colno>
		<error public="1" set="null">
			<d/>
			<haxe_doc>Is a JavaScript `Object` that is concerned by the event.</haxe_doc>
		</error>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<t path="js.html.ErrorEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `ErrorEvent` interface represents events providing information related to errors in scripts or in files.

	Documentation [ErrorEvent](https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"ErrorEvent"</e></m></meta>
	</class>
	<typedef path="js.html.ErrorEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ErrorEventInit.hx"><a>
	<message>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</message>
	<lineno>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</lineno>
	<filename>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</filename>
	<error>
		<t path="Null"><d/></t>
		<meta><m n=":optional"/></meta>
	</error>
	<colno>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</colno>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<typedef path="js.html.EventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/EventInit.hx"><a>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.EventListener" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/EventListener.hx" extern="1">
		<handleEvent public="1" set="method"><f a="event">
	<c path="js.html.Event"/>
	<x path="Void"/>
</f></handleEvent>
		<haxe_doc><![CDATA[This method is called whenever an event occurs of the type for which the `EventListener` interface was registered.

	Documentation [EventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventListener) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EventListener$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EventListener>]]></haxe_doc>
		<meta><m n=":native"><e>"EventListener"</e></m></meta>
	</class>
	<typedef path="js.html.EventModifierInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/EventModifierInit.hx"><a>
	<view>
		<t path="Null"><c path="js.html.Window"/></t>
		<meta><m n=":optional"/></meta>
	</view>
	<shiftKey>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</shiftKey>
	<modifierSymbolLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierSymbolLock>
	<modifierSymbol>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierSymbol>
	<modifierScrollLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierScrollLock>
	<modifierOS>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierOS>
	<modifierNumLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierNumLock>
	<modifierFnLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierFnLock>
	<modifierFn>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierFn>
	<modifierCapsLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierCapsLock>
	<modifierAltGraph>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierAltGraph>
	<metaKey>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</metaKey>
	<detail>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</detail>
	<ctrlKey>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</ctrlKey>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
	<altKey>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</altKey>
</a></typedef>
	<class path="js.html.EventSource" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/EventSource.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<CONNECTING public="1" get="inline" set="null" expr="0" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</CONNECTING>
		<OPEN public="1" get="inline" set="null" expr="1" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</OPEN>
		<CLOSED public="1" get="inline" set="null" expr="2" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</CLOSED>
		<url public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the URL of the source.</haxe_doc>
		</url>
		<withCredentials public="1" set="null"><x path="Bool"/></withCredentials>
		<readyState public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An `unsigned short` representing the state of the connection. Possible values are `CONNECTING` (`0`), `OPEN` (`1`), or `CLOSED` (`2`).</haxe_doc>
		</readyState>
		<onopen public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` being called when an `open` event is received, that is when the connection was just opened.</haxe_doc>
		</onopen>
		<onmessage public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` being called when a `message` event is received, that is when a message is coming from the source.</haxe_doc>
		</onmessage>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` being called when an error occurs and the `error` event is dispatched on this object.</haxe_doc>
		</onerror>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Closes the connection, if any, and sets the `readyState` attribute to `CLOSED`. If the connection is already closed, the method does nothing.</haxe_doc>
		</close>
		<new public="1" set="method">
			<f a="url:?eventSourceInitDict">
				<c path="String"/>
				<t path="js.html.EventSourceInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `EventSource` interface is used to receive server-sent events. It connects to a server over HTTP and receives events in `text/event-stream` format without closing the connection.

	Documentation [EventSource](https://developer.mozilla.org/en-US/docs/Web/API/EventSource) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EventSource$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EventSource>]]></haxe_doc>
		<meta><m n=":native"><e>"EventSource"</e></m></meta>
	</class>
	<typedef path="js.html.EventSourceInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/EventSourceInit.hx"><a><withCredentials>
	<t path="Null"><x path="Bool"/></t>
	<meta><m n=":optional"/></meta>
</withCredentials></a></typedef>
	<class path="js.html.Exception" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Exception.hx" extern="1">
		<message public="1" set="null"><c path="String"/></message>
		<result public="1" set="null"><x path="Int"/></result>
		<name public="1" set="null"><c path="String"/></name>
		<filename public="1" set="null"><c path="String"/></filename>
		<lineNumber public="1" set="null"><x path="Int"/></lineNumber>
		<columnNumber public="1" set="null"><x path="Int"/></columnNumber>
		<data public="1" set="null"><d/></data>
		<stack public="1" set="null"><c path="String"/></stack>
		<meta><m n=":native"><e>"Exception"</e></m></meta>
	</class>
	<class path="js.html.ExtendableEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ExtendableEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<waitUntil public="1" set="method">
			<f a="p">
				<c path="js.Promise"><d/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</waitUntil>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<t path="js.html.ExtendableEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `ExtendableEvent` interface extends the lifetime of the `install` and `activate` events dispatched on the global scope as part of the service worker lifecycle. This ensures that any functional events (like `FetchEvent`) are not dispatched until it upgrades database schemas and deletes the outdated cache entries.

	Documentation [ExtendableEvent](https://developer.mozilla.org/en-US/docs/Web/API/ExtendableEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ExtendableEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ExtendableEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"ExtendableEvent"</e></m></meta>
	</class>
	<typedef path="js.html.ExtendableEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ExtendableEventInit.hx"><a>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.ExtendableMessageEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ExtendableMessageEvent.hx" extern="1">
		<extends path="js.html.ExtendableEvent"/>
		<data public="1" set="null">
			<d/>
			<haxe_doc>Returns the event's data. It can be any data type.</haxe_doc>
		</data>
		<origin public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the origin of the `ServiceWorkerClient` that sent the message</haxe_doc>
		</origin>
		<lastEventId public="1" set="null">
			<c path="String"/>
			<haxe_doc>Represents, in server-sent events, the last event ID of the event source.</haxe_doc>
		</lastEventId>
		<source public="1" set="null">
			<x path="haxe.extern.EitherType">
				<c path="js.html.Client"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.ServiceWorker"/>
					<c path="js.html.MessagePort"/>
				</x>
			</x>
			<haxe_doc>Returns a reference to the service worker that sent the message.</haxe_doc>
		</source>
		<ports public="1" set="null">
			<c path="js.html.MessagePortList"/>
			<haxe_doc>Returns the array containing the `MessagePort` objects representing the ports of the associated message channel.</haxe_doc>
		</ports>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<t path="js.html.ExtendableMessageEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `ExtendableMessageEvent` interface of the `ServiceWorker API` represents the event object of a `message` event fired on a service worker (when a channel message is received on the `ServiceWorkerGlobalScope` from another context) — extends the lifetime of such events.

	Documentation [ExtendableMessageEvent](https://developer.mozilla.org/en-US/docs/Web/API/ExtendableMessageEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ExtendableMessageEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ExtendableMessageEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"ExtendableMessageEvent"</e></m></meta>
	</class>
	<typedef path="js.html.ExtendableMessageEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ExtendableMessageEventInit.hx"><a>
	<source>
		<t path="Null"><x path="haxe.extern.EitherType">
	<c path="js.html.Client"/>
	<x path="haxe.extern.EitherType">
		<c path="js.html.ServiceWorker"/>
		<c path="js.html.MessagePort"/>
	</x>
</x></t>
		<meta><m n=":optional"/></meta>
	</source>
	<ports>
		<t path="Null"><c path="Array"><c path="js.html.MessagePort"/></c></t>
		<meta><m n=":optional"/></meta>
	</ports>
	<origin>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</origin>
	<lastEventId>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</lastEventId>
	<data>
		<t path="Null"><d/></t>
		<meta><m n=":optional"/></meta>
	</data>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.External" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/External.hx" extern="1">
		<AddSearchProvider public="1" set="method"><f a="aDescriptionURL">
	<c path="String"/>
	<x path="Void"/>
</f></AddSearchProvider>
		<IsSearchProviderInstalled public="1" set="method"><f a="aSearchURL">
	<c path="String"/>
	<x path="Int"/>
</f></IsSearchProviderInstalled>
		<addSearchEngine public="1" set="method"><f a="engineURL:iconURL:suggestedTitle:suggestedCategory">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></addSearchEngine>
		<meta><m n=":native"><e>"External"</e></m></meta>
	</class>
	<class path="js.html.FetchEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FetchEvent.hx" extern="1">
		<extends path="js.html.ExtendableEvent"/>
		<request public="1" set="null">
			<c path="js.html.Request"/>
			<haxe_doc>Returns the `Request` that triggered the event handler.</haxe_doc>
		</request>
		<clientId public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the id of the client that the current service worker is controlling.</haxe_doc>
		</clientId>
		<isReload public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that is `true` if the event was dispatched with the user's intention for the page to reload, and `false` otherwise. Typically, pressing the refresh button in a browser is a reload, while clicking a link and pressing the back button is not.</haxe_doc>
		</isReload>
		<respondWith public="1" set="method">
			<f a="r">
				<c path="js.Promise"><c path="js.html.Response"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</respondWith>
		<new public="1" set="method">
			<f a="type:eventInitDict">
				<c path="String"/>
				<t path="js.html.FetchEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The parameter passed into the `ServiceWorkerGlobalScope.onfetch` handler, `FetchEvent` represents a fetch action that is dispatched on the `ServiceWorkerGlobalScope` of a `ServiceWorker`. It contains information about the request and resulting response, and provides the `FetchEvent.respondWith()` method, which allows us to provide an arbitrary response back to the controlled page.

	Documentation [FetchEvent](https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"FetchEvent"</e></m></meta>
	</class>
	<typedef path="js.html.FetchEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FetchEventInit.hx"><a>
	<request><c path="js.html.Request"/></request>
	<isReload>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</isReload>
	<clientId>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</clientId>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.FieldSetElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FieldSetElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<disabled public="1"><x path="Bool"/></disabled>
		<form public="1" set="null"><c path="js.html.FormElement"/></form>
		<name public="1"><c path="String"/></name>
		<type public="1" set="null"><c path="String"/></type>
		<elements public="1" set="null"><c path="js.html.HTMLCollection"/></elements>
		<willValidate public="1" set="null"><x path="Bool"/></willValidate>
		<validity public="1" set="null"><c path="js.html.ValidityState"/></validity>
		<validationMessage public="1" set="null"><c path="String"/></validationMessage>
		<checkValidity public="1" set="method"><f a=""><x path="Bool"/></f></checkValidity>
		<setCustomValidity public="1" set="method"><f a="error">
	<c path="String"/>
	<x path="Void"/>
</f></setCustomValidity>
		<haxe_doc><![CDATA[The `HTMLFieldSetElement` interface has special properties and methods (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of field-set elements.

	Documentation [HTMLFieldSetElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLFieldSetElement"</e></m></meta>
	</class>
	<class path="js.html.File" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/File.hx" extern="1">
		<extends path="js.html.Blob"/>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the name of the file referenced by the `File` object.</haxe_doc>
		</name>
		<lastModified public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the last modified time of the file, in millisecond since the UNIX epoch (January 1st, 1970 at Midnight).</haxe_doc>
		</lastModified>
		<lastModifiedDate public="1" set="null">
			<c path="Date"/>
			<haxe_doc>Returns the last modified `Date` of the file referenced by the `File` object.</haxe_doc>
		</lastModifiedDate>
		<new public="1" set="method">
			<f a="fileBits:?options">
				<c path="String"/>
				<t path="js.html.ChromeFilePropertyBag"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="fileBits:fileName:?options">
						<c path="Array"><x path="haxe.extern.EitherType">
	<c path="js.html.ArrayBuffer"/>
	<x path="haxe.extern.EitherType">
		<c path="js.html.ArrayBufferView"/>
		<x path="haxe.extern.EitherType">
			<c path="js.html.Blob"/>
			<c path="String"/>
		</x>
	</x>
</x></c>
						<c path="String"/>
						<t path="js.html.FilePropertyBag"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="fileBits:?options">
						<c path="js.html.Blob"/>
						<t path="js.html.ChromeFilePropertyBag"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="fileBits:?options">
						<d/>
						<t path="js.html.ChromeFilePropertyBag"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `File` interface provides information about files and allows JavaScript in a web page to access their content.

	Documentation [File](https://developer.mozilla.org/en-US/docs/Web/API/File) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/File$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/File>]]></haxe_doc>
		<meta><m n=":native"><e>"File"</e></m></meta>
	</class>
	<class path="js.html.FileList" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FileList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.File"/>
</f></item>
		<haxe_doc><![CDATA[An object of this type is returned by the `files` property of the HTML `input` element; this lets you access the list of files selected with the `input type="file"` element. It's also used for a list of files dropped into web content when using the drag and drop API; see the `DataTransfer` object for details on this usage.

	Documentation [FileList](https://developer.mozilla.org/en-US/docs/Web/API/FileList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FileList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FileList>]]></haxe_doc>
		<meta><m n=":native"><e>"FileList"</e></m></meta>
	</class>
	<abstract path="js.html.FileMode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FileMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._FileMode.FileMode_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FileMode.hx" private="1" module="js.html.FileMode" extern="1">
	<READONLY public="1" get="inline" set="null" expr="cast &quot;readonly&quot;" line="29" static="1">
		<x path="js.html.FileMode"/>
		<meta>
			<m n=":value"><e>cast "readonly"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</READONLY>
	<READWRITE public="1" get="inline" set="null" expr="cast &quot;readwrite&quot;" line="30" static="1">
		<x path="js.html.FileMode"/>
		<meta>
			<m n=":value"><e>cast "readwrite"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</READWRITE>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._FileMode.FileMode_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FileMode.hx" private="1" module="js.html.FileMode" extern="1">
		<READONLY public="1" get="inline" set="null" expr="cast &quot;readonly&quot;" line="29" static="1">
			<x path="js.html.FileMode"/>
			<meta>
				<m n=":value"><e>cast "readonly"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</READONLY>
		<READWRITE public="1" get="inline" set="null" expr="cast &quot;readwrite&quot;" line="30" static="1">
			<x path="js.html.FileMode"/>
			<meta>
				<m n=":value"><e>cast "readwrite"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</READWRITE>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="js.html.FilePropertyBag" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FilePropertyBag.hx"><a>
	<type>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</type>
	<lastModified>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</lastModified>
</a></typedef>
	<class path="js.html.FileReader" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FileReader.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<EMPTY public="1" get="inline" set="null" expr="0" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</EMPTY>
		<LOADING public="1" get="inline" set="null" expr="1" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</LOADING>
		<DONE public="1" get="inline" set="null" expr="2" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</DONE>
		<readyState public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[A number indicating the state of the <code>FileReader</code>. This is one of the following:
		 <table class="standard-table">
		  
		   <tr>
		    <td><code>EMPTY</code></td>
		    <td><code>0</code></td>
		    <td>No data has been loaded yet.</td>
		   </tr>
		   <tr>
		    <td><code>LOADING</code></td>
		    <td><code>1</code></td>
		    <td>Data is currently being loaded.</td>
		   </tr>
		   <tr>
		    <td><code>DONE</code></td>
		    <td><code>2</code></td>
		    <td>The entire read request has been completed.</td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</readyState>
		<result public="1" set="null">
			<d/>
			<haxe_doc>The file's contents. This property is only valid after the read operation is complete, and the format of the data depends on which of the methods was used to initiate the read operation.</haxe_doc>
		</result>
		<error public="1" set="null">
			<c path="js.html.DOMError"/>
			<haxe_doc>A `DOMError` representing the error that occurred while reading the file.</haxe_doc>
		</error>
		<onloadstart public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `loadstart` event. This event is triggered each time the reading is starting.</haxe_doc>
		</onloadstart>
		<onprogress public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `progress` event. This event is triggered while reading a `Blob` content.</haxe_doc>
		</onprogress>
		<onload public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `load` event. This event is triggered each time the reading operation is successfully completed.</haxe_doc>
		</onload>
		<onabort public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `abort` event. This event is triggered each time the reading operation is aborted.</haxe_doc>
		</onabort>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `error` event. This event is triggered each time the reading operation encounter an error.</haxe_doc>
		</onerror>
		<onloadend public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `loadend` event. This event is triggered each time the reading operation is completed (either in success or failure).</haxe_doc>
		</onloadend>
		<readAsArrayBuffer public="1" set="method">
			<f a="blob">
				<c path="js.html.Blob"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</readAsArrayBuffer>
		<readAsText public="1" set="method">
			<f a="blob:?label" v=":&quot;&quot;">
				<c path="js.html.Blob"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</readAsText>
		<readAsDataURL public="1" set="method">
			<f a="blob">
				<c path="js.html.Blob"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</readAsDataURL>
		<abort public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</abort>
		<readAsBinaryString public="1" set="method">
			<f a="filedata">
				<c path="js.html.Blob"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</readAsBinaryString>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `FileReader` object lets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using `File` or `Blob` objects to specify the file or data to read.

	Documentation [FileReader](https://developer.mozilla.org/en-US/docs/Web/API/FileReader) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FileReader$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FileReader>]]></haxe_doc>
		<meta><m n=":native"><e>"FileReader"</e></m></meta>
	</class>
	<class path="js.html.FileReaderSync" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FileReaderSync.hx" extern="1">
		<readAsArrayBuffer public="1" set="method">
			<f a="blob">
				<c path="js.html.Blob"/>
				<c path="js.html.ArrayBuffer"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</readAsArrayBuffer>
		<readAsBinaryString public="1" set="method">
			<f a="blob">
				<c path="js.html.Blob"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</readAsBinaryString>
		<readAsText public="1" set="method">
			<f a="blob:?encoding">
				<c path="js.html.Blob"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</readAsText>
		<readAsDataURL public="1" set="method">
			<f a="blob">
				<c path="js.html.Blob"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</readAsDataURL>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `FileReaderSync` interface allows to read `File` or `Blob` objects in a synchronous way.

	Documentation [FileReaderSync](https://developer.mozilla.org/en-US/docs/Web/API/FileReaderSync) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FileReaderSync$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FileReaderSync>]]></haxe_doc>
		<meta><m n=":native"><e>"FileReaderSync"</e></m></meta>
	</class>
	<abstract path="js.html.FillMode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FillMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._FillMode.FillMode_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FillMode.hx" private="1" module="js.html.FillMode" extern="1">
	<NONE public="1" get="inline" set="null" expr="cast &quot;none&quot;" line="29" static="1">
		<x path="js.html.FillMode"/>
		<meta>
			<m n=":value"><e>cast "none"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NONE>
	<FORWARDS public="1" get="inline" set="null" expr="cast &quot;forwards&quot;" line="30" static="1">
		<x path="js.html.FillMode"/>
		<meta>
			<m n=":value"><e>cast "forwards"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FORWARDS>
	<BACKWARDS public="1" get="inline" set="null" expr="cast &quot;backwards&quot;" line="31" static="1">
		<x path="js.html.FillMode"/>
		<meta>
			<m n=":value"><e>cast "backwards"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BACKWARDS>
	<BOTH public="1" get="inline" set="null" expr="cast &quot;both&quot;" line="32" static="1">
		<x path="js.html.FillMode"/>
		<meta>
			<m n=":value"><e>cast "both"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BOTH>
	<AUTO public="1" get="inline" set="null" expr="cast &quot;auto&quot;" line="33" static="1">
		<x path="js.html.FillMode"/>
		<meta>
			<m n=":value"><e>cast "auto"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AUTO>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._FillMode.FillMode_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FillMode.hx" private="1" module="js.html.FillMode" extern="1">
		<NONE public="1" get="inline" set="null" expr="cast &quot;none&quot;" line="29" static="1">
			<x path="js.html.FillMode"/>
			<meta>
				<m n=":value"><e>cast "none"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NONE>
		<FORWARDS public="1" get="inline" set="null" expr="cast &quot;forwards&quot;" line="30" static="1">
			<x path="js.html.FillMode"/>
			<meta>
				<m n=":value"><e>cast "forwards"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FORWARDS>
		<BACKWARDS public="1" get="inline" set="null" expr="cast &quot;backwards&quot;" line="31" static="1">
			<x path="js.html.FillMode"/>
			<meta>
				<m n=":value"><e>cast "backwards"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BACKWARDS>
		<BOTH public="1" get="inline" set="null" expr="cast &quot;both&quot;" line="32" static="1">
			<x path="js.html.FillMode"/>
			<meta>
				<m n=":value"><e>cast "both"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BOTH>
		<AUTO public="1" get="inline" set="null" expr="cast &quot;auto&quot;" line="33" static="1">
			<x path="js.html.FillMode"/>
			<meta>
				<m n=":value"><e>cast "auto"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AUTO>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.Float32Array" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Float32Array.hx" extern="1">
		<extends path="js.html.ArrayBufferView"/>
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" set="null"><x path="Int"/></length>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><set public="1" set="method"><f a="array:?offset">
	<c path="js.html.Float32Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set></overloads>
		</set>
		<subarray public="1" set="method"><f a="start:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.Float32Array"/>
</f></subarray>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.html.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array">
						<c path="js.html.Float32Array"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array">
						<c path="Array"><x path="Float"/></c>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<meta><m n=":native"><e>"Float32Array"</e></m></meta>
	</class>
	<class path="js.html.Float64Array" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Float64Array.hx" extern="1">
		<extends path="js.html.ArrayBufferView"/>
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="8" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" set="null"><x path="Int"/></length>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><set public="1" set="method"><f a="array:?offset">
	<c path="js.html.Float64Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set></overloads>
		</set>
		<subarray public="1" set="method"><f a="start:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.Float64Array"/>
</f></subarray>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.html.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array">
						<c path="js.html.Float64Array"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array">
						<c path="Array"><x path="Float"/></c>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<meta><m n=":native"><e>"Float64Array"</e></m></meta>
	</class>
	<class path="js.html.FocusEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FocusEvent.hx" extern="1">
		<extends path="js.html.UIEvent"/>
		<relatedTarget public="1" set="null">
			<c path="js.html.EventTarget"/>
			<haxe_doc>Is an `EventTarget` representing a secondary target for this event. As in some cases (like when tabbing in or out a page), this property may be set to `null` for security reasons.</haxe_doc>
		</relatedTarget>
		<new public="1" set="method">
			<f a="typeArg:?focusEventInitDict">
				<c path="String"/>
				<t path="js.html.FocusEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `FocusEvent` interface represents focus-related events like `focus`, `blur`, `focusin`, or `focusout`.

	Documentation [FocusEvent](https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"FocusEvent"</e></m></meta>
	</class>
	<typedef path="js.html.FocusEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FocusEventInit.hx"><a>
	<view>
		<t path="Null"><c path="js.html.Window"/></t>
		<meta><m n=":optional"/></meta>
	</view>
	<relatedTarget>
		<t path="Null"><c path="js.html.EventTarget"/></t>
		<meta><m n=":optional"/></meta>
	</relatedTarget>
	<detail>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</detail>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.FontElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FontElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<color public="1"><c path="String"/></color>
		<face public="1"><c path="String"/></face>
		<size public="1"><c path="String"/></size>
		<meta><m n=":native"><e>"HTMLFontElement"</e></m></meta>
	</class>
	<class path="js.html.FontFace" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FontFace.hx" extern="1">
		<family public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that contains the family of the font. It is equivalent to the `@font-face/family` descriptor.</haxe_doc>
		</family>
		<style public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that contains the style of the font. It is equivalent to the `@font-face/style` descriptor.</haxe_doc>
		</style>
		<weight public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that contains the weight of the font. It is equivalent to the `@font-face/weight` descriptor.</haxe_doc>
		</weight>
		<stretch public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that contains how the font stretches. It is equivalent to the `@font-face/stretch` descriptor.</haxe_doc>
		</stretch>
		<unicodeRange public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that contains the range of code encompassed the font. It is equivalent to the `@font-face/unicode-range` descriptor.</haxe_doc>
		</unicodeRange>
		<variant public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that contains the variant of the font. It is equivalent to the `@font-face/range` descriptor.</haxe_doc>
		</variant>
		<featureSettings public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that contains the features of the font. It is equivalent to the `@font-face/feature-settings` descriptor.</haxe_doc>
		</featureSettings>
		<status public="1" set="null">
			<x path="js.html.FontFaceLoadStatus"/>
			<haxe_doc>Returns an enumerated value indicating the status of the font. It can be one of the following: `"unloaded"`, `"loading"`, `"loaded"`, or `"error"`.</haxe_doc>
		</status>
		<loaded public="1" set="null">
			<c path="js.Promise"><c path="js.html.FontFace"/></c>
			<haxe_doc>Returns a `Promise` to a `FontFace` that fulfills when the font is completely loaded and rejects when an error happens.</haxe_doc>
		</loaded>
		<load public="1" set="method">
			<f a=""><c path="js.Promise"><c path="js.html.FontFace"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</load>
		<new public="1" set="method">
			<f a="family:source:?descriptors">
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<x path="haxe.extern.EitherType">
						<c path="js.html.ArrayBuffer"/>
						<c path="js.html.ArrayBufferView"/>
					</x>
				</x>
				<t path="js.html.FontFaceDescriptors"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `FontFace` interface represents a single usable font face. It allows control of the source of the font face, being a URL to an external resource, or a buffer; it also allows control of when the font face is loaded and its current status.

	Documentation [FontFace](https://developer.mozilla.org/en-US/docs/Web/API/FontFace) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FontFace$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FontFace>]]></haxe_doc>
		<meta><m n=":native"><e>"FontFace"</e></m></meta>
	</class>
	<typedef path="js.html.FontFaceDescriptors" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FontFaceDescriptors.hx"><a>
	<weight>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</weight>
	<variant>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</variant>
	<unicodeRange>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</unicodeRange>
	<style>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</style>
	<stretch>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</stretch>
	<featureSettings>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</featureSettings>
	<display>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</display>
</a></typedef>
	<abstract path="js.html.FontFaceLoadStatus" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FontFaceLoadStatus.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._FontFaceLoadStatus.FontFaceLoadStatus_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FontFaceLoadStatus.hx" private="1" module="js.html.FontFaceLoadStatus" extern="1">
	<UNLOADED public="1" get="inline" set="null" expr="cast &quot;unloaded&quot;" line="29" static="1">
		<x path="js.html.FontFaceLoadStatus"/>
		<meta>
			<m n=":value"><e>cast "unloaded"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UNLOADED>
	<LOADING public="1" get="inline" set="null" expr="cast &quot;loading&quot;" line="30" static="1">
		<x path="js.html.FontFaceLoadStatus"/>
		<meta>
			<m n=":value"><e>cast "loading"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LOADING>
	<LOADED public="1" get="inline" set="null" expr="cast &quot;loaded&quot;" line="31" static="1">
		<x path="js.html.FontFaceLoadStatus"/>
		<meta>
			<m n=":value"><e>cast "loaded"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LOADED>
	<ERROR public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="32" static="1">
		<x path="js.html.FontFaceLoadStatus"/>
		<meta>
			<m n=":value"><e>cast "error"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ERROR>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._FontFaceLoadStatus.FontFaceLoadStatus_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FontFaceLoadStatus.hx" private="1" module="js.html.FontFaceLoadStatus" extern="1">
		<UNLOADED public="1" get="inline" set="null" expr="cast &quot;unloaded&quot;" line="29" static="1">
			<x path="js.html.FontFaceLoadStatus"/>
			<meta>
				<m n=":value"><e>cast "unloaded"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UNLOADED>
		<LOADING public="1" get="inline" set="null" expr="cast &quot;loading&quot;" line="30" static="1">
			<x path="js.html.FontFaceLoadStatus"/>
			<meta>
				<m n=":value"><e>cast "loading"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LOADING>
		<LOADED public="1" get="inline" set="null" expr="cast &quot;loaded&quot;" line="31" static="1">
			<x path="js.html.FontFaceLoadStatus"/>
			<meta>
				<m n=":value"><e>cast "loaded"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LOADED>
		<ERROR public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="32" static="1">
			<x path="js.html.FontFaceLoadStatus"/>
			<meta>
				<m n=":value"><e>cast "error"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ERROR>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.FontFaceSet" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FontFaceSet.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<size public="1" set="null"><x path="Int"/></size>
		<onloading public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventListener` property called whenever an event of type `loading` is fired, indicating that a font face set has started to load.</haxe_doc>
		</onloading>
		<onloadingdone public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventListener` property called whenever an event of type `loadingdone` is fired, indicating that a font face set has finished loading.</haxe_doc>
		</onloadingdone>
		<onloadingerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventListener` property called whenever an event of type `loadingerror` is fired, indicating that an error occurred during the loading of a font face set.</haxe_doc>
		</onloadingerror>
		<ready public="1" set="null"><c path="js.Promise"><x path="Void"/></c></ready>
		<status public="1" set="null">
			<x path="js.html.FontFaceSetLoadStatus"/>
			<haxe_doc>Indicates the font face's loading status. It will be one of `'loading'` or `'loaded'`.</haxe_doc>
		</status>
		<add public="1" set="method">
			<f a="font">
				<c path="js.html.FontFace"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</add>
		<has public="1" set="method"><f a="font">
	<c path="js.html.FontFace"/>
	<x path="Bool"/>
</f></has>
		<delete_ public="1" set="method">
			<f a="font">
				<c path="js.html.FontFace"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"delete"</e></m></meta>
		</delete_>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<entries public="1" set="method"><f a=""><c path="js.html.FontFaceSetIterator"/></f></entries>
		<values public="1" set="method"><f a=""><c path="js.html.FontFaceSetIterator"/></f></values>
		<forEach public="1" set="method">
			<f a="cb:?thisArg">
				<f a="::">
					<c path="js.html.FontFace"/>
					<c path="js.html.FontFace"/>
					<c path="js.html.FontFaceSet"/>
					<x path="Void"/>
				</f>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</forEach>
		<load public="1" set="method">
			<f a="font:?text" v=":&quot; &quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="js.Promise"><c path="Array"><c path="js.html.FontFace"/></c></c>
			</f>
			<meta><m n=":value"><e>{ text : " " }</e></m></meta>
		</load>
		<check public="1" set="method">
			<f a="font:?text" v=":&quot; &quot;">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ text : " " }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</check>
		<haxe_doc><![CDATA[The `FontFaceSet` interface of the CSS Font Loading API is an interface for loading font faces and checking their download statuses.

	Documentation [FontFaceSet](https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet>]]></haxe_doc>
		<meta><m n=":native"><e>"FontFaceSet"</e></m></meta>
	</class>
	<class path="js.html.FontFaceSetIterator" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FontFaceSetIterator.hx" extern="1">
		<next public="1" set="method">
			<f a=""><t path="js.html.FontFaceSetIteratorResult"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</next>
		<meta><m n=":native"><e>"FontFaceSetIterator"</e></m></meta>
	</class>
	<typedef path="js.html.FontFaceSetIteratorResult" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FontFaceSetIteratorResult.hx"><a>
	<value><d/></value>
	<done><x path="Bool"/></done>
</a></typedef>
	<abstract path="js.html.FontFaceSetLoadStatus" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FontFaceSetLoadStatus.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._FontFaceSetLoadStatus.FontFaceSetLoadStatus_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FontFaceSetLoadStatus.hx" private="1" module="js.html.FontFaceSetLoadStatus" extern="1">
	<LOADING public="1" get="inline" set="null" expr="cast &quot;loading&quot;" line="29" static="1">
		<x path="js.html.FontFaceSetLoadStatus"/>
		<meta>
			<m n=":value"><e>cast "loading"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LOADING>
	<LOADED public="1" get="inline" set="null" expr="cast &quot;loaded&quot;" line="30" static="1">
		<x path="js.html.FontFaceSetLoadStatus"/>
		<meta>
			<m n=":value"><e>cast "loaded"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LOADED>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._FontFaceSetLoadStatus.FontFaceSetLoadStatus_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FontFaceSetLoadStatus.hx" private="1" module="js.html.FontFaceSetLoadStatus" extern="1">
		<LOADING public="1" get="inline" set="null" expr="cast &quot;loading&quot;" line="29" static="1">
			<x path="js.html.FontFaceSetLoadStatus"/>
			<meta>
				<m n=":value"><e>cast "loading"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LOADING>
		<LOADED public="1" get="inline" set="null" expr="cast &quot;loaded&quot;" line="30" static="1">
			<x path="js.html.FontFaceSetLoadStatus"/>
			<meta>
				<m n=":value"><e>cast "loaded"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LOADED>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.FormData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FormData.hx" extern="1">
		<append public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><append public="1" set="method">
	<f a="name:value:?filename">
		<c path="String"/>
		<c path="js.html.Blob"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</append></overloads>
		</append>
		<delete_ public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"delete"</e></m></meta>
		</delete_>
		<get public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Blob"/>
					<c path="String"/>
				</x>
			</f>
			<haxe_doc>Returns the first value associated with a given key from within a `FormData` object.</haxe_doc>
		</get>
		<getAll public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="Array"><x path="haxe.extern.EitherType">
	<c path="js.html.Blob"/>
	<c path="String"/>
</x></c>
			</f>
			<haxe_doc>Returns an array of all the values associated with a given key from within a `FormData`.</haxe_doc>
		</getAll>
		<has public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a boolean stating whether a `FormData` object contains a certain key/value pair.</haxe_doc>
		</has>
		<set public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><set public="1" set="method">
	<f a="name:value:?filename">
		<c path="String"/>
		<c path="js.html.Blob"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</set></overloads>
		</set>
		<entries public="1" set="method">
			<f a=""><c path="js.html.FormDataIterator"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><c path="js.html.FormDataIterator"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><c path="js.html.FormDataIterator"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</forEach>
		<new public="1" set="method">
			<f a="?form">
				<c path="js.html.FormElement"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `FormData` interface provides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the `XMLHttpRequest.send()` method. It uses the same format a form would use if the encoding type were set to `"multipart/form-data"`.

	Documentation [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/FormData$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/FormData>]]></haxe_doc>
		<meta><m n=":native"><e>"FormData"</e></m></meta>
	</class>
	<class path="js.html.FormDataIterator" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FormDataIterator.hx" extern="1">
		<next public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</next>
		<meta><m n=":native"><e>"FormDataIterator"</e></m></meta>
	</class>
	<class path="js.html.FormElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FormElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<acceptCharset public="1"><c path="String"/></acceptCharset>
		<action public="1"><c path="String"/></action>
		<autocomplete public="1"><c path="String"/></autocomplete>
		<enctype public="1"><c path="String"/></enctype>
		<encoding public="1"><c path="String"/></encoding>
		<method public="1"><c path="String"/></method>
		<name public="1"><c path="String"/></name>
		<noValidate public="1"><x path="Bool"/></noValidate>
		<target public="1"><c path="String"/></target>
		<elements public="1" set="null"><c path="js.html.HTMLCollection"/></elements>
		<length public="1" set="null"><x path="Int"/></length>
		<submit public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</submit>
		<reset public="1" set="method"><f a=""><x path="Void"/></f></reset>
		<checkValidity public="1" set="method"><f a=""><x path="Bool"/></f></checkValidity>
		<haxe_doc><![CDATA[The `HTMLFormElement` interface provides methods to create and modify `form` elements.
		document.forms - returns an array of HTMLFormElement objects referencing all forms on the page.
		document.forms[index] - returns an HTMLFormElement object referencing the form at the specified index.
		document.forms['id'] - returns an HTMLFormElement object referencing the form with the specified id.
		document.forms['name'] - returns an HTMLFormElement object referencing the form with the specified name.

	Documentation [HTMLFormElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLFormElement"</e></m></meta>
	</class>
	<class path="js.html.FrameElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FrameElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<name public="1"><c path="String"/></name>
		<scrolling public="1"><c path="String"/></scrolling>
		<src public="1"><c path="String"/></src>
		<frameBorder public="1"><c path="String"/></frameBorder>
		<longDesc public="1"><c path="String"/></longDesc>
		<noResize public="1"><x path="Bool"/></noResize>
		<contentDocument public="1" set="null"><c path="js.html.HTMLDocument"/></contentDocument>
		<contentWindow public="1" set="null"><c path="js.html.Window"/></contentWindow>
		<marginHeight public="1"><c path="String"/></marginHeight>
		<marginWidth public="1"><c path="String"/></marginWidth>
		<meta><m n=":native"><e>"HTMLFrameElement"</e></m></meta>
	</class>
	<class path="js.html.FrameSetElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FrameSetElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<cols public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the foreground color of text.</haxe_doc>
		</cols>
		<rows public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the color of visited links.</haxe_doc>
		</rows>
		<onafterprint public="1"><x path="haxe.Function"/></onafterprint>
		<onbeforeprint public="1"><x path="haxe.Function"/></onbeforeprint>
		<onbeforeunload public="1"><f a="">
	<c path="js.html.Event"/>
	<c path="String"/>
</f></onbeforeunload>
		<onhashchange public="1"><x path="haxe.Function"/></onhashchange>
		<onlanguagechange public="1"><x path="haxe.Function"/></onlanguagechange>
		<onmessage public="1"><x path="haxe.Function"/></onmessage>
		<onoffline public="1"><x path="haxe.Function"/></onoffline>
		<ononline public="1"><x path="haxe.Function"/></ononline>
		<onpagehide public="1"><x path="haxe.Function"/></onpagehide>
		<onpageshow public="1"><x path="haxe.Function"/></onpageshow>
		<onpopstate public="1"><x path="haxe.Function"/></onpopstate>
		<onstorage public="1"><x path="haxe.Function"/></onstorage>
		<onunload public="1"><x path="haxe.Function"/></onunload>
		<haxe_doc><![CDATA[The `HTMLFrameSetElement` interface provides special properties (beyond those of the regular `HTMLElement` interface they also inherit) for manipulating `frameset` elements.

	Documentation [HTMLFrameSetElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFrameSetElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFrameSetElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLFrameSetElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLFrameSetElement"</e></m></meta>
	</class>
	<abstract path="js.html.FrameType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FrameType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._FrameType.FrameType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FrameType.hx" private="1" module="js.html.FrameType" extern="1">
	<AUXILIARY public="1" get="inline" set="null" expr="cast &quot;auxiliary&quot;" line="29" static="1">
		<x path="js.html.FrameType"/>
		<meta>
			<m n=":value"><e>cast "auxiliary"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AUXILIARY>
	<TOP_LEVEL public="1" get="inline" set="null" expr="cast &quot;top-level&quot;" line="30" static="1">
		<x path="js.html.FrameType"/>
		<meta>
			<m n=":value"><e>cast "top-level"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TOP_LEVEL>
	<NESTED public="1" get="inline" set="null" expr="cast &quot;nested&quot;" line="31" static="1">
		<x path="js.html.FrameType"/>
		<meta>
			<m n=":value"><e>cast "nested"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NESTED>
	<NONE public="1" get="inline" set="null" expr="cast &quot;none&quot;" line="32" static="1">
		<x path="js.html.FrameType"/>
		<meta>
			<m n=":value"><e>cast "none"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NONE>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._FrameType.FrameType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/FrameType.hx" private="1" module="js.html.FrameType" extern="1">
		<AUXILIARY public="1" get="inline" set="null" expr="cast &quot;auxiliary&quot;" line="29" static="1">
			<x path="js.html.FrameType"/>
			<meta>
				<m n=":value"><e>cast "auxiliary"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AUXILIARY>
		<TOP_LEVEL public="1" get="inline" set="null" expr="cast &quot;top-level&quot;" line="30" static="1">
			<x path="js.html.FrameType"/>
			<meta>
				<m n=":value"><e>cast "top-level"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TOP_LEVEL>
		<NESTED public="1" get="inline" set="null" expr="cast &quot;nested&quot;" line="31" static="1">
			<x path="js.html.FrameType"/>
			<meta>
				<m n=":value"><e>cast "nested"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NESTED>
		<NONE public="1" get="inline" set="null" expr="cast &quot;none&quot;" line="32" static="1">
			<x path="js.html.FrameType"/>
			<meta>
				<m n=":value"><e>cast "none"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NONE>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.Gamepad" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Gamepad.hx" extern="1">
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` containing identifying information about the controller.</haxe_doc>
		</id>
		<index public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An integer that is auto-incremented to be unique for each device currently connected to the system.</haxe_doc>
		</index>
		<mapping public="1" set="null">
			<x path="js.html.GamepadMappingType"/>
			<haxe_doc>A string indicating whether the browser has remapped the controls on the device to a known layout.</haxe_doc>
		</mapping>
		<connected public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A boolean indicating whether the gamepad is still connected to the system.</haxe_doc>
		</connected>
		<buttons public="1" set="null">
			<c path="Array"><c path="js.html.GamepadButton"/></c>
			<haxe_doc>An array of `gamepadButton` objects representing the buttons present on the device.</haxe_doc>
		</buttons>
		<axes public="1" set="null">
			<c path="Array"><x path="Float"/></c>
			<haxe_doc>An array representing the controls with axes present on the device (e.g. analog thumb sticks).</haxe_doc>
		</axes>
		<timestamp public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` representing the last time the data for this gamepad was updated. Note that this property is not currently supported anywhere.</haxe_doc>
		</timestamp>
		<haxe_doc><![CDATA[The `Gamepad` interface of the Gamepad API defines an individual gamepad or other controller, allowing access to information such as button presses, axis positions, and id.

	Documentation [Gamepad](https://developer.mozilla.org/en-US/docs/Web/API/Gamepad) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Gamepad$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Gamepad>]]></haxe_doc>
		<meta><m n=":native"><e>"Gamepad"</e></m></meta>
	</class>
	<class path="js.html.GamepadButton" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/GamepadButton.hx" extern="1">
		<pressed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A boolean value indicating whether the button is currently pressed (`true`) or unpressed (`false`).</haxe_doc>
		</pressed>
		<value public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A double value used to represent the current state of analog buttons, such as the triggers on many modern gamepads. The values are normalized to the range 0.0 —1.0, with 0.0 representing a button that is not pressed, and 1.0 representing a button that is fully pressed.</haxe_doc>
		</value>
		<haxe_doc><![CDATA[The `GamepadButton` interface defines an individual button of a gamepad or other controller, allowing access to the current state of different types of buttons available on the control device.

	Documentation [GamepadButton](https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton>]]></haxe_doc>
		<meta><m n=":native"><e>"GamepadButton"</e></m></meta>
	</class>
	<abstract path="js.html.GamepadMappingType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/GamepadMappingType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._GamepadMappingType.GamepadMappingType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/GamepadMappingType.hx" private="1" module="js.html.GamepadMappingType" extern="1">
	<NONE public="1" get="inline" set="null" expr="cast &quot;&quot;" line="29" static="1">
		<x path="js.html.GamepadMappingType"/>
		<meta>
			<m n=":value"><e>cast ""</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NONE>
	<STANDARD public="1" get="inline" set="null" expr="cast &quot;standard&quot;" line="30" static="1">
		<x path="js.html.GamepadMappingType"/>
		<meta>
			<m n=":value"><e>cast "standard"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</STANDARD>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._GamepadMappingType.GamepadMappingType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/GamepadMappingType.hx" private="1" module="js.html.GamepadMappingType" extern="1">
		<NONE public="1" get="inline" set="null" expr="cast &quot;&quot;" line="29" static="1">
			<x path="js.html.GamepadMappingType"/>
			<meta>
				<m n=":value"><e>cast ""</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NONE>
		<STANDARD public="1" get="inline" set="null" expr="cast &quot;standard&quot;" line="30" static="1">
			<x path="js.html.GamepadMappingType"/>
			<meta>
				<m n=":value"><e>cast "standard"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</STANDARD>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.Geolocation" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Geolocation.hx" extern="1">
		<getCurrentPosition public="1" set="method">
			<f a="successCallback:?errorCallback:?options">
				<f a="">
					<c path="js.html.Position"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="js.html.PositionError"/>
					<x path="Void"/>
				</f>
				<t path="js.html.PositionOptions"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getCurrentPosition>
		<watchPosition public="1" set="method">
			<f a="successCallback:?errorCallback:?options">
				<f a="">
					<c path="js.html.Position"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="js.html.PositionError"/>
					<x path="Void"/>
				</f>
				<t path="js.html.PositionOptions"/>
				<x path="Int"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</watchPosition>
		<clearWatch public="1" set="method">
			<f a="watchId">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the particular handler previously installed using `watchPosition()`.</haxe_doc>
		</clearWatch>
		<haxe_doc><![CDATA[The `Geolocation` interface represents an object able to programmatically obtain the position of the device. It gives Web content access to the location of the device. This allows a Web site or app to offer customized results based on the user's location.

	Documentation [Geolocation](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Geolocation>]]></haxe_doc>
		<meta><m n=":native"><e>"Geolocation"</e></m></meta>
	</class>
	<class path="js.html.GetUserMediaRequest" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/GetUserMediaRequest.hx" extern="1">
		<windowID public="1" set="null"><x path="Int"/></windowID>
		<innerWindowID public="1" set="null"><x path="Int"/></innerWindowID>
		<callID public="1" set="null"><c path="String"/></callID>
		<isSecure public="1" set="null"><x path="Bool"/></isSecure>
		<getConstraints public="1" set="method"><f a=""><t path="js.html.MediaStreamConstraints"/></f></getConstraints>
		<meta><m n=":native"><e>"GetUserMediaRequest"</e></m></meta>
	</class>
	<class path="js.html.HRElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/HRElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1"><c path="String"/></align>
		<color public="1"><c path="String"/></color>
		<noShade public="1"><x path="Bool"/></noShade>
		<size public="1"><c path="String"/></size>
		<width public="1"><c path="String"/></width>
		<haxe_doc><![CDATA[The `HTMLHRElement` interface provides special properties (beyond those of the `HTMLElement` interface it also has available to it by inheritance) for manipulating `hr` elements.

	Documentation [HTMLHRElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLHRElement"</e></m></meta>
	</class>
	<class path="js.html.HTMLAllCollection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/HTMLAllCollection.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Node"/>
					<c path="js.html.HTMLCollection"/>
				</x>
			</f>
			<overloads><item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.Node"/>
</f></item></overloads>
		</item>
		<namedItem public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="js.html.Node"/>
		<c path="js.html.HTMLCollection"/>
	</x>
</f></namedItem>
		<meta><m n=":native"><e>"HTMLAllCollection"</e></m></meta>
	</class>
	<class path="js.html.HTMLCollection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/HTMLCollection.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of items in the collection.</haxe_doc>
		</length>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the specific node at the given zero-based `index` into the list. Returns `null` if the `index` is out of range.</haxe_doc>
		</item>
		<namedItem public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Returns the specific node whose ID or, as a fallback, name matches the string specified by `name`. Matching by name is only done as a last resort, only in HTML, and only if the referenced element supports the `name` attribute. Returns `null` if no node exists by the given name.</haxe_doc>
		</namedItem>
		<haxe_doc><![CDATA[The `HTMLCollection` interface represents a generic collection (array-like object similar to arguments) of elements (in document order) and offers methods and properties for selecting from the list.

	Documentation [HTMLCollection](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLCollection"</e></m></meta>
	</class>
	<class path="js.html.HTMLDocument" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/HTMLDocument.hx" extern="1">
		<extends path="js.html.Document"/>
		<domain public="1"><c path="String"/></domain>
		<cookie public="1"><c path="String"/></cookie>
		<body public="1"><c path="js.html.BodyElement"/></body>
		<head public="1" set="null"><c path="js.html.HeadElement"/></head>
		<images public="1" set="null"><c path="js.html.HTMLCollection"/></images>
		<embeds public="1" set="null"><c path="js.html.HTMLCollection"/></embeds>
		<plugins public="1" set="null"><c path="js.html.HTMLCollection"/></plugins>
		<links public="1" set="null"><c path="js.html.HTMLCollection"/></links>
		<forms public="1" set="null"><c path="js.html.HTMLCollection"/></forms>
		<scripts public="1" set="null"><c path="js.html.HTMLCollection"/></scripts>
		<designMode public="1"><c path="String"/></designMode>
		<fgColor public="1"><c path="String"/></fgColor>
		<linkColor public="1"><c path="String"/></linkColor>
		<vlinkColor public="1"><c path="String"/></vlinkColor>
		<alinkColor public="1"><c path="String"/></alinkColor>
		<bgColor public="1"><c path="String"/></bgColor>
		<anchors public="1" set="null"><c path="js.html.HTMLCollection"/></anchors>
		<applets public="1" set="null"><c path="js.html.HTMLCollection"/></applets>
		<all public="1" set="null"><c path="js.html.HTMLAllCollection"/></all>
		<getElementsByName public="1" set="method"><f a="elementName">
	<c path="String"/>
	<c path="js.html.NodeList"/>
</f></getElementsByName>
		<getItems public="1" set="method">
			<f a="?typeNames" v="&quot;&quot;">
				<c path="String"/>
				<c path="js.html.NodeList"/>
			</f>
			<meta><m n=":value"><e>{ typeNames : "" }</e></m></meta>
		</getItems>
		<open public="1" set="method">
			<f a="url:name:features:?replace" v=":::false">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<c path="js.html.Window"/>
			</f>
			<meta><m n=":value"><e>{ replace : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><open public="1" set="method">
	<f a="?type:?replace" v="&quot;text/html&quot;:&quot;&quot;">
		<c path="String"/>
		<c path="String"/>
		<c path="js.html.HTMLDocument"/>
	</f>
	<meta><m n=":value"><e>{ replace : "", type : "text/html" }</e></m></meta>
	<haxe_doc>@throws DOMError</haxe_doc>
</open></overloads>
		</open>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</close>
		<write public="1" set="method">
			<f a="text">
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</write>
		<writeln public="1" set="method">
			<f a="text">
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</writeln>
		<execCommand public="1" set="method">
			<f a="commandId:?showUI:?value" v=":false:&quot;&quot;">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ value : "", showUI : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</execCommand>
		<queryCommandEnabled public="1" set="method">
			<f a="commandId">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</queryCommandEnabled>
		<queryCommandIndeterm public="1" set="method">
			<f a="commandId">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</queryCommandIndeterm>
		<queryCommandState public="1" set="method">
			<f a="commandId">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</queryCommandState>
		<queryCommandSupported public="1" set="method"><f a="commandId">
	<c path="String"/>
	<x path="Bool"/>
</f></queryCommandSupported>
		<queryCommandValue public="1" set="method">
			<f a="commandId">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</queryCommandValue>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<getSelection public="1" set="method">
			<f a=""><c path="js.html.Selection"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getSelection>
		<captureEvents public="1" set="method"><f a=""><x path="Void"/></f></captureEvents>
		<releaseEvents public="1" set="method"><f a=""><x path="Void"/></f></releaseEvents>
		<createTableCellElement public="1" get="inline" set="null" line="85">
			<f a=""><c path="js.html.TableCellElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<td>` element.]]></haxe_doc>
		</createTableCellElement>
		<createHRElement public="1" get="inline" set="null" line="87">
			<f a=""><c path="js.html.HRElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<hr>` element.]]></haxe_doc>
		</createHRElement>
		<createSelectElement public="1" get="inline" set="null" line="89">
			<f a=""><c path="js.html.SelectElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<select>` element.]]></haxe_doc>
		</createSelectElement>
		<createMapElement public="1" get="inline" set="null" line="91">
			<f a=""><c path="js.html.MapElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<map>` element.]]></haxe_doc>
		</createMapElement>
		<createFormElement public="1" get="inline" set="null" line="93">
			<f a=""><c path="js.html.FormElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<form>` element.]]></haxe_doc>
		</createFormElement>
		<createOptionElement public="1" get="inline" set="null" line="95">
			<f a=""><c path="js.html.OptionElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<option>` element.]]></haxe_doc>
		</createOptionElement>
		<createLabelElement public="1" get="inline" set="null" line="97">
			<f a=""><c path="js.html.LabelElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<label>` element.]]></haxe_doc>
		</createLabelElement>
		<createMetaElement public="1" get="inline" set="null" line="99">
			<f a=""><c path="js.html.MetaElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<meta>` element.]]></haxe_doc>
		</createMetaElement>
		<createImageElement public="1" get="inline" set="null" line="101">
			<f a=""><c path="js.html.ImageElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<img>` element.]]></haxe_doc>
		</createImageElement>
		<createDListElement public="1" get="inline" set="null" line="103">
			<f a=""><c path="js.html.DListElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<dl>` element.]]></haxe_doc>
		</createDListElement>
		<createFrameElement public="1" get="inline" set="null" line="105">
			<f a=""><c path="js.html.FrameElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<frame>` element.]]></haxe_doc>
		</createFrameElement>
		<createModElement public="1" get="inline" set="null" line="107">
			<f a=""><c path="js.html.ModElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<mod>` element.]]></haxe_doc>
		</createModElement>
		<createUListElement public="1" get="inline" set="null" line="109">
			<f a=""><c path="js.html.UListElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<ul>` element.]]></haxe_doc>
		</createUListElement>
		<createOutputElement public="1" get="inline" set="null" line="111">
			<f a=""><c path="js.html.OutputElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<output>` element.]]></haxe_doc>
		</createOutputElement>
		<createOListElement public="1" get="inline" set="null" line="113">
			<f a=""><c path="js.html.OListElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<ol>` element.]]></haxe_doc>
		</createOListElement>
		<createShadowElement public="1" get="inline" set="null" line="115">
			<f a=""><c path="js.html.ShadowElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<shadow>` element.]]></haxe_doc>
		</createShadowElement>
		<createLIElement public="1" get="inline" set="null" line="117">
			<f a=""><c path="js.html.LIElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<li>` element.]]></haxe_doc>
		</createLIElement>
		<createDataListElement public="1" get="inline" set="null" line="119">
			<f a=""><c path="js.html.DataListElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<datalist>` element.]]></haxe_doc>
		</createDataListElement>
		<createParamElement public="1" get="inline" set="null" line="121">
			<f a=""><c path="js.html.ParamElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<param>` element.]]></haxe_doc>
		</createParamElement>
		<createFontElement public="1" get="inline" set="null" line="123">
			<f a=""><c path="js.html.FontElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<font>` element.]]></haxe_doc>
		</createFontElement>
		<createTrackElement public="1" get="inline" set="null" line="125">
			<f a=""><c path="js.html.TrackElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<track>` element.]]></haxe_doc>
		</createTrackElement>
		<createAppletElement public="1" get="inline" set="null" line="127">
			<f a=""><c path="js.html.AppletElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<applet>` element.]]></haxe_doc>
		</createAppletElement>
		<createAreaElement public="1" get="inline" set="null" line="129">
			<f a=""><c path="js.html.AreaElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<area>` element.]]></haxe_doc>
		</createAreaElement>
		<createLinkElement public="1" get="inline" set="null" line="131">
			<f a=""><c path="js.html.LinkElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<link>` element.]]></haxe_doc>
		</createLinkElement>
		<createDivElement public="1" get="inline" set="null" line="133">
			<f a=""><c path="js.html.DivElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<div>` element.]]></haxe_doc>
		</createDivElement>
		<createTitleElement public="1" get="inline" set="null" line="135">
			<f a=""><c path="js.html.TitleElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<title>` element.]]></haxe_doc>
		</createTitleElement>
		<createStyleElement public="1" get="inline" set="null" line="137">
			<f a=""><c path="js.html.StyleElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<style>` element.]]></haxe_doc>
		</createStyleElement>
		<createProgressElement public="1" get="inline" set="null" line="139">
			<f a=""><c path="js.html.ProgressElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<progress>` element.]]></haxe_doc>
		</createProgressElement>
		<createButtonElement public="1" get="inline" set="null" line="141">
			<f a=""><c path="js.html.ButtonElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<button>` element.]]></haxe_doc>
		</createButtonElement>
		<createFieldSetElement public="1" get="inline" set="null" line="143">
			<f a=""><c path="js.html.FieldSetElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<fieldset>` element.]]></haxe_doc>
		</createFieldSetElement>
		<createAnchorElement public="1" get="inline" set="null" line="145">
			<f a=""><c path="js.html.AnchorElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<a>` element.]]></haxe_doc>
		</createAnchorElement>
		<createIFrameElement public="1" get="inline" set="null" line="147">
			<f a=""><c path="js.html.IFrameElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<iframe>` element.]]></haxe_doc>
		</createIFrameElement>
		<createSpanElement public="1" get="inline" set="null" line="149">
			<f a=""><c path="js.html.SpanElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<span>` element.]]></haxe_doc>
		</createSpanElement>
		<createBodyElement public="1" get="inline" set="null" line="151">
			<f a=""><c path="js.html.BodyElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<body>` element.]]></haxe_doc>
		</createBodyElement>
		<createInputElement public="1" get="inline" set="null" line="153">
			<f a=""><c path="js.html.InputElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<input>` element.]]></haxe_doc>
		</createInputElement>
		<createEmbedElement public="1" get="inline" set="null" line="155">
			<f a=""><c path="js.html.EmbedElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<embed>` element.]]></haxe_doc>
		</createEmbedElement>
		<createMeterElement public="1" get="inline" set="null" line="157">
			<f a=""><c path="js.html.MeterElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<meter>` element.]]></haxe_doc>
		</createMeterElement>
		<createPictureElement public="1" get="inline" set="null" line="159">
			<f a=""><c path="js.html.PictureElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<picture>` element.]]></haxe_doc>
		</createPictureElement>
		<createPreElement public="1" get="inline" set="null" line="161">
			<f a=""><c path="js.html.PreElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<pre>` element.]]></haxe_doc>
		</createPreElement>
		<createTableSectionElement public="1" get="inline" set="null" line="163">
			<f a=""><c path="js.html.TableSectionElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<thead>` element.]]></haxe_doc>
		</createTableSectionElement>
		<createHeadElement public="1" get="inline" set="null" line="165">
			<f a=""><c path="js.html.HeadElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<head>` element.]]></haxe_doc>
		</createHeadElement>
		<createBaseElement public="1" get="inline" set="null" line="167">
			<f a=""><c path="js.html.BaseElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<base>` element.]]></haxe_doc>
		</createBaseElement>
		<createOptGroupElement public="1" get="inline" set="null" line="169">
			<f a=""><c path="js.html.OptGroupElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<optgroup>` element.]]></haxe_doc>
		</createOptGroupElement>
		<createQuoteElement public="1" get="inline" set="null" line="171">
			<f a=""><c path="js.html.QuoteElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<quote>` element.]]></haxe_doc>
		</createQuoteElement>
		<createAudioElement public="1" get="inline" set="null" line="173">
			<f a=""><c path="js.html.AudioElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<audio>` element.]]></haxe_doc>
		</createAudioElement>
		<createVideoElement public="1" get="inline" set="null" line="175">
			<f a=""><c path="js.html.VideoElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<video>` element.]]></haxe_doc>
		</createVideoElement>
		<createLegendElement public="1" get="inline" set="null" line="177">
			<f a=""><c path="js.html.LegendElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<legend>` element.]]></haxe_doc>
		</createLegendElement>
		<createMenuElement public="1" get="inline" set="null" line="179">
			<f a=""><c path="js.html.MenuElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<menu>` element.]]></haxe_doc>
		</createMenuElement>
		<createFrameSetElement public="1" get="inline" set="null" line="181">
			<f a=""><c path="js.html.FrameSetElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<frameset>` element.]]></haxe_doc>
		</createFrameSetElement>
		<createCanvasElement public="1" get="inline" set="null" line="183">
			<f a=""><c path="js.html.CanvasElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<canvas>` element.]]></haxe_doc>
		</createCanvasElement>
		<createParagraphElement public="1" get="inline" set="null" line="185">
			<f a=""><c path="js.html.ParagraphElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<p>` element.]]></haxe_doc>
		</createParagraphElement>
		<createTableColElement public="1" get="inline" set="null" line="187">
			<f a=""><c path="js.html.TableColElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<col>` element.]]></haxe_doc>
		</createTableColElement>
		<createDirectoryElement public="1" get="inline" set="null" line="189">
			<f a=""><c path="js.html.DirectoryElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<dir>` element.]]></haxe_doc>
		</createDirectoryElement>
		<createTableElement public="1" get="inline" set="null" line="191">
			<f a=""><c path="js.html.TableElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<table>` element.]]></haxe_doc>
		</createTableElement>
		<createTableRowElement public="1" get="inline" set="null" line="193">
			<f a=""><c path="js.html.TableRowElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<tr>` element.]]></haxe_doc>
		</createTableRowElement>
		<createScriptElement public="1" get="inline" set="null" line="195">
			<f a=""><c path="js.html.ScriptElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<script>` element.]]></haxe_doc>
		</createScriptElement>
		<createSourceElement public="1" get="inline" set="null" line="197">
			<f a=""><c path="js.html.SourceElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<source>` element.]]></haxe_doc>
		</createSourceElement>
		<createContentElement public="1" get="inline" set="null" line="199">
			<f a=""><c path="js.html.ContentElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<content>` element.]]></haxe_doc>
		</createContentElement>
		<createBRElement public="1" get="inline" set="null" line="201">
			<f a=""><c path="js.html.BRElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<br>` element.]]></haxe_doc>
		</createBRElement>
		<createHtmlElement public="1" get="inline" set="null" line="203">
			<f a=""><c path="js.html.HtmlElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<html>` element.]]></haxe_doc>
		</createHtmlElement>
		<createTextAreaElement public="1" get="inline" set="null" line="205">
			<f a=""><c path="js.html.TextAreaElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<textarea>` element.]]></haxe_doc>
		</createTextAreaElement>
		<createMediaElement public="1" get="inline" set="null" line="207">
			<f a=""><c path="js.html.MediaElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<media>` element.]]></haxe_doc>
		</createMediaElement>
		<createObjectElement public="1" get="inline" set="null" line="209">
			<f a=""><c path="js.html.ObjectElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<object>` element.]]></haxe_doc>
		</createObjectElement>
		<createTableCaptionElement public="1" get="inline" set="null" line="211">
			<f a=""><c path="js.html.TableCaptionElement"/></f>
			<haxe_doc><![CDATA[Shorthand for creating an HTML `<caption>` element.]]></haxe_doc>
		</createTableCaptionElement>
		<haxe_doc><![CDATA[`HTMLDocument` is an abstract interface of the DOM which provides access to special properties and methods not present by default on a regular (XML) document.

	Documentation [HTMLDocument](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDocument) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDocument$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLDocument>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLDocument"</e></m></meta>
	</class>
	<class path="js.html.HTMLFormControlsCollection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/HTMLFormControlsCollection.hx" extern="1">
		<extends path="js.html.HTMLCollection"/>
		<haxe_doc><![CDATA[The `HTMLFormControlsCollection` interface represents a collection of HTML form control elements. It replaces one method of `HTMLCollection`.

	Documentation [HTMLFormControlsCollection](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormControlsCollection) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormControlsCollection$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormControlsCollection>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLFormControlsCollection"</e></m></meta>
	</class>
	<class path="js.html.HTMLOptionsCollection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/HTMLOptionsCollection.hx" extern="1">
		<extends path="js.html.HTMLCollection"/>
		<selectedIndex public="1"><x path="Int"/></selectedIndex>
		<add public="1" set="method">
			<f a="element:?before">
				<x path="haxe.extern.EitherType">
					<c path="js.html.OptionElement"/>
					<c path="js.html.OptGroupElement"/>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Element"/>
					<x path="Int"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</add>
		<remove public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</remove>
		<haxe_doc><![CDATA[`HTMLOptionsCollection` is an interface representing a collection of HTML option elements (in document order) and offers methods and properties for traversing the list as well as optionally altering its items. This type is returned solely by the "options" property of select.

	Documentation [HTMLOptionsCollection](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOptionsCollection"</e></m></meta>
	</class>
	<class path="js.html.HTMLPropertiesCollection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/HTMLPropertiesCollection.hx" extern="1">
		<extends path="js.html.HTMLCollection"/>
		<names public="1" set="null"><c path="js.html.DOMStringList"/></names>
		<meta><m n=":native"><e>"HTMLPropertiesCollection"</e></m></meta>
	</class>
	<class path="js.html.HashChangeEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/HashChangeEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<oldURL public="1" set="null"><c path="String"/></oldURL>
		<newURL public="1" set="null"><c path="String"/></newURL>
		<initHashChangeEvent public="1" set="method"><f a="typeArg:canBubbleArg:cancelableArg:oldURLArg:newURLArg">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></initHashChangeEvent>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<t path="js.html.HashChangeEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `hashchange` event is fired when the fragment identifier of the URL has changed (the part of the URL that follows the # symbol, including the # symbol).

	Documentation [HashChangeEvent](https://developer.mozilla.org/en-US/docs/Web/API/HashChangeEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HashChangeEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HashChangeEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"HashChangeEvent"</e></m></meta>
	</class>
	<typedef path="js.html.HashChangeEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/HashChangeEventInit.hx"><a>
	<oldURL>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</oldURL>
	<newURL>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</newURL>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.HeadElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/HeadElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<haxe_doc><![CDATA[The `HTMLHeadElement` interface contains the descriptive information, or metadata, for a document. This object inherits all of the properties and methods described in the `HTMLElement` interface.

	Documentation [HTMLHeadElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLHeadElement"</e></m></meta>
	</class>
	<class path="js.html.Headers" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Headers.hx" extern="1">
		<append public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</append>
		<delete_ public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"delete"</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</delete_>
		<get public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</get>
		<getAll public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getAll>
		<has public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</has>
		<set public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</set>
		<entries public="1" set="method">
			<f a=""><c path="js.html.HeadersIterator"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><c path="js.html.HeadersIterator"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><c path="js.html.HeadersIterator"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</forEach>
		<new public="1" set="method">
			<f a="?init">
				<x path="haxe.extern.EitherType">
					<c path="js.html.Headers"/>
					<x path="haxe.extern.EitherType">
						<c path="Array"><c path="Array"><c path="String"/></c></c>
						<d/>
					</x>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Headers` interface of the Fetch API allows you to perform various actions on HTTP request and response headers. These actions include retrieving, setting, adding to, and removing. A `Headers` object has an associated header list, which is initially empty and consists of zero or more name and value pairs.  You can add to this using methods like `append()` (see Examples.) In all methods of this interface, header names are matched by case-insensitive byte sequence.

	Documentation [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Headers$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Headers>]]></haxe_doc>
		<meta><m n=":native"><e>"Headers"</e></m></meta>
	</class>
	<class path="js.html.HeadersIterator" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/HeadersIterator.hx" extern="1">
		<next public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</next>
		<meta><m n=":native"><e>"HeadersIterator"</e></m></meta>
	</class>
	<class path="js.html.HeadingElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/HeadingElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing an enumerated attribute indicating alignment of the heading with respect to the surrounding context.</haxe_doc>
		</align>
		<haxe_doc><![CDATA[The `HTMLHeadingElement` interface represents the different heading elements. It inherits methods and properties from the `HTMLElement` interface.

	Documentation [HTMLHeadingElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadingElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadingElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadingElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLHeadingElement"</e></m></meta>
	</class>
	<class path="js.html.History" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/History.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `Integer` representing the number of elements in the session history, including the currently loaded page. For example, for a page loaded in a new tab this property returns `1`.</haxe_doc>
		</length>
		<scrollRestoration public="1">
			<x path="js.html.ScrollRestoration"/>
			<haxe_doc>Allows web applications to explicitly set default scroll restoration behavior on history navigation. This property can be either `auto` or `manual`.</haxe_doc>
		</scrollRestoration>
		<state public="1" set="null">
			<d/>
			<haxe_doc>Returns an `any` value representing the state at the top of the history stack. This is a way to look at the state without having to wait for a `popstate` event.</haxe_doc>
		</state>
		<go public="1" set="method">
			<f a="?delta" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ delta : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</go>
		<back public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</back>
		<forward public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</forward>
		<pushState public="1" set="method">
			<f a="data:title:?url">
				<d/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</pushState>
		<replaceState public="1" set="method">
			<f a="data:title:?url">
				<d/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</replaceState>
		<haxe_doc><![CDATA[The `History` interface allows to manipulate the browser session history, that is the pages visited in the tab or frame that the current page is loaded in.

	Documentation [History](https://developer.mozilla.org/en-US/docs/Web/API/History) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/History$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/History>]]></haxe_doc>
		<meta><m n=":native"><e>"History"</e></m></meta>
	</class>
	<typedef path="js.html.HitRegionOptions" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/HitRegionOptions.hx"><a>
	<path>
		<t path="Null"><c path="js.html.Path2D"/></t>
		<meta><m n=":optional"/></meta>
	</path>
	<id>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</id>
	<control>
		<t path="Null"><c path="js.html.Element"/></t>
		<meta><m n=":optional"/></meta>
	</control>
</a></typedef>
	<class path="js.html.HtmlElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/HtmlElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<version public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the version of the HTML Document Type Definition (DTD) that governs this document. This property should not be used any more as it is non-conforming. Simply omit it.</haxe_doc>
		</version>
		<haxe_doc><![CDATA[The `HTMLHtmlElement` interface serves as the root node for a given HTML document.  This object inherits the properties and methods described in the `HTMLElement` interface.

	Documentation [HTMLHtmlElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLHtmlElement"</e></m></meta>
	</class>
	<class path="js.html.IFrameElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/IFrameElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `src` HTML attribute, containing the address of the content to be embedded.</haxe_doc>
		</src>
		<srcdoc public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that represents the content to display in the frame.</haxe_doc>
		</srcdoc>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `name` HTML attribute, containing a name by which to refer to the frame.</haxe_doc>
		</name>
		<sandbox public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Is a `DOMSettableTokenList` that reflects the `sandbox` HTML attribute, indicating extra restrictions on the behavior of the nested content.</haxe_doc>
		</sandbox>
		<allowFullscreen public="1"><x path="Bool"/></allowFullscreen>
		<width public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `width` HTML attribute, indicating the width of the frame.</haxe_doc>
		</width>
		<height public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `height` HTML attribute, indicating the height of the frame.</haxe_doc>
		</height>
		<contentDocument public="1" set="null">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Returns a `Document`, the active document in the inline frame's nested browsing context.</haxe_doc>
		</contentDocument>
		<contentWindow public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a `WindowProxy`, the window proxy for the nested browsing context.</haxe_doc>
		</contentWindow>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that specifies the alignment of the frame with respect to the surrounding context.</haxe_doc>
		</align>
		<scrolling public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that indicates whether the browser should provide scrollbars for the frame.</haxe_doc>
		</scrolling>
		<frameBorder public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that indicates whether to create borders between frames.</haxe_doc>
		</frameBorder>
		<longDesc public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that contains the URI of a long description of the frame.</haxe_doc>
		</longDesc>
		<marginHeight public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` being the height of the frame margin.</haxe_doc>
		</marginHeight>
		<marginWidth public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` being the width of the frame margin.</haxe_doc>
		</marginWidth>
		<getSVGDocument public="1" set="method"><f a=""><c path="js.html.HTMLDocument"/></f></getSVGDocument>
		<haxe_doc><![CDATA[The `HTMLIFrameElement` interface provides special properties and methods (beyond those of the `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of inline frame elements.

	Documentation [HTMLIFrameElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLIFrameElement"</e></m></meta>
	</class>
	<class path="js.html.ImageElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ImageElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<alt public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `alt` HTML attribute,  thus indicating fallback context for the image.</haxe_doc>
		</alt>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `src` HTML attribute, containing the full URL of the image including base URI.</haxe_doc>
		</src>
		<srcset public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `srcset` HTML attribute, containing a list of candidate images, separated by a comma (`',', U+002C COMMA`). A candidate image is a URL followed by a `'w'` with the width of the images, or an `'x'` followed by the pixel density.</haxe_doc>
		</srcset>
		<crossOrigin public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the CORS setting for this image element. See CORS settings attributes for further details.</haxe_doc>
		</crossOrigin>
		<useMap public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `usemap` HTML attribute, containing a partial URL of a map element.</haxe_doc>
		</useMap>
		<isMap public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `ismap` HTML attribute, indicating that the image is part of a server-side image map.</haxe_doc>
		</isMap>
		<width public="1">
			<x path="Int"/>
			<haxe_doc>Is a `unsigned long` that reflects the `width` HTML attribute, indicating the rendered width of the image in CSS pixels.</haxe_doc>
		</width>
		<height public="1">
			<x path="Int"/>
			<haxe_doc>Is a `unsigned long` that reflects the `height` HTML attribute, indicating the rendered height of the image in CSS pixels.</haxe_doc>
		</height>
		<naturalWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `unsigned long` representing the intrinsic width of the image in CSS pixels, if it is available; otherwise, it will show `0`.</haxe_doc>
		</naturalWidth>
		<naturalHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `unsigned long` representing the intrinsic height of the image in CSS pixels, if it is available; else, it shows `0`.</haxe_doc>
		</naturalHeight>
		<complete public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that is `true` if the browser has finished fetching the image, whether successful or not. It also shows true, if the image has no `HTMLImageElement.src` value.</haxe_doc>
		</complete>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of the element.</haxe_doc>
		</name>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` indicating the alignment of the image with respect to the surrounding context.</haxe_doc>
		</align>
		<hspace public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` representing the space on either side of the image.</haxe_doc>
		</hspace>
		<vspace public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` representing the space above and below the image.</haxe_doc>
		</vspace>
		<longDesc public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the URI of a long description of the image.</haxe_doc>
		</longDesc>
		<border public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that is responsible for the width of the border surrounding the image. This is now deprecated and the CSS `border` property should be used instead.</haxe_doc>
		</border>
		<sizes public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `sizes` HTML attribute.</haxe_doc>
		</sizes>
		<currentSrc public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the URL to the currently displayed image (which may change, for example in response to media queries).</haxe_doc>
		</currentSrc>
		<lowsrc public="1"><c path="String"/></lowsrc>
		<x public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` representing the horizontal offset from the nearest layer. This property mimics an old Netscape 4 behavior.</haxe_doc>
		</x>
		<y public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` representing the vertical offset from the nearest layer. This property is also similar to behavior of an old Netscape 4.</haxe_doc>
		</y>
		<haxe_doc><![CDATA[The `HTMLImageElement` interface provides special properties and methods  for manipulating the layout and presentation of `img` elements.

	Documentation [HTMLImageElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLImageElement"</e></m></meta>
	</class>
	<class path="js.html.Image" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Image.hx" extern="1">
		<extends path="js.html.ImageElement"/>
		<new public="1" set="method">
			<f a="?width:?height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Image"</e></m></meta>
	</class>
	<class path="js.html.ImageBitmap" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ImageBitmap.hx" extern="1">
		<width public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned` `long` representing the width, in CSS pixels, of the `ImageData`.</haxe_doc>
		</width>
		<height public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned` `long` representing the height, in CSS pixels, of the `ImageData`.</haxe_doc>
		</height>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Disposes of all graphical resources associated with an `ImageBitmap`.</haxe_doc>
		</close>
		<haxe_doc><![CDATA[The `ImageBitmap` interface represents a bitmap image which can be drawn to a `canvas` without undue latency. It can be created from a variety of source objects using the `createImageBitmap()` factory method. `ImageBitmap` provides an asynchronous and resource efficient pathway to prepare textures for rendering in WebGL.

	Documentation [ImageBitmap](https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap>]]></haxe_doc>
		<meta><m n=":native"><e>"ImageBitmap"</e></m></meta>
	</class>
	<class path="js.html.ImageBitmapRenderingContext" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ImageBitmapRenderingContext.hx" extern="1">
		<transferImageBitmap public="1" set="method">
			<f a="bitmap">
				<c path="js.html.ImageBitmap"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Displays the given `ImageBitmap` in the canvas associated with this rendering context. Ownership of the `ImageBitmap` is transferred to the canvas.</haxe_doc>
		</transferImageBitmap>
		<haxe_doc><![CDATA[The `ImageBitmapRenderingContext` interface is a canvas rendering context which only provides the functionality to replace the canvas's contents with the given `ImageBitmap`. Its context id (the first argument to `HTMLCanvasElement.getContext()` or `OffscreenCanvas.getContext()`  is `"bitmaprenderer"`.

	Documentation [ImageBitmapRenderingContext](https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmapRenderingContext) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmapRenderingContext$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmapRenderingContext>]]></haxe_doc>
		<meta><m n=":native"><e>"ImageBitmapRenderingContext"</e></m></meta>
	</class>
	<class path="js.html.ImageCapture" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ImageCapture.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<videoStreamTrack public="1" set="null"><c path="js.html.VideoStreamTrack"/></videoStreamTrack>
		<onphoto public="1"><x path="haxe.Function"/></onphoto>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<takePhoto public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</takePhoto>
		<new public="1" set="method">
			<f a="track">
				<c path="js.html.VideoStreamTrack"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"ImageCapture"</e></m></meta>
	</class>
	<class path="js.html.ImageData" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ImageData.hx" extern="1">
		<width public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned` `long` representing the actual width, in pixels, of the `ImageData`.</haxe_doc>
		</width>
		<height public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned` `long` representing the actual height, in pixels, of the `ImageData`.</haxe_doc>
		</height>
		<data public="1" set="null">
			<c path="js.html.Uint8ClampedArray"/>
			<haxe_doc>Is a `Uint8ClampedArray` representing a one-dimensional array containing the data in the RGBA order, with integer values between `0` and `255` (included).</haxe_doc>
		</data>
		<new public="1" set="method">
			<f a="data:sw:?sh">
				<c path="js.html.Uint8ClampedArray"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="sw:sh">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[The `ImageData` interface represents the underlying pixel data of an area of a `canvas` element. It is created using the `ImageData()` constructor or creator methods on the `CanvasRenderingContext2D` object associated with a canvas: `createImageData()` and `getImageData()`. It can also be used to set a part of the canvas by using `putImageData()`.

	Documentation [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ImageData$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ImageData>]]></haxe_doc>
		<meta><m n=":native"><e>"ImageData"</e></m></meta>
	</class>
	<class path="js.html.InputElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/InputElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<accept public="1"><c path="String"/></accept>
		<alt public="1"><c path="String"/></alt>
		<autocomplete public="1"><c path="String"/></autocomplete>
		<autofocus public="1"><x path="Bool"/></autofocus>
		<defaultChecked public="1"><x path="Bool"/></defaultChecked>
		<checked public="1"><x path="Bool"/></checked>
		<disabled public="1"><x path="Bool"/></disabled>
		<form public="1" set="null"><c path="js.html.FormElement"/></form>
		<files public="1" set="null"><c path="js.html.FileList"/></files>
		<formAction public="1"><c path="String"/></formAction>
		<formEnctype public="1"><c path="String"/></formEnctype>
		<formMethod public="1"><c path="String"/></formMethod>
		<formNoValidate public="1"><x path="Bool"/></formNoValidate>
		<formTarget public="1"><c path="String"/></formTarget>
		<height public="1"><x path="Int"/></height>
		<indeterminate public="1"><x path="Bool"/></indeterminate>
		<list public="1" set="null"><c path="js.html.Element"/></list>
		<max public="1"><c path="String"/></max>
		<maxLength public="1"><x path="Int"/></maxLength>
		<min public="1"><c path="String"/></min>
		<multiple public="1"><x path="Bool"/></multiple>
		<name public="1"><c path="String"/></name>
		<pattern public="1"><c path="String"/></pattern>
		<placeholder public="1"><c path="String"/></placeholder>
		<readOnly public="1"><x path="Bool"/></readOnly>
		<required public="1"><x path="Bool"/></required>
		<size public="1"><x path="Int"/></size>
		<src public="1"><c path="String"/></src>
		<step public="1"><c path="String"/></step>
		<type public="1"><c path="String"/></type>
		<defaultValue public="1"><c path="String"/></defaultValue>
		<value public="1"><c path="String"/></value>
		<valueAsNumber public="1"><x path="Float"/></valueAsNumber>
		<width public="1"><x path="Int"/></width>
		<willValidate public="1" set="null"><x path="Bool"/></willValidate>
		<validity public="1" set="null"><c path="js.html.ValidityState"/></validity>
		<validationMessage public="1" set="null"><c path="String"/></validationMessage>
		<selectionStart public="1"><x path="Int"/></selectionStart>
		<selectionEnd public="1"><x path="Int"/></selectionEnd>
		<selectionDirection public="1"><c path="String"/></selectionDirection>
		<align public="1">
			<c path="String"/>
			<haxe_doc>`string:` represents the alignment of the element. Use CSS instead.</haxe_doc>
		</align>
		<useMap public="1">
			<c path="String"/>
			<haxe_doc>`string:` represents a client-side image map.</haxe_doc>
		</useMap>
		<textLength public="1" set="null"><x path="Int"/></textLength>
		<stepUp public="1" set="method">
			<f a="?n" v="1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ n : 1 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</stepUp>
		<stepDown public="1" set="method">
			<f a="?n" v="1">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ n : 1 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</stepDown>
		<checkValidity public="1" set="method"><f a=""><x path="Bool"/></f></checkValidity>
		<setCustomValidity public="1" set="method"><f a="error">
	<c path="String"/>
	<x path="Void"/>
</f></setCustomValidity>
		<select public="1" set="method"><f a=""><x path="Void"/></f></select>
		<setRangeText public="1" set="method">
			<f a="replacement:start:end:?selectionMode" v=":::&quot;preserve&quot;">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="js.html.SelectionMode"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ selectionMode : "preserve" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setRangeText public="1" set="method">
	<f a="replacement">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</setRangeText></overloads>
		</setRangeText>
		<setSelectionRange public="1" set="method">
			<f a="start:end:?direction">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setSelectionRange>
		<haxe_doc><![CDATA[The `HTMLInputElement` interface provides special properties and methods for manipulating the layout and presentation of input elements.

	Documentation [HTMLInputElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLInputElement"</e></m></meta>
	</class>
	<class path="js.html.InputEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/InputEvent.hx" extern="1">
		<extends path="js.html.UIEvent"/>
		<isComposing public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` value indicating if the event is fired after `compositionstart` and before `compositionend`.</haxe_doc>
		</isComposing>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<t path="js.html.InputEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `InputEvent` interface represents an event notifying of editable content change.

	Documentation [InputEvent](https://developer.mozilla.org/en-US/docs/Web/API/InputEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/InputEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/InputEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"InputEvent"</e></m></meta>
	</class>
	<typedef path="js.html.InputEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/InputEventInit.hx"><a>
	<view>
		<t path="Null"><c path="js.html.Window"/></t>
		<meta><m n=":optional"/></meta>
	</view>
	<isComposing>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</isComposing>
	<detail>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</detail>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.Int16Array" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Int16Array.hx" extern="1">
		<extends path="js.html.ArrayBufferView"/>
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" set="null"><x path="Int"/></length>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><set public="1" set="method"><f a="array:?offset">
	<c path="js.html.Int16Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set></overloads>
		</set>
		<subarray public="1" set="method"><f a="start:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.Int16Array"/>
</f></subarray>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.html.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array">
						<c path="js.html.Int16Array"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array">
						<c path="Array"><x path="Int"/></c>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<meta><m n=":native"><e>"Int16Array"</e></m></meta>
	</class>
	<class path="js.html.Int32Array" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Int32Array.hx" extern="1">
		<extends path="js.html.ArrayBufferView"/>
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" set="null"><x path="Int"/></length>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><set public="1" set="method"><f a="array:?offset">
	<c path="js.html.Int32Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set></overloads>
		</set>
		<subarray public="1" set="method"><f a="start:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.Int32Array"/>
</f></subarray>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.html.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array">
						<c path="js.html.Int32Array"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array">
						<c path="Array"><x path="Int"/></c>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<meta><m n=":native"><e>"Int32Array"</e></m></meta>
	</class>
	<class path="js.html.Int8Array" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Int8Array.hx" extern="1">
		<extends path="js.html.ArrayBufferView"/>
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" set="null"><x path="Int"/></length>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><set public="1" set="method"><f a="array:?offset">
	<c path="js.html.Int8Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set></overloads>
		</set>
		<subarray public="1" set="method"><f a="start:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.Int8Array"/>
</f></subarray>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.html.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array">
						<c path="js.html.Int8Array"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array">
						<c path="Array"><x path="Int"/></c>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<meta><m n=":native"><e>"Int8Array"</e></m></meta>
	</class>
	<abstract path="js.html.IterationCompositeOperation" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/IterationCompositeOperation.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._IterationCompositeOperation.IterationCompositeOperation_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/IterationCompositeOperation.hx" private="1" module="js.html.IterationCompositeOperation" extern="1">
	<REPLACE public="1" get="inline" set="null" expr="cast &quot;replace&quot;" line="29" static="1">
		<x path="js.html.IterationCompositeOperation"/>
		<meta>
			<m n=":value"><e>cast "replace"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</REPLACE>
	<ACCUMULATE public="1" get="inline" set="null" expr="cast &quot;accumulate&quot;" line="30" static="1">
		<x path="js.html.IterationCompositeOperation"/>
		<meta>
			<m n=":value"><e>cast "accumulate"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ACCUMULATE>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._IterationCompositeOperation.IterationCompositeOperation_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/IterationCompositeOperation.hx" private="1" module="js.html.IterationCompositeOperation" extern="1">
		<REPLACE public="1" get="inline" set="null" expr="cast &quot;replace&quot;" line="29" static="1">
			<x path="js.html.IterationCompositeOperation"/>
			<meta>
				<m n=":value"><e>cast "replace"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</REPLACE>
		<ACCUMULATE public="1" get="inline" set="null" expr="cast &quot;accumulate&quot;" line="30" static="1">
			<x path="js.html.IterationCompositeOperation"/>
			<meta>
				<m n=":value"><e>cast "accumulate"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ACCUMULATE>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.KeyEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/KeyEvent.hx" extern="1">
		<DOM_VK_CANCEL public="1" get="inline" set="null" expr="3" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</DOM_VK_CANCEL>
		<DOM_VK_HELP public="1" get="inline" set="null" expr="6" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</DOM_VK_HELP>
		<DOM_VK_BACK_SPACE public="1" get="inline" set="null" expr="8" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</DOM_VK_BACK_SPACE>
		<DOM_VK_TAB public="1" get="inline" set="null" expr="9" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</DOM_VK_TAB>
		<DOM_VK_CLEAR public="1" get="inline" set="null" expr="12" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</DOM_VK_CLEAR>
		<DOM_VK_RETURN public="1" get="inline" set="null" expr="13" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>13</e></m></meta>
		</DOM_VK_RETURN>
		<DOM_VK_SHIFT public="1" get="inline" set="null" expr="16" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</DOM_VK_SHIFT>
		<DOM_VK_CONTROL public="1" get="inline" set="null" expr="17" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>17</e></m></meta>
		</DOM_VK_CONTROL>
		<DOM_VK_ALT public="1" get="inline" set="null" expr="18" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>18</e></m></meta>
		</DOM_VK_ALT>
		<DOM_VK_PAUSE public="1" get="inline" set="null" expr="19" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>19</e></m></meta>
		</DOM_VK_PAUSE>
		<DOM_VK_CAPS_LOCK public="1" get="inline" set="null" expr="20" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>20</e></m></meta>
		</DOM_VK_CAPS_LOCK>
		<DOM_VK_KANA public="1" get="inline" set="null" expr="21" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>21</e></m></meta>
		</DOM_VK_KANA>
		<DOM_VK_HANGUL public="1" get="inline" set="null" expr="21" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>21</e></m></meta>
		</DOM_VK_HANGUL>
		<DOM_VK_EISU public="1" get="inline" set="null" expr="22" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>22</e></m></meta>
		</DOM_VK_EISU>
		<DOM_VK_JUNJA public="1" get="inline" set="null" expr="23" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>23</e></m></meta>
		</DOM_VK_JUNJA>
		<DOM_VK_FINAL public="1" get="inline" set="null" expr="24" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>24</e></m></meta>
		</DOM_VK_FINAL>
		<DOM_VK_HANJA public="1" get="inline" set="null" expr="25" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>25</e></m></meta>
		</DOM_VK_HANJA>
		<DOM_VK_KANJI public="1" get="inline" set="null" expr="25" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>25</e></m></meta>
		</DOM_VK_KANJI>
		<DOM_VK_ESCAPE public="1" get="inline" set="null" expr="27" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>27</e></m></meta>
		</DOM_VK_ESCAPE>
		<DOM_VK_CONVERT public="1" get="inline" set="null" expr="28" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>28</e></m></meta>
		</DOM_VK_CONVERT>
		<DOM_VK_NONCONVERT public="1" get="inline" set="null" expr="29" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>29</e></m></meta>
		</DOM_VK_NONCONVERT>
		<DOM_VK_ACCEPT public="1" get="inline" set="null" expr="30" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>30</e></m></meta>
		</DOM_VK_ACCEPT>
		<DOM_VK_MODECHANGE public="1" get="inline" set="null" expr="31" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>31</e></m></meta>
		</DOM_VK_MODECHANGE>
		<DOM_VK_SPACE public="1" get="inline" set="null" expr="32" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32</e></m></meta>
		</DOM_VK_SPACE>
		<DOM_VK_PAGE_UP public="1" get="inline" set="null" expr="33" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33</e></m></meta>
		</DOM_VK_PAGE_UP>
		<DOM_VK_PAGE_DOWN public="1" get="inline" set="null" expr="34" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34</e></m></meta>
		</DOM_VK_PAGE_DOWN>
		<DOM_VK_END public="1" get="inline" set="null" expr="35" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35</e></m></meta>
		</DOM_VK_END>
		<DOM_VK_HOME public="1" get="inline" set="null" expr="36" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36</e></m></meta>
		</DOM_VK_HOME>
		<DOM_VK_LEFT public="1" get="inline" set="null" expr="37" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37</e></m></meta>
		</DOM_VK_LEFT>
		<DOM_VK_UP public="1" get="inline" set="null" expr="38" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>38</e></m></meta>
		</DOM_VK_UP>
		<DOM_VK_RIGHT public="1" get="inline" set="null" expr="39" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>39</e></m></meta>
		</DOM_VK_RIGHT>
		<DOM_VK_DOWN public="1" get="inline" set="null" expr="40" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>40</e></m></meta>
		</DOM_VK_DOWN>
		<DOM_VK_SELECT public="1" get="inline" set="null" expr="41" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>41</e></m></meta>
		</DOM_VK_SELECT>
		<DOM_VK_PRINT public="1" get="inline" set="null" expr="42" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>42</e></m></meta>
		</DOM_VK_PRINT>
		<DOM_VK_EXECUTE public="1" get="inline" set="null" expr="43" line="64" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>43</e></m></meta>
		</DOM_VK_EXECUTE>
		<DOM_VK_PRINTSCREEN public="1" get="inline" set="null" expr="44" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>44</e></m></meta>
		</DOM_VK_PRINTSCREEN>
		<DOM_VK_INSERT public="1" get="inline" set="null" expr="45" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>45</e></m></meta>
		</DOM_VK_INSERT>
		<DOM_VK_DELETE public="1" get="inline" set="null" expr="46" line="67" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>46</e></m></meta>
		</DOM_VK_DELETE>
		<DOM_VK_0 public="1" get="inline" set="null" expr="48" line="68" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>48</e></m></meta>
		</DOM_VK_0>
		<DOM_VK_1 public="1" get="inline" set="null" expr="49" line="69" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>49</e></m></meta>
		</DOM_VK_1>
		<DOM_VK_2 public="1" get="inline" set="null" expr="50" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>50</e></m></meta>
		</DOM_VK_2>
		<DOM_VK_3 public="1" get="inline" set="null" expr="51" line="71" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>51</e></m></meta>
		</DOM_VK_3>
		<DOM_VK_4 public="1" get="inline" set="null" expr="52" line="72" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>52</e></m></meta>
		</DOM_VK_4>
		<DOM_VK_5 public="1" get="inline" set="null" expr="53" line="73" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>53</e></m></meta>
		</DOM_VK_5>
		<DOM_VK_6 public="1" get="inline" set="null" expr="54" line="74" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>54</e></m></meta>
		</DOM_VK_6>
		<DOM_VK_7 public="1" get="inline" set="null" expr="55" line="75" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>55</e></m></meta>
		</DOM_VK_7>
		<DOM_VK_8 public="1" get="inline" set="null" expr="56" line="76" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>56</e></m></meta>
		</DOM_VK_8>
		<DOM_VK_9 public="1" get="inline" set="null" expr="57" line="77" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>57</e></m></meta>
		</DOM_VK_9>
		<DOM_VK_COLON public="1" get="inline" set="null" expr="58" line="78" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>58</e></m></meta>
		</DOM_VK_COLON>
		<DOM_VK_SEMICOLON public="1" get="inline" set="null" expr="59" line="79" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>59</e></m></meta>
		</DOM_VK_SEMICOLON>
		<DOM_VK_LESS_THAN public="1" get="inline" set="null" expr="60" line="80" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>60</e></m></meta>
		</DOM_VK_LESS_THAN>
		<DOM_VK_EQUALS public="1" get="inline" set="null" expr="61" line="81" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>61</e></m></meta>
		</DOM_VK_EQUALS>
		<DOM_VK_GREATER_THAN public="1" get="inline" set="null" expr="62" line="82" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>62</e></m></meta>
		</DOM_VK_GREATER_THAN>
		<DOM_VK_QUESTION_MARK public="1" get="inline" set="null" expr="63" line="83" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>63</e></m></meta>
		</DOM_VK_QUESTION_MARK>
		<DOM_VK_AT public="1" get="inline" set="null" expr="64" line="84" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>64</e></m></meta>
		</DOM_VK_AT>
		<DOM_VK_A public="1" get="inline" set="null" expr="65" line="85" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>65</e></m></meta>
		</DOM_VK_A>
		<DOM_VK_B public="1" get="inline" set="null" expr="66" line="86" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>66</e></m></meta>
		</DOM_VK_B>
		<DOM_VK_C public="1" get="inline" set="null" expr="67" line="87" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>67</e></m></meta>
		</DOM_VK_C>
		<DOM_VK_D public="1" get="inline" set="null" expr="68" line="88" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>68</e></m></meta>
		</DOM_VK_D>
		<DOM_VK_E public="1" get="inline" set="null" expr="69" line="89" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>69</e></m></meta>
		</DOM_VK_E>
		<DOM_VK_F public="1" get="inline" set="null" expr="70" line="90" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>70</e></m></meta>
		</DOM_VK_F>
		<DOM_VK_G public="1" get="inline" set="null" expr="71" line="91" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>71</e></m></meta>
		</DOM_VK_G>
		<DOM_VK_H public="1" get="inline" set="null" expr="72" line="92" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>72</e></m></meta>
		</DOM_VK_H>
		<DOM_VK_I public="1" get="inline" set="null" expr="73" line="93" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>73</e></m></meta>
		</DOM_VK_I>
		<DOM_VK_J public="1" get="inline" set="null" expr="74" line="94" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>74</e></m></meta>
		</DOM_VK_J>
		<DOM_VK_K public="1" get="inline" set="null" expr="75" line="95" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>75</e></m></meta>
		</DOM_VK_K>
		<DOM_VK_L public="1" get="inline" set="null" expr="76" line="96" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>76</e></m></meta>
		</DOM_VK_L>
		<DOM_VK_M public="1" get="inline" set="null" expr="77" line="97" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>77</e></m></meta>
		</DOM_VK_M>
		<DOM_VK_N public="1" get="inline" set="null" expr="78" line="98" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>78</e></m></meta>
		</DOM_VK_N>
		<DOM_VK_O public="1" get="inline" set="null" expr="79" line="99" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>79</e></m></meta>
		</DOM_VK_O>
		<DOM_VK_P public="1" get="inline" set="null" expr="80" line="100" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>80</e></m></meta>
		</DOM_VK_P>
		<DOM_VK_Q public="1" get="inline" set="null" expr="81" line="101" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>81</e></m></meta>
		</DOM_VK_Q>
		<DOM_VK_R public="1" get="inline" set="null" expr="82" line="102" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>82</e></m></meta>
		</DOM_VK_R>
		<DOM_VK_S public="1" get="inline" set="null" expr="83" line="103" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>83</e></m></meta>
		</DOM_VK_S>
		<DOM_VK_T public="1" get="inline" set="null" expr="84" line="104" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>84</e></m></meta>
		</DOM_VK_T>
		<DOM_VK_U public="1" get="inline" set="null" expr="85" line="105" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>85</e></m></meta>
		</DOM_VK_U>
		<DOM_VK_V public="1" get="inline" set="null" expr="86" line="106" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>86</e></m></meta>
		</DOM_VK_V>
		<DOM_VK_W public="1" get="inline" set="null" expr="87" line="107" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>87</e></m></meta>
		</DOM_VK_W>
		<DOM_VK_X public="1" get="inline" set="null" expr="88" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>88</e></m></meta>
		</DOM_VK_X>
		<DOM_VK_Y public="1" get="inline" set="null" expr="89" line="109" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>89</e></m></meta>
		</DOM_VK_Y>
		<DOM_VK_Z public="1" get="inline" set="null" expr="90" line="110" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>90</e></m></meta>
		</DOM_VK_Z>
		<DOM_VK_WIN public="1" get="inline" set="null" expr="91" line="111" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>91</e></m></meta>
		</DOM_VK_WIN>
		<DOM_VK_CONTEXT_MENU public="1" get="inline" set="null" expr="93" line="112" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>93</e></m></meta>
		</DOM_VK_CONTEXT_MENU>
		<DOM_VK_SLEEP public="1" get="inline" set="null" expr="95" line="113" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>95</e></m></meta>
		</DOM_VK_SLEEP>
		<DOM_VK_NUMPAD0 public="1" get="inline" set="null" expr="96" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>96</e></m></meta>
		</DOM_VK_NUMPAD0>
		<DOM_VK_NUMPAD1 public="1" get="inline" set="null" expr="97" line="115" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>97</e></m></meta>
		</DOM_VK_NUMPAD1>
		<DOM_VK_NUMPAD2 public="1" get="inline" set="null" expr="98" line="116" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>98</e></m></meta>
		</DOM_VK_NUMPAD2>
		<DOM_VK_NUMPAD3 public="1" get="inline" set="null" expr="99" line="117" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>99</e></m></meta>
		</DOM_VK_NUMPAD3>
		<DOM_VK_NUMPAD4 public="1" get="inline" set="null" expr="100" line="118" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>100</e></m></meta>
		</DOM_VK_NUMPAD4>
		<DOM_VK_NUMPAD5 public="1" get="inline" set="null" expr="101" line="119" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>101</e></m></meta>
		</DOM_VK_NUMPAD5>
		<DOM_VK_NUMPAD6 public="1" get="inline" set="null" expr="102" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>102</e></m></meta>
		</DOM_VK_NUMPAD6>
		<DOM_VK_NUMPAD7 public="1" get="inline" set="null" expr="103" line="121" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>103</e></m></meta>
		</DOM_VK_NUMPAD7>
		<DOM_VK_NUMPAD8 public="1" get="inline" set="null" expr="104" line="122" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>104</e></m></meta>
		</DOM_VK_NUMPAD8>
		<DOM_VK_NUMPAD9 public="1" get="inline" set="null" expr="105" line="123" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>105</e></m></meta>
		</DOM_VK_NUMPAD9>
		<DOM_VK_MULTIPLY public="1" get="inline" set="null" expr="106" line="124" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>106</e></m></meta>
		</DOM_VK_MULTIPLY>
		<DOM_VK_ADD public="1" get="inline" set="null" expr="107" line="125" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>107</e></m></meta>
		</DOM_VK_ADD>
		<DOM_VK_SEPARATOR public="1" get="inline" set="null" expr="108" line="126" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>108</e></m></meta>
		</DOM_VK_SEPARATOR>
		<DOM_VK_SUBTRACT public="1" get="inline" set="null" expr="109" line="127" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>109</e></m></meta>
		</DOM_VK_SUBTRACT>
		<DOM_VK_DECIMAL public="1" get="inline" set="null" expr="110" line="128" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>110</e></m></meta>
		</DOM_VK_DECIMAL>
		<DOM_VK_DIVIDE public="1" get="inline" set="null" expr="111" line="129" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>111</e></m></meta>
		</DOM_VK_DIVIDE>
		<DOM_VK_F1 public="1" get="inline" set="null" expr="112" line="130" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>112</e></m></meta>
		</DOM_VK_F1>
		<DOM_VK_F2 public="1" get="inline" set="null" expr="113" line="131" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>113</e></m></meta>
		</DOM_VK_F2>
		<DOM_VK_F3 public="1" get="inline" set="null" expr="114" line="132" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>114</e></m></meta>
		</DOM_VK_F3>
		<DOM_VK_F4 public="1" get="inline" set="null" expr="115" line="133" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>115</e></m></meta>
		</DOM_VK_F4>
		<DOM_VK_F5 public="1" get="inline" set="null" expr="116" line="134" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>116</e></m></meta>
		</DOM_VK_F5>
		<DOM_VK_F6 public="1" get="inline" set="null" expr="117" line="135" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>117</e></m></meta>
		</DOM_VK_F6>
		<DOM_VK_F7 public="1" get="inline" set="null" expr="118" line="136" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>118</e></m></meta>
		</DOM_VK_F7>
		<DOM_VK_F8 public="1" get="inline" set="null" expr="119" line="137" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>119</e></m></meta>
		</DOM_VK_F8>
		<DOM_VK_F9 public="1" get="inline" set="null" expr="120" line="138" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>120</e></m></meta>
		</DOM_VK_F9>
		<DOM_VK_F10 public="1" get="inline" set="null" expr="121" line="139" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>121</e></m></meta>
		</DOM_VK_F10>
		<DOM_VK_F11 public="1" get="inline" set="null" expr="122" line="140" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>122</e></m></meta>
		</DOM_VK_F11>
		<DOM_VK_F12 public="1" get="inline" set="null" expr="123" line="141" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>123</e></m></meta>
		</DOM_VK_F12>
		<DOM_VK_F13 public="1" get="inline" set="null" expr="124" line="142" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>124</e></m></meta>
		</DOM_VK_F13>
		<DOM_VK_F14 public="1" get="inline" set="null" expr="125" line="143" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>125</e></m></meta>
		</DOM_VK_F14>
		<DOM_VK_F15 public="1" get="inline" set="null" expr="126" line="144" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>126</e></m></meta>
		</DOM_VK_F15>
		<DOM_VK_F16 public="1" get="inline" set="null" expr="127" line="145" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>127</e></m></meta>
		</DOM_VK_F16>
		<DOM_VK_F17 public="1" get="inline" set="null" expr="128" line="146" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>128</e></m></meta>
		</DOM_VK_F17>
		<DOM_VK_F18 public="1" get="inline" set="null" expr="129" line="147" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>129</e></m></meta>
		</DOM_VK_F18>
		<DOM_VK_F19 public="1" get="inline" set="null" expr="130" line="148" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>130</e></m></meta>
		</DOM_VK_F19>
		<DOM_VK_F20 public="1" get="inline" set="null" expr="131" line="149" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>131</e></m></meta>
		</DOM_VK_F20>
		<DOM_VK_F21 public="1" get="inline" set="null" expr="132" line="150" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>132</e></m></meta>
		</DOM_VK_F21>
		<DOM_VK_F22 public="1" get="inline" set="null" expr="133" line="151" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>133</e></m></meta>
		</DOM_VK_F22>
		<DOM_VK_F23 public="1" get="inline" set="null" expr="134" line="152" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>134</e></m></meta>
		</DOM_VK_F23>
		<DOM_VK_F24 public="1" get="inline" set="null" expr="135" line="153" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>135</e></m></meta>
		</DOM_VK_F24>
		<DOM_VK_NUM_LOCK public="1" get="inline" set="null" expr="144" line="154" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>144</e></m></meta>
		</DOM_VK_NUM_LOCK>
		<DOM_VK_SCROLL_LOCK public="1" get="inline" set="null" expr="145" line="155" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>145</e></m></meta>
		</DOM_VK_SCROLL_LOCK>
		<DOM_VK_WIN_OEM_FJ_JISHO public="1" get="inline" set="null" expr="146" line="156" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>146</e></m></meta>
		</DOM_VK_WIN_OEM_FJ_JISHO>
		<DOM_VK_WIN_OEM_FJ_MASSHOU public="1" get="inline" set="null" expr="147" line="157" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>147</e></m></meta>
		</DOM_VK_WIN_OEM_FJ_MASSHOU>
		<DOM_VK_WIN_OEM_FJ_TOUROKU public="1" get="inline" set="null" expr="148" line="158" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>148</e></m></meta>
		</DOM_VK_WIN_OEM_FJ_TOUROKU>
		<DOM_VK_WIN_OEM_FJ_LOYA public="1" get="inline" set="null" expr="149" line="159" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>149</e></m></meta>
		</DOM_VK_WIN_OEM_FJ_LOYA>
		<DOM_VK_WIN_OEM_FJ_ROYA public="1" get="inline" set="null" expr="150" line="160" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>150</e></m></meta>
		</DOM_VK_WIN_OEM_FJ_ROYA>
		<DOM_VK_CIRCUMFLEX public="1" get="inline" set="null" expr="160" line="161" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>160</e></m></meta>
		</DOM_VK_CIRCUMFLEX>
		<DOM_VK_EXCLAMATION public="1" get="inline" set="null" expr="161" line="162" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>161</e></m></meta>
		</DOM_VK_EXCLAMATION>
		<DOM_VK_DOUBLE_QUOTE public="1" get="inline" set="null" expr="162" line="163" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>162</e></m></meta>
		</DOM_VK_DOUBLE_QUOTE>
		<DOM_VK_HASH public="1" get="inline" set="null" expr="163" line="164" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>163</e></m></meta>
		</DOM_VK_HASH>
		<DOM_VK_DOLLAR public="1" get="inline" set="null" expr="164" line="165" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>164</e></m></meta>
		</DOM_VK_DOLLAR>
		<DOM_VK_PERCENT public="1" get="inline" set="null" expr="165" line="166" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>165</e></m></meta>
		</DOM_VK_PERCENT>
		<DOM_VK_AMPERSAND public="1" get="inline" set="null" expr="166" line="167" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>166</e></m></meta>
		</DOM_VK_AMPERSAND>
		<DOM_VK_UNDERSCORE public="1" get="inline" set="null" expr="167" line="168" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>167</e></m></meta>
		</DOM_VK_UNDERSCORE>
		<DOM_VK_OPEN_PAREN public="1" get="inline" set="null" expr="168" line="169" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>168</e></m></meta>
		</DOM_VK_OPEN_PAREN>
		<DOM_VK_CLOSE_PAREN public="1" get="inline" set="null" expr="169" line="170" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>169</e></m></meta>
		</DOM_VK_CLOSE_PAREN>
		<DOM_VK_ASTERISK public="1" get="inline" set="null" expr="170" line="171" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>170</e></m></meta>
		</DOM_VK_ASTERISK>
		<DOM_VK_PLUS public="1" get="inline" set="null" expr="171" line="172" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>171</e></m></meta>
		</DOM_VK_PLUS>
		<DOM_VK_PIPE public="1" get="inline" set="null" expr="172" line="173" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>172</e></m></meta>
		</DOM_VK_PIPE>
		<DOM_VK_HYPHEN_MINUS public="1" get="inline" set="null" expr="173" line="174" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>173</e></m></meta>
		</DOM_VK_HYPHEN_MINUS>
		<DOM_VK_OPEN_CURLY_BRACKET public="1" get="inline" set="null" expr="174" line="175" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>174</e></m></meta>
		</DOM_VK_OPEN_CURLY_BRACKET>
		<DOM_VK_CLOSE_CURLY_BRACKET public="1" get="inline" set="null" expr="175" line="176" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>175</e></m></meta>
		</DOM_VK_CLOSE_CURLY_BRACKET>
		<DOM_VK_TILDE public="1" get="inline" set="null" expr="176" line="177" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>176</e></m></meta>
		</DOM_VK_TILDE>
		<DOM_VK_VOLUME_MUTE public="1" get="inline" set="null" expr="181" line="178" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>181</e></m></meta>
		</DOM_VK_VOLUME_MUTE>
		<DOM_VK_VOLUME_DOWN public="1" get="inline" set="null" expr="182" line="179" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>182</e></m></meta>
		</DOM_VK_VOLUME_DOWN>
		<DOM_VK_VOLUME_UP public="1" get="inline" set="null" expr="183" line="180" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>183</e></m></meta>
		</DOM_VK_VOLUME_UP>
		<DOM_VK_COMMA public="1" get="inline" set="null" expr="188" line="181" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>188</e></m></meta>
		</DOM_VK_COMMA>
		<DOM_VK_PERIOD public="1" get="inline" set="null" expr="190" line="182" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>190</e></m></meta>
		</DOM_VK_PERIOD>
		<DOM_VK_SLASH public="1" get="inline" set="null" expr="191" line="183" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>191</e></m></meta>
		</DOM_VK_SLASH>
		<DOM_VK_BACK_QUOTE public="1" get="inline" set="null" expr="192" line="184" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>192</e></m></meta>
		</DOM_VK_BACK_QUOTE>
		<DOM_VK_OPEN_BRACKET public="1" get="inline" set="null" expr="219" line="185" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>219</e></m></meta>
		</DOM_VK_OPEN_BRACKET>
		<DOM_VK_BACK_SLASH public="1" get="inline" set="null" expr="220" line="186" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>220</e></m></meta>
		</DOM_VK_BACK_SLASH>
		<DOM_VK_CLOSE_BRACKET public="1" get="inline" set="null" expr="221" line="187" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>221</e></m></meta>
		</DOM_VK_CLOSE_BRACKET>
		<DOM_VK_QUOTE public="1" get="inline" set="null" expr="222" line="188" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>222</e></m></meta>
		</DOM_VK_QUOTE>
		<DOM_VK_META public="1" get="inline" set="null" expr="224" line="189" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>224</e></m></meta>
		</DOM_VK_META>
		<DOM_VK_ALTGR public="1" get="inline" set="null" expr="225" line="190" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>225</e></m></meta>
		</DOM_VK_ALTGR>
		<DOM_VK_WIN_ICO_HELP public="1" get="inline" set="null" expr="227" line="191" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>227</e></m></meta>
		</DOM_VK_WIN_ICO_HELP>
		<DOM_VK_WIN_ICO_00 public="1" get="inline" set="null" expr="228" line="192" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>228</e></m></meta>
		</DOM_VK_WIN_ICO_00>
		<DOM_VK_WIN_ICO_CLEAR public="1" get="inline" set="null" expr="230" line="193" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>230</e></m></meta>
		</DOM_VK_WIN_ICO_CLEAR>
		<DOM_VK_WIN_OEM_RESET public="1" get="inline" set="null" expr="233" line="194" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>233</e></m></meta>
		</DOM_VK_WIN_OEM_RESET>
		<DOM_VK_WIN_OEM_JUMP public="1" get="inline" set="null" expr="234" line="195" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>234</e></m></meta>
		</DOM_VK_WIN_OEM_JUMP>
		<DOM_VK_WIN_OEM_PA1 public="1" get="inline" set="null" expr="235" line="196" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>235</e></m></meta>
		</DOM_VK_WIN_OEM_PA1>
		<DOM_VK_WIN_OEM_PA2 public="1" get="inline" set="null" expr="236" line="197" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>236</e></m></meta>
		</DOM_VK_WIN_OEM_PA2>
		<DOM_VK_WIN_OEM_PA3 public="1" get="inline" set="null" expr="237" line="198" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>237</e></m></meta>
		</DOM_VK_WIN_OEM_PA3>
		<DOM_VK_WIN_OEM_WSCTRL public="1" get="inline" set="null" expr="238" line="199" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>238</e></m></meta>
		</DOM_VK_WIN_OEM_WSCTRL>
		<DOM_VK_WIN_OEM_CUSEL public="1" get="inline" set="null" expr="239" line="200" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>239</e></m></meta>
		</DOM_VK_WIN_OEM_CUSEL>
		<DOM_VK_WIN_OEM_ATTN public="1" get="inline" set="null" expr="240" line="201" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>240</e></m></meta>
		</DOM_VK_WIN_OEM_ATTN>
		<DOM_VK_WIN_OEM_FINISH public="1" get="inline" set="null" expr="241" line="202" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>241</e></m></meta>
		</DOM_VK_WIN_OEM_FINISH>
		<DOM_VK_WIN_OEM_COPY public="1" get="inline" set="null" expr="242" line="203" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>242</e></m></meta>
		</DOM_VK_WIN_OEM_COPY>
		<DOM_VK_WIN_OEM_AUTO public="1" get="inline" set="null" expr="243" line="204" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>243</e></m></meta>
		</DOM_VK_WIN_OEM_AUTO>
		<DOM_VK_WIN_OEM_ENLW public="1" get="inline" set="null" expr="244" line="205" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>244</e></m></meta>
		</DOM_VK_WIN_OEM_ENLW>
		<DOM_VK_WIN_OEM_BACKTAB public="1" get="inline" set="null" expr="245" line="206" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>245</e></m></meta>
		</DOM_VK_WIN_OEM_BACKTAB>
		<DOM_VK_ATTN public="1" get="inline" set="null" expr="246" line="207" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>246</e></m></meta>
		</DOM_VK_ATTN>
		<DOM_VK_CRSEL public="1" get="inline" set="null" expr="247" line="208" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>247</e></m></meta>
		</DOM_VK_CRSEL>
		<DOM_VK_EXSEL public="1" get="inline" set="null" expr="248" line="209" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>248</e></m></meta>
		</DOM_VK_EXSEL>
		<DOM_VK_EREOF public="1" get="inline" set="null" expr="249" line="210" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>249</e></m></meta>
		</DOM_VK_EREOF>
		<DOM_VK_PLAY public="1" get="inline" set="null" expr="250" line="211" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>250</e></m></meta>
		</DOM_VK_PLAY>
		<DOM_VK_ZOOM public="1" get="inline" set="null" expr="251" line="212" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>251</e></m></meta>
		</DOM_VK_ZOOM>
		<DOM_VK_PA1 public="1" get="inline" set="null" expr="253" line="213" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>253</e></m></meta>
		</DOM_VK_PA1>
		<DOM_VK_WIN_OEM_CLEAR public="1" get="inline" set="null" expr="254" line="214" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>254</e></m></meta>
		</DOM_VK_WIN_OEM_CLEAR>
		<initKeyEvent public="1" set="method"><f a="type:canBubble:cancelable:view:ctrlKey:altKey:shiftKey:metaKey:keyCode:charCode">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="js.html.Window"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></initKeyEvent>
		<meta><m n=":native"><e>"KeyEvent"</e></m></meta>
	</class>
	<class path="js.html.KeyboardEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/KeyboardEvent.hx" extern="1">
		<extends path="js.html.UIEvent"/>
		<DOM_KEY_LOCATION_STANDARD public="1" get="inline" set="null" expr="0" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</DOM_KEY_LOCATION_STANDARD>
		<DOM_KEY_LOCATION_LEFT public="1" get="inline" set="null" expr="1" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</DOM_KEY_LOCATION_LEFT>
		<DOM_KEY_LOCATION_RIGHT public="1" get="inline" set="null" expr="2" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</DOM_KEY_LOCATION_RIGHT>
		<DOM_KEY_LOCATION_NUMPAD public="1" get="inline" set="null" expr="3" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</DOM_KEY_LOCATION_NUMPAD>
		<DOM_VK_CANCEL public="1" get="inline" set="null" expr="3" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</DOM_VK_CANCEL>
		<DOM_VK_HELP public="1" get="inline" set="null" expr="6" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</DOM_VK_HELP>
		<DOM_VK_BACK_SPACE public="1" get="inline" set="null" expr="8" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</DOM_VK_BACK_SPACE>
		<DOM_VK_TAB public="1" get="inline" set="null" expr="9" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</DOM_VK_TAB>
		<DOM_VK_CLEAR public="1" get="inline" set="null" expr="12" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</DOM_VK_CLEAR>
		<DOM_VK_RETURN public="1" get="inline" set="null" expr="13" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>13</e></m></meta>
		</DOM_VK_RETURN>
		<DOM_VK_SHIFT public="1" get="inline" set="null" expr="16" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</DOM_VK_SHIFT>
		<DOM_VK_CONTROL public="1" get="inline" set="null" expr="17" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>17</e></m></meta>
		</DOM_VK_CONTROL>
		<DOM_VK_ALT public="1" get="inline" set="null" expr="18" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>18</e></m></meta>
		</DOM_VK_ALT>
		<DOM_VK_PAUSE public="1" get="inline" set="null" expr="19" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>19</e></m></meta>
		</DOM_VK_PAUSE>
		<DOM_VK_CAPS_LOCK public="1" get="inline" set="null" expr="20" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>20</e></m></meta>
		</DOM_VK_CAPS_LOCK>
		<DOM_VK_KANA public="1" get="inline" set="null" expr="21" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>21</e></m></meta>
		</DOM_VK_KANA>
		<DOM_VK_HANGUL public="1" get="inline" set="null" expr="21" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>21</e></m></meta>
		</DOM_VK_HANGUL>
		<DOM_VK_EISU public="1" get="inline" set="null" expr="22" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>22</e></m></meta>
		</DOM_VK_EISU>
		<DOM_VK_JUNJA public="1" get="inline" set="null" expr="23" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>23</e></m></meta>
		</DOM_VK_JUNJA>
		<DOM_VK_FINAL public="1" get="inline" set="null" expr="24" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>24</e></m></meta>
		</DOM_VK_FINAL>
		<DOM_VK_HANJA public="1" get="inline" set="null" expr="25" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>25</e></m></meta>
		</DOM_VK_HANJA>
		<DOM_VK_KANJI public="1" get="inline" set="null" expr="25" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>25</e></m></meta>
		</DOM_VK_KANJI>
		<DOM_VK_ESCAPE public="1" get="inline" set="null" expr="27" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>27</e></m></meta>
		</DOM_VK_ESCAPE>
		<DOM_VK_CONVERT public="1" get="inline" set="null" expr="28" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>28</e></m></meta>
		</DOM_VK_CONVERT>
		<DOM_VK_NONCONVERT public="1" get="inline" set="null" expr="29" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>29</e></m></meta>
		</DOM_VK_NONCONVERT>
		<DOM_VK_ACCEPT public="1" get="inline" set="null" expr="30" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>30</e></m></meta>
		</DOM_VK_ACCEPT>
		<DOM_VK_MODECHANGE public="1" get="inline" set="null" expr="31" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>31</e></m></meta>
		</DOM_VK_MODECHANGE>
		<DOM_VK_SPACE public="1" get="inline" set="null" expr="32" line="64" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32</e></m></meta>
		</DOM_VK_SPACE>
		<DOM_VK_PAGE_UP public="1" get="inline" set="null" expr="33" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33</e></m></meta>
		</DOM_VK_PAGE_UP>
		<DOM_VK_PAGE_DOWN public="1" get="inline" set="null" expr="34" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34</e></m></meta>
		</DOM_VK_PAGE_DOWN>
		<DOM_VK_END public="1" get="inline" set="null" expr="35" line="67" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35</e></m></meta>
		</DOM_VK_END>
		<DOM_VK_HOME public="1" get="inline" set="null" expr="36" line="68" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36</e></m></meta>
		</DOM_VK_HOME>
		<DOM_VK_LEFT public="1" get="inline" set="null" expr="37" line="69" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37</e></m></meta>
		</DOM_VK_LEFT>
		<DOM_VK_UP public="1" get="inline" set="null" expr="38" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>38</e></m></meta>
		</DOM_VK_UP>
		<DOM_VK_RIGHT public="1" get="inline" set="null" expr="39" line="71" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>39</e></m></meta>
		</DOM_VK_RIGHT>
		<DOM_VK_DOWN public="1" get="inline" set="null" expr="40" line="72" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>40</e></m></meta>
		</DOM_VK_DOWN>
		<DOM_VK_SELECT public="1" get="inline" set="null" expr="41" line="73" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>41</e></m></meta>
		</DOM_VK_SELECT>
		<DOM_VK_PRINT public="1" get="inline" set="null" expr="42" line="74" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>42</e></m></meta>
		</DOM_VK_PRINT>
		<DOM_VK_EXECUTE public="1" get="inline" set="null" expr="43" line="75" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>43</e></m></meta>
		</DOM_VK_EXECUTE>
		<DOM_VK_PRINTSCREEN public="1" get="inline" set="null" expr="44" line="76" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>44</e></m></meta>
		</DOM_VK_PRINTSCREEN>
		<DOM_VK_INSERT public="1" get="inline" set="null" expr="45" line="77" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>45</e></m></meta>
		</DOM_VK_INSERT>
		<DOM_VK_DELETE public="1" get="inline" set="null" expr="46" line="78" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>46</e></m></meta>
		</DOM_VK_DELETE>
		<DOM_VK_0 public="1" get="inline" set="null" expr="48" line="79" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>48</e></m></meta>
		</DOM_VK_0>
		<DOM_VK_1 public="1" get="inline" set="null" expr="49" line="80" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>49</e></m></meta>
		</DOM_VK_1>
		<DOM_VK_2 public="1" get="inline" set="null" expr="50" line="81" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>50</e></m></meta>
		</DOM_VK_2>
		<DOM_VK_3 public="1" get="inline" set="null" expr="51" line="82" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>51</e></m></meta>
		</DOM_VK_3>
		<DOM_VK_4 public="1" get="inline" set="null" expr="52" line="83" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>52</e></m></meta>
		</DOM_VK_4>
		<DOM_VK_5 public="1" get="inline" set="null" expr="53" line="84" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>53</e></m></meta>
		</DOM_VK_5>
		<DOM_VK_6 public="1" get="inline" set="null" expr="54" line="85" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>54</e></m></meta>
		</DOM_VK_6>
		<DOM_VK_7 public="1" get="inline" set="null" expr="55" line="86" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>55</e></m></meta>
		</DOM_VK_7>
		<DOM_VK_8 public="1" get="inline" set="null" expr="56" line="87" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>56</e></m></meta>
		</DOM_VK_8>
		<DOM_VK_9 public="1" get="inline" set="null" expr="57" line="88" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>57</e></m></meta>
		</DOM_VK_9>
		<DOM_VK_COLON public="1" get="inline" set="null" expr="58" line="89" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>58</e></m></meta>
		</DOM_VK_COLON>
		<DOM_VK_SEMICOLON public="1" get="inline" set="null" expr="59" line="90" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>59</e></m></meta>
		</DOM_VK_SEMICOLON>
		<DOM_VK_LESS_THAN public="1" get="inline" set="null" expr="60" line="91" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>60</e></m></meta>
		</DOM_VK_LESS_THAN>
		<DOM_VK_EQUALS public="1" get="inline" set="null" expr="61" line="92" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>61</e></m></meta>
		</DOM_VK_EQUALS>
		<DOM_VK_GREATER_THAN public="1" get="inline" set="null" expr="62" line="93" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>62</e></m></meta>
		</DOM_VK_GREATER_THAN>
		<DOM_VK_QUESTION_MARK public="1" get="inline" set="null" expr="63" line="94" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>63</e></m></meta>
		</DOM_VK_QUESTION_MARK>
		<DOM_VK_AT public="1" get="inline" set="null" expr="64" line="95" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>64</e></m></meta>
		</DOM_VK_AT>
		<DOM_VK_A public="1" get="inline" set="null" expr="65" line="96" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>65</e></m></meta>
		</DOM_VK_A>
		<DOM_VK_B public="1" get="inline" set="null" expr="66" line="97" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>66</e></m></meta>
		</DOM_VK_B>
		<DOM_VK_C public="1" get="inline" set="null" expr="67" line="98" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>67</e></m></meta>
		</DOM_VK_C>
		<DOM_VK_D public="1" get="inline" set="null" expr="68" line="99" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>68</e></m></meta>
		</DOM_VK_D>
		<DOM_VK_E public="1" get="inline" set="null" expr="69" line="100" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>69</e></m></meta>
		</DOM_VK_E>
		<DOM_VK_F public="1" get="inline" set="null" expr="70" line="101" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>70</e></m></meta>
		</DOM_VK_F>
		<DOM_VK_G public="1" get="inline" set="null" expr="71" line="102" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>71</e></m></meta>
		</DOM_VK_G>
		<DOM_VK_H public="1" get="inline" set="null" expr="72" line="103" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>72</e></m></meta>
		</DOM_VK_H>
		<DOM_VK_I public="1" get="inline" set="null" expr="73" line="104" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>73</e></m></meta>
		</DOM_VK_I>
		<DOM_VK_J public="1" get="inline" set="null" expr="74" line="105" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>74</e></m></meta>
		</DOM_VK_J>
		<DOM_VK_K public="1" get="inline" set="null" expr="75" line="106" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>75</e></m></meta>
		</DOM_VK_K>
		<DOM_VK_L public="1" get="inline" set="null" expr="76" line="107" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>76</e></m></meta>
		</DOM_VK_L>
		<DOM_VK_M public="1" get="inline" set="null" expr="77" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>77</e></m></meta>
		</DOM_VK_M>
		<DOM_VK_N public="1" get="inline" set="null" expr="78" line="109" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>78</e></m></meta>
		</DOM_VK_N>
		<DOM_VK_O public="1" get="inline" set="null" expr="79" line="110" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>79</e></m></meta>
		</DOM_VK_O>
		<DOM_VK_P public="1" get="inline" set="null" expr="80" line="111" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>80</e></m></meta>
		</DOM_VK_P>
		<DOM_VK_Q public="1" get="inline" set="null" expr="81" line="112" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>81</e></m></meta>
		</DOM_VK_Q>
		<DOM_VK_R public="1" get="inline" set="null" expr="82" line="113" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>82</e></m></meta>
		</DOM_VK_R>
		<DOM_VK_S public="1" get="inline" set="null" expr="83" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>83</e></m></meta>
		</DOM_VK_S>
		<DOM_VK_T public="1" get="inline" set="null" expr="84" line="115" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>84</e></m></meta>
		</DOM_VK_T>
		<DOM_VK_U public="1" get="inline" set="null" expr="85" line="116" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>85</e></m></meta>
		</DOM_VK_U>
		<DOM_VK_V public="1" get="inline" set="null" expr="86" line="117" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>86</e></m></meta>
		</DOM_VK_V>
		<DOM_VK_W public="1" get="inline" set="null" expr="87" line="118" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>87</e></m></meta>
		</DOM_VK_W>
		<DOM_VK_X public="1" get="inline" set="null" expr="88" line="119" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>88</e></m></meta>
		</DOM_VK_X>
		<DOM_VK_Y public="1" get="inline" set="null" expr="89" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>89</e></m></meta>
		</DOM_VK_Y>
		<DOM_VK_Z public="1" get="inline" set="null" expr="90" line="121" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>90</e></m></meta>
		</DOM_VK_Z>
		<DOM_VK_WIN public="1" get="inline" set="null" expr="91" line="122" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>91</e></m></meta>
		</DOM_VK_WIN>
		<DOM_VK_CONTEXT_MENU public="1" get="inline" set="null" expr="93" line="123" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>93</e></m></meta>
		</DOM_VK_CONTEXT_MENU>
		<DOM_VK_SLEEP public="1" get="inline" set="null" expr="95" line="124" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>95</e></m></meta>
		</DOM_VK_SLEEP>
		<DOM_VK_NUMPAD0 public="1" get="inline" set="null" expr="96" line="125" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>96</e></m></meta>
		</DOM_VK_NUMPAD0>
		<DOM_VK_NUMPAD1 public="1" get="inline" set="null" expr="97" line="126" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>97</e></m></meta>
		</DOM_VK_NUMPAD1>
		<DOM_VK_NUMPAD2 public="1" get="inline" set="null" expr="98" line="127" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>98</e></m></meta>
		</DOM_VK_NUMPAD2>
		<DOM_VK_NUMPAD3 public="1" get="inline" set="null" expr="99" line="128" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>99</e></m></meta>
		</DOM_VK_NUMPAD3>
		<DOM_VK_NUMPAD4 public="1" get="inline" set="null" expr="100" line="129" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>100</e></m></meta>
		</DOM_VK_NUMPAD4>
		<DOM_VK_NUMPAD5 public="1" get="inline" set="null" expr="101" line="130" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>101</e></m></meta>
		</DOM_VK_NUMPAD5>
		<DOM_VK_NUMPAD6 public="1" get="inline" set="null" expr="102" line="131" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>102</e></m></meta>
		</DOM_VK_NUMPAD6>
		<DOM_VK_NUMPAD7 public="1" get="inline" set="null" expr="103" line="132" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>103</e></m></meta>
		</DOM_VK_NUMPAD7>
		<DOM_VK_NUMPAD8 public="1" get="inline" set="null" expr="104" line="133" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>104</e></m></meta>
		</DOM_VK_NUMPAD8>
		<DOM_VK_NUMPAD9 public="1" get="inline" set="null" expr="105" line="134" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>105</e></m></meta>
		</DOM_VK_NUMPAD9>
		<DOM_VK_MULTIPLY public="1" get="inline" set="null" expr="106" line="135" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>106</e></m></meta>
		</DOM_VK_MULTIPLY>
		<DOM_VK_ADD public="1" get="inline" set="null" expr="107" line="136" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>107</e></m></meta>
		</DOM_VK_ADD>
		<DOM_VK_SEPARATOR public="1" get="inline" set="null" expr="108" line="137" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>108</e></m></meta>
		</DOM_VK_SEPARATOR>
		<DOM_VK_SUBTRACT public="1" get="inline" set="null" expr="109" line="138" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>109</e></m></meta>
		</DOM_VK_SUBTRACT>
		<DOM_VK_DECIMAL public="1" get="inline" set="null" expr="110" line="139" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>110</e></m></meta>
		</DOM_VK_DECIMAL>
		<DOM_VK_DIVIDE public="1" get="inline" set="null" expr="111" line="140" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>111</e></m></meta>
		</DOM_VK_DIVIDE>
		<DOM_VK_F1 public="1" get="inline" set="null" expr="112" line="141" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>112</e></m></meta>
		</DOM_VK_F1>
		<DOM_VK_F2 public="1" get="inline" set="null" expr="113" line="142" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>113</e></m></meta>
		</DOM_VK_F2>
		<DOM_VK_F3 public="1" get="inline" set="null" expr="114" line="143" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>114</e></m></meta>
		</DOM_VK_F3>
		<DOM_VK_F4 public="1" get="inline" set="null" expr="115" line="144" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>115</e></m></meta>
		</DOM_VK_F4>
		<DOM_VK_F5 public="1" get="inline" set="null" expr="116" line="145" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>116</e></m></meta>
		</DOM_VK_F5>
		<DOM_VK_F6 public="1" get="inline" set="null" expr="117" line="146" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>117</e></m></meta>
		</DOM_VK_F6>
		<DOM_VK_F7 public="1" get="inline" set="null" expr="118" line="147" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>118</e></m></meta>
		</DOM_VK_F7>
		<DOM_VK_F8 public="1" get="inline" set="null" expr="119" line="148" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>119</e></m></meta>
		</DOM_VK_F8>
		<DOM_VK_F9 public="1" get="inline" set="null" expr="120" line="149" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>120</e></m></meta>
		</DOM_VK_F9>
		<DOM_VK_F10 public="1" get="inline" set="null" expr="121" line="150" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>121</e></m></meta>
		</DOM_VK_F10>
		<DOM_VK_F11 public="1" get="inline" set="null" expr="122" line="151" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>122</e></m></meta>
		</DOM_VK_F11>
		<DOM_VK_F12 public="1" get="inline" set="null" expr="123" line="152" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>123</e></m></meta>
		</DOM_VK_F12>
		<DOM_VK_F13 public="1" get="inline" set="null" expr="124" line="153" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>124</e></m></meta>
		</DOM_VK_F13>
		<DOM_VK_F14 public="1" get="inline" set="null" expr="125" line="154" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>125</e></m></meta>
		</DOM_VK_F14>
		<DOM_VK_F15 public="1" get="inline" set="null" expr="126" line="155" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>126</e></m></meta>
		</DOM_VK_F15>
		<DOM_VK_F16 public="1" get="inline" set="null" expr="127" line="156" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>127</e></m></meta>
		</DOM_VK_F16>
		<DOM_VK_F17 public="1" get="inline" set="null" expr="128" line="157" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>128</e></m></meta>
		</DOM_VK_F17>
		<DOM_VK_F18 public="1" get="inline" set="null" expr="129" line="158" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>129</e></m></meta>
		</DOM_VK_F18>
		<DOM_VK_F19 public="1" get="inline" set="null" expr="130" line="159" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>130</e></m></meta>
		</DOM_VK_F19>
		<DOM_VK_F20 public="1" get="inline" set="null" expr="131" line="160" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>131</e></m></meta>
		</DOM_VK_F20>
		<DOM_VK_F21 public="1" get="inline" set="null" expr="132" line="161" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>132</e></m></meta>
		</DOM_VK_F21>
		<DOM_VK_F22 public="1" get="inline" set="null" expr="133" line="162" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>133</e></m></meta>
		</DOM_VK_F22>
		<DOM_VK_F23 public="1" get="inline" set="null" expr="134" line="163" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>134</e></m></meta>
		</DOM_VK_F23>
		<DOM_VK_F24 public="1" get="inline" set="null" expr="135" line="164" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>135</e></m></meta>
		</DOM_VK_F24>
		<DOM_VK_NUM_LOCK public="1" get="inline" set="null" expr="144" line="165" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>144</e></m></meta>
		</DOM_VK_NUM_LOCK>
		<DOM_VK_SCROLL_LOCK public="1" get="inline" set="null" expr="145" line="166" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>145</e></m></meta>
		</DOM_VK_SCROLL_LOCK>
		<DOM_VK_WIN_OEM_FJ_JISHO public="1" get="inline" set="null" expr="146" line="167" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>146</e></m></meta>
		</DOM_VK_WIN_OEM_FJ_JISHO>
		<DOM_VK_WIN_OEM_FJ_MASSHOU public="1" get="inline" set="null" expr="147" line="168" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>147</e></m></meta>
		</DOM_VK_WIN_OEM_FJ_MASSHOU>
		<DOM_VK_WIN_OEM_FJ_TOUROKU public="1" get="inline" set="null" expr="148" line="169" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>148</e></m></meta>
		</DOM_VK_WIN_OEM_FJ_TOUROKU>
		<DOM_VK_WIN_OEM_FJ_LOYA public="1" get="inline" set="null" expr="149" line="170" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>149</e></m></meta>
		</DOM_VK_WIN_OEM_FJ_LOYA>
		<DOM_VK_WIN_OEM_FJ_ROYA public="1" get="inline" set="null" expr="150" line="171" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>150</e></m></meta>
		</DOM_VK_WIN_OEM_FJ_ROYA>
		<DOM_VK_CIRCUMFLEX public="1" get="inline" set="null" expr="160" line="172" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>160</e></m></meta>
		</DOM_VK_CIRCUMFLEX>
		<DOM_VK_EXCLAMATION public="1" get="inline" set="null" expr="161" line="173" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>161</e></m></meta>
		</DOM_VK_EXCLAMATION>
		<DOM_VK_DOUBLE_QUOTE public="1" get="inline" set="null" expr="162" line="174" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>162</e></m></meta>
		</DOM_VK_DOUBLE_QUOTE>
		<DOM_VK_HASH public="1" get="inline" set="null" expr="163" line="175" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>163</e></m></meta>
		</DOM_VK_HASH>
		<DOM_VK_DOLLAR public="1" get="inline" set="null" expr="164" line="176" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>164</e></m></meta>
		</DOM_VK_DOLLAR>
		<DOM_VK_PERCENT public="1" get="inline" set="null" expr="165" line="177" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>165</e></m></meta>
		</DOM_VK_PERCENT>
		<DOM_VK_AMPERSAND public="1" get="inline" set="null" expr="166" line="178" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>166</e></m></meta>
		</DOM_VK_AMPERSAND>
		<DOM_VK_UNDERSCORE public="1" get="inline" set="null" expr="167" line="179" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>167</e></m></meta>
		</DOM_VK_UNDERSCORE>
		<DOM_VK_OPEN_PAREN public="1" get="inline" set="null" expr="168" line="180" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>168</e></m></meta>
		</DOM_VK_OPEN_PAREN>
		<DOM_VK_CLOSE_PAREN public="1" get="inline" set="null" expr="169" line="181" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>169</e></m></meta>
		</DOM_VK_CLOSE_PAREN>
		<DOM_VK_ASTERISK public="1" get="inline" set="null" expr="170" line="182" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>170</e></m></meta>
		</DOM_VK_ASTERISK>
		<DOM_VK_PLUS public="1" get="inline" set="null" expr="171" line="183" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>171</e></m></meta>
		</DOM_VK_PLUS>
		<DOM_VK_PIPE public="1" get="inline" set="null" expr="172" line="184" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>172</e></m></meta>
		</DOM_VK_PIPE>
		<DOM_VK_HYPHEN_MINUS public="1" get="inline" set="null" expr="173" line="185" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>173</e></m></meta>
		</DOM_VK_HYPHEN_MINUS>
		<DOM_VK_OPEN_CURLY_BRACKET public="1" get="inline" set="null" expr="174" line="186" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>174</e></m></meta>
		</DOM_VK_OPEN_CURLY_BRACKET>
		<DOM_VK_CLOSE_CURLY_BRACKET public="1" get="inline" set="null" expr="175" line="187" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>175</e></m></meta>
		</DOM_VK_CLOSE_CURLY_BRACKET>
		<DOM_VK_TILDE public="1" get="inline" set="null" expr="176" line="188" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>176</e></m></meta>
		</DOM_VK_TILDE>
		<DOM_VK_VOLUME_MUTE public="1" get="inline" set="null" expr="181" line="189" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>181</e></m></meta>
		</DOM_VK_VOLUME_MUTE>
		<DOM_VK_VOLUME_DOWN public="1" get="inline" set="null" expr="182" line="190" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>182</e></m></meta>
		</DOM_VK_VOLUME_DOWN>
		<DOM_VK_VOLUME_UP public="1" get="inline" set="null" expr="183" line="191" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>183</e></m></meta>
		</DOM_VK_VOLUME_UP>
		<DOM_VK_COMMA public="1" get="inline" set="null" expr="188" line="192" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>188</e></m></meta>
		</DOM_VK_COMMA>
		<DOM_VK_PERIOD public="1" get="inline" set="null" expr="190" line="193" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>190</e></m></meta>
		</DOM_VK_PERIOD>
		<DOM_VK_SLASH public="1" get="inline" set="null" expr="191" line="194" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>191</e></m></meta>
		</DOM_VK_SLASH>
		<DOM_VK_BACK_QUOTE public="1" get="inline" set="null" expr="192" line="195" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>192</e></m></meta>
		</DOM_VK_BACK_QUOTE>
		<DOM_VK_OPEN_BRACKET public="1" get="inline" set="null" expr="219" line="196" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>219</e></m></meta>
		</DOM_VK_OPEN_BRACKET>
		<DOM_VK_BACK_SLASH public="1" get="inline" set="null" expr="220" line="197" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>220</e></m></meta>
		</DOM_VK_BACK_SLASH>
		<DOM_VK_CLOSE_BRACKET public="1" get="inline" set="null" expr="221" line="198" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>221</e></m></meta>
		</DOM_VK_CLOSE_BRACKET>
		<DOM_VK_QUOTE public="1" get="inline" set="null" expr="222" line="199" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>222</e></m></meta>
		</DOM_VK_QUOTE>
		<DOM_VK_META public="1" get="inline" set="null" expr="224" line="200" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>224</e></m></meta>
		</DOM_VK_META>
		<DOM_VK_ALTGR public="1" get="inline" set="null" expr="225" line="201" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>225</e></m></meta>
		</DOM_VK_ALTGR>
		<DOM_VK_WIN_ICO_HELP public="1" get="inline" set="null" expr="227" line="202" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>227</e></m></meta>
		</DOM_VK_WIN_ICO_HELP>
		<DOM_VK_WIN_ICO_00 public="1" get="inline" set="null" expr="228" line="203" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>228</e></m></meta>
		</DOM_VK_WIN_ICO_00>
		<DOM_VK_WIN_ICO_CLEAR public="1" get="inline" set="null" expr="230" line="204" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>230</e></m></meta>
		</DOM_VK_WIN_ICO_CLEAR>
		<DOM_VK_WIN_OEM_RESET public="1" get="inline" set="null" expr="233" line="205" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>233</e></m></meta>
		</DOM_VK_WIN_OEM_RESET>
		<DOM_VK_WIN_OEM_JUMP public="1" get="inline" set="null" expr="234" line="206" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>234</e></m></meta>
		</DOM_VK_WIN_OEM_JUMP>
		<DOM_VK_WIN_OEM_PA1 public="1" get="inline" set="null" expr="235" line="207" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>235</e></m></meta>
		</DOM_VK_WIN_OEM_PA1>
		<DOM_VK_WIN_OEM_PA2 public="1" get="inline" set="null" expr="236" line="208" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>236</e></m></meta>
		</DOM_VK_WIN_OEM_PA2>
		<DOM_VK_WIN_OEM_PA3 public="1" get="inline" set="null" expr="237" line="209" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>237</e></m></meta>
		</DOM_VK_WIN_OEM_PA3>
		<DOM_VK_WIN_OEM_WSCTRL public="1" get="inline" set="null" expr="238" line="210" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>238</e></m></meta>
		</DOM_VK_WIN_OEM_WSCTRL>
		<DOM_VK_WIN_OEM_CUSEL public="1" get="inline" set="null" expr="239" line="211" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>239</e></m></meta>
		</DOM_VK_WIN_OEM_CUSEL>
		<DOM_VK_WIN_OEM_ATTN public="1" get="inline" set="null" expr="240" line="212" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>240</e></m></meta>
		</DOM_VK_WIN_OEM_ATTN>
		<DOM_VK_WIN_OEM_FINISH public="1" get="inline" set="null" expr="241" line="213" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>241</e></m></meta>
		</DOM_VK_WIN_OEM_FINISH>
		<DOM_VK_WIN_OEM_COPY public="1" get="inline" set="null" expr="242" line="214" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>242</e></m></meta>
		</DOM_VK_WIN_OEM_COPY>
		<DOM_VK_WIN_OEM_AUTO public="1" get="inline" set="null" expr="243" line="215" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>243</e></m></meta>
		</DOM_VK_WIN_OEM_AUTO>
		<DOM_VK_WIN_OEM_ENLW public="1" get="inline" set="null" expr="244" line="216" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>244</e></m></meta>
		</DOM_VK_WIN_OEM_ENLW>
		<DOM_VK_WIN_OEM_BACKTAB public="1" get="inline" set="null" expr="245" line="217" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>245</e></m></meta>
		</DOM_VK_WIN_OEM_BACKTAB>
		<DOM_VK_ATTN public="1" get="inline" set="null" expr="246" line="218" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>246</e></m></meta>
		</DOM_VK_ATTN>
		<DOM_VK_CRSEL public="1" get="inline" set="null" expr="247" line="219" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>247</e></m></meta>
		</DOM_VK_CRSEL>
		<DOM_VK_EXSEL public="1" get="inline" set="null" expr="248" line="220" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>248</e></m></meta>
		</DOM_VK_EXSEL>
		<DOM_VK_EREOF public="1" get="inline" set="null" expr="249" line="221" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>249</e></m></meta>
		</DOM_VK_EREOF>
		<DOM_VK_PLAY public="1" get="inline" set="null" expr="250" line="222" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>250</e></m></meta>
		</DOM_VK_PLAY>
		<DOM_VK_ZOOM public="1" get="inline" set="null" expr="251" line="223" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>251</e></m></meta>
		</DOM_VK_ZOOM>
		<DOM_VK_PA1 public="1" get="inline" set="null" expr="253" line="224" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>253</e></m></meta>
		</DOM_VK_PA1>
		<DOM_VK_WIN_OEM_CLEAR public="1" get="inline" set="null" expr="254" line="225" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>254</e></m></meta>
		</DOM_VK_WIN_OEM_CLEAR>
		<charCode public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the Unicode reference number of the key; this attribute is used only by the `keypress` event. For keys whose `char` attribute contains multiple characters, this is the Unicode value of the first character in that attribute. In Firefox 26 this returns codes for printable characters.
		 Warning: This attribute is deprecated; you should use `KeyboardEvent.key` instead, if available.</haxe_doc>
		</charCode>
		<keyCode public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing a system and implementation dependent numerical code identifying the unmodified value of the pressed key.
		 Warning: This attribute is deprecated; you should use `KeyboardEvent.key` instead, if available.</haxe_doc>
		</keyCode>
		<altKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that is `true` if the Alt ( Option or ⌥ on OS X) key was active when the key event was generated.</haxe_doc>
		</altKey>
		<ctrlKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that is `true` if the Ctrl key was active when the key event was generated.</haxe_doc>
		</ctrlKey>
		<shiftKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that is `true` if the Shift key was active when the key event was generated.</haxe_doc>
		</shiftKey>
		<metaKey public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that is `true` if the Meta key (on Mac keyboards, the ⌘ Command key; on Windows keyboards, the Windows key (⊞)) was active when the key event was generated.</haxe_doc>
		</metaKey>
		<location public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `Number` representing the location of the key on the keyboard or other input device.</haxe_doc>
		</location>
		<repeat public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that is `true` if the key is being held down such that it is automatically repeating.</haxe_doc>
		</repeat>
		<isComposing public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that is `true` if the event is fired between after `compositionstart` and before `compositionend`.</haxe_doc>
		</isComposing>
		<key public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing the key value of the key represented by the event.</haxe_doc>
		</key>
		<getModifierState public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` indicating if the modifier key, like Alt, Shift, Ctrl, or Meta, was pressed when the event was created.</haxe_doc>
		</getModifierState>
		<initKeyEvent public="1" set="method">
			<f a="type:canBubble:cancelable:view:ctrlKey:altKey:shiftKey:metaKey:keyCode:charCode">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.html.Window"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Initializes a `KeyboardEvent` object. This has only been implemented by Gecko (others used `KeyboardEvent.initKeyboardEvent()`) and should not be used any more. The standard modern way is to use the `KeyboardEvent.KeyboardEvent` constructor.</haxe_doc>
		</initKeyEvent>
		<new public="1" set="method">
			<f a="typeArg:?keyboardEventInitDict">
				<c path="String"/>
				<t path="js.html.KeyboardEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[`KeyboardEvent` objects describe a user interaction with the keyboard. Each event describes a key; the event type (`keydown`, `keypress`, or `keyup`) identifies what kind of activity was performed.

	Documentation [KeyboardEvent](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"KeyboardEvent"</e></m></meta>
	</class>
	<typedef path="js.html.KeyboardEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/KeyboardEventInit.hx"><a>
	<which>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</which>
	<view>
		<t path="Null"><c path="js.html.Window"/></t>
		<meta><m n=":optional"/></meta>
	</view>
	<shiftKey>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</shiftKey>
	<repeat>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</repeat>
	<modifierSymbolLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierSymbolLock>
	<modifierSymbol>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierSymbol>
	<modifierScrollLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierScrollLock>
	<modifierOS>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierOS>
	<modifierNumLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierNumLock>
	<modifierFnLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierFnLock>
	<modifierFn>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierFn>
	<modifierCapsLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierCapsLock>
	<modifierAltGraph>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierAltGraph>
	<metaKey>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</metaKey>
	<location>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</location>
	<keyCode>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</keyCode>
	<key>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</key>
	<isComposing>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</isComposing>
	<detail>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</detail>
	<ctrlKey>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</ctrlKey>
	<code>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</code>
	<charCode>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</charCode>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
	<altKey>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</altKey>
</a></typedef>
	<class path="js.html.KeyframeEffectReadOnly" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/KeyframeEffectReadOnly.hx" extern="1">
		<extends path="js.html.AnimationEffectReadOnly"/>
		<target public="1" set="null">
			<x path="haxe.extern.EitherType">
				<c path="js.html.Element"/>
				<c path="js.html.CSSPseudoElement"/>
			</x>
			<haxe_doc>The element or pseudo-element being animated by this object. This may be `null` for animations that do not target a specific element.</haxe_doc>
		</target>
		<iterationComposite public="1" set="null">
			<x path="js.html.IterationCompositeOperation"/>
			<haxe_doc>The iteration composite operation for resolving the property value changes of this keyframe effect.</haxe_doc>
		</iterationComposite>
		<composite public="1" set="null">
			<x path="js.html.CompositeOperation"/>
			<haxe_doc>The composite operation property for resolving the property value changes between this and other keyframe effects.</haxe_doc>
		</composite>
		<spacing public="1" set="null">
			<c path="String"/>
			<haxe_doc>The temporal spacing of the keyframe effect's iterations</haxe_doc>
		</spacing>
		<getFrames public="1" set="method">
			<f a=""><c path="Array"><d/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getFrames>
		<new public="1" set="method">
			<f a="target:frames:?options">
				<x path="haxe.extern.EitherType">
					<c path="js.html.Element"/>
					<c path="js.html.CSSPseudoElement"/>
				</x>
				<d/>
				<x path="haxe.extern.EitherType">
					<x path="Float"/>
					<d/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `KeyframeEffectReadOnly` interface of the Web Animations API describes sets of animatable properties and values that can be played using the `Animation.Animation()` constructor, and which are inherited by `KeyframeEffect`.

	Documentation [KeyframeEffectReadOnly](https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffectReadOnly) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffectReadOnly$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffectReadOnly>]]></haxe_doc>
		<meta><m n=":native"><e>"KeyframeEffectReadOnly"</e></m></meta>
	</class>
	<class path="js.html.KeyframeEffect" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/KeyframeEffect.hx" extern="1">
		<extends path="js.html.KeyframeEffectReadOnly"/>
		<new public="1" set="method">
			<f a="target:frames:?options">
				<x path="haxe.extern.EitherType">
					<c path="js.html.Element"/>
					<c path="js.html.CSSPseudoElement"/>
				</x>
				<d/>
				<x path="haxe.extern.EitherType">
					<x path="Float"/>
					<d/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `KeyframeEffect` interface of the Web Animations API lets us create sets of animatable properties and values, called keyframes. These can then be played using the `Animation()` constructor.

	Documentation [KeyframeEffect](https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect>]]></haxe_doc>
		<meta><m n=":native"><e>"KeyframeEffect"</e></m></meta>
	</class>
	<class path="js.html.LIElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/LIElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<value public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` indicating the ordinal position of the list element inside a given `ol`. It reflects the `value` attribute of the HTML `li` element, and can be smaller than `0`. If the `li` element is not a child of an `ol` element, the property has no meaning.</haxe_doc>
		</value>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the type of the bullets, `"disc"`, `"square"` or `"circle"`. As the standard way of defining the list type is via the CSS `list-style-type` property, use the CSSOM methods to set it via a script.</haxe_doc>
		</type>
		<haxe_doc><![CDATA[The `HTMLLIElement` interface expose specific properties and methods (beyond those defined by regular `HTMLElement` interface it also has available to it by inheritance) for manipulating list elements.

	Documentation [HTMLLIElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLIElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLIElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLLIElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLLIElement"</e></m></meta>
	</class>
	<class path="js.html.LabelElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/LabelElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>Is a `HTMLFormElement` object representing the form with which the labeled control is associated, or `null` if there is no associated control, or if that control isn't associated with a form. In other words, this is just a shortcut for `HTMLLabelElement.control.form`.</haxe_doc>
		</form>
		<htmlFor public="1">
			<c path="String"/>
			<haxe_doc>Is a string containing the ID of the labeled control. This reflects the `for` attribute.</haxe_doc>
		</htmlFor>
		<control public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Is a `HTMLElement` representing the control with which the label is associated.</haxe_doc>
		</control>
		<haxe_doc><![CDATA[The `HTMLLabelElement` interface gives access to properties specific to `label` elements. It inherits methods and properties from the base `HTMLElement` interface.

	Documentation [HTMLLabelElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLLabelElement"</e></m></meta>
	</class>
	<class path="js.html.LegendElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/LegendElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<form public="1" set="null"><c path="js.html.FormElement"/></form>
		<align public="1"><c path="String"/></align>
		<haxe_doc><![CDATA[The `HTMLLegendElement` is an interface allowing to access properties of the `legend` elements. It inherits properties and methods from the `HTMLElement` interface.

	Documentation [HTMLLegendElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLegendElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLegendElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLLegendElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLLegendElement"</e></m></meta>
	</class>
	<typedef path="js.html.LifecycleCallbacks" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/LifecycleCallbacks.hx"><a>
	<detachedCallback>
		<t path="Null"><f a=""><x path="Void"/></f></t>
		<meta><m n=":optional"/></meta>
	</detachedCallback>
	<createdCallback>
		<t path="Null"><f a=""><x path="Void"/></f></t>
		<meta><m n=":optional"/></meta>
	</createdCallback>
	<attributeChangedCallback>
		<t path="Null"><f a="::">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></t>
		<meta><m n=":optional"/></meta>
	</attributeChangedCallback>
	<attachedCallback>
		<t path="Null"><f a=""><x path="Void"/></f></t>
		<meta><m n=":optional"/></meta>
	</attachedCallback>
</a></typedef>
	<class path="js.html.LinkElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/LinkElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` which represents whether the link is disabled; currently only used with style sheet links.</haxe_doc>
		</disabled>
		<href public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the URI for the target resource.</haxe_doc>
		</href>
		<crossOrigin public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that corresponds to the CORS setting for this link element. See CORS settings attributes for details.</haxe_doc>
		</crossOrigin>
		<rel public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the forward relationship of the linked resource from the document to the resource.</haxe_doc>
		</rel>
		<relList public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Is a `DOMTokenList` that reflects the `rel` HTML attribute, as a list of tokens.</haxe_doc>
		</relList>
		<media public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing a list of one or more media formats to which the resource applies.</haxe_doc>
		</media>
		<hreflang public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the language code for the linked resource.</haxe_doc>
		</hreflang>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the MIME type of the linked resource.</haxe_doc>
		</type>
		<sizes public="1" set="null">
			<c path="js.html.DOMTokenList"/>
			<haxe_doc>Is a `DOMSettableTokenList` that reflects the `sizes` HTML attribute, as a list of tokens.</haxe_doc>
		</sizes>
		<charset public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the character encoding for the target resource.</haxe_doc>
		</charset>
		<rev public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the reverse relationship of the linked resource from the resource to the document.</haxe_doc>
		</rev>
		<target public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of the target frame to which the resource applies.</haxe_doc>
		</target>
		<import_ public="1" set="null">
			<c path="js.html.HTMLDocument"/>
			<meta><m n=":native"><e>"import"</e></m></meta>
		</import_>
		<integrity public="1"><c path="String"/></integrity>
		<sheet public="1" set="null"><c path="js.html.StyleSheet"/></sheet>
		<haxe_doc><![CDATA[The `HTMLLinkElement` interface represents reference information for external resources and the relationship of those resources to a document and vice-versa. This object inherits all of the properties and methods of the `HTMLElement` interface.

	Documentation [HTMLLinkElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLLinkElement"</e></m></meta>
	</class>
	<class path="js.html.MediaStream" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MediaStream.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` containing 36 characters denoting a universally unique identifier (UUID) for the object.</haxe_doc>
		</id>
		<currentTime public="1" set="null"><x path="Float"/></currentTime>
		<getAudioTracks public="1" set="method"><f a=""><c path="Array"><c path="js.html.AudioStreamTrack"/></c></f></getAudioTracks>
		<getVideoTracks public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.VideoStreamTrack"/></c></f>
			<haxe_doc>Returns a list of the `MediaStreamTrack` objects stored in the `MediaStream` object that have their `kind` attribute set to `"video"`. The order is not defined, and may not only vary from one browser to another, but also from one call to another.</haxe_doc>
		</getVideoTracks>
		<getTracks public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.MediaStreamTrack"/></c></f>
			<haxe_doc>Returns a list of all `MediaStreamTrack` objects stored in the `MediaStream` object, regardless of the value of the `kind` attribute. The order is not defined, and may not only vary from one browser to another, but also from one call to another.</haxe_doc>
		</getTracks>
		<addTrack public="1" set="method">
			<f a="track">
				<c path="js.html.MediaStreamTrack"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores a copy of the `MediaStreamTrack` given as argument. If the track has already been added to the `MediaStream` object, nothing happens.</haxe_doc>
		</addTrack>
		<removeTrack public="1" set="method">
			<f a="track">
				<c path="js.html.MediaStreamTrack"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes the `MediaStreamTrack` given as argument. If the track is not part of the MediaStream` object, nothing happens.</haxe_doc>
		</removeTrack>
		<new public="1" set="method">
			<f a="tracks">
				<c path="Array"><c path="js.html.MediaStreamTrack"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="stream">
						<c path="js.html.MediaStream"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `MediaStream` interface represents a stream of media content. A stream consists of several tracks such as video or audio tracks. Each track is specified as an instance of `MediaStreamTrack`.

	Documentation [MediaStream](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaStream>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaStream"</e></m></meta>
	</class>
	<class path="js.html.LocalMediaStream" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/LocalMediaStream.hx" extern="1">
		<extends path="js.html.MediaStream"/>
		<stop public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stops the stream. When the source of the stream is a connected device (such as a camera or microphone), stops capture on the device.</haxe_doc>
		</stop>
		<haxe_doc><![CDATA[The `LocalMediaStream` interface represents a stream of media content fetched from a local data source. This is the interface returned by `getUserMedia()`.

	Documentation [LocalMediaStream](https://developer.mozilla.org/en-US/docs/Web/API/LocalMediaStream) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/LocalMediaStream$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/LocalMediaStream>]]></haxe_doc>
		<meta><m n=":native"><e>"LocalMediaStream"</e></m></meta>
	</class>
	<class path="js.html.Location" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Location.hx" extern="1">
		<href public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the entire URL. If changed, the associated document navigates to the new page. It can be set from a different origin than the associated document.</haxe_doc>
		</href>
		<origin public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing the canonical form of the origin of the specific location.</haxe_doc>
		</origin>
		<protocol public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the protocol scheme of the URL, including the final `':'`.</haxe_doc>
		</protocol>
		<host public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the host, that is the hostname, a `':'`, and the port of the URL.</haxe_doc>
		</host>
		<hostname public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the domain of the URL.</haxe_doc>
		</hostname>
		<port public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the port number of the URL.</haxe_doc>
		</port>
		<pathname public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing an initial `'/'` followed by the path of the URL.</haxe_doc>
		</pathname>
		<search public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a `'?'` followed by the parameters of the URL. Also known as "querystring".</haxe_doc>
		</search>
		<hash public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a `'#'` followed by the fragment identifier of the URL.</haxe_doc>
		</hash>
		<assign public="1" set="method">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</assign>
		<replace public="1" set="method">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</replace>
		<reload public="1" set="method">
			<f a="?forceget" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ forceget : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</reload>
		<haxe_doc><![CDATA[The `Location` interface represents the location (URL) of the object it is linked to. Changes done on it are reflected on the object it relates to. Both the `Document` and `Window` interface have such a linked `Location`, accessible via `Document.location` and `Window.location` respectively.

	Documentation [Location](https://developer.mozilla.org/en-US/docs/Web/API/Location) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Location$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Location>]]></haxe_doc>
		<meta><m n=":native"><e>"Location"</e></m></meta>
	</class>
	<class path="js.html.MapElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MapElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the `map` element for referencing it other context. If the `id` attribute is set, this must have the same value; and it cannot be `null` or empty.</haxe_doc>
		</name>
		<areas public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Is a live `HTMLCollection` representing the `area` elements associated to this `map`.</haxe_doc>
		</areas>
		<haxe_doc><![CDATA[The `HTMLMapElement` interface provides special properties and methods (beyond those of the regular object `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of map elements.

	Documentation [HTMLMapElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMapElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMapElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLMapElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLMapElement"</e></m></meta>
	</class>
	<class path="js.html.MediaError" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MediaError.hx" extern="1">
		<MEDIA_ERR_ABORTED public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</MEDIA_ERR_ABORTED>
		<MEDIA_ERR_NETWORK public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</MEDIA_ERR_NETWORK>
		<MEDIA_ERR_DECODE public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</MEDIA_ERR_DECODE>
		<MEDIA_ERR_SRC_NOT_SUPPORTED public="1" get="inline" set="null" expr="4" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</MEDIA_ERR_SRC_NOT_SUPPORTED>
		<code public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[An <code>unsigned short </code> that represents the error:
		 <table class="standard-table">
		  
		   <tr>
		    Name
		    Value
		    Description
		   </tr>
		  
		  
		   <tr>
		    <td><code>MEDIA_ERR_ABORTED</code></td>
		    <td><code>1</code></td>
		    <td>The fetching of the associated ressource has been aborted by the user</td>
		   </tr>
		   <tr>
		    <td><code>MEDIA_ERR_NETWORK</code></td>
		    <td><code>2</code></td>
		    <td>A network error caused the ressource to stop being fetched.</td>
		   </tr>
		   <tr>
		    <td><code>MEDIA_ERR_DECODE</code></td>
		    <td><code>3</code></td>
		    <td>A decoding error caused the ressource to stop being fetched.</td>
		   </tr>
		   <tr>
		    <td><code>MEDIA_ERR_SRC_NOT_SUPPORTED</code></td>
		    <td><code>4</code></td>
		    <td>The associated ressource has been detected to be not suitable.</td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</code>
		<haxe_doc><![CDATA[The `MediaError` interface represents an error associated to a media, like a `HTMLMediaElement`.

	Documentation [MediaError](https://developer.mozilla.org/en-US/docs/Web/API/MediaError) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaError$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaError>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaError"</e></m></meta>
	</class>
	<class path="js.html.MediaKeyStatusMapIterator" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MediaKeyStatusMapIterator.hx" extern="1">
		<next public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</next>
		<meta><m n=":native"><e>"MediaKeyStatusMapIterator"</e></m></meta>
	</class>
	<class path="js.html.MediaList" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MediaList.hx" extern="1">
		<mediaText public="1"><c path="String"/></mediaText>
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="String"/>
</f></item>
		<deleteMedium public="1" set="method">
			<f a="oldMedium">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</deleteMedium>
		<appendMedium public="1" set="method">
			<f a="newMedium">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</appendMedium>
		<meta><m n=":native"><e>"MediaList"</e></m></meta>
	</class>
	<class path="js.html.MediaQueryList" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MediaQueryList.hx" extern="1">
		<media public="1" set="null"><c path="String"/></media>
		<matches public="1" set="null"><x path="Bool"/></matches>
		<addListener public="1" set="method"><f a="listener">
	<f a="">
		<c path="js.html.MediaQueryList"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></addListener>
		<removeListener public="1" set="method"><f a="listener">
	<f a="">
		<c path="js.html.MediaQueryList"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></removeListener>
		<haxe_doc><![CDATA[A `MediaQueryList` object maintains a list of media queries on a `document`, and handles sending notifications to listeners when the media queries on the document change.

	Documentation [MediaQueryList](https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaQueryList"</e></m></meta>
	</class>
	<class path="js.html.MediaRecorder" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MediaRecorder.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<isTypeSupported public="1" set="method" static="1"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></isTypeSupported>
		<stream public="1" set="null">
			<c path="js.html.MediaStream"/>
			<haxe_doc>Returns the stream that was passed into the constructor when the `MediaRecorder` was created.</haxe_doc>
		</stream>
		<state public="1" set="null">
			<x path="js.html.RecordingState"/>
			<haxe_doc>Returns the current state of the `MediaRecorder` object (`inactive`, `recording`, or `paused`.)</haxe_doc>
		</state>
		<mimeType public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the MIME type that was selected as the recording container for the `MediaRecorder` object when it was created.</haxe_doc>
		</mimeType>
		<ondataavailable public="1"><x path="haxe.Function"/></ondataavailable>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<onstart public="1"><x path="haxe.Function"/></onstart>
		<onstop public="1"><x path="haxe.Function"/></onstop>
		<onwarning public="1"><x path="haxe.Function"/></onwarning>
		<start public="1" set="method">
			<f a="?timeSlice">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</start>
		<stop public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</stop>
		<pause public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</pause>
		<resume public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</resume>
		<requestData public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</requestData>
		<new public="1" set="method">
			<f a="node:?output:?options" v=":0:">
				<c path="js.html.audio.AudioNode"/>
				<x path="Int"/>
				<t path="js.html.MediaRecorderOptions"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ output : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="stream:?options">
		<c path="js.html.MediaStream"/>
		<t path="js.html.MediaRecorderOptions"/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[The `MediaRecorder` interface of the MediaStream Recording API provides functionality to easily record media. It is created by the invocation of the `MediaRecorder()` constructor.

	Documentation [MediaRecorder](https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaRecorder"</e></m></meta>
	</class>
	<typedef path="js.html.MediaRecorderOptions" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MediaRecorderOptions.hx"><a>
	<videoBitsPerSecond>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</videoBitsPerSecond>
	<mimeType>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</mimeType>
	<bitsPerSecond>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</bitsPerSecond>
	<audioBitsPerSecond>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</audioBitsPerSecond>
</a></typedef>
	<class path="js.html.MediaSource" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MediaSource.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<isTypeSupported public="1" set="method" static="1"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></isTypeSupported>
		<sourceBuffers public="1" set="null">
			<c path="js.html.SourceBufferList"/>
			<haxe_doc>Returns a `SourceBufferList` object containing the list of `SourceBuffer` objects associated with this `MediaSource`.</haxe_doc>
		</sourceBuffers>
		<activeSourceBuffers public="1" set="null">
			<c path="js.html.SourceBufferList"/>
			<haxe_doc>Returns a `SourceBufferList` object containing a subset of the `SourceBuffer` objects contained within `SourceBuffers` — the list of objects providing the selected video track,  enabled audio tracks, and shown/hidden text tracks.</haxe_doc>
		</activeSourceBuffers>
		<readyState public="1" set="null">
			<x path="js.html.MediaSourceReadyState"/>
			<haxe_doc>Returns an enum representing the state of the current `MediaSource`, whether it is not currently attached to a media element (`closed`), attached and ready to receive `SourceBuffer` objects (`open`), or attached but the stream has been ended via `MediaSource.endOfStream()` (`ended`.)</haxe_doc>
		</readyState>
		<duration public="1">
			<x path="Float"/>
			<haxe_doc>Gets and sets the duration of the current media being presented.</haxe_doc>
		</duration>
		<addSourceBuffer public="1" set="method">
			<f a="type">
				<c path="String"/>
				<c path="js.html.SourceBuffer"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</addSourceBuffer>
		<removeSourceBuffer public="1" set="method">
			<f a="sourceBuffer">
				<c path="js.html.SourceBuffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeSourceBuffer>
		<endOfStream public="1" set="method">
			<f a="?error">
				<x path="js.html.MediaSourceEndOfStreamError"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</endOfStream>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `MediaSource` interface represents a source of media data for an `HTMLMediaElement` object. A `MediaSource` object can be attached to a `HTMLMediaElement` to be played in the user agent.

	Documentation [MediaSource](https://developer.mozilla.org/en-US/docs/Web/API/MediaSource) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaSource$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaSource>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaSource"</e></m></meta>
	</class>
	<abstract path="js.html.MediaSourceEndOfStreamError" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MediaSourceEndOfStreamError.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._MediaSourceEndOfStreamError.MediaSourceEndOfStreamError_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MediaSourceEndOfStreamError.hx" private="1" module="js.html.MediaSourceEndOfStreamError" extern="1">
	<NETWORK public="1" get="inline" set="null" expr="cast &quot;network&quot;" line="29" static="1">
		<x path="js.html.MediaSourceEndOfStreamError"/>
		<meta>
			<m n=":value"><e>cast "network"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NETWORK>
	<DECODE public="1" get="inline" set="null" expr="cast &quot;decode&quot;" line="30" static="1">
		<x path="js.html.MediaSourceEndOfStreamError"/>
		<meta>
			<m n=":value"><e>cast "decode"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DECODE>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._MediaSourceEndOfStreamError.MediaSourceEndOfStreamError_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MediaSourceEndOfStreamError.hx" private="1" module="js.html.MediaSourceEndOfStreamError" extern="1">
		<NETWORK public="1" get="inline" set="null" expr="cast &quot;network&quot;" line="29" static="1">
			<x path="js.html.MediaSourceEndOfStreamError"/>
			<meta>
				<m n=":value"><e>cast "network"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NETWORK>
		<DECODE public="1" get="inline" set="null" expr="cast &quot;decode&quot;" line="30" static="1">
			<x path="js.html.MediaSourceEndOfStreamError"/>
			<meta>
				<m n=":value"><e>cast "decode"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DECODE>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="js.html.MediaSourceReadyState" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MediaSourceReadyState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._MediaSourceReadyState.MediaSourceReadyState_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MediaSourceReadyState.hx" private="1" module="js.html.MediaSourceReadyState" extern="1">
	<CLOSED public="1" get="inline" set="null" expr="cast &quot;closed&quot;" line="29" static="1">
		<x path="js.html.MediaSourceReadyState"/>
		<meta>
			<m n=":value"><e>cast "closed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CLOSED>
	<OPEN public="1" get="inline" set="null" expr="cast &quot;open&quot;" line="30" static="1">
		<x path="js.html.MediaSourceReadyState"/>
		<meta>
			<m n=":value"><e>cast "open"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OPEN>
	<ENDED public="1" get="inline" set="null" expr="cast &quot;ended&quot;" line="31" static="1">
		<x path="js.html.MediaSourceReadyState"/>
		<meta>
			<m n=":value"><e>cast "ended"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ENDED>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._MediaSourceReadyState.MediaSourceReadyState_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MediaSourceReadyState.hx" private="1" module="js.html.MediaSourceReadyState" extern="1">
		<CLOSED public="1" get="inline" set="null" expr="cast &quot;closed&quot;" line="29" static="1">
			<x path="js.html.MediaSourceReadyState"/>
			<meta>
				<m n=":value"><e>cast "closed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CLOSED>
		<OPEN public="1" get="inline" set="null" expr="cast &quot;open&quot;" line="30" static="1">
			<x path="js.html.MediaSourceReadyState"/>
			<meta>
				<m n=":value"><e>cast "open"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OPEN>
		<ENDED public="1" get="inline" set="null" expr="cast &quot;ended&quot;" line="31" static="1">
			<x path="js.html.MediaSourceReadyState"/>
			<meta>
				<m n=":value"><e>cast "ended"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ENDED>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="js.html.MediaStreamConstraints" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MediaStreamConstraints.hx">
		<a>
			<video>
				<t path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.MediaTrackConstraints"/>
</x></t>
				<meta><m n=":optional"/></meta>
			</video>
			<picture>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
			</picture>
			<peerIdentity>
				<t path="Null"><c path="String"/></t>
				<meta><m n=":optional"/></meta>
			</peerIdentity>
			<fakeTracks>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
			</fakeTracks>
			<fake>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
			</fake>
			<audio>
				<t path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="js.html.MediaTrackConstraints"/>
</x></t>
				<meta><m n=":optional"/></meta>
			</audio>
		</a>
		<haxe_doc><![CDATA[The `MediaStreamConstraints` dictionary is used when calling `getUserMedia()` to specify what kinds of tracks should be included in the returned `MediaStream`, and, optionally, to establish constraints for those tracks' settings.

	Documentation [MediaStreamConstraints](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints>]]></haxe_doc>
	</typedef>
	<class path="js.html.MediaStreamError" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MediaStreamError.hx" extern="1">
		<name public="1" set="null"><c path="String"/></name>
		<message public="1" set="null"><c path="String"/></message>
		<constraint public="1" set="null"><c path="String"/></constraint>
		<meta><m n=":native"><e>"MediaStreamError"</e></m></meta>
	</class>
	<typedef path="js.html.MediaTrackConstraintSet" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MediaTrackConstraintSet.hx"><a>
	<width>
		<t path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<d/>
</x></t>
		<meta><m n=":optional"/></meta>
	</width>
	<viewportWidth>
		<t path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<d/>
</x></t>
		<meta><m n=":optional"/></meta>
	</viewportWidth>
	<viewportOffsetY>
		<t path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<d/>
</x></t>
		<meta><m n=":optional"/></meta>
	</viewportOffsetY>
	<viewportOffsetX>
		<t path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<d/>
</x></t>
		<meta><m n=":optional"/></meta>
	</viewportOffsetX>
	<viewportHeight>
		<t path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<d/>
</x></t>
		<meta><m n=":optional"/></meta>
	</viewportHeight>
	<scrollWithPage>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</scrollWithPage>
	<mediaSource>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</mediaSource>
	<height>
		<t path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<d/>
</x></t>
		<meta><m n=":optional"/></meta>
	</height>
	<frameRate>
		<t path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<d/>
</x></t>
		<meta><m n=":optional"/></meta>
	</frameRate>
	<facingMode>
		<t path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="String"/></c>
		<d/>
	</x>
</x></t>
		<meta><m n=":optional"/></meta>
	</facingMode>
	<echoCancellation>
		<t path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<d/>
</x></t>
		<meta><m n=":optional"/></meta>
	</echoCancellation>
	<deviceId>
		<t path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="String"/></c>
		<d/>
	</x>
</x></t>
		<meta><m n=":optional"/></meta>
	</deviceId>
	<browserWindow>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</browserWindow>
</a></typedef>
	<typedef path="js.html.MediaTrackConstraints" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MediaTrackConstraints.hx">
		<a>
			<width>
				<t path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<d/>
</x></t>
				<meta><m n=":optional"/></meta>
			</width>
			<viewportWidth>
				<t path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<d/>
</x></t>
				<meta><m n=":optional"/></meta>
			</viewportWidth>
			<viewportOffsetY>
				<t path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<d/>
</x></t>
				<meta><m n=":optional"/></meta>
			</viewportOffsetY>
			<viewportOffsetX>
				<t path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<d/>
</x></t>
				<meta><m n=":optional"/></meta>
			</viewportOffsetX>
			<viewportHeight>
				<t path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<d/>
</x></t>
				<meta><m n=":optional"/></meta>
			</viewportHeight>
			<scrollWithPage>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
			</scrollWithPage>
			<mediaSource>
				<t path="Null"><c path="String"/></t>
				<meta><m n=":optional"/></meta>
			</mediaSource>
			<height>
				<t path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<d/>
</x></t>
				<meta><m n=":optional"/></meta>
			</height>
			<frameRate>
				<t path="Null"><x path="haxe.extern.EitherType">
	<x path="Float"/>
	<d/>
</x></t>
				<meta><m n=":optional"/></meta>
			</frameRate>
			<facingMode>
				<t path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="String"/></c>
		<d/>
	</x>
</x></t>
				<meta><m n=":optional"/></meta>
			</facingMode>
			<echoCancellation>
				<t path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<d/>
</x></t>
				<meta><m n=":optional"/></meta>
			</echoCancellation>
			<deviceId>
				<t path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="String"/></c>
		<d/>
	</x>
</x></t>
				<meta><m n=":optional"/></meta>
			</deviceId>
			<browserWindow>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
			</browserWindow>
			<advanced>
				<t path="Null"><c path="Array"><t path="js.html.MediaTrackConstraintSet"/></c></t>
				<meta><m n=":optional"/></meta>
			</advanced>
		</a>
		<haxe_doc><![CDATA[The `MediaTrackConstraints` dictionary is used to describe a set of capabilities and the value or values each can take on. A constraints dictionary is passed into `applyConstraints()` to allow a script to establish a set of exact (required) values or ranges and/or preferred values or ranges of values for the track, and the most recently-requested set of custom constraints can be retrieved by calling `getConstraints()`.

	Documentation [MediaTrackConstraints](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints>]]></haxe_doc>
	</typedef>
	<class path="js.html.MenuElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MenuElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<type public="1"><c path="String"/></type>
		<label public="1"><c path="String"/></label>
		<compact public="1"><x path="Bool"/></compact>
		<meta><m n=":native"><e>"HTMLMenuElement"</e></m></meta>
	</class>
	<class path="js.html.MenuItemElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MenuItemElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<type public="1"><c path="String"/></type>
		<label public="1"><c path="String"/></label>
		<icon public="1"><c path="String"/></icon>
		<disabled public="1"><x path="Bool"/></disabled>
		<checked public="1"><x path="Bool"/></checked>
		<radiogroup public="1"><c path="String"/></radiogroup>
		<defaultChecked public="1"><x path="Bool"/></defaultChecked>
		<meta><m n=":native"><e>"HTMLMenuItemElement"</e></m></meta>
	</class>
	<class path="js.html.MessageChannel" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MessageChannel.hx" extern="1">
		<port1 public="1" set="null">
			<c path="js.html.MessagePort"/>
			<haxe_doc>Returns port1 of the channel.</haxe_doc>
		</port1>
		<port2 public="1" set="null">
			<c path="js.html.MessagePort"/>
			<haxe_doc>Returns port2 of the channel.</haxe_doc>
		</port2>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `MessageChannel` interface of the Channel Messaging API allows us to create a new message channel and send data through it via its two `MessagePort` properties.

	Documentation [MessageChannel](https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel>]]></haxe_doc>
		<meta><m n=":native"><e>"MessageChannel"</e></m></meta>
	</class>
	<class path="js.html.MessageEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MessageEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<data public="1" set="null">
			<d/>
			<haxe_doc>Returns a `DOMString`, `Blob` or an `ArrayBuffer` containing the data send by the emitter.</haxe_doc>
		</data>
		<origin public="1" set="null">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` …</haxe_doc>
		</origin>
		<lastEventId public="1" set="null"><c path="String"/></lastEventId>
		<source public="1" set="null">
			<x path="haxe.extern.EitherType">
				<c path="js.html.Window"/>
				<c path="js.html.MessagePort"/>
			</x>
			<haxe_doc>…</haxe_doc>
		</source>
		<ports public="1" set="null">
			<c path="js.html.MessagePortList"/>
			<haxe_doc>…</haxe_doc>
		</ports>
		<initMessageEvent public="1" set="method">
			<f a="type:bubbles:cancelable:data:origin:lastEventId:source:ports">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<d/>
				<c path="String"/>
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Window"/>
					<c path="js.html.MessagePort"/>
				</x>
				<c path="Array"><c path="js.html.MessagePort"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>… Do not use this anymore: use the `MessageEvent.MessageEvent` constructor instead.</haxe_doc>
		</initMessageEvent>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<t path="js.html.MessageEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A `MessageEvent` is the interface representing a message received by a target, being a `WebSocket` or a WebRTC `RTCDataChannel`

	Documentation [MessageEvent](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"MessageEvent"</e></m></meta>
	</class>
	<typedef path="js.html.MessageEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MessageEventInit.hx"><a>
	<source>
		<t path="Null"><x path="haxe.extern.EitherType">
	<c path="js.html.Window"/>
	<c path="js.html.MessagePort"/>
</x></t>
		<meta><m n=":optional"/></meta>
	</source>
	<ports>
		<t path="Null"><c path="Array"><c path="js.html.MessagePort"/></c></t>
		<meta><m n=":optional"/></meta>
	</ports>
	<origin>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</origin>
	<lastEventId>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</lastEventId>
	<data>
		<t path="Null"><d/></t>
		<meta><m n=":optional"/></meta>
	</data>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.MessagePort" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MessagePort.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<onmessage public="1"><x path="haxe.Function"/></onmessage>
		<postMessage public="1" set="method">
			<f a="message:?transferable">
				<d/>
				<c path="Array"><d/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</postMessage>
		<start public="1" set="method"><f a=""><x path="Void"/></f></start>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<haxe_doc><![CDATA[The `MessagePort` interface of the Channel Messaging API represents one of the two ports of a `MessageChannel`, allowing sending of messages from one port and listening out for them arriving at the other.

	Documentation [MessagePort](https://developer.mozilla.org/en-US/docs/Web/API/MessagePort) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MessagePort$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MessagePort>]]></haxe_doc>
		<meta><m n=":native"><e>"MessagePort"</e></m></meta>
	</class>
	<class path="js.html.MessagePortList" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MessagePortList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.MessagePort"/>
</f></item>
		<meta><m n=":native"><e>"MessagePortList"</e></m></meta>
	</class>
	<class path="js.html.MetaElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MetaElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<name public="1"><c path="String"/></name>
		<httpEquiv public="1"><c path="String"/></httpEquiv>
		<content public="1"><c path="String"/></content>
		<scheme public="1"><c path="String"/></scheme>
		<haxe_doc><![CDATA[The `HTMLMetaElement` interface contains descriptive metadata about a document. It inherits all of the properties and methods described in the `HTMLElement` interface.

	Documentation [HTMLMetaElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLMetaElement"</e></m></meta>
	</class>
	<class path="js.html.MeterElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MeterElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<value public="1"><x path="Float"/></value>
		<min public="1"><x path="Float"/></min>
		<max public="1"><x path="Float"/></max>
		<low public="1"><x path="Float"/></low>
		<high public="1"><x path="Float"/></high>
		<optimum public="1"><x path="Float"/></optimum>
		<haxe_doc><![CDATA[The HTML `meter` elements expose the `HTMLMeterElement` interface, which provides special properties and methods (beyond the `HTMLElement` object interface they also have available to them by inheritance) for manipulating the layout and presentation of `meter` elements.

	Documentation [HTMLMeterElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLMeterElement"</e></m></meta>
	</class>
	<class path="js.html.MimeType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MimeType.hx" extern="1">
		<description public="1" set="null"><c path="String"/></description>
		<enabledPlugin public="1" set="null"><c path="js.html.Plugin"/></enabledPlugin>
		<suffixes public="1" set="null"><c path="String"/></suffixes>
		<type public="1" set="null"><c path="String"/></type>
		<meta><m n=":native"><e>"MimeType"</e></m></meta>
	</class>
	<class path="js.html.MimeTypeArray" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MimeTypeArray.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.MimeType"/>
</f></item>
		<namedItem public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="js.html.MimeType"/>
</f></namedItem>
		<meta><m n=":native"><e>"MimeTypeArray"</e></m></meta>
	</class>
	<class path="js.html.ModElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ModElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<cite public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `cite` HTML attribute, containing a URI of a resource explaining the change.</haxe_doc>
		</cite>
		<dateTime public="1"><c path="String"/></dateTime>
		<haxe_doc><![CDATA[The `HTMLModElement` interface provides special properties (beyond the regular methods and properties available through the `HTMLElement` interface they also have available to them by inheritance) for manipulating modification elements, that is `del` and `ins`.

	Documentation [HTMLModElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLModElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLModElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLModElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLModElement"</e></m></meta>
	</class>
	<typedef path="js.html.MouseEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MouseEventInit.hx"><a>
	<view>
		<t path="Null"><c path="js.html.Window"/></t>
		<meta><m n=":optional"/></meta>
	</view>
	<shiftKey>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</shiftKey>
	<screenY>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</screenY>
	<screenX>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</screenX>
	<relatedTarget>
		<t path="Null"><c path="js.html.EventTarget"/></t>
		<meta><m n=":optional"/></meta>
	</relatedTarget>
	<movementY>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</movementY>
	<movementX>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</movementX>
	<modifierSymbolLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierSymbolLock>
	<modifierSymbol>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierSymbol>
	<modifierScrollLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierScrollLock>
	<modifierOS>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierOS>
	<modifierNumLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierNumLock>
	<modifierFnLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierFnLock>
	<modifierFn>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierFn>
	<modifierCapsLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierCapsLock>
	<modifierAltGraph>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierAltGraph>
	<metaKey>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</metaKey>
	<detail>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</detail>
	<ctrlKey>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</ctrlKey>
	<clientY>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</clientY>
	<clientX>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</clientX>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<buttons>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</buttons>
	<button>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</button>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
	<altKey>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</altKey>
</a></typedef>
	<class path="js.html.MouseScrollEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MouseScrollEvent.hx" extern="1">
		<extends path="js.html.MouseEvent"/>
		<HORIZONTAL_AXIS public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</HORIZONTAL_AXIS>
		<VERTICAL_AXIS public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</VERTICAL_AXIS>
		<axis public="1" set="null"><x path="Int"/></axis>
		<initMouseScrollEvent public="1" set="method"><f a="type:canBubble:cancelable:view:detail:screenX:screenY:clientX:clientY:ctrlKey:altKey:shiftKey:metaKey:button:relatedTarget:axis">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="js.html.Window"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Int"/>
	<c path="js.html.EventTarget"/>
	<x path="Int"/>
	<x path="Void"/>
</f></initMouseScrollEvent>
		<haxe_doc><![CDATA[The `MouseScrollEvent` interface represents events that occur due to the user moving a mouse wheel or similar input device.

	Documentation [MouseScrollEvent](https://developer.mozilla.org/en-US/docs/Web/API/MouseScrollEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MouseScrollEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MouseScrollEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"MouseScrollEvent"</e></m></meta>
	</class>
	<class path="js.html.MutationEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MutationEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<MODIFICATION public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</MODIFICATION>
		<ADDITION public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</ADDITION>
		<REMOVAL public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</REMOVAL>
		<relatedNode public="1" set="null"><c path="js.html.Node"/></relatedNode>
		<prevValue public="1" set="null"><c path="String"/></prevValue>
		<newValue public="1" set="null"><c path="String"/></newValue>
		<attrName public="1" set="null"><c path="String"/></attrName>
		<attrChange public="1" set="null"><x path="Int"/></attrChange>
		<initMutationEvent public="1" set="method">
			<f a="type:canBubble:cancelable:relatedNode:prevValue:newValue:attrName:attrChange">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.html.Node"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</initMutationEvent>
		<haxe_doc><![CDATA[Provides event properties that are specific to modifications to the Document Object Model (DOM) hierarchy and nodes.

	Documentation [MutationEvent](https://developer.mozilla.org/en-US/docs/Web/API/MutationEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MutationEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MutationEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"MutationEvent"</e></m></meta>
	</class>
	<class path="js.html.MutationObserver" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MutationObserver.hx" extern="1">
		<observe public="1" set="method">
			<f a="target:?options">
				<c path="js.html.Node"/>
				<t path="js.html.MutationObserverInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</observe>
		<disconnect public="1" set="method"><f a=""><x path="Void"/></f></disconnect>
		<takeRecords public="1" set="method"><f a=""><c path="Array"><c path="js.html.MutationRecord"/></c></f></takeRecords>
		<new public="1" set="method">
			<f a="mutationCallback">
				<f a=":">
					<c path="Array"><c path="js.html.MutationRecord"/></c>
					<c path="js.html.MutationObserver"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[`MutationObserver` provides developers a way to react to changes in a DOM. It is designed as a replacement for Mutation Events defined in the DOM3 Events specification.

	Documentation [MutationObserver](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver>]]></haxe_doc>
		<meta><m n=":native"><e>"MutationObserver"</e></m></meta>
	</class>
	<typedef path="js.html.MutationObserverInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MutationObserverInit.hx"><a>
	<subtree>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</subtree>
	<nativeAnonymousChildList>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</nativeAnonymousChildList>
	<childList>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</childList>
	<characterDataOldValue>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</characterDataOldValue>
	<characterData>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</characterData>
	<attributes>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</attributes>
	<attributeOldValue>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</attributeOldValue>
	<attributeFilter>
		<t path="Null"><c path="Array"><c path="String"/></c></t>
		<meta><m n=":optional"/></meta>
	</attributeFilter>
	<animations>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</animations>
</a></typedef>
	<class path="js.html.MutationRecord" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/MutationRecord.hx" extern="1">
		<type public="1" set="null"><c path="String"/></type>
		<target public="1" set="null"><c path="js.html.Node"/></target>
		<addedNodes public="1" set="null"><c path="js.html.NodeList"/></addedNodes>
		<removedNodes public="1" set="null"><c path="js.html.NodeList"/></removedNodes>
		<previousSibling public="1" set="null"><c path="js.html.Node"/></previousSibling>
		<nextSibling public="1" set="null"><c path="js.html.Node"/></nextSibling>
		<attributeName public="1" set="null"><c path="String"/></attributeName>
		<attributeNamespace public="1" set="null"><c path="String"/></attributeNamespace>
		<oldValue public="1" set="null"><c path="String"/></oldValue>
		<haxe_doc><![CDATA[A `MutationRecord` represents an individual DOM mutation. It is the object that is passed to `MutationObserver`'s callback.

	Documentation [MutationRecord](https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord>]]></haxe_doc>
		<meta><m n=":native"><e>"MutationRecord"</e></m></meta>
	</class>
	<class path="js.html.NamedNodeMap" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/NamedNodeMap.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the amount of objects in the map.</haxe_doc>
		</length>
		<getNamedItem public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Returns a `Attr`, corresponding to the given name.</haxe_doc>
		</getNamedItem>
		<setNamedItem public="1" set="method">
			<f a="arg">
				<c path="js.html.Attr"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setNamedItem>
		<removeNamedItem public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeNamedItem>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Returns the `Attr` at the given index, or `null` if the index is higher or equal to the number of nodes.</haxe_doc>
		</item>
		<getNamedItemNS public="1" set="method">
			<f a="namespaceURI:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>Returns a `Attr` identified by a namespace and related local name.</haxe_doc>
		</getNamedItemNS>
		<setNamedItemNS public="1" set="method">
			<f a="arg">
				<c path="js.html.Attr"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setNamedItemNS>
		<removeNamedItemNS public="1" set="method">
			<f a="namespaceURI:localName">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.Attr"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeNamedItemNS>
		<haxe_doc><![CDATA[The `NamedNodeMap` interface represents a collection of `Attr` objects. Objects inside a `NamedNodeMap` are not in any particular order, unlike `NodeList`, although they may be accessed by an index as in an array.

	Documentation [NamedNodeMap](https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap>]]></haxe_doc>
		<meta><m n=":native"><e>"NamedNodeMap"</e></m></meta>
	</class>
	<class path="js.html.Navigator" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Navigator.hx" extern="1">
		<permissions public="1" set="null">
			<c path="js.html.Permissions"/>
			<haxe_doc>Returns a `Permissions` object that can be used to query and update permission status of APIs covered by the Permissions API.</haxe_doc>
		</permissions>
		<mimeTypes public="1" set="null"><c path="js.html.MimeTypeArray"/></mimeTypes>
		<plugins public="1" set="null"><c path="js.html.PluginArray"/></plugins>
		<doNotTrack public="1" set="null">
			<c path="String"/>
			<haxe_doc>Reports the value of the user's do-not-track preference. When this value is "yes", your web site or application should not track the user.</haxe_doc>
		</doNotTrack>
		<battery public="1" set="null">
			<c path="js.html.BatteryManager"/>
			<haxe_doc>Returns a `BatteryManager` object you can use to get information about the battery charging status.</haxe_doc>
		</battery>
		<maxTouchPoints public="1" set="null"><x path="Int"/></maxTouchPoints>
		<oscpu public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a string that represents the current operating system.</haxe_doc>
		</oscpu>
		<vendor public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the vendor name of the current browser (e.g., "Netscape6").</haxe_doc>
		</vendor>
		<vendorSub public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the vendor version number (e.g. "6.1").</haxe_doc>
		</vendorSub>
		<productSub public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the build number of the current browser (e.g., "20060909").</haxe_doc>
		</productSub>
		<cookieEnabled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a boolean indicating whether cookies are enabled in the browser or not.</haxe_doc>
		</cookieEnabled>
		<buildID public="1" set="null"><c path="String"/></buildID>
		<hardwareConcurrency public="1" set="null"><x path="Int"/></hardwareConcurrency>
		<geolocation public="1" set="null">
			<c path="js.html.Geolocation"/>
			<haxe_doc>Returns a `Geolocation` object allowing accessing the location of the device.</haxe_doc>
		</geolocation>
		<appCodeName public="1" set="null"><c path="String"/></appCodeName>
		<appName public="1" set="null"><c path="String"/></appName>
		<appVersion public="1" set="null"><c path="String"/></appVersion>
		<platform public="1" set="null"><c path="String"/></platform>
		<userAgent public="1" set="null"><c path="String"/></userAgent>
		<product public="1" set="null"><c path="String"/></product>
		<language public="1" set="null"><c path="String"/></language>
		<languages public="1" set="null"><c path="Array"><c path="String"/></c></languages>
		<onLine public="1" set="null"><x path="Bool"/></onLine>
		<getBattery public="1" set="method">
			<f a=""><c path="js.Promise"><c path="js.html.BatteryManager"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getBattery>
		<vibrate public="1" set="method">
			<f a="pattern">
				<c path="Array"><x path="Int"/></c>
				<x path="Bool"/>
			</f>
			<overloads><vibrate public="1" set="method"><f a="duration">
	<x path="Int"/>
	<x path="Bool"/>
</f></vibrate></overloads>
		</vibrate>
		<javaEnabled public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</javaEnabled>
		<getGamepads public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.Gamepad"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getGamepads>
		<sendBeacon public="1" set="method">
			<f a="url:?data">
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.ArrayBufferView"/>
					<x path="haxe.extern.EitherType">
						<c path="js.html.Blob"/>
						<x path="haxe.extern.EitherType">
							<c path="String"/>
							<c path="js.html.FormData"/>
						</x>
					</x>
				</x>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</sendBeacon>
		<registerProtocolHandler public="1" set="method">
			<f a="scheme:url:title">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</registerProtocolHandler>
		<registerContentHandler public="1" set="method">
			<f a="mimeType:url:title">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</registerContentHandler>
		<taintEnabled public="1" set="method"><f a=""><x path="Bool"/></f></taintEnabled>
		<haxe_doc><![CDATA[The `Navigator` interface represents the state and the identity of the user agent. It allows scripts to query it and to register themselves to carry on some activities.

	Documentation [Navigator](https://developer.mozilla.org/en-US/docs/Web/API/Navigator) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Navigator$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Navigator>]]></haxe_doc>
		<meta><m n=":native"><e>"Navigator"</e></m></meta>
	</class>
	<class path="js.html.NodeFilter" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/NodeFilter.hx" extern="1">
		<FILTER_ACCEPT public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</FILTER_ACCEPT>
		<FILTER_REJECT public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</FILTER_REJECT>
		<FILTER_SKIP public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</FILTER_SKIP>
		<SHOW_ALL public="1" get="inline" set="null" expr="cast 4294967295" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>cast 4294967295</e></m></meta>
		</SHOW_ALL>
		<SHOW_ELEMENT public="1" get="inline" set="null" expr="1" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SHOW_ELEMENT>
		<SHOW_ATTRIBUTE public="1" get="inline" set="null" expr="2" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SHOW_ATTRIBUTE>
		<SHOW_TEXT public="1" get="inline" set="null" expr="4" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SHOW_TEXT>
		<SHOW_CDATA_SECTION public="1" get="inline" set="null" expr="8" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</SHOW_CDATA_SECTION>
		<SHOW_ENTITY_REFERENCE public="1" get="inline" set="null" expr="16" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</SHOW_ENTITY_REFERENCE>
		<SHOW_ENTITY public="1" get="inline" set="null" expr="32" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32</e></m></meta>
		</SHOW_ENTITY>
		<SHOW_PROCESSING_INSTRUCTION public="1" get="inline" set="null" expr="64" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>64</e></m></meta>
		</SHOW_PROCESSING_INSTRUCTION>
		<SHOW_COMMENT public="1" get="inline" set="null" expr="128" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>128</e></m></meta>
		</SHOW_COMMENT>
		<SHOW_DOCUMENT public="1" get="inline" set="null" expr="256" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>256</e></m></meta>
		</SHOW_DOCUMENT>
		<SHOW_DOCUMENT_TYPE public="1" get="inline" set="null" expr="512" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>512</e></m></meta>
		</SHOW_DOCUMENT_TYPE>
		<SHOW_DOCUMENT_FRAGMENT public="1" get="inline" set="null" expr="1024" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1024</e></m></meta>
		</SHOW_DOCUMENT_FRAGMENT>
		<SHOW_NOTATION public="1" get="inline" set="null" expr="2048" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2048</e></m></meta>
		</SHOW_NOTATION>
		<acceptNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Returns an <code>unsigned short</code> that will be used to tell if a given <code>Node</code> must be accepted or not by the <code>NodeIterator</code> or <code>TreeWalker</code> iteration algorithm. This method is expected to be written by the user of a <code>NodeFilter</code>. Possible return values are:
		 <table class="standard-table">
		  
		   <tr>
		    <td class="header">Constant</td>
		    <td class="header">Description</td>
		   </tr>
		   <tr>
		    <td><code>FILTER_ACCEPT</code></td>
		    <td>Value returned by the <code>NodeFilter.acceptNode()</code> method when a node should be accepted.</td>
		   </tr>
		   <tr>
		    <td><code>FILTER_REJECT</code></td>
		    <td>Value to be returned by the <code>NodeFilter.acceptNode()</code> method when a node should be rejected. For <code>TreeWalker</code>, child nodes are also rejected. For <code>NodeIterator</code>, this flag is synonymous with FILTER_SKIP.</td>
		   </tr>
		   <tr>
		    <td><code>FILTER_SKIP</code></td>
		    <td>Value to be returned by <code>NodeFilter.acceptNode()</code> for nodes to be skipped by the <code>NodeIterator</code> or <code>TreeWalker</code> object. The children of skipped nodes are still considered. This is treated as "skip this node but not its children".</td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</acceptNode>
		<haxe_doc><![CDATA[A `NodeFilter` interface represents an object used to filter the nodes in a `NodeIterator` or `TreeWalker`. They don't know anything about the DOM or how to traverse nodes; they just know how to evaluate a single node against the provided filter.

	Documentation [NodeFilter](https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter>]]></haxe_doc>
		<meta><m n=":native"><e>"NodeFilter"</e></m></meta>
	</class>
	<class path="js.html.NodeIterator" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/NodeIterator.hx" extern="1">
		<root public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the root node as specified when the `NodeIterator` was created.</haxe_doc>
		</root>
		<referenceNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the `Node` to which the iterator is anchored.</haxe_doc>
		</referenceNode>
		<pointerBeforeReferenceNode public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` flag that indicates whether the `NodeIterator` is anchored before, the flag being `true`, or after, the flag being `false`, the anchor node.</haxe_doc>
		</pointerBeforeReferenceNode>
		<whatToShow public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns an <code>unsigned long</code> being a bitmask made of constants describing the types of <code>Node</code> that must to be presented. Non-matching nodes are skipped, but their children may be included, if relevant. The possible values are:
		 <table class="standard-table">
		  
		   <tr>
		    <td class="header">Constant</td>
		    <td class="header">Numerical value</td>
		    <td class="header">Description</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ALL</code></td>
		    <td><code>-1</code> (that is the max value of <code>unsigned long</code>)</td>
		    <td>Shows all nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ATTRIBUTE</code> <em>(deprecated)</em></td>
		    <td><code>2</code></td>
		    <td>Shows attribute <code>Attr</code> nodes. This is meaningful only when creating a <code>NodeIterator</code> with an <code>Attr</code> node as its root; in this case, it means that the attribute node will appear in the first position of the iteration or traversal. Since attributes are never children of other nodes, they do not appear when traversing over the document tree.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_CDATA_SECTION</code> <em>(deprecated)</em></td>
		    <td><code>8</code></td>
		    <td>Shows <code>CDATASection</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_COMMENT</code></td>
		    <td><code>128</code></td>
		    <td>Shows <code>Comment</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_DOCUMENT</code></td>
		    <td><code>256</code></td>
		    <td>Shows <code>Document</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_DOCUMENT_FRAGMENT</code></td>
		    <td><code>1024</code></td>
		    <td>Shows <code>DocumentFragment</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_DOCUMENT_TYPE</code></td>
		    <td><code>512</code></td>
		    <td>Shows <code>DocumentType</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ELEMENT</code></td>
		    <td><code>1</code></td>
		    <td>Shows <code>Element</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ENTITY</code> <em>(deprecated)</em></td>
		    <td><code>32</code></td>
		    <td>Shows <code>Entity</code> nodes. This is meaningful only when creating a <code>NodeIterator</code> with an <code>Entity</code> node as its root; in this case, it means that the <code>Entity</code> node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ENTITY_REFERENCE</code> <em>(deprecated)</em></td>
		    <td><code>16</code></td>
		    <td>Shows <code>EntityReference</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_NOTATION</code> <em>(deprecated)</em></td>
		    <td><code>2048</code></td>
		    <td>Shows <code>Notation</code> nodes. This is meaningful only when creating a <code>NodeIterator</code> with a <code>Notation</code> node as its root; in this case, it means that the <code>Notation</code> node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_PROCESSING_INSTRUCTION</code></td>
		    <td><code>64</code></td>
		    <td>Shows <code>ProcessingInstruction</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_TEXT</code></td>
		    <td><code>4</code></td>
		    <td>Shows <code>Text</code> nodes.</td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</whatToShow>
		<filter public="1" set="null">
			<c path="js.html.NodeFilter"/>
			<haxe_doc>Returns a `NodeFilter` used to select the relevant nodes.</haxe_doc>
		</filter>
		<nextNode public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</nextNode>
		<previousNode public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</previousNode>
		<detach public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>This operation is a no-op. It doesn't do anything. Previously it was telling the engine that the `NodeIterator` was no more used, but this is now useless.</haxe_doc>
		</detach>
		<haxe_doc><![CDATA[The `NodeIterator` interface represents an iterator over the members of a list of the nodes in a subtree of the DOM. The nodes will be returned in document order.

	Documentation [NodeIterator](https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator>]]></haxe_doc>
		<meta><m n=":native"><e>"NodeIterator"</e></m></meta>
	</class>
	<class path="js.html.NodeList" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/NodeList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of nodes in the `NodeList`.</haxe_doc>
		</length>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>Returns an item in the list by its index, or `null` if the index is out-of-bounds; can be used as an alternative to simply accessing `nodeList[idx]` (which instead returns  `undefined` when `idx` is out-of-bounds).</haxe_doc>
		</item>
		<haxe_doc><![CDATA[`NodeList` objects are collections of nodes such as those returned by `Node.childNodes` and the `document.querySelectorAll` method.

	Documentation [NodeList](https://developer.mozilla.org/en-US/docs/Web/API/NodeList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/NodeList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/NodeList>]]></haxe_doc>
		<meta><m n=":native"><e>"NodeList"</e></m></meta>
	</class>
	<class path="js.html.Notification" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Notification.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<permission public="1" set="null" static="1"><x path="js.html.NotificationPermission"/></permission>
		<onclick public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `click` event. It is triggered each time the user clicks on the notification.</haxe_doc>
		</onclick>
		<onshow public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `show` event. It is triggered when the notification is displayed.</haxe_doc>
		</onshow>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `error` event. It is triggered each time the notification encounters an error.</haxe_doc>
		</onerror>
		<onclose public="1">
			<x path="haxe.Function"/>
			<haxe_doc>A handler for the `close` event. It is triggered when the user closes the notification.</haxe_doc>
		</onclose>
		<title public="1" set="null">
			<c path="String"/>
			<haxe_doc>The title of the notification as specified in the first parameter of the constructor.</haxe_doc>
		</title>
		<dir public="1" set="null">
			<x path="js.html.NotificationDirection"/>
			<haxe_doc>The text direction of the notification as specified in the options parameter of the constructor.</haxe_doc>
		</dir>
		<lang public="1" set="null">
			<c path="String"/>
			<haxe_doc>The language code of the notification as specified in the options parameter of the constructor.</haxe_doc>
		</lang>
		<body public="1" set="null">
			<c path="String"/>
			<haxe_doc>The body string of the notification as specified in the options parameter of the constructor.</haxe_doc>
		</body>
		<tag public="1" set="null">
			<c path="String"/>
			<haxe_doc>The ID of the notification (if any) as specified in the options parameter of the constructor.</haxe_doc>
		</tag>
		<icon public="1" set="null">
			<c path="String"/>
			<haxe_doc>The URL of the image used as an icon of the notification as specified in the options parameter of the constructor.</haxe_doc>
		</icon>
		<data public="1" set="null">
			<d/>
			<haxe_doc>Returns a structured clone of the notification’s data.</haxe_doc>
		</data>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Programmatically closes a notification.</haxe_doc>
		</close>
		<new public="1" set="method">
			<f a="title:?options">
				<c path="String"/>
				<t path="js.html.NotificationOptions"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Notification` interface of the Notifications API is used to configure and display desktop notifications to the user.

	Documentation [Notification](https://developer.mozilla.org/en-US/docs/Web/API/Notification) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Notification$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Notification>]]></haxe_doc>
		<meta><m n=":native"><e>"Notification"</e></m></meta>
	</class>
	<abstract path="js.html.NotificationDirection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/NotificationDirection.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._NotificationDirection.NotificationDirection_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/NotificationDirection.hx" private="1" module="js.html.NotificationDirection" extern="1">
	<AUTO public="1" get="inline" set="null" expr="cast &quot;auto&quot;" line="29" static="1">
		<x path="js.html.NotificationDirection"/>
		<meta>
			<m n=":value"><e>cast "auto"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AUTO>
	<LTR public="1" get="inline" set="null" expr="cast &quot;ltr&quot;" line="30" static="1">
		<x path="js.html.NotificationDirection"/>
		<meta>
			<m n=":value"><e>cast "ltr"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LTR>
	<RTL public="1" get="inline" set="null" expr="cast &quot;rtl&quot;" line="31" static="1">
		<x path="js.html.NotificationDirection"/>
		<meta>
			<m n=":value"><e>cast "rtl"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RTL>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._NotificationDirection.NotificationDirection_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/NotificationDirection.hx" private="1" module="js.html.NotificationDirection" extern="1">
		<AUTO public="1" get="inline" set="null" expr="cast &quot;auto&quot;" line="29" static="1">
			<x path="js.html.NotificationDirection"/>
			<meta>
				<m n=":value"><e>cast "auto"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AUTO>
		<LTR public="1" get="inline" set="null" expr="cast &quot;ltr&quot;" line="30" static="1">
			<x path="js.html.NotificationDirection"/>
			<meta>
				<m n=":value"><e>cast "ltr"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LTR>
		<RTL public="1" get="inline" set="null" expr="cast &quot;rtl&quot;" line="31" static="1">
			<x path="js.html.NotificationDirection"/>
			<meta>
				<m n=":value"><e>cast "rtl"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RTL>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.NotificationEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/NotificationEvent.hx" extern="1">
		<extends path="js.html.ExtendableEvent"/>
		<notification public="1" set="null"><c path="js.html.Notification"/></notification>
		<new public="1" set="method">
			<f a="type:eventInitDict">
				<c path="String"/>
				<t path="js.html.NotificationEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"NotificationEvent"</e></m></meta>
	</class>
	<typedef path="js.html.NotificationEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/NotificationEventInit.hx"><a>
	<notification><c path="js.html.Notification"/></notification>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<typedef path="js.html.NotificationOptions" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/NotificationOptions.hx"><a>
	<tag>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</tag>
	<lang>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</lang>
	<icon>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</icon>
	<dir>
		<t path="Null"><x path="js.html.NotificationDirection"/></t>
		<meta><m n=":optional"/></meta>
	</dir>
	<data>
		<t path="Null"><d/></t>
		<meta><m n=":optional"/></meta>
	</data>
	<body>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</body>
</a></typedef>
	<abstract path="js.html.NotificationPermission" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/NotificationPermission.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._NotificationPermission.NotificationPermission_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/NotificationPermission.hx" private="1" module="js.html.NotificationPermission" extern="1">
	<DEFAULT_ public="1" get="inline" set="null" expr="cast &quot;default&quot;" line="29" static="1">
		<x path="js.html.NotificationPermission"/>
		<meta>
			<m n=":value"><e>cast "default"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DEFAULT_>
	<DENIED public="1" get="inline" set="null" expr="cast &quot;denied&quot;" line="30" static="1">
		<x path="js.html.NotificationPermission"/>
		<meta>
			<m n=":value"><e>cast "denied"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DENIED>
	<GRANTED public="1" get="inline" set="null" expr="cast &quot;granted&quot;" line="31" static="1">
		<x path="js.html.NotificationPermission"/>
		<meta>
			<m n=":value"><e>cast "granted"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GRANTED>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._NotificationPermission.NotificationPermission_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/NotificationPermission.hx" private="1" module="js.html.NotificationPermission" extern="1">
		<DEFAULT_ public="1" get="inline" set="null" expr="cast &quot;default&quot;" line="29" static="1">
			<x path="js.html.NotificationPermission"/>
			<meta>
				<m n=":value"><e>cast "default"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DEFAULT_>
		<DENIED public="1" get="inline" set="null" expr="cast &quot;denied&quot;" line="30" static="1">
			<x path="js.html.NotificationPermission"/>
			<meta>
				<m n=":value"><e>cast "denied"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DENIED>
		<GRANTED public="1" get="inline" set="null" expr="cast &quot;granted&quot;" line="31" static="1">
			<x path="js.html.NotificationPermission"/>
			<meta>
				<m n=":value"><e>cast "granted"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GRANTED>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.NotifyPaintEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/NotifyPaintEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<clientRects public="1" set="null"><c path="js.html.DOMRectList"/></clientRects>
		<boundingClientRect public="1" set="null"><c path="js.html.DOMRect"/></boundingClientRect>
		<paintRequests public="1" set="null"><c path="js.html.PaintRequestList"/></paintRequests>
		<meta><m n=":native"><e>"NotifyPaintEvent"</e></m></meta>
	</class>
	<class path="js.html.OListElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/OListElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<reversed public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` value reflecting the `reversed` and defining if the numbering is descending, that is its value is `true`, or ascending (`false`).</haxe_doc>
		</reversed>
		<start public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` value reflecting the `start` and defining the value of the first number of the first element of the list.</haxe_doc>
		</start>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` value reflecting the `type` and defining the kind of marker to be used to display. It can have the following values:
		 
		  `'1'` meaning that decimal numbers are used: `1`, `2`, `3`, `4`, `5`, …
		  `'a'` meaning that the lowercase latin alphabet is used:  `a`, `b`, `c`, `d`, `e`, …
		  `'A'` meaning that the uppercase latin alphabet is used: `A`, `B`, `C`, `D`, `E`, …
		  `'i'` meaning that the lowercase latin numerals are used: `i`, `ii`, `iii`, `iv`, `v`, …
		  `'I'` meaning that the uppercase latin numerals are used: `I`, `II`, `III`, `IV`, `V`, …</haxe_doc>
		</type>
		<compact public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating that spacing between list items should be reduced. This property reflects the `compact` attribute only, it doesn't consider the `line-height` CSS property used for that behavior in modern pages.</haxe_doc>
		</compact>
		<haxe_doc><![CDATA[The `HTMLOListElement` interface provides special properties (beyond those defined on the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating ordered list elements.

	Documentation [HTMLOListElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOListElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOListElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLOListElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOListElement"</e></m></meta>
	</class>
	<class path="js.html.ObjectElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ObjectElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<data public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `data` HTML attribute, specifying the address of a resource's data.</haxe_doc>
		</data>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `type` HTML attribute, specifying the MIME type of the resource.</haxe_doc>
		</type>
		<typeMustMatch public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `typeMustMatch` HTML attribute, indicating if the resource specified by `data` must only be played if it matches the `type` attribute.</haxe_doc>
		</typeMustMatch>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `name` HTML attribute, specifying the name of the browsing context.</haxe_doc>
		</name>
		<useMap public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `usemap` HTML attribute, specifying a `map` element to use.</haxe_doc>
		</useMap>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>Retuns a `HTMLFormElement` representing the object element's form owner, or null if there isn't one.</haxe_doc>
		</form>
		<width public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `width` HTML attribute, specifying the displayed width of the resource in CSS pixels.</haxe_doc>
		</width>
		<height public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `height` HTML attribute, specifying the displayed height of the resource in CSS pixels.</haxe_doc>
		</height>
		<contentDocument public="1" set="null">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Returns a `Document` representing the active document of the object element's nested browsing context, if any; otherwise `null`.</haxe_doc>
		</contentDocument>
		<contentWindow public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a `WindowProxy` representing the window proxy of the object element's nested browsing context, if any; otherwise `null`.</haxe_doc>
		</contentWindow>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` that indicates whether the element is a candidate for constraint validation. Always `false` for `HTMLObjectElement` objects.</haxe_doc>
		</willValidate>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>Returns a `ValidityState` with the validity states that this element is in.</haxe_doc>
		</validity>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` representing a localized message that describes the validation constraints that the control does not satisfy (if any). This is the empty string if the control is not a candidate for constraint validation (`willValidate` is `false`), or it satisfies its constraints.</haxe_doc>
		</validationMessage>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing an enumerated property indicating alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, `"justify"`, and `"center"`.</haxe_doc>
		</align>
		<archive public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `archive` HTML attribute, containing a list of archives for resources for this object.</haxe_doc>
		</archive>
		<code public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of an applet class file, containing either the applet's subclass, or the path to get to the class, including the class file itself.</haxe_doc>
		</code>
		<declare public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `declare` HTML attribute, indicating that this is a declaration, not an instantiation, of the object.</haxe_doc>
		</declare>
		<hspace public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` representing the horizontal space in pixels around the control.</haxe_doc>
		</hspace>
		<standby public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `standby` HTML attribute, specifying a message to display while the object loads.</haxe_doc>
		</standby>
		<vspace public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` representing the horizontal space in pixels around the control.</haxe_doc>
		</vspace>
		<codeBase public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `codebase` HTML attribute, specifying the base path to use to resolve relative URIs.</haxe_doc>
		</codeBase>
		<codeType public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `codetype` HTML attribute, specifying the content type of the data.</haxe_doc>
		</codeType>
		<border public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `border` HTML attribute, specifying the width of a border around the object.</haxe_doc>
		</border>
		<checkValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Retuns a `Boolean` that always is `true`, because `object` objects are never candidates for constraint validation.</haxe_doc>
		</checkValidity>
		<setCustomValidity public="1" set="method">
			<f a="error">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a custom validity message for the element. If this message is not the empty string, then the element is suffering from a custom validity error, and does not validate.</haxe_doc>
		</setCustomValidity>
		<getSVGDocument public="1" set="method"><f a=""><c path="js.html.HTMLDocument"/></f></getSVGDocument>
		<haxe_doc><![CDATA[The `HTMLObjectElement` interface provides special properties and methods (beyond those on the `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of `object` element, representing external resources.

	Documentation [HTMLObjectElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLObjectElement"</e></m></meta>
	</class>
	<typedef path="js.html.ObjectURLOptions" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ObjectURLOptions.hx"><a/></typedef>
	<class path="js.html.OptGroupElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/OptGroupElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `boolean` representing whether or not the whole list of children `option` is disabled (true) or not (false).</haxe_doc>
		</disabled>
		<label public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the label for the group.</haxe_doc>
		</label>
		<haxe_doc><![CDATA[The `HTMLOptGroupElement` interface provides special properties and methods (beyond the regular `HTMLElement` object interface they also have available to them by inheritance) for manipulating the layout and presentation of `optgroup` elements.

	Documentation [HTMLOptGroupElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptGroupElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptGroupElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptGroupElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOptGroupElement"</e></m></meta>
	</class>
	<class path="js.html.OptionElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/OptionElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<disabled public="1"><x path="Bool"/></disabled>
		<form public="1" set="null"><c path="js.html.FormElement"/></form>
		<label public="1"><c path="String"/></label>
		<defaultSelected public="1"><x path="Bool"/></defaultSelected>
		<selected public="1"><x path="Bool"/></selected>
		<value public="1"><c path="String"/></value>
		<text public="1"><c path="String"/></text>
		<index public="1" set="null"><x path="Int"/></index>
		<haxe_doc><![CDATA[The `HTMLOptionElement` interface represents `option` elements and inherits all classes and methods of the `HTMLElement` interface.

	Documentation [HTMLOptionElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOptionElement"</e></m></meta>
	</class>
	<abstract path="js.html.OrientationLockType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/OrientationLockType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._OrientationLockType.OrientationLockType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/OrientationLockType.hx" private="1" module="js.html.OrientationLockType" extern="1">
	<ANY public="1" get="inline" set="null" expr="cast &quot;any&quot;" line="29" static="1">
		<x path="js.html.OrientationLockType"/>
		<meta>
			<m n=":value"><e>cast "any"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ANY>
	<NATURAL public="1" get="inline" set="null" expr="cast &quot;natural&quot;" line="30" static="1">
		<x path="js.html.OrientationLockType"/>
		<meta>
			<m n=":value"><e>cast "natural"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NATURAL>
	<LANDSCAPE public="1" get="inline" set="null" expr="cast &quot;landscape&quot;" line="31" static="1">
		<x path="js.html.OrientationLockType"/>
		<meta>
			<m n=":value"><e>cast "landscape"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LANDSCAPE>
	<PORTRAIT public="1" get="inline" set="null" expr="cast &quot;portrait&quot;" line="32" static="1">
		<x path="js.html.OrientationLockType"/>
		<meta>
			<m n=":value"><e>cast "portrait"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PORTRAIT>
	<PORTRAIT_PRIMARY public="1" get="inline" set="null" expr="cast &quot;portrait-primary&quot;" line="33" static="1">
		<x path="js.html.OrientationLockType"/>
		<meta>
			<m n=":value"><e>cast "portrait-primary"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PORTRAIT_PRIMARY>
	<PORTRAIT_SECONDARY public="1" get="inline" set="null" expr="cast &quot;portrait-secondary&quot;" line="34" static="1">
		<x path="js.html.OrientationLockType"/>
		<meta>
			<m n=":value"><e>cast "portrait-secondary"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PORTRAIT_SECONDARY>
	<LANDSCAPE_PRIMARY public="1" get="inline" set="null" expr="cast &quot;landscape-primary&quot;" line="35" static="1">
		<x path="js.html.OrientationLockType"/>
		<meta>
			<m n=":value"><e>cast "landscape-primary"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LANDSCAPE_PRIMARY>
	<LANDSCAPE_SECONDARY public="1" get="inline" set="null" expr="cast &quot;landscape-secondary&quot;" line="36" static="1">
		<x path="js.html.OrientationLockType"/>
		<meta>
			<m n=":value"><e>cast "landscape-secondary"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LANDSCAPE_SECONDARY>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._OrientationLockType.OrientationLockType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/OrientationLockType.hx" private="1" module="js.html.OrientationLockType" extern="1">
		<ANY public="1" get="inline" set="null" expr="cast &quot;any&quot;" line="29" static="1">
			<x path="js.html.OrientationLockType"/>
			<meta>
				<m n=":value"><e>cast "any"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ANY>
		<NATURAL public="1" get="inline" set="null" expr="cast &quot;natural&quot;" line="30" static="1">
			<x path="js.html.OrientationLockType"/>
			<meta>
				<m n=":value"><e>cast "natural"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NATURAL>
		<LANDSCAPE public="1" get="inline" set="null" expr="cast &quot;landscape&quot;" line="31" static="1">
			<x path="js.html.OrientationLockType"/>
			<meta>
				<m n=":value"><e>cast "landscape"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LANDSCAPE>
		<PORTRAIT public="1" get="inline" set="null" expr="cast &quot;portrait&quot;" line="32" static="1">
			<x path="js.html.OrientationLockType"/>
			<meta>
				<m n=":value"><e>cast "portrait"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PORTRAIT>
		<PORTRAIT_PRIMARY public="1" get="inline" set="null" expr="cast &quot;portrait-primary&quot;" line="33" static="1">
			<x path="js.html.OrientationLockType"/>
			<meta>
				<m n=":value"><e>cast "portrait-primary"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PORTRAIT_PRIMARY>
		<PORTRAIT_SECONDARY public="1" get="inline" set="null" expr="cast &quot;portrait-secondary&quot;" line="34" static="1">
			<x path="js.html.OrientationLockType"/>
			<meta>
				<m n=":value"><e>cast "portrait-secondary"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PORTRAIT_SECONDARY>
		<LANDSCAPE_PRIMARY public="1" get="inline" set="null" expr="cast &quot;landscape-primary&quot;" line="35" static="1">
			<x path="js.html.OrientationLockType"/>
			<meta>
				<m n=":value"><e>cast "landscape-primary"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LANDSCAPE_PRIMARY>
		<LANDSCAPE_SECONDARY public="1" get="inline" set="null" expr="cast &quot;landscape-secondary&quot;" line="36" static="1">
			<x path="js.html.OrientationLockType"/>
			<meta>
				<m n=":value"><e>cast "landscape-secondary"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LANDSCAPE_SECONDARY>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="js.html.OrientationType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/OrientationType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._OrientationType.OrientationType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/OrientationType.hx" private="1" module="js.html.OrientationType" extern="1">
	<PORTRAIT_PRIMARY public="1" get="inline" set="null" expr="cast &quot;portrait-primary&quot;" line="29" static="1">
		<x path="js.html.OrientationType"/>
		<meta>
			<m n=":value"><e>cast "portrait-primary"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PORTRAIT_PRIMARY>
	<PORTRAIT_SECONDARY public="1" get="inline" set="null" expr="cast &quot;portrait-secondary&quot;" line="30" static="1">
		<x path="js.html.OrientationType"/>
		<meta>
			<m n=":value"><e>cast "portrait-secondary"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PORTRAIT_SECONDARY>
	<LANDSCAPE_PRIMARY public="1" get="inline" set="null" expr="cast &quot;landscape-primary&quot;" line="31" static="1">
		<x path="js.html.OrientationType"/>
		<meta>
			<m n=":value"><e>cast "landscape-primary"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LANDSCAPE_PRIMARY>
	<LANDSCAPE_SECONDARY public="1" get="inline" set="null" expr="cast &quot;landscape-secondary&quot;" line="32" static="1">
		<x path="js.html.OrientationType"/>
		<meta>
			<m n=":value"><e>cast "landscape-secondary"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LANDSCAPE_SECONDARY>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._OrientationType.OrientationType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/OrientationType.hx" private="1" module="js.html.OrientationType" extern="1">
		<PORTRAIT_PRIMARY public="1" get="inline" set="null" expr="cast &quot;portrait-primary&quot;" line="29" static="1">
			<x path="js.html.OrientationType"/>
			<meta>
				<m n=":value"><e>cast "portrait-primary"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PORTRAIT_PRIMARY>
		<PORTRAIT_SECONDARY public="1" get="inline" set="null" expr="cast &quot;portrait-secondary&quot;" line="30" static="1">
			<x path="js.html.OrientationType"/>
			<meta>
				<m n=":value"><e>cast "portrait-secondary"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PORTRAIT_SECONDARY>
		<LANDSCAPE_PRIMARY public="1" get="inline" set="null" expr="cast &quot;landscape-primary&quot;" line="31" static="1">
			<x path="js.html.OrientationType"/>
			<meta>
				<m n=":value"><e>cast "landscape-primary"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LANDSCAPE_PRIMARY>
		<LANDSCAPE_SECONDARY public="1" get="inline" set="null" expr="cast &quot;landscape-secondary&quot;" line="32" static="1">
			<x path="js.html.OrientationType"/>
			<meta>
				<m n=":value"><e>cast "landscape-secondary"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LANDSCAPE_SECONDARY>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.OutputElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/OutputElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<htmlFor public="1" set="null"><c path="js.html.DOMTokenList"/></htmlFor>
		<form public="1" set="null"><c path="js.html.FormElement"/></form>
		<name public="1"><c path="String"/></name>
		<type public="1" set="null"><c path="String"/></type>
		<defaultValue public="1"><c path="String"/></defaultValue>
		<value public="1"><c path="String"/></value>
		<willValidate public="1" set="null"><x path="Bool"/></willValidate>
		<validity public="1" set="null"><c path="js.html.ValidityState"/></validity>
		<validationMessage public="1" set="null"><c path="String"/></validationMessage>
		<checkValidity public="1" set="method"><f a=""><x path="Bool"/></f></checkValidity>
		<setCustomValidity public="1" set="method"><f a="error">
	<c path="String"/>
	<x path="Void"/>
</f></setCustomValidity>
		<haxe_doc><![CDATA[The `HTMLOutputElement` interface provides properties and methods (beyond those inherited from `HTMLElement`) for manipulating the layout and presentation of `output` elements.

	Documentation [HTMLOutputElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLOutputElement"</e></m></meta>
	</class>
	<class path="js.html.PageTransitionEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/PageTransitionEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<persisted public="1" set="null"><x path="Bool"/></persisted>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<t path="js.html.PageTransitionEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Page transition events fire when a webpage is being loaded or unloaded.

	Documentation [PageTransitionEvent](https://developer.mozilla.org/en-US/docs/Web/API/PageTransitionEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PageTransitionEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PageTransitionEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"PageTransitionEvent"</e></m></meta>
	</class>
	<typedef path="js.html.PageTransitionEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/PageTransitionEventInit.hx"><a>
	<persisted>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</persisted>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.PaintRequest" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/PaintRequest.hx" extern="1">
		<clientRect public="1" set="null"><c path="js.html.DOMRect"/></clientRect>
		<reason public="1" set="null"><c path="String"/></reason>
		<meta><m n=":native"><e>"PaintRequest"</e></m></meta>
	</class>
	<class path="js.html.PaintRequestList" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/PaintRequestList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.PaintRequest"/>
</f></item>
		<meta><m n=":native"><e>"PaintRequestList"</e></m></meta>
	</class>
	<class path="js.html.ParagraphElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ParagraphElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1"><c path="String"/></align>
		<haxe_doc><![CDATA[The `HTMLParagraphElement` interface provides special properties (beyond those of the regular `HTMLElement` object interface it inherits) for manipulating `p` elements.

	Documentation [HTMLParagraphElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLParagraphElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLParagraphElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLParagraphElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLParagraphElement"</e></m></meta>
	</class>
	<class path="js.html.ParamElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ParamElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the name of the parameter. It reflects the `name` attribute.</haxe_doc>
		</name>
		<value public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the value associated to the parameter. It reflects the `value` attribute.</haxe_doc>
		</value>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the type of the parameter when `valueType` has the `"ref"` value. It reflects the `type` attribute.</haxe_doc>
		</type>
		<valueType public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the type of the `value`. It reflects the ``valuetype`` attribute and has one of the values: `"data"`, `"ref"`, or `"object"`.</haxe_doc>
		</valueType>
		<haxe_doc><![CDATA[The `HTMLParamElement` interface provides special properties (beyond those of the regular `HTMLElement` object interface it inherits) for manipulating `param` elements, representing a pair of a key and a value that acts as a parameter for an `object` element.

	Documentation [HTMLParamElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLParamElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLParamElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLParamElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLParamElement"</e></m></meta>
	</class>
	<class path="js.html.Path2D" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Path2D.hx" extern="1">
		<addPath public="1" set="method">
			<f a="path:?transformation">
				<c path="js.html.Path2D"/>
				<c path="js.html.svg.Matrix"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a path to the current path.</haxe_doc>
		</addPath>
		<closePath public="1" set="method"><f a=""><x path="Void"/></f></closePath>
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<quadraticCurveTo public="1" set="method"><f a="cpx:cpy:x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quadraticCurveTo>
		<bezierCurveTo public="1" set="method"><f a="cp1x:cp1y:cp2x:cp2y:x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></bezierCurveTo>
		<arcTo public="1" set="method">
			<f a="x1:y1:x2:y2:radius">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arcTo>
		<rect public="1" set="method"><f a="x:y:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rect>
		<arc public="1" set="method">
			<f a="x:y:radius:startAngle:endAngle:?anticlockwise" v=":::::false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ anticlockwise : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arc>
		<ellipse public="1" set="method">
			<f a="x:y:radiusX:radiusY:rotation:startAngle:endAngle:?anticlockwise" v=":::::::false">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ anticlockwise : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</ellipse>
		<new public="1" set="method">
			<f a="pathString">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a=""><x path="Void"/></f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="other">
						<c path="js.html.Path2D"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `Path2D` interface of the Canvas 2D API is used to declare paths that are then later used on `CanvasRenderingContext2D` objects. The path methods of the `CanvasRenderingContext2D` interface are present on this interface as well and are allowing you to create paths that you can retain and replay as required on a canvas.

	Documentation [Path2D](https://developer.mozilla.org/en-US/docs/Web/API/Path2D) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Path2D$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Path2D>]]></haxe_doc>
		<meta><m n=":native"><e>"Path2D"</e></m></meta>
	</class>
	<class path="js.html.Performance" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Performance.hx" extern="1">
		<timing public="1" set="null">
			<c path="js.html.PerformanceTiming"/>
			<haxe_doc>Is a `PerformanceTiming` object containing latency-related performance information.</haxe_doc>
		</timing>
		<navigation public="1" set="null">
			<c path="js.html.PerformanceNavigation"/>
			<haxe_doc>Is a `PerformanceNavigation` object representing the type of navigation that occurs in the given browsing context, like the amount of redirections needed to fetch the resource.</haxe_doc>
		</navigation>
		<now public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a `DOMHighResTimeStamp` representing the amount of milliseconds elapsed since a reference instant.</haxe_doc>
		</now>
		<haxe_doc><![CDATA[The `Performance` interface represents timing-related performance information for the given page.

	Documentation [Performance](https://developer.mozilla.org/en-US/docs/Web/API/Performance) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Performance$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Performance>]]></haxe_doc>
		<meta><m n=":native"><e>"Performance"</e></m></meta>
	</class>
	<class path="js.html.PerformanceEntry" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/PerformanceEntry.hx" extern="1">
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the name of a performance entry when the metric was created.</haxe_doc>
		</name>
		<entryType public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` representing the type of performance metric such as "`mark`". See `PerformanceEntry.entryType` for a list of valid values.</haxe_doc>
		</entryType>
		<startTime public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` representing the starting time for the performance metric.</haxe_doc>
		</startTime>
		<duration public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` representing the time value of the duration of the performance event.</haxe_doc>
		</duration>
		<haxe_doc><![CDATA[The `PerformanceEntry` object encapsulates a single performance metric that is part of the performance timeline. A performance entry can be directly created by making a performance `mark` or `measure` (for example by calling the `mark()` method) at an explicit point in an application. Performance entries are also created in indirect ways such as loading a resource (such as an image).

	Documentation [PerformanceEntry](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry>]]></haxe_doc>
		<meta><m n=":native"><e>"PerformanceEntry"</e></m></meta>
	</class>
	<class path="js.html.PerformanceMark" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/PerformanceMark.hx" extern="1">
		<extends path="js.html.PerformanceEntry"/>
		<haxe_doc><![CDATA[`PerformanceMark` is an abstract interface for `performance entries` with an `entry type` of "`mark`". Entries of this type are created by calling `performance.mark()` to add a named `DOMHighResTimeStamp` (the mark) to the browser's performance timeline.

	Documentation [PerformanceMark](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceMark) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceMark$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PerformanceMark>]]></haxe_doc>
		<meta><m n=":native"><e>"PerformanceMark"</e></m></meta>
	</class>
	<class path="js.html.PerformanceMeasure" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/PerformanceMeasure.hx" extern="1">
		<extends path="js.html.PerformanceEntry"/>
		<haxe_doc><![CDATA[`PerformanceMeasure` is an abstract interface for `performance entries` with an `entry type` of "`measure`". Entries of this type are created by calling `performance.measure()` to add a named `DOMHighResTimeStamp` (the measure) between two marks to the browser's performance timeline.

	Documentation [PerformanceMeasure](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceMeasure) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceMeasure$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PerformanceMeasure>]]></haxe_doc>
		<meta><m n=":native"><e>"PerformanceMeasure"</e></m></meta>
	</class>
	<class path="js.html.PerformanceNavigation" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/PerformanceNavigation.hx" extern="1">
		<TYPE_NAVIGATE public="1" get="inline" set="null" expr="0" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</TYPE_NAVIGATE>
		<TYPE_RELOAD public="1" get="inline" set="null" expr="1" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</TYPE_RELOAD>
		<TYPE_BACK_FORWARD public="1" get="inline" set="null" expr="2" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</TYPE_BACK_FORWARD>
		<TYPE_RESERVED public="1" get="inline" set="null" expr="255" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>255</e></m></meta>
		</TYPE_RESERVED>
		<type public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Is an <code>unsigned short</code> containing a constant describing how the navigation to this page was done. Possible values are:
		 <table class="standard-table">
		  
		   <tr>
		    Value
		    Constant name
		    Meaning
		   </tr>
		  
		  
		   <tr>
		    <td><code>0</code></td>
		    <td><code>TYPE_NAVIGATE</code></td>
		    <td>The page was accessed by following a link, a bookmark, a form submission, a script, or typing the URL in the address bar.</td>
		   </tr>
		   <tr>
		    <td><code>1</code></td>
		    <td><code>TYPE_RELOAD</code></td>
		    <td>The page was accessed by clicking the Reload button or via the <code>Location.reload()</code> method.</td>
		   </tr>
		   <tr>
		    <td><code>2</code></td>
		    <td><code>TYPE_BACK_FORWARD</code></td>
		    <td>The page was accessed by navigating into the history.</td>
		   </tr>
		   <tr>
		    <td><code>255</code></td>
		    <td><code>TYPE_RESERVED</code></td>
		    <td>Any other way.</td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</type>
		<redirectCount public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned short` representing the number of REDIRECTs done before reaching the page.</haxe_doc>
		</redirectCount>
		<haxe_doc><![CDATA[The `PerformanceNavigation` interface represents information about how the navigation to the current document was done.

	Documentation [PerformanceNavigation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation>]]></haxe_doc>
		<meta><m n=":native"><e>"PerformanceNavigation"</e></m></meta>
	</class>
	<class path="js.html.PerformanceResourceTiming" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/PerformanceResourceTiming.hx" extern="1">
		<extends path="js.html.PerformanceEntry"/>
		<initiatorType public="1" set="null"><c path="String"/></initiatorType>
		<nextHopProtocol public="1" set="null"><c path="String"/></nextHopProtocol>
		<redirectStart public="1" set="null"><x path="Float"/></redirectStart>
		<redirectEnd public="1" set="null"><x path="Float"/></redirectEnd>
		<fetchStart public="1" set="null"><x path="Float"/></fetchStart>
		<domainLookupStart public="1" set="null"><x path="Float"/></domainLookupStart>
		<domainLookupEnd public="1" set="null"><x path="Float"/></domainLookupEnd>
		<connectStart public="1" set="null"><x path="Float"/></connectStart>
		<connectEnd public="1" set="null"><x path="Float"/></connectEnd>
		<secureConnectionStart public="1" set="null"><x path="Float"/></secureConnectionStart>
		<requestStart public="1" set="null"><x path="Float"/></requestStart>
		<responseStart public="1" set="null"><x path="Float"/></responseStart>
		<responseEnd public="1" set="null"><x path="Float"/></responseEnd>
		<transferSize public="1" set="null"><x path="Int"/></transferSize>
		<encodedBodySize public="1" set="null"><x path="Int"/></encodedBodySize>
		<decodedBodySize public="1" set="null"><x path="Int"/></decodedBodySize>
		<haxe_doc><![CDATA[The `PerformanceResourceTiming` interface enables retrieving and analyzing detailed network timing data regarding the loading of an application's resources. An application can use the timing metrics to determine, for example, the length of time it takes to fetch a specific resource, such as an `XMLHttpRequest`, `SVG`, image, or script.

	Documentation [PerformanceResourceTiming](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming>]]></haxe_doc>
		<meta><m n=":native"><e>"PerformanceResourceTiming"</e></m></meta>
	</class>
	<class path="js.html.PerformanceTiming" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/PerformanceTiming.hx" extern="1">
		<navigationStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned long long` representing the moment, in miliseconds since the UNIX epoch, right after the prompt for unload terminates on the previous document in the same browsing context. If there is no previous document, this value will be the same as `PerformanceTiming.fetchStart`.</haxe_doc>
		</navigationStart>
		<unloadEventStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned long long` representing the moment, in miliseconds since the UNIX epoch, the `unload` event has been thrown. If there is no previous document, or if the previous document, or one of the needed redirects, is not of the same origin, the value returned is `0`.</haxe_doc>
		</unloadEventStart>
		<unloadEventEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned long long` representing the moment, in miliseconds since the UNIX epoch, the `unload` event handler finishes. If there is no previous document, or if the previous document, or one of the needed redirects, is not of the same origin, the value returned is `0`.</haxe_doc>
		</unloadEventEnd>
		<redirectStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned long long` representing the moment, in miliseconds since the UNIX epoch, the first HTTP redirect starts. If there is no redirect, or if one of the redirects is not of the same origin, the value returned is `0`.</haxe_doc>
		</redirectStart>
		<redirectEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned long long` representing the moment, in miliseconds since the UNIX epoch, the last HTTP redirect is completed, that is when the last byte of the HTTP response has been received. If there is no redirect, or if one of the redirect is not of the same origin, the value returned is `0`.</haxe_doc>
		</redirectEnd>
		<fetchStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned long long` representing the moment, in miliseconds since the UNIX epoch, the browser is ready to fetch the document using an HTTP request. This moment is before the check to any application cache.</haxe_doc>
		</fetchStart>
		<domainLookupStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned long long` representing the moment, in miliseconds since the UNIX epoch, where the domain lookup starts. If a persistent connection is used, or the information is stored in a cache or a local resource, the value will be the same as `PerformanceTiming.fetchStart`.</haxe_doc>
		</domainLookupStart>
		<domainLookupEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned long long` representing the moment, in miliseconds since the UNIX epoch, where the domain lookup is finished. If a persistent connection is used, or the information is stored in a cache or a local resource, the value will be the same as `PerformanceTiming.fetchStart`.</haxe_doc>
		</domainLookupEnd>
		<connectStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned long long` representing the moment, in miliseconds since the UNIX epoch, where the request to open a connection is sent to the network. If the transport layer reports an error and the connection establishment is started again, the last connection establisment start time is given. If a persistent connection is used, the value will be the same as `PerformanceTiming.fetchStart`.</haxe_doc>
		</connectStart>
		<connectEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned long long` representing the moment, in miliseconds since the UNIX epoch, where the connection is opened network. If the transport layer reports an error and the connection establishment is started again, the last connection establisment end time is given. If a persistent connection is used, the value will be the same as `PerformanceTiming.fetchStart`. A connection is considered as opened when all secure connection handshake, or SOCKS authentication, is terminated.</haxe_doc>
		</connectEnd>
		<requestStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned long long` representing the moment, in miliseconds since the UNIX epoch, when the browser sent the request to obtain the actual document, from the server or from a cache. If the transport layer fails after the start of the request and the connection is reopened, this property will be set to the time corresponding to the new request.</haxe_doc>
		</requestStart>
		<responseStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned long long` representing the moment, in miliseconds since the UNIX epoch, when the browser received the first byte of the response, from the server from a cache, of from a local resource.</haxe_doc>
		</responseStart>
		<responseEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned long long` representing the moment, in miliseconds since the UNIX epoch, when the browser received the last byte of the response, or when the connection is closed if this happened first, from the server from a cache, of from a local resource.</haxe_doc>
		</responseEnd>
		<domLoading public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned long long` representing the moment, in miliseconds since the UNIX epoch, when the parser started its work, that is when its `Document.readyState` changes to `'loading'` and the corresponding `readystatechange` event is thrown.</haxe_doc>
		</domLoading>
		<domInteractive public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned long long` representing the moment, in miliseconds since the UNIX epoch, when the parser finished its work on the main document, that is when its `Document.readyState` changes to `'interactive'` and the corresponding `readystatechange` event is thrown.</haxe_doc>
		</domInteractive>
		<domContentLoadedEventStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned long long` representing the moment, in miliseconds since the UNIX epoch, right before the parser sent the `DOMContentLoaded` event, that is right after all the scripts that need to be executed right after parsing has been executed.</haxe_doc>
		</domContentLoadedEventStart>
		<domContentLoadedEventEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned long long` representing the moment, in miliseconds since the UNIX epoch, right after all the scripts that need to be executed as soon as possible, in order or not, has been executed.</haxe_doc>
		</domContentLoadedEventEnd>
		<domComplete public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned long long` representing the moment, in miliseconds since the UNIX epoch, when the parser finished its work on the main document, that is when its `Document.readyState` changes to `'complete'` and the corresponding `readystatechange` event is thrown.</haxe_doc>
		</domComplete>
		<loadEventStart public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned long long` representing the moment, in miliseconds since the UNIX epoch, when the `load` event was sent for the current document. If this event has not yet been sent, it returns `0.`</haxe_doc>
		</loadEventStart>
		<loadEventEnd public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned long long` representing the moment, in miliseconds since the UNIX epoch, when the `load` event handler terminated, that is when the load event is completed. If this event has not yet been sent, or is not yet completed, it returns `0.`</haxe_doc>
		</loadEventEnd>
		<haxe_doc><![CDATA[The `PerformanceTiming` interface represents timing-related performance information for the given page.

	Documentation [PerformanceTiming](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming>]]></haxe_doc>
		<meta><m n=":native"><e>"PerformanceTiming"</e></m></meta>
	</class>
	<abstract path="js.html.PermissionState" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/PermissionState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._PermissionState.PermissionState_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/PermissionState.hx" private="1" module="js.html.PermissionState" extern="1">
	<GRANTED public="1" get="inline" set="null" expr="cast &quot;granted&quot;" line="29" static="1">
		<x path="js.html.PermissionState"/>
		<meta>
			<m n=":value"><e>cast "granted"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GRANTED>
	<DENIED public="1" get="inline" set="null" expr="cast &quot;denied&quot;" line="30" static="1">
		<x path="js.html.PermissionState"/>
		<meta>
			<m n=":value"><e>cast "denied"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DENIED>
	<PROMPT public="1" get="inline" set="null" expr="cast &quot;prompt&quot;" line="31" static="1">
		<x path="js.html.PermissionState"/>
		<meta>
			<m n=":value"><e>cast "prompt"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PROMPT>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._PermissionState.PermissionState_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/PermissionState.hx" private="1" module="js.html.PermissionState" extern="1">
		<GRANTED public="1" get="inline" set="null" expr="cast &quot;granted&quot;" line="29" static="1">
			<x path="js.html.PermissionState"/>
			<meta>
				<m n=":value"><e>cast "granted"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GRANTED>
		<DENIED public="1" get="inline" set="null" expr="cast &quot;denied&quot;" line="30" static="1">
			<x path="js.html.PermissionState"/>
			<meta>
				<m n=":value"><e>cast "denied"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DENIED>
		<PROMPT public="1" get="inline" set="null" expr="cast &quot;prompt&quot;" line="31" static="1">
			<x path="js.html.PermissionState"/>
			<meta>
				<m n=":value"><e>cast "prompt"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PROMPT>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.PermissionStatus" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/PermissionStatus.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<state public="1" set="null">
			<x path="js.html.PermissionState"/>
			<haxe_doc>Returns the state of a requested permission; one of `'granted'`, `'denied'`, or `'prompt'`.</haxe_doc>
		</state>
		<onchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An event called whenever `PermissionStatus.status` changes.</haxe_doc>
		</onchange>
		<haxe_doc><![CDATA[The `PermissionStatus` interface of the Permissions API provides the state of an object and an event handler for monitoring changes to said state.

	Documentation [PermissionStatus](https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus>]]></haxe_doc>
		<meta><m n=":native"><e>"PermissionStatus"</e></m></meta>
	</class>
	<class path="js.html.Permissions" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Permissions.hx" extern="1">
		<query public="1" set="method">
			<f a="permission">
				<d/>
				<c path="js.Promise"><c path="js.html.PermissionStatus"/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</query>
		<revoke public="1" set="method">
			<f a="permission">
				<d/>
				<c path="js.Promise"><c path="js.html.PermissionStatus"/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</revoke>
		<haxe_doc><![CDATA[Documentation [Permissions](https://developer.mozilla.org/en-US/docs/Web/API/Permissions) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Permissions$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Permissions>]]></haxe_doc>
		<meta><m n=":native"><e>"Permissions"</e></m></meta>
	</class>
	<class path="js.html.PictureElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/PictureElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<haxe_doc><![CDATA[The `HTMLPictureElement` interface represents a `picture` HTML element. It doesn't implement specific properties or methods.

	Documentation [HTMLPictureElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLPictureElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLPictureElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLPictureElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLPictureElement"</e></m></meta>
	</class>
	<abstract path="js.html.PlaybackDirection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/PlaybackDirection.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._PlaybackDirection.PlaybackDirection_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/PlaybackDirection.hx" private="1" module="js.html.PlaybackDirection" extern="1">
	<NORMAL public="1" get="inline" set="null" expr="cast &quot;normal&quot;" line="29" static="1">
		<x path="js.html.PlaybackDirection"/>
		<meta>
			<m n=":value"><e>cast "normal"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NORMAL>
	<REVERSE public="1" get="inline" set="null" expr="cast &quot;reverse&quot;" line="30" static="1">
		<x path="js.html.PlaybackDirection"/>
		<meta>
			<m n=":value"><e>cast "reverse"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</REVERSE>
	<ALTERNATE public="1" get="inline" set="null" expr="cast &quot;alternate&quot;" line="31" static="1">
		<x path="js.html.PlaybackDirection"/>
		<meta>
			<m n=":value"><e>cast "alternate"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ALTERNATE>
	<ALTERNATE_REVERSE public="1" get="inline" set="null" expr="cast &quot;alternate-reverse&quot;" line="32" static="1">
		<x path="js.html.PlaybackDirection"/>
		<meta>
			<m n=":value"><e>cast "alternate-reverse"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ALTERNATE_REVERSE>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._PlaybackDirection.PlaybackDirection_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/PlaybackDirection.hx" private="1" module="js.html.PlaybackDirection" extern="1">
		<NORMAL public="1" get="inline" set="null" expr="cast &quot;normal&quot;" line="29" static="1">
			<x path="js.html.PlaybackDirection"/>
			<meta>
				<m n=":value"><e>cast "normal"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NORMAL>
		<REVERSE public="1" get="inline" set="null" expr="cast &quot;reverse&quot;" line="30" static="1">
			<x path="js.html.PlaybackDirection"/>
			<meta>
				<m n=":value"><e>cast "reverse"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</REVERSE>
		<ALTERNATE public="1" get="inline" set="null" expr="cast &quot;alternate&quot;" line="31" static="1">
			<x path="js.html.PlaybackDirection"/>
			<meta>
				<m n=":value"><e>cast "alternate"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ALTERNATE>
		<ALTERNATE_REVERSE public="1" get="inline" set="null" expr="cast &quot;alternate-reverse&quot;" line="32" static="1">
			<x path="js.html.PlaybackDirection"/>
			<meta>
				<m n=":value"><e>cast "alternate-reverse"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ALTERNATE_REVERSE>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.Plugin" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Plugin.hx" extern="1">
		<description public="1" set="null"><c path="String"/></description>
		<filename public="1" set="null"><c path="String"/></filename>
		<version public="1" set="null"><c path="String"/></version>
		<name public="1" set="null"><c path="String"/></name>
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.MimeType"/>
</f></item>
		<namedItem public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="js.html.MimeType"/>
</f></namedItem>
		<haxe_doc><![CDATA[The `Plugin` interface provides information about a browser plugin.

	Documentation [Plugin](https://developer.mozilla.org/en-US/docs/Web/API/Plugin) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Plugin$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Plugin>]]></haxe_doc>
		<meta><m n=":native"><e>"Plugin"</e></m></meta>
	</class>
	<class path="js.html.PluginArray" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/PluginArray.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.Plugin"/>
</f></item>
		<namedItem public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="js.html.Plugin"/>
</f></namedItem>
		<refresh public="1" set="method">
			<f a="?reloadDocuments" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ reloadDocuments : false }</e></m></meta>
		</refresh>
		<haxe_doc><![CDATA[The `PluginArray` interface is used to store a list of `Plugin` objects describing the available plugins; it's returned by the `window.navigator.plugins` property. The `PluginArray` is not a JavaScript array, but has the `length` property and supports accessing individual items using bracket notation (`plugins[2]`), as well as via `item(index)` and `namedItem("name")` methods.

	Documentation [PluginArray](https://developer.mozilla.org/en-US/docs/Web/API/PluginArray) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PluginArray$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PluginArray>]]></haxe_doc>
		<meta><m n=":native"><e>"PluginArray"</e></m></meta>
	</class>
	<class path="js.html.PointerEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/PointerEvent.hx" extern="1">
		<extends path="js.html.MouseEvent"/>
		<pointerId public="1" set="null"><x path="Int"/></pointerId>
		<width public="1" set="null"><x path="Int"/></width>
		<height public="1" set="null"><x path="Int"/></height>
		<pressure public="1" set="null"><x path="Float"/></pressure>
		<tiltX public="1" set="null"><x path="Int"/></tiltX>
		<tiltY public="1" set="null"><x path="Int"/></tiltY>
		<pointerType public="1" set="null"><c path="String"/></pointerType>
		<isPrimary public="1" set="null"><x path="Bool"/></isPrimary>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<t path="js.html.PointerEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `PointerEvent` interface represents the state of a DOM event produced by a pointer such as the geometry of the contact point, the device type that generated the event, the amount of pressure that was applied on the contact surface, etc.

	Documentation [PointerEvent](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"PointerEvent"</e></m></meta>
	</class>
	<typedef path="js.html.PointerEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/PointerEventInit.hx"><a>
	<width>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</width>
	<view>
		<t path="Null"><c path="js.html.Window"/></t>
		<meta><m n=":optional"/></meta>
	</view>
	<tiltY>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</tiltY>
	<tiltX>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</tiltX>
	<shiftKey>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</shiftKey>
	<screenY>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</screenY>
	<screenX>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</screenX>
	<relatedTarget>
		<t path="Null"><c path="js.html.EventTarget"/></t>
		<meta><m n=":optional"/></meta>
	</relatedTarget>
	<pressure>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</pressure>
	<pointerType>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</pointerType>
	<pointerId>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</pointerId>
	<movementY>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</movementY>
	<movementX>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</movementX>
	<modifierSymbolLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierSymbolLock>
	<modifierSymbol>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierSymbol>
	<modifierScrollLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierScrollLock>
	<modifierOS>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierOS>
	<modifierNumLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierNumLock>
	<modifierFnLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierFnLock>
	<modifierFn>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierFn>
	<modifierCapsLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierCapsLock>
	<modifierAltGraph>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierAltGraph>
	<metaKey>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</metaKey>
	<isPrimary>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</isPrimary>
	<height>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</height>
	<detail>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</detail>
	<ctrlKey>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</ctrlKey>
	<clientY>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</clientY>
	<clientX>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</clientX>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<buttons>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</buttons>
	<button>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</button>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
	<altKey>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</altKey>
</a></typedef>
	<class path="js.html.PopStateEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/PopStateEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<state public="1" set="null"><d/></state>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<t path="js.html.PopStateEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[An event handler for the `popstate` event on the window.

	Documentation [PopStateEvent](https://developer.mozilla.org/en-US/docs/Web/API/PopStateEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PopStateEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PopStateEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"PopStateEvent"</e></m></meta>
	</class>
	<typedef path="js.html.PopStateEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/PopStateEventInit.hx"><a>
	<state>
		<t path="Null"><d/></t>
		<meta><m n=":optional"/></meta>
	</state>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.PopupBlockedEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/PopupBlockedEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<requestingWindow public="1" set="null"><c path="js.html.Window"/></requestingWindow>
		<popupWindowURI public="1" set="null"><d/></popupWindowURI>
		<popupWindowName public="1" set="null"><c path="String"/></popupWindowName>
		<popupWindowFeatures public="1" set="null"><c path="String"/></popupWindowFeatures>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<t path="js.html.PopupBlockedEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"PopupBlockedEvent"</e></m></meta>
	</class>
	<typedef path="js.html.PopupBlockedEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/PopupBlockedEventInit.hx"><a>
	<requestingWindow>
		<t path="Null"><c path="js.html.Window"/></t>
		<meta><m n=":optional"/></meta>
	</requestingWindow>
	<popupWindowURI>
		<t path="Null"><d/></t>
		<meta><m n=":optional"/></meta>
	</popupWindowURI>
	<popupWindowName>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</popupWindowName>
	<popupWindowFeatures>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</popupWindowFeatures>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.Position" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Position.hx" extern="1">
		<coords public="1" set="null">
			<c path="js.html.Coordinates"/>
			<haxe_doc>Returns a `Coordinates` object defining the current location.</haxe_doc>
		</coords>
		<timestamp public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `DOMTimeStamp` representing the time at which the location was retrieved.</haxe_doc>
		</timestamp>
		<haxe_doc><![CDATA[The `Position` interface represents the position of the concerned device at a given time. The position, represented by a `Coordinates` object, comprehends the 2D position of the device, on a spheroid representing the Earth, but also its altitude and its speed.

	Documentation [Position](https://developer.mozilla.org/en-US/docs/Web/API/Position) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Position$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Position>]]></haxe_doc>
		<meta><m n=":native"><e>"Position"</e></m></meta>
	</class>
	<class path="js.html.PositionError" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/PositionError.hx" extern="1">
		<PERMISSION_DENIED public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</PERMISSION_DENIED>
		<POSITION_UNAVAILABLE public="1" get="inline" set="null" expr="2" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</POSITION_UNAVAILABLE>
		<TIMEOUT public="1" get="inline" set="null" expr="3" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</TIMEOUT>
		<code public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns an <code>unsigned short</code> representing the error code. The following values are possible:
		 <table class="standard-table">
		  
		   <tr>
		    Value
		    Associated constant
		    Description
		   </tr>
		   <tr>
		    <td><code>1</code></td>
		    <td><code>PERMISSION_DENIED</code></td>
		    <td>The acquisition of the geolocation information failed because the page didn't have the permission to do it.</td>
		   </tr>
		   <tr>
		    <td><code>2</code></td>
		    <td><code>POSITION_UNAVAILABLE</code></td>
		    <td>The acquisition of the geolocation failed because at least one internal source of position returned an internal error.</td>
		   </tr>
		   <tr>
		    <td><code>3</code></td>
		    <td><code>TIMEOUT</code></td>
		    <td>The time allowed to acquire the geolocation, defined by <code>PositionOptions.timeout</code> information was reached before the information was obtained.</td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</code>
		<message public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a human-readable `DOMString` describing the details of the error. Specifications note that this is primarily intended for debugging use and not to be shown directly in a user interface.</haxe_doc>
		</message>
		<haxe_doc><![CDATA[The `PositionError` interface represents the reason of an error occurring when using the geolocating device.

	Documentation [PositionError](https://developer.mozilla.org/en-US/docs/Web/API/PositionError) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PositionError$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PositionError>]]></haxe_doc>
		<meta><m n=":native"><e>"PositionError"</e></m></meta>
	</class>
	<typedef path="js.html.PositionOptions" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/PositionOptions.hx">
		<a>
			<timeout>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
			</timeout>
			<maximumAge>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
			</maximumAge>
			<enableHighAccuracy>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
			</enableHighAccuracy>
		</a>
		<haxe_doc><![CDATA[The `PositionOptions` interface describes an object containing option properties to pass as a parameter of `Geolocation.getCurrentPosition()` and `Geolocation.watchPosition()`.

	Documentation [PositionOptions](https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions>]]></haxe_doc>
	</typedef>
	<class path="js.html.PreElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/PreElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<width public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` value reflecting the obsolete `width` attribute, containing a fixed-size length for the `pre` element.</haxe_doc>
		</width>
		<haxe_doc><![CDATA[The `HTMLPreElement` interface expose specific properties and methods (beyond those defined by regular `HTMLElement` interface it also has available to it by inheritance) for manipulating block of preformatted text.

	Documentation [HTMLPreElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLPreElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLPreElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLPreElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLPreElement"</e></m></meta>
	</class>
	<class path="js.html.ProcessingInstruction" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ProcessingInstruction.hx" extern="1">
		<extends path="js.html.CharacterData"/>
		<target public="1" set="null"><c path="String"/></target>
		<haxe_doc><![CDATA[A processing instruction provides an opportunity for application-specific instructions to be embedded within XML and which can be ignored by XML processors which do not support processing their instructions (outside of their having a place in the DOM).

	Documentation [ProcessingInstruction](https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction>]]></haxe_doc>
		<meta><m n=":native"><e>"ProcessingInstruction"</e></m></meta>
	</class>
	<class path="js.html.ProgressElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ProgressElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<value public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` value that reflects the current value; if the progress bar is an indeterminate progress bar, it returns `0`.</haxe_doc>
		</value>
		<max public="1">
			<x path="Float"/>
			<haxe_doc>Is a `double` value reflecting the content attribute of the same name, limited to numbers greater than zero. Its default value is `1.0`.</haxe_doc>
		</max>
		<position public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a `double` value returning the result of dividing the current value (`value`) by the maximum value (`max`); if the progress bar is an indeterminate progress bar, it returns `-1`.</haxe_doc>
		</position>
		<haxe_doc><![CDATA[The `HTMLProgressElement` interface provides special properties and methods (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of `progress` elements.

	Documentation [HTMLProgressElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLProgressElement"</e></m></meta>
	</class>
	<class path="js.html.ProgressEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ProgressEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<lengthComputable public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` flag indicating if the total work to be done, and the amount of work already done, by the underlying process is calculable. In other words, it tells if the progress is measurable or not.</haxe_doc>
		</lengthComputable>
		<loaded public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned long long` representing the amount of work already performed by the underlying process. The ratio of work done can be calculated with the property and `ProgressEvent.total`. When downloading a resource using HTTP, this only represent the part of the content itself, not headers and other overhead.</haxe_doc>
		</loaded>
		<total public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned long long` representing the total amount of work that the underlying process is in the progress of performing. When downloading a resource using HTTP, this only represent the content itself, not headers and other overhead.</haxe_doc>
		</total>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<t path="js.html.ProgressEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `ProgressEvent` interface represents events measuring progress of an underlying process, like an HTTP request (for an `XMLHttpRequest`, or the loading of the underlying resource of an `img`, `audio`, `video`, `style` or `link`).

	Documentation [ProgressEvent](https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"ProgressEvent"</e></m></meta>
	</class>
	<typedef path="js.html.ProgressEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ProgressEventInit.hx"><a>
	<total>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</total>
	<loaded>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</loaded>
	<lengthComputable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</lengthComputable>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.PropertyNodeList" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/PropertyNodeList.hx" extern="1">
		<extends path="js.html.NodeList"/>
		<getValues public="1" set="method">
			<f a=""><c path="Array"><d/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getValues>
		<meta><m n=":native"><e>"PropertyNodeList"</e></m></meta>
	</class>
	<class path="js.html.QuoteElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/QuoteElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<cite public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `cite` HTML attribute, containing a URL for the source of the quotation.</haxe_doc>
		</cite>
		<haxe_doc><![CDATA[The `HTMLQuoteElement` interface provides special properties and methods (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating quoting elements, like `blockquote` and `q`, but not the `cite` element.

	Documentation [HTMLQuoteElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLQuoteElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLQuoteElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLQuoteElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLQuoteElement"</e></m></meta>
	</class>
	<class path="js.html.RGBColor" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/RGBColor.hx" extern="1">
		<red public="1" set="null"><c path="js.html.CSSPrimitiveValue"/></red>
		<green public="1" set="null"><c path="js.html.CSSPrimitiveValue"/></green>
		<blue public="1" set="null"><c path="js.html.CSSPrimitiveValue"/></blue>
		<alpha public="1" set="null"><c path="js.html.CSSPrimitiveValue"/></alpha>
		<meta><m n=":native"><e>"RGBColor"</e></m></meta>
	</class>
	<class path="js.html.RadioNodeList" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/RadioNodeList.hx" extern="1">
		<extends path="js.html.NodeList"/>
		<value public="1">
			<c path="String"/>
			<haxe_doc>If the underlying element collection contains radio buttons, the `value` property represents the checked radio button. On retrieving the `value` property, the `value` of the currently `checked` radio button is returned as a string. If the collection does not contain any radio buttons or none of the radio buttons in the collection is in `checked` state, the empty string is returned. On setting the `value` property, the first radio button input element whose `value` property is equal to the new value will be set to `checked`.</haxe_doc>
		</value>
		<haxe_doc><![CDATA[The `RadioNodeList` interface represents a collection of elements in a `form` or a `fieldset` element.

	Documentation [RadioNodeList](https://developer.mozilla.org/en-US/docs/Web/API/RadioNodeList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/RadioNodeList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/RadioNodeList>]]></haxe_doc>
		<meta><m n=":native"><e>"RadioNodeList"</e></m></meta>
	</class>
	<class path="js.html.Range" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Range.hx" extern="1">
		<START_TO_START public="1" get="inline" set="null" expr="0" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</START_TO_START>
		<START_TO_END public="1" get="inline" set="null" expr="1" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</START_TO_END>
		<END_TO_END public="1" get="inline" set="null" expr="2" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</END_TO_END>
		<END_TO_START public="1" get="inline" set="null" expr="3" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</END_TO_START>
		<startContainer public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the `Node` within which the `Range` starts.</haxe_doc>
		</startContainer>
		<startOffset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a number representing where in the `startContainer` the `Range` starts.</haxe_doc>
		</startOffset>
		<endContainer public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the `Node` within which the `Range` ends.</haxe_doc>
		</endContainer>
		<endOffset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a number representing where in the `endContainer` the `Range` ends.</haxe_doc>
		</endOffset>
		<collapsed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a `Boolean` indicating whether the range's start and end points are at the same position.</haxe_doc>
		</collapsed>
		<commonAncestorContainer public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the deepest `Node` that contains the `startContainer` and `endContainer` nodes.</haxe_doc>
		</commonAncestorContainer>
		<setStart public="1" set="method">
			<f a="refNode:offset">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setStart>
		<setEnd public="1" set="method">
			<f a="refNode:offset">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setEnd>
		<setStartBefore public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setStartBefore>
		<setStartAfter public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setStartAfter>
		<setEndBefore public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setEndBefore>
		<setEndAfter public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setEndAfter>
		<collapse public="1" set="method">
			<f a="?toStart" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ toStart : false }</e></m></meta>
		</collapse>
		<selectNode public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</selectNode>
		<selectNodeContents public="1" set="method">
			<f a="refNode">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</selectNodeContents>
		<compareBoundaryPoints public="1" set="method">
			<f a="how:sourceRange">
				<x path="Int"/>
				<c path="js.html.Range"/>
				<x path="Int"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</compareBoundaryPoints>
		<deleteContents public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</deleteContents>
		<extractContents public="1" set="method">
			<f a=""><c path="js.html.DocumentFragment"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</extractContents>
		<cloneContents public="1" set="method">
			<f a=""><c path="js.html.DocumentFragment"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</cloneContents>
		<insertNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</insertNode>
		<surroundContents public="1" set="method">
			<f a="newParent">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</surroundContents>
		<cloneRange public="1" set="method"><f a=""><c path="js.html.Range"/></f></cloneRange>
		<detach public="1" set="method"><f a=""><x path="Void"/></f></detach>
		<isPointInRange public="1" set="method">
			<f a="node:offset">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</isPointInRange>
		<comparePoint public="1" set="method">
			<f a="node:offset">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</comparePoint>
		<intersectsNode public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</intersectsNode>
		<createContextualFragment public="1" set="method">
			<f a="fragment">
				<c path="String"/>
				<c path="js.html.DocumentFragment"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createContextualFragment>
		<getClientRects public="1" set="method"><f a=""><c path="js.html.DOMRectList"/></f></getClientRects>
		<getBoundingClientRect public="1" set="method"><f a=""><c path="js.html.DOMRect"/></f></getBoundingClientRect>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Range` interface represents a fragment of a document that can contain nodes and parts of text nodes.

	Documentation [Range](https://developer.mozilla.org/en-US/docs/Web/API/Range) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Range$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Range>]]></haxe_doc>
		<meta><m n=":native"><e>"Range"</e></m></meta>
	</class>
	<class path="js.html.RecordErrorEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/RecordErrorEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<name public="1" set="null"><c path="String"/></name>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<t path="js.html.RecordErrorEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"RecordErrorEvent"</e></m></meta>
	</class>
	<typedef path="js.html.RecordErrorEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/RecordErrorEventInit.hx"><a>
	<name>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</name>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<abstract path="js.html.RecordingState" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/RecordingState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._RecordingState.RecordingState_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/RecordingState.hx" private="1" module="js.html.RecordingState" extern="1">
	<INACTIVE public="1" get="inline" set="null" expr="cast &quot;inactive&quot;" line="29" static="1">
		<x path="js.html.RecordingState"/>
		<meta>
			<m n=":value"><e>cast "inactive"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</INACTIVE>
	<RECORDING public="1" get="inline" set="null" expr="cast &quot;recording&quot;" line="30" static="1">
		<x path="js.html.RecordingState"/>
		<meta>
			<m n=":value"><e>cast "recording"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RECORDING>
	<PAUSED public="1" get="inline" set="null" expr="cast &quot;paused&quot;" line="31" static="1">
		<x path="js.html.RecordingState"/>
		<meta>
			<m n=":value"><e>cast "paused"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PAUSED>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._RecordingState.RecordingState_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/RecordingState.hx" private="1" module="js.html.RecordingState" extern="1">
		<INACTIVE public="1" get="inline" set="null" expr="cast &quot;inactive&quot;" line="29" static="1">
			<x path="js.html.RecordingState"/>
			<meta>
				<m n=":value"><e>cast "inactive"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</INACTIVE>
		<RECORDING public="1" get="inline" set="null" expr="cast &quot;recording&quot;" line="30" static="1">
			<x path="js.html.RecordingState"/>
			<meta>
				<m n=":value"><e>cast "recording"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RECORDING>
		<PAUSED public="1" get="inline" set="null" expr="cast &quot;paused&quot;" line="31" static="1">
			<x path="js.html.RecordingState"/>
			<meta>
				<m n=":value"><e>cast "paused"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PAUSED>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.Rect" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Rect.hx" extern="1">
		<top public="1" set="null"><c path="js.html.CSSPrimitiveValue"/></top>
		<right public="1" set="null"><c path="js.html.CSSPrimitiveValue"/></right>
		<bottom public="1" set="null"><c path="js.html.CSSPrimitiveValue"/></bottom>
		<left public="1" set="null"><c path="js.html.CSSPrimitiveValue"/></left>
		<meta><m n=":native"><e>"Rect"</e></m></meta>
	</class>
	<abstract path="js.html.ReferrerPolicy" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ReferrerPolicy.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ReferrerPolicy.ReferrerPolicy_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ReferrerPolicy.hx" private="1" module="js.html.ReferrerPolicy" extern="1">
	<NONE public="1" get="inline" set="null" expr="cast &quot;&quot;" line="29" static="1">
		<x path="js.html.ReferrerPolicy"/>
		<meta>
			<m n=":value"><e>cast ""</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NONE>
	<NO_REFERRER public="1" get="inline" set="null" expr="cast &quot;no-referrer&quot;" line="30" static="1">
		<x path="js.html.ReferrerPolicy"/>
		<meta>
			<m n=":value"><e>cast "no-referrer"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NO_REFERRER>
	<NO_REFERRER_WHEN_DOWNGRADE public="1" get="inline" set="null" expr="cast &quot;no-referrer-when-downgrade&quot;" line="31" static="1">
		<x path="js.html.ReferrerPolicy"/>
		<meta>
			<m n=":value"><e>cast "no-referrer-when-downgrade"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NO_REFERRER_WHEN_DOWNGRADE>
	<ORIGIN_ONLY public="1" get="inline" set="null" expr="cast &quot;origin-only&quot;" line="32" static="1">
		<x path="js.html.ReferrerPolicy"/>
		<meta>
			<m n=":value"><e>cast "origin-only"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ORIGIN_ONLY>
	<ORIGIN_WHEN_CROSS_ORIGIN public="1" get="inline" set="null" expr="cast &quot;origin-when-cross-origin&quot;" line="33" static="1">
		<x path="js.html.ReferrerPolicy"/>
		<meta>
			<m n=":value"><e>cast "origin-when-cross-origin"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ORIGIN_WHEN_CROSS_ORIGIN>
	<UNSAFE_URL public="1" get="inline" set="null" expr="cast &quot;unsafe-url&quot;" line="34" static="1">
		<x path="js.html.ReferrerPolicy"/>
		<meta>
			<m n=":value"><e>cast "unsafe-url"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UNSAFE_URL>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._ReferrerPolicy.ReferrerPolicy_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ReferrerPolicy.hx" private="1" module="js.html.ReferrerPolicy" extern="1">
		<NONE public="1" get="inline" set="null" expr="cast &quot;&quot;" line="29" static="1">
			<x path="js.html.ReferrerPolicy"/>
			<meta>
				<m n=":value"><e>cast ""</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NONE>
		<NO_REFERRER public="1" get="inline" set="null" expr="cast &quot;no-referrer&quot;" line="30" static="1">
			<x path="js.html.ReferrerPolicy"/>
			<meta>
				<m n=":value"><e>cast "no-referrer"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NO_REFERRER>
		<NO_REFERRER_WHEN_DOWNGRADE public="1" get="inline" set="null" expr="cast &quot;no-referrer-when-downgrade&quot;" line="31" static="1">
			<x path="js.html.ReferrerPolicy"/>
			<meta>
				<m n=":value"><e>cast "no-referrer-when-downgrade"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NO_REFERRER_WHEN_DOWNGRADE>
		<ORIGIN_ONLY public="1" get="inline" set="null" expr="cast &quot;origin-only&quot;" line="32" static="1">
			<x path="js.html.ReferrerPolicy"/>
			<meta>
				<m n=":value"><e>cast "origin-only"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ORIGIN_ONLY>
		<ORIGIN_WHEN_CROSS_ORIGIN public="1" get="inline" set="null" expr="cast &quot;origin-when-cross-origin&quot;" line="33" static="1">
			<x path="js.html.ReferrerPolicy"/>
			<meta>
				<m n=":value"><e>cast "origin-when-cross-origin"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ORIGIN_WHEN_CROSS_ORIGIN>
		<UNSAFE_URL public="1" get="inline" set="null" expr="cast &quot;unsafe-url&quot;" line="34" static="1">
			<x path="js.html.ReferrerPolicy"/>
			<meta>
				<m n=":value"><e>cast "unsafe-url"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UNSAFE_URL>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.Request" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Request.hx" extern="1">
		<method public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the request's method (`GET`, `POST`, etc.)</haxe_doc>
		</method>
		<url public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the URL of the request.</haxe_doc>
		</url>
		<headers public="1" set="null">
			<c path="js.html.Headers"/>
			<haxe_doc>Contains the associated `Headers` object of the request.</haxe_doc>
		</headers>
		<referrer public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the referrer of the request (e.g., `client`).</haxe_doc>
		</referrer>
		<referrerPolicy public="1" set="null">
			<x path="js.html.ReferrerPolicy"/>
			<haxe_doc>Contains the referrer policy of the request (e.g., `no-referrer`).</haxe_doc>
		</referrerPolicy>
		<mode public="1" set="null">
			<x path="js.html.RequestMode"/>
			<haxe_doc>Contains the mode of the request (e.g., `cors`, `no-cors`, `same-origin`, `navigate`.)</haxe_doc>
		</mode>
		<credentials public="1" set="null">
			<x path="js.html.RequestCredentials"/>
			<haxe_doc>Contains the credentials of the request (e.g., `omit`, `same-origin`).</haxe_doc>
		</credentials>
		<cache public="1" set="null">
			<x path="js.html.RequestCache"/>
			<haxe_doc>Contains the cache mode of the request (e.g., `default`, `reload`, `no-cache`).</haxe_doc>
		</cache>
		<redirect public="1" set="null">
			<x path="js.html.RequestRedirect"/>
			<haxe_doc>Contains the mode for how redirects are handled. It may be one of `follow`, `error`, or `manual`.</haxe_doc>
		</redirect>
		<bodyUsed public="1" set="null"><x path="Bool"/></bodyUsed>
		<clone public="1" set="method">
			<f a=""><c path="js.html.Request"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</clone>
		<arrayBuffer public="1" set="method">
			<f a=""><c path="js.Promise"><c path="js.html.ArrayBuffer"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arrayBuffer>
		<blob public="1" set="method">
			<f a=""><c path="js.Promise"><c path="js.html.Blob"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</blob>
		<formData public="1" set="method">
			<f a=""><c path="js.Promise"><c path="js.html.FormData"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</formData>
		<json public="1" set="method">
			<f a=""><c path="js.Promise"><d/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</json>
		<text public="1" set="method">
			<f a=""><c path="js.Promise"><c path="String"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</text>
		<new public="1" set="method">
			<f a="input:?init">
				<x path="haxe.extern.EitherType">
					<c path="js.html.Request"/>
					<c path="String"/>
				</x>
				<t path="js.html.RequestInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Request` interface of the Fetch API represents a resource request.

	Documentation [Request](https://developer.mozilla.org/en-US/docs/Web/API/Request) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Request$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Request>]]></haxe_doc>
		<meta><m n=":native"><e>"Request"</e></m></meta>
	</class>
	<abstract path="js.html.RequestCache" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/RequestCache.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._RequestCache.RequestCache_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/RequestCache.hx" private="1" module="js.html.RequestCache" extern="1">
	<DEFAULT_ public="1" get="inline" set="null" expr="cast &quot;default&quot;" line="29" static="1">
		<x path="js.html.RequestCache"/>
		<meta>
			<m n=":value"><e>cast "default"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DEFAULT_>
	<NO_STORE public="1" get="inline" set="null" expr="cast &quot;no-store&quot;" line="30" static="1">
		<x path="js.html.RequestCache"/>
		<meta>
			<m n=":value"><e>cast "no-store"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NO_STORE>
	<RELOAD public="1" get="inline" set="null" expr="cast &quot;reload&quot;" line="31" static="1">
		<x path="js.html.RequestCache"/>
		<meta>
			<m n=":value"><e>cast "reload"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RELOAD>
	<NO_CACHE public="1" get="inline" set="null" expr="cast &quot;no-cache&quot;" line="32" static="1">
		<x path="js.html.RequestCache"/>
		<meta>
			<m n=":value"><e>cast "no-cache"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NO_CACHE>
	<FORCE_CACHE public="1" get="inline" set="null" expr="cast &quot;force-cache&quot;" line="33" static="1">
		<x path="js.html.RequestCache"/>
		<meta>
			<m n=":value"><e>cast "force-cache"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FORCE_CACHE>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._RequestCache.RequestCache_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/RequestCache.hx" private="1" module="js.html.RequestCache" extern="1">
		<DEFAULT_ public="1" get="inline" set="null" expr="cast &quot;default&quot;" line="29" static="1">
			<x path="js.html.RequestCache"/>
			<meta>
				<m n=":value"><e>cast "default"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DEFAULT_>
		<NO_STORE public="1" get="inline" set="null" expr="cast &quot;no-store&quot;" line="30" static="1">
			<x path="js.html.RequestCache"/>
			<meta>
				<m n=":value"><e>cast "no-store"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NO_STORE>
		<RELOAD public="1" get="inline" set="null" expr="cast &quot;reload&quot;" line="31" static="1">
			<x path="js.html.RequestCache"/>
			<meta>
				<m n=":value"><e>cast "reload"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RELOAD>
		<NO_CACHE public="1" get="inline" set="null" expr="cast &quot;no-cache&quot;" line="32" static="1">
			<x path="js.html.RequestCache"/>
			<meta>
				<m n=":value"><e>cast "no-cache"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NO_CACHE>
		<FORCE_CACHE public="1" get="inline" set="null" expr="cast &quot;force-cache&quot;" line="33" static="1">
			<x path="js.html.RequestCache"/>
			<meta>
				<m n=":value"><e>cast "force-cache"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FORCE_CACHE>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="js.html.RequestCredentials" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/RequestCredentials.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._RequestCredentials.RequestCredentials_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/RequestCredentials.hx" private="1" module="js.html.RequestCredentials" extern="1">
	<OMIT public="1" get="inline" set="null" expr="cast &quot;omit&quot;" line="29" static="1">
		<x path="js.html.RequestCredentials"/>
		<meta>
			<m n=":value"><e>cast "omit"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OMIT>
	<SAME_ORIGIN public="1" get="inline" set="null" expr="cast &quot;same-origin&quot;" line="30" static="1">
		<x path="js.html.RequestCredentials"/>
		<meta>
			<m n=":value"><e>cast "same-origin"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SAME_ORIGIN>
	<INCLUDE public="1" get="inline" set="null" expr="cast &quot;include&quot;" line="31" static="1">
		<x path="js.html.RequestCredentials"/>
		<meta>
			<m n=":value"><e>cast "include"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</INCLUDE>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._RequestCredentials.RequestCredentials_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/RequestCredentials.hx" private="1" module="js.html.RequestCredentials" extern="1">
		<OMIT public="1" get="inline" set="null" expr="cast &quot;omit&quot;" line="29" static="1">
			<x path="js.html.RequestCredentials"/>
			<meta>
				<m n=":value"><e>cast "omit"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OMIT>
		<SAME_ORIGIN public="1" get="inline" set="null" expr="cast &quot;same-origin&quot;" line="30" static="1">
			<x path="js.html.RequestCredentials"/>
			<meta>
				<m n=":value"><e>cast "same-origin"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SAME_ORIGIN>
		<INCLUDE public="1" get="inline" set="null" expr="cast &quot;include&quot;" line="31" static="1">
			<x path="js.html.RequestCredentials"/>
			<meta>
				<m n=":value"><e>cast "include"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</INCLUDE>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="js.html.RequestInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/RequestInit.hx"><a>
	<referrerPolicy>
		<t path="Null"><x path="js.html.ReferrerPolicy"/></t>
		<meta><m n=":optional"/></meta>
	</referrerPolicy>
	<referrer>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</referrer>
	<redirect>
		<t path="Null"><x path="js.html.RequestRedirect"/></t>
		<meta><m n=":optional"/></meta>
	</redirect>
	<mode>
		<t path="Null"><x path="js.html.RequestMode"/></t>
		<meta><m n=":optional"/></meta>
	</mode>
	<method>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</method>
	<headers>
		<t path="Null"><x path="haxe.extern.EitherType">
	<c path="js.html.Headers"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="Array"><c path="String"/></c></c>
		<d/>
	</x>
</x></t>
		<meta><m n=":optional"/></meta>
	</headers>
	<credentials>
		<t path="Null"><x path="js.html.RequestCredentials"/></t>
		<meta><m n=":optional"/></meta>
	</credentials>
	<cache>
		<t path="Null"><x path="js.html.RequestCache"/></t>
		<meta><m n=":optional"/></meta>
	</cache>
	<body>
		<t path="Null"><x path="haxe.extern.EitherType">
	<c path="js.html.ArrayBuffer"/>
	<x path="haxe.extern.EitherType">
		<c path="js.html.ArrayBufferView"/>
		<x path="haxe.extern.EitherType">
			<c path="js.html.Blob"/>
			<x path="haxe.extern.EitherType">
				<c path="js.html.FormData"/>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="js.html.URLSearchParams"/>
				</x>
			</x>
		</x>
	</x>
</x></t>
		<meta><m n=":optional"/></meta>
	</body>
</a></typedef>
	<abstract path="js.html.RequestMode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/RequestMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._RequestMode.RequestMode_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/RequestMode.hx" private="1" module="js.html.RequestMode" extern="1">
	<SAME_ORIGIN public="1" get="inline" set="null" expr="cast &quot;same-origin&quot;" line="29" static="1">
		<x path="js.html.RequestMode"/>
		<meta>
			<m n=":value"><e>cast "same-origin"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SAME_ORIGIN>
	<NO_CORS public="1" get="inline" set="null" expr="cast &quot;no-cors&quot;" line="30" static="1">
		<x path="js.html.RequestMode"/>
		<meta>
			<m n=":value"><e>cast "no-cors"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NO_CORS>
	<CORS public="1" get="inline" set="null" expr="cast &quot;cors&quot;" line="31" static="1">
		<x path="js.html.RequestMode"/>
		<meta>
			<m n=":value"><e>cast "cors"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CORS>
	<NAVIGATE public="1" get="inline" set="null" expr="cast &quot;navigate&quot;" line="32" static="1">
		<x path="js.html.RequestMode"/>
		<meta>
			<m n=":value"><e>cast "navigate"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NAVIGATE>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._RequestMode.RequestMode_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/RequestMode.hx" private="1" module="js.html.RequestMode" extern="1">
		<SAME_ORIGIN public="1" get="inline" set="null" expr="cast &quot;same-origin&quot;" line="29" static="1">
			<x path="js.html.RequestMode"/>
			<meta>
				<m n=":value"><e>cast "same-origin"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SAME_ORIGIN>
		<NO_CORS public="1" get="inline" set="null" expr="cast &quot;no-cors&quot;" line="30" static="1">
			<x path="js.html.RequestMode"/>
			<meta>
				<m n=":value"><e>cast "no-cors"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NO_CORS>
		<CORS public="1" get="inline" set="null" expr="cast &quot;cors&quot;" line="31" static="1">
			<x path="js.html.RequestMode"/>
			<meta>
				<m n=":value"><e>cast "cors"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CORS>
		<NAVIGATE public="1" get="inline" set="null" expr="cast &quot;navigate&quot;" line="32" static="1">
			<x path="js.html.RequestMode"/>
			<meta>
				<m n=":value"><e>cast "navigate"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NAVIGATE>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="js.html.RequestRedirect" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/RequestRedirect.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._RequestRedirect.RequestRedirect_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/RequestRedirect.hx" private="1" module="js.html.RequestRedirect" extern="1">
	<FOLLOW public="1" get="inline" set="null" expr="cast &quot;follow&quot;" line="29" static="1">
		<x path="js.html.RequestRedirect"/>
		<meta>
			<m n=":value"><e>cast "follow"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FOLLOW>
	<ERROR public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="30" static="1">
		<x path="js.html.RequestRedirect"/>
		<meta>
			<m n=":value"><e>cast "error"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ERROR>
	<MANUAL public="1" get="inline" set="null" expr="cast &quot;manual&quot;" line="31" static="1">
		<x path="js.html.RequestRedirect"/>
		<meta>
			<m n=":value"><e>cast "manual"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MANUAL>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._RequestRedirect.RequestRedirect_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/RequestRedirect.hx" private="1" module="js.html.RequestRedirect" extern="1">
		<FOLLOW public="1" get="inline" set="null" expr="cast &quot;follow&quot;" line="29" static="1">
			<x path="js.html.RequestRedirect"/>
			<meta>
				<m n=":value"><e>cast "follow"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FOLLOW>
		<ERROR public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="30" static="1">
			<x path="js.html.RequestRedirect"/>
			<meta>
				<m n=":value"><e>cast "error"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ERROR>
		<MANUAL public="1" get="inline" set="null" expr="cast &quot;manual&quot;" line="31" static="1">
			<x path="js.html.RequestRedirect"/>
			<meta>
				<m n=":value"><e>cast "manual"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MANUAL>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.Response" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Response.hx" extern="1">
		<error public="1" set="method" static="1"><f a=""><c path="js.html.Response"/></f></error>
		<redirect public="1" set="method" static="1">
			<f a="url:?status" v=":302">
				<c path="String"/>
				<x path="Int"/>
				<c path="js.html.Response"/>
			</f>
			<meta><m n=":value"><e>{ status : 302 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</redirect>
		<type public="1" set="null">
			<x path="js.html.ResponseType"/>
			<haxe_doc>Contains the type of the response (e.g., `basic`, `cors`).</haxe_doc>
		</type>
		<url public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the URL of the response.</haxe_doc>
		</url>
		<status public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Contains the status code of the response (e.g., `200` for a success).</haxe_doc>
		</status>
		<ok public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Contains a boolean stating whether the response was successful (status in the range 200-299) or not.</haxe_doc>
		</ok>
		<statusText public="1" set="null">
			<c path="String"/>
			<haxe_doc>Contains the status message corresponding to the status code (e.g., `OK` for `200`).</haxe_doc>
		</statusText>
		<headers public="1" set="null">
			<c path="js.html.Headers"/>
			<haxe_doc>Contains the `Headers` object associated with the response.</haxe_doc>
		</headers>
		<bodyUsed public="1" set="null"><x path="Bool"/></bodyUsed>
		<clone public="1" set="method">
			<f a=""><c path="js.html.Response"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</clone>
		<arrayBuffer public="1" set="method">
			<f a=""><c path="js.Promise"><c path="js.html.ArrayBuffer"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</arrayBuffer>
		<blob public="1" set="method">
			<f a=""><c path="js.Promise"><c path="js.html.Blob"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</blob>
		<formData public="1" set="method">
			<f a=""><c path="js.Promise"><c path="js.html.FormData"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</formData>
		<json public="1" set="method">
			<f a=""><c path="js.Promise"><d/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</json>
		<text public="1" set="method">
			<f a=""><c path="js.Promise"><c path="String"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</text>
		<new public="1" set="method">
			<f a="?body:?init">
				<x path="haxe.extern.EitherType">
					<c path="js.html.ArrayBuffer"/>
					<x path="haxe.extern.EitherType">
						<c path="js.html.ArrayBufferView"/>
						<x path="haxe.extern.EitherType">
							<c path="js.html.Blob"/>
							<x path="haxe.extern.EitherType">
								<c path="js.html.FormData"/>
								<x path="haxe.extern.EitherType">
									<c path="String"/>
									<c path="js.html.URLSearchParams"/>
								</x>
							</x>
						</x>
					</x>
				</x>
				<t path="js.html.ResponseInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Response` interface of the Fetch API represents the response to a request.

	Documentation [Response](https://developer.mozilla.org/en-US/docs/Web/API/Response) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Response$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Response>]]></haxe_doc>
		<meta><m n=":native"><e>"Response"</e></m></meta>
	</class>
	<typedef path="js.html.ResponseInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ResponseInit.hx"><a>
	<statusText>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</statusText>
	<status>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</status>
	<headers>
		<t path="Null"><x path="haxe.extern.EitherType">
	<c path="js.html.Headers"/>
	<x path="haxe.extern.EitherType">
		<c path="Array"><c path="Array"><c path="String"/></c></c>
		<d/>
	</x>
</x></t>
		<meta><m n=":optional"/></meta>
	</headers>
</a></typedef>
	<abstract path="js.html.ResponseType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ResponseType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ResponseType.ResponseType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ResponseType.hx" private="1" module="js.html.ResponseType" extern="1">
	<BASIC public="1" get="inline" set="null" expr="cast &quot;basic&quot;" line="29" static="1">
		<x path="js.html.ResponseType"/>
		<meta>
			<m n=":value"><e>cast "basic"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BASIC>
	<CORS public="1" get="inline" set="null" expr="cast &quot;cors&quot;" line="30" static="1">
		<x path="js.html.ResponseType"/>
		<meta>
			<m n=":value"><e>cast "cors"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CORS>
	<DEFAULT_ public="1" get="inline" set="null" expr="cast &quot;default&quot;" line="31" static="1">
		<x path="js.html.ResponseType"/>
		<meta>
			<m n=":value"><e>cast "default"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DEFAULT_>
	<ERROR public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="32" static="1">
		<x path="js.html.ResponseType"/>
		<meta>
			<m n=":value"><e>cast "error"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ERROR>
	<OPAQUE public="1" get="inline" set="null" expr="cast &quot;opaque&quot;" line="33" static="1">
		<x path="js.html.ResponseType"/>
		<meta>
			<m n=":value"><e>cast "opaque"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OPAQUE>
	<OPAQUEREDIRECT public="1" get="inline" set="null" expr="cast &quot;opaqueredirect&quot;" line="34" static="1">
		<x path="js.html.ResponseType"/>
		<meta>
			<m n=":value"><e>cast "opaqueredirect"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OPAQUEREDIRECT>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._ResponseType.ResponseType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ResponseType.hx" private="1" module="js.html.ResponseType" extern="1">
		<BASIC public="1" get="inline" set="null" expr="cast &quot;basic&quot;" line="29" static="1">
			<x path="js.html.ResponseType"/>
			<meta>
				<m n=":value"><e>cast "basic"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BASIC>
		<CORS public="1" get="inline" set="null" expr="cast &quot;cors&quot;" line="30" static="1">
			<x path="js.html.ResponseType"/>
			<meta>
				<m n=":value"><e>cast "cors"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CORS>
		<DEFAULT_ public="1" get="inline" set="null" expr="cast &quot;default&quot;" line="31" static="1">
			<x path="js.html.ResponseType"/>
			<meta>
				<m n=":value"><e>cast "default"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DEFAULT_>
		<ERROR public="1" get="inline" set="null" expr="cast &quot;error&quot;" line="32" static="1">
			<x path="js.html.ResponseType"/>
			<meta>
				<m n=":value"><e>cast "error"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ERROR>
		<OPAQUE public="1" get="inline" set="null" expr="cast &quot;opaque&quot;" line="33" static="1">
			<x path="js.html.ResponseType"/>
			<meta>
				<m n=":value"><e>cast "opaque"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OPAQUE>
		<OPAQUEREDIRECT public="1" get="inline" set="null" expr="cast &quot;opaqueredirect&quot;" line="34" static="1">
			<x path="js.html.ResponseType"/>
			<meta>
				<m n=":value"><e>cast "opaqueredirect"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OPAQUEREDIRECT>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.Screen" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Screen.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<availWidth public="1" set="null"><x path="Int"/></availWidth>
		<availHeight public="1" set="null"><x path="Int"/></availHeight>
		<width public="1" set="null"><x path="Int"/></width>
		<height public="1" set="null"><x path="Int"/></height>
		<colorDepth public="1" set="null"><x path="Int"/></colorDepth>
		<pixelDepth public="1" set="null"><x path="Int"/></pixelDepth>
		<top public="1" set="null"><x path="Int"/></top>
		<left public="1" set="null"><x path="Int"/></left>
		<availTop public="1" set="null"><x path="Int"/></availTop>
		<availLeft public="1" set="null"><x path="Int"/></availLeft>
		<orientation public="1" set="null"><c path="js.html.ScreenOrientation"/></orientation>
		<haxe_doc><![CDATA[The `Screen` interface represents a screen, usually the one on which the current window is being rendered.

	Documentation [Screen](https://developer.mozilla.org/en-US/docs/Web/API/Screen) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Screen$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Screen>]]></haxe_doc>
		<meta><m n=":native"><e>"Screen"</e></m></meta>
	</class>
	<class path="js.html.ScreenOrientation" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ScreenOrientation.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<type public="1" set="null"><x path="js.html.OrientationType"/></type>
		<angle public="1" set="null"><x path="Int"/></angle>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<lock public="1" set="method">
			<f a="orientation">
				<x path="js.html.OrientationLockType"/>
				<c path="js.Promise"><x path="Void"/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</lock>
		<unlock public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</unlock>
		<meta><m n=":native"><e>"ScreenOrientation"</e></m></meta>
	</class>
	<class path="js.html.ScriptElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ScriptElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<src public="1"><c path="String"/></src>
		<type public="1"><c path="String"/></type>
		<charset public="1"><c path="String"/></charset>
		<async public="1"><x path="Bool"/></async>
		<defer public="1"><x path="Bool"/></defer>
		<crossOrigin public="1"><c path="String"/></crossOrigin>
		<text public="1"><c path="String"/></text>
		<event public="1"><c path="String"/></event>
		<htmlFor public="1"><c path="String"/></htmlFor>
		<integrity public="1"><c path="String"/></integrity>
		<haxe_doc><![CDATA[HTML script elements expose the `HTMLScriptElement` interface, which provides special properties and methods (beyond the regular `HTMLElement` object interface they also have available to them by inheritance) for manipulating the layout and presentation of `script` elements.

	Documentation [HTMLScriptElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLScriptElement"</e></m></meta>
	</class>
	<class path="js.html.ScrollAreaEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ScrollAreaEvent.hx" extern="1">
		<extends path="js.html.UIEvent"/>
		<x public="1" set="null"><x path="Float"/></x>
		<y public="1" set="null"><x path="Float"/></y>
		<width public="1" set="null"><x path="Float"/></width>
		<height public="1" set="null"><x path="Float"/></height>
		<initScrollAreaEvent public="1" set="method"><f a="type:canBubble:cancelable:view:detail:x:y:width:height">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="js.html.Window"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></initScrollAreaEvent>
		<meta><m n=":native"><e>"ScrollAreaEvent"</e></m></meta>
	</class>
	<typedef path="js.html.ScrollIntoViewOptions" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ScrollIntoViewOptions.hx"><a>
	<block>
		<t path="Null"><d/></t>
		<meta><m n=":optional"/></meta>
	</block>
	<behavior>
		<t path="Null"><d/></t>
		<meta><m n=":optional"/></meta>
	</behavior>
</a></typedef>
	<typedef path="js.html.ScrollOptions" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ScrollOptions.hx"><a><behavior>
	<t path="Null"><d/></t>
	<meta><m n=":optional"/></meta>
</behavior></a></typedef>
	<abstract path="js.html.ScrollRestoration" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ScrollRestoration.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ScrollRestoration.ScrollRestoration_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ScrollRestoration.hx" private="1" module="js.html.ScrollRestoration" extern="1">
	<AUTO public="1" get="inline" set="null" expr="cast &quot;auto&quot;" line="29" static="1">
		<x path="js.html.ScrollRestoration"/>
		<meta>
			<m n=":value"><e>cast "auto"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AUTO>
	<MANUAL public="1" get="inline" set="null" expr="cast &quot;manual&quot;" line="30" static="1">
		<x path="js.html.ScrollRestoration"/>
		<meta>
			<m n=":value"><e>cast "manual"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MANUAL>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._ScrollRestoration.ScrollRestoration_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ScrollRestoration.hx" private="1" module="js.html.ScrollRestoration" extern="1">
		<AUTO public="1" get="inline" set="null" expr="cast &quot;auto&quot;" line="29" static="1">
			<x path="js.html.ScrollRestoration"/>
			<meta>
				<m n=":value"><e>cast "auto"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AUTO>
		<MANUAL public="1" get="inline" set="null" expr="cast &quot;manual&quot;" line="30" static="1">
			<x path="js.html.ScrollRestoration"/>
			<meta>
				<m n=":value"><e>cast "manual"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MANUAL>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="js.html.ScrollToOptions" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ScrollToOptions.hx"><a>
	<top>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</top>
	<left>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</left>
	<behavior>
		<t path="Null"><d/></t>
		<meta><m n=":optional"/></meta>
	</behavior>
</a></typedef>
	<class path="js.html.SelectElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SelectElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<autofocus public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `autofocus` HTML attribute, which indicates whether the control should have input focus when the page loads, unless the user overrides it, for example by typing in a different control. Only one form-associated element in a document can have this attribute specified. `2.0`</haxe_doc>
		</autofocus>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `disabled` HTML attribute, which indicates whether the control is disabled. If it is disabled, it does not accept clicks.</haxe_doc>
		</disabled>
		<form public="1" set="null">
			<c path="js.html.FormElement"/>
			<haxe_doc>Returns a `HTMLFormElement` representing the form that this element is associated with. If the element is not associated with of a `form` element, then it returns `null`.</haxe_doc>
		</form>
		<multiple public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `multiple` HTML attribute, which indicates whether multiple items can be selected.</haxe_doc>
		</multiple>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `name` HTML attribute, containing the name of this control used by servers and DOM search functions.</haxe_doc>
		</name>
		<required public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that reflects the `required` HTML attribute, which indicates whether the user is required to select a value before submitting the form. `2.0`</haxe_doc>
		</required>
		<size public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` that reflects the `size` HTML attribute, which contains the number of visible items in the control. The default is 1, unless `multiple` is true, in which case it is 4.</haxe_doc>
		</size>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` the form control's type. When `multiple` is `true`, it returns `"select-multiple"`; otherwise, it returns `"select-one"`.</haxe_doc>
		</type>
		<options public="1" set="null">
			<c path="js.html.HTMLOptionsCollection"/>
			<haxe_doc>Returns a `HTMLOptionsCollection` containing the set of `option` elements contained by this element.</haxe_doc>
		</options>
		<length public="1">
			<x path="Int"/>
			<haxe_doc>Is a `unsigned long` representing the number of `option` elements in this `select` element.</haxe_doc>
		</length>
		<selectedOptions public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a live `HTMLCollection` containing the set of options that are selected.</haxe_doc>
		</selectedOptions>
		<selectedIndex public="1">
			<x path="Int"/>
			<haxe_doc>Is a `long` that reflects the index of the first selected `option` element. The value `-1` indicates no element is selected.</haxe_doc>
		</selectedIndex>
		<value public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the value of the form control (the first selected option).</haxe_doc>
		</value>
		<willValidate public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` that indicates whether the button is a candidate for constraint validation. It is false if any conditions bar it from constraint validation.</haxe_doc>
		</willValidate>
		<validity public="1" set="null">
			<c path="js.html.ValidityState"/>
			<haxe_doc>Returns a `ValidityState` representing the validity state that this control is in.</haxe_doc>
		</validity>
		<validationMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing a localized message that describes the validation constraints that the control does not satisfy (if any). This attribute is the empty string if the control is not a candidate for constraint validation (`willValidate` is false), or it satisfies its constraints.</haxe_doc>
		</validationMessage>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Gets an item from the options collection for this `select` element. You can also access an item by specifying the index in array-style brackets or parentheses, without calling this method explicitly.</haxe_doc>
		</item>
		<namedItem public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.OptionElement"/>
			</f>
			<haxe_doc>Gets the item in the options collection with the specified name. The name string can match either the `id` or the `name` attribute of an option node. You can also access an item by specifying the name in array-style brackets or parentheses, without calling this method explicitly.</haxe_doc>
		</namedItem>
		<add public="1" set="method">
			<f a="element:?before">
				<x path="haxe.extern.EitherType">
					<c path="js.html.OptionElement"/>
					<c path="js.html.OptGroupElement"/>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Element"/>
					<x path="Int"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</add>
		<checkValidity public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Checks whether the element has any constraints and whether it satisfies them. If the element fails its constraints, the browser fires a cancelable `invalid` event at the element (and returns `false`).</haxe_doc>
		</checkValidity>
		<setCustomValidity public="1" set="method">
			<f a="error">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the custom validity message for the selection element to the specified message. Use the empty string to indicate that the element does not have a custom validity error.</haxe_doc>
		</setCustomValidity>
		<haxe_doc><![CDATA[The `HTMLSelectElement` interface represents a `select` HTML Element. These elements also share all of the properties and methods of other HTML elements via the `HTMLElement` interface.

	Documentation [HTMLSelectElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLSelectElement"</e></m></meta>
	</class>
	<class path="js.html.Selection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Selection.hx" extern="1">
		<anchorNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the `Node` in which the selection begins.</haxe_doc>
		</anchorNode>
		<anchorOffset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a number representing the offset of the selection's anchor within the anchorNode. If anchorNode is a text node, this is the number of characters within anchorNode preceding the anchor. If anchorNode is an element, this is the number of child nodes of the anchorNode preceding the anchor.</haxe_doc>
		</anchorOffset>
		<focusNode public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns the `Node` in which the selection ends.</haxe_doc>
		</focusNode>
		<focusOffset public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a number representing the offset of the selection's anchor within the focusNode. If focusNode is a text node, this is the number of characters within focusNode preceding the focus. If focusNode is an element, this is the number of child nodes of the focusNode preceding the focus.</haxe_doc>
		</focusOffset>
		<isCollapsed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns a Boolean indicating whether the selection's start and end points are at the same position.</haxe_doc>
		</isCollapsed>
		<rangeCount public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of ranges in the selection.</haxe_doc>
		</rangeCount>
		<caretBidiLevel public="1"><x path="Int"/></caretBidiLevel>
		<collapse public="1" set="method">
			<f a="node:offset">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</collapse>
		<collapseToStart public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</collapseToStart>
		<collapseToEnd public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</collapseToEnd>
		<extend public="1" set="method">
			<f a="node:offset">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</extend>
		<selectAllChildren public="1" set="method">
			<f a="node">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</selectAllChildren>
		<deleteFromDocument public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</deleteFromDocument>
		<getRangeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Range"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getRangeAt>
		<addRange public="1" set="method">
			<f a="range">
				<c path="js.html.Range"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</addRange>
		<removeRange public="1" set="method">
			<f a="range">
				<c path="js.html.Range"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeRange>
		<removeAllRanges public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeAllRanges>
		<containsNode public="1" set="method">
			<f a="node:allowPartialContainment">
				<c path="js.html.Node"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</containsNode>
		<modify public="1" set="method">
			<f a="alter:direction:granularity">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</modify>
		<haxe_doc><![CDATA[Calling the `Selection.toString()` method returns the text contained in the selection, e.g.:

	Documentation [Selection](https://developer.mozilla.org/en-US/docs/Web/API/Selection) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Selection$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Selection>]]></haxe_doc>
		<meta><m n=":native"><e>"Selection"</e></m></meta>
	</class>
	<abstract path="js.html.SelectionMode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SelectionMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._SelectionMode.SelectionMode_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SelectionMode.hx" private="1" module="js.html.SelectionMode" extern="1">
	<SELECT public="1" get="inline" set="null" expr="cast &quot;select&quot;" line="29" static="1">
		<x path="js.html.SelectionMode"/>
		<meta>
			<m n=":value"><e>cast "select"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SELECT>
	<START public="1" get="inline" set="null" expr="cast &quot;start&quot;" line="30" static="1">
		<x path="js.html.SelectionMode"/>
		<meta>
			<m n=":value"><e>cast "start"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</START>
	<END public="1" get="inline" set="null" expr="cast &quot;end&quot;" line="31" static="1">
		<x path="js.html.SelectionMode"/>
		<meta>
			<m n=":value"><e>cast "end"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</END>
	<PRESERVE public="1" get="inline" set="null" expr="cast &quot;preserve&quot;" line="32" static="1">
		<x path="js.html.SelectionMode"/>
		<meta>
			<m n=":value"><e>cast "preserve"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PRESERVE>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._SelectionMode.SelectionMode_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SelectionMode.hx" private="1" module="js.html.SelectionMode" extern="1">
		<SELECT public="1" get="inline" set="null" expr="cast &quot;select&quot;" line="29" static="1">
			<x path="js.html.SelectionMode"/>
			<meta>
				<m n=":value"><e>cast "select"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SELECT>
		<START public="1" get="inline" set="null" expr="cast &quot;start&quot;" line="30" static="1">
			<x path="js.html.SelectionMode"/>
			<meta>
				<m n=":value"><e>cast "start"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</START>
		<END public="1" get="inline" set="null" expr="cast &quot;end&quot;" line="31" static="1">
			<x path="js.html.SelectionMode"/>
			<meta>
				<m n=":value"><e>cast "end"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</END>
		<PRESERVE public="1" get="inline" set="null" expr="cast &quot;preserve&quot;" line="32" static="1">
			<x path="js.html.SelectionMode"/>
			<meta>
				<m n=":value"><e>cast "preserve"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PRESERVE>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.ServiceWorker" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ServiceWorker.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<scriptURL public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the `ServiceWorker` serialized script URL defined as part of `ServiceWorkerRegistration`. The URL must be on the same origin as the document that registers the `ServiceWorker`.</haxe_doc>
		</scriptURL>
		<state public="1" set="null">
			<x path="js.html.ServiceWorkerState"/>
			<haxe_doc>Returns the state of the service worker. It returns one of the following values: `installing`, `installed,` `activating`, `activated`, or `redundant`.</haxe_doc>
		</state>
		<onstatechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventListener` property called whenever an event of type `statechange` is fired; it is basically fired anytime the `ServiceWorker.state` changes.</haxe_doc>
		</onstatechange>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<postMessage public="1" set="method">
			<f a="message:?transferable">
				<d/>
				<c path="Array"><d/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</postMessage>
		<haxe_doc><![CDATA[The `ServiceWorker` interface of the ServiceWorker API provides a reference to a service worker. Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique `ServiceWorker` object.

	Documentation [ServiceWorker](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker>]]></haxe_doc>
		<meta><m n=":native"><e>"ServiceWorker"</e></m></meta>
	</class>
	<class path="js.html.ServiceWorkerGlobalScope" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ServiceWorkerGlobalScope.hx" extern="1">
		<extends path="js.html.WorkerGlobalScope"/>
		<clients public="1" set="null">
			<c path="js.html.Clients"/>
			<haxe_doc>Contains the `Clients` object associated with the service worker.</haxe_doc>
		</clients>
		<registration public="1" set="null">
			<c path="js.html.ServiceWorkerRegistration"/>
			<haxe_doc>Contains the `ServiceWorkerRegistration` object that represents the service worker's registration.</haxe_doc>
		</registration>
		<oninstall public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An event handler fired whenever an `install` event occurs — when a `ServiceWorkerRegistration` acquires a new `ServiceWorkerRegistration.installing` worker.</haxe_doc>
		</oninstall>
		<onactivate public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An event handler fired whenever an `activate` event occurs — when a `ServiceWorkerRegistration` acquires a new `ServiceWorkerRegistration.active` worker.</haxe_doc>
		</onactivate>
		<onfetch public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An event handler fired whenever a `fetch` event occurs — when a `GlobalFetch.fetch` is called.</haxe_doc>
		</onfetch>
		<onmessage public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An event handler fired whenever a `message` event occurs — when incoming messages are received. Controlled pages can use the `MessagePort.postMessage()` method to send messages to service workers. The service worker can optionally send a response back via the `MessagePort` exposed in `event.data.port`, corresponding to the controlled page.</haxe_doc>
		</onmessage>
		<onpush public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An event handler fired whenever a `push` event occurs — when a server push notification is received.</haxe_doc>
		</onpush>
		<onpushsubscriptionchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An event handler fired whenever a `pushsubscriptionchange` event occurs — when a push subscription has been invalidated, or is about to be invalidated (e.g. when a push service sets an expiration time.)</haxe_doc>
		</onpushsubscriptionchange>
		<onnotificationclick public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An event handler fired whenever a `notificationclick` event occurs — when a user clicks on a displayed notification.</haxe_doc>
		</onnotificationclick>
		<skipWaiting public="1" set="method">
			<f a=""><c path="js.Promise"><x path="Void"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</skipWaiting>
		<haxe_doc><![CDATA[The `ServiceWorkerGlobalScope` interface of the ServiceWorker API represents the global execution context of a service worker.

	Documentation [ServiceWorkerGlobalScope](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope>]]></haxe_doc>
		<meta><m n=":native"><e>"ServiceWorkerGlobalScope"</e></m></meta>
	</class>
	<class path="js.html.ServiceWorkerRegistration" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ServiceWorkerRegistration.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<installing public="1" set="null">
			<c path="js.html.ServiceWorker"/>
			<haxe_doc>Returns a service worker whose state is `installing`. This is initially set to `null`.</haxe_doc>
		</installing>
		<waiting public="1" set="null">
			<c path="js.html.ServiceWorker"/>
			<haxe_doc>Returns a service worker whose state is `installed`. This is initially set to `null`.</haxe_doc>
		</waiting>
		<active public="1" set="null">
			<c path="js.html.ServiceWorker"/>
			<haxe_doc>Returns a service worker whose state is either `activating` or `activated`. This is initially set to `null`. An active worker will control a `ServiceWorkerClient` if the client's URL falls within the scope of the registration (the `scope` option set when `ServiceWorkerContainer.register` is first called.)</haxe_doc>
		</active>
		<scope public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a unique identifier for a service worker registration. This must be on the same origin as the document that registers the `ServiceWorker`.</haxe_doc>
		</scope>
		<onupdatefound public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventListener` property called whenever an event of type `updatefound` is fired; it is fired any time the `ServiceWorkerRegistration.installing` property acquires a new service worker.</haxe_doc>
		</onupdatefound>
		<update public="1" set="method">
			<f a=""><c path="js.Promise"><x path="Void"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</update>
		<unregister public="1" set="method">
			<f a=""><c path="js.Promise"><x path="Bool"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</unregister>
		<haxe_doc><![CDATA[The `ServiceWorkerRegistration` interface of the ServiceWorker API represents the service worker registration. You register a service worker to control one or more pages that share the same origin.

	Documentation [ServiceWorkerRegistration](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration>]]></haxe_doc>
		<meta><m n=":native"><e>"ServiceWorkerRegistration"</e></m></meta>
	</class>
	<abstract path="js.html.ServiceWorkerState" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ServiceWorkerState.hx">
		<this><c path="String"/></this>
		<haxe_doc><![CDATA[The `ServiceWorkerState` is associated with its `ServiceWorker`'s state.

	Documentation [ServiceWorkerState](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerState) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerState$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerState>]]></haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._ServiceWorkerState.ServiceWorkerState_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ServiceWorkerState.hx" private="1" module="js.html.ServiceWorkerState" extern="1">
	<INSTALLING public="1" get="inline" set="null" expr="cast &quot;installing&quot;" line="36" static="1">
		<x path="js.html.ServiceWorkerState"/>
		<meta>
			<m n=":value"><e>cast "installing"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</INSTALLING>
	<INSTALLED public="1" get="inline" set="null" expr="cast &quot;installed&quot;" line="37" static="1">
		<x path="js.html.ServiceWorkerState"/>
		<meta>
			<m n=":value"><e>cast "installed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</INSTALLED>
	<ACTIVATING public="1" get="inline" set="null" expr="cast &quot;activating&quot;" line="38" static="1">
		<x path="js.html.ServiceWorkerState"/>
		<meta>
			<m n=":value"><e>cast "activating"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ACTIVATING>
	<ACTIVATED public="1" get="inline" set="null" expr="cast &quot;activated&quot;" line="39" static="1">
		<x path="js.html.ServiceWorkerState"/>
		<meta>
			<m n=":value"><e>cast "activated"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ACTIVATED>
	<REDUNDANT public="1" get="inline" set="null" expr="cast &quot;redundant&quot;" line="40" static="1">
		<x path="js.html.ServiceWorkerState"/>
		<meta>
			<m n=":value"><e>cast "redundant"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</REDUNDANT>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._ServiceWorkerState.ServiceWorkerState_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ServiceWorkerState.hx" private="1" module="js.html.ServiceWorkerState" extern="1">
		<INSTALLING public="1" get="inline" set="null" expr="cast &quot;installing&quot;" line="36" static="1">
			<x path="js.html.ServiceWorkerState"/>
			<meta>
				<m n=":value"><e>cast "installing"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</INSTALLING>
		<INSTALLED public="1" get="inline" set="null" expr="cast &quot;installed&quot;" line="37" static="1">
			<x path="js.html.ServiceWorkerState"/>
			<meta>
				<m n=":value"><e>cast "installed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</INSTALLED>
		<ACTIVATING public="1" get="inline" set="null" expr="cast &quot;activating&quot;" line="38" static="1">
			<x path="js.html.ServiceWorkerState"/>
			<meta>
				<m n=":value"><e>cast "activating"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ACTIVATING>
		<ACTIVATED public="1" get="inline" set="null" expr="cast &quot;activated&quot;" line="39" static="1">
			<x path="js.html.ServiceWorkerState"/>
			<meta>
				<m n=":value"><e>cast "activated"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ACTIVATED>
		<REDUNDANT public="1" get="inline" set="null" expr="cast &quot;redundant&quot;" line="40" static="1">
			<x path="js.html.ServiceWorkerState"/>
			<meta>
				<m n=":value"><e>cast "redundant"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</REDUNDANT>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.ShadowElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ShadowElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<olderShadowRoot public="1" set="null"><c path="js.html.ShadowRoot"/></olderShadowRoot>
		<haxe_doc><![CDATA[The `HTMLShadowElement` interface represents a `shadow` HTML Element, which is used in Shadow DOM.

	Documentation [HTMLShadowElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLShadowElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLShadowElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLShadowElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLShadowElement"</e></m></meta>
	</class>
	<class path="js.html.ShadowRoot" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ShadowRoot.hx" extern="1">
		<extends path="js.html.DocumentFragment"/>
		<innerHTML public="1">
			<c path="String"/>
			<haxe_doc>The DOM tree inside the `ShadowRoot`.</haxe_doc>
		</innerHTML>
		<host public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>A DOM element to which the `ShadowRoot` is attatched.</haxe_doc>
		</host>
		<olderShadowRoot public="1" set="null"><c path="js.html.ShadowRoot"/></olderShadowRoot>
		<applyAuthorStyles public="1"><x path="Bool"/></applyAuthorStyles>
		<styleSheets public="1" set="null"><c path="js.html.StyleSheetList"/></styleSheets>
		<getElementsByTagName public="1" set="method"><f a="localName">
	<c path="String"/>
	<c path="js.html.HTMLCollection"/>
</f></getElementsByTagName>
		<getElementsByTagNameNS public="1" set="method"><f a="namespace_:localName">
	<c path="String"/>
	<c path="String"/>
	<c path="js.html.HTMLCollection"/>
</f></getElementsByTagNameNS>
		<getElementsByClassName public="1" set="method"><f a="classNames">
	<c path="String"/>
	<c path="js.html.HTMLCollection"/>
</f></getElementsByClassName>
		<haxe_doc><![CDATA[The `ShadowRoot` interface of the Shadow DOM API is the root node of a DOM subtree that is rendered separately from a document's main DOM tree.

	Documentation [ShadowRoot](https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot>]]></haxe_doc>
		<meta><m n=":native"><e>"ShadowRoot"</e></m></meta>
	</class>
	<class path="js.html.SharedWorker" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SharedWorker.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<port public="1" set="null">
			<c path="js.html.MessagePort"/>
			<haxe_doc>Returns a `MessagePort` object used to communicate and control the shared worker.</haxe_doc>
		</port>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<new public="1" set="method">
			<f a="scriptURL:?name">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `SharedWorker` interface represents a specific kind of worker that can be accessed from several browsing contexts, such as several windows, iframes or even workers. They implement an interface different than dedicated workers and have a different global scope, `SharedWorkerGlobalScope`.

	Documentation [SharedWorker](https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker>]]></haxe_doc>
		<meta><m n=":native"><e>"SharedWorker"</e></m></meta>
	</class>
	<class path="js.html.SharedWorkerGlobalScope" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SharedWorkerGlobalScope.hx" extern="1">
		<extends path="js.html.WorkerGlobalScope"/>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>The name that the `SharedWorker` was (optionally) given when it was created. This is the name that the `SharedWorker.SharedWorker` constructor can pass to get a reference to the `SharedWorkerGlobalScope`.</haxe_doc>
		</name>
		<onconnect public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` representing the code to be called when the `connect` event is raised — that is, when a `MessagePort` connection is opened between the associated `SharedWorker` and the main thread.</haxe_doc>
		</onconnect>
		<haxe_doc><![CDATA[The `SharedWorkerGlobalScope` object (the `SharedWorker` global scope) is accessible through the `self` keyword. Some additional global functions, namespaces objects, and constructors, not typically associated with the worker global scope, but available on it, are listed in the JavaScript Reference. See the complete list of functions available to workers.

	Documentation [SharedWorkerGlobalScope](https://developer.mozilla.org/en-US/docs/Web/API/SharedWorkerGlobalScope) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SharedWorkerGlobalScope$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SharedWorkerGlobalScope>]]></haxe_doc>
		<meta><m n=":native"><e>"SharedWorkerGlobalScope"</e></m></meta>
	</class>
	<class path="js.html.SimpleGestureEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SimpleGestureEvent.hx" extern="1">
		<extends path="js.html.MouseEvent"/>
		<DIRECTION_UP public="1" get="inline" set="null" expr="1" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</DIRECTION_UP>
		<DIRECTION_DOWN public="1" get="inline" set="null" expr="2" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</DIRECTION_DOWN>
		<DIRECTION_LEFT public="1" get="inline" set="null" expr="4" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</DIRECTION_LEFT>
		<DIRECTION_RIGHT public="1" get="inline" set="null" expr="8" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</DIRECTION_RIGHT>
		<ROTATION_COUNTERCLOCKWISE public="1" get="inline" set="null" expr="1" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</ROTATION_COUNTERCLOCKWISE>
		<ROTATION_CLOCKWISE public="1" get="inline" set="null" expr="2" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</ROTATION_CLOCKWISE>
		<allowedDirections public="1"><x path="Int"/></allowedDirections>
		<direction public="1" set="null"><x path="Int"/></direction>
		<delta public="1" set="null"><x path="Float"/></delta>
		<clickCount public="1" set="null"><x path="Int"/></clickCount>
		<initSimpleGestureEvent public="1" set="method"><f a="typeArg:canBubbleArg:cancelableArg:viewArg:detailArg:screenXArg:screenYArg:clientXArg:clientYArg:ctrlKeyArg:altKeyArg:shiftKeyArg:metaKeyArg:buttonArg:relatedTargetArg:allowedDirectionsArg:directionArg:deltaArg:clickCount">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="js.html.Window"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Int"/>
	<c path="js.html.EventTarget"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></initSimpleGestureEvent>
		<meta><m n=":native"><e>"SimpleGestureEvent"</e></m></meta>
	</class>
	<class path="js.html.SourceBuffer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SourceBuffer.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<mode public="1">
			<x path="js.html.SourceBufferAppendMode"/>
			<haxe_doc>Controls how the order of media segments in the `SourceBuffer` is handled, in terms of whether they can be appended in any order, or they have to be kept in a strict sequence.</haxe_doc>
		</mode>
		<updating public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether the `SourceBuffer` is currently being updated — i.e. whether an `SourceBuffer.appendBuffer()`, `SourceBuffer.appendStream()`, or `SourceBuffer.remove()` operation is currently in progress.</haxe_doc>
		</updating>
		<buffered public="1" set="null">
			<c path="js.html.TimeRanges"/>
			<haxe_doc>Returns the time ranges that are currently buffered in the `SourceBuffer`.</haxe_doc>
		</buffered>
		<timestampOffset public="1">
			<x path="Float"/>
			<haxe_doc>Controls the offset applied to timestamps inside media segments that are subsequently appended to the `SourceBuffer`.</haxe_doc>
		</timestampOffset>
		<appendWindowStart public="1">
			<x path="Float"/>
			<haxe_doc>Controls the timestamp for the start of the append window. This is a timestamp range that can be used to filter what media data is appended to the `SourceBuffer`. Coded media frames with timestamps wthin this range will be appended, whereas those outside the range will be filtered out.</haxe_doc>
		</appendWindowStart>
		<appendWindowEnd public="1">
			<x path="Float"/>
			<haxe_doc>Controls the timestamp for the end of the append window.</haxe_doc>
		</appendWindowEnd>
		<appendBuffer public="1" set="method">
			<f a="data">
				<c path="js.html.ArrayBufferView"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><appendBuffer public="1" set="method">
	<f a="data">
		<c path="js.html.ArrayBuffer"/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</appendBuffer></overloads>
		</appendBuffer>
		<abort public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</abort>
		<remove public="1" set="method">
			<f a="start:end">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</remove>
		<haxe_doc><![CDATA[The `SourceBuffer` interface represents a chunk of media to be passed into an `HTMLMediaElement` and played, via a `MediaSource` object. This can be made up of one or several media segments.

	Documentation [SourceBuffer](https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer>]]></haxe_doc>
		<meta><m n=":native"><e>"SourceBuffer"</e></m></meta>
	</class>
	<abstract path="js.html.SourceBufferAppendMode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SourceBufferAppendMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._SourceBufferAppendMode.SourceBufferAppendMode_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SourceBufferAppendMode.hx" private="1" module="js.html.SourceBufferAppendMode" extern="1">
	<SEGMENTS public="1" get="inline" set="null" expr="cast &quot;segments&quot;" line="29" static="1">
		<x path="js.html.SourceBufferAppendMode"/>
		<meta>
			<m n=":value"><e>cast "segments"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SEGMENTS>
	<SEQUENCE public="1" get="inline" set="null" expr="cast &quot;sequence&quot;" line="30" static="1">
		<x path="js.html.SourceBufferAppendMode"/>
		<meta>
			<m n=":value"><e>cast "sequence"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SEQUENCE>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._SourceBufferAppendMode.SourceBufferAppendMode_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SourceBufferAppendMode.hx" private="1" module="js.html.SourceBufferAppendMode" extern="1">
		<SEGMENTS public="1" get="inline" set="null" expr="cast &quot;segments&quot;" line="29" static="1">
			<x path="js.html.SourceBufferAppendMode"/>
			<meta>
				<m n=":value"><e>cast "segments"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SEGMENTS>
		<SEQUENCE public="1" get="inline" set="null" expr="cast &quot;sequence&quot;" line="30" static="1">
			<x path="js.html.SourceBufferAppendMode"/>
			<meta>
				<m n=":value"><e>cast "sequence"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SEQUENCE>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.SourceBufferList" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SourceBufferList.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of `SourceBuffer` objects in the list.</haxe_doc>
		</length>
		<haxe_doc><![CDATA[The `SourceBufferList` interface represents a simple container list for multiple `SourceBuffer` objects.

	Documentation [SourceBufferList](https://developer.mozilla.org/en-US/docs/Web/API/SourceBufferList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SourceBufferList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SourceBufferList>]]></haxe_doc>
		<meta><m n=":native"><e>"SourceBufferList"</e></m></meta>
	</class>
	<class path="js.html.SourceElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SourceElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `src` HTML attribute, containing the URL for the media resource. The `HTMLSourceElement.src` property has a meaning only when the associated `source` element is nested in a media element that is a `video` or an `audio` element. It has no meaning and is ignored when it is nested in a `picture` element.</haxe_doc>
		</src>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `type` HTML attribute, containing the type of the media resource.</haxe_doc>
		</type>
		<srcset public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `srcset` HTML attribute, containing a list of candidate images, separated by a comma (`',', U+002C COMMA`). A candidate image is a URL followed by a `'w'` with the width of the images, or an `'x'` followed by the pixel density.</haxe_doc>
		</srcset>
		<sizes public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing image sizes between breakpoints</haxe_doc>
		</sizes>
		<media public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` reflecting the `media` HTML attribute, containing the intended type of the media resource.</haxe_doc>
		</media>
		<haxe_doc><![CDATA[The `HTMLSourceElement` interface provides special properties (beyond the regular `HTMLElement` object interface it also has available to it by inheritance) for manipulating `source` elements.

	Documentation [HTMLSourceElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLSourceElement"</e></m></meta>
	</class>
	<class path="js.html.SpanElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SpanElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<haxe_doc><![CDATA[The `HTMLSpanElement` interface represents a `span` element and derives from the `HTMLElement` interface, but without implementing any additional properties or methods.

	Documentation [HTMLSpanElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSpanElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSpanElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLSpanElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLSpanElement"</e></m></meta>
	</class>
	<class path="js.html.SpeechGrammar" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SpeechGrammar.hx" extern="1">
		<src public="1">
			<c path="String"/>
			<haxe_doc>Sets and returns a string containing the grammar from within in the `SpeechGrammar` object instance.</haxe_doc>
		</src>
		<weight public="1">
			<x path="Float"/>
			<haxe_doc>Sets and returns the weight of the `SpeechGrammar` object.</haxe_doc>
		</weight>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `SpeechGrammar` interface of the Web Speech API represents a set of words or patterns of words that we want the recognition service to recognize.

	Documentation [SpeechGrammar](https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammar) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammar$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammar>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechGrammar"</e></m></meta>
	</class>
	<class path="js.html.SpeechGrammarList" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SpeechGrammarList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of `SpeechGrammar` objects contained in the `SpeechGrammarList`.</haxe_doc>
		</length>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.SpeechGrammar"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</item>
		<addFromURI public="1" set="method">
			<f a="src:?weight">
				<c path="String"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</addFromURI>
		<addFromString public="1" set="method">
			<f a="string:?weight">
				<c path="String"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</addFromString>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `SpeechGrammarList` interface of the Web Speech API represents a list of `SpeechGrammar` objects containing words or patterns of words that we want the recognition service to recognize.

	Documentation [SpeechGrammarList](https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammarList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammarList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammarList>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechGrammarList"</e></m></meta>
	</class>
	<class path="js.html.SpeechRecognition" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SpeechRecognition.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<grammars public="1">
			<c path="js.html.SpeechGrammarList"/>
			<haxe_doc>Returns and sets a collection of `SpeechGrammar` objects that represent the grammars that will be understood by the current `SpeechRecognition`.</haxe_doc>
		</grammars>
		<lang public="1">
			<c path="String"/>
			<haxe_doc>Returns and sets the language of the current `SpeechRecognition`. If not specified, this defaults to the HTML `lang` attribute value, or the user agent's language setting if that isn't set either.</haxe_doc>
		</lang>
		<continuous public="1">
			<x path="Bool"/>
			<haxe_doc>Controls whether continuous results are returned for each recognition, or only a single result. Defaults to single (`false`.)</haxe_doc>
		</continuous>
		<interimResults public="1">
			<x path="Bool"/>
			<haxe_doc>Controls whether interim results should be returned (`true`) or not (`false`.) Interim results are results that are not yet final (e.g. the `SpeechRecognitionResult.isFinal` property is `false`.)</haxe_doc>
		</interimResults>
		<maxAlternatives public="1">
			<x path="Int"/>
			<haxe_doc>Sets the maximum number of `SpeechRecognitionAlternative`s provided per result. The default value is 1.</haxe_doc>
		</maxAlternatives>
		<serviceURI public="1">
			<c path="String"/>
			<haxe_doc>Specifies the location of the speech recognition service used by the current `SpeechRecognition` to handle the actual recognition. The default is the user agent's default speech service.</haxe_doc>
		</serviceURI>
		<onaudiostart public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the user agent has started to capture audio.</haxe_doc>
		</onaudiostart>
		<onsoundstart public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when any sound — recognisable speech or not — has been detected.</haxe_doc>
		</onsoundstart>
		<onspeechstart public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when sound that is recognised by the speech recognition service as speech has been detected.</haxe_doc>
		</onspeechstart>
		<onspeechend public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when speech recognised by the speech recognition service has stopped being detected.</haxe_doc>
		</onspeechend>
		<onsoundend public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when any sound — recognisable speech or not — has stopped being detected.</haxe_doc>
		</onsoundend>
		<onaudioend public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the user agent has finished capturing audio.</haxe_doc>
		</onaudioend>
		<onresult public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the speech recognition service returns a result — a word or phrase has been positively recognized and this has been communicated back to the app.</haxe_doc>
		</onresult>
		<onnomatch public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the speech recognition service returns a final result with no significant recognition. This may involve some degree of recognition, which doesn't meet or exceed the `SpeechRecognitionAlternative.confidence` threshold.</haxe_doc>
		</onnomatch>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when a speech recognition error occurs.</haxe_doc>
		</onerror>
		<onstart public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the speech recognition service has begun listening to incoming audio with intent to recognize grammars associated with the current `SpeechRecognition`.</haxe_doc>
		</onstart>
		<onend public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the speech recognition service has disconnected.</haxe_doc>
		</onend>
		<start public="1" set="method">
			<f a="?stream">
				<c path="js.html.MediaStream"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</start>
		<stop public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stops the speech recognition service from listening to incoming audio, and attempts to return a `SpeechRecognitionResult` using the audio captured so far.</haxe_doc>
		</stop>
		<abort public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stops the speech recognition service from listening to incoming audio, and doesn't attempt to return a `SpeechRecognitionResult`.</haxe_doc>
		</abort>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `SpeechRecognition` interface of the Web Speech API is the controller interface for the recognition service; this also handles the `SpeechRecognitionEvent` sent from the recognition service.

	Documentation [SpeechRecognition](https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechRecognition"</e></m></meta>
	</class>
	<class path="js.html.SpeechRecognitionAlternative" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SpeechRecognitionAlternative.hx" extern="1">
		<transcript public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a string containing the transcript of the recognised word.</haxe_doc>
		</transcript>
		<confidence public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a numeric estimate of how confident the speech recognition system is that the recognition is correct.</haxe_doc>
		</confidence>
		<haxe_doc><![CDATA[The `SpeechRecognitionAlternative` interface of the Web Speech API represents a single word that has been recognised by the speech recognition service.

	Documentation [SpeechRecognitionAlternative](https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionAlternative) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionAlternative$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionAlternative>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechRecognitionAlternative"</e></m></meta>
	</class>
	<class path="js.html.SpeechRecognitionError" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SpeechRecognitionError.hx" extern="1">
		<extends path="js.html.Event"/>
		<error public="1" set="null">
			<x path="js.html.SpeechRecognitionErrorCode"/>
			<haxe_doc>Returns the type of error raised.</haxe_doc>
		</error>
		<message public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a message describing the error in more detail.</haxe_doc>
		</message>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<t path="js.html.SpeechRecognitionErrorInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `SpeechRecognitionError` interface of the Web Speech API represents error messages from the recognition service.

	Documentation [SpeechRecognitionError](https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionError) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionError$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionError>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechRecognitionError"</e></m></meta>
	</class>
	<abstract path="js.html.SpeechRecognitionErrorCode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SpeechRecognitionErrorCode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._SpeechRecognitionErrorCode.SpeechRecognitionErrorCode_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SpeechRecognitionErrorCode.hx" private="1" module="js.html.SpeechRecognitionErrorCode" extern="1">
	<NO_SPEECH public="1" get="inline" set="null" expr="cast &quot;no-speech&quot;" line="29" static="1">
		<x path="js.html.SpeechRecognitionErrorCode"/>
		<meta>
			<m n=":value"><e>cast "no-speech"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NO_SPEECH>
	<ABORTED public="1" get="inline" set="null" expr="cast &quot;aborted&quot;" line="30" static="1">
		<x path="js.html.SpeechRecognitionErrorCode"/>
		<meta>
			<m n=":value"><e>cast "aborted"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ABORTED>
	<AUDIO_CAPTURE public="1" get="inline" set="null" expr="cast &quot;audio-capture&quot;" line="31" static="1">
		<x path="js.html.SpeechRecognitionErrorCode"/>
		<meta>
			<m n=":value"><e>cast "audio-capture"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AUDIO_CAPTURE>
	<NETWORK public="1" get="inline" set="null" expr="cast &quot;network&quot;" line="32" static="1">
		<x path="js.html.SpeechRecognitionErrorCode"/>
		<meta>
			<m n=":value"><e>cast "network"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NETWORK>
	<NOT_ALLOWED public="1" get="inline" set="null" expr="cast &quot;not-allowed&quot;" line="33" static="1">
		<x path="js.html.SpeechRecognitionErrorCode"/>
		<meta>
			<m n=":value"><e>cast "not-allowed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NOT_ALLOWED>
	<SERVICE_NOT_ALLOWED public="1" get="inline" set="null" expr="cast &quot;service-not-allowed&quot;" line="34" static="1">
		<x path="js.html.SpeechRecognitionErrorCode"/>
		<meta>
			<m n=":value"><e>cast "service-not-allowed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SERVICE_NOT_ALLOWED>
	<BAD_GRAMMAR public="1" get="inline" set="null" expr="cast &quot;bad-grammar&quot;" line="35" static="1">
		<x path="js.html.SpeechRecognitionErrorCode"/>
		<meta>
			<m n=":value"><e>cast "bad-grammar"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BAD_GRAMMAR>
	<LANGUAGE_NOT_SUPPORTED public="1" get="inline" set="null" expr="cast &quot;language-not-supported&quot;" line="36" static="1">
		<x path="js.html.SpeechRecognitionErrorCode"/>
		<meta>
			<m n=":value"><e>cast "language-not-supported"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LANGUAGE_NOT_SUPPORTED>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._SpeechRecognitionErrorCode.SpeechRecognitionErrorCode_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SpeechRecognitionErrorCode.hx" private="1" module="js.html.SpeechRecognitionErrorCode" extern="1">
		<NO_SPEECH public="1" get="inline" set="null" expr="cast &quot;no-speech&quot;" line="29" static="1">
			<x path="js.html.SpeechRecognitionErrorCode"/>
			<meta>
				<m n=":value"><e>cast "no-speech"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NO_SPEECH>
		<ABORTED public="1" get="inline" set="null" expr="cast &quot;aborted&quot;" line="30" static="1">
			<x path="js.html.SpeechRecognitionErrorCode"/>
			<meta>
				<m n=":value"><e>cast "aborted"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ABORTED>
		<AUDIO_CAPTURE public="1" get="inline" set="null" expr="cast &quot;audio-capture&quot;" line="31" static="1">
			<x path="js.html.SpeechRecognitionErrorCode"/>
			<meta>
				<m n=":value"><e>cast "audio-capture"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AUDIO_CAPTURE>
		<NETWORK public="1" get="inline" set="null" expr="cast &quot;network&quot;" line="32" static="1">
			<x path="js.html.SpeechRecognitionErrorCode"/>
			<meta>
				<m n=":value"><e>cast "network"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NETWORK>
		<NOT_ALLOWED public="1" get="inline" set="null" expr="cast &quot;not-allowed&quot;" line="33" static="1">
			<x path="js.html.SpeechRecognitionErrorCode"/>
			<meta>
				<m n=":value"><e>cast "not-allowed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NOT_ALLOWED>
		<SERVICE_NOT_ALLOWED public="1" get="inline" set="null" expr="cast &quot;service-not-allowed&quot;" line="34" static="1">
			<x path="js.html.SpeechRecognitionErrorCode"/>
			<meta>
				<m n=":value"><e>cast "service-not-allowed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SERVICE_NOT_ALLOWED>
		<BAD_GRAMMAR public="1" get="inline" set="null" expr="cast &quot;bad-grammar&quot;" line="35" static="1">
			<x path="js.html.SpeechRecognitionErrorCode"/>
			<meta>
				<m n=":value"><e>cast "bad-grammar"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BAD_GRAMMAR>
		<LANGUAGE_NOT_SUPPORTED public="1" get="inline" set="null" expr="cast &quot;language-not-supported&quot;" line="36" static="1">
			<x path="js.html.SpeechRecognitionErrorCode"/>
			<meta>
				<m n=":value"><e>cast "language-not-supported"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LANGUAGE_NOT_SUPPORTED>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="js.html.SpeechRecognitionErrorInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SpeechRecognitionErrorInit.hx"><a>
	<message>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</message>
	<error>
		<t path="Null"><x path="js.html.SpeechRecognitionErrorCode"/></t>
		<meta><m n=":optional"/></meta>
	</error>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.SpeechRecognitionEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SpeechRecognitionEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<resultIndex public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the lowest index value result in the `SpeechRecognitionResultList` "array" that has actually changed.</haxe_doc>
		</resultIndex>
		<results public="1" set="null">
			<c path="js.html.SpeechRecognitionResultList"/>
			<haxe_doc>Returns a `SpeechRecognitionResultList` object representing all the speech recognition results for the current session.</haxe_doc>
		</results>
		<interpretation public="1" set="null">
			<d/>
			<haxe_doc>Returns the semantic meaning of what the user said.</haxe_doc>
		</interpretation>
		<emma public="1" set="null">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Returns an Extensible MultiModal Annotation markup language (EMMA) — XML — representation of the result.</haxe_doc>
		</emma>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<t path="js.html.SpeechRecognitionEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `SpeechRecognitionEvent` interface of the Web Speech API represents the event object for the `result` and `nomatch` events, and contains all the data associated with an interim or final speech recognition result.

	Documentation [SpeechRecognitionEvent](https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechRecognitionEvent"</e></m></meta>
	</class>
	<typedef path="js.html.SpeechRecognitionEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SpeechRecognitionEventInit.hx"><a>
	<results>
		<t path="Null"><c path="js.html.SpeechRecognitionResultList"/></t>
		<meta><m n=":optional"/></meta>
	</results>
	<resultIndex>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</resultIndex>
	<interpretation>
		<t path="Null"><d/></t>
		<meta><m n=":optional"/></meta>
	</interpretation>
	<emma>
		<t path="Null"><c path="js.html.HTMLDocument"/></t>
		<meta><m n=":optional"/></meta>
	</emma>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.SpeechRecognitionResult" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SpeechRecognitionResult.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the length of the "array" — the number of `SpeechRecognitionAlternative` objects contained in the result (also referred to as "n-best alternatives".)</haxe_doc>
		</length>
		<isFinal public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that states whether this result is final (true) or not (false) — if so, then this is the final time this result will be returned; if not, then this result is an interim result, and may be updated later on.</haxe_doc>
		</isFinal>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.SpeechRecognitionAlternative"/>
</f></item>
		<haxe_doc><![CDATA[The `SpeechRecognitionResult` interface of the Web Speech API represents a single recognition match, which may contain multiple `SpeechRecognitionAlternative` objects.

	Documentation [SpeechRecognitionResult](https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionResult) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionResult$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionResult>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechRecognitionResult"</e></m></meta>
	</class>
	<class path="js.html.SpeechRecognitionResultList" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SpeechRecognitionResultList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the length of the "array" — the number of `SpeechRecognitionResult` objects in the list.</haxe_doc>
		</length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.SpeechRecognitionResult"/>
</f></item>
		<haxe_doc><![CDATA[The `SpeechRecognitionResultList` interface of the Web Speech API represents a list of `SpeechRecognitionResult` objects, or a single one if results are being captured in `continuous` mode.

	Documentation [SpeechRecognitionResultList](https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionResultList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionResultList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionResultList>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechRecognitionResultList"</e></m></meta>
	</class>
	<class path="js.html.SpeechSynthesis" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SpeechSynthesis.hx" extern="1">
		<pending public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that returns `true` if the utterance queue contains as-yet-unspoken utterances.</haxe_doc>
		</pending>
		<speaking public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that returns `true` if an utterance is currently in the process of being spoken — even if `SpeechSynthesis` is in a paused state.</haxe_doc>
		</speaking>
		<paused public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` that returns `true` if the `SpeechSynthesis` object is in a paused state.</haxe_doc>
		</paused>
		<speak public="1" set="method">
			<f a="utterance">
				<c path="js.html.SpeechSynthesisUtterance"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds an `SpeechSynthesisUtterance` to the utterance queue; it will be spoken when any other utterances queued before it have been spoken.</haxe_doc>
		</speak>
		<cancel public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes all utterances from the utterance queue.</haxe_doc>
		</cancel>
		<pause public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Puts the `SpeechSynthesis` object into a paused state.</haxe_doc>
		</pause>
		<resume public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Puts the `SpeechSynthesis` object into a non-paused state: resumes it if it was already paused.</haxe_doc>
		</resume>
		<getVoices public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.SpeechSynthesisVoice"/></c></f>
			<haxe_doc>Returns a list of `SpeechSynthesisVoice` objects representing all the available voices on the current device.</haxe_doc>
		</getVoices>
		<haxe_doc><![CDATA[The `SpeechSynthesis` interface of the Web Speech API is the controller interface for the speech service; this can be used to retrieve information about the synthesis voices available on the device, start and pause speech, and other commands besides.

	Documentation [SpeechSynthesis](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechSynthesis"</e></m></meta>
	</class>
	<abstract path="js.html.SpeechSynthesisErrorCode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SpeechSynthesisErrorCode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._SpeechSynthesisErrorCode.SpeechSynthesisErrorCode_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SpeechSynthesisErrorCode.hx" private="1" module="js.html.SpeechSynthesisErrorCode" extern="1">
	<CANCELED public="1" get="inline" set="null" expr="cast &quot;canceled&quot;" line="29" static="1">
		<x path="js.html.SpeechSynthesisErrorCode"/>
		<meta>
			<m n=":value"><e>cast "canceled"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CANCELED>
	<INTERRUPTED public="1" get="inline" set="null" expr="cast &quot;interrupted&quot;" line="30" static="1">
		<x path="js.html.SpeechSynthesisErrorCode"/>
		<meta>
			<m n=":value"><e>cast "interrupted"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</INTERRUPTED>
	<AUDIO_BUSY public="1" get="inline" set="null" expr="cast &quot;audio-busy&quot;" line="31" static="1">
		<x path="js.html.SpeechSynthesisErrorCode"/>
		<meta>
			<m n=":value"><e>cast "audio-busy"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AUDIO_BUSY>
	<AUDIO_HARDWARE public="1" get="inline" set="null" expr="cast &quot;audio-hardware&quot;" line="32" static="1">
		<x path="js.html.SpeechSynthesisErrorCode"/>
		<meta>
			<m n=":value"><e>cast "audio-hardware"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AUDIO_HARDWARE>
	<NETWORK public="1" get="inline" set="null" expr="cast &quot;network&quot;" line="33" static="1">
		<x path="js.html.SpeechSynthesisErrorCode"/>
		<meta>
			<m n=":value"><e>cast "network"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NETWORK>
	<SYNTHESIS_UNAVAILABLE public="1" get="inline" set="null" expr="cast &quot;synthesis-unavailable&quot;" line="34" static="1">
		<x path="js.html.SpeechSynthesisErrorCode"/>
		<meta>
			<m n=":value"><e>cast "synthesis-unavailable"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SYNTHESIS_UNAVAILABLE>
	<SYNTHESIS_FAILED public="1" get="inline" set="null" expr="cast &quot;synthesis-failed&quot;" line="35" static="1">
		<x path="js.html.SpeechSynthesisErrorCode"/>
		<meta>
			<m n=":value"><e>cast "synthesis-failed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SYNTHESIS_FAILED>
	<LANGUAGE_UNAVAILABLE public="1" get="inline" set="null" expr="cast &quot;language-unavailable&quot;" line="36" static="1">
		<x path="js.html.SpeechSynthesisErrorCode"/>
		<meta>
			<m n=":value"><e>cast "language-unavailable"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LANGUAGE_UNAVAILABLE>
	<VOICE_UNAVAILABLE public="1" get="inline" set="null" expr="cast &quot;voice-unavailable&quot;" line="37" static="1">
		<x path="js.html.SpeechSynthesisErrorCode"/>
		<meta>
			<m n=":value"><e>cast "voice-unavailable"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VOICE_UNAVAILABLE>
	<TEXT_TOO_LONG public="1" get="inline" set="null" expr="cast &quot;text-too-long&quot;" line="38" static="1">
		<x path="js.html.SpeechSynthesisErrorCode"/>
		<meta>
			<m n=":value"><e>cast "text-too-long"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TEXT_TOO_LONG>
	<INVALID_ARGUMENT public="1" get="inline" set="null" expr="cast &quot;invalid-argument&quot;" line="39" static="1">
		<x path="js.html.SpeechSynthesisErrorCode"/>
		<meta>
			<m n=":value"><e>cast "invalid-argument"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</INVALID_ARGUMENT>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._SpeechSynthesisErrorCode.SpeechSynthesisErrorCode_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SpeechSynthesisErrorCode.hx" private="1" module="js.html.SpeechSynthesisErrorCode" extern="1">
		<CANCELED public="1" get="inline" set="null" expr="cast &quot;canceled&quot;" line="29" static="1">
			<x path="js.html.SpeechSynthesisErrorCode"/>
			<meta>
				<m n=":value"><e>cast "canceled"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CANCELED>
		<INTERRUPTED public="1" get="inline" set="null" expr="cast &quot;interrupted&quot;" line="30" static="1">
			<x path="js.html.SpeechSynthesisErrorCode"/>
			<meta>
				<m n=":value"><e>cast "interrupted"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</INTERRUPTED>
		<AUDIO_BUSY public="1" get="inline" set="null" expr="cast &quot;audio-busy&quot;" line="31" static="1">
			<x path="js.html.SpeechSynthesisErrorCode"/>
			<meta>
				<m n=":value"><e>cast "audio-busy"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AUDIO_BUSY>
		<AUDIO_HARDWARE public="1" get="inline" set="null" expr="cast &quot;audio-hardware&quot;" line="32" static="1">
			<x path="js.html.SpeechSynthesisErrorCode"/>
			<meta>
				<m n=":value"><e>cast "audio-hardware"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AUDIO_HARDWARE>
		<NETWORK public="1" get="inline" set="null" expr="cast &quot;network&quot;" line="33" static="1">
			<x path="js.html.SpeechSynthesisErrorCode"/>
			<meta>
				<m n=":value"><e>cast "network"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NETWORK>
		<SYNTHESIS_UNAVAILABLE public="1" get="inline" set="null" expr="cast &quot;synthesis-unavailable&quot;" line="34" static="1">
			<x path="js.html.SpeechSynthesisErrorCode"/>
			<meta>
				<m n=":value"><e>cast "synthesis-unavailable"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SYNTHESIS_UNAVAILABLE>
		<SYNTHESIS_FAILED public="1" get="inline" set="null" expr="cast &quot;synthesis-failed&quot;" line="35" static="1">
			<x path="js.html.SpeechSynthesisErrorCode"/>
			<meta>
				<m n=":value"><e>cast "synthesis-failed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SYNTHESIS_FAILED>
		<LANGUAGE_UNAVAILABLE public="1" get="inline" set="null" expr="cast &quot;language-unavailable&quot;" line="36" static="1">
			<x path="js.html.SpeechSynthesisErrorCode"/>
			<meta>
				<m n=":value"><e>cast "language-unavailable"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LANGUAGE_UNAVAILABLE>
		<VOICE_UNAVAILABLE public="1" get="inline" set="null" expr="cast &quot;voice-unavailable&quot;" line="37" static="1">
			<x path="js.html.SpeechSynthesisErrorCode"/>
			<meta>
				<m n=":value"><e>cast "voice-unavailable"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VOICE_UNAVAILABLE>
		<TEXT_TOO_LONG public="1" get="inline" set="null" expr="cast &quot;text-too-long&quot;" line="38" static="1">
			<x path="js.html.SpeechSynthesisErrorCode"/>
			<meta>
				<m n=":value"><e>cast "text-too-long"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TEXT_TOO_LONG>
		<INVALID_ARGUMENT public="1" get="inline" set="null" expr="cast &quot;invalid-argument&quot;" line="39" static="1">
			<x path="js.html.SpeechSynthesisErrorCode"/>
			<meta>
				<m n=":value"><e>cast "invalid-argument"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</INVALID_ARGUMENT>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.SpeechSynthesisEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SpeechSynthesisEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<utterance public="1" set="null">
			<c path="js.html.SpeechSynthesisUtterance"/>
			<haxe_doc>Returns the `SpeechSynthesisUtterance` instance that the event was triggered on.</haxe_doc>
		</utterance>
		<charIndex public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the index position of the character in the `SpeechSynthesisUtterance.text` that was being spoken when the event was triggered.</haxe_doc>
		</charIndex>
		<elapsedTime public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the elapsed time in milliseconds after the `SpeechSynthesisUtterance.text` started being spoken that the event was triggered at.</haxe_doc>
		</elapsedTime>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the name associated with certain types of events occurring as the `SpeechSynthesisUtterance.text` is being spoken: the name of the SSML marker reached in the case of a `mark` event, or the type of boundary reached in the case of a `boundary` event.</haxe_doc>
		</name>
		<new public="1" set="method">
			<f a="type:eventInitDict">
				<c path="String"/>
				<t path="js.html.SpeechSynthesisEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `SpeechSynthesisEvent` interface of the Web Speech API contains information about the current state of `SpeechSynthesisUtterance` objects that have been processed in the speech service.

	Documentation [SpeechSynthesisEvent](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechSynthesisEvent"</e></m></meta>
	</class>
	<class path="js.html.SpeechSynthesisErrorEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SpeechSynthesisErrorEvent.hx" extern="1">
		<extends path="js.html.SpeechSynthesisEvent"/>
		<error public="1" set="null">
			<x path="js.html.SpeechSynthesisErrorCode"/>
			<haxe_doc>Returns an error code indicating what has gone wrong with a speech synthesis attempt.</haxe_doc>
		</error>
		<new public="1" set="method">
			<f a="type:eventInitDict">
				<c path="String"/>
				<t path="js.html.SpeechSynthesisErrorEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `SpeechSynthesisErrorEvent` interface of the Web Speech API contains information about any errors that occur while processing `SpeechSynthesisUtterance` objects in the speech service.

	Documentation [SpeechSynthesisErrorEvent](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisErrorEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisErrorEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisErrorEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechSynthesisErrorEvent"</e></m></meta>
	</class>
	<typedef path="js.html.SpeechSynthesisErrorEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SpeechSynthesisErrorEventInit.hx"><a>
	<utterance><c path="js.html.SpeechSynthesisUtterance"/></utterance>
	<name>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</name>
	<error><x path="js.html.SpeechSynthesisErrorCode"/></error>
	<elapsedTime>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</elapsedTime>
	<charIndex>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</charIndex>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<typedef path="js.html.SpeechSynthesisEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SpeechSynthesisEventInit.hx"><a>
	<utterance><c path="js.html.SpeechSynthesisUtterance"/></utterance>
	<name>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</name>
	<elapsedTime>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</elapsedTime>
	<charIndex>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</charIndex>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.SpeechSynthesisUtterance" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SpeechSynthesisUtterance.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<text public="1">
			<c path="String"/>
			<haxe_doc>Gets and sets the text that will be synthesised when the utterance is spoken.</haxe_doc>
		</text>
		<lang public="1">
			<c path="String"/>
			<haxe_doc>Gets and sets the language of the utterance.</haxe_doc>
		</lang>
		<voice public="1">
			<c path="js.html.SpeechSynthesisVoice"/>
			<haxe_doc>Gets and sets the voice that will be used to speak the utterance.</haxe_doc>
		</voice>
		<volume public="1">
			<x path="Float"/>
			<haxe_doc>Gets and sets the volume that the utterance will be spoken at.</haxe_doc>
		</volume>
		<rate public="1">
			<x path="Float"/>
			<haxe_doc>Gets and sets the speed at which the utterance will be spoken at.</haxe_doc>
		</rate>
		<pitch public="1">
			<x path="Float"/>
			<haxe_doc>Gets and sets the pitch at which the utterance will be spoken at.</haxe_doc>
		</pitch>
		<onstart public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the utterance has begun to be spoken.</haxe_doc>
		</onstart>
		<onend public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the utterance has finished being spoken.</haxe_doc>
		</onend>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when an error occurs that prevents the utterance from being succesfully spoken.</haxe_doc>
		</onerror>
		<onpause public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the utterance is paused part way through.</haxe_doc>
		</onpause>
		<onresume public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when a paused utterance is resumed.</haxe_doc>
		</onresume>
		<onmark public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the spoken utterance reaches a named SSML "mark" tag.</haxe_doc>
		</onmark>
		<onboundary public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fired when the spoken utterance reaches a word or sentence boundary.</haxe_doc>
		</onboundary>
		<new public="1" set="method">
			<f a="text">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[The `SpeechSynthesisUtterance` interface of the Web Speech API represents a speech request. It contains the content the speech service should read and information about how to read it (e.g. language, pitch and volume.)

	Documentation [SpeechSynthesisUtterance](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechSynthesisUtterance"</e></m></meta>
	</class>
	<class path="js.html.SpeechSynthesisVoice" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SpeechSynthesisVoice.hx" extern="1">
		<voiceURI public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns the type of URI and location of the speech synthesis service for this voice.</haxe_doc>
		</voiceURI>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a human-readable name that represents the voice.</haxe_doc>
		</name>
		<lang public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a BCP 47 language tag indicating the language of the voice.</haxe_doc>
		</lang>
		<localService public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A `Boolean` indicating whether the voice is supplied by a local speech synthesizer service (`true`), or a remote speech synthesizer service (`false`.)</haxe_doc>
		</localService>
		<default_ public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":native"><e>"default"</e></m></meta>
		</default_>
		<haxe_doc><![CDATA[The `SpeechSynthesisVoice` interface of the Web Speech API represents a voice that the system supports. Every `SpeechSynthesisVoice` has its own relative speech service including information about language, name and URI.

	Documentation [SpeechSynthesisVoice](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisVoice) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisVoice$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisVoice>]]></haxe_doc>
		<meta><m n=":native"><e>"SpeechSynthesisVoice"</e></m></meta>
	</class>
	<class path="js.html.Storage" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Storage.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an integer representing the number of data items stored in the `Storage` object.</haxe_doc>
		</length>
		<key public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</key>
		<getItem public="1" set="method">
			<f a="key">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getItem>
		<setItem public="1" set="method">
			<f a="key:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setItem>
		<removeItem public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeItem>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</clear>
		<haxe_doc><![CDATA[The `Storage` interface of the Web Storage API provides access to the session storage or local storage for a particular domain, allowing you to for example add, modify or delete stored data items.

	Documentation [Storage](https://developer.mozilla.org/en-US/docs/Web/API/Storage) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Storage$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Storage>]]></haxe_doc>
		<meta><m n=":native"><e>"Storage"</e></m></meta>
	</class>
	<class path="js.html.StorageEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/StorageEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<key public="1" set="null"><c path="String"/></key>
		<oldValue public="1" set="null"><c path="String"/></oldValue>
		<newValue public="1" set="null"><c path="String"/></newValue>
		<url public="1" set="null"><c path="String"/></url>
		<storageArea public="1" set="null"><c path="js.html.Storage"/></storageArea>
		<initStorageEvent public="1" set="method"><f a="type:canBubble:cancelable:key:oldValue:newValue:url:storageArea">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="js.html.Storage"/>
	<x path="Void"/>
</f></initStorageEvent>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<t path="js.html.StorageEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A `StorageEvent` is sent to a window when a storage area changes.

	Documentation [StorageEvent](https://developer.mozilla.org/en-US/docs/Web/API/StorageEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/StorageEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/StorageEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"StorageEvent"</e></m></meta>
	</class>
	<typedef path="js.html.StorageEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/StorageEventInit.hx"><a>
	<url>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</url>
	<storageArea>
		<t path="Null"><c path="js.html.Storage"/></t>
		<meta><m n=":optional"/></meta>
	</storageArea>
	<oldValue>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</oldValue>
	<newValue>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</newValue>
	<key>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</key>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.StyleElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/StyleElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<disabled public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` value representing whether or not the stylesheet is disabled (true) or not (false).</haxe_doc>
		</disabled>
		<media public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the intended destination medium for style information.</haxe_doc>
		</media>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the type of style being applied by this statement.</haxe_doc>
		</type>
		<scoped public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` value indicating if the element applies to the whole document (`false`) or only to the parent's sub-tree (`true`).</haxe_doc>
		</scoped>
		<sheet public="1" set="null"><c path="js.html.StyleSheet"/></sheet>
		<haxe_doc><![CDATA[The `HTMLStyleElement` interface represents a `style` element. It inherits properties and methods from its parent, `HTMLElement`, and from `LinkStyle`.

	Documentation [HTMLStyleElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLStyleElement"</e></m></meta>
	</class>
	<class path="js.html.StyleSheetList" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/StyleSheetList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<item public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="js.html.StyleSheet"/>
</f></item>
		<haxe_doc><![CDATA[The `StyleSheetList` interface represents a list of `StyleSheet`.

	Documentation [StyleSheetList](https://developer.mozilla.org/en-US/docs/Web/API/StyleSheetList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/StyleSheetList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/StyleSheetList>]]></haxe_doc>
		<meta><m n=":native"><e>"StyleSheetList"</e></m></meta>
	</class>
	<class path="js.html.SubtleCrypto" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SubtleCrypto.hx" extern="1">
		<encrypt public="1" set="method">
			<f a="algorithm:key:data">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.ArrayBufferView"/>
					<c path="js.html.ArrayBuffer"/>
				</x>
				<c path="js.Promise"><d/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</encrypt>
		<decrypt public="1" set="method">
			<f a="algorithm:key:data">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.ArrayBufferView"/>
					<c path="js.html.ArrayBuffer"/>
				</x>
				<c path="js.Promise"><d/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</decrypt>
		<sign public="1" set="method">
			<f a="algorithm:key:data">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.ArrayBufferView"/>
					<c path="js.html.ArrayBuffer"/>
				</x>
				<c path="js.Promise"><d/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</sign>
		<verify public="1" set="method">
			<f a="algorithm:key:signature:data">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.ArrayBufferView"/>
					<c path="js.html.ArrayBuffer"/>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="js.html.ArrayBufferView"/>
					<c path="js.html.ArrayBuffer"/>
				</x>
				<c path="js.Promise"><d/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</verify>
		<digest public="1" set="method">
			<f a="algorithm:data">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="js.html.ArrayBufferView"/>
					<c path="js.html.ArrayBuffer"/>
				</x>
				<c path="js.Promise"><d/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</digest>
		<generateKey public="1" set="method">
			<f a="algorithm:extractable:keyUsages">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<x path="Bool"/>
				<c path="Array"><c path="String"/></c>
				<c path="js.Promise"><d/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</generateKey>
		<deriveKey public="1" set="method">
			<f a="algorithm:baseKey:derivedKeyType:extractable:keyUsages">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<x path="Bool"/>
				<c path="Array"><c path="String"/></c>
				<c path="js.Promise"><d/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</deriveKey>
		<deriveBits public="1" set="method">
			<f a="algorithm:baseKey:length">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="Int"/>
				<c path="js.Promise"><d/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</deriveBits>
		<importKey public="1" set="method">
			<f a="format:keyData:algorithm:extractable:keyUsages">
				<c path="String"/>
				<d/>
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<x path="Bool"/>
				<c path="Array"><c path="String"/></c>
				<c path="js.Promise"><d/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</importKey>
		<exportKey public="1" set="method">
			<f a="format:key">
				<c path="String"/>
				<c path="js.html.CryptoKey"/>
				<c path="js.Promise"><d/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</exportKey>
		<wrapKey public="1" set="method">
			<f a="format:key:wrappingKey:wrapAlgorithm">
				<c path="String"/>
				<c path="js.html.CryptoKey"/>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<c path="js.Promise"><d/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</wrapKey>
		<unwrapKey public="1" set="method">
			<f a="format:wrappedKey:unwrappingKey:unwrapAlgorithm:unwrappedKeyAlgorithm:extractable:keyUsages">
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.ArrayBufferView"/>
					<c path="js.html.ArrayBuffer"/>
				</x>
				<c path="js.html.CryptoKey"/>
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<x path="Bool"/>
				<c path="Array"><c path="String"/></c>
				<c path="js.Promise"><d/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</unwrapKey>
		<haxe_doc><![CDATA[The `SubtleCrypto` interface represents a set of cryptographic primitives. It is available via the `Crypto.subtle` properties available in a window context (via `Window.crypto`).

	Documentation [SubtleCrypto](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto>]]></haxe_doc>
		<meta><m n=":native"><e>"SubtleCrypto"</e></m></meta>
	</class>
	<abstract path="js.html.SupportedType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SupportedType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._SupportedType.SupportedType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SupportedType.hx" private="1" module="js.html.SupportedType" extern="1">
	<TEXT_HTML public="1" get="inline" set="null" expr="cast &quot;text/html&quot;" line="29" static="1">
		<x path="js.html.SupportedType"/>
		<meta>
			<m n=":value"><e>cast "text/html"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TEXT_HTML>
	<TEXT_XML public="1" get="inline" set="null" expr="cast &quot;text/xml&quot;" line="30" static="1">
		<x path="js.html.SupportedType"/>
		<meta>
			<m n=":value"><e>cast "text/xml"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TEXT_XML>
	<APPLICATION_XML public="1" get="inline" set="null" expr="cast &quot;application/xml&quot;" line="31" static="1">
		<x path="js.html.SupportedType"/>
		<meta>
			<m n=":value"><e>cast "application/xml"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</APPLICATION_XML>
	<APPLICATION_XHTML_XML public="1" get="inline" set="null" expr="cast &quot;application/xhtml+xml&quot;" line="32" static="1">
		<x path="js.html.SupportedType"/>
		<meta>
			<m n=":value"><e>cast "application/xhtml+xml"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</APPLICATION_XHTML_XML>
	<IMAGE_SVG_XML public="1" get="inline" set="null" expr="cast &quot;image/svg+xml&quot;" line="33" static="1">
		<x path="js.html.SupportedType"/>
		<meta>
			<m n=":value"><e>cast "image/svg+xml"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IMAGE_SVG_XML>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._SupportedType.SupportedType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/SupportedType.hx" private="1" module="js.html.SupportedType" extern="1">
		<TEXT_HTML public="1" get="inline" set="null" expr="cast &quot;text/html&quot;" line="29" static="1">
			<x path="js.html.SupportedType"/>
			<meta>
				<m n=":value"><e>cast "text/html"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TEXT_HTML>
		<TEXT_XML public="1" get="inline" set="null" expr="cast &quot;text/xml&quot;" line="30" static="1">
			<x path="js.html.SupportedType"/>
			<meta>
				<m n=":value"><e>cast "text/xml"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TEXT_XML>
		<APPLICATION_XML public="1" get="inline" set="null" expr="cast &quot;application/xml&quot;" line="31" static="1">
			<x path="js.html.SupportedType"/>
			<meta>
				<m n=":value"><e>cast "application/xml"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</APPLICATION_XML>
		<APPLICATION_XHTML_XML public="1" get="inline" set="null" expr="cast &quot;application/xhtml+xml&quot;" line="32" static="1">
			<x path="js.html.SupportedType"/>
			<meta>
				<m n=":value"><e>cast "application/xhtml+xml"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</APPLICATION_XHTML_XML>
		<IMAGE_SVG_XML public="1" get="inline" set="null" expr="cast &quot;image/svg+xml&quot;" line="33" static="1">
			<x path="js.html.SupportedType"/>
			<meta>
				<m n=":value"><e>cast "image/svg+xml"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IMAGE_SVG_XML>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.TableCaptionElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TableCaptionElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` which represents an enumerated attribute indicating alignment of the caption with respect to the table.</haxe_doc>
		</align>
		<haxe_doc><![CDATA[The `HTMLTableCaptionElement` interface special properties (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating table caption elements.

	Documentation [HTMLTableCaptionElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCaptionElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCaptionElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCaptionElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableCaptionElement"</e></m></meta>
	</class>
	<class path="js.html.TableCellElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TableCellElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<colSpan public="1">
			<x path="Int"/>
			<haxe_doc>Is a `unsigned` `long` that represents the number of columns this cell must span. It reflects the `colspan` attribute.</haxe_doc>
		</colSpan>
		<rowSpan public="1">
			<x path="Int"/>
			<haxe_doc>Is a `unsigned` `long` that represents the number of rows this cell must span. It reflects the `rowspan` attribute.</haxe_doc>
		</rowSpan>
		<headers public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMSettableTokenList` describing a list of `id` of `th` elements that represents headers associated with the cell. It reflects the `headers` attribute.</haxe_doc>
		</headers>
		<cellIndex public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is a `long` representing the cell position in the cells collection of the `tr` it belongs to. If the cell doesn't belong to a `tr`, it returns `-1`.</haxe_doc>
		</cellIndex>
		<abbr public="1"><c path="String"/></abbr>
		<scope public="1"><c path="String"/></scope>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing an enumerated value reflecting the `align` attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, and `"center"`.</haxe_doc>
		</align>
		<axis public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a name grouping cells in virtual. It reflects the obsolete `axis` attribute.</haxe_doc>
		</axis>
		<height public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a length of pixel of the hinted height of the cell. It reflects the obsolete `height` attribute.</haxe_doc>
		</height>
		<width public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a length of pixel of the hinted width of the cell. It reflects the obsolete `width` attribute.</haxe_doc>
		</width>
		<ch public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing one single chararcter. This character is the one to align all the cell of a column on. It reflects the `char` and default to the decimal points associated with the language, e.g. `'.'` for English, or `','` for French. This property was optional and was not very well supported.</haxe_doc>
		</ch>
		<chOff public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a integer indicating how many characters must be left at the right (for left-to-right scripts; or at the left for right-to-left scripts) of the character defined by `HTMLTableCellElement.ch`. This property was optional and was not very well supported.</haxe_doc>
		</chOff>
		<noWrap public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` value reflecting the `nowrap` attribute and indicating if cell content can be broken in several lines.</haxe_doc>
		</noWrap>
		<vAlign public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing an enumerated value indicating how the content of the cell must be vertically aligned. It reflects the `valign` attribute and can have one of the following values: `"top"`, `"middle"`, `"bottom"`, or `"baseline"`.</haxe_doc>
		</vAlign>
		<bgColor public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the background color of the cells. It reflects the obsolete `bgColor` attribute.</haxe_doc>
		</bgColor>
		<haxe_doc><![CDATA[The `HTMLTableCellElement` interface provides special properties and methods (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of table cells, either header or data cells, in an HTML document.

	Documentation [HTMLTableCellElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableCellElement"</e></m></meta>
	</class>
	<class path="js.html.TableColElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TableColElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<span public="1"><x path="Int"/></span>
		<align public="1"><c path="String"/></align>
		<ch public="1"><c path="String"/></ch>
		<chOff public="1"><c path="String"/></chOff>
		<vAlign public="1"><c path="String"/></vAlign>
		<width public="1"><c path="String"/></width>
		<haxe_doc><![CDATA[The `HTMLTableColElement` interface provides special properties (beyond the `HTMLElement` interface it also has available to it inheritance) for manipulating single or grouped table column elements.

	Documentation [HTMLTableColElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableColElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableColElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableColElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableColElement"</e></m></meta>
	</class>
	<class path="js.html.TableElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TableElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<caption public="1">
			<c path="js.html.TableCaptionElement"/>
			<haxe_doc>Is a `HTMLTableCaptionElement` representing the first `caption` that is a child of the element, or `null` if none is found. When set, if the object doesn't represent a `caption`, a `DOMException` with the `HierarchyRequestError` name is thrown. If a correct object is given, it is inserted in the tree as the first child of this element and the first `caption` that is a child of this element is removed from the tree, if any.</haxe_doc>
		</caption>
		<tHead public="1">
			<c path="js.html.TableSectionElement"/>
			<haxe_doc>Is a `HTMLTableSectionElement` representing the first `thead` that is a child of the element, or `null` if none is found. When set, if the object doesn't represent a `thead`, a `DOMException` with the `HierarchyRequestError` name is thrown. If a correct object is given, it is inserted in the tree immediately before the first element that is neither a `caption`, nor a `colgroup`, or as the last child if there is no such element, and the first `thead` that is a child of this element is removed from the tree, if any.</haxe_doc>
		</tHead>
		<tFoot public="1">
			<c path="js.html.TableSectionElement"/>
			<haxe_doc>Is a `HTMLTableSectionElement` representing the first `tfoot` that is a child of the element, or `null` if none is found. When set, if the object doesn't represent a `tfoot`, a `DOMException` with the `HierarchyRequestError` name is thrown. If a correct object is given, it is inserted in the tree immediately before the first element that is neither a `caption`, a `colgroup`, nor a `thead`, or as the last child if there is no such element, and the first `tfoot` that is a child of this element is removed from the tree, if any.</haxe_doc>
		</tFoot>
		<tBodies public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a live `HTMLCollection` containing all the `tbody` of the element. The `HTMLCollection` is live and is automatically updated when the `HTMLTableElement` changes.</haxe_doc>
		</tBodies>
		<rows public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a live `HTMLCollection` containing all the rows of the element, that is all `tr` that are a child of the element, or a child or one of its `thead`, `tbody` and `tfoot` children. The rows members of a `thead` appear first, in tree order, and those members of a `tbody` last, also in tree order. The `HTMLCollection` is live and is automatically updated when the `HTMLTableElement` changes.</haxe_doc>
		</rows>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing an enumerated value reflecting the `align` attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, and `"center"`.</haxe_doc>
		</align>
		<border public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the width in pixels of the border of the table. It reflects the obsolete `border` attribute.</haxe_doc>
		</border>
		<frame public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the type of the external borders of the table. It reflects the obsolete `frame` attribute and can take one of the following values: `"void"`, `"above"`, `"below"`, `"hsides"`, `"vsides"`, `"lhs"`, `"rhs"`, `"box"`, or `"border"`.</haxe_doc>
		</frame>
		<rules public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the type of the internal borders of the table. It reflects the obsolete `rules` attribute and can take one of the following values: `"none"`, `"groups"`, `"rows"`, `"cols"`, or `"all"`.</haxe_doc>
		</rules>
		<summary public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a description of the purpose or the structure of the table. It reflects the obsolete `summary` attribute.</haxe_doc>
		</summary>
		<width public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the length in pixels or in percentage of the desired width fo the entire table. It reflects the obsolete `width` attribute.</haxe_doc>
		</width>
		<bgColor public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the background color of the cells. It reflects the obsolete `bgColor` attribute.</haxe_doc>
		</bgColor>
		<cellPadding public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the width in pixels of the horizontal and vertical sapce between cell content and cell borders. It reflects the obsolete `cellpadding` attribute.</haxe_doc>
		</cellPadding>
		<cellSpacing public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the width in pixels of the horizontal and vertical separation between cells. It reflects the obsolete `cellspacing` attribute.</haxe_doc>
		</cellSpacing>
		<createCaption public="1" set="method">
			<f a=""><c path="js.html.Element"/></f>
			<haxe_doc>Returns an `HTMLElement` representing the first `caption` that is a child of the element. If none is found, a new one is created and inserted in the tree as the first child of the `table` element.</haxe_doc>
		</createCaption>
		<deleteCaption public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes the first `caption` that is a child of the element.</haxe_doc>
		</deleteCaption>
		<createTHead public="1" set="method">
			<f a=""><c path="js.html.Element"/></f>
			<haxe_doc>Returns an `HTMLElement` representing the first `thead` that is a child of the element. If none is found, a new one is created and inserted in the tree immediately before the first element that is neither a `caption`, nor a `colgroup`, or as the last child if there is no such element.</haxe_doc>
		</createTHead>
		<deleteTHead public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes the first `thead` that is a child of the element.</haxe_doc>
		</deleteTHead>
		<createTFoot public="1" set="method">
			<f a=""><c path="js.html.Element"/></f>
			<haxe_doc>Returns an `HTMLElement` representing the first `tfoot` that is a child of the element. If none is found, a new one is created and inserted in the tree immediately before the first element that is neither a `caption`, a `colgroup`, nor a `thead`, or as the last child if there is no such element.</haxe_doc>
		</createTFoot>
		<deleteTFoot public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Removes the first `tfoot` that is a child of the element.</haxe_doc>
		</deleteTFoot>
		<createTBody public="1" set="method"><f a=""><c path="js.html.Element"/></f></createTBody>
		<insertRow public="1" set="method">
			<f a="?index" v="-1">
				<x path="Int"/>
				<c path="js.html.Element"/>
			</f>
			<meta><m n=":value"><e>{ index : -1 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</insertRow>
		<deleteRow public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</deleteRow>
		<haxe_doc><![CDATA[The `HTMLTableElement` interface provides special properties and methods (beyond the regular `HTMLElement` object interface it also has available to it by inheritance) for manipulating the layout and presentation of tables in an HTML document.

	Documentation [HTMLTableElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableElement"</e></m></meta>
	</class>
	<class path="js.html.TableRowElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TableRowElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<rowIndex public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` value which gives the logical position of the row within the entire table. If the row is not part of a table, returns `-1`.</haxe_doc>
		</rowIndex>
		<sectionRowIndex public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns a `long` value which gives the logical position of the row within the table section it belongs to. If the row is not part of a section, returns `-1`.</haxe_doc>
		</sectionRowIndex>
		<cells public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a live `HTMLCollection` containing the cells in the row. The `HTMLCollection` is live and is automatically updated when cells are added or removed.</haxe_doc>
		</cells>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing an enumerated value reflecting the `align` attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, and `"center"`.</haxe_doc>
		</align>
		<ch public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing one single character. This character is the one to align all the cell of a column on. It reflects the `char` and default to the decimal points associated with the language, e.g. `'.'` for English, or `','` for French. This property was optional and was not very well supported.</haxe_doc>
		</ch>
		<chOff public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a integer indicating how many characters must be left at the right (for left-to-right scripts; or at the left for right-to-left scripts) of the character defined by `HTMLTableRowElement.ch`. This property was optional and was not very well supported.</haxe_doc>
		</chOff>
		<vAlign public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing an enumerated value indicating how the content of the cell must be vertically aligned. It reflects the `valign` attribute and can have one of the following values: `"top"`, `"middle"`, `"bottom"`, or `"baseline"`.</haxe_doc>
		</vAlign>
		<bgColor public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the background color of the cells. It reflects the obsolete `bgColor` attribute.</haxe_doc>
		</bgColor>
		<insertCell public="1" set="method">
			<f a="?index" v="-1">
				<x path="Int"/>
				<c path="js.html.Element"/>
			</f>
			<meta><m n=":value"><e>{ index : -1 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</insertCell>
		<deleteCell public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</deleteCell>
		<haxe_doc><![CDATA[The `HTMLTableRowElement` interface provides special properties and methods (beyond the `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of rows in an HTML table.

	Documentation [HTMLTableRowElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableRowElement"</e></m></meta>
	</class>
	<class path="js.html.TableSectionElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TableSectionElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<rows public="1" set="null">
			<c path="js.html.HTMLCollection"/>
			<haxe_doc>Returns a live `HTMLCollection` containing the rows in the section. The `HTMLCollection` is live and is automatically updated when rows are added or removed.</haxe_doc>
		</rows>
		<align public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing an enumerated value reflecting the `align` attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are `"left"`, `"right"`, and `"center"`.</haxe_doc>
		</align>
		<ch public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing one single chararcter. This character is the one to align all the cell of a column on. It reflects the `char` and default to the decimal points associated with the language, e.g. `'.'` for English, or `','` for French. This property was optional and was not very well supported.</haxe_doc>
		</ch>
		<chOff public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a integer indicating how many characters must be left at the right (for left-to-right scripts; or at the left for right-to-left scripts) of the character defined by `HTMLTableRowElement.ch`. This property was optional and was not very well supported.</haxe_doc>
		</chOff>
		<vAlign public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing an enumerated value indicating how the content of the cell must be vertically aligned. It reflects the `valign` attribute and can have one of the following values: `"top"`, `"middle"`, `"bottom"`, or `"baseline"`.</haxe_doc>
		</vAlign>
		<insertRow public="1" set="method">
			<f a="?index" v="-1">
				<x path="Int"/>
				<c path="js.html.Element"/>
			</f>
			<meta><m n=":value"><e>{ index : -1 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</insertRow>
		<deleteRow public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</deleteRow>
		<haxe_doc><![CDATA[The `HTMLTableSectionElement` interface provides special properties and methods (beyond the `HTMLElement` interface it also has available to it by inheritance) for manipulating the layout and presentation of sections, that is headers, footers and bodies, in an HTML table.

	Documentation [HTMLTableSectionElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTableSectionElement"</e></m></meta>
	</class>
	<class path="js.html.TemplateElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TemplateElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<content public="1" set="null"><c path="js.html.DocumentFragment"/></content>
		<meta><m n=":native"><e>"HTMLTemplateElement"</e></m></meta>
	</class>
	<class path="js.html.TextAreaElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TextAreaElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<autofocus public="1"><x path="Bool"/></autofocus>
		<cols public="1"><x path="Int"/></cols>
		<disabled public="1"><x path="Bool"/></disabled>
		<form public="1" set="null"><c path="js.html.FormElement"/></form>
		<maxLength public="1"><x path="Int"/></maxLength>
		<name public="1"><c path="String"/></name>
		<placeholder public="1"><c path="String"/></placeholder>
		<readOnly public="1"><x path="Bool"/></readOnly>
		<required public="1"><x path="Bool"/></required>
		<rows public="1"><x path="Int"/></rows>
		<wrap public="1"><c path="String"/></wrap>
		<type public="1" set="null"><c path="String"/></type>
		<defaultValue public="1"><c path="String"/></defaultValue>
		<value public="1"><c path="String"/></value>
		<textLength public="1" set="null"><x path="Int"/></textLength>
		<willValidate public="1" set="null"><x path="Bool"/></willValidate>
		<validity public="1" set="null"><c path="js.html.ValidityState"/></validity>
		<validationMessage public="1" set="null"><c path="String"/></validationMessage>
		<selectionStart public="1"><x path="Int"/></selectionStart>
		<selectionEnd public="1"><x path="Int"/></selectionEnd>
		<selectionDirection public="1"><c path="String"/></selectionDirection>
		<checkValidity public="1" set="method"><f a=""><x path="Bool"/></f></checkValidity>
		<setCustomValidity public="1" set="method"><f a="error">
	<c path="String"/>
	<x path="Void"/>
</f></setCustomValidity>
		<select public="1" set="method"><f a=""><x path="Void"/></f></select>
		<setRangeText public="1" set="method">
			<f a="replacement:start:end:?selectionMode" v=":::&quot;preserve&quot;">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="js.html.SelectionMode"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ selectionMode : "preserve" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setRangeText public="1" set="method">
	<f a="replacement">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</setRangeText></overloads>
		</setRangeText>
		<setSelectionRange public="1" set="method">
			<f a="start:end:?direction">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setSelectionRange>
		<haxe_doc><![CDATA[The `HTMLTextAreaElement` interface provides special properties and methods for manipulating the layout and presentation of `textarea` elements.

	Documentation [HTMLTextAreaElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTextAreaElement"</e></m></meta>
	</class>
	<typedef path="js.html.TextDecodeOptions" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TextDecodeOptions.hx"><a><stream>
	<t path="Null"><x path="Bool"/></t>
	<meta><m n=":optional"/></meta>
</stream></a></typedef>
	<class path="js.html.TextDecoder" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TextDecoder.hx" extern="1">
		<encoding public="1" set="null">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the name of the decoder, that is a string describing the method the `TextDecoder` will use.</haxe_doc>
		</encoding>
		<fatal public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating whether the error mode is fatal.</haxe_doc>
		</fatal>
		<decode public="1" set="method">
			<f a="?input:?options">
				<x path="haxe.extern.EitherType">
					<c path="js.html.ArrayBufferView"/>
					<c path="js.html.ArrayBuffer"/>
				</x>
				<t path="js.html.TextDecodeOptions"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</decode>
		<new public="1" set="method">
			<f a="?label:?options" v="&quot;utf-8&quot;:">
				<c path="String"/>
				<t path="js.html.TextDecoderOptions"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ label : "utf-8" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `TextDecoder` interface represents a decoder for a specific method, that is a specific character encoding, like `utf-8`, `iso-8859-2`, `koi8`, `cp1261`, `gbk`, ... A decoder takes a stream of bytes as input and emits a stream of code points. For a more scalable, non-native library, see `StringView` – a C-like representation of strings based on typed arrays.

	Documentation [TextDecoder](https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder>]]></haxe_doc>
		<meta><m n=":native"><e>"TextDecoder"</e></m></meta>
	</class>
	<typedef path="js.html.TextDecoderOptions" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TextDecoderOptions.hx"><a><fatal>
	<t path="Null"><x path="Bool"/></t>
	<meta><m n=":optional"/></meta>
</fatal></a></typedef>
	<class path="js.html.TextEncoder" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TextEncoder.hx" extern="1">
		<encoding public="1" set="null">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the name of the encoder, that is a string describing the method the `TextEncoder` will use.</haxe_doc>
		</encoding>
		<encode public="1" set="method">
			<f a="?input" v="&quot;&quot;">
				<c path="String"/>
				<c path="js.html.Uint8Array"/>
			</f>
			<meta><m n=":value"><e>{ input : "" }</e></m></meta>
			<haxe_doc>Returns a `Uint8Array` containing utf-8 encoded text.</haxe_doc>
		</encode>
		<new public="1" set="method">
			<f a="?utfLabel" v="&quot;utf-8&quot;">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ utfLabel : "utf-8" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[TextEncoder takes a stream of code points as input and emits a stream of bytes. For a more scalable, non-native library, see `StringView` – a C-like representation of strings based on typed arrays.

	Documentation [TextEncoder](https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder>]]></haxe_doc>
		<meta><m n=":native"><e>"TextEncoder"</e></m></meta>
	</class>
	<class path="js.html.TextMetrics" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TextMetrics.hx" extern="1">
		<width public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Is a `double` giving the calculated width of a segment of inline text in CSS pixels. It takes into account the current font of the context.</haxe_doc>
		</width>
		<haxe_doc><![CDATA[The `TextMetrics` interface represents the dimension of a text in the canvas, as created by the `CanvasRenderingContext2D.measureText()` method.

	Documentation [TextMetrics](https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics>]]></haxe_doc>
		<meta><m n=":native"><e>"TextMetrics"</e></m></meta>
	</class>
	<class path="js.html.TextTrack" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TextTrack.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<kind public="1" set="null"><x path="js.html.TextTrackKind"/></kind>
		<label public="1" set="null"><c path="String"/></label>
		<language public="1" set="null"><c path="String"/></language>
		<id public="1" set="null"><c path="String"/></id>
		<inBandMetadataTrackDispatchType public="1" set="null"><c path="String"/></inBandMetadataTrackDispatchType>
		<mode public="1"><x path="js.html.TextTrackMode"/></mode>
		<cues public="1" set="null"><c path="js.html.TextTrackCueList"/></cues>
		<activeCues public="1" set="null"><c path="js.html.TextTrackCueList"/></activeCues>
		<oncuechange public="1"><x path="haxe.Function"/></oncuechange>
		<addCue public="1" set="method"><f a="cue">
	<c path="js.html.VTTCue"/>
	<x path="Void"/>
</f></addCue>
		<removeCue public="1" set="method">
			<f a="cue">
				<c path="js.html.VTTCue"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeCue>
		<meta><m n=":native"><e>"TextTrack"</e></m></meta>
	</class>
	<class path="js.html.TextTrackCue" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TextTrackCue.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<track public="1" set="null"><c path="js.html.TextTrack"/></track>
		<id public="1"><c path="String"/></id>
		<startTime public="1"><x path="Float"/></startTime>
		<endTime public="1"><x path="Float"/></endTime>
		<pauseOnExit public="1"><x path="Bool"/></pauseOnExit>
		<onenter public="1"><x path="haxe.Function"/></onenter>
		<onexit public="1"><x path="haxe.Function"/></onexit>
		<meta><m n=":native"><e>"TextTrackCue"</e></m></meta>
	</class>
	<class path="js.html.TextTrackCueList" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TextTrackCueList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<getCueById public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="js.html.VTTCue"/>
</f></getCueById>
		<meta><m n=":native"><e>"TextTrackCueList"</e></m></meta>
	</class>
	<abstract path="js.html.TextTrackKind" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TextTrackKind.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._TextTrackKind.TextTrackKind_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TextTrackKind.hx" private="1" module="js.html.TextTrackKind" extern="1">
	<SUBTITLES public="1" get="inline" set="null" expr="cast &quot;subtitles&quot;" line="29" static="1">
		<x path="js.html.TextTrackKind"/>
		<meta>
			<m n=":value"><e>cast "subtitles"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SUBTITLES>
	<CAPTIONS public="1" get="inline" set="null" expr="cast &quot;captions&quot;" line="30" static="1">
		<x path="js.html.TextTrackKind"/>
		<meta>
			<m n=":value"><e>cast "captions"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CAPTIONS>
	<DESCRIPTIONS public="1" get="inline" set="null" expr="cast &quot;descriptions&quot;" line="31" static="1">
		<x path="js.html.TextTrackKind"/>
		<meta>
			<m n=":value"><e>cast "descriptions"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DESCRIPTIONS>
	<CHAPTERS public="1" get="inline" set="null" expr="cast &quot;chapters&quot;" line="32" static="1">
		<x path="js.html.TextTrackKind"/>
		<meta>
			<m n=":value"><e>cast "chapters"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CHAPTERS>
	<METADATA public="1" get="inline" set="null" expr="cast &quot;metadata&quot;" line="33" static="1">
		<x path="js.html.TextTrackKind"/>
		<meta>
			<m n=":value"><e>cast "metadata"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</METADATA>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._TextTrackKind.TextTrackKind_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TextTrackKind.hx" private="1" module="js.html.TextTrackKind" extern="1">
		<SUBTITLES public="1" get="inline" set="null" expr="cast &quot;subtitles&quot;" line="29" static="1">
			<x path="js.html.TextTrackKind"/>
			<meta>
				<m n=":value"><e>cast "subtitles"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SUBTITLES>
		<CAPTIONS public="1" get="inline" set="null" expr="cast &quot;captions&quot;" line="30" static="1">
			<x path="js.html.TextTrackKind"/>
			<meta>
				<m n=":value"><e>cast "captions"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CAPTIONS>
		<DESCRIPTIONS public="1" get="inline" set="null" expr="cast &quot;descriptions&quot;" line="31" static="1">
			<x path="js.html.TextTrackKind"/>
			<meta>
				<m n=":value"><e>cast "descriptions"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DESCRIPTIONS>
		<CHAPTERS public="1" get="inline" set="null" expr="cast &quot;chapters&quot;" line="32" static="1">
			<x path="js.html.TextTrackKind"/>
			<meta>
				<m n=":value"><e>cast "chapters"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CHAPTERS>
		<METADATA public="1" get="inline" set="null" expr="cast &quot;metadata&quot;" line="33" static="1">
			<x path="js.html.TextTrackKind"/>
			<meta>
				<m n=":value"><e>cast "metadata"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</METADATA>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.TextTrackList" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TextTrackList.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<length public="1" set="null"><x path="Int"/></length>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onaddtrack public="1"><x path="haxe.Function"/></onaddtrack>
		<onremovetrack public="1"><x path="haxe.Function"/></onremovetrack>
		<getTrackById public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="js.html.TextTrack"/>
</f></getTrackById>
		<meta><m n=":native"><e>"TextTrackList"</e></m></meta>
	</class>
	<abstract path="js.html.TextTrackMode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TextTrackMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._TextTrackMode.TextTrackMode_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TextTrackMode.hx" private="1" module="js.html.TextTrackMode" extern="1">
	<DISABLED public="1" get="inline" set="null" expr="cast &quot;disabled&quot;" line="29" static="1">
		<x path="js.html.TextTrackMode"/>
		<meta>
			<m n=":value"><e>cast "disabled"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DISABLED>
	<HIDDEN public="1" get="inline" set="null" expr="cast &quot;hidden&quot;" line="30" static="1">
		<x path="js.html.TextTrackMode"/>
		<meta>
			<m n=":value"><e>cast "hidden"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HIDDEN>
	<SHOWING public="1" get="inline" set="null" expr="cast &quot;showing&quot;" line="31" static="1">
		<x path="js.html.TextTrackMode"/>
		<meta>
			<m n=":value"><e>cast "showing"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SHOWING>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._TextTrackMode.TextTrackMode_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TextTrackMode.hx" private="1" module="js.html.TextTrackMode" extern="1">
		<DISABLED public="1" get="inline" set="null" expr="cast &quot;disabled&quot;" line="29" static="1">
			<x path="js.html.TextTrackMode"/>
			<meta>
				<m n=":value"><e>cast "disabled"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DISABLED>
		<HIDDEN public="1" get="inline" set="null" expr="cast &quot;hidden&quot;" line="30" static="1">
			<x path="js.html.TextTrackMode"/>
			<meta>
				<m n=":value"><e>cast "hidden"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HIDDEN>
		<SHOWING public="1" get="inline" set="null" expr="cast &quot;showing&quot;" line="31" static="1">
			<x path="js.html.TextTrackMode"/>
			<meta>
				<m n=":value"><e>cast "showing"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SHOWING>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.TimeElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TimeElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<dateTime public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `datetime` HTML attribute, containing a machine-readable form of the element's date and time value.</haxe_doc>
		</dateTime>
		<haxe_doc><![CDATA[The `HTMLTimeElement` interface provides special properties (beyond the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating `time` elements.

	Documentation [HTMLTimeElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTimeElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTimeElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTimeElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTimeElement"</e></m></meta>
	</class>
	<class path="js.html.TimeEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TimeEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<detail public="1" set="null"><x path="Int"/></detail>
		<view public="1" set="null"><c path="js.html.Window"/></view>
		<initTimeEvent public="1" set="method"><f a="aType:aView:aDetail">
	<c path="String"/>
	<c path="js.html.Window"/>
	<x path="Int"/>
	<x path="Void"/>
</f></initTimeEvent>
		<haxe_doc><![CDATA[Extends Event.

	Documentation [TimeEvent](https://developer.mozilla.org/en-US/docs/Web/API/TimeEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TimeEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TimeEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"TimeEvent"</e></m></meta>
	</class>
	<class path="js.html.TimeRanges" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TimeRanges.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `unsigned long` representing the number of time ranges represented by the time range object.</haxe_doc>
		</length>
		<start public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</start>
		<end public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</end>
		<haxe_doc><![CDATA[The `TimeRanges` interface is used to represent a set of time ranges, primarily for the purpose of tracking which portions of media have been buffered when loading it for use by the `audio` and `video` elements.

	Documentation [TimeRanges](https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges>]]></haxe_doc>
		<meta><m n=":native"><e>"TimeRanges"</e></m></meta>
	</class>
	<class path="js.html.TitleElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TitleElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<text public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` representing the text of the document's title.</haxe_doc>
		</text>
		<haxe_doc><![CDATA[The `HTMLTitleElement` interface contains the title for a document. This element inherits all of the properties and methods of the `HTMLElement` interface.

	Documentation [HTMLTitleElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTitleElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTitleElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTitleElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTitleElement"</e></m></meta>
	</class>
	<class path="js.html.Touch" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Touch.hx" extern="1">
		<identifier public="1" set="null"><x path="Int"/></identifier>
		<target public="1" set="null"><c path="js.html.EventTarget"/></target>
		<screenX public="1" set="null"><x path="Int"/></screenX>
		<screenY public="1" set="null"><x path="Int"/></screenY>
		<clientX public="1" set="null"><x path="Int"/></clientX>
		<clientY public="1" set="null"><x path="Int"/></clientY>
		<pageX public="1" set="null"><x path="Int"/></pageX>
		<pageY public="1" set="null"><x path="Int"/></pageY>
		<radiusX public="1" set="null"><x path="Int"/></radiusX>
		<radiusY public="1" set="null"><x path="Int"/></radiusY>
		<rotationAngle public="1" set="null"><x path="Float"/></rotationAngle>
		<force public="1" set="null"><x path="Float"/></force>
		<new public="1" set="method">
			<f a="touchInitDict">
				<t path="js.html.TouchInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Touch` interface represents a single contact point on a touch-sensitive device. The contact point is commonly a finger or stylus and the device may be a touchscreen or trackpad.

	Documentation [Touch](https://developer.mozilla.org/en-US/docs/Web/API/Touch) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Touch$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Touch>]]></haxe_doc>
		<meta><m n=":native"><e>"Touch"</e></m></meta>
	</class>
	<class path="js.html.TouchEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TouchEvent.hx" extern="1">
		<extends path="js.html.UIEvent"/>
		<touches public="1" set="null"><c path="js.html.TouchList"/></touches>
		<targetTouches public="1" set="null"><c path="js.html.TouchList"/></targetTouches>
		<changedTouches public="1" set="null"><c path="js.html.TouchList"/></changedTouches>
		<altKey public="1" set="null"><x path="Bool"/></altKey>
		<metaKey public="1" set="null"><x path="Bool"/></metaKey>
		<ctrlKey public="1" set="null"><x path="Bool"/></ctrlKey>
		<shiftKey public="1" set="null"><x path="Bool"/></shiftKey>
		<initTouchEvent public="1" set="method"><f a="type:canBubble:cancelable:view:detail:ctrlKey:altKey:shiftKey:metaKey:touches:targetTouches:changedTouches">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="js.html.Window"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="js.html.TouchList"/>
	<c path="js.html.TouchList"/>
	<c path="js.html.TouchList"/>
	<x path="Void"/>
</f></initTouchEvent>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<t path="js.html.TouchEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `TouchEvent` interface represents an event sent when the state of contacts with a touch-sensitive surface changes. This surface can be a touch screen or trackpad, for example. The event can describe one or more points of contact with the screen and includes support for detecting movement, addition and removal of contact points, and so forth.

	Documentation [TouchEvent](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"TouchEvent"</e></m></meta>
	</class>
	<typedef path="js.html.TouchEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TouchEventInit.hx"><a>
	<view>
		<t path="Null"><c path="js.html.Window"/></t>
		<meta><m n=":optional"/></meta>
	</view>
	<touches>
		<t path="Null"><c path="Array"><c path="js.html.Touch"/></c></t>
		<meta><m n=":optional"/></meta>
	</touches>
	<targetTouches>
		<t path="Null"><c path="Array"><c path="js.html.Touch"/></c></t>
		<meta><m n=":optional"/></meta>
	</targetTouches>
	<shiftKey>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</shiftKey>
	<modifierSymbolLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierSymbolLock>
	<modifierSymbol>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierSymbol>
	<modifierScrollLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierScrollLock>
	<modifierOS>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierOS>
	<modifierNumLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierNumLock>
	<modifierFnLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierFnLock>
	<modifierFn>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierFn>
	<modifierCapsLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierCapsLock>
	<modifierAltGraph>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierAltGraph>
	<metaKey>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</metaKey>
	<detail>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</detail>
	<ctrlKey>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</ctrlKey>
	<changedTouches>
		<t path="Null"><c path="Array"><c path="js.html.Touch"/></c></t>
		<meta><m n=":optional"/></meta>
	</changedTouches>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
	<altKey>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</altKey>
</a></typedef>
	<typedef path="js.html.TouchInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TouchInit.hx"><a>
	<target><c path="js.html.EventTarget"/></target>
	<screenY>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</screenY>
	<screenX>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</screenX>
	<rotationAngle>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</rotationAngle>
	<radiusY>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</radiusY>
	<radiusX>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</radiusX>
	<pageY>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</pageY>
	<pageX>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</pageX>
	<identifier><x path="Int"/></identifier>
	<force>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</force>
	<clientY>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</clientY>
	<clientX>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</clientX>
</a></typedef>
	<class path="js.html.TouchList" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TouchList.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of `Touch` objects in the `TouchList`.</haxe_doc>
		</length>
		<item public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Touch"/>
			</f>
			<haxe_doc>Returns the `Touch` object at the specified index in the list.</haxe_doc>
		</item>
		<identifiedTouch public="1" set="method">
			<f a="identifier">
				<x path="Int"/>
				<c path="js.html.Touch"/>
			</f>
			<haxe_doc>Returns the first `Touch` item in the list whose identifier matches a specified value.</haxe_doc>
		</identifiedTouch>
		<haxe_doc><![CDATA[The `TouchList` interface represents a list of contact points with a touch surface; for example, if the user has three fingers on the touch surface (such as a screen or trackpad), the corresponding `TouchList` object would have one `Touch` object for each finger, for a total of three entries.

	Documentation [TouchList](https://developer.mozilla.org/en-US/docs/Web/API/TouchList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TouchList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TouchList>]]></haxe_doc>
		<meta><m n=":native"><e>"TouchList"</e></m></meta>
	</class>
	<class path="js.html.TrackElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TrackElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<NONE public="1" get="inline" set="null" expr="0" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NONE>
		<LOADING public="1" get="inline" set="null" expr="1" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</LOADING>
		<LOADED public="1" get="inline" set="null" expr="2" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</LOADED>
		<ERROR public="1" get="inline" set="null" expr="3" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</ERROR>
		<kind public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `kind` HTML attribute, indicating how the text track is meant to be used. Possible values are: subtitles, captions, descriptions, chapters, metadata.</haxe_doc>
		</kind>
		<src public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `src` HTML attribute, indicating the address of the text track data.</haxe_doc>
		</src>
		<srclang public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `srclang` HTML attribute, indicating the language of the text track data.</haxe_doc>
		</srclang>
		<label public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `label` HTML attribute, indicating a user-readable title for the track.</haxe_doc>
		</label>
		<default_ public="1">
			<x path="Bool"/>
			<meta><m n=":native"><e>"default"</e></m></meta>
		</default_>
		<readyState public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns  an <code>unsigned short</code><code> </code>that show the readiness state of the track:
		 <table style="margin: 0px 0px 1.286em;" class="standard-table">
		  
		   <tr>
		    <td class="header">Constant</td>
		    <td class="header">Value</td>
		    <td class="header">Description</td>
		   </tr>
		   <tr>
		    <td><code style="font-size: 14px;">NONE</code></td>
		    <td>0</td>
		    <td>Indicates that the text track's cues have not been obtained.</td>
		   </tr>
		   <tr>
		    <td><code style="font-size: 14px;">LOADING</code></td>
		    <td>1</td>
		    <td>Indicates that the text track is loading and there have been no fatal errors encountered so far. Further cues might still be added to the track by the parser.</td>
		   </tr>
		   <tr>
		    <td><code style="font-size: 14px;">LOADED</code></td>
		    <td>2</td>
		    <td>Indicates that the text track has been loaded with no fatal errors.</td>
		   </tr>
		   <tr>
		    <td><code style="font-size: 14px;">ERROR</code></td>
		    <td>3</td>
		    <td>Indicates that the text track was enabled, but when the user agent attempted to obtain it, this failed in some way. Some or all of the cues are likely missing and will not be obtained.</td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</readyState>
		<track public="1" set="null">
			<c path="js.html.TextTrack"/>
			<haxe_doc>Returns `TextTrack` is the track element's text track data.</haxe_doc>
		</track>
		<haxe_doc><![CDATA[The HTMLTrackElement` interface provides access to the properties of `track` elements, as well as methods to manipulate them.

	Documentation [HTMLTrackElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLTrackElement"</e></m></meta>
	</class>
	<class path="js.html.TrackEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TrackEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<track public="1" set="null"><x path="haxe.extern.EitherType">
	<c path="js.html.VideoTrack"/>
	<x path="haxe.extern.EitherType">
		<c path="js.html.AudioTrack"/>
		<c path="js.html.TextTrack"/>
	</x>
</x></track>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<t path="js.html.TrackEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"TrackEvent"</e></m></meta>
	</class>
	<typedef path="js.html.TrackEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TrackEventInit.hx"><a>
	<track>
		<t path="Null"><x path="haxe.extern.EitherType">
	<c path="js.html.VideoTrack"/>
	<x path="haxe.extern.EitherType">
		<c path="js.html.AudioTrack"/>
		<c path="js.html.TextTrack"/>
	</x>
</x></t>
		<meta><m n=":optional"/></meta>
	</track>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.TransitionEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TransitionEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<propertyName public="1" set="null">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the name CSS property associated with the transition.</haxe_doc>
		</propertyName>
		<elapsedTime public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Is a `float` giving the amount of time the transtion has been running, in seconds, when this event fired. This value is not affected by the `transition-delay` property.</haxe_doc>
		</elapsedTime>
		<pseudoElement public="1" set="null">
			<c path="String"/>
			<haxe_doc>Is a `DOMString`, starting with `'::'`, containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string: `''``.`</haxe_doc>
		</pseudoElement>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<t path="js.html.TransitionEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Transition``Event` interface represents events providing information related to transitions.

	Documentation [TransitionEvent](https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"TransitionEvent"</e></m></meta>
	</class>
	<typedef path="js.html.TransitionEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TransitionEventInit.hx"><a>
	<pseudoElement>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</pseudoElement>
	<propertyName>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</propertyName>
	<elapsedTime>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</elapsedTime>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.TreeWalker" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/TreeWalker.hx" extern="1">
		<root public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>Returns a `Node` representing the root node as specified when the `TreeWalker` was created.</haxe_doc>
		</root>
		<whatToShow public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns an <code>unsigned long</code> being a bitmask made of constants describing the types of <code>Node</code> that must to be presented. Non-matching nodes are skipped, but their children may be included, if relevant. The possible values are:
		 <table class="standard-table">
		  
		   <tr>
		    <td class="header">Constant</td>
		    <td class="header">Numerical value</td>
		    <td class="header">Description</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ALL</code></td>
		    <td><code>-1</code> (that is the max value of <code>unsigned long</code>)</td>
		    <td>Shows all nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ATTRIBUTE</code> {{deprecated_inline}}</td>
		    <td><code>2</code></td>
		    <td>Shows attribute <code>Attr</code> nodes. This is meaningful only when creating a <code>TreeWalker</code> with an <code>Attr</code> node as its root; in this case, it means that the attribute node will appear in the first position of the iteration or traversal. Since attributes are never children of other nodes, they do not appear when traversing over the document tree.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_CDATA_SECTION</code> {{deprecated_inline}}</td>
		    <td><code>8</code></td>
		    <td>Shows <code>CDATASection</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_COMMENT</code></td>
		    <td><code>128</code></td>
		    <td>Shows <code>Comment</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_DOCUMENT</code></td>
		    <td><code>256</code></td>
		    <td>Shows <code>Document</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_DOCUMENT_FRAGMENT</code></td>
		    <td><code>1024</code></td>
		    <td>Shows <code>DocumentFragment</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_DOCUMENT_TYPE</code></td>
		    <td><code>512</code></td>
		    <td>Shows <code>DocumentType</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ELEMENT</code></td>
		    <td><code>1</code></td>
		    <td>Shows <code>Element</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ENTITY</code> {{deprecated_inline}}</td>
		    <td><code>32</code></td>
		    <td>Shows <code>Entity</code> nodes. This is meaningful only when creating a <code>TreeWalker</code> with an <code>Entity</code> node as its root; in this case, it means that the <code>Entity</code> node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_ENTITY_REFERENCE</code> {{deprecated_inline}}</td>
		    <td><code>16</code></td>
		    <td>Shows <code>EntityReference</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_NOTATION</code> {{deprecated_inline}}</td>
		    <td><code>2048</code></td>
		    <td>Shows <code>Notation</code> nodes. This is meaningful only when creating a <code>TreeWalker</code> with a <code>Notation</code> node as its root; in this case, it means that the <code>Notation</code> node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_PROCESSING_INSTRUCTION</code></td>
		    <td><code>64</code></td>
		    <td>Shows <code>ProcessingInstruction</code> nodes.</td>
		   </tr>
		   <tr>
		    <td><code>NodeFilter.SHOW_TEXT</code></td>
		    <td><code>4</code></td>
		    <td>Shows <code>Text</code> nodes.</td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</whatToShow>
		<filter public="1" set="null">
			<c path="js.html.NodeFilter"/>
			<haxe_doc>Returns a `NodeFilter` used to select the relevant nodes.</haxe_doc>
		</filter>
		<currentNode public="1">
			<c path="js.html.Node"/>
			<haxe_doc>Is the `Node` on which the `TreeWalker` is currently pointing at.</haxe_doc>
		</currentNode>
		<parentNode public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</parentNode>
		<firstChild public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</firstChild>
		<lastChild public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</lastChild>
		<previousSibling public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</previousSibling>
		<nextSibling public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</nextSibling>
		<previousNode public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</previousNode>
		<nextNode public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</nextNode>
		<haxe_doc><![CDATA[The `TreeWalker` object represents the nodes of a document subtree and a position within them.

	Documentation [TreeWalker](https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker>]]></haxe_doc>
		<meta><m n=":native"><e>"TreeWalker"</e></m></meta>
	</class>
	<typedef path="js.html.UIEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/UIEventInit.hx"><a>
	<view>
		<t path="Null"><c path="js.html.Window"/></t>
		<meta><m n=":optional"/></meta>
	</view>
	<detail>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</detail>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.UListElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/UListElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<compact public="1">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating that spacing between list items should be reduced. This property reflects the `compact` attribute only, it doesn't consider the `line-height` CSS property used for that behavior in modern pages.</haxe_doc>
		</compact>
		<type public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` value reflecting the `type` and defining the kind of marker to be used to display. The values are browser dependent and have never been standardized.</haxe_doc>
		</type>
		<haxe_doc><![CDATA[The `HTMLUListElement` interface provides special properties (beyond those defined on the regular `HTMLElement` interface it also has available to it by inheritance) for manipulating unordered list elements.

	Documentation [HTMLUListElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLUListElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLUListElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLUListElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLUListElement"</e></m></meta>
	</class>
	<class path="js.html.URL" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/URL.hx" extern="1">
		<createObjectURL public="1" set="method" static="1">
			<f a="source:?options">
				<c path="js.html.MediaSource"/>
				<t path="js.html.ObjectURLOptions"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<createObjectURL public="1" set="method">
					<f a="blob:?options">
						<c path="js.html.Blob"/>
						<t path="js.html.ObjectURLOptions"/>
						<c path="String"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createObjectURL>
				<createObjectURL public="1" set="method">
					<f a="stream:?options">
						<c path="js.html.MediaStream"/>
						<t path="js.html.ObjectURLOptions"/>
						<c path="String"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</createObjectURL>
			</overloads>
		</createObjectURL>
		<revokeObjectURL public="1" set="method" static="1">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</revokeObjectURL>
		<href public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the whole URL.</haxe_doc>
		</href>
		<origin public="1" set="null">
			<c path="String"/>
			<haxe_doc>Returns a `DOMString` containing the origin of the URL, that is its scheme, its domain and its port.</haxe_doc>
		</origin>
		<protocol public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the protocol scheme of the URL, including the final `':'`.</haxe_doc>
		</protocol>
		<username public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the username specified before the domain name.</haxe_doc>
		</username>
		<password public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the password specified before the domain name.</haxe_doc>
		</password>
		<host public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the host, that is the hostname, a `':'`, and the port of the URL.</haxe_doc>
		</host>
		<hostname public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the domain of the URL.</haxe_doc>
		</hostname>
		<port public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing the port number of the URL.</haxe_doc>
		</port>
		<pathname public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing an initial `'/'` followed by the path of the URL.</haxe_doc>
		</pathname>
		<search public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a `'?'` followed by the parameters of the URL.</haxe_doc>
		</search>
		<searchParams public="1" set="null">
			<c path="js.html.URLSearchParams"/>
			<haxe_doc>Returns a `URLSearchParams` object allowing to access the GET query arguments contained in the URL.</haxe_doc>
		</searchParams>
		<hash public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` containing a `'#'` followed by the fragment identifier of the URL.</haxe_doc>
		</hash>
		<new public="1" set="method">
			<f a="url:?base">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="url:base">
		<c path="String"/>
		<c path="js.html.URL"/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[The `URL` interface represent an object providing static methods used for creating object URLs.

	Documentation [URL](https://developer.mozilla.org/en-US/docs/Web/API/URL) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/URL$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/URL>]]></haxe_doc>
		<meta><m n=":native"><e>"URL"</e></m></meta>
	</class>
	<class path="js.html.URLSearchParams" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/URLSearchParams.hx" extern="1">
		<append public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a specified key/value pair as a new search parameter.</haxe_doc>
		</append>
		<delete_ public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"delete"</e></m></meta>
		</delete_>
		<get public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the first value associated to the given search parameter.</haxe_doc>
		</get>
		<getAll public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns all the values association with a given search parameter.</haxe_doc>
		</getAll>
		<has public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a `Boolean` indicating if such a search parameter exists.</haxe_doc>
		</has>
		<set public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the value associated to a given search parameter to the given value. If there were several values, delete the others.</haxe_doc>
		</set>
		<entries public="1" set="method">
			<f a=""><c path="js.html.URLSearchParamsIterator"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</entries>
		<keys public="1" set="method">
			<f a=""><c path="js.html.URLSearchParamsIterator"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</keys>
		<values public="1" set="method">
			<f a=""><c path="js.html.URLSearchParamsIterator"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</values>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<d/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</forEach>
		<new public="1" set="method">
			<f a="init">
				<c path="js.html.URLSearchParams"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="?init" v="&quot;&quot;">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<meta><m n=":value"><e>{ init : "" }</e></m></meta>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[The `URLSearchParams` interface defines utility methods to work with the query string of a URL.

	Documentation [URLSearchParams](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams>]]></haxe_doc>
		<meta><m n=":native"><e>"URLSearchParams"</e></m></meta>
	</class>
	<class path="js.html.URLSearchParamsIterator" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/URLSearchParamsIterator.hx" extern="1">
		<next public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</next>
		<meta><m n=":native"><e>"URLSearchParamsIterator"</e></m></meta>
	</class>
	<class path="js.html.Uint16Array" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Uint16Array.hx" extern="1">
		<extends path="js.html.ArrayBufferView"/>
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="2" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" set="null"><x path="Int"/></length>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><set public="1" set="method"><f a="array:?offset">
	<c path="js.html.Uint16Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set></overloads>
		</set>
		<subarray public="1" set="method"><f a="start:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.Uint16Array"/>
</f></subarray>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.html.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array">
						<c path="js.html.Uint16Array"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array">
						<c path="Array"><x path="Int"/></c>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<meta><m n=":native"><e>"Uint16Array"</e></m></meta>
	</class>
	<class path="js.html.Uint32Array" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Uint32Array.hx" extern="1">
		<extends path="js.html.ArrayBufferView"/>
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" set="null"><x path="Int"/></length>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><set public="1" set="method"><f a="array:?offset">
	<c path="js.html.Uint32Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set></overloads>
		</set>
		<subarray public="1" set="method"><f a="start:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.Uint32Array"/>
</f></subarray>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.html.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array">
						<c path="js.html.Uint32Array"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array">
						<c path="Array"><x path="Int"/></c>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<meta><m n=":native"><e>"Uint32Array"</e></m></meta>
	</class>
	<class path="js.html.Uint8ClampedArray" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Uint8ClampedArray.hx" extern="1">
		<extends path="js.html.ArrayBufferView"/>
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</BYTES_PER_ELEMENT>
		<length public="1" set="null"><x path="Int"/></length>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><set public="1" set="method"><f a="array:?offset">
	<c path="js.html.Uint8ClampedArray"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set></overloads>
		</set>
		<subarray public="1" set="method"><f a="start:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.Uint8ClampedArray"/>
</f></subarray>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.html.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array">
						<c path="js.html.Uint8ClampedArray"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array">
						<c path="Array"><x path="Int"/></c>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<meta><m n=":native"><e>"Uint8ClampedArray"</e></m></meta>
	</class>
	<class path="js.html.UncaughtRejectionObserver" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/UncaughtRejectionObserver.hx" extern="1">
		<onLeftUncaught public="1" set="method"><f a="p">
	<c path="js.Promise"><d/></c>
	<x path="Void"/>
</f></onLeftUncaught>
		<onConsumed public="1" set="method"><f a="p">
	<c path="js.Promise"><d/></c>
	<x path="Void"/>
</f></onConsumed>
		<meta><m n=":native"><e>"UncaughtRejectionObserver"</e></m></meta>
	</class>
	<class path="js.html.UnknownElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/UnknownElement.hx" extern="1">
		<extends path="js.html.Element"/>
		<haxe_doc><![CDATA[The `HTMLUnknownElement` interface represents an invalid HTML element and derives from the `HTMLElement` interface, but without implementing any additional properties or methods.

	Documentation [HTMLUnknownElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLUnknownElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLUnknownElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLUnknownElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLUnknownElement"</e></m></meta>
	</class>
	<class path="js.html.VTTCue" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/VTTCue.hx" extern="1">
		<extends path="js.html.TextTrackCue"/>
		<region public="1"><c path="js.html.VTTRegion"/></region>
		<vertical public="1"><x path="js.html.DirectionSetting"/></vertical>
		<snapToLines public="1"><x path="Bool"/></snapToLines>
		<line public="1"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<d/>
</x></line>
		<lineAlign public="1"><x path="js.html.AlignSetting"/></lineAlign>
		<position public="1"><x path="Int"/></position>
		<positionAlign public="1"><x path="js.html.AlignSetting"/></positionAlign>
		<size public="1"><x path="Int"/></size>
		<align public="1"><x path="js.html.AlignSetting"/></align>
		<text public="1"><c path="String"/></text>
		<getCueAsHTML public="1" set="method"><f a=""><c path="js.html.DocumentFragment"/></f></getCueAsHTML>
		<new public="1" set="method">
			<f a="startTime:endTime:text">
				<x path="Float"/>
				<x path="Float"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"VTTCue"</e></m></meta>
	</class>
	<class path="js.html.VTTRegion" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/VTTRegion.hx" extern="1">
		<width public="1"><x path="Float"/></width>
		<lines public="1"><x path="Int"/></lines>
		<regionAnchorX public="1"><x path="Float"/></regionAnchorX>
		<regionAnchorY public="1"><x path="Float"/></regionAnchorY>
		<viewportAnchorX public="1"><x path="Float"/></viewportAnchorX>
		<viewportAnchorY public="1"><x path="Float"/></viewportAnchorY>
		<scroll public="1"><c path="String"/></scroll>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"VTTRegion"</e></m></meta>
	</class>
	<class path="js.html.ValidityState" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/ValidityState.hx" extern="1">
		<valueMissing public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the element has a `required` attribute, but no value.</haxe_doc>
		</valueMissing>
		<typeMismatch public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value is not in the required syntax (when `type` is `email` or `url`).</haxe_doc>
		</typeMismatch>
		<patternMismatch public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value does not match the specified `pattern`.</haxe_doc>
		</patternMismatch>
		<tooLong public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value exceeds the specified `maxlength` for `HTMLInputElement` or `HTMLTextAreaElement` objects. Note: This will never be `true` in Gecko, because elements' values are prevented from being longer than `maxlength`.</haxe_doc>
		</tooLong>
		<rangeUnderflow public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value is less than the minimum specified by the `min` attribute.</haxe_doc>
		</rangeUnderflow>
		<rangeOverflow public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value is greater than the maximum specified by the `max` attribute.</haxe_doc>
		</rangeOverflow>
		<stepMismatch public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the value does not fit the rules determined by the `step` attribute (that is, it's not evenly divisible by the step value).</haxe_doc>
		</stepMismatch>
		<badInput public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the user has provided input that the browser is unable to convert.</haxe_doc>
		</badInput>
		<customError public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the element's custom validity message has been set to a non-empty string by calling the element's `setCustomValidity()` method.</haxe_doc>
		</customError>
		<valid public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Is a `Boolean` indicating the element meets all constraint validations, and is therefore considered to be valid.</haxe_doc>
		</valid>
		<haxe_doc><![CDATA[The `ValidityState` interface represents the validity states that an element can be in, with respect to constraint validation. Together, they help explain why an element's value fails to validate, if it's not valid.

	Documentation [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ValidityState>]]></haxe_doc>
		<meta><m n=":native"><e>"ValidityState"</e></m></meta>
	</class>
	<class path="js.html.VideoElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/VideoElement.hx" extern="1">
		<extends path="js.html.MediaElement"/>
		<width public="1">
			<x path="Int"/>
			<haxe_doc>Is a `DOMString` that reflects the `width` HTML attribute, which specifies the width of the display area, in CSS pixels.</haxe_doc>
		</width>
		<height public="1">
			<x path="Int"/>
			<haxe_doc>Is a `DOMString` that reflects the `height` HTML attribute, which specifies the height of the display area, in CSS pixels.</haxe_doc>
		</height>
		<videoWidth public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `unsigned long` containing the intrinsic width of the resource in CSS pixels, taking into account the dimensions, aspect ratio, clean aperture, resolution, and so forth, as defined for the format used by the resource. If the element's ready state is `HAVE_NOTHING`, the value is `0`.</haxe_doc>
		</videoWidth>
		<videoHeight public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an `unsigned long` containing the intrinsic height of the resource in CSS pixels, taking into account the dimensions, aspect ratio, clean aperture, resolution, and so forth, as defined for the format used by the resource. If the element's ready state is `HAVE_NOTHING`, the value is `0`.</haxe_doc>
		</videoHeight>
		<poster public="1">
			<c path="String"/>
			<haxe_doc>Is a `DOMString` that reflects the `poster` HTML attribute, which specifies an image to show while no video data is available.</haxe_doc>
		</poster>
		<getVideoPlaybackQuality public="1" set="method">
			<f a=""><c path="js.html.VideoPlaybackQuality"/></f>
			<haxe_doc>Returns a `VideoPlaybackQuality` objects that contains the current playback metrics.</haxe_doc>
		</getVideoPlaybackQuality>
		<haxe_doc><![CDATA[The `HTMLVideoElement` interface provides special properties and methods for manipulating video objects. It also inherits properties and methods of `HTMLMediaElement` and `HTMLElement`.

	Documentation [HTMLVideoElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement>]]></haxe_doc>
		<meta><m n=":native"><e>"HTMLVideoElement"</e></m></meta>
	</class>
	<class path="js.html.VideoPlaybackQuality" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/VideoPlaybackQuality.hx" extern="1">
		<creationTime public="1" set="null">
			<x path="Float"/>
			<haxe_doc>A `DOMHighResTimeStamp` containing the time in miliseconds since the start of the navigation and the creation of the object.</haxe_doc>
		</creationTime>
		<totalVideoFrames public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An `unsigned long` giving the number of video frames created and dropped since the creation of the associated `HTMLVideoElement`.</haxe_doc>
		</totalVideoFrames>
		<droppedVideoFrames public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An `unsigned long` giving the number of video frames dropped since the creation of the associated `HTMLVideoElement`.</haxe_doc>
		</droppedVideoFrames>
		<corruptedVideoFrames public="1" set="null">
			<x path="Int"/>
			<haxe_doc>An `unsigned long` giving the number of video frames corrupted since the creation of the associated `HTMLVideoElement`. A corrupted frame may be created or dropped.</haxe_doc>
		</corruptedVideoFrames>
		<haxe_doc><![CDATA[The `VideoPlaybackQuality` interface represents the set of metrics describing the playback quality of a video.

	Documentation [VideoPlaybackQuality](https://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality>]]></haxe_doc>
		<meta><m n=":native"><e>"VideoPlaybackQuality"</e></m></meta>
	</class>
	<class path="js.html.VideoStreamTrack" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/VideoStreamTrack.hx" extern="1">
		<extends path="js.html.MediaStreamTrack"/>
		<meta><m n=":native"><e>"VideoStreamTrack"</e></m></meta>
	</class>
	<class path="js.html.VideoTrack" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/VideoTrack.hx" extern="1">
		<id public="1" set="null"><c path="String"/></id>
		<kind public="1" set="null"><c path="String"/></kind>
		<label public="1" set="null"><c path="String"/></label>
		<language public="1" set="null"><c path="String"/></language>
		<selected public="1"><x path="Bool"/></selected>
		<meta><m n=":native"><e>"VideoTrack"</e></m></meta>
	</class>
	<class path="js.html.VideoTrackList" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/VideoTrackList.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<length public="1" set="null"><x path="Int"/></length>
		<selectedIndex public="1" set="null"><x path="Int"/></selectedIndex>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onaddtrack public="1"><x path="haxe.Function"/></onaddtrack>
		<onremovetrack public="1"><x path="haxe.Function"/></onremovetrack>
		<getTrackById public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="js.html.VideoTrack"/>
</f></getTrackById>
		<meta><m n=":native"><e>"VideoTrackList"</e></m></meta>
	</class>
	<abstract path="js.html.VisibilityState" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/VisibilityState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._VisibilityState.VisibilityState_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/VisibilityState.hx" private="1" module="js.html.VisibilityState" extern="1">
	<HIDDEN public="1" get="inline" set="null" expr="cast &quot;hidden&quot;" line="29" static="1">
		<x path="js.html.VisibilityState"/>
		<meta>
			<m n=":value"><e>cast "hidden"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HIDDEN>
	<VISIBLE public="1" get="inline" set="null" expr="cast &quot;visible&quot;" line="30" static="1">
		<x path="js.html.VisibilityState"/>
		<meta>
			<m n=":value"><e>cast "visible"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VISIBLE>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._VisibilityState.VisibilityState_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/VisibilityState.hx" private="1" module="js.html.VisibilityState" extern="1">
		<HIDDEN public="1" get="inline" set="null" expr="cast &quot;hidden&quot;" line="29" static="1">
			<x path="js.html.VisibilityState"/>
			<meta>
				<m n=":value"><e>cast "hidden"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HIDDEN>
		<VISIBLE public="1" get="inline" set="null" expr="cast &quot;visible&quot;" line="30" static="1">
			<x path="js.html.VisibilityState"/>
			<meta>
				<m n=":value"><e>cast "visible"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VISIBLE>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.WebSocket" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/WebSocket.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<CONNECTING public="1" get="inline" set="null" expr="0" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</CONNECTING>
		<OPEN public="1" get="inline" set="null" expr="1" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</OPEN>
		<CLOSING public="1" get="inline" set="null" expr="2" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</CLOSING>
		<CLOSED public="1" get="inline" set="null" expr="3" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</CLOSED>
		<url public="1" set="null"><c path="String"/></url>
		<readyState public="1" set="null"><x path="Int"/></readyState>
		<bufferedAmount public="1" set="null"><x path="Int"/></bufferedAmount>
		<onopen public="1"><x path="haxe.Function"/></onopen>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<onclose public="1"><x path="haxe.Function"/></onclose>
		<extensions public="1" set="null"><c path="String"/></extensions>
		<protocol public="1" set="null"><c path="String"/></protocol>
		<onmessage public="1"><x path="haxe.Function"/></onmessage>
		<binaryType public="1"><x path="js.html.BinaryType"/></binaryType>
		<close public="1" set="method">
			<f a="?code:?reason">
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</close>
		<send public="1" set="method">
			<f a="data">
				<c path="js.html.ArrayBufferView"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<send public="1" set="method">
					<f a="data">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="data">
						<c path="js.html.Blob"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="data">
						<c path="js.html.ArrayBuffer"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</send>
			</overloads>
		</send>
		<new public="1" set="method">
			<f a="url:protocols">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="url">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="url:protocols">
						<c path="String"/>
						<c path="String"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc><![CDATA[The `WebSocket` object provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection.

	Documentation [WebSocket](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebSocket>]]></haxe_doc>
		<meta><m n=":native"><e>"WebSocket"</e></m></meta>
	</class>
	<class path="js.html.WheelEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/WheelEvent.hx" extern="1">
		<extends path="js.html.MouseEvent"/>
		<DOM_DELTA_PIXEL public="1" get="inline" set="null" expr="0" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</DOM_DELTA_PIXEL>
		<DOM_DELTA_LINE public="1" get="inline" set="null" expr="1" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</DOM_DELTA_LINE>
		<DOM_DELTA_PAGE public="1" get="inline" set="null" expr="2" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</DOM_DELTA_PAGE>
		<deltaX public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a `double` representing the horizontal scroll amount.</haxe_doc>
		</deltaX>
		<deltaY public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a `double` representing the vertical scroll amount.</haxe_doc>
		</deltaY>
		<deltaZ public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a `double` representing the scroll amount for the z-axis.</haxe_doc>
		</deltaZ>
		<deltaMode public="1" set="null">
			<x path="Int"/>
			<haxe_doc><![CDATA[Returns an <code>unsigned long</code> representing the unit of the delta values scroll amount. Permitted values are:
		 <table class="standard-table">
		  
		   <tr>
		    <td class="header">Constant</td>
		    <td class="header">Value</td>
		    <td class="header">Description</td>
		   </tr>
		   <tr>
		    <td><code>DOM_DELTA_PIXEL</code></td>
		    <td><code>0x00</code></td>
		    <td>The delta values are specified in pixels.</td>
		   </tr>
		   <tr>
		    <td><code>DOM_DELTA_LINE</code></td>
		    <td><code>0x01</code></td>
		    <td>The delta values are specified in lines.</td>
		   </tr>
		   <tr>
		    <td><code>DOM_DELTA_PAGE</code></td>
		    <td><code>0x02</code></td>
		    <td>The delta values are specified in pages.</td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</deltaMode>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<t path="js.html.WheelEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `WheelEvent` interface represents events that occur due to the user moving a mouse wheel or similar input device.

	Documentation [WheelEvent](https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"WheelEvent"</e></m></meta>
	</class>
	<typedef path="js.html.WheelEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/WheelEventInit.hx"><a>
	<view>
		<t path="Null"><c path="js.html.Window"/></t>
		<meta><m n=":optional"/></meta>
	</view>
	<shiftKey>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</shiftKey>
	<screenY>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</screenY>
	<screenX>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</screenX>
	<relatedTarget>
		<t path="Null"><c path="js.html.EventTarget"/></t>
		<meta><m n=":optional"/></meta>
	</relatedTarget>
	<movementY>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</movementY>
	<movementX>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</movementX>
	<modifierSymbolLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierSymbolLock>
	<modifierSymbol>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierSymbol>
	<modifierScrollLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierScrollLock>
	<modifierOS>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierOS>
	<modifierNumLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierNumLock>
	<modifierFnLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierFnLock>
	<modifierFn>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierFn>
	<modifierCapsLock>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierCapsLock>
	<modifierAltGraph>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</modifierAltGraph>
	<metaKey>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</metaKey>
	<detail>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</detail>
	<deltaZ>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</deltaZ>
	<deltaY>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</deltaY>
	<deltaX>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</deltaX>
	<deltaMode>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</deltaMode>
	<ctrlKey>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</ctrlKey>
	<clientY>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</clientY>
	<clientX>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</clientX>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<buttons>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</buttons>
	<button>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</button>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
	<altKey>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</altKey>
</a></typedef>
	<class path="js.html.Window" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Window.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<window public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a reference to the current window.</haxe_doc>
		</window>
		<self public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns an object reference to the window object itself.</haxe_doc>
		</self>
		<document public="1" set="null">
			<c path="js.html.HTMLDocument"/>
			<haxe_doc>Returns a reference to the document that the window contains.</haxe_doc>
		</document>
		<name public="1">
			<c path="String"/>
			<haxe_doc>Gets/sets the name of the window.</haxe_doc>
		</name>
		<location public="1" set="null">
			<c path="js.html.Location"/>
			<haxe_doc>Gets/sets the location, or current URL, of the window object.</haxe_doc>
		</location>
		<history public="1" set="null">
			<c path="js.html.History"/>
			<haxe_doc>Returns a reference to the history object.</haxe_doc>
		</history>
		<locationbar public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the locationbar object, whose visibility can be toggled in the window.</haxe_doc>
		</locationbar>
		<menubar public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the menubar object, whose visibility can be toggled in the window.</haxe_doc>
		</menubar>
		<personalbar public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the personalbar object, whose visibility can be toggled in the window.</haxe_doc>
		</personalbar>
		<scrollbars public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the scrollbars object, whose visibility can be toggled in the window.</haxe_doc>
		</scrollbars>
		<statusbar public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the statusbar object, whose visibility can be toggled in the window.</haxe_doc>
		</statusbar>
		<toolbar public="1" set="null">
			<c path="js.html.BarProp"/>
			<haxe_doc>Returns the toolbar object, whose visibility can be toggled in the window.</haxe_doc>
		</toolbar>
		<status public="1">
			<c path="String"/>
			<haxe_doc>Gets/sets the text in the statusbar at the bottom of the browser.</haxe_doc>
		</status>
		<closed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>This property indicates whether the current window is closed or not.</haxe_doc>
		</closed>
		<frames public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns an array of the subframes in the current window.</haxe_doc>
		</frames>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of frames in the window. See also `window.frames`.</haxe_doc>
		</length>
		<top public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a reference to the topmost window in the window hierarchy. This property is read only.</haxe_doc>
		</top>
		<opener public="1">
			<d/>
			<haxe_doc>Returns a reference to the window that opened this current window.</haxe_doc>
		</opener>
		<parent public="1" set="null">
			<c path="js.html.Window"/>
			<haxe_doc>Returns a reference to the parent of the current window or subframe.</haxe_doc>
		</parent>
		<frameElement public="1" set="null">
			<c path="js.html.Element"/>
			<haxe_doc>Returns the element in which the window is embedded, or null if the window is not embedded.</haxe_doc>
		</frameElement>
		<navigator public="1" set="null">
			<c path="js.html.Navigator"/>
			<haxe_doc>Returns a reference to the navigator object.</haxe_doc>
		</navigator>
		<orientation public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the orientation in degrees (in 90 degree increments) of the viewport relative to the device's natural orientation.</haxe_doc>
		</orientation>
		<onorientationchange public="1"><x path="haxe.Function"/></onorientationchange>
		<screen public="1" set="null">
			<c path="js.html.Screen"/>
			<haxe_doc>Returns a reference to the screen object associated with the window.</haxe_doc>
		</screen>
		<innerWidth public="1">
			<d/>
			<haxe_doc>Gets the width of the content area of the browser window including, if rendered, the vertical scrollbar.</haxe_doc>
		</innerWidth>
		<innerHeight public="1">
			<d/>
			<haxe_doc>Gets the height of the content area of the browser window including, if rendered, the horizontal scrollbar.</haxe_doc>
		</innerHeight>
		<scrollX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of pixels that the document has already been scrolled horizontally.</haxe_doc>
		</scrollX>
		<pageXOffset public="1" set="null"><x path="Int"/></pageXOffset>
		<scrollY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of pixels that the document has already been scrolled vertically.</haxe_doc>
		</scrollY>
		<pageYOffset public="1" set="null"><x path="Int"/></pageYOffset>
		<screenX public="1">
			<d/>
			<haxe_doc>Returns the horizontal distance of the left border of the user's browser from the left side of the screen.</haxe_doc>
		</screenX>
		<screenY public="1">
			<d/>
			<haxe_doc>Returns the vertical distance of the top border of the user's browser from the top side of the screen.</haxe_doc>
		</screenY>
		<outerWidth public="1">
			<d/>
			<haxe_doc>Gets the width of the outside of the browser window.</haxe_doc>
		</outerWidth>
		<outerHeight public="1">
			<d/>
			<haxe_doc>Gets the height of the outside of the browser window.</haxe_doc>
		</outerHeight>
		<performance public="1" set="null">
			<c path="js.html.Performance"/>
			<haxe_doc>Provides a hosting area for performance related attributes.</haxe_doc>
		</performance>
		<devicePixelRatio public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns the ratio between physical pixels and device independent pixels in the current display.</haxe_doc>
		</devicePixelRatio>
		<scrollMaxX public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The maximum offset that the window can be scrolled to horizontally, that is the document width minus the viewport width.</haxe_doc>
		</scrollMaxX>
		<scrollMaxY public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The maximum offset that the window can be scrolled to vertically (i.e., the document height minus the viewport height).</haxe_doc>
		</scrollMaxY>
		<fullScreen public="1">
			<x path="Bool"/>
			<haxe_doc>This property indicates whether the window is displayed in full screen or not.</haxe_doc>
		</fullScreen>
		<onwheel public="1"><x path="haxe.Function"/></onwheel>
		<ondevicemotion public="1"><x path="haxe.Function"/></ondevicemotion>
		<ondeviceorientation public="1"><x path="haxe.Function"/></ondeviceorientation>
		<onabsolutedeviceorientation public="1"><x path="haxe.Function"/></onabsolutedeviceorientation>
		<ondeviceproximity public="1"><x path="haxe.Function"/></ondeviceproximity>
		<onuserproximity public="1"><x path="haxe.Function"/></onuserproximity>
		<ondevicelight public="1"><x path="haxe.Function"/></ondevicelight>
		<content public="1" set="null">
			<d/>
			<haxe_doc>Returns a reference to the content element in the current window. The obsolete variant with underscore is no longer available from Web content.</haxe_doc>
		</content>
		<console public="1" set="null">
			<c path="js.html.Console"/>
			<haxe_doc>Returns a reference to the console object which provides access to the browser's debugging console.</haxe_doc>
		</console>
		<crypto public="1" set="null">
			<c path="js.html.Crypto"/>
			<haxe_doc>Returns the browser crypto object.</haxe_doc>
		</crypto>
		<onabort public="1"><x path="haxe.Function"/></onabort>
		<onblur public="1"><x path="haxe.Function"/></onblur>
		<onfocus public="1"><x path="haxe.Function"/></onfocus>
		<oncanplay public="1"><x path="haxe.Function"/></oncanplay>
		<oncanplaythrough public="1"><x path="haxe.Function"/></oncanplaythrough>
		<onchange public="1"><x path="haxe.Function"/></onchange>
		<onclick public="1"><x path="haxe.Function"/></onclick>
		<oncontextmenu public="1"><x path="haxe.Function"/></oncontextmenu>
		<ondblclick public="1"><x path="haxe.Function"/></ondblclick>
		<ondrag public="1"><x path="haxe.Function"/></ondrag>
		<ondragend public="1"><x path="haxe.Function"/></ondragend>
		<ondragenter public="1"><x path="haxe.Function"/></ondragenter>
		<ondragleave public="1"><x path="haxe.Function"/></ondragleave>
		<ondragover public="1"><x path="haxe.Function"/></ondragover>
		<ondragstart public="1"><x path="haxe.Function"/></ondragstart>
		<ondrop public="1"><x path="haxe.Function"/></ondrop>
		<ondurationchange public="1"><x path="haxe.Function"/></ondurationchange>
		<onemptied public="1"><x path="haxe.Function"/></onemptied>
		<onended public="1"><x path="haxe.Function"/></onended>
		<oninput public="1"><x path="haxe.Function"/></oninput>
		<oninvalid public="1"><x path="haxe.Function"/></oninvalid>
		<onkeydown public="1"><x path="haxe.Function"/></onkeydown>
		<onkeypress public="1"><x path="haxe.Function"/></onkeypress>
		<onkeyup public="1"><x path="haxe.Function"/></onkeyup>
		<onload public="1"><x path="haxe.Function"/></onload>
		<onloadeddata public="1"><x path="haxe.Function"/></onloadeddata>
		<onloadedmetadata public="1"><x path="haxe.Function"/></onloadedmetadata>
		<onloadstart public="1"><x path="haxe.Function"/></onloadstart>
		<onmousedown public="1"><x path="haxe.Function"/></onmousedown>
		<onmouseenter public="1"><x path="haxe.Function"/></onmouseenter>
		<onmouseleave public="1"><x path="haxe.Function"/></onmouseleave>
		<onmousemove public="1"><x path="haxe.Function"/></onmousemove>
		<onmouseout public="1"><x path="haxe.Function"/></onmouseout>
		<onmouseover public="1"><x path="haxe.Function"/></onmouseover>
		<onmouseup public="1"><x path="haxe.Function"/></onmouseup>
		<onpause public="1"><x path="haxe.Function"/></onpause>
		<onplay public="1"><x path="haxe.Function"/></onplay>
		<onplaying public="1"><x path="haxe.Function"/></onplaying>
		<onprogress public="1"><x path="haxe.Function"/></onprogress>
		<onratechange public="1"><x path="haxe.Function"/></onratechange>
		<onreset public="1"><x path="haxe.Function"/></onreset>
		<onresize public="1"><x path="haxe.Function"/></onresize>
		<onscroll public="1"><x path="haxe.Function"/></onscroll>
		<onseeked public="1"><x path="haxe.Function"/></onseeked>
		<onseeking public="1"><x path="haxe.Function"/></onseeking>
		<onselect public="1"><x path="haxe.Function"/></onselect>
		<onshow public="1"><x path="haxe.Function"/></onshow>
		<onstalled public="1"><x path="haxe.Function"/></onstalled>
		<onsubmit public="1"><x path="haxe.Function"/></onsubmit>
		<onsuspend public="1"><x path="haxe.Function"/></onsuspend>
		<ontimeupdate public="1"><x path="haxe.Function"/></ontimeupdate>
		<onvolumechange public="1"><x path="haxe.Function"/></onvolumechange>
		<onwaiting public="1"><x path="haxe.Function"/></onwaiting>
		<onpointercancel public="1"><x path="haxe.Function"/></onpointercancel>
		<onpointerdown public="1"><x path="haxe.Function"/></onpointerdown>
		<onpointerup public="1"><x path="haxe.Function"/></onpointerup>
		<onpointermove public="1"><x path="haxe.Function"/></onpointermove>
		<onpointerout public="1"><x path="haxe.Function"/></onpointerout>
		<onpointerover public="1"><x path="haxe.Function"/></onpointerover>
		<onpointerenter public="1"><x path="haxe.Function"/></onpointerenter>
		<onpointerleave public="1"><x path="haxe.Function"/></onpointerleave>
		<ongotpointercapture public="1"><x path="haxe.Function"/></ongotpointercapture>
		<onlostpointercapture public="1"><x path="haxe.Function"/></onlostpointercapture>
		<onfullscreenchange public="1"><x path="haxe.Function"/></onfullscreenchange>
		<onfullscreenerror public="1"><x path="haxe.Function"/></onfullscreenerror>
		<onpointerlockchange public="1"><x path="haxe.Function"/></onpointerlockchange>
		<onpointerlockerror public="1"><x path="haxe.Function"/></onpointerlockerror>
		<indexedDB public="1" set="null"><c path="js.html.idb.Factory"/></indexedDB>
		<onerror public="1"><f a="::::">
	<x path="haxe.extern.EitherType">
		<c path="js.html.Event"/>
		<c path="String"/>
	</x>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
	<x path="Bool"/>
</f></onerror>
		<speechSynthesis public="1" set="null">
			<c path="js.html.SpeechSynthesis"/>
			<haxe_doc>Returns a `SpeechSynthesis` object, which is the entry point into using Web Speech API speech synthesis functionality.</haxe_doc>
		</speechSynthesis>
		<ontouchstart public="1"><x path="haxe.Function"/></ontouchstart>
		<ontouchend public="1"><x path="haxe.Function"/></ontouchend>
		<ontouchmove public="1"><x path="haxe.Function"/></ontouchmove>
		<ontouchcancel public="1"><x path="haxe.Function"/></ontouchcancel>
		<onafterprint public="1"><x path="haxe.Function"/></onafterprint>
		<onbeforeprint public="1"><x path="haxe.Function"/></onbeforeprint>
		<onbeforeunload public="1"><f a="">
	<c path="js.html.Event"/>
	<c path="String"/>
</f></onbeforeunload>
		<onhashchange public="1"><x path="haxe.Function"/></onhashchange>
		<onlanguagechange public="1"><x path="haxe.Function"/></onlanguagechange>
		<onmessage public="1"><x path="haxe.Function"/></onmessage>
		<onoffline public="1"><x path="haxe.Function"/></onoffline>
		<ononline public="1"><x path="haxe.Function"/></ononline>
		<onpagehide public="1"><x path="haxe.Function"/></onpagehide>
		<onpageshow public="1"><x path="haxe.Function"/></onpageshow>
		<onpopstate public="1"><x path="haxe.Function"/></onpopstate>
		<onstorage public="1"><x path="haxe.Function"/></onstorage>
		<onunload public="1"><x path="haxe.Function"/></onunload>
		<localStorage public="1" set="null">
			<c path="js.html.Storage"/>
			<haxe_doc>Returns a reference to the local storage object used to store data that may only be accessed by the origin that created it.</haxe_doc>
		</localStorage>
		<sessionStorage public="1" set="null">
			<c path="js.html.Storage"/>
			<haxe_doc>Returns a storage object for storing data within a single page session.</haxe_doc>
		</sessionStorage>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</close>
		<stop public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</stop>
		<focus public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</focus>
		<blur public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</blur>
		<open public="1" set="method">
			<f a="?url:?target:?features" v="&quot;&quot;:&quot;&quot;:&quot;&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.Window"/>
			</f>
			<meta><m n=":value"><e>{ features : "", target : "", url : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</open>
		<alert public="1" set="method">
			<f a="message">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><alert public="1" set="method">
	<f a=""><x path="Void"/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</alert></overloads>
		</alert>
		<confirm public="1" set="method">
			<f a="?message" v="&quot;&quot;">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ message : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</confirm>
		<prompt public="1" set="method">
			<f a="?message:?default_" v="&quot;&quot;:&quot;&quot;">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ default_ : "", message : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</prompt>
		<print public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</print>
		<postMessage public="1" set="method">
			<f a="message:targetOrigin:?transfer">
				<d/>
				<c path="String"/>
				<c path="Array"><d/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</postMessage>
		<captureEvents public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Registers the window to capture all events of the specified type.</haxe_doc>
		</captureEvents>
		<releaseEvents public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Releases the window from trapping events of a specific type.</haxe_doc>
		</releaseEvents>
		<getSelection public="1" set="method">
			<f a=""><c path="js.html.Selection"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getSelection>
		<getComputedStyle public="1" set="method">
			<f a="elt:?pseudoElt" v=":&quot;&quot;">
				<c path="js.html.Element"/>
				<c path="String"/>
				<c path="js.html.CSSStyleDeclaration"/>
			</f>
			<meta><m n=":value"><e>{ pseudoElt : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getComputedStyle>
		<matchMedia public="1" set="method">
			<f a="query">
				<c path="String"/>
				<c path="js.html.MediaQueryList"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</matchMedia>
		<moveTo public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</moveTo>
		<moveBy public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</moveBy>
		<resizeTo public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</resizeTo>
		<resizeBy public="1" set="method">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</resizeBy>
		<scroll public="1" set="method">
			<f a="?options">
				<t path="js.html.ScrollToOptions"/>
				<x path="Void"/>
			</f>
			<overloads><scroll public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scroll></overloads>
		</scroll>
		<scrollTo public="1" set="method">
			<f a="?options">
				<t path="js.html.ScrollToOptions"/>
				<x path="Void"/>
			</f>
			<overloads><scrollTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scrollTo></overloads>
		</scrollTo>
		<scrollBy public="1" set="method">
			<f a="?options">
				<t path="js.html.ScrollToOptions"/>
				<x path="Void"/>
			</f>
			<overloads><scrollBy public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scrollBy></overloads>
		</scrollBy>
		<requestAnimationFrame public="1" set="method">
			<f a="callback">
				<f a="">
					<x path="Float"/>
					<x path="Void"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</requestAnimationFrame>
		<cancelAnimationFrame public="1" set="method">
			<f a="handle">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</cancelAnimationFrame>
		<getDefaultComputedStyle public="1" set="method">
			<f a="elt:?pseudoElt" v=":&quot;&quot;">
				<c path="js.html.Element"/>
				<c path="String"/>
				<c path="js.html.CSSStyleDeclaration"/>
			</f>
			<meta><m n=":value"><e>{ pseudoElt : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getDefaultComputedStyle>
		<scrollByLines public="1" set="method">
			<f a="numLines:?options">
				<x path="Int"/>
				<t path="js.html.ScrollOptions"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls the document by the given number of lines.</haxe_doc>
		</scrollByLines>
		<scrollByPages public="1" set="method">
			<f a="numPages:?options">
				<x path="Int"/>
				<t path="js.html.ScrollOptions"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Scrolls the current document by the specified number of pages.</haxe_doc>
		</scrollByPages>
		<sizeToContent public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</sizeToContent>
		<updateCommands public="1" set="method">
			<f a="action:?sel:?reason" v="::0">
				<c path="String"/>
				<c path="js.html.Selection"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ reason : 0 }</e></m></meta>
			<haxe_doc>Updates the state of commands of the current chrome window (UI).</haxe_doc>
		</updateCommands>
		<find public="1" set="method">
			<f a="?str:?caseSensitive:?backwards:?wrapAround:?wholeWord:?searchInFrames:?showDialog" v="&quot;&quot;:false:false:false:false:false:false">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":value"><e>{ showDialog : false, searchInFrames : false, wholeWord : false, wrapAround : false, backwards : false, caseSensitive : false, str : "" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</find>
		<dump public="1" set="method">
			<f a="str">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Writes a message to the console.</haxe_doc>
		</dump>
		<setResizable public="1" set="method">
			<f a="resizable">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Toggles a user's ability to resize a window.</haxe_doc>
		</setResizable>
		<fetch public="1" set="method">
			<f a="input:?init">
				<x path="haxe.extern.EitherType">
					<c path="js.html.Request"/>
					<c path="String"/>
				</x>
				<t path="js.html.RequestInit"/>
				<c path="js.Promise"><c path="js.html.Response"/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</fetch>
		<createImageBitmap public="1" set="method">
			<f a="aImage:aSx:aSy:aSw:aSh">
				<x path="haxe.extern.EitherType">
					<c path="js.html.ImageElement"/>
					<x path="haxe.extern.EitherType">
						<c path="js.html.VideoElement"/>
						<x path="haxe.extern.EitherType">
							<c path="js.html.CanvasElement"/>
							<x path="haxe.extern.EitherType">
								<c path="js.html.Blob"/>
								<x path="haxe.extern.EitherType">
									<c path="js.html.ImageData"/>
									<x path="haxe.extern.EitherType">
										<c path="js.html.CanvasRenderingContext2D"/>
										<c path="js.html.ImageBitmap"/>
									</x>
								</x>
							</x>
						</x>
					</x>
				</x>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.Promise"><c path="js.html.ImageBitmap"/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><createImageBitmap public="1" set="method">
	<f a="aImage">
		<x path="haxe.extern.EitherType">
			<c path="js.html.ImageElement"/>
			<x path="haxe.extern.EitherType">
				<c path="js.html.VideoElement"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.CanvasElement"/>
					<x path="haxe.extern.EitherType">
						<c path="js.html.Blob"/>
						<x path="haxe.extern.EitherType">
							<c path="js.html.ImageData"/>
							<x path="haxe.extern.EitherType">
								<c path="js.html.CanvasRenderingContext2D"/>
								<c path="js.html.ImageBitmap"/>
							</x>
						</x>
					</x>
				</x>
			</x>
		</x>
		<c path="js.Promise"><c path="js.html.ImageBitmap"/></c>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</createImageBitmap></overloads>
		</createImageBitmap>
		<btoa public="1" set="method">
			<f a="btoa">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</btoa>
		<atob public="1" set="method">
			<f a="atob">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</atob>
		<setTimeout public="1" set="method">
			<f a="handler:?timeout:unused" v=":0:">
				<c path="String"/>
				<x path="Int"/>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setTimeout public="1" set="method">
	<f a="handler:?timeout:arguments" v=":0:">
		<x path="haxe.Function"/>
		<x path="Int"/>
		<x path="haxe.extern.Rest"><d/></x>
		<x path="Int"/>
	</f>
	<meta><m n=":value"><e>{ timeout : 0 }</e></m></meta>
	<haxe_doc>@throws DOMError</haxe_doc>
</setTimeout></overloads>
		</setTimeout>
		<clearTimeout public="1" set="method">
			<f a="?handle" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ handle : 0 }</e></m></meta>
		</clearTimeout>
		<setInterval public="1" set="method">
			<f a="handler:?timeout:unused">
				<c path="String"/>
				<x path="Int"/>
				<x path="haxe.extern.Rest"><d/></x>
				<x path="Int"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><setInterval public="1" set="method">
	<f a="handler:?timeout:arguments">
		<x path="haxe.Function"/>
		<x path="Int"/>
		<x path="haxe.extern.Rest"><d/></x>
		<x path="Int"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</setInterval></overloads>
		</setInterval>
		<clearInterval public="1" set="method">
			<f a="?handle" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ handle : 0 }</e></m></meta>
		</clearInterval>
		<haxe_doc><![CDATA[The `window` object represents a window containing a DOM document; the `document` property points to the DOM document loaded in that window.

	Documentation [Window](https://developer.mozilla.org/en-US/docs/Web/API/Window) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Window$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Window>]]></haxe_doc>
		<meta><m n=":native"><e>"Window"</e></m></meta>
	</class>
	<class path="js.html.WindowClient" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/WindowClient.hx" extern="1">
		<extends path="js.html.Client"/>
		<visibilityState public="1" set="null">
			<x path="js.html.VisibilityState"/>
			<haxe_doc>Indicates the visibility of the current client. This value can be one of `hidden`, `visible`, `prerender`, or `unloaded`.</haxe_doc>
		</visibilityState>
		<focused public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>A boolean that indicates whether the current client has focus.</haxe_doc>
		</focused>
		<focus public="1" set="method">
			<f a=""><c path="js.Promise"><c path="js.html.WindowClient"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</focus>
		<haxe_doc><![CDATA[The `WindowClient` interface of the ServiceWorker API represents the scope of a service worker client that is a document in a browser context, controlled by an active worker. The service worker client independently selects and uses a service worker for its own loading and sub-resources.

	Documentation [WindowClient](https://developer.mozilla.org/en-US/docs/Web/API/WindowClient) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WindowClient$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WindowClient>]]></haxe_doc>
		<meta><m n=":native"><e>"WindowClient"</e></m></meta>
	</class>
	<class path="js.html.Worker" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/Worker.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<onmessage public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An `EventListener` called whenever a `MessageEvent` of type `message` bubbles through the worker — i.e. when a message is sent to the parent document from the worker via `DedicatedWorkerGlobalScope.postMessage`. The message is stored in the event's `MessageEvent.data` property.</haxe_doc>
		</onmessage>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<terminate public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Immediately terminates the worker. This does not offer the worker an opportunity to finish its operations; it is simply stopped at once. ServiceWorker instances do not support this method.</haxe_doc>
		</terminate>
		<postMessage public="1" set="method">
			<f a="message:?transfer">
				<d/>
				<c path="Array"><d/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</postMessage>
		<new public="1" set="method">
			<f a="scriptURL">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Worker` interface of the Web Workers API represents a background task that can be easily created and can send messages back to its creator. Creating a worker is as simple as calling the `Worker()` constructor and specifying a script to be run in the worker thread.

	Documentation [Worker](https://developer.mozilla.org/en-US/docs/Web/API/Worker) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/Worker$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/Worker>]]></haxe_doc>
		<meta><m n=":native"><e>"Worker"</e></m></meta>
	</class>
	<class path="js.html.WorkerDebuggerGlobalScope" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/WorkerDebuggerGlobalScope.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<global public="1" set="null"><d/></global>
		<onmessage public="1"><x path="haxe.Function"/></onmessage>
		<console public="1" set="null"><c path="js.html.Console"/></console>
		<createSandbox public="1" set="method"><f a="name:prototype">
	<c path="String"/>
	<d/>
	<d/>
</f></createSandbox>
		<loadSubScript public="1" set="method">
			<f a="url:?sandbox">
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</loadSubScript>
		<enterEventLoop public="1" set="method"><f a=""><x path="Void"/></f></enterEventLoop>
		<leaveEventLoop public="1" set="method"><f a=""><x path="Void"/></f></leaveEventLoop>
		<postMessage public="1" set="method"><f a="message">
	<c path="String"/>
	<x path="Void"/>
</f></postMessage>
		<setImmediate public="1" set="method">
			<f a="handler">
				<x path="haxe.Function"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setImmediate>
		<reportError public="1" set="method"><f a="message">
	<c path="String"/>
	<x path="Void"/>
</f></reportError>
		<dump public="1" set="method"><f a="?string">
	<c path="String"/>
	<x path="Void"/>
</f></dump>
		<meta><m n=":native"><e>"WorkerDebuggerGlobalScope"</e></m></meta>
	</class>
	<class path="js.html.WorkerLocation" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/WorkerLocation.hx" extern="1">
		<href public="1" set="null"><c path="String"/></href>
		<origin public="1" set="null"><c path="String"/></origin>
		<protocol public="1" set="null"><c path="String"/></protocol>
		<host public="1" set="null"><c path="String"/></host>
		<hostname public="1" set="null"><c path="String"/></hostname>
		<port public="1" set="null"><c path="String"/></port>
		<pathname public="1" set="null"><c path="String"/></pathname>
		<search public="1" set="null"><c path="String"/></search>
		<hash public="1" set="null"><c path="String"/></hash>
		<haxe_doc><![CDATA[The `WorkerLocation` interface defines the absolute location of the script executed by the `Worker`. Such an object is initialized for each worker and is available via the `WorkerGlobalScope.location` property obtained by calling `window.self.location`.

	Documentation [WorkerLocation](https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation>]]></haxe_doc>
		<meta><m n=":native"><e>"WorkerLocation"</e></m></meta>
	</class>
	<class path="js.html.WorkerNavigator" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/WorkerNavigator.hx" extern="1">
		<hardwareConcurrency public="1" set="null"><x path="Int"/></hardwareConcurrency>
		<appCodeName public="1" set="null"><c path="String"/></appCodeName>
		<appName public="1" set="null"><c path="String"/></appName>
		<appVersion public="1" set="null"><c path="String"/></appVersion>
		<platform public="1" set="null"><c path="String"/></platform>
		<userAgent public="1" set="null"><c path="String"/></userAgent>
		<product public="1" set="null"><c path="String"/></product>
		<language public="1" set="null"><c path="String"/></language>
		<languages public="1" set="null"><c path="Array"><c path="String"/></c></languages>
		<onLine public="1" set="null"><x path="Bool"/></onLine>
		<taintEnabled public="1" set="method"><f a=""><x path="Bool"/></f></taintEnabled>
		<haxe_doc><![CDATA[The `WorkerNavigator` interface represents a subset of the `Navigator` interface allowed to be accessed from a `Worker`. Such an object is initialized for each worker and is available via the `WorkerGlobalScope.navigator` property obtained by calling `window.self.navigator`.

	Documentation [WorkerNavigator](https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator>]]></haxe_doc>
		<meta><m n=":native"><e>"WorkerNavigator"</e></m></meta>
	</class>
	<class path="js.html.XMLDocument" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/XMLDocument.hx" extern="1">
		<extends path="js.html.Document"/>
		<async public="1"><x path="Bool"/></async>
		<load public="1" set="method">
			<f a="url">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</load>
		<haxe_doc><![CDATA[The XMLDocument interface represent an XML document. It inherits from the generic `Document` and does not add any specific methods or properties to it: nevertheless, several algorithms behave differently with the two types of documents.

	Documentation [XMLDocument](https://developer.mozilla.org/en-US/docs/Web/API/XMLDocument) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/XMLDocument$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/XMLDocument>]]></haxe_doc>
		<meta><m n=":native"><e>"XMLDocument"</e></m></meta>
	</class>
	<class path="js.html.XMLHttpRequestEventTarget" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/XMLHttpRequestEventTarget.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<onloadstart public="1"><x path="haxe.Function"/></onloadstart>
		<onprogress public="1"><x path="haxe.Function"/></onprogress>
		<onabort public="1"><x path="haxe.Function"/></onabort>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<onload public="1"><x path="haxe.Function"/></onload>
		<ontimeout public="1"><x path="haxe.Function"/></ontimeout>
		<onloadend public="1"><x path="haxe.Function"/></onloadend>
		<haxe_doc><![CDATA[`XMLHttpRequestEventTarget` is the interface that describes the event handlers you can implement in an object that will handle events for an `XMLHttpRequest`.

	Documentation [XMLHttpRequestEventTarget](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget>]]></haxe_doc>
		<meta><m n=":native"><e>"XMLHttpRequestEventTarget"</e></m></meta>
	</class>
	<class path="js.html.XMLHttpRequest" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/XMLHttpRequest.hx" extern="1">
		<extends path="js.html.XMLHttpRequestEventTarget"/>
		<UNSENT public="1" get="inline" set="null" expr="0" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</UNSENT>
		<OPENED public="1" get="inline" set="null" expr="1" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</OPENED>
		<HEADERS_RECEIVED public="1" get="inline" set="null" expr="2" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</HEADERS_RECEIVED>
		<LOADING public="1" get="inline" set="null" expr="3" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</LOADING>
		<DONE public="1" get="inline" set="null" expr="4" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</DONE>
		<onreadystatechange public="1"><x path="haxe.Function"/></onreadystatechange>
		<readyState public="1" set="null"><x path="Int"/></readyState>
		<timeout public="1"><x path="Int"/></timeout>
		<withCredentials public="1"><x path="Bool"/></withCredentials>
		<upload public="1" set="null"><c path="js.html.XMLHttpRequestUpload"/></upload>
		<responseURL public="1" set="null"><c path="String"/></responseURL>
		<status public="1" set="null"><x path="Int"/></status>
		<statusText public="1" set="null"><c path="String"/></statusText>
		<responseType public="1"><x path="js.html.XMLHttpRequestResponseType"/></responseType>
		<response public="1" set="null">
			<d/>
			<haxe_doc>Returns an `ArrayBuffer`, `Blob`, `Document`, JavaScript object, or a `DOMString`, depending on the value of `XMLHttpRequest.responseType`. that contains the response entity body.</haxe_doc>
		</response>
		<responseText public="1" set="null"><c path="String"/></responseText>
		<responseXML public="1" set="null"><c path="js.html.HTMLDocument"/></responseXML>
		<open public="1" set="method">
			<f a="method:url:async:?user:?password">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><open public="1" set="method">
	<f a="method:url">
		<c path="String"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</open></overloads>
		</open>
		<setRequestHeader public="1" set="method">
			<f a="header:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setRequestHeader>
		<send public="1" set="method">
			<f a="data">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<send public="1" set="method">
					<f a=""><x path="Void"/></f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="data">
						<c path="js.html.ArrayBuffer"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="data">
						<c path="js.html.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="data">
						<c path="js.html.Blob"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="data">
						<c path="js.html.HTMLDocument"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="data">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="data">
						<c path="js.html.FormData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</send>
			</overloads>
		</send>
		<abort public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</abort>
		<getResponseHeader public="1" set="method">
			<f a="header">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getResponseHeader>
		<getAllResponseHeaders public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getAllResponseHeaders>
		<overrideMimeType public="1" set="method">
			<f a="mime">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</overrideMimeType>
		<new public="1" set="method">
			<f a="ignored">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="?params">
		<d/>
		<x path="Void"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[`XMLHttpRequest` is an API that provides client functionality for transferring data between a client and a server. It provides an easy way to retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just a part of the page without disrupting what the user is doing.

	Documentation [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest>]]></haxe_doc>
		<meta><m n=":native"><e>"XMLHttpRequest"</e></m></meta>
	</class>
	<abstract path="js.html.XMLHttpRequestResponseType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/XMLHttpRequestResponseType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html._XMLHttpRequestResponseType.XMLHttpRequestResponseType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/XMLHttpRequestResponseType.hx" private="1" module="js.html.XMLHttpRequestResponseType" extern="1">
	<NONE public="1" get="inline" set="null" expr="cast &quot;&quot;" line="29" static="1">
		<x path="js.html.XMLHttpRequestResponseType"/>
		<meta>
			<m n=":value"><e>cast ""</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NONE>
	<ARRAYBUFFER public="1" get="inline" set="null" expr="cast &quot;arraybuffer&quot;" line="30" static="1">
		<x path="js.html.XMLHttpRequestResponseType"/>
		<meta>
			<m n=":value"><e>cast "arraybuffer"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ARRAYBUFFER>
	<BLOB public="1" get="inline" set="null" expr="cast &quot;blob&quot;" line="31" static="1">
		<x path="js.html.XMLHttpRequestResponseType"/>
		<meta>
			<m n=":value"><e>cast "blob"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BLOB>
	<DOCUMENT public="1" get="inline" set="null" expr="cast &quot;document&quot;" line="32" static="1">
		<x path="js.html.XMLHttpRequestResponseType"/>
		<meta>
			<m n=":value"><e>cast "document"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DOCUMENT>
	<JSON public="1" get="inline" set="null" expr="cast &quot;json&quot;" line="33" static="1">
		<x path="js.html.XMLHttpRequestResponseType"/>
		<meta>
			<m n=":value"><e>cast "json"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</JSON>
	<TEXT public="1" get="inline" set="null" expr="cast &quot;text&quot;" line="34" static="1">
		<x path="js.html.XMLHttpRequestResponseType"/>
		<meta>
			<m n=":value"><e>cast "text"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TEXT>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html._XMLHttpRequestResponseType.XMLHttpRequestResponseType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/XMLHttpRequestResponseType.hx" private="1" module="js.html.XMLHttpRequestResponseType" extern="1">
		<NONE public="1" get="inline" set="null" expr="cast &quot;&quot;" line="29" static="1">
			<x path="js.html.XMLHttpRequestResponseType"/>
			<meta>
				<m n=":value"><e>cast ""</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NONE>
		<ARRAYBUFFER public="1" get="inline" set="null" expr="cast &quot;arraybuffer&quot;" line="30" static="1">
			<x path="js.html.XMLHttpRequestResponseType"/>
			<meta>
				<m n=":value"><e>cast "arraybuffer"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ARRAYBUFFER>
		<BLOB public="1" get="inline" set="null" expr="cast &quot;blob&quot;" line="31" static="1">
			<x path="js.html.XMLHttpRequestResponseType"/>
			<meta>
				<m n=":value"><e>cast "blob"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BLOB>
		<DOCUMENT public="1" get="inline" set="null" expr="cast &quot;document&quot;" line="32" static="1">
			<x path="js.html.XMLHttpRequestResponseType"/>
			<meta>
				<m n=":value"><e>cast "document"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DOCUMENT>
		<JSON public="1" get="inline" set="null" expr="cast &quot;json&quot;" line="33" static="1">
			<x path="js.html.XMLHttpRequestResponseType"/>
			<meta>
				<m n=":value"><e>cast "json"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</JSON>
		<TEXT public="1" get="inline" set="null" expr="cast &quot;text&quot;" line="34" static="1">
			<x path="js.html.XMLHttpRequestResponseType"/>
			<meta>
				<m n=":value"><e>cast "text"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TEXT>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.XMLHttpRequestUpload" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/XMLHttpRequestUpload.hx" extern="1">
		<extends path="js.html.XMLHttpRequestEventTarget"/>
		<meta><m n=":native"><e>"XMLHttpRequestUpload"</e></m></meta>
	</class>
	<class path="js.html.XMLSerializer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/XMLSerializer.hx" extern="1">
		<serializeToString public="1" set="method">
			<f a="root">
				<c path="js.html.Node"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</serializeToString>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"XMLSerializer"</e></m></meta>
	</class>
	<class path="js.html.XMLStylesheetProcessingInstruction" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/XMLStylesheetProcessingInstruction.hx" extern="1">
		<extends path="js.html.ProcessingInstruction"/>
		<sheet public="1" set="null"><c path="js.html.StyleSheet"/></sheet>
		<meta><m n=":native"><e>"XMLStylesheetProcessingInstruction"</e></m></meta>
	</class>
	<class path="js.html.XPathEvaluator" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/XPathEvaluator.hx" extern="1">
		<createExpression public="1" set="method">
			<f a="expression:resolver">
				<c path="String"/>
				<c path="js.html.XPathNSResolver"/>
				<c path="js.html.XPathExpression"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createExpression>
		<createNSResolver public="1" set="method"><f a="nodeResolver">
	<c path="js.html.Node"/>
	<c path="js.html.Node"/>
</f></createNSResolver>
		<evaluate public="1" set="method">
			<f a="expression:contextNode:resolver:type:result">
				<c path="String"/>
				<c path="js.html.Node"/>
				<c path="js.html.XPathNSResolver"/>
				<x path="Int"/>
				<d/>
				<c path="js.html.XPathResult"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</evaluate>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"XPathEvaluator"</e></m></meta>
	</class>
	<class path="js.html.XPathExpression" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/XPathExpression.hx" extern="1">
		<evaluate public="1" set="method">
			<f a="contextNode:type:result">
				<c path="js.html.Node"/>
				<x path="Int"/>
				<d/>
				<c path="js.html.XPathResult"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</evaluate>
		<haxe_doc><![CDATA[An `XPathExpression` is a compiled XPath query returned from `document.createExpression()`. It has a method `evaluate()` which can be used to execute the compiled XPath.

	Documentation [XPathExpression](https://developer.mozilla.org/en-US/docs/Web/API/XPathExpression) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/XPathExpression$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/XPathExpression>]]></haxe_doc>
		<meta><m n=":native"><e>"XPathExpression"</e></m></meta>
	</class>
	<class path="js.html.XPathNSResolver" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/XPathNSResolver.hx" extern="1">
		<lookupNamespaceURI public="1" set="method"><f a="prefix">
	<c path="String"/>
	<c path="String"/>
</f></lookupNamespaceURI>
		<meta><m n=":native"><e>"XPathNSResolver"</e></m></meta>
	</class>
	<class path="js.html.XPathResult" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/XPathResult.hx" extern="1">
		<ANY_TYPE public="1" get="inline" set="null" expr="0" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</ANY_TYPE>
		<NUMBER_TYPE public="1" get="inline" set="null" expr="1" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</NUMBER_TYPE>
		<STRING_TYPE public="1" get="inline" set="null" expr="2" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</STRING_TYPE>
		<BOOLEAN_TYPE public="1" get="inline" set="null" expr="3" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</BOOLEAN_TYPE>
		<UNORDERED_NODE_ITERATOR_TYPE public="1" get="inline" set="null" expr="4" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</UNORDERED_NODE_ITERATOR_TYPE>
		<ORDERED_NODE_ITERATOR_TYPE public="1" get="inline" set="null" expr="5" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</ORDERED_NODE_ITERATOR_TYPE>
		<UNORDERED_NODE_SNAPSHOT_TYPE public="1" get="inline" set="null" expr="6" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</UNORDERED_NODE_SNAPSHOT_TYPE>
		<ORDERED_NODE_SNAPSHOT_TYPE public="1" get="inline" set="null" expr="7" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</ORDERED_NODE_SNAPSHOT_TYPE>
		<ANY_UNORDERED_NODE_TYPE public="1" get="inline" set="null" expr="8" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</ANY_UNORDERED_NODE_TYPE>
		<FIRST_ORDERED_NODE_TYPE public="1" get="inline" set="null" expr="9" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</FIRST_ORDERED_NODE_TYPE>
		<resultType public="1" set="null">
			<x path="Int"/>
			<haxe_doc>readonly integer (short)</haxe_doc>
		</resultType>
		<numberValue public="1" set="null">
			<x path="Float"/>
			<haxe_doc>readonly float</haxe_doc>
		</numberValue>
		<stringValue public="1" set="null">
			<c path="String"/>
			<haxe_doc>readonly String</haxe_doc>
		</stringValue>
		<booleanValue public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>readonly boolean</haxe_doc>
		</booleanValue>
		<singleNodeValue public="1" set="null">
			<c path="js.html.Node"/>
			<haxe_doc>readonly Node</haxe_doc>
		</singleNodeValue>
		<invalidIteratorState public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>readonly boolean</haxe_doc>
		</invalidIteratorState>
		<snapshotLength public="1" set="null">
			<x path="Int"/>
			<haxe_doc>readonly Integer</haxe_doc>
		</snapshotLength>
		<iterateNext public="1" set="method">
			<f a=""><c path="js.html.Node"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</iterateNext>
		<snapshotItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.Node"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</snapshotItem>
		<meta><m n=":native"><e>"XPathResult"</e></m></meta>
	</class>
	<class path="js.html.XSLTProcessor" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/XSLTProcessor.hx" extern="1">
		<importStylesheet public="1" set="method">
			<f a="style">
				<c path="js.html.Node"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</importStylesheet>
		<transformToFragment public="1" set="method">
			<f a="source:output">
				<c path="js.html.Node"/>
				<c path="js.html.HTMLDocument"/>
				<c path="js.html.DocumentFragment"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</transformToFragment>
		<transformToDocument public="1" set="method">
			<f a="source">
				<c path="js.html.Node"/>
				<c path="js.html.HTMLDocument"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</transformToDocument>
		<setParameter public="1" set="method">
			<f a="namespaceURI:localName:value">
				<c path="String"/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setParameter>
		<getParameter public="1" set="method">
			<f a="namespaceURI:localName">
				<c path="String"/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getParameter>
		<removeParameter public="1" set="method">
			<f a="namespaceURI:localName">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeParameter>
		<clearParameters public="1" set="method"><f a=""><x path="Void"/></f></clearParameters>
		<reset public="1" set="method"><f a=""><x path="Void"/></f></reset>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[An `XSLTProcessor` applies an XSLT stylesheet transformation to an XML document to produce a new XML document as output. It has methods to load the XSLT stylesheet, to manipulate `xsl:param` parameter values, and to apply the transformation to documents.

	Documentation [XSLTProcessor](https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor>]]></haxe_doc>
		<meta><m n=":native"><e>"XSLTProcessor"</e></m></meta>
	</class>
	<class path="js.html.audio.AudioNode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/AudioNode.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<context public="1" set="null">
			<c path="js.html.audio.AudioContext"/>
			<haxe_doc>Returns the associated `AudioContext`, that is the object representing the processing graph the node is participating in.</haxe_doc>
		</context>
		<numberOfInputs public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of inputs feeding the node. Source nodes are defined as nodes having a `numberOfInputs` property with a value of `0`.</haxe_doc>
		</numberOfInputs>
		<numberOfOutputs public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the number of outputs coming out of the node. Destination nodes — like `AudioDestinationNode` — have a value of `0` for this attribute.</haxe_doc>
		</numberOfOutputs>
		<channelCount public="1">
			<x path="Int"/>
			<haxe_doc>Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. Its usage and precise definition depend on the value of `AudioNode.channelCountMode`.</haxe_doc>
		</channelCount>
		<channelCountMode public="1">
			<x path="js.html.audio.ChannelCountMode"/>
			<haxe_doc>Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs.</haxe_doc>
		</channelCountMode>
		<channelInterpretation public="1">
			<x path="js.html.audio.ChannelInterpretation"/>
			<haxe_doc>Represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.
		
		 The possible values are `"speakers"` or `"discrete"`.</haxe_doc>
		</channelInterpretation>
		<connect public="1" set="method">
			<f a="destination:?output" v=":0">
				<c path="js.html.audio.AudioParam"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ output : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><connect public="1" set="method">
	<f a="destination:?output:?input" v=":0:0">
		<c path="js.html.audio.AudioNode"/>
		<x path="Int"/>
		<x path="Int"/>
		<c path="js.html.audio.AudioNode"/>
	</f>
	<meta><m n=":value"><e>{ input : 0, output : 0 }</e></m></meta>
	<haxe_doc>@throws DOMError</haxe_doc>
</connect></overloads>
		</connect>
		<disconnect public="1" set="method">
			<f a="?output" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ output : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</disconnect>
		<haxe_doc><![CDATA[The `AudioNode` interface is a generic interface for representing an audio processing module like an audio source (e.g. an HTML `audio` or `video` element, an `OscillatorNode`, etc.), the audio destination, intermediate processing module (e.g. a filter like `BiquadFilterNode` or `ConvolverNode`), or volume control (like `GainNode`).

	Documentation [AudioNode](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioNode>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioNode"</e></m></meta>
	</class>
	<class path="js.html.audio.AnalyserNode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/AnalyserNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<fftSize public="1">
			<x path="Int"/>
			<haxe_doc>Is an unsigned long value representing the size of the FFT (Fast Fourier Transform) to be used to determine the frequency domain.</haxe_doc>
		</fftSize>
		<frequencyBinCount public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an unsigned long value half that of the FFT size. This generally equates to the number of data values you will have to play with for the visualization.</haxe_doc>
		</frequencyBinCount>
		<minDecibels public="1">
			<x path="Float"/>
			<haxe_doc>Is a double value representing the minimum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte values — basically, this specifies the minimum value for the range of results when using `getByteFrequencyData()`.</haxe_doc>
		</minDecibels>
		<maxDecibels public="1">
			<x path="Float"/>
			<haxe_doc>Is a double value representing the maximum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte values — basically, this specifies the maximum value for the range of results when using `getByteFrequencyData()`.</haxe_doc>
		</maxDecibels>
		<smoothingTimeConstant public="1">
			<x path="Float"/>
			<haxe_doc>Is a double value representing the averaging constant with the last analysis frame — basically, it makes the transition between values over time smoother.</haxe_doc>
		</smoothingTimeConstant>
		<getFloatFrequencyData public="1" set="method">
			<f a="array">
				<c path="js.html.Float32Array"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies the current frequency data into a `Float32Array` array passed into it.</haxe_doc>
		</getFloatFrequencyData>
		<getByteFrequencyData public="1" set="method">
			<f a="array">
				<c path="js.html.Uint8Array"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies the current frequency data into a `Uint8Array` (unsigned byte array) passed into it.</haxe_doc>
		</getByteFrequencyData>
		<getFloatTimeDomainData public="1" set="method">
			<f a="array">
				<c path="js.html.Float32Array"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies the current waveform, or time-domain, data into a `Float32Array` array passed into it.</haxe_doc>
		</getFloatTimeDomainData>
		<getByteTimeDomainData public="1" set="method">
			<f a="array">
				<c path="js.html.Uint8Array"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies the current waveform, or time-domain, data into a `Uint8Array` (unsigned byte array) passed into it.</haxe_doc>
		</getByteTimeDomainData>
		<haxe_doc><![CDATA[The `AnalyserNode` interface represents a node able to provide real-time frequency and time-domain analysis information. It is an `AudioNode` that passes the audio stream unchanged from the input to the output, but allows you to take the generated data, process it, and create audio visualizations.

	Documentation [AnalyserNode](https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode>]]></haxe_doc>
		<meta><m n=":native"><e>"AnalyserNode"</e></m></meta>
	</class>
	<class path="js.html.audio.AudioBuffer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/AudioBuffer.hx" extern="1">
		<sampleRate public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a float representing the sample rate, in samples per second, of the PCM data stored in the buffer.</haxe_doc>
		</sampleRate>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an integer representing the length, in sample-frames, of the PCM data stored in the buffer.</haxe_doc>
		</length>
		<duration public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a double representing the duration, in seconds, of the PCM data stored in the buffer.</haxe_doc>
		</duration>
		<numberOfChannels public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an integer representing the number of discrete audio channels described by the PCM data stored in the buffer.</haxe_doc>
		</numberOfChannels>
		<getChannelData public="1" set="method">
			<f a="channel">
				<x path="Int"/>
				<c path="js.html.Float32Array"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getChannelData>
		<copyFromChannel public="1" set="method">
			<f a="destination:channelNumber:?startInChannel" v="::0">
				<c path="js.html.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ startInChannel : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</copyFromChannel>
		<copyToChannel public="1" set="method">
			<f a="source:channelNumber:?startInChannel" v="::0">
				<c path="js.html.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ startInChannel : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</copyToChannel>
		<haxe_doc><![CDATA[Objects of these types are designed to hold small audio snippets, typically less than 45 s. For longer sounds, objects implementing the `MediaElementAudioSourceNode` are more suitable. The buffer contains data in the following format:  non-interleaved IEEE754 32-bit linear PCM with a nominal range between `-1` and `+1`, that is, 32bits floating point buffer, with each samples between -1.0 and 1.0. If the `AudioBuffer` has multiple channels, they are stored in separate buffer.

	Documentation [AudioBuffer](https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioBuffer"</e></m></meta>
	</class>
	<class path="js.html.audio.AudioBufferSourceNode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/AudioBufferSourceNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<buffer public="1">
			<c path="js.html.audio.AudioBuffer"/>
			<haxe_doc>Is an `AudioBuffer` that defines the audio asset to be played, or when set to the value `null`, defines a single channel of silence. </haxe_doc>
		</buffer>
		<playbackRate public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is an a-rate `AudioParam` that defines the speed factor at which the audio asset will be played. Since no pitch correction is applied on the output, this can be used to change the pitch of the sample.</haxe_doc>
		</playbackRate>
		<detune public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is a `AudioParam` representing detuning of oscillation in cents. Its default value is `0`.</haxe_doc>
		</detune>
		<loop public="1">
			<x path="Bool"/>
			<haxe_doc>Is a Boolean attribute indicating if the audio asset must be replayed when the end of the `AudioBuffer` is reached. Its default value is `false`.</haxe_doc>
		</loop>
		<loopStart public="1">
			<x path="Float"/>
			<haxe_doc>Is a double value indicating, in seconds, where in the `AudioBuffer` the restart of the play must happen. Its default value is `0`.</haxe_doc>
		</loopStart>
		<loopEnd public="1">
			<x path="Float"/>
			<haxe_doc>Is a double value indicating, in seconds, where in the `AudioBuffer` the replay of the play must stop (and eventually loop again). Its default value is `0`.</haxe_doc>
		</loopEnd>
		<onended public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` containing the callback associated with the `ended_(Web_Audio)` event.</haxe_doc>
		</onended>
		<start public="1" set="method">
			<f a="?when:?grainOffset:?grainDuration" v="0.0:0.0:">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ grainOffset : 0.0, when : 0.0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</start>
		<stop public="1" set="method">
			<f a="?when" v="0.0">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ when : 0.0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</stop>
		<haxe_doc><![CDATA[The `AudioBufferSourceNode` interface represents an audio source consisting of in-memory audio data, stored in an `AudioBuffer`. It is an `AudioNode` that acts as an audio source`.`

	Documentation [AudioBufferSourceNode](https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioBufferSourceNode"</e></m></meta>
	</class>
	<class path="js.html.audio.AudioContext" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/AudioContext.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<destination public="1" set="null">
			<c path="js.html.audio.AudioDestinationNode"/>
			<haxe_doc>Returns an `AudioDestinationNode` representing the final destination of all audio in the context. It can be thought of as the audio-rendering device.</haxe_doc>
		</destination>
		<sampleRate public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a float representing the sample rate (in samples per second) used by all nodes in this context. The sample-rate of an `AudioContext` cannot be changed.</haxe_doc>
		</sampleRate>
		<currentTime public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Returns a double representing an ever-increasing hardware time in seconds used for scheduling. It starts at `0`.</haxe_doc>
		</currentTime>
		<listener public="1" set="null">
			<c path="js.html.audio.AudioListener"/>
			<haxe_doc>Returns the `AudioListener` object, used for 3D spatialization.</haxe_doc>
		</listener>
		<state public="1" set="null">
			<x path="js.html.AudioContextState"/>
			<haxe_doc>Returns the current state of the `AudioContext`.</haxe_doc>
		</state>
		<onstatechange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>An event handler that runs when an event of type `statechange` has fired. This occurs when the `AudioContext`'s state changes, due to the calling of one of the state change methods (`AudioContext.suspend`, `AudioContext.resume`, or `AudioContext.close`).</haxe_doc>
		</onstatechange>
		<suspend public="1" set="method">
			<f a=""><c path="js.Promise"><x path="Void"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</suspend>
		<resume public="1" set="method">
			<f a=""><c path="js.Promise"><x path="Void"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</resume>
		<close public="1" set="method">
			<f a=""><c path="js.Promise"><x path="Void"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</close>
		<createBuffer public="1" set="method">
			<f a="numberOfChannels:length:sampleRate">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<c path="js.html.audio.AudioBuffer"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createBuffer>
		<decodeAudioData public="1" set="method">
			<f a="audioData:?successCallback:?errorCallback">
				<c path="js.html.ArrayBuffer"/>
				<f a="">
					<c path="js.html.audio.AudioBuffer"/>
					<x path="Void"/>
				</f>
				<f a=""><x path="Void"/></f>
				<c path="js.Promise"><c path="js.html.audio.AudioBuffer"/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</decodeAudioData>
		<createBufferSource public="1" set="method">
			<f a=""><c path="js.html.audio.AudioBufferSourceNode"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createBufferSource>
		<createMediaStreamDestination public="1" set="method">
			<f a=""><c path="js.html.audio.MediaStreamAudioDestinationNode"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createMediaStreamDestination>
		<createScriptProcessor public="1" set="method">
			<f a="?bufferSize:?numberOfInputChannels:?numberOfOutputChannels" v="0:2:2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.audio.ScriptProcessorNode"/>
			</f>
			<meta><m n=":value"><e>{ numberOfOutputChannels : 2, numberOfInputChannels : 2, bufferSize : 0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createScriptProcessor>
		<createStereoPanner public="1" set="method">
			<f a=""><c path="js.html.audio.StereoPannerNode"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createStereoPanner>
		<createAnalyser public="1" set="method">
			<f a=""><c path="js.html.audio.AnalyserNode"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createAnalyser>
		<createMediaElementSource public="1" set="method">
			<f a="mediaElement">
				<c path="js.html.MediaElement"/>
				<c path="js.html.audio.MediaElementAudioSourceNode"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createMediaElementSource>
		<createMediaStreamSource public="1" set="method">
			<f a="mediaStream">
				<c path="js.html.MediaStream"/>
				<c path="js.html.audio.MediaStreamAudioSourceNode"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createMediaStreamSource>
		<createGain public="1" set="method">
			<f a=""><c path="js.html.audio.GainNode"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createGain>
		<createDelay public="1" set="method">
			<f a="?maxDelayTime" v="1.0">
				<x path="Float"/>
				<c path="js.html.audio.DelayNode"/>
			</f>
			<meta><m n=":value"><e>{ maxDelayTime : 1.0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createDelay>
		<createBiquadFilter public="1" set="method">
			<f a=""><c path="js.html.audio.BiquadFilterNode"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createBiquadFilter>
		<createWaveShaper public="1" set="method">
			<f a=""><c path="js.html.audio.WaveShaperNode"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createWaveShaper>
		<createPanner public="1" set="method">
			<f a=""><c path="js.html.audio.PannerNode"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createPanner>
		<createConvolver public="1" set="method">
			<f a=""><c path="js.html.audio.ConvolverNode"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createConvolver>
		<createChannelSplitter public="1" set="method">
			<f a="?numberOfOutputs" v="6">
				<x path="Int"/>
				<c path="js.html.audio.ChannelSplitterNode"/>
			</f>
			<meta><m n=":value"><e>{ numberOfOutputs : 6 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createChannelSplitter>
		<createChannelMerger public="1" set="method">
			<f a="?numberOfInputs" v="6">
				<x path="Int"/>
				<c path="js.html.audio.ChannelMergerNode"/>
			</f>
			<meta><m n=":value"><e>{ numberOfInputs : 6 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createChannelMerger>
		<createDynamicsCompressor public="1" set="method">
			<f a=""><c path="js.html.audio.DynamicsCompressorNode"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createDynamicsCompressor>
		<createOscillator public="1" set="method">
			<f a=""><c path="js.html.audio.OscillatorNode"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createOscillator>
		<createPeriodicWave public="1" set="method">
			<f a="real:imag">
				<c path="js.html.Float32Array"/>
				<c path="js.html.Float32Array"/>
				<c path="js.html.audio.PeriodicWave"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createPeriodicWave>
		<new public="1" set="method">
			<f a="audioChannelType">
				<x path="js.html.AudioChannel"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[An `AudioContext` can be a target of events, therefore it implements the `EventTarget` interface.

	Documentation [AudioContext](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioContext>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioContext"</e></m></meta>
	</class>
	<class path="js.html.audio.AudioDestinationNode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/AudioDestinationNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<maxChannelCount public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Is an `unsigned long` defining the maximum amount of channels that the physical device can handle.</haxe_doc>
		</maxChannelCount>
		<haxe_doc><![CDATA[`AudioDestinationNode` has no output (as it is the output, no more `AudioNode` can be linked after it in the audio graph) and one input. The amount of channels in the input must be between `0` and the `maxChannelCount` value or an exception is raised.

	Documentation [AudioDestinationNode](https://developer.mozilla.org/en-US/docs/Web/API/AudioDestinationNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioDestinationNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioDestinationNode>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioDestinationNode"</e></m></meta>
	</class>
	<class path="js.html.audio.AudioListener" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/AudioListener.hx" extern="1">
		<dopplerFactor public="1"><x path="Float"/></dopplerFactor>
		<speedOfSound public="1"><x path="Float"/></speedOfSound>
		<setPosition public="1" set="method">
			<f a="x:y:z">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the position of the listener. See `Deprecated features` to learn why this method was removed.</haxe_doc>
		</setPosition>
		<setOrientation public="1" set="method">
			<f a="x:y:z:xUp:yUp:zUp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the orientation of the listener.</haxe_doc>
		</setOrientation>
		<setVelocity public="1" set="method"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setVelocity>
		<haxe_doc><![CDATA[It is important to note that there is only one listener per context and that it isn't an `AudioNode`.

	Documentation [AudioListener](https://developer.mozilla.org/en-US/docs/Web/API/AudioListener) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioListener$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioListener>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioListener"</e></m></meta>
	</class>
	<class path="js.html.audio.AudioParam" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/AudioParam.hx" extern="1">
		<value public="1">
			<x path="Float"/>
			<haxe_doc>Represents the parameter's current volume as a floating point value; initially set to the value of `AudioParam.defaultValue`. Though it can be set, any modifications happening while there are automation events scheduled — that is events scheduled using the methods of the `AudioParam` — are ignored, without raising any exception.</haxe_doc>
		</value>
		<defaultValue public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Represents the initial volume of the attribute as defined by the specific `AudioNode` creating the `AudioParam`.</haxe_doc>
		</defaultValue>
		<setValueAtTime public="1" set="method">
			<f a="value:startTime">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setValueAtTime>
		<linearRampToValueAtTime public="1" set="method">
			<f a="value:endTime">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</linearRampToValueAtTime>
		<exponentialRampToValueAtTime public="1" set="method">
			<f a="value:endTime">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</exponentialRampToValueAtTime>
		<setTargetAtTime public="1" set="method">
			<f a="target:startTime:timeConstant">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setTargetAtTime>
		<setValueCurveAtTime public="1" set="method">
			<f a="values:startTime:duration">
				<c path="js.html.Float32Array"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setValueCurveAtTime>
		<cancelScheduledValues public="1" set="method">
			<f a="startTime">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</cancelScheduledValues>
		<haxe_doc><![CDATA[There are two kinds of `AudioParam`, a-rate and k-rate parameters:

	Documentation [AudioParam](https://developer.mozilla.org/en-US/docs/Web/API/AudioParam) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioParam$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioParam>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioParam"</e></m></meta>
	</class>
	<class path="js.html.audio.AudioProcessingEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/AudioProcessingEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<playbackTime public="1" set="null"><x path="Float"/></playbackTime>
		<inputBuffer public="1" set="null"><c path="js.html.audio.AudioBuffer"/></inputBuffer>
		<outputBuffer public="1" set="null"><c path="js.html.audio.AudioBuffer"/></outputBuffer>
		<haxe_doc><![CDATA[The Web Audio API `AudioProcessingEvent` represents events that occur when a `ScriptProcessorNode` input buffer is ready to be processed.

	Documentation [AudioProcessingEvent](https://developer.mozilla.org/en-US/docs/Web/API/AudioProcessingEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/AudioProcessingEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/AudioProcessingEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"AudioProcessingEvent"</e></m></meta>
	</class>
	<class path="js.html.audio.BiquadFilterNode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/BiquadFilterNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<type public="1">
			<x path="js.html.audio.BiquadFilterType"/>
			<haxe_doc><![CDATA[Is a string value defining the kind of filtering algorithm the node is implementing.<br>
		  
		 <table class="standard-table">
		  The meaning of the different parameters depending of the type of the filter (detune has the same meaning regardless, so isn't listed below)
		  
		   <tr>
		    <code>type</code>
		    Description
		    <code>frequency</code>
		    <code>Q</code>
		    <code>gain</code>
		   </tr>
		  
		  
		   <tr>
		    <code>lowpass</code>
		    <td>Standard second-order resonant lowpass filter with 12dB/octave rolloff. Frequencies below the cutoff pass through; frequencies above it are attenuated.</td>
		    <td>The cutoff frequency.</td>
		    <td>Indicates how peaked the frequency is around the cutoff. The greater the value is, the greater is the peak.</td>
		    <td>Not used</td>
		   </tr>
		   <tr>
		    <code>highpass</code>
		    <td>Standard second-order resonant highpass filter with 12dB/octave rolloff. Frequencies below the cutoff are attenuated; frequencies above it pass through.</td>
		    <td>The cutoff frequency.</td>
		    <td>Indicates how peaked the frequency is around the cutoff. The greater the value, the greater the peak.</td>
		    <td>Not used</td>
		   </tr>
		   <tr>
		    <code>bandpass</code>
		    <td>Standard second-order bandpass filter. Frequencies outside the given range of frequencies are attenuated; the frequencies inside it pass through.</td>
		    <td>The center of the range of frequencies.</td>
		    <td>Controls the width of the frequency band. The greater the <code>Q</code> value, the smaller the frequency band.</td>
		    <td>Not used</td>
		   </tr>
		   <tr>
		    <code>lowshelf</code>
		    <td>Standard second-order lowshelf filer. Frequencies lower than the frequency get a boost, or an attenuation; frequencies over it are unchanged.</td>
		    <td>The upper limit of the frequencies getting a boost or an attenuation.</td>
		    <td>Not used</td>
		    <td>The boost, in dB, to be applied; if negative, it will be an attenuation.</td>
		   </tr>
		   <tr>
		    <code>highshelf</code>
		    <td>Standard second-order highshelf filer. Frequencies higher than the frequency get a boost or an attenuation; frequencies lower than it are unchanged.</td>
		    <td>The lower limit of the frequencies getting a boost or an attenuation.</td>
		    <td>Not used</td>
		    <td>The boost, in dB, to be applied; if negative, it will be an attenuation.</td>
		   </tr>
		   <tr>
		    <code>peaking</code>
		    <td>Frequencies inside the range get a boost or an attenuation; frequencies outside it are unchanged.</td>
		    <td>The middle of the frequency range getting a boost or an attenuation.</td>
		    <td>Controls the width of the frequency band. The greater the <code>Q</code> value, the smaller the frequency band.</td>
		    <td>The boost, in dB, to be applied; if negative, it will be an attenuation.</td>
		   </tr>
		   <tr>
		    <code>notch</code>
		    <td>Standard notch filter, also called a band-stop or band-rejection filter. It is the opposite of a bandpass filter: frequencies outside the give range of frequencies pass through; frequencies inside it are attenuated.</td>
		    <td>The center of the range of frequencies.</td>
		    <td>Controls the width of the frequency band. The greater the <code>Q</code> value, the smaller the frequency band.</td>
		    <td>Not used</td>
		   </tr>
		   <tr>
		    <code>allpass</code>
		    <td>Standard second-order allpass filter. It lets all frequencies through, but changes the phase-relationship between the various frequencies.</td>
		    <td>The frequency with the maximal group delay, that is, the frequency where the center of the phase transition occurs.</td>
		    <td>Controls how sharp the transition is at the medium frequency. The larger this parameter is, the sharper and larger the transition will be.</td>
		    <td>Not used</td>
		   </tr>
		  
		 </table>]]></haxe_doc>
		</type>
		<frequency public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is an a-rate `AudioParam`, a double representing a frequency in the current filtering algorithm measured in hertz (Hz).</haxe_doc>
		</frequency>
		<detune public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is an a-rate `AudioParam` representing detuning of the frequency in cents.</haxe_doc>
		</detune>
		<Q public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is an a-rate `AudioParam`, a double representing a Q factor, or quality factor.</haxe_doc>
		</Q>
		<gain public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is an a-rate `AudioParam`, a double representing the gain used in the current filtering algorithm.</haxe_doc>
		</gain>
		<getFrequencyResponse public="1" set="method">
			<f a="frequencyHz:magResponse:phaseResponse">
				<c path="js.html.Float32Array"/>
				<c path="js.html.Float32Array"/>
				<c path="js.html.Float32Array"/>
				<x path="Void"/>
			</f>
			<haxe_doc>From the current filter parameter settings this method calculates the frequency response for frequencies specified in the provided array of frequencies.</haxe_doc>
		</getFrequencyResponse>
		<haxe_doc><![CDATA[The `BiquadFilterNode` interface represents a simple low-order filter, and is created using the `AudioContext.createBiquadFilter()` method. It is an `AudioNode` that can represent different kinds of filters, tone control devices, and graphic equalizers.

	Documentation [BiquadFilterNode](https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode>]]></haxe_doc>
		<meta><m n=":native"><e>"BiquadFilterNode"</e></m></meta>
	</class>
	<abstract path="js.html.audio.BiquadFilterType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/BiquadFilterType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.audio._BiquadFilterType.BiquadFilterType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/BiquadFilterType.hx" private="1" module="js.html.audio.BiquadFilterType" extern="1">
	<LOWPASS public="1" get="inline" set="null" expr="cast &quot;lowpass&quot;" line="29" static="1">
		<x path="js.html.audio.BiquadFilterType"/>
		<meta>
			<m n=":value"><e>cast "lowpass"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LOWPASS>
	<HIGHPASS public="1" get="inline" set="null" expr="cast &quot;highpass&quot;" line="30" static="1">
		<x path="js.html.audio.BiquadFilterType"/>
		<meta>
			<m n=":value"><e>cast "highpass"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HIGHPASS>
	<BANDPASS public="1" get="inline" set="null" expr="cast &quot;bandpass&quot;" line="31" static="1">
		<x path="js.html.audio.BiquadFilterType"/>
		<meta>
			<m n=":value"><e>cast "bandpass"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BANDPASS>
	<LOWSHELF public="1" get="inline" set="null" expr="cast &quot;lowshelf&quot;" line="32" static="1">
		<x path="js.html.audio.BiquadFilterType"/>
		<meta>
			<m n=":value"><e>cast "lowshelf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LOWSHELF>
	<HIGHSHELF public="1" get="inline" set="null" expr="cast &quot;highshelf&quot;" line="33" static="1">
		<x path="js.html.audio.BiquadFilterType"/>
		<meta>
			<m n=":value"><e>cast "highshelf"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HIGHSHELF>
	<PEAKING public="1" get="inline" set="null" expr="cast &quot;peaking&quot;" line="34" static="1">
		<x path="js.html.audio.BiquadFilterType"/>
		<meta>
			<m n=":value"><e>cast "peaking"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PEAKING>
	<NOTCH public="1" get="inline" set="null" expr="cast &quot;notch&quot;" line="35" static="1">
		<x path="js.html.audio.BiquadFilterType"/>
		<meta>
			<m n=":value"><e>cast "notch"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NOTCH>
	<ALLPASS public="1" get="inline" set="null" expr="cast &quot;allpass&quot;" line="36" static="1">
		<x path="js.html.audio.BiquadFilterType"/>
		<meta>
			<m n=":value"><e>cast "allpass"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ALLPASS>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html.audio._BiquadFilterType.BiquadFilterType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/BiquadFilterType.hx" private="1" module="js.html.audio.BiquadFilterType" extern="1">
		<LOWPASS public="1" get="inline" set="null" expr="cast &quot;lowpass&quot;" line="29" static="1">
			<x path="js.html.audio.BiquadFilterType"/>
			<meta>
				<m n=":value"><e>cast "lowpass"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LOWPASS>
		<HIGHPASS public="1" get="inline" set="null" expr="cast &quot;highpass&quot;" line="30" static="1">
			<x path="js.html.audio.BiquadFilterType"/>
			<meta>
				<m n=":value"><e>cast "highpass"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HIGHPASS>
		<BANDPASS public="1" get="inline" set="null" expr="cast &quot;bandpass&quot;" line="31" static="1">
			<x path="js.html.audio.BiquadFilterType"/>
			<meta>
				<m n=":value"><e>cast "bandpass"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BANDPASS>
		<LOWSHELF public="1" get="inline" set="null" expr="cast &quot;lowshelf&quot;" line="32" static="1">
			<x path="js.html.audio.BiquadFilterType"/>
			<meta>
				<m n=":value"><e>cast "lowshelf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LOWSHELF>
		<HIGHSHELF public="1" get="inline" set="null" expr="cast &quot;highshelf&quot;" line="33" static="1">
			<x path="js.html.audio.BiquadFilterType"/>
			<meta>
				<m n=":value"><e>cast "highshelf"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HIGHSHELF>
		<PEAKING public="1" get="inline" set="null" expr="cast &quot;peaking&quot;" line="34" static="1">
			<x path="js.html.audio.BiquadFilterType"/>
			<meta>
				<m n=":value"><e>cast "peaking"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PEAKING>
		<NOTCH public="1" get="inline" set="null" expr="cast &quot;notch&quot;" line="35" static="1">
			<x path="js.html.audio.BiquadFilterType"/>
			<meta>
				<m n=":value"><e>cast "notch"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NOTCH>
		<ALLPASS public="1" get="inline" set="null" expr="cast &quot;allpass&quot;" line="36" static="1">
			<x path="js.html.audio.BiquadFilterType"/>
			<meta>
				<m n=":value"><e>cast "allpass"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ALLPASS>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="js.html.audio.ChannelCountMode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/ChannelCountMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.audio._ChannelCountMode.ChannelCountMode_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/ChannelCountMode.hx" private="1" module="js.html.audio.ChannelCountMode" extern="1">
	<MAX public="1" get="inline" set="null" expr="cast &quot;max&quot;" line="29" static="1">
		<x path="js.html.audio.ChannelCountMode"/>
		<meta>
			<m n=":value"><e>cast "max"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MAX>
	<CLAMPED_MAX public="1" get="inline" set="null" expr="cast &quot;clamped-max&quot;" line="30" static="1">
		<x path="js.html.audio.ChannelCountMode"/>
		<meta>
			<m n=":value"><e>cast "clamped-max"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CLAMPED_MAX>
	<EXPLICIT public="1" get="inline" set="null" expr="cast &quot;explicit&quot;" line="31" static="1">
		<x path="js.html.audio.ChannelCountMode"/>
		<meta>
			<m n=":value"><e>cast "explicit"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EXPLICIT>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html.audio._ChannelCountMode.ChannelCountMode_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/ChannelCountMode.hx" private="1" module="js.html.audio.ChannelCountMode" extern="1">
		<MAX public="1" get="inline" set="null" expr="cast &quot;max&quot;" line="29" static="1">
			<x path="js.html.audio.ChannelCountMode"/>
			<meta>
				<m n=":value"><e>cast "max"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MAX>
		<CLAMPED_MAX public="1" get="inline" set="null" expr="cast &quot;clamped-max&quot;" line="30" static="1">
			<x path="js.html.audio.ChannelCountMode"/>
			<meta>
				<m n=":value"><e>cast "clamped-max"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CLAMPED_MAX>
		<EXPLICIT public="1" get="inline" set="null" expr="cast &quot;explicit&quot;" line="31" static="1">
			<x path="js.html.audio.ChannelCountMode"/>
			<meta>
				<m n=":value"><e>cast "explicit"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EXPLICIT>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="js.html.audio.ChannelInterpretation" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/ChannelInterpretation.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.audio._ChannelInterpretation.ChannelInterpretation_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/ChannelInterpretation.hx" private="1" module="js.html.audio.ChannelInterpretation" extern="1">
	<SPEAKERS public="1" get="inline" set="null" expr="cast &quot;speakers&quot;" line="29" static="1">
		<x path="js.html.audio.ChannelInterpretation"/>
		<meta>
			<m n=":value"><e>cast "speakers"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SPEAKERS>
	<DISCRETE public="1" get="inline" set="null" expr="cast &quot;discrete&quot;" line="30" static="1">
		<x path="js.html.audio.ChannelInterpretation"/>
		<meta>
			<m n=":value"><e>cast "discrete"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DISCRETE>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html.audio._ChannelInterpretation.ChannelInterpretation_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/ChannelInterpretation.hx" private="1" module="js.html.audio.ChannelInterpretation" extern="1">
		<SPEAKERS public="1" get="inline" set="null" expr="cast &quot;speakers&quot;" line="29" static="1">
			<x path="js.html.audio.ChannelInterpretation"/>
			<meta>
				<m n=":value"><e>cast "speakers"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SPEAKERS>
		<DISCRETE public="1" get="inline" set="null" expr="cast &quot;discrete&quot;" line="30" static="1">
			<x path="js.html.audio.ChannelInterpretation"/>
			<meta>
				<m n=":value"><e>cast "discrete"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DISCRETE>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.audio.ChannelMergerNode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/ChannelMergerNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<meta><m n=":native"><e>"ChannelMergerNode"</e></m></meta>
	</class>
	<class path="js.html.audio.ChannelSplitterNode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/ChannelSplitterNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<meta><m n=":native"><e>"ChannelSplitterNode"</e></m></meta>
	</class>
	<class path="js.html.audio.ConvolverNode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/ConvolverNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<buffer public="1">
			<c path="js.html.audio.AudioBuffer"/>
			<haxe_doc>A mono, stereo, or 4-channel `AudioBuffer` containing the (possibly multichannel) impulse response used by the `ConvolverNode` to create the reverb effect.</haxe_doc>
		</buffer>
		<normalize public="1">
			<x path="Bool"/>
			<haxe_doc>A boolean that controls whether the impulse response from the buffer will be scaled by an equal-power normalization when the `buffer` attribute is set, or not.</haxe_doc>
		</normalize>
		<haxe_doc><![CDATA[The `ConvolverNode` interface is an `AudioNode` that performs a Linear Convolution on a given `AudioBuffer`, often used to achieve a reverb effect. A `ConvolverNode` always has exactly one input and one output.

	Documentation [ConvolverNode](https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode>]]></haxe_doc>
		<meta><m n=":native"><e>"ConvolverNode"</e></m></meta>
	</class>
	<class path="js.html.audio.DelayNode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/DelayNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<delayTime public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is an a-rate `AudioParam` representing the amount of delay to apply.</haxe_doc>
		</delayTime>
		<haxe_doc><![CDATA[Documentation [DelayNode](https://developer.mozilla.org/en-US/docs/Web/API/DelayNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DelayNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DelayNode>]]></haxe_doc>
		<meta><m n=":native"><e>"DelayNode"</e></m></meta>
	</class>
	<abstract path="js.html.audio.DistanceModelType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/DistanceModelType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.audio._DistanceModelType.DistanceModelType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/DistanceModelType.hx" private="1" module="js.html.audio.DistanceModelType" extern="1">
	<LINEAR public="1" get="inline" set="null" expr="cast &quot;linear&quot;" line="29" static="1">
		<x path="js.html.audio.DistanceModelType"/>
		<meta>
			<m n=":value"><e>cast "linear"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LINEAR>
	<INVERSE public="1" get="inline" set="null" expr="cast &quot;inverse&quot;" line="30" static="1">
		<x path="js.html.audio.DistanceModelType"/>
		<meta>
			<m n=":value"><e>cast "inverse"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</INVERSE>
	<EXPONENTIAL public="1" get="inline" set="null" expr="cast &quot;exponential&quot;" line="31" static="1">
		<x path="js.html.audio.DistanceModelType"/>
		<meta>
			<m n=":value"><e>cast "exponential"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EXPONENTIAL>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html.audio._DistanceModelType.DistanceModelType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/DistanceModelType.hx" private="1" module="js.html.audio.DistanceModelType" extern="1">
		<LINEAR public="1" get="inline" set="null" expr="cast &quot;linear&quot;" line="29" static="1">
			<x path="js.html.audio.DistanceModelType"/>
			<meta>
				<m n=":value"><e>cast "linear"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LINEAR>
		<INVERSE public="1" get="inline" set="null" expr="cast &quot;inverse&quot;" line="30" static="1">
			<x path="js.html.audio.DistanceModelType"/>
			<meta>
				<m n=":value"><e>cast "inverse"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</INVERSE>
		<EXPONENTIAL public="1" get="inline" set="null" expr="cast &quot;exponential&quot;" line="31" static="1">
			<x path="js.html.audio.DistanceModelType"/>
			<meta>
				<m n=":value"><e>cast "exponential"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EXPONENTIAL>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.audio.DynamicsCompressorNode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/DynamicsCompressorNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<threshold public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is a `AudioParam` representing the decibel value above which the compression will start taking effect.</haxe_doc>
		</threshold>
		<knee public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is a `AudioParam` containing a decibel value representing the range above the threshold where the curve smoothly transitions to the compressed portion.</haxe_doc>
		</knee>
		<ratio public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is a `AudioParam` representing the amount of change, in dB, needed in the input for a 1 dB change in the output.</haxe_doc>
		</ratio>
		<reduction public="1" set="null">
			<x path="Float"/>
			<haxe_doc>Is a `float `representing the amount of gain reduction currently applied by the compressor to the signal.</haxe_doc>
		</reduction>
		<attack public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is a `AudioParam` representing the amount of time, in seconds, required to reduce the gain by 10 dB.</haxe_doc>
		</attack>
		<release public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is a `AudioParam` representing the amount of time, in seconds, required to increase the gain by 10 dB.</haxe_doc>
		</release>
		<haxe_doc><![CDATA[Inherits properties from its parent, `AudioNode`.

	Documentation [DynamicsCompressorNode](https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode>]]></haxe_doc>
		<meta><m n=":native"><e>"DynamicsCompressorNode"</e></m></meta>
	</class>
	<class path="js.html.audio.GainNode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/GainNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<gain public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is an a-rate `AudioParam` representing the amount of gain to apply.</haxe_doc>
		</gain>
		<haxe_doc><![CDATA[The gain is a unitless value, changing with time, that is multiplied to each corresponding sample of all input channels. If modified, the new gain is applied using a de-zippering algorithm in order to prevent unaesthetic 'clicks' from appearing in the resulting audio.

	Documentation [GainNode](https://developer.mozilla.org/en-US/docs/Web/API/GainNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/GainNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/GainNode>]]></haxe_doc>
		<meta><m n=":native"><e>"GainNode"</e></m></meta>
	</class>
	<class path="js.html.audio.MediaElementAudioSourceNode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/MediaElementAudioSourceNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<haxe_doc><![CDATA[A `MediaElementSourceNode` has no inputs and exactly one output, and is created using the `AudioContext.createMediaElementSource` method. The amount of channels in the output equals the number of channels of the audio referenced by the `HTMLMediaElement` used in the creation of the node, or is 1 if the `HTMLMediaElement` has no audio.

	Documentation [MediaElementAudioSourceNode](https://developer.mozilla.org/en-US/docs/Web/API/MediaElementAudioSourceNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaElementAudioSourceNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaElementAudioSourceNode>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaElementAudioSourceNode"</e></m></meta>
	</class>
	<class path="js.html.audio.MediaStreamAudioDestinationNode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/MediaStreamAudioDestinationNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<stream public="1" set="null">
			<c path="js.html.MediaStream"/>
			<haxe_doc>Is a `MediaStream` containing a single `AudioMediaStreamTrack` with the same number of channels as the node itself. You can use this property to get a stream out of the audio graph and feed it into another construct, such as a Media Recorder.</haxe_doc>
		</stream>
		<haxe_doc><![CDATA[Inherits properties from its parent, `AudioNode`.

	Documentation [MediaStreamAudioDestinationNode](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioDestinationNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioDestinationNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioDestinationNode>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaStreamAudioDestinationNode"</e></m></meta>
	</class>
	<class path="js.html.audio.MediaStreamAudioSourceNode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/MediaStreamAudioSourceNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<haxe_doc><![CDATA[A `MediaElementSourceNode` has no inputs and exactly one output, and is created using the `AudioContext.createMediaStreamSource` method. The amount of channels in the output equals the number of channels in `AudioMediaStreamTrack`. If there is no valid media stream, then the number of output channels will be one silent channel.

	Documentation [MediaStreamAudioSourceNode](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioSourceNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioSourceNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioSourceNode>]]></haxe_doc>
		<meta><m n=":native"><e>"MediaStreamAudioSourceNode"</e></m></meta>
	</class>
	<class path="js.html.audio.OfflineAudioCompletionEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/OfflineAudioCompletionEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<renderedBuffer public="1" set="null"><c path="js.html.audio.AudioBuffer"/></renderedBuffer>
		<haxe_doc><![CDATA[The Web Audio API `OfflineAudioCompletionEvent` interface represents events that occur when the processing of an `OfflineAudioContext` is terminated. The `complete` event implements this interface.

	Documentation [OfflineAudioCompletionEvent](https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioCompletionEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioCompletionEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioCompletionEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"OfflineAudioCompletionEvent"</e></m></meta>
	</class>
	<class path="js.html.audio.OfflineAudioContext" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/OfflineAudioContext.hx" extern="1">
		<extends path="js.html.audio.AudioContext"/>
		<oncomplete public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Is an `EventHandler` called when processing is terminated, that is when the `complete` event (of type `OfflineAudioCompletionEvent`) is raised, after the event-based version of `OfflineAudioContext.startRendering()` is used.</haxe_doc>
		</oncomplete>
		<startRendering public="1" set="method">
			<f a=""><c path="js.Promise"><c path="js.html.audio.AudioBuffer"/></c></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</startRendering>
		<new public="1" set="method">
			<f a="numberOfChannels:length:sampleRate">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `OfflineAudioContext` interface is an `AudioContext` interface representing an audio-processing graph built from linked together `AudioNode`s. In contrast with a standard `AudioContext`, an `OfflineAudioContext` doesn't render the audio to the device hardware; instead, it generates it, as fast as it can, and outputs the result to an `AudioBuffer`.

	Documentation [OfflineAudioContext](https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext>]]></haxe_doc>
		<meta><m n=":native"><e>"OfflineAudioContext"</e></m></meta>
	</class>
	<class path="js.html.audio.OscillatorNode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/OscillatorNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<type public="1">
			<x path="js.html.audio.OscillatorType"/>
			<haxe_doc>Represents the shape of the oscillator wave generated. Different waves will produce different tones.</haxe_doc>
		</type>
		<frequency public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>An a-rate `AudioParam` representing the frequency of oscillation in hertz (though the AudioParam` returned is read-only, the value it represents is not.)</haxe_doc>
		</frequency>
		<detune public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>An a-rate `AudioParam` representing detuning of oscillation in cents (though the AudioParam` returned is read-only, the value it represents is not.)</haxe_doc>
		</detune>
		<onended public="1"><x path="haxe.Function"/></onended>
		<start public="1" set="method">
			<f a="?when" v="0.0">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ when : 0.0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</start>
		<stop public="1" set="method">
			<f a="?when" v="0.0">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ when : 0.0 }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</stop>
		<setPeriodicWave public="1" set="method">
			<f a="periodicWave">
				<c path="js.html.audio.PeriodicWave"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Used to point to a `PeriodicWave` defining a periodic waveform that can be used to shape the oscillator's output, when `type = "custom"` is used. This replaces the now-obsolete `OscillatorNode.setWaveTable`.</haxe_doc>
		</setPeriodicWave>
		<haxe_doc><![CDATA[The `OscillatorNode` interface represents a periodic waveform, like a sine wave. It is an `AudioNode` audio-processing module that causes a given frequency of sine wave to be created — in effect, a constant tone.

	Documentation [OscillatorNode](https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode>]]></haxe_doc>
		<meta><m n=":native"><e>"OscillatorNode"</e></m></meta>
	</class>
	<abstract path="js.html.audio.OscillatorType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/OscillatorType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.audio._OscillatorType.OscillatorType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/OscillatorType.hx" private="1" module="js.html.audio.OscillatorType" extern="1">
	<SINE public="1" get="inline" set="null" expr="cast &quot;sine&quot;" line="29" static="1">
		<x path="js.html.audio.OscillatorType"/>
		<meta>
			<m n=":value"><e>cast "sine"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SINE>
	<SQUARE public="1" get="inline" set="null" expr="cast &quot;square&quot;" line="30" static="1">
		<x path="js.html.audio.OscillatorType"/>
		<meta>
			<m n=":value"><e>cast "square"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SQUARE>
	<SAWTOOTH public="1" get="inline" set="null" expr="cast &quot;sawtooth&quot;" line="31" static="1">
		<x path="js.html.audio.OscillatorType"/>
		<meta>
			<m n=":value"><e>cast "sawtooth"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SAWTOOTH>
	<TRIANGLE public="1" get="inline" set="null" expr="cast &quot;triangle&quot;" line="32" static="1">
		<x path="js.html.audio.OscillatorType"/>
		<meta>
			<m n=":value"><e>cast "triangle"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TRIANGLE>
	<CUSTOM public="1" get="inline" set="null" expr="cast &quot;custom&quot;" line="33" static="1">
		<x path="js.html.audio.OscillatorType"/>
		<meta>
			<m n=":value"><e>cast "custom"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CUSTOM>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html.audio._OscillatorType.OscillatorType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/OscillatorType.hx" private="1" module="js.html.audio.OscillatorType" extern="1">
		<SINE public="1" get="inline" set="null" expr="cast &quot;sine&quot;" line="29" static="1">
			<x path="js.html.audio.OscillatorType"/>
			<meta>
				<m n=":value"><e>cast "sine"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SINE>
		<SQUARE public="1" get="inline" set="null" expr="cast &quot;square&quot;" line="30" static="1">
			<x path="js.html.audio.OscillatorType"/>
			<meta>
				<m n=":value"><e>cast "square"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SQUARE>
		<SAWTOOTH public="1" get="inline" set="null" expr="cast &quot;sawtooth&quot;" line="31" static="1">
			<x path="js.html.audio.OscillatorType"/>
			<meta>
				<m n=":value"><e>cast "sawtooth"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SAWTOOTH>
		<TRIANGLE public="1" get="inline" set="null" expr="cast &quot;triangle&quot;" line="32" static="1">
			<x path="js.html.audio.OscillatorType"/>
			<meta>
				<m n=":value"><e>cast "triangle"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TRIANGLE>
		<CUSTOM public="1" get="inline" set="null" expr="cast &quot;custom&quot;" line="33" static="1">
			<x path="js.html.audio.OscillatorType"/>
			<meta>
				<m n=":value"><e>cast "custom"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CUSTOM>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="js.html.audio.OverSampleType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/OverSampleType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.audio._OverSampleType.OverSampleType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/OverSampleType.hx" private="1" module="js.html.audio.OverSampleType" extern="1">
	<NONE public="1" get="inline" set="null" expr="cast &quot;none&quot;" line="29" static="1">
		<x path="js.html.audio.OverSampleType"/>
		<meta>
			<m n=":value"><e>cast "none"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NONE>
	<_2X public="1" get="inline" set="null" expr="cast &quot;2x&quot;" line="30" static="1">
		<x path="js.html.audio.OverSampleType"/>
		<meta>
			<m n=":value"><e>cast "2x"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</_2X>
	<_4X public="1" get="inline" set="null" expr="cast &quot;4x&quot;" line="31" static="1">
		<x path="js.html.audio.OverSampleType"/>
		<meta>
			<m n=":value"><e>cast "4x"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</_4X>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html.audio._OverSampleType.OverSampleType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/OverSampleType.hx" private="1" module="js.html.audio.OverSampleType" extern="1">
		<NONE public="1" get="inline" set="null" expr="cast &quot;none&quot;" line="29" static="1">
			<x path="js.html.audio.OverSampleType"/>
			<meta>
				<m n=":value"><e>cast "none"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NONE>
		<_2X public="1" get="inline" set="null" expr="cast &quot;2x&quot;" line="30" static="1">
			<x path="js.html.audio.OverSampleType"/>
			<meta>
				<m n=":value"><e>cast "2x"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</_2X>
		<_4X public="1" get="inline" set="null" expr="cast &quot;4x&quot;" line="31" static="1">
			<x path="js.html.audio.OverSampleType"/>
			<meta>
				<m n=":value"><e>cast "4x"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</_4X>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.audio.PannerNode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/PannerNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<panningModel public="1">
			<x path="js.html.audio.PanningModelType"/>
			<haxe_doc>An enumerated value determining which spatialisation algorithm to use to position the audio in 3D space.</haxe_doc>
		</panningModel>
		<distanceModel public="1">
			<x path="js.html.audio.DistanceModelType"/>
			<haxe_doc>An enumerated value determining which algorithm to use to reduce the volume of the audio source as it moves away from the listener.</haxe_doc>
		</distanceModel>
		<refDistance public="1">
			<x path="Float"/>
			<haxe_doc>A double value representing the reference distance for reducing volume as the audio source moves further from the listener.</haxe_doc>
		</refDistance>
		<maxDistance public="1">
			<x path="Float"/>
			<haxe_doc>A double value representing the maximum distance between the audio source and the listener, after which the volume is not reduced any further.</haxe_doc>
		</maxDistance>
		<rolloffFactor public="1">
			<x path="Float"/>
			<haxe_doc>A double value describing how quickly the volume is reduced as the source moves away from the listener. This value is used by all distance models.</haxe_doc>
		</rolloffFactor>
		<coneInnerAngle public="1">
			<x path="Float"/>
			<haxe_doc>Is a double value describing the angle, in degrees, of a cone inside of which there will be no volume reduction.</haxe_doc>
		</coneInnerAngle>
		<coneOuterAngle public="1">
			<x path="Float"/>
			<haxe_doc>A double value describing the angle, in degrees, of a cone outside of which the volume will be reduced by a constant value, defined by the `coneOuterGain` attribute.</haxe_doc>
		</coneOuterAngle>
		<coneOuterGain public="1">
			<x path="Float"/>
			<haxe_doc>A double value describing the amount of volume reduction outside the cone defined by the `coneOuterAngle` attribute. Its default value is `0`, meaning that no sound can be heard.</haxe_doc>
		</coneOuterGain>
		<setPosition public="1" set="method">
			<f a="x:y:z">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Defines the position of the audio source relative to the listener (represented by an `AudioListener` object stored in the `AudioContext.listener` attribute.)</haxe_doc>
		</setPosition>
		<setOrientation public="1" set="method">
			<f a="x:y:z">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Defines the direction the audio source is playing in.</haxe_doc>
		</setOrientation>
		<setVelocity public="1" set="method">
			<f a="x:y:z">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Defines the velocity vector of the audio source — how fast it is moving and in what direction. In a previous version of the specification, the `PannerNode` had a velocity that could pitch up or down `AudioBufferSourceNode`s connected downstream. This feature was not clearly specified and had a number of issues, so it was removed from the specification.</haxe_doc>
		</setVelocity>
		<haxe_doc><![CDATA[A `PannerNode` always has exactly one input and one output: the input can be mono or stereo but the output is always stereo (2 channels); you can't have panning effects without at least two audio channels!

	Documentation [PannerNode](https://developer.mozilla.org/en-US/docs/Web/API/PannerNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PannerNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PannerNode>]]></haxe_doc>
		<meta><m n=":native"><e>"PannerNode"</e></m></meta>
	</class>
	<abstract path="js.html.audio.PanningModelType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/PanningModelType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.audio._PanningModelType.PanningModelType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/PanningModelType.hx" private="1" module="js.html.audio.PanningModelType" extern="1">
	<EQUALPOWER public="1" get="inline" set="null" expr="cast &quot;equalpower&quot;" line="29" static="1">
		<x path="js.html.audio.PanningModelType"/>
		<meta>
			<m n=":value"><e>cast "equalpower"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EQUALPOWER>
	<HRTF public="1" get="inline" set="null" expr="cast &quot;HRTF&quot;" line="30" static="1">
		<x path="js.html.audio.PanningModelType"/>
		<meta>
			<m n=":value"><e>cast "HRTF"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HRTF>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html.audio._PanningModelType.PanningModelType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/PanningModelType.hx" private="1" module="js.html.audio.PanningModelType" extern="1">
		<EQUALPOWER public="1" get="inline" set="null" expr="cast &quot;equalpower&quot;" line="29" static="1">
			<x path="js.html.audio.PanningModelType"/>
			<meta>
				<m n=":value"><e>cast "equalpower"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EQUALPOWER>
		<HRTF public="1" get="inline" set="null" expr="cast &quot;HRTF&quot;" line="30" static="1">
			<x path="js.html.audio.PanningModelType"/>
			<meta>
				<m n=":value"><e>cast "HRTF"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HRTF>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.audio.PeriodicWave" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/PeriodicWave.hx" extern="1">
		<haxe_doc><![CDATA[`PeriodicWave` has no inputs or outputs; it is used to create custom oscillators via `OscillatorNode.setPeriodicWave`. The `PeriodicWave` itself is created/returned by `AudioContext.createPeriodicWave`.

	Documentation [PeriodicWave](https://developer.mozilla.org/en-US/docs/Web/API/PeriodicWave) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/PeriodicWave$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/PeriodicWave>]]></haxe_doc>
		<meta><m n=":native"><e>"PeriodicWave"</e></m></meta>
	</class>
	<class path="js.html.audio.ScriptProcessorNode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/ScriptProcessorNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<onaudioprocess public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Represents the `EventHandler` to be called.</haxe_doc>
		</onaudioprocess>
		<bufferSize public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns an integer representing both the input and output buffer size. Its value can be a power of 2 value in the range `256`–`16384`.</haxe_doc>
		</bufferSize>
		<haxe_doc><![CDATA[Documentation [ScriptProcessorNode](https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode>]]></haxe_doc>
		<meta><m n=":native"><e>"ScriptProcessorNode"</e></m></meta>
	</class>
	<class path="js.html.audio.StereoPannerNode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/StereoPannerNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<pan public="1" set="null">
			<c path="js.html.audio.AudioParam"/>
			<haxe_doc>Is an a-rate `AudioParam` representing the amount of panning to apply.</haxe_doc>
		</pan>
		<haxe_doc><![CDATA[The `pan` property takes a unitless value between `-1` (full left pan) and `1` (full right pan). This interface was introduced as a much simpler way to apply a simple panning effect than having to use a full `PannerNode`.

	Documentation [StereoPannerNode](https://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode>]]></haxe_doc>
		<meta><m n=":native"><e>"StereoPannerNode"</e></m></meta>
	</class>
	<class path="js.html.audio.WaveShaperNode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/audio/WaveShaperNode.hx" extern="1">
		<extends path="js.html.audio.AudioNode"/>
		<curve public="1">
			<c path="js.html.Float32Array"/>
			<haxe_doc>Is a `Float32Array` of numbers describing the distortion to apply.</haxe_doc>
		</curve>
		<oversample public="1">
			<x path="js.html.audio.OverSampleType"/>
			<haxe_doc>Is an enumerated value indicating if oversampling must be used. Oversampling is a technique for creating more samples (up-sampling) before applying the distortion effect to the audio signal.</haxe_doc>
		</oversample>
		<haxe_doc><![CDATA[A `WaveShaperNode` always has exactly one input and one output.

	Documentation [WaveShaperNode](https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode>]]></haxe_doc>
		<meta><m n=":native"><e>"WaveShaperNode"</e></m></meta>
	</class>
	<class path="js.html.compat.ArrayBuffer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/compat/ArrayBuffer.hx">
		<sliceImpl set="method" line="48" static="1"><f a="begin:?end">
	<t path="Null"><x path="Int"/></t>
	<x path="Int"/>
	<c path="js.html.ArrayBuffer"/>
</f></sliceImpl>
		<byteLength public="1"><x path="Int"/></byteLength>
		<a><c path="Array"><x path="Int"/></c></a>
		<slice public="1" set="method" line="44"><f a="begin:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.compat.ArrayBuffer"/>
</f></slice>
		<new public="1" set="method" line="31"><f a="?a">
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":ifFeature"><e>"js.html.ArrayBuffer.*"</e></m></meta>
	</class>
	<class path="js.html.compat.DataView" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/compat/DataView.hx">
		<buf><c path="js.html.compat.ArrayBuffer"/></buf>
		<offset><x path="Int"/></offset>
		<length><x path="Int"/></length>
		<byteLength public="1" set="null"><x path="Int"/></byteLength>
		<byteOffset public="1" set="null"><x path="Int"/></byteOffset>
		<buffer public="1" set="null"><c path="js.html.compat.ArrayBuffer"/></buffer>
		<getInt8 public="1" set="method" line="50"><f a="byteOffset">
	<x path="Int"/>
	<x path="Int"/>
</f></getInt8>
		<getUint8 public="1" set="method" line="55"><f a="byteOffset">
	<x path="Int"/>
	<x path="Int"/>
</f></getUint8>
		<getInt16 public="1" set="method" line="59"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getInt16>
		<getUint16 public="1" set="method" line="64"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getUint16>
		<getInt32 public="1" set="method" line="68"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getInt32>
		<getUint32 public="1" set="method" line="77"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></getUint32>
		<getFloat32 public="1" set="method" line="82"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></getFloat32>
		<getFloat64 public="1" set="method" line="86"><f a="byteOffset:?littleEndian">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></getFloat64>
		<setInt8 public="1" set="method" line="92"><f a="byteOffset:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setInt8>
		<setUint8 public="1" set="method" line="96"><f a="byteOffset:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setUint8>
		<setInt16 public="1" set="method" line="100"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setInt16>
		<setUint16 public="1" set="method" line="104"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setUint16>
		<setInt32 public="1" set="method" line="115"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setInt32>
		<setUint32 public="1" set="method" line="119"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setUint32>
		<setFloat32 public="1" set="method" line="134"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setFloat32>
		<setFloat64 public="1" set="method" line="138"><f a="byteOffset:value:?littleEndian">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setFloat64>
		<new public="1" set="method" line="39"><f a="buffer:?byteOffset:?byteLength">
	<c path="js.html.compat.ArrayBuffer"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":ifFeature"><e>"js.html.DataView.*"</e></m>
			<m n=":access"><e>js.html.compat.ArrayBuffer</e></m>
		</meta>
	</class>
	<class path="js.html.compat.Float32Array" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/compat/Float32Array.hx">
		<BYTES_PER_ELEMENT expr="4" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<_new set="method" line="32" static="1">
			<f a="?arg1:?offset:?length">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</_new>
		<_set set="method" line="83" static="1"><f a="?arg:?offset">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></_set>
		<_subarray set="method" line="100" static="1"><f a="start:?end">
	<x path="Int"/>
	<x path="Int"/>
	<a><byteOffset><x path="Int"/></byteOffset></a>
</f></_subarray>
		<meta><m n=":ifFeature"><e>"js.html.Float32Array.*"</e></m></meta>
	</class>
	<class path="js.html.compat.Float64Array" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/compat/Float64Array.hx">
		<BYTES_PER_ELEMENT expr="8" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</BYTES_PER_ELEMENT>
		<_new set="method" line="32" static="1">
			<f a="?arg1:?offset:?length">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</_new>
		<_set set="method" line="90" static="1"><f a="?arg:?offset">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></_set>
		<_subarray set="method" line="107" static="1"><f a="start:?end">
	<x path="Int"/>
	<x path="Int"/>
	<a><byteOffset><x path="Int"/></byteOffset></a>
</f></_subarray>
		<meta><m n=":ifFeature"><e>"js.html.Float64Array.*"</e></m></meta>
	</class>
	<class path="js.html.compat.Uint8Array" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/compat/Uint8Array.hx">
		<BYTES_PER_ELEMENT expr="1" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</BYTES_PER_ELEMENT>
		<_new set="method" line="32" static="1">
			<f a="?arg1:?offset:?length">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</_new>
		<_set set="method" line="74" static="1"><f a="?arg:?offset">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></_set>
		<_subarray set="method" line="91" static="1"><f a="start:?end">
	<x path="Int"/>
	<x path="Int"/>
	<a><byteOffset><x path="Int"/></byteOffset></a>
</f></_subarray>
		<meta><m n=":ifFeature"><e>"js.html.Uint8Array.*"</e></m></meta>
	</class>
	<class path="js.html.idb.Cursor" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/idb/Cursor.hx" extern="1">
		<source public="1" set="null">
			<x path="haxe.extern.EitherType">
				<c path="js.html.idb.ObjectStore"/>
				<c path="js.html.idb.Index"/>
			</x>
			<haxe_doc>Returns the `IDBObjectStore` or `IDBIndex` that the cursor is iterating. This function never returns null or throws an exception, even if the cursor is currently being iterated, has iterated past its end, or its transaction is not active.</haxe_doc>
		</source>
		<direction public="1" set="null">
			<x path="js.html.idb.CursorDirection"/>
			<haxe_doc>Returns the direction of traversal of the cursor. See Constants for possible values.</haxe_doc>
		</direction>
		<key public="1" set="null">
			<d/>
			<haxe_doc>Returns the key for the record at the cursor's position. If the cursor is outside its range, this is set to `undefined`. The cursor's key can be any data type.</haxe_doc>
		</key>
		<primaryKey public="1" set="null">
			<d/>
			<haxe_doc>Returns the cursor's current effective primary key. If the cursor is currently being iterated or has iterated outside its range, this is set to `undefined`. The cursor's primary key can be any data type.</haxe_doc>
		</primaryKey>
		<update public="1" set="method">
			<f a="value">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</update>
		<advance public="1" set="method">
			<f a="count">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</advance>
		<continue_ public="1" set="method">
			<f a="?key">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"continue"</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</continue_>
		<delete_ public="1" set="method">
			<f a=""><c path="js.html.idb.Request"/></f>
			<meta><m n=":native"><e>"delete"</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</delete_>
		<haxe_doc><![CDATA[The `IDBCursor` interface of the IndexedDB API represents a cursor for traversing or iterating over multiple records in a database.

	Documentation [IDBCursor](https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBCursor"</e></m></meta>
	</class>
	<abstract path="js.html.idb.CursorDirection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/idb/CursorDirection.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.idb._CursorDirection.CursorDirection_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/idb/CursorDirection.hx" private="1" module="js.html.idb.CursorDirection" extern="1">
	<NEXT public="1" get="inline" set="null" expr="cast &quot;next&quot;" line="29" static="1">
		<x path="js.html.idb.CursorDirection"/>
		<meta>
			<m n=":value"><e>cast "next"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NEXT>
	<NEXTUNIQUE public="1" get="inline" set="null" expr="cast &quot;nextunique&quot;" line="30" static="1">
		<x path="js.html.idb.CursorDirection"/>
		<meta>
			<m n=":value"><e>cast "nextunique"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NEXTUNIQUE>
	<PREV public="1" get="inline" set="null" expr="cast &quot;prev&quot;" line="31" static="1">
		<x path="js.html.idb.CursorDirection"/>
		<meta>
			<m n=":value"><e>cast "prev"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PREV>
	<PREVUNIQUE public="1" get="inline" set="null" expr="cast &quot;prevunique&quot;" line="32" static="1">
		<x path="js.html.idb.CursorDirection"/>
		<meta>
			<m n=":value"><e>cast "prevunique"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PREVUNIQUE>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html.idb._CursorDirection.CursorDirection_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/idb/CursorDirection.hx" private="1" module="js.html.idb.CursorDirection" extern="1">
		<NEXT public="1" get="inline" set="null" expr="cast &quot;next&quot;" line="29" static="1">
			<x path="js.html.idb.CursorDirection"/>
			<meta>
				<m n=":value"><e>cast "next"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NEXT>
		<NEXTUNIQUE public="1" get="inline" set="null" expr="cast &quot;nextunique&quot;" line="30" static="1">
			<x path="js.html.idb.CursorDirection"/>
			<meta>
				<m n=":value"><e>cast "nextunique"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NEXTUNIQUE>
		<PREV public="1" get="inline" set="null" expr="cast &quot;prev&quot;" line="31" static="1">
			<x path="js.html.idb.CursorDirection"/>
			<meta>
				<m n=":value"><e>cast "prev"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PREV>
		<PREVUNIQUE public="1" get="inline" set="null" expr="cast &quot;prevunique&quot;" line="32" static="1">
			<x path="js.html.idb.CursorDirection"/>
			<meta>
				<m n=":value"><e>cast "prevunique"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PREVUNIQUE>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.idb.CursorWithValue" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/idb/CursorWithValue.hx" extern="1">
		<extends path="js.html.idb.Cursor"/>
		<value public="1" set="null">
			<d/>
			<haxe_doc>Returns the value of the current cursor.</haxe_doc>
		</value>
		<haxe_doc><![CDATA[Documentation [IDBCursorWithValue](https://developer.mozilla.org/en-US/docs/Web/API/IDBCursorWithValue) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBCursorWithValue$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBCursorWithValue>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBCursorWithValue"</e></m></meta>
	</class>
	<class path="js.html.idb.Database" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/idb/Database.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>A `DOMString` that contains the name of the connected database.</haxe_doc>
		</name>
		<version public="1" set="null">
			<x path="Int"/>
			<haxe_doc>A 64-bit integer that contains the version of the connected database. When a database is first created, this attribute is an empty string.</haxe_doc>
		</version>
		<objectStoreNames public="1" set="null">
			<c path="js.html.DOMStringList"/>
			<haxe_doc>A `DOMStringList` that contains a list of the names of the object stores currently in the connected database.</haxe_doc>
		</objectStoreNames>
		<onabort public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fires when access of the database is aborted.</haxe_doc>
		</onabort>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fires when access to the database fails.</haxe_doc>
		</onerror>
		<onversionchange public="1">
			<x path="haxe.Function"/>
			<haxe_doc>Fires when a database structure change (`IDBOpenDBRequest.onupgradeneeded` event or` ``IDBFactory.deleteDatabase()` was requested elsewhere (most probably in another window/tab on the same computer). This is different from the version change transaction (see `IDBVersionChangeEvent`), but it is related.</haxe_doc>
		</onversionchange>
		<createObjectStore public="1" set="method">
			<f a="name:?optionalParameters">
				<c path="String"/>
				<t path="js.html.idb.ObjectStoreParameters"/>
				<c path="js.html.idb.ObjectStore"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createObjectStore>
		<deleteObjectStore public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</deleteObjectStore>
		<transaction public="1" set="method">
			<f a="storeNames:?mode" v=":&quot;readonly&quot;">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="Array"><c path="String"/></c>
				</x>
				<x path="js.html.idb.TransactionMode"/>
				<c path="js.html.idb.Transaction"/>
			</f>
			<meta><m n=":value"><e>{ mode : "readonly" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</transaction>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Returns immediately and closes the connection to a database in a separate thread.</haxe_doc>
		</close>
		<createMutableFile public="1" set="method">
			<f a="name:?type">
				<c path="String"/>
				<c path="String"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</createMutableFile>
		<haxe_doc><![CDATA[Inherits from: EventTarget

	Documentation [IDBDatabase](https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBDatabase"</e></m></meta>
	</class>
	<class path="js.html.idb.Factory" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/idb/Factory.hx" extern="1">
		<open public="1" set="method">
			<f a="name:?options">
				<c path="String"/>
				<t path="js.html.idb.OpenDBOptions"/>
				<c path="js.html.idb.OpenDBRequest"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><open public="1" set="method">
	<f a="name:version">
		<c path="String"/>
		<x path="Int"/>
		<c path="js.html.idb.OpenDBRequest"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</open></overloads>
		</open>
		<deleteDatabase public="1" set="method">
			<f a="name:?options">
				<c path="String"/>
				<t path="js.html.idb.OpenDBOptions"/>
				<c path="js.html.idb.OpenDBRequest"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</deleteDatabase>
		<cmp public="1" set="method">
			<f a="first:second">
				<d/>
				<d/>
				<x path="Int"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</cmp>
		<haxe_doc><![CDATA[In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. For a full working example, see our To-do Notifications app (view example live.)

	Documentation [IDBFactory](https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBFactory"</e></m></meta>
	</class>
	<class path="js.html.idb.FileHandle" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/idb/FileHandle.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<mutableFile public="1" set="null"><c path="js.html.idb.MutableFile"/></mutableFile>
		<fileHandle public="1" set="null"><c path="js.html.idb.MutableFile"/></fileHandle>
		<mode public="1" set="null"><x path="js.html.FileMode"/></mode>
		<active public="1" set="null"><x path="Bool"/></active>
		<location public="1"><x path="Int"/></location>
		<oncomplete public="1"><x path="haxe.Function"/></oncomplete>
		<onabort public="1"><x path="haxe.Function"/></onabort>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<getMetadata public="1" set="method">
			<f a="?parameters">
				<t path="js.html.idb.FileMetadataParameters"/>
				<c path="js.html.idb.FileRequest"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getMetadata>
		<readAsArrayBuffer public="1" set="method">
			<f a="size">
				<x path="Int"/>
				<c path="js.html.idb.FileRequest"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</readAsArrayBuffer>
		<readAsText public="1" set="method">
			<f a="size:?encoding">
				<x path="Int"/>
				<c path="String"/>
				<c path="js.html.idb.FileRequest"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</readAsText>
		<write public="1" set="method">
			<f a="value">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<x path="haxe.extern.EitherType">
						<c path="js.html.ArrayBuffer"/>
						<x path="haxe.extern.EitherType">
							<c path="js.html.ArrayBufferView"/>
							<c path="js.html.Blob"/>
						</x>
					</x>
				</x>
				<c path="js.html.idb.FileRequest"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</write>
		<append public="1" set="method">
			<f a="value">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<x path="haxe.extern.EitherType">
						<c path="js.html.ArrayBuffer"/>
						<x path="haxe.extern.EitherType">
							<c path="js.html.ArrayBufferView"/>
							<c path="js.html.Blob"/>
						</x>
					</x>
				</x>
				<c path="js.html.idb.FileRequest"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</append>
		<truncate public="1" set="method">
			<f a="?size">
				<x path="Int"/>
				<c path="js.html.idb.FileRequest"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</truncate>
		<flush public="1" set="method">
			<f a=""><c path="js.html.idb.FileRequest"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</flush>
		<abort public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</abort>
		<meta><m n=":native"><e>"IDBFileHandle"</e></m></meta>
	</class>
	<typedef path="js.html.idb.FileMetadataParameters" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/idb/FileMetadataParameters.hx"><a>
	<size>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</size>
	<lastModified>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</lastModified>
</a></typedef>
	<class path="js.html.idb.FileRequest" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/idb/FileRequest.hx" extern="1">
		<extends path="js.html.DOMRequest"/>
		<fileHandle public="1" set="null"><c path="js.html.idb.FileHandle"/></fileHandle>
		<lockedFile public="1" set="null"><c path="js.html.idb.FileHandle"/></lockedFile>
		<onprogress public="1"><x path="haxe.Function"/></onprogress>
		<meta><m n=":native"><e>"IDBFileRequest"</e></m></meta>
	</class>
	<class path="js.html.idb.Index" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/idb/Index.hx" extern="1">
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>The name of this index.</haxe_doc>
		</name>
		<objectStore public="1" set="null">
			<c path="js.html.idb.ObjectStore"/>
			<haxe_doc>The name of the object store referenced by this index.</haxe_doc>
		</objectStore>
		<keyPath public="1" set="null">
			<d/>
			<haxe_doc>The key path of this index. If null, this index is not auto-populated.</haxe_doc>
		</keyPath>
		<multiEntry public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Affects how the index behaves when the result of evaluating the index's key path yields an array. If `true`, there is one record in the index for each item in an array of keys. If `false`, then there is one record for each key that is an array.</haxe_doc>
		</multiEntry>
		<unique public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>If `true`, this index does not allow duplicate values for a key.</haxe_doc>
		</unique>
		<openCursor public="1" set="method">
			<f a="?range:?direction" v=":&quot;next&quot;">
				<d/>
				<x path="js.html.idb.CursorDirection"/>
				<c path="js.html.idb.Request"/>
			</f>
			<meta><m n=":value"><e>{ direction : "next" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</openCursor>
		<openKeyCursor public="1" set="method">
			<f a="?range:?direction" v=":&quot;next&quot;">
				<d/>
				<x path="js.html.idb.CursorDirection"/>
				<c path="js.html.idb.Request"/>
			</f>
			<meta><m n=":value"><e>{ direction : "next" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</openKeyCursor>
		<get public="1" set="method">
			<f a="key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</get>
		<getKey public="1" set="method">
			<f a="key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getKey>
		<count public="1" set="method">
			<f a="?key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</count>
		<getAll public="1" set="method">
			<f a="?key:?limit">
				<d/>
				<x path="Int"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getAll>
		<getAllKeys public="1" set="method">
			<f a="?key:?limit">
				<d/>
				<x path="Int"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getAllKeys>
		<haxe_doc><![CDATA[`IDBIndex` interface of the IndexedDB API provides asynchronous access to an index in a database. An index is a kind of object store for looking up records in another object store, called the referenced object store. You use this interface to retrieve data.

	Documentation [IDBIndex](https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBIndex"</e></m></meta>
	</class>
	<typedef path="js.html.idb.IndexParameters" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/idb/IndexParameters.hx"><a>
	<unique>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</unique>
	<multiEntry>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</multiEntry>
	<locale>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</locale>
</a></typedef>
	<class path="js.html.idb.KeyRange" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/idb/KeyRange.hx" extern="1">
		<only public="1" set="method" static="1">
			<f a="value">
				<d/>
				<c path="js.html.idb.KeyRange"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</only>
		<lowerBound public="1" set="method" static="1">
			<f a="lower:?open" v=":false">
				<d/>
				<x path="Bool"/>
				<c path="js.html.idb.KeyRange"/>
			</f>
			<meta><m n=":value"><e>{ open : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</lowerBound>
		<upperBound public="1" set="method" static="1">
			<f a="upper:?open" v=":false">
				<d/>
				<x path="Bool"/>
				<c path="js.html.idb.KeyRange"/>
			</f>
			<meta><m n=":value"><e>{ open : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</upperBound>
		<bound public="1" set="method" static="1">
			<f a="lower:upper:?lowerOpen:?upperOpen" v="::false:false">
				<d/>
				<d/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.html.idb.KeyRange"/>
			</f>
			<meta><m n=":value"><e>{ upperOpen : false, lowerOpen : false }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</bound>
		<lower public="1" set="null">
			<d/>
			<haxe_doc>Lower bound of the key range.</haxe_doc>
		</lower>
		<upper public="1" set="null">
			<d/>
			<haxe_doc>Upper bound of the key range.</haxe_doc>
		</upper>
		<lowerOpen public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns false if the lower-bound value is included in the key range.</haxe_doc>
		</lowerOpen>
		<upperOpen public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Returns false if the upper-bound value is included in the key range.</haxe_doc>
		</upperOpen>
		<includes public="1" set="method">
			<f a="key">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</includes>
		<haxe_doc><![CDATA[A key range can be a single value or a range with upper and lower bounds or endpoints. If the key range has both upper and lower bounds, then it is bounded; if it has no bounds, it is unbounded. A bounded key range can either be open (the endpoints are excluded) or closed (the endpoints are included). To retrieve all keys within a certain range, you can use the following code constructs:

	Documentation [IDBKeyRange](https://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBKeyRange"</e></m></meta>
	</class>
	<class path="js.html.idb.MutableFile" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/idb/MutableFile.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<name public="1" set="null"><c path="String"/></name>
		<type public="1" set="null"><c path="String"/></type>
		<database public="1" set="null"><c path="js.html.idb.Database"/></database>
		<onabort public="1"><x path="haxe.Function"/></onabort>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<open public="1" set="method">
			<f a="?mode" v="&quot;readonly&quot;">
				<x path="js.html.FileMode"/>
				<c path="js.html.idb.FileHandle"/>
			</f>
			<meta><m n=":value"><e>{ mode : "readonly" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</open>
		<getFile public="1" set="method">
			<f a=""><c path="js.html.DOMRequest"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getFile>
		<haxe_doc><![CDATA[The `IDBMutableFile` interface provides access in read or write mode to a file, dealing with all the necessary locks.

	Documentation [IDBMutableFile](https://developer.mozilla.org/en-US/docs/Web/API/IDBMutableFile) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBMutableFile$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBMutableFile>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBMutableFile"</e></m></meta>
	</class>
	<class path="js.html.idb.ObjectStore" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/idb/ObjectStore.hx" extern="1">
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>The name of this object store.</haxe_doc>
		</name>
		<keyPath public="1" set="null">
			<d/>
			<haxe_doc>The key path of this object store. If this attribute is `null`, the application must provide a key for each modification operation.</haxe_doc>
		</keyPath>
		<indexNames public="1" set="null">
			<c path="js.html.DOMStringList"/>
			<haxe_doc>A list of the names of indexes on objects in this object store.</haxe_doc>
		</indexNames>
		<transaction public="1" set="null">
			<c path="js.html.idb.Transaction"/>
			<haxe_doc>The `IDBTransaction` object to which this object store belongs.</haxe_doc>
		</transaction>
		<autoIncrement public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>The value of the auto increment flag for this object store.</haxe_doc>
		</autoIncrement>
		<put public="1" set="method">
			<f a="value:?key">
				<d/>
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</put>
		<add public="1" set="method">
			<f a="value:?key">
				<d/>
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</add>
		<delete_ public="1" set="method">
			<f a="key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<meta><m n=":native"><e>"delete"</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</delete_>
		<get public="1" set="method">
			<f a="key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</get>
		<clear public="1" set="method">
			<f a=""><c path="js.html.idb.Request"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</clear>
		<openCursor public="1" set="method">
			<f a="?range:?direction" v=":&quot;next&quot;">
				<d/>
				<x path="js.html.idb.CursorDirection"/>
				<c path="js.html.idb.Request"/>
			</f>
			<meta><m n=":value"><e>{ direction : "next" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</openCursor>
		<createIndex public="1" set="method">
			<f a="name:keyPath:?optionalParameters">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<t path="js.html.idb.IndexParameters"/>
				<c path="js.html.idb.Index"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><createIndex public="1" set="method">
	<f a="name:keyPath:?optionalParameters">
		<c path="String"/>
		<c path="String"/>
		<t path="js.html.idb.IndexParameters"/>
		<c path="js.html.idb.Index"/>
	</f>
	<haxe_doc>@throws DOMError</haxe_doc>
</createIndex></overloads>
		</createIndex>
		<index public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.idb.Index"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</index>
		<deleteIndex public="1" set="method">
			<f a="indexName">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</deleteIndex>
		<count public="1" set="method">
			<f a="?key">
				<d/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</count>
		<getAll public="1" set="method">
			<f a="?key:?limit">
				<d/>
				<x path="Int"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getAll>
		<getAllKeys public="1" set="method">
			<f a="?key:?limit">
				<d/>
				<x path="Int"/>
				<c path="js.html.idb.Request"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getAllKeys>
		<openKeyCursor public="1" set="method">
			<f a="?range:?direction" v=":&quot;next&quot;">
				<d/>
				<x path="js.html.idb.CursorDirection"/>
				<c path="js.html.idb.Request"/>
			</f>
			<meta><m n=":value"><e>{ direction : "next" }</e></m></meta>
			<haxe_doc>@throws DOMError</haxe_doc>
		</openKeyCursor>
		<haxe_doc><![CDATA[This example shows a variety of different uses of object stores, from updating the data structure with `IDBObjectStore.createIndex` inside an `onupgradeneeded` function, to adding a new item to our object store with `IDBObjectStore.add`. For a full working example, see our To-do Notifications app (view example live.)

	Documentation [IDBObjectStore](https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBObjectStore"</e></m></meta>
	</class>
	<typedef path="js.html.idb.ObjectStoreParameters" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/idb/ObjectStoreParameters.hx"><a>
	<keyPath>
		<t path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</x></t>
		<meta><m n=":optional"/></meta>
	</keyPath>
	<autoIncrement>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</autoIncrement>
</a></typedef>
	<typedef path="js.html.idb.OpenDBOptions" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/idb/OpenDBOptions.hx"><a>
	<version>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</version>
	<storage>
		<t path="Null"><d/></t>
		<meta><m n=":optional"/></meta>
	</storage>
</a></typedef>
	<class path="js.html.idb.Request" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/idb/Request.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<result public="1" set="null">
			<d/>
			<haxe_doc>Returns the result of the request. If the the request failed and the result is not available, an InvalidStateError exception is thrown.</haxe_doc>
		</result>
		<error public="1" set="null">
			<c path="js.html.DOMError"/>
			<haxe_doc>Returns an error in the event of an unsuccessful request, indicating what went wrong.</haxe_doc>
		</error>
		<source public="1" set="null">
			<x path="haxe.extern.EitherType">
				<c path="js.html.idb.ObjectStore"/>
				<x path="haxe.extern.EitherType">
					<c path="js.html.idb.Index"/>
					<c path="js.html.idb.Cursor"/>
				</x>
			</x>
			<haxe_doc>The source of the request, such as an `IDBIndex` or an `IDBObjectStore`. If no source exists (such as when calling `IDBFactory.open`), it returns null.</haxe_doc>
		</source>
		<transaction public="1" set="null">
			<c path="js.html.idb.Transaction"/>
			<haxe_doc>The transaction for the request. This property can be null for certain requests, for example those returned from `IDBFactory.open` unless an upgrade is needed. (You're just connecting to a database, so there is no transaction to return).</haxe_doc>
		</transaction>
		<readyState public="1" set="null">
			<x path="js.html.idb.RequestReadyState"/>
			<haxe_doc>The state of the request. Every request starts in the `pending` state. The state changes to `done` when the request completes successfully or when an error occurs.</haxe_doc>
		</readyState>
		<onsuccess public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the success event.</haxe_doc>
		</onsuccess>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the error event.</haxe_doc>
		</onerror>
		<haxe_doc><![CDATA[The request object does not initially contain any information about the result of the operation, but once information becomes available, an event is fired on the request, and the information becomes available through the properties of the `IDBRequest` instance.

	Documentation [IDBRequest](https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBRequest"</e></m></meta>
	</class>
	<class path="js.html.idb.OpenDBRequest" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/idb/OpenDBRequest.hx" extern="1">
		<extends path="js.html.idb.Request"/>
		<onblocked public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the blocked event. This event is triggered when the `upgradeneeded` event should be triggered because of a version change but the database is still in use (i.e. not closed) somewhere, even after the `versionchange` event was sent.</haxe_doc>
		</onblocked>
		<onupgradeneeded public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the `upgradeneeded` event, fired when a database of a bigger version number than the existing stored database is loaded.</haxe_doc>
		</onupgradeneeded>
		<haxe_doc><![CDATA[No methods, but inherits methods from its parents `IDBRequest` and `EventTarget`.

	Documentation [IDBOpenDBRequest](https://developer.mozilla.org/en-US/docs/Web/API/IDBOpenDBRequest) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBOpenDBRequest$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBOpenDBRequest>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBOpenDBRequest"</e></m></meta>
	</class>
	<abstract path="js.html.idb.RequestReadyState" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/idb/RequestReadyState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.idb._RequestReadyState.RequestReadyState_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/idb/RequestReadyState.hx" private="1" module="js.html.idb.RequestReadyState" extern="1">
	<PENDING public="1" get="inline" set="null" expr="cast &quot;pending&quot;" line="29" static="1">
		<x path="js.html.idb.RequestReadyState"/>
		<meta>
			<m n=":value"><e>cast "pending"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PENDING>
	<DONE public="1" get="inline" set="null" expr="cast &quot;done&quot;" line="30" static="1">
		<x path="js.html.idb.RequestReadyState"/>
		<meta>
			<m n=":value"><e>cast "done"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DONE>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html.idb._RequestReadyState.RequestReadyState_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/idb/RequestReadyState.hx" private="1" module="js.html.idb.RequestReadyState" extern="1">
		<PENDING public="1" get="inline" set="null" expr="cast &quot;pending&quot;" line="29" static="1">
			<x path="js.html.idb.RequestReadyState"/>
			<meta>
				<m n=":value"><e>cast "pending"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PENDING>
		<DONE public="1" get="inline" set="null" expr="cast &quot;done&quot;" line="30" static="1">
			<x path="js.html.idb.RequestReadyState"/>
			<meta>
				<m n=":value"><e>cast "done"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DONE>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.idb.Transaction" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/idb/Transaction.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<mode public="1" set="null">
			<x path="js.html.idb.TransactionMode"/>
			<haxe_doc>The mode for isolating access to data in the object stores that are in the scope of the transaction. For possible values, see the Constants section below. The default value is `readonly`.</haxe_doc>
		</mode>
		<db public="1" set="null">
			<c path="js.html.idb.Database"/>
			<haxe_doc>The database connection with which this transaction is associated.</haxe_doc>
		</db>
		<error public="1" set="null">
			<c path="js.html.DOMError"/>
			<haxe_doc>Returns one of several types of error when there is an unsuccessful transaction. This property is `null` if the transaction is not finished, is finished and successfully committed, or was aborted with `IDBTransaction.abort` function.</haxe_doc>
		</error>
		<onabort public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the `abort` event, fired when the transaction is aborted.</haxe_doc>
		</onabort>
		<oncomplete public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the `complete` event, thrown when the transaction completes successfully.</haxe_doc>
		</oncomplete>
		<onerror public="1">
			<x path="haxe.Function"/>
			<haxe_doc>The event handler for the `error` event, thrown when the transaction fails to complete.</haxe_doc>
		</onerror>
		<objectStoreNames public="1" set="null">
			<c path="js.html.DOMStringList"/>
			<haxe_doc>Returns a `DOMStringList` of the names of `IDBObjectStore` objects.</haxe_doc>
		</objectStoreNames>
		<objectStore public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="js.html.idb.ObjectStore"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</objectStore>
		<abort public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</abort>
		<haxe_doc><![CDATA[Note that as of Firefox 40, IndexedDB transactions have relaxed durability guarantees to increase performance (see bug 1112702.) Previously in a `readwrite` transaction `IDBTransaction.oncomplete` was fired only when all data was guaranteed to have been flushed to disk. In Firefox 40+ the `complete` event is fired after the OS has been told to write the data but potentially before that data has actually been flushed to disk. The `complete` event may thus be delivered quicker than before, however, there exists a small chance that the entire transaction will be lost if the OS crashes or there is a loss of system power before the data is flushed to disk. Since such catastrophic events are rare most consumers should not need to concern themselves further.

	Documentation [IDBTransaction](https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBTransaction"</e></m></meta>
	</class>
	<abstract path="js.html.idb.TransactionMode" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/idb/TransactionMode.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.idb._TransactionMode.TransactionMode_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/idb/TransactionMode.hx" private="1" module="js.html.idb.TransactionMode" extern="1">
	<READONLY public="1" get="inline" set="null" expr="cast &quot;readonly&quot;" line="29" static="1">
		<x path="js.html.idb.TransactionMode"/>
		<meta>
			<m n=":value"><e>cast "readonly"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</READONLY>
	<READWRITE public="1" get="inline" set="null" expr="cast &quot;readwrite&quot;" line="30" static="1">
		<x path="js.html.idb.TransactionMode"/>
		<meta>
			<m n=":value"><e>cast "readwrite"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</READWRITE>
	<READWRITEFLUSH public="1" get="inline" set="null" expr="cast &quot;readwriteflush&quot;" line="31" static="1">
		<x path="js.html.idb.TransactionMode"/>
		<meta>
			<m n=":value"><e>cast "readwriteflush"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</READWRITEFLUSH>
	<CLEANUP public="1" get="inline" set="null" expr="cast &quot;cleanup&quot;" line="32" static="1">
		<x path="js.html.idb.TransactionMode"/>
		<meta>
			<m n=":value"><e>cast "cleanup"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CLEANUP>
	<VERSIONCHANGE public="1" get="inline" set="null" expr="cast &quot;versionchange&quot;" line="33" static="1">
		<x path="js.html.idb.TransactionMode"/>
		<meta>
			<m n=":value"><e>cast "versionchange"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VERSIONCHANGE>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html.idb._TransactionMode.TransactionMode_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/idb/TransactionMode.hx" private="1" module="js.html.idb.TransactionMode" extern="1">
		<READONLY public="1" get="inline" set="null" expr="cast &quot;readonly&quot;" line="29" static="1">
			<x path="js.html.idb.TransactionMode"/>
			<meta>
				<m n=":value"><e>cast "readonly"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</READONLY>
		<READWRITE public="1" get="inline" set="null" expr="cast &quot;readwrite&quot;" line="30" static="1">
			<x path="js.html.idb.TransactionMode"/>
			<meta>
				<m n=":value"><e>cast "readwrite"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</READWRITE>
		<READWRITEFLUSH public="1" get="inline" set="null" expr="cast &quot;readwriteflush&quot;" line="31" static="1">
			<x path="js.html.idb.TransactionMode"/>
			<meta>
				<m n=":value"><e>cast "readwriteflush"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</READWRITEFLUSH>
		<CLEANUP public="1" get="inline" set="null" expr="cast &quot;cleanup&quot;" line="32" static="1">
			<x path="js.html.idb.TransactionMode"/>
			<meta>
				<m n=":value"><e>cast "cleanup"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CLEANUP>
		<VERSIONCHANGE public="1" get="inline" set="null" expr="cast &quot;versionchange&quot;" line="33" static="1">
			<x path="js.html.idb.TransactionMode"/>
			<meta>
				<m n=":value"><e>cast "versionchange"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VERSIONCHANGE>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.idb.VersionChangeEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/idb/VersionChangeEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<oldVersion public="1" set="null"><x path="Int"/></oldVersion>
		<newVersion public="1" set="null"><x path="Int"/></newVersion>
		<new public="1" set="method">
			<f a="type:?eventInitDict">
				<c path="String"/>
				<t path="js.html.idb.VersionChangeEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `IDBVersionChangeEvent` interface of the IndexedDB API indicates that the version of the database has changed, as the result of an `IDBOpenDBRequest.onupgradeneeded` event handler function.

	Documentation [IDBVersionChangeEvent](https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"IDBVersionChangeEvent"</e></m></meta>
	</class>
	<typedef path="js.html.idb.VersionChangeEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/idb/VersionChangeEventInit.hx"><a>
	<oldVersion>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</oldVersion>
	<newVersion>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</newVersion>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<typedef path="js.html.rtc.AnswerOptions" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/AnswerOptions.hx"><a/></typedef>
	<class path="js.html.rtc.Certificate" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/Certificate.hx" extern="1">
		<expires public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Returns the expiration date of the certificate.</haxe_doc>
		</expires>
		<haxe_doc><![CDATA[The interface of the the WebRTC API provides an object represents a certificate that an `RTCPeerConnection` uses to authenticate.

	Documentation [RTCCertificate](https://developer.mozilla.org/en-US/docs/Web/API/RTCCertificate) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/RTCCertificate$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/RTCCertificate>]]></haxe_doc>
		<meta><m n=":native"><e>"RTCCertificate"</e></m></meta>
	</class>
	<typedef path="js.html.rtc.Configuration" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/Configuration.hx"><a>
	<peerIdentity>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</peerIdentity>
	<iceTransportPolicy>
		<t path="Null"><d/></t>
		<meta><m n=":optional"/></meta>
	</iceTransportPolicy>
	<iceServers>
		<t path="Null"><c path="Array"><d/></c></t>
		<meta><m n=":optional"/></meta>
	</iceServers>
	<certificates>
		<t path="Null"><c path="Array"><c path="js.html.rtc.Certificate"/></c></t>
		<meta><m n=":optional"/></meta>
	</certificates>
	<bundlePolicy>
		<t path="Null"><d/></t>
		<meta><m n=":optional"/></meta>
	</bundlePolicy>
</a></typedef>
	<class path="js.html.rtc.DataChannel" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/DataChannel.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<label public="1" set="null"><c path="String"/></label>
		<reliable public="1" set="null"><x path="Bool"/></reliable>
		<readyState public="1" set="null"><x path="js.html.rtc.DataChannelState"/></readyState>
		<bufferedAmount public="1" set="null"><x path="Int"/></bufferedAmount>
		<bufferedAmountLowThreshold public="1"><x path="Int"/></bufferedAmountLowThreshold>
		<onopen public="1"><x path="haxe.Function"/></onopen>
		<onerror public="1"><x path="haxe.Function"/></onerror>
		<onclose public="1"><x path="haxe.Function"/></onclose>
		<onmessage public="1"><x path="haxe.Function"/></onmessage>
		<onbufferedamountlow public="1"><x path="haxe.Function"/></onbufferedamountlow>
		<binaryType public="1"><x path="js.html.rtc.DataChannelType"/></binaryType>
		<protocol public="1" set="null"><c path="String"/></protocol>
		<ordered public="1" set="null"><x path="Bool"/></ordered>
		<id public="1" set="null"><x path="Int"/></id>
		<stream public="1" set="null"><x path="Int"/></stream>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<send public="1" set="method">
			<f a="data">
				<c path="js.html.ArrayBufferView"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<send public="1" set="method">
					<f a="data">
						<c path="String"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="data">
						<c path="js.html.Blob"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</send>
				<send public="1" set="method">
					<f a="data">
						<c path="js.html.ArrayBuffer"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</send>
			</overloads>
		</send>
		<meta><m n=":native"><e>"DataChannel"</e></m></meta>
	</class>
	<typedef path="js.html.rtc.DataChannelInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/DataChannelInit.hx"><a>
	<stream>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</stream>
	<protocol>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</protocol>
	<preset>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</preset>
	<outOfOrderAllowed>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</outOfOrderAllowed>
	<ordered>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</ordered>
	<negotiated>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</negotiated>
	<maxRetransmits>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</maxRetransmits>
	<maxRetransmitTime>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</maxRetransmitTime>
	<maxRetransmitNum>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</maxRetransmitNum>
	<id>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</id>
</a></typedef>
	<abstract path="js.html.rtc.DataChannelState" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/DataChannelState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.rtc._DataChannelState.DataChannelState_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/DataChannelState.hx" private="1" module="js.html.rtc.DataChannelState" extern="1">
	<CONNECTING public="1" get="inline" set="null" expr="cast &quot;connecting&quot;" line="29" static="1">
		<x path="js.html.rtc.DataChannelState"/>
		<meta>
			<m n=":value"><e>cast "connecting"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CONNECTING>
	<OPEN public="1" get="inline" set="null" expr="cast &quot;open&quot;" line="30" static="1">
		<x path="js.html.rtc.DataChannelState"/>
		<meta>
			<m n=":value"><e>cast "open"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OPEN>
	<CLOSING public="1" get="inline" set="null" expr="cast &quot;closing&quot;" line="31" static="1">
		<x path="js.html.rtc.DataChannelState"/>
		<meta>
			<m n=":value"><e>cast "closing"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CLOSING>
	<CLOSED public="1" get="inline" set="null" expr="cast &quot;closed&quot;" line="32" static="1">
		<x path="js.html.rtc.DataChannelState"/>
		<meta>
			<m n=":value"><e>cast "closed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CLOSED>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html.rtc._DataChannelState.DataChannelState_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/DataChannelState.hx" private="1" module="js.html.rtc.DataChannelState" extern="1">
		<CONNECTING public="1" get="inline" set="null" expr="cast &quot;connecting&quot;" line="29" static="1">
			<x path="js.html.rtc.DataChannelState"/>
			<meta>
				<m n=":value"><e>cast "connecting"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CONNECTING>
		<OPEN public="1" get="inline" set="null" expr="cast &quot;open&quot;" line="30" static="1">
			<x path="js.html.rtc.DataChannelState"/>
			<meta>
				<m n=":value"><e>cast "open"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OPEN>
		<CLOSING public="1" get="inline" set="null" expr="cast &quot;closing&quot;" line="31" static="1">
			<x path="js.html.rtc.DataChannelState"/>
			<meta>
				<m n=":value"><e>cast "closing"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CLOSING>
		<CLOSED public="1" get="inline" set="null" expr="cast &quot;closed&quot;" line="32" static="1">
			<x path="js.html.rtc.DataChannelState"/>
			<meta>
				<m n=":value"><e>cast "closed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CLOSED>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="js.html.rtc.DataChannelType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/DataChannelType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.rtc._DataChannelType.DataChannelType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/DataChannelType.hx" private="1" module="js.html.rtc.DataChannelType" extern="1">
	<ARRAYBUFFER public="1" get="inline" set="null" expr="cast &quot;arraybuffer&quot;" line="29" static="1">
		<x path="js.html.rtc.DataChannelType"/>
		<meta>
			<m n=":value"><e>cast "arraybuffer"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ARRAYBUFFER>
	<BLOB public="1" get="inline" set="null" expr="cast &quot;blob&quot;" line="30" static="1">
		<x path="js.html.rtc.DataChannelType"/>
		<meta>
			<m n=":value"><e>cast "blob"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BLOB>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html.rtc._DataChannelType.DataChannelType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/DataChannelType.hx" private="1" module="js.html.rtc.DataChannelType" extern="1">
		<ARRAYBUFFER public="1" get="inline" set="null" expr="cast &quot;arraybuffer&quot;" line="29" static="1">
			<x path="js.html.rtc.DataChannelType"/>
			<meta>
				<m n=":value"><e>cast "arraybuffer"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ARRAYBUFFER>
		<BLOB public="1" get="inline" set="null" expr="cast &quot;blob&quot;" line="30" static="1">
			<x path="js.html.rtc.DataChannelType"/>
			<meta>
				<m n=":value"><e>cast "blob"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BLOB>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.rtc.IceCandidate" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/IceCandidate.hx" extern="1">
		<candidate public="1">
			<c path="String"/>
			<haxe_doc>Returns a transport address for the candidate that can be used for connectivity checks. The format of this address is a `candidate-attribute` as defined in RTC 5245.</haxe_doc>
		</candidate>
		<sdpMid public="1">
			<c path="String"/>
			<haxe_doc>If not `null`, this contains the identifier of the "media stream identification" (as defined in RFC 5888) for the media component this candidate is associated with.</haxe_doc>
		</sdpMid>
		<sdpMLineIndex public="1">
			<x path="Int"/>
			<haxe_doc>If not `null`, this indicates the index (starting at zero) of the media description (as defined in RFC 4566) in the SDP this candidate is associated with.</haxe_doc>
		</sdpMLineIndex>
		<new public="1" set="method">
			<f a="?candidateInitDict">
				<t path="js.html.rtc.IceCandidateInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `RTCIceCandidate` interface of the the WebRTC API represents a candidate internet connectivity establishment (ICE) server for establishing an `RTCPeerConnection`.

	Documentation [RTCIceCandidate](https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate>]]></haxe_doc>
		<meta><m n=":native"><e>"RTCIceCandidate"</e></m></meta>
	</class>
	<typedef path="js.html.rtc.IceCandidateInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/IceCandidateInit.hx"><a>
	<sdpMid>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</sdpMid>
	<sdpMLineIndex>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</sdpMLineIndex>
	<candidate>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</candidate>
</a></typedef>
	<abstract path="js.html.rtc.IceConnectionState" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/IceConnectionState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.rtc._IceConnectionState.IceConnectionState_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/IceConnectionState.hx" private="1" module="js.html.rtc.IceConnectionState" extern="1">
	<NEW_ public="1" get="inline" set="null" expr="cast &quot;new&quot;" line="29" static="1">
		<x path="js.html.rtc.IceConnectionState"/>
		<meta>
			<m n=":value"><e>cast "new"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NEW_>
	<CHECKING public="1" get="inline" set="null" expr="cast &quot;checking&quot;" line="30" static="1">
		<x path="js.html.rtc.IceConnectionState"/>
		<meta>
			<m n=":value"><e>cast "checking"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CHECKING>
	<CONNECTED public="1" get="inline" set="null" expr="cast &quot;connected&quot;" line="31" static="1">
		<x path="js.html.rtc.IceConnectionState"/>
		<meta>
			<m n=":value"><e>cast "connected"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CONNECTED>
	<COMPLETED public="1" get="inline" set="null" expr="cast &quot;completed&quot;" line="32" static="1">
		<x path="js.html.rtc.IceConnectionState"/>
		<meta>
			<m n=":value"><e>cast "completed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</COMPLETED>
	<FAILED public="1" get="inline" set="null" expr="cast &quot;failed&quot;" line="33" static="1">
		<x path="js.html.rtc.IceConnectionState"/>
		<meta>
			<m n=":value"><e>cast "failed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FAILED>
	<DISCONNECTED public="1" get="inline" set="null" expr="cast &quot;disconnected&quot;" line="34" static="1">
		<x path="js.html.rtc.IceConnectionState"/>
		<meta>
			<m n=":value"><e>cast "disconnected"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DISCONNECTED>
	<CLOSED public="1" get="inline" set="null" expr="cast &quot;closed&quot;" line="35" static="1">
		<x path="js.html.rtc.IceConnectionState"/>
		<meta>
			<m n=":value"><e>cast "closed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CLOSED>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html.rtc._IceConnectionState.IceConnectionState_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/IceConnectionState.hx" private="1" module="js.html.rtc.IceConnectionState" extern="1">
		<NEW_ public="1" get="inline" set="null" expr="cast &quot;new&quot;" line="29" static="1">
			<x path="js.html.rtc.IceConnectionState"/>
			<meta>
				<m n=":value"><e>cast "new"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NEW_>
		<CHECKING public="1" get="inline" set="null" expr="cast &quot;checking&quot;" line="30" static="1">
			<x path="js.html.rtc.IceConnectionState"/>
			<meta>
				<m n=":value"><e>cast "checking"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CHECKING>
		<CONNECTED public="1" get="inline" set="null" expr="cast &quot;connected&quot;" line="31" static="1">
			<x path="js.html.rtc.IceConnectionState"/>
			<meta>
				<m n=":value"><e>cast "connected"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CONNECTED>
		<COMPLETED public="1" get="inline" set="null" expr="cast &quot;completed&quot;" line="32" static="1">
			<x path="js.html.rtc.IceConnectionState"/>
			<meta>
				<m n=":value"><e>cast "completed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</COMPLETED>
		<FAILED public="1" get="inline" set="null" expr="cast &quot;failed&quot;" line="33" static="1">
			<x path="js.html.rtc.IceConnectionState"/>
			<meta>
				<m n=":value"><e>cast "failed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FAILED>
		<DISCONNECTED public="1" get="inline" set="null" expr="cast &quot;disconnected&quot;" line="34" static="1">
			<x path="js.html.rtc.IceConnectionState"/>
			<meta>
				<m n=":value"><e>cast "disconnected"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DISCONNECTED>
		<CLOSED public="1" get="inline" set="null" expr="cast &quot;closed&quot;" line="35" static="1">
			<x path="js.html.rtc.IceConnectionState"/>
			<meta>
				<m n=":value"><e>cast "closed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CLOSED>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="js.html.rtc.IceGatheringState" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/IceGatheringState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.rtc._IceGatheringState.IceGatheringState_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/IceGatheringState.hx" private="1" module="js.html.rtc.IceGatheringState" extern="1">
	<NEW_ public="1" get="inline" set="null" expr="cast &quot;new&quot;" line="29" static="1">
		<x path="js.html.rtc.IceGatheringState"/>
		<meta>
			<m n=":value"><e>cast "new"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NEW_>
	<GATHERING public="1" get="inline" set="null" expr="cast &quot;gathering&quot;" line="30" static="1">
		<x path="js.html.rtc.IceGatheringState"/>
		<meta>
			<m n=":value"><e>cast "gathering"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GATHERING>
	<COMPLETE public="1" get="inline" set="null" expr="cast &quot;complete&quot;" line="31" static="1">
		<x path="js.html.rtc.IceGatheringState"/>
		<meta>
			<m n=":value"><e>cast "complete"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</COMPLETE>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html.rtc._IceGatheringState.IceGatheringState_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/IceGatheringState.hx" private="1" module="js.html.rtc.IceGatheringState" extern="1">
		<NEW_ public="1" get="inline" set="null" expr="cast &quot;new&quot;" line="29" static="1">
			<x path="js.html.rtc.IceGatheringState"/>
			<meta>
				<m n=":value"><e>cast "new"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NEW_>
		<GATHERING public="1" get="inline" set="null" expr="cast &quot;gathering&quot;" line="30" static="1">
			<x path="js.html.rtc.IceGatheringState"/>
			<meta>
				<m n=":value"><e>cast "gathering"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GATHERING>
		<COMPLETE public="1" get="inline" set="null" expr="cast &quot;complete&quot;" line="31" static="1">
			<x path="js.html.rtc.IceGatheringState"/>
			<meta>
				<m n=":value"><e>cast "complete"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</COMPLETE>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="js.html.rtc.IdentityAssertion" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/IdentityAssertion.hx"><a>
	<name>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</name>
	<idp>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</idp>
</a></typedef>
	<typedef path="js.html.rtc.IdentityAssertionResult" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/IdentityAssertionResult.hx"><a>
	<idp><d/></idp>
	<assertion><c path="String"/></assertion>
</a></typedef>
	<class path="js.html.rtc.IdentityProvider" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/IdentityProvider.hx" extern="1">
		<generateAssertion public="1" set="method"><f a="contents:origin:?usernameHint">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="js.Promise"><t path="js.html.rtc.IdentityAssertionResult"/></c>
</f></generateAssertion>
		<validateAssertion public="1" set="method"><f a="assertion:origin">
	<c path="String"/>
	<c path="String"/>
	<c path="js.Promise"><t path="js.html.rtc.IdentityValidationResult"/></c>
</f></validateAssertion>
		<meta><m n=":native"><e>"RTCIdentityProvider"</e></m></meta>
	</class>
	<class path="js.html.rtc.IdentityProviderRegistrar" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/IdentityProviderRegistrar.hx" extern="1">
		<register public="1" set="method"><f a="idp">
	<c path="js.html.rtc.IdentityProvider"/>
	<x path="Void"/>
</f></register>
		<meta><m n=":native"><e>"RTCIdentityProviderRegistrar"</e></m></meta>
	</class>
	<typedef path="js.html.rtc.IdentityValidationResult" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/IdentityValidationResult.hx"><a>
	<identity><c path="String"/></identity>
	<contents><c path="String"/></contents>
</a></typedef>
	<typedef path="js.html.rtc.OfferAnswerOptions" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/OfferAnswerOptions.hx"><a/></typedef>
	<typedef path="js.html.rtc.OfferOptions" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/OfferOptions.hx"><a>
	<optional>
		<t path="Null"><c path="Array"><d/></c></t>
		<meta><m n=":optional"/></meta>
	</optional>
	<offerToReceiveVideo>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</offerToReceiveVideo>
	<offerToReceiveAudio>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</offerToReceiveAudio>
	<mandatory>
		<t path="Null"><d/></t>
		<meta><m n=":optional"/></meta>
	</mandatory>
</a></typedef>
	<class path="js.html.rtc.PeerConnection" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/PeerConnection.hx" extern="1">
		<extends path="js.html.EventTarget"/>
		<generateCertificate public="1" set="method" static="1">
			<f a="keygenAlgorithm">
				<x path="haxe.extern.EitherType">
					<d/>
					<c path="String"/>
				</x>
				<c path="js.Promise"><c path="js.html.rtc.Certificate"/></c>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</generateCertificate>
		<localDescription public="1" set="null"><c path="js.html.rtc.SessionDescription"/></localDescription>
		<remoteDescription public="1" set="null"><c path="js.html.rtc.SessionDescription"/></remoteDescription>
		<signalingState public="1" set="null"><x path="js.html.rtc.SignalingState"/></signalingState>
		<canTrickleIceCandidates public="1" set="null"><x path="Bool"/></canTrickleIceCandidates>
		<iceGatheringState public="1" set="null"><x path="js.html.rtc.IceGatheringState"/></iceGatheringState>
		<iceConnectionState public="1" set="null"><x path="js.html.rtc.IceConnectionState"/></iceConnectionState>
		<peerIdentity public="1" set="null"><c path="js.Promise"><t path="js.html.rtc.IdentityAssertion"/></c></peerIdentity>
		<idpLoginUrl public="1" set="null"><c path="String"/></idpLoginUrl>
		<onnegotiationneeded public="1"><x path="haxe.Function"/></onnegotiationneeded>
		<onicecandidate public="1"><x path="haxe.Function"/></onicecandidate>
		<onsignalingstatechange public="1"><x path="haxe.Function"/></onsignalingstatechange>
		<onaddstream public="1"><x path="haxe.Function"/></onaddstream>
		<onaddtrack public="1"><x path="haxe.Function"/></onaddtrack>
		<ontrack public="1"><x path="haxe.Function"/></ontrack>
		<onremovestream public="1"><x path="haxe.Function"/></onremovestream>
		<oniceconnectionstatechange public="1"><x path="haxe.Function"/></oniceconnectionstatechange>
		<ondatachannel public="1"><x path="haxe.Function"/></ondatachannel>
		<setIdentityProvider public="1" set="method"><f a="provider:?protocol:?username">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></setIdentityProvider>
		<getIdentityAssertion public="1" set="method"><f a=""><c path="js.Promise"><c path="String"/></c></f></getIdentityAssertion>
		<createOffer public="1" set="method">
			<f a="successCallback:failureCallback:?options">
				<f a="">
					<c path="js.html.rtc.SessionDescription"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="js.html.DOMError"/>
					<x path="Void"/>
				</f>
				<t path="js.html.rtc.OfferOptions"/>
				<c path="js.Promise"><x path="Void"/></c>
			</f>
			<overloads><createOffer public="1" set="method"><f a="?options">
	<t path="js.html.rtc.OfferOptions"/>
	<c path="js.Promise"><c path="js.html.rtc.SessionDescription"/></c>
</f></createOffer></overloads>
		</createOffer>
		<createAnswer public="1" set="method">
			<f a="successCallback:failureCallback">
				<f a="">
					<c path="js.html.rtc.SessionDescription"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="js.html.DOMError"/>
					<x path="Void"/>
				</f>
				<c path="js.Promise"><x path="Void"/></c>
			</f>
			<overloads><createAnswer public="1" set="method"><f a="?options">
	<t path="js.html.rtc.AnswerOptions"/>
	<c path="js.Promise"><c path="js.html.rtc.SessionDescription"/></c>
</f></createAnswer></overloads>
		</createAnswer>
		<setLocalDescription public="1" set="method">
			<f a="description:successCallback:failureCallback">
				<c path="js.html.rtc.SessionDescription"/>
				<f a=""><x path="Void"/></f>
				<f a="">
					<c path="js.html.DOMError"/>
					<x path="Void"/>
				</f>
				<c path="js.Promise"><x path="Void"/></c>
			</f>
			<overloads><setLocalDescription public="1" set="method"><f a="description">
	<c path="js.html.rtc.SessionDescription"/>
	<c path="js.Promise"><x path="Void"/></c>
</f></setLocalDescription></overloads>
		</setLocalDescription>
		<setRemoteDescription public="1" set="method">
			<f a="description:successCallback:failureCallback">
				<c path="js.html.rtc.SessionDescription"/>
				<f a=""><x path="Void"/></f>
				<f a="">
					<c path="js.html.DOMError"/>
					<x path="Void"/>
				</f>
				<c path="js.Promise"><x path="Void"/></c>
			</f>
			<overloads><setRemoteDescription public="1" set="method"><f a="description">
	<c path="js.html.rtc.SessionDescription"/>
	<c path="js.Promise"><x path="Void"/></c>
</f></setRemoteDescription></overloads>
		</setRemoteDescription>
		<addIceCandidate public="1" set="method">
			<f a="candidate:successCallback:failureCallback">
				<c path="js.html.rtc.IceCandidate"/>
				<f a=""><x path="Void"/></f>
				<f a="">
					<c path="js.html.DOMError"/>
					<x path="Void"/>
				</f>
				<c path="js.Promise"><x path="Void"/></c>
			</f>
			<overloads><addIceCandidate public="1" set="method"><f a="candidate">
	<c path="js.html.rtc.IceCandidate"/>
	<c path="js.Promise"><x path="Void"/></c>
</f></addIceCandidate></overloads>
		</addIceCandidate>
		<getConfiguration public="1" set="method"><f a=""><t path="js.html.rtc.Configuration"/></f></getConfiguration>
		<getLocalStreams public="1" set="method"><f a=""><c path="Array"><c path="js.html.MediaStream"/></c></f></getLocalStreams>
		<getRemoteStreams public="1" set="method"><f a=""><c path="Array"><c path="js.html.MediaStream"/></c></f></getRemoteStreams>
		<getStreamById public="1" set="method"><f a="streamId">
	<c path="String"/>
	<c path="js.html.MediaStream"/>
</f></getStreamById>
		<addStream public="1" set="method"><f a="stream">
	<c path="js.html.MediaStream"/>
	<x path="Void"/>
</f></addStream>
		<removeStream public="1" set="method"><f a="stream">
	<c path="js.html.MediaStream"/>
	<x path="Void"/>
</f></removeStream>
		<addTrack public="1" set="method"><f a="track:stream:moreStreams">
	<c path="js.html.MediaStreamTrack"/>
	<c path="js.html.MediaStream"/>
	<x path="haxe.extern.Rest"><c path="js.html.MediaStream"/></x>
	<c path="js.html.rtc.RtpSender"/>
</f></addTrack>
		<removeTrack public="1" set="method"><f a="sender">
	<c path="js.html.rtc.RtpSender"/>
	<x path="Void"/>
</f></removeTrack>
		<getSenders public="1" set="method"><f a=""><c path="Array"><c path="js.html.rtc.RtpSender"/></c></f></getSenders>
		<getReceivers public="1" set="method"><f a=""><c path="Array"><c path="js.html.rtc.RtpReceiver"/></c></f></getReceivers>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<getStats public="1" set="method">
			<f a="selector:successCallback:failureCallback">
				<c path="js.html.MediaStreamTrack"/>
				<f a="">
					<c path="js.html.rtc.StatsReport"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="js.html.DOMError"/>
					<x path="Void"/>
				</f>
				<c path="js.Promise"><x path="Void"/></c>
			</f>
			<overloads><getStats public="1" set="method"><f a="?selector">
	<c path="js.html.MediaStreamTrack"/>
	<c path="js.Promise"><c path="js.html.rtc.StatsReport"/></c>
</f></getStats></overloads>
		</getStats>
		<createDataChannel public="1" set="method"><f a="label:?dataChannelDict">
	<c path="String"/>
	<t path="js.html.rtc.DataChannelInit"/>
	<d/>
</f></createDataChannel>
		<new public="1" set="method">
			<f a="?configuration:?constraints">
				<t path="js.html.rtc.Configuration"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `RTCPeerConnection` interface represents a WebRTC connection between the local computer and a remote peer. It provides methods to connect to a remote peer, maintain and monitor the connection, and close the connection once it's no longer needed.

	Documentation [RTCPeerConnection](https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection>]]></haxe_doc>
		<meta><m n=":native"><e>"RTCPeerConnection"</e></m></meta>
	</class>
	<typedef path="js.html.rtc.RtpParameters" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/RtpParameters.hx"><a>
	<rtcp>
		<t path="Null"><d/></t>
		<meta><m n=":optional"/></meta>
	</rtcp>
	<headerExtensions>
		<t path="Null"><c path="Array"><d/></c></t>
		<meta><m n=":optional"/></meta>
	</headerExtensions>
	<encodings>
		<t path="Null"><c path="Array"><d/></c></t>
		<meta><m n=":optional"/></meta>
	</encodings>
	<codecs>
		<t path="Null"><c path="Array"><d/></c></t>
		<meta><m n=":optional"/></meta>
	</codecs>
</a></typedef>
	<class path="js.html.rtc.RtpReceiver" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/RtpReceiver.hx" extern="1">
		<track public="1" set="null"><c path="js.html.MediaStreamTrack"/></track>
		<meta><m n=":native"><e>"RTCRtpReceiver"</e></m></meta>
	</class>
	<class path="js.html.rtc.RtpSender" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/RtpSender.hx" extern="1">
		<track public="1" set="null"><c path="js.html.MediaStreamTrack"/></track>
		<setParameters public="1" set="method"><f a="?parameters">
	<t path="js.html.rtc.RtpParameters"/>
	<c path="js.Promise"><x path="Void"/></c>
</f></setParameters>
		<getParameters public="1" set="method"><f a=""><t path="js.html.rtc.RtpParameters"/></f></getParameters>
		<replaceTrack public="1" set="method"><f a="track">
	<c path="js.html.MediaStreamTrack"/>
	<c path="js.Promise"><x path="Void"/></c>
</f></replaceTrack>
		<meta><m n=":native"><e>"RTCRtpSender"</e></m></meta>
	</class>
	<abstract path="js.html.rtc.SdpType" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/SdpType.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.rtc._SdpType.SdpType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/SdpType.hx" private="1" module="js.html.rtc.SdpType" extern="1">
	<OFFER public="1" get="inline" set="null" expr="cast &quot;offer&quot;" line="29" static="1">
		<x path="js.html.rtc.SdpType"/>
		<meta>
			<m n=":value"><e>cast "offer"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OFFER>
	<PRANSWER public="1" get="inline" set="null" expr="cast &quot;pranswer&quot;" line="30" static="1">
		<x path="js.html.rtc.SdpType"/>
		<meta>
			<m n=":value"><e>cast "pranswer"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PRANSWER>
	<ANSWER public="1" get="inline" set="null" expr="cast &quot;answer&quot;" line="31" static="1">
		<x path="js.html.rtc.SdpType"/>
		<meta>
			<m n=":value"><e>cast "answer"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ANSWER>
	<ROLLBACK public="1" get="inline" set="null" expr="cast &quot;rollback&quot;" line="32" static="1">
		<x path="js.html.rtc.SdpType"/>
		<meta>
			<m n=":value"><e>cast "rollback"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ROLLBACK>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html.rtc._SdpType.SdpType_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/SdpType.hx" private="1" module="js.html.rtc.SdpType" extern="1">
		<OFFER public="1" get="inline" set="null" expr="cast &quot;offer&quot;" line="29" static="1">
			<x path="js.html.rtc.SdpType"/>
			<meta>
				<m n=":value"><e>cast "offer"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OFFER>
		<PRANSWER public="1" get="inline" set="null" expr="cast &quot;pranswer&quot;" line="30" static="1">
			<x path="js.html.rtc.SdpType"/>
			<meta>
				<m n=":value"><e>cast "pranswer"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PRANSWER>
		<ANSWER public="1" get="inline" set="null" expr="cast &quot;answer&quot;" line="31" static="1">
			<x path="js.html.rtc.SdpType"/>
			<meta>
				<m n=":value"><e>cast "answer"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ANSWER>
		<ROLLBACK public="1" get="inline" set="null" expr="cast &quot;rollback&quot;" line="32" static="1">
			<x path="js.html.rtc.SdpType"/>
			<meta>
				<m n=":value"><e>cast "rollback"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ROLLBACK>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.rtc.SessionDescription" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/SessionDescription.hx" extern="1">
		<type public="1">
			<x path="js.html.rtc.SdpType"/>
			<haxe_doc>An enum of type ``RTCSdpType`` describing the session description's type.</haxe_doc>
		</type>
		<sdp public="1">
			<c path="String"/>
			<haxe_doc>A `DOMString` containing the `SDP` describing the session.</haxe_doc>
		</sdp>
		<new public="1" set="method">
			<f a="?descriptionInitDict">
				<t path="js.html.rtc.SessionDescriptionInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `RTCSessionDescription` interface represents the parameters of a session. Each `RTCSessionDescription` consists of a description `type` indicating which part of the offer/answer negotiation process it describes and of the SDP descriptor of the session.

	Documentation [RTCSessionDescription](https://developer.mozilla.org/en-US/docs/Web/API/RTCSessionDescription) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/RTCSessionDescription$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/RTCSessionDescription>]]></haxe_doc>
		<meta><m n=":native"><e>"RTCSessionDescription"</e></m></meta>
	</class>
	<typedef path="js.html.rtc.SessionDescriptionInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/SessionDescriptionInit.hx"><a>
	<type>
		<t path="Null"><x path="js.html.rtc.SdpType"/></t>
		<meta><m n=":optional"/></meta>
	</type>
	<sdp>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</sdp>
</a></typedef>
	<abstract path="js.html.rtc.SignalingState" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/SignalingState.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.html.rtc._SignalingState.SignalingState_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/SignalingState.hx" private="1" module="js.html.rtc.SignalingState" extern="1">
	<STABLE public="1" get="inline" set="null" expr="cast &quot;stable&quot;" line="29" static="1">
		<x path="js.html.rtc.SignalingState"/>
		<meta>
			<m n=":value"><e>cast "stable"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</STABLE>
	<HAVE_LOCAL_OFFER public="1" get="inline" set="null" expr="cast &quot;have-local-offer&quot;" line="30" static="1">
		<x path="js.html.rtc.SignalingState"/>
		<meta>
			<m n=":value"><e>cast "have-local-offer"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HAVE_LOCAL_OFFER>
	<HAVE_REMOTE_OFFER public="1" get="inline" set="null" expr="cast &quot;have-remote-offer&quot;" line="31" static="1">
		<x path="js.html.rtc.SignalingState"/>
		<meta>
			<m n=":value"><e>cast "have-remote-offer"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HAVE_REMOTE_OFFER>
	<HAVE_LOCAL_PRANSWER public="1" get="inline" set="null" expr="cast &quot;have-local-pranswer&quot;" line="32" static="1">
		<x path="js.html.rtc.SignalingState"/>
		<meta>
			<m n=":value"><e>cast "have-local-pranswer"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HAVE_LOCAL_PRANSWER>
	<HAVE_REMOTE_PRANSWER public="1" get="inline" set="null" expr="cast &quot;have-remote-pranswer&quot;" line="33" static="1">
		<x path="js.html.rtc.SignalingState"/>
		<meta>
			<m n=":value"><e>cast "have-remote-pranswer"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HAVE_REMOTE_PRANSWER>
	<CLOSED public="1" get="inline" set="null" expr="cast &quot;closed&quot;" line="34" static="1">
		<x path="js.html.rtc.SignalingState"/>
		<meta>
			<m n=":value"><e>cast "closed"</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CLOSED>
	<meta>
		<m n=":final"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="js.html.rtc._SignalingState.SignalingState_Impl_" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/SignalingState.hx" private="1" module="js.html.rtc.SignalingState" extern="1">
		<STABLE public="1" get="inline" set="null" expr="cast &quot;stable&quot;" line="29" static="1">
			<x path="js.html.rtc.SignalingState"/>
			<meta>
				<m n=":value"><e>cast "stable"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</STABLE>
		<HAVE_LOCAL_OFFER public="1" get="inline" set="null" expr="cast &quot;have-local-offer&quot;" line="30" static="1">
			<x path="js.html.rtc.SignalingState"/>
			<meta>
				<m n=":value"><e>cast "have-local-offer"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HAVE_LOCAL_OFFER>
		<HAVE_REMOTE_OFFER public="1" get="inline" set="null" expr="cast &quot;have-remote-offer&quot;" line="31" static="1">
			<x path="js.html.rtc.SignalingState"/>
			<meta>
				<m n=":value"><e>cast "have-remote-offer"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HAVE_REMOTE_OFFER>
		<HAVE_LOCAL_PRANSWER public="1" get="inline" set="null" expr="cast &quot;have-local-pranswer&quot;" line="32" static="1">
			<x path="js.html.rtc.SignalingState"/>
			<meta>
				<m n=":value"><e>cast "have-local-pranswer"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HAVE_LOCAL_PRANSWER>
		<HAVE_REMOTE_PRANSWER public="1" get="inline" set="null" expr="cast &quot;have-remote-pranswer&quot;" line="33" static="1">
			<x path="js.html.rtc.SignalingState"/>
			<meta>
				<m n=":value"><e>cast "have-remote-pranswer"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HAVE_REMOTE_PRANSWER>
		<CLOSED public="1" get="inline" set="null" expr="cast &quot;closed&quot;" line="34" static="1">
			<x path="js.html.rtc.SignalingState"/>
			<meta>
				<m n=":value"><e>cast "closed"</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CLOSED>
		<meta>
			<m n=":final"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="js.html.rtc.StatsReport" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/rtc/StatsReport.hx" extern="1">
		<forEach public="1" set="method"><f a="callbackFn:?thisArg">
	<f a="">
		<c path="js.html.rtc.StatsReport"/>
		<x path="Void"/>
	</f>
	<d/>
	<x path="Void"/>
</f></forEach>
		<get public="1" set="method"><f a="key">
	<c path="String"/>
	<d/>
</f></get>
		<has public="1" set="method"><f a="key">
	<c path="String"/>
	<x path="Bool"/>
</f></has>
		<haxe_doc><![CDATA[WebRTC provides a method—`RTCPeerConnection.getStats()`—which returns a set of statistics about the state of the connection and the data transfers which have taken place. This status report is an object of type `RTCStatsReport`, and consists of a mapping of strings identifying objects which have had statistics recorded and a dictionary containing all of the corresponding data.

	Documentation [RTCStatsReport](https://developer.mozilla.org/en-US/docs/Web/API/RTCStatsReport) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/RTCStatsReport$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/RTCStatsReport>]]></haxe_doc>
		<meta><m n=":native"><e>"RTCStatsReport"</e></m></meta>
	</class>
	<class path="js.html.svg.Element" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/Element.hx" extern="1">
		<extends path="js.html.DOMElement"/>
		<ownerSVGElement public="1" set="null"><c path="js.html.svg.SVGElement"/></ownerSVGElement>
		<viewportElement public="1" set="null"><c path="js.html.svg.Element"/></viewportElement>
		<haxe_doc><![CDATA[All of the SVG DOM interfaces that correspond directly to elements in the SVG language derive from the `SVGElement` interface.

	Documentation [SVGElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGElement"</e></m></meta>
	</class>
	<class path="js.html.svg.GraphicsElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/GraphicsElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<transform public="1" set="null"><c path="js.html.svg.AnimatedTransformList"/></transform>
		<nearestViewportElement public="1" set="null"><c path="js.html.svg.Element"/></nearestViewportElement>
		<farthestViewportElement public="1" set="null"><c path="js.html.svg.Element"/></farthestViewportElement>
		<requiredFeatures public="1" set="null"><c path="js.html.svg.StringList"/></requiredFeatures>
		<requiredExtensions public="1" set="null"><c path="js.html.svg.StringList"/></requiredExtensions>
		<systemLanguage public="1" set="null"><c path="js.html.svg.StringList"/></systemLanguage>
		<getBBox public="1" set="method">
			<f a="?aOptions">
				<t path="js.html.svg.BoundingBoxOptions"/>
				<c path="js.html.svg.Rect"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getBBox>
		<getCTM public="1" set="method"><f a=""><c path="js.html.svg.Matrix"/></f></getCTM>
		<getScreenCTM public="1" set="method"><f a=""><c path="js.html.svg.Matrix"/></f></getScreenCTM>
		<getTransformToElement public="1" set="method">
			<f a="element">
				<c path="js.html.svg.GraphicsElement"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getTransformToElement>
		<hasExtension public="1" set="method"><f a="extension">
	<c path="String"/>
	<x path="Bool"/>
</f></hasExtension>
		<meta><m n=":native"><e>"SVGGraphicsElement"</e></m></meta>
	</class>
	<class path="js.html.svg.AElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/AElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<target public="1" set="null">
			<c path="js.html.svg.AnimatedString"/>
			<haxe_doc>It corresponds to attribute  `target` on the given `a` element.</haxe_doc>
		</target>
		<download public="1"><c path="String"/></download>
		<href public="1" set="null"><c path="js.html.svg.AnimatedString"/></href>
		<haxe_doc><![CDATA[The `SVGAElement` interface provides access to the properties of `a` element, as well as methods to manipulate them.

	Documentation [SVGAElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGAElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAElement"</e></m></meta>
	</class>
	<class path="js.html.svg.TextContentElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/TextContentElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<LENGTHADJUST_UNKNOWN public="1" get="inline" set="null" expr="0" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</LENGTHADJUST_UNKNOWN>
		<LENGTHADJUST_SPACING public="1" get="inline" set="null" expr="1" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</LENGTHADJUST_SPACING>
		<LENGTHADJUST_SPACINGANDGLYPHS public="1" get="inline" set="null" expr="2" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</LENGTHADJUST_SPACINGANDGLYPHS>
		<textLength public="1" set="null"><c path="js.html.svg.AnimatedLength"/></textLength>
		<lengthAdjust public="1" set="null"><c path="js.html.svg.AnimatedEnumeration"/></lengthAdjust>
		<getNumberOfChars public="1" set="method"><f a=""><x path="Int"/></f></getNumberOfChars>
		<getComputedTextLength public="1" set="method"><f a=""><x path="Float"/></f></getComputedTextLength>
		<getSubStringLength public="1" set="method">
			<f a="charnum:nchars">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getSubStringLength>
		<getStartPositionOfChar public="1" set="method">
			<f a="charnum">
				<x path="Int"/>
				<c path="js.html.svg.Point"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getStartPositionOfChar>
		<getEndPositionOfChar public="1" set="method">
			<f a="charnum">
				<x path="Int"/>
				<c path="js.html.svg.Point"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getEndPositionOfChar>
		<getExtentOfChar public="1" set="method">
			<f a="charnum">
				<x path="Int"/>
				<c path="js.html.svg.Rect"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getExtentOfChar>
		<getRotationOfChar public="1" set="method">
			<f a="charnum">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getRotationOfChar>
		<getCharNumAtPosition public="1" set="method"><f a="point">
	<c path="js.html.svg.Point"/>
	<x path="Int"/>
</f></getCharNumAtPosition>
		<selectSubString public="1" set="method">
			<f a="charnum:nchars">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</selectSubString>
		<meta><m n=":native"><e>"SVGTextContentElement"</e></m></meta>
	</class>
	<class path="js.html.svg.TextPositioningElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/TextPositioningElement.hx" extern="1">
		<extends path="js.html.svg.TextContentElement"/>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLengthList"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLengthList"/></y>
		<dx public="1" set="null"><c path="js.html.svg.AnimatedLengthList"/></dx>
		<dy public="1" set="null"><c path="js.html.svg.AnimatedLengthList"/></dy>
		<rotate public="1" set="null"><c path="js.html.svg.AnimatedNumberList"/></rotate>
		<haxe_doc><![CDATA[The `SVGTextPositioningElement` interface is inherited by text-related interfaces: `SVGTextElement`, `SVGTSpanElement`, `SVGTRefElement` and `SVGAltGlyphElement`.

	Documentation [SVGTextPositioningElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGTextPositioningElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGTextPositioningElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGTextPositioningElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGTextPositioningElement"</e></m></meta>
	</class>
	<class path="js.html.svg.AltGlyphElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/AltGlyphElement.hx" extern="1">
		<extends path="js.html.svg.TextPositioningElement"/>
		<glyphRef public="1">
			<c path="String"/>
			<haxe_doc>It corresponds to the attribute `glyphRef` on the given element. It's data type is 'String'. It defines the glyph identifier, whose format is dependent on the ‘format’ of the given font.</haxe_doc>
		</glyphRef>
		<format public="1">
			<c path="String"/>
			<haxe_doc>It corresponds to the attribute  `format` on the given element. It's data type is 'String'. This property specifies the format of the given font.</haxe_doc>
		</format>
		<href public="1" set="null"><c path="js.html.svg.AnimatedString"/></href>
		<haxe_doc><![CDATA[  

	Documentation [SVGAltGlyphElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGAltGlyphElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAltGlyphElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAltGlyphElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAltGlyphElement"</e></m></meta>
	</class>
	<class path="js.html.svg.Angle" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/Angle.hx" extern="1">
		<SVG_ANGLETYPE_UNKNOWN public="1" get="inline" set="null" expr="0" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_ANGLETYPE_UNKNOWN>
		<SVG_ANGLETYPE_UNSPECIFIED public="1" get="inline" set="null" expr="1" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_ANGLETYPE_UNSPECIFIED>
		<SVG_ANGLETYPE_DEG public="1" get="inline" set="null" expr="2" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_ANGLETYPE_DEG>
		<SVG_ANGLETYPE_RAD public="1" get="inline" set="null" expr="3" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</SVG_ANGLETYPE_RAD>
		<SVG_ANGLETYPE_GRAD public="1" get="inline" set="null" expr="4" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SVG_ANGLETYPE_GRAD>
		<unitType public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The type of the value as specified by one of the `SVG_ANGLETYPE_*` constants defined on this interface.</haxe_doc>
		</unitType>
		<value public="1">
			<x path="Float"/>
			<haxe_doc>The value as a floating point value, in user units. Setting this attribute will cause `valueInSpecifiedUnits` and `valueAsString` to be updated automatically to reflect this setting.
		
		 Exceptions on setting: a `DOMException` with code `NO_MODIFICATION_ALLOWED_ERR` is raised when the length corresponds to a read only attribute or when the object itself is read only.</haxe_doc>
		</value>
		<valueInSpecifiedUnits public="1">
			<x path="Float"/>
			<haxe_doc>The value as a floating point value, in the units expressed by `unitType`. Setting this attribute will cause `value` and `valueAsString` to be updated automatically to reflect this setting.
		
		 Exceptions on setting: a `DOMException` with code `NO_MODIFICATION_ALLOWED_ERR` is raised when the length corresponds to a read only attribute or when the object itself is read only.</haxe_doc>
		</valueInSpecifiedUnits>
		<valueAsString public="1">
			<c path="String"/>
			<haxe_doc>The value as a `DOMString` value, in the units expressed by `unitType`. Setting this attribute will cause `value`, `valueInSpecifiedUnits` and `unitType` to be updated automatically to reflect this setting.
		
		 Exceptions on setting:
		 a `DOMException` with code `SYNTAX_ERR` is raised if the assigned string cannot be parsed as a valid `angle`. a `DOMException` with code `NO_MODIFICATION_ALLOWED_ERR` is raised when the length corresponds to a read only attribute or when the object itself is read only.</haxe_doc>
		</valueAsString>
		<newValueSpecifiedUnits public="1" set="method">
			<f a="unitType:valueInSpecifiedUnits">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</newValueSpecifiedUnits>
		<convertToSpecifiedUnits public="1" set="method">
			<f a="unitType">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</convertToSpecifiedUnits>
		<haxe_doc><![CDATA[The `SVGAngle` interface is used to represent a value that can be an `angle` or `number` value. An `SVGAngle` reflected through the `animVal` attribute is always read only.

	Documentation [SVGAngle](https://developer.mozilla.org/en-US/docs/Web/API/SVGAngle) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAngle$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAngle>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAngle"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimationElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/AnimationElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<targetElement public="1" set="null"><c path="js.html.svg.Element"/></targetElement>
		<requiredFeatures public="1" set="null"><c path="js.html.svg.StringList"/></requiredFeatures>
		<requiredExtensions public="1" set="null"><c path="js.html.svg.StringList"/></requiredExtensions>
		<systemLanguage public="1" set="null"><c path="js.html.svg.StringList"/></systemLanguage>
		<getStartTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getStartTime>
		<getCurrentTime public="1" set="method"><f a=""><x path="Float"/></f></getCurrentTime>
		<getSimpleDuration public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getSimpleDuration>
		<beginElement public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</beginElement>
		<beginElementAt public="1" set="method">
			<f a="offset">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</beginElementAt>
		<endElement public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</endElement>
		<endElementAt public="1" set="method">
			<f a="offset">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</endElementAt>
		<hasExtension public="1" set="method"><f a="extension">
	<c path="String"/>
	<x path="Bool"/>
</f></hasExtension>
		<haxe_doc><![CDATA[The `SVGAnimationElement` interface is the base interface for all of the animation element interfaces: `SVGAnimateElement`, `SVGSetElement`, `SVGAnimateColorElement`, `SVGAnimateMotionElement` and `SVGAnimateTransformElement`.

	Documentation [SVGAnimationElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimationElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimationElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimationElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimationElement"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimateElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/AnimateElement.hx" extern="1">
		<extends path="js.html.svg.AnimationElement"/>
		<haxe_doc><![CDATA[The `SVGAnimateElement` interface corresponds to the `animate` element.

	Documentation [SVGAnimateElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimateElement"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimateMotionElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/AnimateMotionElement.hx" extern="1">
		<extends path="js.html.svg.AnimationElement"/>
		<haxe_doc><![CDATA[The `SVGAnimateMotionElement` interface corresponds to the `animateMotion` element.

	Documentation [SVGAnimateMotionElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateMotionElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateMotionElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateMotionElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimateMotionElement"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimateTransformElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/AnimateTransformElement.hx" extern="1">
		<extends path="js.html.svg.AnimationElement"/>
		<haxe_doc><![CDATA[The `SVGAnimateTransformElement` interface corresponds to the `animateTransform` element.

	Documentation [SVGAnimateTransformElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateTransformElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateTransformElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateTransformElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimateTransformElement"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedAngle" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/AnimatedAngle.hx" extern="1">
		<baseVal public="1" set="null"><c path="js.html.svg.Angle"/></baseVal>
		<animVal public="1" set="null"><c path="js.html.svg.Angle"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedAngle` interface is used for attributes of basic type angle which can be animated.

	Documentation [SVGAnimatedAngle](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedAngle) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedAngle$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedAngle>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedAngle"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedBoolean" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/AnimatedBoolean.hx" extern="1">
		<baseVal public="1"><x path="Bool"/></baseVal>
		<animVal public="1" set="null"><x path="Bool"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedBoolean` interface is used for attributes of type boolean which can be animated.

	Documentation [SVGAnimatedBoolean](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedBoolean) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedBoolean$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedBoolean>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedBoolean"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedEnumeration" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/AnimatedEnumeration.hx" extern="1">
		<baseVal public="1"><x path="Int"/></baseVal>
		<animVal public="1" set="null"><x path="Int"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedEnumeration` interface is used for attributes whose value must be a constant from a particular enumeration and which can be animated.

	Documentation [SVGAnimatedEnumeration](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedEnumeration) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedEnumeration$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedEnumeration>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedEnumeration"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedInteger" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/AnimatedInteger.hx" extern="1">
		<baseVal public="1"><x path="Int"/></baseVal>
		<animVal public="1" set="null"><x path="Int"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedInteger` interface is used for attributes of basic type integer which can be animated.

	Documentation [SVGAnimatedInteger](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedInteger) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedInteger$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedInteger>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedInteger"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedLength" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/AnimatedLength.hx" extern="1">
		<baseVal public="1" set="null"><c path="js.html.svg.Length"/></baseVal>
		<animVal public="1" set="null"><c path="js.html.svg.Length"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedLength` interface is used for attributes of basic type length which can be animated.

	Documentation [SVGAnimatedLength](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLength) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLength$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLength>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedLength"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedLengthList" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/AnimatedLengthList.hx" extern="1">
		<baseVal public="1" set="null"><c path="js.html.svg.LengthList"/></baseVal>
		<animVal public="1" set="null"><c path="js.html.svg.LengthList"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedLengthList` interface is used for attributes of type `SVGLengthList` which can be animated.

	Documentation [SVGAnimatedLengthList](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLengthList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLengthList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLengthList>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedLengthList"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedNumber" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/AnimatedNumber.hx" extern="1">
		<baseVal public="1"><x path="Float"/></baseVal>
		<animVal public="1" set="null"><x path="Float"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedNumber` interface is used for attributes of basic type Number which can be animated.

	Documentation [SVGAnimatedNumber](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedNumber) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedNumber$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedNumber>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedNumber"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedNumberList" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/AnimatedNumberList.hx" extern="1">
		<baseVal public="1" set="null"><c path="js.html.svg.NumberList"/></baseVal>
		<animVal public="1" set="null"><c path="js.html.svg.NumberList"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedNumber` interface is used for attributes which take a list of numbers and which can be animated.

	Documentation [SVGAnimatedNumberList](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedNumberList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedNumberList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedNumberList>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedNumberList"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedPreserveAspectRatio" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/AnimatedPreserveAspectRatio.hx" extern="1">
		<baseVal public="1" set="null"><c path="js.html.svg.PreserveAspectRatio"/></baseVal>
		<animVal public="1" set="null"><c path="js.html.svg.PreserveAspectRatio"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedPreserveAspectRatio` interface is used for attributes of type `SVGPreserveAspectRatio` which can be animated.

	Documentation [SVGAnimatedPreserveAspectRatio](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedPreserveAspectRatio) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedPreserveAspectRatio$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedPreserveAspectRatio>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedPreserveAspectRatio"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedRect" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/AnimatedRect.hx" extern="1">
		<baseVal public="1" set="null"><c path="js.html.svg.Rect"/></baseVal>
		<animVal public="1" set="null"><c path="js.html.svg.Rect"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedRect` interface is used for attributes of basic `SVGRect` which can be animated.

	Documentation [SVGAnimatedRect](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedRect) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedRect$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedRect>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedRect"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedString" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/AnimatedString.hx" extern="1">
		<baseVal public="1">
			<c path="String"/>
			<haxe_doc>This is a `DOMString` representing the base value. The base value of the given attribute before applying any animations. Setter throws DOMException.</haxe_doc>
		</baseVal>
		<animVal public="1" set="null">
			<c path="String"/>
			<haxe_doc>This is a `DOMString` representing the animation value. If the given attribute or property is being animated it contains the current animated value of the attribute or property. If the given attribute or property is not currently being animated, it contains the same value as baseVal.</haxe_doc>
		</animVal>
		<haxe_doc><![CDATA[The` SVGAnimatedString `interface represent string attributes which can be animated from each SVG declaration. You need to create SVG attribute before doing anything else, everything should be declared inside this.

	Documentation [SVGAnimatedString](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedString) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedString$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedString>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedString"</e></m></meta>
	</class>
	<class path="js.html.svg.AnimatedTransformList" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/AnimatedTransformList.hx" extern="1">
		<baseVal public="1" set="null"><c path="js.html.svg.TransformList"/></baseVal>
		<animVal public="1" set="null"><c path="js.html.svg.TransformList"/></animVal>
		<haxe_doc><![CDATA[The `SVGAnimatedTransformList` interface is used for attributes which take a list of numbers and which can be animated.

	Documentation [SVGAnimatedTransformList](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedTransformList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedTransformList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedTransformList>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGAnimatedTransformList"</e></m></meta>
	</class>
	<typedef path="js.html.svg.BoundingBoxOptions" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/BoundingBoxOptions.hx"><a>
	<stroke>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</stroke>
	<markers>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</markers>
	<fill>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</fill>
	<clipped>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</clipped>
</a></typedef>
	<class path="js.html.svg.CircleElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/CircleElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<cx public="1" set="null"><c path="js.html.svg.AnimatedLength"/></cx>
		<cy public="1" set="null"><c path="js.html.svg.AnimatedLength"/></cy>
		<r public="1" set="null"><c path="js.html.svg.AnimatedLength"/></r>
		<haxe_doc><![CDATA[The `SVGCircleElement` interface is an interface for the `circle` element. The circle element is defined by the cx and cy attributes, that denote the coordinates of the centre of the circle. It also has a radius attribute r that denotes the radius of the circle. The radius value must be positive to allow the successful rendering of the element.

	Documentation [SVGCircleElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGCircleElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGCircleElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGCircleElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGCircleElement"</e></m></meta>
	</class>
	<class path="js.html.svg.ClipPathElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/ClipPathElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<SVG_UNIT_TYPE_UNKNOWN public="1" get="inline" set="null" expr="0" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_UNIT_TYPE_UNKNOWN>
		<SVG_UNIT_TYPE_USERSPACEONUSE public="1" get="inline" set="null" expr="1" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_UNIT_TYPE_USERSPACEONUSE>
		<SVG_UNIT_TYPE_OBJECTBOUNDINGBOX public="1" get="inline" set="null" expr="2" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_UNIT_TYPE_OBJECTBOUNDINGBOX>
		<clipPathUnits public="1" set="null"><c path="js.html.svg.AnimatedEnumeration"/></clipPathUnits>
		<transform public="1" set="null"><c path="js.html.svg.AnimatedTransformList"/></transform>
		<haxe_doc><![CDATA[The `SVGClipPathElement` interface provides access to the properties of `clipPath` elements, as well as methods to manipulate them.

	Documentation [SVGClipPathElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGClipPathElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGClipPathElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGClipPathElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGClipPathElement"</e></m></meta>
	</class>
	<class path="js.html.svg.ComponentTransferFunctionElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/ComponentTransferFunctionElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN public="1" get="inline" set="null" expr="0" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN>
		<SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY public="1" get="inline" set="null" expr="1" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY>
		<SVG_FECOMPONENTTRANSFER_TYPE_TABLE public="1" get="inline" set="null" expr="2" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_FECOMPONENTTRANSFER_TYPE_TABLE>
		<SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE public="1" get="inline" set="null" expr="3" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE>
		<SVG_FECOMPONENTTRANSFER_TYPE_LINEAR public="1" get="inline" set="null" expr="4" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SVG_FECOMPONENTTRANSFER_TYPE_LINEAR>
		<SVG_FECOMPONENTTRANSFER_TYPE_GAMMA public="1" get="inline" set="null" expr="5" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</SVG_FECOMPONENTTRANSFER_TYPE_GAMMA>
		<type public="1" set="null"><c path="js.html.svg.AnimatedEnumeration"/></type>
		<tableValues public="1" set="null"><c path="js.html.svg.AnimatedNumberList"/></tableValues>
		<slope public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></slope>
		<intercept public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></intercept>
		<amplitude public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></amplitude>
		<exponent public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></exponent>
		<offset public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></offset>
		<meta><m n=":native"><e>"SVGComponentTransferFunctionElement"</e></m></meta>
	</class>
	<class path="js.html.svg.DefsElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/DefsElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<haxe_doc><![CDATA[The `SVGDefsElement` interface corresponds to the `defs` element.

	Documentation [SVGDefsElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGDefsElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGDefsElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGDefsElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGDefsElement"</e></m></meta>
	</class>
	<class path="js.html.svg.DescElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/DescElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<haxe_doc><![CDATA[The `SVGDescElement` interface corresponds to the `desc` element.

	Documentation [SVGDescElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGDescElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGDescElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGDescElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGDescElement"</e></m></meta>
	</class>
	<class path="js.html.svg.Document" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/Document.hx" extern="1">
		<extends path="js.html.Document"/>
		<domain public="1" set="null"><c path="String"/></domain>
		<rootElement public="1" set="null"><c path="js.html.svg.Element"/></rootElement>
		<meta><m n=":native"><e>"SVGDocument"</e></m></meta>
	</class>
	<class path="js.html.svg.EllipseElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/EllipseElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<cx public="1" set="null"><c path="js.html.svg.AnimatedLength"/></cx>
		<cy public="1" set="null"><c path="js.html.svg.AnimatedLength"/></cy>
		<rx public="1" set="null"><c path="js.html.svg.AnimatedLength"/></rx>
		<ry public="1" set="null"><c path="js.html.svg.AnimatedLength"/></ry>
		<haxe_doc><![CDATA[The `SVGEllipseElement` interface provides access to the properties of `ellipse` elements.

	Documentation [SVGEllipseElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGEllipseElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGEllipseElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGEllipseElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGEllipseElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEBlendElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/FEBlendElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<SVG_FEBLEND_MODE_UNKNOWN public="1" get="inline" set="null" expr="0" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_FEBLEND_MODE_UNKNOWN>
		<SVG_FEBLEND_MODE_NORMAL public="1" get="inline" set="null" expr="1" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_FEBLEND_MODE_NORMAL>
		<SVG_FEBLEND_MODE_MULTIPLY public="1" get="inline" set="null" expr="2" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_FEBLEND_MODE_MULTIPLY>
		<SVG_FEBLEND_MODE_SCREEN public="1" get="inline" set="null" expr="3" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</SVG_FEBLEND_MODE_SCREEN>
		<SVG_FEBLEND_MODE_DARKEN public="1" get="inline" set="null" expr="4" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SVG_FEBLEND_MODE_DARKEN>
		<SVG_FEBLEND_MODE_LIGHTEN public="1" get="inline" set="null" expr="5" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</SVG_FEBLEND_MODE_LIGHTEN>
		<SVG_FEBLEND_MODE_OVERLAY public="1" get="inline" set="null" expr="6" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</SVG_FEBLEND_MODE_OVERLAY>
		<SVG_FEBLEND_MODE_COLOR_DODGE public="1" get="inline" set="null" expr="7" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</SVG_FEBLEND_MODE_COLOR_DODGE>
		<SVG_FEBLEND_MODE_COLOR_BURN public="1" get="inline" set="null" expr="8" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</SVG_FEBLEND_MODE_COLOR_BURN>
		<SVG_FEBLEND_MODE_HARD_LIGHT public="1" get="inline" set="null" expr="9" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</SVG_FEBLEND_MODE_HARD_LIGHT>
		<SVG_FEBLEND_MODE_SOFT_LIGHT public="1" get="inline" set="null" expr="10" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</SVG_FEBLEND_MODE_SOFT_LIGHT>
		<SVG_FEBLEND_MODE_DIFFERENCE public="1" get="inline" set="null" expr="11" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>11</e></m></meta>
		</SVG_FEBLEND_MODE_DIFFERENCE>
		<SVG_FEBLEND_MODE_EXCLUSION public="1" get="inline" set="null" expr="12" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</SVG_FEBLEND_MODE_EXCLUSION>
		<SVG_FEBLEND_MODE_HUE public="1" get="inline" set="null" expr="13" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>13</e></m></meta>
		</SVG_FEBLEND_MODE_HUE>
		<SVG_FEBLEND_MODE_SATURATION public="1" get="inline" set="null" expr="14" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>14</e></m></meta>
		</SVG_FEBLEND_MODE_SATURATION>
		<SVG_FEBLEND_MODE_COLOR public="1" get="inline" set="null" expr="15" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>15</e></m></meta>
		</SVG_FEBLEND_MODE_COLOR>
		<SVG_FEBLEND_MODE_LUMINOSITY public="1" get="inline" set="null" expr="16" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</SVG_FEBLEND_MODE_LUMINOSITY>
		<in1 public="1" set="null"><c path="js.html.svg.AnimatedString"/></in1>
		<in2 public="1" set="null"><c path="js.html.svg.AnimatedString"/></in2>
		<mode public="1" set="null"><c path="js.html.svg.AnimatedEnumeration"/></mode>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<meta><m n=":native"><e>"SVGFEBlendElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEColorMatrixElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/FEColorMatrixElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<SVG_FECOLORMATRIX_TYPE_UNKNOWN public="1" get="inline" set="null" expr="0" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_FECOLORMATRIX_TYPE_UNKNOWN>
		<SVG_FECOLORMATRIX_TYPE_MATRIX public="1" get="inline" set="null" expr="1" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_FECOLORMATRIX_TYPE_MATRIX>
		<SVG_FECOLORMATRIX_TYPE_SATURATE public="1" get="inline" set="null" expr="2" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_FECOLORMATRIX_TYPE_SATURATE>
		<SVG_FECOLORMATRIX_TYPE_HUEROTATE public="1" get="inline" set="null" expr="3" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</SVG_FECOLORMATRIX_TYPE_HUEROTATE>
		<SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA public="1" get="inline" set="null" expr="4" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA>
		<in1 public="1" set="null"><c path="js.html.svg.AnimatedString"/></in1>
		<type public="1" set="null"><c path="js.html.svg.AnimatedEnumeration"/></type>
		<values public="1" set="null"><c path="js.html.svg.AnimatedNumberList"/></values>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<meta><m n=":native"><e>"SVGFEColorMatrixElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEComponentTransferElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/FEComponentTransferElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<in1 public="1" set="null"><c path="js.html.svg.AnimatedString"/></in1>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<meta><m n=":native"><e>"SVGFEComponentTransferElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FECompositeElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/FECompositeElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<SVG_FECOMPOSITE_OPERATOR_UNKNOWN public="1" get="inline" set="null" expr="0" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_FECOMPOSITE_OPERATOR_UNKNOWN>
		<SVG_FECOMPOSITE_OPERATOR_OVER public="1" get="inline" set="null" expr="1" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_FECOMPOSITE_OPERATOR_OVER>
		<SVG_FECOMPOSITE_OPERATOR_IN public="1" get="inline" set="null" expr="2" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_FECOMPOSITE_OPERATOR_IN>
		<SVG_FECOMPOSITE_OPERATOR_OUT public="1" get="inline" set="null" expr="3" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</SVG_FECOMPOSITE_OPERATOR_OUT>
		<SVG_FECOMPOSITE_OPERATOR_ATOP public="1" get="inline" set="null" expr="4" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SVG_FECOMPOSITE_OPERATOR_ATOP>
		<SVG_FECOMPOSITE_OPERATOR_XOR public="1" get="inline" set="null" expr="5" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</SVG_FECOMPOSITE_OPERATOR_XOR>
		<SVG_FECOMPOSITE_OPERATOR_ARITHMETIC public="1" get="inline" set="null" expr="6" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</SVG_FECOMPOSITE_OPERATOR_ARITHMETIC>
		<in1 public="1" set="null"><c path="js.html.svg.AnimatedString"/></in1>
		<in2 public="1" set="null"><c path="js.html.svg.AnimatedString"/></in2>
		<operator public="1" set="null"><c path="js.html.svg.AnimatedEnumeration"/></operator>
		<k1 public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></k1>
		<k2 public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></k2>
		<k3 public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></k3>
		<k4 public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></k4>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<meta><m n=":native"><e>"SVGFECompositeElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEConvolveMatrixElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/FEConvolveMatrixElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<SVG_EDGEMODE_UNKNOWN public="1" get="inline" set="null" expr="0" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_EDGEMODE_UNKNOWN>
		<SVG_EDGEMODE_DUPLICATE public="1" get="inline" set="null" expr="1" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_EDGEMODE_DUPLICATE>
		<SVG_EDGEMODE_WRAP public="1" get="inline" set="null" expr="2" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_EDGEMODE_WRAP>
		<SVG_EDGEMODE_NONE public="1" get="inline" set="null" expr="3" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</SVG_EDGEMODE_NONE>
		<in1 public="1" set="null"><c path="js.html.svg.AnimatedString"/></in1>
		<orderX public="1" set="null"><c path="js.html.svg.AnimatedInteger"/></orderX>
		<orderY public="1" set="null"><c path="js.html.svg.AnimatedInteger"/></orderY>
		<kernelMatrix public="1" set="null"><c path="js.html.svg.AnimatedNumberList"/></kernelMatrix>
		<divisor public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></divisor>
		<bias public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></bias>
		<targetX public="1" set="null"><c path="js.html.svg.AnimatedInteger"/></targetX>
		<targetY public="1" set="null"><c path="js.html.svg.AnimatedInteger"/></targetY>
		<edgeMode public="1" set="null"><c path="js.html.svg.AnimatedEnumeration"/></edgeMode>
		<kernelUnitLengthX public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></kernelUnitLengthX>
		<kernelUnitLengthY public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></kernelUnitLengthY>
		<preserveAlpha public="1" set="null"><c path="js.html.svg.AnimatedBoolean"/></preserveAlpha>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<meta><m n=":native"><e>"SVGFEConvolveMatrixElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEDiffuseLightingElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/FEDiffuseLightingElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<in1 public="1" set="null"><c path="js.html.svg.AnimatedString"/></in1>
		<surfaceScale public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></surfaceScale>
		<diffuseConstant public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></diffuseConstant>
		<kernelUnitLengthX public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></kernelUnitLengthX>
		<kernelUnitLengthY public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></kernelUnitLengthY>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<meta><m n=":native"><e>"SVGFEDiffuseLightingElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEDisplacementMapElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/FEDisplacementMapElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<SVG_CHANNEL_UNKNOWN public="1" get="inline" set="null" expr="0" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_CHANNEL_UNKNOWN>
		<SVG_CHANNEL_R public="1" get="inline" set="null" expr="1" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_CHANNEL_R>
		<SVG_CHANNEL_G public="1" get="inline" set="null" expr="2" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_CHANNEL_G>
		<SVG_CHANNEL_B public="1" get="inline" set="null" expr="3" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</SVG_CHANNEL_B>
		<SVG_CHANNEL_A public="1" get="inline" set="null" expr="4" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SVG_CHANNEL_A>
		<in1 public="1" set="null"><c path="js.html.svg.AnimatedString"/></in1>
		<in2 public="1" set="null"><c path="js.html.svg.AnimatedString"/></in2>
		<scale public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></scale>
		<xChannelSelector public="1" set="null"><c path="js.html.svg.AnimatedEnumeration"/></xChannelSelector>
		<yChannelSelector public="1" set="null"><c path="js.html.svg.AnimatedEnumeration"/></yChannelSelector>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<meta><m n=":native"><e>"SVGFEDisplacementMapElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEDistantLightElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/FEDistantLightElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<azimuth public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></azimuth>
		<elevation public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></elevation>
		<meta><m n=":native"><e>"SVGFEDistantLightElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEDropShadowElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/FEDropShadowElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<in1 public="1" set="null"><c path="js.html.svg.AnimatedString"/></in1>
		<dx public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></dx>
		<dy public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></dy>
		<stdDeviationX public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></stdDeviationX>
		<stdDeviationY public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></stdDeviationY>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<setStdDeviation public="1" set="method"><f a="stdDeviationX:stdDeviationY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setStdDeviation>
		<meta><m n=":native"><e>"SVGFEDropShadowElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEFloodElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/FEFloodElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<meta><m n=":native"><e>"SVGFEFloodElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEFuncAElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/FEFuncAElement.hx" extern="1">
		<extends path="js.html.svg.ComponentTransferFunctionElement"/>
		<meta><m n=":native"><e>"SVGFEFuncAElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEFuncBElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/FEFuncBElement.hx" extern="1">
		<extends path="js.html.svg.ComponentTransferFunctionElement"/>
		<meta><m n=":native"><e>"SVGFEFuncBElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEFuncGElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/FEFuncGElement.hx" extern="1">
		<extends path="js.html.svg.ComponentTransferFunctionElement"/>
		<meta><m n=":native"><e>"SVGFEFuncGElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEFuncRElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/FEFuncRElement.hx" extern="1">
		<extends path="js.html.svg.ComponentTransferFunctionElement"/>
		<meta><m n=":native"><e>"SVGFEFuncRElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEGaussianBlurElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/FEGaussianBlurElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<in1 public="1" set="null"><c path="js.html.svg.AnimatedString"/></in1>
		<stdDeviationX public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></stdDeviationX>
		<stdDeviationY public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></stdDeviationY>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<setStdDeviation public="1" set="method"><f a="stdDeviationX:stdDeviationY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setStdDeviation>
		<meta><m n=":native"><e>"SVGFEGaussianBlurElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEImageElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/FEImageElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<preserveAspectRatio public="1" set="null"><c path="js.html.svg.AnimatedPreserveAspectRatio"/></preserveAspectRatio>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<href public="1" set="null"><c path="js.html.svg.AnimatedString"/></href>
		<meta><m n=":native"><e>"SVGFEImageElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEMergeElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/FEMergeElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<meta><m n=":native"><e>"SVGFEMergeElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEMergeNodeElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/FEMergeNodeElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<in1 public="1" set="null"><c path="js.html.svg.AnimatedString"/></in1>
		<meta><m n=":native"><e>"SVGFEMergeNodeElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEMorphologyElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/FEMorphologyElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<SVG_MORPHOLOGY_OPERATOR_UNKNOWN public="1" get="inline" set="null" expr="0" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_MORPHOLOGY_OPERATOR_UNKNOWN>
		<SVG_MORPHOLOGY_OPERATOR_ERODE public="1" get="inline" set="null" expr="1" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_MORPHOLOGY_OPERATOR_ERODE>
		<SVG_MORPHOLOGY_OPERATOR_DILATE public="1" get="inline" set="null" expr="2" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_MORPHOLOGY_OPERATOR_DILATE>
		<in1 public="1" set="null"><c path="js.html.svg.AnimatedString"/></in1>
		<operator public="1" set="null"><c path="js.html.svg.AnimatedEnumeration"/></operator>
		<radiusX public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></radiusX>
		<radiusY public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></radiusY>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<meta><m n=":native"><e>"SVGFEMorphologyElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEOffsetElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/FEOffsetElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<in1 public="1" set="null"><c path="js.html.svg.AnimatedString"/></in1>
		<dx public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></dx>
		<dy public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></dy>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<meta><m n=":native"><e>"SVGFEOffsetElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FEPointLightElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/FEPointLightElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<x public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></y>
		<z public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></z>
		<meta><m n=":native"><e>"SVGFEPointLightElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FESpecularLightingElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/FESpecularLightingElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<in1 public="1" set="null"><c path="js.html.svg.AnimatedString"/></in1>
		<surfaceScale public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></surfaceScale>
		<specularConstant public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></specularConstant>
		<specularExponent public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></specularExponent>
		<kernelUnitLengthX public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></kernelUnitLengthX>
		<kernelUnitLengthY public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></kernelUnitLengthY>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<meta><m n=":native"><e>"SVGFESpecularLightingElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FESpotLightElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/FESpotLightElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<x public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></y>
		<z public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></z>
		<pointsAtX public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></pointsAtX>
		<pointsAtY public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></pointsAtY>
		<pointsAtZ public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></pointsAtZ>
		<specularExponent public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></specularExponent>
		<limitingConeAngle public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></limitingConeAngle>
		<meta><m n=":native"><e>"SVGFESpotLightElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FETileElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/FETileElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<in1 public="1" set="null"><c path="js.html.svg.AnimatedString"/></in1>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<meta><m n=":native"><e>"SVGFETileElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FETurbulenceElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/FETurbulenceElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<SVG_TURBULENCE_TYPE_UNKNOWN public="1" get="inline" set="null" expr="0" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_TURBULENCE_TYPE_UNKNOWN>
		<SVG_TURBULENCE_TYPE_FRACTALNOISE public="1" get="inline" set="null" expr="1" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_TURBULENCE_TYPE_FRACTALNOISE>
		<SVG_TURBULENCE_TYPE_TURBULENCE public="1" get="inline" set="null" expr="2" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_TURBULENCE_TYPE_TURBULENCE>
		<SVG_STITCHTYPE_UNKNOWN public="1" get="inline" set="null" expr="0" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_STITCHTYPE_UNKNOWN>
		<SVG_STITCHTYPE_STITCH public="1" get="inline" set="null" expr="1" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_STITCHTYPE_STITCH>
		<SVG_STITCHTYPE_NOSTITCH public="1" get="inline" set="null" expr="2" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_STITCHTYPE_NOSTITCH>
		<baseFrequencyX public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></baseFrequencyX>
		<baseFrequencyY public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></baseFrequencyY>
		<numOctaves public="1" set="null"><c path="js.html.svg.AnimatedInteger"/></numOctaves>
		<seed public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></seed>
		<stitchTiles public="1" set="null"><c path="js.html.svg.AnimatedEnumeration"/></stitchTiles>
		<type public="1" set="null"><c path="js.html.svg.AnimatedEnumeration"/></type>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<result public="1" set="null"><c path="js.html.svg.AnimatedString"/></result>
		<meta><m n=":native"><e>"SVGFETurbulenceElement"</e></m></meta>
	</class>
	<class path="js.html.svg.FilterElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/FilterElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<SVG_UNIT_TYPE_UNKNOWN public="1" get="inline" set="null" expr="0" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_UNIT_TYPE_UNKNOWN>
		<SVG_UNIT_TYPE_USERSPACEONUSE public="1" get="inline" set="null" expr="1" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_UNIT_TYPE_USERSPACEONUSE>
		<SVG_UNIT_TYPE_OBJECTBOUNDINGBOX public="1" get="inline" set="null" expr="2" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_UNIT_TYPE_OBJECTBOUNDINGBOX>
		<filterUnits public="1" set="null"><c path="js.html.svg.AnimatedEnumeration"/></filterUnits>
		<primitiveUnits public="1" set="null"><c path="js.html.svg.AnimatedEnumeration"/></primitiveUnits>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<href public="1" set="null"><c path="js.html.svg.AnimatedString"/></href>
		<haxe_doc><![CDATA[The `SVGFilterElement` interface provides access to the properties of `filter` elements, as well as methods to manipulate them.

	Documentation [SVGFilterElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGFilterElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGFilterElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGFilterElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGFilterElement"</e></m></meta>
	</class>
	<class path="js.html.svg.ForeignObjectElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/ForeignObjectElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<haxe_doc><![CDATA[The `SVGForeignObjectElement` interface provides access to the properties of `foreignObject` elements, as well as methods to manipulate them.

	Documentation [SVGForeignObjectElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGForeignObjectElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGForeignObjectElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGForeignObjectElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGForeignObjectElement"</e></m></meta>
	</class>
	<class path="js.html.svg.GElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/GElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<haxe_doc><![CDATA[The `SVGGElement` interface corresponds to the `g` element.

	Documentation [SVGGElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGGElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGGElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGGElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGGElement"</e></m></meta>
	</class>
	<class path="js.html.svg.GradientElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/GradientElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<SVG_SPREADMETHOD_UNKNOWN public="1" get="inline" set="null" expr="0" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_SPREADMETHOD_UNKNOWN>
		<SVG_SPREADMETHOD_PAD public="1" get="inline" set="null" expr="1" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_SPREADMETHOD_PAD>
		<SVG_SPREADMETHOD_REFLECT public="1" get="inline" set="null" expr="2" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_SPREADMETHOD_REFLECT>
		<SVG_SPREADMETHOD_REPEAT public="1" get="inline" set="null" expr="3" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</SVG_SPREADMETHOD_REPEAT>
		<SVG_UNIT_TYPE_UNKNOWN public="1" get="inline" set="null" expr="0" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_UNIT_TYPE_UNKNOWN>
		<SVG_UNIT_TYPE_USERSPACEONUSE public="1" get="inline" set="null" expr="1" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_UNIT_TYPE_USERSPACEONUSE>
		<SVG_UNIT_TYPE_OBJECTBOUNDINGBOX public="1" get="inline" set="null" expr="2" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_UNIT_TYPE_OBJECTBOUNDINGBOX>
		<gradientUnits public="1" set="null"><c path="js.html.svg.AnimatedEnumeration"/></gradientUnits>
		<gradientTransform public="1" set="null"><c path="js.html.svg.AnimatedTransformList"/></gradientTransform>
		<spreadMethod public="1" set="null"><c path="js.html.svg.AnimatedEnumeration"/></spreadMethod>
		<href public="1" set="null"><c path="js.html.svg.AnimatedString"/></href>
		<haxe_doc><![CDATA[The `SVGGradient` interface is a base interface used by `SVGLinearGradientElement` and `SVGRadialGradientElement`.

	Documentation [SVGGradientElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGGradientElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGGradientElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGGradientElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGGradientElement"</e></m></meta>
	</class>
	<class path="js.html.svg.ImageElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/ImageElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<preserveAspectRatio public="1" set="null"><c path="js.html.svg.AnimatedPreserveAspectRatio"/></preserveAspectRatio>
		<href public="1" set="null"><c path="js.html.svg.AnimatedString"/></href>
		<haxe_doc><![CDATA[The `SVGImageElement` interface corresponds to the `image` element.

	Documentation [SVGImageElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGImageElement"</e></m></meta>
	</class>
	<class path="js.html.svg.Length" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/Length.hx" extern="1">
		<SVG_LENGTHTYPE_UNKNOWN public="1" get="inline" set="null" expr="0" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_LENGTHTYPE_UNKNOWN>
		<SVG_LENGTHTYPE_NUMBER public="1" get="inline" set="null" expr="1" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_LENGTHTYPE_NUMBER>
		<SVG_LENGTHTYPE_PERCENTAGE public="1" get="inline" set="null" expr="2" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_LENGTHTYPE_PERCENTAGE>
		<SVG_LENGTHTYPE_EMS public="1" get="inline" set="null" expr="3" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</SVG_LENGTHTYPE_EMS>
		<SVG_LENGTHTYPE_EXS public="1" get="inline" set="null" expr="4" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SVG_LENGTHTYPE_EXS>
		<SVG_LENGTHTYPE_PX public="1" get="inline" set="null" expr="5" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</SVG_LENGTHTYPE_PX>
		<SVG_LENGTHTYPE_CM public="1" get="inline" set="null" expr="6" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</SVG_LENGTHTYPE_CM>
		<SVG_LENGTHTYPE_MM public="1" get="inline" set="null" expr="7" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</SVG_LENGTHTYPE_MM>
		<SVG_LENGTHTYPE_IN public="1" get="inline" set="null" expr="8" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</SVG_LENGTHTYPE_IN>
		<SVG_LENGTHTYPE_PT public="1" get="inline" set="null" expr="9" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</SVG_LENGTHTYPE_PT>
		<SVG_LENGTHTYPE_PC public="1" get="inline" set="null" expr="10" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</SVG_LENGTHTYPE_PC>
		<unitType public="1" set="null"><x path="Int"/></unitType>
		<value public="1"><x path="Float"/></value>
		<valueInSpecifiedUnits public="1"><x path="Float"/></valueInSpecifiedUnits>
		<valueAsString public="1"><c path="String"/></valueAsString>
		<newValueSpecifiedUnits public="1" set="method">
			<f a="unitType:valueInSpecifiedUnits">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</newValueSpecifiedUnits>
		<convertToSpecifiedUnits public="1" set="method">
			<f a="unitType">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</convertToSpecifiedUnits>
		<haxe_doc><![CDATA[The `SVGLength` interface correspond to the length basic data type.

	Documentation [SVGLength](https://developer.mozilla.org/en-US/docs/Web/API/SVGLength) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGLength$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGLength>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGLength"</e></m></meta>
	</class>
	<class path="js.html.svg.LengthList" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/LengthList.hx" extern="1">
		<numberOfItems public="1" set="null"><x path="Int"/></numberOfItems>
		<length public="1" set="null"><x path="Int"/></length>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</clear>
		<initialize public="1" set="method">
			<f a="newItem">
				<c path="js.html.svg.Length"/>
				<c path="js.html.svg.Length"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</initialize>
		<getItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.svg.Length"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getItem>
		<insertItemBefore public="1" set="method">
			<f a="newItem:index">
				<c path="js.html.svg.Length"/>
				<x path="Int"/>
				<c path="js.html.svg.Length"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</insertItemBefore>
		<replaceItem public="1" set="method">
			<f a="newItem:index">
				<c path="js.html.svg.Length"/>
				<x path="Int"/>
				<c path="js.html.svg.Length"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</replaceItem>
		<removeItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.svg.Length"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeItem>
		<appendItem public="1" set="method">
			<f a="newItem">
				<c path="js.html.svg.Length"/>
				<c path="js.html.svg.Length"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</appendItem>
		<haxe_doc><![CDATA[The `SVGLengthList` defines a list of `SVGLength` objects.

	Documentation [SVGLengthList](https://developer.mozilla.org/en-US/docs/Web/API/SVGLengthList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGLengthList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGLengthList>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGLengthList"</e></m></meta>
	</class>
	<class path="js.html.svg.LineElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/LineElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<x1 public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x1>
		<y1 public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y1>
		<x2 public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x2>
		<y2 public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y2>
		<haxe_doc><![CDATA[The `SVGLineElement` interface provides access to the properties of `line` elements, as well as methods to manipulate them.

	Documentation [SVGLineElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGLineElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGLineElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGLineElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGLineElement"</e></m></meta>
	</class>
	<class path="js.html.svg.LinearGradientElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/LinearGradientElement.hx" extern="1">
		<extends path="js.html.svg.GradientElement"/>
		<x1 public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x1>
		<y1 public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y1>
		<x2 public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x2>
		<y2 public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y2>
		<haxe_doc><![CDATA[The `SVGLinearGradientElement` interface corresponds to the `linearGradient` element.

	Documentation [SVGLinearGradientElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGLinearGradientElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGLinearGradientElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGLinearGradientElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGLinearGradientElement"</e></m></meta>
	</class>
	<class path="js.html.svg.MPathElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/MPathElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<href public="1" set="null"><c path="js.html.svg.AnimatedString"/></href>
		<haxe_doc><![CDATA[The `SVGMPathElement` interface corresponds to the `mpath` element.

	Documentation [SVGMPathElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGMPathElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGMPathElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGMPathElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGMPathElement"</e></m></meta>
	</class>
	<class path="js.html.svg.MarkerElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/MarkerElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<SVG_MARKERUNITS_UNKNOWN public="1" get="inline" set="null" expr="0" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_MARKERUNITS_UNKNOWN>
		<SVG_MARKERUNITS_USERSPACEONUSE public="1" get="inline" set="null" expr="1" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_MARKERUNITS_USERSPACEONUSE>
		<SVG_MARKERUNITS_STROKEWIDTH public="1" get="inline" set="null" expr="2" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_MARKERUNITS_STROKEWIDTH>
		<SVG_MARKER_ORIENT_UNKNOWN public="1" get="inline" set="null" expr="0" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_MARKER_ORIENT_UNKNOWN>
		<SVG_MARKER_ORIENT_AUTO public="1" get="inline" set="null" expr="1" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_MARKER_ORIENT_AUTO>
		<SVG_MARKER_ORIENT_ANGLE public="1" get="inline" set="null" expr="2" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_MARKER_ORIENT_ANGLE>
		<refX public="1" set="null"><c path="js.html.svg.AnimatedLength"/></refX>
		<refY public="1" set="null"><c path="js.html.svg.AnimatedLength"/></refY>
		<markerUnits public="1" set="null"><c path="js.html.svg.AnimatedEnumeration"/></markerUnits>
		<markerWidth public="1" set="null"><c path="js.html.svg.AnimatedLength"/></markerWidth>
		<markerHeight public="1" set="null"><c path="js.html.svg.AnimatedLength"/></markerHeight>
		<orientType public="1" set="null"><c path="js.html.svg.AnimatedEnumeration"/></orientType>
		<orientAngle public="1" set="null"><c path="js.html.svg.AnimatedAngle"/></orientAngle>
		<viewBox public="1" set="null"><c path="js.html.svg.AnimatedRect"/></viewBox>
		<preserveAspectRatio public="1" set="null"><c path="js.html.svg.AnimatedPreserveAspectRatio"/></preserveAspectRatio>
		<setOrientToAuto public="1" set="method"><f a=""><x path="Void"/></f></setOrientToAuto>
		<setOrientToAngle public="1" set="method">
			<f a="angle">
				<c path="js.html.svg.Angle"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setOrientToAngle>
		<meta><m n=":native"><e>"SVGMarkerElement"</e></m></meta>
	</class>
	<class path="js.html.svg.MaskElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/MaskElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<SVG_MASKTYPE_LUMINANCE public="1" get="inline" set="null" expr="0" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_MASKTYPE_LUMINANCE>
		<SVG_MASKTYPE_ALPHA public="1" get="inline" set="null" expr="1" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_MASKTYPE_ALPHA>
		<SVG_UNIT_TYPE_UNKNOWN public="1" get="inline" set="null" expr="0" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_UNIT_TYPE_UNKNOWN>
		<SVG_UNIT_TYPE_USERSPACEONUSE public="1" get="inline" set="null" expr="1" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_UNIT_TYPE_USERSPACEONUSE>
		<SVG_UNIT_TYPE_OBJECTBOUNDINGBOX public="1" get="inline" set="null" expr="2" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_UNIT_TYPE_OBJECTBOUNDINGBOX>
		<maskUnits public="1" set="null"><c path="js.html.svg.AnimatedEnumeration"/></maskUnits>
		<maskContentUnits public="1" set="null"><c path="js.html.svg.AnimatedEnumeration"/></maskContentUnits>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<haxe_doc><![CDATA[The `SVGMaskElement` interface provides access to the properties of `mask` elements, as well as methods to manipulate them.

	Documentation [SVGMaskElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGMaskElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGMaskElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGMaskElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGMaskElement"</e></m></meta>
	</class>
	<class path="js.html.svg.Matrix" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/Matrix.hx" extern="1">
		<a public="1"><x path="Float"/></a>
		<b public="1"><x path="Float"/></b>
		<c public="1"><x path="Float"/></c>
		<d public="1"><x path="Float"/></d>
		<e public="1"><x path="Float"/></e>
		<f public="1"><x path="Float"/></f>
		<multiply public="1" set="method"><f a="secondMatrix">
	<c path="js.html.svg.Matrix"/>
	<c path="js.html.svg.Matrix"/>
</f></multiply>
		<inverse public="1" set="method">
			<f a=""><c path="js.html.svg.Matrix"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</inverse>
		<translate public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.svg.Matrix"/>
</f></translate>
		<scale public="1" set="method"><f a="scaleFactor">
	<x path="Float"/>
	<c path="js.html.svg.Matrix"/>
</f></scale>
		<scaleNonUniform public="1" set="method"><f a="scaleFactorX:scaleFactorY">
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.svg.Matrix"/>
</f></scaleNonUniform>
		<rotate public="1" set="method"><f a="angle">
	<x path="Float"/>
	<c path="js.html.svg.Matrix"/>
</f></rotate>
		<rotateFromVector public="1" set="method">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</rotateFromVector>
		<flipX public="1" set="method"><f a=""><c path="js.html.svg.Matrix"/></f></flipX>
		<flipY public="1" set="method"><f a=""><c path="js.html.svg.Matrix"/></f></flipY>
		<skewX public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</skewX>
		<skewY public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<c path="js.html.svg.Matrix"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</skewY>
		<haxe_doc><![CDATA[Many of SVG's graphics operations utilize 2x3 matrices of the form:

	Documentation [SVGMatrix](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGMatrix"</e></m></meta>
	</class>
	<class path="js.html.svg.MetadataElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/MetadataElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<meta><m n=":native"><e>"SVGMetadataElement"</e></m></meta>
	</class>
	<class path="js.html.svg.Number" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/Number.hx" extern="1">
		<value public="1"><x path="Float"/></value>
		<new public="1" set="method">
			<f a="value">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads><new public="1" set="method">
	<f a=""><x path="Void"/></f>
	<haxe_doc>@throws DOMError</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc><![CDATA[The `SVGNumber` interface correspond to the number basic data type.

	Documentation [SVGNumber](https://developer.mozilla.org/en-US/docs/Web/API/SVGNumber) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGNumber$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGNumber>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGNumber"</e></m></meta>
	</class>
	<class path="js.html.svg.NumberList" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/NumberList.hx" extern="1">
		<numberOfItems public="1" set="null"><x path="Int"/></numberOfItems>
		<length public="1" set="null"><x path="Int"/></length>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</clear>
		<initialize public="1" set="method">
			<f a="newItem">
				<c path="js.html.svg.Number"/>
				<c path="js.html.svg.Number"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</initialize>
		<getItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.svg.Number"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getItem>
		<insertItemBefore public="1" set="method">
			<f a="newItem:index">
				<c path="js.html.svg.Number"/>
				<x path="Int"/>
				<c path="js.html.svg.Number"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</insertItemBefore>
		<replaceItem public="1" set="method">
			<f a="newItem:index">
				<c path="js.html.svg.Number"/>
				<x path="Int"/>
				<c path="js.html.svg.Number"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</replaceItem>
		<removeItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.svg.Number"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeItem>
		<appendItem public="1" set="method">
			<f a="newItem">
				<c path="js.html.svg.Number"/>
				<c path="js.html.svg.Number"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</appendItem>
		<haxe_doc><![CDATA[The `SVGNumberList` defines a list of `SVGNumber` objects.

	Documentation [SVGNumberList](https://developer.mozilla.org/en-US/docs/Web/API/SVGNumberList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGNumberList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGNumberList>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGNumberList"</e></m></meta>
	</class>
	<class path="js.html.svg.PathElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/PathElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<pathLength public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></pathLength>
		<pathSegList public="1" set="null"><c path="js.html.svg.PathSegList"/></pathSegList>
		<animatedPathSegList public="1" set="null"><c path="js.html.svg.PathSegList"/></animatedPathSegList>
		<getTotalLength public="1" set="method"><f a=""><x path="Float"/></f></getTotalLength>
		<getPointAtLength public="1" set="method">
			<f a="distance">
				<x path="Float"/>
				<c path="js.html.svg.Point"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getPointAtLength>
		<getPathSegAtLength public="1" set="method"><f a="distance">
	<x path="Float"/>
	<x path="Int"/>
</f></getPathSegAtLength>
		<createSVGPathSegClosePath public="1" set="method"><f a=""><c path="js.html.svg.PathSegClosePath"/></f></createSVGPathSegClosePath>
		<createSVGPathSegMovetoAbs public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.svg.PathSegMovetoAbs"/>
</f></createSVGPathSegMovetoAbs>
		<createSVGPathSegMovetoRel public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.svg.PathSegMovetoRel"/>
</f></createSVGPathSegMovetoRel>
		<createSVGPathSegLinetoAbs public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.svg.PathSegLinetoAbs"/>
</f></createSVGPathSegLinetoAbs>
		<createSVGPathSegLinetoRel public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.svg.PathSegLinetoRel"/>
</f></createSVGPathSegLinetoRel>
		<createSVGPathSegCurvetoCubicAbs public="1" set="method"><f a="x:y:x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.svg.PathSegCurvetoCubicAbs"/>
</f></createSVGPathSegCurvetoCubicAbs>
		<createSVGPathSegCurvetoCubicRel public="1" set="method"><f a="x:y:x1:y1:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.svg.PathSegCurvetoCubicRel"/>
</f></createSVGPathSegCurvetoCubicRel>
		<createSVGPathSegCurvetoQuadraticAbs public="1" set="method"><f a="x:y:x1:y1">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.svg.PathSegCurvetoQuadraticAbs"/>
</f></createSVGPathSegCurvetoQuadraticAbs>
		<createSVGPathSegCurvetoQuadraticRel public="1" set="method"><f a="x:y:x1:y1">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.svg.PathSegCurvetoQuadraticRel"/>
</f></createSVGPathSegCurvetoQuadraticRel>
		<createSVGPathSegArcAbs public="1" set="method"><f a="x:y:r1:r2:angle:largeArcFlag:sweepFlag">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="js.html.svg.PathSegArcAbs"/>
</f></createSVGPathSegArcAbs>
		<createSVGPathSegArcRel public="1" set="method"><f a="x:y:r1:r2:angle:largeArcFlag:sweepFlag">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="js.html.svg.PathSegArcRel"/>
</f></createSVGPathSegArcRel>
		<createSVGPathSegLinetoHorizontalAbs public="1" set="method"><f a="x">
	<x path="Float"/>
	<c path="js.html.svg.PathSegLinetoHorizontalAbs"/>
</f></createSVGPathSegLinetoHorizontalAbs>
		<createSVGPathSegLinetoHorizontalRel public="1" set="method"><f a="x">
	<x path="Float"/>
	<c path="js.html.svg.PathSegLinetoHorizontalRel"/>
</f></createSVGPathSegLinetoHorizontalRel>
		<createSVGPathSegLinetoVerticalAbs public="1" set="method"><f a="y">
	<x path="Float"/>
	<c path="js.html.svg.PathSegLinetoVerticalAbs"/>
</f></createSVGPathSegLinetoVerticalAbs>
		<createSVGPathSegLinetoVerticalRel public="1" set="method"><f a="y">
	<x path="Float"/>
	<c path="js.html.svg.PathSegLinetoVerticalRel"/>
</f></createSVGPathSegLinetoVerticalRel>
		<createSVGPathSegCurvetoCubicSmoothAbs public="1" set="method"><f a="x:y:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.svg.PathSegCurvetoCubicSmoothAbs"/>
</f></createSVGPathSegCurvetoCubicSmoothAbs>
		<createSVGPathSegCurvetoCubicSmoothRel public="1" set="method"><f a="x:y:x2:y2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.svg.PathSegCurvetoCubicSmoothRel"/>
</f></createSVGPathSegCurvetoCubicSmoothRel>
		<createSVGPathSegCurvetoQuadraticSmoothAbs public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.svg.PathSegCurvetoQuadraticSmoothAbs"/>
</f></createSVGPathSegCurvetoQuadraticSmoothAbs>
		<createSVGPathSegCurvetoQuadraticSmoothRel public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="js.html.svg.PathSegCurvetoQuadraticSmoothRel"/>
</f></createSVGPathSegCurvetoQuadraticSmoothRel>
		<haxe_doc><![CDATA[The `SVGPathElement` interface corresponds to the `path` element.

	Documentation [SVGPathElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGPathElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGPathElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGPathElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGPathElement"</e></m></meta>
	</class>
	<class path="js.html.svg.PathSeg" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/PathSeg.hx" extern="1">
		<PATHSEG_UNKNOWN public="1" get="inline" set="null" expr="0" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</PATHSEG_UNKNOWN>
		<PATHSEG_CLOSEPATH public="1" get="inline" set="null" expr="1" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</PATHSEG_CLOSEPATH>
		<PATHSEG_MOVETO_ABS public="1" get="inline" set="null" expr="2" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</PATHSEG_MOVETO_ABS>
		<PATHSEG_MOVETO_REL public="1" get="inline" set="null" expr="3" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</PATHSEG_MOVETO_REL>
		<PATHSEG_LINETO_ABS public="1" get="inline" set="null" expr="4" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</PATHSEG_LINETO_ABS>
		<PATHSEG_LINETO_REL public="1" get="inline" set="null" expr="5" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</PATHSEG_LINETO_REL>
		<PATHSEG_CURVETO_CUBIC_ABS public="1" get="inline" set="null" expr="6" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</PATHSEG_CURVETO_CUBIC_ABS>
		<PATHSEG_CURVETO_CUBIC_REL public="1" get="inline" set="null" expr="7" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</PATHSEG_CURVETO_CUBIC_REL>
		<PATHSEG_CURVETO_QUADRATIC_ABS public="1" get="inline" set="null" expr="8" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</PATHSEG_CURVETO_QUADRATIC_ABS>
		<PATHSEG_CURVETO_QUADRATIC_REL public="1" get="inline" set="null" expr="9" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</PATHSEG_CURVETO_QUADRATIC_REL>
		<PATHSEG_ARC_ABS public="1" get="inline" set="null" expr="10" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</PATHSEG_ARC_ABS>
		<PATHSEG_ARC_REL public="1" get="inline" set="null" expr="11" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>11</e></m></meta>
		</PATHSEG_ARC_REL>
		<PATHSEG_LINETO_HORIZONTAL_ABS public="1" get="inline" set="null" expr="12" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</PATHSEG_LINETO_HORIZONTAL_ABS>
		<PATHSEG_LINETO_HORIZONTAL_REL public="1" get="inline" set="null" expr="13" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>13</e></m></meta>
		</PATHSEG_LINETO_HORIZONTAL_REL>
		<PATHSEG_LINETO_VERTICAL_ABS public="1" get="inline" set="null" expr="14" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>14</e></m></meta>
		</PATHSEG_LINETO_VERTICAL_ABS>
		<PATHSEG_LINETO_VERTICAL_REL public="1" get="inline" set="null" expr="15" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>15</e></m></meta>
		</PATHSEG_LINETO_VERTICAL_REL>
		<PATHSEG_CURVETO_CUBIC_SMOOTH_ABS public="1" get="inline" set="null" expr="16" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</PATHSEG_CURVETO_CUBIC_SMOOTH_ABS>
		<PATHSEG_CURVETO_CUBIC_SMOOTH_REL public="1" get="inline" set="null" expr="17" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>17</e></m></meta>
		</PATHSEG_CURVETO_CUBIC_SMOOTH_REL>
		<PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS public="1" get="inline" set="null" expr="18" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>18</e></m></meta>
		</PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS>
		<PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL public="1" get="inline" set="null" expr="19" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>19</e></m></meta>
		</PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL>
		<pathSegType public="1" set="null"><x path="Int"/></pathSegType>
		<pathSegTypeAsLetter public="1" set="null"><c path="String"/></pathSegTypeAsLetter>
		<meta><m n=":native"><e>"SVGPathSeg"</e></m></meta>
	</class>
	<class path="js.html.svg.PathSegArcAbs" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/PathSegArcAbs.hx" extern="1">
		<extends path="js.html.svg.PathSeg"/>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<r1 public="1"><x path="Float"/></r1>
		<r2 public="1"><x path="Float"/></r2>
		<angle public="1"><x path="Float"/></angle>
		<largeArcFlag public="1"><x path="Bool"/></largeArcFlag>
		<sweepFlag public="1"><x path="Bool"/></sweepFlag>
		<meta><m n=":native"><e>"SVGPathSegArcAbs"</e></m></meta>
	</class>
	<class path="js.html.svg.PathSegArcRel" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/PathSegArcRel.hx" extern="1">
		<extends path="js.html.svg.PathSeg"/>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<r1 public="1"><x path="Float"/></r1>
		<r2 public="1"><x path="Float"/></r2>
		<angle public="1"><x path="Float"/></angle>
		<largeArcFlag public="1"><x path="Bool"/></largeArcFlag>
		<sweepFlag public="1"><x path="Bool"/></sweepFlag>
		<meta><m n=":native"><e>"SVGPathSegArcRel"</e></m></meta>
	</class>
	<class path="js.html.svg.PathSegClosePath" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/PathSegClosePath.hx" extern="1">
		<extends path="js.html.svg.PathSeg"/>
		<meta><m n=":native"><e>"SVGPathSegClosePath"</e></m></meta>
	</class>
	<class path="js.html.svg.PathSegCurvetoCubicAbs" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/PathSegCurvetoCubicAbs.hx" extern="1">
		<extends path="js.html.svg.PathSeg"/>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<x1 public="1"><x path="Float"/></x1>
		<y1 public="1"><x path="Float"/></y1>
		<x2 public="1"><x path="Float"/></x2>
		<y2 public="1"><x path="Float"/></y2>
		<meta><m n=":native"><e>"SVGPathSegCurvetoCubicAbs"</e></m></meta>
	</class>
	<class path="js.html.svg.PathSegCurvetoCubicRel" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/PathSegCurvetoCubicRel.hx" extern="1">
		<extends path="js.html.svg.PathSeg"/>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<x1 public="1"><x path="Float"/></x1>
		<y1 public="1"><x path="Float"/></y1>
		<x2 public="1"><x path="Float"/></x2>
		<y2 public="1"><x path="Float"/></y2>
		<meta><m n=":native"><e>"SVGPathSegCurvetoCubicRel"</e></m></meta>
	</class>
	<class path="js.html.svg.PathSegCurvetoCubicSmoothAbs" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/PathSegCurvetoCubicSmoothAbs.hx" extern="1">
		<extends path="js.html.svg.PathSeg"/>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<x2 public="1"><x path="Float"/></x2>
		<y2 public="1"><x path="Float"/></y2>
		<meta><m n=":native"><e>"SVGPathSegCurvetoCubicSmoothAbs"</e></m></meta>
	</class>
	<class path="js.html.svg.PathSegCurvetoCubicSmoothRel" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/PathSegCurvetoCubicSmoothRel.hx" extern="1">
		<extends path="js.html.svg.PathSeg"/>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<x2 public="1"><x path="Float"/></x2>
		<y2 public="1"><x path="Float"/></y2>
		<meta><m n=":native"><e>"SVGPathSegCurvetoCubicSmoothRel"</e></m></meta>
	</class>
	<class path="js.html.svg.PathSegCurvetoQuadraticAbs" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/PathSegCurvetoQuadraticAbs.hx" extern="1">
		<extends path="js.html.svg.PathSeg"/>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<x1 public="1"><x path="Float"/></x1>
		<y1 public="1"><x path="Float"/></y1>
		<meta><m n=":native"><e>"SVGPathSegCurvetoQuadraticAbs"</e></m></meta>
	</class>
	<class path="js.html.svg.PathSegCurvetoQuadraticRel" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/PathSegCurvetoQuadraticRel.hx" extern="1">
		<extends path="js.html.svg.PathSeg"/>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<x1 public="1"><x path="Float"/></x1>
		<y1 public="1"><x path="Float"/></y1>
		<meta><m n=":native"><e>"SVGPathSegCurvetoQuadraticRel"</e></m></meta>
	</class>
	<class path="js.html.svg.PathSegCurvetoQuadraticSmoothAbs" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/PathSegCurvetoQuadraticSmoothAbs.hx" extern="1">
		<extends path="js.html.svg.PathSeg"/>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<meta><m n=":native"><e>"SVGPathSegCurvetoQuadraticSmoothAbs"</e></m></meta>
	</class>
	<class path="js.html.svg.PathSegCurvetoQuadraticSmoothRel" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/PathSegCurvetoQuadraticSmoothRel.hx" extern="1">
		<extends path="js.html.svg.PathSeg"/>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<meta><m n=":native"><e>"SVGPathSegCurvetoQuadraticSmoothRel"</e></m></meta>
	</class>
	<class path="js.html.svg.PathSegLinetoAbs" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/PathSegLinetoAbs.hx" extern="1">
		<extends path="js.html.svg.PathSeg"/>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<meta><m n=":native"><e>"SVGPathSegLinetoAbs"</e></m></meta>
	</class>
	<class path="js.html.svg.PathSegLinetoHorizontalAbs" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/PathSegLinetoHorizontalAbs.hx" extern="1">
		<extends path="js.html.svg.PathSeg"/>
		<x public="1"><x path="Float"/></x>
		<meta><m n=":native"><e>"SVGPathSegLinetoHorizontalAbs"</e></m></meta>
	</class>
	<class path="js.html.svg.PathSegLinetoHorizontalRel" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/PathSegLinetoHorizontalRel.hx" extern="1">
		<extends path="js.html.svg.PathSeg"/>
		<x public="1"><x path="Float"/></x>
		<meta><m n=":native"><e>"SVGPathSegLinetoHorizontalRel"</e></m></meta>
	</class>
	<class path="js.html.svg.PathSegLinetoRel" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/PathSegLinetoRel.hx" extern="1">
		<extends path="js.html.svg.PathSeg"/>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<meta><m n=":native"><e>"SVGPathSegLinetoRel"</e></m></meta>
	</class>
	<class path="js.html.svg.PathSegLinetoVerticalAbs" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/PathSegLinetoVerticalAbs.hx" extern="1">
		<extends path="js.html.svg.PathSeg"/>
		<y public="1"><x path="Float"/></y>
		<meta><m n=":native"><e>"SVGPathSegLinetoVerticalAbs"</e></m></meta>
	</class>
	<class path="js.html.svg.PathSegLinetoVerticalRel" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/PathSegLinetoVerticalRel.hx" extern="1">
		<extends path="js.html.svg.PathSeg"/>
		<y public="1"><x path="Float"/></y>
		<meta><m n=":native"><e>"SVGPathSegLinetoVerticalRel"</e></m></meta>
	</class>
	<class path="js.html.svg.PathSegList" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/PathSegList.hx" extern="1">
		<numberOfItems public="1" set="null"><x path="Int"/></numberOfItems>
		<length public="1" set="null"><x path="Int"/></length>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</clear>
		<initialize public="1" set="method">
			<f a="newItem">
				<c path="js.html.svg.PathSeg"/>
				<c path="js.html.svg.PathSeg"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</initialize>
		<getItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.svg.PathSeg"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getItem>
		<insertItemBefore public="1" set="method">
			<f a="newItem:index">
				<c path="js.html.svg.PathSeg"/>
				<x path="Int"/>
				<c path="js.html.svg.PathSeg"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</insertItemBefore>
		<replaceItem public="1" set="method">
			<f a="newItem:index">
				<c path="js.html.svg.PathSeg"/>
				<x path="Int"/>
				<c path="js.html.svg.PathSeg"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</replaceItem>
		<removeItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.svg.PathSeg"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeItem>
		<appendItem public="1" set="method">
			<f a="newItem">
				<c path="js.html.svg.PathSeg"/>
				<c path="js.html.svg.PathSeg"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</appendItem>
		<meta><m n=":native"><e>"SVGPathSegList"</e></m></meta>
	</class>
	<class path="js.html.svg.PathSegMovetoAbs" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/PathSegMovetoAbs.hx" extern="1">
		<extends path="js.html.svg.PathSeg"/>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<meta><m n=":native"><e>"SVGPathSegMovetoAbs"</e></m></meta>
	</class>
	<class path="js.html.svg.PathSegMovetoRel" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/PathSegMovetoRel.hx" extern="1">
		<extends path="js.html.svg.PathSeg"/>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<meta><m n=":native"><e>"SVGPathSegMovetoRel"</e></m></meta>
	</class>
	<class path="js.html.svg.PatternElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/PatternElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<SVG_UNIT_TYPE_UNKNOWN public="1" get="inline" set="null" expr="0" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_UNIT_TYPE_UNKNOWN>
		<SVG_UNIT_TYPE_USERSPACEONUSE public="1" get="inline" set="null" expr="1" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_UNIT_TYPE_USERSPACEONUSE>
		<SVG_UNIT_TYPE_OBJECTBOUNDINGBOX public="1" get="inline" set="null" expr="2" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_UNIT_TYPE_OBJECTBOUNDINGBOX>
		<patternUnits public="1" set="null"><c path="js.html.svg.AnimatedEnumeration"/></patternUnits>
		<patternContentUnits public="1" set="null"><c path="js.html.svg.AnimatedEnumeration"/></patternContentUnits>
		<patternTransform public="1" set="null"><c path="js.html.svg.AnimatedTransformList"/></patternTransform>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<viewBox public="1" set="null"><c path="js.html.svg.AnimatedRect"/></viewBox>
		<preserveAspectRatio public="1" set="null"><c path="js.html.svg.AnimatedPreserveAspectRatio"/></preserveAspectRatio>
		<href public="1" set="null"><c path="js.html.svg.AnimatedString"/></href>
		<haxe_doc><![CDATA[The `SVGPatternElement` interface corresponds to the `pattern` element.

	Documentation [SVGPatternElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGPatternElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGPatternElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGPatternElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGPatternElement"</e></m></meta>
	</class>
	<class path="js.html.svg.Point" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/Point.hx" extern="1">
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<matrixTransform public="1" set="method"><f a="matrix">
	<c path="js.html.svg.Matrix"/>
	<c path="js.html.svg.Point"/>
</f></matrixTransform>
		<haxe_doc><![CDATA[An `SVGPoint` represents a 2D or 3D point in the SVG coordinate system.

	Documentation [SVGPoint](https://developer.mozilla.org/en-US/docs/Web/API/SVGPoint) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGPoint$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGPoint>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGPoint"</e></m></meta>
	</class>
	<class path="js.html.svg.PointList" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/PointList.hx" extern="1">
		<numberOfItems public="1" set="null"><x path="Int"/></numberOfItems>
		<length public="1" set="null"><x path="Int"/></length>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</clear>
		<initialize public="1" set="method">
			<f a="newItem">
				<c path="js.html.svg.Point"/>
				<c path="js.html.svg.Point"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</initialize>
		<getItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.svg.Point"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getItem>
		<insertItemBefore public="1" set="method">
			<f a="newItem:index">
				<c path="js.html.svg.Point"/>
				<x path="Int"/>
				<c path="js.html.svg.Point"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</insertItemBefore>
		<replaceItem public="1" set="method">
			<f a="newItem:index">
				<c path="js.html.svg.Point"/>
				<x path="Int"/>
				<c path="js.html.svg.Point"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</replaceItem>
		<removeItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.svg.Point"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeItem>
		<appendItem public="1" set="method">
			<f a="newItem">
				<c path="js.html.svg.Point"/>
				<c path="js.html.svg.Point"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</appendItem>
		<meta><m n=":native"><e>"SVGPointList"</e></m></meta>
	</class>
	<class path="js.html.svg.PolygonElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/PolygonElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<points public="1" set="null"><c path="js.html.svg.PointList"/></points>
		<animatedPoints public="1" set="null"><c path="js.html.svg.PointList"/></animatedPoints>
		<haxe_doc><![CDATA[The `SVGPolygonElement` interface provides access to the properties of `polygon` elements, as well as methods to manipulate them.

	Documentation [SVGPolygonElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGPolygonElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGPolygonElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGPolygonElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGPolygonElement"</e></m></meta>
	</class>
	<class path="js.html.svg.PolylineElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/PolylineElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<points public="1" set="null"><c path="js.html.svg.PointList"/></points>
		<animatedPoints public="1" set="null"><c path="js.html.svg.PointList"/></animatedPoints>
		<haxe_doc><![CDATA[The `SVGPolylineElement` interface provides access to the properties of `polyline` elements, as well as methods to manipulate them.

	Documentation [SVGPolylineElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGPolylineElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGPolylineElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGPolylineElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGPolylineElement"</e></m></meta>
	</class>
	<class path="js.html.svg.PreserveAspectRatio" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/PreserveAspectRatio.hx" extern="1">
		<SVG_PRESERVEASPECTRATIO_UNKNOWN public="1" get="inline" set="null" expr="0" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_UNKNOWN>
		<SVG_PRESERVEASPECTRATIO_NONE public="1" get="inline" set="null" expr="1" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_NONE>
		<SVG_PRESERVEASPECTRATIO_XMINYMIN public="1" get="inline" set="null" expr="2" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMINYMIN>
		<SVG_PRESERVEASPECTRATIO_XMIDYMIN public="1" get="inline" set="null" expr="3" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMIDYMIN>
		<SVG_PRESERVEASPECTRATIO_XMAXYMIN public="1" get="inline" set="null" expr="4" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMAXYMIN>
		<SVG_PRESERVEASPECTRATIO_XMINYMID public="1" get="inline" set="null" expr="5" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMINYMID>
		<SVG_PRESERVEASPECTRATIO_XMIDYMID public="1" get="inline" set="null" expr="6" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMIDYMID>
		<SVG_PRESERVEASPECTRATIO_XMAXYMID public="1" get="inline" set="null" expr="7" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMAXYMID>
		<SVG_PRESERVEASPECTRATIO_XMINYMAX public="1" get="inline" set="null" expr="8" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMINYMAX>
		<SVG_PRESERVEASPECTRATIO_XMIDYMAX public="1" get="inline" set="null" expr="9" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMIDYMAX>
		<SVG_PRESERVEASPECTRATIO_XMAXYMAX public="1" get="inline" set="null" expr="10" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</SVG_PRESERVEASPECTRATIO_XMAXYMAX>
		<SVG_MEETORSLICE_UNKNOWN public="1" get="inline" set="null" expr="0" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_MEETORSLICE_UNKNOWN>
		<SVG_MEETORSLICE_MEET public="1" get="inline" set="null" expr="1" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_MEETORSLICE_MEET>
		<SVG_MEETORSLICE_SLICE public="1" get="inline" set="null" expr="2" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_MEETORSLICE_SLICE>
		<align public="1"><x path="Int"/></align>
		<meetOrSlice public="1"><x path="Int"/></meetOrSlice>
		<haxe_doc><![CDATA[The `SVGPreserveAspectRatio` interface corresponds to the `preserveAspectRatio` attribute, which is available for some of SVG's elements.

	Documentation [SVGPreserveAspectRatio](https://developer.mozilla.org/en-US/docs/Web/API/SVGPreserveAspectRatio) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGPreserveAspectRatio$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGPreserveAspectRatio>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGPreserveAspectRatio"</e></m></meta>
	</class>
	<class path="js.html.svg.RadialGradientElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/RadialGradientElement.hx" extern="1">
		<extends path="js.html.svg.GradientElement"/>
		<cx public="1" set="null"><c path="js.html.svg.AnimatedLength"/></cx>
		<cy public="1" set="null"><c path="js.html.svg.AnimatedLength"/></cy>
		<r public="1" set="null"><c path="js.html.svg.AnimatedLength"/></r>
		<fx public="1" set="null"><c path="js.html.svg.AnimatedLength"/></fx>
		<fy public="1" set="null"><c path="js.html.svg.AnimatedLength"/></fy>
		<haxe_doc><![CDATA[The `SVGRadialGradientElement` interface corresponds to the `radialGradient` element.

	Documentation [SVGRadialGradientElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGRadialGradientElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGRadialGradientElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGRadialGradientElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGRadialGradientElement"</e></m></meta>
	</class>
	<class path="js.html.svg.Rect" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/Rect.hx" extern="1">
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<width public="1"><x path="Float"/></width>
		<height public="1"><x path="Float"/></height>
		<haxe_doc><![CDATA[The `SVGRect` represents a rectangle. Rectangles consist of codex/code and codey/code coordinate pair identifying a minimum X value, a minimum Y value, and a width and height, which are constrained to be non-negative.

	Documentation [SVGRect](https://developer.mozilla.org/en-US/docs/Web/API/SVGRect) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGRect$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGRect>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGRect"</e></m></meta>
	</class>
	<class path="js.html.svg.RectElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/RectElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<rx public="1" set="null"><c path="js.html.svg.AnimatedLength"/></rx>
		<ry public="1" set="null"><c path="js.html.svg.AnimatedLength"/></ry>
		<haxe_doc><![CDATA[The `SVGRectElement` interface provides access to the properties of `rect` elements, as well as methods to manipulate them.

	Documentation [SVGRectElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGRectElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGRectElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGRectElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGRectElement"</e></m></meta>
	</class>
	<class path="js.html.svg.SVGElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/SVGElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<SVG_ZOOMANDPAN_UNKNOWN public="1" get="inline" set="null" expr="0" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_ZOOMANDPAN_UNKNOWN>
		<SVG_ZOOMANDPAN_DISABLE public="1" get="inline" set="null" expr="1" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_ZOOMANDPAN_DISABLE>
		<SVG_ZOOMANDPAN_MAGNIFY public="1" get="inline" set="null" expr="2" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_ZOOMANDPAN_MAGNIFY>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<pixelUnitToMillimeterX public="1" set="null"><x path="Float"/></pixelUnitToMillimeterX>
		<pixelUnitToMillimeterY public="1" set="null"><x path="Float"/></pixelUnitToMillimeterY>
		<screenPixelToMillimeterX public="1" set="null"><x path="Float"/></screenPixelToMillimeterX>
		<screenPixelToMillimeterY public="1" set="null"><x path="Float"/></screenPixelToMillimeterY>
		<useCurrentView public="1" set="null"><x path="Bool"/></useCurrentView>
		<currentScale public="1"><x path="Float"/></currentScale>
		<currentTranslate public="1" set="null"><c path="js.html.svg.Point"/></currentTranslate>
		<viewBox public="1" set="null"><c path="js.html.svg.AnimatedRect"/></viewBox>
		<preserveAspectRatio public="1" set="null"><c path="js.html.svg.AnimatedPreserveAspectRatio"/></preserveAspectRatio>
		<zoomAndPan public="1"><x path="Int"/></zoomAndPan>
		<suspendRedraw public="1" set="method"><f a="maxWaitMilliseconds">
	<x path="Int"/>
	<x path="Int"/>
</f></suspendRedraw>
		<unsuspendRedraw public="1" set="method"><f a="suspendHandleID">
	<x path="Int"/>
	<x path="Void"/>
</f></unsuspendRedraw>
		<unsuspendRedrawAll public="1" set="method"><f a=""><x path="Void"/></f></unsuspendRedrawAll>
		<forceRedraw public="1" set="method"><f a=""><x path="Void"/></f></forceRedraw>
		<pauseAnimations public="1" set="method"><f a=""><x path="Void"/></f></pauseAnimations>
		<unpauseAnimations public="1" set="method"><f a=""><x path="Void"/></f></unpauseAnimations>
		<animationsPaused public="1" set="method"><f a=""><x path="Bool"/></f></animationsPaused>
		<getCurrentTime public="1" set="method"><f a=""><x path="Float"/></f></getCurrentTime>
		<setCurrentTime public="1" set="method"><f a="seconds">
	<x path="Float"/>
	<x path="Void"/>
</f></setCurrentTime>
		<deselectAll public="1" set="method"><f a=""><x path="Void"/></f></deselectAll>
		<createSVGNumber public="1" set="method"><f a=""><c path="js.html.svg.Number"/></f></createSVGNumber>
		<createSVGLength public="1" set="method"><f a=""><c path="js.html.svg.Length"/></f></createSVGLength>
		<createSVGAngle public="1" set="method"><f a=""><c path="js.html.svg.Angle"/></f></createSVGAngle>
		<createSVGPoint public="1" set="method"><f a=""><c path="js.html.svg.Point"/></f></createSVGPoint>
		<createSVGMatrix public="1" set="method"><f a=""><c path="js.html.svg.Matrix"/></f></createSVGMatrix>
		<createSVGRect public="1" set="method"><f a=""><c path="js.html.svg.Rect"/></f></createSVGRect>
		<createSVGTransform public="1" set="method"><f a=""><c path="js.html.svg.Transform"/></f></createSVGTransform>
		<createSVGTransformFromMatrix public="1" set="method"><f a="matrix">
	<c path="js.html.svg.Matrix"/>
	<c path="js.html.svg.Transform"/>
</f></createSVGTransformFromMatrix>
		<getElementById public="1" set="method"><f a="elementId">
	<c path="String"/>
	<c path="js.html.Element"/>
</f></getElementById>
		<haxe_doc><![CDATA[The `SVGSVGElement` interface provides access to the properties of `svg` elements, as well as methods to manipulate them. This interface contains also various miscellaneous commonly-used utility methods, such as matrix operations and the ability to control the time of redraw on visual rendering devices.

	Documentation [SVGSVGElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGSVGElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGSVGElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGSVGElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGSVGElement"</e></m></meta>
	</class>
	<class path="js.html.svg.ScriptElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/ScriptElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<type public="1"><c path="String"/></type>
		<crossOrigin public="1"><c path="String"/></crossOrigin>
		<href public="1" set="null"><c path="js.html.svg.AnimatedString"/></href>
		<haxe_doc><![CDATA[The `SVGScriptElement` interface corresponds to the SVG `script` element.

	Documentation [SVGScriptElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGScriptElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGScriptElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGScriptElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGScriptElement"</e></m></meta>
	</class>
	<class path="js.html.svg.SetElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/SetElement.hx" extern="1">
		<extends path="js.html.svg.AnimationElement"/>
		<haxe_doc><![CDATA[The `SVGSetElement` interface corresponds to the `set` element.

	Documentation [SVGSetElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGSetElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGSetElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGSetElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGSetElement"</e></m></meta>
	</class>
	<class path="js.html.svg.StopElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/StopElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<offset public="1" set="null"><c path="js.html.svg.AnimatedNumber"/></offset>
		<haxe_doc><![CDATA[The `SVGStopElement` interface corresponds to the `stop` element.

	Documentation [SVGStopElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGStopElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGStopElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGStopElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGStopElement"</e></m></meta>
	</class>
	<class path="js.html.svg.StringList" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/StringList.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<numberOfItems public="1" set="null"><x path="Int"/></numberOfItems>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<initialize public="1" set="method">
			<f a="newItem">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</initialize>
		<getItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getItem>
		<insertItemBefore public="1" set="method">
			<f a="newItem:index">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</insertItemBefore>
		<replaceItem public="1" set="method">
			<f a="newItem:index">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</replaceItem>
		<removeItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeItem>
		<appendItem public="1" set="method">
			<f a="newItem">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</appendItem>
		<haxe_doc><![CDATA[The `SVGStringList` defines a list of `DOMString` objects.

	Documentation [SVGStringList](https://developer.mozilla.org/en-US/docs/Web/API/SVGStringList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGStringList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGStringList>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGStringList"</e></m></meta>
	</class>
	<class path="js.html.svg.StyleElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/StyleElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<xmlspace public="1"><c path="String"/></xmlspace>
		<type public="1"><c path="String"/></type>
		<media public="1"><c path="String"/></media>
		<scoped public="1"><x path="Bool"/></scoped>
		<sheet public="1" set="null"><c path="js.html.StyleSheet"/></sheet>
		<haxe_doc><![CDATA[The `SVGStyleElement` interface corresponds to the SVG `style` element.

	Documentation [SVGStyleElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGStyleElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGStyleElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGStyleElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGStyleElement"</e></m></meta>
	</class>
	<class path="js.html.svg.SwitchElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/SwitchElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<haxe_doc><![CDATA[The `SVGSwitchElement` interface corresponds to the `switch` element.

	Documentation [SVGSwitchElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGSwitchElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGSwitchElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGSwitchElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGSwitchElement"</e></m></meta>
	</class>
	<class path="js.html.svg.SymbolElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/SymbolElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<viewBox public="1" set="null"><c path="js.html.svg.AnimatedRect"/></viewBox>
		<preserveAspectRatio public="1" set="null"><c path="js.html.svg.AnimatedPreserveAspectRatio"/></preserveAspectRatio>
		<requiredFeatures public="1" set="null"><c path="js.html.svg.StringList"/></requiredFeatures>
		<requiredExtensions public="1" set="null"><c path="js.html.svg.StringList"/></requiredExtensions>
		<systemLanguage public="1" set="null"><c path="js.html.svg.StringList"/></systemLanguage>
		<hasExtension public="1" set="method"><f a="extension">
	<c path="String"/>
	<x path="Bool"/>
</f></hasExtension>
		<haxe_doc><![CDATA[The `SVGSymbolElement` interface corresponds to the `symbol` element.

	Documentation [SVGSymbolElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGSymbolElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGSymbolElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGSymbolElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGSymbolElement"</e></m></meta>
	</class>
	<class path="js.html.svg.TSpanElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/TSpanElement.hx" extern="1">
		<extends path="js.html.svg.TextPositioningElement"/>
		<haxe_doc><![CDATA[The `SVGTSpanElement` interface provides access to the properties of `tspan` elements, as well as methods to manipulate them.

	Documentation [SVGTSpanElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGTSpanElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGTSpanElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGTSpanElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGTSpanElement"</e></m></meta>
	</class>
	<class path="js.html.svg.TextElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/TextElement.hx" extern="1">
		<extends path="js.html.svg.TextPositioningElement"/>
		<haxe_doc><![CDATA[The `SVGTextElement` interface corresponds to the `text` elements.

	Documentation [SVGTextElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGTextElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGTextElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGTextElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGTextElement"</e></m></meta>
	</class>
	<class path="js.html.svg.TextPathElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/TextPathElement.hx" extern="1">
		<extends path="js.html.svg.TextContentElement"/>
		<TEXTPATH_METHODTYPE_UNKNOWN public="1" get="inline" set="null" expr="0" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</TEXTPATH_METHODTYPE_UNKNOWN>
		<TEXTPATH_METHODTYPE_ALIGN public="1" get="inline" set="null" expr="1" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</TEXTPATH_METHODTYPE_ALIGN>
		<TEXTPATH_METHODTYPE_STRETCH public="1" get="inline" set="null" expr="2" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</TEXTPATH_METHODTYPE_STRETCH>
		<TEXTPATH_SPACINGTYPE_UNKNOWN public="1" get="inline" set="null" expr="0" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</TEXTPATH_SPACINGTYPE_UNKNOWN>
		<TEXTPATH_SPACINGTYPE_AUTO public="1" get="inline" set="null" expr="1" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</TEXTPATH_SPACINGTYPE_AUTO>
		<TEXTPATH_SPACINGTYPE_EXACT public="1" get="inline" set="null" expr="2" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</TEXTPATH_SPACINGTYPE_EXACT>
		<startOffset public="1" set="null"><c path="js.html.svg.AnimatedLength"/></startOffset>
		<method public="1" set="null"><c path="js.html.svg.AnimatedEnumeration"/></method>
		<spacing public="1" set="null"><c path="js.html.svg.AnimatedEnumeration"/></spacing>
		<href public="1" set="null"><c path="js.html.svg.AnimatedString"/></href>
		<meta><m n=":native"><e>"SVGTextPathElement"</e></m></meta>
	</class>
	<class path="js.html.svg.TitleElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/TitleElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<haxe_doc><![CDATA[The `SVGTitleElement` interface corresponds to the `title` element.

	Documentation [SVGTitleElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGTitleElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGTitleElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGTitleElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGTitleElement"</e></m></meta>
	</class>
	<class path="js.html.svg.Transform" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/Transform.hx" extern="1">
		<SVG_TRANSFORM_UNKNOWN public="1" get="inline" set="null" expr="0" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_TRANSFORM_UNKNOWN>
		<SVG_TRANSFORM_MATRIX public="1" get="inline" set="null" expr="1" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_TRANSFORM_MATRIX>
		<SVG_TRANSFORM_TRANSLATE public="1" get="inline" set="null" expr="2" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_TRANSFORM_TRANSLATE>
		<SVG_TRANSFORM_SCALE public="1" get="inline" set="null" expr="3" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</SVG_TRANSFORM_SCALE>
		<SVG_TRANSFORM_ROTATE public="1" get="inline" set="null" expr="4" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</SVG_TRANSFORM_ROTATE>
		<SVG_TRANSFORM_SKEWX public="1" get="inline" set="null" expr="5" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</SVG_TRANSFORM_SKEWX>
		<SVG_TRANSFORM_SKEWY public="1" get="inline" set="null" expr="6" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</SVG_TRANSFORM_SKEWY>
		<type public="1" set="null"><x path="Int"/></type>
		<matrix public="1" set="null"><c path="js.html.svg.Matrix"/></matrix>
		<angle public="1" set="null"><x path="Float"/></angle>
		<setMatrix public="1" set="method">
			<f a="matrix">
				<c path="js.html.svg.Matrix"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setMatrix>
		<setTranslate public="1" set="method">
			<f a="tx:ty">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setTranslate>
		<setScale public="1" set="method">
			<f a="sx:sy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setScale>
		<setRotate public="1" set="method">
			<f a="angle:cx:cy">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setRotate>
		<setSkewX public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setSkewX>
		<setSkewY public="1" set="method">
			<f a="angle">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</setSkewY>
		<haxe_doc><![CDATA[`SVGTransform` is the interface for one of the component transformations within an `SVGTransformList`; thus, an `SVGTransform` object corresponds to a single component (e.g., `scale(…)` or `matrix(…)`) within a `transform` attribute.

	Documentation [SVGTransform](https://developer.mozilla.org/en-US/docs/Web/API/SVGTransform) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGTransform$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGTransform>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGTransform"</e></m></meta>
	</class>
	<class path="js.html.svg.TransformList" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/TransformList.hx" extern="1">
		<numberOfItems public="1" set="null"><x path="Int"/></numberOfItems>
		<length public="1" set="null"><x path="Int"/></length>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</clear>
		<initialize public="1" set="method">
			<f a="newItem">
				<c path="js.html.svg.Transform"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</initialize>
		<getItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getItem>
		<insertItemBefore public="1" set="method">
			<f a="newItem:index">
				<c path="js.html.svg.Transform"/>
				<x path="Int"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</insertItemBefore>
		<replaceItem public="1" set="method">
			<f a="newItem:index">
				<c path="js.html.svg.Transform"/>
				<x path="Int"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</replaceItem>
		<removeItem public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</removeItem>
		<appendItem public="1" set="method">
			<f a="newItem">
				<c path="js.html.svg.Transform"/>
				<c path="js.html.svg.Transform"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</appendItem>
		<createSVGTransformFromMatrix public="1" set="method"><f a="matrix">
	<c path="js.html.svg.Matrix"/>
	<c path="js.html.svg.Transform"/>
</f></createSVGTransformFromMatrix>
		<consolidate public="1" set="method">
			<f a=""><c path="js.html.svg.Transform"/></f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</consolidate>
		<haxe_doc><![CDATA[The `SVGTransformList` defines a list of `SVGTransform` objects.

	Documentation [SVGTransformList](https://developer.mozilla.org/en-US/docs/Web/API/SVGTransformList) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGTransformList$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGTransformList>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGTransformList"</e></m></meta>
	</class>
	<class path="js.html.svg.UnitTypes" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/UnitTypes.hx" extern="1">
		<SVG_UNIT_TYPE_UNKNOWN public="1" get="inline" set="null" expr="0" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_UNIT_TYPE_UNKNOWN>
		<SVG_UNIT_TYPE_USERSPACEONUSE public="1" get="inline" set="null" expr="1" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_UNIT_TYPE_USERSPACEONUSE>
		<SVG_UNIT_TYPE_OBJECTBOUNDINGBOX public="1" get="inline" set="null" expr="2" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_UNIT_TYPE_OBJECTBOUNDINGBOX>
		<meta><m n=":native"><e>"SVGUnitTypes"</e></m></meta>
	</class>
	<class path="js.html.svg.UseElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/UseElement.hx" extern="1">
		<extends path="js.html.svg.GraphicsElement"/>
		<x public="1" set="null"><c path="js.html.svg.AnimatedLength"/></x>
		<y public="1" set="null"><c path="js.html.svg.AnimatedLength"/></y>
		<width public="1" set="null"><c path="js.html.svg.AnimatedLength"/></width>
		<height public="1" set="null"><c path="js.html.svg.AnimatedLength"/></height>
		<href public="1" set="null"><c path="js.html.svg.AnimatedString"/></href>
		<haxe_doc><![CDATA[The `SVGUseElement` interface provides access to the properties of `use` elements, as well as methods to manipulate them.

	Documentation [SVGUseElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGUseElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGUseElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGUseElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGUseElement"</e></m></meta>
	</class>
	<class path="js.html.svg.ViewElement" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/ViewElement.hx" extern="1">
		<extends path="js.html.svg.Element"/>
		<SVG_ZOOMANDPAN_UNKNOWN public="1" get="inline" set="null" expr="0" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_ZOOMANDPAN_UNKNOWN>
		<SVG_ZOOMANDPAN_DISABLE public="1" get="inline" set="null" expr="1" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_ZOOMANDPAN_DISABLE>
		<SVG_ZOOMANDPAN_MAGNIFY public="1" get="inline" set="null" expr="2" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_ZOOMANDPAN_MAGNIFY>
		<viewTarget public="1" set="null"><c path="js.html.svg.StringList"/></viewTarget>
		<viewBox public="1" set="null"><c path="js.html.svg.AnimatedRect"/></viewBox>
		<preserveAspectRatio public="1" set="null"><c path="js.html.svg.AnimatedPreserveAspectRatio"/></preserveAspectRatio>
		<zoomAndPan public="1"><x path="Int"/></zoomAndPan>
		<haxe_doc><![CDATA[The `SVGViewElement` interface provides access to the properties of `view` elements, as well as methods to manipulate them.

	Documentation [SVGViewElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGViewElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/SVGViewElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/SVGViewElement>]]></haxe_doc>
		<meta><m n=":native"><e>"SVGViewElement"</e></m></meta>
	</class>
	<class path="js.html.svg.ZoomAndPan" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/ZoomAndPan.hx" extern="1">
		<SVG_ZOOMANDPAN_UNKNOWN public="1" get="inline" set="null" expr="0" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</SVG_ZOOMANDPAN_UNKNOWN>
		<SVG_ZOOMANDPAN_DISABLE public="1" get="inline" set="null" expr="1" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</SVG_ZOOMANDPAN_DISABLE>
		<SVG_ZOOMANDPAN_MAGNIFY public="1" get="inline" set="null" expr="2" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</SVG_ZOOMANDPAN_MAGNIFY>
		<zoomAndPan public="1"><x path="Int"/></zoomAndPan>
		<meta><m n=":native"><e>"SVGZoomAndPan"</e></m></meta>
	</class>
	<class path="js.html.svg.ZoomEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/svg/ZoomEvent.hx" extern="1">
		<extends path="js.html.UIEvent"/>
		<previousScale public="1" set="null"><x path="Float"/></previousScale>
		<previousTranslate public="1" set="null"><c path="js.html.svg.Point"/></previousTranslate>
		<newScale public="1" set="null"><x path="Float"/></newScale>
		<newTranslate public="1" set="null"><c path="js.html.svg.Point"/></newTranslate>
		<meta><m n=":native"><e>"SVGZoomEvent"</e></m></meta>
	</class>
	<class path="js.html.webgl.ActiveInfo" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/ActiveInfo.hx" extern="1">
		<size public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The read-only size of the requested variable.</haxe_doc>
		</size>
		<type public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The read-only type of the requested variable.</haxe_doc>
		</type>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>The read-only name of the requested variable.</haxe_doc>
		</name>
		<haxe_doc><![CDATA[The WebGLActiveInfo interface is part of the WebGL API and represents the information returned by calling the `WebGLRenderingContext.getActiveAttrib()` and `WebGLRenderingContext.getActiveUniform()` methods.

	Documentation [WebGLActiveInfo](https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLActiveInfo"</e></m></meta>
	</class>
	<class path="js.html.webgl.Buffer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/Buffer.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLBuffer interface is part of the WebGL API and represents an opaque buffer object storing data such as vertices or colors.

	Documentation [WebGLBuffer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLBuffer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLBuffer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLBuffer>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLBuffer"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.ContextAttributes" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/ContextAttributes.hx"><a>
	<stencil>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</stencil>
	<preserveDrawingBuffer>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</preserveDrawingBuffer>
	<premultipliedAlpha>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</premultipliedAlpha>
	<failIfMajorPerformanceCaveat>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</failIfMajorPerformanceCaveat>
	<depth>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</depth>
	<antialias>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</antialias>
	<alpha>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</alpha>
</a></typedef>
	<class path="js.html.webgl.ContextEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/ContextEvent.hx" extern="1">
		<extends path="js.html.Event"/>
		<statusMessage public="1" set="null">
			<c path="String"/>
			<haxe_doc>A read-only property containing additional information about the event.</haxe_doc>
		</statusMessage>
		<new public="1" set="method">
			<f a="type:?eventInit">
				<c path="String"/>
				<t path="js.html.webgl.ContextEventInit"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The WebContextEvent interface is part of the WebGL API and is an interface for an event that is generated in response to a status change to the WebGL rendering context.

	Documentation [WebGLContextEvent](https://developer.mozilla.org/en-US/docs/Web/API/WebGLContextEvent) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLContextEvent$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLContextEvent>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLContextEvent"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.ContextEventInit" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/ContextEventInit.hx"><a>
	<statusMessage>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</statusMessage>
	<cancelable>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</cancelable>
	<bubbles>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bubbles>
</a></typedef>
	<class path="js.html.webgl.ExtensionBlendMinMax" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/ExtensionBlendMinMax.hx" extern="1">
		<MIN_EXT public="1" get="inline" set="null" expr="32775" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32775</e></m></meta>
		</MIN_EXT>
		<MAX_EXT public="1" get="inline" set="null" expr="32776" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32776</e></m></meta>
		</MAX_EXT>
		<haxe_doc><![CDATA[The `EXT_blend_minmax` extension is part of the WebGL API and extends blending capabilities by adding two new blend equations: the minimum or maximum color components of the source and destination colors.

	Documentation [EXT_blend_minmax](https://developer.mozilla.org/en-US/docs/Web/API/EXT_blend_minmax) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EXT_blend_minmax$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EXT_blend_minmax>]]></haxe_doc>
		<meta><m n=":native"><e>"EXT_blend_minmax"</e></m></meta>
	</class>
	<class path="js.html.webgl.ExtensionColorBufferFloat" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/ExtensionColorBufferFloat.hx" extern="1">
		<RGBA32F_EXT public="1" get="inline" set="null" expr="34836" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34836</e></m></meta>
		</RGBA32F_EXT>
		<RGB32F_EXT public="1" get="inline" set="null" expr="34837" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34837</e></m></meta>
		</RGB32F_EXT>
		<FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT public="1" get="inline" set="null" expr="33297" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33297</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT>
		<UNSIGNED_NORMALIZED_EXT public="1" get="inline" set="null" expr="35863" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35863</e></m></meta>
		</UNSIGNED_NORMALIZED_EXT>
		<haxe_doc><![CDATA[The `WEBGL_color_buffer_float` extension is part of the WebGL API and adds the ability to render to 32-bit floating-point color buffers.

	Documentation [WEBGL_color_buffer_float](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_color_buffer_float) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_color_buffer_float$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_color_buffer_float>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_color_buffer_float"</e></m></meta>
	</class>
	<class path="js.html.webgl.ExtensionColorBufferHalfFloat" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/ExtensionColorBufferHalfFloat.hx" extern="1">
		<RGBA16F_EXT public="1" get="inline" set="null" expr="34842" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34842</e></m></meta>
		</RGBA16F_EXT>
		<RGB16F_EXT public="1" get="inline" set="null" expr="34843" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34843</e></m></meta>
		</RGB16F_EXT>
		<FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT public="1" get="inline" set="null" expr="33297" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33297</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT>
		<UNSIGNED_NORMALIZED_EXT public="1" get="inline" set="null" expr="35863" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35863</e></m></meta>
		</UNSIGNED_NORMALIZED_EXT>
		<haxe_doc><![CDATA[The `EXT_color_buffer_half_float` extension is part of the WebGL API and adds the ability to render to 16-bit floating-point color buffers.

	Documentation [EXT_color_buffer_half_float](https://developer.mozilla.org/en-US/docs/Web/API/EXT_color_buffer_half_float) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EXT_color_buffer_half_float$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EXT_color_buffer_half_float>]]></haxe_doc>
		<meta><m n=":native"><e>"EXT_color_buffer_half_float"</e></m></meta>
	</class>
	<class path="js.html.webgl.ExtensionCompressedTextureATC" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/ExtensionCompressedTextureATC.hx" extern="1">
		<COMPRESSED_RGB_ATC_WEBGL public="1" get="inline" set="null" expr="35986" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35986</e></m></meta>
		</COMPRESSED_RGB_ATC_WEBGL>
		<COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL public="1" get="inline" set="null" expr="35987" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35987</e></m></meta>
		</COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL>
		<COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL public="1" get="inline" set="null" expr="34798" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34798</e></m></meta>
		</COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_atc` extension is part of the WebGL API and exposes 3 ATC compressed texture formats. ATC is a proprietary compression algorithm for compressing textures on handheld devices.

	Documentation [WEBGL_compressed_texture_atc](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_atc) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_atc$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_atc>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_atc"</e></m></meta>
	</class>
	<class path="js.html.webgl.ExtensionCompressedTextureES3" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/ExtensionCompressedTextureES3.hx" extern="1">
		<COMPRESSED_R11_EAC public="1" get="inline" set="null" expr="37488" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37488</e></m></meta>
		</COMPRESSED_R11_EAC>
		<COMPRESSED_SIGNED_R11_EAC public="1" get="inline" set="null" expr="37489" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37489</e></m></meta>
		</COMPRESSED_SIGNED_R11_EAC>
		<COMPRESSED_RG11_EAC public="1" get="inline" set="null" expr="37490" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37490</e></m></meta>
		</COMPRESSED_RG11_EAC>
		<COMPRESSED_SIGNED_RG11_EAC public="1" get="inline" set="null" expr="37491" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37491</e></m></meta>
		</COMPRESSED_SIGNED_RG11_EAC>
		<COMPRESSED_RGB8_ETC2 public="1" get="inline" set="null" expr="37492" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37492</e></m></meta>
		</COMPRESSED_RGB8_ETC2>
		<COMPRESSED_SRGB8_ETC2 public="1" get="inline" set="null" expr="37493" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37493</e></m></meta>
		</COMPRESSED_SRGB8_ETC2>
		<COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 public="1" get="inline" set="null" expr="37494" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37494</e></m></meta>
		</COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2>
		<COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 public="1" get="inline" set="null" expr="37495" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37495</e></m></meta>
		</COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2>
		<COMPRESSED_RGBA8_ETC2_EAC public="1" get="inline" set="null" expr="37496" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37496</e></m></meta>
		</COMPRESSED_RGBA8_ETC2_EAC>
		<COMPRESSED_SRGB8_ALPHA8_ETC2_EAC public="1" get="inline" set="null" expr="37497" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37497</e></m></meta>
		</COMPRESSED_SRGB8_ALPHA8_ETC2_EAC>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_es3` extension is part of the WebGL API and exposes 10 ETC/EAC compressed texture formats.

	Documentation [WEBGL_compressed_texture_es3](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_es3) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_es3$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_es3>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_es3"</e></m></meta>
	</class>
	<class path="js.html.webgl.ExtensionCompressedTextureETC1" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/ExtensionCompressedTextureETC1.hx" extern="1">
		<COMPRESSED_RGB_ETC1_WEBGL public="1" get="inline" set="null" expr="36196" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36196</e></m></meta>
		</COMPRESSED_RGB_ETC1_WEBGL>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_etc1` extension is part of the WebGL API and exposes the ETC1 compressed texture format.

	Documentation [WEBGL_compressed_texture_etc1](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc1) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc1$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc1>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_etc1"</e></m></meta>
	</class>
	<class path="js.html.webgl.ExtensionCompressedTexturePVRTC" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/ExtensionCompressedTexturePVRTC.hx" extern="1">
		<COMPRESSED_RGB_PVRTC_4BPPV1_IMG public="1" get="inline" set="null" expr="35840" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35840</e></m></meta>
		</COMPRESSED_RGB_PVRTC_4BPPV1_IMG>
		<COMPRESSED_RGB_PVRTC_2BPPV1_IMG public="1" get="inline" set="null" expr="35841" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35841</e></m></meta>
		</COMPRESSED_RGB_PVRTC_2BPPV1_IMG>
		<COMPRESSED_RGBA_PVRTC_4BPPV1_IMG public="1" get="inline" set="null" expr="35842" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35842</e></m></meta>
		</COMPRESSED_RGBA_PVRTC_4BPPV1_IMG>
		<COMPRESSED_RGBA_PVRTC_2BPPV1_IMG public="1" get="inline" set="null" expr="35843" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35843</e></m></meta>
		</COMPRESSED_RGBA_PVRTC_2BPPV1_IMG>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_pvrtc` extension is part of the WebGL API and exposes four PVRTC compressed texture formats.

	Documentation [WEBGL_compressed_texture_pvrtc](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_pvrtc) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_pvrtc$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_pvrtc>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_pvrtc"</e></m></meta>
	</class>
	<class path="js.html.webgl.ExtensionCompressedTextureS3TC" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/ExtensionCompressedTextureS3TC.hx" extern="1">
		<COMPRESSED_RGB_S3TC_DXT1_EXT public="1" get="inline" set="null" expr="33776" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33776</e></m></meta>
		</COMPRESSED_RGB_S3TC_DXT1_EXT>
		<COMPRESSED_RGBA_S3TC_DXT1_EXT public="1" get="inline" set="null" expr="33777" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33777</e></m></meta>
		</COMPRESSED_RGBA_S3TC_DXT1_EXT>
		<COMPRESSED_RGBA_S3TC_DXT3_EXT public="1" get="inline" set="null" expr="33778" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33778</e></m></meta>
		</COMPRESSED_RGBA_S3TC_DXT3_EXT>
		<COMPRESSED_RGBA_S3TC_DXT5_EXT public="1" get="inline" set="null" expr="33779" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33779</e></m></meta>
		</COMPRESSED_RGBA_S3TC_DXT5_EXT>
		<haxe_doc><![CDATA[The `WEBGL_compressed_texture_s3tc` extension is part of the WebGL API and exposes four S3TC compressed texture formats.

	Documentation [WEBGL_compressed_texture_s3tc](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_compressed_texture_s3tc"</e></m></meta>
	</class>
	<class path="js.html.webgl.ExtensionDebugRendererInfo" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/ExtensionDebugRendererInfo.hx" extern="1">
		<UNMASKED_VENDOR_WEBGL public="1" get="inline" set="null" expr="37445" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37445</e></m></meta>
		</UNMASKED_VENDOR_WEBGL>
		<UNMASKED_RENDERER_WEBGL public="1" get="inline" set="null" expr="37446" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37446</e></m></meta>
		</UNMASKED_RENDERER_WEBGL>
		<haxe_doc><![CDATA[The `WEBGL_debug_renderer_info` extension is part of the WebGL API and exposes two constants with information about the graphics driver for debugging purposes.

	Documentation [WEBGL_debug_renderer_info](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_renderer_info) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_renderer_info$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_renderer_info>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_debug_renderer_info"</e></m></meta>
	</class>
	<class path="js.html.webgl.ExtensionDebugShaders" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/ExtensionDebugShaders.hx" extern="1">
		<getTranslatedShaderSource public="1" set="method">
			<f a="shader">
				<c path="js.html.webgl.Shader"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the translated shader source.</haxe_doc>
		</getTranslatedShaderSource>
		<haxe_doc><![CDATA[The `WEBGL_debug_shaders` extension is part of the WebGL API and exposes a method to debug shaders from privileged contexts.

	Documentation [WEBGL_debug_shaders](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_shaders) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_shaders$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_shaders>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_debug_shaders"</e></m></meta>
	</class>
	<class path="js.html.webgl.ExtensionDepthTexture" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/ExtensionDepthTexture.hx" extern="1">
		<UNSIGNED_INT_24_8_WEBGL public="1" get="inline" set="null" expr="34042" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34042</e></m></meta>
		</UNSIGNED_INT_24_8_WEBGL>
		<haxe_doc><![CDATA[The `WEBGL_depth_texture` extension is part of the WebGL API and defines 2D depth and depth-stencil textures.

	Documentation [WEBGL_depth_texture](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_depth_texture) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_depth_texture$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_depth_texture>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_depth_texture"</e></m></meta>
	</class>
	<class path="js.html.webgl.ExtensionDisjointTimerQuery" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/ExtensionDisjointTimerQuery.hx" extern="1">
		<QUERY_COUNTER_BITS_EXT public="1" get="inline" set="null" expr="34916" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34916</e></m></meta>
		</QUERY_COUNTER_BITS_EXT>
		<CURRENT_QUERY_EXT public="1" get="inline" set="null" expr="34917" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34917</e></m></meta>
		</CURRENT_QUERY_EXT>
		<QUERY_RESULT_EXT public="1" get="inline" set="null" expr="34918" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34918</e></m></meta>
		</QUERY_RESULT_EXT>
		<QUERY_RESULT_AVAILABLE_EXT public="1" get="inline" set="null" expr="34919" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34919</e></m></meta>
		</QUERY_RESULT_AVAILABLE_EXT>
		<TIME_ELAPSED_EXT public="1" get="inline" set="null" expr="35007" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35007</e></m></meta>
		</TIME_ELAPSED_EXT>
		<TIMESTAMP_EXT public="1" get="inline" set="null" expr="36392" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36392</e></m></meta>
		</TIMESTAMP_EXT>
		<GPU_DISJOINT_EXT public="1" get="inline" set="null" expr="36795" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36795</e></m></meta>
		</GPU_DISJOINT_EXT>
		<createQueryEXT public="1" set="method">
			<f a=""><c path="js.html.webgl.TimerQueryEXT"/></f>
			<haxe_doc>Creates a new `WebGLTimerQueryEXT`.</haxe_doc>
		</createQueryEXT>
		<deleteQueryEXT public="1" set="method">
			<f a="query">
				<c path="js.html.webgl.TimerQueryEXT"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLTimerQueryEXT`.</haxe_doc>
		</deleteQueryEXT>
		<isQueryEXT public="1" set="method">
			<f a="query">
				<c path="js.html.webgl.TimerQueryEXT"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if a given object is a `WebGLTimerQueryEXT`.</haxe_doc>
		</isQueryEXT>
		<beginQueryEXT public="1" set="method">
			<f a="target:query">
				<x path="Int"/>
				<c path="js.html.webgl.TimerQueryEXT"/>
				<x path="Void"/>
			</f>
			<haxe_doc>The timer starts when all commands prior to `beginQueryEXT` have been fully executed.</haxe_doc>
		</beginQueryEXT>
		<endQueryEXT public="1" set="method">
			<f a="target">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>The timer stops when all commands prior to `endQueryEXT` have been fully executed.</haxe_doc>
		</endQueryEXT>
		<queryCounterEXT public="1" set="method">
			<f a="query:target">
				<c path="js.html.webgl.TimerQueryEXT"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Records the current time into the corresponding query object.</haxe_doc>
		</queryCounterEXT>
		<getQueryEXT public="1" set="method">
			<f a="target:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Returns information about a query target.</haxe_doc>
		</getQueryEXT>
		<getQueryObjectEXT public="1" set="method">
			<f a="query:pname">
				<c path="js.html.webgl.TimerQueryEXT"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Return the state of a query object.</haxe_doc>
		</getQueryObjectEXT>
		<haxe_doc><![CDATA[The EXT_disjoint_timer_query extension is part of the WebGL API and provides a way to measure the duration of a set of GL commands, without stalling the rendering pipeline.

	Documentation [EXT_disjoint_timer_query](https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query>]]></haxe_doc>
		<meta><m n=":native"><e>"EXT_disjoint_timer_query"</e></m></meta>
	</class>
	<class path="js.html.webgl.ExtensionDrawBuffers" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/ExtensionDrawBuffers.hx" extern="1">
		<COLOR_ATTACHMENT0_WEBGL public="1" get="inline" set="null" expr="36064" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36064</e></m></meta>
		</COLOR_ATTACHMENT0_WEBGL>
		<COLOR_ATTACHMENT1_WEBGL public="1" get="inline" set="null" expr="36065" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36065</e></m></meta>
		</COLOR_ATTACHMENT1_WEBGL>
		<COLOR_ATTACHMENT2_WEBGL public="1" get="inline" set="null" expr="36066" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36066</e></m></meta>
		</COLOR_ATTACHMENT2_WEBGL>
		<COLOR_ATTACHMENT3_WEBGL public="1" get="inline" set="null" expr="36067" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36067</e></m></meta>
		</COLOR_ATTACHMENT3_WEBGL>
		<COLOR_ATTACHMENT4_WEBGL public="1" get="inline" set="null" expr="36068" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36068</e></m></meta>
		</COLOR_ATTACHMENT4_WEBGL>
		<COLOR_ATTACHMENT5_WEBGL public="1" get="inline" set="null" expr="36069" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36069</e></m></meta>
		</COLOR_ATTACHMENT5_WEBGL>
		<COLOR_ATTACHMENT6_WEBGL public="1" get="inline" set="null" expr="36070" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36070</e></m></meta>
		</COLOR_ATTACHMENT6_WEBGL>
		<COLOR_ATTACHMENT7_WEBGL public="1" get="inline" set="null" expr="36071" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36071</e></m></meta>
		</COLOR_ATTACHMENT7_WEBGL>
		<COLOR_ATTACHMENT8_WEBGL public="1" get="inline" set="null" expr="36072" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36072</e></m></meta>
		</COLOR_ATTACHMENT8_WEBGL>
		<COLOR_ATTACHMENT9_WEBGL public="1" get="inline" set="null" expr="36073" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36073</e></m></meta>
		</COLOR_ATTACHMENT9_WEBGL>
		<COLOR_ATTACHMENT10_WEBGL public="1" get="inline" set="null" expr="36074" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36074</e></m></meta>
		</COLOR_ATTACHMENT10_WEBGL>
		<COLOR_ATTACHMENT11_WEBGL public="1" get="inline" set="null" expr="36075" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36075</e></m></meta>
		</COLOR_ATTACHMENT11_WEBGL>
		<COLOR_ATTACHMENT12_WEBGL public="1" get="inline" set="null" expr="36076" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36076</e></m></meta>
		</COLOR_ATTACHMENT12_WEBGL>
		<COLOR_ATTACHMENT13_WEBGL public="1" get="inline" set="null" expr="36077" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36077</e></m></meta>
		</COLOR_ATTACHMENT13_WEBGL>
		<COLOR_ATTACHMENT14_WEBGL public="1" get="inline" set="null" expr="36078" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36078</e></m></meta>
		</COLOR_ATTACHMENT14_WEBGL>
		<COLOR_ATTACHMENT15_WEBGL public="1" get="inline" set="null" expr="36079" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36079</e></m></meta>
		</COLOR_ATTACHMENT15_WEBGL>
		<DRAW_BUFFER0_WEBGL public="1" get="inline" set="null" expr="34853" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34853</e></m></meta>
		</DRAW_BUFFER0_WEBGL>
		<DRAW_BUFFER1_WEBGL public="1" get="inline" set="null" expr="34854" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34854</e></m></meta>
		</DRAW_BUFFER1_WEBGL>
		<DRAW_BUFFER2_WEBGL public="1" get="inline" set="null" expr="34855" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34855</e></m></meta>
		</DRAW_BUFFER2_WEBGL>
		<DRAW_BUFFER3_WEBGL public="1" get="inline" set="null" expr="34856" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34856</e></m></meta>
		</DRAW_BUFFER3_WEBGL>
		<DRAW_BUFFER4_WEBGL public="1" get="inline" set="null" expr="34857" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34857</e></m></meta>
		</DRAW_BUFFER4_WEBGL>
		<DRAW_BUFFER5_WEBGL public="1" get="inline" set="null" expr="34858" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34858</e></m></meta>
		</DRAW_BUFFER5_WEBGL>
		<DRAW_BUFFER6_WEBGL public="1" get="inline" set="null" expr="34859" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34859</e></m></meta>
		</DRAW_BUFFER6_WEBGL>
		<DRAW_BUFFER7_WEBGL public="1" get="inline" set="null" expr="34860" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34860</e></m></meta>
		</DRAW_BUFFER7_WEBGL>
		<DRAW_BUFFER8_WEBGL public="1" get="inline" set="null" expr="34861" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34861</e></m></meta>
		</DRAW_BUFFER8_WEBGL>
		<DRAW_BUFFER9_WEBGL public="1" get="inline" set="null" expr="34862" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34862</e></m></meta>
		</DRAW_BUFFER9_WEBGL>
		<DRAW_BUFFER10_WEBGL public="1" get="inline" set="null" expr="34863" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34863</e></m></meta>
		</DRAW_BUFFER10_WEBGL>
		<DRAW_BUFFER11_WEBGL public="1" get="inline" set="null" expr="34864" line="64" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34864</e></m></meta>
		</DRAW_BUFFER11_WEBGL>
		<DRAW_BUFFER12_WEBGL public="1" get="inline" set="null" expr="34865" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34865</e></m></meta>
		</DRAW_BUFFER12_WEBGL>
		<DRAW_BUFFER13_WEBGL public="1" get="inline" set="null" expr="34866" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34866</e></m></meta>
		</DRAW_BUFFER13_WEBGL>
		<DRAW_BUFFER14_WEBGL public="1" get="inline" set="null" expr="34867" line="67" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34867</e></m></meta>
		</DRAW_BUFFER14_WEBGL>
		<DRAW_BUFFER15_WEBGL public="1" get="inline" set="null" expr="34868" line="68" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34868</e></m></meta>
		</DRAW_BUFFER15_WEBGL>
		<MAX_COLOR_ATTACHMENTS_WEBGL public="1" get="inline" set="null" expr="36063" line="69" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36063</e></m></meta>
		</MAX_COLOR_ATTACHMENTS_WEBGL>
		<MAX_DRAW_BUFFERS_WEBGL public="1" get="inline" set="null" expr="34852" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34852</e></m></meta>
		</MAX_DRAW_BUFFERS_WEBGL>
		<drawBuffersWEBGL public="1" set="method">
			<f a="buffers">
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Defines the draw buffers to which all fragment colors are written. (When using `WebGL2RenderingContext`, this method is available as `WebGL2RenderingContext.drawBuffers()` by default).</haxe_doc>
		</drawBuffersWEBGL>
		<haxe_doc><![CDATA[The `WEBGL_draw_buffers` extension is part of the WebGL API and enables a fragment shader to write to several textures, which is useful for deferred shading, for example.

	Documentation [WEBGL_draw_buffers](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_draw_buffers) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_draw_buffers$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_draw_buffers>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_draw_buffers"</e></m></meta>
	</class>
	<class path="js.html.webgl.ExtensionElementIndexUint" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/ExtensionElementIndexUint.hx" extern="1">
		<haxe_doc><![CDATA[The `OES_element_index_uint` extension is part of the WebGL API and adds support for `gl.UNSIGNED_INT` types to `WebGLRenderingContext.drawElements()`.

	Documentation [OES_element_index_uint](https://developer.mozilla.org/en-US/docs/Web/API/OES_element_index_uint) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/OES_element_index_uint$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/OES_element_index_uint>]]></haxe_doc>
		<meta><m n=":native"><e>"OES_element_index_uint"</e></m></meta>
	</class>
	<class path="js.html.webgl.ExtensionFragDepth" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/ExtensionFragDepth.hx" extern="1">
		<haxe_doc><![CDATA[The `EXT_frag_depth` extension is part of the WebGL API and enables to set a depth value of a fragment from within the fragment shader.

	Documentation [EXT_frag_depth](https://developer.mozilla.org/en-US/docs/Web/API/EXT_frag_depth) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EXT_frag_depth$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EXT_frag_depth>]]></haxe_doc>
		<meta><m n=":native"><e>"EXT_frag_depth"</e></m></meta>
	</class>
	<class path="js.html.webgl.ExtensionInstancedArrays" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/ExtensionInstancedArrays.hx" extern="1">
		<VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE public="1" get="inline" set="null" expr="35070" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35070</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE>
		<drawArraysInstancedANGLE public="1" set="method">
			<f a="mode:first:count:primcount">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Behaves identically to `WebGLRenderingContext.drawArrays()` except that multiple instances of the range of elements are executed, and the instance advances for each iteration.</haxe_doc>
		</drawArraysInstancedANGLE>
		<drawElementsInstancedANGLE public="1" set="method">
			<f a="mode:count:type:offset:primcount">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Behaves identically to `WebGLRenderingContext.drawElements()` except that multiple instances of the set of elements are executed and the instance advances between each set.</haxe_doc>
		</drawElementsInstancedANGLE>
		<vertexAttribDivisorANGLE public="1" set="method">
			<f a="index:divisor">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Modifies the rate at which generic vertex attributes advance when rendering multiple instances of primitives with `ANGLE_instanced_arrays.drawArraysInstancedANGLE()` and `ANGLE_instanced_arrays.drawElementsInstancedANGLE()`.</haxe_doc>
		</vertexAttribDivisorANGLE>
		<haxe_doc><![CDATA[The `ANGLE_instanced_arrays` extension is part of the WebGL API and allows to draw the same object, or groups of similar objects multiple times, if they share the same vertex data, primitive count and type.

	Documentation [ANGLE_instanced_arrays](https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays>]]></haxe_doc>
		<meta><m n=":native"><e>"ANGLE_instanced_arrays"</e></m></meta>
	</class>
	<class path="js.html.webgl.ExtensionLoseContext" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/ExtensionLoseContext.hx" extern="1">
		<loseContext public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Simulates losing the context.</haxe_doc>
		</loseContext>
		<restoreContext public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Simulates restoring the context.</haxe_doc>
		</restoreContext>
		<haxe_doc><![CDATA[The WEBGL_lose_context extension is part of the WebGL API and exposes functions to simulate losing and restoring a `WebGLRenderingContext`.

	Documentation [WEBGL_lose_context](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_lose_context) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_lose_context$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_lose_context>]]></haxe_doc>
		<meta><m n=":native"><e>"WEBGL_lose_context"</e></m></meta>
	</class>
	<class path="js.html.webgl.ExtensionSRGB" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/ExtensionSRGB.hx" extern="1">
		<SRGB_EXT public="1" get="inline" set="null" expr="35904" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35904</e></m></meta>
		</SRGB_EXT>
		<SRGB_ALPHA_EXT public="1" get="inline" set="null" expr="35906" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35906</e></m></meta>
		</SRGB_ALPHA_EXT>
		<SRGB8_ALPHA8_EXT public="1" get="inline" set="null" expr="35907" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35907</e></m></meta>
		</SRGB8_ALPHA8_EXT>
		<FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT public="1" get="inline" set="null" expr="33296" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33296</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT>
		<haxe_doc><![CDATA[The `EXT_sRGB` extension is part of the WebGL API and adds sRGB support to textures and framebuffer objects.

	Documentation [EXT_sRGB](https://developer.mozilla.org/en-US/docs/Web/API/EXT_sRGB) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EXT_sRGB$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EXT_sRGB>]]></haxe_doc>
		<meta><m n=":native"><e>"EXT_sRGB"</e></m></meta>
	</class>
	<class path="js.html.webgl.ExtensionShaderTextureLod" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/ExtensionShaderTextureLod.hx" extern="1">
		<haxe_doc><![CDATA[The `EXT_shader_texture_lod` extension is part of the WebGL API and adds additional texture functions to the OpenGL ES Shading Language which provide the shader writer with explicit control of LOD (Level of detail).

	Documentation [EXT_shader_texture_lod](https://developer.mozilla.org/en-US/docs/Web/API/EXT_shader_texture_lod) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EXT_shader_texture_lod$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EXT_shader_texture_lod>]]></haxe_doc>
		<meta><m n=":native"><e>"EXT_shader_texture_lod"</e></m></meta>
	</class>
	<class path="js.html.webgl.ExtensionStandardDerivatives" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/ExtensionStandardDerivatives.hx" extern="1">
		<FRAGMENT_SHADER_DERIVATIVE_HINT_OES public="1" get="inline" set="null" expr="35723" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35723</e></m></meta>
		</FRAGMENT_SHADER_DERIVATIVE_HINT_OES>
		<haxe_doc><![CDATA[The `OES_standard_derivatives` extension is part of the WebGL API and adds the GLSL derivative functions `dFdx`, `dFdy`, and `fwidth`.

	Documentation [OES_standard_derivatives](https://developer.mozilla.org/en-US/docs/Web/API/OES_standard_derivatives) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/OES_standard_derivatives$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/OES_standard_derivatives>]]></haxe_doc>
		<meta><m n=":native"><e>"OES_standard_derivatives"</e></m></meta>
	</class>
	<class path="js.html.webgl.ExtensionTextureFilterAnisotropic" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/ExtensionTextureFilterAnisotropic.hx" extern="1">
		<TEXTURE_MAX_ANISOTROPY_EXT public="1" get="inline" set="null" expr="34046" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34046</e></m></meta>
		</TEXTURE_MAX_ANISOTROPY_EXT>
		<MAX_TEXTURE_MAX_ANISOTROPY_EXT public="1" get="inline" set="null" expr="34047" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34047</e></m></meta>
		</MAX_TEXTURE_MAX_ANISOTROPY_EXT>
		<haxe_doc><![CDATA[The `EXT_texture_filter_anisotropic` extension is part of the WebGL API and exposes two constants for anisotropic filtering (AF).

	Documentation [EXT_texture_filter_anisotropic](https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_filter_anisotropic) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_filter_anisotropic$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_filter_anisotropic>]]></haxe_doc>
		<meta><m n=":native"><e>"EXT_texture_filter_anisotropic"</e></m></meta>
	</class>
	<class path="js.html.webgl.ExtensionTextureFloat" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/ExtensionTextureFloat.hx" extern="1">
		<haxe_doc><![CDATA[The `OES_texture_float` extension is part of the WebGL API and exposes floating-point pixel types for textures.

	Documentation [OES_texture_float](https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_float) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_float$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_float>]]></haxe_doc>
		<meta><m n=":native"><e>"OES_texture_float"</e></m></meta>
	</class>
	<class path="js.html.webgl.ExtensionTextureFloatLinear" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/ExtensionTextureFloatLinear.hx" extern="1">
		<haxe_doc><![CDATA[The `OES_texture_float_linear` extension is part of the WebGL API and allows linear filtering with floating-point pixel types for textures.

	Documentation [OES_texture_float_linear](https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_float_linear) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_float_linear$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_float_linear>]]></haxe_doc>
		<meta><m n=":native"><e>"OES_texture_float_linear"</e></m></meta>
	</class>
	<class path="js.html.webgl.ExtensionTextureHalfFloat" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/ExtensionTextureHalfFloat.hx" extern="1">
		<HALF_FLOAT_OES public="1" get="inline" set="null" expr="36193" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36193</e></m></meta>
		</HALF_FLOAT_OES>
		<haxe_doc><![CDATA[The `OES_texture_half_float` extension is part of the WebGL API and adds texture formats with 16- (aka half float) and 32-bit floating-point components.

	Documentation [OES_texture_half_float](https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_half_float) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_half_float$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_half_float>]]></haxe_doc>
		<meta><m n=":native"><e>"OES_texture_half_float"</e></m></meta>
	</class>
	<class path="js.html.webgl.ExtensionTextureHalfFloatLinear" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/ExtensionTextureHalfFloatLinear.hx" extern="1">
		<haxe_doc><![CDATA[The `OES_texture_half_float_linear` extension is part of the WebGL API and allows linear filtering with half floating-point pixel types for textures.

	Documentation [OES_texture_half_float_linear](https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_half_float_linear) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_half_float_linear$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_half_float_linear>]]></haxe_doc>
		<meta><m n=":native"><e>"OES_texture_half_float_linear"</e></m></meta>
	</class>
	<class path="js.html.webgl.ExtensionVertexArrayObject" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/ExtensionVertexArrayObject.hx" extern="1">
		<VERTEX_ARRAY_BINDING_OES public="1" get="inline" set="null" expr="34229" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34229</e></m></meta>
		</VERTEX_ARRAY_BINDING_OES>
		<createVertexArrayOES public="1" set="method">
			<f a=""><c path="js.html.webgl.VertexArrayObjectOES"/></f>
			<haxe_doc>Creates a new `WebGLVertexArrayObjectOES`.</haxe_doc>
		</createVertexArrayOES>
		<deleteVertexArrayOES public="1" set="method">
			<f a="arrayObject">
				<c path="js.html.webgl.VertexArrayObjectOES"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes a given `WebGLVertexArrayObjectOES`.</haxe_doc>
		</deleteVertexArrayOES>
		<isVertexArrayOES public="1" set="method">
			<f a="arrayObject">
				<c path="js.html.webgl.VertexArrayObjectOES"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if a given object is a `WebGLVertexArrayObjectOES`.</haxe_doc>
		</isVertexArrayOES>
		<bindVertexArrayOES public="1" set="method">
			<f a="arrayObject">
				<c path="js.html.webgl.VertexArrayObjectOES"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds a given `WebGLVertexArrayObjectOES` to the buffer.</haxe_doc>
		</bindVertexArrayOES>
		<haxe_doc><![CDATA[The OES_vertex_array_object extension is part of the WebGL API and provides vertex array objects (VAOs) which encapsulate vertex array states. These objects keep pointers to vertex data and provide names for different sets of vertex data.

	Documentation [OES_vertex_array_object](https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object>]]></haxe_doc>
		<meta><m n=":native"><e>"OES_vertex_array_object"</e></m></meta>
	</class>
	<class path="js.html.webgl.Framebuffer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/Framebuffer.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLFramebuffer interface is part of the WebGL API and represents a collection of buffers that serve as a rendering destination.

	Documentation [WebGLFramebuffer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLFramebuffer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLFramebuffer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLFramebuffer>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLFramebuffer"</e></m></meta>
	</class>
	<typedef path="js.html.webgl.GL" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/GL.hx">
		<c path="js.html.webgl.RenderingContext"/>
		<haxe_doc>An alias for accessing GL constants more naturally.</haxe_doc>
	</typedef>
	<class path="js.html.webgl.Program" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/Program.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLProgram is part of the WebGL API and is a combination of two compiled `WebGLShader`s consisting of a vertex shader and a fragment shader (both written in GLSL). These are then linked into a usable program.

	Documentation [WebGLProgram](https://developer.mozilla.org/en-US/docs/Web/API/WebGLProgram) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLProgram$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLProgram>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLProgram"</e></m></meta>
	</class>
	<class path="js.html.webgl.Renderbuffer" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/Renderbuffer.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLRenderbuffer interface is part of the WebGL API and represents a buffer that can contain an image, or can be source or target of an rendering operation.

	Documentation [WebGLRenderbuffer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderbuffer) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderbuffer$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderbuffer>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLRenderbuffer"</e></m></meta>
	</class>
	<class path="js.html.webgl.RenderingContext" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/RenderingContext.hx" extern="1">
		<DEPTH_BUFFER_BIT public="1" get="inline" set="null" expr="256" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>256</e></m></meta>
		</DEPTH_BUFFER_BIT>
		<STENCIL_BUFFER_BIT public="1" get="inline" set="null" expr="1024" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1024</e></m></meta>
		</STENCIL_BUFFER_BIT>
		<COLOR_BUFFER_BIT public="1" get="inline" set="null" expr="16384" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16384</e></m></meta>
		</COLOR_BUFFER_BIT>
		<POINTS public="1" get="inline" set="null" expr="0" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</POINTS>
		<LINES public="1" get="inline" set="null" expr="1" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</LINES>
		<LINE_LOOP public="1" get="inline" set="null" expr="2" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</LINE_LOOP>
		<LINE_STRIP public="1" get="inline" set="null" expr="3" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</LINE_STRIP>
		<TRIANGLES public="1" get="inline" set="null" expr="4" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</TRIANGLES>
		<TRIANGLE_STRIP public="1" get="inline" set="null" expr="5" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</TRIANGLE_STRIP>
		<TRIANGLE_FAN public="1" get="inline" set="null" expr="6" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</TRIANGLE_FAN>
		<ZERO public="1" get="inline" set="null" expr="0" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</ZERO>
		<ONE public="1" get="inline" set="null" expr="1" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</ONE>
		<SRC_COLOR public="1" get="inline" set="null" expr="768" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>768</e></m></meta>
		</SRC_COLOR>
		<ONE_MINUS_SRC_COLOR public="1" get="inline" set="null" expr="769" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>769</e></m></meta>
		</ONE_MINUS_SRC_COLOR>
		<SRC_ALPHA public="1" get="inline" set="null" expr="770" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>770</e></m></meta>
		</SRC_ALPHA>
		<ONE_MINUS_SRC_ALPHA public="1" get="inline" set="null" expr="771" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>771</e></m></meta>
		</ONE_MINUS_SRC_ALPHA>
		<DST_ALPHA public="1" get="inline" set="null" expr="772" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>772</e></m></meta>
		</DST_ALPHA>
		<ONE_MINUS_DST_ALPHA public="1" get="inline" set="null" expr="773" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>773</e></m></meta>
		</ONE_MINUS_DST_ALPHA>
		<DST_COLOR public="1" get="inline" set="null" expr="774" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>774</e></m></meta>
		</DST_COLOR>
		<ONE_MINUS_DST_COLOR public="1" get="inline" set="null" expr="775" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>775</e></m></meta>
		</ONE_MINUS_DST_COLOR>
		<SRC_ALPHA_SATURATE public="1" get="inline" set="null" expr="776" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>776</e></m></meta>
		</SRC_ALPHA_SATURATE>
		<FUNC_ADD public="1" get="inline" set="null" expr="32774" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32774</e></m></meta>
		</FUNC_ADD>
		<BLEND_EQUATION public="1" get="inline" set="null" expr="32777" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32777</e></m></meta>
		</BLEND_EQUATION>
		<BLEND_EQUATION_RGB public="1" get="inline" set="null" expr="32777" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32777</e></m></meta>
		</BLEND_EQUATION_RGB>
		<BLEND_EQUATION_ALPHA public="1" get="inline" set="null" expr="34877" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34877</e></m></meta>
		</BLEND_EQUATION_ALPHA>
		<FUNC_SUBTRACT public="1" get="inline" set="null" expr="32778" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32778</e></m></meta>
		</FUNC_SUBTRACT>
		<FUNC_REVERSE_SUBTRACT public="1" get="inline" set="null" expr="32779" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32779</e></m></meta>
		</FUNC_REVERSE_SUBTRACT>
		<BLEND_DST_RGB public="1" get="inline" set="null" expr="32968" line="64" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32968</e></m></meta>
		</BLEND_DST_RGB>
		<BLEND_SRC_RGB public="1" get="inline" set="null" expr="32969" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32969</e></m></meta>
		</BLEND_SRC_RGB>
		<BLEND_DST_ALPHA public="1" get="inline" set="null" expr="32970" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32970</e></m></meta>
		</BLEND_DST_ALPHA>
		<BLEND_SRC_ALPHA public="1" get="inline" set="null" expr="32971" line="67" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32971</e></m></meta>
		</BLEND_SRC_ALPHA>
		<CONSTANT_COLOR public="1" get="inline" set="null" expr="32769" line="68" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32769</e></m></meta>
		</CONSTANT_COLOR>
		<ONE_MINUS_CONSTANT_COLOR public="1" get="inline" set="null" expr="32770" line="69" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32770</e></m></meta>
		</ONE_MINUS_CONSTANT_COLOR>
		<CONSTANT_ALPHA public="1" get="inline" set="null" expr="32771" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32771</e></m></meta>
		</CONSTANT_ALPHA>
		<ONE_MINUS_CONSTANT_ALPHA public="1" get="inline" set="null" expr="32772" line="71" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32772</e></m></meta>
		</ONE_MINUS_CONSTANT_ALPHA>
		<BLEND_COLOR public="1" get="inline" set="null" expr="32773" line="72" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32773</e></m></meta>
		</BLEND_COLOR>
		<ARRAY_BUFFER public="1" get="inline" set="null" expr="34962" line="73" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34962</e></m></meta>
		</ARRAY_BUFFER>
		<ELEMENT_ARRAY_BUFFER public="1" get="inline" set="null" expr="34963" line="74" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34963</e></m></meta>
		</ELEMENT_ARRAY_BUFFER>
		<ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="34964" line="75" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34964</e></m></meta>
		</ARRAY_BUFFER_BINDING>
		<ELEMENT_ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="34965" line="76" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34965</e></m></meta>
		</ELEMENT_ARRAY_BUFFER_BINDING>
		<STREAM_DRAW public="1" get="inline" set="null" expr="35040" line="77" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35040</e></m></meta>
		</STREAM_DRAW>
		<STATIC_DRAW public="1" get="inline" set="null" expr="35044" line="78" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35044</e></m></meta>
		</STATIC_DRAW>
		<DYNAMIC_DRAW public="1" get="inline" set="null" expr="35048" line="79" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35048</e></m></meta>
		</DYNAMIC_DRAW>
		<BUFFER_SIZE public="1" get="inline" set="null" expr="34660" line="80" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34660</e></m></meta>
		</BUFFER_SIZE>
		<BUFFER_USAGE public="1" get="inline" set="null" expr="34661" line="81" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34661</e></m></meta>
		</BUFFER_USAGE>
		<CURRENT_VERTEX_ATTRIB public="1" get="inline" set="null" expr="34342" line="82" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34342</e></m></meta>
		</CURRENT_VERTEX_ATTRIB>
		<FRONT public="1" get="inline" set="null" expr="1028" line="83" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1028</e></m></meta>
		</FRONT>
		<BACK public="1" get="inline" set="null" expr="1029" line="84" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1029</e></m></meta>
		</BACK>
		<FRONT_AND_BACK public="1" get="inline" set="null" expr="1032" line="85" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1032</e></m></meta>
		</FRONT_AND_BACK>
		<CULL_FACE public="1" get="inline" set="null" expr="2884" line="86" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2884</e></m></meta>
		</CULL_FACE>
		<BLEND public="1" get="inline" set="null" expr="3042" line="87" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3042</e></m></meta>
		</BLEND>
		<DITHER public="1" get="inline" set="null" expr="3024" line="88" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3024</e></m></meta>
		</DITHER>
		<STENCIL_TEST public="1" get="inline" set="null" expr="2960" line="89" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2960</e></m></meta>
		</STENCIL_TEST>
		<DEPTH_TEST public="1" get="inline" set="null" expr="2929" line="90" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2929</e></m></meta>
		</DEPTH_TEST>
		<SCISSOR_TEST public="1" get="inline" set="null" expr="3089" line="91" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3089</e></m></meta>
		</SCISSOR_TEST>
		<POLYGON_OFFSET_FILL public="1" get="inline" set="null" expr="32823" line="92" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32823</e></m></meta>
		</POLYGON_OFFSET_FILL>
		<SAMPLE_ALPHA_TO_COVERAGE public="1" get="inline" set="null" expr="32926" line="93" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32926</e></m></meta>
		</SAMPLE_ALPHA_TO_COVERAGE>
		<SAMPLE_COVERAGE public="1" get="inline" set="null" expr="32928" line="94" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32928</e></m></meta>
		</SAMPLE_COVERAGE>
		<NO_ERROR public="1" get="inline" set="null" expr="0" line="95" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NO_ERROR>
		<INVALID_ENUM public="1" get="inline" set="null" expr="1280" line="96" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1280</e></m></meta>
		</INVALID_ENUM>
		<INVALID_VALUE public="1" get="inline" set="null" expr="1281" line="97" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1281</e></m></meta>
		</INVALID_VALUE>
		<INVALID_OPERATION public="1" get="inline" set="null" expr="1282" line="98" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1282</e></m></meta>
		</INVALID_OPERATION>
		<OUT_OF_MEMORY public="1" get="inline" set="null" expr="1285" line="99" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1285</e></m></meta>
		</OUT_OF_MEMORY>
		<CW public="1" get="inline" set="null" expr="2304" line="100" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2304</e></m></meta>
		</CW>
		<CCW public="1" get="inline" set="null" expr="2305" line="101" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2305</e></m></meta>
		</CCW>
		<LINE_WIDTH public="1" get="inline" set="null" expr="2849" line="102" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2849</e></m></meta>
		</LINE_WIDTH>
		<ALIASED_POINT_SIZE_RANGE public="1" get="inline" set="null" expr="33901" line="103" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33901</e></m></meta>
		</ALIASED_POINT_SIZE_RANGE>
		<ALIASED_LINE_WIDTH_RANGE public="1" get="inline" set="null" expr="33902" line="104" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33902</e></m></meta>
		</ALIASED_LINE_WIDTH_RANGE>
		<CULL_FACE_MODE public="1" get="inline" set="null" expr="2885" line="105" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2885</e></m></meta>
		</CULL_FACE_MODE>
		<FRONT_FACE public="1" get="inline" set="null" expr="2886" line="106" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2886</e></m></meta>
		</FRONT_FACE>
		<DEPTH_RANGE public="1" get="inline" set="null" expr="2928" line="107" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2928</e></m></meta>
		</DEPTH_RANGE>
		<DEPTH_WRITEMASK public="1" get="inline" set="null" expr="2930" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2930</e></m></meta>
		</DEPTH_WRITEMASK>
		<DEPTH_CLEAR_VALUE public="1" get="inline" set="null" expr="2931" line="109" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2931</e></m></meta>
		</DEPTH_CLEAR_VALUE>
		<DEPTH_FUNC public="1" get="inline" set="null" expr="2932" line="110" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2932</e></m></meta>
		</DEPTH_FUNC>
		<STENCIL_CLEAR_VALUE public="1" get="inline" set="null" expr="2961" line="111" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2961</e></m></meta>
		</STENCIL_CLEAR_VALUE>
		<STENCIL_FUNC public="1" get="inline" set="null" expr="2962" line="112" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2962</e></m></meta>
		</STENCIL_FUNC>
		<STENCIL_FAIL public="1" get="inline" set="null" expr="2964" line="113" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2964</e></m></meta>
		</STENCIL_FAIL>
		<STENCIL_PASS_DEPTH_FAIL public="1" get="inline" set="null" expr="2965" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2965</e></m></meta>
		</STENCIL_PASS_DEPTH_FAIL>
		<STENCIL_PASS_DEPTH_PASS public="1" get="inline" set="null" expr="2966" line="115" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2966</e></m></meta>
		</STENCIL_PASS_DEPTH_PASS>
		<STENCIL_REF public="1" get="inline" set="null" expr="2967" line="116" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2967</e></m></meta>
		</STENCIL_REF>
		<STENCIL_VALUE_MASK public="1" get="inline" set="null" expr="2963" line="117" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2963</e></m></meta>
		</STENCIL_VALUE_MASK>
		<STENCIL_WRITEMASK public="1" get="inline" set="null" expr="2968" line="118" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2968</e></m></meta>
		</STENCIL_WRITEMASK>
		<STENCIL_BACK_FUNC public="1" get="inline" set="null" expr="34816" line="119" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34816</e></m></meta>
		</STENCIL_BACK_FUNC>
		<STENCIL_BACK_FAIL public="1" get="inline" set="null" expr="34817" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34817</e></m></meta>
		</STENCIL_BACK_FAIL>
		<STENCIL_BACK_PASS_DEPTH_FAIL public="1" get="inline" set="null" expr="34818" line="121" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34818</e></m></meta>
		</STENCIL_BACK_PASS_DEPTH_FAIL>
		<STENCIL_BACK_PASS_DEPTH_PASS public="1" get="inline" set="null" expr="34819" line="122" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34819</e></m></meta>
		</STENCIL_BACK_PASS_DEPTH_PASS>
		<STENCIL_BACK_REF public="1" get="inline" set="null" expr="36003" line="123" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36003</e></m></meta>
		</STENCIL_BACK_REF>
		<STENCIL_BACK_VALUE_MASK public="1" get="inline" set="null" expr="36004" line="124" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36004</e></m></meta>
		</STENCIL_BACK_VALUE_MASK>
		<STENCIL_BACK_WRITEMASK public="1" get="inline" set="null" expr="36005" line="125" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36005</e></m></meta>
		</STENCIL_BACK_WRITEMASK>
		<VIEWPORT public="1" get="inline" set="null" expr="2978" line="126" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2978</e></m></meta>
		</VIEWPORT>
		<SCISSOR_BOX public="1" get="inline" set="null" expr="3088" line="127" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3088</e></m></meta>
		</SCISSOR_BOX>
		<COLOR_CLEAR_VALUE public="1" get="inline" set="null" expr="3106" line="128" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3106</e></m></meta>
		</COLOR_CLEAR_VALUE>
		<COLOR_WRITEMASK public="1" get="inline" set="null" expr="3107" line="129" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3107</e></m></meta>
		</COLOR_WRITEMASK>
		<UNPACK_ALIGNMENT public="1" get="inline" set="null" expr="3317" line="130" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3317</e></m></meta>
		</UNPACK_ALIGNMENT>
		<PACK_ALIGNMENT public="1" get="inline" set="null" expr="3333" line="131" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3333</e></m></meta>
		</PACK_ALIGNMENT>
		<MAX_TEXTURE_SIZE public="1" get="inline" set="null" expr="3379" line="132" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3379</e></m></meta>
		</MAX_TEXTURE_SIZE>
		<MAX_VIEWPORT_DIMS public="1" get="inline" set="null" expr="3386" line="133" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3386</e></m></meta>
		</MAX_VIEWPORT_DIMS>
		<SUBPIXEL_BITS public="1" get="inline" set="null" expr="3408" line="134" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3408</e></m></meta>
		</SUBPIXEL_BITS>
		<RED_BITS public="1" get="inline" set="null" expr="3410" line="135" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3410</e></m></meta>
		</RED_BITS>
		<GREEN_BITS public="1" get="inline" set="null" expr="3411" line="136" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3411</e></m></meta>
		</GREEN_BITS>
		<BLUE_BITS public="1" get="inline" set="null" expr="3412" line="137" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3412</e></m></meta>
		</BLUE_BITS>
		<ALPHA_BITS public="1" get="inline" set="null" expr="3413" line="138" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3413</e></m></meta>
		</ALPHA_BITS>
		<DEPTH_BITS public="1" get="inline" set="null" expr="3414" line="139" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3414</e></m></meta>
		</DEPTH_BITS>
		<STENCIL_BITS public="1" get="inline" set="null" expr="3415" line="140" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3415</e></m></meta>
		</STENCIL_BITS>
		<POLYGON_OFFSET_UNITS public="1" get="inline" set="null" expr="10752" line="141" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10752</e></m></meta>
		</POLYGON_OFFSET_UNITS>
		<POLYGON_OFFSET_FACTOR public="1" get="inline" set="null" expr="32824" line="142" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32824</e></m></meta>
		</POLYGON_OFFSET_FACTOR>
		<TEXTURE_BINDING_2D public="1" get="inline" set="null" expr="32873" line="143" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32873</e></m></meta>
		</TEXTURE_BINDING_2D>
		<SAMPLE_BUFFERS public="1" get="inline" set="null" expr="32936" line="144" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32936</e></m></meta>
		</SAMPLE_BUFFERS>
		<SAMPLES public="1" get="inline" set="null" expr="32937" line="145" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32937</e></m></meta>
		</SAMPLES>
		<SAMPLE_COVERAGE_VALUE public="1" get="inline" set="null" expr="32938" line="146" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32938</e></m></meta>
		</SAMPLE_COVERAGE_VALUE>
		<SAMPLE_COVERAGE_INVERT public="1" get="inline" set="null" expr="32939" line="147" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32939</e></m></meta>
		</SAMPLE_COVERAGE_INVERT>
		<COMPRESSED_TEXTURE_FORMATS public="1" get="inline" set="null" expr="34467" line="148" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34467</e></m></meta>
		</COMPRESSED_TEXTURE_FORMATS>
		<DONT_CARE public="1" get="inline" set="null" expr="4352" line="149" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4352</e></m></meta>
		</DONT_CARE>
		<FASTEST public="1" get="inline" set="null" expr="4353" line="150" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4353</e></m></meta>
		</FASTEST>
		<NICEST public="1" get="inline" set="null" expr="4354" line="151" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4354</e></m></meta>
		</NICEST>
		<GENERATE_MIPMAP_HINT public="1" get="inline" set="null" expr="33170" line="152" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33170</e></m></meta>
		</GENERATE_MIPMAP_HINT>
		<BYTE public="1" get="inline" set="null" expr="5120" line="153" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5120</e></m></meta>
		</BYTE>
		<UNSIGNED_BYTE public="1" get="inline" set="null" expr="5121" line="154" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5121</e></m></meta>
		</UNSIGNED_BYTE>
		<SHORT public="1" get="inline" set="null" expr="5122" line="155" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5122</e></m></meta>
		</SHORT>
		<UNSIGNED_SHORT public="1" get="inline" set="null" expr="5123" line="156" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5123</e></m></meta>
		</UNSIGNED_SHORT>
		<INT public="1" get="inline" set="null" expr="5124" line="157" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5124</e></m></meta>
		</INT>
		<UNSIGNED_INT public="1" get="inline" set="null" expr="5125" line="158" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5125</e></m></meta>
		</UNSIGNED_INT>
		<FLOAT public="1" get="inline" set="null" expr="5126" line="159" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5126</e></m></meta>
		</FLOAT>
		<DEPTH_COMPONENT public="1" get="inline" set="null" expr="6402" line="160" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6402</e></m></meta>
		</DEPTH_COMPONENT>
		<ALPHA public="1" get="inline" set="null" expr="6406" line="161" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6406</e></m></meta>
		</ALPHA>
		<RGB public="1" get="inline" set="null" expr="6407" line="162" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6407</e></m></meta>
		</RGB>
		<RGBA public="1" get="inline" set="null" expr="6408" line="163" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6408</e></m></meta>
		</RGBA>
		<LUMINANCE public="1" get="inline" set="null" expr="6409" line="164" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6409</e></m></meta>
		</LUMINANCE>
		<LUMINANCE_ALPHA public="1" get="inline" set="null" expr="6410" line="165" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6410</e></m></meta>
		</LUMINANCE_ALPHA>
		<UNSIGNED_SHORT_4_4_4_4 public="1" get="inline" set="null" expr="32819" line="166" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32819</e></m></meta>
		</UNSIGNED_SHORT_4_4_4_4>
		<UNSIGNED_SHORT_5_5_5_1 public="1" get="inline" set="null" expr="32820" line="167" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32820</e></m></meta>
		</UNSIGNED_SHORT_5_5_5_1>
		<UNSIGNED_SHORT_5_6_5 public="1" get="inline" set="null" expr="33635" line="168" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33635</e></m></meta>
		</UNSIGNED_SHORT_5_6_5>
		<FRAGMENT_SHADER public="1" get="inline" set="null" expr="35632" line="169" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35632</e></m></meta>
		</FRAGMENT_SHADER>
		<VERTEX_SHADER public="1" get="inline" set="null" expr="35633" line="170" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35633</e></m></meta>
		</VERTEX_SHADER>
		<MAX_VERTEX_ATTRIBS public="1" get="inline" set="null" expr="34921" line="171" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34921</e></m></meta>
		</MAX_VERTEX_ATTRIBS>
		<MAX_VERTEX_UNIFORM_VECTORS public="1" get="inline" set="null" expr="36347" line="172" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36347</e></m></meta>
		</MAX_VERTEX_UNIFORM_VECTORS>
		<MAX_VARYING_VECTORS public="1" get="inline" set="null" expr="36348" line="173" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36348</e></m></meta>
		</MAX_VARYING_VECTORS>
		<MAX_COMBINED_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="35661" line="174" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35661</e></m></meta>
		</MAX_COMBINED_TEXTURE_IMAGE_UNITS>
		<MAX_VERTEX_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="35660" line="175" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35660</e></m></meta>
		</MAX_VERTEX_TEXTURE_IMAGE_UNITS>
		<MAX_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" expr="34930" line="176" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34930</e></m></meta>
		</MAX_TEXTURE_IMAGE_UNITS>
		<MAX_FRAGMENT_UNIFORM_VECTORS public="1" get="inline" set="null" expr="36349" line="177" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36349</e></m></meta>
		</MAX_FRAGMENT_UNIFORM_VECTORS>
		<SHADER_TYPE public="1" get="inline" set="null" expr="35663" line="178" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35663</e></m></meta>
		</SHADER_TYPE>
		<DELETE_STATUS public="1" get="inline" set="null" expr="35712" line="179" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35712</e></m></meta>
		</DELETE_STATUS>
		<LINK_STATUS public="1" get="inline" set="null" expr="35714" line="180" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35714</e></m></meta>
		</LINK_STATUS>
		<VALIDATE_STATUS public="1" get="inline" set="null" expr="35715" line="181" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35715</e></m></meta>
		</VALIDATE_STATUS>
		<ATTACHED_SHADERS public="1" get="inline" set="null" expr="35717" line="182" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35717</e></m></meta>
		</ATTACHED_SHADERS>
		<ACTIVE_UNIFORMS public="1" get="inline" set="null" expr="35718" line="183" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35718</e></m></meta>
		</ACTIVE_UNIFORMS>
		<ACTIVE_ATTRIBUTES public="1" get="inline" set="null" expr="35721" line="184" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35721</e></m></meta>
		</ACTIVE_ATTRIBUTES>
		<SHADING_LANGUAGE_VERSION public="1" get="inline" set="null" expr="35724" line="185" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35724</e></m></meta>
		</SHADING_LANGUAGE_VERSION>
		<CURRENT_PROGRAM public="1" get="inline" set="null" expr="35725" line="186" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35725</e></m></meta>
		</CURRENT_PROGRAM>
		<NEVER public="1" get="inline" set="null" expr="512" line="187" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>512</e></m></meta>
		</NEVER>
		<LESS public="1" get="inline" set="null" expr="513" line="188" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>513</e></m></meta>
		</LESS>
		<EQUAL public="1" get="inline" set="null" expr="514" line="189" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>514</e></m></meta>
		</EQUAL>
		<LEQUAL public="1" get="inline" set="null" expr="515" line="190" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>515</e></m></meta>
		</LEQUAL>
		<GREATER public="1" get="inline" set="null" expr="516" line="191" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>516</e></m></meta>
		</GREATER>
		<NOTEQUAL public="1" get="inline" set="null" expr="517" line="192" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>517</e></m></meta>
		</NOTEQUAL>
		<GEQUAL public="1" get="inline" set="null" expr="518" line="193" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>518</e></m></meta>
		</GEQUAL>
		<ALWAYS public="1" get="inline" set="null" expr="519" line="194" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>519</e></m></meta>
		</ALWAYS>
		<KEEP public="1" get="inline" set="null" expr="7680" line="195" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7680</e></m></meta>
		</KEEP>
		<REPLACE public="1" get="inline" set="null" expr="7681" line="196" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7681</e></m></meta>
		</REPLACE>
		<INCR public="1" get="inline" set="null" expr="7682" line="197" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7682</e></m></meta>
		</INCR>
		<DECR public="1" get="inline" set="null" expr="7683" line="198" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7683</e></m></meta>
		</DECR>
		<INVERT public="1" get="inline" set="null" expr="5386" line="199" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5386</e></m></meta>
		</INVERT>
		<INCR_WRAP public="1" get="inline" set="null" expr="34055" line="200" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34055</e></m></meta>
		</INCR_WRAP>
		<DECR_WRAP public="1" get="inline" set="null" expr="34056" line="201" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34056</e></m></meta>
		</DECR_WRAP>
		<VENDOR public="1" get="inline" set="null" expr="7936" line="202" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7936</e></m></meta>
		</VENDOR>
		<RENDERER public="1" get="inline" set="null" expr="7937" line="203" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7937</e></m></meta>
		</RENDERER>
		<VERSION public="1" get="inline" set="null" expr="7938" line="204" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7938</e></m></meta>
		</VERSION>
		<NEAREST public="1" get="inline" set="null" expr="9728" line="205" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9728</e></m></meta>
		</NEAREST>
		<LINEAR public="1" get="inline" set="null" expr="9729" line="206" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9729</e></m></meta>
		</LINEAR>
		<NEAREST_MIPMAP_NEAREST public="1" get="inline" set="null" expr="9984" line="207" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9984</e></m></meta>
		</NEAREST_MIPMAP_NEAREST>
		<LINEAR_MIPMAP_NEAREST public="1" get="inline" set="null" expr="9985" line="208" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9985</e></m></meta>
		</LINEAR_MIPMAP_NEAREST>
		<NEAREST_MIPMAP_LINEAR public="1" get="inline" set="null" expr="9986" line="209" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9986</e></m></meta>
		</NEAREST_MIPMAP_LINEAR>
		<LINEAR_MIPMAP_LINEAR public="1" get="inline" set="null" expr="9987" line="210" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9987</e></m></meta>
		</LINEAR_MIPMAP_LINEAR>
		<TEXTURE_MAG_FILTER public="1" get="inline" set="null" expr="10240" line="211" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10240</e></m></meta>
		</TEXTURE_MAG_FILTER>
		<TEXTURE_MIN_FILTER public="1" get="inline" set="null" expr="10241" line="212" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10241</e></m></meta>
		</TEXTURE_MIN_FILTER>
		<TEXTURE_WRAP_S public="1" get="inline" set="null" expr="10242" line="213" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10242</e></m></meta>
		</TEXTURE_WRAP_S>
		<TEXTURE_WRAP_T public="1" get="inline" set="null" expr="10243" line="214" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10243</e></m></meta>
		</TEXTURE_WRAP_T>
		<TEXTURE_2D public="1" get="inline" set="null" expr="3553" line="215" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3553</e></m></meta>
		</TEXTURE_2D>
		<TEXTURE public="1" get="inline" set="null" expr="5890" line="216" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5890</e></m></meta>
		</TEXTURE>
		<TEXTURE_CUBE_MAP public="1" get="inline" set="null" expr="34067" line="217" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34067</e></m></meta>
		</TEXTURE_CUBE_MAP>
		<TEXTURE_BINDING_CUBE_MAP public="1" get="inline" set="null" expr="34068" line="218" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34068</e></m></meta>
		</TEXTURE_BINDING_CUBE_MAP>
		<TEXTURE_CUBE_MAP_POSITIVE_X public="1" get="inline" set="null" expr="34069" line="219" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34069</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_X>
		<TEXTURE_CUBE_MAP_NEGATIVE_X public="1" get="inline" set="null" expr="34070" line="220" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34070</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_X>
		<TEXTURE_CUBE_MAP_POSITIVE_Y public="1" get="inline" set="null" expr="34071" line="221" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34071</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_Y>
		<TEXTURE_CUBE_MAP_NEGATIVE_Y public="1" get="inline" set="null" expr="34072" line="222" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34072</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_Y>
		<TEXTURE_CUBE_MAP_POSITIVE_Z public="1" get="inline" set="null" expr="34073" line="223" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34073</e></m></meta>
		</TEXTURE_CUBE_MAP_POSITIVE_Z>
		<TEXTURE_CUBE_MAP_NEGATIVE_Z public="1" get="inline" set="null" expr="34074" line="224" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34074</e></m></meta>
		</TEXTURE_CUBE_MAP_NEGATIVE_Z>
		<MAX_CUBE_MAP_TEXTURE_SIZE public="1" get="inline" set="null" expr="34076" line="225" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34076</e></m></meta>
		</MAX_CUBE_MAP_TEXTURE_SIZE>
		<TEXTURE0 public="1" get="inline" set="null" expr="33984" line="226" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33984</e></m></meta>
		</TEXTURE0>
		<TEXTURE1 public="1" get="inline" set="null" expr="33985" line="227" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33985</e></m></meta>
		</TEXTURE1>
		<TEXTURE2 public="1" get="inline" set="null" expr="33986" line="228" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33986</e></m></meta>
		</TEXTURE2>
		<TEXTURE3 public="1" get="inline" set="null" expr="33987" line="229" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33987</e></m></meta>
		</TEXTURE3>
		<TEXTURE4 public="1" get="inline" set="null" expr="33988" line="230" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33988</e></m></meta>
		</TEXTURE4>
		<TEXTURE5 public="1" get="inline" set="null" expr="33989" line="231" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33989</e></m></meta>
		</TEXTURE5>
		<TEXTURE6 public="1" get="inline" set="null" expr="33990" line="232" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33990</e></m></meta>
		</TEXTURE6>
		<TEXTURE7 public="1" get="inline" set="null" expr="33991" line="233" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33991</e></m></meta>
		</TEXTURE7>
		<TEXTURE8 public="1" get="inline" set="null" expr="33992" line="234" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33992</e></m></meta>
		</TEXTURE8>
		<TEXTURE9 public="1" get="inline" set="null" expr="33993" line="235" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33993</e></m></meta>
		</TEXTURE9>
		<TEXTURE10 public="1" get="inline" set="null" expr="33994" line="236" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33994</e></m></meta>
		</TEXTURE10>
		<TEXTURE11 public="1" get="inline" set="null" expr="33995" line="237" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33995</e></m></meta>
		</TEXTURE11>
		<TEXTURE12 public="1" get="inline" set="null" expr="33996" line="238" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33996</e></m></meta>
		</TEXTURE12>
		<TEXTURE13 public="1" get="inline" set="null" expr="33997" line="239" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33997</e></m></meta>
		</TEXTURE13>
		<TEXTURE14 public="1" get="inline" set="null" expr="33998" line="240" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33998</e></m></meta>
		</TEXTURE14>
		<TEXTURE15 public="1" get="inline" set="null" expr="33999" line="241" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33999</e></m></meta>
		</TEXTURE15>
		<TEXTURE16 public="1" get="inline" set="null" expr="34000" line="242" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34000</e></m></meta>
		</TEXTURE16>
		<TEXTURE17 public="1" get="inline" set="null" expr="34001" line="243" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34001</e></m></meta>
		</TEXTURE17>
		<TEXTURE18 public="1" get="inline" set="null" expr="34002" line="244" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34002</e></m></meta>
		</TEXTURE18>
		<TEXTURE19 public="1" get="inline" set="null" expr="34003" line="245" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34003</e></m></meta>
		</TEXTURE19>
		<TEXTURE20 public="1" get="inline" set="null" expr="34004" line="246" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34004</e></m></meta>
		</TEXTURE20>
		<TEXTURE21 public="1" get="inline" set="null" expr="34005" line="247" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34005</e></m></meta>
		</TEXTURE21>
		<TEXTURE22 public="1" get="inline" set="null" expr="34006" line="248" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34006</e></m></meta>
		</TEXTURE22>
		<TEXTURE23 public="1" get="inline" set="null" expr="34007" line="249" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34007</e></m></meta>
		</TEXTURE23>
		<TEXTURE24 public="1" get="inline" set="null" expr="34008" line="250" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34008</e></m></meta>
		</TEXTURE24>
		<TEXTURE25 public="1" get="inline" set="null" expr="34009" line="251" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34009</e></m></meta>
		</TEXTURE25>
		<TEXTURE26 public="1" get="inline" set="null" expr="34010" line="252" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34010</e></m></meta>
		</TEXTURE26>
		<TEXTURE27 public="1" get="inline" set="null" expr="34011" line="253" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34011</e></m></meta>
		</TEXTURE27>
		<TEXTURE28 public="1" get="inline" set="null" expr="34012" line="254" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34012</e></m></meta>
		</TEXTURE28>
		<TEXTURE29 public="1" get="inline" set="null" expr="34013" line="255" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34013</e></m></meta>
		</TEXTURE29>
		<TEXTURE30 public="1" get="inline" set="null" expr="34014" line="256" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34014</e></m></meta>
		</TEXTURE30>
		<TEXTURE31 public="1" get="inline" set="null" expr="34015" line="257" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34015</e></m></meta>
		</TEXTURE31>
		<ACTIVE_TEXTURE public="1" get="inline" set="null" expr="34016" line="258" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34016</e></m></meta>
		</ACTIVE_TEXTURE>
		<REPEAT public="1" get="inline" set="null" expr="10497" line="259" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10497</e></m></meta>
		</REPEAT>
		<CLAMP_TO_EDGE public="1" get="inline" set="null" expr="33071" line="260" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33071</e></m></meta>
		</CLAMP_TO_EDGE>
		<MIRRORED_REPEAT public="1" get="inline" set="null" expr="33648" line="261" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33648</e></m></meta>
		</MIRRORED_REPEAT>
		<FLOAT_VEC2 public="1" get="inline" set="null" expr="35664" line="262" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35664</e></m></meta>
		</FLOAT_VEC2>
		<FLOAT_VEC3 public="1" get="inline" set="null" expr="35665" line="263" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35665</e></m></meta>
		</FLOAT_VEC3>
		<FLOAT_VEC4 public="1" get="inline" set="null" expr="35666" line="264" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35666</e></m></meta>
		</FLOAT_VEC4>
		<INT_VEC2 public="1" get="inline" set="null" expr="35667" line="265" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35667</e></m></meta>
		</INT_VEC2>
		<INT_VEC3 public="1" get="inline" set="null" expr="35668" line="266" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35668</e></m></meta>
		</INT_VEC3>
		<INT_VEC4 public="1" get="inline" set="null" expr="35669" line="267" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35669</e></m></meta>
		</INT_VEC4>
		<BOOL public="1" get="inline" set="null" expr="35670" line="268" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35670</e></m></meta>
		</BOOL>
		<BOOL_VEC2 public="1" get="inline" set="null" expr="35671" line="269" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35671</e></m></meta>
		</BOOL_VEC2>
		<BOOL_VEC3 public="1" get="inline" set="null" expr="35672" line="270" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35672</e></m></meta>
		</BOOL_VEC3>
		<BOOL_VEC4 public="1" get="inline" set="null" expr="35673" line="271" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35673</e></m></meta>
		</BOOL_VEC4>
		<FLOAT_MAT2 public="1" get="inline" set="null" expr="35674" line="272" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35674</e></m></meta>
		</FLOAT_MAT2>
		<FLOAT_MAT3 public="1" get="inline" set="null" expr="35675" line="273" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35675</e></m></meta>
		</FLOAT_MAT3>
		<FLOAT_MAT4 public="1" get="inline" set="null" expr="35676" line="274" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35676</e></m></meta>
		</FLOAT_MAT4>
		<SAMPLER_2D public="1" get="inline" set="null" expr="35678" line="275" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35678</e></m></meta>
		</SAMPLER_2D>
		<SAMPLER_CUBE public="1" get="inline" set="null" expr="35680" line="276" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35680</e></m></meta>
		</SAMPLER_CUBE>
		<VERTEX_ATTRIB_ARRAY_ENABLED public="1" get="inline" set="null" expr="34338" line="277" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34338</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_ENABLED>
		<VERTEX_ATTRIB_ARRAY_SIZE public="1" get="inline" set="null" expr="34339" line="278" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34339</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_SIZE>
		<VERTEX_ATTRIB_ARRAY_STRIDE public="1" get="inline" set="null" expr="34340" line="279" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34340</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_STRIDE>
		<VERTEX_ATTRIB_ARRAY_TYPE public="1" get="inline" set="null" expr="34341" line="280" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34341</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_TYPE>
		<VERTEX_ATTRIB_ARRAY_NORMALIZED public="1" get="inline" set="null" expr="34922" line="281" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34922</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_NORMALIZED>
		<VERTEX_ATTRIB_ARRAY_POINTER public="1" get="inline" set="null" expr="34373" line="282" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34373</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_POINTER>
		<VERTEX_ATTRIB_ARRAY_BUFFER_BINDING public="1" get="inline" set="null" expr="34975" line="283" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34975</e></m></meta>
		</VERTEX_ATTRIB_ARRAY_BUFFER_BINDING>
		<IMPLEMENTATION_COLOR_READ_TYPE public="1" get="inline" set="null" expr="35738" line="284" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35738</e></m></meta>
		</IMPLEMENTATION_COLOR_READ_TYPE>
		<IMPLEMENTATION_COLOR_READ_FORMAT public="1" get="inline" set="null" expr="35739" line="285" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35739</e></m></meta>
		</IMPLEMENTATION_COLOR_READ_FORMAT>
		<COMPILE_STATUS public="1" get="inline" set="null" expr="35713" line="286" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>35713</e></m></meta>
		</COMPILE_STATUS>
		<LOW_FLOAT public="1" get="inline" set="null" expr="36336" line="287" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36336</e></m></meta>
		</LOW_FLOAT>
		<MEDIUM_FLOAT public="1" get="inline" set="null" expr="36337" line="288" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36337</e></m></meta>
		</MEDIUM_FLOAT>
		<HIGH_FLOAT public="1" get="inline" set="null" expr="36338" line="289" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36338</e></m></meta>
		</HIGH_FLOAT>
		<LOW_INT public="1" get="inline" set="null" expr="36339" line="290" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36339</e></m></meta>
		</LOW_INT>
		<MEDIUM_INT public="1" get="inline" set="null" expr="36340" line="291" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36340</e></m></meta>
		</MEDIUM_INT>
		<HIGH_INT public="1" get="inline" set="null" expr="36341" line="292" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36341</e></m></meta>
		</HIGH_INT>
		<FRAMEBUFFER public="1" get="inline" set="null" expr="36160" line="293" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36160</e></m></meta>
		</FRAMEBUFFER>
		<RENDERBUFFER public="1" get="inline" set="null" expr="36161" line="294" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36161</e></m></meta>
		</RENDERBUFFER>
		<RGBA4 public="1" get="inline" set="null" expr="32854" line="295" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32854</e></m></meta>
		</RGBA4>
		<RGB5_A1 public="1" get="inline" set="null" expr="32855" line="296" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32855</e></m></meta>
		</RGB5_A1>
		<RGB565 public="1" get="inline" set="null" expr="36194" line="297" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36194</e></m></meta>
		</RGB565>
		<DEPTH_COMPONENT16 public="1" get="inline" set="null" expr="33189" line="298" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33189</e></m></meta>
		</DEPTH_COMPONENT16>
		<STENCIL_INDEX public="1" get="inline" set="null" expr="6401" line="299" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6401</e></m></meta>
		</STENCIL_INDEX>
		<STENCIL_INDEX8 public="1" get="inline" set="null" expr="36168" line="300" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36168</e></m></meta>
		</STENCIL_INDEX8>
		<DEPTH_STENCIL public="1" get="inline" set="null" expr="34041" line="301" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34041</e></m></meta>
		</DEPTH_STENCIL>
		<RENDERBUFFER_WIDTH public="1" get="inline" set="null" expr="36162" line="302" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36162</e></m></meta>
		</RENDERBUFFER_WIDTH>
		<RENDERBUFFER_HEIGHT public="1" get="inline" set="null" expr="36163" line="303" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36163</e></m></meta>
		</RENDERBUFFER_HEIGHT>
		<RENDERBUFFER_INTERNAL_FORMAT public="1" get="inline" set="null" expr="36164" line="304" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36164</e></m></meta>
		</RENDERBUFFER_INTERNAL_FORMAT>
		<RENDERBUFFER_RED_SIZE public="1" get="inline" set="null" expr="36176" line="305" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36176</e></m></meta>
		</RENDERBUFFER_RED_SIZE>
		<RENDERBUFFER_GREEN_SIZE public="1" get="inline" set="null" expr="36177" line="306" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36177</e></m></meta>
		</RENDERBUFFER_GREEN_SIZE>
		<RENDERBUFFER_BLUE_SIZE public="1" get="inline" set="null" expr="36178" line="307" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36178</e></m></meta>
		</RENDERBUFFER_BLUE_SIZE>
		<RENDERBUFFER_ALPHA_SIZE public="1" get="inline" set="null" expr="36179" line="308" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36179</e></m></meta>
		</RENDERBUFFER_ALPHA_SIZE>
		<RENDERBUFFER_DEPTH_SIZE public="1" get="inline" set="null" expr="36180" line="309" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36180</e></m></meta>
		</RENDERBUFFER_DEPTH_SIZE>
		<RENDERBUFFER_STENCIL_SIZE public="1" get="inline" set="null" expr="36181" line="310" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36181</e></m></meta>
		</RENDERBUFFER_STENCIL_SIZE>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE public="1" get="inline" set="null" expr="36048" line="311" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36048</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_NAME public="1" get="inline" set="null" expr="36049" line="312" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36049</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_OBJECT_NAME>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL public="1" get="inline" set="null" expr="36050" line="313" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36050</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE public="1" get="inline" set="null" expr="36051" line="314" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36051</e></m></meta>
		</FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE>
		<COLOR_ATTACHMENT0 public="1" get="inline" set="null" expr="36064" line="315" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36064</e></m></meta>
		</COLOR_ATTACHMENT0>
		<DEPTH_ATTACHMENT public="1" get="inline" set="null" expr="36096" line="316" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36096</e></m></meta>
		</DEPTH_ATTACHMENT>
		<STENCIL_ATTACHMENT public="1" get="inline" set="null" expr="36128" line="317" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36128</e></m></meta>
		</STENCIL_ATTACHMENT>
		<DEPTH_STENCIL_ATTACHMENT public="1" get="inline" set="null" expr="33306" line="318" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33306</e></m></meta>
		</DEPTH_STENCIL_ATTACHMENT>
		<NONE public="1" get="inline" set="null" expr="0" line="319" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NONE>
		<FRAMEBUFFER_COMPLETE public="1" get="inline" set="null" expr="36053" line="320" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36053</e></m></meta>
		</FRAMEBUFFER_COMPLETE>
		<FRAMEBUFFER_INCOMPLETE_ATTACHMENT public="1" get="inline" set="null" expr="36054" line="321" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36054</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_ATTACHMENT>
		<FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT public="1" get="inline" set="null" expr="36055" line="322" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36055</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT>
		<FRAMEBUFFER_INCOMPLETE_DIMENSIONS public="1" get="inline" set="null" expr="36057" line="323" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36057</e></m></meta>
		</FRAMEBUFFER_INCOMPLETE_DIMENSIONS>
		<FRAMEBUFFER_UNSUPPORTED public="1" get="inline" set="null" expr="36061" line="324" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36061</e></m></meta>
		</FRAMEBUFFER_UNSUPPORTED>
		<FRAMEBUFFER_BINDING public="1" get="inline" set="null" expr="36006" line="325" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36006</e></m></meta>
		</FRAMEBUFFER_BINDING>
		<RENDERBUFFER_BINDING public="1" get="inline" set="null" expr="36007" line="326" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>36007</e></m></meta>
		</RENDERBUFFER_BINDING>
		<MAX_RENDERBUFFER_SIZE public="1" get="inline" set="null" expr="34024" line="327" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>34024</e></m></meta>
		</MAX_RENDERBUFFER_SIZE>
		<INVALID_FRAMEBUFFER_OPERATION public="1" get="inline" set="null" expr="1286" line="328" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1286</e></m></meta>
		</INVALID_FRAMEBUFFER_OPERATION>
		<UNPACK_FLIP_Y_WEBGL public="1" get="inline" set="null" expr="37440" line="329" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37440</e></m></meta>
		</UNPACK_FLIP_Y_WEBGL>
		<UNPACK_PREMULTIPLY_ALPHA_WEBGL public="1" get="inline" set="null" expr="37441" line="330" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37441</e></m></meta>
		</UNPACK_PREMULTIPLY_ALPHA_WEBGL>
		<CONTEXT_LOST_WEBGL public="1" get="inline" set="null" expr="37442" line="331" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37442</e></m></meta>
		</CONTEXT_LOST_WEBGL>
		<UNPACK_COLORSPACE_CONVERSION_WEBGL public="1" get="inline" set="null" expr="37443" line="332" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37443</e></m></meta>
		</UNPACK_COLORSPACE_CONVERSION_WEBGL>
		<BROWSER_DEFAULT_WEBGL public="1" get="inline" set="null" expr="37444" line="333" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>37444</e></m></meta>
		</BROWSER_DEFAULT_WEBGL>
		<canvas public="1" set="null"><c path="js.html.CanvasElement"/></canvas>
		<drawingBufferWidth public="1" set="null"><x path="Int"/></drawingBufferWidth>
		<drawingBufferHeight public="1" set="null"><x path="Int"/></drawingBufferHeight>
		<getContextAttributes public="1" set="method"><f a=""><t path="js.html.webgl.ContextAttributes"/></f></getContextAttributes>
		<isContextLost public="1" set="method"><f a=""><x path="Bool"/></f></isContextLost>
		<getSupportedExtensions public="1" set="method"><f a=""><c path="Array"><c path="String"/></c></f></getSupportedExtensions>
		<getExtension public="1" set="method">
			<f a="name">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getExtension>
		<activeTexture public="1" set="method"><f a="texture">
	<x path="Int"/>
	<x path="Void"/>
</f></activeTexture>
		<attachShader public="1" set="method"><f a="program:shader">
	<c path="js.html.webgl.Program"/>
	<c path="js.html.webgl.Shader"/>
	<x path="Void"/>
</f></attachShader>
		<bindAttribLocation public="1" set="method"><f a="program:index:name">
	<c path="js.html.webgl.Program"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></bindAttribLocation>
		<bindBuffer public="1" set="method"><f a="target:buffer">
	<x path="Int"/>
	<c path="js.html.webgl.Buffer"/>
	<x path="Void"/>
</f></bindBuffer>
		<bindFramebuffer public="1" set="method"><f a="target:framebuffer">
	<x path="Int"/>
	<c path="js.html.webgl.Framebuffer"/>
	<x path="Void"/>
</f></bindFramebuffer>
		<bindRenderbuffer public="1" set="method"><f a="target:renderbuffer">
	<x path="Int"/>
	<c path="js.html.webgl.Renderbuffer"/>
	<x path="Void"/>
</f></bindRenderbuffer>
		<bindTexture public="1" set="method"><f a="target:texture">
	<x path="Int"/>
	<c path="js.html.webgl.Texture"/>
	<x path="Void"/>
</f></bindTexture>
		<blendColor public="1" set="method"><f a="red:green:blue:alpha">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></blendColor>
		<blendEquation public="1" set="method"><f a="mode">
	<x path="Int"/>
	<x path="Void"/>
</f></blendEquation>
		<blendEquationSeparate public="1" set="method"><f a="modeRGB:modeAlpha">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendEquationSeparate>
		<blendFunc public="1" set="method"><f a="sfactor:dfactor">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendFunc>
		<blendFuncSeparate public="1" set="method"><f a="srcRGB:dstRGB:srcAlpha:dstAlpha">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendFuncSeparate>
		<bufferData public="1" set="method">
			<f a="target:data:usage">
				<x path="Int"/>
				<d/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads>
				<bufferData public="1" set="method"><f a="target:size:usage">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></bufferData>
				<bufferData public="1" set="method"><f a="target:data:usage">
	<x path="Int"/>
	<c path="js.html.ArrayBufferView"/>
	<x path="Int"/>
	<x path="Void"/>
</f></bufferData>
				<bufferData public="1" set="method"><f a="target:data:usage">
	<x path="Int"/>
	<c path="js.html.ArrayBuffer"/>
	<x path="Int"/>
	<x path="Void"/>
</f></bufferData>
			</overloads>
		</bufferData>
		<bufferSubData public="1" set="method">
			<f a="target:offset:data">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
				<x path="Void"/>
			</f>
			<overloads>
				<bufferSubData public="1" set="method"><f a="target:offset:data">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.ArrayBufferView"/>
	<x path="Void"/>
</f></bufferSubData>
				<bufferSubData public="1" set="method"><f a="target:offset:data">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.ArrayBuffer"/>
	<x path="Void"/>
</f></bufferSubData>
			</overloads>
		</bufferSubData>
		<checkFramebufferStatus public="1" set="method"><f a="target">
	<x path="Int"/>
	<x path="Int"/>
</f></checkFramebufferStatus>
		<clear public="1" set="method"><f a="mask">
	<x path="Int"/>
	<x path="Void"/>
</f></clear>
		<clearColor public="1" set="method"><f a="red:green:blue:alpha">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></clearColor>
		<clearDepth public="1" set="method"><f a="depth">
	<x path="Float"/>
	<x path="Void"/>
</f></clearDepth>
		<clearStencil public="1" set="method"><f a="s">
	<x path="Int"/>
	<x path="Void"/>
</f></clearStencil>
		<colorMask public="1" set="method"><f a="red:green:blue:alpha">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></colorMask>
		<compileShader public="1" set="method"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<x path="Void"/>
</f></compileShader>
		<compressedTexImage2D public="1" set="method"><f a="target:level:internalformat:width:height:border:data">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.ArrayBufferView"/>
	<x path="Void"/>
</f></compressedTexImage2D>
		<compressedTexSubImage2D public="1" set="method"><f a="target:level:xoffset:yoffset:width:height:format:data">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.ArrayBufferView"/>
	<x path="Void"/>
</f></compressedTexSubImage2D>
		<copyTexImage2D public="1" set="method"><f a="target:level:internalformat:x:y:width:height:border">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyTexImage2D>
		<copyTexSubImage2D public="1" set="method"><f a="target:level:xoffset:yoffset:x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyTexSubImage2D>
		<createBuffer public="1" set="method"><f a=""><c path="js.html.webgl.Buffer"/></f></createBuffer>
		<createFramebuffer public="1" set="method"><f a=""><c path="js.html.webgl.Framebuffer"/></f></createFramebuffer>
		<createProgram public="1" set="method"><f a=""><c path="js.html.webgl.Program"/></f></createProgram>
		<createRenderbuffer public="1" set="method"><f a=""><c path="js.html.webgl.Renderbuffer"/></f></createRenderbuffer>
		<createShader public="1" set="method"><f a="type">
	<x path="Int"/>
	<c path="js.html.webgl.Shader"/>
</f></createShader>
		<createTexture public="1" set="method"><f a=""><c path="js.html.webgl.Texture"/></f></createTexture>
		<cullFace public="1" set="method"><f a="mode">
	<x path="Int"/>
	<x path="Void"/>
</f></cullFace>
		<deleteBuffer public="1" set="method"><f a="buffer">
	<c path="js.html.webgl.Buffer"/>
	<x path="Void"/>
</f></deleteBuffer>
		<deleteFramebuffer public="1" set="method"><f a="framebuffer">
	<c path="js.html.webgl.Framebuffer"/>
	<x path="Void"/>
</f></deleteFramebuffer>
		<deleteProgram public="1" set="method"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Void"/>
</f></deleteProgram>
		<deleteRenderbuffer public="1" set="method"><f a="renderbuffer">
	<c path="js.html.webgl.Renderbuffer"/>
	<x path="Void"/>
</f></deleteRenderbuffer>
		<deleteShader public="1" set="method"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<x path="Void"/>
</f></deleteShader>
		<deleteTexture public="1" set="method"><f a="texture">
	<c path="js.html.webgl.Texture"/>
	<x path="Void"/>
</f></deleteTexture>
		<depthFunc public="1" set="method"><f a="func">
	<x path="Int"/>
	<x path="Void"/>
</f></depthFunc>
		<depthMask public="1" set="method"><f a="flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></depthMask>
		<depthRange public="1" set="method"><f a="zNear:zFar">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></depthRange>
		<detachShader public="1" set="method"><f a="program:shader">
	<c path="js.html.webgl.Program"/>
	<c path="js.html.webgl.Shader"/>
	<x path="Void"/>
</f></detachShader>
		<disable public="1" set="method"><f a="cap">
	<x path="Int"/>
	<x path="Void"/>
</f></disable>
		<disableVertexAttribArray public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></disableVertexAttribArray>
		<drawArrays public="1" set="method"><f a="mode:first:count">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawArrays>
		<drawElements public="1" set="method"><f a="mode:count:type:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawElements>
		<enable public="1" set="method"><f a="cap">
	<x path="Int"/>
	<x path="Void"/>
</f></enable>
		<enableVertexAttribArray public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></enableVertexAttribArray>
		<finish public="1" set="method"><f a=""><x path="Void"/></f></finish>
		<flush public="1" set="method"><f a=""><x path="Void"/></f></flush>
		<framebufferRenderbuffer public="1" set="method"><f a="target:attachment:renderbuffertarget:renderbuffer">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.webgl.Renderbuffer"/>
	<x path="Void"/>
</f></framebufferRenderbuffer>
		<framebufferTexture2D public="1" set="method"><f a="target:attachment:textarget:texture:level">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.webgl.Texture"/>
	<x path="Int"/>
	<x path="Void"/>
</f></framebufferTexture2D>
		<frontFace public="1" set="method"><f a="mode">
	<x path="Int"/>
	<x path="Void"/>
</f></frontFace>
		<generateMipmap public="1" set="method"><f a="target">
	<x path="Int"/>
	<x path="Void"/>
</f></generateMipmap>
		<getActiveAttrib public="1" set="method"><f a="program:index">
	<c path="js.html.webgl.Program"/>
	<x path="Int"/>
	<c path="js.html.webgl.ActiveInfo"/>
</f></getActiveAttrib>
		<getActiveUniform public="1" set="method"><f a="program:index">
	<c path="js.html.webgl.Program"/>
	<x path="Int"/>
	<c path="js.html.webgl.ActiveInfo"/>
</f></getActiveUniform>
		<getAttachedShaders public="1" set="method"><f a="program">
	<c path="js.html.webgl.Program"/>
	<c path="Array"><c path="js.html.webgl.Shader"/></c>
</f></getAttachedShaders>
		<getAttribLocation public="1" set="method"><f a="program:name">
	<c path="js.html.webgl.Program"/>
	<c path="String"/>
	<x path="Int"/>
</f></getAttribLocation>
		<getBufferParameter public="1" set="method"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getBufferParameter>
		<getParameter public="1" set="method">
			<f a="pname">
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getParameter>
		<getError public="1" set="method"><f a=""><x path="Int"/></f></getError>
		<getFramebufferAttachmentParameter public="1" set="method">
			<f a="target:attachment:pname">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getFramebufferAttachmentParameter>
		<getProgramParameter public="1" set="method"><f a="program:pname">
	<c path="js.html.webgl.Program"/>
	<x path="Int"/>
	<d/>
</f></getProgramParameter>
		<getProgramInfoLog public="1" set="method"><f a="program">
	<c path="js.html.webgl.Program"/>
	<c path="String"/>
</f></getProgramInfoLog>
		<getRenderbufferParameter public="1" set="method"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getRenderbufferParameter>
		<getShaderParameter public="1" set="method"><f a="shader:pname">
	<c path="js.html.webgl.Shader"/>
	<x path="Int"/>
	<d/>
</f></getShaderParameter>
		<getShaderPrecisionFormat public="1" set="method"><f a="shadertype:precisiontype">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.html.webgl.ShaderPrecisionFormat"/>
</f></getShaderPrecisionFormat>
		<getShaderInfoLog public="1" set="method"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<c path="String"/>
</f></getShaderInfoLog>
		<getShaderSource public="1" set="method"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<c path="String"/>
</f></getShaderSource>
		<getTexParameter public="1" set="method"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getTexParameter>
		<getUniform public="1" set="method"><f a="program:location">
	<c path="js.html.webgl.Program"/>
	<c path="js.html.webgl.UniformLocation"/>
	<d/>
</f></getUniform>
		<getUniformLocation public="1" set="method"><f a="program:name">
	<c path="js.html.webgl.Program"/>
	<c path="String"/>
	<c path="js.html.webgl.UniformLocation"/>
</f></getUniformLocation>
		<getVertexAttrib public="1" set="method">
			<f a="index:pname">
				<x path="Int"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</getVertexAttrib>
		<getVertexAttribOffset public="1" set="method"><f a="index:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getVertexAttribOffset>
		<hint public="1" set="method"><f a="target:mode">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></hint>
		<isBuffer public="1" set="method"><f a="buffer">
	<c path="js.html.webgl.Buffer"/>
	<x path="Bool"/>
</f></isBuffer>
		<isEnabled public="1" set="method"><f a="cap">
	<x path="Int"/>
	<x path="Bool"/>
</f></isEnabled>
		<isFramebuffer public="1" set="method"><f a="framebuffer">
	<c path="js.html.webgl.Framebuffer"/>
	<x path="Bool"/>
</f></isFramebuffer>
		<isProgram public="1" set="method"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Bool"/>
</f></isProgram>
		<isRenderbuffer public="1" set="method"><f a="renderbuffer">
	<c path="js.html.webgl.Renderbuffer"/>
	<x path="Bool"/>
</f></isRenderbuffer>
		<isShader public="1" set="method"><f a="shader">
	<c path="js.html.webgl.Shader"/>
	<x path="Bool"/>
</f></isShader>
		<isTexture public="1" set="method"><f a="texture">
	<c path="js.html.webgl.Texture"/>
	<x path="Bool"/>
</f></isTexture>
		<lineWidth public="1" set="method"><f a="width">
	<x path="Float"/>
	<x path="Void"/>
</f></lineWidth>
		<linkProgram public="1" set="method"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Void"/>
</f></linkProgram>
		<pixelStorei public="1" set="method"><f a="pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></pixelStorei>
		<polygonOffset public="1" set="method"><f a="factor:units">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></polygonOffset>
		<readPixels public="1" set="method">
			<f a="x:y:width:height:format:type:pixels">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.ArrayBufferView"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</readPixels>
		<renderbufferStorage public="1" set="method"><f a="target:internalformat:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></renderbufferStorage>
		<sampleCoverage public="1" set="method"><f a="value:invert">
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></sampleCoverage>
		<scissor public="1" set="method"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scissor>
		<shaderSource public="1" set="method"><f a="shader:source">
	<c path="js.html.webgl.Shader"/>
	<c path="String"/>
	<x path="Void"/>
</f></shaderSource>
		<stencilFunc public="1" set="method"><f a="func:ref:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilFunc>
		<stencilFuncSeparate public="1" set="method"><f a="face:func:ref:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilFuncSeparate>
		<stencilMask public="1" set="method"><f a="mask">
	<x path="Int"/>
	<x path="Void"/>
</f></stencilMask>
		<stencilMaskSeparate public="1" set="method"><f a="face:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilMaskSeparate>
		<stencilOp public="1" set="method"><f a="fail:zfail:zpass">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilOp>
		<stencilOpSeparate public="1" set="method"><f a="face:fail:zfail:zpass">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilOpSeparate>
		<texImage2D public="1" set="method">
			<f a="target:level:internalformat:format:type:video">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.VideoElement"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:width:height:border:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:image">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
				<texImage2D public="1" set="method">
					<f a="target:level:internalformat:format:type:canvas">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texImage2D>
			</overloads>
		</texImage2D>
		<texParameterf public="1" set="method"><f a="target:pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></texParameterf>
		<texParameteri public="1" set="method"><f a="target:pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></texParameteri>
		<texSubImage2D public="1" set="method">
			<f a="target:level:xoffset:yoffset:format:type:video">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.html.VideoElement"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:width:height:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ArrayBufferView"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:pixels">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageData"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:image">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.ImageElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
				<texSubImage2D public="1" set="method">
					<f a="target:level:xoffset:yoffset:format:type:canvas">
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<x path="Int"/>
						<c path="js.html.CanvasElement"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</texSubImage2D>
			</overloads>
		</texSubImage2D>
		<uniform1f public="1" set="method"><f a="location:x">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform1f>
		<uniform1fv public="1" set="method">
			<f a="location:v">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<overloads><uniform1fv public="1" set="method"><f a="location:v">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="js.html.Float32Array"/>
	<x path="Void"/>
</f></uniform1fv></overloads>
		</uniform1fv>
		<uniform1i public="1" set="method"><f a="location:x">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform1i>
		<uniform1iv public="1" set="method">
			<f a="location:v">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<overloads><uniform1iv public="1" set="method"><f a="location:v">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="js.html.Int32Array"/>
	<x path="Void"/>
</f></uniform1iv></overloads>
		</uniform1iv>
		<uniform2f public="1" set="method"><f a="location:x:y">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform2f>
		<uniform2fv public="1" set="method">
			<f a="location:v">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<overloads><uniform2fv public="1" set="method"><f a="location:v">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="js.html.Float32Array"/>
	<x path="Void"/>
</f></uniform2fv></overloads>
		</uniform2fv>
		<uniform2i public="1" set="method"><f a="location:x:y">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform2i>
		<uniform2iv public="1" set="method">
			<f a="location:v">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<overloads><uniform2iv public="1" set="method"><f a="location:v">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="js.html.Int32Array"/>
	<x path="Void"/>
</f></uniform2iv></overloads>
		</uniform2iv>
		<uniform3f public="1" set="method"><f a="location:x:y:z">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform3f>
		<uniform3fv public="1" set="method">
			<f a="location:v">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<overloads><uniform3fv public="1" set="method"><f a="location:v">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="js.html.Float32Array"/>
	<x path="Void"/>
</f></uniform3fv></overloads>
		</uniform3fv>
		<uniform3i public="1" set="method"><f a="location:x:y:z">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform3i>
		<uniform3iv public="1" set="method">
			<f a="location:v">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<overloads><uniform3iv public="1" set="method"><f a="location:v">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="js.html.Int32Array"/>
	<x path="Void"/>
</f></uniform3iv></overloads>
		</uniform3iv>
		<uniform4f public="1" set="method"><f a="location:x:y:z:w">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform4f>
		<uniform4fv public="1" set="method">
			<f a="location:v">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<overloads><uniform4fv public="1" set="method"><f a="location:v">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="js.html.Float32Array"/>
	<x path="Void"/>
</f></uniform4fv></overloads>
		</uniform4fv>
		<uniform4i public="1" set="method"><f a="location:x:y:z:w">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform4i>
		<uniform4iv public="1" set="method">
			<f a="location:v">
				<c path="js.html.webgl.UniformLocation"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<overloads><uniform4iv public="1" set="method"><f a="location:v">
	<c path="js.html.webgl.UniformLocation"/>
	<c path="js.html.Int32Array"/>
	<x path="Void"/>
</f></uniform4iv></overloads>
		</uniform4iv>
		<uniformMatrix2fv public="1" set="method">
			<f a="location:transpose:value">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<overloads><uniformMatrix2fv public="1" set="method"><f a="location:transpose:value">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Bool"/>
	<c path="js.html.Float32Array"/>
	<x path="Void"/>
</f></uniformMatrix2fv></overloads>
		</uniformMatrix2fv>
		<uniformMatrix3fv public="1" set="method">
			<f a="location:transpose:value">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<overloads><uniformMatrix3fv public="1" set="method"><f a="location:transpose:value">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Bool"/>
	<c path="js.html.Float32Array"/>
	<x path="Void"/>
</f></uniformMatrix3fv></overloads>
		</uniformMatrix3fv>
		<uniformMatrix4fv public="1" set="method">
			<f a="location:transpose:value">
				<c path="js.html.webgl.UniformLocation"/>
				<x path="Bool"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<overloads><uniformMatrix4fv public="1" set="method"><f a="location:transpose:value">
	<c path="js.html.webgl.UniformLocation"/>
	<x path="Bool"/>
	<c path="js.html.Float32Array"/>
	<x path="Void"/>
</f></uniformMatrix4fv></overloads>
		</uniformMatrix4fv>
		<useProgram public="1" set="method"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Void"/>
</f></useProgram>
		<validateProgram public="1" set="method"><f a="program">
	<c path="js.html.webgl.Program"/>
	<x path="Void"/>
</f></validateProgram>
		<vertexAttrib1f public="1" set="method"><f a="indx:x">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib1f>
		<vertexAttrib1fv public="1" set="method">
			<f a="indx:values">
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib1fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="js.html.Float32Array"/>
	<x path="Void"/>
</f></vertexAttrib1fv></overloads>
		</vertexAttrib1fv>
		<vertexAttrib2f public="1" set="method"><f a="indx:x:y">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib2f>
		<vertexAttrib2fv public="1" set="method">
			<f a="indx:values">
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib2fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="js.html.Float32Array"/>
	<x path="Void"/>
</f></vertexAttrib2fv></overloads>
		</vertexAttrib2fv>
		<vertexAttrib3f public="1" set="method"><f a="indx:x:y:z">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib3f>
		<vertexAttrib3fv public="1" set="method">
			<f a="indx:values">
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib3fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="js.html.Float32Array"/>
	<x path="Void"/>
</f></vertexAttrib3fv></overloads>
		</vertexAttrib3fv>
		<vertexAttrib4f public="1" set="method"><f a="indx:x:y:z:w">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib4f>
		<vertexAttrib4fv public="1" set="method">
			<f a="indx:values">
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<overloads><vertexAttrib4fv public="1" set="method"><f a="indx:values">
	<x path="Int"/>
	<c path="js.html.Float32Array"/>
	<x path="Void"/>
</f></vertexAttrib4fv></overloads>
		</vertexAttrib4fv>
		<vertexAttribPointer public="1" set="method"><f a="indx:size:type:normalized:stride:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></vertexAttribPointer>
		<viewport public="1" set="method"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></viewport>
		<haxe_doc><![CDATA[The WebGLRenderingContext interface provides the OpenGL ES 2.0 rendering context for the drawing surface of an HTML `canvas` element.

	Documentation [WebGLRenderingContext](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLRenderingContext"</e></m></meta>
	</class>
	<class path="js.html.webgl.Shader" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/Shader.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLShader is part of the WebGL API and can either be a vertex or a fragment shader. A `WebGLProgram` requires both types of shaders.

	Documentation [WebGLShader](https://developer.mozilla.org/en-US/docs/Web/API/WebGLShader) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLShader$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLShader>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLShader"</e></m></meta>
	</class>
	<class path="js.html.webgl.ShaderPrecisionFormat" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/ShaderPrecisionFormat.hx" extern="1">
		<rangeMin public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The base 2 log of the absolute value of the minimum value that can be represented.</haxe_doc>
		</rangeMin>
		<rangeMax public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The base 2 log of the absolute value of the maximum value that can be represented.</haxe_doc>
		</rangeMax>
		<precision public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of bits of precision that can be represented. For integer formats this value is always 0.</haxe_doc>
		</precision>
		<haxe_doc><![CDATA[The WebGLShaderPrecisionFormat interface is part of the WebGL API and represents the information returned by calling the `WebGLRenderingContext.getShaderPrecisionFormat()` method.

	Documentation [WebGLShaderPrecisionFormat](https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLShaderPrecisionFormat"</e></m></meta>
	</class>
	<class path="js.html.webgl.Texture" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/Texture.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLTexture interface is part of the WebGL API and represents an opaque texture object providing storage and state for texturing operations.

	Documentation [WebGLTexture](https://developer.mozilla.org/en-US/docs/Web/API/WebGLTexture) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLTexture$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLTexture>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLTexture"</e></m></meta>
	</class>
	<class path="js.html.webgl.TimerQueryEXT" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/TimerQueryEXT.hx" extern="1">
		<haxe_doc><![CDATA[The `WebGLTimerQueryEXT` interface is part of the WebGL `EXT_disjoint_timer_query` extension and exposes a timer query object.

	Documentation [WebGLTimerQueryEXT](https://developer.mozilla.org/en-US/docs/Web/API/WebGLTimerQueryEXT) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLTimerQueryEXT$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLTimerQueryEXT>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLTimerQueryEXT"</e></m></meta>
	</class>
	<class path="js.html.webgl.UniformLocation" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/UniformLocation.hx" extern="1">
		<haxe_doc><![CDATA[The WebGLUniformLocation interface is part of the WebGL API and represents the location of a uniform variable in a shader program.

	Documentation [WebGLUniformLocation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLUniformLocation) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLUniformLocation$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLUniformLocation>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLUniformLocation"</e></m></meta>
	</class>
	<class path="js.html.webgl.VertexArrayObjectOES" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/html/webgl/VertexArrayObjectOES.hx" extern="1">
		<haxe_doc><![CDATA[The `WebGLVertexArrayObjectOES` interface is part of the WebGL `OES_vertex_array_object` extension, represents vertex array objects (VAOs) pointing to vertex array data and provides names for different sets of vertex data.

	Documentation [WebGLVertexArrayObjectOES](https://developer.mozilla.org/en-US/docs/Web/API/WebGLVertexArrayObjectOES) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/WebGLVertexArrayObjectOES$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/WebGLVertexArrayObjectOES>]]></haxe_doc>
		<meta><m n=":native"><e>"WebGLVertexArrayObjectOES"</e></m></meta>
	</class>
	<class path="js.jquery.Callbacks" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/jquery/Callbacks.hx" extern="1">
		<add public="1" set="method">
			<f a="callbacks">
				<x path="haxe.extern.EitherType">
					<x path="haxe.Function"/>
					<c path="Array"><x path="haxe.Function"/></c>
				</x>
				<c path="js.jquery.Callbacks"/>
			</f>
			<haxe_doc>Add a callback or a collection of callbacks to a callback list.</haxe_doc>
		</add>
		<disable public="1" set="method">
			<f a=""><c path="js.jquery.Callbacks"/></f>
			<haxe_doc>Disable a callback list from doing anything more.</haxe_doc>
		</disable>
		<disabled public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Determine if the callbacks list has been disabled.</haxe_doc>
		</disabled>
		<empty public="1" set="method">
			<f a=""><c path="js.jquery.Callbacks"/></f>
			<haxe_doc>Remove all of the callbacks from a list.</haxe_doc>
		</empty>
		<fire public="1" set="method">
			<f a="arguments">
				<d/>
				<c path="js.jquery.Callbacks"/>
			</f>
			<haxe_doc>Call all of the callbacks with the given arguments.</haxe_doc>
		</fire>
		<fireWith public="1" set="method">
			<f a="?context:?args">
				<d/>
				<d/>
				<c path="js.jquery.Callbacks"/>
			</f>
			<haxe_doc>Call all callbacks in a list with the given context and arguments.</haxe_doc>
		</fireWith>
		<fired public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Determine if the callbacks have already been called at least once.</haxe_doc>
		</fired>
		<has public="1" set="method">
			<f a="?callback">
				<x path="haxe.Function"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determine whether or not the list has any callbacks attached. If a callback is provided as an argument, determine whether it is in a list.</haxe_doc>
		</has>
		<lock public="1" set="method">
			<f a=""><c path="js.jquery.Callbacks"/></f>
			<haxe_doc>Lock a callback list in its current state.</haxe_doc>
		</lock>
		<locked public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Determine if the callbacks list has been locked.</haxe_doc>
		</locked>
		<remove public="1" set="method">
			<f a="callbacks">
				<x path="haxe.extern.EitherType">
					<x path="haxe.Function"/>
					<c path="Array"><x path="haxe.Function"/></c>
				</x>
				<c path="js.jquery.Callbacks"/>
			</f>
			<haxe_doc>Remove a callback or a collection of callbacks from a callback list.</haxe_doc>
		</remove>
		<new public="1" set="method">
			<f a="flags">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":selfCall"/></meta>
			<haxe_doc>A multi-purpose callbacks list object that provides a powerful way to manage callback lists.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"$.Callbacks"</e></m></meta>
	</class>
	<class path="js.jquery.Deferred" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/jquery/Deferred.hx" extern="1">
		<always public="1" set="method">
			<f a="alwaysCallbacks:?alwaysCallbacks">
				<x path="haxe.extern.EitherType">
					<x path="haxe.Function"/>
					<c path="Array"><x path="haxe.Function"/></c>
				</x>
				<x path="haxe.extern.EitherType">
					<x path="haxe.Function"/>
					<c path="Array"><x path="haxe.Function"/></c>
				</x>
				<c path="js.jquery.Deferred"/>
			</f>
			<haxe_doc>Add handlers to be called when the Deferred object is either resolved or rejected.</haxe_doc>
		</always>
		<done public="1" set="method">
			<f a="doneCallbacks:?doneCallbacks">
				<x path="haxe.extern.EitherType">
					<x path="haxe.Function"/>
					<c path="Array"><x path="haxe.Function"/></c>
				</x>
				<x path="haxe.extern.EitherType">
					<x path="haxe.Function"/>
					<c path="Array"><x path="haxe.Function"/></c>
				</x>
				<c path="js.jquery.Deferred"/>
			</f>
			<haxe_doc>Add handlers to be called when the Deferred object is resolved.</haxe_doc>
		</done>
		<fail public="1" set="method">
			<f a="failCallbacks:?failCallbacks">
				<x path="haxe.extern.EitherType">
					<x path="haxe.Function"/>
					<c path="Array"><x path="haxe.Function"/></c>
				</x>
				<x path="haxe.extern.EitherType">
					<x path="haxe.Function"/>
					<c path="Array"><x path="haxe.Function"/></c>
				</x>
				<c path="js.jquery.Deferred"/>
			</f>
			<haxe_doc>Add handlers to be called when the Deferred object is rejected.</haxe_doc>
		</fail>
		<isRejected public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":deprecated"><e>"Deprecated since jQuery 1.7"</e></m></meta>
			<haxe_doc>Determine whether a Deferred object has been rejected.</haxe_doc>
		</isRejected>
		<isResolved public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":deprecated"><e>"Deprecated since jQuery 1.7"</e></m></meta>
			<haxe_doc>Determine whether a Deferred object has been resolved.</haxe_doc>
		</isResolved>
		<notify public="1" set="method">
			<f a="args">
				<d/>
				<c path="js.jquery.Deferred"/>
			</f>
			<haxe_doc><![CDATA[Call the progressCallbacks on a Deferred object with the given <code>args</code>.]]></haxe_doc>
		</notify>
		<notifyWith public="1" set="method">
			<f a="context:?args">
				<d/>
				<c path="Array"><d/></c>
				<c path="js.jquery.Deferred"/>
			</f>
			<haxe_doc><![CDATA[Call the progressCallbacks on a Deferred object with the given context and <code>args</code>.]]></haxe_doc>
		</notifyWith>
		<pipe public="1" set="method">
			<f a="?doneFilter:?failFilter">
				<x path="haxe.Function"/>
				<x path="haxe.Function"/>
				<t path="js.jquery.Promise"/>
			</f>
			<meta><m n=":deprecated"><e>"Deprecated since jQuery 1.8"</e></m></meta>
			<haxe_doc>Utility method to filter and/or chain Deferreds.</haxe_doc>
			<overloads><pipe public="1" set="method">
	<f a="?doneFilter:?failFilter:?progressFilter">
		<x path="haxe.Function"/>
		<x path="haxe.Function"/>
		<x path="haxe.Function"/>
		<t path="js.jquery.Promise"/>
	</f>
	<meta><m n=":deprecated"><e>"Deprecated since jQuery 1.8"</e></m></meta>
	<haxe_doc>Utility method to filter and/or chain Deferreds.</haxe_doc>
</pipe></overloads>
		</pipe>
		<progress public="1" set="method">
			<f a="progressCallbacks:?progressCallbacks">
				<x path="haxe.extern.EitherType">
					<x path="haxe.Function"/>
					<x path="haxe.extern.EitherType">
						<c path="Array"><d/></c>
						<c path="Array"><x path="haxe.Function"/></c>
					</x>
				</x>
				<x path="haxe.extern.EitherType">
					<x path="haxe.Function"/>
					<x path="haxe.extern.EitherType">
						<c path="Array"><d/></c>
						<c path="Array"><x path="haxe.Function"/></c>
					</x>
				</x>
				<c path="js.jquery.Deferred"/>
			</f>
			<haxe_doc>Add handlers to be called when the Deferred object generates progress notifications.</haxe_doc>
		</progress>
		<promise public="1" set="method">
			<f a="?target">
				<d/>
				<t path="js.jquery.Promise"/>
			</f>
			<haxe_doc>Return a Deferred's Promise object.</haxe_doc>
		</promise>
		<reject public="1" set="method">
			<f a="?args">
				<d/>
				<c path="js.jquery.Deferred"/>
			</f>
			<haxe_doc><![CDATA[Reject a Deferred object and call any failCallbacks with the given <code>args</code>.]]></haxe_doc>
		</reject>
		<rejectWith public="1" set="method">
			<f a="context:?args">
				<d/>
				<c path="Array"><d/></c>
				<c path="js.jquery.Deferred"/>
			</f>
			<haxe_doc><![CDATA[Reject a Deferred object and call any failCallbacks with the given <code>context</code> and <code>args</code>.]]></haxe_doc>
		</rejectWith>
		<resolve public="1" set="method">
			<f a="?args">
				<d/>
				<c path="js.jquery.Deferred"/>
			</f>
			<haxe_doc><![CDATA[Resolve a Deferred object and call any doneCallbacks with the given <code>args</code>.]]></haxe_doc>
		</resolve>
		<resolveWith public="1" set="method">
			<f a="context:?args">
				<d/>
				<c path="Array"><d/></c>
				<c path="js.jquery.Deferred"/>
			</f>
			<haxe_doc><![CDATA[Resolve a Deferred object and call any doneCallbacks with the given <code>context</code> and <code>args</code>.]]></haxe_doc>
		</resolveWith>
		<state public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Determine the current state of a Deferred object.</haxe_doc>
		</state>
		<then public="1" set="method">
			<f a="doneCallbacks:failCallbacks">
				<x path="haxe.extern.EitherType">
					<x path="haxe.Function"/>
					<c path="Array"><x path="haxe.Function"/></c>
				</x>
				<x path="haxe.extern.EitherType">
					<x path="haxe.Function"/>
					<c path="Array"><x path="haxe.Function"/></c>
				</x>
				<t path="js.jquery.Promise"/>
			</f>
			<haxe_doc>Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.</haxe_doc>
			<overloads>
				<then public="1" set="method">
					<f a="doneFilter:?failFilter:?progressFilter">
						<x path="haxe.Function"/>
						<x path="haxe.Function"/>
						<x path="haxe.Function"/>
						<t path="js.jquery.Promise"/>
					</f>
					<haxe_doc>Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.</haxe_doc>
				</then>
				<then public="1" set="method">
					<f a="doneCallbacks:failCallbacks:?progressCallbacks">
						<x path="haxe.extern.EitherType">
							<x path="haxe.Function"/>
							<c path="Array"><x path="haxe.Function"/></c>
						</x>
						<x path="haxe.extern.EitherType">
							<x path="haxe.Function"/>
							<c path="Array"><x path="haxe.Function"/></c>
						</x>
						<x path="haxe.extern.EitherType">
							<x path="haxe.Function"/>
							<c path="Array"><x path="haxe.Function"/></c>
						</x>
						<t path="js.jquery.Promise"/>
					</f>
					<haxe_doc>Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.</haxe_doc>
				</then>
			</overloads>
		</then>
		<new public="1" set="method">
			<f a="?beforeStart">
				<f a="">
					<c path="js.jquery.Deferred"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":selfCall"/></meta>
			<haxe_doc>A factory function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"$.Deferred"</e></m></meta>
	</class>
	<class path="js.jquery.Event" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/jquery/Event.hx" extern="1">
		<extends path="js.html.Event"/>
		<data public="1">
			<d/>
			<haxe_doc>An optional object of data passed to an event method when the current executing handler is bound.</haxe_doc>
		</data>
		<delegateTarget public="1">
			<c path="js.html.Element"/>
			<haxe_doc>The element where the currently-called jQuery event handler was attached.</haxe_doc>
		</delegateTarget>
		<isDefaultPrevented public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc><![CDATA[Returns whether <a href="/event.preventDefault/">event.preventDefault()</a> was ever called on this event object.]]></haxe_doc>
		</isDefaultPrevented>
		<isImmediatePropagationStopped public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns whether event.stopImmediatePropagation() was ever called on this event object.</haxe_doc>
		</isImmediatePropagationStopped>
		<isPropagationStopped public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc><![CDATA[Returns whether <a href="/event.stopPropagation/">event.stopPropagation()</a> was ever called on this event object.]]></haxe_doc>
		</isPropagationStopped>
		<metaKey public="1">
			<x path="Bool"/>
			<haxe_doc>Indicates whether the META key was pressed when the event fired.</haxe_doc>
		</metaKey>
		<namespace public="1">
			<c path="String"/>
			<haxe_doc>The namespace specified when the event was triggered.</haxe_doc>
		</namespace>
		<pageX public="1">
			<x path="Float"/>
			<haxe_doc>The mouse position relative to the left edge of the document.</haxe_doc>
		</pageX>
		<pageY public="1">
			<x path="Float"/>
			<haxe_doc>The mouse position relative to the top edge of the document.</haxe_doc>
		</pageY>
		<relatedTarget public="1">
			<c path="js.html.Element"/>
			<haxe_doc>The other DOM element involved in the event, if any.</haxe_doc>
		</relatedTarget>
		<result public="1">
			<d/>
			<haxe_doc><![CDATA[The last value returned by an event handler that was triggered by this event, unless the value was <code>undefined</code>.]]></haxe_doc>
		</result>
		<which public="1">
			<x path="Float"/>
			<haxe_doc>For key or mouse events, this property indicates the specific key or button that was pressed.</haxe_doc>
		</which>
		<altKey public="1"><x path="Bool"/></altKey>
		<button public="1"><x path="Int"/></button>
		<buttons public="1"><x path="Int"/></buttons>
		<char public="1"><x path="Int"/></char>
		<charCode public="1"><x path="Int"/></charCode>
		<clientX public="1"><x path="Int"/></clientX>
		<clientY public="1"><x path="Int"/></clientY>
		<ctrlKey public="1"><x path="Bool"/></ctrlKey>
		<detail public="1"><x path="Int"/></detail>
		<key public="1"><c path="String"/></key>
		<keyCode public="1"><x path="Int"/></keyCode>
		<offsetX public="1"><x path="Int"/></offsetX>
		<offsetY public="1"><x path="Int"/></offsetY>
		<screenX public="1"><x path="Int"/></screenX>
		<screenY public="1"><x path="Int"/></screenY>
		<shiftKey public="1"><x path="Bool"/></shiftKey>
		<toElement public="1"><c path="js.html.Element"/></toElement>
		<view public="1"><c path="js.html.Window"/></view>
		<meta><m n=":native"><e>"$.Event"</e></m></meta>
	</class>
	<class path="js.jquery.Helper" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/jquery/Helper.hx" extern="1">
		<J public="1" set="method" static="1"><f a="exprs">
	<d/>
	<d/>
</f></J>
		<JTHIS public="1" get="accessor" set="null" static="1"><c path="js.jquery.JQuery"/></JTHIS>
		<get_JTHIS public="1" get="inline" set="null" line="12" static="1"><f a=""><c path="js.jquery.JQuery"/></f></get_JTHIS>
		<meta><m n=":noPackageRestrict"/></meta>
	</class>
	<class path="js.jquery.JQuery" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/jquery/JQuery.hx" extern="1">
		<Callbacks public="1" set="method" static="1">
			<f a="flags">
				<c path="String"/>
				<c path="js.jquery.Callbacks"/>
			</f>
			<haxe_doc>A multi-purpose callbacks list object that provides a powerful way to manage callback lists.</haxe_doc>
		</Callbacks>
		<Deferred public="1" set="method" static="1">
			<f a="?beforeStart">
				<f a="">
					<c path="js.jquery.Deferred"/>
					<x path="Void"/>
				</f>
				<c path="js.jquery.Deferred"/>
			</f>
			<haxe_doc>A factory function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function.</haxe_doc>
		</Deferred>
		<ajax public="1" set="method" static="1">
			<f a="?settings">
				<d/>
				<c path="js.jquery.JqXHR"/>
			</f>
			<haxe_doc>Perform an asynchronous HTTP (Ajax) request.</haxe_doc>
			<overloads><ajax public="1" set="method">
	<f a="url:?settings">
		<c path="String"/>
		<d/>
		<c path="js.jquery.JqXHR"/>
	</f>
	<haxe_doc>Perform an asynchronous HTTP (Ajax) request.</haxe_doc>
</ajax></overloads>
		</ajax>
		<ajaxPrefilter public="1" set="method" static="1">
			<f a="?dataTypes:handler">
				<c path="String"/>
				<f a="::">
					<d/>
					<d/>
					<c path="js.jquery.JqXHR"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Handle custom Ajax options or modify existing options before each request is sent and before they are processed by <code>$.ajax()</code>.]]></haxe_doc>
		</ajaxPrefilter>
		<ajaxSetup public="1" set="method" static="1">
			<f a="options">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set default values for future Ajax requests. Its use is not recommended.</haxe_doc>
		</ajaxSetup>
		<ajaxTransport public="1" set="method" static="1">
			<f a="dataType:handler">
				<c path="String"/>
				<f a="::">
					<d/>
					<d/>
					<c path="js.jquery.JqXHR"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates an object that handles the actual transmission of Ajax data.</haxe_doc>
		</ajaxTransport>
		<boxModel public="1" static="1">
			<x path="Bool"/>
			<meta><m n=":deprecated"><e>"Deprecated since jQuery 1.3"</e></m></meta>
			<haxe_doc><![CDATA[States if the current page, in the user's browser, is being rendered using the <a href="http://www.w3.org/TR/REC-CSS2/box.html">W3C CSS Box Model</a>. <strong>This property was removed in jQuery 1.8</strong>. Please try to use feature detection instead.]]></haxe_doc>
		</boxModel>
		<browser public="1" static="1">
			<d/>
			<meta><m n=":deprecated"><e>"Deprecated since jQuery 1.3"</e></m></meta>
			<haxe_doc><![CDATA[Contains flags for the useragent, read from navigator.userAgent. <strong>This property was removed in jQuery 1.9</strong> and is available only through the jQuery.migrate plugin. Please try to use feature detection instead.]]></haxe_doc>
		</browser>
		<contains public="1" set="method" static="1">
			<f a="container:contained">
				<c path="js.html.Element"/>
				<c path="js.html.Element"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Check to see if a DOM element is a descendant of another DOM element.</haxe_doc>
		</contains>
		<cssHooks public="1" static="1">
			<d/>
			<haxe_doc>Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties.</haxe_doc>
		</cssHooks>
		<cssNumber public="1" static="1">
			<d/>
			<haxe_doc><![CDATA[An object containing all CSS properties that may be used without a unit. The <a href="/css/"><code>.css()</code></a> method uses this object to see if it may append <code>px</code> to unitless values.]]></haxe_doc>
		</cssNumber>
		<data public="1" set="method" static="1">
			<f a="element">
				<c path="js.html.Element"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Returns value at named data store for the element, as set by <code>jQuery.data(element, name, value)</code>, or the full data store for the element.
		OR
		Store arbitrary data associated with the specified element. Returns the value that was set.]]></haxe_doc>
			<overloads>
				<data public="1" set="method">
					<f a="element:key">
						<c path="js.html.Element"/>
						<c path="String"/>
						<d/>
					</f>
					<haxe_doc><![CDATA[Returns value at named data store for the element, as set by <code>jQuery.data(element, name, value)</code>, or the full data store for the element.
		OR
		Store arbitrary data associated with the specified element. Returns the value that was set.]]></haxe_doc>
				</data>
				<data public="1" set="method">
					<f a="element:key:value">
						<c path="js.html.Element"/>
						<c path="String"/>
						<d/>
						<d/>
					</f>
					<haxe_doc><![CDATA[Returns value at named data store for the element, as set by <code>jQuery.data(element, name, value)</code>, or the full data store for the element.
		OR
		Store arbitrary data associated with the specified element. Returns the value that was set.]]></haxe_doc>
				</data>
			</overloads>
		</data>
		<dequeue public="1" set="method" static="1">
			<f a="element:?queueName">
				<c path="js.html.Element"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Execute the next function on the queue for the matched element.</haxe_doc>
		</dequeue>
		<each public="1" set="method" static="1">
			<f a="array:callback">
				<c path="Array"><d/></c>
				<f a=":">
					<x path="Int"/>
					<d/>
					<x path="Void"/>
				</f>
				<d/>
			</f>
			<haxe_doc>A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function's arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties.</haxe_doc>
			<overloads><each public="1" set="method">
	<f a="object:callback">
		<d/>
		<f a=":">
			<c path="String"/>
			<d/>
			<x path="Void"/>
		</f>
		<d/>
	</f>
	<haxe_doc>A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function's arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties.</haxe_doc>
</each></overloads>
		</each>
		<error public="1" set="method" static="1">
			<f a="message">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Takes a string and throws an exception containing it.</haxe_doc>
		</error>
		<escapeSelector public="1" set="method" static="1">
			<f a="selector">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Escapes any character that has a special meaning in a CSS selector.</haxe_doc>
		</escapeSelector>
		<extend public="1" set="method" static="1">
			<f a="target:?object1:?objectN">
				<d/>
				<d/>
				<d/>
				<d/>
			</f>
			<haxe_doc>Merge the contents of two or more objects together into the first object.</haxe_doc>
			<overloads><extend public="1" set="method">
	<f a="?deep:target:object1:?objectN">
		<x path="Bool"/>
		<d/>
		<d/>
		<d/>
		<d/>
	</f>
	<haxe_doc>Merge the contents of two or more objects together into the first object.</haxe_doc>
</extend></overloads>
		</extend>
		<fn public="1" static="1">
			<d/>
			<haxe_doc>An alias to `jQuery.prototype`.</haxe_doc>
		</fn>
		<fx public="1" static="1"><a>
	<off>
		<x path="Bool"/>
		<haxe_doc>Globally disable all animations.</haxe_doc>
	</off>
	<interval>
		<x path="Float"/>
		<haxe_doc>The rate (in milliseconds) at which animations fire.</haxe_doc>
	</interval>
</a></fx>
		<get public="1" set="method" static="1">
			<f a="settings">
				<d/>
				<c path="js.jquery.JqXHR"/>
			</f>
			<haxe_doc>Load data from the server using a HTTP GET request.</haxe_doc>
			<overloads><get public="1" set="method">
	<f a="url:?data:?success:?dataType">
		<c path="String"/>
		<d/>
		<f a="::">
			<d/>
			<c path="String"/>
			<c path="js.jquery.JqXHR"/>
			<x path="Void"/>
		</f>
		<c path="String"/>
		<c path="js.jquery.JqXHR"/>
	</f>
	<haxe_doc>Load data from the server using a HTTP GET request.</haxe_doc>
</get></overloads>
		</get>
		<getJSON public="1" set="method" static="1">
			<f a="url:?data:?success">
				<c path="String"/>
				<d/>
				<f a="::">
					<d/>
					<c path="String"/>
					<c path="js.jquery.JqXHR"/>
					<x path="Void"/>
				</f>
				<c path="js.jquery.JqXHR"/>
			</f>
			<haxe_doc>Load JSON-encoded data from the server using a GET HTTP request.</haxe_doc>
		</getJSON>
		<getScript public="1" set="method" static="1">
			<f a="url:?success">
				<c path="String"/>
				<f a="::">
					<c path="String"/>
					<c path="String"/>
					<c path="js.jquery.JqXHR"/>
					<x path="Void"/>
				</f>
				<c path="js.jquery.JqXHR"/>
			</f>
			<haxe_doc>Load a JavaScript file from the server using a GET HTTP request, then execute it.</haxe_doc>
		</getScript>
		<globalEval public="1" set="method" static="1">
			<f a="code">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Execute some JavaScript code globally.</haxe_doc>
		</globalEval>
		<grep public="1" set="method" static="1">
			<f a="array:_function:?invert">
				<x path="haxe.extern.EitherType">
					<c path="Array"><d/></c>
					<c path="js.html.NodeList"/>
				</x>
				<f a=":">
					<d/>
					<x path="Int"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Finds the elements of an array which satisfy a filter function. The original array is not affected.</haxe_doc>
		</grep>
		<hasData public="1" set="method" static="1">
			<f a="element">
				<c path="js.html.Element"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determine whether an element has any jQuery data associated with it.</haxe_doc>
		</hasData>
		<holdReady public="1" set="method" static="1">
			<f a="hold">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Holds or releases the execution of jQuery's ready event.</haxe_doc>
		</holdReady>
		<htmlPrefilter public="1" set="method" static="1">
			<f a="html">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Modify and filter HTML strings passed through <a href="/category/manipulation/">jQuery manipulation methods</a>.]]></haxe_doc>
		</htmlPrefilter>
		<inArray public="1" set="method" static="1">
			<f a="value:array:?fromIndex">
				<d/>
				<c path="Array"><d/></c>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Search for a specified value within an array and return its index (or -1 if not found).</haxe_doc>
		</inArray>
		<isArray public="1" set="method" static="1">
			<f a="obj">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determine whether the argument is an array.</haxe_doc>
		</isArray>
		<isEmptyObject public="1" set="method" static="1">
			<f a="object">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Check to see if an object is empty (contains no enumerable properties).</haxe_doc>
		</isEmptyObject>
		<isFunction public="1" set="method" static="1">
			<f a="obj">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determine if the argument passed is a JavaScript function object.</haxe_doc>
		</isFunction>
		<isNumeric public="1" set="method" static="1">
			<f a="value">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether its argument represents a JavaScript number.</haxe_doc>
		</isNumeric>
		<isPlainObject public="1" set="method" static="1">
			<f a="object">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Check to see if an object is a plain object (created using "{}" or "new Object").</haxe_doc>
		</isPlainObject>
		<isWindow public="1" set="method" static="1">
			<f a="obj">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determine whether the argument is a window.</haxe_doc>
		</isWindow>
		<isXMLDoc public="1" set="method" static="1">
			<f a="node">
				<c path="js.html.Element"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Check to see if a DOM node is within an XML document (or is an XML document).</haxe_doc>
		</isXMLDoc>
		<makeArray public="1" set="method" static="1">
			<f a="obj">
				<d/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Convert an array-like object into a true JavaScript array.</haxe_doc>
		</makeArray>
		<map public="1" set="method" static="1">
			<f a="array:callback">
				<c path="Array"><d/></c>
				<f a=":">
					<d/>
					<x path="Int"/>
					<d/>
				</f>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Translate all items in an array or object to new array of items.</haxe_doc>
			<overloads><map public="1" set="method">
	<f a="object:callback">
		<d/>
		<f a=":">
			<d/>
			<c path="String"/>
			<d/>
		</f>
		<c path="Array"><d/></c>
	</f>
	<haxe_doc>Translate all items in an array or object to new array of items.</haxe_doc>
</map></overloads>
		</map>
		<merge public="1" set="method" static="1">
			<f a="first:second">
				<x path="haxe.extern.EitherType">
					<c path="Array"><d/></c>
					<c path="js.html.NodeList"/>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="Array"><d/></c>
					<c path="js.html.NodeList"/>
				</x>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Merge the contents of two arrays together into the first array.</haxe_doc>
		</merge>
		<noConflict public="1" set="method" static="1">
			<f a="?removeAll">
				<x path="Bool"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Relinquish jQuery's control of the <code>$</code> variable.]]></haxe_doc>
		</noConflict>
		<noop public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>An empty function.</haxe_doc>
		</noop>
		<now public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Return a number representing the current time.</haxe_doc>
		</now>
		<param public="1" set="method" static="1">
			<f a="obj">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Create a serialized representation of an array, a plain object, or a jQuery object suitable for use in a URL query string or Ajax request. In case a jQuery object is passed, it should contain input elements with name/value properties.</haxe_doc>
			<overloads><param public="1" set="method">
	<f a="obj:traditional">
		<d/>
		<x path="Bool"/>
		<c path="String"/>
	</f>
	<haxe_doc>Create a serialized representation of an array, a plain object, or a jQuery object suitable for use in a URL query string or Ajax request. In case a jQuery object is passed, it should contain input elements with name/value properties.</haxe_doc>
</param></overloads>
		</param>
		<parseHTML public="1" set="method" static="1">
			<f a="data:?context:?keepScripts">
				<c path="String"/>
				<c path="js.html.Element"/>
				<x path="Bool"/>
				<c path="Array"><c path="js.html.Element"/></c>
			</f>
			<haxe_doc>Parses a string into an array of DOM nodes.</haxe_doc>
		</parseHTML>
		<parseJSON public="1" set="method" static="1">
			<f a="json">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":deprecated"><e>"Deprecated since jQuery 3.0"</e></m></meta>
			<haxe_doc>Takes a well-formed JSON string and returns the resulting JavaScript value.</haxe_doc>
		</parseJSON>
		<parseXML public="1" set="method" static="1">
			<f a="data">
				<c path="String"/>
				<c path="js.html.Document"/>
			</f>
			<haxe_doc>Parses a string into an XML document.</haxe_doc>
		</parseXML>
		<post public="1" set="method" static="1">
			<f a="settings">
				<d/>
				<c path="js.jquery.JqXHR"/>
			</f>
			<haxe_doc>Load data from the server using a HTTP POST request.</haxe_doc>
			<overloads><post public="1" set="method">
	<f a="url:?data:?success:?dataType">
		<c path="String"/>
		<d/>
		<f a="::">
			<d/>
			<c path="String"/>
			<c path="js.jquery.JqXHR"/>
			<x path="Void"/>
		</f>
		<c path="String"/>
		<c path="js.jquery.JqXHR"/>
	</f>
	<haxe_doc>Load data from the server using a HTTP POST request.</haxe_doc>
</post></overloads>
		</post>
		<proxy public="1" set="method" static="1">
			<f a="_function:context">
				<x path="haxe.Function"/>
				<d/>
				<x path="haxe.Function"/>
			</f>
			<haxe_doc>Takes a function and returns a new one that will always have a particular context.</haxe_doc>
			<overloads>
				<proxy public="1" set="method">
					<f a="context:name">
						<d/>
						<c path="String"/>
						<x path="haxe.Function"/>
					</f>
					<haxe_doc>Takes a function and returns a new one that will always have a particular context.</haxe_doc>
				</proxy>
				<proxy public="1" set="method">
					<f a="_function:context:?additionalArguments">
						<x path="haxe.Function"/>
						<d/>
						<d/>
						<x path="haxe.Function"/>
					</f>
					<haxe_doc>Takes a function and returns a new one that will always have a particular context.</haxe_doc>
				</proxy>
				<proxy public="1" set="method">
					<f a="context:name:?additionalArguments">
						<d/>
						<c path="String"/>
						<d/>
						<x path="haxe.Function"/>
					</f>
					<haxe_doc>Takes a function and returns a new one that will always have a particular context.</haxe_doc>
				</proxy>
			</overloads>
		</proxy>
		<queue public="1" set="method" static="1">
			<f a="element:?queueName">
				<c path="js.html.Element"/>
				<c path="String"/>
				<c path="Array"><f a=""><x path="Void"/></f></c>
			</f>
			<haxe_doc>Show the queue of functions to be executed on the matched element.
		OR
		Manipulate the queue of functions to be executed on the matched element.</haxe_doc>
			<overloads>
				<queue public="1" set="method">
					<f a="element:queueName:newQueue">
						<c path="js.html.Element"/>
						<c path="String"/>
						<c path="Array"><f a=""><x path="Void"/></f></c>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Show the queue of functions to be executed on the matched element.
		OR
		Manipulate the queue of functions to be executed on the matched element.</haxe_doc>
				</queue>
				<queue public="1" set="method">
					<f a="element:queueName:callback">
						<c path="js.html.Element"/>
						<c path="String"/>
						<x path="haxe.Function"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Show the queue of functions to be executed on the matched element.
		OR
		Manipulate the queue of functions to be executed on the matched element.</haxe_doc>
				</queue>
			</overloads>
		</queue>
		<readyException public="1" set="dynamic" static="1">
			<f a="error">
				<c path="js.Error"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Handles errors thrown synchronously in functions wrapped in <code>jQuery()</code>.]]></haxe_doc>
		</readyException>
		<removeData public="1" set="method" static="1">
			<f a="element:?name">
				<c path="js.html.Element"/>
				<c path="String"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Remove a previously-stored piece of data.</haxe_doc>
		</removeData>
		<speed public="1" set="method" static="1">
			<f a="settings">
				<d/>
				<d/>
			</f>
			<haxe_doc>Creates an object containing a set of properties ready to be used in the definition of custom animations.</haxe_doc>
			<overloads>
				<speed public="1" set="method">
					<f a="?duration:?settings">
						<x path="haxe.extern.EitherType">
							<x path="Float"/>
							<c path="String"/>
						</x>
						<d/>
						<d/>
					</f>
					<haxe_doc>Creates an object containing a set of properties ready to be used in the definition of custom animations.</haxe_doc>
				</speed>
				<speed public="1" set="method">
					<f a="?duration:?easing:?complete">
						<x path="haxe.extern.EitherType">
							<x path="Float"/>
							<c path="String"/>
						</x>
						<c path="String"/>
						<x path="haxe.Function"/>
						<d/>
					</f>
					<haxe_doc>Creates an object containing a set of properties ready to be used in the definition of custom animations.</haxe_doc>
				</speed>
			</overloads>
		</speed>
		<sub public="1" set="method" static="1">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<meta><m n=":deprecated"><e>"Deprecated since jQuery 1.7"</e></m></meta>
			<haxe_doc>Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object.</haxe_doc>
		</sub>
		<support public="1" static="1">
			<d/>
			<meta><m n=":deprecated"><e>"Deprecated since jQuery 1.9"</e></m></meta>
			<haxe_doc><![CDATA[A collection of properties that represent the presence of different browser features or bugs. Intended for jQuery's internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance. For your own project's feature-detection needs, we strongly recommend the use of an external library such as <a href="http://modernizr.com">Modernizr</a> instead of dependency on properties in <code>jQuery.support</code>.]]></haxe_doc>
		</support>
		<trim public="1" set="method" static="1">
			<f a="str">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Remove the whitespace from the beginning and end of a string.</haxe_doc>
		</trim>
		<type public="1" set="method" static="1">
			<f a="obj">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Determine the internal JavaScript [[Class]] of an object.</haxe_doc>
		</type>
		<unique public="1" set="method" static="1">
			<f a="array">
				<c path="Array"><c path="js.html.Element"/></c>
				<c path="Array"><c path="js.html.Element"/></c>
			</f>
			<meta><m n=":deprecated"><e>"Deprecated since jQuery 3.0"</e></m></meta>
			<haxe_doc>Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers.</haxe_doc>
		</unique>
		<uniqueSort public="1" set="method" static="1">
			<f a="array">
				<c path="Array"><c path="js.html.Element"/></c>
				<c path="Array"><c path="js.html.Element"/></c>
			</f>
			<haxe_doc>Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers.</haxe_doc>
		</uniqueSort>
		<when public="1" set="method" static="1">
			<f a="deferreds">
				<x path="haxe.extern.Rest"><c path="js.jquery.Deferred"/></x>
				<t path="js.jquery.Promise"/>
			</f>
			<haxe_doc><![CDATA[Provides a way to execute callback functions based on zero or more objects, usually <a href="/category/deferred-object/">Deferred</a> objects that represent asynchronous events.]]></haxe_doc>
		</when>
		<add public="1" set="method">
			<f a="selector">
				<c path="String"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Create a new jQuery object with elements added to the set of matched elements.</haxe_doc>
			<overloads>
				<add public="1" set="method">
					<f a="elements">
						<c path="js.html.Element"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Create a new jQuery object with elements added to the set of matched elements.</haxe_doc>
				</add>
				<add public="1" set="method">
					<f a="html">
						<c path="String"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Create a new jQuery object with elements added to the set of matched elements.</haxe_doc>
				</add>
				<add public="1" set="method">
					<f a="selection">
						<c path="js.jquery.JQuery"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Create a new jQuery object with elements added to the set of matched elements.</haxe_doc>
				</add>
				<add public="1" set="method">
					<f a="selector:context">
						<c path="String"/>
						<c path="js.html.Element"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Create a new jQuery object with elements added to the set of matched elements.</haxe_doc>
				</add>
			</overloads>
		</add>
		<addBack public="1" set="method">
			<f a="?selector">
				<c path="String"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Add the previous set of elements on the stack to the current set, optionally filtered by a selector.</haxe_doc>
		</addBack>
		<addClass public="1" set="method">
			<f a="className">
				<c path="String"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Adds the specified class(es) to each element in the set of matched elements.</haxe_doc>
			<overloads><addClass public="1" set="method">
	<f a="_function">
		<f a=":">
			<x path="Int"/>
			<c path="String"/>
			<c path="String"/>
		</f>
		<c path="js.jquery.JQuery"/>
	</f>
	<haxe_doc>Adds the specified class(es) to each element in the set of matched elements.</haxe_doc>
</addClass></overloads>
		</addClass>
		<after public="1" set="method">
			<f a="_function">
				<f a="">
					<x path="Int"/>
					<x path="haxe.extern.EitherType">
						<c path="js.html.Element"/>
						<x path="haxe.extern.EitherType">
							<c path="String"/>
							<c path="js.jquery.JQuery"/>
						</x>
					</x>
				</f>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Insert content, specified by the parameter, after each element in the set of matched elements.</haxe_doc>
			<overloads>
				<after public="1" set="method">
					<f a="_function">
						<f a=":">
							<x path="Int"/>
							<c path="String"/>
							<x path="haxe.extern.EitherType">
								<c path="js.html.Element"/>
								<x path="haxe.extern.EitherType">
									<c path="String"/>
									<c path="js.jquery.JQuery"/>
								</x>
							</x>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Insert content, specified by the parameter, after each element in the set of matched elements.</haxe_doc>
				</after>
				<after public="1" set="method">
					<f a="content:?content">
						<x path="haxe.extern.EitherType">
							<c path="Array"><c path="String"/></c>
							<x path="haxe.extern.EitherType">
								<c path="Array"><c path="js.jquery.JQuery"/></c>
								<x path="haxe.extern.EitherType">
									<c path="js.html.Element"/>
									<x path="haxe.extern.EitherType">
										<c path="Array"><c path="js.html.Element"/></c>
										<x path="haxe.extern.EitherType">
											<c path="js.html.NodeList"/>
											<x path="haxe.extern.EitherType">
												<c path="String"/>
												<c path="js.jquery.JQuery"/>
											</x>
										</x>
									</x>
								</x>
							</x>
						</x>
						<x path="haxe.extern.EitherType">
							<c path="Array"><c path="String"/></c>
							<x path="haxe.extern.EitherType">
								<c path="Array"><c path="js.jquery.JQuery"/></c>
								<x path="haxe.extern.EitherType">
									<c path="js.html.Element"/>
									<x path="haxe.extern.EitherType">
										<c path="Array"><c path="js.html.Element"/></c>
										<x path="haxe.extern.EitherType">
											<c path="js.html.NodeList"/>
											<x path="haxe.extern.EitherType">
												<c path="String"/>
												<c path="js.jquery.JQuery"/>
											</x>
										</x>
									</x>
								</x>
							</x>
						</x>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Insert content, specified by the parameter, after each element in the set of matched elements.</haxe_doc>
				</after>
			</overloads>
		</after>
		<ajaxComplete public="1" set="method">
			<f a="handler">
				<f a="::">
					<c path="js.jquery.Event"/>
					<c path="js.jquery.JqXHR"/>
					<d/>
					<x path="Void"/>
				</f>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc><![CDATA[Register a handler to be called when Ajax requests complete. This is an <a href="/Ajax_Events/">AjaxEvent</a>.]]></haxe_doc>
		</ajaxComplete>
		<ajaxError public="1" set="method">
			<f a="handler">
				<f a=":::">
					<c path="js.jquery.Event"/>
					<c path="js.jquery.JqXHR"/>
					<d/>
					<c path="String"/>
					<x path="Void"/>
				</f>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc><![CDATA[Register a handler to be called when Ajax requests complete with an error. This is an <a href="/Ajax_Events/">Ajax Event</a>.]]></haxe_doc>
		</ajaxError>
		<ajaxSend public="1" set="method">
			<f a="handler">
				<f a="::">
					<c path="js.jquery.Event"/>
					<c path="js.jquery.JqXHR"/>
					<d/>
					<x path="Void"/>
				</f>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc><![CDATA[Attach a function to be executed before an Ajax request is sent. This is an <a href="/Ajax_Events/">Ajax Event</a>.]]></haxe_doc>
		</ajaxSend>
		<ajaxStart public="1" set="method">
			<f a="handler">
				<x path="haxe.Function"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc><![CDATA[Register a handler to be called when the first Ajax request begins. This is an <a href="/Ajax_Events/">Ajax Event</a>.]]></haxe_doc>
		</ajaxStart>
		<ajaxStop public="1" set="method">
			<f a="handler">
				<x path="haxe.Function"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc><![CDATA[Register a handler to be called when all Ajax requests have completed. This is an <a href="/Ajax_Events/">Ajax Event</a>.]]></haxe_doc>
		</ajaxStop>
		<ajaxSuccess public="1" set="method">
			<f a="handler">
				<f a=":::">
					<c path="js.jquery.Event"/>
					<c path="js.jquery.JqXHR"/>
					<d/>
					<d/>
					<x path="Void"/>
				</f>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc><![CDATA[Attach a function to be executed whenever an Ajax request completes successfully. This is an <a href="/Ajax_Events/">Ajax Event</a>.]]></haxe_doc>
		</ajaxSuccess>
		<andSelf public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<meta><m n=":deprecated"><e>"Deprecated since jQuery 1.8"</e></m></meta>
			<haxe_doc>Add the previous set of elements on the stack to the current set.</haxe_doc>
		</andSelf>
		<animate public="1" set="method">
			<f a="properties:options">
				<d/>
				<d/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Perform a custom animation of a set of CSS properties.</haxe_doc>
			<overloads><animate public="1" set="method">
	<f a="properties:?duration:?easing:?complete">
		<d/>
		<x path="haxe.extern.EitherType">
			<x path="Float"/>
			<c path="String"/>
		</x>
		<c path="String"/>
		<x path="haxe.Function"/>
		<c path="js.jquery.JQuery"/>
	</f>
	<haxe_doc>Perform a custom animation of a set of CSS properties.</haxe_doc>
</animate></overloads>
		</animate>
		<append public="1" set="method">
			<f a="_function">
				<f a=":">
					<x path="Int"/>
					<c path="String"/>
					<x path="haxe.extern.EitherType">
						<c path="js.html.Element"/>
						<x path="haxe.extern.EitherType">
							<c path="String"/>
							<c path="js.jquery.JQuery"/>
						</x>
					</x>
				</f>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Insert content, specified by the parameter, to the end of each element in the set of matched elements.</haxe_doc>
			<overloads><append public="1" set="method">
	<f a="content:?content">
		<x path="haxe.extern.EitherType">
			<c path="Array"><c path="String"/></c>
			<x path="haxe.extern.EitherType">
				<c path="Array"><c path="js.jquery.JQuery"/></c>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Element"/>
					<x path="haxe.extern.EitherType">
						<c path="Array"><c path="js.html.Element"/></c>
						<x path="haxe.extern.EitherType">
							<c path="js.html.NodeList"/>
							<x path="haxe.extern.EitherType">
								<c path="String"/>
								<c path="js.jquery.JQuery"/>
							</x>
						</x>
					</x>
				</x>
			</x>
		</x>
		<x path="haxe.extern.EitherType">
			<c path="Array"><c path="String"/></c>
			<x path="haxe.extern.EitherType">
				<c path="Array"><c path="js.jquery.JQuery"/></c>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Element"/>
					<x path="haxe.extern.EitherType">
						<c path="Array"><c path="js.html.Element"/></c>
						<x path="haxe.extern.EitherType">
							<c path="js.html.NodeList"/>
							<x path="haxe.extern.EitherType">
								<c path="String"/>
								<c path="js.jquery.JQuery"/>
							</x>
						</x>
					</x>
				</x>
			</x>
		</x>
		<c path="js.jquery.JQuery"/>
	</f>
	<haxe_doc>Insert content, specified by the parameter, to the end of each element in the set of matched elements.</haxe_doc>
</append></overloads>
		</append>
		<appendTo public="1" set="method">
			<f a="target">
				<x path="haxe.extern.EitherType">
					<c path="js.html.Element"/>
					<x path="haxe.extern.EitherType">
						<c path="Array"><c path="js.html.Element"/></c>
						<x path="haxe.extern.EitherType">
							<c path="String"/>
							<c path="js.jquery.JQuery"/>
						</x>
					</x>
				</x>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Insert every element in the set of matched elements to the end of the target.</haxe_doc>
		</appendTo>
		<attr public="1" set="method">
			<f a="attributeName">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Set one or more attributes for the set of matched elements.
		OR
		Get the value of an attribute for the first element in the set of matched elements.</haxe_doc>
			<overloads>
				<attr public="1" set="method">
					<f a="attributes">
						<d/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Set one or more attributes for the set of matched elements.
		OR
		Get the value of an attribute for the first element in the set of matched elements.</haxe_doc>
				</attr>
				<attr public="1" set="method">
					<f a="attributeName:value">
						<c path="String"/>
						<x path="haxe.extern.EitherType">
							<x path="Float"/>
							<c path="String"/>
						</x>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Set one or more attributes for the set of matched elements.
		OR
		Get the value of an attribute for the first element in the set of matched elements.</haxe_doc>
				</attr>
				<attr public="1" set="method">
					<f a="attributeName:_function">
						<c path="String"/>
						<f a=":">
							<x path="Int"/>
							<c path="String"/>
							<x path="haxe.extern.EitherType">
								<x path="Float"/>
								<c path="String"/>
							</x>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Set one or more attributes for the set of matched elements.
		OR
		Get the value of an attribute for the first element in the set of matched elements.</haxe_doc>
				</attr>
			</overloads>
		</attr>
		<before public="1" set="method">
			<f a="_function">
				<f a="">
					<x path="Int"/>
					<x path="haxe.extern.EitherType">
						<c path="js.html.Element"/>
						<x path="haxe.extern.EitherType">
							<c path="String"/>
							<c path="js.jquery.JQuery"/>
						</x>
					</x>
				</f>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Insert content, specified by the parameter, before each element in the set of matched elements.</haxe_doc>
			<overloads>
				<before public="1" set="method">
					<f a="_function">
						<f a=":">
							<x path="Int"/>
							<c path="String"/>
							<x path="haxe.extern.EitherType">
								<c path="js.html.Element"/>
								<x path="haxe.extern.EitherType">
									<c path="String"/>
									<c path="js.jquery.JQuery"/>
								</x>
							</x>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Insert content, specified by the parameter, before each element in the set of matched elements.</haxe_doc>
				</before>
				<before public="1" set="method">
					<f a="content:?content">
						<x path="haxe.extern.EitherType">
							<c path="Array"><c path="String"/></c>
							<x path="haxe.extern.EitherType">
								<c path="Array"><c path="js.jquery.JQuery"/></c>
								<x path="haxe.extern.EitherType">
									<c path="js.html.Element"/>
									<x path="haxe.extern.EitherType">
										<c path="Array"><c path="js.html.Element"/></c>
										<x path="haxe.extern.EitherType">
											<c path="js.html.NodeList"/>
											<x path="haxe.extern.EitherType">
												<c path="String"/>
												<c path="js.jquery.JQuery"/>
											</x>
										</x>
									</x>
								</x>
							</x>
						</x>
						<x path="haxe.extern.EitherType">
							<c path="Array"><c path="String"/></c>
							<x path="haxe.extern.EitherType">
								<c path="Array"><c path="js.jquery.JQuery"/></c>
								<x path="haxe.extern.EitherType">
									<c path="js.html.Element"/>
									<x path="haxe.extern.EitherType">
										<c path="Array"><c path="js.html.Element"/></c>
										<x path="haxe.extern.EitherType">
											<c path="js.html.NodeList"/>
											<x path="haxe.extern.EitherType">
												<c path="String"/>
												<c path="js.jquery.JQuery"/>
											</x>
										</x>
									</x>
								</x>
							</x>
						</x>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Insert content, specified by the parameter, before each element in the set of matched elements.</haxe_doc>
				</before>
			</overloads>
		</before>
		<bind public="1" set="method">
			<f a="events">
				<d/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Attach a handler to an event for the elements.</haxe_doc>
			<overloads>
				<bind public="1" set="method">
					<f a="eventType:?eventData:handler">
						<c path="String"/>
						<d/>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Attach a handler to an event for the elements.</haxe_doc>
				</bind>
				<bind public="1" set="method">
					<f a="eventType:?eventData:?preventBubble">
						<c path="String"/>
						<d/>
						<x path="Bool"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Attach a handler to an event for the elements.</haxe_doc>
				</bind>
			</overloads>
		</bind>
		<blur public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>Bind an event handler to the "blur" JavaScript event, or trigger that event on an element.</haxe_doc>
			<overloads>
				<blur public="1" set="method">
					<f a="handler">
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "blur" JavaScript event, or trigger that event on an element.</haxe_doc>
				</blur>
				<blur public="1" set="method">
					<f a="?eventData:handler">
						<d/>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "blur" JavaScript event, or trigger that event on an element.</haxe_doc>
				</blur>
			</overloads>
		</blur>
		<change public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>Bind an event handler to the "change" JavaScript event, or trigger that event on an element.</haxe_doc>
			<overloads>
				<change public="1" set="method">
					<f a="handler">
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "change" JavaScript event, or trigger that event on an element.</haxe_doc>
				</change>
				<change public="1" set="method">
					<f a="?eventData:handler">
						<d/>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "change" JavaScript event, or trigger that event on an element.</haxe_doc>
				</change>
			</overloads>
		</change>
		<children public="1" set="method">
			<f a="?selector">
				<c path="String"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Get the children of each element in the set of matched elements, optionally filtered by a selector.</haxe_doc>
		</children>
		<clearQueue public="1" set="method">
			<f a="?queueName">
				<c path="String"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Remove from the queue all items that have not yet been run.</haxe_doc>
		</clearQueue>
		<click public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>Bind an event handler to the "click" JavaScript event, or trigger that event on an element.</haxe_doc>
			<overloads>
				<click public="1" set="method">
					<f a="handler">
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "click" JavaScript event, or trigger that event on an element.</haxe_doc>
				</click>
				<click public="1" set="method">
					<f a="?eventData:handler">
						<d/>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "click" JavaScript event, or trigger that event on an element.</haxe_doc>
				</click>
			</overloads>
		</click>
		<clone public="1" set="method">
			<f a="?withDataAndEvents">
				<x path="Bool"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Create a deep copy of the set of matched elements.</haxe_doc>
			<overloads><clone public="1" set="method">
	<f a="?withDataAndEvents:?deepWithDataAndEvents">
		<x path="Bool"/>
		<x path="Bool"/>
		<c path="js.jquery.JQuery"/>
	</f>
	<haxe_doc>Create a deep copy of the set of matched elements.</haxe_doc>
</clone></overloads>
		</clone>
		<closest public="1" set="method">
			<f a="selector">
				<c path="String"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
		OR
		Get an array of all the elements and selectors matched against the current element up through the DOM tree.</haxe_doc>
			<overloads>
				<closest public="1" set="method">
					<f a="selection">
						<c path="js.jquery.JQuery"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
		OR
		Get an array of all the elements and selectors matched against the current element up through the DOM tree.</haxe_doc>
				</closest>
				<closest public="1" set="method">
					<f a="element">
						<c path="js.html.Element"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
		OR
		Get an array of all the elements and selectors matched against the current element up through the DOM tree.</haxe_doc>
				</closest>
				<closest public="1" set="method">
					<f a="selector:?context">
						<c path="String"/>
						<c path="js.html.Element"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
		OR
		Get an array of all the elements and selectors matched against the current element up through the DOM tree.</haxe_doc>
				</closest>
				<closest public="1" set="method">
					<f a="selectors:?context">
						<x path="haxe.extern.EitherType">
							<c path="Array"><c path="String"/></c>
							<x path="haxe.extern.EitherType">
								<c path="String"/>
								<c path="js.jquery.JQuery"/>
							</x>
						</x>
						<c path="js.html.Element"/>
						<c path="Array"><d/></c>
					</f>
					<haxe_doc>For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
		OR
		Get an array of all the elements and selectors matched against the current element up through the DOM tree.</haxe_doc>
				</closest>
			</overloads>
		</closest>
		<contents public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>Get the children of each element in the set of matched elements, including text and comment nodes.</haxe_doc>
		</contents>
		<context public="1">
			<c path="js.html.Element"/>
			<meta><m n=":deprecated"><e>"Deprecated since jQuery 1.10"</e></m></meta>
			<haxe_doc><![CDATA[The DOM node context originally passed to <code>jQuery()</code>; if none was passed then context will likely be the document.]]></haxe_doc>
		</context>
		<contextmenu public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>Bind an event handler to the "contextmenu" JavaScript event, or trigger that event on an element.</haxe_doc>
			<overloads>
				<contextmenu public="1" set="method">
					<f a="handler">
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "contextmenu" JavaScript event, or trigger that event on an element.</haxe_doc>
				</contextmenu>
				<contextmenu public="1" set="method">
					<f a="?eventData:handler">
						<d/>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "contextmenu" JavaScript event, or trigger that event on an element.</haxe_doc>
				</contextmenu>
			</overloads>
		</contextmenu>
		<css public="1" set="method">
			<f a="propertyName">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Set one or more CSS properties for the set of matched elements.
		OR
		Get the computed style properties for the first element in the set of matched elements.</haxe_doc>
			<overloads>
				<css public="1" set="method">
					<f a="propertyNames">
						<c path="Array"><c path="String"/></c>
						<c path="String"/>
					</f>
					<haxe_doc>Set one or more CSS properties for the set of matched elements.
		OR
		Get the computed style properties for the first element in the set of matched elements.</haxe_doc>
				</css>
				<css public="1" set="method">
					<f a="properties">
						<d/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Set one or more CSS properties for the set of matched elements.
		OR
		Get the computed style properties for the first element in the set of matched elements.</haxe_doc>
				</css>
				<css public="1" set="method">
					<f a="propertyName:value">
						<c path="String"/>
						<x path="haxe.extern.EitherType">
							<x path="Float"/>
							<c path="String"/>
						</x>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Set one or more CSS properties for the set of matched elements.
		OR
		Get the computed style properties for the first element in the set of matched elements.</haxe_doc>
				</css>
				<css public="1" set="method">
					<f a="propertyName:_function">
						<c path="String"/>
						<f a=":">
							<x path="Int"/>
							<c path="String"/>
							<x path="haxe.extern.EitherType">
								<x path="Float"/>
								<c path="String"/>
							</x>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Set one or more CSS properties for the set of matched elements.
		OR
		Get the computed style properties for the first element in the set of matched elements.</haxe_doc>
				</css>
			</overloads>
		</css>
		<data public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>Return the value at the named data store for the first element in the jQuery collection, as set by data(name, value) or by an HTML5 data-* attribute.
		OR
		Store arbitrary data associated with the matched elements.</haxe_doc>
			<overloads>
				<data public="1" set="method">
					<f a="key">
						<c path="String"/>
						<d/>
					</f>
					<haxe_doc>Return the value at the named data store for the first element in the jQuery collection, as set by data(name, value) or by an HTML5 data-* attribute.
		OR
		Store arbitrary data associated with the matched elements.</haxe_doc>
				</data>
				<data public="1" set="method">
					<f a="obj">
						<d/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Return the value at the named data store for the first element in the jQuery collection, as set by data(name, value) or by an HTML5 data-* attribute.
		OR
		Store arbitrary data associated with the matched elements.</haxe_doc>
				</data>
				<data public="1" set="method">
					<f a="key:value">
						<c path="String"/>
						<d/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Return the value at the named data store for the first element in the jQuery collection, as set by data(name, value) or by an HTML5 data-* attribute.
		OR
		Store arbitrary data associated with the matched elements.</haxe_doc>
				</data>
			</overloads>
		</data>
		<dblclick public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>Bind an event handler to the "dblclick" JavaScript event, or trigger that event on an element.</haxe_doc>
			<overloads>
				<dblclick public="1" set="method">
					<f a="handler">
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "dblclick" JavaScript event, or trigger that event on an element.</haxe_doc>
				</dblclick>
				<dblclick public="1" set="method">
					<f a="?eventData:handler">
						<d/>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "dblclick" JavaScript event, or trigger that event on an element.</haxe_doc>
				</dblclick>
			</overloads>
		</dblclick>
		<delay public="1" set="method">
			<f a="duration:?queueName">
				<x path="Int"/>
				<c path="String"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Set a timer to delay execution of subsequent items in the queue.</haxe_doc>
		</delay>
		<delegate public="1" set="method">
			<f a="selector:events">
				<c path="String"/>
				<d/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements.</haxe_doc>
			<overloads>
				<delegate public="1" set="method">
					<f a="selector:eventType:handler">
						<c path="String"/>
						<c path="String"/>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements.</haxe_doc>
				</delegate>
				<delegate public="1" set="method">
					<f a="selector:eventType:eventData:handler">
						<c path="String"/>
						<c path="String"/>
						<d/>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements.</haxe_doc>
				</delegate>
			</overloads>
		</delegate>
		<dequeue public="1" set="method">
			<f a="?queueName">
				<c path="String"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Execute the next function on the queue for the matched elements.</haxe_doc>
		</dequeue>
		<detach public="1" set="method">
			<f a="?selector">
				<c path="String"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Remove the set of matched elements from the DOM.</haxe_doc>
		</detach>
		<die public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<meta><m n=":deprecated"><e>"Deprecated since jQuery 1.7"</e></m></meta>
			<haxe_doc><![CDATA[Remove event handlers previously attached using <code>.live()</code> from the elements.]]></haxe_doc>
			<overloads>
				<die public="1" set="method">
					<f a="events">
						<d/>
						<c path="js.jquery.JQuery"/>
					</f>
					<meta><m n=":deprecated"><e>"Deprecated since jQuery 1.7"</e></m></meta>
					<haxe_doc><![CDATA[Remove event handlers previously attached using <code>.live()</code> from the elements.]]></haxe_doc>
				</die>
				<die public="1" set="method">
					<f a="eventType:?handler">
						<c path="String"/>
						<c path="String"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<meta><m n=":deprecated"><e>"Deprecated since jQuery 1.7"</e></m></meta>
					<haxe_doc><![CDATA[Remove event handlers previously attached using <code>.live()</code> from the elements.]]></haxe_doc>
				</die>
			</overloads>
		</die>
		<each public="1" set="method">
			<f a="_function">
				<f a=":">
					<x path="Int"/>
					<c path="js.html.Element"/>
					<x path="Void"/>
				</f>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Iterate over a jQuery object, executing a function for each matched element.</haxe_doc>
		</each>
		<empty public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>Remove all child nodes of the set of matched elements from the DOM.</haxe_doc>
		</empty>
		<end public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>End the most recent filtering operation in the current chain and return the set of matched elements to its previous state.</haxe_doc>
		</end>
		<eq public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Reduce the set of matched elements to the one at the specified index.</haxe_doc>
			<overloads><eq public="1" set="method">
	<f a="indexFromEnd">
		<x path="Int"/>
		<c path="js.jquery.JQuery"/>
	</f>
	<haxe_doc>Reduce the set of matched elements to the one at the specified index.</haxe_doc>
</eq></overloads>
		</eq>
		<error public="1" set="method">
			<f a="handler">
				<f a="">
					<c path="js.jquery.Event"/>
					<x path="Void"/>
				</f>
				<c path="js.jquery.JQuery"/>
			</f>
			<meta><m n=":deprecated"><e>"Deprecated since jQuery 1.8"</e></m></meta>
			<haxe_doc>Bind an event handler to the "error" JavaScript event.</haxe_doc>
			<overloads><error public="1" set="method">
	<f a="?eventData:handler">
		<d/>
		<f a="">
			<c path="js.jquery.Event"/>
			<x path="Void"/>
		</f>
		<c path="js.jquery.JQuery"/>
	</f>
	<meta><m n=":deprecated"><e>"Deprecated since jQuery 1.8"</e></m></meta>
	<haxe_doc>Bind an event handler to the "error" JavaScript event.</haxe_doc>
</error></overloads>
		</error>
		<fadeIn public="1" set="method">
			<f a="options">
				<d/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Display the matched elements by fading them to opaque.</haxe_doc>
			<overloads>
				<fadeIn public="1" set="method">
					<f a="?duration:?complete">
						<x path="haxe.extern.EitherType">
							<x path="Float"/>
							<c path="String"/>
						</x>
						<x path="haxe.Function"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Display the matched elements by fading them to opaque.</haxe_doc>
				</fadeIn>
				<fadeIn public="1" set="method">
					<f a="?duration:?easing:?complete">
						<x path="haxe.extern.EitherType">
							<x path="Float"/>
							<c path="String"/>
						</x>
						<c path="String"/>
						<x path="haxe.Function"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Display the matched elements by fading them to opaque.</haxe_doc>
				</fadeIn>
			</overloads>
		</fadeIn>
		<fadeOut public="1" set="method">
			<f a="options">
				<d/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Hide the matched elements by fading them to transparent.</haxe_doc>
			<overloads>
				<fadeOut public="1" set="method">
					<f a="?duration:?complete">
						<x path="haxe.extern.EitherType">
							<x path="Float"/>
							<c path="String"/>
						</x>
						<x path="haxe.Function"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Hide the matched elements by fading them to transparent.</haxe_doc>
				</fadeOut>
				<fadeOut public="1" set="method">
					<f a="?duration:?easing:?complete">
						<x path="haxe.extern.EitherType">
							<x path="Float"/>
							<c path="String"/>
						</x>
						<c path="String"/>
						<x path="haxe.Function"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Hide the matched elements by fading them to transparent.</haxe_doc>
				</fadeOut>
			</overloads>
		</fadeOut>
		<fadeTo public="1" set="method">
			<f a="duration:opacity:?complete">
				<x path="haxe.extern.EitherType">
					<x path="Float"/>
					<c path="String"/>
				</x>
				<x path="Float"/>
				<x path="haxe.Function"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Adjust the opacity of the matched elements.</haxe_doc>
			<overloads><fadeTo public="1" set="method">
	<f a="duration:opacity:?easing:?complete">
		<x path="haxe.extern.EitherType">
			<x path="Float"/>
			<c path="String"/>
		</x>
		<x path="Float"/>
		<c path="String"/>
		<x path="haxe.Function"/>
		<c path="js.jquery.JQuery"/>
	</f>
	<haxe_doc>Adjust the opacity of the matched elements.</haxe_doc>
</fadeTo></overloads>
		</fadeTo>
		<fadeToggle public="1" set="method">
			<f a="options">
				<d/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Display or hide the matched elements by animating their opacity.</haxe_doc>
			<overloads><fadeToggle public="1" set="method">
	<f a="?duration:?easing:?complete">
		<x path="haxe.extern.EitherType">
			<x path="Float"/>
			<c path="String"/>
		</x>
		<c path="String"/>
		<x path="haxe.Function"/>
		<c path="js.jquery.JQuery"/>
	</f>
	<haxe_doc>Display or hide the matched elements by animating their opacity.</haxe_doc>
</fadeToggle></overloads>
		</fadeToggle>
		<filter public="1" set="method">
			<f a="selector">
				<c path="String"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Reduce the set of matched elements to those that match the selector or pass the function's test.</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="elements">
						<c path="js.html.Element"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Reduce the set of matched elements to those that match the selector or pass the function's test.</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="selection">
						<c path="js.jquery.JQuery"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Reduce the set of matched elements to those that match the selector or pass the function's test.</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="_function">
						<f a=":">
							<x path="Int"/>
							<c path="js.html.Element"/>
							<x path="Bool"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Reduce the set of matched elements to those that match the selector or pass the function's test.</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="selector">
				<c path="String"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.</haxe_doc>
			<overloads><find public="1" set="method">
	<f a="element">
		<x path="haxe.extern.EitherType">
			<c path="js.html.Element"/>
			<c path="js.jquery.JQuery"/>
		</x>
		<c path="js.jquery.JQuery"/>
	</f>
	<haxe_doc>Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.</haxe_doc>
</find></overloads>
		</find>
		<finish public="1" set="method">
			<f a="?queue">
				<c path="String"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements.</haxe_doc>
		</finish>
		<first public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>Reduce the set of matched elements to the first in the set.</haxe_doc>
		</first>
		<focus public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>Bind an event handler to the "focus" JavaScript event, or trigger that event on an element.</haxe_doc>
			<overloads>
				<focus public="1" set="method">
					<f a="handler">
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "focus" JavaScript event, or trigger that event on an element.</haxe_doc>
				</focus>
				<focus public="1" set="method">
					<f a="?eventData:handler">
						<d/>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "focus" JavaScript event, or trigger that event on an element.</haxe_doc>
				</focus>
			</overloads>
		</focus>
		<focusin public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>Bind an event handler to the "focusin" event.</haxe_doc>
			<overloads>
				<focusin public="1" set="method">
					<f a="handler">
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "focusin" event.</haxe_doc>
				</focusin>
				<focusin public="1" set="method">
					<f a="?eventData:handler">
						<d/>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "focusin" event.</haxe_doc>
				</focusin>
			</overloads>
		</focusin>
		<focusout public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>Bind an event handler to the "focusout" JavaScript event.</haxe_doc>
			<overloads>
				<focusout public="1" set="method">
					<f a="handler">
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "focusout" JavaScript event.</haxe_doc>
				</focusout>
				<focusout public="1" set="method">
					<f a="?eventData:handler">
						<d/>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "focusout" JavaScript event.</haxe_doc>
				</focusout>
			</overloads>
		</focusout>
		<get public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.Element"/></c></f>
			<haxe_doc>Retrieve one of the elements matched by the jQuery object.
		OR
		Retrieve the elements matched by the jQuery object.</haxe_doc>
			<overloads><get public="1" set="method">
	<f a="index">
		<x path="Int"/>
		<c path="js.html.Element"/>
	</f>
	<haxe_doc>Retrieve one of the elements matched by the jQuery object.
		OR
		Retrieve the elements matched by the jQuery object.</haxe_doc>
</get></overloads>
		</get>
		<has public="1" set="method">
			<f a="selector">
				<c path="String"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.</haxe_doc>
			<overloads><has public="1" set="method">
	<f a="contained">
		<c path="js.html.Element"/>
		<c path="js.jquery.JQuery"/>
	</f>
	<haxe_doc>Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.</haxe_doc>
</has></overloads>
		</has>
		<hasClass public="1" set="method">
			<f a="className">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determine whether any of the matched elements are assigned the given class.</haxe_doc>
		</hasClass>
		<height public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Set the CSS height of every matched element.
		OR
		Get the current computed height for the first element in the set of matched elements.</haxe_doc>
			<overloads>
				<height public="1" set="method">
					<f a="value">
						<x path="haxe.extern.EitherType">
							<x path="Float"/>
							<c path="String"/>
						</x>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Set the CSS height of every matched element.
		OR
		Get the current computed height for the first element in the set of matched elements.</haxe_doc>
				</height>
				<height public="1" set="method">
					<f a="_function">
						<f a=":">
							<x path="Int"/>
							<x path="Int"/>
							<x path="haxe.extern.EitherType">
								<x path="Float"/>
								<c path="String"/>
							</x>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Set the CSS height of every matched element.
		OR
		Get the current computed height for the first element in the set of matched elements.</haxe_doc>
				</height>
			</overloads>
		</height>
		<hide public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>Hide the matched elements.</haxe_doc>
			<overloads>
				<hide public="1" set="method">
					<f a="options">
						<d/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Hide the matched elements.</haxe_doc>
				</hide>
				<hide public="1" set="method">
					<f a="?duration:?complete">
						<x path="haxe.extern.EitherType">
							<x path="Float"/>
							<c path="String"/>
						</x>
						<x path="haxe.Function"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Hide the matched elements.</haxe_doc>
				</hide>
				<hide public="1" set="method">
					<f a="duration:?easing:?complete">
						<x path="haxe.extern.EitherType">
							<x path="Float"/>
							<c path="String"/>
						</x>
						<c path="String"/>
						<x path="haxe.Function"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Hide the matched elements.</haxe_doc>
				</hide>
			</overloads>
		</hide>
		<hover public="1" set="method">
			<f a="handlerInOut">
				<f a="">
					<c path="js.jquery.Event"/>
					<x path="Void"/>
				</f>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Bind two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements.
		OR
		Bind a single handler to the matched elements, to be executed when the mouse pointer enters or leaves the elements.</haxe_doc>
			<overloads><hover public="1" set="method">
	<f a="handlerIn:handlerOut">
		<f a="">
			<c path="js.jquery.Event"/>
			<x path="Void"/>
		</f>
		<f a="">
			<c path="js.jquery.Event"/>
			<x path="Void"/>
		</f>
		<c path="js.jquery.JQuery"/>
	</f>
	<haxe_doc>Bind two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements.
		OR
		Bind a single handler to the matched elements, to be executed when the mouse pointer enters or leaves the elements.</haxe_doc>
</hover></overloads>
		</hover>
		<html public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Get the HTML contents of the first element in the set of matched elements.
		OR
		Set the HTML contents of each element in the set of matched elements.</haxe_doc>
			<overloads>
				<html public="1" set="method">
					<f a="htmlString">
						<c path="String"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Get the HTML contents of the first element in the set of matched elements.
		OR
		Set the HTML contents of each element in the set of matched elements.</haxe_doc>
				</html>
				<html public="1" set="method">
					<f a="_function">
						<f a=":">
							<x path="Int"/>
							<c path="String"/>
							<c path="String"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Get the HTML contents of the first element in the set of matched elements.
		OR
		Set the HTML contents of each element in the set of matched elements.</haxe_doc>
				</html>
			</overloads>
		</html>
		<index public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Search for a given element from among the matched elements.</haxe_doc>
			<overloads>
				<index public="1" set="method">
					<f a="selector">
						<c path="String"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Search for a given element from among the matched elements.</haxe_doc>
				</index>
				<index public="1" set="method">
					<f a="element">
						<x path="haxe.extern.EitherType">
							<c path="js.html.Element"/>
							<c path="js.jquery.JQuery"/>
						</x>
						<x path="Int"/>
					</f>
					<haxe_doc>Search for a given element from among the matched elements.</haxe_doc>
				</index>
			</overloads>
		</index>
		<innerHeight public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Set the CSS inner height of each element in the set of matched elements.
		OR
		Get the current computed height for the first element in the set of matched elements, including padding but not border.</haxe_doc>
			<overloads>
				<innerHeight public="1" set="method">
					<f a="value">
						<x path="haxe.extern.EitherType">
							<x path="Float"/>
							<c path="String"/>
						</x>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Set the CSS inner height of each element in the set of matched elements.
		OR
		Get the current computed height for the first element in the set of matched elements, including padding but not border.</haxe_doc>
				</innerHeight>
				<innerHeight public="1" set="method">
					<f a="_function">
						<f a=":">
							<x path="Int"/>
							<x path="Float"/>
							<x path="haxe.extern.EitherType">
								<x path="Float"/>
								<c path="String"/>
							</x>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Set the CSS inner height of each element in the set of matched elements.
		OR
		Get the current computed height for the first element in the set of matched elements, including padding but not border.</haxe_doc>
				</innerHeight>
			</overloads>
		</innerHeight>
		<innerWidth public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Get the current computed inner width for the first element in the set of matched elements, including padding but not border.
		OR
		Set the CSS inner width of each element in the set of matched elements.</haxe_doc>
			<overloads>
				<innerWidth public="1" set="method">
					<f a="value">
						<x path="haxe.extern.EitherType">
							<x path="Float"/>
							<c path="String"/>
						</x>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Get the current computed inner width for the first element in the set of matched elements, including padding but not border.
		OR
		Set the CSS inner width of each element in the set of matched elements.</haxe_doc>
				</innerWidth>
				<innerWidth public="1" set="method">
					<f a="_function">
						<f a=":">
							<x path="Int"/>
							<x path="Float"/>
							<x path="haxe.extern.EitherType">
								<x path="Float"/>
								<c path="String"/>
							</x>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Get the current computed inner width for the first element in the set of matched elements, including padding but not border.
		OR
		Set the CSS inner width of each element in the set of matched elements.</haxe_doc>
				</innerWidth>
			</overloads>
		</innerWidth>
		<insertAfter public="1" set="method">
			<f a="target">
				<x path="haxe.extern.EitherType">
					<c path="js.html.Element"/>
					<x path="haxe.extern.EitherType">
						<c path="Array"><c path="js.html.Element"/></c>
						<x path="haxe.extern.EitherType">
							<c path="String"/>
							<c path="js.jquery.JQuery"/>
						</x>
					</x>
				</x>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Insert every element in the set of matched elements after the target.</haxe_doc>
		</insertAfter>
		<insertBefore public="1" set="method">
			<f a="target">
				<x path="haxe.extern.EitherType">
					<c path="js.html.Element"/>
					<x path="haxe.extern.EitherType">
						<c path="Array"><c path="js.html.Element"/></c>
						<x path="haxe.extern.EitherType">
							<c path="String"/>
							<c path="js.jquery.JQuery"/>
						</x>
					</x>
				</x>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Insert every element in the set of matched elements before the target.</haxe_doc>
		</insertBefore>
		<is public="1" set="method">
			<f a="selector">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Check the current matched set of elements against a selector, element, or jQuery object and return <code>true</code> if at least one of these elements matches the given arguments.]]></haxe_doc>
			<overloads>
				<is public="1" set="method">
					<f a="selection">
						<c path="js.jquery.JQuery"/>
						<x path="Bool"/>
					</f>
					<haxe_doc><![CDATA[Check the current matched set of elements against a selector, element, or jQuery object and return <code>true</code> if at least one of these elements matches the given arguments.]]></haxe_doc>
				</is>
				<is public="1" set="method">
					<f a="elements">
						<c path="js.html.Element"/>
						<x path="Bool"/>
					</f>
					<haxe_doc><![CDATA[Check the current matched set of elements against a selector, element, or jQuery object and return <code>true</code> if at least one of these elements matches the given arguments.]]></haxe_doc>
				</is>
				<is public="1" set="method">
					<f a="_function">
						<f a=":">
							<x path="Int"/>
							<c path="js.html.Element"/>
							<x path="Bool"/>
						</f>
						<x path="Bool"/>
					</f>
					<haxe_doc><![CDATA[Check the current matched set of elements against a selector, element, or jQuery object and return <code>true</code> if at least one of these elements matches the given arguments.]]></haxe_doc>
				</is>
			</overloads>
		</is>
		<jquery public="1">
			<c path="String"/>
			<haxe_doc>A string containing the jQuery version number.</haxe_doc>
		</jquery>
		<keydown public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>Bind an event handler to the "keydown" JavaScript event, or trigger that event on an element.</haxe_doc>
			<overloads>
				<keydown public="1" set="method">
					<f a="handler">
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "keydown" JavaScript event, or trigger that event on an element.</haxe_doc>
				</keydown>
				<keydown public="1" set="method">
					<f a="?eventData:handler">
						<d/>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "keydown" JavaScript event, or trigger that event on an element.</haxe_doc>
				</keydown>
			</overloads>
		</keydown>
		<keypress public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>Bind an event handler to the "keypress" JavaScript event, or trigger that event on an element.</haxe_doc>
			<overloads>
				<keypress public="1" set="method">
					<f a="handler">
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "keypress" JavaScript event, or trigger that event on an element.</haxe_doc>
				</keypress>
				<keypress public="1" set="method">
					<f a="?eventData:handler">
						<d/>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "keypress" JavaScript event, or trigger that event on an element.</haxe_doc>
				</keypress>
			</overloads>
		</keypress>
		<keyup public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>Bind an event handler to the "keyup" JavaScript event, or trigger that event on an element.</haxe_doc>
			<overloads>
				<keyup public="1" set="method">
					<f a="handler">
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "keyup" JavaScript event, or trigger that event on an element.</haxe_doc>
				</keyup>
				<keyup public="1" set="method">
					<f a="?eventData:handler">
						<d/>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "keyup" JavaScript event, or trigger that event on an element.</haxe_doc>
				</keyup>
			</overloads>
		</keyup>
		<last public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>Reduce the set of matched elements to the final one in the set.</haxe_doc>
		</last>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of elements in the jQuery object.</haxe_doc>
		</length>
		<live public="1" set="method">
			<f a="events">
				<d/>
				<c path="js.jquery.JQuery"/>
			</f>
			<meta><m n=":deprecated"><e>"Deprecated since jQuery 1.7"</e></m></meta>
			<haxe_doc>Attach an event handler for all elements which match the current selector, now and in the future.</haxe_doc>
			<overloads>
				<live public="1" set="method">
					<f a="events:handler">
						<c path="String"/>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<meta><m n=":deprecated"><e>"Deprecated since jQuery 1.7"</e></m></meta>
					<haxe_doc>Attach an event handler for all elements which match the current selector, now and in the future.</haxe_doc>
				</live>
				<live public="1" set="method">
					<f a="events:?data:handler">
						<c path="String"/>
						<d/>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<meta><m n=":deprecated"><e>"Deprecated since jQuery 1.7"</e></m></meta>
					<haxe_doc>Attach an event handler for all elements which match the current selector, now and in the future.</haxe_doc>
				</live>
			</overloads>
		</live>
		<load public="1" set="method">
			<f a="handler">
				<f a="">
					<c path="js.jquery.Event"/>
					<x path="Void"/>
				</f>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Bind an event handler to the "load" JavaScript event.
		OR
		Load data from the server and place the returned HTML into the matched element.</haxe_doc>
			<overloads>
				<load public="1" set="method">
					<f a="?eventData:handler">
						<d/>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "load" JavaScript event.
		OR
		Load data from the server and place the returned HTML into the matched element.</haxe_doc>
				</load>
				<load public="1" set="method">
					<f a="url:?data:?complete">
						<c path="String"/>
						<d/>
						<f a="::">
							<c path="String"/>
							<c path="String"/>
							<c path="js.jquery.JqXHR"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "load" JavaScript event.
		OR
		Load data from the server and place the returned HTML into the matched element.</haxe_doc>
				</load>
			</overloads>
		</load>
		<map public="1" set="method">
			<f a="callback">
				<f a=":">
					<x path="Int"/>
					<c path="js.html.Element"/>
					<d/>
				</f>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Pass each element in the current matched set through a function, producing a new jQuery object containing the return values.</haxe_doc>
		</map>
		<mousedown public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>Bind an event handler to the "mousedown" JavaScript event, or trigger that event on an element.</haxe_doc>
			<overloads>
				<mousedown public="1" set="method">
					<f a="handler">
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "mousedown" JavaScript event, or trigger that event on an element.</haxe_doc>
				</mousedown>
				<mousedown public="1" set="method">
					<f a="?eventData:handler">
						<d/>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "mousedown" JavaScript event, or trigger that event on an element.</haxe_doc>
				</mousedown>
			</overloads>
		</mousedown>
		<mouseenter public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.</haxe_doc>
			<overloads>
				<mouseenter public="1" set="method">
					<f a="handler">
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.</haxe_doc>
				</mouseenter>
				<mouseenter public="1" set="method">
					<f a="?eventData:handler">
						<d/>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.</haxe_doc>
				</mouseenter>
			</overloads>
		</mouseenter>
		<mouseleave public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.</haxe_doc>
			<overloads>
				<mouseleave public="1" set="method">
					<f a="handler">
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.</haxe_doc>
				</mouseleave>
				<mouseleave public="1" set="method">
					<f a="?eventData:handler">
						<d/>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.</haxe_doc>
				</mouseleave>
			</overloads>
		</mouseleave>
		<mousemove public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>Bind an event handler to the "mousemove" JavaScript event, or trigger that event on an element.</haxe_doc>
			<overloads>
				<mousemove public="1" set="method">
					<f a="handler">
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "mousemove" JavaScript event, or trigger that event on an element.</haxe_doc>
				</mousemove>
				<mousemove public="1" set="method">
					<f a="?eventData:handler">
						<d/>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "mousemove" JavaScript event, or trigger that event on an element.</haxe_doc>
				</mousemove>
			</overloads>
		</mousemove>
		<mouseout public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>Bind an event handler to the "mouseout" JavaScript event, or trigger that event on an element.</haxe_doc>
			<overloads>
				<mouseout public="1" set="method">
					<f a="handler">
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "mouseout" JavaScript event, or trigger that event on an element.</haxe_doc>
				</mouseout>
				<mouseout public="1" set="method">
					<f a="?eventData:handler">
						<d/>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "mouseout" JavaScript event, or trigger that event on an element.</haxe_doc>
				</mouseout>
			</overloads>
		</mouseout>
		<mouseover public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>Bind an event handler to the "mouseover" JavaScript event, or trigger that event on an element.</haxe_doc>
			<overloads>
				<mouseover public="1" set="method">
					<f a="handler">
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "mouseover" JavaScript event, or trigger that event on an element.</haxe_doc>
				</mouseover>
				<mouseover public="1" set="method">
					<f a="?eventData:handler">
						<d/>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "mouseover" JavaScript event, or trigger that event on an element.</haxe_doc>
				</mouseover>
			</overloads>
		</mouseover>
		<mouseup public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>Bind an event handler to the "mouseup" JavaScript event, or trigger that event on an element.</haxe_doc>
			<overloads>
				<mouseup public="1" set="method">
					<f a="handler">
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "mouseup" JavaScript event, or trigger that event on an element.</haxe_doc>
				</mouseup>
				<mouseup public="1" set="method">
					<f a="?eventData:handler">
						<d/>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "mouseup" JavaScript event, or trigger that event on an element.</haxe_doc>
				</mouseup>
			</overloads>
		</mouseup>
		<next public="1" set="method">
			<f a="?selector">
				<c path="String"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector.</haxe_doc>
		</next>
		<nextAll public="1" set="method">
			<f a="?selector">
				<c path="String"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Get all following siblings of each element in the set of matched elements, optionally filtered by a selector.</haxe_doc>
		</nextAll>
		<nextUntil public="1" set="method">
			<f a="?selector:?filter">
				<c path="String"/>
				<c path="String"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed.</haxe_doc>
			<overloads><nextUntil public="1" set="method">
	<f a="?element:?filter">
		<x path="haxe.extern.EitherType">
			<c path="js.html.Element"/>
			<c path="js.jquery.JQuery"/>
		</x>
		<c path="String"/>
		<c path="js.jquery.JQuery"/>
	</f>
	<haxe_doc>Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed.</haxe_doc>
</nextUntil></overloads>
		</nextUntil>
		<not public="1" set="method">
			<f a="selector">
				<x path="haxe.extern.EitherType">
					<c path="js.html.Element"/>
					<x path="haxe.extern.EitherType">
						<c path="Array"><c path="js.html.Element"/></c>
						<c path="String"/>
					</x>
				</x>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Remove elements from the set of matched elements.</haxe_doc>
			<overloads>
				<not public="1" set="method">
					<f a="selection">
						<c path="js.jquery.JQuery"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Remove elements from the set of matched elements.</haxe_doc>
				</not>
				<not public="1" set="method">
					<f a="_function">
						<f a=":">
							<x path="Int"/>
							<c path="js.html.Element"/>
							<x path="Bool"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Remove elements from the set of matched elements.</haxe_doc>
				</not>
			</overloads>
		</not>
		<off public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>Remove an event handler.</haxe_doc>
			<overloads>
				<off public="1" set="method">
					<f a="event">
						<c path="js.jquery.Event"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Remove an event handler.</haxe_doc>
				</off>
				<off public="1" set="method">
					<f a="events:?selector">
						<d/>
						<c path="String"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Remove an event handler.</haxe_doc>
				</off>
				<off public="1" set="method">
					<f a="events:?selector:?handler">
						<c path="String"/>
						<c path="String"/>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Remove an event handler.</haxe_doc>
				</off>
			</overloads>
		</off>
		<offset public="1" set="method">
			<f a=""><a>
	<top><x path="Float"/></top>
	<left><x path="Float"/></left>
</a></f>
			<haxe_doc>Get the current coordinates of the first element in the set of matched elements, relative to the document.
		OR
		Set the current coordinates of every element in the set of matched elements, relative to the document.</haxe_doc>
			<overloads>
				<offset public="1" set="method">
					<f a="coordinates">
						<a>
							<top><x path="Float"/></top>
							<left><x path="Float"/></left>
						</a>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Get the current coordinates of the first element in the set of matched elements, relative to the document.
		OR
		Set the current coordinates of every element in the set of matched elements, relative to the document.</haxe_doc>
				</offset>
				<offset public="1" set="method">
					<f a="_function">
						<f a=":">
							<x path="Int"/>
							<a>
								<top><x path="Float"/></top>
								<left><x path="Float"/></left>
							</a>
							<d/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Get the current coordinates of the first element in the set of matched elements, relative to the document.
		OR
		Set the current coordinates of every element in the set of matched elements, relative to the document.</haxe_doc>
				</offset>
			</overloads>
		</offset>
		<offsetParent public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>Get the closest ancestor element that is positioned.</haxe_doc>
		</offsetParent>
		<on public="1" set="method">
			<f a="events:?selector:?data">
				<d/>
				<c path="String"/>
				<d/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Attach an event handler function for one or more events to the selected elements.</haxe_doc>
			<overloads><on public="1" set="method">
	<f a="events:?selector:?data:handler">
		<c path="String"/>
		<c path="String"/>
		<d/>
		<f a=":">
			<c path="js.jquery.Event"/>
			<x path="haxe.extern.Rest"><d/></x>
			<x path="Void"/>
		</f>
		<c path="js.jquery.JQuery"/>
	</f>
	<haxe_doc>Attach an event handler function for one or more events to the selected elements.</haxe_doc>
</on></overloads>
		</on>
		<one public="1" set="method">
			<f a="events:?data:handler">
				<c path="String"/>
				<d/>
				<f a="">
					<c path="js.jquery.Event"/>
					<x path="Void"/>
				</f>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Attach a handler to an event for the elements. The handler is executed at most once per element per event type.</haxe_doc>
			<overloads>
				<one public="1" set="method">
					<f a="events:?selector:?data">
						<d/>
						<c path="String"/>
						<d/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Attach a handler to an event for the elements. The handler is executed at most once per element per event type.</haxe_doc>
				</one>
				<one public="1" set="method">
					<f a="events:?selector:?data:handler">
						<c path="String"/>
						<c path="String"/>
						<d/>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Attach a handler to an event for the elements. The handler is executed at most once per element per event type.</haxe_doc>
				</one>
			</overloads>
		</one>
		<outerHeight public="1" set="method">
			<f a="value">
				<x path="haxe.extern.EitherType">
					<x path="Float"/>
					<c path="String"/>
				</x>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Get the current computed height for the first element in the set of matched elements, including padding, border, and optionally margin. Returns a number (without "px") representation of the value or null if called on an empty set of elements.
		OR
		Set the CSS outer Height of each element in the set of matched elements.</haxe_doc>
			<overloads>
				<outerHeight public="1" set="method">
					<f a="_function">
						<x path="haxe.Function"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Get the current computed height for the first element in the set of matched elements, including padding, border, and optionally margin. Returns a number (without "px") representation of the value or null if called on an empty set of elements.
		OR
		Set the CSS outer Height of each element in the set of matched elements.</haxe_doc>
				</outerHeight>
				<outerHeight public="1" set="method">
					<f a="?includeMargin">
						<x path="Bool"/>
						<x path="Float"/>
					</f>
					<haxe_doc>Get the current computed height for the first element in the set of matched elements, including padding, border, and optionally margin. Returns a number (without "px") representation of the value or null if called on an empty set of elements.
		OR
		Set the CSS outer Height of each element in the set of matched elements.</haxe_doc>
				</outerHeight>
			</overloads>
		</outerHeight>
		<outerWidth public="1" set="method">
			<f a="value">
				<x path="haxe.extern.EitherType">
					<x path="Float"/>
					<c path="String"/>
				</x>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Get the current computed width for the first element in the set of matched elements, including padding and border.
		OR
		Set the CSS outer width of each element in the set of matched elements.</haxe_doc>
			<overloads>
				<outerWidth public="1" set="method">
					<f a="_function">
						<x path="haxe.Function"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Get the current computed width for the first element in the set of matched elements, including padding and border.
		OR
		Set the CSS outer width of each element in the set of matched elements.</haxe_doc>
				</outerWidth>
				<outerWidth public="1" set="method">
					<f a="?includeMargin">
						<x path="Bool"/>
						<x path="Float"/>
					</f>
					<haxe_doc>Get the current computed width for the first element in the set of matched elements, including padding and border.
		OR
		Set the CSS outer width of each element in the set of matched elements.</haxe_doc>
				</outerWidth>
			</overloads>
		</outerWidth>
		<parent public="1" set="method">
			<f a="?selector">
				<c path="String"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Get the parent of each element in the current set of matched elements, optionally filtered by a selector.</haxe_doc>
		</parent>
		<parents public="1" set="method">
			<f a="?selector">
				<c path="String"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector.</haxe_doc>
		</parents>
		<parentsUntil public="1" set="method">
			<f a="?selector:?filter">
				<c path="String"/>
				<c path="String"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object.</haxe_doc>
			<overloads><parentsUntil public="1" set="method">
	<f a="?element:?filter">
		<x path="haxe.extern.EitherType">
			<c path="js.html.Element"/>
			<c path="js.jquery.JQuery"/>
		</x>
		<c path="String"/>
		<c path="js.jquery.JQuery"/>
	</f>
	<haxe_doc>Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object.</haxe_doc>
</parentsUntil></overloads>
		</parentsUntil>
		<position public="1" set="method">
			<f a=""><a>
	<top><x path="Float"/></top>
	<left><x path="Float"/></left>
</a></f>
			<haxe_doc>Get the current coordinates of the first element in the set of matched elements, relative to the offset parent.</haxe_doc>
		</position>
		<prepend public="1" set="method">
			<f a="_function">
				<f a=":">
					<x path="Int"/>
					<c path="String"/>
					<x path="haxe.extern.EitherType">
						<c path="js.html.Element"/>
						<x path="haxe.extern.EitherType">
							<c path="String"/>
							<c path="js.jquery.JQuery"/>
						</x>
					</x>
				</f>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.</haxe_doc>
			<overloads><prepend public="1" set="method">
	<f a="content:?content">
		<x path="haxe.extern.EitherType">
			<c path="Array"><c path="String"/></c>
			<x path="haxe.extern.EitherType">
				<c path="Array"><c path="js.jquery.JQuery"/></c>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Element"/>
					<x path="haxe.extern.EitherType">
						<c path="Array"><c path="js.html.Element"/></c>
						<x path="haxe.extern.EitherType">
							<c path="js.html.NodeList"/>
							<x path="haxe.extern.EitherType">
								<c path="String"/>
								<c path="js.jquery.JQuery"/>
							</x>
						</x>
					</x>
				</x>
			</x>
		</x>
		<x path="haxe.extern.EitherType">
			<c path="Array"><c path="String"/></c>
			<x path="haxe.extern.EitherType">
				<c path="Array"><c path="js.jquery.JQuery"/></c>
				<x path="haxe.extern.EitherType">
					<c path="js.html.Element"/>
					<x path="haxe.extern.EitherType">
						<c path="Array"><c path="js.html.Element"/></c>
						<x path="haxe.extern.EitherType">
							<c path="js.html.NodeList"/>
							<x path="haxe.extern.EitherType">
								<c path="String"/>
								<c path="js.jquery.JQuery"/>
							</x>
						</x>
					</x>
				</x>
			</x>
		</x>
		<c path="js.jquery.JQuery"/>
	</f>
	<haxe_doc>Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.</haxe_doc>
</prepend></overloads>
		</prepend>
		<prependTo public="1" set="method">
			<f a="target">
				<x path="haxe.extern.EitherType">
					<c path="js.html.Element"/>
					<x path="haxe.extern.EitherType">
						<c path="Array"><c path="js.html.Element"/></c>
						<x path="haxe.extern.EitherType">
							<c path="String"/>
							<c path="js.jquery.JQuery"/>
						</x>
					</x>
				</x>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Insert every element in the set of matched elements to the beginning of the target.</haxe_doc>
		</prependTo>
		<prev public="1" set="method">
			<f a="?selector">
				<c path="String"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Get the immediately preceding sibling of each element in the set of matched elements. If a selector is provided, it retrieves the previous sibling only if it matches that selector.</haxe_doc>
		</prev>
		<prevAll public="1" set="method">
			<f a="?selector">
				<c path="String"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector.</haxe_doc>
		</prevAll>
		<prevUntil public="1" set="method">
			<f a="?selector:?filter">
				<c path="String"/>
				<c path="String"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object.</haxe_doc>
			<overloads><prevUntil public="1" set="method">
	<f a="?element:?filter">
		<x path="haxe.extern.EitherType">
			<c path="js.html.Element"/>
			<c path="js.jquery.JQuery"/>
		</x>
		<c path="String"/>
		<c path="js.jquery.JQuery"/>
	</f>
	<haxe_doc>Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object.</haxe_doc>
</prevUntil></overloads>
		</prevUntil>
		<promise public="1" set="method">
			<f a="?type:?target">
				<c path="String"/>
				<d/>
				<t path="js.jquery.Promise"/>
			</f>
			<haxe_doc>Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished.</haxe_doc>
		</promise>
		<prop public="1" set="method">
			<f a="propertyName">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Set one or more properties for the set of matched elements.
		OR
		Get the value of a property for the first element in the set of matched elements.</haxe_doc>
			<overloads>
				<prop public="1" set="method">
					<f a="properties">
						<d/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Set one or more properties for the set of matched elements.
		OR
		Get the value of a property for the first element in the set of matched elements.</haxe_doc>
				</prop>
				<prop public="1" set="method">
					<f a="propertyName:_function">
						<c path="String"/>
						<f a=":">
							<x path="Int"/>
							<d/>
							<d/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Set one or more properties for the set of matched elements.
		OR
		Get the value of a property for the first element in the set of matched elements.</haxe_doc>
				</prop>
				<prop public="1" set="method">
					<f a="propertyName:value">
						<c path="String"/>
						<d/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Set one or more properties for the set of matched elements.
		OR
		Get the value of a property for the first element in the set of matched elements.</haxe_doc>
				</prop>
			</overloads>
		</prop>
		<pushStack public="1" set="method">
			<f a="elements">
				<x path="haxe.extern.EitherType">
					<c path="Array"><c path="js.html.Element"/></c>
					<c path="js.html.NodeList"/>
				</x>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Add a collection of DOM elements onto the jQuery stack.</haxe_doc>
			<overloads><pushStack public="1" set="method">
	<f a="elements:name:arguments">
		<x path="haxe.extern.EitherType">
			<c path="Array"><c path="js.html.Element"/></c>
			<c path="js.html.NodeList"/>
		</x>
		<c path="String"/>
		<c path="Array"><d/></c>
		<c path="js.jquery.JQuery"/>
	</f>
	<haxe_doc>Add a collection of DOM elements onto the jQuery stack.</haxe_doc>
</pushStack></overloads>
		</pushStack>
		<queue public="1" set="method">
			<f a="?queueName">
				<c path="String"/>
				<c path="Array"><f a=""><x path="Void"/></f></c>
			</f>
			<haxe_doc>Show the queue of functions to be executed on the matched elements.
		OR
		Manipulate the queue of functions to be executed, once for each matched element.</haxe_doc>
			<overloads>
				<queue public="1" set="method">
					<f a="?queueName:newQueue">
						<c path="String"/>
						<c path="Array"><f a=""><x path="Void"/></f></c>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Show the queue of functions to be executed on the matched elements.
		OR
		Manipulate the queue of functions to be executed, once for each matched element.</haxe_doc>
				</queue>
				<queue public="1" set="method">
					<f a="?queueName:callback">
						<c path="String"/>
						<f a="">
							<x path="haxe.Function"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Show the queue of functions to be executed on the matched elements.
		OR
		Manipulate the queue of functions to be executed, once for each matched element.</haxe_doc>
				</queue>
			</overloads>
		</queue>
		<ready public="1" set="method">
			<f a="handler">
				<x path="haxe.Function"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Specify a function to execute when the DOM is fully loaded.</haxe_doc>
		</ready>
		<remove public="1" set="method">
			<f a="?selector">
				<c path="String"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Remove the set of matched elements from the DOM.</haxe_doc>
		</remove>
		<removeAttr public="1" set="method">
			<f a="attributeName">
				<c path="String"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Remove an attribute from each element in the set of matched elements.</haxe_doc>
		</removeAttr>
		<removeClass public="1" set="method">
			<f a="_function">
				<f a=":">
					<x path="Int"/>
					<c path="String"/>
					<c path="String"/>
				</f>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Remove a single class, multiple classes, or all classes from each element in the set of matched elements.</haxe_doc>
			<overloads><removeClass public="1" set="method">
	<f a="?className">
		<c path="String"/>
		<c path="js.jquery.JQuery"/>
	</f>
	<haxe_doc>Remove a single class, multiple classes, or all classes from each element in the set of matched elements.</haxe_doc>
</removeClass></overloads>
		</removeClass>
		<removeData public="1" set="method">
			<f a="?name">
				<c path="String"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Remove a previously-stored piece of data.</haxe_doc>
			<overloads><removeData public="1" set="method">
	<f a="?list">
		<x path="haxe.extern.EitherType">
			<c path="Array"><c path="String"/></c>
			<c path="String"/>
		</x>
		<c path="js.jquery.JQuery"/>
	</f>
	<haxe_doc>Remove a previously-stored piece of data.</haxe_doc>
</removeData></overloads>
		</removeData>
		<removeProp public="1" set="method">
			<f a="propertyName">
				<c path="String"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Remove a property for the set of matched elements.</haxe_doc>
		</removeProp>
		<replaceAll public="1" set="method">
			<f a="target">
				<x path="haxe.extern.EitherType">
					<c path="Array"><c path="js.html.Element"/></c>
					<x path="haxe.extern.EitherType">
						<c path="js.html.Element"/>
						<x path="haxe.extern.EitherType">
							<c path="String"/>
							<c path="js.jquery.JQuery"/>
						</x>
					</x>
				</x>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Replace each target element with the set of matched elements.</haxe_doc>
		</replaceAll>
		<replaceWith public="1" set="method">
			<f a="newContent">
				<x path="haxe.extern.EitherType">
					<c path="js.html.Element"/>
					<x path="haxe.extern.EitherType">
						<c path="Array"><c path="js.html.Element"/></c>
						<x path="haxe.extern.EitherType">
							<c path="String"/>
							<c path="js.jquery.JQuery"/>
						</x>
					</x>
				</x>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed.</haxe_doc>
			<overloads><replaceWith public="1" set="method">
	<f a="_function">
		<x path="haxe.Function"/>
		<c path="js.jquery.JQuery"/>
	</f>
	<haxe_doc>Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed.</haxe_doc>
</replaceWith></overloads>
		</replaceWith>
		<resize public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>Bind an event handler to the "resize" JavaScript event, or trigger that event on an element.</haxe_doc>
			<overloads>
				<resize public="1" set="method">
					<f a="handler">
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "resize" JavaScript event, or trigger that event on an element.</haxe_doc>
				</resize>
				<resize public="1" set="method">
					<f a="?eventData:handler">
						<d/>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "resize" JavaScript event, or trigger that event on an element.</haxe_doc>
				</resize>
			</overloads>
		</resize>
		<scroll public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>Bind an event handler to the "scroll" JavaScript event, or trigger that event on an element.</haxe_doc>
			<overloads>
				<scroll public="1" set="method">
					<f a="handler">
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "scroll" JavaScript event, or trigger that event on an element.</haxe_doc>
				</scroll>
				<scroll public="1" set="method">
					<f a="?eventData:handler">
						<d/>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "scroll" JavaScript event, or trigger that event on an element.</haxe_doc>
				</scroll>
			</overloads>
		</scroll>
		<scrollLeft public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Get the current horizontal position of the scroll bar for the first element in the set of matched elements.
		OR
		Set the current horizontal position of the scroll bar for each of the set of matched elements.</haxe_doc>
			<overloads><scrollLeft public="1" set="method">
	<f a="value">
		<x path="Float"/>
		<c path="js.jquery.JQuery"/>
	</f>
	<haxe_doc>Get the current horizontal position of the scroll bar for the first element in the set of matched elements.
		OR
		Set the current horizontal position of the scroll bar for each of the set of matched elements.</haxe_doc>
</scrollLeft></overloads>
		</scrollLeft>
		<scrollTop public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Set the current vertical position of the scroll bar for each of the set of matched elements.
		OR
		Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element.</haxe_doc>
			<overloads><scrollTop public="1" set="method">
	<f a="value">
		<x path="Float"/>
		<c path="js.jquery.JQuery"/>
	</f>
	<haxe_doc>Set the current vertical position of the scroll bar for each of the set of matched elements.
		OR
		Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element.</haxe_doc>
</scrollTop></overloads>
		</scrollTop>
		<select public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>Bind an event handler to the "select" JavaScript event, or trigger that event on an element.</haxe_doc>
			<overloads>
				<select public="1" set="method">
					<f a="handler">
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "select" JavaScript event, or trigger that event on an element.</haxe_doc>
				</select>
				<select public="1" set="method">
					<f a="?eventData:handler">
						<d/>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "select" JavaScript event, or trigger that event on an element.</haxe_doc>
				</select>
			</overloads>
		</select>
		<selector public="1">
			<c path="String"/>
			<meta><m n=":deprecated"><e>"Deprecated since jQuery 1.7"</e></m></meta>
			<haxe_doc>A selector representing selector passed to jQuery(), if any, when creating the original set.</haxe_doc>
		</selector>
		<serialize public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Encode a set of form elements as a string for submission.</haxe_doc>
		</serialize>
		<serializeArray public="1" set="method">
			<f a=""><c path="Array"><d/></c></f>
			<haxe_doc>Encode a set of form elements as an array of names and values.</haxe_doc>
		</serializeArray>
		<show public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>Display the matched elements.</haxe_doc>
			<overloads>
				<show public="1" set="method">
					<f a="options">
						<d/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Display the matched elements.</haxe_doc>
				</show>
				<show public="1" set="method">
					<f a="?duration:?complete">
						<x path="haxe.extern.EitherType">
							<x path="Float"/>
							<c path="String"/>
						</x>
						<x path="haxe.Function"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Display the matched elements.</haxe_doc>
				</show>
				<show public="1" set="method">
					<f a="duration:?easing:?complete">
						<x path="haxe.extern.EitherType">
							<x path="Float"/>
							<c path="String"/>
						</x>
						<c path="String"/>
						<x path="haxe.Function"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Display the matched elements.</haxe_doc>
				</show>
			</overloads>
		</show>
		<siblings public="1" set="method">
			<f a="?selector">
				<c path="String"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Get the siblings of each element in the set of matched elements, optionally filtered by a selector.</haxe_doc>
		</siblings>
		<size public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":deprecated"><e>"Deprecated since jQuery 1.8"</e></m></meta>
			<haxe_doc>Return the number of elements in the jQuery object.</haxe_doc>
		</size>
		<slice public="1" set="method">
			<f a="start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Reduce the set of matched elements to a subset specified by a range of indices.</haxe_doc>
		</slice>
		<slideDown public="1" set="method">
			<f a="options">
				<d/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Display the matched elements with a sliding motion.</haxe_doc>
			<overloads>
				<slideDown public="1" set="method">
					<f a="?duration:?complete">
						<x path="haxe.extern.EitherType">
							<x path="Float"/>
							<c path="String"/>
						</x>
						<x path="haxe.Function"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Display the matched elements with a sliding motion.</haxe_doc>
				</slideDown>
				<slideDown public="1" set="method">
					<f a="?duration:?easing:?complete">
						<x path="haxe.extern.EitherType">
							<x path="Float"/>
							<c path="String"/>
						</x>
						<c path="String"/>
						<x path="haxe.Function"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Display the matched elements with a sliding motion.</haxe_doc>
				</slideDown>
			</overloads>
		</slideDown>
		<slideToggle public="1" set="method">
			<f a="options">
				<d/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Display or hide the matched elements with a sliding motion.</haxe_doc>
			<overloads>
				<slideToggle public="1" set="method">
					<f a="?duration:?complete">
						<x path="haxe.extern.EitherType">
							<x path="Float"/>
							<c path="String"/>
						</x>
						<x path="haxe.Function"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Display or hide the matched elements with a sliding motion.</haxe_doc>
				</slideToggle>
				<slideToggle public="1" set="method">
					<f a="?duration:?easing:?complete">
						<x path="haxe.extern.EitherType">
							<x path="Float"/>
							<c path="String"/>
						</x>
						<c path="String"/>
						<x path="haxe.Function"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Display or hide the matched elements with a sliding motion.</haxe_doc>
				</slideToggle>
			</overloads>
		</slideToggle>
		<slideUp public="1" set="method">
			<f a="options">
				<d/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Hide the matched elements with a sliding motion.</haxe_doc>
			<overloads>
				<slideUp public="1" set="method">
					<f a="?duration:?complete">
						<x path="haxe.extern.EitherType">
							<x path="Float"/>
							<c path="String"/>
						</x>
						<x path="haxe.Function"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Hide the matched elements with a sliding motion.</haxe_doc>
				</slideUp>
				<slideUp public="1" set="method">
					<f a="?duration:?easing:?complete">
						<x path="haxe.extern.EitherType">
							<x path="Float"/>
							<c path="String"/>
						</x>
						<c path="String"/>
						<x path="haxe.Function"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Hide the matched elements with a sliding motion.</haxe_doc>
				</slideUp>
			</overloads>
		</slideUp>
		<stop public="1" set="method">
			<f a="?clearQueue:?jumpToEnd">
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Stop the currently-running animation on the matched elements.</haxe_doc>
			<overloads><stop public="1" set="method">
	<f a="?queue:?clearQueue:?jumpToEnd">
		<c path="String"/>
		<x path="Bool"/>
		<x path="Bool"/>
		<c path="js.jquery.JQuery"/>
	</f>
	<haxe_doc>Stop the currently-running animation on the matched elements.</haxe_doc>
</stop></overloads>
		</stop>
		<submit public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>Bind an event handler to the "submit" JavaScript event, or trigger that event on an element.</haxe_doc>
			<overloads>
				<submit public="1" set="method">
					<f a="handler">
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "submit" JavaScript event, or trigger that event on an element.</haxe_doc>
				</submit>
				<submit public="1" set="method">
					<f a="?eventData:handler">
						<d/>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind an event handler to the "submit" JavaScript event, or trigger that event on an element.</haxe_doc>
				</submit>
			</overloads>
		</submit>
		<text public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Set the content of each element in the set of matched elements to the specified text.
		OR
		Get the combined text contents of each element in the set of matched elements, including their descendants.</haxe_doc>
			<overloads>
				<text public="1" set="method">
					<f a="text">
						<x path="haxe.extern.EitherType">
							<x path="Float"/>
							<x path="haxe.extern.EitherType">
								<x path="Bool"/>
								<c path="String"/>
							</x>
						</x>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Set the content of each element in the set of matched elements to the specified text.
		OR
		Get the combined text contents of each element in the set of matched elements, including their descendants.</haxe_doc>
				</text>
				<text public="1" set="method">
					<f a="_function">
						<f a=":">
							<x path="Int"/>
							<c path="String"/>
							<c path="String"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Set the content of each element in the set of matched elements to the specified text.
		OR
		Get the combined text contents of each element in the set of matched elements, including their descendants.</haxe_doc>
				</text>
			</overloads>
		</text>
		<toArray public="1" set="method">
			<f a=""><c path="Array"><c path="js.html.Element"/></c></f>
			<haxe_doc>Retrieve all the elements contained in the jQuery set, as an array.</haxe_doc>
		</toArray>
		<toggle public="1" set="method">
			<f a="display">
				<x path="Bool"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Bind two or more handlers to the matched elements, to be executed on alternate clicks.
		OR
		Display or hide the matched elements.</haxe_doc>
			<overloads>
				<toggle public="1" set="method">
					<f a="options">
						<d/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind two or more handlers to the matched elements, to be executed on alternate clicks.
		OR
		Display or hide the matched elements.</haxe_doc>
				</toggle>
				<toggle public="1" set="method">
					<f a="?duration:?complete">
						<x path="haxe.extern.EitherType">
							<x path="Float"/>
							<c path="String"/>
						</x>
						<x path="haxe.Function"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind two or more handlers to the matched elements, to be executed on alternate clicks.
		OR
		Display or hide the matched elements.</haxe_doc>
				</toggle>
				<toggle public="1" set="method">
					<f a="duration:?easing:?complete">
						<x path="haxe.extern.EitherType">
							<x path="Float"/>
							<c path="String"/>
						</x>
						<c path="String"/>
						<x path="haxe.Function"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind two or more handlers to the matched elements, to be executed on alternate clicks.
		OR
		Display or hide the matched elements.</haxe_doc>
				</toggle>
				<toggle public="1" set="method">
					<f a="handler:handler:?handler">
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Bind two or more handlers to the matched elements, to be executed on alternate clicks.
		OR
		Display or hide the matched elements.</haxe_doc>
				</toggle>
			</overloads>
		</toggle>
		<toggleClass public="1" set="method">
			<f a="className">
				<c path="String"/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the state argument.</haxe_doc>
			<overloads>
				<toggleClass public="1" set="method">
					<f a="?state">
						<x path="Bool"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the state argument.</haxe_doc>
				</toggleClass>
				<toggleClass public="1" set="method">
					<f a="className:state">
						<c path="String"/>
						<x path="Bool"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the state argument.</haxe_doc>
				</toggleClass>
				<toggleClass public="1" set="method">
					<f a="_function:?state">
						<f a="::">
							<x path="Int"/>
							<c path="String"/>
							<x path="Bool"/>
							<c path="String"/>
						</f>
						<x path="Bool"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the state argument.</haxe_doc>
				</toggleClass>
			</overloads>
		</toggleClass>
		<trigger public="1" set="method">
			<f a="eventType:?extraParameters">
				<c path="String"/>
				<d/>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Execute all handlers and behaviors attached to the matched elements for the given event type.</haxe_doc>
			<overloads><trigger public="1" set="method">
	<f a="event:?extraParameters">
		<c path="js.jquery.Event"/>
		<d/>
		<c path="js.jquery.JQuery"/>
	</f>
	<haxe_doc>Execute all handlers and behaviors attached to the matched elements for the given event type.</haxe_doc>
</trigger></overloads>
		</trigger>
		<triggerHandler public="1" set="method">
			<f a="eventType:?extraParameters">
				<c path="String"/>
				<d/>
				<d/>
			</f>
			<haxe_doc>Execute all handlers attached to an element for an event.</haxe_doc>
			<overloads><triggerHandler public="1" set="method">
	<f a="event:?extraParameters">
		<c path="js.jquery.Event"/>
		<d/>
		<d/>
	</f>
	<haxe_doc>Execute all handlers attached to an element for an event.</haxe_doc>
</triggerHandler></overloads>
		</triggerHandler>
		<unbind public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>Remove a previously-attached event handler from the elements.</haxe_doc>
			<overloads>
				<unbind public="1" set="method">
					<f a="event">
						<c path="js.jquery.Event"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Remove a previously-attached event handler from the elements.</haxe_doc>
				</unbind>
				<unbind public="1" set="method">
					<f a="eventType:_false">
						<c path="String"/>
						<x path="Bool"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Remove a previously-attached event handler from the elements.</haxe_doc>
				</unbind>
				<unbind public="1" set="method">
					<f a="eventType:?handler">
						<c path="String"/>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Remove a previously-attached event handler from the elements.</haxe_doc>
				</unbind>
			</overloads>
		</unbind>
		<undelegate public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.</haxe_doc>
			<overloads>
				<undelegate public="1" set="method">
					<f a="namespace">
						<c path="String"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.</haxe_doc>
				</undelegate>
				<undelegate public="1" set="method">
					<f a="selector:eventType">
						<c path="String"/>
						<c path="String"/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.</haxe_doc>
				</undelegate>
				<undelegate public="1" set="method">
					<f a="selector:events">
						<c path="String"/>
						<d/>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.</haxe_doc>
				</undelegate>
				<undelegate public="1" set="method">
					<f a="selector:eventType:handler">
						<c path="String"/>
						<c path="String"/>
						<f a="">
							<c path="js.jquery.Event"/>
							<x path="Void"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.</haxe_doc>
				</undelegate>
			</overloads>
		</undelegate>
		<unload public="1" set="method">
			<f a="handler">
				<f a="">
					<c path="js.jquery.Event"/>
					<x path="Void"/>
				</f>
				<c path="js.jquery.JQuery"/>
			</f>
			<meta><m n=":deprecated"><e>"Deprecated since jQuery 1.8"</e></m></meta>
			<haxe_doc>Bind an event handler to the "unload" JavaScript event.</haxe_doc>
			<overloads><unload public="1" set="method">
	<f a="?eventData:handler">
		<d/>
		<f a="">
			<c path="js.jquery.Event"/>
			<x path="Void"/>
		</f>
		<c path="js.jquery.JQuery"/>
	</f>
	<meta><m n=":deprecated"><e>"Deprecated since jQuery 1.8"</e></m></meta>
	<haxe_doc>Bind an event handler to the "unload" JavaScript event.</haxe_doc>
</unload></overloads>
		</unload>
		<unwrap public="1" set="method">
			<f a=""><c path="js.jquery.JQuery"/></f>
			<haxe_doc>Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place.</haxe_doc>
			<overloads><unwrap public="1" set="method">
	<f a="?selector">
		<c path="String"/>
		<c path="js.jquery.JQuery"/>
	</f>
	<haxe_doc>Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place.</haxe_doc>
</unwrap></overloads>
		</unwrap>
		<val public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>Set the value of each element in the set of matched elements.
		OR
		Get the current value of the first element in the set of matched elements.</haxe_doc>
			<overloads>
				<val public="1" set="method">
					<f a="value">
						<x path="haxe.extern.EitherType">
							<x path="Float"/>
							<x path="haxe.extern.EitherType">
								<c path="Array"><c path="String"/></c>
								<c path="String"/>
							</x>
						</x>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Set the value of each element in the set of matched elements.
		OR
		Get the current value of the first element in the set of matched elements.</haxe_doc>
				</val>
				<val public="1" set="method">
					<f a="_function">
						<f a=":">
							<x path="Int"/>
							<c path="String"/>
							<c path="String"/>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Set the value of each element in the set of matched elements.
		OR
		Get the current value of the first element in the set of matched elements.</haxe_doc>
				</val>
			</overloads>
		</val>
		<width public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Set the CSS width of each element in the set of matched elements.
		OR
		Get the current computed width for the first element in the set of matched elements.</haxe_doc>
			<overloads>
				<width public="1" set="method">
					<f a="value">
						<x path="haxe.extern.EitherType">
							<x path="Float"/>
							<c path="String"/>
						</x>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Set the CSS width of each element in the set of matched elements.
		OR
		Get the current computed width for the first element in the set of matched elements.</haxe_doc>
				</width>
				<width public="1" set="method">
					<f a="_function">
						<f a=":">
							<x path="Int"/>
							<x path="Int"/>
							<x path="haxe.extern.EitherType">
								<x path="Float"/>
								<c path="String"/>
							</x>
						</f>
						<c path="js.jquery.JQuery"/>
					</f>
					<haxe_doc>Set the CSS width of each element in the set of matched elements.
		OR
		Get the current computed width for the first element in the set of matched elements.</haxe_doc>
				</width>
			</overloads>
		</width>
		<wrap public="1" set="method">
			<f a="wrappingElement">
				<x path="haxe.extern.EitherType">
					<c path="js.html.Element"/>
					<x path="haxe.extern.EitherType">
						<c path="String"/>
						<c path="js.jquery.JQuery"/>
					</x>
				</x>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Wrap an HTML structure around each element in the set of matched elements.</haxe_doc>
			<overloads><wrap public="1" set="method">
	<f a="_function">
		<f a="">
			<x path="Int"/>
			<x path="haxe.extern.EitherType">
				<c path="String"/>
				<c path="js.jquery.JQuery"/>
			</x>
		</f>
		<c path="js.jquery.JQuery"/>
	</f>
	<haxe_doc>Wrap an HTML structure around each element in the set of matched elements.</haxe_doc>
</wrap></overloads>
		</wrap>
		<wrapAll public="1" set="method">
			<f a="wrappingElement">
				<x path="haxe.extern.EitherType">
					<c path="js.html.Element"/>
					<x path="haxe.extern.EitherType">
						<c path="String"/>
						<c path="js.jquery.JQuery"/>
					</x>
				</x>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Wrap an HTML structure around all elements in the set of matched elements.</haxe_doc>
			<overloads><wrapAll public="1" set="method">
	<f a="_function">
		<f a=""><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="js.jquery.JQuery"/>
</x></f>
		<c path="js.jquery.JQuery"/>
	</f>
	<haxe_doc>Wrap an HTML structure around all elements in the set of matched elements.</haxe_doc>
</wrapAll></overloads>
		</wrapAll>
		<wrapInner public="1" set="method">
			<f a="wrappingElement">
				<x path="haxe.extern.EitherType">
					<c path="js.html.Element"/>
					<x path="haxe.extern.EitherType">
						<c path="String"/>
						<c path="js.jquery.JQuery"/>
					</x>
				</x>
				<c path="js.jquery.JQuery"/>
			</f>
			<haxe_doc>Wrap an HTML structure around the content of each element in the set of matched elements.</haxe_doc>
			<overloads><wrapInner public="1" set="method">
	<f a="_function">
		<f a="">
			<x path="Int"/>
			<c path="String"/>
		</f>
		<c path="js.jquery.JQuery"/>
	</f>
	<haxe_doc>Wrap an HTML structure around the content of each element in the set of matched elements.</haxe_doc>
</wrapInner></overloads>
		</wrapInner>
		<iterator public="1" get="inline" set="null" line="1091">
			<f a=""><c path="js.jquery.JqIterator"/></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Haxe iterator.</haxe_doc>
		</iterator>
		<elements public="1" get="inline" set="null" line="1096">
			<f a=""><c path="js.jquery.JqEltsIterator"/></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Haxe iterator.</haxe_doc>
		</elements>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":selfCall"/></meta>
			<haxe_doc>Creates DOM elements on the fly from the provided string of raw HTML.
		OR
		Accepts a string containing a CSS selector which is then used to match a set of elements.
		OR
		Binds a function to be executed when the DOM has finished loading.</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="element">
						<c path="js.html.Element"/>
						<x path="Void"/>
					</f>
					<meta><m n=":selfCall"/></meta>
					<haxe_doc>Creates DOM elements on the fly from the provided string of raw HTML.
		OR
		Accepts a string containing a CSS selector which is then used to match a set of elements.
		OR
		Binds a function to be executed when the DOM has finished loading.</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="elementArray">
						<x path="haxe.extern.EitherType">
							<c path="js.html.NodeList"/>
							<c path="Array"><c path="js.html.Element"/></c>
						</x>
						<x path="Void"/>
					</f>
					<meta><m n=":selfCall"/></meta>
					<haxe_doc>Creates DOM elements on the fly from the provided string of raw HTML.
		OR
		Accepts a string containing a CSS selector which is then used to match a set of elements.
		OR
		Binds a function to be executed when the DOM has finished loading.</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="selection">
						<c path="js.jquery.JQuery"/>
						<x path="Void"/>
					</f>
					<meta><m n=":selfCall"/></meta>
					<haxe_doc>Creates DOM elements on the fly from the provided string of raw HTML.
		OR
		Accepts a string containing a CSS selector which is then used to match a set of elements.
		OR
		Binds a function to be executed when the DOM has finished loading.</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="callback">
						<x path="haxe.Function"/>
						<x path="Void"/>
					</f>
					<meta><m n=":selfCall"/></meta>
					<haxe_doc>Creates DOM elements on the fly from the provided string of raw HTML.
		OR
		Accepts a string containing a CSS selector which is then used to match a set of elements.
		OR
		Binds a function to be executed when the DOM has finished loading.</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":selfCall"/></meta>
					<haxe_doc>Creates DOM elements on the fly from the provided string of raw HTML.
		OR
		Accepts a string containing a CSS selector which is then used to match a set of elements.
		OR
		Binds a function to be executed when the DOM has finished loading.</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="html:attributes">
						<c path="String"/>
						<d/>
						<x path="Void"/>
					</f>
					<meta><m n=":selfCall"/></meta>
					<haxe_doc>Creates DOM elements on the fly from the provided string of raw HTML.
		OR
		Accepts a string containing a CSS selector which is then used to match a set of elements.
		OR
		Binds a function to be executed when the DOM has finished loading.</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="selector:?context">
						<c path="String"/>
						<x path="haxe.extern.EitherType">
							<c path="js.html.Element"/>
							<c path="js.jquery.JQuery"/>
						</x>
						<x path="Void"/>
					</f>
					<meta><m n=":selfCall"/></meta>
					<haxe_doc>Creates DOM elements on the fly from the provided string of raw HTML.
		OR
		Accepts a string containing a CSS selector which is then used to match a set of elements.
		OR
		Binds a function to be executed when the DOM has finished loading.</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="html:?ownerDocument">
						<c path="String"/>
						<c path="js.html.Document"/>
						<x path="Void"/>
					</f>
					<meta><m n=":selfCall"/></meta>
					<haxe_doc>Creates DOM elements on the fly from the provided string of raw HTML.
		OR
		Accepts a string containing a CSS selector which is then used to match a set of elements.
		OR
		Binds a function to be executed when the DOM has finished loading.</haxe_doc>
				</new>
			</overloads>
		</new>
		<meta><m n=":native"><e>"$"</e></m></meta>
	</class>
	<class path="js.jquery.JqEltsIterator" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/jquery/JqEltsIterator.hx">
		<j><c path="js.jquery.JQuery"/></j>
		<i><x path="Int"/></i>
		<hasNext public="1" get="inline" set="null" line="10"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="13"><f a=""><c path="js.jquery.JQuery"/></f></next>
		<new public="1" get="inline" set="null" line="6"><f a="j">
	<c path="js.jquery.JQuery"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="js.jquery.JqIterator" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/jquery/JqIterator.hx">
		<j><c path="js.jquery.JQuery"/></j>
		<i><x path="Int"/></i>
		<hasNext public="1" get="inline" set="null" line="10"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="13"><f a=""><c path="js.html.Element"/></f></next>
		<new public="1" get="inline" set="null" line="6"><f a="j">
	<c path="js.jquery.JQuery"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="js.jquery.JqXHR" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/jquery/JqXHR.hx" extern="1">
		<extends path="js.html.XMLHttpRequest"/>
		<always public="1" set="method">
			<f a="alwaysCallbacks:?alwaysCallbacks">
				<x path="haxe.extern.EitherType">
					<x path="haxe.Function"/>
					<c path="Array"><x path="haxe.Function"/></c>
				</x>
				<x path="haxe.extern.EitherType">
					<x path="haxe.Function"/>
					<c path="Array"><x path="haxe.Function"/></c>
				</x>
				<c path="js.jquery.Deferred"/>
			</f>
			<haxe_doc>Add handlers to be called when the Deferred object is either resolved or rejected.</haxe_doc>
		</always>
		<done public="1" set="method">
			<f a="doneCallbacks:?doneCallbacks">
				<x path="haxe.extern.EitherType">
					<x path="haxe.Function"/>
					<c path="Array"><x path="haxe.Function"/></c>
				</x>
				<x path="haxe.extern.EitherType">
					<x path="haxe.Function"/>
					<c path="Array"><x path="haxe.Function"/></c>
				</x>
				<c path="js.jquery.Deferred"/>
			</f>
			<haxe_doc>Add handlers to be called when the Deferred object is resolved.</haxe_doc>
		</done>
		<fail public="1" set="method">
			<f a="failCallbacks:?failCallbacks">
				<x path="haxe.extern.EitherType">
					<x path="haxe.Function"/>
					<c path="Array"><x path="haxe.Function"/></c>
				</x>
				<x path="haxe.extern.EitherType">
					<x path="haxe.Function"/>
					<c path="Array"><x path="haxe.Function"/></c>
				</x>
				<c path="js.jquery.Deferred"/>
			</f>
			<haxe_doc>Add handlers to be called when the Deferred object is rejected.</haxe_doc>
		</fail>
		<isRejected public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":deprecated"><e>"Deprecated since jQuery 1.7"</e></m></meta>
			<haxe_doc>Determine whether a Deferred object has been rejected.</haxe_doc>
		</isRejected>
		<isResolved public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":deprecated"><e>"Deprecated since jQuery 1.7"</e></m></meta>
			<haxe_doc>Determine whether a Deferred object has been resolved.</haxe_doc>
		</isResolved>
		<pipe public="1" set="method">
			<f a="?doneFilter:?failFilter">
				<x path="haxe.Function"/>
				<x path="haxe.Function"/>
				<t path="js.jquery.Promise"/>
			</f>
			<meta><m n=":deprecated"><e>"Deprecated since jQuery 1.8"</e></m></meta>
			<haxe_doc>Utility method to filter and/or chain Deferreds.</haxe_doc>
			<overloads><pipe public="1" set="method">
	<f a="?doneFilter:?failFilter:?progressFilter">
		<x path="haxe.Function"/>
		<x path="haxe.Function"/>
		<x path="haxe.Function"/>
		<t path="js.jquery.Promise"/>
	</f>
	<meta><m n=":deprecated"><e>"Deprecated since jQuery 1.8"</e></m></meta>
	<haxe_doc>Utility method to filter and/or chain Deferreds.</haxe_doc>
</pipe></overloads>
		</pipe>
		<progress public="1" set="method">
			<f a="progressCallbacks:?progressCallbacks">
				<x path="haxe.extern.EitherType">
					<x path="haxe.Function"/>
					<x path="haxe.extern.EitherType">
						<c path="Array"><d/></c>
						<c path="Array"><x path="haxe.Function"/></c>
					</x>
				</x>
				<x path="haxe.extern.EitherType">
					<x path="haxe.Function"/>
					<x path="haxe.extern.EitherType">
						<c path="Array"><d/></c>
						<c path="Array"><x path="haxe.Function"/></c>
					</x>
				</x>
				<c path="js.jquery.Deferred"/>
			</f>
			<haxe_doc>Add handlers to be called when the Deferred object generates progress notifications.</haxe_doc>
		</progress>
		<state public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Determine the current state of a Deferred object.</haxe_doc>
		</state>
		<then public="1" set="method">
			<f a="doneCallbacks:failCallbacks">
				<x path="haxe.extern.EitherType">
					<x path="haxe.Function"/>
					<c path="Array"><x path="haxe.Function"/></c>
				</x>
				<x path="haxe.extern.EitherType">
					<x path="haxe.Function"/>
					<c path="Array"><x path="haxe.Function"/></c>
				</x>
				<t path="js.jquery.Promise"/>
			</f>
			<haxe_doc>Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.</haxe_doc>
			<overloads>
				<then public="1" set="method">
					<f a="doneFilter:?failFilter:?progressFilter">
						<x path="haxe.Function"/>
						<x path="haxe.Function"/>
						<x path="haxe.Function"/>
						<t path="js.jquery.Promise"/>
					</f>
					<haxe_doc>Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.</haxe_doc>
				</then>
				<then public="1" set="method">
					<f a="doneCallbacks:failCallbacks:?progressCallbacks">
						<x path="haxe.extern.EitherType">
							<x path="haxe.Function"/>
							<c path="Array"><x path="haxe.Function"/></c>
						</x>
						<x path="haxe.extern.EitherType">
							<x path="haxe.Function"/>
							<c path="Array"><x path="haxe.Function"/></c>
						</x>
						<x path="haxe.extern.EitherType">
							<x path="haxe.Function"/>
							<c path="Array"><x path="haxe.Function"/></c>
						</x>
						<t path="js.jquery.Promise"/>
					</f>
					<haxe_doc>Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.</haxe_doc>
				</then>
			</overloads>
		</then>
		<meta><m n=":native"><e>"$.JqXHR"</e></m></meta>
	</class>
	<typedef path="js.jquery.Promise" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/jquery/Promise.hx">
		<a>
			<then set="method">
				<f a="doneCallbacks:failCallbacks">
					<x path="haxe.extern.EitherType">
						<x path="haxe.Function"/>
						<c path="Array"><x path="haxe.Function"/></c>
					</x>
					<x path="haxe.extern.EitherType">
						<x path="haxe.Function"/>
						<c path="Array"><x path="haxe.Function"/></c>
					</x>
					<t path="js.jquery.Promise"/>
				</f>
				<haxe_doc>Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.</haxe_doc>
				<overloads>
					<then public="1" set="method">
						<f a="doneFilter:?failFilter:?progressFilter">
							<x path="haxe.Function"/>
							<x path="haxe.Function"/>
							<x path="haxe.Function"/>
							<t path="js.jquery.Promise"/>
						</f>
						<haxe_doc>Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.</haxe_doc>
					</then>
					<then public="1" set="method">
						<f a="doneCallbacks:failCallbacks:?progressCallbacks">
							<x path="haxe.extern.EitherType">
								<x path="haxe.Function"/>
								<c path="Array"><x path="haxe.Function"/></c>
							</x>
							<x path="haxe.extern.EitherType">
								<x path="haxe.Function"/>
								<c path="Array"><x path="haxe.Function"/></c>
							</x>
							<x path="haxe.extern.EitherType">
								<x path="haxe.Function"/>
								<c path="Array"><x path="haxe.Function"/></c>
							</x>
							<t path="js.jquery.Promise"/>
						</f>
						<haxe_doc>Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.</haxe_doc>
					</then>
				</overloads>
			</then>
			<state set="method">
				<f a=""><c path="String"/></f>
				<haxe_doc>Determine the current state of a Deferred object.</haxe_doc>
			</state>
			<progress set="method">
				<f a="progressCallbacks:?progressCallbacks">
					<x path="haxe.extern.EitherType">
						<x path="haxe.Function"/>
						<x path="haxe.extern.EitherType">
							<c path="Array"><d/></c>
							<c path="Array"><x path="haxe.Function"/></c>
						</x>
					</x>
					<x path="haxe.extern.EitherType">
						<x path="haxe.Function"/>
						<x path="haxe.extern.EitherType">
							<c path="Array"><d/></c>
							<c path="Array"><x path="haxe.Function"/></c>
						</x>
					</x>
					<c path="js.jquery.Deferred"/>
				</f>
				<haxe_doc>Add handlers to be called when the Deferred object generates progress notifications.</haxe_doc>
			</progress>
			<pipe set="method">
				<f a="?doneFilter:?failFilter">
					<x path="haxe.Function"/>
					<x path="haxe.Function"/>
					<t path="js.jquery.Promise"/>
				</f>
				<meta><m n=":deprecated"><e>"Deprecated since jQuery 1.8"</e></m></meta>
				<haxe_doc>Utility method to filter and/or chain Deferreds.</haxe_doc>
				<overloads><pipe public="1" set="method">
	<f a="?doneFilter:?failFilter:?progressFilter">
		<x path="haxe.Function"/>
		<x path="haxe.Function"/>
		<x path="haxe.Function"/>
		<t path="js.jquery.Promise"/>
	</f>
	<meta><m n=":deprecated"><e>"Deprecated since jQuery 1.8"</e></m></meta>
	<haxe_doc>Utility method to filter and/or chain Deferreds.</haxe_doc>
</pipe></overloads>
			</pipe>
			<isResolved set="method">
				<f a=""><x path="Bool"/></f>
				<meta><m n=":deprecated"><e>"Deprecated since jQuery 1.7"</e></m></meta>
				<haxe_doc>Determine whether a Deferred object has been resolved.</haxe_doc>
			</isResolved>
			<isRejected set="method">
				<f a=""><x path="Bool"/></f>
				<meta><m n=":deprecated"><e>"Deprecated since jQuery 1.7"</e></m></meta>
				<haxe_doc>Determine whether a Deferred object has been rejected.</haxe_doc>
			</isRejected>
			<fail set="method">
				<f a="failCallbacks:?failCallbacks">
					<x path="haxe.extern.EitherType">
						<x path="haxe.Function"/>
						<c path="Array"><x path="haxe.Function"/></c>
					</x>
					<x path="haxe.extern.EitherType">
						<x path="haxe.Function"/>
						<c path="Array"><x path="haxe.Function"/></c>
					</x>
					<c path="js.jquery.Deferred"/>
				</f>
				<haxe_doc>Add handlers to be called when the Deferred object is rejected.</haxe_doc>
			</fail>
			<done set="method">
				<f a="doneCallbacks:?doneCallbacks">
					<x path="haxe.extern.EitherType">
						<x path="haxe.Function"/>
						<c path="Array"><x path="haxe.Function"/></c>
					</x>
					<x path="haxe.extern.EitherType">
						<x path="haxe.Function"/>
						<c path="Array"><x path="haxe.Function"/></c>
					</x>
					<c path="js.jquery.Deferred"/>
				</f>
				<haxe_doc>Add handlers to be called when the Deferred object is resolved.</haxe_doc>
			</done>
			<always set="method">
				<f a="alwaysCallbacks:?alwaysCallbacks">
					<x path="haxe.extern.EitherType">
						<x path="haxe.Function"/>
						<c path="Array"><x path="haxe.Function"/></c>
					</x>
					<x path="haxe.extern.EitherType">
						<x path="haxe.Function"/>
						<c path="Array"><x path="haxe.Function"/></c>
					</x>
					<c path="js.jquery.Deferred"/>
				</f>
				<haxe_doc>Add handlers to be called when the Deferred object is either resolved or rejected.</haxe_doc>
			</always>
		</a>
		<meta><m n=":native"><e>"$.Promise"</e></m></meta>
	</typedef>
	<typedef path="js.swfobject.SWFObjectEvent" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/swfobject/SWFObject.hx" module="js.swfobject.SWFObject"><a>
	<success>
		<x path="Bool"/>
		<haxe_doc><![CDATA[Boolean to indicate whether the creation of a Flash plugin-in <object> DOM was successful or not]]></haxe_doc>
	</success>
	<ref>
		<t path="Null"><c path="js.html.Element"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>HTML object element reference (null when success==false)</haxe_doc>
	</ref>
	<id>
		<c path="String"/>
		<haxe_doc>String indicating the ID used in swfobject.registerObject</haxe_doc>
	</id>
</a></typedef>
	<class path="js.swfobject.SWFObject" params="" file="/home/travis/build/HaxeFoundation/haxe/std/js/swfobject/SWFObject.hx" extern="1">
		<registerObject public="1" set="method" static="1">
			<f a="objectIdStr:swfVersionStr:xiSwfUrlStr:callbackFn">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<f a="">
					<t path="js.swfobject.SWFObjectEvent"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Embed Flash content and alternative content using standards compliant markup (the nested-objects method with proprietary Internet Explorer conditional comments), and use JavaScript to resolve the issues that markup alone cannot solve (also called static publishing).</haxe_doc>
		</registerObject>
		<getObjectById public="1" set="method" static="1">
			<f a="objectIdStr">
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>NOTE: For static publishing only (or: when using swfobject.registerObject() only)

		Returns the active object element. One of the side-effects of the nested-objects approach is that per SWF there are two object elements available in the HTML code, however you can only use one id or name attribute, because these have to be unique within a web page.</haxe_doc>
		</getObjectById>
		<embedSWF public="1" set="method" static="1">
			<f a="swfUrlStr:replaceElemIdStr:widthStr:heightStr:swfVersionStr:xiSwfUrlStr:flashvarsObj:parObj:attObj:callbackFn">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<d/>
				<d/>
				<d/>
				<f a="">
					<t path="js.swfobject.SWFObjectEvent"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Insert alternative content using standards compliant markup and embed Flash content with unobtrusive JavaScript (also called dynamic publishing).</haxe_doc>
		</embedSWF>
		<switchOffAutoHideShow public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Disable SWFObject's default show/hide behavior</haxe_doc>
		</switchOffAutoHideShow>
		<enableUriEncoding public="1" set="method" static="1"><f a="bool">
	<x path="Bool"/>
	<x path="Void"/>
</f></enableUriEncoding>
		<ua public="1" static="1"><a>
	<wk>
		<x path="haxe.extern.EitherType">
			<x path="Float"/>
			<x path="Bool"/>
		</x>
		<haxe_doc>the Webkit version or false if not Webkit</haxe_doc>
	</wk>
	<w3>
		<x path="Bool"/>
		<haxe_doc>a Boolean whether or not W3C DOM methods are supported</haxe_doc>
	</w3>
	<pv>
		<c path="Array"><x path="Int"/></c>
		<haxe_doc>an Array that contains the major, minor and release version number of the Flash Player</haxe_doc>
	</pv>
	<mac>
		<x path="Bool"/>
		<haxe_doc>a Boolean to indicate whether a visitor uses Mac OS or not</haxe_doc>
	</mac>
	<ie>
		<x path="Bool"/>
		<haxe_doc>a Boolean to indicate whether a visitor uses Internet Explorer on Windows or not</haxe_doc>
	</ie>
</a></ua>
		<getFlashPlayerVersion public="1" set="method" static="1">
			<f a=""><a>
	<release><x path="Int"/></release>
	<minor><x path="Int"/></minor>
	<major><x path="Int"/></major>
</a></f>
			<haxe_doc>Returns a JavaScript object containing the major version (major:Number), minor version (minor:Number) and release version (release:Number) of an installed Flash player. Please note that while Flash version numbers normally consist of major.minor.release.build, SWFObject only looks at the first 3 numbers, so both "WIN 9,0,18,0" (IE) or "Shockwave Flash 9 r18" (all other browsers) will translate to "9.0.18".</haxe_doc>
		</getFlashPlayerVersion>
		<hasFlashPlayerVersion public="1" set="method" static="1">
			<f a="versionStr">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns a Boolean to indicate whether or not a specific minimum version of the Flash plugin is installed. Please note that while Flash version numbers normally consist of major.minor.release.build, SWFObject only looks at the first 3 numbers, so both "WIN 9,0,18,0" (IE) or "Shockwave Flash 9 r18" (all other browsers) will translate to "9.0.18".</haxe_doc>
		</hasFlashPlayerVersion>
		<createSWF public="1" set="method" static="1">
			<f a="attObj:parObj:replaceElemIdStr">
				<d/>
				<d/>
				<c path="String"/>
				<c path="js.html.Element"/>
			</f>
			<haxe_doc>Exposes SWFObject's internal cross-browser method to create a SWF.</haxe_doc>
		</createSWF>
		<showExpressInstall public="1" set="method" static="1">
			<f a="att:par:replaceElemIdStr:callbackFn">
				<d/>
				<d/>
				<c path="String"/>
				<f a="">
					<t path="js.swfobject.SWFObjectEvent"/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Enables developers to reuse SWFObject's internal methods to create their custom Express Install and activate it via the API</haxe_doc>
		</showExpressInstall>
		<removeSWF public="1" set="method" static="1">
			<f a="objElemIdStr">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes a SWF from your web page. Is especially built to safely (only remove a SWF after it has been loaded, to avoid broken references) and completely (nullify references to avoid memory leaks) remove a SWF in Internet Explorer.</haxe_doc>
		</removeSWF>
		<createCSS public="1" set="method" static="1">
			<f a="selStr:declStr:?mediaStr:?newStyleBoolean">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Exposes SWFObject's internal cross-browser method to create a dynamic stylesheet. It's most important feature is that it can be called before the DOM of a page is loaded.</haxe_doc>
		</createCSS>
		<addDomLoadEvent public="1" set="method" static="1">
			<f a="fn">
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>A cross-browser method to execute a function as soon as the DOM of a web page is available. This method is supported by Gecko based browsers - like Firefox -, IE, Opera9+, and, Safari. For all other browsers the method will fall back to the addLoadEvent method.</haxe_doc>
		</addDomLoadEvent>
		<addLoadEvent public="1" set="method" static="1">
			<f a="fn">
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>A safe (it doesn't overwrite existing onload events) cross-browser method to execute a function on the window onload event (which will fire as soon as a web page including all of its assets are loaded).</haxe_doc>
		</addLoadEvent>
		<getQueryParamValue public="1" set="method" static="1">
			<f a="param">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Utility function that returns the value of the paramStr parameter in the URL query string or hash string. Similar functionality was already available in SWFObject 1.5 and lower.</haxe_doc>
		</getQueryParamValue>
		<version public="1" static="1">
			<c path="String"/>
			<haxe_doc>swfobject version</haxe_doc>
		</version>
		<haxe_doc>For detecting the Adobe Flash Player plugin and embedding Flash (swf) files.</haxe_doc>
		<meta><m n=":native"><e>"swfobject"</e></m></meta>
	</class>
</haxe>